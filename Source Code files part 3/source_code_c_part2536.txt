DCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseClass( 
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Prototype( 
            /* [defaultvalue] */ long Flags,
            /* [retval][out] */ BSTR *pPrototype) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *Type) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parameters( 
            /* [retval][out] */ CodeElements **ppParameters) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddParameter( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeParameter **ppCodeParameter) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveParameter( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeDelegate * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeDelegate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeDelegate * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeDelegate * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeDelegate * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeDelegate * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeDelegate * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeDelegate * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeDelegate * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeDelegate * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeDelegate * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeDelegate * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeDelegate * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeDelegate * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeDelegate * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeDelegate * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeDelegate * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeDelegate * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeDelegate * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeDelegate * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeDelegate * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeDelegate * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeDelegate * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeDelegate * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeDelegate * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeDelegate * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseClass )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Prototype )( 
            CodeDelegate * This,
            /* [defaultvalue] */ long Flags,
            /* [retval][out] */ BSTR *pPrototype);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeDelegate * This,
            CodeTypeRef *Type);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parameters )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppParameters);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddParameter )( 
            CodeDelegate * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeParameter **ppCodeParameter);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveParameter )( 
            CodeDelegate * This,
            VARIANT Element);
        
        END_INTERFACE
    } CodeDelegateVtbl;

    interface CodeDelegate
    {
        CONST_VTBL struct CodeDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeDelegate_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeDelegate_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeDelegate_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeDelegate_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeDelegate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeDelegate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeDelegate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeDelegate_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeDelegate_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeDelegate_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeDelegate_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeDelegate_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeDelegate_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeDelegate_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeDelegate_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeDelegate_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeDelegate_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeDelegate_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeDelegate_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeDelegate_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeDelegate_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeDelegate_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeDelegate_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeDelegate_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeDelegate_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeDelegate_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeDelegate_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeDelegate_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeDelegate_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeDelegate_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeDelegate_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeDelegate_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeDelegate_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeDelegate_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeDelegate_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeDelegate_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeDelegate_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeDelegate_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeDelegate_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeDelegate_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeDelegate_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeDelegate_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeDelegate_get_BaseClass(This,ppCodeClass)	\
    (This)->lpVtbl -> get_BaseClass(This,ppCodeClass)

#define CodeDelegate_get_Prototype(This,Flags,pPrototype)	\
    (This)->lpVtbl -> get_Prototype(This,Flags,pPrototype)

#define CodeDelegate_get_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,pCodeTypeRef)

#define CodeDelegate_put_Type(This,Type)	\
    (This)->lpVtbl -> put_Type(This,Type)

#define CodeDelegate_get_Parameters(This,ppParameters)	\
    (This)->lpVtbl -> get_Parameters(This,ppParameters)

#define CodeDelegate_AddParameter(This,Name,Type,Position,ppCodeParameter)	\
    (This)->lpVtbl -> AddParameter(This,Name,Type,Position,ppCodeParameter)

#define CodeDelegate_RemoveParameter(This,Element)	\
    (This)->lpVtbl -> RemoveParameter(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_DTE_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeDelegate_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Collection_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeDelegate_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Name_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeDelegate_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_Name_Proxy( 
    CodeDelegate * This,
    BSTR NewName);


void __RPC_STUB CodeDelegate_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_FullName_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeDelegate_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_ProjectItem_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeDelegate_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Kind_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeDelegate_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_IsCodeType_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeDelegate_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_InfoLocation_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeDelegate_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Children_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Language_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeDelegate_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_StartPoint_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeDelegate_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_EndPoint_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeDelegate_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_ExtenderNames_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeDelegate_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Extender_Proxy( 
    CodeDelegate * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeDelegate_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_ExtenderCATID_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeDelegate_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_GetStartPoint_Proxy( 
    CodeDelegate * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeDelegate_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_GetEndPoint_Proxy( 
    CodeDelegate * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeDelegate_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Parent_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeDelegate_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Namespace_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeDelegate_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Bases_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Members_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_Access_Proxy( 
    CodeDelegate * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeDelegate_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Access_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeDelegate_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Attributes_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_DocComment_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeDelegate_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_DocComment_Proxy( 
    CodeDelegate * This,
    BSTR DocComment);


void __RPC_STUB CodeDelegate_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Comment_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeDelegate_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_Comment_Proxy( 
    CodeDelegate * This,
    BSTR Comment);


void __RPC_STUB CodeDelegate_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_AddBase_Proxy( 
    CodeDelegate * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeDelegate_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_AddAttribute_Proxy( 
    CodeDelegate * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeDelegate_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_RemoveBase_Proxy( 
    CodeDelegate * This,
    VARIANT Element);


void __RPC_STUB CodeDelegate_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_RemoveMember_Proxy( 
    CodeDelegate * This,
    VARIANT Element);


void __RPC_STUB CodeDelegate_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_IsDerivedFrom_Proxy( 
    CodeDelegate * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeDelegate_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_DerivedTypes_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_BaseClass_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeDelegate_get_BaseClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Prototype_Proxy( 
    CodeDelegate * This,
    /* [defaultvalue] */ long Flags,
    /* [retval][out] */ BSTR *pPrototype);


void __RPC_STUB CodeDelegate_get_Prototype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Type_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeTypeRef **pCodeTypeRef);


void __RPC_STUB CodeDelegate_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_Type_Proxy( 
    CodeDelegate * This,
    CodeTypeRef *Type);


void __RPC_STUB CodeDelegate_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Parameters_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppParameters);


void __RPC_STUB CodeDelegate_get_Parameters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_AddParameter_Proxy( 
    CodeDelegate * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeParameter **ppCodeParameter);


void __RPC_STUB CodeDelegate_AddParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_RemoveParameter_Proxy( 
    CodeDelegate * This,
    VARIANT Element);


void __RPC_STUB CodeDelegate_RemoveParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeDelegate_INTERFACE_DEFINED__ */


#ifndef __CodeTypeRef_INTERFACE_DEFINED__
#define __CodeTypeRef_INTERFACE_DEFINED__

/* interface CodeTypeRef */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeTypeRef;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BC-0D4E-11D3-8997-00C04F688DDE")
    CodeTypeRef : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TypeKind( 
            /* [retval][out] */ enum vsCMTypeRef *pType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeType( 
            /* [retval][out] */ CodeType **ppCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CodeType( 
            CodeType *Type) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ElementType( 
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ElementType( 
            CodeTypeRef *Type) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AsString( 
            /* [retval][out] */ BSTR *pAsString) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AsFullName( 
            /* [retval][out] */ BSTR *pAsFullName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rank( 
            /* [retval][out] */ long *pRank) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rank( 
            long Rank) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateArrayType( 
            /* [defaultvalue] */ long Rank,
            /* [retval][out] */ CodeTypeRef **ppTypeRef) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeTypeRefVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeTypeRef * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeTypeRef * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeTypeRef * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeTypeRef * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeTypeRef * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeTypeRef * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeTypeRef * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeTypeRef * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeTypeRef * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TypeKind )( 
            CodeTypeRef * This,
            /* [retval][out] */ enum vsCMTypeRef *pType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeType )( 
            CodeTypeRef * This,
            /* [retval][out] */ CodeType **ppCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CodeType )( 
            CodeTypeRef * This,
            CodeType *Type);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ElementType )( 
            CodeTypeRef * This,
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ElementType )( 
            CodeTypeRef * This,
            CodeTypeRef *Type);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AsString )( 
            CodeTypeRef * This,
            /* [retval][out] */ BSTR *pAsString);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AsFullName )( 
            CodeTypeRef * This,
            /* [retval][out] */ BSTR *pAsFullName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rank )( 
            CodeTypeRef * This,
            /* [retval][out] */ long *pRank);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rank )( 
            CodeTypeRef * This,
            long Rank);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateArrayType )( 
            CodeTypeRef * This,
            /* [defaultvalue] */ long Rank,
            /* [retval][out] */ CodeTypeRef **ppTypeRef);
        
        END_INTERFACE
    } CodeTypeRefVtbl;

    interface CodeTypeRef
    {
        CONST_VTBL struct CodeTypeRefVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeTypeRef_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeTypeRef_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeTypeRef_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeTypeRef_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeTypeRef_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeTypeRef_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeTypeRef_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeTypeRef_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeTypeRef_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeTypeRef_get_TypeKind(This,pType)	\
    (This)->lpVtbl -> get_TypeKind(This,pType)

#define CodeTypeRef_get_CodeType(This,ppCodeType)	\
    (This)->lpVtbl -> get_CodeType(This,ppCodeType)

#define CodeTypeRef_put_CodeType(This,Type)	\
    (This)->lpVtbl -> put_CodeType(This,Type)

#define CodeTypeRef_get_ElementType(This,ppCodeTypeRef)	\
    (This)->lpVtbl -> get_ElementType(This,ppCodeTypeRef)

#define CodeTypeRef_put_ElementType(This,Type)	\
    (This)->lpVtbl -> put_ElementType(This,Type)

#define CodeTypeRef_get_AsString(This,pAsString)	\
    (This)->lpVtbl -> get_AsString(This,pAsString)

#define CodeTypeRef_get_AsFullName(This,pAsFullName)	\
    (This)->lpVtbl -> get_AsFullName(This,pAsFullName)

#define CodeTypeRef_get_Rank(This,pRank)	\
    (This)->lpVtbl -> get_Rank(This,pRank)

#define CodeTypeRef_put_Rank(This,Rank)	\
    (This)->lpVtbl -> put_Rank(This,Rank)

#define CodeTypeRef_CreateArrayType(This,Rank,ppTypeRef)	\
    (This)->lpVtbl -> CreateArrayType(This,Rank,ppTypeRef)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_DTE_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeTypeRef_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_Parent_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeTypeRef_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_TypeKind_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ enum vsCMTypeRef *pType);


void __RPC_STUB CodeTypeRef_get_TypeKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_CodeType_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ CodeType **ppCodeType);


void __RPC_STUB CodeTypeRef_get_CodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_put_CodeType_Proxy( 
    CodeTypeRef * This,
    CodeType *Type);


void __RPC_STUB CodeTypeRef_put_CodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_ElementType_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);


void __RPC_STUB CodeTypeRef_get_ElementType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_put_ElementType_Proxy( 
    CodeTypeRef * This,
    CodeTypeRef *Type);


void __RPC_STUB CodeTypeRef_put_ElementType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_AsString_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ BSTR *pAsString);


void __RPC_STUB CodeTypeRef_get_AsString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_AsFullName_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ BSTR *pAsFullName);


void __RPC_STUB CodeTypeRef_get_AsFullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_Rank_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ long *pRank);


void __RPC_STUB CodeTypeRef_get_Rank_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_put_Rank_Proxy( 
    CodeTypeRef * This,
    long Rank);


void __RPC_STUB CodeTypeRef_put_Rank_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_CreateArrayType_Proxy( 
    CodeTypeRef * This,
    /* [defaultvalue] */ long Rank,
    /* [retval][out] */ CodeTypeRef **ppTypeRef);


void __RPC_STUB CodeTypeRef_CreateArrayType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeTypeRef_INTERFACE_DEFINED__ */


#ifndef __CodeClass_INTERFACE_DEFINED__
#define __CodeClass_INTERFACE_DEFINED__

/* interface CodeClass */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeClass;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42514-91CD-4D3A-8B25-A317D8032B24")
    CodeClass : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImplementedInterfaces( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAbstract( 
            /* [retval][out] */ VARIANT_BOOL *pIsAbstract) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsAbstract( 
            VARIANT_BOOL Abstract) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImplementedInterface( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddVariable( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeVariable **ppCodeVariable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddProperty( 
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveInterface( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeClassVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeClass * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeClass * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeClass * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeClass * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeClass * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeClass * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeClass * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeClass * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeClass * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeClass * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeClass * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeClass * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeClass * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeClass * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeClass * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeClass * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeClass * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeClass * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeClass * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeClass * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeClass * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeClass * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeClass * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeClass * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeClass * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeClass * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeClass * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeClass * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeClass * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeClass * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImplementedInterfaces )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAbstract )( 
            CodeClass * This,
            /* [retval][out] */ VARIANT_BOOL *pIsAbstract);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsAbstract )( 
            CodeClass * This,
            VARIANT_BOOL Abstract);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImplementedInterface )( 
            CodeClass * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            CodeClass * This,
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddVariable )( 
            CodeClass * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeVariable **ppCodeVariable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddProperty )( 
            CodeClass * This,
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            CodeClass * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            CodeClass * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            CodeClass * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            CodeClass * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveInterface )( 
            CodeClass * This,
            VARIANT Element);
        
        END_INTERFACE
    } CodeClassVtbl;

    interface CodeClass
    {
        CONST_VTBL struct CodeClassVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeClass_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeClass_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeClass_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeClass_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeClass_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeClass_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeClass_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeClass_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeClass_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeClass_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeClass_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeClass_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeClass_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeClass_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeClass_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeClass_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeClass_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeClass_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeClass_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeClass_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeClass_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeClass_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeClass_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeClass_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeClass_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeClass_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeClass_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeClass_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeClass_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeClass_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeClass_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeClass_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeClass_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeClass_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeClass_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeClass_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeClass_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeClass_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeClass_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeClass_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeClass_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeClass_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeClass_get_ImplementedInterfaces(This,ppCodeElements)	\
    (This)->lpVtbl -> get_ImplementedInterfaces(This,ppCodeElements)

#define CodeClass_get_IsAbstract(This,pIsAbstract)	\
    (This)->lpVtbl -> get_IsAbstract(This,pIsAbstract)

#define CodeClass_put_IsAbstract(This,Abstract)	\
    (This)->lpVtbl -> put_IsAbstract(This,Abstract)

#define CodeClass_AddImplementedInterface(This,Base,Position,ppCodeInterface)	\
    (This)->lpVtbl -> AddImplementedInterface(This,Base,Position,ppCodeInterface)

#define CodeClass_AddFunction(This,Name,Kind,Type,Position,Access,Location,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Kind,Type,Position,Access,Location,ppCodeFunction)

#define CodeClass_AddVariable(This,Name,Type,Position,Access,Location,ppCodeVariable)	\
    (This)->lpVtbl -> AddVariable(This,Name,Type,Position,Access,Location,ppCodeVariable)

#define CodeClass_AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)	\
    (This)->lpVtbl -> AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)

#define CodeClass_AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define CodeClass_AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define CodeClass_AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)

#define CodeClass_AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)

#define CodeClass_RemoveInterface(This,Element)	\
    (This)->lpVtbl -> RemoveInterface(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_DTE_Proxy( 
    CodeClass * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeClass_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Collection_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeClass_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Name_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeClass_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_Name_Proxy( 
    CodeClass * This,
    BSTR NewName);


void __RPC_STUB CodeClass_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_FullName_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeClass_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_ProjectItem_Proxy( 
    CodeClass * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeClass_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Kind_Proxy( 
    CodeClass * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeClass_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_IsCodeType_Proxy( 
    CodeClass * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeClass_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_InfoLocation_Proxy( 
    CodeClass * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeClass_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Children_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Language_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeClass_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_StartPoint_Proxy( 
    CodeClass * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeClass_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_EndPoint_Proxy( 
    CodeClass * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeClass_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_ExtenderNames_Proxy( 
    CodeClass * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeClass_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Extender_Proxy( 
    CodeClass * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeClass_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_ExtenderCATID_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeClass_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_GetStartPoint_Proxy( 
    CodeClass * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeClass_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_GetEndPoint_Proxy( 
    CodeClass * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeClass_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Parent_Proxy( 
    CodeClass * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeClass_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Namespace_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeClass_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Bases_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Members_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_Access_Proxy( 
    CodeClass * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeClass_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Access_Proxy( 
    CodeClass * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeClass_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Attributes_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_DocComment_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeClass_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_DocComment_Proxy( 
    CodeClass * This,
    BSTR DocComment);


void __RPC_STUB CodeClass_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Comment_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeClass_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_Comment_Proxy( 
    CodeClass * This,
    BSTR Comment);


void __RPC_STUB CodeClass_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddBase_Proxy( 
    CodeClass * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeClass_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddAttribute_Proxy( 
    CodeClass * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeClass_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_RemoveBase_Proxy( 
    CodeClass * This,
    VARIANT Element);


void __RPC_STUB CodeClass_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_RemoveMember_Proxy( 
    CodeClass * This,
    VARIANT Element);


void __RPC_STUB CodeClass_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_IsDerivedFrom_Proxy( 
    CodeClass * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeClass_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_DerivedTypes_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_ImplementedInterfaces_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_ImplementedInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_IsAbstract_Proxy( 
    CodeClass * This,
    /* [retval][out] */ VARIANT_BOOL *pIsAbstract);


void __RPC_STUB CodeClass_get_IsAbstract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_IsAbstract_Proxy( 
    CodeClass * This,
    VARIANT_BOOL Abstract);


void __RPC_STUB CodeClass_put_IsAbstract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddImplementedInterface_Proxy( 
    CodeClass * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB CodeClass_AddImplementedInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddFunction_Proxy( 
    CodeClass * This,
    BSTR Name,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeClass_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddVariable_Proxy( 
    CodeClass * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeVariable **ppCodeVariable);


void __RPC_STUB CodeClass_AddVariable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddProperty_Proxy( 
    CodeClass * This,
    BSTR GetterName,
    BSTR PutterName,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeProperty **ppCodeProperty);


void __RPC_STUB CodeClass_AddProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddClass_Proxy( 
    CodeClass * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeClass_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddStruct_Proxy( 
    CodeClass * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB CodeClass_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddEnum_Proxy( 
    CodeClass * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB CodeClass_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddDelegate_Proxy( 
    CodeClass * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB CodeClass_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_RemoveInterface_Proxy( 
    CodeClass * This,
    VARIANT Element);


void __RPC_STUB CodeClass_RemoveInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeClass_INTERFACE_DEFINED__ */



#ifndef __CodeModelLanguageConstants_MODULE_DEFINED__
#define __CodeModelLanguageConstants_MODULE_DEFINED__


/* module CodeModelLanguageConstants */
/* [dllname][uuid] */ 

const LPSTR vsCMLanguageVC	=	"{B5E9BD32-6D3E-4B5D-925E-8A43B79820B4}";

const LPSTR vsCMLanguageVB	=	"{B5E9BD33-6D3E-4B5D-925E-8A43B79820B4}";

const LPSTR vsCMLanguageCSharp	=	"{B5E9BD34-6D3E-4B5D-925E-8A43B79820B4}";

const LPSTR vsCMLanguageIDL	=	"{B5E9BD35-6D3E-4B5D-925E-8A43B79820B4}";

const LPSTR vsCMLanguageMC	=	"{B5E9BD36-6D3E-4B5D-925E-8A43B79820B4}";

#endif /* __CodeModelLanguageConstants_MODULE_DEFINED__ */

#ifndef __FileCodeModel_INTERFACE_DEFINED__
#define __FileCodeModel_INTERFACE_DEFINED__

/* interface FileCodeModel */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_FileCodeModel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ED1A3F99-4477-11d3-89BF-00C04F688DDE")
    FileCodeModel : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeElements( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElementFromPoint( 
            TextPoint *Point,
            enum vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppCodeElement) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNamespace( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddInterface( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddVariable( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeVariable **ppCodeVariable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FileCodeModelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FileCodeModel * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FileCodeModel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FileCodeModel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FileCodeModel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FileCodeModel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FileCodeModel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FileCodeModel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            FileCodeModel * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FileCodeModel * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            FileCodeModel * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElements )( 
            FileCodeModel * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CodeElementFromPoint )( 
            FileCodeModel * This,
            TextPoint *Point,
            enum vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppCodeElement);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddInterface )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            FileCodeModel * This,
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddVariable )( 
            FileCodeModel * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeVariable **ppCodeVariable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            FileCodeModel * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            FileCodeModel * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            FileCodeModel * This,
            VARIANT Element);
        
        END_INTERFACE
    } FileCodeModelVtbl;

    interface FileCodeModel
    {
        CONST_VTBL struct FileCodeModelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FileCodeModel_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define FileCodeModel_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define FileCodeModel_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define FileCodeModel_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define FileCodeModel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define FileCodeModel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define FileCodeModel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define FileCodeModel_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define FileCodeModel_get_Parent(This,pProjItem)	\
    (This)->lpVtbl -> get_Parent(This,pProjItem)

#define FileCodeModel_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define FileCodeModel_get_CodeElements(This,ppCodeElements)	\
    (This)->lpVtbl -> get_CodeElements(This,ppCodeElements)

#define FileCodeModel_CodeElementFromPoint(This,Point,Scope,ppCodeElement)	\
    (This)->lpVtbl -> CodeElementFromPoint(This,Point,Scope,ppCodeElement)

#define FileCodeModel_AddNamespace(This,Name,Position,ppCodeNamespace)	\
    (This)->lpVtbl -> AddNamespace(This,Name,Position,ppCodeNamespace)

#define FileCodeModel_AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define FileCodeModel_AddInterface(This,Name,Position,Bases,Access,ppCodeInterface)	\
    (This)->lpVtbl -> AddInterface(This,Name,Position,Bases,Access,ppCodeInterface)

#define FileCodeModel_AddFunction(This,Name,Kind,Type,Position,Access,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Kind,Type,Position,Access,ppCodeFunction)

#define FileCodeModel_AddVariable(This,Name,Type,Position,Access,ppCodeVariable)	\
    (This)->lpVtbl -> AddVariable(This,Name,Type,Position,Access,ppCodeVariable)

#define FileCodeModel_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define FileCodeModel_AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define FileCodeModel_AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)

#define FileCodeModel_AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)

#define FileCodeModel_Remove(This,Element)	\
    (This)->lpVtbl -> Remove(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_get_DTE_Proxy( 
    FileCodeModel * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB FileCodeModel_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_get_Parent_Proxy( 
    FileCodeModel * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB FileCodeModel_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_get_Language_Proxy( 
    FileCodeModel * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB FileCodeModel_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_get_CodeElements_Proxy( 
    FileCodeModel * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB FileCodeModel_get_CodeElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_CodeElementFromPoint_Proxy( 
    FileCodeModel * This,
    TextPoint *Point,
    enum vsCMElement Scope,
    /* [retval][out] */ CodeElement **ppCodeElement);


void __RPC_STUB FileCodeModel_CodeElementFromPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddNamespace_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB FileCodeModel_AddNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddClass_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB FileCodeModel_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddInterface_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB FileCodeModel_AddInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddFunction_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB FileCodeModel_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddVariable_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeVariable **ppCodeVariable);


void __RPC_STUB FileCodeModel_AddVariable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddAttribute_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB FileCodeModel_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddStruct_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB FileCodeModel_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddEnum_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB FileCodeModel_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddDelegate_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB FileCodeModel_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_Remove_Proxy( 
    FileCodeModel * This,
    VARIANT Element);


void __RPC_STUB FileCodeModel_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __FileCodeModel_INTERFACE_DEFINED__ */


#ifndef __Breakpoint_INTERFACE_DEFINED__
#define __Breakpoint_INTERFACE_DEFINED__

/* interface Breakpoint */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Breakpoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("11C5114C-BB00-11d2-8AD1-00C04F79E479")
    Breakpoint : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ dbgBreakpointType *Type) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LocationType( 
            /* [retval][out] */ dbgBreakpointLocationType *LocationType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionName( 
            /* [retval][out] */ BSTR *FunctionName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionLineOffset( 
            /* [retval][out] */ long *Offset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionColumnOffset( 
            /* [retval][out] */ long *Offset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_File( 
            /* [retval][out] */ BSTR *File) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileLine( 
            /* [retval][out] */ long *Line) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileColumn( 
            /* [retval][out] */ long *Column) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConditionType( 
            /* [retval][out] */ dbgBreakpointConditionType *ConditionType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Condition( 
            /* [retval][out] */ BSTR *Condition) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *Language) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HitCountType( 
            /* [retval][out] */ dbgHitCountType *HitCountType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HitCountTarget( 
            /* [retval][out] */ long *HitCountTarget) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *Enabled) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL Enable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tag( 
            /* [retval][out] */ BSTR *Tag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Tag( 
            /* [in] */ BSTR Tag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentHits( 
            /* [retval][out] */ long *CurHitCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Program( 
            /* [retval][out] */ Program **Program) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Breakpoint **Breakpoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BreakpointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Breakpoint * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Breakpoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Breakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Breakpoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Breakpoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Breakpoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Breakpoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Breakpoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Breakpoint * This,
            /* [retval][out] */ dbgBreakpointType *Type);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Breakpoint * This,
            /* [in] */ BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocationType )( 
            Breakpoint * This,
            /* [retval][out] */ dbgBreakpointLocationType *LocationType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionName )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *FunctionName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionLineOffset )( 
            Breakpoint * This,
            /* [retval][out] */ long *Offset);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionColumnOffset )( 
            Breakpoint * This,
            /* [retval][out] */ long *Offset);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_File )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *File);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileLine )( 
            Breakpoint * This,
            /* [retval][out] */ long *Line);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileColumn )( 
            Breakpoint * This,
            /* [retval][out] */ long *Column);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConditionType )( 
            Breakpoint * This,
            /* [retval][out] */ dbgBreakpointConditionType *ConditionType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Condition )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *Condition);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *Language);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HitCountType )( 
            Breakpoint * This,
            /* [retval][out] */ dbgHitCountType *HitCountType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HitCountTarget )( 
            Breakpoint * This,
            /* [retval][out] */ long *HitCountTarget);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            Breakpoint * This,
            /* [retval][out] */ VARIANT_BOOL *Enabled);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            Breakpoint * This,
            /* [in] */ VARIANT_BOOL Enable);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tag )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *Tag);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Tag )( 
            Breakpoint * This,
            /* [in] */ BSTR Tag);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentHits )( 
            Breakpoint * This,
            /* [retval][out] */ long *CurHitCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Program )( 
            Breakpoint * This,
            /* [retval][out] */ Program **Program);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Breakpoint * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Breakpoint * This,
            /* [retval][out] */ Breakpoint **Breakpoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Breakpoint * This,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            Breakpoint * This,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        END_INTERFACE
    } BreakpointVtbl;

    interface Breakpoint
    {
        CONST_VTBL struct BreakpointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Breakpoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Breakpoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Breakpoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Breakpoint_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Breakpoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Breakpoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Breakpoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Breakpoint_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define Breakpoint_get_Type(This,Type)	\
    (This)->lpVtbl -> get_Type(This,Type)

#define Breakpoint_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Breakpoint_put_Name(This,Name)	\
    (This)->lpVtbl -> put_Name(This,Name)

#define Breakpoint_get_LocationType(This,LocationType)	\
    (This)->lpVtbl -> get_LocationType(This,LocationType)

#define Breakpoint_get_FunctionName(This,FunctionName)	\
    (This)->lpVtbl -> get_FunctionName(This,FunctionName)

#define Breakpoint_get_FunctionLineOffset(This,Offset)	\
    (This)->lpVtbl -> get_FunctionLineOffset(This,Offset)

#define Breakpoint_get_FunctionColumnOffset(This,Offset)	\
    (This)->lpVtbl -> get_FunctionColumnOffset(This,Offset)

#define Breakpoint_get_File(This,File)	\
    (This)->lpVtbl -> get_File(This,File)

#define Breakpoint_get_FileLine(This,Line)	\
    (This)->lpVtbl -> get_FileLine(This,Line)

#define Breakpoint_get_FileColumn(This,Column)	\
    (This)->lpVtbl -> get_FileColumn(This,Column)

#define Breakpoint_get_ConditionType(This,ConditionType)	\
    (This)->lpVtbl -> get_ConditionType(This,ConditionType)

#define Breakpoint_get_Condition(This,Condition)	\
    (This)->lpVtbl -> get_Condition(This,Condition)

#define Breakpoint_get_Language(This,Language)	\
    (This)->lpVtbl -> get_Language(This,Language)

#define Breakpoint_get_HitCountType(This,HitCountType)	\
    (This)->lpVtbl -> get_HitCountType(This,HitCountType)

#define Breakpoint_get_HitCountTarget(This,HitCountTarget)	\
    (This)->lpVtbl -> get_HitCountTarget(This,HitCountTarget)

#define Breakpoint_get_Enabled(This,Enabled)	\
    (This)->lpVtbl -> get_Enabled(This,Enabled)

#define Breakpoint_put_Enabled(This,Enable)	\
    (This)->lpVtbl -> put_Enabled(This,Enable)

#define Breakpoint_get_Tag(This,Tag)	\
    (This)->lpVtbl -> get_Tag(This,Tag)

#define Breakpoint_put_Tag(This,Tag)	\
    (This)->lpVtbl -> put_Tag(This,Tag)

#define Breakpoint_get_CurrentHits(This,CurHitCount)	\
    (This)->lpVtbl -> get_CurrentHits(This,CurHitCount)

#define Breakpoint_get_Program(This,Program)	\
    (This)->lpVtbl -> get_Program(This,Program)

#define Breakpoint_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Breakpoint_get_Parent(This,Breakpoint)	\
    (This)->lpVtbl -> get_Parent(This,Breakpoint)

#define Breakpoint_get_Collection(This,Breakpoints)	\
    (This)->lpVtbl -> get_Collection(This,Breakpoints)

#define Breakpoint_get_Children(This,Breakpoints)	\
    (This)->lpVtbl -> get_Children(This,Breakpoints)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_Delete_Proxy( 
    Breakpoint * This);


void __RPC_STUB Breakpoint_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Type_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ dbgBreakpointType *Type);


void __RPC_STUB Breakpoint_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Name_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Breakpoint_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_put_Name_Proxy( 
    Breakpoint * This,
    /* [in] */ BSTR Name);


void __RPC_STUB Breakpoint_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_LocationType_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ dbgBreakpointLocationType *LocationType);


void __RPC_STUB Breakpoint_get_LocationType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FunctionName_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *FunctionName);


void __RPC_STUB Breakpoint_get_FunctionName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FunctionLineOffset_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *Offset);


void __RPC_STUB Breakpoint_get_FunctionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FunctionColumnOffset_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *Offset);


void __RPC_STUB Breakpoint_get_FunctionColumnOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_File_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *File);


void __RPC_STUB Breakpoint_get_File_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FileLine_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *Line);


void __RPC_STUB Breakpoint_get_FileLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FileColumn_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *Column);


void __RPC_STUB Breakpoint_get_FileColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_ConditionType_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ dbgBreakpointConditionType *ConditionType);


void __RPC_STUB Breakpoint_get_ConditionType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Condition_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *Condition);


void __RPC_STUB Breakpoint_get_Condition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Language_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *Language);


void __RPC_STUB Breakpoint_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_HitCountType_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ dbgHitCountType *HitCountType);


void __RPC_STUB Breakpoint_get_HitCountType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_HitCountTarget_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *HitCountTarget);


void __RPC_STUB Breakpoint_get_HitCountTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Enabled_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ VARIANT_BOOL *Enabled);


void __RPC_STUB Breakpoint_get_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_put_Enabled_Proxy( 
    Breakpoint * This,
    /* [in] */ VARIANT_BOOL Enable);


void __RPC_STUB Breakpoint_put_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Tag_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *Tag);


void __RPC_STUB Breakpoint_get_Tag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_put_Tag_Proxy( 
    Breakpoint * This,
    /* [in] */ BSTR Tag);


void __RPC_STUB Breakpoint_put_Tag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_CurrentHits_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *CurHitCount);


void __RPC_STUB Breakpoint_get_CurrentHits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Program_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ Program **Program);


void __RPC_STUB Breakpoint_get_Program_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_DTE_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Breakpoint_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Parent_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ Breakpoint **Breakpoint);


void __RPC_STUB Breakpoint_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Collection_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Breakpoint_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Children_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Breakpoint_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Breakpoint_INTERFACE_DEFINED__ */


#ifndef __Breakpoints_INTERFACE_DEFINED__
#define __Breakpoints_INTERFACE_DEFINED__

/* interface Breakpoints */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Breakpoints;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("25968106-BAFB-11d2-8AD1-00C04F79E479")
    Breakpoints : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Breakpoint **Breakpoint) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ BSTR Function,
            /* [defaultvalue][optional][in] */ BSTR File,
            /* [defaultvalue][optional][in] */ long Line,
            /* [defaultvalue][optional][in] */ long Column,
            /* [defaultvalue][optional][in] */ BSTR Condition,
            /* [defaultvalue][optional][in] */ dbgBreakpointConditionType ConditionType,
            /* [defaultvalue][optional][in] */ BSTR Language,
            /* [defaultvalue][optional][in] */ BSTR Data,
            /* [defaultvalue][optional][in] */ long DataCount,
            /* [defaultvalue][optional][in] */ BSTR Address,
            /* [defaultvalue][optional][in] */ long HitCount,
            /* [defaultvalue][optional][in] */ dbgHitCountType HitCountType,
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BreakpointsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Breakpoints * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Breakpoints * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Breakpoints * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Breakpoints * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Breakpoints * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Breakpoints * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Breakpoints * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Breakpoints * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Breakpoint **Breakpoint);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Breakpoints * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Breakpoints * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Breakpoints * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Breakpoints * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Breakpoints * This,
            /* [defaultvalue][optional][in] */ BSTR Function,
            /* [defaultvalue][optional][in] */ BSTR File,
            /* [defaultvalue][optional][in] */ long Line,
            /* [defaultvalue][optional][in] */ long Column,
            /* [defaultvalue][optional][in] */ BSTR Condition,
            /* [defaultvalue][optional][in] */ dbgBreakpointConditionType ConditionType,
            /* [defaultvalue][optional][in] */ BSTR Language,
            /* [defaultvalue][optional][in] */ BSTR Data,
            /* [defaultvalue][optional][in] */ long DataCount,
            /* [defaultvalue][optional][in] */ BSTR Address,
            /* [defaultvalue][optional][in] */ long HitCount,
            /* [defaultvalue][optional][in] */ dbgHitCountType HitCountType,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        END_INTERFACE
    } BreakpointsVtbl;

    interface Breakpoints
    {
        CONST_VTBL struct BreakpointsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Breakpoints_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Breakpoints_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Breakpoints_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Breakpoints_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Breakpoints_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Breakpoints_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Breakpoints_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Breakpoints_Item(This,Index,Breakpoint)	\
    (This)->lpVtbl -> Item(This,Index,Breakpoint)

#define Breakpoints__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Breakpoints_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Breakpoints_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Breakpoints_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#define Breakpoints_Add(This,Function,File,Line,Column,Condition,ConditionType,Language,Data,DataCount,Address,HitCount,HitCountType,Breakpoints)	\
    (This)->lpVtbl -> Add(This,Function,File,Line,Column,Condition,ConditionType,Language,Data,DataCount,Address,HitCount,HitCountType,Breakpoints)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_Item_Proxy( 
    Breakpoints * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Breakpoint **Breakpoint);


void __RPC_STUB Breakpoints_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Breakpoints__NewEnum_Proxy( 
    Breakpoints * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Breakpoints__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_get_DTE_Proxy( 
    Breakpoints * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Breakpoints_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_get_Parent_Proxy( 
    Breakpoints * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Breakpoints_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_get_Count_Proxy( 
    Breakpoints * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Breakpoints_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_Add_Proxy( 
    Breakpoints * This,
    /* [defaultvalue][optional][in] */ BSTR Function,
    /* [defaultvalue][optional][in] */ BSTR File,
    /* [defaultvalue][optional][in] */ long Line,
    /* [defaultvalue][optional][in] */ long Column,
    /* [defaultvalue][optional][in] */ BSTR Condition,
    /* [defaultvalue][optional][in] */ dbgBreakpointConditionType ConditionType,
    /* [defaultvalue][optional][in] */ BSTR Language,
    /* [defaultvalue][optional][in] */ BSTR Data,
    /* [defaultvalue][optional][in] */ long DataCount,
    /* [defaultvalue][optional][in] */ BSTR Address,
    /* [defaultvalue][optional][in] */ long HitCount,
    /* [defaultvalue][optional][in] */ dbgHitCountType HitCountType,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Breakpoints_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Breakpoints_INTERFACE_DEFINED__ */


#ifndef __Debugger_INTERFACE_DEFINED__
#define __Debugger_INTERFACE_DEFINED__

/* interface Debugger */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Debugger;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("338FB9A0-BAE5-11d2-8AD1-00C04F79E479")
    Debugger : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExpression( 
            /* [in] */ BSTR ExpressionText,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseAutoExpandRules,
            /* [defaultvalue][in] */ long Timeout,
            /* [retval][out] */ Expression **Expression) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DetachAll( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StepInto( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StepOver( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StepOut( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Go( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Break( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakMode = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Stop( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForDesignMode = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetNextStatement( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RunToCursor( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExecuteStatement( 
            /* [in] */ BSTR Statement,
            /* [defaultvalue][in] */ long Timeout = -1,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL TreatAsExpression = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Breakpoints( 
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ Languages **Languages) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentMode( 
            /* [retval][out] */ dbgDebugMode *Mode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentProcess( 
            /* [retval][out] */ Process **Process) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentProcess( 
            /* [in] */ Process *Process) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentProgram( 
            /* [retval][out] */ Program **Program) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentProgram( 
            /* [in] */ Program *Program) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentThread( 
            /* [retval][out] */ Thread **Thread) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentThread( 
            /* [in] */ Thread *Thread) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentStackFrame( 
            /* [retval][out] */ StackFrame **StackFrame) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentStackFrame( 
            /* [in] */ StackFrame *StackFrame) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HexDisplayMode( 
            /* [retval][out] */ VARIANT_BOOL *HexModeOn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HexDisplayMode( 
            /* [in] */ VARIANT_BOOL HexModeOn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HexInputMode( 
            /* [retval][out] */ VARIANT_BOOL *HexModeOn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HexInputMode( 
            /* [in] */ VARIANT_BOOL HexModeOn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastBreakReason( 
            /* [retval][out] */ dbgEventReason *Reason) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BreakpointLastHit( 
            /* [retval][out] */ Breakpoint **Breakpoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllBreakpointsLastHit( 
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DebuggedProcesses( 
            /* [retval][out] */ Processes **Processes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LocalProcesses( 
            /* [retval][out] */ Processes **Processes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DebuggerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Debugger * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Debugger * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Debugger * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Debugger * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Debugger * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Debugger * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Debugger * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExpression )( 
            Debugger * This,
            /* [in] */ BSTR ExpressionText,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseAutoExpandRules,
            /* [defaultvalue][in] */ long Timeout,
            /* [retval][out] */ Expression **Expression);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DetachAll )( 
            Debugger * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StepInto )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StepOver )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StepOut )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Go )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Break )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakMode);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForDesignMode);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetNextStatement )( 
            Debugger * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RunToCursor )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExecuteStatement )( 
            Debugger * This,
            /* [in] */ BSTR Statement,
            /* [defaultvalue][in] */ long Timeout,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL TreatAsExpression);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Breakpoints )( 
            Debugger * This,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            Debugger * This,
            /* [retval][out] */ Languages **Languages);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentMode )( 
            Debugger * This,
            /* [retval][out] */ dbgDebugMode *Mode);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentProcess )( 
            Debugger * This,
            /* [retval][out] */ Process **Process);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentProcess )( 
            Debugger * This,
            /* [in] */ Process *Process);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentProgram )( 
            Debugger * This,
            /* [retval][out] */ Program **Program);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentProgram )( 
            Debugger * This,
            /* [in] */ Program *Program);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentThread )( 
            Debugger * This,
            /* [retval][out] */ Thread **Thread);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentThread )( 
            Debugger * This,
            /* [in] */ Thread *Thread);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentStackFrame )( 
            Debugger * This,
            /* [retval][out] */ StackFrame **StackFrame);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentStackFrame )( 
            Debugger * This,
            /* [in] */ StackFrame *StackFrame);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HexDisplayMode )( 
            Debugger * This,
            /* [retval][out] */ VARIANT_BOOL *HexModeOn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HexDisplayMode )( 
            Debugger * This,
            /* [in] */ VARIANT_BOOL HexModeOn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HexInputMode )( 
            Debugger * This,
            /* [retval][out] */ VARIANT_BOOL *HexModeOn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HexInputMode )( 
            Debugger * This,
            /* [in] */ VARIANT_BOOL HexModeOn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastBreakReason )( 
            Debugger * This,
            /* [retval][out] */ dbgEventReason *Reason);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BreakpointLastHit )( 
            Debugger * This,
            /* [retval][out] */ Breakpoint **Breakpoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllBreakpointsLastHit )( 
            Debugger * This,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DebuggedProcesses )( 
            Debugger * This,
            /* [retval][out] */ Processes **Processes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocalProcesses )( 
            Debugger * This,
            /* [retval][out] */ Processes **Processes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Debugger * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Debugger * This,
            /* [retval][out] */ DTE	**DTE);
        
        END_INTERFACE
    } DebuggerVtbl;

    interface Debugger
    {
        CONST_VTBL struct DebuggerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Debugger_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Debugger_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Debugger_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Debugger_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Debugger_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Debugger_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Debugger_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Debugger_GetExpression(This,ExpressionText,UseAutoExpandRules,Timeout,Expression)	\
    (This)->lpVtbl -> GetExpression(This,ExpressionText,UseAutoExpandRules,Timeout,Expression)

#define Debugger_DetachAll(This)	\
    (This)->lpVtbl -> DetachAll(This)

#define Debugger_StepInto(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> StepInto(This,WaitForBreakOrEnd)

#define Debugger_StepOver(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> StepOver(This,WaitForBreakOrEnd)

#define Debugger_StepOut(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> StepOut(This,WaitForBreakOrEnd)

#define Debugger_Go(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> Go(This,WaitForBreakOrEnd)

#define Debugger_Break(This,WaitForBreakMode)	\
    (This)->lpVtbl -> Break(This,WaitForBreakMode)

#define Debugger_Stop(This,WaitForDesignMode)	\
    (This)->lpVtbl -> Stop(This,WaitForDesignMode)

#define Debugger_SetNextStatement(This)	\
    (This)->lpVtbl -> SetNextStatement(This)

#define Debugger_RunToCursor(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> RunToCursor(This,WaitForBreakOrEnd)

#define Debugger_ExecuteStatement(This,Statement,Timeout,TreatAsExpression)	\
    (This)->lpVtbl -> ExecuteStatement(This,Statement,Timeout,TreatAsExpression)

#define Debugger_get_Breakpoints(This,Breakpoints)	\
    (This)->lpVtbl -> get_Breakpoints(This,Breakpoints)

#define Debugger_get_Languages(This,Languages)	\
    (This)->lpVtbl -> get_Languages(This,Languages)

#define Debugger_get_CurrentMode(This,Mode)	\
    (This)->lpVtbl -> get_CurrentMode(This,Mode)

#define Debugger_get_CurrentProcess(This,Process)	\
    (This)->lpVtbl -> get_CurrentProcess(This,Process)

#define Debugger_put_CurrentProcess(This,Process)	\
    (This)->lpVtbl -> put_CurrentProcess(This,Process)

#define Debugger_get_CurrentProgram(This,Program)	\
    (This)->lpVtbl -> get_CurrentProgram(This,Program)

#define Debugger_put_CurrentProgram(This,Program)	\
    (This)->lpVtbl -> put_CurrentProgram(This,Program)

#define Debugger_get_CurrentThread(This,Thread)	\
    (This)->lpVtbl -> get_CurrentThread(This,Thread)

#define Debugger_put_CurrentThread(This,Thread)	\
    (This)->lpVtbl -> put_CurrentThread(This,Thread)

#define Debugger_get_CurrentStackFrame(This,StackFrame)	\
    (This)->lpVtbl -> get_CurrentStackFrame(This,StackFrame)

#define Debugger_put_CurrentStackFrame(This,StackFrame)	\
    (This)->lpVtbl -> put_CurrentStackFrame(This,StackFrame)

#define Debugger_get_HexDisplayMode(This,HexModeOn)	\
    (This)->lpVtbl -> get_HexDisplayMode(This,HexModeOn)

#define Debugger_put_HexDisplayMode(This,HexModeOn)	\
    (This)->lpVtbl -> put_HexDisplayMode(This,HexModeOn)

#define Debugger_get_HexInputMode(This,HexModeOn)	\
    (This)->lpVtbl -> get_HexInputMode(This,HexModeOn)

#define Debugger_put_HexInputMode(This,HexModeOn)	\
    (This)->lpVtbl -> put_HexInputMode(This,HexModeOn)

#define Debugger_get_LastBreakReason(This,Reason)	\
    (This)->lpVtbl -> get_LastBreakReason(This,Reason)

#define Debugger_get_BreakpointLastHit(This,Breakpoint)	\
    (This)->lpVtbl -> get_BreakpointLastHit(This,Breakpoint)

#define Debugger_get_AllBreakpointsLastHit(This,Breakpoints)	\
    (This)->lpVtbl -> get_AllBreakpointsLastHit(This,Breakpoints)

#define Debugger_get_DebuggedProcesses(This,Processes)	\
    (This)->lpVtbl -> get_DebuggedProcesses(This,Processes)

#define Debugger_get_LocalProcesses(This,Processes)	\
    (This)->lpVtbl -> get_LocalProcesses(This,Processes)

#define Debugger_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Debugger_get_Parent(This,DTE)	\
    (This)->lpVtbl -> get_Parent(This,DTE)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_GetExpression_Proxy( 
    Debugger * This,
    /* [in] */ BSTR ExpressionText,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL UseAutoExpandRules,
    /* [defaultvalue][in] */ long Timeout,
    /* [retval][out] */ Expression **Expression);


void __RPC_STUB Debugger_GetExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_DetachAll_Proxy( 
    Debugger * This);


void __RPC_STUB Debugger_DetachAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_StepInto_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_StepInto_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_StepOver_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_StepOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_StepOut_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_StepOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_Go_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_Go_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_Break_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakMode);


void __RPC_STUB Debugger_Break_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_Stop_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForDesignMode);


void __RPC_STUB Debugger_Stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_SetNextStatement_Proxy( 
    Debugger * This);


void __RPC_STUB Debugger_SetNextStatement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_RunToCursor_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_RunToCursor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_ExecuteStatement_Proxy( 
    Debugger * This,
    /* [in] */ BSTR Statement,
    /* [defaultvalue][in] */ long Timeout,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL TreatAsExpression);


void __RPC_STUB Debugger_ExecuteStatement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_Breakpoints_Proxy( 
    Debugger * This,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Debugger_get_Breakpoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_Languages_Proxy( 
    Debugger * This,
    /* [retval][out] */ Languages **Languages);


void __RPC_STUB Debugger_get_Languages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentMode_Proxy( 
    Debugger * This,
    /* [retval][out] */ dbgDebugMode *Mode);


void __RPC_STUB Debugger_get_CurrentMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentProcess_Proxy( 
    Debugger * This,
    /* [retval][out] */ Process **Process);


void __RPC_STUB Debugger_get_CurrentProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_CurrentProcess_Proxy( 
    Debugger * This,
    /* [in] */ Process *Process);


void __RPC_STUB Debugger_put_CurrentProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentProgram_Proxy( 
    Debugger * This,
    /* [retval][out] */ Program **Program);


void __RPC_STUB Debugger_get_CurrentProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_CurrentProgram_Proxy( 
    Debugger * This,
    /* [in] */ Program *Program);


void __RPC_STUB Debugger_put_CurrentProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentThread_Proxy( 
    Debugger * This,
    /* [retval][out] */ Thread **Thread);


void __RPC_STUB Debugger_get_CurrentThread_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_CurrentThread_Proxy( 
    Debugger * This,
    /* [in] */ Thread *Thread);


void __RPC_STUB Debugger_put_CurrentThread_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentStackFrame_Proxy( 
    Debugger * This,
    /* [retval][out] */ StackFrame **StackFrame);


void __RPC_STUB Debugger_get_CurrentStackFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_CurrentStackFrame_Proxy( 
    Debugger * This,
    /* [in] */ StackFrame *StackFrame);


void __RPC_STUB Debugger_put_CurrentStackFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_HexDisplayMode_Proxy( 
    Debugger * This,
    /* [retval][out] */ VARIANT_BOOL *HexModeOn);


void __RPC_STUB Debugger_get_HexDisplayMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_HexDisplayMode_Proxy( 
    Debugger * This,
    /* [in] */ VARIANT_BOOL HexModeOn);


void __RPC_STUB Debugger_put_HexDisplayMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_HexInputMode_Proxy( 
    Debugger * This,
    /* [retval][out] */ VARIANT_BOOL *HexModeOn);


void __RPC_STUB Debugger_get_HexInputMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_HexInputMode_Proxy( 
    Debugger * This,
    /* [in] */ VARIANT_BOOL HexModeOn);


void __RPC_STUB Debugger_put_HexInputMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_LastBreakReason_Proxy( 
    Debugger * This,
    /* [retval][out] */ dbgEventReason *Reason);


void __RPC_STUB Debugger_get_LastBreakReason_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_BreakpointLastHit_Proxy( 
    Debugger * This,
    /* [retval][out] */ Breakpoint **Breakpoint);


void __RPC_STUB Debugger_get_BreakpointLastHit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_AllBreakpointsLastHit_Proxy( 
    Debugger * This,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Debugger_get_AllBreakpointsLastHit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_DebuggedProcesses_Proxy( 
    Debugger * This,
    /* [retval][out] */ Processes **Processes);


void __RPC_STUB Debugger_get_DebuggedProcesses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_LocalProcesses_Proxy( 
    Debugger * This,
    /* [retval][out] */ Processes **Processes);


void __RPC_STUB Debugger_get_LocalProcesses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_DTE_Proxy( 
    Debugger * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Debugger_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_Parent_Proxy( 
    Debugger * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Debugger_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Debugger_INTERFACE_DEFINED__ */


#ifndef __Expression_INTERFACE_DEFINED__
#define __Expression_INTERFACE_DEFINED__

/* interface Expression */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Expression;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27ADC812-BB07-11d2-8AD1-00C04F79E479")
    Expression : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataMembers( 
            /* [retval][out] */ Expressions **Expressions) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR NewValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsValidValue( 
            /* [retval][out] */ VARIANT_BOOL *ValidValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Expressions **Expressions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExpressionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Expression * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Expression * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Expression * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Expression * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Expression * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Expression * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Expression * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Expression * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Expression * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataMembers )( 
            Expression * This,
            /* [retval][out] */ Expressions **Expressions);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            Expression * This,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            Expression * This,
            /* [in] */ BSTR NewValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsValidValue )( 
            Expression * This,
            /* [retval][out] */ VARIANT_BOOL *ValidValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Expression * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Expression * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Expression * This,
            /* [retval][out] */ Expressions **Expressions);
        
        END_INTERFACE
    } ExpressionVtbl;

    interface Expression
    {
        CONST_VTBL struct ExpressionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Expression_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Expression_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Expression_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Expression_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Expression_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Expression_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Expression_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Expression_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Expression_get_Type(This,Type)	\
    (This)->lpVtbl -> get_Type(This,Type)

#define Expression_get_DataMembers(This,Expressions)	\
    (This)->lpVtbl -> get_DataMembers(This,Expressions)

#define Expression_get_Value(This,Value)	\
    (This)->lpVtbl -> get_Value(This,Value)

#define Expression_put_Value(This,NewValue)	\
    (This)->lpVtbl -> put_Value(This,NewValue)

#define Expression_get_IsValidValue(This,ValidValue)	\
    (This)->lpVtbl -> get_IsValidValue(This,ValidValue)

#define Expression_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Expression_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Expression_get_Collection(This,Expressions)	\
    (This)->lpVtbl -> get_Collection(This,Expressions)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Name_Proxy( 
    Expression * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Expression_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Type_Proxy( 
    Expression * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB Expression_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_DataMembers_Proxy( 
    Expression * This,
    /* [retval][out] */ Expressions **Expressions);


void __RPC_STUB Expression_get_DataMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Value_Proxy( 
    Expression * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB Expression_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Expression_put_Value_Proxy( 
    Expression * This,
    /* [in] */ BSTR NewValue);


void __RPC_STUB Expression_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_IsValidValue_Proxy( 
    Expression * This,
    /* [retval][out] */ VARIANT_BOOL *ValidValue);


void __RPC_STUB Expression_get_IsValidValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_DTE_Proxy( 
    Expression * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Expression_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Parent_Proxy( 
    Expression * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Expression_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Collection_Proxy( 
    Expression * This,
    /* [retval][out] */ Expressions **Expressions);


void __RPC_STUB Expression_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Expression_INTERFACE_DEFINED__ */


#ifndef __Expressions_INTERFACE_DEFINED__
#define __Expressions_INTERFACE_DEFINED__

/* interface Expressions */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Expressions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2685337A-BB9E-11d2-8AD1-00C04F79E479")
    Expressions : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Expression **Expression) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExpressionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Expressions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Expressions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Expressions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Expressions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Expressions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Expressions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Expressions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Expressions * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Expression **Expression);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Expressions * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Expressions * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Expressions * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Expressions * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } ExpressionsVtbl;

    interface Expressions
    {
        CONST_VTBL struct ExpressionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Expressions_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Expressions_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Expressions_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Expressions_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Expressions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Expressions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Expressions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Expressions_Item(This,Index,Expression)	\
    (This)->lpVtbl -> Item(This,Index,Expression)

#define Expressions__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Expressions_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Expressions_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Expressions_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Expressions_Item_Proxy( 
    Expressions * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Expression **Expression);


void __RPC_STUB Expressions_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Expressions__NewEnum_Proxy( 
    Expressions * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Expressions__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expressions_get_DTE_Proxy( 
    Expressions * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Expressions_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expressions_get_Parent_Proxy( 
    Expressions * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Expressions_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expressions_get_Count_Proxy( 
    Expressions * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Expressions_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Expressions_INTERFACE_DEFINED__ */


#ifndef __Language_INTERFACE_DEFINED__
#define __Language_INTERFACE_DEFINED__

/* interface Language */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Language;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B3CCFA68-C145-11d2-8AD1-00C04F79E479")
    Language : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Languages **Languages) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Language * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Language * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Language * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Language * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Language * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Language * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Language * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Language * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Language * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Language * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Language * This,
            /* [retval][out] */ Languages **Languages);
        
        END_INTERFACE
    } LanguageVtbl;

    interface Language
    {
        CONST_VTBL struct LanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Language_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Language_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Language_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Language_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Language_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Language_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Language_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Language_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Language_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Language_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Language_get_Collection(This,Languages)	\
    (This)->lpVtbl -> get_Collection(This,Languages)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Language_get_Name_Proxy( 
    Language * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Language_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Language_get_DTE_Proxy( 
    Language * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Language_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Language_get_Parent_Proxy( 
    Language * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Language_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Language_get_Collection_Proxy( 
    Language * This,
    /* [retval][out] */ Languages **Languages);


void __RPC_STUB Language_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Language_INTERFACE_DEFINED__ */


#ifndef __Languages_INTERFACE_DEFINED__
#define __Languages_INTERFACE_DEFINED__

/* interface Languages */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Languages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A4F4246C-C131-11d2-8AD1-00C04F79E479")
    Languages : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Language **Language) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LanguagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Languages * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Languages * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Languages * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Languages * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Languages * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Languages * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Languages * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Languages * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Language **Language);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Languages * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Languages * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Languages * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Languages * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } LanguagesVtbl;

    interface Languages
    {
        CONST_VTBL struct LanguagesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Languages_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Languages_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Languages_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Languages_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Languages_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Languages_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Languages_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Languages_Item(This,Index,Language)	\
    (This)->lpVtbl -> Item(This,Index,Language)

#define Languages__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Languages_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Languages_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Languages_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Languages_Item_Proxy( 
    Languages * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Language **Language);


void __RPC_STUB Languages_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Languages__NewEnum_Proxy( 
    Languages * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Languages__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Languages_get_DTE_Proxy( 
    Languages * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Languages_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Languages_get_Parent_Proxy( 
    Languages * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Languages_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Languages_get_Count_Proxy( 
    Languages * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Languages_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Languages_INTERFACE_DEFINED__ */


#ifndef __Process_INTERFACE_DEFINED__
#define __Process_INTERFACE_DEFINED__

/* interface Process */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Process;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5C5A0070-F396-4e37-A82A-1B767E272DF9")
    Process : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Attach( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Detach( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Break( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakMode = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Terminate( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProcessID( 
            /* [retval][out] */ long *ID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Programs( 
            /* [retval][out] */ Programs **Programs) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Processes **Processes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProcessVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Process * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Process * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Process * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Process * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Process * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Process * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Process * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Attach )( 
            Process * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            Process * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Break )( 
            Process * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakMode);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Terminate )( 
            Process * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Process * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProcessID )( 
            Process * This,
            /* [retval][out] */ long *ID);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Programs )( 
            Process * This,
            /* [retval][out] */ Programs **Programs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Process * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Process * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Process * This,
            /* [retval][out] */ Processes **Processes);
        
        END_INTERFACE
    } ProcessVtbl;

    interface Process
    {
        CONST_VTBL struct ProcessVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Process_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Process_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Process_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Process_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Process_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Process_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Process_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Process_Attach(This)	\
    (This)->lpVtbl -> Attach(This)

#define Process_Detach(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> Detach(This,WaitForBreakOrEnd)

#define Process_Break(This,WaitForBreakMode)	\
    (This)->lpVtbl -> Break(This,WaitForBreakMode)

#define Process_Terminate(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> Terminate(This,WaitForBreakOrEnd)

#define Process_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Process_get_ProcessID(This,ID)	\
    (This)->lpVtbl -> get_ProcessID(This,ID)

#define Process_get_Programs(This,Programs)	\
    (This)->lpVtbl -> get_Programs(This,Programs)

#define Process_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Process_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Process_get_Collection(This,Processes)	\
    (This)->lpVtbl -> get_Collection(This,Processes)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process_Attach_Proxy( 
    Process * This);


void __RPC_STUB Process_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process_Detach_Proxy( 
    Process * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Process_Detach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process_Break_Proxy( 
    Process * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakMode);


void __RPC_STUB Process_Break_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process_Terminate_Proxy( 
    Process * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Process_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_Name_Proxy( 
    Process * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Process_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_ProcessID_Proxy( 
    Process * This,
    /* [retval][out] */ long *ID);


void __RPC_STUB Process_get_ProcessID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_Programs_Proxy( 
    Process * This,
    /* [retval][out] */ Programs **Programs);


void __RPC_STUB Process_get_Programs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_DTE_Proxy( 
    Process * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Process_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_Parent_Proxy( 
    Process * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Process_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_Collection_Proxy( 
    Process * This,
    /* [retval][out] */ Processes **Processes);


void __RPC_STUB Process_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Process_INTERFACE_DEFINED__ */


#ifndef __Processes_INTERFACE_DEFINED__
#define __Processes_INTERFACE_DEFINED__

/* interface Processes */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Processes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9F379969-5EAC-4a54-B2BC-6946CFFB56EF")
    Processes : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Process **Process) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProcessesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Processes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Processes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Processes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Processes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Processes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Processes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Processes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Processes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Process **Process);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Processes * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Processes * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Processes * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Processes * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } ProcessesVtbl;

    interface Processes
    {
        CONST_VTBL struct ProcessesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Processes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Processes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Processes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Processes_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Processes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Processes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Processes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Processes_Item(This,Index,Process)	\
    (This)->lpVtbl -> Item(This,Index,Process)

#define Processes__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Processes_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Processes_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Processes_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Processes_Item_Proxy( 
    Processes * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Process **Process);


void __RPC_STUB Processes_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Processes__NewEnum_Proxy( 
    Processes * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Processes__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Processes_get_DTE_Proxy( 
    Processes * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Processes_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Processes_get_Parent_Proxy( 
    Processes * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Processes_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Processes_get_Count_Proxy( 
    Processes * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Processes_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Processes_INTERFACE_DEFINED__ */


#ifndef __Program_INTERFACE_DEFINED__
#define __Program_INTERFACE_DEFINED__

/* interface Program */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Program;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6A38D87C-BBA0-11d2-8AD1-00C04F79E479")
    Program : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Process( 
            /* [retval][out] */ Process **Process) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Threads( 
            /* [retval][out] */ Threads **Threads) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsBeingDebugged( 
            /* [retval][out] */ VARIANT_BOOL *IsBeingDebugged) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Programs **Programs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProgramVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Program * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Program * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Program * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Program * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Program * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Program * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Program * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Program * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Process )( 
            Program * This,
            /* [retval][out] */ Process **Process);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Threads )( 
            Program * This,
            /* [retval][out] */ Threads **Threads);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeingDebugged )( 
            Program * This,
            /* [retval][out] */ VARIANT_BOOL *IsBeingDebugged);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Program * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Program * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Program * This,
            /* [retval][out] */ Programs **Programs);
        
        END_INTERFACE
    } ProgramVtbl;

    interface Program
    {
        CONST_VTBL struct ProgramVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Program_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Program_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Program_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Program_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Program_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Program_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Program_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Program_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Program_get_Process(This,Process)	\
    (This)->lpVtbl -> get_Process(This,Process)

#define Program_get_Threads(This,Threads)	\
    (This)->lpVtbl -> get_Threads(This,Threads)

#define Program_get_IsBeingDebugged(This,IsBeingDebugged)	\
    (This)->lpVtbl -> get_IsBeingDebugged(This,IsBeingDebugged)

#define Program_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Program_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Program_get_Collection(This,Programs)	\
    (This)->lpVtbl -> get_Collection(This,Programs)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Name_Proxy( 
    Program * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Program_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Process_Proxy( 
    Program * This,
    /* [retval][out] */ Process **Process);


void __RPC_STUB Program_get_Process_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Threads_Proxy( 
    Program * This,
    /* [retval][out] */ Threads **Threads);


void __RPC_STUB Program_get_Threads_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_IsBeingDebugged_Proxy( 
    Program * This,
    /* [retval][out] */ VARIANT_BOOL *IsBeingDebugged);


void __RPC_STUB Program_get_IsBeingDebugged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_DTE_Proxy( 
    Program * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Program_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Parent_Proxy( 
    Program * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Program_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Collection_Proxy( 
    Program * This,
    /* [retval][out] */ Programs **Programs);


void __RPC_STUB Program_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Program_INTERFACE_DEFINED__ */


#ifndef __Programs_INTERFACE_DEFINED__
#define __Programs_INTERFACE_DEFINED__

/* interface Programs */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Programs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DC6A118A-BBAB-11d2-8AD1-00C04F79E479")
    Programs : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Program **Program) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProgramsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Programs * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Programs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Programs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Programs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Programs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Programs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Programs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Programs * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Program **Program);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Programs * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Programs * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Programs * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Programs * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } ProgramsVtbl;

    interface Programs
    {
        CONST_VTBL struct ProgramsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Programs_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Programs_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Programs_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Programs_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Programs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Programs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Programs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Programs_Item(This,Index,Program)	\
    (This)->lpVtbl -> Item(This,Index,Program)

#define Programs__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Programs_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Programs_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Programs_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Programs_Item_Proxy( 
    Programs * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Program **Program);


void __RPC_STUB Programs_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Programs__NewEnum_Proxy( 
    Programs * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Programs__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Programs_get_DTE_Proxy( 
    Programs * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Programs_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Programs_get_Parent_Proxy( 
    Programs * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Programs_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Programs_get_Count_Proxy( 
    Programs * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Programs_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Programs_INTERFACE_DEFINED__ */


#ifndef __StackFrame_INTERFACE_DEFINED__
#define __StackFrame_INTERFACE_DEFINED__

/* interface StackFrame */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_StackFrame;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1342D0D8-BBA3-11d2-8AD1-00C04F79E479")
    StackFrame : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *Language) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionName( 
            /* [retval][out] */ BSTR *FunctionName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnType( 
            /* [retval][out] */ BSTR *ReturnType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Locals( 
            /* [retval][out] */ Expressions **Expressions) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arguments( 
            /* [retval][out] */ Expressions **Expressions) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Module( 
            /* [retval][out] */ BSTR *Module) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Thread **Thread) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ StackFrames **StackFrames) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StackFrameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StackFrame * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StackFrame * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StackFrame * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StackFrame * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StackFrame * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StackFrame * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StackFrame * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            StackFrame * This,
            /* [retval][out] */ BSTR *Language);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionName )( 
            StackFrame * This,
            /* [retval][out] */ BSTR *FunctionName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnType )( 
            StackFrame * This,
            /* [retval][out] */ BSTR *ReturnType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Locals )( 
            StackFrame * This,
            /* [retval][out] */ Expressions **Expressions);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arguments )( 
            StackFrame * This,
            /* [retval][out] */ Expressions **Expressions);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Module )( 
            StackFrame * This,
            /* [retval][out] */ BSTR *Module);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            StackFrame * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StackFrame * This,
            /* [retval][out] */ Thread **Thread);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            StackFrame * This,
            /* [retval][out] */ StackFrames **StackFrames);
        
        END_INTERFACE
    } StackFrameVtbl;

    interface StackFrame
    {
        CONST_VTBL struct StackFrameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StackFrame_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define StackFrame_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define StackFrame_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define StackFrame_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define StackFrame_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define StackFrame_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define StackFrame_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define StackFrame_get_Language(This,Language)	\
    (This)->lpVtbl -> get_Language(This,Language)

#define StackFrame_get_FunctionName(This,FunctionName)	\
    (This)->lpVtbl -> get_FunctionName(This,FunctionName)

#define StackFrame_get_ReturnType(This,ReturnType)	\
    (This)->lpVtbl -> get_ReturnType(This,ReturnType)

#define StackFrame_get_Locals(This,Expressions)	\
    (This)->lpVtbl -> get_Locals(This,Expressions)

#define StackFrame_get_Arguments(This,Expressions)	\
    (This)->lpVtbl -> get_Arguments(This,Expressions)

#define StackFrame_get_Module(This,Module)	\
    (This)->lpVtbl -> get_Module(This,Module)

#define StackFrame_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define StackFrame_get_Parent(This,Thread)	\
    (This)->lpVtbl -> get_Parent(This,Thread)

#define StackFrame_get_Collection(This,StackFrames)	\
    (This)->lpVtbl -> get_Collection(This,StackFrames)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Language_Proxy( 
    StackFrame * This,
    /* [retval][out] */ BSTR *Language);


void __RPC_STUB StackFrame_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_FunctionName_Proxy( 
    StackFrame * This,
    /* [retval][out] */ BSTR *FunctionName);


void __RPC_STUB StackFrame_get_FunctionName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_ReturnType_Proxy( 
    StackFrame * This,
    /* [retval][out] */ BSTR *ReturnType);


void __RPC_STUB StackFrame_get_ReturnType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Locals_Proxy( 
    StackFrame * This,
    /* [retval][out] */ Expressions **Expressions);


void __RPC_STUB StackFrame_get_Locals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Arguments_Proxy( 
    StackFrame * This,
    /* [retval][out] */ Expressions **Expressions);


void __RPC_STUB StackFrame_get_Arguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Module_Proxy( 
    StackFrame * This,
    /* [retval][out] */ BSTR *Module);


void __RPC_STUB StackFrame_get_Module_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_DTE_Proxy( 
    StackFrame * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB StackFrame_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Parent_Proxy( 
    StackFrame * This,
    /* [retval][out] */ Thread **Thread);


void __RPC_STUB StackFrame_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Collection_Proxy( 
    StackFrame * This,
    /* [retval][out] */ StackFrames **StackFrames);


void __RPC_STUB StackFrame_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __StackFrame_INTERFACE_DEFINED__ */


#ifndef __StackFrames_INTERFACE_DEFINED__
#define __StackFrames_INTERFACE_DEFINED__

/* interface StackFrames */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_StackFrames;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4ED85664-BBA2-11d2-8AD1-00C04F79E479")
    StackFrames : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ StackFrame **StackFrame) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StackFramesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StackFrames * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StackFrames * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StackFrames * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StackFrames * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StackFrames * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StackFrames * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StackFrames * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            StackFrames * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ StackFrame **StackFrame);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            StackFrames * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            StackFrames * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StackFrames * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            StackFrames * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } StackFramesVtbl;

    interface StackFrames
    {
        CONST_VTBL struct StackFramesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StackFrames_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define StackFrames_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define StackFrames_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define StackFrames_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define StackFrames_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define StackFrames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define StackFrames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define StackFrames_Item(This,Index,StackFrame)	\
    (This)->lpVtbl -> Item(This,Index,StackFrame)

#define StackFrames__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define StackFrames_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define StackFrames_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define StackFrames_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StackFrames_Item_Proxy( 
    StackFrames * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ StackFrame **StackFrame);


void __RPC_STUB StackFrames_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE StackFrames__NewEnum_Proxy( 
    StackFrames * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB StackFrames__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrames_get_DTE_Proxy( 
    StackFrames * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB StackFrames_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrames_get_Parent_Proxy( 
    StackFrames * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB StackFrames_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrames_get_Count_Proxy( 
    StackFrames * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB StackFrames_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __StackFrames_INTERFACE_DEFINED__ */


#ifndef __Thread_INTERFACE_DEFINED__
#define __Thread_INTERFACE_DEFINED__

/* interface Thread */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Thread;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9407F466-BBA1-11d2-8AD1-00C04F79E479")
    Thread : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Freeze( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Thaw( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuspendCount( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ long *ID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StackFrames( 
            /* [retval][out] */ StackFrames **StackFrames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Program( 
            /* [retval][out] */ Program **Program) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAlive( 
            /* [retval][out] */ VARIANT_BOOL *IsAlive) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ BSTR *Priority) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ BSTR *Location) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFrozen( 
            /* [retval][out] */ VARIANT_BOOL *IsFrozen) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Threads **Threads) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThreadVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Thread * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Thread * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Thread * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Thread * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Thread * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Thread * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Thread * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Freeze )( 
            Thread * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Thaw )( 
            Thread * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Thread * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuspendCount )( 
            Thread * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Thread * This,
            /* [retval][out] */ long *ID);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StackFrames )( 
            Thread * This,
            /* [retval][out] */ StackFrames **StackFrames);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Program )( 
            Thread * This,
            /* [retval][out] */ Program **Program);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAlive )( 
            Thread * This,
            /* [retval][out] */ VARIANT_BOOL *IsAlive);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            Thread * This,
            /* [retval][out] */ BSTR *Priority);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            Thread * This,
            /* [retval][out] */ BSTR *Location);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFrozen )( 
            Thread * This,
            /* [retval][out] */ VARIANT_BOOL *IsFrozen);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Thread * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Thread * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Thread * This,
            /* [retval][out] */ Threads **Threads);
        
        END_INTERFACE
    } ThreadVtbl;

    interface Thread
    {
        CONST_VTBL struct ThreadVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Thread_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Thread_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Thread_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Thread_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Thread_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Thread_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Thread_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Thread_Freeze(This)	\
    (This)->lpVtbl -> Freeze(This)

#define Thread_Thaw(This)	\
    (This)->lpVtbl -> Thaw(This)

#define Thread_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Thread_get_SuspendCount(This,Count)	\
    (This)->lpVtbl -> get_SuspendCount(This,Count)

#define Thread_get_ID(This,ID)	\
    (This)->lpVtbl -> get_ID(This,ID)

#define Thread_get_StackFrames(This,StackFrames)	\
    (This)->lpVtbl -> get_StackFrames(This,StackFrames)

#define Thread_get_Program(This,Program)	\
    (This)->lpVtbl -> get_Program(This,Program)

#define Thread_get_IsAlive(This,IsAlive)	\
    (This)->lpVtbl -> get_IsAlive(This,IsAlive)

#define Thread_get_Priority(This,Priority)	\
    (This)->lpVtbl -> get_Priority(This,Priority)

#define Thread_get_Location(This,Location)	\
    (This)->lpVtbl -> get_Location(This,Location)

#define Thread_get_IsFrozen(This,IsFrozen)	\
    (This)->lpVtbl -> get_IsFrozen(This,IsFrozen)

#define Thread_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Thread_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Thread_get_Collection(This,Threads)	\
    (This)->lpVtbl -> get_Collection(This,Threads)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Thread_Freeze_Proxy( 
    Thread * This);


void __RPC_STUB Thread_Freeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Thread_Thaw_Proxy( 
    Thread * This);


void __RPC_STUB Thread_Thaw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Name_Proxy( 
    Thread * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Thread_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_SuspendCount_Proxy( 
    Thread * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Thread_get_SuspendCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_ID_Proxy( 
    Thread * This,
    /* [retval][out] */ long *ID);


void __RPC_STUB Thread_get_ID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_StackFrames_Proxy( 
    Thread * This,
    /* [retval][out] */ StackFrames **StackFrames);


void __RPC_STUB Thread_get_StackFrames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Program_Proxy( 
    Thread * This,
    /* [retval][out] */ Program **Program);


void __RPC_STUB Thread_get_Program_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_IsAlive_Proxy( 
    Thread * This,
    /* [retval][out] */ VARIANT_BOOL *IsAlive);


void __RPC_STUB Thread_get_IsAlive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Priority_Proxy( 
    Thread * This,
    /* [retval][out] */ BSTR *Priority);


void __RPC_STUB Thread_get_Priority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Location_Proxy( 
    Thread * This,
    /* [retval][out] */ BSTR *Location);


void __RPC_STUB Thread_get_Location_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_IsFrozen_Proxy( 
    Thread * This,
    /* [retval][out] */ VARIANT_BOOL *IsFrozen);


void __RPC_STUB Thread_get_IsFrozen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_DTE_Proxy( 
    Thread * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Thread_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Parent_Proxy( 
    Thread * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Thread_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Collection_Proxy( 
    Thread * This,
    /* [retval][out] */ Threads **Threads);


void __RPC_STUB Thread_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Thread_INTERFACE_DEFINED__ */


#ifndef __Threads_INTERFACE_DEFINED__
#define __Threads_INTERFACE_DEFINED__

/* interface Threads */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Threads;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6AA23FB4-BBA1-11d2-8AD1-00C04F79E479")
    Threads : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Thread **Thread) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThreadsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Threads * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Threads * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Threads * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Threads * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Threads * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Threads * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Threads * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Threads * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Thread **Thread);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Threads * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Threads * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Threads * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Threads * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } ThreadsVtbl;

    interface Threads
    {
        CONST_VTBL struct ThreadsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Threads_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Threads_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Threads_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Threads_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Threads_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Threads_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Threads_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Threads_Item(This,Index,Thread)	\
    (This)->lpVtbl -> Item(This,Index,Thread)

#define Threads__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Threads_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Threads_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Threads_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Threads_Item_Proxy( 
    Threads * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Thread **Thread);


void __RPC_STUB Threads_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Threads__NewEnum_Proxy( 
    Threads * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Threads__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Threads_get_DTE_Proxy( 
    Threads * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Threads_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Threads_get_Parent_Proxy( 
    Threads * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Threads_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Threads_get_Count_Proxy( 
    Threads * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Threads_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Threads_INTERFACE_DEFINED__ */


#ifndef ___dispDebuggerEvents_DISPINTERFACE_DEFINED__
#define ___dispDebuggerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispDebuggerEvents */
/* [version][uuid] */ 


EXTERN_C const IID DIID__dispDebuggerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("46209330-0FBA-11d3-B880-00C04F79E479")
    _dispDebuggerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispDebuggerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispDebuggerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispDebuggerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispDebuggerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispDebuggerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispDebuggerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispDebuggerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispDebuggerEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispDebuggerEventsVtbl;

    interface _dispDebuggerEvents
    {
        CONST_VTBL struct _dispDebuggerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispDebuggerEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispDebuggerEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispDebuggerEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispDebuggerEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispDebuggerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispDebuggerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispDebuggerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispDebuggerEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___DebuggerEventsRoot_INTERFACE_DEFINED__
#define ___DebuggerEventsRoot_INTERFACE_DEFINED__

/* interface _DebuggerEventsRoot */
/* [version][hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__DebuggerEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D4BB39FB-0F0E-11d3-B880-00C04F79E479")
    _DebuggerEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_DebuggerEvents( 
            /* [retval][out] */ IDispatch **disp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _DebuggerEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DebuggerEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DebuggerEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DebuggerEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DebuggerEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DebuggerEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DebuggerEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DebuggerEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_DebuggerEvents )( 
            _DebuggerEventsRoot * This,
            /* [retval][out] */ IDispatch **disp);
        
        END_INTERFACE
    } _DebuggerEventsRootVtbl;

    interface _DebuggerEventsRoot
    {
        CONST_VTBL struct _DebuggerEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DebuggerEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DebuggerEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DebuggerEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DebuggerEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DebuggerEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DebuggerEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DebuggerEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _DebuggerEventsRoot_get_DebuggerEvents(This,disp)	\
    (This)->lpVtbl -> get_DebuggerEvents(This,disp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _DebuggerEventsRoot_get_DebuggerEvents_Proxy( 
    _DebuggerEventsRoot * This,
    /* [retval][out] */ IDispatch **disp);


void __RPC_STUB _DebuggerEventsRoot_get_DebuggerEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___DebuggerEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___DebuggerEvents_INTERFACE_DEFINED__
#define ___DebuggerEvents_INTERFACE_DEFINED__

/* interface _DebuggerEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__DebuggerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D4EAE958-0FBA-11d3-B880-00C04F79E479")
    _DebuggerEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _DebuggerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DebuggerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DebuggerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DebuggerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DebuggerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DebuggerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DebuggerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DebuggerEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _DebuggerEventsVtbl;

    interface _DebuggerEvents
    {
        CONST_VTBL struct _DebuggerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DebuggerEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DebuggerEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DebuggerEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DebuggerEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DebuggerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DebuggerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DebuggerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___DebuggerEvents_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DebuggerEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("0C763210-0FBB-11d3-B880-00C04F79E479")
DebuggerEvents;
#endif

#ifndef __IDTWizard_INTERFACE_DEFINED__
#define __IDTWizard_INTERFACE_DEFINED__

/* interface IDTWizard */
/* [helpstringcontext][helpstring][helpcontext][local][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IDTWizard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E914BBE1-03A4-11D1-BBCD-00A0C90F2744")
    IDTWizard : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( 
            /* [in] */ IDispatch *Application,
            /* [in] */ long hwndOwner,
            /* [in] */ SAFEARRAY * *ContextParams,
            /* [in] */ SAFEARRAY * *CustomParams,
            /* [out][in] */ wizardResult *RetVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDTWizardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDTWizard * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDTWizard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDTWizard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDTWizard * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDTWizard * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDTWizard * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDTWizard * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            IDTWizard * This,
            /* [in] */ IDispatch *Application,
            /* [in] */ long hwndOwner,
            /* [in] */ SAFEARRAY * *ContextParams,
            /* [in] */ SAFEARRAY * *CustomParams,
            /* [out][in] */ wizardResult *RetVal);
        
        END_INTERFACE
    } IDTWizardVtbl;

    interface IDTWizard
    {
        CONST_VTBL struct IDTWizardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDTWizard_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDTWizard_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDTWizard_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDTWizard_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDTWizard_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDTWizard_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDTWizard_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDTWizard_Execute(This,Application,hwndOwner,ContextParams,CustomParams,RetVal)	\
    (This)->lpVtbl -> Execute(This,Application,hwndOwner,ContextParams,CustomParams,RetVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTWizard_Execute_Proxy( 
    IDTWizard * This,
    /* [in] */ IDispatch *Application,
    /* [in] */ long hwndOwner,
    /* [in] */ SAFEARRAY * *ContextParams,
    /* [in] */ SAFEARRAY * *CustomParams,
    /* [out][in] */ wizardResult *RetVal);


void __RPC_STUB IDTWizard_Execute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDTWizard_INTERFACE_DEFINED__ */


#ifndef __IVsExtensibility_INTERFACE_DEFINED__
#define __IVsExtensibility_INTERFACE_DEFINED__

/* interface IVsExtensibility */
/* [object][restricted][hidden][uuid] */ 


EXTERN_C const IID IID_IVsExtensibility;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3c536122-57b1-46de-ab34-acc524140093")
    IVsExtensibility : public IUnknown
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [in] */ ISupportVSProperties *pParent,
            /* [in] */ IDispatch *pdispPropObj,
            /* [out] */ Properties **ppProperties) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RunWizardFile( 
            /* [in] */ BSTR bstrWizFilename,
            /* [in] */ long hwndOwner,
            /* [in] */ SAFEARRAY * *vContextParams,
            /* [retval][out] */ wizardResult *pResult) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Get_TextBuffer( 
            /* [in] */ IUnknown *pVsTextStream,
            /* [in] */ IExtensibleObjectSite *pParent,
            /* [retval][out] */ TextBuffer **ppTextBuffer) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnterAutomationFunction( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ExitAutomationFunction( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsInAutomationFunction( 
            /* [retval][out] */ BOOL *pfInAutoFunc) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetUserControl( 
            /* [out] */ VARIANT_BOOL *fUserControl) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetUserControl( 
            /* [in] */ VARIANT_BOOL fUserControl) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetUserControlUnlatched( 
            /* [in] */ VARIANT_BOOL fUserControl) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE LockServer( 
            /* [in] */ VARIANT_BOOL __MIDL_0010) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetLockCount( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE TestForShutdown( 
            /* [retval][out] */ VARIANT_BOOL *fShutdown) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetGlobalsObject( 
            /* [in] */ VARIANT ExtractFrom,
            /* [retval][out] */ Globals **ppGlobals) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetConfigMgr( 
            /* [in] */ IUnknown *pIVsProject,
            DWORD_PTR itemid,
            /* [retval][out] */ ConfigurationManager **ppCfgMgr) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FireMacroReset( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetDocumentFromDocCookie( 
            LONG_PTR lDocCookie,
            /* [retval][out] */ Document **ppDoc) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsMethodDisabled( 
            const GUID *pGUID,
            long dispid) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetSuppressUI( 
            VARIANT_BOOL In) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetSuppressUI( 
            VARIANT_BOOL *pOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsExtensibilityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsExtensibility * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsExtensibility * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsExtensibility * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IVsExtensibility * This,
            /* [in] */ ISupportVSProperties *pParent,
            /* [in] */ IDispatch *pdispPropObj,
            /* [out] */ Properties **ppProperties);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RunWizardFile )( 
            IVsExtensibility * This,
            /* [in] */ BSTR bstrWizFilename,
            /* [in] */ long hwndOwner,
            /* [in] */ SAFEARRAY * *vContextParams,
            /* [retval][out] */ wizardResult *pResult);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get_TextBuffer )( 
            IVsExtensibility * This,
            /* [in] */ IUnknown *pVsTextStream,
            /* [in] */ IExtensibleObjectSite *pParent,
            /* [retval][out] */ TextBuffer **ppTextBuffer);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnterAutomationFunction )( 
            IVsExtensibility * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ExitAutomationFunction )( 
            IVsExtensibility * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsInAutomationFunction )( 
            IVsExtensibility * This,
            /* [retval][out] */ BOOL *pfInAutoFunc);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUserControl )( 
            IVsExtensibility * This,
            /* [out] */ VARIANT_BOOL *fUserControl);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetUserControl )( 
            IVsExtensibility * This,
            /* [in] */ VARIANT_BOOL fUserControl);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetUserControlUnlatched )( 
            IVsExtensibility * This,
            /* [in] */ VARIANT_BOOL fUserControl);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *LockServer )( 
            IVsExtensibility * This,
            /* [in] */ VARIANT_BOOL __MIDL_0010);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLockCount )( 
            IVsExtensibility * This,
            /* [retval][out] */ long *pCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *TestForShutdown )( 
            IVsExtensibility * This,
            /* [retval][out] */ VARIANT_BOOL *fShutdown);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetGlobalsObject )( 
            IVsExtensibility * This,
            /* [in] */ VARIANT ExtractFrom,
            /* [retval][out] */ Globals **ppGlobals);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetConfigMgr )( 
            IVsExtensibility * This,
            /* [in] */ IUnknown *pIVsProject,
            DWORD_PTR itemid,
            /* [retval][out] */ ConfigurationManager **ppCfgMgr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FireMacroReset )( 
            IVsExtensibility * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetDocumentFromDocCookie )( 
            IVsExtensibility * This,
            LONG_PTR lDocCookie,
            /* [retval][out] */ Document **ppDoc);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsMethodDisabled )( 
            IVsExtensibility * This,
            const GUID *pGUID,
            long dispid);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetSuppressUI )( 
            IVsExtensibility * This,
            VARIANT_BOOL In);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetSuppressUI )( 
            IVsExtensibility * This,
            VARIANT_BOOL *pOut);
        
        END_INTERFACE
    } IVsExtensibilityVtbl;

    interface IVsExtensibility
    {
        CONST_VTBL struct IVsExtensibilityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsExtensibility_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsExtensibility_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsExtensibility_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsExtensibility_get_Properties(This,pParent,pdispPropObj,ppProperties)	\
    (This)->lpVtbl -> get_Properties(This,pParent,pdispPropObj,ppProperties)

#define IVsExtensibility_RunWizardFile(This,bstrWizFilename,hwndOwner,vContextParams,pResult)	\
    (This)->lpVtbl -> RunWizardFile(This,bstrWizFilename,hwndOwner,vContextParams,pResult)

#define IVsExtensibility_Get_TextBuffer(This,pVsTextStream,pParent,ppTextBuffer)	\
    (This)->lpVtbl -> Get_TextBuffer(This,pVsTextStream,pParent,ppTextBuffer)

#define IVsExtensibility_EnterAutomationFunction(This)	\
    (This)->lpVtbl -> EnterAutomationFunction(This)

#define IVsExtensibility_ExitAutomationFunction(This)	\
    (This)->lpVtbl -> ExitAutomationFunction(This)

#define IVsExtensibility_IsInAutomationFunction(This,pfInAutoFunc)	\
    (This)->lpVtbl -> IsInAutomationFunction(This,pfInAutoFunc)

#define IVsExtensibility_GetUserControl(This,fUserControl)	\
    (This)->lpVtbl -> GetUserControl(This,fUserControl)

#define IVsExtensibility_SetUserControl(This,fUserControl)	\
    (This)->lpVtbl -> SetUserControl(This,fUserControl)

#define IVsExtensibility_SetUserControlUnlatched(This,fUserControl)	\
    (This)->lpVtbl -> SetUserControlUnlatched(This,fUserControl)

#define IVsExtensibility_LockServer(This,__MIDL_0010)	\
    (This)->lpVtbl -> LockServer(This,__MIDL_0010)

#define IVsExtensibility_GetLockCount(This,pCount)	\
    (This)->lpVtbl -> GetLockCount(This,pCount)

#define IVsExtensibility_TestForShutdown(This,fShutdown)	\
    (This)->lpVtbl -> TestForShutdown(This,fShutdown)

#define IVsExtensibility_GetGlobalsObject(This,ExtractFrom,ppGlobals)	\
    (This)->lpVtbl -> GetGlobalsObject(This,ExtractFrom,ppGlobals)

#define IVsExtensibility_GetConfigMgr(This,pIVsProject,itemid,ppCfgMgr)	\
    (This)->lpVtbl -> GetConfigMgr(This,pIVsProject,itemid,ppCfgMgr)

#define IVsExtensibility_FireMacroReset(This)	\
    (This)->lpVtbl -> FireMacroReset(This)

#define IVsExtensibility_GetDocumentFromDocCookie(This,lDocCookie,ppDoc)	\
    (This)->lpVtbl -> GetDocumentFromDocCookie(This,lDocCookie,ppDoc)

#define IVsExtensibility_IsMethodDisabled(This,pGUID,dispid)	\
    (This)->lpVtbl -> IsMethodDisabled(This,pGUID,dispid)

#define IVsExtensibility_SetSuppressUI(This,In)	\
    (This)->lpVtbl -> SetSuppressUI(This,In)

#define IVsExtensibility_GetSuppressUI(This,pOut)	\
    (This)->lpVtbl -> GetSuppressUI(This,pOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_get_Properties_Proxy( 
    IVsExtensibility * This,
    /* [in] */ ISupportVSProperties *pParent,
    /* [in] */ IDispatch *pdispPropObj,
    /* [out] */ Properties **ppProperties);


void __RPC_STUB IVsExtensibility_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_RunWizardFile_Proxy( 
    IVsExtensibility * This,
    /* [in] */ BSTR bstrWizFilename,
    /* [in] */ long hwndOwner,
    /* [in] */ SAFEARRAY * *vContextParams,
    /* [retval][out] */ wizardResult *pResult);


void __RPC_STUB IVsExtensibility_RunWizardFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_Get_TextBuffer_Proxy( 
    IVsExtensibility * This,
    /* [in] */ IUnknown *pVsTextStream,
    /* [in] */ IExtensibleObjectSite *pParent,
    /* [retval][out] */ TextBuffer **ppTextBuffer);


void __RPC_STUB IVsExtensibility_Get_TextBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_EnterAutomationFunction_Proxy( 
    IVsExtensibility * This);


void __RPC_STUB IVsExtensibility_EnterAutomationFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_ExitAutomationFunction_Proxy( 
    IVsExtensibility * This);


void __RPC_STUB IVsExtensibility_ExitAutomationFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_IsInAutomationFunction_Proxy( 
    IVsExtensibility * This,
    /* [retval][out] */ BOOL *pfInAutoFunc);


void __RPC_STUB IVsExtensibility_IsInAutomationFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetUserControl_Proxy( 
    IVsExtensibility * This,
    /* [out] */ VARIANT_BOOL *fUserControl);


void __RPC_STUB IVsExtensibility_GetUserControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_SetUserControl_Proxy( 
    IVsExtensibility * This,
    /* [in] */ VARIANT_BOOL fUserControl);


void __RPC_STUB IVsExtensibility_SetUserControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_SetUserControlUnlatched_Proxy( 
    IVsExtensibility * This,
    /* [in] */ VARIANT_BOOL fUserControl);


void __RPC_STUB IVsExtensibility_SetUserControlUnlatched_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_LockServer_Proxy( 
    IVsExtensibility * This,
    /* [in] */ VARIANT_BOOL __MIDL_0010);


void __RPC_STUB IVsExtensibility_LockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetLockCount_Proxy( 
    IVsExtensibility * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB IVsExtensibility_GetLockCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_TestForShutdown_Proxy( 
    IVsExtensibility * This,
    /* [retval][out] */ VARIANT_BOOL *fShutdown);


void __RPC_STUB IVsExtensibility_TestForShutdown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetGlobalsObject_Proxy( 
    IVsExtensibility * This,
    /* [in] */ VARIANT ExtractFrom,
    /* [retval][out] */ Globals **ppGlobals);


void __RPC_STUB IVsExtensibility_GetGlobalsObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetConfigMgr_Proxy( 
    IVsExtensibility * This,
    /* [in] */ IUnknown *pIVsProject,
    DWORD_PTR itemid,
    /* [retval][out] */ ConfigurationManager **ppCfgMgr);


void __RPC_STUB IVsExtensibility_GetConfigMgr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_FireMacroReset_Proxy( 
    IVsExtensibility * This);


void __RPC_STUB IVsExtensibility_FireMacroReset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetDocumentFromDocCookie_Proxy( 
    IVsExtensibility * This,
    LONG_PTR lDocCookie,
    /* [retval][out] */ Document **ppDoc);


void __RPC_STUB IVsExtensibility_GetDocumentFromDocCookie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_IsMethodDisabled_Proxy( 
    IVsExtensibility * This,
    const GUID *pGUID,
    long dispid);


void __RPC_STUB IVsExtensibility_IsMethodDisabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_SetSuppressUI_Proxy( 
    IVsExtensibility * This,
    VARIANT_BOOL In);


void __RPC_STUB IVsExtensibility_SetSuppressUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetSuppressUI_Proxy( 
    IVsExtensibility * This,
    VARIANT_BOOL *pOut);


void __RPC_STUB IVsExtensibility_GetSuppressUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsExtensibility_INTERFACE_DEFINED__ */


#ifndef __IVsGlobalsCallback_INTERFACE_DEFINED__
#define __IVsGlobalsCallback_INTERFACE_DEFINED__

/* interface IVsGlobalsCallback */
/* [object][restricted][hidden][uuid] */ 


EXTERN_C const IID IID_IVsGlobalsCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e2cc506a-588b-4f65-a1f0-2244c060abcb")
    IVsGlobalsCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE WriteVariablesToData( 
            /* [in] */ LPCOLESTR pVariableName,
            /* [in] */ VARIANT *varData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReadData( 
            /* [in] */ Globals *pGlobals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearVariables( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE VariableChanged( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanModifySource( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            IDispatch **ppOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsGlobalsCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsGlobalsCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsGlobalsCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsGlobalsCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *WriteVariablesToData )( 
            IVsGlobalsCallback * This,
            /* [in] */ LPCOLESTR pVariableName,
            /* [in] */ VARIANT *varData);
        
        HRESULT ( STDMETHODCALLTYPE *ReadData )( 
            IVsGlobalsCallback * This,
            /* [in] */ Globals *pGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *ClearVariables )( 
            IVsGlobalsCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *VariableChanged )( 
            IVsGlobalsCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *CanModifySource )( 
            IVsGlobalsCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IVsGlobalsCallback * This,
            IDispatch **ppOut);
        
        END_INTERFACE
    } IVsGlobalsCallbackVtbl;

    interface IVsGlobalsCallback
    {
        CONST_VTBL struct IVsGlobalsCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsGlobalsCallback_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsGlobalsCallback_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsGlobalsCallback_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsGlobalsCallback_WriteVariablesToData(This,pVariableName,varData)	\
    (This)->lpVtbl -> WriteVariablesToData(This,pVariableName,varData)

#define IVsGlobalsCallback_ReadData(This,pGlobals)	\
    (This)->lpVtbl -> ReadData(This,pGlobals)

#define IVsGlobalsCallback_ClearVariables(This)	\
    (This)->lpVtbl -> ClearVariables(This)

#define IVsGlobalsCallback_VariableChanged(This)	\
    (This)->lpVtbl -> VariableChanged(This)

#define IVsGlobalsCallback_CanModifySource(This)	\
    (This)->lpVtbl -> CanModifySource(This)

#define IVsGlobalsCallback_GetParent(This,ppOut)	\
    (This)->lpVtbl -> GetParent(This,ppOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_WriteVariablesToData_Proxy( 
    IVsGlobalsCallback * This,
    /* [in] */ LPCOLESTR pVariableName,
    /* [in] */ VARIANT *varData);


void __RPC_STUB IVsGlobalsCallback_WriteVariablesToData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_ReadData_Proxy( 
    IVsGlobalsCallback * This,
    /* [in] */ Globals *pGlobals);


void __RPC_STUB IVsGlobalsCallback_ReadData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_ClearVariables_Proxy( 
    IVsGlobalsCallback * This);


void __RPC_STUB IVsGlobalsCallback_ClearVariables_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_VariableChanged_Proxy( 
    IVsGlobalsCallback * This);


void __RPC_STUB IVsGlobalsCallback_VariableChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_CanModifySource_Proxy( 
    IVsGlobalsCallback * This);


void __RPC_STUB IVsGlobalsCallback_CanModifySource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_GetParent_Proxy( 
    IVsGlobalsCallback * This,
    IDispatch **ppOut);


void __RPC_STUB IVsGlobalsCallback_GetParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsGlobalsCallback_INTERFACE_DEFINED__ */


#ifndef __IVsGlobals_INTERFACE_DEFINED__
#define __IVsGlobals_INTERFACE_DEFINED__

/* interface IVsGlobals */
/* [object][restricted][hidden][uuid] */ 


EXTERN_C const IID IID_IVsGlobals;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("192ac688-e7c6-4f9d-8180-4b37efbf6f3a")
    IVsGlobals : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Load( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Empty( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsGlobalsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsGlobals * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsGlobals * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsGlobals * This);
        
        HRESULT ( STDMETHODCALLTYPE *Load )( 
            IVsGlobals * This);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IVsGlobals * This);
        
        HRESULT ( STDMETHODCALLTYPE *Empty )( 
            IVsGlobals * This);
        
        END_INTERFACE
    } IVsGlobalsVtbl;

    interface IVsGlobals
    {
        CONST_VTBL struct IVsGlobalsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsGlobals_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsGlobals_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsGlobals_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsGlobals_Load(This)	\
    (This)->lpVtbl -> Load(This)

#define IVsGlobals_Save(This)	\
    (This)->lpVtbl -> Save(This)

#define IVsGlobals_Empty(This)	\
    (This)->lpVtbl -> Empty(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVsGlobals_Load_Proxy( 
    IVsGlobals * This);


void __RPC_STUB IVsGlobals_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobals_Save_Proxy( 
    IVsGlobals * This);


void __RPC_STUB IVsGlobals_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobals_Empty_Proxy( 
    IVsGlobals * This);


void __RPC_STUB IVsGlobals_Empty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsGlobals_INTERFACE_DEFINED__ */


#ifndef __IDTCommandTarget_INTERFACE_DEFINED__
#define __IDTCommandTarget_INTERFACE_DEFINED__

/* interface IDTCommandTarget */
/* [helpstringcontext][helpstring][helpcontext][uuid][local][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IDTCommandTarget;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7ef39a3e-590d-4879-88d4-c9be5bcfd92e")
    IDTCommandTarget : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE QueryStatus( 
            /* [in] */ BSTR CmdName,
            /* [in] */ vsCommandStatusTextWanted NeededText,
            /* [out][in] */ vsCommandStatus *StatusOption,
            /* [out][in] */ VARIANT *CommandText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Exec( 
            /* [in] */ BSTR CmdName,
            /* [in] */ vsCommandExecOption ExecuteOption,
            /* [in] */ VARIANT *VariantIn,
            /* [out][in] */ VARIANT *VariantOut,
            /* [out][in] */ VARIANT_BOOL *Handled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDTCommandTargetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDTCommandTarget * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDTCommandTarget * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDTCommandTarget * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDTCommandTarget * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDTCommandTarget * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDTCommandTarget * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDTCommandTarget * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *QueryStatus )( 
            IDTCommandTarget * This,
            /* [in] */ BSTR CmdName,
            /* [in] */ vsCommandStatusTextWanted NeededText,
            /* [out][in] */ vsCommandStatus *StatusOption,
            /* [out][in] */ VARIANT *CommandText);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Exec )( 
            IDTCommandTarget * This,
            /* [in] */ BSTR CmdName,
            /* [in] */ vsCommandExecOption ExecuteOption,
            /* [in] */ VARIANT *VariantIn,
            /* [out][in] */ VARIANT *VariantOut,
            /* [out][in] */ VARIANT_BOOL *Handled);
        
        END_INTERFACE
    } IDTCommandTargetVtbl;

    interface IDTCommandTarget
    {
        CONST_VTBL struct IDTCommandTargetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDTCommandTarget_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDTCommandTarget_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDTCommandTarget_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDTCommandTarget_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDTCommandTarget_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDTCommandTarget_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDTCommandTarget_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDTCommandTarget_QueryStatus(This,CmdName,NeededText,StatusOption,CommandText)	\
    (This)->lpVtbl -> QueryStatus(This,CmdName,NeededText,StatusOption,CommandText)

#define IDTCommandTarget_Exec(This,CmdName,ExecuteOption,VariantIn,VariantOut,Handled)	\
    (This)->lpVtbl -> Exec(This,CmdName,ExecuteOption,VariantIn,VariantOut,Handled)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTCommandTarget_QueryStatus_Proxy( 
    IDTCommandTarget * This,
    /* [in] */ BSTR CmdName,
    /* [in] */ vsCommandStatusTextWanted NeededText,
    /* [out][in] */ vsCommandStatus *StatusOption,
    /* [out][in] */ VARIANT *CommandText);


void __RPC_STUB IDTCommandTarget_QueryStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTCommandTarget_Exec_Proxy( 
    IDTCommandTarget * This,
    /* [in] */ BSTR CmdName,
    /* [in] */ vsCommandExecOption ExecuteOption,
    /* [in] */ VARIANT *VariantIn,
    /* [out][in] */ VARIANT *VariantOut,
    /* [out][in] */ VARIANT_BOOL *Handled);


void __RPC_STUB IDTCommandTarget_Exec_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDTCommandTarget_INTERFACE_DEFINED__ */


#ifndef __CommandWindow_INTERFACE_DEFINED__
#define __CommandWindow_INTERFACE_DEFINED__

/* interface CommandWindow */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CommandWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("509b9955-7303-48c9-90d4-e165b974e6ba")
    CommandWindow : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendInput( 
            BSTR Command,
            VARIANT_BOOL Execute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputString( 
            BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextDocument( 
            /* [retval][out] */ TextDocument **ppTextDocument) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommandWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CommandWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CommandWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CommandWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CommandWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CommandWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CommandWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CommandWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CommandWindow * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CommandWindow * This,
            /* [retval][out] */ Window **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendInput )( 
            CommandWindow * This,
            BSTR Command,
            VARIANT_BOOL Execute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutputString )( 
            CommandWindow * This,
            BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            CommandWindow * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextDocument )( 
            CommandWindow * This,
            /* [retval][out] */ TextDocument **ppTextDocument);
        
        END_INTERFACE
    } CommandWindowVtbl;

    interface CommandWindow
    {
        CONST_VTBL struct CommandWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CommandWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CommandWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CommandWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CommandWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CommandWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CommandWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CommandWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CommandWindow_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CommandWindow_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define CommandWindow_SendInput(This,Command,Execute)	\
    (This)->lpVtbl -> SendInput(This,Command,Execute)

#define CommandWindow_OutputString(This,Text)	\
    (This)->lpVtbl -> OutputString(This,Text)

#define CommandWindow_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define CommandWindow_get_TextDocument(This,ppTextDocument)	\
    (This)->lpVtbl -> get_TextDocument(This,ppTextDocument)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_get_DTE_Proxy( 
    CommandWindow * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CommandWindow_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_get_Parent_Proxy( 
    CommandWindow * This,
    /* [retval][out] */ Window **pParent);


void __RPC_STUB CommandWindow_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_SendInput_Proxy( 
    CommandWindow * This,
    BSTR Command,
    VARIANT_BOOL Execute);


void __RPC_STUB CommandWindow_SendInput_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_OutputString_Proxy( 
    CommandWindow * This,
    BSTR Text);


void __RPC_STUB CommandWindow_OutputString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_Clear_Proxy( 
    CommandWindow * This);


void __RPC_STUB CommandWindow_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_get_TextDocument_Proxy( 
    CommandWindow * This,
    /* [retval][out] */ TextDocument **ppTextDocument);


void __RPC_STUB CommandWindow_get_TextDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CommandWindow_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DTE;

#ifdef __cplusplus

class DECLSPEC_UUID("3c9cfe1e-389f-4118-9fad-365385190329")
DTE;
#endif

EXTERN_C const CLSID CLSID_Solution;

#ifdef __cplusplus

class DECLSPEC_UUID("b35caa8c-77de-4ab3-8e5a-f038e3fc6056")
Solution;
#endif

EXTERN_C const CLSID CLSID_DTEEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("c6304bab-6765-4c63-9017-4940aeb6f207")
DTEEvents;
#endif

#ifndef ___DTEEvents_INTERFACE_DEFINED__
#define ___DTEEvents_INTERFACE_DEFINED__

/* interface _DTEEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__DTEEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FA1BB6D7-CA83-11D2-AAB2-00C04F688DDE")
    _DTEEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _DTEEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DTEEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DTEEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DTEEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DTEEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DTEEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DTEEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DTEEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _DTEEventsVtbl;

    interface _DTEEvents
    {
        CONST_VTBL struct _DTEEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DTEEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DTEEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DTEEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DTEEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DTEEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DTEEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DTEEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___DTEEvents_INTERFACE_DEFINED__ */


#ifndef ___ProjectItemsEvents_INTERFACE_DEFINED__
#define ___ProjectItemsEvents_INTERFACE_DEFINED__

/* interface _ProjectItemsEvents */
/* [helpstringcontext][helpstring][helpcontext][object][dual][uuid] */ 


EXTERN_C const IID IID__ProjectItemsEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22800963-2811-410d-bf87-a7808eac977d")
    _ProjectItemsEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _ProjectItemsEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ProjectItemsEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ProjectItemsEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ProjectItemsEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ProjectItemsEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ProjectItemsEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ProjectItemsEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ProjectItemsEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _ProjectItemsEventsVtbl;

    interface _ProjectItemsEvents
    {
        CONST_VTBL struct _ProjectItemsEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ProjectItemsEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _ProjectItemsEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _ProjectItemsEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _ProjectItemsEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _ProjectItemsEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _ProjectItemsEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _ProjectItemsEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ProjectItemsEvents_INTERFACE_DEFINED__ */


#ifndef ___dispProjectItemsEvents_DISPINTERFACE_DEFINED__
#define ___dispProjectItemsEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispProjectItemsEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispProjectItemsEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("6962753f-efd5-41c5-b083-d70687166aeb")
    _dispProjectItemsEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispProjectItemsEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispProjectItemsEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispProjectItemsEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispProjectItemsEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispProjectItemsEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispProjectItemsEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispProjectItemsEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispProjectItemsEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispProjectItemsEventsVtbl;

    interface _dispProjectItemsEvents
    {
        CONST_VTBL struct _dispProjectItemsEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispProjectItemsEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispProjectItemsEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispProjectItemsEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispProjectItemsEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispProjectItemsEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispProjectItemsEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispProjectItemsEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispProjectItemsEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ProjectItemsEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("de6c1098-93ca-4f49-bef0-262a13ca1176")
ProjectItemsEvents;
#endif

#ifndef ___ProjectsEvents_INTERFACE_DEFINED__
#define ___ProjectsEvents_INTERFACE_DEFINED__

/* interface _ProjectsEvents */
/* [helpstringcontext][helpstring][helpcontext][object][dual][uuid] */ 


EXTERN_C const IID IID__ProjectsEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("85451f83-b5ca-437f-a619-0cb705707420")
    _ProjectsEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _ProjectsEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ProjectsEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ProjectsEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ProjectsEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ProjectsEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ProjectsEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ProjectsEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ProjectsEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _ProjectsEventsVtbl;

    interface _ProjectsEvents
    {
        CONST_VTBL struct _ProjectsEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ProjectsEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _ProjectsEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _ProjectsEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _ProjectsEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _ProjectsEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _ProjectsEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _ProjectsEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ProjectsEvents_INTERFACE_DEFINED__ */


#ifndef ___dispProjectsEvents_DISPINTERFACE_DEFINED__
#define ___dispProjectsEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispProjectsEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispProjectsEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7f508d55-627f-4d7f-be0b-9e3d829ff0ed")
    _dispProjectsEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispProjectsEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispProjectsEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispProjectsEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispProjectsEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispProjectsEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispProjectsEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispProjectsEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispProjectsEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispProjectsEventsVtbl;

    interface _dispProjectsEvents
    {
        CONST_VTBL struct _dispProjectsEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispProjectsEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispProjectsEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispProjectsEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispProjectsEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispProjectsEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispProjectsEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispProjectsEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispProjectsEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ProjectsEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("536a4be3-a376-408e-954c-471c779e216f")
ProjectsEvents;
#endif

#ifndef ___MiscSlnFilesEventsRoot_INTERFACE_DEFINED__
#define ___MiscSlnFilesEventsRoot_INTERFACE_DEFINED__

/* interface _MiscSlnFilesEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__MiscSlnFilesEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7658B944-F37B-11D2-AACF-00C04F688DDE")
    _MiscSlnFilesEventsRoot : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionItemsEvents( 
            /* [retval][out] */ IDispatch **ppeNew) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_MiscFilesEvents( 
            /* [retval][out] */ IDispatch **ppeNew) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _MiscSlnFilesEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _MiscSlnFilesEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _MiscSlnFilesEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _MiscSlnFilesEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _MiscSlnFilesEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _MiscSlnFilesEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _MiscSlnFilesEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _MiscSlnFilesEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionItemsEvents )( 
            _MiscSlnFilesEventsRoot * This,
            /* [retval][out] */ IDispatch **ppeNew);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MiscFilesEvents )( 
            _MiscSlnFilesEventsRoot * This,
            /* [retval][out] */ IDispatch **ppeNew);
        
        END_INTERFACE
    } _MiscSlnFilesEventsRootVtbl;

    interface _MiscSlnFilesEventsRoot
    {
        CONST_VTBL struct _MiscSlnFilesEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _MiscSlnFilesEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _MiscSlnFilesEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _MiscSlnFilesEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _MiscSlnFilesEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _MiscSlnFilesEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _MiscSlnFilesEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _MiscSlnFilesEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _MiscSlnFilesEventsRoot_get_SolutionItemsEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_SolutionItemsEvents(This,ppeNew)

#define _MiscSlnFilesEventsRoot_get_MiscFilesEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_MiscFilesEvents(This,ppeNew)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget][id] */ HRESULT STDMETHODCALLTYPE _MiscSlnFilesEventsRoot_get_SolutionItemsEvents_Proxy( 
    _MiscSlnFilesEventsRoot * This,
    /* [retval][out] */ IDispatch **ppeNew);


void __RPC_STUB _MiscSlnFilesEventsRoot_get_SolutionItemsEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _MiscSlnFilesEventsRoot_get_MiscFilesEvents_Proxy( 
    _MiscSlnFilesEventsRoot * This,
    /* [retval][out] */ IDispatch **ppeNew);


void __RPC_STUB _MiscSlnFilesEventsRoot_get_MiscFilesEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___MiscSlnFilesEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___CommandBarControlEvents_INTERFACE_DEFINED__
#define ___CommandBarControlEvents_INTERFACE_DEFINED__

/* interface _CommandBarControlEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__CommandBarControlEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9E66FE98-A1C6-421d-8C0C-6DA4E652E770")
    _CommandBarControlEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _CommandBarControlEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _CommandBarControlEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _CommandBarControlEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _CommandBarControlEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _CommandBarControlEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _CommandBarControlEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _CommandBarControlEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _CommandBarControlEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _CommandBarControlEventsVtbl;

    interface _CommandBarControlEvents
    {
        CONST_VTBL struct _CommandBarControlEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _CommandBarControlEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _CommandBarControlEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _CommandBarControlEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _CommandBarControlEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _CommandBarControlEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _CommandBarControlEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _CommandBarControlEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___CommandBarControlEvents_INTERFACE_DEFINED__ */


#ifndef ___dispCommandBarControlEvents_DISPINTERFACE_DEFINED__
#define ___dispCommandBarControlEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispCommandBarControlEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispCommandBarControlEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("987FB893-F96D-11D0-BBBB-00A0C90F2744")
    _dispCommandBarControlEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispCommandBarControlEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispCommandBarControlEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispCommandBarControlEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispCommandBarControlEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispCommandBarControlEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispCommandBarControlEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispCommandBarControlEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispCommandBarControlEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispCommandBarControlEventsVtbl;

    interface _dispCommandBarControlEvents
    {
        CONST_VTBL struct _dispCommandBarControlEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispCommandBarControlEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispCommandBarControlEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispCommandBarControlEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispCommandBarControlEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispCommandBarControlEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispCommandBarControlEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispCommandBarControlEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispCommandBarControlEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_CommandBarEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("bfd4b2b2-9eec-4db8-aba0-ac316f4c7328")
CommandBarEvents;
#endif

#ifndef ___CommandEvents_INTERFACE_DEFINED__
#define ___CommandEvents_INTERFACE_DEFINED__

/* interface _CommandEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__CommandEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A79FC678-0D0A-496a-B9DC-0D5B9E1CA9FC")
    _CommandEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _CommandEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _CommandEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _CommandEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _CommandEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _CommandEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _CommandEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _CommandEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _CommandEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _CommandEventsVtbl;

    interface _CommandEvents
    {
        CONST_VTBL struct _CommandEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _CommandEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _CommandEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _CommandEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _CommandEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _CommandEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _CommandEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _CommandEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___CommandEvents_INTERFACE_DEFINED__ */


#ifndef ___dispCommandEvents_DISPINTERFACE_DEFINED__
#define ___dispCommandEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispCommandEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispCommandEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FF2D5C12-FEEA-11D0-BBC8-00A0C90F2744")
    _dispCommandEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispCommandEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispCommandEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispCommandEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispCommandEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispCommandEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispCommandEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispCommandEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispCommandEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispCommandEventsVtbl;

    interface _dispCommandEvents
    {
        CONST_VTBL struct _dispCommandEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispCommandEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispCommandEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispCommandEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispCommandEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispCommandEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispCommandEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispCommandEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispCommandEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_CommandEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("1ded92b5-9a46-4b29-93ef-b5e07016659e")
CommandEvents;
#endif

#ifndef ___SelectionEvents_INTERFACE_DEFINED__
#define ___SelectionEvents_INTERFACE_DEFINED__

/* interface _SelectionEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__SelectionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EB6783DB-1819-496d-84A4-3CFF883010F6")
    _SelectionEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _SelectionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _SelectionEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _SelectionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _SelectionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _SelectionEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _SelectionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _SelectionEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _SelectionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _SelectionEventsVtbl;

    interface _SelectionEvents
    {
        CONST_VTBL struct _SelectionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _SelectionEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _SelectionEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _SelectionEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _SelectionEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _SelectionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _SelectionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _SelectionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___SelectionEvents_INTERFACE_DEFINED__ */


#ifndef ___dispSelectionEvents_DISPINTERFACE_DEFINED__
#define ___dispSelectionEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispSelectionEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispSelectionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEB28B3-23E6-11D1-AE5C-00A0C90F26F4")
    _dispSelectionEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispSelectionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispSelectionEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispSelectionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispSelectionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispSelectionEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispSelectionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispSelectionEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispSelectionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispSelectionEventsVtbl;

    interface _dispSelectionEvents
    {
        CONST_VTBL struct _dispSelectionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispSelectionEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispSelectionEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispSelectionEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispSelectionEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispSelectionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispSelectionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispSelectionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispSelectionEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SelectionEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("af37511e-9e9d-4234-a5a1-7584d290e061")
SelectionEvents;
#endif

#ifndef ___BuildEvents_INTERFACE_DEFINED__
#define ___BuildEvents_INTERFACE_DEFINED__

/* interface _BuildEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__BuildEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("794a2ba5-ffa6-4fc5-bf13-957b2c22edd7")
    _BuildEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _BuildEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _BuildEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _BuildEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _BuildEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _BuildEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _BuildEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _BuildEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _BuildEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _BuildEventsVtbl;

    interface _BuildEvents
    {
        CONST_VTBL struct _BuildEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BuildEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _BuildEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _BuildEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _BuildEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _BuildEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _BuildEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _BuildEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BuildEvents_INTERFACE_DEFINED__ */


#ifndef ___dispBuildEvents_DISPINTERFACE_DEFINED__
#define ___dispBuildEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispBuildEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispBuildEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1926364e-6b90-46cb-a44d-8a80fb11acd9")
    _dispBuildEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispBuildEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispBuildEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispBuildEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispBuildEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispBuildEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispBuildEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispBuildEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispBuildEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispBuildEventsVtbl;

    interface _dispBuildEvents
    {
        CONST_VTBL struct _dispBuildEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispBuildEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispBuildEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispBuildEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispBuildEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispBuildEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispBuildEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispBuildEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispBuildEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_BuildEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("d83d60e3-229f-4660-8dd0-28b629eedcda")
BuildEvents;
#endif

#ifndef ___SolutionEvents_INTERFACE_DEFINED__
#define ___SolutionEvents_INTERFACE_DEFINED__

/* interface _SolutionEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__SolutionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BF8BBF37-5415-46a9-940D-594CAD9DEC26")
    _SolutionEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _SolutionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _SolutionEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _SolutionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _SolutionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _SolutionEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _SolutionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _SolutionEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _SolutionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _SolutionEventsVtbl;

    interface _SolutionEvents
    {
        CONST_VTBL struct _SolutionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _SolutionEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _SolutionEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _SolutionEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _SolutionEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _SolutionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _SolutionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _SolutionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___SolutionEvents_INTERFACE_DEFINED__ */


#ifndef ___dispSolutionEvents_DISPINTERFACE_DEFINED__
#define ___dispSolutionEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispSolutionEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispSolutionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCFF1C2-261C-11D1-AE5E-00A0C90F26F4")
    _dispSolutionEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispSolutionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispSolutionEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispSolutionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispSolutionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispSolutionEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispSolutionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispSolutionEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispSolutionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispSolutionEventsVtbl;

    interface _dispSolutionEvents
    {
        CONST_VTBL struct _dispSolutionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispSolutionEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispSolutionEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispSolutionEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispSolutionEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispSolutionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispSolutionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispSolutionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispSolutionEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SolutionEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("88ac98c7-b38c-404b-bd86-d2a4f2e89dca")
SolutionEvents;
#endif

#ifndef __ContextAttribute_INTERFACE_DEFINED__
#define __ContextAttribute_INTERFACE_DEFINED__

/* interface ContextAttribute */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ContextAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1a6e2cb3-b897-42eb-96be-ff0fdb65db2f")
    ContextAttribute : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ContextAttributes **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Values( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ContextAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ContextAttribute * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ContextAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ContextAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ContextAttribute * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ContextAttribute * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ContextAttribute * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ContextAttribute * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ContextAttribute * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ContextAttribute * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            ContextAttribute * This,
            /* [retval][out] */ ContextAttributes **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Values )( 
            ContextAttribute * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ContextAttribute * This);
        
        END_INTERFACE
    } ContextAttributeVtbl;

    interface ContextAttribute
    {
        CONST_VTBL struct ContextAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ContextAttribute_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ContextAttribute_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ContextAttribute_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ContextAttribute_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ContextAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ContextAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ContextAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ContextAttribute_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define ContextAttribute_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ContextAttribute_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define ContextAttribute_get_Values(This,pVal)	\
    (This)->lpVtbl -> get_Values(This,pVal)

#define ContextAttribute_Remove(This)	\
    (This)->lpVtbl -> Remove(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_get_Name_Proxy( 
    ContextAttribute * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB ContextAttribute_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_get_DTE_Proxy( 
    ContextAttribute * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ContextAttribute_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_get_Collection_Proxy( 
    ContextAttribute * This,
    /* [retval][out] */ ContextAttributes **ppCollection);


void __RPC_STUB ContextAttribute_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_get_Values_Proxy( 
    ContextAttribute * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB ContextAttribute_get_Values_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_Remove_Proxy( 
    ContextAttribute * This);


void __RPC_STUB ContextAttribute_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ContextAttribute_INTERFACE_DEFINED__ */


#ifndef ___DocumentEventsRoot_INTERFACE_DEFINED__
#define ___DocumentEventsRoot_INTERFACE_DEFINED__

/* interface _DocumentEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__DocumentEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DC5437F4-F114-11D2-AACF-00C04F688DDE")
    _DocumentEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_DocumentEvents( 
            /* [in] */ Document *WindowFilter,
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _DocumentEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DocumentEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DocumentEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DocumentEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DocumentEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DocumentEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DocumentEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DocumentEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_DocumentEvents )( 
            _DocumentEventsRoot * This,
            /* [in] */ Document *WindowFilter,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _DocumentEventsRootVtbl;

    interface _DocumentEventsRoot
    {
        CONST_VTBL struct _DocumentEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DocumentEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DocumentEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DocumentEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DocumentEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DocumentEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DocumentEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DocumentEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _DocumentEventsRoot_get_DocumentEvents(This,WindowFilter,ppdisp)	\
    (This)->lpVtbl -> get_DocumentEvents(This,WindowFilter,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _DocumentEventsRoot_get_DocumentEvents_Proxy( 
    _DocumentEventsRoot * This,
    /* [in] */ Document *WindowFilter,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _DocumentEventsRoot_get_DocumentEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___DocumentEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___DocumentEvents_INTERFACE_DEFINED__
#define ___DocumentEvents_INTERFACE_DEFINED__

/* interface _DocumentEvents */
/* [object][oleautomation][uuid] */ 


EXTERN_C const IID IID__DocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DC5437F5-F114-11D2-AACF-00C04F688DDE")
    _DocumentEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _DocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DocumentEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DocumentEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DocumentEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DocumentEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _DocumentEventsVtbl;

    interface _DocumentEvents
    {
        CONST_VTBL struct _DocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DocumentEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DocumentEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DocumentEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___DocumentEvents_INTERFACE_DEFINED__ */


#ifndef ___dispDocumentEvents_DISPINTERFACE_DEFINED__
#define ___dispDocumentEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispDocumentEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispDocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DC5437F6-F114-11D2-AACF-00C04F688DDE")
    _dispDocumentEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispDocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispDocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispDocumentEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispDocumentEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispDocumentEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispDocumentEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispDocumentEventsVtbl;

    interface _dispDocumentEvents
    {
        CONST_VTBL struct _dispDocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispDocumentEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispDocumentEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispDocumentEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispDocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispDocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispDocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispDocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispDocumentEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("DC5437F7-F114-11D2-AACF-00C04F688DDE")
DocumentEvents;
#endif

#ifndef ___TextEditorEventsRoot_INTERFACE_DEFINED__
#define ___TextEditorEventsRoot_INTERFACE_DEFINED__

/* interface _TextEditorEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__TextEditorEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B3C38885-B288-44a8-B290-34FE63BF3C76")
    _TextEditorEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_TextEditorEvents( 
            /* [in] */ TextDocument *TextDocumentFilter,
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _TextEditorEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TextEditorEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TextEditorEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TextEditorEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TextEditorEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TextEditorEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TextEditorEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TextEditorEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_TextEditorEvents )( 
            _TextEditorEventsRoot * This,
            /* [in] */ TextDocument *TextDocumentFilter,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _TextEditorEventsRootVtbl;

    interface _TextEditorEventsRoot
    {
        CONST_VTBL struct _TextEditorEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TextEditorEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _TextEditorEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _TextEditorEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _TextEditorEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _TextEditorEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _TextEditorEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _TextEditorEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _TextEditorEventsRoot_get_TextEditorEvents(This,TextDocumentFilter,ppdisp)	\
    (This)->lpVtbl -> get_TextEditorEvents(This,TextDocumentFilter,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _TextEditorEventsRoot_get_TextEditorEvents_Proxy( 
    _TextEditorEventsRoot * This,
    /* [in] */ TextDocument *TextDocumentFilter,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _TextEditorEventsRoot_get_TextEditorEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___TextEditorEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___TextEditorEvents_INTERFACE_DEFINED__
#define ___TextEditorEvents_INTERFACE_DEFINED__

/* interface _TextEditorEvents */
/* [object][oleautomation][uuid] */ 


EXTERN_C const IID IID__TextEditorEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23B7A868-6C89-436a-94FA-25D755456A77")
    _TextEditorEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _TextEditorEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TextEditorEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TextEditorEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TextEditorEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TextEditorEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TextEditorEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TextEditorEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TextEditorEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _TextEditorEventsVtbl;

    interface _TextEditorEvents
    {
        CONST_VTBL struct _TextEditorEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TextEditorEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _TextEditorEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _TextEditorEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _TextEditorEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _TextEditorEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _TextEditorEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _TextEditorEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___TextEditorEvents_INTERFACE_DEFINED__ */


#ifndef ___dispTextEditorEvents_DISPINTERFACE_DEFINED__
#define ___dispTextEditorEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispTextEditorEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispTextEditorEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2699DD44-C507-4da3-AA34-314A6C21DFE2")
    _dispTextEditorEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispTextEditorEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispTextEditorEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispTextEditorEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispTextEditorEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispTextEditorEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispTextEditorEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispTextEditorEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispTextEditorEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispTextEditorEventsVtbl;

    interface _dispTextEditorEvents
    {
        CONST_VTBL struct _dispTextEditorEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispTextEditorEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispTextEditorEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispTextEditorEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispTextEditorEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispTextEditorEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispTextEditorEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispTextEditorEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispTextEditorEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TextEditorEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("ADF22C37-0069-4adf-B12D-D8D47C38FE79")
TextEditorEvents;
#endif

#ifndef ___WindowEventsRoot_INTERFACE_DEFINED__
#define ___WindowEventsRoot_INTERFACE_DEFINED__

/* interface _WindowEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__WindowEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17d12026-ba99-403e-a359-71fd1e5a72cd")
    _WindowEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_WindowEvents( 
            /* [in] */ Window *WindowFilter,
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _WindowEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _WindowEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _WindowEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _WindowEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _WindowEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _WindowEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _WindowEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _WindowEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_WindowEvents )( 
            _WindowEventsRoot * This,
            /* [in] */ Window *WindowFilter,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _WindowEventsRootVtbl;

    interface _WindowEventsRoot
    {
        CONST_VTBL struct _WindowEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _WindowEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _WindowEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _WindowEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _WindowEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _WindowEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _WindowEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _WindowEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _WindowEventsRoot_get_WindowEvents(This,WindowFilter,ppdisp)	\
    (This)->lpVtbl -> get_WindowEvents(This,WindowFilter,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _WindowEventsRoot_get_WindowEvents_Proxy( 
    _WindowEventsRoot * This,
    /* [in] */ Window *WindowFilter,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _WindowEventsRoot_get_WindowEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___WindowEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___WindowEvents_INTERFACE_DEFINED__
#define ___WindowEvents_INTERFACE_DEFINED__

/* interface _WindowEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__WindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0D3A23A8-67BB-11D2-97C1-00C04FB6C6FF")
    _WindowEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _WindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _WindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _WindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _WindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _WindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _WindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _WindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _WindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _WindowEventsVtbl;

    interface _WindowEvents
    {
        CONST_VTBL struct _WindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _WindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _WindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _WindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _WindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _WindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _WindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _WindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___WindowEvents_INTERFACE_DEFINED__ */


#ifndef ___dispWindowEvents_DISPINTERFACE_DEFINED__
#define ___dispWindowEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispWindowEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispWindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0D3A23A9-67BB-11D2-97C1-00C04FB6C6FF")
    _dispWindowEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispWindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispWindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispWindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispWindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispWindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispWindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispWindowEventsVtbl;

    interface _dispWindowEvents
    {
        CONST_VTBL struct _dispWindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispWindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispWindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispWindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispWindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispWindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispWindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispWindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispWindowEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WindowEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("2e260fd4-c130-4e6d-8ebc-4a3bfd188181")
WindowEvents;
#endif

#ifndef ___OutputWindowEventsRoot_INTERFACE_DEFINED__
#define ___OutputWindowEventsRoot_INTERFACE_DEFINED__

/* interface _OutputWindowEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__OutputWindowEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa6f4085-33b6-4629-b9ea-692101007cc2")
    _OutputWindowEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_OutputWindowEvents( 
            /* [in] */ BSTR PaneFilter,
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _OutputWindowEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _OutputWindowEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _OutputWindowEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _OutputWindowEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_OutputWindowEvents )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ BSTR PaneFilter,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _OutputWindowEventsRootVtbl;

    interface _OutputWindowEventsRoot
    {
        CONST_VTBL struct _OutputWindowEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _OutputWindowEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _OutputWindowEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _OutputWindowEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _OutputWindowEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _OutputWindowEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _OutputWindowEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _OutputWindowEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _OutputWindowEventsRoot_get_OutputWindowEvents(This,PaneFilter,ppdisp)	\
    (This)->lpVtbl -> get_OutputWindowEvents(This,PaneFilter,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _OutputWindowEventsRoot_get_OutputWindowEvents_Proxy( 
    _OutputWindowEventsRoot * This,
    /* [in] */ BSTR PaneFilter,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _OutputWindowEventsRoot_get_OutputWindowEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___OutputWindowEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___OutputWindowEvents_INTERFACE_DEFINED__
#define ___OutputWindowEvents_INTERFACE_DEFINED__

/* interface _OutputWindowEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__OutputWindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0A3546A8-6840-11D2-97C1-00C04FB6C6FF")
    _OutputWindowEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _OutputWindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _OutputWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _OutputWindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _OutputWindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _OutputWindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _OutputWindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _OutputWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _OutputWindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _OutputWindowEventsVtbl;

    interface _OutputWindowEvents
    {
        CONST_VTBL struct _OutputWindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _OutputWindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _OutputWindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _OutputWindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _OutputWindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _OutputWindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _OutputWindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _OutputWindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___OutputWindowEvents_INTERFACE_DEFINED__ */


#ifndef ___dispOutputWindowEvents_DISPINTERFACE_DEFINED__
#define ___dispOutputWindowEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispOutputWindowEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispOutputWindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0D3A23AF-67BB-11D2-97C1-00C04FB6C6FF")
    _dispOutputWindowEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispOutputWindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispOutputWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispOutputWindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispOutputWindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispOutputWindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispOutputWindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispOutputWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispOutputWindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispOutputWindowEventsVtbl;

    interface _dispOutputWindowEvents
    {
        CONST_VTBL struct _dispOutputWindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispOutputWindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispOutputWindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispOutputWindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispOutputWindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispOutputWindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispOutputWindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispOutputWindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispOutputWindowEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_OutputWindowEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("3760037f-b012-44f8-9c23-3609d7a16def")
OutputWindowEvents;
#endif

#ifndef ___TaskListEventsRoot_INTERFACE_DEFINED__
#define ___TaskListEventsRoot_INTERFACE_DEFINED__

/* interface _TaskListEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__TaskListEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6bc8c372-c6f0-4be6-b255-827ac190bf71")
    _TaskListEventsRoot : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT __stdcall get_TaskListEvents( 
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _TaskListEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TaskListEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TaskListEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TaskListEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TaskListEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TaskListEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TaskListEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TaskListEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( __stdcall *get_TaskListEvents )( 
            _TaskListEventsRoot * This,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _TaskListEventsRootVtbl;

    interface _TaskListEventsRoot
    {
        CONST_VTBL struct _TaskListEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TaskListEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _TaskListEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _TaskListEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _TaskListEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _TaskListEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _TaskListEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _TaskListEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _TaskListEventsRoot_get_TaskListEvents(This,ppdisp)	\
    (This)->lpVtbl -> get_TaskListEvents(This,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget][id] */ HRESULT __stdcall _TaskListEventsRoot_get_TaskListEvents_Proxy( 
    _TaskListEventsRoot * This,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _TaskListEventsRoot_get_TaskListEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___TaskListEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___TaskListEvents_INTERFACE_DEFINED__
#define ___TaskListEvents_INTERFACE_DEFINED__

/* interface _TaskListEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__TaskListEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1125C422-49BD-11D2-8823-00C04FB6C6FF")
    _TaskListEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _TaskListEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TaskListEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TaskListEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TaskListEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TaskListEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TaskListEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TaskListEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TaskListEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _TaskListEventsVtbl;

    interface _TaskListEvents
    {
        CONST_VTBL struct _TaskListEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TaskListEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _TaskListEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _TaskListEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _TaskListEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _TaskListEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _TaskListEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _TaskListEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___TaskListEvents_INTERFACE_DEFINED__ */


#ifndef ___dispTaskListEvents_DISPINTERFACE_DEFINED__
#define ___dispTaskListEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispTaskListEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispTaskListEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1125C423-49BD-11D2-8823-00C04FB6C6FF")
    _dispTaskListEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispTaskListEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispTaskListEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispTaskListEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispTaskListEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispTaskListEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispTaskListEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispTaskListEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispTaskListEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispTaskListEventsVtbl;

    interface _dispTaskListEvents
    {
        CONST_VTBL struct _dispTaskListEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispTaskListEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispTaskListEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispTaskListEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispTaskListEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispTaskListEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispTaskListEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispTaskListEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispTaskListEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TaskListEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("29617acd-7859-4328-be09-298f91f48196")
TaskListEvents;
#endif

#ifndef __IDTToolsOptionsPage_INTERFACE_DEFINED__
#define __IDTToolsOptionsPage_INTERFACE_DEFINED__

/* interface IDTToolsOptionsPage */
/* [helpstringcontext][helpstring][helpcontext][local][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IDTToolsOptionsPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bdcaf240-2692-4713-902a-b110b1d0f100")
    IDTToolsOptionsPage : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnAfterCreated( 
            /* [in] */ DTE	*DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetProperties( 
            /* [out][in] */ IDispatch **PropertiesObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnOK( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnCancel( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnHelp( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDTToolsOptionsPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDTToolsOptionsPage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDTToolsOptionsPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDTToolsOptionsPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDTToolsOptionsPage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDTToolsOptionsPage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDTToolsOptionsPage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDTToolsOptionsPage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnAfterCreated )( 
            IDTToolsOptionsPage * This,
            /* [in] */ DTE	*DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetProperties )( 
            IDTToolsOptionsPage * This,
            /* [out][in] */ IDispatch **PropertiesObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnOK )( 
            IDTToolsOptionsPage * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnCancel )( 
            IDTToolsOptionsPage * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnHelp )( 
            IDTToolsOptionsPage * This);
        
        END_INTERFACE
    } IDTToolsOptionsPageVtbl;

    interface IDTToolsOptionsPage
    {
        CONST_VTBL struct IDTToolsOptionsPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDTToolsOptionsPage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDTToolsOptionsPage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDTToolsOptionsPage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDTToolsOptionsPage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDTToolsOptionsPage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDTToolsOptionsPage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDTToolsOptionsPage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDTToolsOptionsPage_OnAfterCreated(This,DTEObject)	\
    (This)->lpVtbl -> OnAfterCreated(This,DTEObject)

#define IDTToolsOptionsPage_GetProperties(This,PropertiesObject)	\
    (This)->lpVtbl -> GetProperties(This,PropertiesObject)

#define IDTToolsOptionsPage_OnOK(This)	\
    (This)->lpVtbl -> OnOK(This)

#define IDTToolsOptionsPage_OnCancel(This)	\
    (This)->lpVtbl -> OnCancel(This)

#define IDTToolsOptionsPage_OnHelp(This)	\
    (This)->lpVtbl -> OnHelp(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_OnAfterCreated_Proxy( 
    IDTToolsOptionsPage * This,
    /* [in] */ DTE	*DTEObject);


void __RPC_STUB IDTToolsOptionsPage_OnAfterCreated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_GetProperties_Proxy( 
    IDTToolsOptionsPage * This,
    /* [out][in] */ IDispatch **PropertiesObject);


void __RPC_STUB IDTToolsOptionsPage_GetProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_OnOK_Proxy( 
    IDTToolsOptionsPage * This);


void __RPC_STUB IDTToolsOptionsPage_OnOK_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_OnCancel_Proxy( 
    IDTToolsOptionsPage * This);


void __RPC_STUB IDTToolsOptionsPage_OnCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_OnHelp_Proxy( 
    IDTToolsOptionsPage * This);


void __RPC_STUB IDTToolsOptionsPage_OnHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDTToolsOptionsPage_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentWebBrowser_INTERFACE_DEFINED__
#define ___EnvironmentWebBrowser_INTERFACE_DEFINED__

/* interface _EnvironmentWebBrowser */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentWebBrowser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3286b03-5ac6-44f0-8cc3-ebed7f1124e5")
    _EnvironmentWebBrowser : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseDefaultHomePage( 
            VARIANT_BOOL UseDefault) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseDefaultHomePage( 
            /* [retval][out] */ VARIANT_BOOL *pUseDefault) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HomePage( 
            BSTR URL) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HomePage( 
            /* [retval][out] */ BSTR *URL) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseDefaultSearchPage( 
            VARIANT_BOOL UseDefault) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseDefaultSearchPage( 
            /* [retval][out] */ VARIANT_BOOL *pUseDefault) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SearchPage( 
            BSTR URL) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SearchPage( 
            /* [retval][out] */ BSTR *URL) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewSourceIn( 
            vsBrowserViewSource Location) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewSourceIn( 
            /* [retval][out] */ vsBrowserViewSource *Location) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewSourceExternalProgram( 
            BSTR Path) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewSourceExternalProgram( 
            /* [retval][out] */ BSTR *Path) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentWebBrowserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentWebBrowser * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentWebBrowser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentWebBrowser * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentWebBrowser * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentWebBrowser * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentWebBrowser * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentWebBrowser * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseDefaultHomePage )( 
            _EnvironmentWebBrowser * This,
            VARIANT_BOOL UseDefault);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseDefaultHomePage )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ VARIANT_BOOL *pUseDefault);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HomePage )( 
            _EnvironmentWebBrowser * This,
            BSTR URL);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HomePage )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ BSTR *URL);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseDefaultSearchPage )( 
            _EnvironmentWebBrowser * This,
            VARIANT_BOOL UseDefault);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseDefaultSearchPage )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ VARIANT_BOOL *pUseDefault);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SearchPage )( 
            _EnvironmentWebBrowser * This,
            BSTR URL);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SearchPage )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ BSTR *URL);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewSourceIn )( 
            _EnvironmentWebBrowser * This,
            vsBrowserViewSource Location);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewSourceIn )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ vsBrowserViewSource *Location);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewSourceExternalProgram )( 
            _EnvironmentWebBrowser * This,
            BSTR Path);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewSourceExternalProgram )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ BSTR *Path);
        
        END_INTERFACE
    } _EnvironmentWebBrowserVtbl;

    interface _EnvironmentWebBrowser
    {
        CONST_VTBL struct _EnvironmentWebBrowserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentWebBrowser_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentWebBrowser_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentWebBrowser_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentWebBrowser_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentWebBrowser_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentWebBrowser_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentWebBrowser_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentWebBrowser_put_UseDefaultHomePage(This,UseDefault)	\
    (This)->lpVtbl -> put_UseDefaultHomePage(This,UseDefault)

#define _EnvironmentWebBrowser_get_UseDefaultHomePage(This,pUseDefault)	\
    (This)->lpVtbl -> get_UseDefaultHomePage(This,pUseDefault)

#define _EnvironmentWebBrowser_put_HomePage(This,URL)	\
    (This)->lpVtbl -> put_HomePage(This,URL)

#define _EnvironmentWebBrowser_get_HomePage(This,URL)	\
    (This)->lpVtbl -> get_HomePage(This,URL)

#define _EnvironmentWebBrowser_put_UseDefaultSearchPage(This,UseDefault)	\
    (This)->lpVtbl -> put_UseDefaultSearchPage(This,UseDefault)

#define _EnvironmentWebBrowser_get_UseDefaultSearchPage(This,pUseDefault)	\
    (This)->lpVtbl -> get_UseDefaultSearchPage(This,pUseDefault)

#define _EnvironmentWebBrowser_put_SearchPage(This,URL)	\
    (This)->lpVtbl -> put_SearchPage(This,URL)

#define _EnvironmentWebBrowser_get_SearchPage(This,URL)	\
    (This)->lpVtbl -> get_SearchPage(This,URL)

#define _EnvironmentWebBrowser_put_ViewSourceIn(This,Location)	\
    (This)->lpVtbl -> put_ViewSourceIn(This,Location)

#define _EnvironmentWebBrowser_get_ViewSourceIn(This,Location)	\
    (This)->lpVtbl -> get_ViewSourceIn(This,Location)

#define _EnvironmentWebBrowser_put_ViewSourceExternalProgram(This,Path)	\
    (This)->lpVtbl -> put_ViewSourceExternalProgram(This,Path)

#define _EnvironmentWebBrowser_get_ViewSourceExternalProgram(This,Path)	\
    (This)->lpVtbl -> get_ViewSourceExternalProgram(This,Path)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_UseDefaultHomePage_Proxy( 
    _EnvironmentWebBrowser * This,
    VARIANT_BOOL UseDefault);


void __RPC_STUB _EnvironmentWebBrowser_put_UseDefaultHomePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_UseDefaultHomePage_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ VARIANT_BOOL *pUseDefault);


void __RPC_STUB _EnvironmentWebBrowser_get_UseDefaultHomePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_HomePage_Proxy( 
    _EnvironmentWebBrowser * This,
    BSTR URL);


void __RPC_STUB _EnvironmentWebBrowser_put_HomePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_HomePage_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ BSTR *URL);


void __RPC_STUB _EnvironmentWebBrowser_get_HomePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_UseDefaultSearchPage_Proxy( 
    _EnvironmentWebBrowser * This,
    VARIANT_BOOL UseDefault);


void __RPC_STUB _EnvironmentWebBrowser_put_UseDefaultSearchPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_UseDefaultSearchPage_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ VARIANT_BOOL *pUseDefault);


void __RPC_STUB _EnvironmentWebBrowser_get_UseDefaultSearchPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_SearchPage_Proxy( 
    _EnvironmentWebBrowser * This,
    BSTR URL);


void __RPC_STUB _EnvironmentWebBrowser_put_SearchPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_SearchPage_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ BSTR *URL);


void __RPC_STUB _EnvironmentWebBrowser_get_SearchPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_ViewSourceIn_Proxy( 
    _EnvironmentWebBrowser * This,
    vsBrowserViewSource Location);


void __RPC_STUB _EnvironmentWebBrowser_put_ViewSourceIn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_ViewSourceIn_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ vsBrowserViewSource *Location);


void __RPC_STUB _EnvironmentWebBrowser_get_ViewSourceIn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_ViewSourceExternalProgram_Proxy( 
    _EnvironmentWebBrowser * This,
    BSTR Path);


void __RPC_STUB _EnvironmentWebBrowser_put_ViewSourceExternalProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_ViewSourceExternalProgram_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ BSTR *Path);


void __RPC_STUB _EnvironmentWebBrowser_get_ViewSourceExternalProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentWebBrowser_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentHelp_INTERFACE_DEFINED__
#define ___EnvironmentHelp_INTERFACE_DEFINED__

/* interface _EnvironmentHelp */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentHelp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AEBDED64-A206-11d3-B8B5-00C04F79F802")
    _EnvironmentHelp : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreferredLanguage( 
            /* [retval][out] */ LONG *LCID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PreferredLanguage( 
            /* [in] */ LONG LCID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreferredCollection( 
            /* [retval][out] */ BSTR *NameSpace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PreferredCollection( 
            /* [in] */ BSTR NameSpace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_External( 
            /* [retval][out] */ VARIANT_BOOL *ExternalHelp) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_External( 
            /* [in] */ VARIANT_BOOL ExternalHelp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentHelpVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentHelp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentHelp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentHelp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentHelp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentHelp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentHelp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentHelp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredLanguage )( 
            _EnvironmentHelp * This,
            /* [retval][out] */ LONG *LCID);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredLanguage )( 
            _EnvironmentHelp * This,
            /* [in] */ LONG LCID);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredCollection )( 
            _EnvironmentHelp * This,
            /* [retval][out] */ BSTR *NameSpace);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredCollection )( 
            _EnvironmentHelp * This,
            /* [in] */ BSTR NameSpace);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_External )( 
            _EnvironmentHelp * This,
            /* [retval][out] */ VARIANT_BOOL *ExternalHelp);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_External )( 
            _EnvironmentHelp * This,
            /* [in] */ VARIANT_BOOL ExternalHelp);
        
        END_INTERFACE
    } _EnvironmentHelpVtbl;

    interface _EnvironmentHelp
    {
        CONST_VTBL struct _EnvironmentHelpVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentHelp_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentHelp_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentHelp_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentHelp_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentHelp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentHelp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentHelp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentHelp_get_PreferredLanguage(This,LCID)	\
    (This)->lpVtbl -> get_PreferredLanguage(This,LCID)

#define _EnvironmentHelp_put_PreferredLanguage(This,LCID)	\
    (This)->lpVtbl -> put_PreferredLanguage(This,LCID)

#define _EnvironmentHelp_get_PreferredCollection(This,NameSpace)	\
    (This)->lpVtbl -> get_PreferredCollection(This,NameSpace)

#define _EnvironmentHelp_put_PreferredCollection(This,NameSpace)	\
    (This)->lpVtbl -> put_PreferredCollection(This,NameSpace)

#define _EnvironmentHelp_get_External(This,ExternalHelp)	\
    (This)->lpVtbl -> get_External(This,ExternalHelp)

#define _EnvironmentHelp_put_External(This,ExternalHelp)	\
    (This)->lpVtbl -> put_External(This,ExternalHelp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_get_PreferredLanguage_Proxy( 
    _EnvironmentHelp * This,
    /* [retval][out] */ LONG *LCID);


void __RPC_STUB _EnvironmentHelp_get_PreferredLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_put_PreferredLanguage_Proxy( 
    _EnvironmentHelp * This,
    /* [in] */ LONG LCID);


void __RPC_STUB _EnvironmentHelp_put_PreferredLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_get_PreferredCollection_Proxy( 
    _EnvironmentHelp * This,
    /* [retval][out] */ BSTR *NameSpace);


void __RPC_STUB _EnvironmentHelp_get_PreferredCollection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_put_PreferredCollection_Proxy( 
    _EnvironmentHelp * This,
    /* [in] */ BSTR NameSpace);


void __RPC_STUB _EnvironmentHelp_put_PreferredCollection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_get_External_Proxy( 
    _EnvironmentHelp * This,
    /* [retval][out] */ VARIANT_BOOL *ExternalHelp);


void __RPC_STUB _EnvironmentHelp_get_External_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_put_External_Proxy( 
    _EnvironmentHelp * This,
    /* [in] */ VARIANT_BOOL ExternalHelp);


void __RPC_STUB _EnvironmentHelp_put_External_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentHelp_INTERFACE_DEFINED__ */


#ifndef __ColorableItems_INTERFACE_DEFINED__
#define __ColorableItems_INTERFACE_DEFINED__

/* interface ColorableItems */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ColorableItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e5d17051-d6e5-4da7-8b3a-ca888617a5e7")
    ColorableItems : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Foreground( 
            /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Foreground( 
            /* external definition not present */ OLE_COLOR Color) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Background( 
            /* external definition not present */ OLE_COLOR Color) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ VARIANT_BOOL *Bold) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bold( 
            VARIANT_BOOL Bols) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorableItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorableItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorableItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorableItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorableItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorableItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorableItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorableItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ColorableItems * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Foreground )( 
            ColorableItems * This,
            /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Foreground )( 
            ColorableItems * This,
            /* external definition not present */ OLE_COLOR Color);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            ColorableItems * This,
            /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Background )( 
            ColorableItems * This,
            /* external definition not present */ OLE_COLOR Color);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            ColorableItems * This,
            /* [retval][out] */ VARIANT_BOOL *Bold);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bold )( 
            ColorableItems * This,
            VARIANT_BOOL Bols);
        
        END_INTERFACE
    } ColorableItemsVtbl;

    interface ColorableItems
    {
        CONST_VTBL struct ColorableItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorableItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ColorableItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ColorableItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ColorableItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ColorableItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ColorableItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ColorableItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ColorableItems_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define ColorableItems_get_Foreground(This,pColor)	\
    (This)->lpVtbl -> get_Foreground(This,pColor)

#define ColorableItems_put_Foreground(This,Color)	\
    (This)->lpVtbl -> put_Foreground(This,Color)

#define ColorableItems_get_Background(This,pColor)	\
    (This)->lpVtbl -> get_Background(This,pColor)

#define ColorableItems_put_Background(This,Color)	\
    (This)->lpVtbl -> put_Background(This,Color)

#define ColorableItems_get_Bold(This,Bold)	\
    (This)->lpVtbl -> get_Bold(This,Bold)

#define ColorableItems_put_Bold(This,Bols)	\
    (This)->lpVtbl -> put_Bold(This,Bols)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_get_Name_Proxy( 
    ColorableItems * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB ColorableItems_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_get_Foreground_Proxy( 
    ColorableItems * This,
    /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor);


void __RPC_STUB ColorableItems_get_Foreground_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_put_Foreground_Proxy( 
    ColorableItems * This,
    /* external definition not present */ OLE_COLOR Color);


void __RPC_STUB ColorableItems_put_Foreground_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_get_Background_Proxy( 
    ColorableItems * This,
    /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor);


void __RPC_STUB ColorableItems_get_Background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_put_Background_Proxy( 
    ColorableItems * This,
    /* external definition not present */ OLE_COLOR Color);


void __RPC_STUB ColorableItems_put_Background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_get_Bold_Proxy( 
    ColorableItems * This,
    /* [retval][out] */ VARIANT_BOOL *Bold);


void __RPC_STUB ColorableItems_get_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_put_Bold_Proxy( 
    ColorableItems * This,
    VARIANT_BOOL Bols);


void __RPC_STUB ColorableItems_put_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ColorableItems_INTERFACE_DEFINED__ */


#ifndef __FontsAndColorsItems_INTERFACE_DEFINED__
#define __FontsAndColorsItems_INTERFACE_DEFINED__

/* interface FontsAndColorsItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_FontsAndColorsItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f25ae7e6-1460-4ba4-8e5e-bbbe746de353")
    FontsAndColorsItems : public IDispatch
    {
    public:
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ColorableItems **pFontsAndColorsItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FontsAndColorsItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FontsAndColorsItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FontsAndColorsItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FontsAndColorsItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FontsAndColorsItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FontsAndColorsItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FontsAndColorsItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FontsAndColorsItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            FontsAndColorsItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            FontsAndColorsItems * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ColorableItems **pFontsAndColorsItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            FontsAndColorsItems * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } FontsAndColorsItemsVtbl;

    interface FontsAndColorsItems
    {
        CONST_VTBL struct FontsAndColorsItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FontsAndColorsItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define FontsAndColorsItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define FontsAndColorsItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define FontsAndColorsItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define FontsAndColorsItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define FontsAndColorsItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define FontsAndColorsItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define FontsAndColorsItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define FontsAndColorsItems_Item(This,Index,pFontsAndColorsItem)	\
    (This)->lpVtbl -> Item(This,Index,pFontsAndColorsItem)

#define FontsAndColorsItems_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][restricted] */ HRESULT STDMETHODCALLTYPE FontsAndColorsItems__NewEnum_Proxy( 
    FontsAndColorsItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB FontsAndColorsItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FontsAndColorsItems_Item_Proxy( 
    FontsAndColorsItems * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ ColorableItems **pFontsAndColorsItem);


void __RPC_STUB FontsAndColorsItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FontsAndColorsItems_get_Count_Proxy( 
    FontsAndColorsItems * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB FontsAndColorsItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __FontsAndColorsItems_INTERFACE_DEFINED__ */


#ifndef ___FontsAndColors_INTERFACE_DEFINED__
#define ___FontsAndColors_INTERFACE_DEFINED__

/* interface _FontsAndColors */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__FontsAndColors;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("256068f6-1add-4f7b-ba76-571314c413ad")
    _FontsAndColors : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontFamily( 
            /* [retval][out] */ BSTR *pFamily) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontFamily( 
            BSTR Family) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontCharacterSet( 
            /* [retval][out] */ vsFontCharSet *pFontCharSet) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontCharacterSet( 
            vsFontCharSet FontCharSet) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ short *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            short Size) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontsAndColorsItems( 
            /* [retval][out] */ FontsAndColorsItems **ppColorableItems) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _FontsAndColorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _FontsAndColors * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _FontsAndColors * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _FontsAndColors * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _FontsAndColors * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _FontsAndColors * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _FontsAndColors * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _FontsAndColors * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontFamily )( 
            _FontsAndColors * This,
            /* [retval][out] */ BSTR *pFamily);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontFamily )( 
            _FontsAndColors * This,
            BSTR Family);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontCharacterSet )( 
            _FontsAndColors * This,
            /* [retval][out] */ vsFontCharSet *pFontCharSet);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontCharacterSet )( 
            _FontsAndColors * This,
            vsFontCharSet FontCharSet);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            _FontsAndColors * This,
            /* [retval][out] */ short *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            _FontsAndColors * This,
            short Size);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontsAndColorsItems )( 
            _FontsAndColors * This,
            /* [retval][out] */ FontsAndColorsItems **ppColorableItems);
        
        END_INTERFACE
    } _FontsAndColorsVtbl;

    interface _FontsAndColors
    {
        CONST_VTBL struct _FontsAndColorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _FontsAndColors_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _FontsAndColors_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _FontsAndColors_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _FontsAndColors_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _FontsAndColors_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _FontsAndColors_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _FontsAndColors_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _FontsAndColors_get_FontFamily(This,pFamily)	\
    (This)->lpVtbl -> get_FontFamily(This,pFamily)

#define _FontsAndColors_put_FontFamily(This,Family)	\
    (This)->lpVtbl -> put_FontFamily(This,Family)

#define _FontsAndColors_get_FontCharacterSet(This,pFontCharSet)	\
    (This)->lpVtbl -> get_FontCharacterSet(This,pFontCharSet)

#define _FontsAndColors_put_FontCharacterSet(This,FontCharSet)	\
    (This)->lpVtbl -> put_FontCharacterSet(This,FontCharSet)

#define _FontsAndColors_get_FontSize(This,pSize)	\
    (This)->lpVtbl -> get_FontSize(This,pSize)

#define _FontsAndColors_put_FontSize(This,Size)	\
    (This)->lpVtbl -> put_FontSize(This,Size)

#define _FontsAndColors_get_FontsAndColorsItems(This,ppColorableItems)	\
    (This)->lpVtbl -> get_FontsAndColorsItems(This,ppColorableItems)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_get_FontFamily_Proxy( 
    _FontsAndColors * This,
    /* [retval][out] */ BSTR *pFamily);


void __RPC_STUB _FontsAndColors_get_FontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_put_FontFamily_Proxy( 
    _FontsAndColors * This,
    BSTR Family);


void __RPC_STUB _FontsAndColors_put_FontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_get_FontCharacterSet_Proxy( 
    _FontsAndColors * This,
    /* [retval][out] */ vsFontCharSet *pFontCharSet);


void __RPC_STUB _FontsAndColors_get_FontCharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_put_FontCharacterSet_Proxy( 
    _FontsAndColors * This,
    vsFontCharSet FontCharSet);


void __RPC_STUB _FontsAndColors_put_FontCharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_get_FontSize_Proxy( 
    _FontsAndColors * This,
    /* [retval][out] */ short *pSize);


void __RPC_STUB _FontsAndColors_get_FontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_put_FontSize_Proxy( 
    _FontsAndColors * This,
    short Size);


void __RPC_STUB _FontsAndColors_put_FontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_get_FontsAndColorsItems_Proxy( 
    _FontsAndColors * This,
    /* [retval][out] */ FontsAndColorsItems **ppColorableItems);


void __RPC_STUB _FontsAndColors_get_FontsAndColorsItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___FontsAndColors_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentGeneral_INTERFACE_DEFINED__
#define ___EnvironmentGeneral_INTERFACE_DEFINED__

/* interface _EnvironmentGeneral */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentGeneral;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("48e61d9c-8c8d-42d3-914b-46d70c8b7a40")
    _EnvironmentGeneral : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OnStartUp( 
            /* [in] */ vsStartUp startup) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OnStartUp( 
            /* [retval][out] */ vsStartUp *pstartup) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowStatusBar( 
            /* [in] */ VARIANT_BOOL fshow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowStatusBar( 
            /* [retval][out] */ VARIANT_BOOL *pfshow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowMenuContainsNItems( 
            /* [in] */ long lCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowMenuContainsNItems( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MRUListContainsNItems( 
            /* [in] */ long lCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MRUListContainsNItems( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimationSpeed( 
            /* [retval][out] */ short *pSpeed) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AnimationSpeed( 
            short Speed) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Animations( 
            /* [retval][out] */ VARIANT_BOOL *pAnimations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Animations( 
            VARIANT_BOOL Animations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowCommandWindowCompletion( 
            /* [retval][out] */ VARIANT_BOOL *pComplete) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowCommandWindowCompletion( 
            VARIANT_BOOL Complete) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CloseButtonActiveTabOnly( 
            VARIANT_BOOL CloseActiveOnly) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CloseButtonActiveTabOnly( 
            /* [retval][out] */ VARIANT_BOOL *CloseActiveOnly) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutohidePinActiveTabOnly( 
            VARIANT_BOOL AutohidePinActiveOnly) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutohidePinActiveTabOnly( 
            /* [retval][out] */ VARIANT_BOOL *AutohidePinActiveOnly) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentGeneralVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentGeneral * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentGeneral * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentGeneral * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentGeneral * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentGeneral * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentGeneral * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentGeneral * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OnStartUp )( 
            _EnvironmentGeneral * This,
            /* [in] */ vsStartUp startup);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OnStartUp )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ vsStartUp *pstartup);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowStatusBar )( 
            _EnvironmentGeneral * This,
            /* [in] */ VARIANT_BOOL fshow);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowStatusBar )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfshow);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowMenuContainsNItems )( 
            _EnvironmentGeneral * This,
            /* [in] */ long lCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowMenuContainsNItems )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MRUListContainsNItems )( 
            _EnvironmentGeneral * This,
            /* [in] */ long lCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MRUListContainsNItems )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimationSpeed )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ short *pSpeed);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AnimationSpeed )( 
            _EnvironmentGeneral * This,
            short Speed);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Animations )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pAnimations);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Animations )( 
            _EnvironmentGeneral * This,
            VARIANT_BOOL Animations);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowCommandWindowCompletion )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pComplete);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowCommandWindowCompletion )( 
            _EnvironmentGeneral * This,
            VARIANT_BOOL Complete);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CloseButtonActiveTabOnly )( 
            _EnvironmentGeneral * This,
            VARIANT_BOOL CloseActiveOnly);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CloseButtonActiveTabOnly )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *CloseActiveOnly);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutohidePinActiveTabOnly )( 
            _EnvironmentGeneral * This,
            VARIANT_BOOL AutohidePinActiveOnly);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutohidePinActiveTabOnly )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *AutohidePinActiveOnly);
        
        END_INTERFACE
    } _EnvironmentGeneralVtbl;

    interface _EnvironmentGeneral
    {
        CONST_VTBL struct _EnvironmentGeneralVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentGeneral_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentGeneral_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentGeneral_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentGeneral_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentGeneral_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentGeneral_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentGeneral_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentGeneral_put_OnStartUp(This,startup)	\
    (This)->lpVtbl -> put_OnStartUp(This,startup)

#define _EnvironmentGeneral_get_OnStartUp(This,pstartup)	\
    (This)->lpVtbl -> get_OnStartUp(This,pstartup)

#define _EnvironmentGeneral_put_ShowStatusBar(This,fshow)	\
    (This)->lpVtbl -> put_ShowStatusBar(This,fshow)

#define _EnvironmentGeneral_get_ShowStatusBar(This,pfshow)	\
    (This)->lpVtbl -> get_ShowStatusBar(This,pfshow)

#define _EnvironmentGeneral_put_WindowMenuContainsNItems(This,lCount)	\
    (This)->lpVtbl -> put_WindowMenuContainsNItems(This,lCount)

#define _EnvironmentGeneral_get_WindowMenuContainsNItems(This,plCount)	\
    (This)->lpVtbl -> get_WindowMenuContainsNItems(This,plCount)

#define _EnvironmentGeneral_put_MRUListContainsNItems(This,lCount)	\
    (This)->lpVtbl -> put_MRUListContainsNItems(This,lCount)

#define _EnvironmentGeneral_get_MRUListContainsNItems(This,plCount)	\
    (This)->lpVtbl -> get_MRUListContainsNItems(This,plCount)

#define _EnvironmentGeneral_get_AnimationSpeed(This,pSpeed)	\
    (This)->lpVtbl -> get_AnimationSpeed(This,pSpeed)

#define _EnvironmentGeneral_put_AnimationSpeed(This,Speed)	\
    (This)->lpVtbl -> put_AnimationSpeed(This,Speed)

#define _EnvironmentGeneral_get_Animations(This,pAnimations)	\
    (This)->lpVtbl -> get_Animations(This,pAnimations)

#define _EnvironmentGeneral_put_Animations(This,Animations)	\
    (This)->lpVtbl -> put_Animations(This,Animations)

#define _EnvironmentGeneral_get_ShowCommandWindowCompletion(This,pComplete)	\
    (This)->lpVtbl -> get_ShowCommandWindowCompletion(This,pComplete)

#define _EnvironmentGeneral_put_ShowCommandWindowCompletion(This,Complete)	\
    (This)->lpVtbl -> put_ShowCommandWindowCompletion(This,Complete)

#define _EnvironmentGeneral_put_CloseButtonActiveTabOnly(This,CloseActiveOnly)	\
    (This)->lpVtbl -> put_CloseButtonActiveTabOnly(This,CloseActiveOnly)

#define _EnvironmentGeneral_get_CloseButtonActiveTabOnly(This,CloseActiveOnly)	\
    (This)->lpVtbl -> get_CloseButtonActiveTabOnly(This,CloseActiveOnly)

#define _EnvironmentGeneral_put_AutohidePinActiveTabOnly(This,AutohidePinActiveOnly)	\
    (This)->lpVtbl -> put_AutohidePinActiveTabOnly(This,AutohidePinActiveOnly)

#define _EnvironmentGeneral_get_AutohidePinActiveTabOnly(This,AutohidePinActiveOnly)	\
    (This)->lpVtbl -> get_AutohidePinActiveTabOnly(This,AutohidePinActiveOnly)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_OnStartUp_Proxy( 
    _EnvironmentGeneral * This,
    /* [in] */ vsStartUp startup);


void __RPC_STUB _EnvironmentGeneral_put_OnStartUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_OnStartUp_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ vsStartUp *pstartup);


void __RPC_STUB _EnvironmentGeneral_get_OnStartUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_ShowStatusBar_Proxy( 
    _EnvironmentGeneral * This,
    /* [in] */ VARIANT_BOOL fshow);


void __RPC_STUB _EnvironmentGeneral_put_ShowStatusBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_ShowStatusBar_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfshow);


void __RPC_STUB _EnvironmentGeneral_get_ShowStatusBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_WindowMenuContainsNItems_Proxy( 
    _EnvironmentGeneral * This,
    /* [in] */ long lCount);


void __RPC_STUB _EnvironmentGeneral_put_WindowMenuContainsNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_WindowMenuContainsNItems_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ long *plCount);


void __RPC_STUB _EnvironmentGeneral_get_WindowMenuContainsNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_MRUListContainsNItems_Proxy( 
    _EnvironmentGeneral * This,
    /* [in] */ long lCount);


void __RPC_STUB _EnvironmentGeneral_put_MRUListContainsNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_MRUListContainsNItems_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ long *plCount);


void __RPC_STUB _EnvironmentGeneral_get_MRUListContainsNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_AnimationSpeed_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ short *pSpeed);


void __RPC_STUB _EnvironmentGeneral_get_AnimationSpeed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_AnimationSpeed_Proxy( 
    _EnvironmentGeneral * This,
    short Speed);


void __RPC_STUB _EnvironmentGeneral_put_AnimationSpeed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_Animations_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pAnimations);


void __RPC_STUB _EnvironmentGeneral_get_Animations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_Animations_Proxy( 
    _EnvironmentGeneral * This,
    VARIANT_BOOL Animations);


void __RPC_STUB _EnvironmentGeneral_put_Animations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_ShowCommandWindowCompletion_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pComplete);


void __RPC_STUB _EnvironmentGeneral_get_ShowCommandWindowCompletion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_ShowCommandWindowCompletion_Proxy( 
    _EnvironmentGeneral * This,
    VARIANT_BOOL Complete);


void __RPC_STUB _EnvironmentGeneral_put_ShowCommandWindowCompletion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_CloseButtonActiveTabOnly_Proxy( 
    _EnvironmentGeneral * This,
    VARIANT_BOOL CloseActiveOnly);


void __RPC_STUB _EnvironmentGeneral_put_CloseButtonActiveTabOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_CloseButtonActiveTabOnly_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *CloseActiveOnly);


void __RPC_STUB _EnvironmentGeneral_get_CloseButtonActiveTabOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_AutohidePinActiveTabOnly_Proxy( 
    _EnvironmentGeneral * This,
    VARIANT_BOOL AutohidePinActiveOnly);


void __RPC_STUB _EnvironmentGeneral_put_AutohidePinActiveTabOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_AutohidePinActiveTabOnly_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *AutohidePinActiveOnly);


void __RPC_STUB _EnvironmentGeneral_get_AutohidePinActiveTabOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentGeneral_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentFontsAndColors_INTERFACE_DEFINED__
#define ___EnvironmentFontsAndColors_INTERFACE_DEFINED__

/* interface _EnvironmentFontsAndColors */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentFontsAndColors;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f809cab6-2c9f-41f2-a5af-e26fb80e62ad")
    _EnvironmentFontsAndColors : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentFontsAndColorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentFontsAndColors * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentFontsAndColors * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentFontsAndColors * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentFontsAndColors * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentFontsAndColors * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentFontsAndColors * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentFontsAndColors * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _EnvironmentFontsAndColorsVtbl;

    interface _EnvironmentFontsAndColors
    {
        CONST_VTBL struct _EnvironmentFontsAndColorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentFontsAndColors_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentFontsAndColors_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentFontsAndColors_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentFontsAndColors_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentFontsAndColors_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentFontsAndColors_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentFontsAndColors_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___EnvironmentFontsAndColors_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentProjectsAndSolution_INTERFACE_DEFINED__
#define ___EnvironmentProjectsAndSolution_INTERFACE_DEFINED__

/* interface _EnvironmentProjectsAndSolution */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentProjectsAndSolution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("478f06d4-5d57-473f-9b74-5f8e88efa5e7")
    _EnvironmentProjectsAndSolution : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OnRunOrPreview( 
            /* [in] */ vsSaveChanges bld) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OnRunOrPreview( 
            /* [retval][out] */ vsSaveChanges *pbld) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ProjectsLocation( 
            /* [in] */ BSTR Location) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectsLocation( 
            /* [retval][out] */ BSTR *pLocation) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowOutputWindowBeforeBuild( 
            /* [in] */ VARIANT_BOOL fShow) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowOutputWindowBeforeBuild( 
            /* [retval][out] */ VARIANT_BOOL *pfShow) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowTaskListAfterBuild( 
            /* [in] */ VARIANT_BOOL fShow) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowTaskListAfterBuild( 
            /* [retval][out] */ VARIANT_BOOL *pfShow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentProjectsAndSolutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentProjectsAndSolution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentProjectsAndSolution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentProjectsAndSolution * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OnRunOrPreview )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ vsSaveChanges bld);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OnRunOrPreview )( 
            _EnvironmentProjectsAndSolution * This,
            /* [retval][out] */ vsSaveChanges *pbld);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProjectsLocation )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ BSTR Location);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectsLocation )( 
            _EnvironmentProjectsAndSolution * This,
            /* [retval][out] */ BSTR *pLocation);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowOutputWindowBeforeBuild )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ VARIANT_BOOL fShow);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowOutputWindowBeforeBuild )( 
            _EnvironmentProjectsAndSolution * This,
            /* [retval][out] */ VARIANT_BOOL *pfShow);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowTaskListAfterBuild )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ VARIANT_BOOL fShow);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowTaskListAfterBuild )( 
            _EnvironmentProjectsAndSolution * This,
            /* [retval][out] */ VARIANT_BOOL *pfShow);
        
        END_INTERFACE
    } _EnvironmentProjectsAndSolutionVtbl;

    interface _EnvironmentProjectsAndSolution
    {
        CONST_VTBL struct _EnvironmentProjectsAndSolutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentProjectsAndSolution_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentProjectsAndSolution_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentProjectsAndSolution_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentProjectsAndSolution_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentProjectsAndSolution_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentProjectsAndSolution_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentProjectsAndSolution_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentProjectsAndSolution_put_OnRunOrPreview(This,bld)	\
    (This)->lpVtbl -> put_OnRunOrPreview(This,bld)

#define _EnvironmentProjectsAndSolution_get_OnRunOrPreview(This,pbld)	\
    (This)->lpVtbl -> get_OnRunOrPreview(This,pbld)

#define _EnvironmentProjectsAndSolution_put_ProjectsLocation(This,Location)	\
    (This)->lpVtbl -> put_ProjectsLocation(This,Location)

#define _EnvironmentProjectsAndSolution_get_ProjectsLocation(This,pLocation)	\
    (This)->lpVtbl -> get_ProjectsLocation(This,pLocation)

#define _EnvironmentProjectsAndSolution_put_ShowOutputWindowBeforeBuild(This,fShow)	\
    (This)->lpVtbl -> put_ShowOutputWindowBeforeBuild(This,fShow)

#define _EnvironmentProjectsAndSolution_get_ShowOutputWindowBeforeBuild(This,pfShow)	\
    (This)->lpVtbl -> get_ShowOutputWindowBeforeBuild(This,pfShow)

#define _EnvironmentProjectsAndSolution_put_ShowTaskListAfterBuild(This,fShow)	\
    (This)->lpVtbl -> put_ShowTaskListAfterBuild(This,fShow)

#define _EnvironmentProjectsAndSolution_get_ShowTaskListAfterBuild(This,pfShow)	\
    (This)->lpVtbl -> get_ShowTaskListAfterBuild(This,pfShow)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_put_OnRunOrPreview_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [in] */ vsSaveChanges bld);


void __RPC_STUB _EnvironmentProjectsAndSolution_put_OnRunOrPreview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_get_OnRunOrPreview_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [retval][out] */ vsSaveChanges *pbld);


void __RPC_STUB _EnvironmentProjectsAndSolution_get_OnRunOrPreview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_put_ProjectsLocation_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [in] */ BSTR Location);


void __RPC_STUB _EnvironmentProjectsAndSolution_put_ProjectsLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_get_ProjectsLocation_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [retval][out] */ BSTR *pLocation);


void __RPC_STUB _EnvironmentProjectsAndSolution_get_ProjectsLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_put_ShowOutputWindowBeforeBuild_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [in] */ VARIANT_BOOL fShow);


void __RPC_STUB _EnvironmentProjectsAndSolution_put_ShowOutputWindowBeforeBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_get_ShowOutputWindowBeforeBuild_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [retval][out] */ VARIANT_BOOL *pfShow);


void __RPC_STUB _EnvironmentProjectsAndSolution_get_ShowOutputWindowBeforeBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_put_ShowTaskListAfterBuild_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [in] */ VARIANT_BOOL fShow);


void __RPC_STUB _EnvironmentProjectsAndSolution_put_ShowTaskListAfterBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_get_ShowTaskListAfterBuild_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [retval][out] */ VARIANT_BOOL *pfShow);


void __RPC_STUB _EnvironmentProjectsAndSolution_get_ShowTaskListAfterBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentProjectsAndSolution_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentDocuments_INTERFACE_DEFINED__
#define ___EnvironmentDocuments_INTERFACE_DEFINED__

/* interface _EnvironmentDocuments */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentDocuments;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76ed1c48-ed86-4e9e-acf8-a40e765daf25")
    _EnvironmentDocuments : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReuseSavedActiveDocWindow( 
            VARIANT_BOOL Reuse) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReuseSavedActiveDocWindow( 
            /* [retval][out] */ VARIANT_BOOL *pReuse) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectFileChangesOutsideIDE( 
            /* [in] */ VARIANT_BOOL fAutoRead) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectFileChangesOutsideIDE( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoRead) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoloadExternalChanges( 
            /* [in] */ VARIANT_BOOL fAutoload) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoloadExternalChanges( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoload) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_InitializeOpenFileFromCurrentDocument( 
            /* [in] */ VARIANT_BOOL fInit) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_InitializeOpenFileFromCurrentDocument( 
            /* [retval][out] */ VARIANT_BOOL *pfInit) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MiscFilesProjectSavesLastNItems( 
            /* [in] */ long lCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MiscFilesProjectSavesLastNItems( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindReplaceShowMessageBoxes( 
            /* [retval][out] */ VARIANT_BOOL *pShow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FindReplaceShowMessageBoxes( 
            VARIANT_BOOL Show) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindReplaceInitializeFromEditor( 
            /* [retval][out] */ VARIANT_BOOL *pShow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FindReplaceInitializeFromEditor( 
            VARIANT_BOOL Show) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentDocumentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentDocuments * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentDocuments * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentDocuments * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentDocuments * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentDocuments * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentDocuments * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentDocuments * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReuseSavedActiveDocWindow )( 
            _EnvironmentDocuments * This,
            VARIANT_BOOL Reuse);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReuseSavedActiveDocWindow )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pReuse);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFileChangesOutsideIDE )( 
            _EnvironmentDocuments * This,
            /* [in] */ VARIANT_BOOL fAutoRead);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFileChangesOutsideIDE )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoRead);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoloadExternalChanges )( 
            _EnvironmentDocuments * This,
            /* [in] */ VARIANT_BOOL fAutoload);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoloadExternalChanges )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoload);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InitializeOpenFileFromCurrentDocument )( 
            _EnvironmentDocuments * This,
            /* [in] */ VARIANT_BOOL fInit);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InitializeOpenFileFromCurrentDocument )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pfInit);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MiscFilesProjectSavesLastNItems )( 
            _EnvironmentDocuments * This,
            /* [in] */ long lCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MiscFilesProjectSavesLastNItems )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindReplaceShowMessageBoxes )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pShow);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FindReplaceShowMessageBoxes )( 
            _EnvironmentDocuments * This,
            VARIANT_BOOL Show);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindReplaceInitializeFromEditor )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pShow);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FindReplaceInitializeFromEditor )( 
            _EnvironmentDocuments * This,
            VARIANT_BOOL Show);
        
        END_INTERFACE
    } _EnvironmentDocumentsVtbl;

    interface _EnvironmentDocuments
    {
        CONST_VTBL struct _EnvironmentDocumentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentDocuments_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentDocuments_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentDocuments_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentDocuments_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentDocuments_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentDocuments_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentDocuments_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentDocuments_put_ReuseSavedActiveDocWindow(This,Reuse)	\
    (This)->lpVtbl -> put_ReuseSavedActiveDocWindow(This,Reuse)

#define _EnvironmentDocuments_get_ReuseSavedActiveDocWindow(This,pReuse)	\
    (This)->lpVtbl -> get_ReuseSavedActiveDocWindow(This,pReuse)

#define _EnvironmentDocuments_put_DetectFileChangesOutsideIDE(This,fAutoRead)	\
    (This)->lpVtbl -> put_DetectFileChangesOutsideIDE(This,fAutoRead)

#define _EnvironmentDocuments_get_DetectFileChangesOutsideIDE(This,pfAutoRead)	\
    (This)->lpVtbl -> get_DetectFileChangesOutsideIDE(This,pfAutoRead)

#define _EnvironmentDocuments_put_AutoloadExternalChanges(This,fAutoload)	\
    (This)->lpVtbl -> put_AutoloadExternalChanges(This,fAutoload)

#define _EnvironmentDocuments_get_AutoloadExternalChanges(This,pfAutoload)	\
    (This)->lpVtbl -> get_AutoloadExternalChanges(This,pfAutoload)

#define _EnvironmentDocuments_put_InitializeOpenFileFromCurrentDocument(This,fInit)	\
    (This)->lpVtbl -> put_InitializeOpenFileFromCurrentDocument(This,fInit)

#define _EnvironmentDocuments_get_InitializeOpenFileFromCurrentDocument(This,pfInit)	\
    (This)->lpVtbl -> get_InitializeOpenFileFromCurrentDocument(This,pfInit)

#define _EnvironmentDocuments_put_MiscFilesProjectSavesLastNItems(This,lCount)	\
    (This)->lpVtbl -> put_MiscFilesProjectSavesLastNItems(This,lCount)

#define _EnvironmentDocuments_get_MiscFilesProjectSavesLastNItems(This,plCount)	\
    (This)->lpVtbl -> get_MiscFilesProjectSavesLastNItems(This,plCount)

#define _EnvironmentDocuments_get_FindReplaceShowMessageBoxes(This,pShow)	\
    (This)->lpVtbl -> get_FindReplaceShowMessageBoxes(This,pShow)

#define _EnvironmentDocuments_put_FindReplaceShowMessageBoxes(This,Show)	\
    (This)->lpVtbl -> put_FindReplaceShowMessageBoxes(This,Show)

#define _EnvironmentDocuments_get_FindReplaceInitializeFromEditor(This,pShow)	\
    (This)->lpVtbl -> get_FindReplaceInitializeFromEditor(This,pShow)

#define _EnvironmentDocuments_put_FindReplaceInitializeFromEditor(This,Show)	\
    (This)->lpVtbl -> put_FindReplaceInitializeFromEditor(This,Show)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_ReuseSavedActiveDocWindow_Proxy( 
    _EnvironmentDocuments * This,
    VARIANT_BOOL Reuse);


void __RPC_STUB _EnvironmentDocuments_put_ReuseSavedActiveDocWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_ReuseSavedActiveDocWindow_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pReuse);


void __RPC_STUB _EnvironmentDocuments_get_ReuseSavedActiveDocWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_DetectFileChangesOutsideIDE_Proxy( 
    _EnvironmentDocuments * This,
    /* [in] */ VARIANT_BOOL fAutoRead);


void __RPC_STUB _EnvironmentDocuments_put_DetectFileChangesOutsideIDE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_DetectFileChangesOutsideIDE_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pfAutoRead);


void __RPC_STUB _EnvironmentDocuments_get_DetectFileChangesOutsideIDE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_AutoloadExternalChanges_Proxy( 
    _EnvironmentDocuments * This,
    /* [in] */ VARIANT_BOOL fAutoload);


void __RPC_STUB _EnvironmentDocuments_put_AutoloadExternalChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_AutoloadExternalChanges_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pfAutoload);


void __RPC_STUB _EnvironmentDocuments_get_AutoloadExternalChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_InitializeOpenFileFromCurrentDocument_Proxy( 
    _EnvironmentDocuments * This,
    /* [in] */ VARIANT_BOOL fInit);


void __RPC_STUB _EnvironmentDocuments_put_InitializeOpenFileFromCurrentDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_InitializeOpenFileFromCurrentDocument_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pfInit);


void __RPC_STUB _EnvironmentDocuments_get_InitializeOpenFileFromCurrentDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_MiscFilesProjectSavesLastNItems_Proxy( 
    _EnvironmentDocuments * This,
    /* [in] */ long lCount);


void __RPC_STUB _EnvironmentDocuments_put_MiscFilesProjectSavesLastNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_MiscFilesProjectSavesLastNItems_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ long *plCount);


void __RPC_STUB _EnvironmentDocuments_get_MiscFilesProjectSavesLastNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_FindReplaceShowMessageBoxes_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pShow);


void __RPC_STUB _EnvironmentDocuments_get_FindReplaceShowMessageBoxes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_FindReplaceShowMessageBoxes_Proxy( 
    _EnvironmentDocuments * This,
    VARIANT_BOOL Show);


void __RPC_STUB _EnvironmentDocuments_put_FindReplaceShowMessageBoxes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_FindReplaceInitializeFromEditor_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pShow);


void __RPC_STUB _EnvironmentDocuments_get_FindReplaceInitializeFromEditor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_FindReplaceInitializeFromEditor_Proxy( 
    _EnvironmentDocuments * This,
    VARIANT_BOOL Show);


void __RPC_STUB _EnvironmentDocuments_put_FindReplaceInitializeFromEditor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentDocuments_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentTaskList_INTERFACE_DEFINED__
#define ___EnvironmentTaskList_INTERFACE_DEFINED__

/* interface _EnvironmentTaskList */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentTaskList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4bc18a5b-dbb6-4af5-a443-2e3f19365304")
    _EnvironmentTaskList : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfirmTaskDeletion( 
            /* [retval][out] */ VARIANT_BOOL *pConfirm) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConfirmTaskDeletion( 
            VARIANT_BOOL Confirm) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WarnOnAddingHiddenItem( 
            /* [retval][out] */ VARIANT_BOOL *pWarn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WarnOnAddingHiddenItem( 
            VARIANT_BOOL Warn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommentTokens( 
            /* [retval][out] */ VARIANT *pTokens) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CommentTokens( 
            VARIANT Tokens) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentTaskListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentTaskList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentTaskList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentTaskList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentTaskList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentTaskList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentTaskList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentTaskList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfirmTaskDeletion )( 
            _EnvironmentTaskList * This,
            /* [retval][out] */ VARIANT_BOOL *pConfirm);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConfirmTaskDeletion )( 
            _EnvironmentTaskList * This,
            VARIANT_BOOL Confirm);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WarnOnAddingHiddenItem )( 
            _EnvironmentTaskList * This,
            /* [retval][out] */ VARIANT_BOOL *pWarn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WarnOnAddingHiddenItem )( 
            _EnvironmentTaskList * This,
            VARIANT_BOOL Warn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommentTokens )( 
            _EnvironmentTaskList * This,
            /* [retval][out] */ VARIANT *pTokens);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CommentTokens )( 
            _EnvironmentTaskList * This,
            VARIANT Tokens);
        
        END_INTERFACE
    } _EnvironmentTaskListVtbl;

    interface _EnvironmentTaskList
    {
        CONST_VTBL struct _EnvironmentTaskListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentTaskList_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentTaskList_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentTaskList_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentTaskList_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentTaskList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentTaskList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentTaskList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentTaskList_get_ConfirmTaskDeletion(This,pConfirm)	\
    (This)->lpVtbl -> get_ConfirmTaskDeletion(This,pConfirm)

#define _EnvironmentTaskList_put_ConfirmTaskDeletion(This,Confirm)	\
    (This)->lpVtbl -> put_ConfirmTaskDeletion(This,Confirm)

#define _EnvironmentTaskList_get_WarnOnAddingHiddenItem(This,pWarn)	\
    (This)->lpVtbl -> get_WarnOnAddingHiddenItem(This,pWarn)

#define _EnvironmentTaskList_put_WarnOnAddingHiddenItem(This,Warn)	\
    (This)->lpVtbl -> put_WarnOnAddingHiddenItem(This,Warn)

#define _EnvironmentTaskList_get_CommentTokens(This,pTokens)	\
    (This)->lpVtbl -> get_CommentTokens(This,pTokens)

#define _EnvironmentTaskList_put_CommentTokens(This,Tokens)	\
    (This)->lpVtbl -> put_CommentTokens(This,Tokens)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_get_ConfirmTaskDeletion_Proxy( 
    _EnvironmentTaskList * This,
    /* [retval][out] */ VARIANT_BOOL *pConfirm);


void __RPC_STUB _EnvironmentTaskList_get_ConfirmTaskDeletion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_put_ConfirmTaskDeletion_Proxy( 
    _EnvironmentTaskList * This,
    VARIANT_BOOL Confirm);


void __RPC_STUB _EnvironmentTaskList_put_ConfirmTaskDeletion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_get_WarnOnAddingHiddenItem_Proxy( 
    _EnvironmentTaskList * This,
    /* [retval][out] */ VARIANT_BOOL *pWarn);


void __RPC_STUB _EnvironmentTaskList_get_WarnOnAddingHiddenItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_put_WarnOnAddingHiddenItem_Proxy( 
    _EnvironmentTaskList * This,
    VARIANT_BOOL Warn);


void __RPC_STUB _EnvironmentTaskList_put_WarnOnAddingHiddenItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_get_CommentTokens_Proxy( 
    _EnvironmentTaskList * This,
    /* [retval][out] */ VARIANT *pTokens);


void __RPC_STUB _EnvironmentTaskList_get_CommentTokens_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_put_CommentTokens_Proxy( 
    _EnvironmentTaskList * This,
    VARIANT Tokens);


void __RPC_STUB _EnvironmentTaskList_put_CommentTokens_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentTaskList_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentKeyboard_INTERFACE_DEFINED__
#define ___EnvironmentKeyboard_INTERFACE_DEFINED__

/* interface _EnvironmentKeyboard */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentKeyboard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9c722678-490d-408f-98ae-b6b9a68aa45d")
    _EnvironmentKeyboard : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Scheme( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scheme( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentKeyboardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentKeyboard * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentKeyboard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentKeyboard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentKeyboard * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentKeyboard * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentKeyboard * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentKeyboard * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Scheme )( 
            _EnvironmentKeyboard * This,
            /* [in] */ BSTR bstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scheme )( 
            _EnvironmentKeyboard * This,
            /* [retval][out] */ BSTR *pbstr);
        
        END_INTERFACE
    } _EnvironmentKeyboardVtbl;

    interface _EnvironmentKeyboard
    {
        CONST_VTBL struct _EnvironmentKeyboardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentKeyboard_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentKeyboard_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentKeyboard_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentKeyboard_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentKeyboard_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentKeyboard_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentKeyboard_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentKeyboard_put_Scheme(This,bstr)	\
    (This)->lpVtbl -> put_Scheme(This,bstr)

#define _EnvironmentKeyboard_get_Scheme(This,pbstr)	\
    (This)->lpVtbl -> get_Scheme(This,pbstr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentKeyboard_put_Scheme_Proxy( 
    _EnvironmentKeyboard * This,
    /* [in] */ BSTR bstr);


void __RPC_STUB _EnvironmentKeyboard_put_Scheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentKeyboard_get_Scheme_Proxy( 
    _EnvironmentKeyboard * This,
    /* [retval][out] */ BSTR *pbstr);


void __RPC_STUB _EnvironmentKeyboard_get_Scheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentKeyboard_INTERFACE_DEFINED__ */


#ifndef __IExtensibleObject_INTERFACE_DEFINED__
#define __IExtensibleObject_INTERFACE_DEFINED__

/* interface IExtensibleObject */
/* [object][restricted][hidden][version][uuid] */ 


EXTERN_C const IID IID_IExtensibleObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86c31347-5b52-4715-b454-a6e5fcab975d")
    IExtensibleObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAutomationObject( 
            /* [in] */ BSTR Name,
            /* [in] */ IExtensibleObjectSite *pParent,
            /* [out] */ IDispatch **ppDisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtensibleObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtensibleObject * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtensibleObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtensibleObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAutomationObject )( 
            IExtensibleObject * This,
            /* [in] */ BSTR Name,
            /* [in] */ IExtensibleObjectSite *pParent,
            /* [out] */ IDispatch **ppDisp);
        
        END_INTERFACE
    } IExtensibleObjectVtbl;

    interface IExtensibleObject
    {
        CONST_VTBL struct IExtensibleObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtensibleObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtensibleObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtensibleObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtensibleObject_GetAutomationObject(This,Name,pParent,ppDisp)	\
    (This)->lpVtbl -> GetAutomationObject(This,Name,pParent,ppDisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IExtensibleObject_GetAutomationObject_Proxy( 
    IExtensibleObject * This,
    /* [in] */ BSTR Name,
    /* [in] */ IExtensibleObjectSite *pParent,
    /* [out] */ IDispatch **ppDisp);


void __RPC_STUB IExtensibleObject_GetAutomationObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtensibleObject_INTERFACE_DEFINED__ */



#ifndef __vsTaskCategories_MODULE_DEFINED__
#define __vsTaskCategories_MODULE_DEFINED__


/* module vsTaskCategories */
/* [dllname][uuid] */ 

const LPSTR vsTaskCategoryBuildCompile	=	"BuildCompile";

const LPSTR vsTaskCategoryComment	=	"Comment";

const LPSTR vsTaskCategoryShortcut	=	"Shortcut";

const LPSTR vsTaskCategoryUser	=	"User";

const LPSTR vsTaskCategoryMisc	=	"Misc";

const LPSTR vsTaskCategoryHTML	=	"HTML";

#endif /* __vsTaskCategories_MODULE_DEFINED__ */


#ifndef __Constants_MODULE_DEFINED__
#define __Constants_MODULE_DEFINED__


/* module Constants */
/* [dllname][uuid] */ 

const LPSTR vsDocumentKindText	=	"{8E7B96A8-E33D-11D0-A6D5-00C04FB67F6A}";

const LPSTR vsDocumentKindHTML	=	"{C76D83F8-A489-11D0-8195-00A0C91BBEE3}";

const LPSTR vsDocumentKindResource	=	"{00000000-0000-0000-0000-000000000000}";

const LPSTR vsDocumentKindBinary	=	"{25834150-CD7E-11D0-92DF-00A0C9138C45}";

const LPSTR vsViewKindPrimary	=	"{00000000-0000-0000-0000-000000000000}";

const LPSTR vsViewKindAny	=	"{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}";

const LPSTR vsViewKindDebugging	=	"{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";

const LPSTR vsViewKindCode	=	"{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";

const LPSTR vsViewKindDesigner	=	"{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";

const LPSTR vsViewKindTextView	=	"{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";

const LPSTR vsWindowKindTaskList	=	"{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}";

const LPSTR vsWindowKindToolbox	=	"{B1E99781-AB81-11D0-B683-00AA00A3EE26}";

const LPSTR vsWindowKindCallStack	=	"{0504FF91-9D61-11D0-A794-00A0C9110051}";

const LPSTR vsWindowKindThread	=	"{E62CE6A0-B439-11D0-A79D-00A0C9110051}";

const LPSTR vsWindowKindLocals	=	"{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";

const LPSTR vsWindowKindAutoLocals	=	"{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";

const LPSTR vsWindowKindWatch	=	"{90243340-BD7A-11D0-93EF-00A0C90F2734}";

const LPSTR vsWindowKindProperties	=	"{EEFA5220-E298-11D0-8F78-00A0C9110057}";

const LPSTR vsWindowKindSolutionExplorer	=	"{3AE79031-E1BC-11D0-8F78-00A0C9110057}";

const LPSTR vsWindowKindOutput	=	"{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";

const LPSTR vsWindowKindObjectBrowser	=	"{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";

const LPSTR vsWindowKindMacroExplorer	=	"{07CD18B4-3BA1-11D2-890A-0060083196C6}";

const LPSTR vsWindowKindDynamicHelp	=	"{66DBA47C-61DF-11D2-AA79-00C04F990343}";

const LPSTR vsWindowKindClassView	=	"{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";

const LPSTR vsWindowKindResourceView	=	"{2D7728C2-DE0A-45b5-99AA-89B609DFDE73}";

const LPSTR vsWindowKindDocumentOutline	=	"{25F7E850-FFA1-11D0-B63F-00A0C922E851}";

const LPSTR vsWindowKindServerExplorer	=	"{74946827-37A0-11D2-A273-00C04F8EF4FF}";

const LPSTR vsWindowKindCommandWindow	=	"{28836128-FC2C-11D2-A433-00C04F72D18A}";

const LPSTR vsWindowKindFindSymbol	=	"{53024D34-0EF5-11D3-87E0-00C04F7971A5}";

const LPSTR vsWindowKindFindSymbolResults	=	"{68487888-204A-11D3-87EB-00C04F7971A5}";

const LPSTR vsWindowKindFindReplace	=	"{CF2DDC32-8CAD-11D2-9302-005345000000}";

const LPSTR vsWindowKindFindResults1	=	"{0F887920-C2B6-11D2-9375-0080C747D9A0}";

const LPSTR vsWindowKindFindResults2	=	"{0F887921-C2B6-11D2-9375-0080C747D9A0}";

const LPSTR vsWindowKindMainWindow	=	"{9DDABE98-1D02-11D3-89A1-00C04F688DDE}";

const LPSTR vsWindowKindLinkedWindowFrame	=	"{9DDABE99-1D02-11D3-89A1-00C04F688DDE}";

const LPSTR vsWindowKindWebBrowser	=	"{E8B06F52-6D01-11D2-AA7D-00C04F990343}";

const LPSTR vsWizardAddSubProject	=	"{0F90E1D2-4999-11D1-B6D1-00A0C90F2744}";

const LPSTR vsWizardAddItem	=	"{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";

const LPSTR vsWizardNewProject	=	"{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";

const LPSTR vsProjectKindMisc	=	"{66A2671D-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectItemsKindMisc	=	"{66A2671E-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectItemKindMisc	=	"{66A2671F-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectKindUnmodeled	=	"{67294A52-A4F0-11D2-AA88-00C04F688DDE}";

const LPSTR vsProjectKindSolutionItems	=	"{66A26720-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectItemsKindSolutionItems	=	"{66A26721-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectItemKindSolutionItems	=	"{66A26722-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectsKindSolution	=	"{96410B9F-3542-4A14-877F-BC7227B51D3B}";

const LPSTR vsAddInCmdGroup	=	"{1E58696E-C90F-11D2-AAB2-00C04F688DDE}";

const LPSTR vsContextSolutionBuilding	=	"{ADFC4E60-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextDebugging	=	"{ADFC4E61-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextFullScreenMode	=	"{ADFC4E62-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextDesignMode	=	"{ADFC4E63-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextNoSolution	=	"{ADFC4E64-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextEmptySolution	=	"{ADFC4E65-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextSolutionHasSingleProject	=	"{ADFC4E66-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextSolutionHasMultipleProjects	=	"{93694FA0-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextMacroRecording	=	"{04BBF6A5-4697-11D2-890E-0060083196C6}";

const LPSTR vsContextMacroRecordingToolbar	=	"{85A70471-270A-11D2-88F9-0060083196C6}";

const LPSTR vsMiscFilesProjectUniqueName	=	"<MiscFiles>";

const LPSTR vsSolutionItemsProjectUniqueName	=	"<SolnItems>";

const LPSTR vsProjectItemKindPhysicalFile	=	"{6BB5F8EE-4483-11D3-8BCF-00C04F8EC28C}";

const LPSTR vsProjectItemKindPhysicalFolder	=	"{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}";

const LPSTR vsProjectItemKindVirtualFolder	=	"{6BB5F8F0-4483-11D3-8BCF-00C04F8EC28C}";

const LPSTR vsProjectItemKindSubProject	=	"{EA6618E8-6E24-4528-94BE-6889FE16485C}";

/* [hidden] */ const LPSTR vsext_vk_Primary	=	"{00000000-0000-0000-0000-000000000000}";

/* [hidden] */ const LPSTR vsext_vk_Debugging	=	"{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";

/* [hidden] */ const LPSTR vsext_vk_Code	=	"{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";

/* [hidden] */ const LPSTR vsext_vk_Designer	=	"{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";

/* [hidden] */ const LPSTR vsext_vk_TextView	=	"{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";

/* [hidden] */ const LPSTR vsext_wk_TaskList	=	"{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}";

/* [hidden] */ const LPSTR vsext_wk_Toolbox	=	"{B1E99781-AB81-11D0-B683-00AA00A3EE26}";

/* [hidden] */ const LPSTR vsext_wk_CallStackWindow	=	"{0504FF91-9D61-11D0-A794-00A0C9110051}";

/* [hidden] */ const LPSTR vsext_wk_ThreadWindow	=	"{E62CE6A0-B439-11D0-A79D-00A0C9110051}";

/* [hidden] */ const LPSTR vsext_wk_LocalsWindow	=	"{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";

/* [hidden] */ const LPSTR vsext_wk_AutoLocalsWindow	=	"{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";

/* [hidden] */ const LPSTR vsext_wk_WatchWindow	=	"{90243340-BD7A-11D0-93EF-00A0C90F2734}";

/* [hidden] */ const LPSTR vsext_wk_ImmedWindow	=	"{98731960-965C-11D0-A78F-00A0C9110051}";

/* [hidden] */ const LPSTR vsext_wk_PropertyBrowser	=	"{EEFA5220-E298-11D0-8F78-00A0C9110057}";

/* [hidden] */ const LPSTR vsext_wk_SProjectWindow	=	"{3AE79031-E1BC-11D0-8F78-00A0C9110057}";

/* [hidden] */ const LPSTR vsext_wk_OutputWindow	=	"{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";

/* [hidden] */ const LPSTR vsext_wk_ObjectBrowser	=	"{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";

/* [hidden] */ const LPSTR vsext_wk_ContextWindow	=	"{66DBA47C-61DF-11D2-AA79-00C04F990343}";

/* [hidden] */ const LPSTR vsext_wk_ClassView	=	"{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";

/* [hidden] */ const LPSTR vsext_GUID_AddItemWizard	=	"{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";

/* [hidden] */ const LPSTR vsext_GUID_NewProjectWizard	=	"{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";

/* [hidden] */ const LPSTR dsCPP	=	"C/C++";

/* [hidden] */ const LPSTR dsHTML_IE3	=	"HTML - IE 3.0";

/* [hidden] */ const LPSTR dsHTML_RFC1866	=	"HTML 2.0 (RFC 1866)";

/* [hidden] */ const LPSTR dsFortran_Fixed	=	"Fortran Fixed";

/* [hidden] */ const LPSTR dsFortran_Free	=	"Fortran Free";

/* [hidden] */ const LPSTR dsJava	=	"Java";

/* [hidden] */ const LPSTR dsVBSMacro	=	"VBS Macro";

/* [hidden] */ const LPSTR dsIDL	=	"ODL/IDL";

/* [helpstring] */ const LPSTR vsCATIDSolution	=	"{52AEFF70-BBD8-11d2-8598-006097C68E81}";

/* [helpstring] */ const LPSTR vsCATIDSolutionBrowseObject	=	"{A2392464-7C22-11d3-BDCA-00C04F688E50}";

/* [helpstring] */ const LPSTR vsCATIDMiscFilesProject	=	"{610d4612-d0d5-11d2-8599-006097c68e81}";

/* [helpstring] */ const LPSTR vsCATIDMiscFilesProjectItem	=	"{610d4613-d0d5-11d2-8599-006097c68e81}";

/* [helpstring] */ const LPSTR vsCATIDGenericProject	=	"{610d4616-d0d5-11d2-8599-006097c68e81}";

/* [helpstring] */ const LPSTR vsCATIDDocument	=	"{610d4611-d0d5-11d2-8599-006097c68e81}";

#endif /* __Constants_MODULE_DEFINED__ */

#ifndef ___FindEvents_INTERFACE_DEFINED__
#define ___FindEvents_INTERFACE_DEFINED__

/* interface _FindEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__FindEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c5331acd-c5d5-11D2-8598-006097c68e81")
    _FindEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _FindEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _FindEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _FindEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _FindEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _FindEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _FindEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _FindEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _FindEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _FindEventsVtbl;

    interface _FindEvents
    {
        CONST_VTBL struct _FindEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _FindEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _FindEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _FindEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _FindEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _FindEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _FindEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _FindEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___FindEvents_INTERFACE_DEFINED__ */


#ifndef ___dispFindEvents_DISPINTERFACE_DEFINED__
#define ___dispFindEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispFindEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispFindEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("c5331ace-c5d5-11D2-8598-006097c68e81")
    _dispFindEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispFindEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispFindEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispFindEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispFindEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispFindEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispFindEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispFindEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispFindEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispFindEventsVtbl;

    interface _dispFindEvents
    {
        CONST_VTBL struct _dispFindEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispFindEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispFindEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispFindEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispFindEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispFindEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispFindEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispFindEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispFindEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FindEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("811322bc-042d-4828-bff2-640ef8b7209f")
FindEvents;
#endif

#ifndef __IVsTextEditGeneral_INTERFACE_DEFINED__
#define __IVsTextEditGeneral_INTERFACE_DEFINED__

/* interface IVsTextEditGeneral */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IVsTextEditGeneral;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2e1bfd1c-5b26-4aca-b97b-ed9d261ba3e7")
    IVsTextEditGeneral : public IDispatch
    {
    public:
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_SelectionMargin( 
            /* [in] */ VARIANT_BOOL fSelectionMargin) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectionMargin( 
            /* [retval][out] */ VARIANT_BOOL *pfSelectionMargin) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_GoToAnchorAfterEscape( 
            /* [in] */ VARIANT_BOOL fGoToAnchorAfterEscape) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_GoToAnchorAfterEscape( 
            /* [retval][out] */ VARIANT_BOOL *pfGoToAnchorAfterEscape) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_DragNDropTextEditing( 
            /* [in] */ VARIANT_BOOL fDragNDropTextEditing) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DragNDropTextEditing( 
            /* [retval][out] */ VARIANT_BOOL *pfDragNDropTextEditing) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_UndoCaretActions( 
            /* [in] */ VARIANT_BOOL fUndoCaretActions) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UndoCaretActions( 
            /* [retval][out] */ VARIANT_BOOL *pfUndoCaretActions) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginIndicatorBar( 
            /* [in] */ VARIANT_BOOL fMarginIndicatorBar) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginIndicatorBar( 
            /* [retval][out] */ VARIANT_BOOL *pfMarginIndicatorBar) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalScrollBar( 
            /* [in] */ VARIANT_BOOL fHorizontalScrollBar) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalScrollBar( 
            /* [retval][out] */ VARIANT_BOOL *pfHorizontalScrollBar) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalScrollBar( 
            /* [in] */ VARIANT_BOOL fVerticalScrollBar) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalScrollBar( 
            /* [retval][out] */ VARIANT_BOOL *pfVerticalScrollBar) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoDelimiterHighlighting( 
            /* [in] */ VARIANT_BOOL fHighlighting) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoDelimiterHighlighting( 
            /* [retval][out] */ VARIANT_BOOL *pfHighlighting) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsTextEditGeneralVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsTextEditGeneral * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsTextEditGeneral * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsTextEditGeneral * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsTextEditGeneral * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsTextEditGeneral * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsTextEditGeneral * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsTextEditGeneral * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SelectionMargin )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fSelectionMargin);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionMargin )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfSelectionMargin);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GoToAnchorAfterEscape )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fGoToAnchorAfterEscape);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GoToAnchorAfterEscape )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfGoToAnchorAfterEscape);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DragNDropTextEditing )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fDragNDropTextEditing);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DragNDropTextEditing )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfDragNDropTextEditing);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UndoCaretActions )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fUndoCaretActions);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UndoCaretActions )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfUndoCaretActions);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginIndicatorBar )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fMarginIndicatorBar);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginIndicatorBar )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfMarginIndicatorBar);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalScrollBar )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fHorizontalScrollBar);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalScrollBar )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfHorizontalScrollBar);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalScrollBar )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fVerticalScrollBar);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalScrollBar )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfVerticalScrollBar);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoDelimiterHighlighting )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fHighlighting);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoDelimiterHighlighting )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfHighlighting);
        
        END_INTERFACE
    } IVsTextEditGeneralVtbl;

    interface IVsTextEditGeneral
    {
        CONST_VTBL struct IVsTextEditGeneralVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsTextEditGeneral_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsTextEditGeneral_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsTextEditGeneral_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsTextEditGeneral_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsTextEditGeneral_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsTextEditGeneral_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsTextEditGeneral_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsTextEditGeneral_put_SelectionMargin(This,fSelectionMargin)	\
    (This)->lpVtbl -> put_SelectionMargin(This,fSelectionMargin)

#define IVsTextEditGeneral_get_SelectionMargin(This,pfSelectionMargin)	\
    (This)->lpVtbl -> get_SelectionMargin(This,pfSelectionMargin)

#define IVsTextEditGeneral_put_GoToAnchorAfterEscape(This,fGoToAnchorAfterEscape)	\
    (This)->lpVtbl -> put_GoToAnchorAfterEscape(This,fGoToAnchorAfterEscape)

#define IVsTextEditGeneral_get_GoToAnchorAfterEscape(This,pfGoToAnchorAfterEscape)	\
    (This)->lpVtbl -> get_GoToAnchorAfterEscape(This,pfGoToAnchorAfterEscape)

#define IVsTextEditGeneral_put_DragNDropTextEditing(This,fDragNDropTextEditing)	\
    (This)->lpVtbl -> put_DragNDropTextEditing(This,fDragNDropTextEditing)

#define IVsTextEditGeneral_get_DragNDropTextEditing(This,pfDragNDropTextEditing)	\
    (This)->lpVtbl -> get_DragNDropTextEditing(This,pfDragNDropTextEditing)

#define IVsTextEditGeneral_put_UndoCaretActions(This,fUndoCaretActions)	\
    (This)->lpVtbl -> put_UndoCaretActions(This,fUndoCaretActions)

#define IVsTextEditGeneral_get_UndoCaretActions(This,pfUndoCaretActions)	\
    (This)->lpVtbl -> get_UndoCaretActions(This,pfUndoCaretActions)

#define IVsTextEditGeneral_put_MarginIndicatorBar(This,fMarginIndicatorBar)	\
    (This)->lpVtbl -> put_MarginIndicatorBar(This,fMarginIndicatorBar)

#define IVsTextEditGeneral_get_MarginIndicatorBar(This,pfMarginIndicatorBar)	\
    (This)->lpVtbl -> get_MarginIndicatorBar(This,pfMarginIndicatorBar)

#define IVsTextEditGeneral_put_HorizontalScrollBar(This,fHorizontalScrollBar)	\
    (This)->lpVtbl -> put_HorizontalScrollBar(This,fHorizontalScrollBar)

#define IVsTextEditGeneral_get_HorizontalScrollBar(This,pfHorizontalScrollBar)	\
    (This)->lpVtbl -> get_HorizontalScrollBar(This,pfHorizontalScrollBar)

#define IVsTextEditGeneral_put_VerticalScrollBar(This,fVerticalScrollBar)	\
    (This)->lpVtbl -> put_VerticalScrollBar(This,fVerticalScrollBar)

#define IVsTextEditGeneral_get_VerticalScrollBar(This,pfVerticalScrollBar)	\
    (This)->lpVtbl -> get_VerticalScrollBar(This,pfVerticalScrollBar)

#define IVsTextEditGeneral_put_AutoDelimiterHighlighting(This,fHighlighting)	\
    (This)->lpVtbl -> put_AutoDelimiterHighlighting(This,fHighlighting)

#define IVsTextEditGeneral_get_AutoDelimiterHighlighting(This,pfHighlighting)	\
    (This)->lpVtbl -> get_AutoDelimiterHighlighting(This,pfHighlighting)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_SelectionMargin_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fSelectionMargin);


void __RPC_STUB IVsTextEditGeneral_put_SelectionMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_SelectionMargin_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfSelectionMargin);


void __RPC_STUB IVsTextEditGeneral_get_SelectionMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_GoToAnchorAfterEscape_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fGoToAnchorAfterEscape);


void __RPC_STUB IVsTextEditGeneral_put_GoToAnchorAfterEscape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_GoToAnchorAfterEscape_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfGoToAnchorAfterEscape);


void __RPC_STUB IVsTextEditGeneral_get_GoToAnchorAfterEscape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_DragNDropTextEditing_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fDragNDropTextEditing);


void __RPC_STUB IVsTextEditGeneral_put_DragNDropTextEditing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_DragNDropTextEditing_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfDragNDropTextEditing);


void __RPC_STUB IVsTextEditGeneral_get_DragNDropTextEditing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_UndoCaretActions_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fUndoCaretActions);


void __RPC_STUB IVsTextEditGeneral_put_UndoCaretActions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_UndoCaretActions_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfUndoCaretActions);


void __RPC_STUB IVsTextEditGeneral_get_UndoCaretActions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_MarginIndicatorBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fMarginIndicatorBar);


void __RPC_STUB IVsTextEditGeneral_put_MarginIndicatorBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_MarginIndicatorBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfMarginIndicatorBar);


void __RPC_STUB IVsTextEditGeneral_get_MarginIndicatorBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_HorizontalScrollBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fHorizontalScrollBar);


void __RPC_STUB IVsTextEditGeneral_put_HorizontalScrollBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_HorizontalScrollBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfHorizontalScrollBar);


void __RPC_STUB IVsTextEditGeneral_get_HorizontalScrollBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_VerticalScrollBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fVerticalScrollBar);


void __RPC_STUB IVsTextEditGeneral_put_VerticalScrollBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_VerticalScrollBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfVerticalScrollBar);


void __RPC_STUB IVsTextEditGeneral_get_VerticalScrollBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_AutoDelimiterHighlighting_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fHighlighting);


void __RPC_STUB IVsTextEditGeneral_put_AutoDelimiterHighlighting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_AutoDelimiterHighlighting_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfHighlighting);


void __RPC_STUB IVsTextEditGeneral_get_AutoDelimiterHighlighting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsTextEditGeneral_INTERFACE_DEFINED__ */


#ifndef __IVsTextEditPerLanguage_INTERFACE_DEFINED__
#define __IVsTextEditPerLanguage_INTERFACE_DEFINED__

/* interface IVsTextEditPerLanguage */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IVsTextEditPerLanguage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5943bd7e-d722-42db-a251-fe2add8711ea")
    IVsTextEditPerLanguage : public IDispatch
    {
    public:
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_TabSize( 
            /* [in] */ short iTabSize) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_TabSize( 
            /* [retval][out] */ short *piTabSize) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_IndentSize( 
            /* [in] */ short iIndentSize) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentSize( 
            /* [retval][out] */ short *piIndentSize) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertTabs( 
            /* [in] */ VARIANT_BOOL fInsertTabs) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertTabs( 
            /* [retval][out] */ VARIANT_BOOL *pfInsertTabs) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_IndentStyle( 
            /* [in] */ vsIndentStyle indentStyle) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentStyle( 
            /* [retval][out] */ vsIndentStyle *pfIndentStyle) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoListMembers( 
            /* [in] */ VARIANT_BOOL fAutoListMembers) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoListMembers( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoListMembers) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoListParams( 
            /* [in] */ VARIANT_BOOL fAutoListParams) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoListParams( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoListParams) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_VirtualSpace( 
            /* [in] */ VARIANT_BOOL fVirtualSpace) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_VirtualSpace( 
            /* [retval][out] */ VARIANT_BOOL *pfVirtualSpace) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableLeftClickForURLs( 
            /* [in] */ VARIANT_BOOL fHotURLs) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableLeftClickForURLs( 
            /* [retval][out] */ VARIANT_BOOL *pfHotURLs) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ VARIANT_BOOL fWrap) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ VARIANT_BOOL *pfWrap) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowLineNumbers( 
            /* [in] */ VARIANT_BOOL fShow) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowLineNumbers( 
            /* [retval][out] */ VARIANT_BOOL *pfShow) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowNavigationBar( 
            /* [in] */ VARIANT_BOOL fShow) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowNavigationBar( 
            /* [retval][out] */ VARIANT_BOOL *pfShow) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HideAdvancedMembers( 
            /* [in] */ VARIANT_BOOL fHide) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HideAdvancedMembers( 
            /* [retval][out] */ VARIANT_BOOL *pfHide) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsTextEditPerLanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsTextEditPerLanguage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsTextEditPerLanguage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsTextEditPerLanguage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabSize )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ short iTabSize);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabSize )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ short *piTabSize);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndentSize )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ short iIndentSize);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentSize )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ short *piIndentSize);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertTabs )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fInsertTabs);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertTabs )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfInsertTabs);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndentStyle )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ vsIndentStyle indentStyle);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentStyle )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ vsIndentStyle *pfIndentStyle);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoListMembers )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fAutoListMembers);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoListMembers )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoListMembers);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoListParams )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fAutoListParams);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoListParams )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoListParams);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VirtualSpace )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fVirtualSpace);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VirtualSpace )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfVirtualSpace);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableLeftClickForURLs )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fHotURLs);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableLeftClickForURLs )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfHotURLs);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fWrap);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfWrap);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowLineNumbers )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fShow);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowLineNumbers )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfShow);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowNavigationBar )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fShow);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowNavigationBar )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfShow);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HideAdvancedMembers )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fHide);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HideAdvancedMembers )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfHide);
        
        END_INTERFACE
    } IVsTextEditPerLanguageVtbl;

    interface IVsTextEditPerLanguage
    {
        CONST_VTBL struct IVsTextEditPerLanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsTextEditPerLanguage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsTextEditPerLanguage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsTextEditPerLanguage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsTextEditPerLanguage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsTextEditPerLanguage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsTextEditPerLanguage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsTextEditPerLanguage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsTextEditPerLanguage_put_TabSize(This,iTabSize)	\
    (This)->lpVtbl -> put_TabSize(This,iTabSize)

#define IVsTextEditPerLanguage_get_TabSize(This,piTabSize)	\
    (This)->lpVtbl -> get_TabSize(This,piTabSize)

#define IVsTextEditPerLanguage_put_IndentSize(This,iIndentSize)	\
    (This)->lpVtbl -> put_IndentSize(This,iIndentSize)

#define IVsTextEditPerLanguage_get_IndentSize(This,piIndentSize)	\
    (This)->lpVtbl -> get_IndentSize(This,piIndentSize)

#define IVsTextEditPerLanguage_put_InsertTabs(This,fInsertTabs)	\
    (This)->lpVtbl -> put_InsertTabs(This,fInsertTabs)

#define IVsTextEditPerLanguage_get_InsertTabs(This,pfInsertTabs)	\
    (This)->lpVtbl -> get_InsertTabs(This,pfInsertTabs)

#define IVsTextEditPerLanguage_put_IndentStyle(This,indentStyle)	\
    (This)->lpVtbl -> put_IndentStyle(This,indentStyle)

#define IVsTextEditPerLanguage_get_IndentStyle(This,pfIndentStyle)	\
    (This)->lpVtbl -> get_IndentStyle(This,pfIndentStyle)

#define IVsTextEditPerLanguage_put_AutoListMembers(This,fAutoListMembers)	\
    (This)->lpVtbl -> put_AutoListMembers(This,fAutoListMembers)

#define IVsTextEditPerLanguage_get_AutoListMembers(This,pfAutoListMembers)	\
    (This)->lpVtbl -> get_AutoListMembers(This,pfAutoListMembers)

#define IVsTextEditPerLanguage_put_AutoListParams(This,fAutoListParams)	\
    (This)->lpVtbl -> put_AutoListParams(This,fAutoListParams)

#define IVsTextEditPerLanguage_get_AutoListParams(This,pfAutoListParams)	\
    (This)->lpVtbl -> get_AutoListParams(This,pfAutoListParams)

#define IVsTextEditPerLanguage_put_VirtualSpace(This,fVirtualSpace)	\
    (This)->lpVtbl -> put_VirtualSpace(This,fVirtualSpace)

#define IVsTextEditPerLanguage_get_VirtualSpace(This,pfVirtualSpace)	\
    (This)->lpVtbl -> get_VirtualSpace(This,pfVirtualSpace)

#define IVsTextEditPerLanguage_put_EnableLeftClickForURLs(This,fHotURLs)	\
    (This)->lpVtbl -> put_EnableLeftClickForURLs(This,fHotURLs)

#define IVsTextEditPerLanguage_get_EnableLeftClickForURLs(This,pfHotURLs)	\
    (This)->lpVtbl -> get_EnableLeftClickForURLs(This,pfHotURLs)

#define IVsTextEditPerLanguage_put_WordWrap(This,fWrap)	\
    (This)->lpVtbl -> put_WordWrap(This,fWrap)

#define IVsTextEditPerLanguage_get_WordWrap(This,pfWrap)	\
    (This)->lpVtbl -> get_WordWrap(This,pfWrap)

#define IVsTextEditPerLanguage_put_ShowLineNumbers(This,fShow)	\
    (This)->lpVtbl -> put_ShowLineNumbers(This,fShow)

#define IVsTextEditPerLanguage_get_ShowLineNumbers(This,pfShow)	\
    (This)->lpVtbl -> get_ShowLineNumbers(This,pfShow)

#define IVsTextEditPerLanguage_put_ShowNavigationBar(This,fShow)	\
    (This)->lpVtbl -> put_ShowNavigationBar(This,fShow)

#define IVsTextEditPerLanguage_get_ShowNavigationBar(This,pfShow)	\
    (This)->lpVtbl -> get_ShowNavigationBar(This,pfShow)

#define IVsTextEditPerLanguage_put_HideAdvancedMembers(This,fHide)	\
    (This)->lpVtbl -> put_HideAdvancedMembers(This,fHide)

#define IVsTextEditPerLanguage_get_HideAdvancedMembers(This,pfHide)	\
    (This)->lpVtbl -> get_HideAdvancedMembers(This,pfHide)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_TabSize_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ short iTabSize);


void __RPC_STUB IVsTextEditPerLanguage_put_TabSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_TabSize_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ short *piTabSize);


void __RPC_STUB IVsTextEditPerLanguage_get_TabSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_IndentSize_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ short iIndentSize);


void __RPC_STUB IVsTextEditPerLanguage_put_IndentSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_IndentSize_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ short *piIndentSize);


void __RPC_STUB IVsTextEditPerLanguage_get_IndentSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_InsertTabs_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fInsertTabs);


void __RPC_STUB IVsTextEditPerLanguage_put_InsertTabs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_InsertTabs_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfInsertTabs);


void __RPC_STUB IVsTextEditPerLanguage_get_InsertTabs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_IndentStyle_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ vsIndentStyle indentStyle);


void __RPC_STUB IVsTextEditPerLanguage_put_IndentStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_IndentStyle_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ vsIndentStyle *pfIndentStyle);


void __RPC_STUB IVsTextEditPerLanguage_get_IndentStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_AutoListMembers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fAutoListMembers);


void __RPC_STUB IVsTextEditPerLanguage_put_AutoListMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_AutoListMembers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfAutoListMembers);


void __RPC_STUB IVsTextEditPerLanguage_get_AutoListMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_AutoListParams_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fAutoListParams);


void __RPC_STUB IVsTextEditPerLanguage_put_AutoListParams_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_AutoListParams_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfAutoListParams);


void __RPC_STUB IVsTextEditPerLanguage_get_AutoListParams_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_VirtualSpace_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fVirtualSpace);


void __RPC_STUB IVsTextEditPerLanguage_put_VirtualSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_VirtualSpace_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfVirtualSpace);


void __RPC_STUB IVsTextEditPerLanguage_get_VirtualSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_EnableLeftClickForURLs_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fHotURLs);


void __RPC_STUB IVsTextEditPerLanguage_put_EnableLeftClickForURLs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_EnableLeftClickForURLs_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfHotURLs);


void __RPC_STUB IVsTextEditPerLanguage_get_EnableLeftClickForURLs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_WordWrap_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fWrap);


void __RPC_STUB IVsTextEditPerLanguage_put_WordWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_WordWrap_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfWrap);


void __RPC_STUB IVsTextEditPerLanguage_get_WordWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_ShowLineNumbers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fShow);


void __RPC_STUB IVsTextEditPerLanguage_put_ShowLineNumbers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_ShowLineNumbers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfShow);


void __RPC_STUB IVsTextEditPerLanguage_get_ShowLineNumbers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_ShowNavigationBar_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fShow);


void __RPC_STUB IVsTextEditPerLanguage_put_ShowNavigationBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_ShowNavigationBar_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfShow);


void __RPC_STUB IVsTextEditPerLanguage_get_ShowNavigationBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_HideAdvancedMembers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fHide);


void __RPC_STUB IVsTextEditPerLanguage_put_HideAdvancedMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_HideAdvancedMembers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfHide);


void __RPC_STUB IVsTextEditPerLanguage_get_HideAdvancedMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsTextEditPerLanguage_INTERFACE_DEFINED__ */


#ifndef __IVsTextEditFonts_INTERFACE_DEFINED__
#define __IVsTextEditFonts_INTERFACE_DEFINED__

/* interface IVsTextEditFonts */
/* [restricted][hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IVsTextEditFonts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f39ab913-e6c9-4546-a265-1e43f8de924c")
    IVsTextEditFonts : public IDispatch
    {
    public:
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FontFamily( 
            /* [in] */ BSTR bstrFontFamily) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FontFamily( 
            /* [retval][out] */ BSTR *pbstrFontFamily) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FontCharacterSet( 
            /* [in] */ vsFontCharSet bstrFontCharacterSet) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FontCharacterSet( 
            /* [retval][out] */ vsFontCharSet *pbstrCharacterSet) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            /* [in] */ short iFontSize) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ short *piFontSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsTextEditFontsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsTextEditFonts * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsTextEditFonts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsTextEditFonts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsTextEditFonts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsTextEditFonts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsTextEditFonts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsTextEditFonts * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontFamily )( 
            IVsTextEditFonts * This,
            /* [in] */ BSTR bstrFontFamily);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontFamily )( 
            IVsTextEditFonts * This,
            /* [retval][out] */ BSTR *pbstrFontFamily);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontCharacterSet )( 
            IVsTextEditFonts * This,
            /* [in] */ vsFontCharSet bstrFontCharacterSet);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontCharacterSet )( 
            IVsTextEditFonts * This,
            /* [retval][out] */ vsFontCharSet *pbstrCharacterSet);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            IVsTextEditFonts * This,
            /* [in] */ short iFontSize);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            IVsTextEditFonts * This,
            /* [retval][out] */ short *piFontSize);
        
        END_INTERFACE
    } IVsTextEditFontsVtbl;

    interface IVsTextEditFonts
    {
        CONST_VTBL struct IVsTextEditFontsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsTextEditFonts_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsTextEditFonts_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsTextEditFonts_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsTextEditFonts_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsTextEditFonts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsTextEditFonts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsTextEditFonts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsTextEditFonts_put_FontFamily(This,bstrFontFamily)	\
    (This)->lpVtbl -> put_FontFamily(This,bstrFontFamily)

#define IVsTextEditFonts_get_FontFamily(This,pbstrFontFamily)	\
    (This)->lpVtbl -> get_FontFamily(This,pbstrFontFamily)

#define IVsTextEditFonts_put_FontCharacterSet(This,bstrFontCharacterSet)	\
    (This)->lpVtbl -> put_FontCharacterSet(This,bstrFontCharacterSet)

#define IVsTextEditFonts_get_FontCharacterSet(This,pbstrCharacterSet)	\
    (This)->lpVtbl -> get_FontCharacterSet(This,pbstrCharacterSet)

#define IVsTextEditFonts_put_FontSize(This,iFontSize)	\
    (This)->lpVtbl -> put_FontSize(This,iFontSize)

#define IVsTextEditFonts_get_FontSize(This,piFontSize)	\
    (This)->lpVtbl -> get_FontSize(This,piFontSize)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_put_FontFamily_Proxy( 
    IVsTextEditFonts * This,
    /* [in] */ BSTR bstrFontFamily);


void __RPC_STUB IVsTextEditFonts_put_FontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_get_FontFamily_Proxy( 
    IVsTextEditFonts * This,
    /* [retval][out] */ BSTR *pbstrFontFamily);


void __RPC_STUB IVsTextEditFonts_get_FontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_put_FontCharacterSet_Proxy( 
    IVsTextEditFonts * This,
    /* [in] */ vsFontCharSet bstrFontCharacterSet);


void __RPC_STUB IVsTextEditFonts_put_FontCharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_get_FontCharacterSet_Proxy( 
    IVsTextEditFonts * This,
    /* [retval][out] */ vsFontCharSet *pbstrCharacterSet);


void __RPC_STUB IVsTextEditFonts_get_FontCharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_put_FontSize_Proxy( 
    IVsTextEditFonts * This,
    /* [in] */ short iFontSize);


void __RPC_STUB IVsTextEditFonts_put_FontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_get_FontSize_Proxy( 
    IVsTextEditFonts * This,
    /* [retval][out] */ short *piFontSize);


void __RPC_STUB IVsTextEditFonts_get_FontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsTextEditFonts_INTERFACE_DEFINED__ */


#ifndef __HTMLWindow_INTERFACE_DEFINED__
#define __HTMLWindow_INTERFACE_DEFINED__

/* interface HTMLWindow */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_HTMLWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6576203-fbce-477e-a66b-eda237bb68a7")
    HTMLWindow : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentTab( 
            /* [retval][out] */ vsHTMLTabs *pTab) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentTab( 
            /* [in] */ vsHTMLTabs Tab) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentTabObject( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HTMLWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            HTMLWindow * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HTMLWindow * This,
            /* [retval][out] */ Window **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentTab )( 
            HTMLWindow * This,
            /* [retval][out] */ vsHTMLTabs *pTab);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentTab )( 
            HTMLWindow * This,
            /* [in] */ vsHTMLTabs Tab);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentTabObject )( 
            HTMLWindow * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        END_INTERFACE
    } HTMLWindowVtbl;

    interface HTMLWindow
    {
        CONST_VTBL struct HTMLWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define HTMLWindow_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define HTMLWindow_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define HTMLWindow_get_CurrentTab(This,pTab)	\
    (This)->lpVtbl -> get_CurrentTab(This,pTab)

#define HTMLWindow_put_CurrentTab(This,Tab)	\
    (This)->lpVtbl -> put_CurrentTab(This,Tab)

#define HTMLWindow_get_CurrentTabObject(This,ppObj)	\
    (This)->lpVtbl -> get_CurrentTabObject(This,ppObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_get_DTE_Proxy( 
    HTMLWindow * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB HTMLWindow_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_get_Parent_Proxy( 
    HTMLWindow * This,
    /* [retval][out] */ Window **ppParent);


void __RPC_STUB HTMLWindow_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_get_CurrentTab_Proxy( 
    HTMLWindow * This,
    /* [retval][out] */ vsHTMLTabs *pTab);


void __RPC_STUB HTMLWindow_get_CurrentTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_put_CurrentTab_Proxy( 
    HTMLWindow * This,
    /* [in] */ vsHTMLTabs Tab);


void __RPC_STUB HTMLWindow_put_CurrentTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_get_CurrentTabObject_Proxy( 
    HTMLWindow * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB HTMLWindow_get_CurrentTabObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __HTMLWindow_INTERFACE_DEFINED__ */

#endif /* __EnvDTE_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_dte_0282 */
/* [local] */ 

#define SID_SDTE	IID__DTE
#ifdef Delete_defined
#define Delete delete
#endif
#ifdef ReplaceText_defined
#ifdef UNICODE
#define ReplaceText ReplaceTextW
#else
#define ReplaceText ReplaceTextA
#endif
#endif


extern RPC_IF_HANDLE __MIDL_itf_dte_0282_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dte_0282_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\objext.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:42:51 2002
 */
/* Compiler settings for objext.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __objext_h__
#define __objext_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDocumentSite_FWD_DEFINED__
#define __IDocumentSite_FWD_DEFINED__
typedef interface IDocumentSite IDocumentSite;
#endif 	/* __IDocumentSite_FWD_DEFINED__ */


#ifndef __IDocumentSite2_FWD_DEFINED__
#define __IDocumentSite2_FWD_DEFINED__
typedef interface IDocumentSite2 IDocumentSite2;
#endif 	/* __IDocumentSite2_FWD_DEFINED__ */


#ifndef __IRequireClasses_FWD_DEFINED__
#define __IRequireClasses_FWD_DEFINED__
typedef interface IRequireClasses IRequireClasses;
#endif 	/* __IRequireClasses_FWD_DEFINED__ */


#ifndef __ILicensedClassManager_FWD_DEFINED__
#define __ILicensedClassManager_FWD_DEFINED__
typedef interface ILicensedClassManager ILicensedClassManager;
#endif 	/* __ILicensedClassManager_FWD_DEFINED__ */


#ifndef __IExtendedTypeLib_FWD_DEFINED__
#define __IExtendedTypeLib_FWD_DEFINED__
typedef interface IExtendedTypeLib IExtendedTypeLib;
#endif 	/* __IExtendedTypeLib_FWD_DEFINED__ */


#ifndef __ILocalRegistry_FWD_DEFINED__
#define __ILocalRegistry_FWD_DEFINED__
typedef interface ILocalRegistry ILocalRegistry;
#endif 	/* __ILocalRegistry_FWD_DEFINED__ */


#ifndef __ILocalRegistry2_FWD_DEFINED__
#define __ILocalRegistry2_FWD_DEFINED__
typedef interface ILocalRegistry2 ILocalRegistry2;
#endif 	/* __ILocalRegistry2_FWD_DEFINED__ */


#ifndef __ILocalRegistry3_FWD_DEFINED__
#define __ILocalRegistry3_FWD_DEFINED__
typedef interface ILocalRegistry3 ILocalRegistry3;
#endif 	/* __ILocalRegistry3_FWD_DEFINED__ */


#ifndef __IUIElement_FWD_DEFINED__
#define __IUIElement_FWD_DEFINED__
typedef interface IUIElement IUIElement;
#endif 	/* __IUIElement_FWD_DEFINED__ */


#ifndef __ICategorizeProperties_FWD_DEFINED__
#define __ICategorizeProperties_FWD_DEFINED__
typedef interface ICategorizeProperties ICategorizeProperties;
#endif 	/* __ICategorizeProperties_FWD_DEFINED__ */


#ifndef __IHelp_FWD_DEFINED__
#define __IHelp_FWD_DEFINED__
typedef interface IHelp IHelp;
#endif 	/* __IHelp_FWD_DEFINED__ */


/* header files for imported files */
#include "designer.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_objext_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright 1995 - 1997 Microsoft Corporation. All Rights Reserved.
//
//  File: objext.h
//
//--------------------------------------------------------------------------
#ifndef _OBJEXT_H_
#define _OBJEXT_H_
#include "proffserv.h"
typedef DWORD ACTFLAG;

#define ACT_DEFAULT 0x00000000
#define ACT_SHOW    0x00000001


extern RPC_IF_HANDLE __MIDL_itf_objext_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objext_0000_v0_0_s_ifspec;

#ifndef __IDocumentSite_INTERFACE_DEFINED__
#define __IDocumentSite_INTERFACE_DEFINED__

/* interface IDocumentSite */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IDocumentSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("94A0F6F1-10BC-11d0-8D09-00A0C90F2732")
    IDocumentSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetSite( 
            /* [in] */ IServiceProvider *pSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSite( 
            /* [out] */ IServiceProvider **ppSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCompiler( 
            /* [in] */ REFIID iid,
            /* [out] */ void **ppvObj) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ActivateObject( 
            ACTFLAG dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsObjectShowable( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetSite )( 
            IDocumentSite * This,
            /* [in] */ IServiceProvider *pSite);
        
        HRESULT ( STDMETHODCALLTYPE *GetSite )( 
            IDocumentSite * This,
            /* [out] */ IServiceProvider **ppSite);
        
        HRESULT ( STDMETHODCALLTYPE *GetCompiler )( 
            IDocumentSite * This,
            /* [in] */ REFIID iid,
            /* [out] */ void **ppvObj);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateObject )( 
            IDocumentSite * This,
            ACTFLAG dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *IsObjectShowable )( 
            IDocumentSite * This);
        
        END_INTERFACE
    } IDocumentSiteVtbl;

    interface IDocumentSite
    {
        CONST_VTBL struct IDocumentSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDocumentSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDocumentSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDocumentSite_SetSite(This,pSite)	\
    (This)->lpVtbl -> SetSite(This,pSite)

#define IDocumentSite_GetSite(This,ppSite)	\
    (This)->lpVtbl -> GetSite(This,ppSite)

#define IDocumentSite_GetCompiler(This,iid,ppvObj)	\
    (This)->lpVtbl -> GetCompiler(This,iid,ppvObj)

#define IDocumentSite_ActivateObject(This,dwFlags)	\
    (This)->lpVtbl -> ActivateObject(This,dwFlags)

#define IDocumentSite_IsObjectShowable(This)	\
    (This)->lpVtbl -> IsObjectShowable(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDocumentSite_SetSite_Proxy( 
    IDocumentSite * This,
    /* [in] */ IServiceProvider *pSite);


void __RPC_STUB IDocumentSite_SetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDocumentSite_GetSite_Proxy( 
    IDocumentSite * This,
    /* [out] */ IServiceProvider **ppSite);


void __RPC_STUB IDocumentSite_GetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDocumentSite_GetCompiler_Proxy( 
    IDocumentSite * This,
    /* [in] */ REFIID iid,
    /* [out] */ void **ppvObj);


void __RPC_STUB IDocumentSite_GetCompiler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDocumentSite_ActivateObject_Proxy( 
    IDocumentSite * This,
    ACTFLAG dwFlags);


void __RPC_STUB IDocumentSite_ActivateObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDocumentSite_IsObjectShowable_Proxy( 
    IDocumentSite * This);


void __RPC_STUB IDocumentSite_IsObjectShowable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDocumentSite_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objext_0263 */
/* [local] */ 

#define IClassDesigner IDocumentSite
#define IID_IClassDesigner IID_IDocumentSite


extern RPC_IF_HANDLE __MIDL_itf_objext_0263_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objext_0263_v0_0_s_ifspec;

#ifndef __IDocumentSite2_INTERFACE_DEFINED__
#define __IDocumentSite2_INTERFACE_DEFINED__

/* interface IDocumentSite2 */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IDocumentSite2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61D4A8A1-2C90-11d2-ADE4-00C04F98F417")
    IDocumentSite2 : public IDocumentSite
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetObject( 
            /* [out] */ IDispatch **ppDisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentSite2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDocumentSite2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDocumentSite2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDocumentSite2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetSite )( 
            IDocumentSite2 * This,
            /* [in] */ IServiceProvider *pSite);
        
        HRESULT ( STDMETHODCALLTYPE *GetSite )( 
            IDocumentSite2 * This,
            /* [out] */ IServiceProvider **ppSite);
        
        HRESULT ( STDMETHODCALLTYPE *GetCompiler )( 
            IDocumentSite2 * This,
            /* [in] */ REFIID iid,
            /* [out] */ void **ppvObj);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateObject )( 
            IDocumentSite2 * This,
            ACTFLAG dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *IsObjectShowable )( 
            IDocumentSite2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            IDocumentSite2 * This,
            /* [out] */ IDispatch **ppDisp);
        
        END_INTERFACE
    } IDocumentSite2Vtbl;

    interface IDocumentSite2
    {
        CONST_VTBL struct IDocumentSite2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentSite2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDocumentSite2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDocumentSite2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDocumentSite2_SetSite(This,pSite)	\
    (This)->lpVtbl -> SetSite(This,pSite)

#define IDocumentSite2_GetSite(This,ppSite)	\
    (This)->lpVtbl -> GetSite(This,ppSite)

#define IDocumentSite2_GetCompiler(This,iid,ppvObj)	\
    (This)->lpVtbl -> GetCompiler(This,iid,ppvObj)

#define IDocumentSite2_ActivateObject(This,dwFlags)	\
    (This)->lpVtbl -> ActivateObject(This,dwFlags)

#define IDocumentSite2_IsObjectShowable(This)	\
    (This)->lpVtbl -> IsObjectShowable(This)


#define IDocumentSite2_GetObject(This,ppDisp)	\
    (This)->lpVtbl -> GetObject(This,ppDisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDocumentSite2_GetObject_Proxy( 
    IDocumentSite2 * This,
    /* [out] */ IDispatch **ppDisp);


void __RPC_STUB IDocumentSite2_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDocumentSite2_INTERFACE_DEFINED__ */


#ifndef __IRequireClasses_INTERFACE_DEFINED__
#define __IRequireClasses_INTERFACE_DEFINED__

/* interface IRequireClasses */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IRequireClasses;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d5140d0-7436-11ce-8034-00aa006009fa")
    IRequireClasses : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CountRequiredClasses( 
            /* [out] */ ULONG *pCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRequiredClasses( 
            /* [in] */ ULONG index,
            CLSID *pclsid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRequireClassesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRequireClasses * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRequireClasses * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRequireClasses * This);
        
        HRESULT ( STDMETHODCALLTYPE *CountRequiredClasses )( 
            IRequireClasses * This,
            /* [out] */ ULONG *pCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetRequiredClasses )( 
            IRequireClasses * This,
            /* [in] */ ULONG index,
            CLSID *pclsid);
        
        END_INTERFACE
    } IRequireClassesVtbl;

    interface IRequireClasses
    {
        CONST_VTBL struct IRequireClassesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRequireClasses_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRequireClasses_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRequireClasses_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRequireClasses_CountRequiredClasses(This,pCount)	\
    (This)->lpVtbl -> CountRequiredClasses(This,pCount)

#define IRequireClasses_GetRequiredClasses(This,index,pclsid)	\
    (This)->lpVtbl -> GetRequiredClasses(This,index,pclsid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IRequireClasses_CountRequiredClasses_Proxy( 
    IRequireClasses * This,
    /* [out] */ ULONG *pCount);


void __RPC_STUB IRequireClasses_CountRequiredClasses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IRequireClasses_GetRequiredClasses_Proxy( 
    IRequireClasses * This,
    /* [in] */ ULONG index,
    CLSID *pclsid);


void __RPC_STUB IRequireClasses_GetRequiredClasses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRequireClasses_INTERFACE_DEFINED__ */


#ifndef __ILicensedClassManager_INTERFACE_DEFINED__
#define __ILicensedClassManager_INTERFACE_DEFINED__

/* interface ILicensedClassManager */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ILicensedClassManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d5140d4-7436-11ce-8034-00aa006009fa")
    ILicensedClassManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnChangeInRequiredClasses( 
            /* [in] */ IRequireClasses *pirc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILicensedClassManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILicensedClassManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILicensedClassManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILicensedClassManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnChangeInRequiredClasses )( 
            ILicensedClassManager * This,
            /* [in] */ IRequireClasses *pirc);
        
        END_INTERFACE
    } ILicensedClassManagerVtbl;

    interface ILicensedClassManager
    {
        CONST_VTBL struct ILicensedClassManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILicensedClassManager_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILicensedClassManager_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILicensedClassManager_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILicensedClassManager_OnChangeInRequiredClasses(This,pirc)	\
    (This)->lpVtbl -> OnChangeInRequiredClasses(This,pirc)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ILicensedClassManager_OnChangeInRequiredClasses_Proxy( 
    ILicensedClassManager * This,
    /* [in] */ IRequireClasses *pirc);


void __RPC_STUB ILicensedClassManager_OnChangeInRequiredClasses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILicensedClassManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objext_0266 */
/* [local] */ 

#define SID_SLicensedClassManager IID_ILicensedClassManager


extern RPC_IF_HANDLE __MIDL_itf_objext_0266_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objext_0266_v0_0_s_ifspec;

#ifndef __IExtendedTypeLib_INTERFACE_DEFINED__
#define __IExtendedTypeLib_INTERFACE_DEFINED__

/* interface IExtendedTypeLib */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IExtendedTypeLib;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d5140d6-7436-11ce-8034-00aa006009fa")
    IExtendedTypeLib : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateExtendedTypeLib( 
            /* [in] */ LPCOLESTR lpstrCtrlLibFileName,
            /* [in] */ LPCOLESTR lpstrLibNamePrepend,
            /* [in] */ ITypeInfo *ptinfoExtender,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCOLESTR lpstrDirectoryName,
            /* [out] */ ITypeLib **pptLib) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddRefExtendedTypeLib( 
            /* [in] */ LPCOLESTR lpstrCtrlLibFileName,
            /* [in] */ LPCOLESTR lpstrLibNamePrepend,
            /* [in] */ ITypeInfo *ptinfoExtender,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCOLESTR lpstrDirectoryName,
            /* [out] */ ITypeLib **pptLib) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddRefExtendedTypeLibOfClsid( 
            /* [in] */ REFCLSID rclsidControl,
            /* [in] */ LPCOLESTR lpstrLibNamePrepend,
            /* [in] */ ITypeInfo *ptinfoExtender,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCOLESTR lpstrDirectoryName,
            /* [out] */ ITypeInfo **pptinfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExtenderInfo( 
            /* [in] */ LPCOLESTR lpstrDirectoryName,
            /* [in] */ ITypeInfo *ptinfoExtender,
            /* [in] */ DWORD dwReserved) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtendedTypeLibVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtendedTypeLib * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtendedTypeLib * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtendedTypeLib * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateExtendedTypeLib )( 
            IExtendedTypeLib * This,
            /* [in] */ LPCOLESTR lpstrCtrlLibFileName,
            /* [in] */ LPCOLESTR lpstrLibNamePrepend,
            /* [in] */ ITypeInfo *ptinfoExtender,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCOLESTR lpstrDirectoryName,
            /* [out] */ ITypeLib **pptLib);
        
        HRESULT ( STDMETHODCALLTYPE *AddRefExtendedTypeLib )( 
            IExtendedTypeLib * This,
            /* [in] */ LPCOLESTR lpstrCtrlLibFileName,
            /* [in] */ LPCOLESTR lpstrLibNamePrepend,
            /* [in] */ ITypeInfo *ptinfoExtender,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCOLESTR lpstrDirectoryName,
            /* [out] */ ITypeLib **pptLib);
        
        HRESULT ( STDMETHODCALLTYPE *AddRefExtendedTypeLibOfClsid )( 
            IExtendedTypeLib * This,
            /* [in] */ REFCLSID rclsidControl,
            /* [in] */ LPCOLESTR lpstrLibNamePrepend,
            /* [in] */ ITypeInfo *ptinfoExtender,
            /* [in] */ DWORD dwReserved,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCOLESTR lpstrDirectoryName,
            /* [out] */ ITypeInfo **pptinfo);
        
        HRESULT ( STDMETHODCALLTYPE *SetExtenderInfo )( 
            IExtendedTypeLib * This,
            /* [in] */ LPCOLESTR lpstrDirectoryName,
            /* [in] */ ITypeInfo *ptinfoExtender,
            /* [in] */ DWORD dwReserved);
        
        END_INTERFACE
    } IExtendedTypeLibVtbl;

    interface IExtendedTypeLib
    {
        CONST_VTBL struct IExtendedTypeLibVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtendedTypeLib_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtendedTypeLib_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtendedTypeLib_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtendedTypeLib_CreateExtendedTypeLib(This,lpstrCtrlLibFileName,lpstrLibNamePrepend,ptinfoExtender,dwReserved,dwFlags,lpstrDirectoryName,pptLib)	\
    (This)->lpVtbl -> CreateExtendedTypeLib(This,lpstrCtrlLibFileName,lpstrLibNamePrepend,ptinfoExtender,dwReserved,dwFlags,lpstrDirectoryName,pptLib)

#define IExtendedTypeLib_AddRefExtendedTypeLib(This,lpstrCtrlLibFileName,lpstrLibNamePrepend,ptinfoExtender,dwReserved,dwFlags,lpstrDirectoryName,pptLib)	\
    (This)->lpVtbl -> AddRefExtendedTypeLib(This,lpstrCtrlLibFileName,lpstrLibNamePrepend,ptinfoExtender,dwReserved,dwFlags,lpstrDirectoryName,pptLib)

#define IExtendedTypeLib_AddRefExtendedTypeLibOfClsid(This,rclsidControl,lpstrLibNamePrepend,ptinfoExtender,dwReserved,dwFlags,lpstrDirectoryName,pptinfo)	\
    (This)->lpVtbl -> AddRefExtendedTypeLibOfClsid(This,rclsidControl,lpstrLibNamePrepend,ptinfoExtender,dwReserved,dwFlags,lpstrDirectoryName,pptinfo)

#define IExtendedTypeLib_SetExtenderInfo(This,lpstrDirectoryName,ptinfoExtender,dwReserved)	\
    (This)->lpVtbl -> SetExtenderInfo(This,lpstrDirectoryName,ptinfoExtender,dwReserved)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IExtendedTypeLib_CreateExtendedTypeLib_Proxy( 
    IExtendedTypeLib * This,
    /* [in] */ LPCOLESTR lpstrCtrlLibFileName,
    /* [in] */ LPCOLESTR lpstrLibNamePrepend,
    /* [in] */ ITypeInfo *ptinfoExtender,
    /* [in] */ DWORD dwReserved,
    /* [in] */ DWORD dwFlags,
    /* [in] */ LPCOLESTR lpstrDirectoryName,
    /* [out] */ ITypeLib **pptLib);


void __RPC_STUB IExtendedTypeLib_CreateExtendedTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IExtendedTypeLib_AddRefExtendedTypeLib_Proxy( 
    IExtendedTypeLib * This,
    /* [in] */ LPCOLESTR lpstrCtrlLibFileName,
    /* [in] */ LPCOLESTR lpstrLibNamePrepend,
    /* [in] */ ITypeInfo *ptinfoExtender,
    /* [in] */ DWORD dwReserved,
    /* [in] */ DWORD dwFlags,
    /* [in] */ LPCOLESTR lpstrDirectoryName,
    /* [out] */ ITypeLib **pptLib);


void __RPC_STUB IExtendedTypeLib_AddRefExtendedTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IExtendedTypeLib_AddRefExtendedTypeLibOfClsid_Proxy( 
    IExtendedTypeLib * This,
    /* [in] */ REFCLSID rclsidControl,
    /* [in] */ LPCOLESTR lpstrLibNamePrepend,
    /* [in] */ ITypeInfo *ptinfoExtender,
    /* [in] */ DWORD dwReserved,
    /* [in] */ DWORD dwFlags,
    /* [in] */ LPCOLESTR lpstrDirectoryName,
    /* [out] */ ITypeInfo **pptinfo);


void __RPC_STUB IExtendedTypeLib_AddRefExtendedTypeLibOfClsid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IExtendedTypeLib_SetExtenderInfo_Proxy( 
    IExtendedTypeLib * This,
    /* [in] */ LPCOLESTR lpstrDirectoryName,
    /* [in] */ ITypeInfo *ptinfoExtender,
    /* [in] */ DWORD dwReserved);


void __RPC_STUB IExtendedTypeLib_SetExtenderInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtendedTypeLib_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objext_0267 */
/* [local] */ 

#define SID_SExtendedTypeLib IID_IExtendedTypeLib


extern RPC_IF_HANDLE __MIDL_itf_objext_0267_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objext_0267_v0_0_s_ifspec;

#ifndef __ILocalRegistry_INTERFACE_DEFINED__
#define __ILocalRegistry_INTERFACE_DEFINED__

/* interface ILocalRegistry */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ILocalRegistry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d5140d3-7436-11ce-8034-00aa006009fa")
    ILocalRegistry : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
            /* [in] */ CLSID clsid,
            /* [in] */ IUnknown *punkOuter,
            /* [in] */ REFIID riid,
            /* [in] */ DWORD dwFlags,
            /* [out] */ void **ppvObj) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeLibOfClsid( 
            /* [in] */ CLSID clsid,
            /* [out] */ ITypeLib **pptlib) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClassObjectOfClsid( 
            /* [in] */ REFCLSID clsid,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPVOID lpReserved,
            /* [in] */ REFIID riid,
            /* [in] */ void **ppvClassObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILocalRegistryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILocalRegistry * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILocalRegistry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILocalRegistry * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            ILocalRegistry * This,
            /* [in] */ CLSID clsid,
            /* [in] */ IUnknown *punkOuter,
            /* [in] */ REFIID riid,
            /* [in] */ DWORD dwFlags,
            /* [out] */ void **ppvObj);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeLibOfClsid )( 
            ILocalRegistry * This,
            /* [in] */ CLSID clsid,
            /* [out] */ ITypeLib **pptlib);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassObjectOfClsid )( 
            ILocalRegistry * This,
            /* [in] */ REFCLSID clsid,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPVOID lpReserved,
            /* [in] */ REFIID riid,
            /* [in] */ void **ppvClassObject);
        
        END_INTERFACE
    } ILocalRegistryVtbl;

    interface ILocalRegistry
    {
        CONST_VTBL struct ILocalRegistryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILocalRegistry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILocalRegistry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILocalRegistry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILocalRegistry_CreateInstance(This,clsid,punkOuter,riid,dwFlags,ppvObj)	\
    (This)->lpVtbl -> CreateInstance(This,clsid,punkOuter,riid,dwFlags,ppvObj)

#define ILocalRegistry_GetTypeLibOfClsid(This,clsid,pptlib)	\
    (This)->lpVtbl -> GetTypeLibOfClsid(This,clsid,pptlib)

#define ILocalRegistry_GetClassObjectOfClsid(This,clsid,dwFlags,lpReserved,riid,ppvClassObject)	\
    (This)->lpVtbl -> GetClassObjectOfClsid(This,clsid,dwFlags,lpReserved,riid,ppvClassObject)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ILocalRegistry_CreateInstance_Proxy( 
    ILocalRegistry * This,
    /* [in] */ CLSID clsid,
    /* [in] */ IUnknown *punkOuter,
    /* [in] */ REFIID riid,
    /* [in] */ DWORD dwFlags,
    /* [out] */ void **ppvObj);


void __RPC_STUB ILocalRegistry_CreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILocalRegistry_GetTypeLibOfClsid_Proxy( 
    ILocalRegistry * This,
    /* [in] */ CLSID clsid,
    /* [out] */ ITypeLib **pptlib);


void __RPC_STUB ILocalRegistry_GetTypeLibOfClsid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILocalRegistry_GetClassObjectOfClsid_Proxy( 
    ILocalRegistry * This,
    /* [in] */ REFCLSID clsid,
    /* [in] */ DWORD dwFlags,
    /* [in] */ LPVOID lpReserved,
    /* [in] */ REFIID riid,
    /* [in] */ void **ppvClassObject);


void __RPC_STUB ILocalRegistry_GetClassObjectOfClsid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILocalRegistry_INTERFACE_DEFINED__ */


#ifndef __ILocalRegistry2_INTERFACE_DEFINED__
#define __ILocalRegistry2_INTERFACE_DEFINED__

/* interface ILocalRegistry2 */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ILocalRegistry2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("77BB19B0-0462-11d1-AAF6-00A0C9055A90")
    ILocalRegistry2 : public ILocalRegistry
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLocalRegistryRoot( 
            /* [out] */ BSTR *pbstrRoot) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILocalRegistry2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILocalRegistry2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILocalRegistry2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILocalRegistry2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            ILocalRegistry2 * This,
            /* [in] */ CLSID clsid,
            /* [in] */ IUnknown *punkOuter,
            /* [in] */ REFIID riid,
            /* [in] */ DWORD dwFlags,
            /* [out] */ void **ppvObj);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeLibOfClsid )( 
            ILocalRegistry2 * This,
            /* [in] */ CLSID clsid,
            /* [out] */ ITypeLib **pptlib);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassObjectOfClsid )( 
            ILocalRegistry2 * This,
            /* [in] */ REFCLSID clsid,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPVOID lpReserved,
            /* [in] */ REFIID riid,
            /* [in] */ void **ppvClassObject);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalRegistryRoot )( 
            ILocalRegistry2 * This,
            /* [out] */ BSTR *pbstrRoot);
        
        END_INTERFACE
    } ILocalRegistry2Vtbl;

    interface ILocalRegistry2
    {
        CONST_VTBL struct ILocalRegistry2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILocalRegistry2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILocalRegistry2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILocalRegistry2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILocalRegistry2_CreateInstance(This,clsid,punkOuter,riid,dwFlags,ppvObj)	\
    (This)->lpVtbl -> CreateInstance(This,clsid,punkOuter,riid,dwFlags,ppvObj)

#define ILocalRegistry2_GetTypeLibOfClsid(This,clsid,pptlib)	\
    (This)->lpVtbl -> GetTypeLibOfClsid(This,clsid,pptlib)

#define ILocalRegistry2_GetClassObjectOfClsid(This,clsid,dwFlags,lpReserved,riid,ppvClassObject)	\
    (This)->lpVtbl -> GetClassObjectOfClsid(This,clsid,dwFlags,lpReserved,riid,ppvClassObject)


#define ILocalRegistry2_GetLocalRegistryRoot(This,pbstrRoot)	\
    (This)->lpVtbl -> GetLocalRegistryRoot(This,pbstrRoot)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ILocalRegistry2_GetLocalRegistryRoot_Proxy( 
    ILocalRegistry2 * This,
    /* [out] */ BSTR *pbstrRoot);


void __RPC_STUB ILocalRegistry2_GetLocalRegistryRoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILocalRegistry2_INTERFACE_DEFINED__ */


#ifndef __ILocalRegistry3_INTERFACE_DEFINED__
#define __ILocalRegistry3_INTERFACE_DEFINED__

/* interface ILocalRegistry3 */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ILocalRegistry3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1B01F13F-ABEE-4761-91AF-76CE6B4C9E7A")
    ILocalRegistry3 : public ILocalRegistry2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateManagedInstance( 
            /* [in] */ LPCWSTR codeBase,
            /* [in] */ LPCWSTR assemblyName,
            /* [in] */ LPCWSTR typeName,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppvObj) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClassObjectOfManagedClass( 
            /* [in] */ LPCWSTR codeBase,
            /* [in] */ LPCWSTR assemblyName,
            /* [in] */ LPCWSTR typeName,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppvClassObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILocalRegistry3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ILocalRegistry3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ILocalRegistry3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ILocalRegistry3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            ILocalRegistry3 * This,
            /* [in] */ CLSID clsid,
            /* [in] */ IUnknown *punkOuter,
            /* [in] */ REFIID riid,
            /* [in] */ DWORD dwFlags,
            /* [out] */ void **ppvObj);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeLibOfClsid )( 
            ILocalRegistry3 * This,
            /* [in] */ CLSID clsid,
            /* [out] */ ITypeLib **pptlib);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassObjectOfClsid )( 
            ILocalRegistry3 * This,
            /* [in] */ REFCLSID clsid,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPVOID lpReserved,
            /* [in] */ REFIID riid,
            /* [in] */ void **ppvClassObject);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalRegistryRoot )( 
            ILocalRegistry3 * This,
            /* [out] */ BSTR *pbstrRoot);
        
        HRESULT ( STDMETHODCALLTYPE *CreateManagedInstance )( 
            ILocalRegistry3 * This,
            /* [in] */ LPCWSTR codeBase,
            /* [in] */ LPCWSTR assemblyName,
            /* [in] */ LPCWSTR typeName,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppvObj);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassObjectOfManagedClass )( 
            ILocalRegistry3 * This,
            /* [in] */ LPCWSTR codeBase,
            /* [in] */ LPCWSTR assemblyName,
            /* [in] */ LPCWSTR typeName,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppvClassObject);
        
        END_INTERFACE
    } ILocalRegistry3Vtbl;

    interface ILocalRegistry3
    {
        CONST_VTBL struct ILocalRegistry3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILocalRegistry3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILocalRegistry3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILocalRegistry3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILocalRegistry3_CreateInstance(This,clsid,punkOuter,riid,dwFlags,ppvObj)	\
    (This)->lpVtbl -> CreateInstance(This,clsid,punkOuter,riid,dwFlags,ppvObj)

#define ILocalRegistry3_GetTypeLibOfClsid(This,clsid,pptlib)	\
    (This)->lpVtbl -> GetTypeLibOfClsid(This,clsid,pptlib)

#define ILocalRegistry3_GetClassObjectOfClsid(This,clsid,dwFlags,lpReserved,riid,ppvClassObject)	\
    (This)->lpVtbl -> GetClassObjectOfClsid(This,clsid,dwFlags,lpReserved,riid,ppvClassObject)


#define ILocalRegistry3_GetLocalRegistryRoot(This,pbstrRoot)	\
    (This)->lpVtbl -> GetLocalRegistryRoot(This,pbstrRoot)


#define ILocalRegistry3_CreateManagedInstance(This,codeBase,assemblyName,typeName,riid,ppvObj)	\
    (This)->lpVtbl -> CreateManagedInstance(This,codeBase,assemblyName,typeName,riid,ppvObj)

#define ILocalRegistry3_GetClassObjectOfManagedClass(This,codeBase,assemblyName,typeName,riid,ppvClassObject)	\
    (This)->lpVtbl -> GetClassObjectOfManagedClass(This,codeBase,assemblyName,typeName,riid,ppvClassObject)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ILocalRegistry3_CreateManagedInstance_Proxy( 
    ILocalRegistry3 * This,
    /* [in] */ LPCWSTR codeBase,
    /* [in] */ LPCWSTR assemblyName,
    /* [in] */ LPCWSTR typeName,
    /* [in] */ REFIID riid,
    /* [out] */ void **ppvObj);


void __RPC_STUB ILocalRegistry3_CreateManagedInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ILocalRegistry3_GetClassObjectOfManagedClass_Proxy( 
    ILocalRegistry3 * This,
    /* [in] */ LPCWSTR codeBase,
    /* [in] */ LPCWSTR assemblyName,
    /* [in] */ LPCWSTR typeName,
    /* [in] */ REFIID riid,
    /* [out] */ void **ppvClassObject);


void __RPC_STUB ILocalRegistry3_GetClassObjectOfManagedClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILocalRegistry3_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objext_0270 */
/* [local] */ 

#define SID_SLocalRegistry IID_ILocalRegistry


extern RPC_IF_HANDLE __MIDL_itf_objext_0270_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objext_0270_v0_0_s_ifspec;

#ifndef __IUIElement_INTERFACE_DEFINED__
#define __IUIElement_INTERFACE_DEFINED__

/* interface IUIElement */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IUIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("759d0500-d979-11ce-84ec-00aa00614f3e")
    IUIElement : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Show( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Hide( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsVisible( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IUIElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IUIElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IUIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *Show )( 
            IUIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *Hide )( 
            IUIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsVisible )( 
            IUIElement * This);
        
        END_INTERFACE
    } IUIElementVtbl;

    interface IUIElement
    {
        CONST_VTBL struct IUIElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUIElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IUIElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IUIElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IUIElement_Show(This)	\
    (This)->lpVtbl -> Show(This)

#define IUIElement_Hide(This)	\
    (This)->lpVtbl -> Hide(This)

#define IUIElement_IsVisible(This)	\
    (This)->lpVtbl -> IsVisible(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IUIElement_Show_Proxy( 
    IUIElement * This);


void __RPC_STUB IUIElement_Show_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IUIElement_Hide_Proxy( 
    IUIElement * This);


void __RPC_STUB IUIElement_Hide_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IUIElement_IsVisible_Proxy( 
    IUIElement * This);


void __RPC_STUB IUIElement_IsVisible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IUIElement_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objext_0271 */
/* [local] */ 

typedef int PROPCAT;



extern RPC_IF_HANDLE __MIDL_itf_objext_0271_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objext_0271_v0_0_s_ifspec;

#ifndef __ICategorizeProperties_INTERFACE_DEFINED__
#define __ICategorizeProperties_INTERFACE_DEFINED__

/* interface ICategorizeProperties */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ICategorizeProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4D07FC10-F931-11ce-B001-00AA006884E5")
    ICategorizeProperties : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MapPropertyToCategory( 
            /* [in] */ DISPID dispid,
            /* [out] */ PROPCAT *ppropcat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCategoryName( 
            /* [in] */ PROPCAT propcat,
            /* [in] */ LCID lcid,
            /* [out] */ BSTR *pbstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICategorizePropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICategorizeProperties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICategorizeProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICategorizeProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *MapPropertyToCategory )( 
            ICategorizeProperties * This,
            /* [in] */ DISPID dispid,
            /* [out] */ PROPCAT *ppropcat);
        
        HRESULT ( STDMETHODCALLTYPE *GetCategoryName )( 
            ICategorizeProperties * This,
            /* [in] */ PROPCAT propcat,
            /* [in] */ LCID lcid,
            /* [out] */ BSTR *pbstrName);
        
        END_INTERFACE
    } ICategorizePropertiesVtbl;

    interface ICategorizeProperties
    {
        CONST_VTBL struct ICategorizePropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICategorizeProperties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICategorizeProperties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICategorizeProperties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICategorizeProperties_MapPropertyToCategory(This,dispid,ppropcat)	\
    (This)->lpVtbl -> MapPropertyToCategory(This,dispid,ppropcat)

#define ICategorizeProperties_GetCategoryName(This,propcat,lcid,pbstrName)	\
    (This)->lpVtbl -> GetCategoryName(This,propcat,lcid,pbstrName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ICategorizeProperties_MapPropertyToCategory_Proxy( 
    ICategorizeProperties * This,
    /* [in] */ DISPID dispid,
    /* [out] */ PROPCAT *ppropcat);


void __RPC_STUB ICategorizeProperties_MapPropertyToCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ICategorizeProperties_GetCategoryName_Proxy( 
    ICategorizeProperties * This,
    /* [in] */ PROPCAT propcat,
    /* [in] */ LCID lcid,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB ICategorizeProperties_GetCategoryName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICategorizeProperties_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objext_0272 */
/* [local] */ 

typedef ICategorizeProperties *LPCATEGORIZEPROPERTIES;

#define PROPCAT_Nil -1
#define PROPCAT_Misc -2
#define PROPCAT_Font -3
#define PROPCAT_Position -4
#define PROPCAT_Appearance -5
#define PROPCAT_Behavior -6
#define PROPCAT_Data -7
#define PROPCAT_List -8
#define PROPCAT_Text -9
#define PROPCAT_Scale -10
#define PROPCAT_DDE -11
#define HELPINFO_WHATS_THIS_MODE_ON     1


extern RPC_IF_HANDLE __MIDL_itf_objext_0272_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objext_0272_v0_0_s_ifspec;

#ifndef __IHelp_INTERFACE_DEFINED__
#define __IHelp_INTERFACE_DEFINED__

/* interface IHelp */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IHelp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d5140c8-7436-11ce-8034-00aa006009fa")
    IHelp : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetHelpFile( 
            /* [out] */ BSTR *pbstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHelpInfo( 
            /* [out] */ DWORD *pdwHelpInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShowHelp( 
            /* [in] */ LPOLESTR szHelp,
            /* [in] */ UINT fuCommand,
            /* [in] */ DWORD dwHelpContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHelpVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHelp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHelp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHelp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetHelpFile )( 
            IHelp * This,
            /* [out] */ BSTR *pbstr);
        
        HRESULT ( STDMETHODCALLTYPE *GetHelpInfo )( 
            IHelp * This,
            /* [out] */ DWORD *pdwHelpInfo);
        
        HRESULT ( STDMETHODCALLTYPE *ShowHelp )( 
            IHelp * This,
            /* [in] */ LPOLESTR szHelp,
            /* [in] */ UINT fuCommand,
            /* [in] */ DWORD dwHelpContext);
        
        END_INTERFACE
    } IHelpVtbl;

    interface IHelp
    {
        CONST_VTBL struct IHelpVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHelp_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHelp_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHelp_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHelp_GetHelpFile(This,pbstr)	\
    (This)->lpVtbl -> GetHelpFile(This,pbstr)

#define IHelp_GetHelpInfo(This,pdwHelpInfo)	\
    (This)->lpVtbl -> GetHelpInfo(This,pdwHelpInfo)

#define IHelp_ShowHelp(This,szHelp,fuCommand,dwHelpContext)	\
    (This)->lpVtbl -> ShowHelp(This,szHelp,fuCommand,dwHelpContext)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IHelp_GetHelpFile_Proxy( 
    IHelp * This,
    /* [out] */ BSTR *pbstr);


void __RPC_STUB IHelp_GetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IHelp_GetHelpInfo_Proxy( 
    IHelp * This,
    /* [out] */ DWORD *pdwHelpInfo);


void __RPC_STUB IHelp_GetHelpInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IHelp_ShowHelp_Proxy( 
    IHelp * This,
    /* [in] */ LPOLESTR szHelp,
    /* [in] */ UINT fuCommand,
    /* [in] */ DWORD dwHelpContext);


void __RPC_STUB IHelp_ShowHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHelp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_objext_0273 */
/* [local] */ 

EXTERN_C const IID SID_SHelp;
#endif


extern RPC_IF_HANDLE __MIDL_itf_objext_0273_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objext_0273_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\ocdesign.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:43:40 2002
 */
/* Compiler settings for ocdesign.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __ocdesign_h__
#define __ocdesign_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IBuilderWizardManager_FWD_DEFINED__
#define __IBuilderWizardManager_FWD_DEFINED__
typedef interface IBuilderWizardManager IBuilderWizardManager;
#endif 	/* __IBuilderWizardManager_FWD_DEFINED__ */


#ifndef __IProvidePropertyBuilder_FWD_DEFINED__
#define __IProvidePropertyBuilder_FWD_DEFINED__
typedef interface IProvidePropertyBuilder IProvidePropertyBuilder;
#endif 	/* __IProvidePropertyBuilder_FWD_DEFINED__ */


#ifndef __IPerPropertyBrowsing2_FWD_DEFINED__
#define __IPerPropertyBrowsing2_FWD_DEFINED__
typedef interface IPerPropertyBrowsing2 IPerPropertyBrowsing2;
#endif 	/* __IPerPropertyBrowsing2_FWD_DEFINED__ */


#ifndef __IPropertyPageUndoString_FWD_DEFINED__
#define __IPropertyPageUndoString_FWD_DEFINED__
typedef interface IPropertyPageUndoString IPropertyPageUndoString;
#endif 	/* __IPropertyPageUndoString_FWD_DEFINED__ */


#ifndef __IProvideRuntimeHTML_FWD_DEFINED__
#define __IProvideRuntimeHTML_FWD_DEFINED__
typedef interface IProvideRuntimeHTML IProvideRuntimeHTML;
#endif 	/* __IProvideRuntimeHTML_FWD_DEFINED__ */


#ifndef __IProvideAltHTML_FWD_DEFINED__
#define __IProvideAltHTML_FWD_DEFINED__
typedef interface IProvideAltHTML IProvideAltHTML;
#endif 	/* __IProvideAltHTML_FWD_DEFINED__ */


#ifndef __IBuilderWizardManager_FWD_DEFINED__
#define __IBuilderWizardManager_FWD_DEFINED__
typedef interface IBuilderWizardManager IBuilderWizardManager;
#endif 	/* __IBuilderWizardManager_FWD_DEFINED__ */


#ifndef __IProvidePropertyBuilder_FWD_DEFINED__
#define __IProvidePropertyBuilder_FWD_DEFINED__
typedef interface IProvidePropertyBuilder IProvidePropertyBuilder;
#endif 	/* __IProvidePropertyBuilder_FWD_DEFINED__ */


#ifndef __IPerPropertyBrowsing2_FWD_DEFINED__
#define __IPerPropertyBrowsing2_FWD_DEFINED__
typedef interface IPerPropertyBrowsing2 IPerPropertyBrowsing2;
#endif 	/* __IPerPropertyBrowsing2_FWD_DEFINED__ */


#ifndef __IPropertyPageUndoString_FWD_DEFINED__
#define __IPropertyPageUndoString_FWD_DEFINED__
typedef interface IPropertyPageUndoString IPropertyPageUndoString;
#endif 	/* __IPropertyPageUndoString_FWD_DEFINED__ */


#ifndef __IProvideRuntimeHTML_FWD_DEFINED__
#define __IProvideRuntimeHTML_FWD_DEFINED__
typedef interface IProvideRuntimeHTML IProvideRuntimeHTML;
#endif 	/* __IProvideRuntimeHTML_FWD_DEFINED__ */


#ifndef __IProvideAltHTML_FWD_DEFINED__
#define __IProvideAltHTML_FWD_DEFINED__
typedef interface IProvideAltHTML IProvideAltHTML;
#endif 	/* __IProvideAltHTML_FWD_DEFINED__ */


#ifndef __BuilderWizardManager_FWD_DEFINED__
#define __BuilderWizardManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class BuilderWizardManager BuilderWizardManager;
#else
typedef struct BuilderWizardManager BuilderWizardManager;
#endif /* __cplusplus */

#endif 	/* __BuilderWizardManager_FWD_DEFINED__ */


/* header files for imported files */
#include "oleidl.h"
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_ocdesign_0000 */
/* [local] */ 








DEFINE_GUID(IID_IUseImmediateCommitPropertyPages, 0xfd6feba0, 0x24ac, 0x11d1, 0xab, 0x1b, 0x0, 0xa0, 0xc9, 0x5, 0x5a, 0x90);
DEFINE_GUID(CATID_HTMLBuilder, 0x73cef3d4, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(CATID_ObjectBuilder, 0x73cef3d5, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(CATID_PropertyBuilder, 0x73cef3d6, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(CATID_URLBuilder, 0x73cef3d9, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(CATID_ColorBuilder, 0x73cef3da, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(CATID_FontBuilder, 0x73cef3db, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(CATID_ActiveXControlBuilder, 0x73cef3de, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(CATID_ScriptBuilder, 0x73cef3df, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(CATID_PictureBuilder, 0x73cef3e0, 0xae85, 0x11cf, 0xa4, 0x6, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(SID_SBuilderWizardManager, 0x95fc88c2, 0x9fcb, 0x11cf, 0xa4, 0x5, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(SID_IBuilderWizardManager, 0x95fc88c2, 0x9fcb, 0x11cf, 0xa4, 0x5, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
typedef 
enum tagBLDPROMPTOPT
    {	BLDPROMPTOPT_PROMPTIFMULTIPLE	= 0,
	BLDPROMPTOPT_PROMPTALWAYS	= 1,
	BLDPROMPTOPT_PROMPTNEVER	= 2
    } 	BLDPROMPTOPT;

typedef 
enum tagBLDGETOPT
    {	BLDGETOPT_FAUTOMAPGUID	= 0x1,
	BLDGETOPT_FAUTOMAPENABLEPROMPT	= 0x2,
	BLDGETOPT_FAUTOMAPPROMPTALWAYS	= 0x4,
	BLDGETOPT_FOBJECTBUILDER	= 0x8,
	BLDGETOPT_FNOINTRINSICS	= 0x80000000
    } 	BLDGETFLAGS;



extern RPC_IF_HANDLE __MIDL_itf_ocdesign_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocdesign_0000_v0_0_s_ifspec;

#ifndef __IBuilderWizardManager_INTERFACE_DEFINED__
#define __IBuilderWizardManager_INTERFACE_DEFINED__

/* interface IBuilderWizardManager */
/* [unique][version][uuid][object] */ 


EXTERN_C const IID IID_IBuilderWizardManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("95FC88C3-9FCB-11cf-A405-00AA00C00940")
    IBuilderWizardManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DoesBuilderExist( 
            /* [in] */ REFGUID rguidBuilder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MapObjectToBuilderCLSID( 
            /* [in] */ REFCLSID rclsidObject,
            /* [in] */ DWORD dwPromptOpt,
            /* [in] */ HWND hwndPromptOwner,
            /* [out] */ CLSID *pclsidBuilder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MapBuilderCATIDToCLSID( 
            /* [in] */ REFGUID rguidBuilder,
            /* [in] */ DWORD dwPromptOpt,
            /* [in] */ HWND hwndPromptOwner,
            /* [out] */ CLSID *pclsidBuilder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBuilder( 
            /* [in] */ REFGUID rguidBuilder,
            /* [in] */ DWORD grfGetOpt,
            /* [in] */ HWND hwndPromptOwner,
            /* [out] */ IDispatch **ppdispApp,
            /* [out] */ HWND *pwndBuilderOwner,
            /* [in] */ REFIID riidBuilder,
            /* [out] */ IUnknown **ppunkBuilder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnableModeless( 
            /* [in] */ BOOL fEnable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBuilderWizardManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBuilderWizardManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBuilderWizardManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBuilderWizardManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *DoesBuilderExist )( 
            IBuilderWizardManager * This,
            /* [in] */ REFGUID rguidBuilder);
        
        HRESULT ( STDMETHODCALLTYPE *MapObjectToBuilderCLSID )( 
            IBuilderWizardManager * This,
            /* [in] */ REFCLSID rclsidObject,
            /* [in] */ DWORD dwPromptOpt,
            /* [in] */ HWND hwndPromptOwner,
            /* [out] */ CLSID *pclsidBuilder);
        
        HRESULT ( STDMETHODCALLTYPE *MapBuilderCATIDToCLSID )( 
            IBuilderWizardManager * This,
            /* [in] */ REFGUID rguidBuilder,
            /* [in] */ DWORD dwPromptOpt,
            /* [in] */ HWND hwndPromptOwner,
            /* [out] */ CLSID *pclsidBuilder);
        
        HRESULT ( STDMETHODCALLTYPE *GetBuilder )( 
            IBuilderWizardManager * This,
            /* [in] */ REFGUID rguidBuilder,
            /* [in] */ DWORD grfGetOpt,
            /* [in] */ HWND hwndPromptOwner,
            /* [out] */ IDispatch **ppdispApp,
            /* [out] */ HWND *pwndBuilderOwner,
            /* [in] */ REFIID riidBuilder,
            /* [out] */ IUnknown **ppunkBuilder);
        
        HRESULT ( STDMETHODCALLTYPE *EnableModeless )( 
            IBuilderWizardManager * This,
            /* [in] */ BOOL fEnable);
        
        END_INTERFACE
    } IBuilderWizardManagerVtbl;

    interface IBuilderWizardManager
    {
        CONST_VTBL struct IBuilderWizardManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBuilderWizardManager_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IBuilderWizardManager_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IBuilderWizardManager_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IBuilderWizardManager_DoesBuilderExist(This,rguidBuilder)	\
    (This)->lpVtbl -> DoesBuilderExist(This,rguidBuilder)

#define IBuilderWizardManager_MapObjectToBuilderCLSID(This,rclsidObject,dwPromptOpt,hwndPromptOwner,pclsidBuilder)	\
    (This)->lpVtbl -> MapObjectToBuilderCLSID(This,rclsidObject,dwPromptOpt,hwndPromptOwner,pclsidBuilder)

#define IBuilderWizardManager_MapBuilderCATIDToCLSID(This,rguidBuilder,dwPromptOpt,hwndPromptOwner,pclsidBuilder)	\
    (This)->lpVtbl -> MapBuilderCATIDToCLSID(This,rguidBuilder,dwPromptOpt,hwndPromptOwner,pclsidBuilder)

#define IBuilderWizardManager_GetBuilder(This,rguidBuilder,grfGetOpt,hwndPromptOwner,ppdispApp,pwndBuilderOwner,riidBuilder,ppunkBuilder)	\
    (This)->lpVtbl -> GetBuilder(This,rguidBuilder,grfGetOpt,hwndPromptOwner,ppdispApp,pwndBuilderOwner,riidBuilder,ppunkBuilder)

#define IBuilderWizardManager_EnableModeless(This,fEnable)	\
    (This)->lpVtbl -> EnableModeless(This,fEnable)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IBuilderWizardManager_DoesBuilderExist_Proxy( 
    IBuilderWizardManager * This,
    /* [in] */ REFGUID rguidBuilder);


void __RPC_STUB IBuilderWizardManager_DoesBuilderExist_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBuilderWizardManager_MapObjectToBuilderCLSID_Proxy( 
    IBuilderWizardManager * This,
    /* [in] */ REFCLSID rclsidObject,
    /* [in] */ DWORD dwPromptOpt,
    /* [in] */ HWND hwndPromptOwner,
    /* [out] */ CLSID *pclsidBuilder);


void __RPC_STUB IBuilderWizardManager_MapObjectToBuilderCLSID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBuilderWizardManager_MapBuilderCATIDToCLSID_Proxy( 
    IBuilderWizardManager * This,
    /* [in] */ REFGUID rguidBuilder,
    /* [in] */ DWORD dwPromptOpt,
    /* [in] */ HWND hwndPromptOwner,
    /* [out] */ CLSID *pclsidBuilder);


void __RPC_STUB IBuilderWizardManager_MapBuilderCATIDToCLSID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBuilderWizardManager_GetBuilder_Proxy( 
    IBuilderWizardManager * This,
    /* [in] */ REFGUID rguidBuilder,
    /* [in] */ DWORD grfGetOpt,
    /* [in] */ HWND hwndPromptOwner,
    /* [out] */ IDispatch **ppdispApp,
    /* [out] */ HWND *pwndBuilderOwner,
    /* [in] */ REFIID riidBuilder,
    /* [out] */ IUnknown **ppunkBuilder);


void __RPC_STUB IBuilderWizardManager_GetBuilder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IBuilderWizardManager_EnableModeless_Proxy( 
    IBuilderWizardManager * This,
    /* [in] */ BOOL fEnable);


void __RPC_STUB IBuilderWizardManager_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBuilderWizardManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_ocdesign_0253 */
/* [local] */ 

typedef 
enum tagCTLBLDTYPE
    {	CTLBLDTYPE_FSTDPROPBUILDER	= 0x1,
	CTLBLDTYPE_FINTERNALBUILDER	= 0x2,
	CTLBLDTYPE_FEDITSOBJDIRECTLY	= 0x4
    } 	CTLBLDTYPE;



extern RPC_IF_HANDLE __MIDL_itf_ocdesign_0253_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocdesign_0253_v0_0_s_ifspec;

#ifndef __IProvidePropertyBuilder_INTERFACE_DEFINED__
#define __IProvidePropertyBuilder_INTERFACE_DEFINED__

/* interface IProvidePropertyBuilder */
/* [object][unique][version][uuid] */ 


EXTERN_C const IID IID_IProvidePropertyBuilder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33C0C1D8-33CF-11d3-BFF2-00C04F990235")
    IProvidePropertyBuilder : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MapPropertyToBuilder( 
            /* [in] */ LONG dispid,
            /* [out][in] */ LONG *pdwCtlBldType,
            /* [out][in] */ BSTR *pbstrGuidBldr,
            /* [retval][out] */ VARIANT_BOOL *pfRetVal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExecuteBuilder( 
            /* [in] */ LONG dispid,
            /* [in] */ BSTR bstrGuidBldr,
            /* [in] */ IDispatch *pdispApp,
            /* [in] */ LONG_PTR hwndBldrOwner,
            /* [out][in] */ VARIANT *pvarValue,
            /* [retval][out] */ VARIANT_BOOL *pfRetVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvidePropertyBuilderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProvidePropertyBuilder * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProvidePropertyBuilder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProvidePropertyBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *MapPropertyToBuilder )( 
            IProvidePropertyBuilder * This,
            /* [in] */ LONG dispid,
            /* [out][in] */ LONG *pdwCtlBldType,
            /* [out][in] */ BSTR *pbstrGuidBldr,
            /* [retval][out] */ VARIANT_BOOL *pfRetVal);
        
        HRESULT ( STDMETHODCALLTYPE *ExecuteBuilder )( 
            IProvidePropertyBuilder * This,
            /* [in] */ LONG dispid,
            /* [in] */ BSTR bstrGuidBldr,
            /* [in] */ IDispatch *pdispApp,
            /* [in] */ LONG_PTR hwndBldrOwner,
            /* [out][in] */ VARIANT *pvarValue,
            /* [retval][out] */ VARIANT_BOOL *pfRetVal);
        
        END_INTERFACE
    } IProvidePropertyBuilderVtbl;

    interface IProvidePropertyBuilder
    {
        CONST_VTBL struct IProvidePropertyBuilderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvidePropertyBuilder_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProvidePropertyBuilder_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProvidePropertyBuilder_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProvidePropertyBuilder_MapPropertyToBuilder(This,dispid,pdwCtlBldType,pbstrGuidBldr,pfRetVal)	\
    (This)->lpVtbl -> MapPropertyToBuilder(This,dispid,pdwCtlBldType,pbstrGuidBldr,pfRetVal)

#define IProvidePropertyBuilder_ExecuteBuilder(This,dispid,bstrGuidBldr,pdispApp,hwndBldrOwner,pvarValue,pfRetVal)	\
    (This)->lpVtbl -> ExecuteBuilder(This,dispid,bstrGuidBldr,pdispApp,hwndBldrOwner,pvarValue,pfRetVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProvidePropertyBuilder_MapPropertyToBuilder_Proxy( 
    IProvidePropertyBuilder * This,
    /* [in] */ LONG dispid,
    /* [out][in] */ LONG *pdwCtlBldType,
    /* [out][in] */ BSTR *pbstrGuidBldr,
    /* [retval][out] */ VARIANT_BOOL *pfRetVal);


void __RPC_STUB IProvidePropertyBuilder_MapPropertyToBuilder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IProvidePropertyBuilder_ExecuteBuilder_Proxy( 
    IProvidePropertyBuilder * This,
    /* [in] */ LONG dispid,
    /* [in] */ BSTR bstrGuidBldr,
    /* [in] */ IDispatch *pdispApp,
    /* [in] */ LONG_PTR hwndBldrOwner,
    /* [out][in] */ VARIANT *pvarValue,
    /* [retval][out] */ VARIANT_BOOL *pfRetVal);


void __RPC_STUB IProvidePropertyBuilder_ExecuteBuilder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProvidePropertyBuilder_INTERFACE_DEFINED__ */


#ifndef __IPerPropertyBrowsing2_INTERFACE_DEFINED__
#define __IPerPropertyBrowsing2_INTERFACE_DEFINED__

/* interface IPerPropertyBrowsing2 */
/* [object][unique][version][uuid] */ 


EXTERN_C const IID IID_IPerPropertyBrowsing2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33C0C1DA-33CF-11d3-BFF2-00C04F990235")
    IPerPropertyBrowsing2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MapPropertyToBuilder( 
            /* [in] */ DISPID dispid,
            /* [out] */ GUID *pguidBuilder,
            /* [out] */ DWORD *pdwType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExecuteBuilder( 
            /* [in] */ DISPID dispid,
            /* [in] */ REFGUID rguidBuilder,
            /* [in] */ IDispatch *pdispApp,
            /* [in] */ HWND hwndBuilderOwner,
            /* [out][in] */ VARIANT *pvarValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPerPropertyBrowsing2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPerPropertyBrowsing2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPerPropertyBrowsing2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPerPropertyBrowsing2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *MapPropertyToBuilder )( 
            IPerPropertyBrowsing2 * This,
            /* [in] */ DISPID dispid,
            /* [out] */ GUID *pguidBuilder,
            /* [out] */ DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *ExecuteBuilder )( 
            IPerPropertyBrowsing2 * This,
            /* [in] */ DISPID dispid,
            /* [in] */ REFGUID rguidBuilder,
            /* [in] */ IDispatch *pdispApp,
            /* [in] */ HWND hwndBuilderOwner,
            /* [out][in] */ VARIANT *pvarValue);
        
        END_INTERFACE
    } IPerPropertyBrowsing2Vtbl;

    interface IPerPropertyBrowsing2
    {
        CONST_VTBL struct IPerPropertyBrowsing2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPerPropertyBrowsing2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPerPropertyBrowsing2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPerPropertyBrowsing2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPerPropertyBrowsing2_MapPropertyToBuilder(This,dispid,pguidBuilder,pdwType)	\
    (This)->lpVtbl -> MapPropertyToBuilder(This,dispid,pguidBuilder,pdwType)

#define IPerPropertyBrowsing2_ExecuteBuilder(This,dispid,rguidBuilder,pdispApp,hwndBuilderOwner,pvarValue)	\
    (This)->lpVtbl -> ExecuteBuilder(This,dispid,rguidBuilder,pdispApp,hwndBuilderOwner,pvarValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPerPropertyBrowsing2_MapPropertyToBuilder_Proxy( 
    IPerPropertyBrowsing2 * This,
    /* [in] */ DISPID dispid,
    /* [out] */ GUID *pguidBuilder,
    /* [out] */ DWORD *pdwType);


void __RPC_STUB IPerPropertyBrowsing2_MapPropertyToBuilder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPerPropertyBrowsing2_ExecuteBuilder_Proxy( 
    IPerPropertyBrowsing2 * This,
    /* [in] */ DISPID dispid,
    /* [in] */ REFGUID rguidBuilder,
    /* [in] */ IDispatch *pdispApp,
    /* [in] */ HWND hwndBuilderOwner,
    /* [out][in] */ VARIANT *pvarValue);


void __RPC_STUB IPerPropertyBrowsing2_ExecuteBuilder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPerPropertyBrowsing2_INTERFACE_DEFINED__ */


#ifndef __IPropertyPageUndoString_INTERFACE_DEFINED__
#define __IPropertyPageUndoString_INTERFACE_DEFINED__

/* interface IPropertyPageUndoString */
/* [object][unique][version][uuid] */ 


EXTERN_C const IID IID_IPropertyPageUndoString;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33C0C1DB-33CF-11d3-BFF2-00C04F990235")
    IPropertyPageUndoString : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUndoString( 
            /* [out] */ LPOLESTR *ppszUndo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyPageUndoStringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPropertyPageUndoString * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPropertyPageUndoString * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPropertyPageUndoString * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetUndoString )( 
            IPropertyPageUndoString * This,
            /* [out] */ LPOLESTR *ppszUndo);
        
        END_INTERFACE
    } IPropertyPageUndoStringVtbl;

    interface IPropertyPageUndoString
    {
        CONST_VTBL struct IPropertyPageUndoStringVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyPageUndoString_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyPageUndoString_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyPageUndoString_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyPageUndoString_GetUndoString(This,ppszUndo)	\
    (This)->lpVtbl -> GetUndoString(This,ppszUndo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyPageUndoString_GetUndoString_Proxy( 
    IPropertyPageUndoString * This,
    /* [out] */ LPOLESTR *ppszUndo);


void __RPC_STUB IPropertyPageUndoString_GetUndoString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyPageUndoString_INTERFACE_DEFINED__ */


#ifndef __IProvideRuntimeHTML_INTERFACE_DEFINED__
#define __IProvideRuntimeHTML_INTERFACE_DEFINED__

/* interface IProvideRuntimeHTML */
/* [object][unique][version][uuid] */ 


EXTERN_C const IID IID_IProvideRuntimeHTML;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33C0C1DC-33CF-11d3-BFF2-00C04F990235")
    IProvideRuntimeHTML : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRuntimeHTML( 
            /* [retval][out] */ BSTR *pstrRuntimeHTML) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvideRuntimeHTMLVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProvideRuntimeHTML * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProvideRuntimeHTML * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProvideRuntimeHTML * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeHTML )( 
            IProvideRuntimeHTML * This,
            /* [retval][out] */ BSTR *pstrRuntimeHTML);
        
        END_INTERFACE
    } IProvideRuntimeHTMLVtbl;

    interface IProvideRuntimeHTML
    {
        CONST_VTBL struct IProvideRuntimeHTMLVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvideRuntimeHTML_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProvideRuntimeHTML_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProvideRuntimeHTML_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProvideRuntimeHTML_GetRuntimeHTML(This,pstrRuntimeHTML)	\
    (This)->lpVtbl -> GetRuntimeHTML(This,pstrRuntimeHTML)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProvideRuntimeHTML_GetRuntimeHTML_Proxy( 
    IProvideRuntimeHTML * This,
    /* [retval][out] */ BSTR *pstrRuntimeHTML);


void __RPC_STUB IProvideRuntimeHTML_GetRuntimeHTML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProvideRuntimeHTML_INTERFACE_DEFINED__ */


#ifndef __IProvideAltHTML_INTERFACE_DEFINED__
#define __IProvideAltHTML_INTERFACE_DEFINED__

/* interface IProvideAltHTML */
/* [object][unique][version][uuid] */ 


EXTERN_C const IID IID_IProvideAltHTML;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33C0C1DD-33CF-11d3-BFF2-00C04F990235")
    IProvideAltHTML : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAltHTML( 
            /* [retval][out] */ BSTR *pstrAltHTML) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsAltHTMLEditable( 
            /* [retval][out] */ boolean *pfIsEditable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvideAltHTMLVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProvideAltHTML * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProvideAltHTML * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProvideAltHTML * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAltHTML )( 
            IProvideAltHTML * This,
            /* [retval][out] */ BSTR *pstrAltHTML);
        
        HRESULT ( STDMETHODCALLTYPE *IsAltHTMLEditable )( 
            IProvideAltHTML * This,
            /* [retval][out] */ boolean *pfIsEditable);
        
        END_INTERFACE
    } IProvideAltHTMLVtbl;

    interface IProvideAltHTML
    {
        CONST_VTBL struct IProvideAltHTMLVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvideAltHTML_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProvideAltHTML_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProvideAltHTML_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProvideAltHTML_GetAltHTML(This,pstrAltHTML)	\
    (This)->lpVtbl -> GetAltHTML(This,pstrAltHTML)

#define IProvideAltHTML_IsAltHTMLEditable(This,pfIsEditable)	\
    (This)->lpVtbl -> IsAltHTMLEditable(This,pfIsEditable)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProvideAltHTML_GetAltHTML_Proxy( 
    IProvideAltHTML * This,
    /* [retval][out] */ BSTR *pstrAltHTML);


void __RPC_STUB IProvideAltHTML_GetAltHTML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IProvideAltHTML_IsAltHTMLEditable_Proxy( 
    IProvideAltHTML * This,
    /* [retval][out] */ boolean *pfIsEditable);


void __RPC_STUB IProvideAltHTML_IsAltHTMLEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProvideAltHTML_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_ocdesign_0258 */
/* [local] */ 

DEFINE_GUID(IID_IPersistHTMLStream, 0x56223fe3, 0xd397, 0x11cf, 0xa4, 0x2e, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(IID_IPersistAltHTMLStream, 0x56223fe4, 0xd397, 0x11cf, 0xa4, 0x2e, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);


extern RPC_IF_HANDLE __MIDL_itf_ocdesign_0258_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocdesign_0258_v0_0_s_ifspec;


#ifndef __OCDesign_LIBRARY_DEFINED__
#define __OCDesign_LIBRARY_DEFINED__

/* library OCDesign */
/* [helpstring][version][uuid] */ 












EXTERN_C const IID LIBID_OCDesign;

EXTERN_C const CLSID CLSID_BuilderWizardManager;

#ifdef __cplusplus

class DECLSPEC_UUID("9FCF0840-F8F7-11d2-A6AE-00104BCC7269")
BuilderWizardManager;
#endif
#endif /* __OCDesign_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\macropicker.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sun Jan 27 21:49:05 2002
 */
/* Compiler settings for macropicker.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __macropicker_h__
#define __macropicker_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVCMacroPicker_FWD_DEFINED__
#define __IVCMacroPicker_FWD_DEFINED__
typedef interface IVCMacroPicker IVCMacroPicker;
#endif 	/* __IVCMacroPicker_FWD_DEFINED__ */


#ifndef __VCMacroPicker_FWD_DEFINED__
#define __VCMacroPicker_FWD_DEFINED__

#ifdef __cplusplus
typedef class VCMacroPicker VCMacroPicker;
#else
typedef struct VCMacroPicker VCMacroPicker;
#endif /* __cplusplus */

#endif 	/* __VCMacroPicker_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_macropicker_0000 */
/* [local] */ 

typedef /* [public] */ struct __MIDL___MIDL_itf_macropicker_0000_0001
    {
    IUnknown *m_pContainer;
    IUnknown *m_pProjEngine;
    HWND m_hwndEdit;
    } 	SMacroPickerData;



extern RPC_IF_HANDLE __MIDL_itf_macropicker_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_macropicker_0000_v0_0_s_ifspec;

#ifndef __IVCMacroPicker_INTERFACE_DEFINED__
#define __IVCMacroPicker_INTERFACE_DEFINED__

/* interface IVCMacroPicker */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IVCMacroPicker;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04A9645F-D651-4FB2-B614-D221E04AE611")
    IVCMacroPicker : public IDispatch
    {
    public:
        virtual /* [id][requestedit][bindable][propget] */ HRESULT STDMETHODCALLTYPE get_HWND( 
            /* [retval][out] */ LONG_PTR *pHWND) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnInsertMacro( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IUnknown *pPropContainer,
            /* [in] */ IUnknown *pProjEngine,
            /* [in] */ LONG_PTR hwnd,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVCMacroPickerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVCMacroPicker * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVCMacroPicker * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVCMacroPicker * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVCMacroPicker * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVCMacroPicker * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVCMacroPicker * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVCMacroPicker * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][requestedit][bindable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HWND )( 
            IVCMacroPicker * This,
            /* [retval][out] */ LONG_PTR *pHWND);
        
        HRESULT ( STDMETHODCALLTYPE *OnInsertMacro )( 
            IVCMacroPicker * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IVCMacroPicker * This,
            /* [in] */ IUnknown *pPropContainer,
            /* [in] */ IUnknown *pProjEngine,
            /* [in] */ LONG_PTR hwnd,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrValue);
        
        END_INTERFACE
    } IVCMacroPickerVtbl;

    interface IVCMacroPicker
    {
        CONST_VTBL struct IVCMacroPickerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVCMacroPicker_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVCMacroPicker_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVCMacroPicker_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVCMacroPicker_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVCMacroPicker_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVCMacroPicker_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVCMacroPicker_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVCMacroPicker_get_HWND(This,pHWND)	\
    (This)->lpVtbl -> get_HWND(This,pHWND)

#define IVCMacroPicker_OnInsertMacro(This)	\
    (This)->lpVtbl -> OnInsertMacro(This)

#define IVCMacroPicker_Initialize(This,pPropContainer,pProjEngine,hwnd,bstrName,bstrValue)	\
    (This)->lpVtbl -> Initialize(This,pPropContainer,pProjEngine,hwnd,bstrName,bstrValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][requestedit][bindable][propget] */ HRESULT STDMETHODCALLTYPE IVCMacroPicker_get_HWND_Proxy( 
    IVCMacroPicker * This,
    /* [retval][out] */ LONG_PTR *pHWND);


void __RPC_STUB IVCMacroPicker_get_HWND_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCMacroPicker_OnInsertMacro_Proxy( 
    IVCMacroPicker * This);


void __RPC_STUB IVCMacroPicker_OnInsertMacro_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCMacroPicker_Initialize_Proxy( 
    IVCMacroPicker * This,
    /* [in] */ IUnknown *pPropContainer,
    /* [in] */ IUnknown *pProjEngine,
    /* [in] */ LONG_PTR hwnd,
    /* [in] */ BSTR bstrName,
    /* [in] */ BSTR bstrValue);


void __RPC_STUB IVCMacroPicker_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVCMacroPicker_INTERFACE_DEFINED__ */



#ifndef __MacroPickerLib_LIBRARY_DEFINED__
#define __MacroPickerLib_LIBRARY_DEFINED__

/* library MacroPickerLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_MacroPickerLib;

EXTERN_C const CLSID CLSID_VCMacroPicker;

#ifdef __cplusplus

class DECLSPEC_UUID("3781071C-736B-4121-B7CE-CE7B7EED649D")
VCMacroPicker;
#endif
#endif /* __MacroPickerLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\proffserv.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:42:47 2002
 */
/* Compiler settings for proffserv.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __proffserv_h__
#define __proffserv_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IProfferService_FWD_DEFINED__
#define __IProfferService_FWD_DEFINED__
typedef interface IProfferService IProfferService;
#endif 	/* __IProfferService_FWD_DEFINED__ */


/* header files for imported files */
#include "servprov.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_proffserv_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright 1995 - 1997 Microsoft Corporation. All Rights Reserved.
//
//  File: proffserv.h
//
//--------------------------------------------------------------------------
#ifndef _PROFFSERV_H_
#define _PROFFSERV_H_


extern RPC_IF_HANDLE __MIDL_itf_proffserv_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_proffserv_0000_v0_0_s_ifspec;

#ifndef __IProfferService_INTERFACE_DEFINED__
#define __IProfferService_INTERFACE_DEFINED__

/* interface IProfferService */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IProfferService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CB728B20-F786-11ce-92AD-00AA00A74CD0")
    IProfferService : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProfferService( 
            /* [in] */ REFGUID rguidService,
            /* [in] */ IServiceProvider *psp,
            /* [out] */ DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevokeService( 
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProfferServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProfferService * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProfferService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProfferService * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProfferService )( 
            IProfferService * This,
            /* [in] */ REFGUID rguidService,
            /* [in] */ IServiceProvider *psp,
            /* [out] */ DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *RevokeService )( 
            IProfferService * This,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } IProfferServiceVtbl;

    interface IProfferService
    {
        CONST_VTBL struct IProfferServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProfferService_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProfferService_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProfferService_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProfferService_ProfferService(This,rguidService,psp,pdwCookie)	\
    (This)->lpVtbl -> ProfferService(This,rguidService,psp,pdwCookie)

#define IProfferService_RevokeService(This,dwCookie)	\
    (This)->lpVtbl -> RevokeService(This,dwCookie)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProfferService_ProfferService_Proxy( 
    IProfferService * This,
    /* [in] */ REFGUID rguidService,
    /* [in] */ IServiceProvider *psp,
    /* [out] */ DWORD *pdwCookie);


void __RPC_STUB IProfferService_ProfferService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IProfferService_RevokeService_Proxy( 
    IProfferService * This,
    /* [in] */ DWORD dwCookie);


void __RPC_STUB IProfferService_RevokeService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProfferService_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_proffserv_0090 */
/* [local] */ 

#define SID_SProfferService IID_IProfferService
#endif


extern RPC_IF_HANDLE __MIDL_itf_proffserv_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_proffserv_0090_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\helpsys.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:43:04 2002
 */
/* Compiler settings for helpsys.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __helpsys_h__
#define __helpsys_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVsHelpSystem_FWD_DEFINED__
#define __IVsHelpSystem_FWD_DEFINED__
typedef interface IVsHelpSystem IVsHelpSystem;
#endif 	/* __IVsHelpSystem_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_helpsys_0000 */
/* [local] */ 

#ifndef INT_TYPE
#define INT_TYPE DWORD_PTR
#define LCID_TYPE DWORD
#endif
typedef /* [public][v1_enum] */ 
enum _VsHelpErrors
    {	VSHELP_E_HTMLHELP_UNKNOWN	= 0x80000000 | 4 << 16 | 0x1000,
	VSHELP_E_COLLECTIONDOESNOTEXIST	= 0x80000000 | 4 << 16 | 0x1001,
	VSHELP_E_COLLECTIONNOTREGISTERED	= 0x80000000 | 4 << 16 | 0x1002,
	VSHELP_E_REGISTRATION	= 0x80000000 | 4 << 16 | 0x1003,
	VSHELP_E_PREFERREDCOLLECTION	= 0x80000000 | 4 << 16 | 0x1004
    } 	VsHelpErrors;



extern RPC_IF_HANDLE __MIDL_itf_helpsys_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_helpsys_0000_v0_0_s_ifspec;

#ifndef __IVsHelpSystem_INTERFACE_DEFINED__
#define __IVsHelpSystem_INTERFACE_DEFINED__

/* interface IVsHelpSystem */
/* [unique][helpstring][uuid][object] */ 

typedef /* [public][v1_enum] */ 
enum _VHS_COMMANDS
    {	VHS_Default	= 0,
	VHS_NoErrorMessages	= 0x8,
	VHS_UseBrowser	= 0x1,
	VHS_UseHelp	= 0x2,
	VHS_Localize	= 0x4,
	VHS_OutsideCollectionSpace	= 0x10
    } 	VHS_COMMAND;


EXTERN_C const IID IID_IVsHelpSystem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("854d7ac0-bc3d-11d0-b421-00a0c90f9dc4")
    IVsHelpSystem : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE KeywordSearch( 
            /* [in] */ LPCOLESTR pszKeyword,
            /* [in] */ const DWORD_PTR dwFlags,
            /* [in] */ DWORD_PTR dwReserved) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ALinkSearch( 
            /* [in] */ LPCOLESTR pszALink,
            /* [in] */ const DWORD_PTR dwFlags,
            /* [in] */ DWORD_PTR dwReserved) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE KeywordSearchDlg( 
            /* [in] */ LPCOLESTR pszKeyword,
            /* [in] */ const DWORD_PTR dwFlags,
            /* [in] */ DWORD_PTR dwReserved) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE FullTextSearchDlg( 
            /* [in] */ LPCOLESTR pszQuery,
            /* [in] */ const DWORD_PTR dwFlags,
            /* [in] */ DWORD_PTR dwReserved) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetCurrentURL( 
            /* [out] */ BSTR *ppszURL) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromURL( 
            /* [in] */ LPCOLESTR pszURL,
            /* [in] */ const DWORD_PTR Command) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromIdentifier( 
            /* [in] */ LPCOLESTR pszFile,
            /* [in] */ const DWORD_PTR Id,
            /* [in] */ const DWORD_PTR Command) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ActivateHelpSystem( 
            /* [in] */ const DWORD_PTR dwFlags) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Reserved( 
            /* [in] */ VHS_COMMAND command,
            /* [in] */ VsHelpErrors error) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsHelpSystemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsHelpSystem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsHelpSystem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsHelpSystem * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *KeywordSearch )( 
            IVsHelpSystem * This,
            /* [in] */ LPCOLESTR pszKeyword,
            /* [in] */ const DWORD_PTR dwFlags,
            /* [in] */ DWORD_PTR dwReserved);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ALinkSearch )( 
            IVsHelpSystem * This,
            /* [in] */ LPCOLESTR pszALink,
            /* [in] */ const DWORD_PTR dwFlags,
            /* [in] */ DWORD_PTR dwReserved);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *KeywordSearchDlg )( 
            IVsHelpSystem * This,
            /* [in] */ LPCOLESTR pszKeyword,
            /* [in] */ const DWORD_PTR dwFlags,
            /* [in] */ DWORD_PTR dwReserved);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *FullTextSearchDlg )( 
            IVsHelpSystem * This,
            /* [in] */ LPCOLESTR pszQuery,
            /* [in] */ const DWORD_PTR dwFlags,
            /* [in] */ DWORD_PTR dwReserved);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCurrentURL )( 
            IVsHelpSystem * This,
            /* [out] */ BSTR *ppszURL);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromURL )( 
            IVsHelpSystem * This,
            /* [in] */ LPCOLESTR pszURL,
            /* [in] */ const DWORD_PTR Command);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromIdentifier )( 
            IVsHelpSystem * This,
            /* [in] */ LPCOLESTR pszFile,
            /* [in] */ const DWORD_PTR Id,
            /* [in] */ const DWORD_PTR Command);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ActivateHelpSystem )( 
            IVsHelpSystem * This,
            /* [in] */ const DWORD_PTR dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Reserved )( 
            IVsHelpSystem * This,
            /* [in] */ VHS_COMMAND command,
            /* [in] */ VsHelpErrors error);
        
        END_INTERFACE
    } IVsHelpSystemVtbl;

    interface IVsHelpSystem
    {
        CONST_VTBL struct IVsHelpSystemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsHelpSystem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsHelpSystem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsHelpSystem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsHelpSystem_KeywordSearch(This,pszKeyword,dwFlags,dwReserved)	\
    (This)->lpVtbl -> KeywordSearch(This,pszKeyword,dwFlags,dwReserved)

#define IVsHelpSystem_ALinkSearch(This,pszALink,dwFlags,dwReserved)	\
    (This)->lpVtbl -> ALinkSearch(This,pszALink,dwFlags,dwReserved)

#define IVsHelpSystem_KeywordSearchDlg(This,pszKeyword,dwFlags,dwReserved)	\
    (This)->lpVtbl -> KeywordSearchDlg(This,pszKeyword,dwFlags,dwReserved)

#define IVsHelpSystem_FullTextSearchDlg(This,pszQuery,dwFlags,dwReserved)	\
    (This)->lpVtbl -> FullTextSearchDlg(This,pszQuery,dwFlags,dwReserved)

#define IVsHelpSystem_GetCurrentURL(This,ppszURL)	\
    (This)->lpVtbl -> GetCurrentURL(This,ppszURL)

#define IVsHelpSystem_DisplayTopicFromURL(This,pszURL,Command)	\
    (This)->lpVtbl -> DisplayTopicFromURL(This,pszURL,Command)

#define IVsHelpSystem_DisplayTopicFromIdentifier(This,pszFile,Id,Command)	\
    (This)->lpVtbl -> DisplayTopicFromIdentifier(This,pszFile,Id,Command)

#define IVsHelpSystem_ActivateHelpSystem(This,dwFlags)	\
    (This)->lpVtbl -> ActivateHelpSystem(This,dwFlags)

#define IVsHelpSystem_Reserved(This,command,error)	\
    (This)->lpVtbl -> Reserved(This,command,error)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_KeywordSearch_Proxy( 
    IVsHelpSystem * This,
    /* [in] */ LPCOLESTR pszKeyword,
    /* [in] */ const DWORD_PTR dwFlags,
    /* [in] */ DWORD_PTR dwReserved);


void __RPC_STUB IVsHelpSystem_KeywordSearch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_ALinkSearch_Proxy( 
    IVsHelpSystem * This,
    /* [in] */ LPCOLESTR pszALink,
    /* [in] */ const DWORD_PTR dwFlags,
    /* [in] */ DWORD_PTR dwReserved);


void __RPC_STUB IVsHelpSystem_ALinkSearch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_KeywordSearchDlg_Proxy( 
    IVsHelpSystem * This,
    /* [in] */ LPCOLESTR pszKeyword,
    /* [in] */ const DWORD_PTR dwFlags,
    /* [in] */ DWORD_PTR dwReserved);


void __RPC_STUB IVsHelpSystem_KeywordSearchDlg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_FullTextSearchDlg_Proxy( 
    IVsHelpSystem * This,
    /* [in] */ LPCOLESTR pszQuery,
    /* [in] */ const DWORD_PTR dwFlags,
    /* [in] */ DWORD_PTR dwReserved);


void __RPC_STUB IVsHelpSystem_FullTextSearchDlg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_GetCurrentURL_Proxy( 
    IVsHelpSystem * This,
    /* [out] */ BSTR *ppszURL);


void __RPC_STUB IVsHelpSystem_GetCurrentURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_DisplayTopicFromURL_Proxy( 
    IVsHelpSystem * This,
    /* [in] */ LPCOLESTR pszURL,
    /* [in] */ const DWORD_PTR Command);


void __RPC_STUB IVsHelpSystem_DisplayTopicFromURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_DisplayTopicFromIdentifier_Proxy( 
    IVsHelpSystem * This,
    /* [in] */ LPCOLESTR pszFile,
    /* [in] */ const DWORD_PTR Id,
    /* [in] */ const DWORD_PTR Command);


void __RPC_STUB IVsHelpSystem_DisplayTopicFromIdentifier_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_ActivateHelpSystem_Proxy( 
    IVsHelpSystem * This,
    /* [in] */ const DWORD_PTR dwFlags);


void __RPC_STUB IVsHelpSystem_ActivateHelpSystem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IVsHelpSystem_Reserved_Proxy( 
    IVsHelpSystem * This,
    /* [in] */ VHS_COMMAND command,
    /* [in] */ VsHelpErrors error);


void __RPC_STUB IVsHelpSystem_Reserved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsHelpSystem_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_helpsys_0252 */
/* [local] */ 

#define SID_SVsHelpService IID_IVsHelpSystem
#define SID_SHelpService IID_IVsHelpSystem


extern RPC_IF_HANDLE __MIDL_itf_helpsys_0252_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_helpsys_0252_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\enc.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:51:11 2002
 */
/* Compiler settings for enc.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __enc_h__
#define __enc_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDebugENC_FWD_DEFINED__
#define __IDebugENC_FWD_DEFINED__
typedef interface IDebugENC IDebugENC;
#endif 	/* __IDebugENC_FWD_DEFINED__ */


#ifndef __IDebugENCLineMap_FWD_DEFINED__
#define __IDebugENCLineMap_FWD_DEFINED__
typedef interface IDebugENCLineMap IDebugENCLineMap;
#endif 	/* __IDebugENCLineMap_FWD_DEFINED__ */


#ifndef __IDebugENCInfo2_FWD_DEFINED__
#define __IDebugENCInfo2_FWD_DEFINED__
typedef interface IDebugENCInfo2 IDebugENCInfo2;
#endif 	/* __IDebugENCInfo2_FWD_DEFINED__ */


#ifndef __IEnumDebugENCInfo2_FWD_DEFINED__
#define __IEnumDebugENCInfo2_FWD_DEFINED__
typedef interface IEnumDebugENCInfo2 IEnumDebugENCInfo2;
#endif 	/* __IEnumDebugENCInfo2_FWD_DEFINED__ */


#ifndef __IDebugENCRelinkInfo2_FWD_DEFINED__
#define __IDebugENCRelinkInfo2_FWD_DEFINED__
typedef interface IDebugENCRelinkInfo2 IDebugENCRelinkInfo2;
#endif 	/* __IDebugENCRelinkInfo2_FWD_DEFINED__ */


#ifndef __IEnumDebugENCRelinkInfo2_FWD_DEFINED__
#define __IEnumDebugENCRelinkInfo2_FWD_DEFINED__
typedef interface IEnumDebugENCRelinkInfo2 IEnumDebugENCRelinkInfo2;
#endif 	/* __IEnumDebugENCRelinkInfo2_FWD_DEFINED__ */


#ifndef __IDebugIDBInfo2_FWD_DEFINED__
#define __IDebugIDBInfo2_FWD_DEFINED__
typedef interface IDebugIDBInfo2 IDebugIDBInfo2;
#endif 	/* __IDebugIDBInfo2_FWD_DEFINED__ */


#ifndef __IEnumDebugIDBInfo2_FWD_DEFINED__
#define __IEnumDebugIDBInfo2_FWD_DEFINED__
typedef interface IEnumDebugIDBInfo2 IEnumDebugIDBInfo2;
#endif 	/* __IEnumDebugIDBInfo2_FWD_DEFINED__ */


#ifndef __IDebugENCBuildInfo2_FWD_DEFINED__
#define __IDebugENCBuildInfo2_FWD_DEFINED__
typedef interface IDebugENCBuildInfo2 IDebugENCBuildInfo2;
#endif 	/* __IDebugENCBuildInfo2_FWD_DEFINED__ */


#ifndef __IDebugENCUpdateOnRelinkEvent2_FWD_DEFINED__
#define __IDebugENCUpdateOnRelinkEvent2_FWD_DEFINED__
typedef interface IDebugENCUpdateOnRelinkEvent2 IDebugENCUpdateOnRelinkEvent2;
#endif 	/* __IDebugENCUpdateOnRelinkEvent2_FWD_DEFINED__ */


#ifndef __IDebugENCUpdateOnStaleCodeEvent2_FWD_DEFINED__
#define __IDebugENCUpdateOnStaleCodeEvent2_FWD_DEFINED__
typedef interface IDebugENCUpdateOnStaleCodeEvent2 IDebugENCUpdateOnStaleCodeEvent2;
#endif 	/* __IDebugENCUpdateOnStaleCodeEvent2_FWD_DEFINED__ */


#ifndef __IDebugENCUpdate_FWD_DEFINED__
#define __IDebugENCUpdate_FWD_DEFINED__
typedef interface IDebugENCUpdate IDebugENCUpdate;
#endif 	/* __IDebugENCUpdate_FWD_DEFINED__ */


#ifndef __IDebugENCSnapshot2_FWD_DEFINED__
#define __IDebugENCSnapshot2_FWD_DEFINED__
typedef interface IDebugENCSnapshot2 IDebugENCSnapshot2;
#endif 	/* __IDebugENCSnapshot2_FWD_DEFINED__ */


#ifndef __IEnumDebugENCSnapshots2_FWD_DEFINED__
#define __IEnumDebugENCSnapshots2_FWD_DEFINED__
typedef interface IEnumDebugENCSnapshots2 IEnumDebugENCSnapshots2;
#endif 	/* __IEnumDebugENCSnapshots2_FWD_DEFINED__ */


#ifndef __IEnumDebugErrorInfos2_FWD_DEFINED__
#define __IEnumDebugErrorInfos2_FWD_DEFINED__
typedef interface IEnumDebugErrorInfos2 IEnumDebugErrorInfos2;
#endif 	/* __IEnumDebugErrorInfos2_FWD_DEFINED__ */


#ifndef __IDebugComPlusSnapshot2_FWD_DEFINED__
#define __IDebugComPlusSnapshot2_FWD_DEFINED__
typedef interface IDebugComPlusSnapshot2 IDebugComPlusSnapshot2;
#endif 	/* __IDebugComPlusSnapshot2_FWD_DEFINED__ */


#ifndef __IDebugNativeSnapshot2_FWD_DEFINED__
#define __IDebugNativeSnapshot2_FWD_DEFINED__
typedef interface IDebugNativeSnapshot2 IDebugNativeSnapshot2;
#endif 	/* __IDebugNativeSnapshot2_FWD_DEFINED__ */


#ifndef __IDebugENCStackFrame2_FWD_DEFINED__
#define __IDebugENCStackFrame2_FWD_DEFINED__
typedef interface IDebugENCStackFrame2 IDebugENCStackFrame2;
#endif 	/* __IDebugENCStackFrame2_FWD_DEFINED__ */


#ifndef __IDebugMetaDataEmit2_FWD_DEFINED__
#define __IDebugMetaDataEmit2_FWD_DEFINED__
typedef interface IDebugMetaDataEmit2 IDebugMetaDataEmit2;
#endif 	/* __IDebugMetaDataEmit2_FWD_DEFINED__ */


#ifndef __IDebugMetaDataDebugEmit2_FWD_DEFINED__
#define __IDebugMetaDataDebugEmit2_FWD_DEFINED__
typedef interface IDebugMetaDataDebugEmit2 IDebugMetaDataDebugEmit2;
#endif 	/* __IDebugMetaDataDebugEmit2_FWD_DEFINED__ */


#ifndef __IDebugENCStateEvents_FWD_DEFINED__
#define __IDebugENCStateEvents_FWD_DEFINED__
typedef interface IDebugENCStateEvents IDebugENCStateEvents;
#endif 	/* __IDebugENCStateEvents_FWD_DEFINED__ */


#ifndef __EncMgr_FWD_DEFINED__
#define __EncMgr_FWD_DEFINED__

#ifdef __cplusplus
typedef class EncMgr EncMgr;
#else
typedef struct EncMgr EncMgr;
#endif /* __cplusplus */

#endif 	/* __EncMgr_FWD_DEFINED__ */


/* header files for imported files */
#include "ocidl.h"
#include "msdbg.h"
#include "sh.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_enc_0000 */
/* [local] */ 





















static const int E_ENC_REBUILD_FAIL = MAKE_HRESULT(1, FACILITY_ITF, 0x0001);
static const int E_VB_ENC_REBUILD_FAIL = MAKE_HRESULT(1, FACILITY_ITF, 0x0011);
static const int E_ENC_REBUILD_FAIL_MODULE_NOT_LOADED = MAKE_HRESULT(1, FACILITY_ITF, 0x0101);
static const int E_ENC_COMMIT_FAIL = MAKE_HRESULT(1, FACILITY_ITF, 0x0002);

enum tagENCSTATE
    {	ENCSTATE_DISABLED	= 0,
	ENCSTATE_ENABLED	= ENCSTATE_DISABLED + 1,
	ENCSTATE_MANAGED_ENC_NOT_SUPPORTED	= ENCSTATE_ENABLED + 1
    } ;
typedef enum tagENCSTATE ENCSTATE;


enum tagApplyCodeChangesResult
    {	ACCR_SUCCESS	= 0,
	ACCR_BUILDERROR	= ACCR_SUCCESS + 1,
	ACCR_CANCOMMITERROR	= ACCR_BUILDERROR + 1,
	ACCR_COMMITERROR	= ACCR_CANCOMMITERROR + 1
    } ;
typedef enum tagApplyCodeChangesResult ApplyCodeChangesResult;



extern RPC_IF_HANDLE __MIDL_itf_enc_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_enc_0000_v0_0_s_ifspec;

#ifndef __IDebugENC_INTERFACE_DEFINED__
#define __IDebugENC_INTERFACE_DEFINED__

/* interface IDebugENC */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENC;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B104D8B7-AF19-11d2-922C-00A02448799A")
    IDebugENC : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetRegistryRoot( 
            /* [in] */ LPCOLESTR in_szRegistryRoot) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnterDebuggingSession( 
            /* [in] */ IServiceProvider *in_pServiceProvider) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetENCProjectBuildOption( 
            /* [in] */ REFGUID in_guidOption,
            /* [in] */ LPCOLESTR in_szOptionValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InquireENCState( 
            /* [in] */ ENCSTATE *in_pENCSTATE,
            /* [in] */ BOOL fOnContinue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InquireENCRelinkState( 
            /* [in] */ BOOL *in_pbENCRelinking) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MapToEdited( 
            /* [in] */ LPCOLESTR in_szFile,
            /* [in] */ ULONG in_LineNo,
            /* [in] */ ULONG in_ColumnNo,
            /* [out] */ ULONG *out_pLineNo,
            /* [out] */ ULONG *out_pColumnNo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MapToSuperceded( 
            /* [in] */ LPCOLESTR in_szFile,
            /* [in] */ ULONG in_LineNo,
            /* [in] */ ULONG in_ColumnNo,
            /* [out] */ ULONG *out_pLineNo,
            /* [out] */ ULONG *out_pColumnNo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ApplyCodeChanges( 
            /* [in] */ IDebugSession2 *in_pSession,
            /* [in] */ BOOL in_fOnContinue,
            /* [out] */ ApplyCodeChangesResult *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CancelApplyCodeChanges( 
            /* [in] */ IDebugProgram2 *in_pProgram) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LeaveDebuggingSession( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AdviseENCStateEvents( 
            /* [in] */ IDebugENCStateEvents *in_pENCStateEvents) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnadviseENCStateEvents( 
            /* [in] */ IDebugENCStateEvents *in_pENCStateEvents) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFileName( 
            /* [in] */ LPCOLESTR in_szURL,
            /* [out] */ BSTR *out_pbstrFileName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFileDisplayName( 
            /* [in] */ LPCOLESTR in_szURL,
            /* [out] */ BSTR *out_pbstrDisplayFileName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearENCState( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENC * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENC * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENC * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetRegistryRoot )( 
            IDebugENC * This,
            /* [in] */ LPCOLESTR in_szRegistryRoot);
        
        HRESULT ( STDMETHODCALLTYPE *EnterDebuggingSession )( 
            IDebugENC * This,
            /* [in] */ IServiceProvider *in_pServiceProvider);
        
        HRESULT ( STDMETHODCALLTYPE *SetENCProjectBuildOption )( 
            IDebugENC * This,
            /* [in] */ REFGUID in_guidOption,
            /* [in] */ LPCOLESTR in_szOptionValue);
        
        HRESULT ( STDMETHODCALLTYPE *InquireENCState )( 
            IDebugENC * This,
            /* [in] */ ENCSTATE *in_pENCSTATE,
            /* [in] */ BOOL fOnContinue);
        
        HRESULT ( STDMETHODCALLTYPE *InquireENCRelinkState )( 
            IDebugENC * This,
            /* [in] */ BOOL *in_pbENCRelinking);
        
        HRESULT ( STDMETHODCALLTYPE *MapToEdited )( 
            IDebugENC * This,
            /* [in] */ LPCOLESTR in_szFile,
            /* [in] */ ULONG in_LineNo,
            /* [in] */ ULONG in_ColumnNo,
            /* [out] */ ULONG *out_pLineNo,
            /* [out] */ ULONG *out_pColumnNo);
        
        HRESULT ( STDMETHODCALLTYPE *MapToSuperceded )( 
            IDebugENC * This,
            /* [in] */ LPCOLESTR in_szFile,
            /* [in] */ ULONG in_LineNo,
            /* [in] */ ULONG in_ColumnNo,
            /* [out] */ ULONG *out_pLineNo,
            /* [out] */ ULONG *out_pColumnNo);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyCodeChanges )( 
            IDebugENC * This,
            /* [in] */ IDebugSession2 *in_pSession,
            /* [in] */ BOOL in_fOnContinue,
            /* [out] */ ApplyCodeChangesResult *result);
        
        HRESULT ( STDMETHODCALLTYPE *CancelApplyCodeChanges )( 
            IDebugENC * This,
            /* [in] */ IDebugProgram2 *in_pProgram);
        
        HRESULT ( STDMETHODCALLTYPE *LeaveDebuggingSession )( 
            IDebugENC * This);
        
        HRESULT ( STDMETHODCALLTYPE *AdviseENCStateEvents )( 
            IDebugENC * This,
            /* [in] */ IDebugENCStateEvents *in_pENCStateEvents);
        
        HRESULT ( STDMETHODCALLTYPE *UnadviseENCStateEvents )( 
            IDebugENC * This,
            /* [in] */ IDebugENCStateEvents *in_pENCStateEvents);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileName )( 
            IDebugENC * This,
            /* [in] */ LPCOLESTR in_szURL,
            /* [out] */ BSTR *out_pbstrFileName);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileDisplayName )( 
            IDebugENC * This,
            /* [in] */ LPCOLESTR in_szURL,
            /* [out] */ BSTR *out_pbstrDisplayFileName);
        
        HRESULT ( STDMETHODCALLTYPE *ClearENCState )( 
            IDebugENC * This);
        
        END_INTERFACE
    } IDebugENCVtbl;

    interface IDebugENC
    {
        CONST_VTBL struct IDebugENCVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENC_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENC_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENC_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENC_SetRegistryRoot(This,in_szRegistryRoot)	\
    (This)->lpVtbl -> SetRegistryRoot(This,in_szRegistryRoot)

#define IDebugENC_EnterDebuggingSession(This,in_pServiceProvider)	\
    (This)->lpVtbl -> EnterDebuggingSession(This,in_pServiceProvider)

#define IDebugENC_SetENCProjectBuildOption(This,in_guidOption,in_szOptionValue)	\
    (This)->lpVtbl -> SetENCProjectBuildOption(This,in_guidOption,in_szOptionValue)

#define IDebugENC_InquireENCState(This,in_pENCSTATE,fOnContinue)	\
    (This)->lpVtbl -> InquireENCState(This,in_pENCSTATE,fOnContinue)

#define IDebugENC_InquireENCRelinkState(This,in_pbENCRelinking)	\
    (This)->lpVtbl -> InquireENCRelinkState(This,in_pbENCRelinking)

#define IDebugENC_MapToEdited(This,in_szFile,in_LineNo,in_ColumnNo,out_pLineNo,out_pColumnNo)	\
    (This)->lpVtbl -> MapToEdited(This,in_szFile,in_LineNo,in_ColumnNo,out_pLineNo,out_pColumnNo)

#define IDebugENC_MapToSuperceded(This,in_szFile,in_LineNo,in_ColumnNo,out_pLineNo,out_pColumnNo)	\
    (This)->lpVtbl -> MapToSuperceded(This,in_szFile,in_LineNo,in_ColumnNo,out_pLineNo,out_pColumnNo)

#define IDebugENC_ApplyCodeChanges(This,in_pSession,in_fOnContinue,result)	\
    (This)->lpVtbl -> ApplyCodeChanges(This,in_pSession,in_fOnContinue,result)

#define IDebugENC_CancelApplyCodeChanges(This,in_pProgram)	\
    (This)->lpVtbl -> CancelApplyCodeChanges(This,in_pProgram)

#define IDebugENC_LeaveDebuggingSession(This)	\
    (This)->lpVtbl -> LeaveDebuggingSession(This)

#define IDebugENC_AdviseENCStateEvents(This,in_pENCStateEvents)	\
    (This)->lpVtbl -> AdviseENCStateEvents(This,in_pENCStateEvents)

#define IDebugENC_UnadviseENCStateEvents(This,in_pENCStateEvents)	\
    (This)->lpVtbl -> UnadviseENCStateEvents(This,in_pENCStateEvents)

#define IDebugENC_GetFileName(This,in_szURL,out_pbstrFileName)	\
    (This)->lpVtbl -> GetFileName(This,in_szURL,out_pbstrFileName)

#define IDebugENC_GetFileDisplayName(This,in_szURL,out_pbstrDisplayFileName)	\
    (This)->lpVtbl -> GetFileDisplayName(This,in_szURL,out_pbstrDisplayFileName)

#define IDebugENC_ClearENCState(This)	\
    (This)->lpVtbl -> ClearENCState(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENC_SetRegistryRoot_Proxy( 
    IDebugENC * This,
    /* [in] */ LPCOLESTR in_szRegistryRoot);


void __RPC_STUB IDebugENC_SetRegistryRoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_EnterDebuggingSession_Proxy( 
    IDebugENC * This,
    /* [in] */ IServiceProvider *in_pServiceProvider);


void __RPC_STUB IDebugENC_EnterDebuggingSession_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_SetENCProjectBuildOption_Proxy( 
    IDebugENC * This,
    /* [in] */ REFGUID in_guidOption,
    /* [in] */ LPCOLESTR in_szOptionValue);


void __RPC_STUB IDebugENC_SetENCProjectBuildOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_InquireENCState_Proxy( 
    IDebugENC * This,
    /* [in] */ ENCSTATE *in_pENCSTATE,
    /* [in] */ BOOL fOnContinue);


void __RPC_STUB IDebugENC_InquireENCState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_InquireENCRelinkState_Proxy( 
    IDebugENC * This,
    /* [in] */ BOOL *in_pbENCRelinking);


void __RPC_STUB IDebugENC_InquireENCRelinkState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_MapToEdited_Proxy( 
    IDebugENC * This,
    /* [in] */ LPCOLESTR in_szFile,
    /* [in] */ ULONG in_LineNo,
    /* [in] */ ULONG in_ColumnNo,
    /* [out] */ ULONG *out_pLineNo,
    /* [out] */ ULONG *out_pColumnNo);


void __RPC_STUB IDebugENC_MapToEdited_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_MapToSuperceded_Proxy( 
    IDebugENC * This,
    /* [in] */ LPCOLESTR in_szFile,
    /* [in] */ ULONG in_LineNo,
    /* [in] */ ULONG in_ColumnNo,
    /* [out] */ ULONG *out_pLineNo,
    /* [out] */ ULONG *out_pColumnNo);


void __RPC_STUB IDebugENC_MapToSuperceded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_ApplyCodeChanges_Proxy( 
    IDebugENC * This,
    /* [in] */ IDebugSession2 *in_pSession,
    /* [in] */ BOOL in_fOnContinue,
    /* [out] */ ApplyCodeChangesResult *result);


void __RPC_STUB IDebugENC_ApplyCodeChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_CancelApplyCodeChanges_Proxy( 
    IDebugENC * This,
    /* [in] */ IDebugProgram2 *in_pProgram);


void __RPC_STUB IDebugENC_CancelApplyCodeChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_LeaveDebuggingSession_Proxy( 
    IDebugENC * This);


void __RPC_STUB IDebugENC_LeaveDebuggingSession_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_AdviseENCStateEvents_Proxy( 
    IDebugENC * This,
    /* [in] */ IDebugENCStateEvents *in_pENCStateEvents);


void __RPC_STUB IDebugENC_AdviseENCStateEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_UnadviseENCStateEvents_Proxy( 
    IDebugENC * This,
    /* [in] */ IDebugENCStateEvents *in_pENCStateEvents);


void __RPC_STUB IDebugENC_UnadviseENCStateEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_GetFileName_Proxy( 
    IDebugENC * This,
    /* [in] */ LPCOLESTR in_szURL,
    /* [out] */ BSTR *out_pbstrFileName);


void __RPC_STUB IDebugENC_GetFileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_GetFileDisplayName_Proxy( 
    IDebugENC * This,
    /* [in] */ LPCOLESTR in_szURL,
    /* [out] */ BSTR *out_pbstrDisplayFileName);


void __RPC_STUB IDebugENC_GetFileDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENC_ClearENCState_Proxy( 
    IDebugENC * This);


void __RPC_STUB IDebugENC_ClearENCState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENC_INTERFACE_DEFINED__ */


#ifndef __IDebugENCLineMap_INTERFACE_DEFINED__
#define __IDebugENCLineMap_INTERFACE_DEFINED__

/* interface IDebugENCLineMap */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCLineMap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8706233B-BD4C-11d2-9238-00A02448799A")
    IDebugENCLineMap : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetEditedSource( 
            /* [out] */ BSTR *out_pbstrEditedSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSupercededSource( 
            /* [out] */ BSTR *out_pbstrSupercededSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsLineModified( 
            /* [in] */ ULONG in_LineNoFromSupercededSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineMap( 
            /* [in] */ ULONG in_LineNoFromSupercededSource,
            /* [out] */ ULONG *out_pLineNoFromEditedSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReverseLineMap( 
            /* [in] */ ULONG in_LineNoFromEditedSource,
            /* [out] */ ULONG *out_pLineNoFromSupercededSource) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCLineMapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCLineMap * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCLineMap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCLineMap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEditedSource )( 
            IDebugENCLineMap * This,
            /* [out] */ BSTR *out_pbstrEditedSource);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupercededSource )( 
            IDebugENCLineMap * This,
            /* [out] */ BSTR *out_pbstrSupercededSource);
        
        HRESULT ( STDMETHODCALLTYPE *IsLineModified )( 
            IDebugENCLineMap * This,
            /* [in] */ ULONG in_LineNoFromSupercededSource);
        
        HRESULT ( STDMETHODCALLTYPE *LineMap )( 
            IDebugENCLineMap * This,
            /* [in] */ ULONG in_LineNoFromSupercededSource,
            /* [out] */ ULONG *out_pLineNoFromEditedSource);
        
        HRESULT ( STDMETHODCALLTYPE *ReverseLineMap )( 
            IDebugENCLineMap * This,
            /* [in] */ ULONG in_LineNoFromEditedSource,
            /* [out] */ ULONG *out_pLineNoFromSupercededSource);
        
        END_INTERFACE
    } IDebugENCLineMapVtbl;

    interface IDebugENCLineMap
    {
        CONST_VTBL struct IDebugENCLineMapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCLineMap_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCLineMap_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCLineMap_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCLineMap_GetEditedSource(This,out_pbstrEditedSource)	\
    (This)->lpVtbl -> GetEditedSource(This,out_pbstrEditedSource)

#define IDebugENCLineMap_GetSupercededSource(This,out_pbstrSupercededSource)	\
    (This)->lpVtbl -> GetSupercededSource(This,out_pbstrSupercededSource)

#define IDebugENCLineMap_IsLineModified(This,in_LineNoFromSupercededSource)	\
    (This)->lpVtbl -> IsLineModified(This,in_LineNoFromSupercededSource)

#define IDebugENCLineMap_LineMap(This,in_LineNoFromSupercededSource,out_pLineNoFromEditedSource)	\
    (This)->lpVtbl -> LineMap(This,in_LineNoFromSupercededSource,out_pLineNoFromEditedSource)

#define IDebugENCLineMap_ReverseLineMap(This,in_LineNoFromEditedSource,out_pLineNoFromSupercededSource)	\
    (This)->lpVtbl -> ReverseLineMap(This,in_LineNoFromEditedSource,out_pLineNoFromSupercededSource)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCLineMap_GetEditedSource_Proxy( 
    IDebugENCLineMap * This,
    /* [out] */ BSTR *out_pbstrEditedSource);


void __RPC_STUB IDebugENCLineMap_GetEditedSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCLineMap_GetSupercededSource_Proxy( 
    IDebugENCLineMap * This,
    /* [out] */ BSTR *out_pbstrSupercededSource);


void __RPC_STUB IDebugENCLineMap_GetSupercededSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCLineMap_IsLineModified_Proxy( 
    IDebugENCLineMap * This,
    /* [in] */ ULONG in_LineNoFromSupercededSource);


void __RPC_STUB IDebugENCLineMap_IsLineModified_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCLineMap_LineMap_Proxy( 
    IDebugENCLineMap * This,
    /* [in] */ ULONG in_LineNoFromSupercededSource,
    /* [out] */ ULONG *out_pLineNoFromEditedSource);


void __RPC_STUB IDebugENCLineMap_LineMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCLineMap_ReverseLineMap_Proxy( 
    IDebugENCLineMap * This,
    /* [in] */ ULONG in_LineNoFromEditedSource,
    /* [out] */ ULONG *out_pLineNoFromSupercededSource);


void __RPC_STUB IDebugENCLineMap_ReverseLineMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCLineMap_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_enc_0373 */
/* [local] */ 


enum __MIDL___MIDL_itf_enc_0373_0001
    {	ENCINFO_STACKFRAME	= 0x1,
	ENCINFO_HRESULT_FROM_DE	= 0x2,
	ENCINFO_ERROR_NO	= 0x4,
	ENCINFO_ERROR_BSTR	= 0x8,
	ENCINFO_CODE_CONTEXT	= 0x10,
	ENCINFO_EXTENDED_INFO	= 0x20
    } ;
typedef DWORD ENCINFO_FLAGS;

typedef struct tagENCINFO
    {
    ENCINFO_FLAGS m_dwValidFields;
    IDebugStackFrame2 *m_pStackFrame;
    HRESULT m_HRFromDE;
    DWORD m_dwErrorNo;
    BSTR m_bstrError;
    IDebugCodeContext2 *m_pCodeContext;
    IUnknown *m_pExtendedInfo;
    } 	ENCINFO;



extern RPC_IF_HANDLE __MIDL_itf_enc_0373_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_enc_0373_v0_0_s_ifspec;

#ifndef __IDebugENCInfo2_INTERFACE_DEFINED__
#define __IDebugENCInfo2_INTERFACE_DEFINED__

/* interface IDebugENCInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6B56106F-BD51-11d2-9238-00A02448799A")
    IDebugENCInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [out] */ ENCINFO *out_pENCINFO) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugENCInfo2 * This,
            /* [out] */ ENCINFO *out_pENCINFO);
        
        END_INTERFACE
    } IDebugENCInfo2Vtbl;

    interface IDebugENCInfo2
    {
        CONST_VTBL struct IDebugENCInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCInfo2_GetInfo(This,out_pENCINFO)	\
    (This)->lpVtbl -> GetInfo(This,out_pENCINFO)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCInfo2_GetInfo_Proxy( 
    IDebugENCInfo2 * This,
    /* [out] */ ENCINFO *out_pENCINFO);


void __RPC_STUB IDebugENCInfo2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCInfo2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugENCInfo2_INTERFACE_DEFINED__
#define __IEnumDebugENCInfo2_INTERFACE_DEFINED__

/* interface IEnumDebugENCInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugENCInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7B076AD1-BD51-11d2-9238-00A02448799A")
    IEnumDebugENCInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG in_NoOfElementsRequested,
            /* [length_is][size_is][out] */ IDebugENCInfo2 **out_ArrayOfpENCInfo,
            /* [out] */ ULONG *out_pNoOfElementsFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG in_NoOfElements) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *out_pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugENCInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugENCInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugENCInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugENCInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugENCInfo2 * This,
            /* [in] */ ULONG in_NoOfElementsRequested,
            /* [length_is][size_is][out] */ IDebugENCInfo2 **out_ArrayOfpENCInfo,
            /* [out] */ ULONG *out_pNoOfElementsFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugENCInfo2 * This,
            /* [in] */ ULONG in_NoOfElements);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugENCInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugENCInfo2 * This,
            /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugENCInfo2 * This,
            /* [out] */ ULONG *out_pCount);
        
        END_INTERFACE
    } IEnumDebugENCInfo2Vtbl;

    interface IEnumDebugENCInfo2
    {
        CONST_VTBL struct IEnumDebugENCInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugENCInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugENCInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugENCInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugENCInfo2_Next(This,in_NoOfElementsRequested,out_ArrayOfpENCInfo,out_pNoOfElementsFetched)	\
    (This)->lpVtbl -> Next(This,in_NoOfElementsRequested,out_ArrayOfpENCInfo,out_pNoOfElementsFetched)

#define IEnumDebugENCInfo2_Skip(This,in_NoOfElements)	\
    (This)->lpVtbl -> Skip(This,in_NoOfElements)

#define IEnumDebugENCInfo2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugENCInfo2_Clone(This,out_ppEnumENCInfo)	\
    (This)->lpVtbl -> Clone(This,out_ppEnumENCInfo)

#define IEnumDebugENCInfo2_GetCount(This,out_pCount)	\
    (This)->lpVtbl -> GetCount(This,out_pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugENCInfo2_Next_Proxy( 
    IEnumDebugENCInfo2 * This,
    /* [in] */ ULONG in_NoOfElementsRequested,
    /* [length_is][size_is][out] */ IDebugENCInfo2 **out_ArrayOfpENCInfo,
    /* [out] */ ULONG *out_pNoOfElementsFetched);


void __RPC_STUB IEnumDebugENCInfo2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCInfo2_Skip_Proxy( 
    IEnumDebugENCInfo2 * This,
    /* [in] */ ULONG in_NoOfElements);


void __RPC_STUB IEnumDebugENCInfo2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCInfo2_Reset_Proxy( 
    IEnumDebugENCInfo2 * This);


void __RPC_STUB IEnumDebugENCInfo2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCInfo2_Clone_Proxy( 
    IEnumDebugENCInfo2 * This,
    /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo);


void __RPC_STUB IEnumDebugENCInfo2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCInfo2_GetCount_Proxy( 
    IEnumDebugENCInfo2 * This,
    /* [out] */ ULONG *out_pCount);


void __RPC_STUB IEnumDebugENCInfo2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugENCInfo2_INTERFACE_DEFINED__ */


#ifndef __IDebugENCRelinkInfo2_INTERFACE_DEFINED__
#define __IDebugENCRelinkInfo2_INTERFACE_DEFINED__

/* interface IDebugENCRelinkInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCRelinkInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CBB63A8D-BD57-11d2-9238-00A02448799A")
    IDebugENCRelinkInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [out] */ BSTR *out_pbstrWorkingDir,
            /* [out] */ BSTR *out_pbstrCommand,
            /* [out] */ BSTR *out_pbstrOutFile,
            /* [out] */ BSTR *out_pbstrDebugFile,
            /* [out] */ BOOL *out_pbEditFromLib) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCRelinkInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCRelinkInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCRelinkInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCRelinkInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugENCRelinkInfo2 * This,
            /* [out] */ BSTR *out_pbstrWorkingDir,
            /* [out] */ BSTR *out_pbstrCommand,
            /* [out] */ BSTR *out_pbstrOutFile,
            /* [out] */ BSTR *out_pbstrDebugFile,
            /* [out] */ BOOL *out_pbEditFromLib);
        
        END_INTERFACE
    } IDebugENCRelinkInfo2Vtbl;

    interface IDebugENCRelinkInfo2
    {
        CONST_VTBL struct IDebugENCRelinkInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCRelinkInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCRelinkInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCRelinkInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCRelinkInfo2_GetInfo(This,out_pbstrWorkingDir,out_pbstrCommand,out_pbstrOutFile,out_pbstrDebugFile,out_pbEditFromLib)	\
    (This)->lpVtbl -> GetInfo(This,out_pbstrWorkingDir,out_pbstrCommand,out_pbstrOutFile,out_pbstrDebugFile,out_pbEditFromLib)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCRelinkInfo2_GetInfo_Proxy( 
    IDebugENCRelinkInfo2 * This,
    /* [out] */ BSTR *out_pbstrWorkingDir,
    /* [out] */ BSTR *out_pbstrCommand,
    /* [out] */ BSTR *out_pbstrOutFile,
    /* [out] */ BSTR *out_pbstrDebugFile,
    /* [out] */ BOOL *out_pbEditFromLib);


void __RPC_STUB IDebugENCRelinkInfo2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCRelinkInfo2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugENCRelinkInfo2_INTERFACE_DEFINED__
#define __IEnumDebugENCRelinkInfo2_INTERFACE_DEFINED__

/* interface IEnumDebugENCRelinkInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugENCRelinkInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E51BE743-BD57-11d2-9238-00A02448799A")
    IEnumDebugENCRelinkInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG in_NoOfElementsRequested,
            /* [length_is][size_is][out] */ IDebugENCRelinkInfo2 **out_ArrayOfpENCInfo,
            /* [out] */ ULONG *out_pNoOfElementsFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG in_NoOfElements) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugENCRelinkInfo2 **out_ppEnumENCRelinkInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *out_pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugENCRelinkInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugENCRelinkInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugENCRelinkInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugENCRelinkInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugENCRelinkInfo2 * This,
            /* [in] */ ULONG in_NoOfElementsRequested,
            /* [length_is][size_is][out] */ IDebugENCRelinkInfo2 **out_ArrayOfpENCInfo,
            /* [out] */ ULONG *out_pNoOfElementsFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugENCRelinkInfo2 * This,
            /* [in] */ ULONG in_NoOfElements);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugENCRelinkInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugENCRelinkInfo2 * This,
            /* [out] */ IEnumDebugENCRelinkInfo2 **out_ppEnumENCRelinkInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugENCRelinkInfo2 * This,
            /* [out] */ ULONG *out_pCount);
        
        END_INTERFACE
    } IEnumDebugENCRelinkInfo2Vtbl;

    interface IEnumDebugENCRelinkInfo2
    {
        CONST_VTBL struct IEnumDebugENCRelinkInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugENCRelinkInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugENCRelinkInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugENCRelinkInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugENCRelinkInfo2_Next(This,in_NoOfElementsRequested,out_ArrayOfpENCInfo,out_pNoOfElementsFetched)	\
    (This)->lpVtbl -> Next(This,in_NoOfElementsRequested,out_ArrayOfpENCInfo,out_pNoOfElementsFetched)

#define IEnumDebugENCRelinkInfo2_Skip(This,in_NoOfElements)	\
    (This)->lpVtbl -> Skip(This,in_NoOfElements)

#define IEnumDebugENCRelinkInfo2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugENCRelinkInfo2_Clone(This,out_ppEnumENCRelinkInfo)	\
    (This)->lpVtbl -> Clone(This,out_ppEnumENCRelinkInfo)

#define IEnumDebugENCRelinkInfo2_GetCount(This,out_pCount)	\
    (This)->lpVtbl -> GetCount(This,out_pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugENCRelinkInfo2_Next_Proxy( 
    IEnumDebugENCRelinkInfo2 * This,
    /* [in] */ ULONG in_NoOfElementsRequested,
    /* [length_is][size_is][out] */ IDebugENCRelinkInfo2 **out_ArrayOfpENCInfo,
    /* [out] */ ULONG *out_pNoOfElementsFetched);


void __RPC_STUB IEnumDebugENCRelinkInfo2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCRelinkInfo2_Skip_Proxy( 
    IEnumDebugENCRelinkInfo2 * This,
    /* [in] */ ULONG in_NoOfElements);


void __RPC_STUB IEnumDebugENCRelinkInfo2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCRelinkInfo2_Reset_Proxy( 
    IEnumDebugENCRelinkInfo2 * This);


void __RPC_STUB IEnumDebugENCRelinkInfo2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCRelinkInfo2_Clone_Proxy( 
    IEnumDebugENCRelinkInfo2 * This,
    /* [out] */ IEnumDebugENCRelinkInfo2 **out_ppEnumENCRelinkInfo);


void __RPC_STUB IEnumDebugENCRelinkInfo2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCRelinkInfo2_GetCount_Proxy( 
    IEnumDebugENCRelinkInfo2 * This,
    /* [out] */ ULONG *out_pCount);


void __RPC_STUB IEnumDebugENCRelinkInfo2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugENCRelinkInfo2_INTERFACE_DEFINED__ */


#ifndef __IDebugIDBInfo2_INTERFACE_DEFINED__
#define __IDebugIDBInfo2_INTERFACE_DEFINED__

/* interface IDebugIDBInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugIDBInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9B7DE9A9-BD59-11d2-9238-00A02448799A")
    IDebugIDBInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [out] */ BSTR *out_pbstrIDBFile) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugIDBInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugIDBInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugIDBInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugIDBInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugIDBInfo2 * This,
            /* [out] */ BSTR *out_pbstrIDBFile);
        
        END_INTERFACE
    } IDebugIDBInfo2Vtbl;

    interface IDebugIDBInfo2
    {
        CONST_VTBL struct IDebugIDBInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugIDBInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugIDBInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugIDBInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugIDBInfo2_GetInfo(This,out_pbstrIDBFile)	\
    (This)->lpVtbl -> GetInfo(This,out_pbstrIDBFile)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugIDBInfo2_GetInfo_Proxy( 
    IDebugIDBInfo2 * This,
    /* [out] */ BSTR *out_pbstrIDBFile);


void __RPC_STUB IDebugIDBInfo2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugIDBInfo2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugIDBInfo2_INTERFACE_DEFINED__
#define __IEnumDebugIDBInfo2_INTERFACE_DEFINED__

/* interface IEnumDebugIDBInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugIDBInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B34E469B-BD59-11d2-9238-00A02448799A")
    IEnumDebugIDBInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG in_NoOfElementsRequested,
            /* [length_is][size_is][out] */ IDebugIDBInfo2 **out_ArrayOfpIDBInfo2,
            /* [out] */ ULONG *out_pNoOfElementsFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG in_NoOfElements) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugIDBInfo2 **out_ppEnumIDBInfo2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *out_pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugIDBInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugIDBInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugIDBInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugIDBInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugIDBInfo2 * This,
            /* [in] */ ULONG in_NoOfElementsRequested,
            /* [length_is][size_is][out] */ IDebugIDBInfo2 **out_ArrayOfpIDBInfo2,
            /* [out] */ ULONG *out_pNoOfElementsFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugIDBInfo2 * This,
            /* [in] */ ULONG in_NoOfElements);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugIDBInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugIDBInfo2 * This,
            /* [out] */ IEnumDebugIDBInfo2 **out_ppEnumIDBInfo2);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugIDBInfo2 * This,
            /* [out] */ ULONG *out_pCount);
        
        END_INTERFACE
    } IEnumDebugIDBInfo2Vtbl;

    interface IEnumDebugIDBInfo2
    {
        CONST_VTBL struct IEnumDebugIDBInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugIDBInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugIDBInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugIDBInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugIDBInfo2_Next(This,in_NoOfElementsRequested,out_ArrayOfpIDBInfo2,out_pNoOfElementsFetched)	\
    (This)->lpVtbl -> Next(This,in_NoOfElementsRequested,out_ArrayOfpIDBInfo2,out_pNoOfElementsFetched)

#define IEnumDebugIDBInfo2_Skip(This,in_NoOfElements)	\
    (This)->lpVtbl -> Skip(This,in_NoOfElements)

#define IEnumDebugIDBInfo2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugIDBInfo2_Clone(This,out_ppEnumIDBInfo2)	\
    (This)->lpVtbl -> Clone(This,out_ppEnumIDBInfo2)

#define IEnumDebugIDBInfo2_GetCount(This,out_pCount)	\
    (This)->lpVtbl -> GetCount(This,out_pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugIDBInfo2_Next_Proxy( 
    IEnumDebugIDBInfo2 * This,
    /* [in] */ ULONG in_NoOfElementsRequested,
    /* [length_is][size_is][out] */ IDebugIDBInfo2 **out_ArrayOfpIDBInfo2,
    /* [out] */ ULONG *out_pNoOfElementsFetched);


void __RPC_STUB IEnumDebugIDBInfo2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugIDBInfo2_Skip_Proxy( 
    IEnumDebugIDBInfo2 * This,
    /* [in] */ ULONG in_NoOfElements);


void __RPC_STUB IEnumDebugIDBInfo2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugIDBInfo2_Reset_Proxy( 
    IEnumDebugIDBInfo2 * This);


void __RPC_STUB IEnumDebugIDBInfo2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugIDBInfo2_Clone_Proxy( 
    IEnumDebugIDBInfo2 * This,
    /* [out] */ IEnumDebugIDBInfo2 **out_ppEnumIDBInfo2);


void __RPC_STUB IEnumDebugIDBInfo2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugIDBInfo2_GetCount_Proxy( 
    IEnumDebugIDBInfo2 * This,
    /* [out] */ ULONG *out_pCount);


void __RPC_STUB IEnumDebugIDBInfo2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugIDBInfo2_INTERFACE_DEFINED__ */


#ifndef __IDebugENCBuildInfo2_INTERFACE_DEFINED__
#define __IDebugENCBuildInfo2_INTERFACE_DEFINED__

/* interface IDebugENCBuildInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCBuildInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EA70281B-BD58-11d2-9238-00A02448799A")
    IDebugENCBuildInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetTargetBuildInfo( 
            /* [in] */ LPCOLESTR in_szTargetPath,
            /* [out] */ BSTR *out_pbstrSourcePath,
            /* [out] */ BSTR *out_pbstrCommand,
            /* [out] */ BSTR *out_pbstrCurrentdir) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsTargetEligible( 
            /* [in] */ LPCOLESTR in_szTargetPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDebugIDBInfo( 
            /* [out] */ IEnumDebugIDBInfo2 **out_ppEnumIDBInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCBuildInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCBuildInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCBuildInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCBuildInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTargetBuildInfo )( 
            IDebugENCBuildInfo2 * This,
            /* [in] */ LPCOLESTR in_szTargetPath,
            /* [out] */ BSTR *out_pbstrSourcePath,
            /* [out] */ BSTR *out_pbstrCommand,
            /* [out] */ BSTR *out_pbstrCurrentdir);
        
        HRESULT ( STDMETHODCALLTYPE *IsTargetEligible )( 
            IDebugENCBuildInfo2 * This,
            /* [in] */ LPCOLESTR in_szTargetPath);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDebugIDBInfo )( 
            IDebugENCBuildInfo2 * This,
            /* [out] */ IEnumDebugIDBInfo2 **out_ppEnumIDBInfo);
        
        END_INTERFACE
    } IDebugENCBuildInfo2Vtbl;

    interface IDebugENCBuildInfo2
    {
        CONST_VTBL struct IDebugENCBuildInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCBuildInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCBuildInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCBuildInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCBuildInfo2_GetTargetBuildInfo(This,in_szTargetPath,out_pbstrSourcePath,out_pbstrCommand,out_pbstrCurrentdir)	\
    (This)->lpVtbl -> GetTargetBuildInfo(This,in_szTargetPath,out_pbstrSourcePath,out_pbstrCommand,out_pbstrCurrentdir)

#define IDebugENCBuildInfo2_IsTargetEligible(This,in_szTargetPath)	\
    (This)->lpVtbl -> IsTargetEligible(This,in_szTargetPath)

#define IDebugENCBuildInfo2_EnumDebugIDBInfo(This,out_ppEnumIDBInfo)	\
    (This)->lpVtbl -> EnumDebugIDBInfo(This,out_ppEnumIDBInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCBuildInfo2_GetTargetBuildInfo_Proxy( 
    IDebugENCBuildInfo2 * This,
    /* [in] */ LPCOLESTR in_szTargetPath,
    /* [out] */ BSTR *out_pbstrSourcePath,
    /* [out] */ BSTR *out_pbstrCommand,
    /* [out] */ BSTR *out_pbstrCurrentdir);


void __RPC_STUB IDebugENCBuildInfo2_GetTargetBuildInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCBuildInfo2_IsTargetEligible_Proxy( 
    IDebugENCBuildInfo2 * This,
    /* [in] */ LPCOLESTR in_szTargetPath);


void __RPC_STUB IDebugENCBuildInfo2_IsTargetEligible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCBuildInfo2_EnumDebugIDBInfo_Proxy( 
    IDebugENCBuildInfo2 * This,
    /* [out] */ IEnumDebugIDBInfo2 **out_ppEnumIDBInfo);


void __RPC_STUB IDebugENCBuildInfo2_EnumDebugIDBInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCBuildInfo2_INTERFACE_DEFINED__ */


#ifndef __IDebugENCUpdateOnRelinkEvent2_INTERFACE_DEFINED__
#define __IDebugENCUpdateOnRelinkEvent2_INTERFACE_DEFINED__

/* interface IDebugENCUpdateOnRelinkEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCUpdateOnRelinkEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0EBF1959-BD57-11d2-9238-00A02448799A")
    IDebugENCUpdateOnRelinkEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [out] */ IEnumDebugENCRelinkInfo2 **out_ppEnumENCRelinkInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCUpdateOnRelinkEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCUpdateOnRelinkEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCUpdateOnRelinkEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCUpdateOnRelinkEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugENCUpdateOnRelinkEvent2 * This,
            /* [out] */ IEnumDebugENCRelinkInfo2 **out_ppEnumENCRelinkInfo);
        
        END_INTERFACE
    } IDebugENCUpdateOnRelinkEvent2Vtbl;

    interface IDebugENCUpdateOnRelinkEvent2
    {
        CONST_VTBL struct IDebugENCUpdateOnRelinkEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCUpdateOnRelinkEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCUpdateOnRelinkEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCUpdateOnRelinkEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCUpdateOnRelinkEvent2_GetInfo(This,out_ppEnumENCRelinkInfo)	\
    (This)->lpVtbl -> GetInfo(This,out_ppEnumENCRelinkInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCUpdateOnRelinkEvent2_GetInfo_Proxy( 
    IDebugENCUpdateOnRelinkEvent2 * This,
    /* [out] */ IEnumDebugENCRelinkInfo2 **out_ppEnumENCRelinkInfo);


void __RPC_STUB IDebugENCUpdateOnRelinkEvent2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCUpdateOnRelinkEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugENCUpdateOnStaleCodeEvent2_INTERFACE_DEFINED__
#define __IDebugENCUpdateOnStaleCodeEvent2_INTERFACE_DEFINED__

/* interface IDebugENCUpdateOnStaleCodeEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCUpdateOnStaleCodeEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2F01EB29-BD57-11d2-9238-00A02448799A")
    IDebugENCUpdateOnStaleCodeEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHResult( 
            /* [out] */ HRESULT *out_pHResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCUpdateOnStaleCodeEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCUpdateOnStaleCodeEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCUpdateOnStaleCodeEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCUpdateOnStaleCodeEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugENCUpdateOnStaleCodeEvent2 * This,
            /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetHResult )( 
            IDebugENCUpdateOnStaleCodeEvent2 * This,
            /* [out] */ HRESULT *out_pHResult);
        
        END_INTERFACE
    } IDebugENCUpdateOnStaleCodeEvent2Vtbl;

    interface IDebugENCUpdateOnStaleCodeEvent2
    {
        CONST_VTBL struct IDebugENCUpdateOnStaleCodeEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCUpdateOnStaleCodeEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCUpdateOnStaleCodeEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCUpdateOnStaleCodeEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCUpdateOnStaleCodeEvent2_GetInfo(This,out_ppEnumENCInfo)	\
    (This)->lpVtbl -> GetInfo(This,out_ppEnumENCInfo)

#define IDebugENCUpdateOnStaleCodeEvent2_GetHResult(This,out_pHResult)	\
    (This)->lpVtbl -> GetHResult(This,out_pHResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCUpdateOnStaleCodeEvent2_GetInfo_Proxy( 
    IDebugENCUpdateOnStaleCodeEvent2 * This,
    /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo);


void __RPC_STUB IDebugENCUpdateOnStaleCodeEvent2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCUpdateOnStaleCodeEvent2_GetHResult_Proxy( 
    IDebugENCUpdateOnStaleCodeEvent2 * This,
    /* [out] */ HRESULT *out_pHResult);


void __RPC_STUB IDebugENCUpdateOnStaleCodeEvent2_GetHResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCUpdateOnStaleCodeEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugENCUpdate_INTERFACE_DEFINED__
#define __IDebugENCUpdate_INTERFACE_DEFINED__

/* interface IDebugENCUpdate */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCUpdate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("978BAEE7-BD4C-11d2-9238-00A02448799A")
    IDebugENCUpdate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumENCSnapshots( 
            /* [in] */ LPCOLESTR pszModule,
            /* [out] */ IEnumDebugENCSnapshots2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumENCSnapshotsByGuid( 
            /* [in] */ REFGUID guidModule,
            /* [out] */ IEnumDebugENCSnapshots2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CancelENC( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnENCAttemptComplete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCUpdateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCUpdate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCUpdate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCUpdate * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumENCSnapshots )( 
            IDebugENCUpdate * This,
            /* [in] */ LPCOLESTR pszModule,
            /* [out] */ IEnumDebugENCSnapshots2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumENCSnapshotsByGuid )( 
            IDebugENCUpdate * This,
            /* [in] */ REFGUID guidModule,
            /* [out] */ IEnumDebugENCSnapshots2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *CancelENC )( 
            IDebugENCUpdate * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnENCAttemptComplete )( 
            IDebugENCUpdate * This);
        
        END_INTERFACE
    } IDebugENCUpdateVtbl;

    interface IDebugENCUpdate
    {
        CONST_VTBL struct IDebugENCUpdateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCUpdate_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCUpdate_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCUpdate_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCUpdate_EnumENCSnapshots(This,pszModule,ppEnum)	\
    (This)->lpVtbl -> EnumENCSnapshots(This,pszModule,ppEnum)

#define IDebugENCUpdate_EnumENCSnapshotsByGuid(This,guidModule,ppEnum)	\
    (This)->lpVtbl -> EnumENCSnapshotsByGuid(This,guidModule,ppEnum)

#define IDebugENCUpdate_CancelENC(This)	\
    (This)->lpVtbl -> CancelENC(This)

#define IDebugENCUpdate_OnENCAttemptComplete(This)	\
    (This)->lpVtbl -> OnENCAttemptComplete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCUpdate_EnumENCSnapshots_Proxy( 
    IDebugENCUpdate * This,
    /* [in] */ LPCOLESTR pszModule,
    /* [out] */ IEnumDebugENCSnapshots2 **ppEnum);


void __RPC_STUB IDebugENCUpdate_EnumENCSnapshots_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCUpdate_EnumENCSnapshotsByGuid_Proxy( 
    IDebugENCUpdate * This,
    /* [in] */ REFGUID guidModule,
    /* [out] */ IEnumDebugENCSnapshots2 **ppEnum);


void __RPC_STUB IDebugENCUpdate_EnumENCSnapshotsByGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCUpdate_CancelENC_Proxy( 
    IDebugENCUpdate * This);


void __RPC_STUB IDebugENCUpdate_CancelENC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCUpdate_OnENCAttemptComplete_Proxy( 
    IDebugENCUpdate * This);


void __RPC_STUB IDebugENCUpdate_OnENCAttemptComplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCUpdate_INTERFACE_DEFINED__ */


#ifndef __IDebugENCSnapshot2_INTERFACE_DEFINED__
#define __IDebugENCSnapshot2_INTERFACE_DEFINED__

/* interface IDebugENCSnapshot2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugENCSnapshot2_0001
    {	ENC_SNAPSHOT_TYPE_COMPLUS	= 0x1,
	ENC_SNAPSHOT_TYPE_CPP	= 0x2
    } ;
typedef DWORD ENC_SNAPSHOT_TYPE;

typedef struct _ENC_SNAPSHOT_COMPLUS
    {
    IDebugComPlusSnapshot2 *pcpSnapshot;
    } 	ENC_SNAPSHOT_COMPLUS;

typedef struct _ENC_SNAPSHOT_CPP
    {
    DWORD dwNYI;
    } 	ENC_SNAPSHOT_CPP;

typedef struct _ENC_SNAPSHOT
    {
    ENC_SNAPSHOT_TYPE ssType;
    /* [switch_is] */ /* [switch_type] */ union __MIDL_IDebugENCSnapshot2_0002
        {
        /* [case()] */ ENC_SNAPSHOT_COMPLUS encComPlus;
        /* [case()] */ ENC_SNAPSHOT_CPP encCpp;
        /* [default] */ DWORD unused;
        } 	encSnapshot;
    } 	ENC_SNAPSHOT;

typedef struct _ENC_SNAPSHOT_INFO
    {
    IDebugProgram2 *pProgram;
    ENC_SNAPSHOT encSnapshot;
    } 	ENC_SNAPSHOT_INFO;


EXTERN_C const IID IID_IDebugENCSnapshot2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6f94d0e-78c2-11d2-8ffe-00c04fa38314")
    IDebugENCSnapshot2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetENCSnapshotInfo( 
            /* [out] */ ENC_SNAPSHOT_INFO *pSnapshotInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ApplyCodeChange( 
            /* [in] */ ULONG in_NoOfLineMaps,
            /* [size_is][in] */ IDebugENCLineMap **in_ArrayOfLineMaps,
            /* [in] */ IServiceProvider *in_pServiceProvider,
            /* [in] */ BOOL in_fOnContinue,
            /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CommitChange( 
            /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCSnapshot2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCSnapshot2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCSnapshot2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCSnapshot2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetENCSnapshotInfo )( 
            IDebugENCSnapshot2 * This,
            /* [out] */ ENC_SNAPSHOT_INFO *pSnapshotInfo);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyCodeChange )( 
            IDebugENCSnapshot2 * This,
            /* [in] */ ULONG in_NoOfLineMaps,
            /* [size_is][in] */ IDebugENCLineMap **in_ArrayOfLineMaps,
            /* [in] */ IServiceProvider *in_pServiceProvider,
            /* [in] */ BOOL in_fOnContinue,
            /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo);
        
        HRESULT ( STDMETHODCALLTYPE *CommitChange )( 
            IDebugENCSnapshot2 * This,
            /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo);
        
        END_INTERFACE
    } IDebugENCSnapshot2Vtbl;

    interface IDebugENCSnapshot2
    {
        CONST_VTBL struct IDebugENCSnapshot2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCSnapshot2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCSnapshot2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCSnapshot2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCSnapshot2_GetENCSnapshotInfo(This,pSnapshotInfo)	\
    (This)->lpVtbl -> GetENCSnapshotInfo(This,pSnapshotInfo)

#define IDebugENCSnapshot2_ApplyCodeChange(This,in_NoOfLineMaps,in_ArrayOfLineMaps,in_pServiceProvider,in_fOnContinue,out_ppEnumENCInfo)	\
    (This)->lpVtbl -> ApplyCodeChange(This,in_NoOfLineMaps,in_ArrayOfLineMaps,in_pServiceProvider,in_fOnContinue,out_ppEnumENCInfo)

#define IDebugENCSnapshot2_CommitChange(This,out_ppEnumENCInfo)	\
    (This)->lpVtbl -> CommitChange(This,out_ppEnumENCInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCSnapshot2_GetENCSnapshotInfo_Proxy( 
    IDebugENCSnapshot2 * This,
    /* [out] */ ENC_SNAPSHOT_INFO *pSnapshotInfo);


void __RPC_STUB IDebugENCSnapshot2_GetENCSnapshotInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCSnapshot2_ApplyCodeChange_Proxy( 
    IDebugENCSnapshot2 * This,
    /* [in] */ ULONG in_NoOfLineMaps,
    /* [size_is][in] */ IDebugENCLineMap **in_ArrayOfLineMaps,
    /* [in] */ IServiceProvider *in_pServiceProvider,
    /* [in] */ BOOL in_fOnContinue,
    /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo);


void __RPC_STUB IDebugENCSnapshot2_ApplyCodeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugENCSnapshot2_CommitChange_Proxy( 
    IDebugENCSnapshot2 * This,
    /* [out] */ IEnumDebugENCInfo2 **out_ppEnumENCInfo);


void __RPC_STUB IDebugENCSnapshot2_CommitChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCSnapshot2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugENCSnapshots2_INTERFACE_DEFINED__
#define __IEnumDebugENCSnapshots2_INTERFACE_DEFINED__

/* interface IEnumDebugENCSnapshots2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugENCSnapshots2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6f94d1a-78c2-11d2-8ffe-00c04fa38314")
    IEnumDebugENCSnapshots2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugENCSnapshot2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugENCSnapshots2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugENCSnapshots2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugENCSnapshots2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugENCSnapshots2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugENCSnapshots2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugENCSnapshots2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugENCSnapshot2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugENCSnapshots2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugENCSnapshots2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugENCSnapshots2 * This,
            /* [out] */ IEnumDebugENCSnapshots2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugENCSnapshots2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugENCSnapshots2Vtbl;

    interface IEnumDebugENCSnapshots2
    {
        CONST_VTBL struct IEnumDebugENCSnapshots2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugENCSnapshots2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugENCSnapshots2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugENCSnapshots2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugENCSnapshots2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugENCSnapshots2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugENCSnapshots2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugENCSnapshots2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugENCSnapshots2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugENCSnapshots2_Next_Proxy( 
    IEnumDebugENCSnapshots2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugENCSnapshot2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugENCSnapshots2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCSnapshots2_Skip_Proxy( 
    IEnumDebugENCSnapshots2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugENCSnapshots2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCSnapshots2_Reset_Proxy( 
    IEnumDebugENCSnapshots2 * This);


void __RPC_STUB IEnumDebugENCSnapshots2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCSnapshots2_Clone_Proxy( 
    IEnumDebugENCSnapshots2 * This,
    /* [out] */ IEnumDebugENCSnapshots2 **ppEnum);


void __RPC_STUB IEnumDebugENCSnapshots2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugENCSnapshots2_GetCount_Proxy( 
    IEnumDebugENCSnapshots2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugENCSnapshots2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugENCSnapshots2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugErrorInfos2_INTERFACE_DEFINED__
#define __IEnumDebugErrorInfos2_INTERFACE_DEFINED__

/* interface IEnumDebugErrorInfos2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugErrorInfos2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6f94d23-78c2-11d2-8ffe-00c04fa38314")
    IEnumDebugErrorInfos2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IErrorInfo **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugErrorInfos2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugErrorInfos2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugErrorInfos2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugErrorInfos2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugErrorInfos2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugErrorInfos2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IErrorInfo **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugErrorInfos2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugErrorInfos2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugErrorInfos2 * This,
            /* [out] */ IEnumDebugErrorInfos2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugErrorInfos2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugErrorInfos2Vtbl;

    interface IEnumDebugErrorInfos2
    {
        CONST_VTBL struct IEnumDebugErrorInfos2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugErrorInfos2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugErrorInfos2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugErrorInfos2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugErrorInfos2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugErrorInfos2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugErrorInfos2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugErrorInfos2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugErrorInfos2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugErrorInfos2_Next_Proxy( 
    IEnumDebugErrorInfos2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IErrorInfo **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugErrorInfos2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugErrorInfos2_Skip_Proxy( 
    IEnumDebugErrorInfos2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugErrorInfos2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugErrorInfos2_Reset_Proxy( 
    IEnumDebugErrorInfos2 * This);


void __RPC_STUB IEnumDebugErrorInfos2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugErrorInfos2_Clone_Proxy( 
    IEnumDebugErrorInfos2 * This,
    /* [out] */ IEnumDebugErrorInfos2 **ppEnum);


void __RPC_STUB IEnumDebugErrorInfos2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugErrorInfos2_GetCount_Proxy( 
    IEnumDebugErrorInfos2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugErrorInfos2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugErrorInfos2_INTERFACE_DEFINED__ */


#ifndef __IDebugComPlusSnapshot2_INTERFACE_DEFINED__
#define __IDebugComPlusSnapshot2_INTERFACE_DEFINED__

/* interface IDebugComPlusSnapshot2 */
/* [unique][uuid][object] */ 

typedef struct _IL_MAP
    {
    ULONG32 oldOffset;
    ULONG32 newOffset;
    BOOL fAccurate;
    } 	IL_MAP;


EXTERN_C const IID IID_IDebugComPlusSnapshot2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6f94d20-78c2-11d2-8ffe-00c04fa38314")
    IDebugComPlusSnapshot2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CopyMetaData( 
            /* [in] */ IStream *pIStream,
            /* [out] */ GUID *pMvid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMvid( 
            /* [out] */ GUID *pMvid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRoDataRVA( 
            /* [out] */ ULONG32 *pRoDataRVA) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRwDataRVA( 
            /* [out] */ ULONG32 *pRwDataRVA) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPEBytes( 
            /* [length_is][size_is][in] */ BYTE *pBytes,
            /* [in] */ DWORD dwBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetILMap( 
            /* [in] */ DWORD mdFunction,
            /* [in] */ ULONG cMapSize,
            /* [size_is][in] */ IL_MAP map[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSymbolBytes( 
            /* [length_is][size_is][in] */ BYTE *pBytes,
            /* [in] */ DWORD dwBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSymbolProvider( 
            /* [out] */ IDebugComPlusSymbolProvider **ppSym) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAppDomainAndModuleIDs( 
            /* [out] */ ULONG32 *pulAppDomainID,
            /* [out] */ GUID *pguidModule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RequestILMap( 
            /* [in] */ DWORD mdFunction) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateILMaps( 
            /* [in] */ ULONG in_NoOfLineMaps,
            /* [size_is][in] */ IDebugENCLineMap **in_ArrayOfLineMaps) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugComPlusSnapshot2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugComPlusSnapshot2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugComPlusSnapshot2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugComPlusSnapshot2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CopyMetaData )( 
            IDebugComPlusSnapshot2 * This,
            /* [in] */ IStream *pIStream,
            /* [out] */ GUID *pMvid);
        
        HRESULT ( STDMETHODCALLTYPE *GetMvid )( 
            IDebugComPlusSnapshot2 * This,
            /* [out] */ GUID *pMvid);
        
        HRESULT ( STDMETHODCALLTYPE *GetRoDataRVA )( 
            IDebugComPlusSnapshot2 * This,
            /* [out] */ ULONG32 *pRoDataRVA);
        
        HRESULT ( STDMETHODCALLTYPE *GetRwDataRVA )( 
            IDebugComPlusSnapshot2 * This,
            /* [out] */ ULONG32 *pRwDataRVA);
        
        HRESULT ( STDMETHODCALLTYPE *SetPEBytes )( 
            IDebugComPlusSnapshot2 * This,
            /* [length_is][size_is][in] */ BYTE *pBytes,
            /* [in] */ DWORD dwBytes);
        
        HRESULT ( STDMETHODCALLTYPE *SetILMap )( 
            IDebugComPlusSnapshot2 * This,
            /* [in] */ DWORD mdFunction,
            /* [in] */ ULONG cMapSize,
            /* [size_is][in] */ IL_MAP map[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *SetSymbolBytes )( 
            IDebugComPlusSnapshot2 * This,
            /* [length_is][size_is][in] */ BYTE *pBytes,
            /* [in] */ DWORD dwBytes);
        
        HRESULT ( STDMETHODCALLTYPE *GetSymbolProvider )( 
            IDebugComPlusSnapshot2 * This,
            /* [out] */ IDebugComPlusSymbolProvider **ppSym);
        
        HRESULT ( STDMETHODCALLTYPE *GetAppDomainAndModuleIDs )( 
            IDebugComPlusSnapshot2 * This,
            /* [out] */ ULONG32 *pulAppDomainID,
            /* [out] */ GUID *pguidModule);
        
        HRESULT ( STDMETHODCALLTYPE *RequestILMap )( 
            IDebugComPlusSnapshot2 * This,
            /* [in] */ DWORD mdFunction);
        
        HRESULT ( STDMETHODCALLTYPE *CreateILMaps )( 
            IDebugComPlusSnapshot2 * This,
            /* [in] */ ULONG in_NoOfLineMaps,
            /* [size_is][in] */ IDebugENCLineMap **in_ArrayOfLineMaps);
        
        END_INTERFACE
    } IDebugComPlusSnapshot2Vtbl;

    interface IDebugComPlusSnapshot2
    {
        CONST_VTBL struct IDebugComPlusSnapshot2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugComPlusSnapshot2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugComPlusSnapshot2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugComPlusSnapshot2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugComPlusSnapshot2_CopyMetaData(This,pIStream,pMvid)	\
    (This)->lpVtbl -> CopyMetaData(This,pIStream,pMvid)

#define IDebugComPlusSnapshot2_GetMvid(This,pMvid)	\
    (This)->lpVtbl -> GetMvid(This,pMvid)

#define IDebugComPlusSnapshot2_GetRoDataRVA(This,pRoDataRVA)	\
    (This)->lpVtbl -> GetRoDataRVA(This,pRoDataRVA)

#define IDebugComPlusSnapshot2_GetRwDataRVA(This,pRwDataRVA)	\
    (This)->lpVtbl -> GetRwDataRVA(This,pRwDataRVA)

#define IDebugComPlusSnapshot2_SetPEBytes(This,pBytes,dwBytes)	\
    (This)->lpVtbl -> SetPEBytes(This,pBytes,dwBytes)

#define IDebugComPlusSnapshot2_SetILMap(This,mdFunction,cMapSize,map)	\
    (This)->lpVtbl -> SetILMap(This,mdFunction,cMapSize,map)

#define IDebugComPlusSnapshot2_SetSymbolBytes(This,pBytes,dwBytes)	\
    (This)->lpVtbl -> SetSymbolBytes(This,pBytes,dwBytes)

#define IDebugComPlusSnapshot2_GetSymbolProvider(This,ppSym)	\
    (This)->lpVtbl -> GetSymbolProvider(This,ppSym)

#define IDebugComPlusSnapshot2_GetAppDomainAndModuleIDs(This,pulAppDomainID,pguidModule)	\
    (This)->lpVtbl -> GetAppDomainAndModuleIDs(This,pulAppDomainID,pguidModule)

#define IDebugComPlusSnapshot2_RequestILMap(This,mdFunction)	\
    (This)->lpVtbl -> RequestILMap(This,mdFunction)

#define IDebugComPlusSnapshot2_CreateILMaps(This,in_NoOfLineMaps,in_ArrayOfLineMaps)	\
    (This)->lpVtbl -> CreateILMaps(This,in_NoOfLineMaps,in_ArrayOfLineMaps)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_CopyMetaData_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [in] */ IStream *pIStream,
    /* [out] */ GUID *pMvid);


void __RPC_STUB IDebugComPlusSnapshot2_CopyMetaData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_GetMvid_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [out] */ GUID *pMvid);


void __RPC_STUB IDebugComPlusSnapshot2_GetMvid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_GetRoDataRVA_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [out] */ ULONG32 *pRoDataRVA);


void __RPC_STUB IDebugComPlusSnapshot2_GetRoDataRVA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_GetRwDataRVA_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [out] */ ULONG32 *pRwDataRVA);


void __RPC_STUB IDebugComPlusSnapshot2_GetRwDataRVA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_SetPEBytes_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [length_is][size_is][in] */ BYTE *pBytes,
    /* [in] */ DWORD dwBytes);


void __RPC_STUB IDebugComPlusSnapshot2_SetPEBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_SetILMap_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [in] */ DWORD mdFunction,
    /* [in] */ ULONG cMapSize,
    /* [size_is][in] */ IL_MAP map[  ]);


void __RPC_STUB IDebugComPlusSnapshot2_SetILMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_SetSymbolBytes_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [length_is][size_is][in] */ BYTE *pBytes,
    /* [in] */ DWORD dwBytes);


void __RPC_STUB IDebugComPlusSnapshot2_SetSymbolBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_GetSymbolProvider_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [out] */ IDebugComPlusSymbolProvider **ppSym);


void __RPC_STUB IDebugComPlusSnapshot2_GetSymbolProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_GetAppDomainAndModuleIDs_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [out] */ ULONG32 *pulAppDomainID,
    /* [out] */ GUID *pguidModule);


void __RPC_STUB IDebugComPlusSnapshot2_GetAppDomainAndModuleIDs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_RequestILMap_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [in] */ DWORD mdFunction);


void __RPC_STUB IDebugComPlusSnapshot2_RequestILMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSnapshot2_CreateILMaps_Proxy( 
    IDebugComPlusSnapshot2 * This,
    /* [in] */ ULONG in_NoOfLineMaps,
    /* [size_is][in] */ IDebugENCLineMap **in_ArrayOfLineMaps);


void __RPC_STUB IDebugComPlusSnapshot2_CreateILMaps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugComPlusSnapshot2_INTERFACE_DEFINED__ */


#ifndef __IDebugNativeSnapshot2_INTERFACE_DEFINED__
#define __IDebugNativeSnapshot2_INTERFACE_DEFINED__

/* interface IDebugNativeSnapshot2 */
/* [unique][uuid][object] */ 

typedef 
enum _ENC_NOTIFY
    {	ENC_NOTIFY_COMPILE_START	= 0,
	ENC_NOTIFY_COMPILE_END	= ENC_NOTIFY_COMPILE_START + 1
    } 	ENC_NOTIFY;


EXTERN_C const IID IID_IDebugNativeSnapshot2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("461fda3e-bba5-11d2-b10f-00c04f72dc32")
    IDebugNativeSnapshot2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE HasDependentTargets( 
            /* [in] */ LPCOLESTR pszSourcePath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDependentImages( 
            /* [in] */ LPCOLESTR pszSourcePath,
            /* [out] */ IEnumString **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDependentTargets( 
            /* [in] */ ULONG cSrc,
            /* [size_is][in] */ LPCOLESTR pszSourcePath[  ],
            /* [out] */ IEnumString **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTargetBuildInfo( 
            /* [in] */ LPCOLESTR pszTargetPath,
            /* [out] */ BSTR *pbstrSourcePath,
            /* [out] */ BSTR *pbstrCommand,
            /* [out] */ BSTR *pbstrCommandArgs,
            /* [out] */ BSTR *pbstrCurrentDir) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Notify( 
            /* [in] */ ENC_NOTIFY encnotify) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsTargetEligible( 
            /* [in] */ LPCOLESTR pszTargetPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddRecompiledTarget( 
            /* [in] */ LPCOLESTR in_szTargetPath,
            /* [in] */ LPCOLESTR in_szSavedTargetPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugNativeSnapshot2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugNativeSnapshot2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugNativeSnapshot2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugNativeSnapshot2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *HasDependentTargets )( 
            IDebugNativeSnapshot2 * This,
            /* [in] */ LPCOLESTR pszSourcePath);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDependentImages )( 
            IDebugNativeSnapshot2 * This,
            /* [in] */ LPCOLESTR pszSourcePath,
            /* [out] */ IEnumString **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDependentTargets )( 
            IDebugNativeSnapshot2 * This,
            /* [in] */ ULONG cSrc,
            /* [size_is][in] */ LPCOLESTR pszSourcePath[  ],
            /* [out] */ IEnumString **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetTargetBuildInfo )( 
            IDebugNativeSnapshot2 * This,
            /* [in] */ LPCOLESTR pszTargetPath,
            /* [out] */ BSTR *pbstrSourcePath,
            /* [out] */ BSTR *pbstrCommand,
            /* [out] */ BSTR *pbstrCommandArgs,
            /* [out] */ BSTR *pbstrCurrentDir);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDebugNativeSnapshot2 * This,
            /* [in] */ ENC_NOTIFY encnotify);
        
        HRESULT ( STDMETHODCALLTYPE *IsTargetEligible )( 
            IDebugNativeSnapshot2 * This,
            /* [in] */ LPCOLESTR pszTargetPath);
        
        HRESULT ( STDMETHODCALLTYPE *AddRecompiledTarget )( 
            IDebugNativeSnapshot2 * This,
            /* [in] */ LPCOLESTR in_szTargetPath,
            /* [in] */ LPCOLESTR in_szSavedTargetPath);
        
        END_INTERFACE
    } IDebugNativeSnapshot2Vtbl;

    interface IDebugNativeSnapshot2
    {
        CONST_VTBL struct IDebugNativeSnapshot2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugNativeSnapshot2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugNativeSnapshot2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugNativeSnapshot2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugNativeSnapshot2_HasDependentTargets(This,pszSourcePath)	\
    (This)->lpVtbl -> HasDependentTargets(This,pszSourcePath)

#define IDebugNativeSnapshot2_EnumDependentImages(This,pszSourcePath,ppEnum)	\
    (This)->lpVtbl -> EnumDependentImages(This,pszSourcePath,ppEnum)

#define IDebugNativeSnapshot2_EnumDependentTargets(This,cSrc,pszSourcePath,ppEnum)	\
    (This)->lpVtbl -> EnumDependentTargets(This,cSrc,pszSourcePath,ppEnum)

#define IDebugNativeSnapshot2_GetTargetBuildInfo(This,pszTargetPath,pbstrSourcePath,pbstrCommand,pbstrCommandArgs,pbstrCurrentDir)	\
    (This)->lpVtbl -> GetTargetBuildInfo(This,pszTargetPath,pbstrSourcePath,pbstrCommand,pbstrCommandArgs,pbstrCurrentDir)

#define IDebugNativeSnapshot2_Notify(This,encnotify)	\
    (This)->lpVtbl -> Notify(This,encnotify)

#define IDebugNativeSnapshot2_IsTargetEligible(This,pszTargetPath)	\
    (This)->lpVtbl -> IsTargetEligible(This,pszTargetPath)

#define IDebugNativeSnapshot2_AddRecompiledTarget(This,in_szTargetPath,in_szSavedTargetPath)	\
    (This)->lpVtbl -> AddRecompiledTarget(This,in_szTargetPath,in_szSavedTargetPath)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugNativeSnapshot2_HasDependentTargets_Proxy( 
    IDebugNativeSnapshot2 * This,
    /* [in] */ LPCOLESTR pszSourcePath);


void __RPC_STUB IDebugNativeSnapshot2_HasDependentTargets_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugNativeSnapshot2_EnumDependentImages_Proxy( 
    IDebugNativeSnapshot2 * This,
    /* [in] */ LPCOLESTR pszSourcePath,
    /* [out] */ IEnumString **ppEnum);


void __RPC_STUB IDebugNativeSnapshot2_EnumDependentImages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugNativeSnapshot2_EnumDependentTargets_Proxy( 
    IDebugNativeSnapshot2 * This,
    /* [in] */ ULONG cSrc,
    /* [size_is][in] */ LPCOLESTR pszSourcePath[  ],
    /* [out] */ IEnumString **ppEnum);


void __RPC_STUB IDebugNativeSnapshot2_EnumDependentTargets_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugNativeSnapshot2_GetTargetBuildInfo_Proxy( 
    IDebugNativeSnapshot2 * This,
    /* [in] */ LPCOLESTR pszTargetPath,
    /* [out] */ BSTR *pbstrSourcePath,
    /* [out] */ BSTR *pbstrCommand,
    /* [out] */ BSTR *pbstrCommandArgs,
    /* [out] */ BSTR *pbstrCurrentDir);


void __RPC_STUB IDebugNativeSnapshot2_GetTargetBuildInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugNativeSnapshot2_Notify_Proxy( 
    IDebugNativeSnapshot2 * This,
    /* [in] */ ENC_NOTIFY encnotify);


void __RPC_STUB IDebugNativeSnapshot2_Notify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugNativeSnapshot2_IsTargetEligible_Proxy( 
    IDebugNativeSnapshot2 * This,
    /* [in] */ LPCOLESTR pszTargetPath);


void __RPC_STUB IDebugNativeSnapshot2_IsTargetEligible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugNativeSnapshot2_AddRecompiledTarget_Proxy( 
    IDebugNativeSnapshot2 * This,
    /* [in] */ LPCOLESTR in_szTargetPath,
    /* [in] */ LPCOLESTR in_szSavedTargetPath);


void __RPC_STUB IDebugNativeSnapshot2_AddRecompiledTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugNativeSnapshot2_INTERFACE_DEFINED__ */


#ifndef __IDebugENCStackFrame2_INTERFACE_DEFINED__
#define __IDebugENCStackFrame2_INTERFACE_DEFINED__

/* interface IDebugENCStackFrame2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCStackFrame2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B3C64D7F-DB9D-47c7-B479-C579C7F07103")
    IDebugENCStackFrame2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAllLocalsProperty( 
            /* [out] */ IDebugProperty2 **ppProperty) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCStackFrame2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCStackFrame2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCStackFrame2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCStackFrame2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllLocalsProperty )( 
            IDebugENCStackFrame2 * This,
            /* [out] */ IDebugProperty2 **ppProperty);
        
        END_INTERFACE
    } IDebugENCStackFrame2Vtbl;

    interface IDebugENCStackFrame2
    {
        CONST_VTBL struct IDebugENCStackFrame2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCStackFrame2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCStackFrame2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCStackFrame2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCStackFrame2_GetAllLocalsProperty(This,ppProperty)	\
    (This)->lpVtbl -> GetAllLocalsProperty(This,ppProperty)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCStackFrame2_GetAllLocalsProperty_Proxy( 
    IDebugENCStackFrame2 * This,
    /* [out] */ IDebugProperty2 **ppProperty);


void __RPC_STUB IDebugENCStackFrame2_GetAllLocalsProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCStackFrame2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_enc_0389 */
/* [local] */ 

typedef INT32 _mdToken;



extern RPC_IF_HANDLE __MIDL_itf_enc_0389_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_enc_0389_v0_0_s_ifspec;

#ifndef __IDebugMetaDataEmit2_INTERFACE_DEFINED__
#define __IDebugMetaDataEmit2_INTERFACE_DEFINED__

/* interface IDebugMetaDataEmit2 */
/* [unique][uuid][object] */ 

typedef struct _FIELD_OFFSET
    {
    _mdToken ridOfField;
    ULONG ulOffset;
    } 	FIELD_OFFSET;

typedef struct _IMAGE_FIXUPENTRY
    {
    ULONG ulRVA;
    ULONG Count;
    } 	IMAGE_FIXUPENTRY;


EXTERN_C const IID IID_IDebugMetaDataEmit2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6f94d21-78c2-11d2-8ffe-00c04fa38314")
    IDebugMetaDataEmit2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetModuleProps( 
            /* [in] */ LPOLESTR szName,
            /* [in] */ GUID *ppid,
            /* [in] */ LCID lcid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( 
            /* [in] */ LPOLESTR szFile,
            /* [in] */ DWORD dwSaveFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveToStream( 
            /* [in] */ IStream *pIStream,
            /* [in] */ DWORD dwSaveFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSaveSize( 
            /* [in] */ DWORD fSave,
            /* [out] */ DWORD *pdwSaveSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineCustomValueAsBlob( 
            /* [in] */ _mdToken tkObj,
            /* [in] */ LPOLESTR szName,
            /* [size_is][in] */ BYTE *pCustomValue,
            /* [in] */ ULONG cbCustomValue,
            /* [in] */ _mdToken *pcv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineTypeDef( 
            /* [in] */ LPOLESTR szNamespace,
            /* [in] */ LPOLESTR szTypeDef,
            /* [in] */ GUID *pguid,
            /* [in] */ INT64 *pVer,
            /* [in] */ DWORD dwTypeDefFlags,
            /* [in] */ _mdToken tkExtends,
            /* [in] */ DWORD dwExtendsFlags,
            /* [in] */ DWORD dwImplements,
            /* [length_is][size_is][out][in] */ _mdToken rtkImplements[  ],
            /* [in] */ DWORD dwEvents,
            /* [length_is][size_is][out][in] */ _mdToken rtkEvents[  ],
            /* [out] */ _mdToken *ptd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTypeDefProps( 
            /* [in] */ _mdToken td,
            /* [in] */ INT64 *pVer,
            /* [in] */ DWORD dwTypeDefFlags,
            /* [in] */ _mdToken tkExtends,
            /* [in] */ DWORD dwExtendsFlags,
            /* [in] */ DWORD dwImplements,
            /* [length_is][size_is][in] */ _mdToken rtkImplements[  ],
            /* [in] */ DWORD dwEvents,
            /* [length_is][size_is][in] */ _mdToken rtkEvents[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClassSvcsContext( 
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwClassActivateAttr,
            /* [in] */ DWORD dwClassThreadAttr,
            /* [in] */ DWORD dwXactionAttr,
            /* [in] */ DWORD dwSynchAttr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineTypeRefByGUID( 
            /* [in] */ GUID *pguid,
            /* [out] */ _mdToken *ptr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetModuleReg( 
            /* [in] */ DWORD dwModuleRegAttr,
            /* [in] */ GUID *pguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClassReg( 
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szProgID,
            /* [in] */ LPOLESTR szVIProgID,
            /* [in] */ LPOLESTR szIconURL,
            /* [in] */ ULONG ulIconResource,
            /* [in] */ LPOLESTR szSmallIconURL,
            /* [in] */ ULONG ulSmallIconResource,
            /* [in] */ LPOLESTR szDefaultDispName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetIfaceReg( 
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwIfaceSvcs,
            /* [in] */ GUID *proxyStub) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCategoryImpl( 
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwImpl,
            /* [length_is][size_is][in] */ GUID rGuidCoCatImpl[  ],
            /* [in] */ DWORD dwReqd,
            /* [length_is][size_is][in] */ GUID rGuidCoCatReqd[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRedirectProgID( 
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwProgIds,
            /* [length_is][size_is][in] */ LPOLESTR rszRedirectProgID[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMimeTypeImpl( 
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwTypes,
            /* [length_is][size_is][in] */ LPOLESTR rszMimeType[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetFormatImpl( 
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwSupported,
            /* [length_is][size_is][in] */ LPOLESTR rszFormatSupported[  ],
            /* [in] */ DWORD dwFrom,
            /* [length_is][size_is][in] */ LPOLESTR rszFormatConvertsFrom[  ],
            /* [in] */ DWORD dwTo,
            /* [length_is][size_is][in] */ LPOLESTR rszFormatConvertsTo[  ],
            /* [in] */ DWORD dwDefault,
            /* [length_is][size_is][in] */ LPOLESTR rszFormatDefault[  ],
            /* [in] */ DWORD dwExt,
            /* [length_is][size_is][in] */ LPOLESTR rszFileExt[  ],
            /* [in] */ DWORD dwType,
            /* [length_is][size_is][in] */ LPOLESTR rszFileType[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRoleCheck( 
            /* [in] */ _mdToken tk,
            /* [in] */ DWORD dwNames,
            /* [length_is][size_is][in] */ LPOLESTR rszName[  ],
            /* [in] */ DWORD dwFlags,
            /* [length_is][size_is][in] */ DWORD rdwRoleFlags[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineMethod( 
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szName,
            /* [in] */ DWORD dwMethodFlags,
            /* [size_is][in] */ BYTE *pvSigBlob,
            /* [in] */ ULONG cbSigBlob,
            /* [in] */ ULONG ulSlot,
            /* [in] */ ULONG ulCodeRVA,
            /* [in] */ DWORD dwImplFlags,
            /* [out] */ _mdToken *pmd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineField( 
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szName,
            /* [in] */ DWORD dwFieldFlags,
            /* [size_is][in] */ BYTE *pvSigBlob,
            /* [in] */ ULONG cbSigBlob,
            /* [in] */ DWORD dwCPlusTypeFlag,
            /* [size_is][in] */ BYTE *pValue,
            /* [in] */ ULONG cbValue,
            /* [out] */ _mdToken *pmd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetParamProps( 
            /* [in] */ _mdToken md,
            /* [in] */ ULONG ulParamSeq,
            /* [in] */ LPOLESTR szName,
            /* [in] */ DWORD dwParamFlags,
            /* [in] */ DWORD dwCPlusTypeFlag,
            /* [size_is][in] */ BYTE *pValue,
            /* [in] */ ULONG cbValue,
            /* [out] */ _mdToken *ppd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineMethodImpl( 
            /* [in] */ _mdToken td,
            /* [in] */ _mdToken tk,
            /* [in] */ ULONG ulCodeRVA,
            /* [in] */ DWORD dwImplFlags,
            /* [out] */ _mdToken *pmi) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRVA( 
            /* [in] */ _mdToken md,
            /* [in] */ ULONG ulCodeRVA,
            /* [in] */ DWORD dwImplFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineTypeRefByName( 
            /* [in] */ LPOLESTR szNamespace,
            /* [in] */ LPOLESTR szType,
            /* [out] */ _mdToken *ptr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTypeRefBind( 
            /* [in] */ _mdToken tr,
            /* [in] */ DWORD dwBindFlags,
            /* [in] */ DWORD dwMinVersion,
            /* [in] */ DWORD dwMaxVersion,
            /* [in] */ LPOLESTR szCodebase) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineMemberRef( 
            /* [in] */ _mdToken tkImport,
            /* [in] */ LPOLESTR szName,
            /* [size_is][in] */ BYTE *pvSigBlob,
            /* [in] */ ULONG cbSigBlob,
            /* [out] */ _mdToken *pmr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineException( 
            /* [in] */ _mdToken mb,
            /* [in] */ _mdToken tk,
            /* [out] */ _mdToken *pex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineProperty( 
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szProperty,
            /* [in] */ DWORD dwPropFlags,
            /* [size_is][in] */ BYTE *pvSig,
            /* [in] */ ULONG cbSig,
            /* [in] */ DWORD dwCPlusTypeFlag,
            /* [size_is][in] */ BYTE *pValue,
            /* [in] */ ULONG cbValue,
            /* [in] */ _mdToken mdSetter,
            /* [in] */ _mdToken mdGetter,
            /* [in] */ _mdToken mdReset,
            /* [in] */ _mdToken mdTestDefault,
            /* [in] */ DWORD dwOthers,
            /* [length_is][size_is][in] */ _mdToken rmdOtherMethods[  ],
            /* [in] */ _mdToken evNotifyChanging,
            /* [in] */ _mdToken evNotifyChanged,
            /* [in] */ _mdToken fdBackingField,
            /* [out] */ _mdToken *pmdProp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineEvent( 
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szEvent,
            /* [in] */ DWORD dwEventFlags,
            /* [in] */ _mdToken tkEventType,
            /* [in] */ _mdToken mdAddOn,
            /* [in] */ _mdToken mdRemoveOn,
            /* [in] */ _mdToken mdFire,
            /* [in] */ DWORD dwOthers,
            /* [length_is][size_is][in] */ _mdToken rmdOtherMethods[  ],
            /* [out] */ _mdToken *pmdEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetFieldMarshal( 
            /* [in] */ _mdToken tk,
            /* [size_is][in] */ BYTE *pvNativeType,
            /* [in] */ ULONG cbNativeType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefinePermissionSet( 
            /* [in] */ _mdToken tk,
            /* [in] */ DWORD dwAction,
            /* [size_is][in] */ BYTE *pvPermission,
            /* [in] */ ULONG cbPermission,
            /* [out] */ _mdToken *ppm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMemberIndex( 
            /* [in] */ _mdToken md,
            /* [in] */ ULONG ulIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTokenFromSig( 
            /* [size_is][in] */ BYTE *pvSig,
            /* [in] */ ULONG cbSig,
            /* [in] */ _mdToken *pmsig) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineModuleRef( 
            /* [in] */ LPOLESTR szName,
            /* [in] */ GUID *pguid,
            /* [in] */ GUID *pmvid,
            /* [out] */ _mdToken *pmur) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetParent( 
            /* [in] */ _mdToken mr,
            /* [in] */ _mdToken tk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTokenFromArraySpec( 
            /* [size_is][in] */ BYTE *pvSig,
            /* [in] */ ULONG cbSig,
            /* [out] */ _mdToken *parrspec) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMetaDataEmit2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMetaDataEmit2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMetaDataEmit2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetModuleProps )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ LPOLESTR szName,
            /* [in] */ GUID *ppid,
            /* [in] */ LCID lcid);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ LPOLESTR szFile,
            /* [in] */ DWORD dwSaveFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SaveToStream )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ IStream *pIStream,
            /* [in] */ DWORD dwSaveFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetSaveSize )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ DWORD fSave,
            /* [out] */ DWORD *pdwSaveSize);
        
        HRESULT ( STDMETHODCALLTYPE *DefineCustomValueAsBlob )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken tkObj,
            /* [in] */ LPOLESTR szName,
            /* [size_is][in] */ BYTE *pCustomValue,
            /* [in] */ ULONG cbCustomValue,
            /* [in] */ _mdToken *pcv);
        
        HRESULT ( STDMETHODCALLTYPE *DefineTypeDef )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ LPOLESTR szNamespace,
            /* [in] */ LPOLESTR szTypeDef,
            /* [in] */ GUID *pguid,
            /* [in] */ INT64 *pVer,
            /* [in] */ DWORD dwTypeDefFlags,
            /* [in] */ _mdToken tkExtends,
            /* [in] */ DWORD dwExtendsFlags,
            /* [in] */ DWORD dwImplements,
            /* [length_is][size_is][out][in] */ _mdToken rtkImplements[  ],
            /* [in] */ DWORD dwEvents,
            /* [length_is][size_is][out][in] */ _mdToken rtkEvents[  ],
            /* [out] */ _mdToken *ptd);
        
        HRESULT ( STDMETHODCALLTYPE *SetTypeDefProps )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ INT64 *pVer,
            /* [in] */ DWORD dwTypeDefFlags,
            /* [in] */ _mdToken tkExtends,
            /* [in] */ DWORD dwExtendsFlags,
            /* [in] */ DWORD dwImplements,
            /* [length_is][size_is][in] */ _mdToken rtkImplements[  ],
            /* [in] */ DWORD dwEvents,
            /* [length_is][size_is][in] */ _mdToken rtkEvents[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *SetClassSvcsContext )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwClassActivateAttr,
            /* [in] */ DWORD dwClassThreadAttr,
            /* [in] */ DWORD dwXactionAttr,
            /* [in] */ DWORD dwSynchAttr);
        
        HRESULT ( STDMETHODCALLTYPE *DefineTypeRefByGUID )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ GUID *pguid,
            /* [out] */ _mdToken *ptr);
        
        HRESULT ( STDMETHODCALLTYPE *SetModuleReg )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ DWORD dwModuleRegAttr,
            /* [in] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *SetClassReg )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szProgID,
            /* [in] */ LPOLESTR szVIProgID,
            /* [in] */ LPOLESTR szIconURL,
            /* [in] */ ULONG ulIconResource,
            /* [in] */ LPOLESTR szSmallIconURL,
            /* [in] */ ULONG ulSmallIconResource,
            /* [in] */ LPOLESTR szDefaultDispName);
        
        HRESULT ( STDMETHODCALLTYPE *SetIfaceReg )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwIfaceSvcs,
            /* [in] */ GUID *proxyStub);
        
        HRESULT ( STDMETHODCALLTYPE *SetCategoryImpl )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwImpl,
            /* [length_is][size_is][in] */ GUID rGuidCoCatImpl[  ],
            /* [in] */ DWORD dwReqd,
            /* [length_is][size_is][in] */ GUID rGuidCoCatReqd[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *SetRedirectProgID )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwProgIds,
            /* [length_is][size_is][in] */ LPOLESTR rszRedirectProgID[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *SetMimeTypeImpl )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwTypes,
            /* [length_is][size_is][in] */ LPOLESTR rszMimeType[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *SetFormatImpl )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ DWORD dwSupported,
            /* [length_is][size_is][in] */ LPOLESTR rszFormatSupported[  ],
            /* [in] */ DWORD dwFrom,
            /* [length_is][size_is][in] */ LPOLESTR rszFormatConvertsFrom[  ],
            /* [in] */ DWORD dwTo,
            /* [length_is][size_is][in] */ LPOLESTR rszFormatConvertsTo[  ],
            /* [in] */ DWORD dwDefault,
            /* [length_is][size_is][in] */ LPOLESTR rszFormatDefault[  ],
            /* [in] */ DWORD dwExt,
            /* [length_is][size_is][in] */ LPOLESTR rszFileExt[  ],
            /* [in] */ DWORD dwType,
            /* [length_is][size_is][in] */ LPOLESTR rszFileType[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *SetRoleCheck )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken tk,
            /* [in] */ DWORD dwNames,
            /* [length_is][size_is][in] */ LPOLESTR rszName[  ],
            /* [in] */ DWORD dwFlags,
            /* [length_is][size_is][in] */ DWORD rdwRoleFlags[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *DefineMethod )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szName,
            /* [in] */ DWORD dwMethodFlags,
            /* [size_is][in] */ BYTE *pvSigBlob,
            /* [in] */ ULONG cbSigBlob,
            /* [in] */ ULONG ulSlot,
            /* [in] */ ULONG ulCodeRVA,
            /* [in] */ DWORD dwImplFlags,
            /* [out] */ _mdToken *pmd);
        
        HRESULT ( STDMETHODCALLTYPE *DefineField )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szName,
            /* [in] */ DWORD dwFieldFlags,
            /* [size_is][in] */ BYTE *pvSigBlob,
            /* [in] */ ULONG cbSigBlob,
            /* [in] */ DWORD dwCPlusTypeFlag,
            /* [size_is][in] */ BYTE *pValue,
            /* [in] */ ULONG cbValue,
            /* [out] */ _mdToken *pmd);
        
        HRESULT ( STDMETHODCALLTYPE *SetParamProps )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken md,
            /* [in] */ ULONG ulParamSeq,
            /* [in] */ LPOLESTR szName,
            /* [in] */ DWORD dwParamFlags,
            /* [in] */ DWORD dwCPlusTypeFlag,
            /* [size_is][in] */ BYTE *pValue,
            /* [in] */ ULONG cbValue,
            /* [out] */ _mdToken *ppd);
        
        HRESULT ( STDMETHODCALLTYPE *DefineMethodImpl )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ _mdToken tk,
            /* [in] */ ULONG ulCodeRVA,
            /* [in] */ DWORD dwImplFlags,
            /* [out] */ _mdToken *pmi);
        
        HRESULT ( STDMETHODCALLTYPE *SetRVA )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken md,
            /* [in] */ ULONG ulCodeRVA,
            /* [in] */ DWORD dwImplFlags);
        
        HRESULT ( STDMETHODCALLTYPE *DefineTypeRefByName )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ LPOLESTR szNamespace,
            /* [in] */ LPOLESTR szType,
            /* [out] */ _mdToken *ptr);
        
        HRESULT ( STDMETHODCALLTYPE *SetTypeRefBind )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken tr,
            /* [in] */ DWORD dwBindFlags,
            /* [in] */ DWORD dwMinVersion,
            /* [in] */ DWORD dwMaxVersion,
            /* [in] */ LPOLESTR szCodebase);
        
        HRESULT ( STDMETHODCALLTYPE *DefineMemberRef )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken tkImport,
            /* [in] */ LPOLESTR szName,
            /* [size_is][in] */ BYTE *pvSigBlob,
            /* [in] */ ULONG cbSigBlob,
            /* [out] */ _mdToken *pmr);
        
        HRESULT ( STDMETHODCALLTYPE *DefineException )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken mb,
            /* [in] */ _mdToken tk,
            /* [out] */ _mdToken *pex);
        
        HRESULT ( STDMETHODCALLTYPE *DefineProperty )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szProperty,
            /* [in] */ DWORD dwPropFlags,
            /* [size_is][in] */ BYTE *pvSig,
            /* [in] */ ULONG cbSig,
            /* [in] */ DWORD dwCPlusTypeFlag,
            /* [size_is][in] */ BYTE *pValue,
            /* [in] */ ULONG cbValue,
            /* [in] */ _mdToken mdSetter,
            /* [in] */ _mdToken mdGetter,
            /* [in] */ _mdToken mdReset,
            /* [in] */ _mdToken mdTestDefault,
            /* [in] */ DWORD dwOthers,
            /* [length_is][size_is][in] */ _mdToken rmdOtherMethods[  ],
            /* [in] */ _mdToken evNotifyChanging,
            /* [in] */ _mdToken evNotifyChanged,
            /* [in] */ _mdToken fdBackingField,
            /* [out] */ _mdToken *pmdProp);
        
        HRESULT ( STDMETHODCALLTYPE *DefineEvent )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken td,
            /* [in] */ LPOLESTR szEvent,
            /* [in] */ DWORD dwEventFlags,
            /* [in] */ _mdToken tkEventType,
            /* [in] */ _mdToken mdAddOn,
            /* [in] */ _mdToken mdRemoveOn,
            /* [in] */ _mdToken mdFire,
            /* [in] */ DWORD dwOthers,
            /* [length_is][size_is][in] */ _mdToken rmdOtherMethods[  ],
            /* [out] */ _mdToken *pmdEvent);
        
        HRESULT ( STDMETHODCALLTYPE *SetFieldMarshal )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken tk,
            /* [size_is][in] */ BYTE *pvNativeType,
            /* [in] */ ULONG cbNativeType);
        
        HRESULT ( STDMETHODCALLTYPE *DefinePermissionSet )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken tk,
            /* [in] */ DWORD dwAction,
            /* [size_is][in] */ BYTE *pvPermission,
            /* [in] */ ULONG cbPermission,
            /* [out] */ _mdToken *ppm);
        
        HRESULT ( STDMETHODCALLTYPE *SetMemberIndex )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken md,
            /* [in] */ ULONG ulIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetTokenFromSig )( 
            IDebugMetaDataEmit2 * This,
            /* [size_is][in] */ BYTE *pvSig,
            /* [in] */ ULONG cbSig,
            /* [in] */ _mdToken *pmsig);
        
        HRESULT ( STDMETHODCALLTYPE *DefineModuleRef )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ LPOLESTR szName,
            /* [in] */ GUID *pguid,
            /* [in] */ GUID *pmvid,
            /* [out] */ _mdToken *pmur);
        
        HRESULT ( STDMETHODCALLTYPE *SetParent )( 
            IDebugMetaDataEmit2 * This,
            /* [in] */ _mdToken mr,
            /* [in] */ _mdToken tk);
        
        HRESULT ( STDMETHODCALLTYPE *GetTokenFromArraySpec )( 
            IDebugMetaDataEmit2 * This,
            /* [size_is][in] */ BYTE *pvSig,
            /* [in] */ ULONG cbSig,
            /* [out] */ _mdToken *parrspec);
        
        END_INTERFACE
    } IDebugMetaDataEmit2Vtbl;

    interface IDebugMetaDataEmit2
    {
        CONST_VTBL struct IDebugMetaDataEmit2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMetaDataEmit2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMetaDataEmit2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMetaDataEmit2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMetaDataEmit2_SetModuleProps(This,szName,ppid,lcid)	\
    (This)->lpVtbl -> SetModuleProps(This,szName,ppid,lcid)

#define IDebugMetaDataEmit2_Save(This,szFile,dwSaveFlags)	\
    (This)->lpVtbl -> Save(This,szFile,dwSaveFlags)

#define IDebugMetaDataEmit2_SaveToStream(This,pIStream,dwSaveFlags)	\
    (This)->lpVtbl -> SaveToStream(This,pIStream,dwSaveFlags)

#define IDebugMetaDataEmit2_GetSaveSize(This,fSave,pdwSaveSize)	\
    (This)->lpVtbl -> GetSaveSize(This,fSave,pdwSaveSize)

#define IDebugMetaDataEmit2_DefineCustomValueAsBlob(This,tkObj,szName,pCustomValue,cbCustomValue,pcv)	\
    (This)->lpVtbl -> DefineCustomValueAsBlob(This,tkObj,szName,pCustomValue,cbCustomValue,pcv)

#define IDebugMetaDataEmit2_DefineTypeDef(This,szNamespace,szTypeDef,pguid,pVer,dwTypeDefFlags,tkExtends,dwExtendsFlags,dwImplements,rtkImplements,dwEvents,rtkEvents,ptd)	\
    (This)->lpVtbl -> DefineTypeDef(This,szNamespace,szTypeDef,pguid,pVer,dwTypeDefFlags,tkExtends,dwExtendsFlags,dwImplements,rtkImplements,dwEvents,rtkEvents,ptd)

#define IDebugMetaDataEmit2_SetTypeDefProps(This,td,pVer,dwTypeDefFlags,tkExtends,dwExtendsFlags,dwImplements,rtkImplements,dwEvents,rtkEvents)	\
    (This)->lpVtbl -> SetTypeDefProps(This,td,pVer,dwTypeDefFlags,tkExtends,dwExtendsFlags,dwImplements,rtkImplements,dwEvents,rtkEvents)

#define IDebugMetaDataEmit2_SetClassSvcsContext(This,td,dwClassActivateAttr,dwClassThreadAttr,dwXactionAttr,dwSynchAttr)	\
    (This)->lpVtbl -> SetClassSvcsContext(This,td,dwClassActivateAttr,dwClassThreadAttr,dwXactionAttr,dwSynchAttr)

#define IDebugMetaDataEmit2_DefineTypeRefByGUID(This,pguid,ptr)	\
    (This)->lpVtbl -> DefineTypeRefByGUID(This,pguid,ptr)

#define IDebugMetaDataEmit2_SetModuleReg(This,dwModuleRegAttr,pguid)	\
    (This)->lpVtbl -> SetModuleReg(This,dwModuleRegAttr,pguid)

#define IDebugMetaDataEmit2_SetClassReg(This,td,szProgID,szVIProgID,szIconURL,ulIconResource,szSmallIconURL,ulSmallIconResource,szDefaultDispName)	\
    (This)->lpVtbl -> SetClassReg(This,td,szProgID,szVIProgID,szIconURL,ulIconResource,szSmallIconURL,ulSmallIconResource,szDefaultDispName)

#define IDebugMetaDataEmit2_SetIfaceReg(This,td,dwIfaceSvcs,proxyStub)	\
    (This)->lpVtbl -> SetIfaceReg(This,td,dwIfaceSvcs,proxyStub)

#define IDebugMetaDataEmit2_SetCategoryImpl(This,td,dwImpl,rGuidCoCatImpl,dwReqd,rGuidCoCatReqd)	\
    (This)->lpVtbl -> SetCategoryImpl(This,td,dwImpl,rGuidCoCatImpl,dwReqd,rGuidCoCatReqd)

#define IDebugMetaDataEmit2_SetRedirectProgID(This,td,dwProgIds,rszRedirectProgID)	\
    (This)->lpVtbl -> SetRedirectProgID(This,td,dwProgIds,rszRedirectProgID)

#define IDebugMetaDataEmit2_SetMimeTypeImpl(This,td,dwTypes,rszMimeType)	\
    (This)->lpVtbl -> SetMimeTypeImpl(This,td,dwTypes,rszMimeType)

#define IDebugMetaDataEmit2_SetFormatImpl(This,td,dwSupported,rszFormatSupported,dwFrom,rszFormatConvertsFrom,dwTo,rszFormatConvertsTo,dwDefault,rszFormatDefault,dwExt,rszFileExt,dwType,rszFileType)	\
    (This)->lpVtbl -> SetFormatImpl(This,td,dwSupported,rszFormatSupported,dwFrom,rszFormatConvertsFrom,dwTo,rszFormatConvertsTo,dwDefault,rszFormatDefault,dwExt,rszFileExt,dwType,rszFileType)

#define IDebugMetaDataEmit2_SetRoleCheck(This,tk,dwNames,rszName,dwFlags,rdwRoleFlags)	\
    (This)->lpVtbl -> SetRoleCheck(This,tk,dwNames,rszName,dwFlags,rdwRoleFlags)

#define IDebugMetaDataEmit2_DefineMethod(This,td,szName,dwMethodFlags,pvSigBlob,cbSigBlob,ulSlot,ulCodeRVA,dwImplFlags,pmd)	\
    (This)->lpVtbl -> DefineMethod(This,td,szName,dwMethodFlags,pvSigBlob,cbSigBlob,ulSlot,ulCodeRVA,dwImplFlags,pmd)

#define IDebugMetaDataEmit2_DefineField(This,td,szName,dwFieldFlags,pvSigBlob,cbSigBlob,dwCPlusTypeFlag,pValue,cbValue,pmd)	\
    (This)->lpVtbl -> DefineField(This,td,szName,dwFieldFlags,pvSigBlob,cbSigBlob,dwCPlusTypeFlag,pValue,cbValue,pmd)

#define IDebugMetaDataEmit2_SetParamProps(This,md,ulParamSeq,szName,dwParamFlags,dwCPlusTypeFlag,pValue,cbValue,ppd)	\
    (This)->lpVtbl -> SetParamProps(This,md,ulParamSeq,szName,dwParamFlags,dwCPlusTypeFlag,pValue,cbValue,ppd)

#define IDebugMetaDataEmit2_DefineMethodImpl(This,td,tk,ulCodeRVA,dwImplFlags,pmi)	\
    (This)->lpVtbl -> DefineMethodImpl(This,td,tk,ulCodeRVA,dwImplFlags,pmi)

#define IDebugMetaDataEmit2_SetRVA(This,md,ulCodeRVA,dwImplFlags)	\
    (This)->lpVtbl -> SetRVA(This,md,ulCodeRVA,dwImplFlags)

#define IDebugMetaDataEmit2_DefineTypeRefByName(This,szNamespace,szType,ptr)	\
    (This)->lpVtbl -> DefineTypeRefByName(This,szNamespace,szType,ptr)

#define IDebugMetaDataEmit2_SetTypeRefBind(This,tr,dwBindFlags,dwMinVersion,dwMaxVersion,szCodebase)	\
    (This)->lpVtbl -> SetTypeRefBind(This,tr,dwBindFlags,dwMinVersion,dwMaxVersion,szCodebase)

#define IDebugMetaDataEmit2_DefineMemberRef(This,tkImport,szName,pvSigBlob,cbSigBlob,pmr)	\
    (This)->lpVtbl -> DefineMemberRef(This,tkImport,szName,pvSigBlob,cbSigBlob,pmr)

#define IDebugMetaDataEmit2_DefineException(This,mb,tk,pex)	\
    (This)->lpVtbl -> DefineException(This,mb,tk,pex)

#define IDebugMetaDataEmit2_DefineProperty(This,td,szProperty,dwPropFlags,pvSig,cbSig,dwCPlusTypeFlag,pValue,cbValue,mdSetter,mdGetter,mdReset,mdTestDefault,dwOthers,rmdOtherMethods,evNotifyChanging,evNotifyChanged,fdBackingField,pmdProp)	\
    (This)->lpVtbl -> DefineProperty(This,td,szProperty,dwPropFlags,pvSig,cbSig,dwCPlusTypeFlag,pValue,cbValue,mdSetter,mdGetter,mdReset,mdTestDefault,dwOthers,rmdOtherMethods,evNotifyChanging,evNotifyChanged,fdBackingField,pmdProp)

#define IDebugMetaDataEmit2_DefineEvent(This,td,szEvent,dwEventFlags,tkEventType,mdAddOn,mdRemoveOn,mdFire,dwOthers,rmdOtherMethods,pmdEvent)	\
    (This)->lpVtbl -> DefineEvent(This,td,szEvent,dwEventFlags,tkEventType,mdAddOn,mdRemoveOn,mdFire,dwOthers,rmdOtherMethods,pmdEvent)

#define IDebugMetaDataEmit2_SetFieldMarshal(This,tk,pvNativeType,cbNativeType)	\
    (This)->lpVtbl -> SetFieldMarshal(This,tk,pvNativeType,cbNativeType)

#define IDebugMetaDataEmit2_DefinePermissionSet(This,tk,dwAction,pvPermission,cbPermission,ppm)	\
    (This)->lpVtbl -> DefinePermissionSet(This,tk,dwAction,pvPermission,cbPermission,ppm)

#define IDebugMetaDataEmit2_SetMemberIndex(This,md,ulIndex)	\
    (This)->lpVtbl -> SetMemberIndex(This,md,ulIndex)

#define IDebugMetaDataEmit2_GetTokenFromSig(This,pvSig,cbSig,pmsig)	\
    (This)->lpVtbl -> GetTokenFromSig(This,pvSig,cbSig,pmsig)

#define IDebugMetaDataEmit2_DefineModuleRef(This,szName,pguid,pmvid,pmur)	\
    (This)->lpVtbl -> DefineModuleRef(This,szName,pguid,pmvid,pmur)

#define IDebugMetaDataEmit2_SetParent(This,mr,tk)	\
    (This)->lpVtbl -> SetParent(This,mr,tk)

#define IDebugMetaDataEmit2_GetTokenFromArraySpec(This,pvSig,cbSig,parrspec)	\
    (This)->lpVtbl -> GetTokenFromArraySpec(This,pvSig,cbSig,parrspec)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetModuleProps_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ LPOLESTR szName,
    /* [in] */ GUID *ppid,
    /* [in] */ LCID lcid);


void __RPC_STUB IDebugMetaDataEmit2_SetModuleProps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_Save_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ LPOLESTR szFile,
    /* [in] */ DWORD dwSaveFlags);


void __RPC_STUB IDebugMetaDataEmit2_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SaveToStream_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ IStream *pIStream,
    /* [in] */ DWORD dwSaveFlags);


void __RPC_STUB IDebugMetaDataEmit2_SaveToStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_GetSaveSize_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ DWORD fSave,
    /* [out] */ DWORD *pdwSaveSize);


void __RPC_STUB IDebugMetaDataEmit2_GetSaveSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineCustomValueAsBlob_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken tkObj,
    /* [in] */ LPOLESTR szName,
    /* [size_is][in] */ BYTE *pCustomValue,
    /* [in] */ ULONG cbCustomValue,
    /* [in] */ _mdToken *pcv);


void __RPC_STUB IDebugMetaDataEmit2_DefineCustomValueAsBlob_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineTypeDef_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ LPOLESTR szNamespace,
    /* [in] */ LPOLESTR szTypeDef,
    /* [in] */ GUID *pguid,
    /* [in] */ INT64 *pVer,
    /* [in] */ DWORD dwTypeDefFlags,
    /* [in] */ _mdToken tkExtends,
    /* [in] */ DWORD dwExtendsFlags,
    /* [in] */ DWORD dwImplements,
    /* [length_is][size_is][out][in] */ _mdToken rtkImplements[  ],
    /* [in] */ DWORD dwEvents,
    /* [length_is][size_is][out][in] */ _mdToken rtkEvents[  ],
    /* [out] */ _mdToken *ptd);


void __RPC_STUB IDebugMetaDataEmit2_DefineTypeDef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetTypeDefProps_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ INT64 *pVer,
    /* [in] */ DWORD dwTypeDefFlags,
    /* [in] */ _mdToken tkExtends,
    /* [in] */ DWORD dwExtendsFlags,
    /* [in] */ DWORD dwImplements,
    /* [length_is][size_is][in] */ _mdToken rtkImplements[  ],
    /* [in] */ DWORD dwEvents,
    /* [length_is][size_is][in] */ _mdToken rtkEvents[  ]);


void __RPC_STUB IDebugMetaDataEmit2_SetTypeDefProps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetClassSvcsContext_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ DWORD dwClassActivateAttr,
    /* [in] */ DWORD dwClassThreadAttr,
    /* [in] */ DWORD dwXactionAttr,
    /* [in] */ DWORD dwSynchAttr);


void __RPC_STUB IDebugMetaDataEmit2_SetClassSvcsContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineTypeRefByGUID_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ GUID *pguid,
    /* [out] */ _mdToken *ptr);


void __RPC_STUB IDebugMetaDataEmit2_DefineTypeRefByGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetModuleReg_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ DWORD dwModuleRegAttr,
    /* [in] */ GUID *pguid);


void __RPC_STUB IDebugMetaDataEmit2_SetModuleReg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetClassReg_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ LPOLESTR szProgID,
    /* [in] */ LPOLESTR szVIProgID,
    /* [in] */ LPOLESTR szIconURL,
    /* [in] */ ULONG ulIconResource,
    /* [in] */ LPOLESTR szSmallIconURL,
    /* [in] */ ULONG ulSmallIconResource,
    /* [in] */ LPOLESTR szDefaultDispName);


void __RPC_STUB IDebugMetaDataEmit2_SetClassReg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetIfaceReg_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ DWORD dwIfaceSvcs,
    /* [in] */ GUID *proxyStub);


void __RPC_STUB IDebugMetaDataEmit2_SetIfaceReg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetCategoryImpl_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ DWORD dwImpl,
    /* [length_is][size_is][in] */ GUID rGuidCoCatImpl[  ],
    /* [in] */ DWORD dwReqd,
    /* [length_is][size_is][in] */ GUID rGuidCoCatReqd[  ]);


void __RPC_STUB IDebugMetaDataEmit2_SetCategoryImpl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetRedirectProgID_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ DWORD dwProgIds,
    /* [length_is][size_is][in] */ LPOLESTR rszRedirectProgID[  ]);


void __RPC_STUB IDebugMetaDataEmit2_SetRedirectProgID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetMimeTypeImpl_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ DWORD dwTypes,
    /* [length_is][size_is][in] */ LPOLESTR rszMimeType[  ]);


void __RPC_STUB IDebugMetaDataEmit2_SetMimeTypeImpl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetFormatImpl_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ DWORD dwSupported,
    /* [length_is][size_is][in] */ LPOLESTR rszFormatSupported[  ],
    /* [in] */ DWORD dwFrom,
    /* [length_is][size_is][in] */ LPOLESTR rszFormatConvertsFrom[  ],
    /* [in] */ DWORD dwTo,
    /* [length_is][size_is][in] */ LPOLESTR rszFormatConvertsTo[  ],
    /* [in] */ DWORD dwDefault,
    /* [length_is][size_is][in] */ LPOLESTR rszFormatDefault[  ],
    /* [in] */ DWORD dwExt,
    /* [length_is][size_is][in] */ LPOLESTR rszFileExt[  ],
    /* [in] */ DWORD dwType,
    /* [length_is][size_is][in] */ LPOLESTR rszFileType[  ]);


void __RPC_STUB IDebugMetaDataEmit2_SetFormatImpl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetRoleCheck_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken tk,
    /* [in] */ DWORD dwNames,
    /* [length_is][size_is][in] */ LPOLESTR rszName[  ],
    /* [in] */ DWORD dwFlags,
    /* [length_is][size_is][in] */ DWORD rdwRoleFlags[  ]);


void __RPC_STUB IDebugMetaDataEmit2_SetRoleCheck_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineMethod_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ LPOLESTR szName,
    /* [in] */ DWORD dwMethodFlags,
    /* [size_is][in] */ BYTE *pvSigBlob,
    /* [in] */ ULONG cbSigBlob,
    /* [in] */ ULONG ulSlot,
    /* [in] */ ULONG ulCodeRVA,
    /* [in] */ DWORD dwImplFlags,
    /* [out] */ _mdToken *pmd);


void __RPC_STUB IDebugMetaDataEmit2_DefineMethod_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineField_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ LPOLESTR szName,
    /* [in] */ DWORD dwFieldFlags,
    /* [size_is][in] */ BYTE *pvSigBlob,
    /* [in] */ ULONG cbSigBlob,
    /* [in] */ DWORD dwCPlusTypeFlag,
    /* [size_is][in] */ BYTE *pValue,
    /* [in] */ ULONG cbValue,
    /* [out] */ _mdToken *pmd);


void __RPC_STUB IDebugMetaDataEmit2_DefineField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetParamProps_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken md,
    /* [in] */ ULONG ulParamSeq,
    /* [in] */ LPOLESTR szName,
    /* [in] */ DWORD dwParamFlags,
    /* [in] */ DWORD dwCPlusTypeFlag,
    /* [size_is][in] */ BYTE *pValue,
    /* [in] */ ULONG cbValue,
    /* [out] */ _mdToken *ppd);


void __RPC_STUB IDebugMetaDataEmit2_SetParamProps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineMethodImpl_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ _mdToken tk,
    /* [in] */ ULONG ulCodeRVA,
    /* [in] */ DWORD dwImplFlags,
    /* [out] */ _mdToken *pmi);


void __RPC_STUB IDebugMetaDataEmit2_DefineMethodImpl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetRVA_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken md,
    /* [in] */ ULONG ulCodeRVA,
    /* [in] */ DWORD dwImplFlags);


void __RPC_STUB IDebugMetaDataEmit2_SetRVA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineTypeRefByName_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ LPOLESTR szNamespace,
    /* [in] */ LPOLESTR szType,
    /* [out] */ _mdToken *ptr);


void __RPC_STUB IDebugMetaDataEmit2_DefineTypeRefByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetTypeRefBind_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken tr,
    /* [in] */ DWORD dwBindFlags,
    /* [in] */ DWORD dwMinVersion,
    /* [in] */ DWORD dwMaxVersion,
    /* [in] */ LPOLESTR szCodebase);


void __RPC_STUB IDebugMetaDataEmit2_SetTypeRefBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineMemberRef_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken tkImport,
    /* [in] */ LPOLESTR szName,
    /* [size_is][in] */ BYTE *pvSigBlob,
    /* [in] */ ULONG cbSigBlob,
    /* [out] */ _mdToken *pmr);


void __RPC_STUB IDebugMetaDataEmit2_DefineMemberRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineException_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken mb,
    /* [in] */ _mdToken tk,
    /* [out] */ _mdToken *pex);


void __RPC_STUB IDebugMetaDataEmit2_DefineException_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineProperty_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ LPOLESTR szProperty,
    /* [in] */ DWORD dwPropFlags,
    /* [size_is][in] */ BYTE *pvSig,
    /* [in] */ ULONG cbSig,
    /* [in] */ DWORD dwCPlusTypeFlag,
    /* [size_is][in] */ BYTE *pValue,
    /* [in] */ ULONG cbValue,
    /* [in] */ _mdToken mdSetter,
    /* [in] */ _mdToken mdGetter,
    /* [in] */ _mdToken mdReset,
    /* [in] */ _mdToken mdTestDefault,
    /* [in] */ DWORD dwOthers,
    /* [length_is][size_is][in] */ _mdToken rmdOtherMethods[  ],
    /* [in] */ _mdToken evNotifyChanging,
    /* [in] */ _mdToken evNotifyChanged,
    /* [in] */ _mdToken fdBackingField,
    /* [out] */ _mdToken *pmdProp);


void __RPC_STUB IDebugMetaDataEmit2_DefineProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineEvent_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken td,
    /* [in] */ LPOLESTR szEvent,
    /* [in] */ DWORD dwEventFlags,
    /* [in] */ _mdToken tkEventType,
    /* [in] */ _mdToken mdAddOn,
    /* [in] */ _mdToken mdRemoveOn,
    /* [in] */ _mdToken mdFire,
    /* [in] */ DWORD dwOthers,
    /* [length_is][size_is][in] */ _mdToken rmdOtherMethods[  ],
    /* [out] */ _mdToken *pmdEvent);


void __RPC_STUB IDebugMetaDataEmit2_DefineEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetFieldMarshal_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken tk,
    /* [size_is][in] */ BYTE *pvNativeType,
    /* [in] */ ULONG cbNativeType);


void __RPC_STUB IDebugMetaDataEmit2_SetFieldMarshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefinePermissionSet_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken tk,
    /* [in] */ DWORD dwAction,
    /* [size_is][in] */ BYTE *pvPermission,
    /* [in] */ ULONG cbPermission,
    /* [out] */ _mdToken *ppm);


void __RPC_STUB IDebugMetaDataEmit2_DefinePermissionSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetMemberIndex_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken md,
    /* [in] */ ULONG ulIndex);


void __RPC_STUB IDebugMetaDataEmit2_SetMemberIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_GetTokenFromSig_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [size_is][in] */ BYTE *pvSig,
    /* [in] */ ULONG cbSig,
    /* [in] */ _mdToken *pmsig);


void __RPC_STUB IDebugMetaDataEmit2_GetTokenFromSig_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_DefineModuleRef_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ LPOLESTR szName,
    /* [in] */ GUID *pguid,
    /* [in] */ GUID *pmvid,
    /* [out] */ _mdToken *pmur);


void __RPC_STUB IDebugMetaDataEmit2_DefineModuleRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_SetParent_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [in] */ _mdToken mr,
    /* [in] */ _mdToken tk);


void __RPC_STUB IDebugMetaDataEmit2_SetParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataEmit2_GetTokenFromArraySpec_Proxy( 
    IDebugMetaDataEmit2 * This,
    /* [size_is][in] */ BYTE *pvSig,
    /* [in] */ ULONG cbSig,
    /* [out] */ _mdToken *parrspec);


void __RPC_STUB IDebugMetaDataEmit2_GetTokenFromArraySpec_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMetaDataEmit2_INTERFACE_DEFINED__ */


#ifndef __IDebugMetaDataDebugEmit2_INTERFACE_DEFINED__
#define __IDebugMetaDataDebugEmit2_INTERFACE_DEFINED__

/* interface IDebugMetaDataDebugEmit2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugMetaDataDebugEmit2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6f94d22-78c2-11d2-8ffe-00c04fa38314")
    IDebugMetaDataDebugEmit2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DefineSourceFile( 
            /* [in] */ LPOLESTR szFileName,
            /* [out] */ _mdToken *psourcefile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineBlock( 
            /* [in] */ _mdToken member,
            /* [in] */ _mdToken sourcefile,
            /* [in] */ BYTE *pAttr,
            /* [in] */ ULONG cbAttr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DefineLocalVarScope( 
            /* [in] */ _mdToken scopeParent,
            /* [in] */ ULONG ulStartLine,
            /* [in] */ ULONG ulEndLine,
            /* [in] */ _mdToken member,
            /* [out] */ _mdToken *plocalvarscope) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMetaDataDebugEmit2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMetaDataDebugEmit2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMetaDataDebugEmit2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMetaDataDebugEmit2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *DefineSourceFile )( 
            IDebugMetaDataDebugEmit2 * This,
            /* [in] */ LPOLESTR szFileName,
            /* [out] */ _mdToken *psourcefile);
        
        HRESULT ( STDMETHODCALLTYPE *DefineBlock )( 
            IDebugMetaDataDebugEmit2 * This,
            /* [in] */ _mdToken member,
            /* [in] */ _mdToken sourcefile,
            /* [in] */ BYTE *pAttr,
            /* [in] */ ULONG cbAttr);
        
        HRESULT ( STDMETHODCALLTYPE *DefineLocalVarScope )( 
            IDebugMetaDataDebugEmit2 * This,
            /* [in] */ _mdToken scopeParent,
            /* [in] */ ULONG ulStartLine,
            /* [in] */ ULONG ulEndLine,
            /* [in] */ _mdToken member,
            /* [out] */ _mdToken *plocalvarscope);
        
        END_INTERFACE
    } IDebugMetaDataDebugEmit2Vtbl;

    interface IDebugMetaDataDebugEmit2
    {
        CONST_VTBL struct IDebugMetaDataDebugEmit2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMetaDataDebugEmit2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMetaDataDebugEmit2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMetaDataDebugEmit2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMetaDataDebugEmit2_DefineSourceFile(This,szFileName,psourcefile)	\
    (This)->lpVtbl -> DefineSourceFile(This,szFileName,psourcefile)

#define IDebugMetaDataDebugEmit2_DefineBlock(This,member,sourcefile,pAttr,cbAttr)	\
    (This)->lpVtbl -> DefineBlock(This,member,sourcefile,pAttr,cbAttr)

#define IDebugMetaDataDebugEmit2_DefineLocalVarScope(This,scopeParent,ulStartLine,ulEndLine,member,plocalvarscope)	\
    (This)->lpVtbl -> DefineLocalVarScope(This,scopeParent,ulStartLine,ulEndLine,member,plocalvarscope)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMetaDataDebugEmit2_DefineSourceFile_Proxy( 
    IDebugMetaDataDebugEmit2 * This,
    /* [in] */ LPOLESTR szFileName,
    /* [out] */ _mdToken *psourcefile);


void __RPC_STUB IDebugMetaDataDebugEmit2_DefineSourceFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataDebugEmit2_DefineBlock_Proxy( 
    IDebugMetaDataDebugEmit2 * This,
    /* [in] */ _mdToken member,
    /* [in] */ _mdToken sourcefile,
    /* [in] */ BYTE *pAttr,
    /* [in] */ ULONG cbAttr);


void __RPC_STUB IDebugMetaDataDebugEmit2_DefineBlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMetaDataDebugEmit2_DefineLocalVarScope_Proxy( 
    IDebugMetaDataDebugEmit2 * This,
    /* [in] */ _mdToken scopeParent,
    /* [in] */ ULONG ulStartLine,
    /* [in] */ ULONG ulEndLine,
    /* [in] */ _mdToken member,
    /* [out] */ _mdToken *plocalvarscope);


void __RPC_STUB IDebugMetaDataDebugEmit2_DefineLocalVarScope_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMetaDataDebugEmit2_INTERFACE_DEFINED__ */


#ifndef __IDebugENCStateEvents_INTERFACE_DEFINED__
#define __IDebugENCStateEvents_INTERFACE_DEFINED__

/* interface IDebugENCStateEvents */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugENCStateEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ec80d064-102e-435f-aafb-d37e2a4ef654")
    IDebugENCStateEvents : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStateChange( 
            /* [in] */ ENCSTATE *in_pENCSTATE,
            /* [in] */ BOOL in_fReserved) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugENCStateEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugENCStateEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugENCStateEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugENCStateEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStateChange )( 
            IDebugENCStateEvents * This,
            /* [in] */ ENCSTATE *in_pENCSTATE,
            /* [in] */ BOOL in_fReserved);
        
        END_INTERFACE
    } IDebugENCStateEventsVtbl;

    interface IDebugENCStateEvents
    {
        CONST_VTBL struct IDebugENCStateEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugENCStateEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugENCStateEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugENCStateEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugENCStateEvents_OnStateChange(This,in_pENCSTATE,in_fReserved)	\
    (This)->lpVtbl -> OnStateChange(This,in_pENCSTATE,in_fReserved)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugENCStateEvents_OnStateChange_Proxy( 
    IDebugENCStateEvents * This,
    /* [in] */ ENCSTATE *in_pENCSTATE,
    /* [in] */ BOOL in_fReserved);


void __RPC_STUB IDebugENCStateEvents_OnStateChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugENCStateEvents_INTERFACE_DEFINED__ */



#ifndef __EncLib_LIBRARY_DEFINED__
#define __EncLib_LIBRARY_DEFINED__

/* library EncLib */
/* [uuid] */ 


EXTERN_C const IID LIBID_EncLib;

EXTERN_C const CLSID CLSID_EncMgr;

#ifdef __cplusplus

class DECLSPEC_UUID("99A426F1-AF1D-11d2-922C-00A02448799A")
EncMgr;
#endif
#endif /* __EncLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\toolhrt.h ===
/*++

Copyright(c) !YEAR Microsoft Corporation

Module Name:

	ToolHrt.h

Abstract:

	Useful stuff for listing processes, getting info from a PE image, etc.

Author:

    Matthew D Hendel (math) 03-Oct-1997

Environment:

	Win95, Win98, NT 4.0, NT 5.0.

--*/


#ifndef _TOOLHRT_H_
#define _TOOLHRT_H_

#ifdef __cplusplus
extern "C" {
#endif


#ifndef LOCAL
#define LOCAL static
#endif


enum IMAGE_TYPE {
	IMAGE_TYPE_UNKNOWN,
	IMAGE_TYPE_DOS_STUB,
	IMAGE_TYPE_WIN16_OR_OS2,
	IMAGE_TYPE_WIN32,
	IMAGE_TYPE_CRASHDUMP,
	IMAGE_TYPE_MINIDUMP,
	IMAGE_TYPE_WIN64
};

#include "pshpack4.h"

typedef struct _IMAGE_INFO {

	DWORD	Size;			// Must be initialized prior to the call
	DWORD	ImageType;

	union {
		struct {
			ULONG	Subsystem;
			WORD	Characteristics;
			WORD	Machine;
			BOOL	ManagedCode;
			BOOL	ManagedOnly;
		} Win32;

		struct {
			BOOL	fUserMode;
			WORD	Machine;
		} CrashDump;
	} u;

} IMAGE_INFO;

#include "poppack.h"


//
// Get information about a binary executable file.
//

BOOL
WINAPI
GetImageInfo(
	LPCSTR		ImageName,
	IMAGE_INFO*	ImageInfo
	);

//
// Is this image a valid Win32 subsystem image
//

#define IS_WIN32_SUBSYSTEM_IMAGE(ii)	\
	((ii).ImageType == IMAGE_TYPE_WIN32 &&	\
	((ii).u.Win32.Subsystem == IMAGE_SUBSYSTEM_WINDOWS_CUI ||	\
	 (ii).u.Win32.Subsystem == IMAGE_SUBSYSTEM_WINDOWS_GUI))


#define WINDOW_TITLE_SIZE		64
#define PROCESS_NAME_SIZE		_MAX_FNAME

#define TASK_SYSTEM_PROCESS		0x0001
#define TASK_BEING_DEBUGGED		0x0002
#define TASK_16_BIT				0x0004
#define TASK_64_BIT				0x0008

#include "pshpack4.h"

typedef struct _TASK_ENTRY {
	//
	// Basic Info
    DWORD	dwProcessId;
	DWORD	dwFlags;

	// 
	// Extended Info
	//
	struct {
		DWORD   dwSessionId;
        DWORD	dwParentPid;
    	DWORD	dwImageType;

	    union{
	        HWND	hWnd;
	        DWORDLONG AlignhWnd;
	    };
        CHAR	szProcessName [PROCESS_NAME_SIZE];
        CHAR	szWindowTitle [WINDOW_TITLE_SIZE];
    	CHAR	szImageName [_MAX_PATH];
	} exInfo;
} TASK_ENTRY, *PTASK_ENTRY;

#include "poppack.h"

//
// Get just the dwProcessId and dwFlags fields for all processes
//
#define TASKENTRY_PROCESSID		0x00000001
#define TASKENTRY_FLAGS			0x00000002
#define TASKENTRY_EXTENDEDINFO	0x00000004
//
// Get the complete _TASK_ENTRY fields for all proccess
//
#define TASKENTRY_ALL			0x00000007



//
// Get a task list.
//

BOOL
WINAPI
GetTaskList(
	OUT TASK_ENTRY rgTasks [],
	IN OUT DWORD* lpdwTaskCount,
	IN DWORD      dwFlags
    );

//
// Check whether a process is a system (server) process or not.
//

BOOL
WINAPI
IsSystemProcess(
	DWORD dwProcessId
	);

//
// On Windows NT, change the SE_DEBUG_PRIVILEGE value. On Win9x, NOP.
//

BOOL
WINAPI
SetDebugPrivilege(
	BOOL fEnable
	);

BOOL
WINAPI
IsDebuggerPresentEx(
	DWORD dwPid
	);



HANDLE
OpenProcessEx(
	DWORD   dwDesiredAccess,
	BOOL    bInheritHandle,
	DWORD   dwProcessId,
	LPBOOL  lpfResetDebugPriv
	);

//
//	For dynimcally loading psapi.dll -- WinNT only
//

typedef DWORD (WINAPI *GETMODULEFILENAMEEXA)(
	HANDLE hProcess,
	HMODULE hModule,
	LPSTR lpFilename,
	DWORD nSize
	);

BOOL
WINAPI
GetImageName(
	DWORD dwProcessId,
	LPTSTR szImageName,
	DWORD cbBufferSize
	);
    

BOOL
WINAPI
GetSessionIdForProcess(
	DWORD   processId,
	LPDWORD lpSessionId
	);

BOOL
WINAPI
GetImageNameUsingPsapiEx(
	HANDLE               hProcess,
	HMODULE              hDll,
	DWORD                dwProcessId,
    GETMODULEFILENAMEEXA pfnGetModuleFileNameExA,
	LPTSTR               szImageName,
	DWORD                cbBufferSize
	);

BOOL
IsWin9x(
  );

BOOL
IsNT4(
 );

BOOL
WINAPI
IsProcess64Bit(
	DWORD dwProcessId
	);

BOOL
InitDbgProxy(
		);
VOID
UnInitDbgProxy(
    );

BOOL
ReconcileWithProxy(
    DWORD       dwCount,
	PTASK_ENTRY rgTasks,
	DWORD       dwFlags
	);

BOOL
ProxyIsDetachedPid(
	DWORD   dwPid,
	LPDWORD lpfIsDetached
	);

HANDLE
LoadUsrProfile(
	HANDLE hToken
	);

BOOL
UnLoadUsrProfile(
	HANDLE hToken,
	HANDLE hProfile
	);

BOOL
GetEnvironmentBlock(
	HANDLE  hToken,
	LPVOID* ppEnvBlock
	);
BOOL
ReleaseEnvironmentBlock(
	LPVOID pEnvBlock
	);



DECLARE_HANDLE(HJIT);

HJIT
NotifyOleRpcStepInitiate(
	);

BOOL
NotifyOleRpcStepComplete(
	HJIT hJit
	);

BOOL
GetPidForOleRpcJit(
	LPDWORD lpdwPid
	);

#ifdef __cplusplus
};		// extern "C"
#endif

#endif // _TOOLHRT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\msdbg.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:51:28 2002
 */
/* Compiler settings for msdbg.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msdbg_h__
#define __msdbg_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDebugMachine2_FWD_DEFINED__
#define __IDebugMachine2_FWD_DEFINED__
typedef interface IDebugMachine2 IDebugMachine2;
#endif 	/* __IDebugMachine2_FWD_DEFINED__ */


#ifndef __IDebugMachineEx2_FWD_DEFINED__
#define __IDebugMachineEx2_FWD_DEFINED__
typedef interface IDebugMachineEx2 IDebugMachineEx2;
#endif 	/* __IDebugMachineEx2_FWD_DEFINED__ */


#ifndef __IDebugPortSupplier2_FWD_DEFINED__
#define __IDebugPortSupplier2_FWD_DEFINED__
typedef interface IDebugPortSupplier2 IDebugPortSupplier2;
#endif 	/* __IDebugPortSupplier2_FWD_DEFINED__ */


#ifndef __IDebugPort2_FWD_DEFINED__
#define __IDebugPort2_FWD_DEFINED__
typedef interface IDebugPort2 IDebugPort2;
#endif 	/* __IDebugPort2_FWD_DEFINED__ */


#ifndef __IDebugPortRequest2_FWD_DEFINED__
#define __IDebugPortRequest2_FWD_DEFINED__
typedef interface IDebugPortRequest2 IDebugPortRequest2;
#endif 	/* __IDebugPortRequest2_FWD_DEFINED__ */


#ifndef __IDebugPortNotify2_FWD_DEFINED__
#define __IDebugPortNotify2_FWD_DEFINED__
typedef interface IDebugPortNotify2 IDebugPortNotify2;
#endif 	/* __IDebugPortNotify2_FWD_DEFINED__ */


#ifndef __IDebugPortEvents2_FWD_DEFINED__
#define __IDebugPortEvents2_FWD_DEFINED__
typedef interface IDebugPortEvents2 IDebugPortEvents2;
#endif 	/* __IDebugPortEvents2_FWD_DEFINED__ */


#ifndef __IDebugMDMUtil2_FWD_DEFINED__
#define __IDebugMDMUtil2_FWD_DEFINED__
typedef interface IDebugMDMUtil2 IDebugMDMUtil2;
#endif 	/* __IDebugMDMUtil2_FWD_DEFINED__ */


#ifndef __IDebugSession2_FWD_DEFINED__
#define __IDebugSession2_FWD_DEFINED__
typedef interface IDebugSession2 IDebugSession2;
#endif 	/* __IDebugSession2_FWD_DEFINED__ */


#ifndef __IDebugEngine2_FWD_DEFINED__
#define __IDebugEngine2_FWD_DEFINED__
typedef interface IDebugEngine2 IDebugEngine2;
#endif 	/* __IDebugEngine2_FWD_DEFINED__ */


#ifndef __IDebugEngineLaunch2_FWD_DEFINED__
#define __IDebugEngineLaunch2_FWD_DEFINED__
typedef interface IDebugEngineLaunch2 IDebugEngineLaunch2;
#endif 	/* __IDebugEngineLaunch2_FWD_DEFINED__ */


#ifndef __IDebugEventCallback2_FWD_DEFINED__
#define __IDebugEventCallback2_FWD_DEFINED__
typedef interface IDebugEventCallback2 IDebugEventCallback2;
#endif 	/* __IDebugEventCallback2_FWD_DEFINED__ */


#ifndef __IDebugEvent2_FWD_DEFINED__
#define __IDebugEvent2_FWD_DEFINED__
typedef interface IDebugEvent2 IDebugEvent2;
#endif 	/* __IDebugEvent2_FWD_DEFINED__ */


#ifndef __IDebugSessionCreateEvent2_FWD_DEFINED__
#define __IDebugSessionCreateEvent2_FWD_DEFINED__
typedef interface IDebugSessionCreateEvent2 IDebugSessionCreateEvent2;
#endif 	/* __IDebugSessionCreateEvent2_FWD_DEFINED__ */


#ifndef __IDebugSessionDestroyEvent2_FWD_DEFINED__
#define __IDebugSessionDestroyEvent2_FWD_DEFINED__
typedef interface IDebugSessionDestroyEvent2 IDebugSessionDestroyEvent2;
#endif 	/* __IDebugSessionDestroyEvent2_FWD_DEFINED__ */


#ifndef __IDebugEngineCreateEvent2_FWD_DEFINED__
#define __IDebugEngineCreateEvent2_FWD_DEFINED__
typedef interface IDebugEngineCreateEvent2 IDebugEngineCreateEvent2;
#endif 	/* __IDebugEngineCreateEvent2_FWD_DEFINED__ */


#ifndef __IDebugProcessCreateEvent2_FWD_DEFINED__
#define __IDebugProcessCreateEvent2_FWD_DEFINED__
typedef interface IDebugProcessCreateEvent2 IDebugProcessCreateEvent2;
#endif 	/* __IDebugProcessCreateEvent2_FWD_DEFINED__ */


#ifndef __IDebugProcessDestroyEvent2_FWD_DEFINED__
#define __IDebugProcessDestroyEvent2_FWD_DEFINED__
typedef interface IDebugProcessDestroyEvent2 IDebugProcessDestroyEvent2;
#endif 	/* __IDebugProcessDestroyEvent2_FWD_DEFINED__ */


#ifndef __IDebugProgramCreateEvent2_FWD_DEFINED__
#define __IDebugProgramCreateEvent2_FWD_DEFINED__
typedef interface IDebugProgramCreateEvent2 IDebugProgramCreateEvent2;
#endif 	/* __IDebugProgramCreateEvent2_FWD_DEFINED__ */


#ifndef __IDebugProgramDestroyEvent2_FWD_DEFINED__
#define __IDebugProgramDestroyEvent2_FWD_DEFINED__
typedef interface IDebugProgramDestroyEvent2 IDebugProgramDestroyEvent2;
#endif 	/* __IDebugProgramDestroyEvent2_FWD_DEFINED__ */


#ifndef __IDebugThreadCreateEvent2_FWD_DEFINED__
#define __IDebugThreadCreateEvent2_FWD_DEFINED__
typedef interface IDebugThreadCreateEvent2 IDebugThreadCreateEvent2;
#endif 	/* __IDebugThreadCreateEvent2_FWD_DEFINED__ */


#ifndef __IDebugThreadDestroyEvent2_FWD_DEFINED__
#define __IDebugThreadDestroyEvent2_FWD_DEFINED__
typedef interface IDebugThreadDestroyEvent2 IDebugThreadDestroyEvent2;
#endif 	/* __IDebugThreadDestroyEvent2_FWD_DEFINED__ */


#ifndef __IDebugLoadCompleteEvent2_FWD_DEFINED__
#define __IDebugLoadCompleteEvent2_FWD_DEFINED__
typedef interface IDebugLoadCompleteEvent2 IDebugLoadCompleteEvent2;
#endif 	/* __IDebugLoadCompleteEvent2_FWD_DEFINED__ */


#ifndef __IDebugEntryPointEvent2_FWD_DEFINED__
#define __IDebugEntryPointEvent2_FWD_DEFINED__
typedef interface IDebugEntryPointEvent2 IDebugEntryPointEvent2;
#endif 	/* __IDebugEntryPointEvent2_FWD_DEFINED__ */


#ifndef __IDebugStepCompleteEvent2_FWD_DEFINED__
#define __IDebugStepCompleteEvent2_FWD_DEFINED__
typedef interface IDebugStepCompleteEvent2 IDebugStepCompleteEvent2;
#endif 	/* __IDebugStepCompleteEvent2_FWD_DEFINED__ */


#ifndef __IDebugCanStopEvent2_FWD_DEFINED__
#define __IDebugCanStopEvent2_FWD_DEFINED__
typedef interface IDebugCanStopEvent2 IDebugCanStopEvent2;
#endif 	/* __IDebugCanStopEvent2_FWD_DEFINED__ */


#ifndef __IDebugBreakEvent2_FWD_DEFINED__
#define __IDebugBreakEvent2_FWD_DEFINED__
typedef interface IDebugBreakEvent2 IDebugBreakEvent2;
#endif 	/* __IDebugBreakEvent2_FWD_DEFINED__ */


#ifndef __IDebugBreakpointEvent2_FWD_DEFINED__
#define __IDebugBreakpointEvent2_FWD_DEFINED__
typedef interface IDebugBreakpointEvent2 IDebugBreakpointEvent2;
#endif 	/* __IDebugBreakpointEvent2_FWD_DEFINED__ */


#ifndef __IDebugExceptionEvent2_FWD_DEFINED__
#define __IDebugExceptionEvent2_FWD_DEFINED__
typedef interface IDebugExceptionEvent2 IDebugExceptionEvent2;
#endif 	/* __IDebugExceptionEvent2_FWD_DEFINED__ */


#ifndef __IDebugOutputStringEvent2_FWD_DEFINED__
#define __IDebugOutputStringEvent2_FWD_DEFINED__
typedef interface IDebugOutputStringEvent2 IDebugOutputStringEvent2;
#endif 	/* __IDebugOutputStringEvent2_FWD_DEFINED__ */


#ifndef __IDebugModuleLoadEvent2_FWD_DEFINED__
#define __IDebugModuleLoadEvent2_FWD_DEFINED__
typedef interface IDebugModuleLoadEvent2 IDebugModuleLoadEvent2;
#endif 	/* __IDebugModuleLoadEvent2_FWD_DEFINED__ */


#ifndef __IDebugPropertyCreateEvent2_FWD_DEFINED__
#define __IDebugPropertyCreateEvent2_FWD_DEFINED__
typedef interface IDebugPropertyCreateEvent2 IDebugPropertyCreateEvent2;
#endif 	/* __IDebugPropertyCreateEvent2_FWD_DEFINED__ */


#ifndef __IDebugPropertyDestroyEvent2_FWD_DEFINED__
#define __IDebugPropertyDestroyEvent2_FWD_DEFINED__
typedef interface IDebugPropertyDestroyEvent2 IDebugPropertyDestroyEvent2;
#endif 	/* __IDebugPropertyDestroyEvent2_FWD_DEFINED__ */


#ifndef __IDebugBreakpointBoundEvent2_FWD_DEFINED__
#define __IDebugBreakpointBoundEvent2_FWD_DEFINED__
typedef interface IDebugBreakpointBoundEvent2 IDebugBreakpointBoundEvent2;
#endif 	/* __IDebugBreakpointBoundEvent2_FWD_DEFINED__ */


#ifndef __IDebugBreakpointUnboundEvent2_FWD_DEFINED__
#define __IDebugBreakpointUnboundEvent2_FWD_DEFINED__
typedef interface IDebugBreakpointUnboundEvent2 IDebugBreakpointUnboundEvent2;
#endif 	/* __IDebugBreakpointUnboundEvent2_FWD_DEFINED__ */


#ifndef __IDebugBreakpointErrorEvent2_FWD_DEFINED__
#define __IDebugBreakpointErrorEvent2_FWD_DEFINED__
typedef interface IDebugBreakpointErrorEvent2 IDebugBreakpointErrorEvent2;
#endif 	/* __IDebugBreakpointErrorEvent2_FWD_DEFINED__ */


#ifndef __IDebugExpressionEvaluationCompleteEvent2_FWD_DEFINED__
#define __IDebugExpressionEvaluationCompleteEvent2_FWD_DEFINED__
typedef interface IDebugExpressionEvaluationCompleteEvent2 IDebugExpressionEvaluationCompleteEvent2;
#endif 	/* __IDebugExpressionEvaluationCompleteEvent2_FWD_DEFINED__ */


#ifndef __IDebugReturnValueEvent2_FWD_DEFINED__
#define __IDebugReturnValueEvent2_FWD_DEFINED__
typedef interface IDebugReturnValueEvent2 IDebugReturnValueEvent2;
#endif 	/* __IDebugReturnValueEvent2_FWD_DEFINED__ */


#ifndef __IDebugFindSymbolEvent2_FWD_DEFINED__
#define __IDebugFindSymbolEvent2_FWD_DEFINED__
typedef interface IDebugFindSymbolEvent2 IDebugFindSymbolEvent2;
#endif 	/* __IDebugFindSymbolEvent2_FWD_DEFINED__ */


#ifndef __IDebugNoSymbolsEvent2_FWD_DEFINED__
#define __IDebugNoSymbolsEvent2_FWD_DEFINED__
typedef interface IDebugNoSymbolsEvent2 IDebugNoSymbolsEvent2;
#endif 	/* __IDebugNoSymbolsEvent2_FWD_DEFINED__ */


#ifndef __IDebugProgramNameChangedEvent2_FWD_DEFINED__
#define __IDebugProgramNameChangedEvent2_FWD_DEFINED__
typedef interface IDebugProgramNameChangedEvent2 IDebugProgramNameChangedEvent2;
#endif 	/* __IDebugProgramNameChangedEvent2_FWD_DEFINED__ */


#ifndef __IDebugThreadNameChangedEvent2_FWD_DEFINED__
#define __IDebugThreadNameChangedEvent2_FWD_DEFINED__
typedef interface IDebugThreadNameChangedEvent2 IDebugThreadNameChangedEvent2;
#endif 	/* __IDebugThreadNameChangedEvent2_FWD_DEFINED__ */


#ifndef __IDebugMessageEvent2_FWD_DEFINED__
#define __IDebugMessageEvent2_FWD_DEFINED__
typedef interface IDebugMessageEvent2 IDebugMessageEvent2;
#endif 	/* __IDebugMessageEvent2_FWD_DEFINED__ */


#ifndef __IDebugActivateDocumentEvent2_FWD_DEFINED__
#define __IDebugActivateDocumentEvent2_FWD_DEFINED__
typedef interface IDebugActivateDocumentEvent2 IDebugActivateDocumentEvent2;
#endif 	/* __IDebugActivateDocumentEvent2_FWD_DEFINED__ */


#ifndef __IDebugProcess2_FWD_DEFINED__
#define __IDebugProcess2_FWD_DEFINED__
typedef interface IDebugProcess2 IDebugProcess2;
#endif 	/* __IDebugProcess2_FWD_DEFINED__ */


#ifndef __IDebugProgram2_FWD_DEFINED__
#define __IDebugProgram2_FWD_DEFINED__
typedef interface IDebugProgram2 IDebugProgram2;
#endif 	/* __IDebugProgram2_FWD_DEFINED__ */


#ifndef __IDebugEngineProgram2_FWD_DEFINED__
#define __IDebugEngineProgram2_FWD_DEFINED__
typedef interface IDebugEngineProgram2 IDebugEngineProgram2;
#endif 	/* __IDebugEngineProgram2_FWD_DEFINED__ */


#ifndef __IDebugProgramHost2_FWD_DEFINED__
#define __IDebugProgramHost2_FWD_DEFINED__
typedef interface IDebugProgramHost2 IDebugProgramHost2;
#endif 	/* __IDebugProgramHost2_FWD_DEFINED__ */


#ifndef __IDebugProgramNode2_FWD_DEFINED__
#define __IDebugProgramNode2_FWD_DEFINED__
typedef interface IDebugProgramNode2 IDebugProgramNode2;
#endif 	/* __IDebugProgramNode2_FWD_DEFINED__ */


#ifndef __IDebugProgramEngines2_FWD_DEFINED__
#define __IDebugProgramEngines2_FWD_DEFINED__
typedef interface IDebugProgramEngines2 IDebugProgramEngines2;
#endif 	/* __IDebugProgramEngines2_FWD_DEFINED__ */


#ifndef __IDebugThread2_FWD_DEFINED__
#define __IDebugThread2_FWD_DEFINED__
typedef interface IDebugThread2 IDebugThread2;
#endif 	/* __IDebugThread2_FWD_DEFINED__ */


#ifndef __IDebugLogicalThread2_FWD_DEFINED__
#define __IDebugLogicalThread2_FWD_DEFINED__
typedef interface IDebugLogicalThread2 IDebugLogicalThread2;
#endif 	/* __IDebugLogicalThread2_FWD_DEFINED__ */


#ifndef __IDebugProperty2_FWD_DEFINED__
#define __IDebugProperty2_FWD_DEFINED__
typedef interface IDebugProperty2 IDebugProperty2;
#endif 	/* __IDebugProperty2_FWD_DEFINED__ */


#ifndef __IDebugReference2_FWD_DEFINED__
#define __IDebugReference2_FWD_DEFINED__
typedef interface IDebugReference2 IDebugReference2;
#endif 	/* __IDebugReference2_FWD_DEFINED__ */


#ifndef __IDebugStackFrame2_FWD_DEFINED__
#define __IDebugStackFrame2_FWD_DEFINED__
typedef interface IDebugStackFrame2 IDebugStackFrame2;
#endif 	/* __IDebugStackFrame2_FWD_DEFINED__ */


#ifndef __IDebugMemoryContext2_FWD_DEFINED__
#define __IDebugMemoryContext2_FWD_DEFINED__
typedef interface IDebugMemoryContext2 IDebugMemoryContext2;
#endif 	/* __IDebugMemoryContext2_FWD_DEFINED__ */


#ifndef __IDebugCodeContext2_FWD_DEFINED__
#define __IDebugCodeContext2_FWD_DEFINED__
typedef interface IDebugCodeContext2 IDebugCodeContext2;
#endif 	/* __IDebugCodeContext2_FWD_DEFINED__ */


#ifndef __IDebugMemoryBytes2_FWD_DEFINED__
#define __IDebugMemoryBytes2_FWD_DEFINED__
typedef interface IDebugMemoryBytes2 IDebugMemoryBytes2;
#endif 	/* __IDebugMemoryBytes2_FWD_DEFINED__ */


#ifndef __IDebugDisassemblyStream2_FWD_DEFINED__
#define __IDebugDisassemblyStream2_FWD_DEFINED__
typedef interface IDebugDisassemblyStream2 IDebugDisassemblyStream2;
#endif 	/* __IDebugDisassemblyStream2_FWD_DEFINED__ */


#ifndef __IDebugDocumentContext2_FWD_DEFINED__
#define __IDebugDocumentContext2_FWD_DEFINED__
typedef interface IDebugDocumentContext2 IDebugDocumentContext2;
#endif 	/* __IDebugDocumentContext2_FWD_DEFINED__ */


#ifndef __IDebugExpressionContext2_FWD_DEFINED__
#define __IDebugExpressionContext2_FWD_DEFINED__
typedef interface IDebugExpressionContext2 IDebugExpressionContext2;
#endif 	/* __IDebugExpressionContext2_FWD_DEFINED__ */


#ifndef __IDebugBreakpointRequest2_FWD_DEFINED__
#define __IDebugBreakpointRequest2_FWD_DEFINED__
typedef interface IDebugBreakpointRequest2 IDebugBreakpointRequest2;
#endif 	/* __IDebugBreakpointRequest2_FWD_DEFINED__ */


#ifndef __IDebugBreakpointResolution2_FWD_DEFINED__
#define __IDebugBreakpointResolution2_FWD_DEFINED__
typedef interface IDebugBreakpointResolution2 IDebugBreakpointResolution2;
#endif 	/* __IDebugBreakpointResolution2_FWD_DEFINED__ */


#ifndef __IDebugErrorBreakpointResolution2_FWD_DEFINED__
#define __IDebugErrorBreakpointResolution2_FWD_DEFINED__
typedef interface IDebugErrorBreakpointResolution2 IDebugErrorBreakpointResolution2;
#endif 	/* __IDebugErrorBreakpointResolution2_FWD_DEFINED__ */


#ifndef __IDebugBoundBreakpoint2_FWD_DEFINED__
#define __IDebugBoundBreakpoint2_FWD_DEFINED__
typedef interface IDebugBoundBreakpoint2 IDebugBoundBreakpoint2;
#endif 	/* __IDebugBoundBreakpoint2_FWD_DEFINED__ */


#ifndef __IDebugPendingBreakpoint2_FWD_DEFINED__
#define __IDebugPendingBreakpoint2_FWD_DEFINED__
typedef interface IDebugPendingBreakpoint2 IDebugPendingBreakpoint2;
#endif 	/* __IDebugPendingBreakpoint2_FWD_DEFINED__ */


#ifndef __IDebugErrorBreakpoint2_FWD_DEFINED__
#define __IDebugErrorBreakpoint2_FWD_DEFINED__
typedef interface IDebugErrorBreakpoint2 IDebugErrorBreakpoint2;
#endif 	/* __IDebugErrorBreakpoint2_FWD_DEFINED__ */


#ifndef __IDebugExpression2_FWD_DEFINED__
#define __IDebugExpression2_FWD_DEFINED__
typedef interface IDebugExpression2 IDebugExpression2;
#endif 	/* __IDebugExpression2_FWD_DEFINED__ */


#ifndef __IDebugModule2_FWD_DEFINED__
#define __IDebugModule2_FWD_DEFINED__
typedef interface IDebugModule2 IDebugModule2;
#endif 	/* __IDebugModule2_FWD_DEFINED__ */


#ifndef __IDebugModuleManaged_FWD_DEFINED__
#define __IDebugModuleManaged_FWD_DEFINED__
typedef interface IDebugModuleManaged IDebugModuleManaged;
#endif 	/* __IDebugModuleManaged_FWD_DEFINED__ */


#ifndef __IDebugDocument2_FWD_DEFINED__
#define __IDebugDocument2_FWD_DEFINED__
typedef interface IDebugDocument2 IDebugDocument2;
#endif 	/* __IDebugDocument2_FWD_DEFINED__ */


#ifndef __IDebugDocumentText2_FWD_DEFINED__
#define __IDebugDocumentText2_FWD_DEFINED__
typedef interface IDebugDocumentText2 IDebugDocumentText2;
#endif 	/* __IDebugDocumentText2_FWD_DEFINED__ */


#ifndef __IDebugDocumentPosition2_FWD_DEFINED__
#define __IDebugDocumentPosition2_FWD_DEFINED__
typedef interface IDebugDocumentPosition2 IDebugDocumentPosition2;
#endif 	/* __IDebugDocumentPosition2_FWD_DEFINED__ */


#ifndef __IDebugDocumentPositionOffset2_FWD_DEFINED__
#define __IDebugDocumentPositionOffset2_FWD_DEFINED__
typedef interface IDebugDocumentPositionOffset2 IDebugDocumentPositionOffset2;
#endif 	/* __IDebugDocumentPositionOffset2_FWD_DEFINED__ */


#ifndef __IDebugFunctionPosition2_FWD_DEFINED__
#define __IDebugFunctionPosition2_FWD_DEFINED__
typedef interface IDebugFunctionPosition2 IDebugFunctionPosition2;
#endif 	/* __IDebugFunctionPosition2_FWD_DEFINED__ */


#ifndef __IDebugDocumentTextEvents2_FWD_DEFINED__
#define __IDebugDocumentTextEvents2_FWD_DEFINED__
typedef interface IDebugDocumentTextEvents2 IDebugDocumentTextEvents2;
#endif 	/* __IDebugDocumentTextEvents2_FWD_DEFINED__ */


#ifndef __IDebugQueryEngine2_FWD_DEFINED__
#define __IDebugQueryEngine2_FWD_DEFINED__
typedef interface IDebugQueryEngine2 IDebugQueryEngine2;
#endif 	/* __IDebugQueryEngine2_FWD_DEFINED__ */


#ifndef __IEnumDebugProcesses2_FWD_DEFINED__
#define __IEnumDebugProcesses2_FWD_DEFINED__
typedef interface IEnumDebugProcesses2 IEnumDebugProcesses2;
#endif 	/* __IEnumDebugProcesses2_FWD_DEFINED__ */


#ifndef __IEnumDebugPrograms2_FWD_DEFINED__
#define __IEnumDebugPrograms2_FWD_DEFINED__
typedef interface IEnumDebugPrograms2 IEnumDebugPrograms2;
#endif 	/* __IEnumDebugPrograms2_FWD_DEFINED__ */


#ifndef __IEnumDebugThreads2_FWD_DEFINED__
#define __IEnumDebugThreads2_FWD_DEFINED__
typedef interface IEnumDebugThreads2 IEnumDebugThreads2;
#endif 	/* __IEnumDebugThreads2_FWD_DEFINED__ */


#ifndef __IEnumDebugStackFrames2_FWD_DEFINED__
#define __IEnumDebugStackFrames2_FWD_DEFINED__
typedef interface IEnumDebugStackFrames2 IEnumDebugStackFrames2;
#endif 	/* __IEnumDebugStackFrames2_FWD_DEFINED__ */


#ifndef __IEnumDebugCodeContexts2_FWD_DEFINED__
#define __IEnumDebugCodeContexts2_FWD_DEFINED__
typedef interface IEnumDebugCodeContexts2 IEnumDebugCodeContexts2;
#endif 	/* __IEnumDebugCodeContexts2_FWD_DEFINED__ */


#ifndef __IEnumDebugBoundBreakpoints2_FWD_DEFINED__
#define __IEnumDebugBoundBreakpoints2_FWD_DEFINED__
typedef interface IEnumDebugBoundBreakpoints2 IEnumDebugBoundBreakpoints2;
#endif 	/* __IEnumDebugBoundBreakpoints2_FWD_DEFINED__ */


#ifndef __IEnumDebugPendingBreakpoints2_FWD_DEFINED__
#define __IEnumDebugPendingBreakpoints2_FWD_DEFINED__
typedef interface IEnumDebugPendingBreakpoints2 IEnumDebugPendingBreakpoints2;
#endif 	/* __IEnumDebugPendingBreakpoints2_FWD_DEFINED__ */


#ifndef __IEnumDebugErrorBreakpoints2_FWD_DEFINED__
#define __IEnumDebugErrorBreakpoints2_FWD_DEFINED__
typedef interface IEnumDebugErrorBreakpoints2 IEnumDebugErrorBreakpoints2;
#endif 	/* __IEnumDebugErrorBreakpoints2_FWD_DEFINED__ */


#ifndef __IEnumDebugMachines2_FWD_DEFINED__
#define __IEnumDebugMachines2_FWD_DEFINED__
typedef interface IEnumDebugMachines2 IEnumDebugMachines2;
#endif 	/* __IEnumDebugMachines2_FWD_DEFINED__ */


#ifndef __IEnumDebugExceptionInfo2_FWD_DEFINED__
#define __IEnumDebugExceptionInfo2_FWD_DEFINED__
typedef interface IEnumDebugExceptionInfo2 IEnumDebugExceptionInfo2;
#endif 	/* __IEnumDebugExceptionInfo2_FWD_DEFINED__ */


#ifndef __IEnumDebugFrameInfo2_FWD_DEFINED__
#define __IEnumDebugFrameInfo2_FWD_DEFINED__
typedef interface IEnumDebugFrameInfo2 IEnumDebugFrameInfo2;
#endif 	/* __IEnumDebugFrameInfo2_FWD_DEFINED__ */


#ifndef __IEnumCodePaths2_FWD_DEFINED__
#define __IEnumCodePaths2_FWD_DEFINED__
typedef interface IEnumCodePaths2 IEnumCodePaths2;
#endif 	/* __IEnumCodePaths2_FWD_DEFINED__ */


#ifndef __IEnumDebugModules2_FWD_DEFINED__
#define __IEnumDebugModules2_FWD_DEFINED__
typedef interface IEnumDebugModules2 IEnumDebugModules2;
#endif 	/* __IEnumDebugModules2_FWD_DEFINED__ */


#ifndef __IEnumDebugPortSuppliers2_FWD_DEFINED__
#define __IEnumDebugPortSuppliers2_FWD_DEFINED__
typedef interface IEnumDebugPortSuppliers2 IEnumDebugPortSuppliers2;
#endif 	/* __IEnumDebugPortSuppliers2_FWD_DEFINED__ */


#ifndef __IEnumDebugPorts2_FWD_DEFINED__
#define __IEnumDebugPorts2_FWD_DEFINED__
typedef interface IEnumDebugPorts2 IEnumDebugPorts2;
#endif 	/* __IEnumDebugPorts2_FWD_DEFINED__ */


#ifndef __IEnumDebugPropertyInfo2_FWD_DEFINED__
#define __IEnumDebugPropertyInfo2_FWD_DEFINED__
typedef interface IEnumDebugPropertyInfo2 IEnumDebugPropertyInfo2;
#endif 	/* __IEnumDebugPropertyInfo2_FWD_DEFINED__ */


#ifndef __IEnumDebugReferenceInfo2_FWD_DEFINED__
#define __IEnumDebugReferenceInfo2_FWD_DEFINED__
typedef interface IEnumDebugReferenceInfo2 IEnumDebugReferenceInfo2;
#endif 	/* __IEnumDebugReferenceInfo2_FWD_DEFINED__ */


#ifndef __SDMServer_FWD_DEFINED__
#define __SDMServer_FWD_DEFINED__

#ifdef __cplusplus
typedef class SDMServer SDMServer;
#else
typedef struct SDMServer SDMServer;
#endif /* __cplusplus */

#endif 	/* __SDMServer_FWD_DEFINED__ */


#ifndef __MsMachineDebugManager_FWD_DEFINED__
#define __MsMachineDebugManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class MsMachineDebugManager MsMachineDebugManager;
#else
typedef struct MsMachineDebugManager MsMachineDebugManager;
#endif /* __cplusplus */

#endif 	/* __MsMachineDebugManager_FWD_DEFINED__ */


#ifndef __MDMUtilServer_FWD_DEFINED__
#define __MDMUtilServer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MDMUtilServer MDMUtilServer;
#else
typedef struct MDMUtilServer MDMUtilServer;
#endif /* __cplusplus */

#endif 	/* __MDMUtilServer_FWD_DEFINED__ */


/* header files for imported files */
#include "ocidl.h"
#include "enc.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_msdbg_0000 */
/* [local] */ 

#ifndef _BASETSD_H_
#pragma once
typedef signed char INT8;

typedef signed char *PINT8;

typedef short INT16;

typedef short *PINT16;

typedef int INT32;

typedef int *PINT32;

typedef __int64 INT64;

typedef __int64 *PINT64;

typedef unsigned char UINT8;

typedef unsigned char *PUINT8;

typedef unsigned short UINT16;

typedef unsigned short *PUINT16;

typedef unsigned int UINT32;

typedef unsigned int *PUINT32;

typedef unsigned __int64 UINT64;

typedef unsigned __int64 *PUINT64;

typedef int LONG32;

typedef int *PLONG32;

typedef unsigned int ULONG32;

typedef unsigned int *PULONG32;

typedef unsigned int DWORD32;

typedef unsigned int *PDWORD32;

typedef /* [public] */ __int3264 INT_PTR;

typedef /* [public] */ __int3264 *PINT_PTR;

typedef /* [public] */ unsigned __int3264 UINT_PTR;

typedef /* [public] */ unsigned __int3264 *PUINT_PTR;

typedef /* [public] */ __int3264 LONG_PTR;

typedef /* [public] */ __int3264 *PLONG_PTR;

typedef /* [public] */ unsigned __int3264 ULONG_PTR;

typedef /* [public] */ unsigned __int3264 *PULONG_PTR;

typedef unsigned short UHALF_PTR;

typedef unsigned short *PUHALF_PTR;

typedef short HALF_PTR;

typedef short *PHALF_PTR;

typedef long SHANDLE_PTR;

typedef unsigned long HANDLE_PTR;

typedef ULONG_PTR SIZE_T;

typedef ULONG_PTR *PSIZE_T;

typedef LONG_PTR SSIZE_T;

typedef LONG_PTR *PSSIZE_T;

typedef ULONG_PTR DWORD_PTR;

typedef ULONG_PTR *PDWORD_PTR;

typedef __int64 LONG64;

typedef __int64 *PLONG64;

typedef unsigned __int64 ULONG64;

typedef unsigned __int64 *PULONG64;

typedef unsigned __int64 DWORD64;

typedef unsigned __int64 *PDWORD64;

typedef ULONG_PTR KAFFINITY;

typedef KAFFINITY *PKAFFINITY;

#endif // _BASETSD_H_
#define	MSDBG_VERSION	( 7126 )

#define E_ATTACH_DEBUGGER_ALREADY_ATTACHED						MAKE_HRESULT(1, FACILITY_ITF, 0x0001)
#define E_ATTACH_DEBUGGEE_PROCESS_SECURITY_VIOLATION				MAKE_HRESULT(1, FACILITY_ITF, 0x0002)
#define E_ATTACH_CANNOT_ATTACH_TO_DESKTOP						MAKE_HRESULT(1, FACILITY_ITF, 0x0003)
#define S_ATTACH_DEFERRED										MAKE_HRESULT(0, FACILITY_ITF, 0x0004)
#define E_LAUNCH_NO_INTEROP                                      MAKE_HRESULT(1, FACILITY_ITF, 0x0005)
#define E_LAUNCH_DEBUGGING_NOT_POSSIBLE                          MAKE_HRESULT(1, FACILITY_ITF, 0x0006)
#define E_LAUNCH_KERNEL_DEBUGGER_ENABLED                         MAKE_HRESULT(1, FACILITY_ITF, 0x0007)
#define E_LAUNCH_KERNEL_DEBUGGER_PRESENT                         MAKE_HRESULT(1, FACILITY_ITF, 0x0008)
#define E_INTEROP_NOT_SUPPORTED                                  MAKE_HRESULT(1, FACILITY_ITF, 0x0009)
#define E_TOO_MANY_PROCESSES                                     MAKE_HRESULT(1, FACILITY_ITF, 0x000A)
#define E_MACHINE_NOT_AVAILABLE									MAKE_HRESULT(1, FACILITY_ITF, 0x0010)
#define E_MACHINE_DOES_NOT_EXIST									MAKE_HRESULT(1, FACILITY_ITF, 0x0020)
#define E_MACHINE_ACCESS_DENIED									MAKE_HRESULT(1, FACILITY_ITF, 0x0021)
#define E_MACHINE_MDM_EXEC_FAILURE								MAKE_HRESULT(1, FACILITY_ITF, 0x0022)
#define E_MACHINE_DEBUGGER_NOT_REGISTERED_PROPERLY				MAKE_HRESULT(1, FACILITY_ITF, 0x0023)
#define E_EVALUATE_BUSY_WITH_EVALUATION							MAKE_HRESULT(1, FACILITY_ITF, 0x0030)
#define E_EVALUATE_TIMEOUT										MAKE_HRESULT(1, FACILITY_ITF, 0x0031)
#define E_MEMORY_NOTSUPPORTED									MAKE_HRESULT(1, FACILITY_ITF, 0x0040)
#define E_DISASM_NOTSUPPORTED									MAKE_HRESULT(1, FACILITY_ITF, 0x0041)
#define E_DISASM_BADADDRESS                                      MAKE_HRESULT(1, FACILITY_ITF, 0x0042)
#define E_DISASM_NOTAVAILABLE                                    MAKE_HRESULT(1, FACILITY_ITF, 0x0043)
#define E_BP_DELETED												MAKE_HRESULT(1, FACILITY_ITF, 0x0060)
#define E_PROCESS_DESTROYED										MAKE_HRESULT(1, FACILITY_ITF, 0x0070)
#define E_PROCESS_DEBUGGER_IS_DEBUGGEE							MAKE_HRESULT(1, FACILITY_ITF, 0x0071)
#define E_PORTSUPPLIER_NO_PORT									MAKE_HRESULT(1, FACILITY_ITF, 0x0080)
#define E_PORT_NO_REQUEST										MAKE_HRESULT(1, FACILITY_ITF, 0x0090)
#define E_COMPARE_CANNOT_COMPARE									MAKE_HRESULT(1, FACILITY_ITF, 0x00a0)
#define S_JIT_USERCANCELLED										MAKE_HRESULT(0, FACILITY_ITF, 0x00b0)
#define E_JIT_INVALID_PID										MAKE_HRESULT(1, FACILITY_ITF, 0x00b1)
#define E_JIT_REMOTE_FAILED										MAKE_HRESULT(0, FACILITY_ITF, 0x00b2)
#define S_TERMINATE_PROCESSES_STILL_DETACHING					MAKE_HRESULT(0, FACILITY_ITF, 0x00c0)
#define E_DETACH_NO_PROXY								        MAKE_HRESULT(1, FACILITY_ITF, 0x00d0)
#define E_DETACH_TS_UNSUPPORTED						            MAKE_HRESULT(1, FACILITY_ITF, 0x00e0)
#define E_DETACH_IMPERSONATE_FAILURE						        MAKE_HRESULT(1, FACILITY_ITF, 0x00f0)
#define E_CANNOT_SET_NEXT_STATEMENT_ON_NONLEAF_FRAME				MAKE_HRESULT(1, FACILITY_ITF, 0x0100)
#define E_CANNOT_SETIP_TO_DIFFERENT_FUNCTION                     MAKE_HRESULT(1, FACILITY_ITF, 0x0104)
#define E_CANNOT_SET_NEXT_STATEMENT_ON_EXCEPTION                 MAKE_HRESULT(1, FACILITY_ITF, 0x0105)
#define E_CANNOT_DEBUG_MDM										MAKE_HRESULT(1, FACILITY_ITF, 0x0110)
#define E_TARGET_FILE_MISSING									MAKE_HRESULT(1, FACILITY_ITF, 0x0100)
#define E_TARGET_FILE_MISMATCH									MAKE_HRESULT(1, FACILITY_ITF, 0x0101)
#define E_IMAGE_NOT_LOADED										MAKE_HRESULT(1, FACILITY_ITF, 0x0102)
#define E_FIBER_NOT_SUPPORTED									MAKE_HRESULT(1, FACILITY_ITF, 0x0103)
#define E_ASYNCBREAK_NO_PROGRAMS									MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0110)
#define E_ASYNCBREAK_DEBUGGEE_NOT_INITIALIZED					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0111)
#define E_CANNOT_GET_UNMANAGED_MEMORY_CONTEXT					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0561)
#define E_DESTROYED												MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 1)
#define E_REMOTE_NOMSVCMON										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 2)
#define E_REMOTE_BADIPADDRESS									MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 3)
#define E_REMOTE_MACHINEDOWN										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 4)
#define E_REMOTE_MACHINEUNSPECIFIED								MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 5)
#define E_CRASHDUMP_ACTIVE										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 6)
#define E_ALL_THREADS_SUSPENDED									MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 7)
#define E_LOAD_DLL_TL											MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 8)
#define E_LOAD_DLL_SH											MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 9)
#define E_LOAD_DLL_EM											MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 10)
#define E_LOAD_DLL_EE											MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 11)
#define E_LOAD_DLL_DM											MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 12)
#define E_LOAD_DLL_MD											MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 13)
#define E_IOREDIR_BADFILE										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 14)
#define E_IOREDIR_BADSYNTAX										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 15)
#define E_REMOTE_BADVERSION										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 16)
#define E_CRASHDUMP_UNSUPPORTED									MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 17)
#define E_UNSUPPORTED_BINARY										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 21)
#define E_DEBUGGEE_BLOCKED										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 22)
#define E_REMOTE_NOUSERMSVCMON									MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 23)
#define E_STEP_WIN9xSYSCODE                                      MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 24)
#define E_INTEROP_ORPC_INIT 										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 25)
#define E_CANNOT_DEBUG_WIN32										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 27)
#define E_CANNOT_DEBUG_WIN64										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 28)
#define E_MINIDUMP_READ_WIN9X                                    MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 29)
#define E_CROSS_TSSESSION_ATTACH 								MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 30)
#define E_STEP_BP_SET_FAILED										MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF, 0x200 + 31)
#define E_REFERENCE_NOT_VALID									MAKE_HRESULT(1, FACILITY_ITF, 0x0501)
#define E_PROPERTY_NOT_VALID										MAKE_HRESULT(1, FACILITY_ITF, 0x0511)
#define E_SETVALUE_VALUE_CANNOT_BE_SET							MAKE_HRESULT(1, FACILITY_ITF, 0x0521)
#define E_SETVALUE_VALUE_IS_READONLY								MAKE_HRESULT(1, FACILITY_ITF, 0x0522)
#define E_SETVALUEASREFERENCE_NOTSUPPORTED						MAKE_HRESULT(1, FACILITY_ITF, 0x0523)
#define S_GETPARENT_NO_PARENT									MAKE_HRESULT(0, FACILITY_ITF, 0x0531)
#define S_GETDERIVEDMOST_NO_DERIVED_MOST							MAKE_HRESULT(0, FACILITY_ITF, 0x0541)
#define S_GETMEMORYBYTES_NO_MEMORY_BYTES							MAKE_HRESULT(0, FACILITY_ITF, 0x0551)
#define S_GETMEMORYCONTEXT_NO_MEMORY_CONTEXT						MAKE_HRESULT(0, FACILITY_ITF, 0x0561)
#define S_GETSIZE_NO_SIZE										MAKE_HRESULT(0, FACILITY_ITF, 0x0571)
#define E_GETREFERENCE_NO_REFERENCE								MAKE_HRESULT(1, FACILITY_ITF, 0x0581)
#define S_GETEXTENDEDINFO_NO_EXTENDEDINFO						MAKE_HRESULT(0, FACILITY_ITF, 0x0591)
#define E_CODE_CONTEXT_OUT_OF_SCOPE								MAKE_HRESULT(1, FACILITY_ITF, 0x05A1)
#define E_INVALID_SESSIONID										MAKE_HRESULT(1, FACILITY_ITF, 0x05A2)
#define E_SERVER_UNAVAILABLE_ON_CALLBACK							MAKE_HRESULT(1, FACILITY_ITF, 0x05A3)
#define E_ACCESS_DENIED_ON_CALLBACK								MAKE_HRESULT(1, FACILITY_ITF, 0x05A4)
#define E_UNKNOWN_AUTHN_SERVICE_ON_CALLBACK						MAKE_HRESULT(1, FACILITY_ITF, 0x05A5)
#define E_NO_SESSION_AVAILABLE									MAKE_HRESULT(1, FACILITY_ITF, 0x05A6)
#define E_CLIENT_NOT_LOGGED_ON                                   MAKE_HRESULT(1, FACILITY_ITF, 0x05A7)
#define E_OTHER_USERS_SESSION                                    MAKE_HRESULT(1, FACILITY_ITF, 0x05A8)
#define E_USER_LEVEL_ACCESS_CONTROL_REQUIRED                     MAKE_HRESULT(1, FACILITY_ITF, 0x05A9)
#define E_SCRIPT_CLR_EE_DISABLED                                 MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x5B0)
#define E_HTTP_SERVERERROR										MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x700)
#define E_HTTP_PERMISSION_DENIED									MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x701)
#define E_HTTP_SENDREQUEST_FAILED								MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x702)
#define E_HTTP_FORBIDDEN											MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x703)
#define E_HTTP_NOT_SUPPORTED										MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x704)
#define E_HTTP_NO_CONTENT										MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x705)
#define E_FUNCTION_NOT_JITTED                                    MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x800)
#define E_NO_CODE_CONTEXT                                        MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x801)
#define E_AUTOATTACH_ACCESS_DENIED                               MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x900)
#define E_AUTOATTACH_WEBSERVER_NOT_FOUND                         MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x901)





















































extern GUID guidVBLang;
extern GUID guidVBScriptLang;
extern GUID guidJScriptLang;
extern GUID guidCLang;
extern GUID guidCPPLang;
extern GUID guidSQLLang;
extern GUID guidScriptLang;
extern GUID guidSafeCLang;
extern GUID guidManagedCLang;
extern GUID guidManagedCPPLang;
extern GUID guidScriptEng;
extern GUID guidSQLEng;
extern GUID guidCOMPlusNativeEng;
extern GUID guidCOMPlusOnlyEng;
extern GUID guidNativeOnlyEng;
extern GUID guidMsOrclEng;
extern GUID guidEmbeddedCLREng;
extern GUID guidMicrosoftVendor;
extern GUID guidLocalPortSupplier;
extern GUID guidNativePortSupplier;
extern GUID guidEmbeddedCLRPortSupplier;
extern GUID guidFilterLocals;
extern GUID guidFilterAllLocals;
extern GUID guidFilterArgs;
extern GUID guidFilterLocalsPlusArgs;
extern GUID guidFilterAllLocalsPlusArgs;
extern GUID guidFilterRegisters;
extern GUID guidFilterThis;
// GUIDs for GetExtendedInfo
extern GUID guidDocument;
extern GUID guidCodeContext;
extern GUID guidExtendedInfoSlot;
extern GUID guidExtendedInfoSignature;

enum __MIDL___MIDL_itf_msdbg_0000_0001
    {	GN_NAME	= 0,
	GN_FILENAME	= GN_NAME + 1,
	GN_BASENAME	= GN_FILENAME + 1,
	GN_MONIKERNAME	= GN_BASENAME + 1,
	GN_URL	= GN_MONIKERNAME + 1,
	GN_TITLE	= GN_URL + 1,
	GN_STARTPAGEURL	= GN_TITLE + 1
    } ;
typedef DWORD GETNAME_TYPE;


enum __MIDL___MIDL_itf_msdbg_0000_0002
    {	TEXT_POSITION_MAX_LINE	= 0xffffffff,
	TEXT_POSITION_MAX_COLUMN	= 0xffffffff
    } ;
typedef struct _tagTEXT_POSITION
    {
    DWORD dwLine;
    DWORD dwColumn;
    } 	TEXT_POSITION;



extern RPC_IF_HANDLE __MIDL_itf_msdbg_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdbg_0000_v0_0_s_ifspec;

#ifndef __IDebugMachine2_INTERFACE_DEFINED__
#define __IDebugMachine2_INTERFACE_DEFINED__

/* interface IDebugMachine2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugMachine2_0003
    {	MCIFLAG_TERMINAL_SERVICES_AVAILABLE	= 0x1
    } ;
typedef DWORD MACHINE_INFO_FLAGS;


enum __MIDL_IDebugMachine2_0004
    {	MCIF_NAME	= 0x1,
	MCIF_FLAGS	= 0x2,
	MCIF_ALL	= 0x3
    } ;
typedef DWORD MACHINE_INFO_FIELDS;

typedef struct tagMACHINE_INFO
    {
    MACHINE_INFO_FIELDS Fields;
    BSTR bstrName;
    MACHINE_INFO_FLAGS Flags;
    } 	MACHINE_INFO;


EXTERN_C const IID IID_IDebugMachine2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17bf8fa3-4c5a-49a3-b2f8-5942e1ea287e")
    IDebugMachine2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ MACHINE_INFO_FIELDS Fields,
            /* [out] */ MACHINE_INFO *pMachineInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPortSupplier( 
            /* [in] */ REFGUID guidPortSupplier,
            /* [out] */ IDebugPortSupplier2 **ppPortSupplier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPort( 
            /* [in] */ REFGUID guidPort,
            /* [out] */ IDebugPort2 **ppPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumPorts( 
            /* [out] */ IEnumDebugPorts2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumPortSuppliers( 
            /* [out] */ IEnumDebugPortSuppliers2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMachineUtilities( 
            /* [out] */ IDebugMDMUtil2 **ppUtil) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMachine2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMachine2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMachine2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMachine2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugMachine2 * This,
            /* [in] */ MACHINE_INFO_FIELDS Fields,
            /* [out] */ MACHINE_INFO *pMachineInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugMachine2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortSupplier )( 
            IDebugMachine2 * This,
            /* [in] */ REFGUID guidPortSupplier,
            /* [out] */ IDebugPortSupplier2 **ppPortSupplier);
        
        HRESULT ( STDMETHODCALLTYPE *GetPort )( 
            IDebugMachine2 * This,
            /* [in] */ REFGUID guidPort,
            /* [out] */ IDebugPort2 **ppPort);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPorts )( 
            IDebugMachine2 * This,
            /* [out] */ IEnumDebugPorts2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPortSuppliers )( 
            IDebugMachine2 * This,
            /* [out] */ IEnumDebugPortSuppliers2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetMachineUtilities )( 
            IDebugMachine2 * This,
            /* [out] */ IDebugMDMUtil2 **ppUtil);
        
        END_INTERFACE
    } IDebugMachine2Vtbl;

    interface IDebugMachine2
    {
        CONST_VTBL struct IDebugMachine2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMachine2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMachine2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMachine2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMachine2_GetInfo(This,Fields,pMachineInfo)	\
    (This)->lpVtbl -> GetInfo(This,Fields,pMachineInfo)

#define IDebugMachine2_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IDebugMachine2_GetPortSupplier(This,guidPortSupplier,ppPortSupplier)	\
    (This)->lpVtbl -> GetPortSupplier(This,guidPortSupplier,ppPortSupplier)

#define IDebugMachine2_GetPort(This,guidPort,ppPort)	\
    (This)->lpVtbl -> GetPort(This,guidPort,ppPort)

#define IDebugMachine2_EnumPorts(This,ppEnum)	\
    (This)->lpVtbl -> EnumPorts(This,ppEnum)

#define IDebugMachine2_EnumPortSuppliers(This,ppEnum)	\
    (This)->lpVtbl -> EnumPortSuppliers(This,ppEnum)

#define IDebugMachine2_GetMachineUtilities(This,ppUtil)	\
    (This)->lpVtbl -> GetMachineUtilities(This,ppUtil)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMachine2_GetInfo_Proxy( 
    IDebugMachine2 * This,
    /* [in] */ MACHINE_INFO_FIELDS Fields,
    /* [out] */ MACHINE_INFO *pMachineInfo);


void __RPC_STUB IDebugMachine2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachine2_GetName_Proxy( 
    IDebugMachine2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugMachine2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachine2_GetPortSupplier_Proxy( 
    IDebugMachine2 * This,
    /* [in] */ REFGUID guidPortSupplier,
    /* [out] */ IDebugPortSupplier2 **ppPortSupplier);


void __RPC_STUB IDebugMachine2_GetPortSupplier_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachine2_GetPort_Proxy( 
    IDebugMachine2 * This,
    /* [in] */ REFGUID guidPort,
    /* [out] */ IDebugPort2 **ppPort);


void __RPC_STUB IDebugMachine2_GetPort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachine2_EnumPorts_Proxy( 
    IDebugMachine2 * This,
    /* [out] */ IEnumDebugPorts2 **ppEnum);


void __RPC_STUB IDebugMachine2_EnumPorts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachine2_EnumPortSuppliers_Proxy( 
    IDebugMachine2 * This,
    /* [out] */ IEnumDebugPortSuppliers2 **ppEnum);


void __RPC_STUB IDebugMachine2_EnumPortSuppliers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachine2_GetMachineUtilities_Proxy( 
    IDebugMachine2 * This,
    /* [out] */ IDebugMDMUtil2 **ppUtil);


void __RPC_STUB IDebugMachine2_GetMachineUtilities_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMachine2_INTERFACE_DEFINED__ */


#ifndef __IDebugMachineEx2_INTERFACE_DEFINED__
#define __IDebugMachineEx2_INTERFACE_DEFINED__

/* interface IDebugMachineEx2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugMachineEx2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ae27b230-a0bf-47ff-a2d1-22c29a178eac")
    IDebugMachineEx2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnableAutoAttachOnProgramCreate( 
            /* [in] */ LPCWSTR pszProcessNames,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ LPCWSTR pszSessionId,
            /* [out] */ DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisableAutoAttachOnEvent( 
            /* [in] */ DWORD dwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPortSupplierEx( 
            /* [in] */ LPCOLESTR wstrRegistryRoot,
            /* [in] */ REFGUID guidPortSupplier,
            /* [out] */ IDebugPortSupplier2 **ppPortSupplier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPortEx( 
            /* [in] */ LPCOLESTR wstrRegistryRoot,
            /* [in] */ REFGUID guidPort,
            /* [out] */ IDebugPort2 **ppPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumPortsEx( 
            /* [in] */ LPCOLESTR wstrRegistryRoot,
            /* [out] */ IEnumDebugPorts2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumPortSuppliersEx( 
            /* [in] */ LPCOLESTR wstrRegistryRoot,
            /* [out] */ IEnumDebugPortSuppliers2 **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMachineEx2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMachineEx2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMachineEx2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMachineEx2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnableAutoAttachOnProgramCreate )( 
            IDebugMachineEx2 * This,
            /* [in] */ LPCWSTR pszProcessNames,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ LPCWSTR pszSessionId,
            /* [out] */ DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *DisableAutoAttachOnEvent )( 
            IDebugMachineEx2 * This,
            /* [in] */ DWORD dwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortSupplierEx )( 
            IDebugMachineEx2 * This,
            /* [in] */ LPCOLESTR wstrRegistryRoot,
            /* [in] */ REFGUID guidPortSupplier,
            /* [out] */ IDebugPortSupplier2 **ppPortSupplier);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortEx )( 
            IDebugMachineEx2 * This,
            /* [in] */ LPCOLESTR wstrRegistryRoot,
            /* [in] */ REFGUID guidPort,
            /* [out] */ IDebugPort2 **ppPort);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPortsEx )( 
            IDebugMachineEx2 * This,
            /* [in] */ LPCOLESTR wstrRegistryRoot,
            /* [out] */ IEnumDebugPorts2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPortSuppliersEx )( 
            IDebugMachineEx2 * This,
            /* [in] */ LPCOLESTR wstrRegistryRoot,
            /* [out] */ IEnumDebugPortSuppliers2 **ppEnum);
        
        END_INTERFACE
    } IDebugMachineEx2Vtbl;

    interface IDebugMachineEx2
    {
        CONST_VTBL struct IDebugMachineEx2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMachineEx2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMachineEx2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMachineEx2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMachineEx2_EnableAutoAttachOnProgramCreate(This,pszProcessNames,guidEngine,pszSessionId,pdwCookie)	\
    (This)->lpVtbl -> EnableAutoAttachOnProgramCreate(This,pszProcessNames,guidEngine,pszSessionId,pdwCookie)

#define IDebugMachineEx2_DisableAutoAttachOnEvent(This,dwCookie)	\
    (This)->lpVtbl -> DisableAutoAttachOnEvent(This,dwCookie)

#define IDebugMachineEx2_GetPortSupplierEx(This,wstrRegistryRoot,guidPortSupplier,ppPortSupplier)	\
    (This)->lpVtbl -> GetPortSupplierEx(This,wstrRegistryRoot,guidPortSupplier,ppPortSupplier)

#define IDebugMachineEx2_GetPortEx(This,wstrRegistryRoot,guidPort,ppPort)	\
    (This)->lpVtbl -> GetPortEx(This,wstrRegistryRoot,guidPort,ppPort)

#define IDebugMachineEx2_EnumPortsEx(This,wstrRegistryRoot,ppEnum)	\
    (This)->lpVtbl -> EnumPortsEx(This,wstrRegistryRoot,ppEnum)

#define IDebugMachineEx2_EnumPortSuppliersEx(This,wstrRegistryRoot,ppEnum)	\
    (This)->lpVtbl -> EnumPortSuppliersEx(This,wstrRegistryRoot,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMachineEx2_EnableAutoAttachOnProgramCreate_Proxy( 
    IDebugMachineEx2 * This,
    /* [in] */ LPCWSTR pszProcessNames,
    /* [in] */ REFGUID guidEngine,
    /* [in] */ LPCWSTR pszSessionId,
    /* [out] */ DWORD *pdwCookie);


void __RPC_STUB IDebugMachineEx2_EnableAutoAttachOnProgramCreate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachineEx2_DisableAutoAttachOnEvent_Proxy( 
    IDebugMachineEx2 * This,
    /* [in] */ DWORD dwCookie);


void __RPC_STUB IDebugMachineEx2_DisableAutoAttachOnEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachineEx2_GetPortSupplierEx_Proxy( 
    IDebugMachineEx2 * This,
    /* [in] */ LPCOLESTR wstrRegistryRoot,
    /* [in] */ REFGUID guidPortSupplier,
    /* [out] */ IDebugPortSupplier2 **ppPortSupplier);


void __RPC_STUB IDebugMachineEx2_GetPortSupplierEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachineEx2_GetPortEx_Proxy( 
    IDebugMachineEx2 * This,
    /* [in] */ LPCOLESTR wstrRegistryRoot,
    /* [in] */ REFGUID guidPort,
    /* [out] */ IDebugPort2 **ppPort);


void __RPC_STUB IDebugMachineEx2_GetPortEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachineEx2_EnumPortsEx_Proxy( 
    IDebugMachineEx2 * This,
    /* [in] */ LPCOLESTR wstrRegistryRoot,
    /* [out] */ IEnumDebugPorts2 **ppEnum);


void __RPC_STUB IDebugMachineEx2_EnumPortsEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMachineEx2_EnumPortSuppliersEx_Proxy( 
    IDebugMachineEx2 * This,
    /* [in] */ LPCOLESTR wstrRegistryRoot,
    /* [out] */ IEnumDebugPortSuppliers2 **ppEnum);


void __RPC_STUB IDebugMachineEx2_EnumPortSuppliersEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMachineEx2_INTERFACE_DEFINED__ */


#ifndef __IDebugPortSupplier2_INTERFACE_DEFINED__
#define __IDebugPortSupplier2_INTERFACE_DEFINED__

/* interface IDebugPortSupplier2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPortSupplier2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53f68191-7b2f-4f14-8e55-40b1b6e5df66")
    IDebugPortSupplier2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPortSupplierName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPortSupplierId( 
            /* [out] */ GUID *pguidPortSupplier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPort( 
            /* [in] */ REFGUID guidPort,
            /* [out] */ IDebugPort2 **ppPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumPorts( 
            /* [out] */ IEnumDebugPorts2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanAddPort( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddPort( 
            /* [in] */ IDebugPortRequest2 *pRequest,
            /* [out] */ IDebugPort2 **ppPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemovePort( 
            /* [in] */ IDebugPort2 *pPort) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPortSupplier2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPortSupplier2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPortSupplier2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPortSupplier2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortSupplierName )( 
            IDebugPortSupplier2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortSupplierId )( 
            IDebugPortSupplier2 * This,
            /* [out] */ GUID *pguidPortSupplier);
        
        HRESULT ( STDMETHODCALLTYPE *GetPort )( 
            IDebugPortSupplier2 * This,
            /* [in] */ REFGUID guidPort,
            /* [out] */ IDebugPort2 **ppPort);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPorts )( 
            IDebugPortSupplier2 * This,
            /* [out] */ IEnumDebugPorts2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *CanAddPort )( 
            IDebugPortSupplier2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddPort )( 
            IDebugPortSupplier2 * This,
            /* [in] */ IDebugPortRequest2 *pRequest,
            /* [out] */ IDebugPort2 **ppPort);
        
        HRESULT ( STDMETHODCALLTYPE *RemovePort )( 
            IDebugPortSupplier2 * This,
            /* [in] */ IDebugPort2 *pPort);
        
        END_INTERFACE
    } IDebugPortSupplier2Vtbl;

    interface IDebugPortSupplier2
    {
        CONST_VTBL struct IDebugPortSupplier2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPortSupplier2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPortSupplier2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPortSupplier2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPortSupplier2_GetPortSupplierName(This,pbstrName)	\
    (This)->lpVtbl -> GetPortSupplierName(This,pbstrName)

#define IDebugPortSupplier2_GetPortSupplierId(This,pguidPortSupplier)	\
    (This)->lpVtbl -> GetPortSupplierId(This,pguidPortSupplier)

#define IDebugPortSupplier2_GetPort(This,guidPort,ppPort)	\
    (This)->lpVtbl -> GetPort(This,guidPort,ppPort)

#define IDebugPortSupplier2_EnumPorts(This,ppEnum)	\
    (This)->lpVtbl -> EnumPorts(This,ppEnum)

#define IDebugPortSupplier2_CanAddPort(This)	\
    (This)->lpVtbl -> CanAddPort(This)

#define IDebugPortSupplier2_AddPort(This,pRequest,ppPort)	\
    (This)->lpVtbl -> AddPort(This,pRequest,ppPort)

#define IDebugPortSupplier2_RemovePort(This,pPort)	\
    (This)->lpVtbl -> RemovePort(This,pPort)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPortSupplier2_GetPortSupplierName_Proxy( 
    IDebugPortSupplier2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugPortSupplier2_GetPortSupplierName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPortSupplier2_GetPortSupplierId_Proxy( 
    IDebugPortSupplier2 * This,
    /* [out] */ GUID *pguidPortSupplier);


void __RPC_STUB IDebugPortSupplier2_GetPortSupplierId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPortSupplier2_GetPort_Proxy( 
    IDebugPortSupplier2 * This,
    /* [in] */ REFGUID guidPort,
    /* [out] */ IDebugPort2 **ppPort);


void __RPC_STUB IDebugPortSupplier2_GetPort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPortSupplier2_EnumPorts_Proxy( 
    IDebugPortSupplier2 * This,
    /* [out] */ IEnumDebugPorts2 **ppEnum);


void __RPC_STUB IDebugPortSupplier2_EnumPorts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPortSupplier2_CanAddPort_Proxy( 
    IDebugPortSupplier2 * This);


void __RPC_STUB IDebugPortSupplier2_CanAddPort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPortSupplier2_AddPort_Proxy( 
    IDebugPortSupplier2 * This,
    /* [in] */ IDebugPortRequest2 *pRequest,
    /* [out] */ IDebugPort2 **ppPort);


void __RPC_STUB IDebugPortSupplier2_AddPort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPortSupplier2_RemovePort_Proxy( 
    IDebugPortSupplier2 * This,
    /* [in] */ IDebugPort2 *pPort);


void __RPC_STUB IDebugPortSupplier2_RemovePort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPortSupplier2_INTERFACE_DEFINED__ */


#ifndef __IDebugPort2_INTERFACE_DEFINED__
#define __IDebugPort2_INTERFACE_DEFINED__

/* interface IDebugPort2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugPort2_0001
    {	AD_PROCESS_ID_SYSTEM	= 0,
	AD_PROCESS_ID_GUID	= AD_PROCESS_ID_SYSTEM + 1
    } ;
typedef DWORD AD_PROCESS_ID_TYPE;

typedef struct _AD_PROCESS_ID
    {
    AD_PROCESS_ID_TYPE ProcessIdType;
    /* [switch_is] */ /* [switch_type] */ union __MIDL_IDebugPort2_0002
        {
        /* [case()] */ DWORD dwProcessId;
        /* [case()] */ GUID guidProcessId;
        /* [default] */ DWORD dwUnused;
        } 	ProcessId;
    } 	AD_PROCESS_ID;


EXTERN_C const IID IID_IDebugPort2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("79293cc8-d9d9-43f5-97ad-0bcc5a688776")
    IDebugPort2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPortName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPortId( 
            /* [out] */ GUID *pguidPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPortRequest( 
            /* [out] */ IDebugPortRequest2 **ppRequest) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPortSupplier( 
            /* [out] */ IDebugPortSupplier2 **ppSupplier) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProcess( 
            /* [in] */ AD_PROCESS_ID ProcessId,
            /* [out] */ IDebugProcess2 **ppProcess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumProcesses( 
            /* [out] */ IEnumDebugProcesses2 **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPort2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPort2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPort2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPort2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortName )( 
            IDebugPort2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortId )( 
            IDebugPort2 * This,
            /* [out] */ GUID *pguidPort);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortRequest )( 
            IDebugPort2 * This,
            /* [out] */ IDebugPortRequest2 **ppRequest);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortSupplier )( 
            IDebugPort2 * This,
            /* [out] */ IDebugPortSupplier2 **ppSupplier);
        
        HRESULT ( STDMETHODCALLTYPE *GetProcess )( 
            IDebugPort2 * This,
            /* [in] */ AD_PROCESS_ID ProcessId,
            /* [out] */ IDebugProcess2 **ppProcess);
        
        HRESULT ( STDMETHODCALLTYPE *EnumProcesses )( 
            IDebugPort2 * This,
            /* [out] */ IEnumDebugProcesses2 **ppEnum);
        
        END_INTERFACE
    } IDebugPort2Vtbl;

    interface IDebugPort2
    {
        CONST_VTBL struct IDebugPort2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPort2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPort2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPort2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPort2_GetPortName(This,pbstrName)	\
    (This)->lpVtbl -> GetPortName(This,pbstrName)

#define IDebugPort2_GetPortId(This,pguidPort)	\
    (This)->lpVtbl -> GetPortId(This,pguidPort)

#define IDebugPort2_GetPortRequest(This,ppRequest)	\
    (This)->lpVtbl -> GetPortRequest(This,ppRequest)

#define IDebugPort2_GetPortSupplier(This,ppSupplier)	\
    (This)->lpVtbl -> GetPortSupplier(This,ppSupplier)

#define IDebugPort2_GetProcess(This,ProcessId,ppProcess)	\
    (This)->lpVtbl -> GetProcess(This,ProcessId,ppProcess)

#define IDebugPort2_EnumProcesses(This,ppEnum)	\
    (This)->lpVtbl -> EnumProcesses(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPort2_GetPortName_Proxy( 
    IDebugPort2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugPort2_GetPortName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPort2_GetPortId_Proxy( 
    IDebugPort2 * This,
    /* [out] */ GUID *pguidPort);


void __RPC_STUB IDebugPort2_GetPortId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPort2_GetPortRequest_Proxy( 
    IDebugPort2 * This,
    /* [out] */ IDebugPortRequest2 **ppRequest);


void __RPC_STUB IDebugPort2_GetPortRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPort2_GetPortSupplier_Proxy( 
    IDebugPort2 * This,
    /* [out] */ IDebugPortSupplier2 **ppSupplier);


void __RPC_STUB IDebugPort2_GetPortSupplier_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPort2_GetProcess_Proxy( 
    IDebugPort2 * This,
    /* [in] */ AD_PROCESS_ID ProcessId,
    /* [out] */ IDebugProcess2 **ppProcess);


void __RPC_STUB IDebugPort2_GetProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPort2_EnumProcesses_Proxy( 
    IDebugPort2 * This,
    /* [out] */ IEnumDebugProcesses2 **ppEnum);


void __RPC_STUB IDebugPort2_EnumProcesses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPort2_INTERFACE_DEFINED__ */


#ifndef __IDebugPortRequest2_INTERFACE_DEFINED__
#define __IDebugPortRequest2_INTERFACE_DEFINED__

/* interface IDebugPortRequest2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPortRequest2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8d36beb8-9bfe-47dd-a11b-7ba1de18e449")
    IDebugPortRequest2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPortName( 
            /* [out] */ BSTR *pbstrPortName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPortRequest2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPortRequest2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPortRequest2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPortRequest2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPortName )( 
            IDebugPortRequest2 * This,
            /* [out] */ BSTR *pbstrPortName);
        
        END_INTERFACE
    } IDebugPortRequest2Vtbl;

    interface IDebugPortRequest2
    {
        CONST_VTBL struct IDebugPortRequest2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPortRequest2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPortRequest2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPortRequest2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPortRequest2_GetPortName(This,pbstrPortName)	\
    (This)->lpVtbl -> GetPortName(This,pbstrPortName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPortRequest2_GetPortName_Proxy( 
    IDebugPortRequest2 * This,
    /* [out] */ BSTR *pbstrPortName);


void __RPC_STUB IDebugPortRequest2_GetPortName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPortRequest2_INTERFACE_DEFINED__ */


#ifndef __IDebugPortNotify2_INTERFACE_DEFINED__
#define __IDebugPortNotify2_INTERFACE_DEFINED__

/* interface IDebugPortNotify2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPortNotify2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fb8d2032-2858-414c-83d9-f732664e0c7a")
    IDebugPortNotify2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddProgramNode( 
            /* [in] */ IDebugProgramNode2 *pProgramNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveProgramNode( 
            /* [in] */ IDebugProgramNode2 *pProgramNode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPortNotify2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPortNotify2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPortNotify2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPortNotify2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddProgramNode )( 
            IDebugPortNotify2 * This,
            /* [in] */ IDebugProgramNode2 *pProgramNode);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveProgramNode )( 
            IDebugPortNotify2 * This,
            /* [in] */ IDebugProgramNode2 *pProgramNode);
        
        END_INTERFACE
    } IDebugPortNotify2Vtbl;

    interface IDebugPortNotify2
    {
        CONST_VTBL struct IDebugPortNotify2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPortNotify2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPortNotify2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPortNotify2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPortNotify2_AddProgramNode(This,pProgramNode)	\
    (This)->lpVtbl -> AddProgramNode(This,pProgramNode)

#define IDebugPortNotify2_RemoveProgramNode(This,pProgramNode)	\
    (This)->lpVtbl -> RemoveProgramNode(This,pProgramNode)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPortNotify2_AddProgramNode_Proxy( 
    IDebugPortNotify2 * This,
    /* [in] */ IDebugProgramNode2 *pProgramNode);


void __RPC_STUB IDebugPortNotify2_AddProgramNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPortNotify2_RemoveProgramNode_Proxy( 
    IDebugPortNotify2 * This,
    /* [in] */ IDebugProgramNode2 *pProgramNode);


void __RPC_STUB IDebugPortNotify2_RemoveProgramNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPortNotify2_INTERFACE_DEFINED__ */


#ifndef __IDebugPortEvents2_INTERFACE_DEFINED__
#define __IDebugPortEvents2_INTERFACE_DEFINED__

/* interface IDebugPortEvents2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPortEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("564fa275-12e1-4b5f-8316-4d79bcef7246")
    IDebugPortEvents2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Event( 
            /* [in] */ IDebugMachine2 *pMachine,
            /* [in] */ IDebugPort2 *pPort,
            /* [in] */ IDebugProcess2 *pProcess,
            /* [in] */ IDebugProgram2 *pProgram,
            /* [in] */ IDebugEvent2 *pEvent,
            /* [in] */ REFIID riidEvent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPortEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPortEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPortEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPortEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Event )( 
            IDebugPortEvents2 * This,
            /* [in] */ IDebugMachine2 *pMachine,
            /* [in] */ IDebugPort2 *pPort,
            /* [in] */ IDebugProcess2 *pProcess,
            /* [in] */ IDebugProgram2 *pProgram,
            /* [in] */ IDebugEvent2 *pEvent,
            /* [in] */ REFIID riidEvent);
        
        END_INTERFACE
    } IDebugPortEvents2Vtbl;

    interface IDebugPortEvents2
    {
        CONST_VTBL struct IDebugPortEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPortEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPortEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPortEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPortEvents2_Event(This,pMachine,pPort,pProcess,pProgram,pEvent,riidEvent)	\
    (This)->lpVtbl -> Event(This,pMachine,pPort,pProcess,pProgram,pEvent,riidEvent)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPortEvents2_Event_Proxy( 
    IDebugPortEvents2 * This,
    /* [in] */ IDebugMachine2 *pMachine,
    /* [in] */ IDebugPort2 *pPort,
    /* [in] */ IDebugProcess2 *pProcess,
    /* [in] */ IDebugProgram2 *pProgram,
    /* [in] */ IDebugEvent2 *pEvent,
    /* [in] */ REFIID riidEvent);


void __RPC_STUB IDebugPortEvents2_Event_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPortEvents2_INTERFACE_DEFINED__ */


#ifndef __IDebugMDMUtil2_INTERFACE_DEFINED__
#define __IDebugMDMUtil2_INTERFACE_DEFINED__

/* interface IDebugMDMUtil2 */
/* [unique][uuid][object] */ 

typedef DWORD DYNDEBUGFLAGS;


enum __MIDL_IDebugMDMUtil2_0001
    {	DYNDEBUG_ATTACH	= 1,
	DYNDEBUG_JIT	= 2,
	DYNDEBUG_REMOTEJIT	= 4
    } ;
#define	S_UNKNOWN	( 0x3 )


EXTERN_C const IID IID_IDebugMDMUtil2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f3062547-43d8-4dc2-b18e-e1460ff2c422")
    IDebugMDMUtil2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddPIDToIgnore( 
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD dwPid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemovePIDToIgnore( 
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD dwPid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddPIDToDebug( 
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD dwPid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemovePIDToDebug( 
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD dwPid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDynamicDebuggingFlags( 
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DYNDEBUGFLAGS dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDynamicDebuggingFlags( 
            /* [in] */ REFGUID guidEngine,
            /* [out] */ DYNDEBUGFLAGS *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDefaultJITServer( 
            /* [in] */ REFCLSID clsidJITServer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultJITServer( 
            /* [out] */ CLSID *pClsidJITServer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterJITDebugEngines( 
            /* [in] */ REFCLSID clsidJITServer,
            /* [size_is][in] */ GUID *arrguidEngines,
            /* [size_is][full][in] */ BOOL *arrRemoteFlags,
            /* [in] */ DWORD celtEngs,
            /* [in] */ BOOL fRegister) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanDebugPID( 
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD pid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMDMUtil2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMDMUtil2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMDMUtil2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddPIDToIgnore )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD dwPid);
        
        HRESULT ( STDMETHODCALLTYPE *RemovePIDToIgnore )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD dwPid);
        
        HRESULT ( STDMETHODCALLTYPE *AddPIDToDebug )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD dwPid);
        
        HRESULT ( STDMETHODCALLTYPE *RemovePIDToDebug )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD dwPid);
        
        HRESULT ( STDMETHODCALLTYPE *SetDynamicDebuggingFlags )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DYNDEBUGFLAGS dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetDynamicDebuggingFlags )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFGUID guidEngine,
            /* [out] */ DYNDEBUGFLAGS *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultJITServer )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFCLSID clsidJITServer);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultJITServer )( 
            IDebugMDMUtil2 * This,
            /* [out] */ CLSID *pClsidJITServer);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterJITDebugEngines )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFCLSID clsidJITServer,
            /* [size_is][in] */ GUID *arrguidEngines,
            /* [size_is][full][in] */ BOOL *arrRemoteFlags,
            /* [in] */ DWORD celtEngs,
            /* [in] */ BOOL fRegister);
        
        HRESULT ( STDMETHODCALLTYPE *CanDebugPID )( 
            IDebugMDMUtil2 * This,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ DWORD pid);
        
        END_INTERFACE
    } IDebugMDMUtil2Vtbl;

    interface IDebugMDMUtil2
    {
        CONST_VTBL struct IDebugMDMUtil2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMDMUtil2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMDMUtil2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMDMUtil2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMDMUtil2_AddPIDToIgnore(This,guidEngine,dwPid)	\
    (This)->lpVtbl -> AddPIDToIgnore(This,guidEngine,dwPid)

#define IDebugMDMUtil2_RemovePIDToIgnore(This,guidEngine,dwPid)	\
    (This)->lpVtbl -> RemovePIDToIgnore(This,guidEngine,dwPid)

#define IDebugMDMUtil2_AddPIDToDebug(This,guidEngine,dwPid)	\
    (This)->lpVtbl -> AddPIDToDebug(This,guidEngine,dwPid)

#define IDebugMDMUtil2_RemovePIDToDebug(This,guidEngine,dwPid)	\
    (This)->lpVtbl -> RemovePIDToDebug(This,guidEngine,dwPid)

#define IDebugMDMUtil2_SetDynamicDebuggingFlags(This,guidEngine,dwFlags)	\
    (This)->lpVtbl -> SetDynamicDebuggingFlags(This,guidEngine,dwFlags)

#define IDebugMDMUtil2_GetDynamicDebuggingFlags(This,guidEngine,pdwFlags)	\
    (This)->lpVtbl -> GetDynamicDebuggingFlags(This,guidEngine,pdwFlags)

#define IDebugMDMUtil2_SetDefaultJITServer(This,clsidJITServer)	\
    (This)->lpVtbl -> SetDefaultJITServer(This,clsidJITServer)

#define IDebugMDMUtil2_GetDefaultJITServer(This,pClsidJITServer)	\
    (This)->lpVtbl -> GetDefaultJITServer(This,pClsidJITServer)

#define IDebugMDMUtil2_RegisterJITDebugEngines(This,clsidJITServer,arrguidEngines,arrRemoteFlags,celtEngs,fRegister)	\
    (This)->lpVtbl -> RegisterJITDebugEngines(This,clsidJITServer,arrguidEngines,arrRemoteFlags,celtEngs,fRegister)

#define IDebugMDMUtil2_CanDebugPID(This,guidEngine,pid)	\
    (This)->lpVtbl -> CanDebugPID(This,guidEngine,pid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_AddPIDToIgnore_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFGUID guidEngine,
    /* [in] */ DWORD dwPid);


void __RPC_STUB IDebugMDMUtil2_AddPIDToIgnore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_RemovePIDToIgnore_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFGUID guidEngine,
    /* [in] */ DWORD dwPid);


void __RPC_STUB IDebugMDMUtil2_RemovePIDToIgnore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_AddPIDToDebug_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFGUID guidEngine,
    /* [in] */ DWORD dwPid);


void __RPC_STUB IDebugMDMUtil2_AddPIDToDebug_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_RemovePIDToDebug_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFGUID guidEngine,
    /* [in] */ DWORD dwPid);


void __RPC_STUB IDebugMDMUtil2_RemovePIDToDebug_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_SetDynamicDebuggingFlags_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFGUID guidEngine,
    /* [in] */ DYNDEBUGFLAGS dwFlags);


void __RPC_STUB IDebugMDMUtil2_SetDynamicDebuggingFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_GetDynamicDebuggingFlags_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFGUID guidEngine,
    /* [out] */ DYNDEBUGFLAGS *pdwFlags);


void __RPC_STUB IDebugMDMUtil2_GetDynamicDebuggingFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_SetDefaultJITServer_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFCLSID clsidJITServer);


void __RPC_STUB IDebugMDMUtil2_SetDefaultJITServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_GetDefaultJITServer_Proxy( 
    IDebugMDMUtil2 * This,
    /* [out] */ CLSID *pClsidJITServer);


void __RPC_STUB IDebugMDMUtil2_GetDefaultJITServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_RegisterJITDebugEngines_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFCLSID clsidJITServer,
    /* [size_is][in] */ GUID *arrguidEngines,
    /* [size_is][full][in] */ BOOL *arrRemoteFlags,
    /* [in] */ DWORD celtEngs,
    /* [in] */ BOOL fRegister);


void __RPC_STUB IDebugMDMUtil2_RegisterJITDebugEngines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMDMUtil2_CanDebugPID_Proxy( 
    IDebugMDMUtil2 * This,
    /* [in] */ REFGUID guidEngine,
    /* [in] */ DWORD pid);


void __RPC_STUB IDebugMDMUtil2_CanDebugPID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMDMUtil2_INTERFACE_DEFINED__ */


#ifndef __IDebugSession2_INTERFACE_DEFINED__
#define __IDebugSession2_INTERFACE_DEFINED__

/* interface IDebugSession2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugSession2_0001
    {	LAUNCH_DEBUG	= 0,
	LAUNCH_NODEBUG	= 0x1,
	LAUNCH_ENABLE_ENC	= 0x2
    } ;
typedef DWORD LAUNCH_FLAGS;


enum __MIDL_IDebugSession2_0002
    {	EXCEPTION_NONE	= 0,
	EXCEPTION_STOP_FIRST_CHANCE	= 0x1,
	EXCEPTION_STOP_SECOND_CHANCE	= 0x2,
	EXCEPTION_STOP_FIRST_CHANCE_USE_PARENT	= 0x4,
	EXCEPTION_STOP_SECOND_CHANCE_USE_PARENT	= 0x8
    } ;
typedef DWORD EXCEPTION_STATE;

typedef struct tagEXCEPTION_INFO
    {
    IDebugProgram2 *pProgram;
    BSTR bstrProgramName;
    BSTR bstrExceptionName;
    DWORD dwCode;
    EXCEPTION_STATE dwState;
    GUID guidType;
    } 	EXCEPTION_INFO;


enum __MIDL_IDebugSession2_0003
    {	STOPPING_MODEL_STOP_ALL	= 0x1,
	STOPPING_MODEL_STOP_ONE	= 0x2
    } ;
typedef DWORD STOPPING_MODEL;


EXTERN_C const IID IID_IDebugSession2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8948300f-8bd5-4728-a1d8-83d172295a9d")
    IDebugSession2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetName( 
            /* [in] */ LPOLESTR pszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumProcesses( 
            /* [out] */ IEnumDebugProcesses2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Launch( 
            /* [full][in] */ LPCOLESTR pszMachine,
            /* [in] */ IDebugPort2 *pPort,
            /* [full][in] */ LPCOLESTR pszExe,
            /* [full][in] */ LPCOLESTR pszArgs,
            /* [full][in] */ LPCOLESTR pszDir,
            /* [full][in] */ BSTR bstrEnv,
            /* [full][in] */ LPCOLESTR pszOptions,
            /* [in] */ LAUNCH_FLAGS dwLaunchFlags,
            /* [in] */ DWORD hStdInput,
            /* [in] */ DWORD hStdOutput,
            /* [in] */ DWORD hStdError,
            /* [in] */ REFGUID guidLaunchingEngine,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [size_is][in] */ GUID *rgguidSpecificEngines,
            /* [in] */ DWORD celtSpecificEngines,
            /* [out] */ IDebugProcess2 **ppProcess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterJITServer( 
            /* [in] */ REFCLSID clsidJITServer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Terminate( 
            /* [in] */ BOOL fForce) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CauseBreak( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePendingBreakpoint( 
            /* [in] */ IDebugBreakpointRequest2 *pBPRequest,
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumPendingBreakpoints( 
            /* [in] */ IDebugProgram2 *pProgram,
            /* [full][in] */ LPCOLESTR pszProgram,
            /* [out] */ IEnumDebugPendingBreakpoints2 **ppEnumBPs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumMachines( 
            /* [out] */ IEnumDebugMachines2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddMachine( 
            /* [full][in] */ LPCOLESTR pszMachine,
            /* [out] */ IDebugMachine2 **ppMachine) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveMachine( 
            /* [in] */ IDebugMachine2 *pMachine) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShutdownSession( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumCodeContexts( 
            /* [in] */ IDebugProgram2 *pProgram,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetException( 
            /* [in] */ EXCEPTION_INFO *pException) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumSetExceptions( 
            /* [in] */ IDebugProgram2 *pProgram,
            /* [full][in] */ LPCOLESTR pszProgram,
            /* [in] */ REFGUID guidType,
            /* [out] */ IEnumDebugExceptionInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveSetException( 
            /* [in] */ EXCEPTION_INFO *pException) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAllSetExceptions( 
            /* [in] */ REFGUID guidType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDefaultExceptions( 
            /* [full][in] */ EXCEPTION_INFO *pParentException,
            /* [out] */ IEnumDebugExceptionInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetENCUpdate( 
            /* [in] */ IDebugProgram2 *pProgram,
            /* [out] */ IDebugENCUpdate **ppUpdate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLocale( 
            /* [in] */ WORD wLangID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRegistryRoot( 
            /* [full][in] */ LPCOLESTR pszRegistryRoot) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsAlive( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearAllSessionThreadStackFrames( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSessionId( 
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [full][size_is][in] */ GUID *rgguidSpecificEngines,
            /* [in] */ DWORD celtSpecificEngines,
            /* [full][in] */ LPCOLESTR pszStartPageUrl,
            /* [out] */ BSTR *pbstrSessionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEngineMetric( 
            /* [in] */ REFGUID guidEngine,
            /* [in] */ LPCOLESTR pszMetric,
            /* [in] */ VARIANT varValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStoppingModel( 
            /* [in] */ STOPPING_MODEL dwStoppingModel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStoppingModel( 
            /* [out] */ STOPPING_MODEL *pdwStoppingModel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterSessionWithServer( 
            /* [in] */ LPCOLESTR pwszServerName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugSession2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugSession2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugSession2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugSession2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugSession2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IDebugSession2 * This,
            /* [in] */ LPOLESTR pszName);
        
        HRESULT ( STDMETHODCALLTYPE *EnumProcesses )( 
            IDebugSession2 * This,
            /* [out] */ IEnumDebugProcesses2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Launch )( 
            IDebugSession2 * This,
            /* [full][in] */ LPCOLESTR pszMachine,
            /* [in] */ IDebugPort2 *pPort,
            /* [full][in] */ LPCOLESTR pszExe,
            /* [full][in] */ LPCOLESTR pszArgs,
            /* [full][in] */ LPCOLESTR pszDir,
            /* [full][in] */ BSTR bstrEnv,
            /* [full][in] */ LPCOLESTR pszOptions,
            /* [in] */ LAUNCH_FLAGS dwLaunchFlags,
            /* [in] */ DWORD hStdInput,
            /* [in] */ DWORD hStdOutput,
            /* [in] */ DWORD hStdError,
            /* [in] */ REFGUID guidLaunchingEngine,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [size_is][in] */ GUID *rgguidSpecificEngines,
            /* [in] */ DWORD celtSpecificEngines,
            /* [out] */ IDebugProcess2 **ppProcess);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterJITServer )( 
            IDebugSession2 * This,
            /* [in] */ REFCLSID clsidJITServer);
        
        HRESULT ( STDMETHODCALLTYPE *Terminate )( 
            IDebugSession2 * This,
            /* [in] */ BOOL fForce);
        
        HRESULT ( STDMETHODCALLTYPE *Detach )( 
            IDebugSession2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CauseBreak )( 
            IDebugSession2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePendingBreakpoint )( 
            IDebugSession2 * This,
            /* [in] */ IDebugBreakpointRequest2 *pBPRequest,
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPendingBreakpoints )( 
            IDebugSession2 * This,
            /* [in] */ IDebugProgram2 *pProgram,
            /* [full][in] */ LPCOLESTR pszProgram,
            /* [out] */ IEnumDebugPendingBreakpoints2 **ppEnumBPs);
        
        HRESULT ( STDMETHODCALLTYPE *EnumMachines )( 
            IDebugSession2 * This,
            /* [out] */ IEnumDebugMachines2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *AddMachine )( 
            IDebugSession2 * This,
            /* [full][in] */ LPCOLESTR pszMachine,
            /* [out] */ IDebugMachine2 **ppMachine);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveMachine )( 
            IDebugSession2 * This,
            /* [in] */ IDebugMachine2 *pMachine);
        
        HRESULT ( STDMETHODCALLTYPE *ShutdownSession )( 
            IDebugSession2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCodeContexts )( 
            IDebugSession2 * This,
            /* [in] */ IDebugProgram2 *pProgram,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *SetException )( 
            IDebugSession2 * This,
            /* [in] */ EXCEPTION_INFO *pException);
        
        HRESULT ( STDMETHODCALLTYPE *EnumSetExceptions )( 
            IDebugSession2 * This,
            /* [in] */ IDebugProgram2 *pProgram,
            /* [full][in] */ LPCOLESTR pszProgram,
            /* [in] */ REFGUID guidType,
            /* [out] */ IEnumDebugExceptionInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveSetException )( 
            IDebugSession2 * This,
            /* [in] */ EXCEPTION_INFO *pException);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAllSetExceptions )( 
            IDebugSession2 * This,
            /* [in] */ REFGUID guidType);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDefaultExceptions )( 
            IDebugSession2 * This,
            /* [full][in] */ EXCEPTION_INFO *pParentException,
            /* [out] */ IEnumDebugExceptionInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetENCUpdate )( 
            IDebugSession2 * This,
            /* [in] */ IDebugProgram2 *pProgram,
            /* [out] */ IDebugENCUpdate **ppUpdate);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocale )( 
            IDebugSession2 * This,
            /* [in] */ WORD wLangID);
        
        HRESULT ( STDMETHODCALLTYPE *SetRegistryRoot )( 
            IDebugSession2 * This,
            /* [full][in] */ LPCOLESTR pszRegistryRoot);
        
        HRESULT ( STDMETHODCALLTYPE *IsAlive )( 
            IDebugSession2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ClearAllSessionThreadStackFrames )( 
            IDebugSession2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSessionId )( 
            IDebugSession2 * This,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [full][size_is][in] */ GUID *rgguidSpecificEngines,
            /* [in] */ DWORD celtSpecificEngines,
            /* [full][in] */ LPCOLESTR pszStartPageUrl,
            /* [out] */ BSTR *pbstrSessionId);
        
        HRESULT ( STDMETHODCALLTYPE *SetEngineMetric )( 
            IDebugSession2 * This,
            /* [in] */ REFGUID guidEngine,
            /* [in] */ LPCOLESTR pszMetric,
            /* [in] */ VARIANT varValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetStoppingModel )( 
            IDebugSession2 * This,
            /* [in] */ STOPPING_MODEL dwStoppingModel);
        
        HRESULT ( STDMETHODCALLTYPE *GetStoppingModel )( 
            IDebugSession2 * This,
            /* [out] */ STOPPING_MODEL *pdwStoppingModel);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterSessionWithServer )( 
            IDebugSession2 * This,
            /* [in] */ LPCOLESTR pwszServerName);
        
        END_INTERFACE
    } IDebugSession2Vtbl;

    interface IDebugSession2
    {
        CONST_VTBL struct IDebugSession2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugSession2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugSession2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugSession2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugSession2_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IDebugSession2_SetName(This,pszName)	\
    (This)->lpVtbl -> SetName(This,pszName)

#define IDebugSession2_EnumProcesses(This,ppEnum)	\
    (This)->lpVtbl -> EnumProcesses(This,ppEnum)

#define IDebugSession2_Launch(This,pszMachine,pPort,pszExe,pszArgs,pszDir,bstrEnv,pszOptions,dwLaunchFlags,hStdInput,hStdOutput,hStdError,guidLaunchingEngine,pCallback,rgguidSpecificEngines,celtSpecificEngines,ppProcess)	\
    (This)->lpVtbl -> Launch(This,pszMachine,pPort,pszExe,pszArgs,pszDir,bstrEnv,pszOptions,dwLaunchFlags,hStdInput,hStdOutput,hStdError,guidLaunchingEngine,pCallback,rgguidSpecificEngines,celtSpecificEngines,ppProcess)

#define IDebugSession2_RegisterJITServer(This,clsidJITServer)	\
    (This)->lpVtbl -> RegisterJITServer(This,clsidJITServer)

#define IDebugSession2_Terminate(This,fForce)	\
    (This)->lpVtbl -> Terminate(This,fForce)

#define IDebugSession2_Detach(This)	\
    (This)->lpVtbl -> Detach(This)

#define IDebugSession2_CauseBreak(This)	\
    (This)->lpVtbl -> CauseBreak(This)

#define IDebugSession2_CreatePendingBreakpoint(This,pBPRequest,ppPendingBP)	\
    (This)->lpVtbl -> CreatePendingBreakpoint(This,pBPRequest,ppPendingBP)

#define IDebugSession2_EnumPendingBreakpoints(This,pProgram,pszProgram,ppEnumBPs)	\
    (This)->lpVtbl -> EnumPendingBreakpoints(This,pProgram,pszProgram,ppEnumBPs)

#define IDebugSession2_EnumMachines(This,ppEnum)	\
    (This)->lpVtbl -> EnumMachines(This,ppEnum)

#define IDebugSession2_AddMachine(This,pszMachine,ppMachine)	\
    (This)->lpVtbl -> AddMachine(This,pszMachine,ppMachine)

#define IDebugSession2_RemoveMachine(This,pMachine)	\
    (This)->lpVtbl -> RemoveMachine(This,pMachine)

#define IDebugSession2_ShutdownSession(This)	\
    (This)->lpVtbl -> ShutdownSession(This)

#define IDebugSession2_EnumCodeContexts(This,pProgram,pDocPos,ppEnum)	\
    (This)->lpVtbl -> EnumCodeContexts(This,pProgram,pDocPos,ppEnum)

#define IDebugSession2_SetException(This,pException)	\
    (This)->lpVtbl -> SetException(This,pException)

#define IDebugSession2_EnumSetExceptions(This,pProgram,pszProgram,guidType,ppEnum)	\
    (This)->lpVtbl -> EnumSetExceptions(This,pProgram,pszProgram,guidType,ppEnum)

#define IDebugSession2_RemoveSetException(This,pException)	\
    (This)->lpVtbl -> RemoveSetException(This,pException)

#define IDebugSession2_RemoveAllSetExceptions(This,guidType)	\
    (This)->lpVtbl -> RemoveAllSetExceptions(This,guidType)

#define IDebugSession2_EnumDefaultExceptions(This,pParentException,ppEnum)	\
    (This)->lpVtbl -> EnumDefaultExceptions(This,pParentException,ppEnum)

#define IDebugSession2_GetENCUpdate(This,pProgram,ppUpdate)	\
    (This)->lpVtbl -> GetENCUpdate(This,pProgram,ppUpdate)

#define IDebugSession2_SetLocale(This,wLangID)	\
    (This)->lpVtbl -> SetLocale(This,wLangID)

#define IDebugSession2_SetRegistryRoot(This,pszRegistryRoot)	\
    (This)->lpVtbl -> SetRegistryRoot(This,pszRegistryRoot)

#define IDebugSession2_IsAlive(This)	\
    (This)->lpVtbl -> IsAlive(This)

#define IDebugSession2_ClearAllSessionThreadStackFrames(This)	\
    (This)->lpVtbl -> ClearAllSessionThreadStackFrames(This)

#define IDebugSession2_GetSessionId(This,pCallback,rgguidSpecificEngines,celtSpecificEngines,pszStartPageUrl,pbstrSessionId)	\
    (This)->lpVtbl -> GetSessionId(This,pCallback,rgguidSpecificEngines,celtSpecificEngines,pszStartPageUrl,pbstrSessionId)

#define IDebugSession2_SetEngineMetric(This,guidEngine,pszMetric,varValue)	\
    (This)->lpVtbl -> SetEngineMetric(This,guidEngine,pszMetric,varValue)

#define IDebugSession2_SetStoppingModel(This,dwStoppingModel)	\
    (This)->lpVtbl -> SetStoppingModel(This,dwStoppingModel)

#define IDebugSession2_GetStoppingModel(This,pdwStoppingModel)	\
    (This)->lpVtbl -> GetStoppingModel(This,pdwStoppingModel)

#define IDebugSession2_RegisterSessionWithServer(This,pwszServerName)	\
    (This)->lpVtbl -> RegisterSessionWithServer(This,pwszServerName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugSession2_GetName_Proxy( 
    IDebugSession2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugSession2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_SetName_Proxy( 
    IDebugSession2 * This,
    /* [in] */ LPOLESTR pszName);


void __RPC_STUB IDebugSession2_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_EnumProcesses_Proxy( 
    IDebugSession2 * This,
    /* [out] */ IEnumDebugProcesses2 **ppEnum);


void __RPC_STUB IDebugSession2_EnumProcesses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_Launch_Proxy( 
    IDebugSession2 * This,
    /* [full][in] */ LPCOLESTR pszMachine,
    /* [in] */ IDebugPort2 *pPort,
    /* [full][in] */ LPCOLESTR pszExe,
    /* [full][in] */ LPCOLESTR pszArgs,
    /* [full][in] */ LPCOLESTR pszDir,
    /* [full][in] */ BSTR bstrEnv,
    /* [full][in] */ LPCOLESTR pszOptions,
    /* [in] */ LAUNCH_FLAGS dwLaunchFlags,
    /* [in] */ DWORD hStdInput,
    /* [in] */ DWORD hStdOutput,
    /* [in] */ DWORD hStdError,
    /* [in] */ REFGUID guidLaunchingEngine,
    /* [in] */ IDebugEventCallback2 *pCallback,
    /* [size_is][in] */ GUID *rgguidSpecificEngines,
    /* [in] */ DWORD celtSpecificEngines,
    /* [out] */ IDebugProcess2 **ppProcess);


void __RPC_STUB IDebugSession2_Launch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_RegisterJITServer_Proxy( 
    IDebugSession2 * This,
    /* [in] */ REFCLSID clsidJITServer);


void __RPC_STUB IDebugSession2_RegisterJITServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_Terminate_Proxy( 
    IDebugSession2 * This,
    /* [in] */ BOOL fForce);


void __RPC_STUB IDebugSession2_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_Detach_Proxy( 
    IDebugSession2 * This);


void __RPC_STUB IDebugSession2_Detach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_CauseBreak_Proxy( 
    IDebugSession2 * This);


void __RPC_STUB IDebugSession2_CauseBreak_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_CreatePendingBreakpoint_Proxy( 
    IDebugSession2 * This,
    /* [in] */ IDebugBreakpointRequest2 *pBPRequest,
    /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP);


void __RPC_STUB IDebugSession2_CreatePendingBreakpoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_EnumPendingBreakpoints_Proxy( 
    IDebugSession2 * This,
    /* [in] */ IDebugProgram2 *pProgram,
    /* [full][in] */ LPCOLESTR pszProgram,
    /* [out] */ IEnumDebugPendingBreakpoints2 **ppEnumBPs);


void __RPC_STUB IDebugSession2_EnumPendingBreakpoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_EnumMachines_Proxy( 
    IDebugSession2 * This,
    /* [out] */ IEnumDebugMachines2 **ppEnum);


void __RPC_STUB IDebugSession2_EnumMachines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_AddMachine_Proxy( 
    IDebugSession2 * This,
    /* [full][in] */ LPCOLESTR pszMachine,
    /* [out] */ IDebugMachine2 **ppMachine);


void __RPC_STUB IDebugSession2_AddMachine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_RemoveMachine_Proxy( 
    IDebugSession2 * This,
    /* [in] */ IDebugMachine2 *pMachine);


void __RPC_STUB IDebugSession2_RemoveMachine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_ShutdownSession_Proxy( 
    IDebugSession2 * This);


void __RPC_STUB IDebugSession2_ShutdownSession_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_EnumCodeContexts_Proxy( 
    IDebugSession2 * This,
    /* [in] */ IDebugProgram2 *pProgram,
    /* [in] */ IDebugDocumentPosition2 *pDocPos,
    /* [out] */ IEnumDebugCodeContexts2 **ppEnum);


void __RPC_STUB IDebugSession2_EnumCodeContexts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_SetException_Proxy( 
    IDebugSession2 * This,
    /* [in] */ EXCEPTION_INFO *pException);


void __RPC_STUB IDebugSession2_SetException_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_EnumSetExceptions_Proxy( 
    IDebugSession2 * This,
    /* [in] */ IDebugProgram2 *pProgram,
    /* [full][in] */ LPCOLESTR pszProgram,
    /* [in] */ REFGUID guidType,
    /* [out] */ IEnumDebugExceptionInfo2 **ppEnum);


void __RPC_STUB IDebugSession2_EnumSetExceptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_RemoveSetException_Proxy( 
    IDebugSession2 * This,
    /* [in] */ EXCEPTION_INFO *pException);


void __RPC_STUB IDebugSession2_RemoveSetException_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_RemoveAllSetExceptions_Proxy( 
    IDebugSession2 * This,
    /* [in] */ REFGUID guidType);


void __RPC_STUB IDebugSession2_RemoveAllSetExceptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_EnumDefaultExceptions_Proxy( 
    IDebugSession2 * This,
    /* [full][in] */ EXCEPTION_INFO *pParentException,
    /* [out] */ IEnumDebugExceptionInfo2 **ppEnum);


void __RPC_STUB IDebugSession2_EnumDefaultExceptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_GetENCUpdate_Proxy( 
    IDebugSession2 * This,
    /* [in] */ IDebugProgram2 *pProgram,
    /* [out] */ IDebugENCUpdate **ppUpdate);


void __RPC_STUB IDebugSession2_GetENCUpdate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_SetLocale_Proxy( 
    IDebugSession2 * This,
    /* [in] */ WORD wLangID);


void __RPC_STUB IDebugSession2_SetLocale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_SetRegistryRoot_Proxy( 
    IDebugSession2 * This,
    /* [full][in] */ LPCOLESTR pszRegistryRoot);


void __RPC_STUB IDebugSession2_SetRegistryRoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_IsAlive_Proxy( 
    IDebugSession2 * This);


void __RPC_STUB IDebugSession2_IsAlive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_ClearAllSessionThreadStackFrames_Proxy( 
    IDebugSession2 * This);


void __RPC_STUB IDebugSession2_ClearAllSessionThreadStackFrames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_GetSessionId_Proxy( 
    IDebugSession2 * This,
    /* [in] */ IDebugEventCallback2 *pCallback,
    /* [full][size_is][in] */ GUID *rgguidSpecificEngines,
    /* [in] */ DWORD celtSpecificEngines,
    /* [full][in] */ LPCOLESTR pszStartPageUrl,
    /* [out] */ BSTR *pbstrSessionId);


void __RPC_STUB IDebugSession2_GetSessionId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_SetEngineMetric_Proxy( 
    IDebugSession2 * This,
    /* [in] */ REFGUID guidEngine,
    /* [in] */ LPCOLESTR pszMetric,
    /* [in] */ VARIANT varValue);


void __RPC_STUB IDebugSession2_SetEngineMetric_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_SetStoppingModel_Proxy( 
    IDebugSession2 * This,
    /* [in] */ STOPPING_MODEL dwStoppingModel);


void __RPC_STUB IDebugSession2_SetStoppingModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_GetStoppingModel_Proxy( 
    IDebugSession2 * This,
    /* [out] */ STOPPING_MODEL *pdwStoppingModel);


void __RPC_STUB IDebugSession2_GetStoppingModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSession2_RegisterSessionWithServer_Proxy( 
    IDebugSession2 * This,
    /* [in] */ LPCOLESTR pwszServerName);


void __RPC_STUB IDebugSession2_RegisterSessionWithServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugSession2_INTERFACE_DEFINED__ */


#ifndef __IDebugEngine2_INTERFACE_DEFINED__
#define __IDebugEngine2_INTERFACE_DEFINED__

/* interface IDebugEngine2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugEngine2_0001
    {	ATTACH_REASON_LAUNCH	= 0x1,
	ATTACH_REASON_USER	= 0x2,
	ATTACH_REASON_AUTO	= 0x3
    } ;
typedef DWORD ATTACH_REASON;


EXTERN_C const IID IID_IDebugEngine2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ba105b52-12f1-4038-ae64-d95785874c47")
    IDebugEngine2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumPrograms( 
            /* [out] */ IEnumDebugPrograms2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Attach( 
            /* [length_is][size_is][in] */ IDebugProgram2 **rgpPrograms,
            /* [length_is][size_is][in] */ IDebugProgramNode2 **rgpProgramNodes,
            /* [in] */ DWORD celtPrograms,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [in] */ ATTACH_REASON dwReason) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePendingBreakpoint( 
            /* [in] */ IDebugBreakpointRequest2 *pBPRequest,
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetException( 
            /* [in] */ EXCEPTION_INFO *pException) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveSetException( 
            /* [in] */ EXCEPTION_INFO *pException) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAllSetExceptions( 
            /* [in] */ REFGUID guidType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEngineId( 
            /* [out] */ GUID *pguidEngine) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DestroyProgram( 
            /* [in] */ IDebugProgram2 *pProgram) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ContinueFromSynchronousEvent( 
            /* [in] */ IDebugEvent2 *pEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLocale( 
            /* [in] */ WORD wLangID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRegistryRoot( 
            /* [full][in] */ LPCOLESTR pszRegistryRoot) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMetric( 
            /* [in] */ LPCOLESTR pszMetric,
            /* [in] */ VARIANT varValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CauseBreak( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEngine2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEngine2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEngine2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEngine2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPrograms )( 
            IDebugEngine2 * This,
            /* [out] */ IEnumDebugPrograms2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Attach )( 
            IDebugEngine2 * This,
            /* [length_is][size_is][in] */ IDebugProgram2 **rgpPrograms,
            /* [length_is][size_is][in] */ IDebugProgramNode2 **rgpProgramNodes,
            /* [in] */ DWORD celtPrograms,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [in] */ ATTACH_REASON dwReason);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePendingBreakpoint )( 
            IDebugEngine2 * This,
            /* [in] */ IDebugBreakpointRequest2 *pBPRequest,
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP);
        
        HRESULT ( STDMETHODCALLTYPE *SetException )( 
            IDebugEngine2 * This,
            /* [in] */ EXCEPTION_INFO *pException);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveSetException )( 
            IDebugEngine2 * This,
            /* [in] */ EXCEPTION_INFO *pException);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAllSetExceptions )( 
            IDebugEngine2 * This,
            /* [in] */ REFGUID guidType);
        
        HRESULT ( STDMETHODCALLTYPE *GetEngineId )( 
            IDebugEngine2 * This,
            /* [out] */ GUID *pguidEngine);
        
        HRESULT ( STDMETHODCALLTYPE *DestroyProgram )( 
            IDebugEngine2 * This,
            /* [in] */ IDebugProgram2 *pProgram);
        
        HRESULT ( STDMETHODCALLTYPE *ContinueFromSynchronousEvent )( 
            IDebugEngine2 * This,
            /* [in] */ IDebugEvent2 *pEvent);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocale )( 
            IDebugEngine2 * This,
            /* [in] */ WORD wLangID);
        
        HRESULT ( STDMETHODCALLTYPE *SetRegistryRoot )( 
            IDebugEngine2 * This,
            /* [full][in] */ LPCOLESTR pszRegistryRoot);
        
        HRESULT ( STDMETHODCALLTYPE *SetMetric )( 
            IDebugEngine2 * This,
            /* [in] */ LPCOLESTR pszMetric,
            /* [in] */ VARIANT varValue);
        
        HRESULT ( STDMETHODCALLTYPE *CauseBreak )( 
            IDebugEngine2 * This);
        
        END_INTERFACE
    } IDebugEngine2Vtbl;

    interface IDebugEngine2
    {
        CONST_VTBL struct IDebugEngine2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEngine2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEngine2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEngine2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEngine2_EnumPrograms(This,ppEnum)	\
    (This)->lpVtbl -> EnumPrograms(This,ppEnum)

#define IDebugEngine2_Attach(This,rgpPrograms,rgpProgramNodes,celtPrograms,pCallback,dwReason)	\
    (This)->lpVtbl -> Attach(This,rgpPrograms,rgpProgramNodes,celtPrograms,pCallback,dwReason)

#define IDebugEngine2_CreatePendingBreakpoint(This,pBPRequest,ppPendingBP)	\
    (This)->lpVtbl -> CreatePendingBreakpoint(This,pBPRequest,ppPendingBP)

#define IDebugEngine2_SetException(This,pException)	\
    (This)->lpVtbl -> SetException(This,pException)

#define IDebugEngine2_RemoveSetException(This,pException)	\
    (This)->lpVtbl -> RemoveSetException(This,pException)

#define IDebugEngine2_RemoveAllSetExceptions(This,guidType)	\
    (This)->lpVtbl -> RemoveAllSetExceptions(This,guidType)

#define IDebugEngine2_GetEngineId(This,pguidEngine)	\
    (This)->lpVtbl -> GetEngineId(This,pguidEngine)

#define IDebugEngine2_DestroyProgram(This,pProgram)	\
    (This)->lpVtbl -> DestroyProgram(This,pProgram)

#define IDebugEngine2_ContinueFromSynchronousEvent(This,pEvent)	\
    (This)->lpVtbl -> ContinueFromSynchronousEvent(This,pEvent)

#define IDebugEngine2_SetLocale(This,wLangID)	\
    (This)->lpVtbl -> SetLocale(This,wLangID)

#define IDebugEngine2_SetRegistryRoot(This,pszRegistryRoot)	\
    (This)->lpVtbl -> SetRegistryRoot(This,pszRegistryRoot)

#define IDebugEngine2_SetMetric(This,pszMetric,varValue)	\
    (This)->lpVtbl -> SetMetric(This,pszMetric,varValue)

#define IDebugEngine2_CauseBreak(This)	\
    (This)->lpVtbl -> CauseBreak(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEngine2_EnumPrograms_Proxy( 
    IDebugEngine2 * This,
    /* [out] */ IEnumDebugPrograms2 **ppEnum);


void __RPC_STUB IDebugEngine2_EnumPrograms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_Attach_Proxy( 
    IDebugEngine2 * This,
    /* [length_is][size_is][in] */ IDebugProgram2 **rgpPrograms,
    /* [length_is][size_is][in] */ IDebugProgramNode2 **rgpProgramNodes,
    /* [in] */ DWORD celtPrograms,
    /* [in] */ IDebugEventCallback2 *pCallback,
    /* [in] */ ATTACH_REASON dwReason);


void __RPC_STUB IDebugEngine2_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_CreatePendingBreakpoint_Proxy( 
    IDebugEngine2 * This,
    /* [in] */ IDebugBreakpointRequest2 *pBPRequest,
    /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP);


void __RPC_STUB IDebugEngine2_CreatePendingBreakpoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_SetException_Proxy( 
    IDebugEngine2 * This,
    /* [in] */ EXCEPTION_INFO *pException);


void __RPC_STUB IDebugEngine2_SetException_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_RemoveSetException_Proxy( 
    IDebugEngine2 * This,
    /* [in] */ EXCEPTION_INFO *pException);


void __RPC_STUB IDebugEngine2_RemoveSetException_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_RemoveAllSetExceptions_Proxy( 
    IDebugEngine2 * This,
    /* [in] */ REFGUID guidType);


void __RPC_STUB IDebugEngine2_RemoveAllSetExceptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_GetEngineId_Proxy( 
    IDebugEngine2 * This,
    /* [out] */ GUID *pguidEngine);


void __RPC_STUB IDebugEngine2_GetEngineId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_DestroyProgram_Proxy( 
    IDebugEngine2 * This,
    /* [in] */ IDebugProgram2 *pProgram);


void __RPC_STUB IDebugEngine2_DestroyProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_ContinueFromSynchronousEvent_Proxy( 
    IDebugEngine2 * This,
    /* [in] */ IDebugEvent2 *pEvent);


void __RPC_STUB IDebugEngine2_ContinueFromSynchronousEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_SetLocale_Proxy( 
    IDebugEngine2 * This,
    /* [in] */ WORD wLangID);


void __RPC_STUB IDebugEngine2_SetLocale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_SetRegistryRoot_Proxy( 
    IDebugEngine2 * This,
    /* [full][in] */ LPCOLESTR pszRegistryRoot);


void __RPC_STUB IDebugEngine2_SetRegistryRoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_SetMetric_Proxy( 
    IDebugEngine2 * This,
    /* [in] */ LPCOLESTR pszMetric,
    /* [in] */ VARIANT varValue);


void __RPC_STUB IDebugEngine2_SetMetric_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngine2_CauseBreak_Proxy( 
    IDebugEngine2 * This);


void __RPC_STUB IDebugEngine2_CauseBreak_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEngine2_INTERFACE_DEFINED__ */


#ifndef __IDebugEngineLaunch2_INTERFACE_DEFINED__
#define __IDebugEngineLaunch2_INTERFACE_DEFINED__

/* interface IDebugEngineLaunch2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugEngineLaunch2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c7c1462f-9736-466c-b2c1-b6b2dedbf4a7")
    IDebugEngineLaunch2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LaunchSuspended( 
            /* [full][in] */ LPCOLESTR pszMachine,
            /* [in] */ IDebugPort2 *pPort,
            /* [full][in] */ LPCOLESTR pszExe,
            /* [full][in] */ LPCOLESTR pszArgs,
            /* [full][in] */ LPCOLESTR pszDir,
            /* [full][in] */ BSTR bstrEnv,
            /* [full][in] */ LPCOLESTR pszOptions,
            /* [in] */ LAUNCH_FLAGS dwLaunchFlags,
            /* [in] */ DWORD hStdInput,
            /* [in] */ DWORD hStdOutput,
            /* [in] */ DWORD hStdError,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [out] */ IDebugProcess2 **ppProcess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ResumeProcess( 
            /* [in] */ IDebugProcess2 *pProcess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanTerminateProcess( 
            /* [in] */ IDebugProcess2 *pProcess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TerminateProcess( 
            /* [in] */ IDebugProcess2 *pProcess) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEngineLaunch2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEngineLaunch2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEngineLaunch2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEngineLaunch2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *LaunchSuspended )( 
            IDebugEngineLaunch2 * This,
            /* [full][in] */ LPCOLESTR pszMachine,
            /* [in] */ IDebugPort2 *pPort,
            /* [full][in] */ LPCOLESTR pszExe,
            /* [full][in] */ LPCOLESTR pszArgs,
            /* [full][in] */ LPCOLESTR pszDir,
            /* [full][in] */ BSTR bstrEnv,
            /* [full][in] */ LPCOLESTR pszOptions,
            /* [in] */ LAUNCH_FLAGS dwLaunchFlags,
            /* [in] */ DWORD hStdInput,
            /* [in] */ DWORD hStdOutput,
            /* [in] */ DWORD hStdError,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [out] */ IDebugProcess2 **ppProcess);
        
        HRESULT ( STDMETHODCALLTYPE *ResumeProcess )( 
            IDebugEngineLaunch2 * This,
            /* [in] */ IDebugProcess2 *pProcess);
        
        HRESULT ( STDMETHODCALLTYPE *CanTerminateProcess )( 
            IDebugEngineLaunch2 * This,
            /* [in] */ IDebugProcess2 *pProcess);
        
        HRESULT ( STDMETHODCALLTYPE *TerminateProcess )( 
            IDebugEngineLaunch2 * This,
            /* [in] */ IDebugProcess2 *pProcess);
        
        END_INTERFACE
    } IDebugEngineLaunch2Vtbl;

    interface IDebugEngineLaunch2
    {
        CONST_VTBL struct IDebugEngineLaunch2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEngineLaunch2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEngineLaunch2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEngineLaunch2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEngineLaunch2_LaunchSuspended(This,pszMachine,pPort,pszExe,pszArgs,pszDir,bstrEnv,pszOptions,dwLaunchFlags,hStdInput,hStdOutput,hStdError,pCallback,ppProcess)	\
    (This)->lpVtbl -> LaunchSuspended(This,pszMachine,pPort,pszExe,pszArgs,pszDir,bstrEnv,pszOptions,dwLaunchFlags,hStdInput,hStdOutput,hStdError,pCallback,ppProcess)

#define IDebugEngineLaunch2_ResumeProcess(This,pProcess)	\
    (This)->lpVtbl -> ResumeProcess(This,pProcess)

#define IDebugEngineLaunch2_CanTerminateProcess(This,pProcess)	\
    (This)->lpVtbl -> CanTerminateProcess(This,pProcess)

#define IDebugEngineLaunch2_TerminateProcess(This,pProcess)	\
    (This)->lpVtbl -> TerminateProcess(This,pProcess)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEngineLaunch2_LaunchSuspended_Proxy( 
    IDebugEngineLaunch2 * This,
    /* [full][in] */ LPCOLESTR pszMachine,
    /* [in] */ IDebugPort2 *pPort,
    /* [full][in] */ LPCOLESTR pszExe,
    /* [full][in] */ LPCOLESTR pszArgs,
    /* [full][in] */ LPCOLESTR pszDir,
    /* [full][in] */ BSTR bstrEnv,
    /* [full][in] */ LPCOLESTR pszOptions,
    /* [in] */ LAUNCH_FLAGS dwLaunchFlags,
    /* [in] */ DWORD hStdInput,
    /* [in] */ DWORD hStdOutput,
    /* [in] */ DWORD hStdError,
    /* [in] */ IDebugEventCallback2 *pCallback,
    /* [out] */ IDebugProcess2 **ppProcess);


void __RPC_STUB IDebugEngineLaunch2_LaunchSuspended_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngineLaunch2_ResumeProcess_Proxy( 
    IDebugEngineLaunch2 * This,
    /* [in] */ IDebugProcess2 *pProcess);


void __RPC_STUB IDebugEngineLaunch2_ResumeProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngineLaunch2_CanTerminateProcess_Proxy( 
    IDebugEngineLaunch2 * This,
    /* [in] */ IDebugProcess2 *pProcess);


void __RPC_STUB IDebugEngineLaunch2_CanTerminateProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngineLaunch2_TerminateProcess_Proxy( 
    IDebugEngineLaunch2 * This,
    /* [in] */ IDebugProcess2 *pProcess);


void __RPC_STUB IDebugEngineLaunch2_TerminateProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEngineLaunch2_INTERFACE_DEFINED__ */


#ifndef __IDebugEventCallback2_INTERFACE_DEFINED__
#define __IDebugEventCallback2_INTERFACE_DEFINED__

/* interface IDebugEventCallback2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugEventCallback2_0001
    {	EVENT_ASYNCHRONOUS	= 0,
	EVENT_SYNCHRONOUS	= 0x1,
	EVENT_STOPPING	= 0x2,
	EVENT_ASYNC_STOP	= 0x2,
	EVENT_SYNC_STOP	= 0x3,
	EVENT_IMMEDIATE	= 0x4
    } ;
typedef DWORD EVENTATTRIBUTES;


EXTERN_C const IID IID_IDebugEventCallback2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ade2eeb9-fc85-4f5b-b5d9-d431b4aac31a")
    IDebugEventCallback2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Event( 
            /* [in] */ IDebugEngine2 *pEngine,
            /* [in] */ IDebugProcess2 *pProcess,
            /* [in] */ IDebugProgram2 *pProgram,
            /* [in] */ IDebugThread2 *pThread,
            /* [in] */ IDebugEvent2 *pEvent,
            /* [in] */ REFIID riidEvent,
            /* [in] */ DWORD dwAttrib) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEventCallback2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEventCallback2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEventCallback2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEventCallback2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Event )( 
            IDebugEventCallback2 * This,
            /* [in] */ IDebugEngine2 *pEngine,
            /* [in] */ IDebugProcess2 *pProcess,
            /* [in] */ IDebugProgram2 *pProgram,
            /* [in] */ IDebugThread2 *pThread,
            /* [in] */ IDebugEvent2 *pEvent,
            /* [in] */ REFIID riidEvent,
            /* [in] */ DWORD dwAttrib);
        
        END_INTERFACE
    } IDebugEventCallback2Vtbl;

    interface IDebugEventCallback2
    {
        CONST_VTBL struct IDebugEventCallback2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEventCallback2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEventCallback2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEventCallback2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEventCallback2_Event(This,pEngine,pProcess,pProgram,pThread,pEvent,riidEvent,dwAttrib)	\
    (This)->lpVtbl -> Event(This,pEngine,pProcess,pProgram,pThread,pEvent,riidEvent,dwAttrib)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEventCallback2_Event_Proxy( 
    IDebugEventCallback2 * This,
    /* [in] */ IDebugEngine2 *pEngine,
    /* [in] */ IDebugProcess2 *pProcess,
    /* [in] */ IDebugProgram2 *pProgram,
    /* [in] */ IDebugThread2 *pThread,
    /* [in] */ IDebugEvent2 *pEvent,
    /* [in] */ REFIID riidEvent,
    /* [in] */ DWORD dwAttrib);


void __RPC_STUB IDebugEventCallback2_Event_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEventCallback2_INTERFACE_DEFINED__ */


#ifndef __IDebugEvent2_INTERFACE_DEFINED__
#define __IDebugEvent2_INTERFACE_DEFINED__

/* interface IDebugEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("423238d6-da42-4989-96fb-6bba26e72e09")
    IDebugEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAttributes( 
            /* [out] */ DWORD *pdwAttrib) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributes )( 
            IDebugEvent2 * This,
            /* [out] */ DWORD *pdwAttrib);
        
        END_INTERFACE
    } IDebugEvent2Vtbl;

    interface IDebugEvent2
    {
        CONST_VTBL struct IDebugEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEvent2_GetAttributes(This,pdwAttrib)	\
    (This)->lpVtbl -> GetAttributes(This,pdwAttrib)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEvent2_GetAttributes_Proxy( 
    IDebugEvent2 * This,
    /* [out] */ DWORD *pdwAttrib);


void __RPC_STUB IDebugEvent2_GetAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugSessionCreateEvent2_INTERFACE_DEFINED__
#define __IDebugSessionCreateEvent2_INTERFACE_DEFINED__

/* interface IDebugSessionCreateEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugSessionCreateEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2c2b15b7-fc6d-45b3-9622-29665d964a76")
    IDebugSessionCreateEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugSessionCreateEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugSessionCreateEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugSessionCreateEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugSessionCreateEvent2 * This);
        
        END_INTERFACE
    } IDebugSessionCreateEvent2Vtbl;

    interface IDebugSessionCreateEvent2
    {
        CONST_VTBL struct IDebugSessionCreateEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugSessionCreateEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugSessionCreateEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugSessionCreateEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugSessionCreateEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugSessionDestroyEvent2_INTERFACE_DEFINED__
#define __IDebugSessionDestroyEvent2_INTERFACE_DEFINED__

/* interface IDebugSessionDestroyEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugSessionDestroyEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f199b2c2-88fe-4c5d-a0fd-aa046b0dc0dc")
    IDebugSessionDestroyEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugSessionDestroyEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugSessionDestroyEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugSessionDestroyEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugSessionDestroyEvent2 * This);
        
        END_INTERFACE
    } IDebugSessionDestroyEvent2Vtbl;

    interface IDebugSessionDestroyEvent2
    {
        CONST_VTBL struct IDebugSessionDestroyEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugSessionDestroyEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugSessionDestroyEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugSessionDestroyEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugSessionDestroyEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugEngineCreateEvent2_INTERFACE_DEFINED__
#define __IDebugEngineCreateEvent2_INTERFACE_DEFINED__

/* interface IDebugEngineCreateEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugEngineCreateEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fe5b734c-759d-4e59-ab04-f103343bdd06")
    IDebugEngineCreateEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetEngine( 
            /* [out] */ IDebugEngine2 **pEngine) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEngineCreateEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEngineCreateEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEngineCreateEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEngineCreateEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEngine )( 
            IDebugEngineCreateEvent2 * This,
            /* [out] */ IDebugEngine2 **pEngine);
        
        END_INTERFACE
    } IDebugEngineCreateEvent2Vtbl;

    interface IDebugEngineCreateEvent2
    {
        CONST_VTBL struct IDebugEngineCreateEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEngineCreateEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEngineCreateEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEngineCreateEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEngineCreateEvent2_GetEngine(This,pEngine)	\
    (This)->lpVtbl -> GetEngine(This,pEngine)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEngineCreateEvent2_GetEngine_Proxy( 
    IDebugEngineCreateEvent2 * This,
    /* [out] */ IDebugEngine2 **pEngine);


void __RPC_STUB IDebugEngineCreateEvent2_GetEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEngineCreateEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugProcessCreateEvent2_INTERFACE_DEFINED__
#define __IDebugProcessCreateEvent2_INTERFACE_DEFINED__

/* interface IDebugProcessCreateEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProcessCreateEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bac3780f-04da-4726-901c-ba6a4633e1ca")
    IDebugProcessCreateEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugProcessCreateEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProcessCreateEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProcessCreateEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProcessCreateEvent2 * This);
        
        END_INTERFACE
    } IDebugProcessCreateEvent2Vtbl;

    interface IDebugProcessCreateEvent2
    {
        CONST_VTBL struct IDebugProcessCreateEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProcessCreateEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProcessCreateEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProcessCreateEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugProcessCreateEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugProcessDestroyEvent2_INTERFACE_DEFINED__
#define __IDebugProcessDestroyEvent2_INTERFACE_DEFINED__

/* interface IDebugProcessDestroyEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProcessDestroyEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3e2a0832-17e1-4886-8c0e-204da242995f")
    IDebugProcessDestroyEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugProcessDestroyEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProcessDestroyEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProcessDestroyEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProcessDestroyEvent2 * This);
        
        END_INTERFACE
    } IDebugProcessDestroyEvent2Vtbl;

    interface IDebugProcessDestroyEvent2
    {
        CONST_VTBL struct IDebugProcessDestroyEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProcessDestroyEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProcessDestroyEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProcessDestroyEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugProcessDestroyEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugProgramCreateEvent2_INTERFACE_DEFINED__
#define __IDebugProgramCreateEvent2_INTERFACE_DEFINED__

/* interface IDebugProgramCreateEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProgramCreateEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96cd11ee-ecd4-4e89-957e-b5d496fc4139")
    IDebugProgramCreateEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugProgramCreateEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProgramCreateEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProgramCreateEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProgramCreateEvent2 * This);
        
        END_INTERFACE
    } IDebugProgramCreateEvent2Vtbl;

    interface IDebugProgramCreateEvent2
    {
        CONST_VTBL struct IDebugProgramCreateEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProgramCreateEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProgramCreateEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProgramCreateEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugProgramCreateEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugProgramDestroyEvent2_INTERFACE_DEFINED__
#define __IDebugProgramDestroyEvent2_INTERFACE_DEFINED__

/* interface IDebugProgramDestroyEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProgramDestroyEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e147e9e3-6440-4073-a7b7-a65592c714b5")
    IDebugProgramDestroyEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetExitCode( 
            /* [out] */ DWORD *pdwExit) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugProgramDestroyEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProgramDestroyEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProgramDestroyEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProgramDestroyEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetExitCode )( 
            IDebugProgramDestroyEvent2 * This,
            /* [out] */ DWORD *pdwExit);
        
        END_INTERFACE
    } IDebugProgramDestroyEvent2Vtbl;

    interface IDebugProgramDestroyEvent2
    {
        CONST_VTBL struct IDebugProgramDestroyEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProgramDestroyEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProgramDestroyEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProgramDestroyEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugProgramDestroyEvent2_GetExitCode(This,pdwExit)	\
    (This)->lpVtbl -> GetExitCode(This,pdwExit)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugProgramDestroyEvent2_GetExitCode_Proxy( 
    IDebugProgramDestroyEvent2 * This,
    /* [out] */ DWORD *pdwExit);


void __RPC_STUB IDebugProgramDestroyEvent2_GetExitCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugProgramDestroyEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugThreadCreateEvent2_INTERFACE_DEFINED__
#define __IDebugThreadCreateEvent2_INTERFACE_DEFINED__

/* interface IDebugThreadCreateEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugThreadCreateEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2090ccfc-70c5-491d-a5e8-bad2dd9ee3ea")
    IDebugThreadCreateEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugThreadCreateEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugThreadCreateEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugThreadCreateEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugThreadCreateEvent2 * This);
        
        END_INTERFACE
    } IDebugThreadCreateEvent2Vtbl;

    interface IDebugThreadCreateEvent2
    {
        CONST_VTBL struct IDebugThreadCreateEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugThreadCreateEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugThreadCreateEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugThreadCreateEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugThreadCreateEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugThreadDestroyEvent2_INTERFACE_DEFINED__
#define __IDebugThreadDestroyEvent2_INTERFACE_DEFINED__

/* interface IDebugThreadDestroyEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugThreadDestroyEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2c3b7532-a36f-4a6e-9072-49be649b8541")
    IDebugThreadDestroyEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetExitCode( 
            /* [out] */ DWORD *pdwExit) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugThreadDestroyEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugThreadDestroyEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugThreadDestroyEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugThreadDestroyEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetExitCode )( 
            IDebugThreadDestroyEvent2 * This,
            /* [out] */ DWORD *pdwExit);
        
        END_INTERFACE
    } IDebugThreadDestroyEvent2Vtbl;

    interface IDebugThreadDestroyEvent2
    {
        CONST_VTBL struct IDebugThreadDestroyEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugThreadDestroyEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugThreadDestroyEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugThreadDestroyEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugThreadDestroyEvent2_GetExitCode(This,pdwExit)	\
    (This)->lpVtbl -> GetExitCode(This,pdwExit)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugThreadDestroyEvent2_GetExitCode_Proxy( 
    IDebugThreadDestroyEvent2 * This,
    /* [out] */ DWORD *pdwExit);


void __RPC_STUB IDebugThreadDestroyEvent2_GetExitCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugThreadDestroyEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugLoadCompleteEvent2_INTERFACE_DEFINED__
#define __IDebugLoadCompleteEvent2_INTERFACE_DEFINED__

/* interface IDebugLoadCompleteEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugLoadCompleteEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b1844850-1349-45d4-9f12-495212f5eb0b")
    IDebugLoadCompleteEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugLoadCompleteEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugLoadCompleteEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugLoadCompleteEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugLoadCompleteEvent2 * This);
        
        END_INTERFACE
    } IDebugLoadCompleteEvent2Vtbl;

    interface IDebugLoadCompleteEvent2
    {
        CONST_VTBL struct IDebugLoadCompleteEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugLoadCompleteEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugLoadCompleteEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugLoadCompleteEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugLoadCompleteEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugEntryPointEvent2_INTERFACE_DEFINED__
#define __IDebugEntryPointEvent2_INTERFACE_DEFINED__

/* interface IDebugEntryPointEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugEntryPointEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e8414a3e-1642-48ec-829e-5f4040e16da9")
    IDebugEntryPointEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugEntryPointEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEntryPointEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEntryPointEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEntryPointEvent2 * This);
        
        END_INTERFACE
    } IDebugEntryPointEvent2Vtbl;

    interface IDebugEntryPointEvent2
    {
        CONST_VTBL struct IDebugEntryPointEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEntryPointEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEntryPointEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEntryPointEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugEntryPointEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugStepCompleteEvent2_INTERFACE_DEFINED__
#define __IDebugStepCompleteEvent2_INTERFACE_DEFINED__

/* interface IDebugStepCompleteEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugStepCompleteEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0f7f24c1-74d9-4ea6-a3ea-7edb2d81441d")
    IDebugStepCompleteEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugStepCompleteEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugStepCompleteEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugStepCompleteEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugStepCompleteEvent2 * This);
        
        END_INTERFACE
    } IDebugStepCompleteEvent2Vtbl;

    interface IDebugStepCompleteEvent2
    {
        CONST_VTBL struct IDebugStepCompleteEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugStepCompleteEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugStepCompleteEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugStepCompleteEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugStepCompleteEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugCanStopEvent2_INTERFACE_DEFINED__
#define __IDebugCanStopEvent2_INTERFACE_DEFINED__

/* interface IDebugCanStopEvent2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugCanStopEvent2_0001
    {	CANSTOP_ENTRYPOINT	= 0,
	CANSTOP_STEPIN	= 0x1
    } ;
typedef DWORD CANSTOP_REASON;


EXTERN_C const IID IID_IDebugCanStopEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b5b0d747-d4d2-4e2d-872d-74da22037826")
    IDebugCanStopEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetReason( 
            /* [out] */ CANSTOP_REASON *pcr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanStop( 
            /* [in] */ BOOL fCanStop) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocumentContext( 
            /* [out] */ IDebugDocumentContext2 **ppDocCxt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodeContext( 
            /* [out] */ IDebugCodeContext2 **ppCodeContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugCanStopEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugCanStopEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugCanStopEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugCanStopEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetReason )( 
            IDebugCanStopEvent2 * This,
            /* [out] */ CANSTOP_REASON *pcr);
        
        HRESULT ( STDMETHODCALLTYPE *CanStop )( 
            IDebugCanStopEvent2 * This,
            /* [in] */ BOOL fCanStop);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentContext )( 
            IDebugCanStopEvent2 * This,
            /* [out] */ IDebugDocumentContext2 **ppDocCxt);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodeContext )( 
            IDebugCanStopEvent2 * This,
            /* [out] */ IDebugCodeContext2 **ppCodeContext);
        
        END_INTERFACE
    } IDebugCanStopEvent2Vtbl;

    interface IDebugCanStopEvent2
    {
        CONST_VTBL struct IDebugCanStopEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugCanStopEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugCanStopEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugCanStopEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugCanStopEvent2_GetReason(This,pcr)	\
    (This)->lpVtbl -> GetReason(This,pcr)

#define IDebugCanStopEvent2_CanStop(This,fCanStop)	\
    (This)->lpVtbl -> CanStop(This,fCanStop)

#define IDebugCanStopEvent2_GetDocumentContext(This,ppDocCxt)	\
    (This)->lpVtbl -> GetDocumentContext(This,ppDocCxt)

#define IDebugCanStopEvent2_GetCodeContext(This,ppCodeContext)	\
    (This)->lpVtbl -> GetCodeContext(This,ppCodeContext)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugCanStopEvent2_GetReason_Proxy( 
    IDebugCanStopEvent2 * This,
    /* [out] */ CANSTOP_REASON *pcr);


void __RPC_STUB IDebugCanStopEvent2_GetReason_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugCanStopEvent2_CanStop_Proxy( 
    IDebugCanStopEvent2 * This,
    /* [in] */ BOOL fCanStop);


void __RPC_STUB IDebugCanStopEvent2_CanStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugCanStopEvent2_GetDocumentContext_Proxy( 
    IDebugCanStopEvent2 * This,
    /* [out] */ IDebugDocumentContext2 **ppDocCxt);


void __RPC_STUB IDebugCanStopEvent2_GetDocumentContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugCanStopEvent2_GetCodeContext_Proxy( 
    IDebugCanStopEvent2 * This,
    /* [out] */ IDebugCodeContext2 **ppCodeContext);


void __RPC_STUB IDebugCanStopEvent2_GetCodeContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugCanStopEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugBreakEvent2_INTERFACE_DEFINED__
#define __IDebugBreakEvent2_INTERFACE_DEFINED__

/* interface IDebugBreakEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugBreakEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c7405d1d-e24b-44e0-b707-d8a5a4e1641b")
    IDebugBreakEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugBreakEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBreakEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBreakEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBreakEvent2 * This);
        
        END_INTERFACE
    } IDebugBreakEvent2Vtbl;

    interface IDebugBreakEvent2
    {
        CONST_VTBL struct IDebugBreakEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBreakEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBreakEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBreakEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugBreakEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugBreakpointEvent2_INTERFACE_DEFINED__
#define __IDebugBreakpointEvent2_INTERFACE_DEFINED__

/* interface IDebugBreakpointEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugBreakpointEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("501c1e21-c557-48b8-ba30-a1eab0bc4a74")
    IDebugBreakpointEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumBreakpoints( 
            /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBreakpointEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBreakpointEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBreakpointEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBreakpointEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumBreakpoints )( 
            IDebugBreakpointEvent2 * This,
            /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum);
        
        END_INTERFACE
    } IDebugBreakpointEvent2Vtbl;

    interface IDebugBreakpointEvent2
    {
        CONST_VTBL struct IDebugBreakpointEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBreakpointEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBreakpointEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBreakpointEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBreakpointEvent2_EnumBreakpoints(This,ppEnum)	\
    (This)->lpVtbl -> EnumBreakpoints(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBreakpointEvent2_EnumBreakpoints_Proxy( 
    IDebugBreakpointEvent2 * This,
    /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum);


void __RPC_STUB IDebugBreakpointEvent2_EnumBreakpoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBreakpointEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugExceptionEvent2_INTERFACE_DEFINED__
#define __IDebugExceptionEvent2_INTERFACE_DEFINED__

/* interface IDebugExceptionEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugExceptionEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("51a94113-8788-4a54-ae15-08b74ff922d0")
    IDebugExceptionEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetException( 
            /* [out] */ EXCEPTION_INFO *pExceptionInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExceptionDescription( 
            /* [out] */ BSTR *pbstrDescription) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanPassToDebuggee( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PassToDebuggee( 
            /* [in] */ BOOL fPass) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugExceptionEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugExceptionEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugExceptionEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugExceptionEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetException )( 
            IDebugExceptionEvent2 * This,
            /* [out] */ EXCEPTION_INFO *pExceptionInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetExceptionDescription )( 
            IDebugExceptionEvent2 * This,
            /* [out] */ BSTR *pbstrDescription);
        
        HRESULT ( STDMETHODCALLTYPE *CanPassToDebuggee )( 
            IDebugExceptionEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *PassToDebuggee )( 
            IDebugExceptionEvent2 * This,
            /* [in] */ BOOL fPass);
        
        END_INTERFACE
    } IDebugExceptionEvent2Vtbl;

    interface IDebugExceptionEvent2
    {
        CONST_VTBL struct IDebugExceptionEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugExceptionEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugExceptionEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugExceptionEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugExceptionEvent2_GetException(This,pExceptionInfo)	\
    (This)->lpVtbl -> GetException(This,pExceptionInfo)

#define IDebugExceptionEvent2_GetExceptionDescription(This,pbstrDescription)	\
    (This)->lpVtbl -> GetExceptionDescription(This,pbstrDescription)

#define IDebugExceptionEvent2_CanPassToDebuggee(This)	\
    (This)->lpVtbl -> CanPassToDebuggee(This)

#define IDebugExceptionEvent2_PassToDebuggee(This,fPass)	\
    (This)->lpVtbl -> PassToDebuggee(This,fPass)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugExceptionEvent2_GetException_Proxy( 
    IDebugExceptionEvent2 * This,
    /* [out] */ EXCEPTION_INFO *pExceptionInfo);


void __RPC_STUB IDebugExceptionEvent2_GetException_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugExceptionEvent2_GetExceptionDescription_Proxy( 
    IDebugExceptionEvent2 * This,
    /* [out] */ BSTR *pbstrDescription);


void __RPC_STUB IDebugExceptionEvent2_GetExceptionDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugExceptionEvent2_CanPassToDebuggee_Proxy( 
    IDebugExceptionEvent2 * This);


void __RPC_STUB IDebugExceptionEvent2_CanPassToDebuggee_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugExceptionEvent2_PassToDebuggee_Proxy( 
    IDebugExceptionEvent2 * This,
    /* [in] */ BOOL fPass);


void __RPC_STUB IDebugExceptionEvent2_PassToDebuggee_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugExceptionEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugOutputStringEvent2_INTERFACE_DEFINED__
#define __IDebugOutputStringEvent2_INTERFACE_DEFINED__

/* interface IDebugOutputStringEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugOutputStringEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("569c4bb1-7b82-46fc-ae28-4536ddad753e")
    IDebugOutputStringEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetString( 
            /* [out] */ BSTR *pbstrString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugOutputStringEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugOutputStringEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugOutputStringEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugOutputStringEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetString )( 
            IDebugOutputStringEvent2 * This,
            /* [out] */ BSTR *pbstrString);
        
        END_INTERFACE
    } IDebugOutputStringEvent2Vtbl;

    interface IDebugOutputStringEvent2
    {
        CONST_VTBL struct IDebugOutputStringEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugOutputStringEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugOutputStringEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugOutputStringEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugOutputStringEvent2_GetString(This,pbstrString)	\
    (This)->lpVtbl -> GetString(This,pbstrString)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugOutputStringEvent2_GetString_Proxy( 
    IDebugOutputStringEvent2 * This,
    /* [out] */ BSTR *pbstrString);


void __RPC_STUB IDebugOutputStringEvent2_GetString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugOutputStringEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugModuleLoadEvent2_INTERFACE_DEFINED__
#define __IDebugModuleLoadEvent2_INTERFACE_DEFINED__

/* interface IDebugModuleLoadEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugModuleLoadEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("989db083-0d7c-40d1-a9d9-921bf611a4b2")
    IDebugModuleLoadEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetModule( 
            /* [out] */ IDebugModule2 **pModule,
            /* [out][in] */ BSTR *pbstrDebugMessage,
            /* [out][in] */ BOOL *pbLoad) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugModuleLoadEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugModuleLoadEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugModuleLoadEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugModuleLoadEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetModule )( 
            IDebugModuleLoadEvent2 * This,
            /* [out] */ IDebugModule2 **pModule,
            /* [out][in] */ BSTR *pbstrDebugMessage,
            /* [out][in] */ BOOL *pbLoad);
        
        END_INTERFACE
    } IDebugModuleLoadEvent2Vtbl;

    interface IDebugModuleLoadEvent2
    {
        CONST_VTBL struct IDebugModuleLoadEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugModuleLoadEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugModuleLoadEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugModuleLoadEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugModuleLoadEvent2_GetModule(This,pModule,pbstrDebugMessage,pbLoad)	\
    (This)->lpVtbl -> GetModule(This,pModule,pbstrDebugMessage,pbLoad)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugModuleLoadEvent2_GetModule_Proxy( 
    IDebugModuleLoadEvent2 * This,
    /* [out] */ IDebugModule2 **pModule,
    /* [out][in] */ BSTR *pbstrDebugMessage,
    /* [out][in] */ BOOL *pbLoad);


void __RPC_STUB IDebugModuleLoadEvent2_GetModule_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugModuleLoadEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugPropertyCreateEvent2_INTERFACE_DEFINED__
#define __IDebugPropertyCreateEvent2_INTERFACE_DEFINED__

/* interface IDebugPropertyCreateEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPropertyCreateEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ded6d613-a3db-4e35-bb5b-a92391133f03")
    IDebugPropertyCreateEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDebugProperty( 
            /* [out] */ IDebugProperty2 **ppProperty) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPropertyCreateEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPropertyCreateEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPropertyCreateEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPropertyCreateEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDebugProperty )( 
            IDebugPropertyCreateEvent2 * This,
            /* [out] */ IDebugProperty2 **ppProperty);
        
        END_INTERFACE
    } IDebugPropertyCreateEvent2Vtbl;

    interface IDebugPropertyCreateEvent2
    {
        CONST_VTBL struct IDebugPropertyCreateEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPropertyCreateEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPropertyCreateEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPropertyCreateEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPropertyCreateEvent2_GetDebugProperty(This,ppProperty)	\
    (This)->lpVtbl -> GetDebugProperty(This,ppProperty)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPropertyCreateEvent2_GetDebugProperty_Proxy( 
    IDebugPropertyCreateEvent2 * This,
    /* [out] */ IDebugProperty2 **ppProperty);


void __RPC_STUB IDebugPropertyCreateEvent2_GetDebugProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPropertyCreateEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugPropertyDestroyEvent2_INTERFACE_DEFINED__
#define __IDebugPropertyDestroyEvent2_INTERFACE_DEFINED__

/* interface IDebugPropertyDestroyEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPropertyDestroyEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f3765f18-f395-4b8c-8e95-dcb3fe8e7ec8")
    IDebugPropertyDestroyEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDebugProperty( 
            /* [out] */ IDebugProperty2 **ppProperty) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPropertyDestroyEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPropertyDestroyEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPropertyDestroyEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPropertyDestroyEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDebugProperty )( 
            IDebugPropertyDestroyEvent2 * This,
            /* [out] */ IDebugProperty2 **ppProperty);
        
        END_INTERFACE
    } IDebugPropertyDestroyEvent2Vtbl;

    interface IDebugPropertyDestroyEvent2
    {
        CONST_VTBL struct IDebugPropertyDestroyEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPropertyDestroyEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPropertyDestroyEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPropertyDestroyEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPropertyDestroyEvent2_GetDebugProperty(This,ppProperty)	\
    (This)->lpVtbl -> GetDebugProperty(This,ppProperty)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPropertyDestroyEvent2_GetDebugProperty_Proxy( 
    IDebugPropertyDestroyEvent2 * This,
    /* [out] */ IDebugProperty2 **ppProperty);


void __RPC_STUB IDebugPropertyDestroyEvent2_GetDebugProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPropertyDestroyEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugBreakpointBoundEvent2_INTERFACE_DEFINED__
#define __IDebugBreakpointBoundEvent2_INTERFACE_DEFINED__

/* interface IDebugBreakpointBoundEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugBreakpointBoundEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1dddb704-cf99-4b8a-b746-dabb01dd13a0")
    IDebugBreakpointBoundEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPendingBreakpoint( 
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumBoundBreakpoints( 
            /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBreakpointBoundEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBreakpointBoundEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBreakpointBoundEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBreakpointBoundEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPendingBreakpoint )( 
            IDebugBreakpointBoundEvent2 * This,
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP);
        
        HRESULT ( STDMETHODCALLTYPE *EnumBoundBreakpoints )( 
            IDebugBreakpointBoundEvent2 * This,
            /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum);
        
        END_INTERFACE
    } IDebugBreakpointBoundEvent2Vtbl;

    interface IDebugBreakpointBoundEvent2
    {
        CONST_VTBL struct IDebugBreakpointBoundEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBreakpointBoundEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBreakpointBoundEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBreakpointBoundEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBreakpointBoundEvent2_GetPendingBreakpoint(This,ppPendingBP)	\
    (This)->lpVtbl -> GetPendingBreakpoint(This,ppPendingBP)

#define IDebugBreakpointBoundEvent2_EnumBoundBreakpoints(This,ppEnum)	\
    (This)->lpVtbl -> EnumBoundBreakpoints(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBreakpointBoundEvent2_GetPendingBreakpoint_Proxy( 
    IDebugBreakpointBoundEvent2 * This,
    /* [out] */ IDebugPendingBreakpoint2 **ppPendingBP);


void __RPC_STUB IDebugBreakpointBoundEvent2_GetPendingBreakpoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBreakpointBoundEvent2_EnumBoundBreakpoints_Proxy( 
    IDebugBreakpointBoundEvent2 * This,
    /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum);


void __RPC_STUB IDebugBreakpointBoundEvent2_EnumBoundBreakpoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBreakpointBoundEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugBreakpointUnboundEvent2_INTERFACE_DEFINED__
#define __IDebugBreakpointUnboundEvent2_INTERFACE_DEFINED__

/* interface IDebugBreakpointUnboundEvent2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugBreakpointUnboundEvent2_0001
    {	BPUR_UNKNOWN	= 0x1,
	BPUR_CODE_UNLOADED	= 0x2,
	BPUR_BREAKPOINT_REBIND	= 0x3,
	BPUR_BREAKPOINT_ERROR	= 0x4
    } ;
typedef DWORD BP_UNBOUND_REASON;


EXTERN_C const IID IID_IDebugBreakpointUnboundEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("78d1db4f-c557-4dc5-a2dd-5369d21b1c8c")
    IDebugBreakpointUnboundEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetBreakpoint( 
            /* [out] */ IDebugBoundBreakpoint2 **ppBP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReason( 
            /* [out] */ BP_UNBOUND_REASON *pdwUnboundReason) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBreakpointUnboundEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBreakpointUnboundEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBreakpointUnboundEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBreakpointUnboundEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetBreakpoint )( 
            IDebugBreakpointUnboundEvent2 * This,
            /* [out] */ IDebugBoundBreakpoint2 **ppBP);
        
        HRESULT ( STDMETHODCALLTYPE *GetReason )( 
            IDebugBreakpointUnboundEvent2 * This,
            /* [out] */ BP_UNBOUND_REASON *pdwUnboundReason);
        
        END_INTERFACE
    } IDebugBreakpointUnboundEvent2Vtbl;

    interface IDebugBreakpointUnboundEvent2
    {
        CONST_VTBL struct IDebugBreakpointUnboundEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBreakpointUnboundEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBreakpointUnboundEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBreakpointUnboundEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBreakpointUnboundEvent2_GetBreakpoint(This,ppBP)	\
    (This)->lpVtbl -> GetBreakpoint(This,ppBP)

#define IDebugBreakpointUnboundEvent2_GetReason(This,pdwUnboundReason)	\
    (This)->lpVtbl -> GetReason(This,pdwUnboundReason)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBreakpointUnboundEvent2_GetBreakpoint_Proxy( 
    IDebugBreakpointUnboundEvent2 * This,
    /* [out] */ IDebugBoundBreakpoint2 **ppBP);


void __RPC_STUB IDebugBreakpointUnboundEvent2_GetBreakpoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBreakpointUnboundEvent2_GetReason_Proxy( 
    IDebugBreakpointUnboundEvent2 * This,
    /* [out] */ BP_UNBOUND_REASON *pdwUnboundReason);


void __RPC_STUB IDebugBreakpointUnboundEvent2_GetReason_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBreakpointUnboundEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugBreakpointErrorEvent2_INTERFACE_DEFINED__
#define __IDebugBreakpointErrorEvent2_INTERFACE_DEFINED__

/* interface IDebugBreakpointErrorEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugBreakpointErrorEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("abb0ca42-f82b-4622-84e4-6903ae90f210")
    IDebugBreakpointErrorEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetErrorBreakpoint( 
            /* [out] */ IDebugErrorBreakpoint2 **ppErrorBP) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBreakpointErrorEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBreakpointErrorEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBreakpointErrorEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBreakpointErrorEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetErrorBreakpoint )( 
            IDebugBreakpointErrorEvent2 * This,
            /* [out] */ IDebugErrorBreakpoint2 **ppErrorBP);
        
        END_INTERFACE
    } IDebugBreakpointErrorEvent2Vtbl;

    interface IDebugBreakpointErrorEvent2
    {
        CONST_VTBL struct IDebugBreakpointErrorEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBreakpointErrorEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBreakpointErrorEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBreakpointErrorEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBreakpointErrorEvent2_GetErrorBreakpoint(This,ppErrorBP)	\
    (This)->lpVtbl -> GetErrorBreakpoint(This,ppErrorBP)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBreakpointErrorEvent2_GetErrorBreakpoint_Proxy( 
    IDebugBreakpointErrorEvent2 * This,
    /* [out] */ IDebugErrorBreakpoint2 **ppErrorBP);


void __RPC_STUB IDebugBreakpointErrorEvent2_GetErrorBreakpoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBreakpointErrorEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugExpressionEvaluationCompleteEvent2_INTERFACE_DEFINED__
#define __IDebugExpressionEvaluationCompleteEvent2_INTERFACE_DEFINED__

/* interface IDebugExpressionEvaluationCompleteEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugExpressionEvaluationCompleteEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c0e13a85-238a-4800-8315-d947c960a843")
    IDebugExpressionEvaluationCompleteEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetExpression( 
            /* [out] */ IDebugExpression2 **ppExpr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResult( 
            /* [out] */ IDebugProperty2 **ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugExpressionEvaluationCompleteEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugExpressionEvaluationCompleteEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugExpressionEvaluationCompleteEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugExpressionEvaluationCompleteEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetExpression )( 
            IDebugExpressionEvaluationCompleteEvent2 * This,
            /* [out] */ IDebugExpression2 **ppExpr);
        
        HRESULT ( STDMETHODCALLTYPE *GetResult )( 
            IDebugExpressionEvaluationCompleteEvent2 * This,
            /* [out] */ IDebugProperty2 **ppResult);
        
        END_INTERFACE
    } IDebugExpressionEvaluationCompleteEvent2Vtbl;

    interface IDebugExpressionEvaluationCompleteEvent2
    {
        CONST_VTBL struct IDebugExpressionEvaluationCompleteEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugExpressionEvaluationCompleteEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugExpressionEvaluationCompleteEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugExpressionEvaluationCompleteEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugExpressionEvaluationCompleteEvent2_GetExpression(This,ppExpr)	\
    (This)->lpVtbl -> GetExpression(This,ppExpr)

#define IDebugExpressionEvaluationCompleteEvent2_GetResult(This,ppResult)	\
    (This)->lpVtbl -> GetResult(This,ppResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugExpressionEvaluationCompleteEvent2_GetExpression_Proxy( 
    IDebugExpressionEvaluationCompleteEvent2 * This,
    /* [out] */ IDebugExpression2 **ppExpr);


void __RPC_STUB IDebugExpressionEvaluationCompleteEvent2_GetExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugExpressionEvaluationCompleteEvent2_GetResult_Proxy( 
    IDebugExpressionEvaluationCompleteEvent2 * This,
    /* [out] */ IDebugProperty2 **ppResult);


void __RPC_STUB IDebugExpressionEvaluationCompleteEvent2_GetResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugExpressionEvaluationCompleteEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugReturnValueEvent2_INTERFACE_DEFINED__
#define __IDebugReturnValueEvent2_INTERFACE_DEFINED__

/* interface IDebugReturnValueEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugReturnValueEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0da4d4cc-2d0b-410f-8d5d-b6b73a5d35d8")
    IDebugReturnValueEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetReturnValue( 
            /* [out] */ IDebugProperty2 **ppReturnValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugReturnValueEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugReturnValueEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugReturnValueEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugReturnValueEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetReturnValue )( 
            IDebugReturnValueEvent2 * This,
            /* [out] */ IDebugProperty2 **ppReturnValue);
        
        END_INTERFACE
    } IDebugReturnValueEvent2Vtbl;

    interface IDebugReturnValueEvent2
    {
        CONST_VTBL struct IDebugReturnValueEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugReturnValueEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugReturnValueEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugReturnValueEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugReturnValueEvent2_GetReturnValue(This,ppReturnValue)	\
    (This)->lpVtbl -> GetReturnValue(This,ppReturnValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugReturnValueEvent2_GetReturnValue_Proxy( 
    IDebugReturnValueEvent2 * This,
    /* [out] */ IDebugProperty2 **ppReturnValue);


void __RPC_STUB IDebugReturnValueEvent2_GetReturnValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugReturnValueEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugFindSymbolEvent2_INTERFACE_DEFINED__
#define __IDebugFindSymbolEvent2_INTERFACE_DEFINED__

/* interface IDebugFindSymbolEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugFindSymbolEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4072ae37-3739-43c9-ac88-ca2ea79ed32b")
    IDebugFindSymbolEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SearchWithPath( 
            /* [in] */ LPCOLESTR pszSymbolSearchURL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugFindSymbolEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugFindSymbolEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugFindSymbolEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugFindSymbolEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SearchWithPath )( 
            IDebugFindSymbolEvent2 * This,
            /* [in] */ LPCOLESTR pszSymbolSearchURL);
        
        END_INTERFACE
    } IDebugFindSymbolEvent2Vtbl;

    interface IDebugFindSymbolEvent2
    {
        CONST_VTBL struct IDebugFindSymbolEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugFindSymbolEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugFindSymbolEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugFindSymbolEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugFindSymbolEvent2_SearchWithPath(This,pszSymbolSearchURL)	\
    (This)->lpVtbl -> SearchWithPath(This,pszSymbolSearchURL)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugFindSymbolEvent2_SearchWithPath_Proxy( 
    IDebugFindSymbolEvent2 * This,
    /* [in] */ LPCOLESTR pszSymbolSearchURL);


void __RPC_STUB IDebugFindSymbolEvent2_SearchWithPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugFindSymbolEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugNoSymbolsEvent2_INTERFACE_DEFINED__
#define __IDebugNoSymbolsEvent2_INTERFACE_DEFINED__

/* interface IDebugNoSymbolsEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugNoSymbolsEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3ad4fb48-647e-4b03-9c1e-52754e80c880")
    IDebugNoSymbolsEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugNoSymbolsEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugNoSymbolsEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugNoSymbolsEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugNoSymbolsEvent2 * This);
        
        END_INTERFACE
    } IDebugNoSymbolsEvent2Vtbl;

    interface IDebugNoSymbolsEvent2
    {
        CONST_VTBL struct IDebugNoSymbolsEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugNoSymbolsEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugNoSymbolsEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugNoSymbolsEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugNoSymbolsEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugProgramNameChangedEvent2_INTERFACE_DEFINED__
#define __IDebugProgramNameChangedEvent2_INTERFACE_DEFINED__

/* interface IDebugProgramNameChangedEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProgramNameChangedEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e05c2dfd-59d5-46d3-a71c-5d07665d85af")
    IDebugProgramNameChangedEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugProgramNameChangedEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProgramNameChangedEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProgramNameChangedEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProgramNameChangedEvent2 * This);
        
        END_INTERFACE
    } IDebugProgramNameChangedEvent2Vtbl;

    interface IDebugProgramNameChangedEvent2
    {
        CONST_VTBL struct IDebugProgramNameChangedEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProgramNameChangedEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProgramNameChangedEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProgramNameChangedEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugProgramNameChangedEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugThreadNameChangedEvent2_INTERFACE_DEFINED__
#define __IDebugThreadNameChangedEvent2_INTERFACE_DEFINED__

/* interface IDebugThreadNameChangedEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugThreadNameChangedEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1ef4ef78-2c44-4b7a-8473-8f4357611729")
    IDebugThreadNameChangedEvent2 : public IUnknown
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugThreadNameChangedEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugThreadNameChangedEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugThreadNameChangedEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugThreadNameChangedEvent2 * This);
        
        END_INTERFACE
    } IDebugThreadNameChangedEvent2Vtbl;

    interface IDebugThreadNameChangedEvent2
    {
        CONST_VTBL struct IDebugThreadNameChangedEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugThreadNameChangedEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugThreadNameChangedEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugThreadNameChangedEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugThreadNameChangedEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugMessageEvent2_INTERFACE_DEFINED__
#define __IDebugMessageEvent2_INTERFACE_DEFINED__

/* interface IDebugMessageEvent2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugMessageEvent2_0001
    {	MT_OUTPUTSTRING	= 0x1,
	MT_MESSAGEBOX	= 0x2
    } ;
typedef DWORD MESSAGETYPE;


EXTERN_C const IID IID_IDebugMessageEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3bdb28cf-dbd2-4d24-af03-01072b67eb9e")
    IDebugMessageEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMessage( 
            /* [out] */ MESSAGETYPE *pMessageType,
            /* [out] */ BSTR *pbstrMessage,
            /* [out] */ DWORD *pdwType,
            /* [out] */ BSTR *pbstrHelpFileName,
            /* [out] */ DWORD *pdwHelpId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetResponse( 
            /* [in] */ DWORD dwResponse) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMessageEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMessageEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMessageEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMessageEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMessage )( 
            IDebugMessageEvent2 * This,
            /* [out] */ MESSAGETYPE *pMessageType,
            /* [out] */ BSTR *pbstrMessage,
            /* [out] */ DWORD *pdwType,
            /* [out] */ BSTR *pbstrHelpFileName,
            /* [out] */ DWORD *pdwHelpId);
        
        HRESULT ( STDMETHODCALLTYPE *SetResponse )( 
            IDebugMessageEvent2 * This,
            /* [in] */ DWORD dwResponse);
        
        END_INTERFACE
    } IDebugMessageEvent2Vtbl;

    interface IDebugMessageEvent2
    {
        CONST_VTBL struct IDebugMessageEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMessageEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMessageEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMessageEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMessageEvent2_GetMessage(This,pMessageType,pbstrMessage,pdwType,pbstrHelpFileName,pdwHelpId)	\
    (This)->lpVtbl -> GetMessage(This,pMessageType,pbstrMessage,pdwType,pbstrHelpFileName,pdwHelpId)

#define IDebugMessageEvent2_SetResponse(This,dwResponse)	\
    (This)->lpVtbl -> SetResponse(This,dwResponse)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMessageEvent2_GetMessage_Proxy( 
    IDebugMessageEvent2 * This,
    /* [out] */ MESSAGETYPE *pMessageType,
    /* [out] */ BSTR *pbstrMessage,
    /* [out] */ DWORD *pdwType,
    /* [out] */ BSTR *pbstrHelpFileName,
    /* [out] */ DWORD *pdwHelpId);


void __RPC_STUB IDebugMessageEvent2_GetMessage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMessageEvent2_SetResponse_Proxy( 
    IDebugMessageEvent2 * This,
    /* [in] */ DWORD dwResponse);


void __RPC_STUB IDebugMessageEvent2_SetResponse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMessageEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugActivateDocumentEvent2_INTERFACE_DEFINED__
#define __IDebugActivateDocumentEvent2_INTERFACE_DEFINED__

/* interface IDebugActivateDocumentEvent2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugActivateDocumentEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("58f36c3d-7d07-4eba-a041-62f63e188037")
    IDebugActivateDocumentEvent2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDocument( 
            /* [out] */ IDebugDocument2 **ppDoc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocumentContext( 
            /* [out] */ IDebugDocumentContext2 **ppDocContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugActivateDocumentEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugActivateDocumentEvent2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugActivateDocumentEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugActivateDocumentEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocument )( 
            IDebugActivateDocumentEvent2 * This,
            /* [out] */ IDebugDocument2 **ppDoc);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentContext )( 
            IDebugActivateDocumentEvent2 * This,
            /* [out] */ IDebugDocumentContext2 **ppDocContext);
        
        END_INTERFACE
    } IDebugActivateDocumentEvent2Vtbl;

    interface IDebugActivateDocumentEvent2
    {
        CONST_VTBL struct IDebugActivateDocumentEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugActivateDocumentEvent2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugActivateDocumentEvent2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugActivateDocumentEvent2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugActivateDocumentEvent2_GetDocument(This,ppDoc)	\
    (This)->lpVtbl -> GetDocument(This,ppDoc)

#define IDebugActivateDocumentEvent2_GetDocumentContext(This,ppDocContext)	\
    (This)->lpVtbl -> GetDocumentContext(This,ppDocContext)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugActivateDocumentEvent2_GetDocument_Proxy( 
    IDebugActivateDocumentEvent2 * This,
    /* [out] */ IDebugDocument2 **ppDoc);


void __RPC_STUB IDebugActivateDocumentEvent2_GetDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugActivateDocumentEvent2_GetDocumentContext_Proxy( 
    IDebugActivateDocumentEvent2 * This,
    /* [out] */ IDebugDocumentContext2 **ppDocContext);


void __RPC_STUB IDebugActivateDocumentEvent2_GetDocumentContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugActivateDocumentEvent2_INTERFACE_DEFINED__ */


#ifndef __IDebugProcess2_INTERFACE_DEFINED__
#define __IDebugProcess2_INTERFACE_DEFINED__

/* interface IDebugProcess2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugProcess2_0001
    {	PIFLAG_SYSTEM_PROCESS	= 0x1,
	PIFLAG_DEBUGGER_ATTACHED	= 0x2
    } ;
typedef DWORD PROCESS_INFO_FLAGS;


enum __MIDL_IDebugProcess2_0002
    {	PIF_FILE_NAME	= 0x1,
	PIF_BASE_NAME	= 0x2,
	PIF_TITLE	= 0x4,
	PIF_PROCESS_ID	= 0x8,
	PIF_SESSION_ID	= 0x10,
	PIF_ATTACHED_SESSION_NAME	= 0x20,
	PIF_CREATION_TIME	= 0x40,
	PIF_FLAGS	= 0x80,
	PIF_ALL	= 0xff
    } ;
typedef DWORD PROCESS_INFO_FIELDS;

typedef struct tagPROCESS_INFO
    {
    PROCESS_INFO_FIELDS Fields;
    BSTR bstrFileName;
    BSTR bstrBaseName;
    BSTR bstrTitle;
    AD_PROCESS_ID ProcessId;
    DWORD dwSessionId;
    BSTR bstrAttachedSessionName;
    FILETIME CreationTime;
    PROCESS_INFO_FLAGS Flags;
    } 	PROCESS_INFO;


EXTERN_C const IID IID_IDebugProcess2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("43286fea-6997-4543-803e-60a20c473de5")
    IDebugProcess2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ PROCESS_INFO_FIELDS Fields,
            /* [out] */ PROCESS_INFO *pProcessInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumPrograms( 
            /* [out] */ IEnumDebugPrograms2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [in] */ GETNAME_TYPE gnType,
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMachine( 
            /* [out] */ IDebugMachine2 **ppMachine) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Terminate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Attach( 
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [size_is][in] */ GUID *rgguidSpecificEngines,
            /* [in] */ DWORD celtSpecificEngines,
            /* [length_is][size_is][out] */ HRESULT *rghrEngineAttach) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanDetach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPhysicalProcessId( 
            /* [out] */ AD_PROCESS_ID *pProcessId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProcessId( 
            /* [out] */ GUID *pguidProcessId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttachedSessionName( 
            /* [out] */ BSTR *pbstrSessionName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumThreads( 
            /* [out] */ IEnumDebugThreads2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CauseBreak( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPort( 
            /* [out] */ IDebugPort2 **ppPort) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugProcess2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProcess2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProcess2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProcess2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugProcess2 * This,
            /* [in] */ PROCESS_INFO_FIELDS Fields,
            /* [out] */ PROCESS_INFO *pProcessInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPrograms )( 
            IDebugProcess2 * This,
            /* [out] */ IEnumDebugPrograms2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugProcess2 * This,
            /* [in] */ GETNAME_TYPE gnType,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetMachine )( 
            IDebugProcess2 * This,
            /* [out] */ IDebugMachine2 **ppMachine);
        
        HRESULT ( STDMETHODCALLTYPE *Terminate )( 
            IDebugProcess2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Attach )( 
            IDebugProcess2 * This,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [size_is][in] */ GUID *rgguidSpecificEngines,
            /* [in] */ DWORD celtSpecificEngines,
            /* [length_is][size_is][out] */ HRESULT *rghrEngineAttach);
        
        HRESULT ( STDMETHODCALLTYPE *CanDetach )( 
            IDebugProcess2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Detach )( 
            IDebugProcess2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPhysicalProcessId )( 
            IDebugProcess2 * This,
            /* [out] */ AD_PROCESS_ID *pProcessId);
        
        HRESULT ( STDMETHODCALLTYPE *GetProcessId )( 
            IDebugProcess2 * This,
            /* [out] */ GUID *pguidProcessId);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttachedSessionName )( 
            IDebugProcess2 * This,
            /* [out] */ BSTR *pbstrSessionName);
        
        HRESULT ( STDMETHODCALLTYPE *EnumThreads )( 
            IDebugProcess2 * This,
            /* [out] */ IEnumDebugThreads2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *CauseBreak )( 
            IDebugProcess2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPort )( 
            IDebugProcess2 * This,
            /* [out] */ IDebugPort2 **ppPort);
        
        END_INTERFACE
    } IDebugProcess2Vtbl;

    interface IDebugProcess2
    {
        CONST_VTBL struct IDebugProcess2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProcess2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProcess2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProcess2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugProcess2_GetInfo(This,Fields,pProcessInfo)	\
    (This)->lpVtbl -> GetInfo(This,Fields,pProcessInfo)

#define IDebugProcess2_EnumPrograms(This,ppEnum)	\
    (This)->lpVtbl -> EnumPrograms(This,ppEnum)

#define IDebugProcess2_GetName(This,gnType,pbstrName)	\
    (This)->lpVtbl -> GetName(This,gnType,pbstrName)

#define IDebugProcess2_GetMachine(This,ppMachine)	\
    (This)->lpVtbl -> GetMachine(This,ppMachine)

#define IDebugProcess2_Terminate(This)	\
    (This)->lpVtbl -> Terminate(This)

#define IDebugProcess2_Attach(This,pCallback,rgguidSpecificEngines,celtSpecificEngines,rghrEngineAttach)	\
    (This)->lpVtbl -> Attach(This,pCallback,rgguidSpecificEngines,celtSpecificEngines,rghrEngineAttach)

#define IDebugProcess2_CanDetach(This)	\
    (This)->lpVtbl -> CanDetach(This)

#define IDebugProcess2_Detach(This)	\
    (This)->lpVtbl -> Detach(This)

#define IDebugProcess2_GetPhysicalProcessId(This,pProcessId)	\
    (This)->lpVtbl -> GetPhysicalProcessId(This,pProcessId)

#define IDebugProcess2_GetProcessId(This,pguidProcessId)	\
    (This)->lpVtbl -> GetProcessId(This,pguidProcessId)

#define IDebugProcess2_GetAttachedSessionName(This,pbstrSessionName)	\
    (This)->lpVtbl -> GetAttachedSessionName(This,pbstrSessionName)

#define IDebugProcess2_EnumThreads(This,ppEnum)	\
    (This)->lpVtbl -> EnumThreads(This,ppEnum)

#define IDebugProcess2_CauseBreak(This)	\
    (This)->lpVtbl -> CauseBreak(This)

#define IDebugProcess2_GetPort(This,ppPort)	\
    (This)->lpVtbl -> GetPort(This,ppPort)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugProcess2_GetInfo_Proxy( 
    IDebugProcess2 * This,
    /* [in] */ PROCESS_INFO_FIELDS Fields,
    /* [out] */ PROCESS_INFO *pProcessInfo);


void __RPC_STUB IDebugProcess2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_EnumPrograms_Proxy( 
    IDebugProcess2 * This,
    /* [out] */ IEnumDebugPrograms2 **ppEnum);


void __RPC_STUB IDebugProcess2_EnumPrograms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_GetName_Proxy( 
    IDebugProcess2 * This,
    /* [in] */ GETNAME_TYPE gnType,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugProcess2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_GetMachine_Proxy( 
    IDebugProcess2 * This,
    /* [out] */ IDebugMachine2 **ppMachine);


void __RPC_STUB IDebugProcess2_GetMachine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_Terminate_Proxy( 
    IDebugProcess2 * This);


void __RPC_STUB IDebugProcess2_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_Attach_Proxy( 
    IDebugProcess2 * This,
    /* [in] */ IDebugEventCallback2 *pCallback,
    /* [size_is][in] */ GUID *rgguidSpecificEngines,
    /* [in] */ DWORD celtSpecificEngines,
    /* [length_is][size_is][out] */ HRESULT *rghrEngineAttach);


void __RPC_STUB IDebugProcess2_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_CanDetach_Proxy( 
    IDebugProcess2 * This);


void __RPC_STUB IDebugProcess2_CanDetach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_Detach_Proxy( 
    IDebugProcess2 * This);


void __RPC_STUB IDebugProcess2_Detach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_GetPhysicalProcessId_Proxy( 
    IDebugProcess2 * This,
    /* [out] */ AD_PROCESS_ID *pProcessId);


void __RPC_STUB IDebugProcess2_GetPhysicalProcessId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_GetProcessId_Proxy( 
    IDebugProcess2 * This,
    /* [out] */ GUID *pguidProcessId);


void __RPC_STUB IDebugProcess2_GetProcessId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_GetAttachedSessionName_Proxy( 
    IDebugProcess2 * This,
    /* [out] */ BSTR *pbstrSessionName);


void __RPC_STUB IDebugProcess2_GetAttachedSessionName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_EnumThreads_Proxy( 
    IDebugProcess2 * This,
    /* [out] */ IEnumDebugThreads2 **ppEnum);


void __RPC_STUB IDebugProcess2_EnumThreads_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_CauseBreak_Proxy( 
    IDebugProcess2 * This);


void __RPC_STUB IDebugProcess2_CauseBreak_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProcess2_GetPort_Proxy( 
    IDebugProcess2 * This,
    /* [out] */ IDebugPort2 **ppPort);


void __RPC_STUB IDebugProcess2_GetPort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugProcess2_INTERFACE_DEFINED__ */


#ifndef __IDebugProgram2_INTERFACE_DEFINED__
#define __IDebugProgram2_INTERFACE_DEFINED__

/* interface IDebugProgram2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugProgram2_0001
    {	STEP_INTO	= 0,
	STEP_OVER	= STEP_INTO + 1,
	STEP_OUT	= STEP_OVER + 1,
	STEP_BACKWARDS	= STEP_OUT + 1
    } ;
typedef DWORD STEPKIND;


enum __MIDL_IDebugProgram2_0002
    {	STEP_STATEMENT	= 0,
	STEP_LINE	= STEP_STATEMENT + 1,
	STEP_INSTRUCTION	= STEP_LINE + 1
    } ;
typedef DWORD STEPUNIT;


enum __MIDL_IDebugProgram2_0003
    {	DSS_HUGE	= 0x10000000,
	DSS_FUNCTION	= 0x1,
	DSS_MODULE	= DSS_HUGE | 0x2,
	DSS_ALL	= DSS_HUGE | 0x3
    } ;
typedef DWORD DISASSEMBLY_STREAM_SCOPE;

typedef struct tagCODE_PATH
    {
    BSTR bstrName;
    IDebugCodeContext2 *pCode;
    } 	CODE_PATH;


enum __MIDL_IDebugProgram2_0004
    {	DUMP_MINIDUMP	= 0,
	DUMP_FULLDUMP	= DUMP_MINIDUMP + 1
    } ;
typedef DWORD DUMPTYPE;


EXTERN_C const IID IID_IDebugProgram2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("69d172ef-f2c4-44e1-89f7-c86231e706e9")
    IDebugProgram2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumThreads( 
            /* [out] */ IEnumDebugThreads2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProcess( 
            /* [out] */ IDebugProcess2 **ppProcess) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Terminate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Attach( 
            /* [in] */ IDebugEventCallback2 *pCallback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanDetach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProgramId( 
            /* [out] */ GUID *pguidProgramId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDebugProperty( 
            /* [out] */ IDebugProperty2 **ppProperty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Execute( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Continue( 
            /* [in] */ IDebugThread2 *pThread) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Step( 
            /* [in] */ IDebugThread2 *pThread,
            /* [in] */ STEPKIND sk,
            /* [in] */ STEPUNIT step) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CauseBreak( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEngineInfo( 
            /* [out] */ BSTR *pbstrEngine,
            /* [out] */ GUID *pguidEngine) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumCodeContexts( 
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMemoryBytes( 
            /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDisassemblyStream( 
            /* [in] */ DISASSEMBLY_STREAM_SCOPE dwScope,
            /* [in] */ IDebugCodeContext2 *pCodeContext,
            /* [out] */ IDebugDisassemblyStream2 **ppDisassemblyStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumModules( 
            /* [out] */ IEnumDebugModules2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetENCUpdate( 
            /* [out] */ IDebugENCUpdate **ppUpdate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumCodePaths( 
            /* [full][in] */ LPCOLESTR pszHint,
            /* [in] */ IDebugCodeContext2 *pStart,
            /* [in] */ IDebugStackFrame2 *pFrame,
            /* [in] */ BOOL fSource,
            /* [out] */ IEnumCodePaths2 **ppEnum,
            /* [out] */ IDebugCodeContext2 **ppSafety) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteDump( 
            /* [in] */ DUMPTYPE DumpType,
            /* [in] */ LPCOLESTR pszDumpUrl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugProgram2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProgram2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProgram2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProgram2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumThreads )( 
            IDebugProgram2 * This,
            /* [out] */ IEnumDebugThreads2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugProgram2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetProcess )( 
            IDebugProgram2 * This,
            /* [out] */ IDebugProcess2 **ppProcess);
        
        HRESULT ( STDMETHODCALLTYPE *Terminate )( 
            IDebugProgram2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Attach )( 
            IDebugProgram2 * This,
            /* [in] */ IDebugEventCallback2 *pCallback);
        
        HRESULT ( STDMETHODCALLTYPE *CanDetach )( 
            IDebugProgram2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Detach )( 
            IDebugProgram2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetProgramId )( 
            IDebugProgram2 * This,
            /* [out] */ GUID *pguidProgramId);
        
        HRESULT ( STDMETHODCALLTYPE *GetDebugProperty )( 
            IDebugProgram2 * This,
            /* [out] */ IDebugProperty2 **ppProperty);
        
        HRESULT ( STDMETHODCALLTYPE *Execute )( 
            IDebugProgram2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Continue )( 
            IDebugProgram2 * This,
            /* [in] */ IDebugThread2 *pThread);
        
        HRESULT ( STDMETHODCALLTYPE *Step )( 
            IDebugProgram2 * This,
            /* [in] */ IDebugThread2 *pThread,
            /* [in] */ STEPKIND sk,
            /* [in] */ STEPUNIT step);
        
        HRESULT ( STDMETHODCALLTYPE *CauseBreak )( 
            IDebugProgram2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEngineInfo )( 
            IDebugProgram2 * This,
            /* [out] */ BSTR *pbstrEngine,
            /* [out] */ GUID *pguidEngine);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCodeContexts )( 
            IDebugProgram2 * This,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetMemoryBytes )( 
            IDebugProgram2 * This,
            /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes);
        
        HRESULT ( STDMETHODCALLTYPE *GetDisassemblyStream )( 
            IDebugProgram2 * This,
            /* [in] */ DISASSEMBLY_STREAM_SCOPE dwScope,
            /* [in] */ IDebugCodeContext2 *pCodeContext,
            /* [out] */ IDebugDisassemblyStream2 **ppDisassemblyStream);
        
        HRESULT ( STDMETHODCALLTYPE *EnumModules )( 
            IDebugProgram2 * This,
            /* [out] */ IEnumDebugModules2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetENCUpdate )( 
            IDebugProgram2 * This,
            /* [out] */ IDebugENCUpdate **ppUpdate);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCodePaths )( 
            IDebugProgram2 * This,
            /* [full][in] */ LPCOLESTR pszHint,
            /* [in] */ IDebugCodeContext2 *pStart,
            /* [in] */ IDebugStackFrame2 *pFrame,
            /* [in] */ BOOL fSource,
            /* [out] */ IEnumCodePaths2 **ppEnum,
            /* [out] */ IDebugCodeContext2 **ppSafety);
        
        HRESULT ( STDMETHODCALLTYPE *WriteDump )( 
            IDebugProgram2 * This,
            /* [in] */ DUMPTYPE DumpType,
            /* [in] */ LPCOLESTR pszDumpUrl);
        
        END_INTERFACE
    } IDebugProgram2Vtbl;

    interface IDebugProgram2
    {
        CONST_VTBL struct IDebugProgram2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProgram2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProgram2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProgram2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugProgram2_EnumThreads(This,ppEnum)	\
    (This)->lpVtbl -> EnumThreads(This,ppEnum)

#define IDebugProgram2_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IDebugProgram2_GetProcess(This,ppProcess)	\
    (This)->lpVtbl -> GetProcess(This,ppProcess)

#define IDebugProgram2_Terminate(This)	\
    (This)->lpVtbl -> Terminate(This)

#define IDebugProgram2_Attach(This,pCallback)	\
    (This)->lpVtbl -> Attach(This,pCallback)

#define IDebugProgram2_CanDetach(This)	\
    (This)->lpVtbl -> CanDetach(This)

#define IDebugProgram2_Detach(This)	\
    (This)->lpVtbl -> Detach(This)

#define IDebugProgram2_GetProgramId(This,pguidProgramId)	\
    (This)->lpVtbl -> GetProgramId(This,pguidProgramId)

#define IDebugProgram2_GetDebugProperty(This,ppProperty)	\
    (This)->lpVtbl -> GetDebugProperty(This,ppProperty)

#define IDebugProgram2_Execute(This)	\
    (This)->lpVtbl -> Execute(This)

#define IDebugProgram2_Continue(This,pThread)	\
    (This)->lpVtbl -> Continue(This,pThread)

#define IDebugProgram2_Step(This,pThread,sk,step)	\
    (This)->lpVtbl -> Step(This,pThread,sk,step)

#define IDebugProgram2_CauseBreak(This)	\
    (This)->lpVtbl -> CauseBreak(This)

#define IDebugProgram2_GetEngineInfo(This,pbstrEngine,pguidEngine)	\
    (This)->lpVtbl -> GetEngineInfo(This,pbstrEngine,pguidEngine)

#define IDebugProgram2_EnumCodeContexts(This,pDocPos,ppEnum)	\
    (This)->lpVtbl -> EnumCodeContexts(This,pDocPos,ppEnum)

#define IDebugProgram2_GetMemoryBytes(This,ppMemoryBytes)	\
    (This)->lpVtbl -> GetMemoryBytes(This,ppMemoryBytes)

#define IDebugProgram2_GetDisassemblyStream(This,dwScope,pCodeContext,ppDisassemblyStream)	\
    (This)->lpVtbl -> GetDisassemblyStream(This,dwScope,pCodeContext,ppDisassemblyStream)

#define IDebugProgram2_EnumModules(This,ppEnum)	\
    (This)->lpVtbl -> EnumModules(This,ppEnum)

#define IDebugProgram2_GetENCUpdate(This,ppUpdate)	\
    (This)->lpVtbl -> GetENCUpdate(This,ppUpdate)

#define IDebugProgram2_EnumCodePaths(This,pszHint,pStart,pFrame,fSource,ppEnum,ppSafety)	\
    (This)->lpVtbl -> EnumCodePaths(This,pszHint,pStart,pFrame,fSource,ppEnum,ppSafety)

#define IDebugProgram2_WriteDump(This,DumpType,pszDumpUrl)	\
    (This)->lpVtbl -> WriteDump(This,DumpType,pszDumpUrl)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugProgram2_EnumThreads_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ IEnumDebugThreads2 **ppEnum);


void __RPC_STUB IDebugProgram2_EnumThreads_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_GetName_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugProgram2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_GetProcess_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ IDebugProcess2 **ppProcess);


void __RPC_STUB IDebugProgram2_GetProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_Terminate_Proxy( 
    IDebugProgram2 * This);


void __RPC_STUB IDebugProgram2_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_Attach_Proxy( 
    IDebugProgram2 * This,
    /* [in] */ IDebugEventCallback2 *pCallback);


void __RPC_STUB IDebugProgram2_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_CanDetach_Proxy( 
    IDebugProgram2 * This);


void __RPC_STUB IDebugProgram2_CanDetach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_Detach_Proxy( 
    IDebugProgram2 * This);


void __RPC_STUB IDebugProgram2_Detach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_GetProgramId_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ GUID *pguidProgramId);


void __RPC_STUB IDebugProgram2_GetProgramId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_GetDebugProperty_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ IDebugProperty2 **ppProperty);


void __RPC_STUB IDebugProgram2_GetDebugProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_Execute_Proxy( 
    IDebugProgram2 * This);


void __RPC_STUB IDebugProgram2_Execute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_Continue_Proxy( 
    IDebugProgram2 * This,
    /* [in] */ IDebugThread2 *pThread);


void __RPC_STUB IDebugProgram2_Continue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_Step_Proxy( 
    IDebugProgram2 * This,
    /* [in] */ IDebugThread2 *pThread,
    /* [in] */ STEPKIND sk,
    /* [in] */ STEPUNIT step);


void __RPC_STUB IDebugProgram2_Step_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_CauseBreak_Proxy( 
    IDebugProgram2 * This);


void __RPC_STUB IDebugProgram2_CauseBreak_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_GetEngineInfo_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ BSTR *pbstrEngine,
    /* [out] */ GUID *pguidEngine);


void __RPC_STUB IDebugProgram2_GetEngineInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_EnumCodeContexts_Proxy( 
    IDebugProgram2 * This,
    /* [in] */ IDebugDocumentPosition2 *pDocPos,
    /* [out] */ IEnumDebugCodeContexts2 **ppEnum);


void __RPC_STUB IDebugProgram2_EnumCodeContexts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_GetMemoryBytes_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes);


void __RPC_STUB IDebugProgram2_GetMemoryBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_GetDisassemblyStream_Proxy( 
    IDebugProgram2 * This,
    /* [in] */ DISASSEMBLY_STREAM_SCOPE dwScope,
    /* [in] */ IDebugCodeContext2 *pCodeContext,
    /* [out] */ IDebugDisassemblyStream2 **ppDisassemblyStream);


void __RPC_STUB IDebugProgram2_GetDisassemblyStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_EnumModules_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ IEnumDebugModules2 **ppEnum);


void __RPC_STUB IDebugProgram2_EnumModules_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_GetENCUpdate_Proxy( 
    IDebugProgram2 * This,
    /* [out] */ IDebugENCUpdate **ppUpdate);


void __RPC_STUB IDebugProgram2_GetENCUpdate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_EnumCodePaths_Proxy( 
    IDebugProgram2 * This,
    /* [full][in] */ LPCOLESTR pszHint,
    /* [in] */ IDebugCodeContext2 *pStart,
    /* [in] */ IDebugStackFrame2 *pFrame,
    /* [in] */ BOOL fSource,
    /* [out] */ IEnumCodePaths2 **ppEnum,
    /* [out] */ IDebugCodeContext2 **ppSafety);


void __RPC_STUB IDebugProgram2_EnumCodePaths_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgram2_WriteDump_Proxy( 
    IDebugProgram2 * This,
    /* [in] */ DUMPTYPE DumpType,
    /* [in] */ LPCOLESTR pszDumpUrl);


void __RPC_STUB IDebugProgram2_WriteDump_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugProgram2_INTERFACE_DEFINED__ */


#ifndef __IDebugEngineProgram2_INTERFACE_DEFINED__
#define __IDebugEngineProgram2_INTERFACE_DEFINED__

/* interface IDebugEngineProgram2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugEngineProgram2_0001
    {	WATCHFOREVAL_LEAF_PROGRAM	= 0x10000000
    } ;

EXTERN_C const IID IID_IDebugEngineProgram2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7ce3e768-654d-4ba7-8d95-cdaac642b141")
    IDebugEngineProgram2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WatchForThreadStep( 
            /* [in] */ IDebugProgram2 *pOriginatingProgram,
            /* [in] */ DWORD dwTid,
            /* [in] */ BOOL fWatch,
            /* [in] */ DWORD dwFrame) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WatchForExpressionEvaluationOnThread( 
            /* [in] */ IDebugProgram2 *pOriginatingProgram,
            /* [in] */ DWORD dwTid,
            /* [in] */ DWORD dwEvalFlags,
            /* [in] */ IDebugEventCallback2 *pExprCallback,
            /* [in] */ BOOL fWatch) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEngineProgram2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEngineProgram2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEngineProgram2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEngineProgram2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IDebugEngineProgram2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *WatchForThreadStep )( 
            IDebugEngineProgram2 * This,
            /* [in] */ IDebugProgram2 *pOriginatingProgram,
            /* [in] */ DWORD dwTid,
            /* [in] */ BOOL fWatch,
            /* [in] */ DWORD dwFrame);
        
        HRESULT ( STDMETHODCALLTYPE *WatchForExpressionEvaluationOnThread )( 
            IDebugEngineProgram2 * This,
            /* [in] */ IDebugProgram2 *pOriginatingProgram,
            /* [in] */ DWORD dwTid,
            /* [in] */ DWORD dwEvalFlags,
            /* [in] */ IDebugEventCallback2 *pExprCallback,
            /* [in] */ BOOL fWatch);
        
        END_INTERFACE
    } IDebugEngineProgram2Vtbl;

    interface IDebugEngineProgram2
    {
        CONST_VTBL struct IDebugEngineProgram2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEngineProgram2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEngineProgram2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEngineProgram2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEngineProgram2_Stop(This)	\
    (This)->lpVtbl -> Stop(This)

#define IDebugEngineProgram2_WatchForThreadStep(This,pOriginatingProgram,dwTid,fWatch,dwFrame)	\
    (This)->lpVtbl -> WatchForThreadStep(This,pOriginatingProgram,dwTid,fWatch,dwFrame)

#define IDebugEngineProgram2_WatchForExpressionEvaluationOnThread(This,pOriginatingProgram,dwTid,dwEvalFlags,pExprCallback,fWatch)	\
    (This)->lpVtbl -> WatchForExpressionEvaluationOnThread(This,pOriginatingProgram,dwTid,dwEvalFlags,pExprCallback,fWatch)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEngineProgram2_Stop_Proxy( 
    IDebugEngineProgram2 * This);


void __RPC_STUB IDebugEngineProgram2_Stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngineProgram2_WatchForThreadStep_Proxy( 
    IDebugEngineProgram2 * This,
    /* [in] */ IDebugProgram2 *pOriginatingProgram,
    /* [in] */ DWORD dwTid,
    /* [in] */ BOOL fWatch,
    /* [in] */ DWORD dwFrame);


void __RPC_STUB IDebugEngineProgram2_WatchForThreadStep_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEngineProgram2_WatchForExpressionEvaluationOnThread_Proxy( 
    IDebugEngineProgram2 * This,
    /* [in] */ IDebugProgram2 *pOriginatingProgram,
    /* [in] */ DWORD dwTid,
    /* [in] */ DWORD dwEvalFlags,
    /* [in] */ IDebugEventCallback2 *pExprCallback,
    /* [in] */ BOOL fWatch);


void __RPC_STUB IDebugEngineProgram2_WatchForExpressionEvaluationOnThread_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEngineProgram2_INTERFACE_DEFINED__ */


#ifndef __IDebugProgramHost2_INTERFACE_DEFINED__
#define __IDebugProgramHost2_INTERFACE_DEFINED__

/* interface IDebugProgramHost2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProgramHost2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c99d588f-778c-44fe-8b2e-40124a738891")
    IDebugProgramHost2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetHostName( 
            /* [in] */ DWORD dwType,
            /* [out] */ BSTR *pbstrHostName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHostId( 
            /* [out] */ AD_PROCESS_ID *pProcessId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHostMachineName( 
            /* [out] */ BSTR *pbstrHostMachineName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugProgramHost2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProgramHost2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProgramHost2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProgramHost2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostName )( 
            IDebugProgramHost2 * This,
            /* [in] */ DWORD dwType,
            /* [out] */ BSTR *pbstrHostName);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostId )( 
            IDebugProgramHost2 * This,
            /* [out] */ AD_PROCESS_ID *pProcessId);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostMachineName )( 
            IDebugProgramHost2 * This,
            /* [out] */ BSTR *pbstrHostMachineName);
        
        END_INTERFACE
    } IDebugProgramHost2Vtbl;

    interface IDebugProgramHost2
    {
        CONST_VTBL struct IDebugProgramHost2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProgramHost2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProgramHost2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProgramHost2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugProgramHost2_GetHostName(This,dwType,pbstrHostName)	\
    (This)->lpVtbl -> GetHostName(This,dwType,pbstrHostName)

#define IDebugProgramHost2_GetHostId(This,pProcessId)	\
    (This)->lpVtbl -> GetHostId(This,pProcessId)

#define IDebugProgramHost2_GetHostMachineName(This,pbstrHostMachineName)	\
    (This)->lpVtbl -> GetHostMachineName(This,pbstrHostMachineName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugProgramHost2_GetHostName_Proxy( 
    IDebugProgramHost2 * This,
    /* [in] */ DWORD dwType,
    /* [out] */ BSTR *pbstrHostName);


void __RPC_STUB IDebugProgramHost2_GetHostName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramHost2_GetHostId_Proxy( 
    IDebugProgramHost2 * This,
    /* [out] */ AD_PROCESS_ID *pProcessId);


void __RPC_STUB IDebugProgramHost2_GetHostId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramHost2_GetHostMachineName_Proxy( 
    IDebugProgramHost2 * This,
    /* [out] */ BSTR *pbstrHostMachineName);


void __RPC_STUB IDebugProgramHost2_GetHostMachineName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugProgramHost2_INTERFACE_DEFINED__ */


#ifndef __IDebugProgramNode2_INTERFACE_DEFINED__
#define __IDebugProgramNode2_INTERFACE_DEFINED__

/* interface IDebugProgramNode2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugProgramNode2_0001
    {	GHN_FRIENDLY_NAME	= 0,
	GHN_FILE_NAME	= GHN_FRIENDLY_NAME + 1
    } ;
typedef DWORD GETHOSTNAME_TYPE;


EXTERN_C const IID IID_IDebugProgramNode2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("426e255c-f1ce-4d02-a931-f9a254bf7f0f")
    IDebugProgramNode2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetProgramName( 
            /* [out] */ BSTR *pbstrProgramName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHostName( 
            /* [in] */ GETHOSTNAME_TYPE dwHostNameType,
            /* [out] */ BSTR *pbstrHostName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHostPid( 
            /* [out] */ AD_PROCESS_ID *pHostProcessId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHostMachineName( 
            /* [out] */ BSTR *pbstrHostMachineName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Attach( 
            /* [in] */ IDebugProgram2 *pMDMProgram,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [in] */ DWORD dwReason) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEngineInfo( 
            /* [out] */ BSTR *pbstrEngine,
            /* [out] */ GUID *pguidEngine) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DetachDebugger( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugProgramNode2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProgramNode2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProgramNode2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProgramNode2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetProgramName )( 
            IDebugProgramNode2 * This,
            /* [out] */ BSTR *pbstrProgramName);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostName )( 
            IDebugProgramNode2 * This,
            /* [in] */ GETHOSTNAME_TYPE dwHostNameType,
            /* [out] */ BSTR *pbstrHostName);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostPid )( 
            IDebugProgramNode2 * This,
            /* [out] */ AD_PROCESS_ID *pHostProcessId);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostMachineName )( 
            IDebugProgramNode2 * This,
            /* [out] */ BSTR *pbstrHostMachineName);
        
        HRESULT ( STDMETHODCALLTYPE *Attach )( 
            IDebugProgramNode2 * This,
            /* [in] */ IDebugProgram2 *pMDMProgram,
            /* [in] */ IDebugEventCallback2 *pCallback,
            /* [in] */ DWORD dwReason);
        
        HRESULT ( STDMETHODCALLTYPE *GetEngineInfo )( 
            IDebugProgramNode2 * This,
            /* [out] */ BSTR *pbstrEngine,
            /* [out] */ GUID *pguidEngine);
        
        HRESULT ( STDMETHODCALLTYPE *DetachDebugger )( 
            IDebugProgramNode2 * This);
        
        END_INTERFACE
    } IDebugProgramNode2Vtbl;

    interface IDebugProgramNode2
    {
        CONST_VTBL struct IDebugProgramNode2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProgramNode2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProgramNode2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProgramNode2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugProgramNode2_GetProgramName(This,pbstrProgramName)	\
    (This)->lpVtbl -> GetProgramName(This,pbstrProgramName)

#define IDebugProgramNode2_GetHostName(This,dwHostNameType,pbstrHostName)	\
    (This)->lpVtbl -> GetHostName(This,dwHostNameType,pbstrHostName)

#define IDebugProgramNode2_GetHostPid(This,pHostProcessId)	\
    (This)->lpVtbl -> GetHostPid(This,pHostProcessId)

#define IDebugProgramNode2_GetHostMachineName(This,pbstrHostMachineName)	\
    (This)->lpVtbl -> GetHostMachineName(This,pbstrHostMachineName)

#define IDebugProgramNode2_Attach(This,pMDMProgram,pCallback,dwReason)	\
    (This)->lpVtbl -> Attach(This,pMDMProgram,pCallback,dwReason)

#define IDebugProgramNode2_GetEngineInfo(This,pbstrEngine,pguidEngine)	\
    (This)->lpVtbl -> GetEngineInfo(This,pbstrEngine,pguidEngine)

#define IDebugProgramNode2_DetachDebugger(This)	\
    (This)->lpVtbl -> DetachDebugger(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugProgramNode2_GetProgramName_Proxy( 
    IDebugProgramNode2 * This,
    /* [out] */ BSTR *pbstrProgramName);


void __RPC_STUB IDebugProgramNode2_GetProgramName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramNode2_GetHostName_Proxy( 
    IDebugProgramNode2 * This,
    /* [in] */ GETHOSTNAME_TYPE dwHostNameType,
    /* [out] */ BSTR *pbstrHostName);


void __RPC_STUB IDebugProgramNode2_GetHostName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramNode2_GetHostPid_Proxy( 
    IDebugProgramNode2 * This,
    /* [out] */ AD_PROCESS_ID *pHostProcessId);


void __RPC_STUB IDebugProgramNode2_GetHostPid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramNode2_GetHostMachineName_Proxy( 
    IDebugProgramNode2 * This,
    /* [out] */ BSTR *pbstrHostMachineName);


void __RPC_STUB IDebugProgramNode2_GetHostMachineName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramNode2_Attach_Proxy( 
    IDebugProgramNode2 * This,
    /* [in] */ IDebugProgram2 *pMDMProgram,
    /* [in] */ IDebugEventCallback2 *pCallback,
    /* [in] */ DWORD dwReason);


void __RPC_STUB IDebugProgramNode2_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramNode2_GetEngineInfo_Proxy( 
    IDebugProgramNode2 * This,
    /* [out] */ BSTR *pbstrEngine,
    /* [out] */ GUID *pguidEngine);


void __RPC_STUB IDebugProgramNode2_GetEngineInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramNode2_DetachDebugger_Proxy( 
    IDebugProgramNode2 * This);


void __RPC_STUB IDebugProgramNode2_DetachDebugger_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugProgramNode2_INTERFACE_DEFINED__ */


#ifndef __IDebugProgramEngines2_INTERFACE_DEFINED__
#define __IDebugProgramEngines2_INTERFACE_DEFINED__

/* interface IDebugProgramEngines2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProgramEngines2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fda24a6b-b142-447d-bbbc-8654a3d84f80")
    IDebugProgramEngines2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumPossibleEngines( 
            /* [in] */ DWORD celtBuffer,
            /* [length_is][size_is][full][out][in] */ GUID *rgguidEngines,
            /* [out][in] */ DWORD *pceltEngines) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEngine( 
            /* [in] */ REFGUID guidEngine) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugProgramEngines2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProgramEngines2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProgramEngines2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProgramEngines2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumPossibleEngines )( 
            IDebugProgramEngines2 * This,
            /* [in] */ DWORD celtBuffer,
            /* [length_is][size_is][full][out][in] */ GUID *rgguidEngines,
            /* [out][in] */ DWORD *pceltEngines);
        
        HRESULT ( STDMETHODCALLTYPE *SetEngine )( 
            IDebugProgramEngines2 * This,
            /* [in] */ REFGUID guidEngine);
        
        END_INTERFACE
    } IDebugProgramEngines2Vtbl;

    interface IDebugProgramEngines2
    {
        CONST_VTBL struct IDebugProgramEngines2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProgramEngines2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProgramEngines2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProgramEngines2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugProgramEngines2_EnumPossibleEngines(This,celtBuffer,rgguidEngines,pceltEngines)	\
    (This)->lpVtbl -> EnumPossibleEngines(This,celtBuffer,rgguidEngines,pceltEngines)

#define IDebugProgramEngines2_SetEngine(This,guidEngine)	\
    (This)->lpVtbl -> SetEngine(This,guidEngine)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugProgramEngines2_EnumPossibleEngines_Proxy( 
    IDebugProgramEngines2 * This,
    /* [in] */ DWORD celtBuffer,
    /* [length_is][size_is][full][out][in] */ GUID *rgguidEngines,
    /* [out][in] */ DWORD *pceltEngines);


void __RPC_STUB IDebugProgramEngines2_EnumPossibleEngines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProgramEngines2_SetEngine_Proxy( 
    IDebugProgramEngines2 * This,
    /* [in] */ REFGUID guidEngine);


void __RPC_STUB IDebugProgramEngines2_SetEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugProgramEngines2_INTERFACE_DEFINED__ */


#ifndef __IDebugThread2_INTERFACE_DEFINED__
#define __IDebugThread2_INTERFACE_DEFINED__

/* interface IDebugThread2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugThread2_0001
    {	THREADSTATE_RUNNING	= 0x1,
	THREADSTATE_STOPPED	= 0x2,
	THREADSTATE_FRESH	= 0x3,
	THREADSTATE_DEAD	= 0x4,
	THREADSTATE_FROZEN	= 0x5
    } ;
typedef DWORD THREADSTATE;


enum __MIDL_IDebugThread2_0002
    {	TPF_ID	= 0x1,
	TPF_SUSPENDCOUNT	= 0x2,
	TPF_STATE	= 0x4,
	TPF_PRIORITY	= 0x8,
	TPF_NAME	= 0x10,
	TPF_LOCATION	= 0x20,
	TPF_ALLFIELDS	= 0xffffffff
    } ;
typedef DWORD THREADPROPERTY_FIELDS;

typedef struct _tagTHREADPROPERTIES
    {
    THREADPROPERTY_FIELDS dwFields;
    DWORD dwThreadId;
    DWORD dwSuspendCount;
    DWORD dwThreadState;
    BSTR bstrPriority;
    BSTR bstrName;
    BSTR bstrLocation;
    } 	THREADPROPERTIES;


enum __MIDL_IDebugThread2_0003
    {	FIF_FUNCNAME	= 0x1,
	FIF_RETURNTYPE	= 0x2,
	FIF_ARGS	= 0x4,
	FIF_LANGUAGE	= 0x8,
	FIF_MODULE	= 0x10,
	FIF_STACKRANGE	= 0x20,
	FIF_FRAME	= 0x40,
	FIF_DEBUGINFO	= 0x80,
	FIF_STALECODE	= 0x100,
	FIF_ANNOTATEDFRAME	= 0x200,
	FIF_DEBUG_MODULEP	= 0x400,
	FIF_FUNCNAME_FORMAT	= 0x1000,
	FIF_FUNCNAME_RETURNTYPE	= 0x2000,
	FIF_FUNCNAME_ARGS	= 0x4000,
	FIF_FUNCNAME_LANGUAGE	= 0x8000,
	FIF_FUNCNAME_MODULE	= 0x10000,
	FIF_FUNCNAME_LINES	= 0x20000,
	FIF_FUNCNAME_OFFSET	= 0x40000,
	FIF_FUNCNAME_ARGS_TYPES	= 0x100000,
	FIF_FUNCNAME_ARGS_NAMES	= 0x200000,
	FIF_FUNCNAME_ARGS_VALUES	= 0x400000,
	FIF_FUNCNAME_ARGS_ALL	= 0x700000,
	FIF_ARGS_TYPES	= 0x1000000,
	FIF_ARGS_NAMES	= 0x2000000,
	FIF_ARGS_VALUES	= 0x4000000,
	FIF_ARGS_ALL	= 0x7000000,
	FIF_ARGS_NOFORMAT	= 0x8000000
    } ;
typedef DWORD FRAMEINFO_FLAGS;

typedef struct tagFRAMEINFO
    {
    FRAMEINFO_FLAGS m_dwValidFields;
    BSTR m_bstrFuncName;
    BSTR m_bstrReturnType;
    BSTR m_bstrArgs;
    BSTR m_bstrLanguage;
    BSTR m_bstrModule;
    UINT64 m_addrMin;
    UINT64 m_addrMax;
    IDebugStackFrame2 *m_pFrame;
    IDebugModule2 *m_pModule;
    BOOL m_fHasDebugInfo;
    BOOL m_fStaleCode;
    BOOL m_fAnnotatedFrame;
    } 	FRAMEINFO;


EXTERN_C const IID IID_IDebugThread2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d5168050-a57a-465c-bea9-974f405eba13")
    IDebugThread2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumFrameInfo( 
            /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ IEnumDebugFrameInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetThreadName( 
            /* [in] */ LPCOLESTR pszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProgram( 
            /* [out] */ IDebugProgram2 **ppProgram) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanSetNextStatement( 
            /* [in] */ IDebugStackFrame2 *pStackFrame,
            /* [in] */ IDebugCodeContext2 *pCodeContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetNextStatement( 
            /* [in] */ IDebugStackFrame2 *pStackFrame,
            /* [in] */ IDebugCodeContext2 *pCodeContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetThreadId( 
            /* [out] */ DWORD *pdwThreadId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Suspend( 
            /* [out] */ DWORD *pdwSuspendCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Resume( 
            /* [out] */ DWORD *pdwSuspendCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetThreadProperties( 
            /* [in] */ THREADPROPERTY_FIELDS dwFields,
            /* [out] */ THREADPROPERTIES *ptp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLogicalThread( 
            /* [in] */ IDebugStackFrame2 *pStackFrame,
            /* [out] */ IDebugLogicalThread2 **ppLogicalThread) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugThread2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugThread2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugThread2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugThread2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFrameInfo )( 
            IDebugThread2 * This,
            /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ IEnumDebugFrameInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugThread2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *SetThreadName )( 
            IDebugThread2 * This,
            /* [in] */ LPCOLESTR pszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetProgram )( 
            IDebugThread2 * This,
            /* [out] */ IDebugProgram2 **ppProgram);
        
        HRESULT ( STDMETHODCALLTYPE *CanSetNextStatement )( 
            IDebugThread2 * This,
            /* [in] */ IDebugStackFrame2 *pStackFrame,
            /* [in] */ IDebugCodeContext2 *pCodeContext);
        
        HRESULT ( STDMETHODCALLTYPE *SetNextStatement )( 
            IDebugThread2 * This,
            /* [in] */ IDebugStackFrame2 *pStackFrame,
            /* [in] */ IDebugCodeContext2 *pCodeContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetThreadId )( 
            IDebugThread2 * This,
            /* [out] */ DWORD *pdwThreadId);
        
        HRESULT ( STDMETHODCALLTYPE *Suspend )( 
            IDebugThread2 * This,
            /* [out] */ DWORD *pdwSuspendCount);
        
        HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IDebugThread2 * This,
            /* [out] */ DWORD *pdwSuspendCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetThreadProperties )( 
            IDebugThread2 * This,
            /* [in] */ THREADPROPERTY_FIELDS dwFields,
            /* [out] */ THREADPROPERTIES *ptp);
        
        HRESULT ( STDMETHODCALLTYPE *GetLogicalThread )( 
            IDebugThread2 * This,
            /* [in] */ IDebugStackFrame2 *pStackFrame,
            /* [out] */ IDebugLogicalThread2 **ppLogicalThread);
        
        END_INTERFACE
    } IDebugThread2Vtbl;

    interface IDebugThread2
    {
        CONST_VTBL struct IDebugThread2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugThread2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugThread2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugThread2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugThread2_EnumFrameInfo(This,dwFieldSpec,nRadix,ppEnum)	\
    (This)->lpVtbl -> EnumFrameInfo(This,dwFieldSpec,nRadix,ppEnum)

#define IDebugThread2_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IDebugThread2_SetThreadName(This,pszName)	\
    (This)->lpVtbl -> SetThreadName(This,pszName)

#define IDebugThread2_GetProgram(This,ppProgram)	\
    (This)->lpVtbl -> GetProgram(This,ppProgram)

#define IDebugThread2_CanSetNextStatement(This,pStackFrame,pCodeContext)	\
    (This)->lpVtbl -> CanSetNextStatement(This,pStackFrame,pCodeContext)

#define IDebugThread2_SetNextStatement(This,pStackFrame,pCodeContext)	\
    (This)->lpVtbl -> SetNextStatement(This,pStackFrame,pCodeContext)

#define IDebugThread2_GetThreadId(This,pdwThreadId)	\
    (This)->lpVtbl -> GetThreadId(This,pdwThreadId)

#define IDebugThread2_Suspend(This,pdwSuspendCount)	\
    (This)->lpVtbl -> Suspend(This,pdwSuspendCount)

#define IDebugThread2_Resume(This,pdwSuspendCount)	\
    (This)->lpVtbl -> Resume(This,pdwSuspendCount)

#define IDebugThread2_GetThreadProperties(This,dwFields,ptp)	\
    (This)->lpVtbl -> GetThreadProperties(This,dwFields,ptp)

#define IDebugThread2_GetLogicalThread(This,pStackFrame,ppLogicalThread)	\
    (This)->lpVtbl -> GetLogicalThread(This,pStackFrame,ppLogicalThread)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugThread2_EnumFrameInfo_Proxy( 
    IDebugThread2 * This,
    /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
    /* [in] */ UINT nRadix,
    /* [out] */ IEnumDebugFrameInfo2 **ppEnum);


void __RPC_STUB IDebugThread2_EnumFrameInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_GetName_Proxy( 
    IDebugThread2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugThread2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_SetThreadName_Proxy( 
    IDebugThread2 * This,
    /* [in] */ LPCOLESTR pszName);


void __RPC_STUB IDebugThread2_SetThreadName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_GetProgram_Proxy( 
    IDebugThread2 * This,
    /* [out] */ IDebugProgram2 **ppProgram);


void __RPC_STUB IDebugThread2_GetProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_CanSetNextStatement_Proxy( 
    IDebugThread2 * This,
    /* [in] */ IDebugStackFrame2 *pStackFrame,
    /* [in] */ IDebugCodeContext2 *pCodeContext);


void __RPC_STUB IDebugThread2_CanSetNextStatement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_SetNextStatement_Proxy( 
    IDebugThread2 * This,
    /* [in] */ IDebugStackFrame2 *pStackFrame,
    /* [in] */ IDebugCodeContext2 *pCodeContext);


void __RPC_STUB IDebugThread2_SetNextStatement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_GetThreadId_Proxy( 
    IDebugThread2 * This,
    /* [out] */ DWORD *pdwThreadId);


void __RPC_STUB IDebugThread2_GetThreadId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_Suspend_Proxy( 
    IDebugThread2 * This,
    /* [out] */ DWORD *pdwSuspendCount);


void __RPC_STUB IDebugThread2_Suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_Resume_Proxy( 
    IDebugThread2 * This,
    /* [out] */ DWORD *pdwSuspendCount);


void __RPC_STUB IDebugThread2_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_GetThreadProperties_Proxy( 
    IDebugThread2 * This,
    /* [in] */ THREADPROPERTY_FIELDS dwFields,
    /* [out] */ THREADPROPERTIES *ptp);


void __RPC_STUB IDebugThread2_GetThreadProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugThread2_GetLogicalThread_Proxy( 
    IDebugThread2 * This,
    /* [in] */ IDebugStackFrame2 *pStackFrame,
    /* [out] */ IDebugLogicalThread2 **ppLogicalThread);


void __RPC_STUB IDebugThread2_GetLogicalThread_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugThread2_INTERFACE_DEFINED__ */


#ifndef __IDebugLogicalThread2_INTERFACE_DEFINED__
#define __IDebugLogicalThread2_INTERFACE_DEFINED__

/* interface IDebugLogicalThread2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugLogicalThread2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("88d2f75b-d329-4e03-9b75-201f7782d8bd")
    IDebugLogicalThread2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumFrameInfo( 
            /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ IEnumDebugFrameInfo2 **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugLogicalThread2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugLogicalThread2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugLogicalThread2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugLogicalThread2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFrameInfo )( 
            IDebugLogicalThread2 * This,
            /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ IEnumDebugFrameInfo2 **ppEnum);
        
        END_INTERFACE
    } IDebugLogicalThread2Vtbl;

    interface IDebugLogicalThread2
    {
        CONST_VTBL struct IDebugLogicalThread2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugLogicalThread2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugLogicalThread2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugLogicalThread2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugLogicalThread2_EnumFrameInfo(This,dwFieldSpec,nRadix,ppEnum)	\
    (This)->lpVtbl -> EnumFrameInfo(This,dwFieldSpec,nRadix,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugLogicalThread2_EnumFrameInfo_Proxy( 
    IDebugLogicalThread2 * This,
    /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
    /* [in] */ UINT nRadix,
    /* [out] */ IEnumDebugFrameInfo2 **ppEnum);


void __RPC_STUB IDebugLogicalThread2_EnumFrameInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugLogicalThread2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msdbg_0350 */
/* [local] */ 

#define DBG_ATTRIB_NONE					0x0000000000000000
#define DBG_ATTRIB_ALL					0xffffffffffffffff
#define DBG_ATTRIB_OBJ_IS_EXPANDABLE		0x0000000000000001
#define DBG_ATTRIB_VALUE_READONLY		0x0000000000000010
#define DBG_ATTRIB_VALUE_ERROR			0x0000000000000020
#define DBG_ATTRIB_VALUE_SIDE_EFFECT		0x0000000000000040
#define DBG_ATTRIB_OVERLOADED_CONTAINER	0x0000000000000080
#define DBG_ATTRIB_VALUE_BOOLEAN			0x0000000000000100
#define DBG_ATTRIB_VALUE_BOOLEAN_TRUE	0x0000000000000200
#define DBG_ATTRIB_VALUE_INVALID			0x0000000000000400
#define DBG_ATTRIB_VALUE_NAT				0x0000000000000800
#define DBG_ATTRIB_VALUE_AUTOEXPANDED	0x0000000000001000
#define DBG_ATTRIB_ACCESS_NONE			0x0000000000010000
#define DBG_ATTRIB_ACCESS_PUBLIC			0x0000000000020000
#define DBG_ATTRIB_ACCESS_PRIVATE		0x0000000000040000
#define DBG_ATTRIB_ACCESS_PROTECTED		0x0000000000080000
#define DBG_ATTRIB_ACCESS_FINAL			0x0000000000100000
#define DBG_ATTRIB_ACCESS_ALL			0x00000000001f0000
#define DBG_ATTRIB_STORAGE_NONE			0x0000000001000000
#define DBG_ATTRIB_STORAGE_GLOBAL		0x0000000002000000
#define DBG_ATTRIB_STORAGE_STATIC		0x0000000004000000
#define DBG_ATTRIB_STORAGE_REGISTER		0x0000000008000000
#define DBG_ATTRIB_STORAGE_ALL			0x000000000f000000
#define DBG_ATTRIB_TYPE_NONE				0x0000000100000000
#define DBG_ATTRIB_TYPE_VIRTUAL			0x0000000200000000
#define DBG_ATTRIB_TYPE_CONSTANT			0x0000000400000000
#define DBG_ATTRIB_TYPE_SYNCHRONIZED		0x0000000800000000
#define DBG_ATTRIB_TYPE_VOLATILE			0x0000001000000000
#define DBG_ATTRIB_TYPE_ALL				0x0000001f00000000
#define DBG_ATTRIB_DATA					0x0000010000000000
#define DBG_ATTRIB_METHOD				0x0000020000000000
#define DBG_ATTRIB_PROPERTY				0x0000040000000000
#define DBG_ATTRIB_CLASS					0x0000080000000000
#define DBG_ATTRIB_BASECLASS				0x0000100000000000
#define DBG_ATTRIB_INTERFACE				0x0000200000000000
#define DBG_ATTRIB_INNERCLASS			0x0000400000000000
#define DBG_ATTRIB_MOSTDERIVEDCLASS		0x0000800000000000
#define DBG_ATTRIB_CHILD_ALL				0x0000ff0000000000
typedef UINT64 DBG_ATTRIB_FLAGS;


enum __MIDL___MIDL_itf_msdbg_0350_0001
    {	DEBUGPROP_INFO_FULLNAME	= 0x1,
	DEBUGPROP_INFO_NAME	= 0x2,
	DEBUGPROP_INFO_TYPE	= 0x4,
	DEBUGPROP_INFO_VALUE	= 0x8,
	DEBUGPROP_INFO_ATTRIB	= 0x10,
	DEBUGPROP_INFO_PROP	= 0x20,
	DEBUGPROP_INFO_VALUE_AUTOEXPAND	= 0x10000,
	DEBUGPROP_INFO_NOFUNCEVAL	= 0x20000,
	DEBUGPROP_INFO_NONE	= 0,
	DEBUGPROP_INFO_STANDARD	= DEBUGPROP_INFO_ATTRIB | DEBUGPROP_INFO_NAME | DEBUGPROP_INFO_TYPE | DEBUGPROP_INFO_VALUE,
	DEBUGPROP_INFO_ALL	= 0xffffffff
    } ;
typedef DWORD DEBUGPROP_INFO_FLAGS;

typedef struct tagDEBUG_PROPERTY_INFO
    {
    DEBUGPROP_INFO_FLAGS dwFields;
    BSTR bstrFullName;
    BSTR bstrName;
    BSTR bstrType;
    BSTR bstrValue;
    IDebugProperty2 *pProperty;
    DBG_ATTRIB_FLAGS dwAttrib;
    } 	DEBUG_PROPERTY_INFO;



extern RPC_IF_HANDLE __MIDL_itf_msdbg_0350_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdbg_0350_v0_0_s_ifspec;

#ifndef __IDebugProperty2_INTERFACE_DEFINED__
#define __IDebugProperty2_INTERFACE_DEFINED__

/* interface IDebugProperty2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProperty2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a7ee3e7e-2dd2-4ad7-9697-f4aae3427762")
    IDebugProperty2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropertyInfo( 
            /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DWORD dwTimeout,
            /* [length_is][size_is][full][in] */ IDebugReference2 **rgpArgs,
            /* [in] */ DWORD dwArgCount,
            /* [out] */ DEBUG_PROPERTY_INFO *pPropertyInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueAsString( 
            /* [in] */ LPCOLESTR pszValue,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DWORD dwTimeout) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueAsReference( 
            /* [length_is][size_is][full][in] */ IDebugReference2 **rgpArgs,
            /* [in] */ DWORD dwArgCount,
            /* [in] */ IDebugReference2 *pValue,
            /* [in] */ DWORD dwTimeout) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumChildren( 
            /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
            /* [in] */ DWORD dwRadix,
            /* [in] */ REFGUID guidFilter,
            /* [in] */ DBG_ATTRIB_FLAGS dwAttribFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ DWORD dwTimeout,
            /* [out] */ IEnumDebugPropertyInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            /* [out] */ IDebugProperty2 **ppParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDerivedMostProperty( 
            /* [out] */ IDebugProperty2 **ppDerivedMost) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMemoryBytes( 
            /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMemoryContext( 
            /* [out] */ IDebugMemoryContext2 **ppMemory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReference( 
            /* [out] */ IDebugReference2 **ppReference) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExtendedInfo( 
            /* [in] */ REFGUID guidExtendedInfo,
            /* [out] */ VARIANT *pExtendedInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugProperty2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProperty2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProperty2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProperty2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyInfo )( 
            IDebugProperty2 * This,
            /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DWORD dwTimeout,
            /* [length_is][size_is][full][in] */ IDebugReference2 **rgpArgs,
            /* [in] */ DWORD dwArgCount,
            /* [out] */ DEBUG_PROPERTY_INFO *pPropertyInfo);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueAsString )( 
            IDebugProperty2 * This,
            /* [in] */ LPCOLESTR pszValue,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DWORD dwTimeout);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueAsReference )( 
            IDebugProperty2 * This,
            /* [length_is][size_is][full][in] */ IDebugReference2 **rgpArgs,
            /* [in] */ DWORD dwArgCount,
            /* [in] */ IDebugReference2 *pValue,
            /* [in] */ DWORD dwTimeout);
        
        HRESULT ( STDMETHODCALLTYPE *EnumChildren )( 
            IDebugProperty2 * This,
            /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
            /* [in] */ DWORD dwRadix,
            /* [in] */ REFGUID guidFilter,
            /* [in] */ DBG_ATTRIB_FLAGS dwAttribFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ DWORD dwTimeout,
            /* [out] */ IEnumDebugPropertyInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IDebugProperty2 * This,
            /* [out] */ IDebugProperty2 **ppParent);
        
        HRESULT ( STDMETHODCALLTYPE *GetDerivedMostProperty )( 
            IDebugProperty2 * This,
            /* [out] */ IDebugProperty2 **ppDerivedMost);
        
        HRESULT ( STDMETHODCALLTYPE *GetMemoryBytes )( 
            IDebugProperty2 * This,
            /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes);
        
        HRESULT ( STDMETHODCALLTYPE *GetMemoryContext )( 
            IDebugProperty2 * This,
            /* [out] */ IDebugMemoryContext2 **ppMemory);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugProperty2 * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetReference )( 
            IDebugProperty2 * This,
            /* [out] */ IDebugReference2 **ppReference);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugProperty2 * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [out] */ VARIANT *pExtendedInfo);
        
        END_INTERFACE
    } IDebugProperty2Vtbl;

    interface IDebugProperty2
    {
        CONST_VTBL struct IDebugProperty2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProperty2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProperty2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProperty2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugProperty2_GetPropertyInfo(This,dwFields,dwRadix,dwTimeout,rgpArgs,dwArgCount,pPropertyInfo)	\
    (This)->lpVtbl -> GetPropertyInfo(This,dwFields,dwRadix,dwTimeout,rgpArgs,dwArgCount,pPropertyInfo)

#define IDebugProperty2_SetValueAsString(This,pszValue,dwRadix,dwTimeout)	\
    (This)->lpVtbl -> SetValueAsString(This,pszValue,dwRadix,dwTimeout)

#define IDebugProperty2_SetValueAsReference(This,rgpArgs,dwArgCount,pValue,dwTimeout)	\
    (This)->lpVtbl -> SetValueAsReference(This,rgpArgs,dwArgCount,pValue,dwTimeout)

#define IDebugProperty2_EnumChildren(This,dwFields,dwRadix,guidFilter,dwAttribFilter,pszNameFilter,dwTimeout,ppEnum)	\
    (This)->lpVtbl -> EnumChildren(This,dwFields,dwRadix,guidFilter,dwAttribFilter,pszNameFilter,dwTimeout,ppEnum)

#define IDebugProperty2_GetParent(This,ppParent)	\
    (This)->lpVtbl -> GetParent(This,ppParent)

#define IDebugProperty2_GetDerivedMostProperty(This,ppDerivedMost)	\
    (This)->lpVtbl -> GetDerivedMostProperty(This,ppDerivedMost)

#define IDebugProperty2_GetMemoryBytes(This,ppMemoryBytes)	\
    (This)->lpVtbl -> GetMemoryBytes(This,ppMemoryBytes)

#define IDebugProperty2_GetMemoryContext(This,ppMemory)	\
    (This)->lpVtbl -> GetMemoryContext(This,ppMemory)

#define IDebugProperty2_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugProperty2_GetReference(This,ppReference)	\
    (This)->lpVtbl -> GetReference(This,ppReference)

#define IDebugProperty2_GetExtendedInfo(This,guidExtendedInfo,pExtendedInfo)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,pExtendedInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugProperty2_GetPropertyInfo_Proxy( 
    IDebugProperty2 * This,
    /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
    /* [in] */ DWORD dwRadix,
    /* [in] */ DWORD dwTimeout,
    /* [length_is][size_is][full][in] */ IDebugReference2 **rgpArgs,
    /* [in] */ DWORD dwArgCount,
    /* [out] */ DEBUG_PROPERTY_INFO *pPropertyInfo);


void __RPC_STUB IDebugProperty2_GetPropertyInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_SetValueAsString_Proxy( 
    IDebugProperty2 * This,
    /* [in] */ LPCOLESTR pszValue,
    /* [in] */ DWORD dwRadix,
    /* [in] */ DWORD dwTimeout);


void __RPC_STUB IDebugProperty2_SetValueAsString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_SetValueAsReference_Proxy( 
    IDebugProperty2 * This,
    /* [length_is][size_is][full][in] */ IDebugReference2 **rgpArgs,
    /* [in] */ DWORD dwArgCount,
    /* [in] */ IDebugReference2 *pValue,
    /* [in] */ DWORD dwTimeout);


void __RPC_STUB IDebugProperty2_SetValueAsReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_EnumChildren_Proxy( 
    IDebugProperty2 * This,
    /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
    /* [in] */ DWORD dwRadix,
    /* [in] */ REFGUID guidFilter,
    /* [in] */ DBG_ATTRIB_FLAGS dwAttribFilter,
    /* [full][in] */ LPCOLESTR pszNameFilter,
    /* [in] */ DWORD dwTimeout,
    /* [out] */ IEnumDebugPropertyInfo2 **ppEnum);


void __RPC_STUB IDebugProperty2_EnumChildren_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_GetParent_Proxy( 
    IDebugProperty2 * This,
    /* [out] */ IDebugProperty2 **ppParent);


void __RPC_STUB IDebugProperty2_GetParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_GetDerivedMostProperty_Proxy( 
    IDebugProperty2 * This,
    /* [out] */ IDebugProperty2 **ppDerivedMost);


void __RPC_STUB IDebugProperty2_GetDerivedMostProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_GetMemoryBytes_Proxy( 
    IDebugProperty2 * This,
    /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes);


void __RPC_STUB IDebugProperty2_GetMemoryBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_GetMemoryContext_Proxy( 
    IDebugProperty2 * This,
    /* [out] */ IDebugMemoryContext2 **ppMemory);


void __RPC_STUB IDebugProperty2_GetMemoryContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_GetSize_Proxy( 
    IDebugProperty2 * This,
    /* [out] */ DWORD *pdwSize);


void __RPC_STUB IDebugProperty2_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_GetReference_Proxy( 
    IDebugProperty2 * This,
    /* [out] */ IDebugReference2 **ppReference);


void __RPC_STUB IDebugProperty2_GetReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty2_GetExtendedInfo_Proxy( 
    IDebugProperty2 * This,
    /* [in] */ REFGUID guidExtendedInfo,
    /* [out] */ VARIANT *pExtendedInfo);


void __RPC_STUB IDebugProperty2_GetExtendedInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugProperty2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msdbg_0351 */
/* [local] */ 


enum __MIDL___MIDL_itf_msdbg_0351_0001
    {	REF_TYPE_WEAK	= 0x1,
	REF_TYPE_STRONG	= 0x2
    } ;
typedef DWORD REFERENCE_TYPE;


enum __MIDL___MIDL_itf_msdbg_0351_0002
    {	DEBUGREF_INFO_NAME	= 0x1,
	DEBUGREF_INFO_TYPE	= 0x2,
	DEBUGREF_INFO_VALUE	= 0x4,
	DEBUGREF_INFO_ATTRIB	= 0x8,
	DEBUGREF_INFO_REFTYPE	= 0x10,
	DEBUGREF_INFO_REF	= 0x20,
	DEBUGREF_INFO_VALUE_AUTOEXPAND	= 0x10000,
	DEBUGREF_INFO_NONE	= 0,
	DEBUGREF_INFO_ALL	= 0xffffffff
    } ;
typedef DWORD DEBUGREF_INFO_FLAGS;

typedef struct tagDEBUG_REFERENCE_INFO
    {
    DEBUGREF_INFO_FLAGS dwFields;
    BSTR bstrName;
    BSTR bstrType;
    BSTR bstrValue;
    DBG_ATTRIB_FLAGS dwAttrib;
    REFERENCE_TYPE dwRefType;
    IDebugReference2 *pReference;
    } 	DEBUG_REFERENCE_INFO;



extern RPC_IF_HANDLE __MIDL_itf_msdbg_0351_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdbg_0351_v0_0_s_ifspec;

#ifndef __IDebugReference2_INTERFACE_DEFINED__
#define __IDebugReference2_INTERFACE_DEFINED__

/* interface IDebugReference2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugReference2_0003
    {	REF_COMPARE_EQUAL	= 0x1,
	REF_COMPARE_LESS_THAN	= 0x2,
	REF_COMPARE_GREATER_THAN	= 0x3
    } ;
typedef DWORD REFERENCE_COMPARE;


EXTERN_C const IID IID_IDebugReference2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10b793ac-0c47-4679-8454-adb36f29f802")
    IDebugReference2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetReferenceInfo( 
            /* [in] */ DEBUGREF_INFO_FLAGS dwFields,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DWORD dwTimeout,
            /* [length_is][size_is][in] */ IDebugReference2 **rgpArgs,
            /* [in] */ DWORD dwArgCount,
            /* [out] */ DEBUG_REFERENCE_INFO *pReferenceInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueAsString( 
            /* [in] */ LPCOLESTR pszValue,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DWORD dwTimeout) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueAsReference( 
            /* [length_is][size_is][in] */ IDebugReference2 **rgpArgs,
            /* [in] */ DWORD dwArgCount,
            /* [in] */ IDebugReference2 *pValue,
            /* [in] */ DWORD dwTimeout) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumChildren( 
            /* [in] */ DEBUGREF_INFO_FLAGS dwFields,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DBG_ATTRIB_FLAGS dwAttribFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ DWORD dwTimeout,
            /* [out] */ IEnumDebugReferenceInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            /* [out] */ IDebugReference2 **ppParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDerivedMostReference( 
            /* [out] */ IDebugReference2 **ppDerivedMost) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMemoryBytes( 
            /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMemoryContext( 
            /* [out] */ IDebugMemoryContext2 **ppMemory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetReferenceType( 
            /* [in] */ REFERENCE_TYPE dwRefType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compare( 
            /* [in] */ REFERENCE_COMPARE dwCompare,
            /* [in] */ IDebugReference2 *pReference) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugReference2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugReference2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugReference2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugReference2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetReferenceInfo )( 
            IDebugReference2 * This,
            /* [in] */ DEBUGREF_INFO_FLAGS dwFields,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DWORD dwTimeout,
            /* [length_is][size_is][in] */ IDebugReference2 **rgpArgs,
            /* [in] */ DWORD dwArgCount,
            /* [out] */ DEBUG_REFERENCE_INFO *pReferenceInfo);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueAsString )( 
            IDebugReference2 * This,
            /* [in] */ LPCOLESTR pszValue,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DWORD dwTimeout);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueAsReference )( 
            IDebugReference2 * This,
            /* [length_is][size_is][in] */ IDebugReference2 **rgpArgs,
            /* [in] */ DWORD dwArgCount,
            /* [in] */ IDebugReference2 *pValue,
            /* [in] */ DWORD dwTimeout);
        
        HRESULT ( STDMETHODCALLTYPE *EnumChildren )( 
            IDebugReference2 * This,
            /* [in] */ DEBUGREF_INFO_FLAGS dwFields,
            /* [in] */ DWORD dwRadix,
            /* [in] */ DBG_ATTRIB_FLAGS dwAttribFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ DWORD dwTimeout,
            /* [out] */ IEnumDebugReferenceInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IDebugReference2 * This,
            /* [out] */ IDebugReference2 **ppParent);
        
        HRESULT ( STDMETHODCALLTYPE *GetDerivedMostReference )( 
            IDebugReference2 * This,
            /* [out] */ IDebugReference2 **ppDerivedMost);
        
        HRESULT ( STDMETHODCALLTYPE *GetMemoryBytes )( 
            IDebugReference2 * This,
            /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes);
        
        HRESULT ( STDMETHODCALLTYPE *GetMemoryContext )( 
            IDebugReference2 * This,
            /* [out] */ IDebugMemoryContext2 **ppMemory);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugReference2 * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetReferenceType )( 
            IDebugReference2 * This,
            /* [in] */ REFERENCE_TYPE dwRefType);
        
        HRESULT ( STDMETHODCALLTYPE *Compare )( 
            IDebugReference2 * This,
            /* [in] */ REFERENCE_COMPARE dwCompare,
            /* [in] */ IDebugReference2 *pReference);
        
        END_INTERFACE
    } IDebugReference2Vtbl;

    interface IDebugReference2
    {
        CONST_VTBL struct IDebugReference2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugReference2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugReference2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugReference2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugReference2_GetReferenceInfo(This,dwFields,dwRadix,dwTimeout,rgpArgs,dwArgCount,pReferenceInfo)	\
    (This)->lpVtbl -> GetReferenceInfo(This,dwFields,dwRadix,dwTimeout,rgpArgs,dwArgCount,pReferenceInfo)

#define IDebugReference2_SetValueAsString(This,pszValue,dwRadix,dwTimeout)	\
    (This)->lpVtbl -> SetValueAsString(This,pszValue,dwRadix,dwTimeout)

#define IDebugReference2_SetValueAsReference(This,rgpArgs,dwArgCount,pValue,dwTimeout)	\
    (This)->lpVtbl -> SetValueAsReference(This,rgpArgs,dwArgCount,pValue,dwTimeout)

#define IDebugReference2_EnumChildren(This,dwFields,dwRadix,dwAttribFilter,pszNameFilter,dwTimeout,ppEnum)	\
    (This)->lpVtbl -> EnumChildren(This,dwFields,dwRadix,dwAttribFilter,pszNameFilter,dwTimeout,ppEnum)

#define IDebugReference2_GetParent(This,ppParent)	\
    (This)->lpVtbl -> GetParent(This,ppParent)

#define IDebugReference2_GetDerivedMostReference(This,ppDerivedMost)	\
    (This)->lpVtbl -> GetDerivedMostReference(This,ppDerivedMost)

#define IDebugReference2_GetMemoryBytes(This,ppMemoryBytes)	\
    (This)->lpVtbl -> GetMemoryBytes(This,ppMemoryBytes)

#define IDebugReference2_GetMemoryContext(This,ppMemory)	\
    (This)->lpVtbl -> GetMemoryContext(This,ppMemory)

#define IDebugReference2_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugReference2_SetReferenceType(This,dwRefType)	\
    (This)->lpVtbl -> SetReferenceType(This,dwRefType)

#define IDebugReference2_Compare(This,dwCompare,pReference)	\
    (This)->lpVtbl -> Compare(This,dwCompare,pReference)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugReference2_GetReferenceInfo_Proxy( 
    IDebugReference2 * This,
    /* [in] */ DEBUGREF_INFO_FLAGS dwFields,
    /* [in] */ DWORD dwRadix,
    /* [in] */ DWORD dwTimeout,
    /* [length_is][size_is][in] */ IDebugReference2 **rgpArgs,
    /* [in] */ DWORD dwArgCount,
    /* [out] */ DEBUG_REFERENCE_INFO *pReferenceInfo);


void __RPC_STUB IDebugReference2_GetReferenceInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_SetValueAsString_Proxy( 
    IDebugReference2 * This,
    /* [in] */ LPCOLESTR pszValue,
    /* [in] */ DWORD dwRadix,
    /* [in] */ DWORD dwTimeout);


void __RPC_STUB IDebugReference2_SetValueAsString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_SetValueAsReference_Proxy( 
    IDebugReference2 * This,
    /* [length_is][size_is][in] */ IDebugReference2 **rgpArgs,
    /* [in] */ DWORD dwArgCount,
    /* [in] */ IDebugReference2 *pValue,
    /* [in] */ DWORD dwTimeout);


void __RPC_STUB IDebugReference2_SetValueAsReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_EnumChildren_Proxy( 
    IDebugReference2 * This,
    /* [in] */ DEBUGREF_INFO_FLAGS dwFields,
    /* [in] */ DWORD dwRadix,
    /* [in] */ DBG_ATTRIB_FLAGS dwAttribFilter,
    /* [full][in] */ LPCOLESTR pszNameFilter,
    /* [in] */ DWORD dwTimeout,
    /* [out] */ IEnumDebugReferenceInfo2 **ppEnum);


void __RPC_STUB IDebugReference2_EnumChildren_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_GetParent_Proxy( 
    IDebugReference2 * This,
    /* [out] */ IDebugReference2 **ppParent);


void __RPC_STUB IDebugReference2_GetParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_GetDerivedMostReference_Proxy( 
    IDebugReference2 * This,
    /* [out] */ IDebugReference2 **ppDerivedMost);


void __RPC_STUB IDebugReference2_GetDerivedMostReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_GetMemoryBytes_Proxy( 
    IDebugReference2 * This,
    /* [out] */ IDebugMemoryBytes2 **ppMemoryBytes);


void __RPC_STUB IDebugReference2_GetMemoryBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_GetMemoryContext_Proxy( 
    IDebugReference2 * This,
    /* [out] */ IDebugMemoryContext2 **ppMemory);


void __RPC_STUB IDebugReference2_GetMemoryContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_GetSize_Proxy( 
    IDebugReference2 * This,
    /* [out] */ DWORD *pdwSize);


void __RPC_STUB IDebugReference2_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_SetReferenceType_Proxy( 
    IDebugReference2 * This,
    /* [in] */ REFERENCE_TYPE dwRefType);


void __RPC_STUB IDebugReference2_SetReferenceType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugReference2_Compare_Proxy( 
    IDebugReference2 * This,
    /* [in] */ REFERENCE_COMPARE dwCompare,
    /* [in] */ IDebugReference2 *pReference);


void __RPC_STUB IDebugReference2_Compare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugReference2_INTERFACE_DEFINED__ */


#ifndef __IDebugStackFrame2_INTERFACE_DEFINED__
#define __IDebugStackFrame2_INTERFACE_DEFINED__

/* interface IDebugStackFrame2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugStackFrame2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1412926f-5dd6-4e58-b648-e1c63e013d51")
    IDebugStackFrame2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCodeContext( 
            /* [out] */ IDebugCodeContext2 **ppCodeCxt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocumentContext( 
            /* [out] */ IDebugDocumentContext2 **ppCxt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ FRAMEINFO *pFrameInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPhysicalStackRange( 
            /* [out] */ UINT64 *paddrMin,
            /* [out] */ UINT64 *paddrMax) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExpressionContext( 
            /* [out] */ IDebugExpressionContext2 **ppExprCxt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguageInfo( 
            /* [full][out][in] */ BSTR *pbstrLanguage,
            /* [full][out][in] */ GUID *pguidLanguage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDebugProperty( 
            /* [out] */ IDebugProperty2 **ppProperty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumProperties( 
            /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
            /* [in] */ UINT nRadix,
            /* [in] */ REFGUID guidFilter,
            /* [in] */ DWORD dwTimeout,
            /* [out] */ ULONG *pcelt,
            /* [out] */ IEnumDebugPropertyInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetThread( 
            /* [out] */ IDebugThread2 **ppThread) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugStackFrame2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugStackFrame2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugStackFrame2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugStackFrame2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodeContext )( 
            IDebugStackFrame2 * This,
            /* [out] */ IDebugCodeContext2 **ppCodeCxt);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentContext )( 
            IDebugStackFrame2 * This,
            /* [out] */ IDebugDocumentContext2 **ppCxt);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugStackFrame2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugStackFrame2 * This,
            /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ FRAMEINFO *pFrameInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetPhysicalStackRange )( 
            IDebugStackFrame2 * This,
            /* [out] */ UINT64 *paddrMin,
            /* [out] */ UINT64 *paddrMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetExpressionContext )( 
            IDebugStackFrame2 * This,
            /* [out] */ IDebugExpressionContext2 **ppExprCxt);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageInfo )( 
            IDebugStackFrame2 * This,
            /* [full][out][in] */ BSTR *pbstrLanguage,
            /* [full][out][in] */ GUID *pguidLanguage);
        
        HRESULT ( STDMETHODCALLTYPE *GetDebugProperty )( 
            IDebugStackFrame2 * This,
            /* [out] */ IDebugProperty2 **ppProperty);
        
        HRESULT ( STDMETHODCALLTYPE *EnumProperties )( 
            IDebugStackFrame2 * This,
            /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
            /* [in] */ UINT nRadix,
            /* [in] */ REFGUID guidFilter,
            /* [in] */ DWORD dwTimeout,
            /* [out] */ ULONG *pcelt,
            /* [out] */ IEnumDebugPropertyInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetThread )( 
            IDebugStackFrame2 * This,
            /* [out] */ IDebugThread2 **ppThread);
        
        END_INTERFACE
    } IDebugStackFrame2Vtbl;

    interface IDebugStackFrame2
    {
        CONST_VTBL struct IDebugStackFrame2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugStackFrame2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugStackFrame2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugStackFrame2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugStackFrame2_GetCodeContext(This,ppCodeCxt)	\
    (This)->lpVtbl -> GetCodeContext(This,ppCodeCxt)

#define IDebugStackFrame2_GetDocumentContext(This,ppCxt)	\
    (This)->lpVtbl -> GetDocumentContext(This,ppCxt)

#define IDebugStackFrame2_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IDebugStackFrame2_GetInfo(This,dwFieldSpec,nRadix,pFrameInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFieldSpec,nRadix,pFrameInfo)

#define IDebugStackFrame2_GetPhysicalStackRange(This,paddrMin,paddrMax)	\
    (This)->lpVtbl -> GetPhysicalStackRange(This,paddrMin,paddrMax)

#define IDebugStackFrame2_GetExpressionContext(This,ppExprCxt)	\
    (This)->lpVtbl -> GetExpressionContext(This,ppExprCxt)

#define IDebugStackFrame2_GetLanguageInfo(This,pbstrLanguage,pguidLanguage)	\
    (This)->lpVtbl -> GetLanguageInfo(This,pbstrLanguage,pguidLanguage)

#define IDebugStackFrame2_GetDebugProperty(This,ppProperty)	\
    (This)->lpVtbl -> GetDebugProperty(This,ppProperty)

#define IDebugStackFrame2_EnumProperties(This,dwFields,nRadix,guidFilter,dwTimeout,pcelt,ppEnum)	\
    (This)->lpVtbl -> EnumProperties(This,dwFields,nRadix,guidFilter,dwTimeout,pcelt,ppEnum)

#define IDebugStackFrame2_GetThread(This,ppThread)	\
    (This)->lpVtbl -> GetThread(This,ppThread)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetCodeContext_Proxy( 
    IDebugStackFrame2 * This,
    /* [out] */ IDebugCodeContext2 **ppCodeCxt);


void __RPC_STUB IDebugStackFrame2_GetCodeContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetDocumentContext_Proxy( 
    IDebugStackFrame2 * This,
    /* [out] */ IDebugDocumentContext2 **ppCxt);


void __RPC_STUB IDebugStackFrame2_GetDocumentContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetName_Proxy( 
    IDebugStackFrame2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugStackFrame2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetInfo_Proxy( 
    IDebugStackFrame2 * This,
    /* [in] */ FRAMEINFO_FLAGS dwFieldSpec,
    /* [in] */ UINT nRadix,
    /* [out] */ FRAMEINFO *pFrameInfo);


void __RPC_STUB IDebugStackFrame2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetPhysicalStackRange_Proxy( 
    IDebugStackFrame2 * This,
    /* [out] */ UINT64 *paddrMin,
    /* [out] */ UINT64 *paddrMax);


void __RPC_STUB IDebugStackFrame2_GetPhysicalStackRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetExpressionContext_Proxy( 
    IDebugStackFrame2 * This,
    /* [out] */ IDebugExpressionContext2 **ppExprCxt);


void __RPC_STUB IDebugStackFrame2_GetExpressionContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetLanguageInfo_Proxy( 
    IDebugStackFrame2 * This,
    /* [full][out][in] */ BSTR *pbstrLanguage,
    /* [full][out][in] */ GUID *pguidLanguage);


void __RPC_STUB IDebugStackFrame2_GetLanguageInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetDebugProperty_Proxy( 
    IDebugStackFrame2 * This,
    /* [out] */ IDebugProperty2 **ppProperty);


void __RPC_STUB IDebugStackFrame2_GetDebugProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_EnumProperties_Proxy( 
    IDebugStackFrame2 * This,
    /* [in] */ DEBUGPROP_INFO_FLAGS dwFields,
    /* [in] */ UINT nRadix,
    /* [in] */ REFGUID guidFilter,
    /* [in] */ DWORD dwTimeout,
    /* [out] */ ULONG *pcelt,
    /* [out] */ IEnumDebugPropertyInfo2 **ppEnum);


void __RPC_STUB IDebugStackFrame2_EnumProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugStackFrame2_GetThread_Proxy( 
    IDebugStackFrame2 * This,
    /* [out] */ IDebugThread2 **ppThread);


void __RPC_STUB IDebugStackFrame2_GetThread_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugStackFrame2_INTERFACE_DEFINED__ */


#ifndef __IDebugMemoryContext2_INTERFACE_DEFINED__
#define __IDebugMemoryContext2_INTERFACE_DEFINED__

/* interface IDebugMemoryContext2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugMemoryContext2_0001
    {	CONTEXT_EQUAL	= 0x1,
	CONTEXT_LESS_THAN	= 0x2,
	CONTEXT_GREATER_THAN	= 0x3,
	CONTEXT_LESS_THAN_OR_EQUAL	= 0x4,
	CONTEXT_GREATER_THAN_OR_EQUAL	= 0x5,
	CONTEXT_SAME_SCOPE	= 0x6,
	CONTEXT_SAME_FUNCTION	= 0x7,
	CONTEXT_SAME_MODULE	= 0x8,
	CONTEXT_SAME_PROCESS	= 0x9
    } ;
typedef DWORD CONTEXT_COMPARE;


enum __MIDL_IDebugMemoryContext2_0002
    {	CIF_MODULEURL	= 0x1,
	CIF_FUNCTION	= 0x2,
	CIF_FUNCTIONOFFSET	= 0x4,
	CIF_ADDRESS	= 0x8,
	CIF_ADDRESSOFFSET	= 0x10,
	CIF_ADDRESSABSOLUTE	= 0x20,
	CIF_ALLFIELDS	= 0x3f
    } ;
typedef DWORD CONTEXT_INFO_FIELDS;

typedef struct _tagCONTEXT_INFO
    {
    CONTEXT_INFO_FIELDS dwFields;
    BSTR bstrModuleUrl;
    BSTR bstrFunction;
    TEXT_POSITION posFunctionOffset;
    BSTR bstrAddress;
    BSTR bstrAddressOffset;
    BSTR bstrAddressAbsolute;
    } 	CONTEXT_INFO;


EXTERN_C const IID IID_IDebugMemoryContext2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1ab276dd-f27b-4445-825d-5df0b4a04a3a")
    IDebugMemoryContext2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ CONTEXT_INFO_FIELDS dwFields,
            /* [out] */ CONTEXT_INFO *pInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ UINT64 dwCount,
            /* [out] */ IDebugMemoryContext2 **ppMemCxt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Subtract( 
            /* [in] */ UINT64 dwCount,
            /* [out] */ IDebugMemoryContext2 **ppMemCxt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compare( 
            /* [in] */ CONTEXT_COMPARE compare,
            /* [length_is][size_is][in] */ IDebugMemoryContext2 **rgpMemoryContextSet,
            /* [in] */ DWORD dwMemoryContextSetLen,
            /* [out] */ DWORD *pdwMemoryContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMemoryContext2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMemoryContext2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMemoryContext2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMemoryContext2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugMemoryContext2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugMemoryContext2 * This,
            /* [in] */ CONTEXT_INFO_FIELDS dwFields,
            /* [out] */ CONTEXT_INFO *pInfo);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDebugMemoryContext2 * This,
            /* [in] */ UINT64 dwCount,
            /* [out] */ IDebugMemoryContext2 **ppMemCxt);
        
        HRESULT ( STDMETHODCALLTYPE *Subtract )( 
            IDebugMemoryContext2 * This,
            /* [in] */ UINT64 dwCount,
            /* [out] */ IDebugMemoryContext2 **ppMemCxt);
        
        HRESULT ( STDMETHODCALLTYPE *Compare )( 
            IDebugMemoryContext2 * This,
            /* [in] */ CONTEXT_COMPARE compare,
            /* [length_is][size_is][in] */ IDebugMemoryContext2 **rgpMemoryContextSet,
            /* [in] */ DWORD dwMemoryContextSetLen,
            /* [out] */ DWORD *pdwMemoryContext);
        
        END_INTERFACE
    } IDebugMemoryContext2Vtbl;

    interface IDebugMemoryContext2
    {
        CONST_VTBL struct IDebugMemoryContext2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMemoryContext2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMemoryContext2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMemoryContext2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMemoryContext2_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IDebugMemoryContext2_GetInfo(This,dwFields,pInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pInfo)

#define IDebugMemoryContext2_Add(This,dwCount,ppMemCxt)	\
    (This)->lpVtbl -> Add(This,dwCount,ppMemCxt)

#define IDebugMemoryContext2_Subtract(This,dwCount,ppMemCxt)	\
    (This)->lpVtbl -> Subtract(This,dwCount,ppMemCxt)

#define IDebugMemoryContext2_Compare(This,compare,rgpMemoryContextSet,dwMemoryContextSetLen,pdwMemoryContext)	\
    (This)->lpVtbl -> Compare(This,compare,rgpMemoryContextSet,dwMemoryContextSetLen,pdwMemoryContext)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMemoryContext2_GetName_Proxy( 
    IDebugMemoryContext2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugMemoryContext2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMemoryContext2_GetInfo_Proxy( 
    IDebugMemoryContext2 * This,
    /* [in] */ CONTEXT_INFO_FIELDS dwFields,
    /* [out] */ CONTEXT_INFO *pInfo);


void __RPC_STUB IDebugMemoryContext2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMemoryContext2_Add_Proxy( 
    IDebugMemoryContext2 * This,
    /* [in] */ UINT64 dwCount,
    /* [out] */ IDebugMemoryContext2 **ppMemCxt);


void __RPC_STUB IDebugMemoryContext2_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMemoryContext2_Subtract_Proxy( 
    IDebugMemoryContext2 * This,
    /* [in] */ UINT64 dwCount,
    /* [out] */ IDebugMemoryContext2 **ppMemCxt);


void __RPC_STUB IDebugMemoryContext2_Subtract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMemoryContext2_Compare_Proxy( 
    IDebugMemoryContext2 * This,
    /* [in] */ CONTEXT_COMPARE compare,
    /* [length_is][size_is][in] */ IDebugMemoryContext2 **rgpMemoryContextSet,
    /* [in] */ DWORD dwMemoryContextSetLen,
    /* [out] */ DWORD *pdwMemoryContext);


void __RPC_STUB IDebugMemoryContext2_Compare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMemoryContext2_INTERFACE_DEFINED__ */


#ifndef __IDebugCodeContext2_INTERFACE_DEFINED__
#define __IDebugCodeContext2_INTERFACE_DEFINED__

/* interface IDebugCodeContext2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugCodeContext2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ac17b76b-2b09-419a-ad5f-7d7402da8875")
    IDebugCodeContext2 : public IDebugMemoryContext2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDocumentContext( 
            /* [out] */ IDebugDocumentContext2 **ppSrcCxt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguageInfo( 
            /* [full][out][in] */ BSTR *pbstrLanguage,
            /* [full][out][in] */ GUID *pguidLanguage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugCodeContext2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugCodeContext2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugCodeContext2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugCodeContext2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugCodeContext2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugCodeContext2 * This,
            /* [in] */ CONTEXT_INFO_FIELDS dwFields,
            /* [out] */ CONTEXT_INFO *pInfo);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDebugCodeContext2 * This,
            /* [in] */ UINT64 dwCount,
            /* [out] */ IDebugMemoryContext2 **ppMemCxt);
        
        HRESULT ( STDMETHODCALLTYPE *Subtract )( 
            IDebugCodeContext2 * This,
            /* [in] */ UINT64 dwCount,
            /* [out] */ IDebugMemoryContext2 **ppMemCxt);
        
        HRESULT ( STDMETHODCALLTYPE *Compare )( 
            IDebugCodeContext2 * This,
            /* [in] */ CONTEXT_COMPARE compare,
            /* [length_is][size_is][in] */ IDebugMemoryContext2 **rgpMemoryContextSet,
            /* [in] */ DWORD dwMemoryContextSetLen,
            /* [out] */ DWORD *pdwMemoryContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentContext )( 
            IDebugCodeContext2 * This,
            /* [out] */ IDebugDocumentContext2 **ppSrcCxt);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageInfo )( 
            IDebugCodeContext2 * This,
            /* [full][out][in] */ BSTR *pbstrLanguage,
            /* [full][out][in] */ GUID *pguidLanguage);
        
        END_INTERFACE
    } IDebugCodeContext2Vtbl;

    interface IDebugCodeContext2
    {
        CONST_VTBL struct IDebugCodeContext2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugCodeContext2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugCodeContext2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugCodeContext2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugCodeContext2_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IDebugCodeContext2_GetInfo(This,dwFields,pInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pInfo)

#define IDebugCodeContext2_Add(This,dwCount,ppMemCxt)	\
    (This)->lpVtbl -> Add(This,dwCount,ppMemCxt)

#define IDebugCodeContext2_Subtract(This,dwCount,ppMemCxt)	\
    (This)->lpVtbl -> Subtract(This,dwCount,ppMemCxt)

#define IDebugCodeContext2_Compare(This,compare,rgpMemoryContextSet,dwMemoryContextSetLen,pdwMemoryContext)	\
    (This)->lpVtbl -> Compare(This,compare,rgpMemoryContextSet,dwMemoryContextSetLen,pdwMemoryContext)


#define IDebugCodeContext2_GetDocumentContext(This,ppSrcCxt)	\
    (This)->lpVtbl -> GetDocumentContext(This,ppSrcCxt)

#define IDebugCodeContext2_GetLanguageInfo(This,pbstrLanguage,pguidLanguage)	\
    (This)->lpVtbl -> GetLanguageInfo(This,pbstrLanguage,pguidLanguage)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugCodeContext2_GetDocumentContext_Proxy( 
    IDebugCodeContext2 * This,
    /* [out] */ IDebugDocumentContext2 **ppSrcCxt);


void __RPC_STUB IDebugCodeContext2_GetDocumentContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugCodeContext2_GetLanguageInfo_Proxy( 
    IDebugCodeContext2 * This,
    /* [full][out][in] */ BSTR *pbstrLanguage,
    /* [full][out][in] */ GUID *pguidLanguage);


void __RPC_STUB IDebugCodeContext2_GetLanguageInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugCodeContext2_INTERFACE_DEFINED__ */


#ifndef __IDebugMemoryBytes2_INTERFACE_DEFINED__
#define __IDebugMemoryBytes2_INTERFACE_DEFINED__

/* interface IDebugMemoryBytes2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugMemoryBytes2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("925837d1-3aa1-451a-b7fe-cc04bb42cfb8")
    IDebugMemoryBytes2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ReadAt( 
            /* [in] */ IDebugMemoryContext2 *pStartContext,
            /* [in] */ DWORD dwCount,
            /* [length_is][size_is][out] */ BYTE *rgbMemory,
            /* [out] */ DWORD *pdwRead,
            /* [full][out][in] */ DWORD *pdwUnreadable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteAt( 
            /* [in] */ IDebugMemoryContext2 *pStartContext,
            /* [in] */ DWORD dwCount,
            /* [length_is][size_is][in] */ BYTE *rgbMemory) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ UINT64 *pqwSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMemoryBytes2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMemoryBytes2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMemoryBytes2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMemoryBytes2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReadAt )( 
            IDebugMemoryBytes2 * This,
            /* [in] */ IDebugMemoryContext2 *pStartContext,
            /* [in] */ DWORD dwCount,
            /* [length_is][size_is][out] */ BYTE *rgbMemory,
            /* [out] */ DWORD *pdwRead,
            /* [full][out][in] */ DWORD *pdwUnreadable);
        
        HRESULT ( STDMETHODCALLTYPE *WriteAt )( 
            IDebugMemoryBytes2 * This,
            /* [in] */ IDebugMemoryContext2 *pStartContext,
            /* [in] */ DWORD dwCount,
            /* [length_is][size_is][in] */ BYTE *rgbMemory);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugMemoryBytes2 * This,
            /* [out] */ UINT64 *pqwSize);
        
        END_INTERFACE
    } IDebugMemoryBytes2Vtbl;

    interface IDebugMemoryBytes2
    {
        CONST_VTBL struct IDebugMemoryBytes2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMemoryBytes2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMemoryBytes2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMemoryBytes2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMemoryBytes2_ReadAt(This,pStartContext,dwCount,rgbMemory,pdwRead,pdwUnreadable)	\
    (This)->lpVtbl -> ReadAt(This,pStartContext,dwCount,rgbMemory,pdwRead,pdwUnreadable)

#define IDebugMemoryBytes2_WriteAt(This,pStartContext,dwCount,rgbMemory)	\
    (This)->lpVtbl -> WriteAt(This,pStartContext,dwCount,rgbMemory)

#define IDebugMemoryBytes2_GetSize(This,pqwSize)	\
    (This)->lpVtbl -> GetSize(This,pqwSize)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMemoryBytes2_ReadAt_Proxy( 
    IDebugMemoryBytes2 * This,
    /* [in] */ IDebugMemoryContext2 *pStartContext,
    /* [in] */ DWORD dwCount,
    /* [length_is][size_is][out] */ BYTE *rgbMemory,
    /* [out] */ DWORD *pdwRead,
    /* [full][out][in] */ DWORD *pdwUnreadable);


void __RPC_STUB IDebugMemoryBytes2_ReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMemoryBytes2_WriteAt_Proxy( 
    IDebugMemoryBytes2 * This,
    /* [in] */ IDebugMemoryContext2 *pStartContext,
    /* [in] */ DWORD dwCount,
    /* [length_is][size_is][in] */ BYTE *rgbMemory);


void __RPC_STUB IDebugMemoryBytes2_WriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMemoryBytes2_GetSize_Proxy( 
    IDebugMemoryBytes2 * This,
    /* [out] */ UINT64 *pqwSize);


void __RPC_STUB IDebugMemoryBytes2_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMemoryBytes2_INTERFACE_DEFINED__ */


#ifndef __IDebugDisassemblyStream2_INTERFACE_DEFINED__
#define __IDebugDisassemblyStream2_INTERFACE_DEFINED__

/* interface IDebugDisassemblyStream2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugDisassemblyStream2_0001
    {	DSF_ADDRESS	= 0x1,
	DSF_ADDRESSOFFSET	= 0x2,
	DSF_CODEBYTES	= 0x4,
	DSF_OPCODE	= 0x8,
	DSF_OPERANDS	= 0x10,
	DSF_SYMBOL	= 0x20,
	DSF_CODELOCATIONID	= 0x40,
	DSF_POSITION	= 0x80,
	DSF_DOCUMENTURL	= 0x100,
	DSF_BYTEOFFSET	= 0x200,
	DSF_FLAGS	= 0x400,
	DSF_OPERANDS_SYMBOLS	= 0x10000,
	DSF_ALL	= 0x107ff
    } ;
typedef DWORD DISASSEMBLY_STREAM_FIELDS;


enum __MIDL_IDebugDisassemblyStream2_0002
    {	DF_DOCUMENTCHANGE	= 0x1,
	DF_DISABLED	= 0x2,
	DF_INSTRUCTION_ACTIVE	= 0x4,
	DF_DATA	= 0x8,
	DF_HASSOURCE	= 0x10
    } ;
typedef DWORD DISASSEMBLY_FLAGS;

typedef struct tagDisassemblyData
    {
    DISASSEMBLY_STREAM_FIELDS dwFields;
    BSTR bstrAddress;
    BSTR bstrAddressOffset;
    BSTR bstrCodeBytes;
    BSTR bstrOpcode;
    BSTR bstrOperands;
    BSTR bstrSymbol;
    UINT64 uCodeLocationId;
    TEXT_POSITION posBeg;
    TEXT_POSITION posEnd;
    BSTR bstrDocumentUrl;
    DWORD dwByteOffset;
    DISASSEMBLY_FLAGS dwFlags;
    } 	DisassemblyData;


enum __MIDL_IDebugDisassemblyStream2_0003
    {	SEEK_START_BEGIN	= 0x1,
	SEEK_START_END	= 0x2,
	SEEK_START_CURRENT	= 0x3,
	SEEK_START_CODECONTEXT	= 0x4,
	SEEK_START_CODELOCID	= 0x5
    } ;
typedef DWORD SEEK_START;


EXTERN_C const IID IID_IDebugDisassemblyStream2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e5b017fe-dfb0-411c-8266-7c64d6f519f8")
    IDebugDisassemblyStream2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [in] */ DWORD dwInstructions,
            /* [in] */ DISASSEMBLY_STREAM_FIELDS dwFields,
            /* [out] */ DWORD *pdwInstructionsRead,
            /* [length_is][size_is][out] */ DisassemblyData *prgDisassembly) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ SEEK_START dwSeekStart,
            /* [in] */ IDebugCodeContext2 *pCodeContext,
            /* [in] */ UINT64 uCodeLocationId,
            /* [in] */ INT64 iInstructions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodeLocationId( 
            /* [in] */ IDebugCodeContext2 *pCodeContext,
            /* [out] */ UINT64 *puCodeLocationId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodeContext( 
            /* [in] */ UINT64 uCodeLocationId,
            /* [out] */ IDebugCodeContext2 **ppCodeContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentLocation( 
            /* [out] */ UINT64 *puCodeLocationId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocument( 
            /* [in] */ BSTR bstrDocumentUrl,
            /* [out] */ IDebugDocument2 **ppDocument) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScope( 
            /* [out] */ DISASSEMBLY_STREAM_SCOPE *pdwScope) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ UINT64 *pnSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDisassemblyStream2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDisassemblyStream2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDisassemblyStream2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDisassemblyStream2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            IDebugDisassemblyStream2 * This,
            /* [in] */ DWORD dwInstructions,
            /* [in] */ DISASSEMBLY_STREAM_FIELDS dwFields,
            /* [out] */ DWORD *pdwInstructionsRead,
            /* [length_is][size_is][out] */ DisassemblyData *prgDisassembly);
        
        HRESULT ( STDMETHODCALLTYPE *Seek )( 
            IDebugDisassemblyStream2 * This,
            /* [in] */ SEEK_START dwSeekStart,
            /* [in] */ IDebugCodeContext2 *pCodeContext,
            /* [in] */ UINT64 uCodeLocationId,
            /* [in] */ INT64 iInstructions);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodeLocationId )( 
            IDebugDisassemblyStream2 * This,
            /* [in] */ IDebugCodeContext2 *pCodeContext,
            /* [out] */ UINT64 *puCodeLocationId);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodeContext )( 
            IDebugDisassemblyStream2 * This,
            /* [in] */ UINT64 uCodeLocationId,
            /* [out] */ IDebugCodeContext2 **ppCodeContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentLocation )( 
            IDebugDisassemblyStream2 * This,
            /* [out] */ UINT64 *puCodeLocationId);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocument )( 
            IDebugDisassemblyStream2 * This,
            /* [in] */ BSTR bstrDocumentUrl,
            /* [out] */ IDebugDocument2 **ppDocument);
        
        HRESULT ( STDMETHODCALLTYPE *GetScope )( 
            IDebugDisassemblyStream2 * This,
            /* [out] */ DISASSEMBLY_STREAM_SCOPE *pdwScope);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugDisassemblyStream2 * This,
            /* [out] */ UINT64 *pnSize);
        
        END_INTERFACE
    } IDebugDisassemblyStream2Vtbl;

    interface IDebugDisassemblyStream2
    {
        CONST_VTBL struct IDebugDisassemblyStream2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDisassemblyStream2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDisassemblyStream2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDisassemblyStream2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDisassemblyStream2_Read(This,dwInstructions,dwFields,pdwInstructionsRead,prgDisassembly)	\
    (This)->lpVtbl -> Read(This,dwInstructions,dwFields,pdwInstructionsRead,prgDisassembly)

#define IDebugDisassemblyStream2_Seek(This,dwSeekStart,pCodeContext,uCodeLocationId,iInstructions)	\
    (This)->lpVtbl -> Seek(This,dwSeekStart,pCodeContext,uCodeLocationId,iInstructions)

#define IDebugDisassemblyStream2_GetCodeLocationId(This,pCodeContext,puCodeLocationId)	\
    (This)->lpVtbl -> GetCodeLocationId(This,pCodeContext,puCodeLocationId)

#define IDebugDisassemblyStream2_GetCodeContext(This,uCodeLocationId,ppCodeContext)	\
    (This)->lpVtbl -> GetCodeContext(This,uCodeLocationId,ppCodeContext)

#define IDebugDisassemblyStream2_GetCurrentLocation(This,puCodeLocationId)	\
    (This)->lpVtbl -> GetCurrentLocation(This,puCodeLocationId)

#define IDebugDisassemblyStream2_GetDocument(This,bstrDocumentUrl,ppDocument)	\
    (This)->lpVtbl -> GetDocument(This,bstrDocumentUrl,ppDocument)

#define IDebugDisassemblyStream2_GetScope(This,pdwScope)	\
    (This)->lpVtbl -> GetScope(This,pdwScope)

#define IDebugDisassemblyStream2_GetSize(This,pnSize)	\
    (This)->lpVtbl -> GetSize(This,pnSize)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDisassemblyStream2_Read_Proxy( 
    IDebugDisassemblyStream2 * This,
    /* [in] */ DWORD dwInstructions,
    /* [in] */ DISASSEMBLY_STREAM_FIELDS dwFields,
    /* [out] */ DWORD *pdwInstructionsRead,
    /* [length_is][size_is][out] */ DisassemblyData *prgDisassembly);


void __RPC_STUB IDebugDisassemblyStream2_Read_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDisassemblyStream2_Seek_Proxy( 
    IDebugDisassemblyStream2 * This,
    /* [in] */ SEEK_START dwSeekStart,
    /* [in] */ IDebugCodeContext2 *pCodeContext,
    /* [in] */ UINT64 uCodeLocationId,
    /* [in] */ INT64 iInstructions);


void __RPC_STUB IDebugDisassemblyStream2_Seek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDisassemblyStream2_GetCodeLocationId_Proxy( 
    IDebugDisassemblyStream2 * This,
    /* [in] */ IDebugCodeContext2 *pCodeContext,
    /* [out] */ UINT64 *puCodeLocationId);


void __RPC_STUB IDebugDisassemblyStream2_GetCodeLocationId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDisassemblyStream2_GetCodeContext_Proxy( 
    IDebugDisassemblyStream2 * This,
    /* [in] */ UINT64 uCodeLocationId,
    /* [out] */ IDebugCodeContext2 **ppCodeContext);


void __RPC_STUB IDebugDisassemblyStream2_GetCodeContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDisassemblyStream2_GetCurrentLocation_Proxy( 
    IDebugDisassemblyStream2 * This,
    /* [out] */ UINT64 *puCodeLocationId);


void __RPC_STUB IDebugDisassemblyStream2_GetCurrentLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDisassemblyStream2_GetDocument_Proxy( 
    IDebugDisassemblyStream2 * This,
    /* [in] */ BSTR bstrDocumentUrl,
    /* [out] */ IDebugDocument2 **ppDocument);


void __RPC_STUB IDebugDisassemblyStream2_GetDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDisassemblyStream2_GetScope_Proxy( 
    IDebugDisassemblyStream2 * This,
    /* [out] */ DISASSEMBLY_STREAM_SCOPE *pdwScope);


void __RPC_STUB IDebugDisassemblyStream2_GetScope_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDisassemblyStream2_GetSize_Proxy( 
    IDebugDisassemblyStream2 * This,
    /* [out] */ UINT64 *pnSize);


void __RPC_STUB IDebugDisassemblyStream2_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDisassemblyStream2_INTERFACE_DEFINED__ */


#ifndef __IDebugDocumentContext2_INTERFACE_DEFINED__
#define __IDebugDocumentContext2_INTERFACE_DEFINED__

/* interface IDebugDocumentContext2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugDocumentContext2_0001
    {	DOCCONTEXT_EQUAL	= 0x1,
	DOCCONTEXT_LESS_THAN	= 0x2,
	DOCCONTEXT_GREATER_THAN	= 0x3,
	DOCCONTEXT_SAME_DOCUMENT	= 0x4
    } ;
typedef DWORD DOCCONTEXT_COMPARE;


EXTERN_C const IID IID_IDebugDocumentContext2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("931516ad-b600-419c-88fc-dcf5183b5fa9")
    IDebugDocumentContext2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDocument( 
            /* [out] */ IDebugDocument2 **ppDocument) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [in] */ GETNAME_TYPE gnType,
            /* [out] */ BSTR *pbstrFileName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumCodeContexts( 
            /* [out] */ IEnumDebugCodeContexts2 **ppEnumCodeCxts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguageInfo( 
            /* [full][out][in] */ BSTR *pbstrLanguage,
            /* [full][out][in] */ GUID *pguidLanguage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatementRange( 
            /* [full][out][in] */ TEXT_POSITION *pBegPosition,
            /* [full][out][in] */ TEXT_POSITION *pEndPosition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceRange( 
            /* [full][out][in] */ TEXT_POSITION *pBegPosition,
            /* [full][out][in] */ TEXT_POSITION *pEndPosition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compare( 
            /* [in] */ DOCCONTEXT_COMPARE compare,
            /* [length_is][size_is][in] */ IDebugDocumentContext2 **rgpDocContextSet,
            /* [in] */ DWORD dwDocContextSetLen,
            /* [out] */ DWORD *pdwDocContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ int nCount,
            /* [out] */ IDebugDocumentContext2 **ppDocContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDocumentContext2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDocumentContext2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDocumentContext2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDocumentContext2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocument )( 
            IDebugDocumentContext2 * This,
            /* [out] */ IDebugDocument2 **ppDocument);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugDocumentContext2 * This,
            /* [in] */ GETNAME_TYPE gnType,
            /* [out] */ BSTR *pbstrFileName);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCodeContexts )( 
            IDebugDocumentContext2 * This,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnumCodeCxts);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageInfo )( 
            IDebugDocumentContext2 * This,
            /* [full][out][in] */ BSTR *pbstrLanguage,
            /* [full][out][in] */ GUID *pguidLanguage);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatementRange )( 
            IDebugDocumentContext2 * This,
            /* [full][out][in] */ TEXT_POSITION *pBegPosition,
            /* [full][out][in] */ TEXT_POSITION *pEndPosition);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceRange )( 
            IDebugDocumentContext2 * This,
            /* [full][out][in] */ TEXT_POSITION *pBegPosition,
            /* [full][out][in] */ TEXT_POSITION *pEndPosition);
        
        HRESULT ( STDMETHODCALLTYPE *Compare )( 
            IDebugDocumentContext2 * This,
            /* [in] */ DOCCONTEXT_COMPARE compare,
            /* [length_is][size_is][in] */ IDebugDocumentContext2 **rgpDocContextSet,
            /* [in] */ DWORD dwDocContextSetLen,
            /* [out] */ DWORD *pdwDocContext);
        
        HRESULT ( STDMETHODCALLTYPE *Seek )( 
            IDebugDocumentContext2 * This,
            /* [in] */ int nCount,
            /* [out] */ IDebugDocumentContext2 **ppDocContext);
        
        END_INTERFACE
    } IDebugDocumentContext2Vtbl;

    interface IDebugDocumentContext2
    {
        CONST_VTBL struct IDebugDocumentContext2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDocumentContext2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDocumentContext2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDocumentContext2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDocumentContext2_GetDocument(This,ppDocument)	\
    (This)->lpVtbl -> GetDocument(This,ppDocument)

#define IDebugDocumentContext2_GetName(This,gnType,pbstrFileName)	\
    (This)->lpVtbl -> GetName(This,gnType,pbstrFileName)

#define IDebugDocumentContext2_EnumCodeContexts(This,ppEnumCodeCxts)	\
    (This)->lpVtbl -> EnumCodeContexts(This,ppEnumCodeCxts)

#define IDebugDocumentContext2_GetLanguageInfo(This,pbstrLanguage,pguidLanguage)	\
    (This)->lpVtbl -> GetLanguageInfo(This,pbstrLanguage,pguidLanguage)

#define IDebugDocumentContext2_GetStatementRange(This,pBegPosition,pEndPosition)	\
    (This)->lpVtbl -> GetStatementRange(This,pBegPosition,pEndPosition)

#define IDebugDocumentContext2_GetSourceRange(This,pBegPosition,pEndPosition)	\
    (This)->lpVtbl -> GetSourceRange(This,pBegPosition,pEndPosition)

#define IDebugDocumentContext2_Compare(This,compare,rgpDocContextSet,dwDocContextSetLen,pdwDocContext)	\
    (This)->lpVtbl -> Compare(This,compare,rgpDocContextSet,dwDocContextSetLen,pdwDocContext)

#define IDebugDocumentContext2_Seek(This,nCount,ppDocContext)	\
    (This)->lpVtbl -> Seek(This,nCount,ppDocContext)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDocumentContext2_GetDocument_Proxy( 
    IDebugDocumentContext2 * This,
    /* [out] */ IDebugDocument2 **ppDocument);


void __RPC_STUB IDebugDocumentContext2_GetDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentContext2_GetName_Proxy( 
    IDebugDocumentContext2 * This,
    /* [in] */ GETNAME_TYPE gnType,
    /* [out] */ BSTR *pbstrFileName);


void __RPC_STUB IDebugDocumentContext2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentContext2_EnumCodeContexts_Proxy( 
    IDebugDocumentContext2 * This,
    /* [out] */ IEnumDebugCodeContexts2 **ppEnumCodeCxts);


void __RPC_STUB IDebugDocumentContext2_EnumCodeContexts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentContext2_GetLanguageInfo_Proxy( 
    IDebugDocumentContext2 * This,
    /* [full][out][in] */ BSTR *pbstrLanguage,
    /* [full][out][in] */ GUID *pguidLanguage);


void __RPC_STUB IDebugDocumentContext2_GetLanguageInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentContext2_GetStatementRange_Proxy( 
    IDebugDocumentContext2 * This,
    /* [full][out][in] */ TEXT_POSITION *pBegPosition,
    /* [full][out][in] */ TEXT_POSITION *pEndPosition);


void __RPC_STUB IDebugDocumentContext2_GetStatementRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentContext2_GetSourceRange_Proxy( 
    IDebugDocumentContext2 * This,
    /* [full][out][in] */ TEXT_POSITION *pBegPosition,
    /* [full][out][in] */ TEXT_POSITION *pEndPosition);


void __RPC_STUB IDebugDocumentContext2_GetSourceRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentContext2_Compare_Proxy( 
    IDebugDocumentContext2 * This,
    /* [in] */ DOCCONTEXT_COMPARE compare,
    /* [length_is][size_is][in] */ IDebugDocumentContext2 **rgpDocContextSet,
    /* [in] */ DWORD dwDocContextSetLen,
    /* [out] */ DWORD *pdwDocContext);


void __RPC_STUB IDebugDocumentContext2_Compare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentContext2_Seek_Proxy( 
    IDebugDocumentContext2 * This,
    /* [in] */ int nCount,
    /* [out] */ IDebugDocumentContext2 **ppDocContext);


void __RPC_STUB IDebugDocumentContext2_Seek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDocumentContext2_INTERFACE_DEFINED__ */


#ifndef __IDebugExpressionContext2_INTERFACE_DEFINED__
#define __IDebugExpressionContext2_INTERFACE_DEFINED__

/* interface IDebugExpressionContext2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugExpressionContext2_0001
    {	PARSE_EXPRESSION	= 0x1,
	PARSE_FUNCTION_AS_ADDRESS	= 0x2
    } ;
typedef DWORD PARSEFLAGS;


EXTERN_C const IID IID_IDebugExpressionContext2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37a44580-d5fc-473e-a048-21702ebfc466")
    IDebugExpressionContext2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParseText( 
            /* [in] */ LPCOLESTR pszCode,
            /* [in] */ PARSEFLAGS dwFlags,
            /* [in] */ UINT nRadix,
            /* [out] */ IDebugExpression2 **ppExpr,
            /* [out] */ BSTR *pbstrError,
            /* [out] */ UINT *pichError) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugExpressionContext2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugExpressionContext2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugExpressionContext2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugExpressionContext2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugExpressionContext2 * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *ParseText )( 
            IDebugExpressionContext2 * This,
            /* [in] */ LPCOLESTR pszCode,
            /* [in] */ PARSEFLAGS dwFlags,
            /* [in] */ UINT nRadix,
            /* [out] */ IDebugExpression2 **ppExpr,
            /* [out] */ BSTR *pbstrError,
            /* [out] */ UINT *pichError);
        
        END_INTERFACE
    } IDebugExpressionContext2Vtbl;

    interface IDebugExpressionContext2
    {
        CONST_VTBL struct IDebugExpressionContext2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugExpressionContext2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugExpressionContext2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugExpressionContext2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugExpressionContext2_GetName(This,pbstrName)	\
    (This)->lpVtbl -> GetName(This,pbstrName)

#define IDebugExpressionContext2_ParseText(This,pszCode,dwFlags,nRadix,ppExpr,pbstrError,pichError)	\
    (This)->lpVtbl -> ParseText(This,pszCode,dwFlags,nRadix,ppExpr,pbstrError,pichError)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugExpressionContext2_GetName_Proxy( 
    IDebugExpressionContext2 * This,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugExpressionContext2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugExpressionContext2_ParseText_Proxy( 
    IDebugExpressionContext2 * This,
    /* [in] */ LPCOLESTR pszCode,
    /* [in] */ PARSEFLAGS dwFlags,
    /* [in] */ UINT nRadix,
    /* [out] */ IDebugExpression2 **ppExpr,
    /* [out] */ BSTR *pbstrError,
    /* [out] */ UINT *pichError);


void __RPC_STUB IDebugExpressionContext2_ParseText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugExpressionContext2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msdbg_0359 */
/* [local] */ 


enum __MIDL___MIDL_itf_msdbg_0359_0001
    {	BPT_NONE	= 0,
	BPT_CODE	= 0x1,
	BPT_DATA	= 0x2,
	BPT_SPECIAL	= 0x3
    } ;
typedef DWORD BP_TYPE;


enum __MIDL___MIDL_itf_msdbg_0359_0002
    {	BPLT_NONE	= 0,
	BPLT_FILE_LINE	= 0x10000,
	BPLT_FUNC_OFFSET	= 0x20000,
	BPLT_CONTEXT	= 0x30000,
	BPLT_STRING	= 0x40000,
	BPLT_ADDRESS	= 0x50000,
	BPLT_RESOLUTION	= 0x60000,
	BPLT_CODE_FILE_LINE	= BPT_CODE | BPLT_FILE_LINE,
	BPLT_CODE_FUNC_OFFSET	= BPT_CODE | BPLT_FUNC_OFFSET,
	BPLT_CODE_CONTEXT	= BPT_CODE | BPLT_CONTEXT,
	BPLT_CODE_STRING	= BPT_CODE | BPLT_STRING,
	BPLT_CODE_ADDRESS	= BPT_CODE | BPLT_ADDRESS,
	BPLT_DATA_STRING	= BPT_DATA | BPLT_STRING,
	BPLT_TYPE_MASK	= 0xffff,
	BPLT_LOCATION_TYPE_MASK	= 0xffff0000
    } ;
typedef DWORD BP_LOCATION_TYPE;

typedef struct _BP_LOCATION_CODE_FILE_LINE
    {
    BSTR bstrContext;
    IDebugDocumentPosition2 *pDocPos;
    } 	BP_LOCATION_CODE_FILE_LINE;

typedef struct _BP_LOCATION_CODE_FUNC_OFFSET
    {
    BSTR bstrContext;
    IDebugFunctionPosition2 *pFuncPos;
    } 	BP_LOCATION_CODE_FUNC_OFFSET;

typedef struct _BP_LOCATION_CODE_CONTEXT
    {
    IDebugCodeContext2 *pCodeContext;
    } 	BP_LOCATION_CODE_CONTEXT;

typedef struct _BP_LOCATION_CODE_STRING
    {
    BSTR bstrContext;
    BSTR bstrCodeExpr;
    } 	BP_LOCATION_CODE_STRING;

typedef struct _BP_LOCATION_CODE_ADDRESS
    {
    BSTR bstrContext;
    BSTR bstrModuleUrl;
    BSTR bstrFunction;
    BSTR bstrAddress;
    } 	BP_LOCATION_CODE_ADDRESS;

typedef struct _BP_LOCATION_DATA_STRING
    {
    IDebugThread2 *pThread;
    BSTR bstrContext;
    BSTR bstrDataExpr;
    DWORD dwNumElements;
    } 	BP_LOCATION_DATA_STRING;

typedef struct _BP_LOCATION_RESOLUTION
    {
    IDebugBreakpointResolution2 *pResolution;
    } 	BP_LOCATION_RESOLUTION;

typedef struct _BP_LOCATION
    {
    BP_LOCATION_TYPE bpLocationType;
    /* [switch_is] */ /* [switch_type] */ union __MIDL___MIDL_itf_msdbg_0359_0003
        {
        /* [case()] */ BP_LOCATION_CODE_FILE_LINE bplocCodeFileLine;
        /* [case()] */ BP_LOCATION_CODE_FUNC_OFFSET bplocCodeFuncOffset;
        /* [case()] */ BP_LOCATION_CODE_CONTEXT bplocCodeContext;
        /* [case()] */ BP_LOCATION_CODE_STRING bplocCodeString;
        /* [case()] */ BP_LOCATION_CODE_ADDRESS bplocCodeAddress;
        /* [case()] */ BP_LOCATION_DATA_STRING bplocDataString;
        /* [case()] */ BP_LOCATION_RESOLUTION bplocResolution;
        /* [default] */ DWORD unused;
        } 	bpLocation;
    } 	BP_LOCATION;


enum __MIDL___MIDL_itf_msdbg_0359_0004
    {	BP_PASSCOUNT_NONE	= 0,
	BP_PASSCOUNT_EQUAL	= 0x1,
	BP_PASSCOUNT_EQUAL_OR_GREATER	= 0x2,
	BP_PASSCOUNT_MOD	= 0x3
    } ;
typedef DWORD BP_PASSCOUNT_STYLE;

typedef struct _BP_PASSCOUNT
    {
    DWORD dwPassCount;
    BP_PASSCOUNT_STYLE stylePassCount;
    } 	BP_PASSCOUNT;


enum __MIDL___MIDL_itf_msdbg_0359_0005
    {	BP_COND_NONE	= 0,
	BP_COND_WHEN_TRUE	= 0x1,
	BP_COND_WHEN_CHANGED	= 0x2
    } ;
typedef DWORD BP_COND_STYLE;

typedef struct _BP_CONDITION
    {
    IDebugThread2 *pThread;
    BP_COND_STYLE styleCondition;
    BSTR bstrContext;
    BSTR bstrCondition;
    UINT nRadix;
    } 	BP_CONDITION;


enum __MIDL___MIDL_itf_msdbg_0359_0006
    {	BP_FLAG_NONE	= 0,
	BP_FLAG_MAP_DOCPOSITION	= 0x1
    } ;
typedef DWORD BP_FLAGS;


enum __MIDL___MIDL_itf_msdbg_0359_0007
    {	BPREQI_BPLOCATION	= 0x1,
	BPREQI_LANGUAGE	= 0x2,
	BPREQI_PROGRAM	= 0x4,
	BPREQI_PROGRAMNAME	= 0x8,
	BPREQI_THREAD	= 0x10,
	BPREQI_THREADNAME	= 0x20,
	BPREQI_PASSCOUNT	= 0x40,
	BPREQI_CONDITION	= 0x80,
	BPREQI_FLAGS	= 0x100,
	BPREQI_ALLFIELDS	= 0xffffffff
    } ;
typedef DWORD BPREQI_FIELDS;

typedef struct _BP_REQUEST_INFO
    {
    BPREQI_FIELDS dwFields;
    GUID guidLanguage;
    BP_LOCATION bpLocation;
    IDebugProgram2 *pProgram;
    BSTR bstrProgramName;
    IDebugThread2 *pThread;
    BSTR bstrThreadName;
    BP_CONDITION bpCondition;
    BP_PASSCOUNT bpPassCount;
    BP_FLAGS dwFlags;
    } 	BP_REQUEST_INFO;



extern RPC_IF_HANDLE __MIDL_itf_msdbg_0359_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdbg_0359_v0_0_s_ifspec;

#ifndef __IDebugBreakpointRequest2_INTERFACE_DEFINED__
#define __IDebugBreakpointRequest2_INTERFACE_DEFINED__

/* interface IDebugBreakpointRequest2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugBreakpointRequest2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6015fd18-8257-4df3-ac42-f074dedd4cbd")
    IDebugBreakpointRequest2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLocationType( 
            /* [out] */ BP_LOCATION_TYPE *pBPLocationType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRequestInfo( 
            /* [in] */ BPREQI_FIELDS dwFields,
            /* [out] */ BP_REQUEST_INFO *pBPRequestInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBreakpointRequest2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBreakpointRequest2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBreakpointRequest2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBreakpointRequest2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocationType )( 
            IDebugBreakpointRequest2 * This,
            /* [out] */ BP_LOCATION_TYPE *pBPLocationType);
        
        HRESULT ( STDMETHODCALLTYPE *GetRequestInfo )( 
            IDebugBreakpointRequest2 * This,
            /* [in] */ BPREQI_FIELDS dwFields,
            /* [out] */ BP_REQUEST_INFO *pBPRequestInfo);
        
        END_INTERFACE
    } IDebugBreakpointRequest2Vtbl;

    interface IDebugBreakpointRequest2
    {
        CONST_VTBL struct IDebugBreakpointRequest2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBreakpointRequest2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBreakpointRequest2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBreakpointRequest2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBreakpointRequest2_GetLocationType(This,pBPLocationType)	\
    (This)->lpVtbl -> GetLocationType(This,pBPLocationType)

#define IDebugBreakpointRequest2_GetRequestInfo(This,dwFields,pBPRequestInfo)	\
    (This)->lpVtbl -> GetRequestInfo(This,dwFields,pBPRequestInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBreakpointRequest2_GetLocationType_Proxy( 
    IDebugBreakpointRequest2 * This,
    /* [out] */ BP_LOCATION_TYPE *pBPLocationType);


void __RPC_STUB IDebugBreakpointRequest2_GetLocationType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBreakpointRequest2_GetRequestInfo_Proxy( 
    IDebugBreakpointRequest2 * This,
    /* [in] */ BPREQI_FIELDS dwFields,
    /* [out] */ BP_REQUEST_INFO *pBPRequestInfo);


void __RPC_STUB IDebugBreakpointRequest2_GetRequestInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBreakpointRequest2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msdbg_0360 */
/* [local] */ 

typedef struct _BP_RESOLUTION_CODE
    {
    IDebugCodeContext2 *pCodeContext;
    } 	BP_RESOLUTION_CODE;


enum __MIDL___MIDL_itf_msdbg_0360_0001
    {	BP_RES_DATA_EMULATED	= 0x1
    } ;
typedef DWORD BP_RES_DATA_FLAGS;

typedef struct _BP_RESOLUTION_DATA
    {
    BSTR bstrDataExpr;
    BSTR bstrFunc;
    BSTR bstrImage;
    BP_RES_DATA_FLAGS dwFlags;
    } 	BP_RESOLUTION_DATA;

typedef struct _BP_RESOLUTION_LOCATION
    {
    BP_TYPE bpType;
    /* [switch_is] */ /* [switch_type] */ union __MIDL___MIDL_itf_msdbg_0360_0002
        {
        /* [case()] */ BP_RESOLUTION_CODE bpresCode;
        /* [case()] */ BP_RESOLUTION_DATA bpresData;
        /* [default] */ int unused;
        } 	bpResLocation;
    } 	BP_RESOLUTION_LOCATION;


enum __MIDL___MIDL_itf_msdbg_0360_0003
    {	BPRESI_BPRESLOCATION	= 0x1,
	BPRESI_PROGRAM	= 0x2,
	BPRESI_THREAD	= 0x4,
	BPRESI_ALLFIELDS	= 0xffffffff
    } ;
typedef DWORD BPRESI_FIELDS;

typedef struct _BP_RESOLUTION_INFO
    {
    BPRESI_FIELDS dwFields;
    BP_RESOLUTION_LOCATION bpResLocation;
    IDebugProgram2 *pProgram;
    IDebugThread2 *pThread;
    } 	BP_RESOLUTION_INFO;



extern RPC_IF_HANDLE __MIDL_itf_msdbg_0360_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdbg_0360_v0_0_s_ifspec;

#ifndef __IDebugBreakpointResolution2_INTERFACE_DEFINED__
#define __IDebugBreakpointResolution2_INTERFACE_DEFINED__

/* interface IDebugBreakpointResolution2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugBreakpointResolution2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b7e66f28-035a-401a-afc7-2e300bd29711")
    IDebugBreakpointResolution2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetBreakpointType( 
            /* [out] */ BP_TYPE *pBPType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResolutionInfo( 
            /* [in] */ BPRESI_FIELDS dwFields,
            /* [out] */ BP_RESOLUTION_INFO *pBPResolutionInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBreakpointResolution2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBreakpointResolution2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBreakpointResolution2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBreakpointResolution2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetBreakpointType )( 
            IDebugBreakpointResolution2 * This,
            /* [out] */ BP_TYPE *pBPType);
        
        HRESULT ( STDMETHODCALLTYPE *GetResolutionInfo )( 
            IDebugBreakpointResolution2 * This,
            /* [in] */ BPRESI_FIELDS dwFields,
            /* [out] */ BP_RESOLUTION_INFO *pBPResolutionInfo);
        
        END_INTERFACE
    } IDebugBreakpointResolution2Vtbl;

    interface IDebugBreakpointResolution2
    {
        CONST_VTBL struct IDebugBreakpointResolution2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBreakpointResolution2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBreakpointResolution2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBreakpointResolution2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBreakpointResolution2_GetBreakpointType(This,pBPType)	\
    (This)->lpVtbl -> GetBreakpointType(This,pBPType)

#define IDebugBreakpointResolution2_GetResolutionInfo(This,dwFields,pBPResolutionInfo)	\
    (This)->lpVtbl -> GetResolutionInfo(This,dwFields,pBPResolutionInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBreakpointResolution2_GetBreakpointType_Proxy( 
    IDebugBreakpointResolution2 * This,
    /* [out] */ BP_TYPE *pBPType);


void __RPC_STUB IDebugBreakpointResolution2_GetBreakpointType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBreakpointResolution2_GetResolutionInfo_Proxy( 
    IDebugBreakpointResolution2 * This,
    /* [in] */ BPRESI_FIELDS dwFields,
    /* [out] */ BP_RESOLUTION_INFO *pBPResolutionInfo);


void __RPC_STUB IDebugBreakpointResolution2_GetResolutionInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBreakpointResolution2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msdbg_0361 */
/* [local] */ 


enum __MIDL___MIDL_itf_msdbg_0361_0001
    {	BPET_NONE	= 0,
	BPET_TYPE_WARNING	= 0x1,
	BPET_TYPE_ERROR	= 0x2,
	BPET_SEV_HIGH	= 0xf000000,
	BPET_SEV_GENERAL	= 0x7000000,
	BPET_SEV_LOW	= 0x1000000,
	BPET_TYPE_MASK	= 0xffff,
	BPET_SEV_MASK	= 0xffff0000,
	BPET_GENERAL_WARNING	= BPET_SEV_GENERAL | BPET_TYPE_WARNING,
	BPET_GENERAL_ERROR	= BPET_SEV_GENERAL | BPET_TYPE_ERROR,
	BPET_ALL	= 0xffffffff
    } ;
typedef DWORD BP_ERROR_TYPE;


enum __MIDL___MIDL_itf_msdbg_0361_0002
    {	BPERESI_BPRESLOCATION	= 0x1,
	BPERESI_PROGRAM	= 0x2,
	BPERESI_THREAD	= 0x4,
	BPERESI_MESSAGE	= 0x8,
	BPERESI_TYPE	= 0x10,
	BPERESI_ALLFIELDS	= 0xffffffff
    } ;
typedef DWORD BPERESI_FIELDS;

typedef struct _BP_ERROR_RESOLUTION_INFO
    {
    BPERESI_FIELDS dwFields;
    BP_RESOLUTION_LOCATION bpResLocation;
    IDebugProgram2 *pProgram;
    IDebugThread2 *pThread;
    BSTR bstrMessage;
    BP_ERROR_TYPE dwType;
    } 	BP_ERROR_RESOLUTION_INFO;



extern RPC_IF_HANDLE __MIDL_itf_msdbg_0361_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdbg_0361_v0_0_s_ifspec;

#ifndef __IDebugErrorBreakpointResolution2_INTERFACE_DEFINED__
#define __IDebugErrorBreakpointResolution2_INTERFACE_DEFINED__

/* interface IDebugErrorBreakpointResolution2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugErrorBreakpointResolution2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("603aedf8-9575-4d30-b8ca-124d1c98ebd8")
    IDebugErrorBreakpointResolution2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetBreakpointType( 
            /* [out] */ BP_TYPE *pBPType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetResolutionInfo( 
            /* [in] */ BPERESI_FIELDS dwFields,
            /* [out] */ BP_ERROR_RESOLUTION_INFO *pErrorResolutionInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugErrorBreakpointResolution2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugErrorBreakpointResolution2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugErrorBreakpointResolution2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugErrorBreakpointResolution2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetBreakpointType )( 
            IDebugErrorBreakpointResolution2 * This,
            /* [out] */ BP_TYPE *pBPType);
        
        HRESULT ( STDMETHODCALLTYPE *GetResolutionInfo )( 
            IDebugErrorBreakpointResolution2 * This,
            /* [in] */ BPERESI_FIELDS dwFields,
            /* [out] */ BP_ERROR_RESOLUTION_INFO *pErrorResolutionInfo);
        
        END_INTERFACE
    } IDebugErrorBreakpointResolution2Vtbl;

    interface IDebugErrorBreakpointResolution2
    {
        CONST_VTBL struct IDebugErrorBreakpointResolution2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugErrorBreakpointResolution2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugErrorBreakpointResolution2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugErrorBreakpointResolution2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugErrorBreakpointResolution2_GetBreakpointType(This,pBPType)	\
    (This)->lpVtbl -> GetBreakpointType(This,pBPType)

#define IDebugErrorBreakpointResolution2_GetResolutionInfo(This,dwFields,pErrorResolutionInfo)	\
    (This)->lpVtbl -> GetResolutionInfo(This,dwFields,pErrorResolutionInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugErrorBreakpointResolution2_GetBreakpointType_Proxy( 
    IDebugErrorBreakpointResolution2 * This,
    /* [out] */ BP_TYPE *pBPType);


void __RPC_STUB IDebugErrorBreakpointResolution2_GetBreakpointType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugErrorBreakpointResolution2_GetResolutionInfo_Proxy( 
    IDebugErrorBreakpointResolution2 * This,
    /* [in] */ BPERESI_FIELDS dwFields,
    /* [out] */ BP_ERROR_RESOLUTION_INFO *pErrorResolutionInfo);


void __RPC_STUB IDebugErrorBreakpointResolution2_GetResolutionInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugErrorBreakpointResolution2_INTERFACE_DEFINED__ */


#ifndef __IDebugBoundBreakpoint2_INTERFACE_DEFINED__
#define __IDebugBoundBreakpoint2_INTERFACE_DEFINED__

/* interface IDebugBoundBreakpoint2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugBoundBreakpoint2_0001
    {	BPS_NONE	= 0,
	BPS_DELETED	= 0x1,
	BPS_DISABLED	= 0x2,
	BPS_ENABLED	= 0x3
    } ;
typedef DWORD BP_STATE;


EXTERN_C const IID IID_IDebugBoundBreakpoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d533d975-3f32-4876-abd0-6d37fda563e7")
    IDebugBoundBreakpoint2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPendingBreakpoint( 
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBreakpoint) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetState( 
            /* [out] */ BP_STATE *pState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHitCount( 
            /* [out] */ DWORD *pdwHitCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBreakpointResolution( 
            /* [out] */ IDebugBreakpointResolution2 **ppBPResolution) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Enable( 
            /* [in] */ BOOL fEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHitCount( 
            /* [in] */ DWORD dwHitCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCondition( 
            /* [in] */ BP_CONDITION bpCondition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPassCount( 
            /* [in] */ BP_PASSCOUNT bpPassCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBoundBreakpoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBoundBreakpoint2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBoundBreakpoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBoundBreakpoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPendingBreakpoint )( 
            IDebugBoundBreakpoint2 * This,
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBreakpoint);
        
        HRESULT ( STDMETHODCALLTYPE *GetState )( 
            IDebugBoundBreakpoint2 * This,
            /* [out] */ BP_STATE *pState);
        
        HRESULT ( STDMETHODCALLTYPE *GetHitCount )( 
            IDebugBoundBreakpoint2 * This,
            /* [out] */ DWORD *pdwHitCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetBreakpointResolution )( 
            IDebugBoundBreakpoint2 * This,
            /* [out] */ IDebugBreakpointResolution2 **ppBPResolution);
        
        HRESULT ( STDMETHODCALLTYPE *Enable )( 
            IDebugBoundBreakpoint2 * This,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *SetHitCount )( 
            IDebugBoundBreakpoint2 * This,
            /* [in] */ DWORD dwHitCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetCondition )( 
            IDebugBoundBreakpoint2 * This,
            /* [in] */ BP_CONDITION bpCondition);
        
        HRESULT ( STDMETHODCALLTYPE *SetPassCount )( 
            IDebugBoundBreakpoint2 * This,
            /* [in] */ BP_PASSCOUNT bpPassCount);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IDebugBoundBreakpoint2 * This);
        
        END_INTERFACE
    } IDebugBoundBreakpoint2Vtbl;

    interface IDebugBoundBreakpoint2
    {
        CONST_VTBL struct IDebugBoundBreakpoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBoundBreakpoint2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBoundBreakpoint2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBoundBreakpoint2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBoundBreakpoint2_GetPendingBreakpoint(This,ppPendingBreakpoint)	\
    (This)->lpVtbl -> GetPendingBreakpoint(This,ppPendingBreakpoint)

#define IDebugBoundBreakpoint2_GetState(This,pState)	\
    (This)->lpVtbl -> GetState(This,pState)

#define IDebugBoundBreakpoint2_GetHitCount(This,pdwHitCount)	\
    (This)->lpVtbl -> GetHitCount(This,pdwHitCount)

#define IDebugBoundBreakpoint2_GetBreakpointResolution(This,ppBPResolution)	\
    (This)->lpVtbl -> GetBreakpointResolution(This,ppBPResolution)

#define IDebugBoundBreakpoint2_Enable(This,fEnable)	\
    (This)->lpVtbl -> Enable(This,fEnable)

#define IDebugBoundBreakpoint2_SetHitCount(This,dwHitCount)	\
    (This)->lpVtbl -> SetHitCount(This,dwHitCount)

#define IDebugBoundBreakpoint2_SetCondition(This,bpCondition)	\
    (This)->lpVtbl -> SetCondition(This,bpCondition)

#define IDebugBoundBreakpoint2_SetPassCount(This,bpPassCount)	\
    (This)->lpVtbl -> SetPassCount(This,bpPassCount)

#define IDebugBoundBreakpoint2_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_GetPendingBreakpoint_Proxy( 
    IDebugBoundBreakpoint2 * This,
    /* [out] */ IDebugPendingBreakpoint2 **ppPendingBreakpoint);


void __RPC_STUB IDebugBoundBreakpoint2_GetPendingBreakpoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_GetState_Proxy( 
    IDebugBoundBreakpoint2 * This,
    /* [out] */ BP_STATE *pState);


void __RPC_STUB IDebugBoundBreakpoint2_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_GetHitCount_Proxy( 
    IDebugBoundBreakpoint2 * This,
    /* [out] */ DWORD *pdwHitCount);


void __RPC_STUB IDebugBoundBreakpoint2_GetHitCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_GetBreakpointResolution_Proxy( 
    IDebugBoundBreakpoint2 * This,
    /* [out] */ IDebugBreakpointResolution2 **ppBPResolution);


void __RPC_STUB IDebugBoundBreakpoint2_GetBreakpointResolution_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_Enable_Proxy( 
    IDebugBoundBreakpoint2 * This,
    /* [in] */ BOOL fEnable);


void __RPC_STUB IDebugBoundBreakpoint2_Enable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_SetHitCount_Proxy( 
    IDebugBoundBreakpoint2 * This,
    /* [in] */ DWORD dwHitCount);


void __RPC_STUB IDebugBoundBreakpoint2_SetHitCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_SetCondition_Proxy( 
    IDebugBoundBreakpoint2 * This,
    /* [in] */ BP_CONDITION bpCondition);


void __RPC_STUB IDebugBoundBreakpoint2_SetCondition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_SetPassCount_Proxy( 
    IDebugBoundBreakpoint2 * This,
    /* [in] */ BP_PASSCOUNT bpPassCount);


void __RPC_STUB IDebugBoundBreakpoint2_SetPassCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugBoundBreakpoint2_Delete_Proxy( 
    IDebugBoundBreakpoint2 * This);


void __RPC_STUB IDebugBoundBreakpoint2_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBoundBreakpoint2_INTERFACE_DEFINED__ */


#ifndef __IDebugPendingBreakpoint2_INTERFACE_DEFINED__
#define __IDebugPendingBreakpoint2_INTERFACE_DEFINED__

/* interface IDebugPendingBreakpoint2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugPendingBreakpoint2_0001
    {	PBPS_NONE	= 0,
	PBPS_DELETED	= 0x1,
	PBPS_DISABLED	= 0x2,
	PBPS_ENABLED	= 0x3
    } ;
typedef DWORD PENDING_BP_STATE;


enum __MIDL_IDebugPendingBreakpoint2_0002
    {	PBPSF_NONE	= 0,
	PBPSF_VIRTUALIZED	= 0x1
    } ;
typedef DWORD PENDING_BP_STATE_FLAGS;

typedef struct _tagPENDING_BP_STATE_INFO
    {
    PENDING_BP_STATE state;
    PENDING_BP_STATE_FLAGS flags;
    } 	PENDING_BP_STATE_INFO;


EXTERN_C const IID IID_IDebugPendingBreakpoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6e215ef3-e44c-44d1-b7ba-b2401f7dc23d")
    IDebugPendingBreakpoint2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CanBind( 
            /* [out] */ IEnumDebugErrorBreakpoints2 **ppErrorEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Bind( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetState( 
            /* [out] */ PENDING_BP_STATE_INFO *pState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBreakpointRequest( 
            /* [out] */ IDebugBreakpointRequest2 **ppBPRequest) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Virtualize( 
            /* [in] */ BOOL fVirtualize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Enable( 
            /* [in] */ BOOL fEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCondition( 
            /* [in] */ BP_CONDITION bpCondition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPassCount( 
            /* [in] */ BP_PASSCOUNT bpPassCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumBoundBreakpoints( 
            /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumErrorBreakpoints( 
            /* [in] */ BP_ERROR_TYPE bpErrorType,
            /* [out] */ IEnumDebugErrorBreakpoints2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPendingBreakpoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPendingBreakpoint2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPendingBreakpoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPendingBreakpoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CanBind )( 
            IDebugPendingBreakpoint2 * This,
            /* [out] */ IEnumDebugErrorBreakpoints2 **ppErrorEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Bind )( 
            IDebugPendingBreakpoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetState )( 
            IDebugPendingBreakpoint2 * This,
            /* [out] */ PENDING_BP_STATE_INFO *pState);
        
        HRESULT ( STDMETHODCALLTYPE *GetBreakpointRequest )( 
            IDebugPendingBreakpoint2 * This,
            /* [out] */ IDebugBreakpointRequest2 **ppBPRequest);
        
        HRESULT ( STDMETHODCALLTYPE *Virtualize )( 
            IDebugPendingBreakpoint2 * This,
            /* [in] */ BOOL fVirtualize);
        
        HRESULT ( STDMETHODCALLTYPE *Enable )( 
            IDebugPendingBreakpoint2 * This,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *SetCondition )( 
            IDebugPendingBreakpoint2 * This,
            /* [in] */ BP_CONDITION bpCondition);
        
        HRESULT ( STDMETHODCALLTYPE *SetPassCount )( 
            IDebugPendingBreakpoint2 * This,
            /* [in] */ BP_PASSCOUNT bpPassCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumBoundBreakpoints )( 
            IDebugPendingBreakpoint2 * This,
            /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumErrorBreakpoints )( 
            IDebugPendingBreakpoint2 * This,
            /* [in] */ BP_ERROR_TYPE bpErrorType,
            /* [out] */ IEnumDebugErrorBreakpoints2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IDebugPendingBreakpoint2 * This);
        
        END_INTERFACE
    } IDebugPendingBreakpoint2Vtbl;

    interface IDebugPendingBreakpoint2
    {
        CONST_VTBL struct IDebugPendingBreakpoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPendingBreakpoint2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPendingBreakpoint2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPendingBreakpoint2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPendingBreakpoint2_CanBind(This,ppErrorEnum)	\
    (This)->lpVtbl -> CanBind(This,ppErrorEnum)

#define IDebugPendingBreakpoint2_Bind(This)	\
    (This)->lpVtbl -> Bind(This)

#define IDebugPendingBreakpoint2_GetState(This,pState)	\
    (This)->lpVtbl -> GetState(This,pState)

#define IDebugPendingBreakpoint2_GetBreakpointRequest(This,ppBPRequest)	\
    (This)->lpVtbl -> GetBreakpointRequest(This,ppBPRequest)

#define IDebugPendingBreakpoint2_Virtualize(This,fVirtualize)	\
    (This)->lpVtbl -> Virtualize(This,fVirtualize)

#define IDebugPendingBreakpoint2_Enable(This,fEnable)	\
    (This)->lpVtbl -> Enable(This,fEnable)

#define IDebugPendingBreakpoint2_SetCondition(This,bpCondition)	\
    (This)->lpVtbl -> SetCondition(This,bpCondition)

#define IDebugPendingBreakpoint2_SetPassCount(This,bpPassCount)	\
    (This)->lpVtbl -> SetPassCount(This,bpPassCount)

#define IDebugPendingBreakpoint2_EnumBoundBreakpoints(This,ppEnum)	\
    (This)->lpVtbl -> EnumBoundBreakpoints(This,ppEnum)

#define IDebugPendingBreakpoint2_EnumErrorBreakpoints(This,bpErrorType,ppEnum)	\
    (This)->lpVtbl -> EnumErrorBreakpoints(This,bpErrorType,ppEnum)

#define IDebugPendingBreakpoint2_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_CanBind_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [out] */ IEnumDebugErrorBreakpoints2 **ppErrorEnum);


void __RPC_STUB IDebugPendingBreakpoint2_CanBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_Bind_Proxy( 
    IDebugPendingBreakpoint2 * This);


void __RPC_STUB IDebugPendingBreakpoint2_Bind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_GetState_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [out] */ PENDING_BP_STATE_INFO *pState);


void __RPC_STUB IDebugPendingBreakpoint2_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_GetBreakpointRequest_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [out] */ IDebugBreakpointRequest2 **ppBPRequest);


void __RPC_STUB IDebugPendingBreakpoint2_GetBreakpointRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_Virtualize_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [in] */ BOOL fVirtualize);


void __RPC_STUB IDebugPendingBreakpoint2_Virtualize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_Enable_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [in] */ BOOL fEnable);


void __RPC_STUB IDebugPendingBreakpoint2_Enable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_SetCondition_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [in] */ BP_CONDITION bpCondition);


void __RPC_STUB IDebugPendingBreakpoint2_SetCondition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_SetPassCount_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [in] */ BP_PASSCOUNT bpPassCount);


void __RPC_STUB IDebugPendingBreakpoint2_SetPassCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_EnumBoundBreakpoints_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum);


void __RPC_STUB IDebugPendingBreakpoint2_EnumBoundBreakpoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_EnumErrorBreakpoints_Proxy( 
    IDebugPendingBreakpoint2 * This,
    /* [in] */ BP_ERROR_TYPE bpErrorType,
    /* [out] */ IEnumDebugErrorBreakpoints2 **ppEnum);


void __RPC_STUB IDebugPendingBreakpoint2_EnumErrorBreakpoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPendingBreakpoint2_Delete_Proxy( 
    IDebugPendingBreakpoint2 * This);


void __RPC_STUB IDebugPendingBreakpoint2_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPendingBreakpoint2_INTERFACE_DEFINED__ */


#ifndef __IDebugErrorBreakpoint2_INTERFACE_DEFINED__
#define __IDebugErrorBreakpoint2_INTERFACE_DEFINED__

/* interface IDebugErrorBreakpoint2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugErrorBreakpoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74570ef7-2486-4089-800c-56e3829b5ca4")
    IDebugErrorBreakpoint2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPendingBreakpoint( 
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBreakpoint) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBreakpointResolution( 
            /* [out] */ IDebugErrorBreakpointResolution2 **ppErrorResolution) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugErrorBreakpoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugErrorBreakpoint2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugErrorBreakpoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugErrorBreakpoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPendingBreakpoint )( 
            IDebugErrorBreakpoint2 * This,
            /* [out] */ IDebugPendingBreakpoint2 **ppPendingBreakpoint);
        
        HRESULT ( STDMETHODCALLTYPE *GetBreakpointResolution )( 
            IDebugErrorBreakpoint2 * This,
            /* [out] */ IDebugErrorBreakpointResolution2 **ppErrorResolution);
        
        END_INTERFACE
    } IDebugErrorBreakpoint2Vtbl;

    interface IDebugErrorBreakpoint2
    {
        CONST_VTBL struct IDebugErrorBreakpoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugErrorBreakpoint2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugErrorBreakpoint2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugErrorBreakpoint2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugErrorBreakpoint2_GetPendingBreakpoint(This,ppPendingBreakpoint)	\
    (This)->lpVtbl -> GetPendingBreakpoint(This,ppPendingBreakpoint)

#define IDebugErrorBreakpoint2_GetBreakpointResolution(This,ppErrorResolution)	\
    (This)->lpVtbl -> GetBreakpointResolution(This,ppErrorResolution)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugErrorBreakpoint2_GetPendingBreakpoint_Proxy( 
    IDebugErrorBreakpoint2 * This,
    /* [out] */ IDebugPendingBreakpoint2 **ppPendingBreakpoint);


void __RPC_STUB IDebugErrorBreakpoint2_GetPendingBreakpoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugErrorBreakpoint2_GetBreakpointResolution_Proxy( 
    IDebugErrorBreakpoint2 * This,
    /* [out] */ IDebugErrorBreakpointResolution2 **ppErrorResolution);


void __RPC_STUB IDebugErrorBreakpoint2_GetBreakpointResolution_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugErrorBreakpoint2_INTERFACE_DEFINED__ */


#ifndef __IDebugExpression2_INTERFACE_DEFINED__
#define __IDebugExpression2_INTERFACE_DEFINED__

/* interface IDebugExpression2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugExpression2_0001
    {	EVAL_RETURNVALUE	= 0x2,
	EVAL_NOSIDEEFFECTS	= 0x4,
	EVAL_ALLOWBPS	= 0x8,
	EVAL_ALLOWERRORREPORT	= 0x10,
	EVAL_FUNCTION_AS_ADDRESS	= 0x40,
	EVAL_NOFUNCEVAL	= 0x80,
	EVAL_NOEVENTS	= 0x1000
    } ;
typedef DWORD EVALFLAGS;


EXTERN_C const IID IID_IDebugExpression2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f7473fd0-7f75-478d-8d85-a485204e7a2d")
    IDebugExpression2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EvaluateAsync( 
            /* [in] */ EVALFLAGS dwFlags,
            /* [in] */ IDebugEventCallback2 *pExprCallback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Abort( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EvaluateSync( 
            /* [in] */ EVALFLAGS dwFlags,
            /* [in] */ DWORD dwTimeout,
            /* [in] */ IDebugEventCallback2 *pExprCallback,
            /* [out] */ IDebugProperty2 **ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugExpression2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugExpression2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugExpression2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugExpression2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EvaluateAsync )( 
            IDebugExpression2 * This,
            /* [in] */ EVALFLAGS dwFlags,
            /* [in] */ IDebugEventCallback2 *pExprCallback);
        
        HRESULT ( STDMETHODCALLTYPE *Abort )( 
            IDebugExpression2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EvaluateSync )( 
            IDebugExpression2 * This,
            /* [in] */ EVALFLAGS dwFlags,
            /* [in] */ DWORD dwTimeout,
            /* [in] */ IDebugEventCallback2 *pExprCallback,
            /* [out] */ IDebugProperty2 **ppResult);
        
        END_INTERFACE
    } IDebugExpression2Vtbl;

    interface IDebugExpression2
    {
        CONST_VTBL struct IDebugExpression2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugExpression2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugExpression2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugExpression2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugExpression2_EvaluateAsync(This,dwFlags,pExprCallback)	\
    (This)->lpVtbl -> EvaluateAsync(This,dwFlags,pExprCallback)

#define IDebugExpression2_Abort(This)	\
    (This)->lpVtbl -> Abort(This)

#define IDebugExpression2_EvaluateSync(This,dwFlags,dwTimeout,pExprCallback,ppResult)	\
    (This)->lpVtbl -> EvaluateSync(This,dwFlags,dwTimeout,pExprCallback,ppResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugExpression2_EvaluateAsync_Proxy( 
    IDebugExpression2 * This,
    /* [in] */ EVALFLAGS dwFlags,
    /* [in] */ IDebugEventCallback2 *pExprCallback);


void __RPC_STUB IDebugExpression2_EvaluateAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugExpression2_Abort_Proxy( 
    IDebugExpression2 * This);


void __RPC_STUB IDebugExpression2_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugExpression2_EvaluateSync_Proxy( 
    IDebugExpression2 * This,
    /* [in] */ EVALFLAGS dwFlags,
    /* [in] */ DWORD dwTimeout,
    /* [in] */ IDebugEventCallback2 *pExprCallback,
    /* [out] */ IDebugProperty2 **ppResult);


void __RPC_STUB IDebugExpression2_EvaluateSync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugExpression2_INTERFACE_DEFINED__ */


#ifndef __IDebugModule2_INTERFACE_DEFINED__
#define __IDebugModule2_INTERFACE_DEFINED__

/* interface IDebugModule2 */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugModule2_0001
    {	MODULE_FLAG_NONE	= 0,
	MODULE_FLAG_SYSTEM	= 0x1,
	MODULE_FLAG_SYMBOLS	= 0x2,
	MODULE_FLAG_64BIT	= 0x4
    } ;
typedef DWORD MODULE_FLAGS;


enum __MIDL_IDebugModule2_0002
    {	MIF_NONE	= 0,
	MIF_NAME	= 0x1,
	MIF_URL	= 0x2,
	MIF_VERSION	= 0x4,
	MIF_DEBUGMESSAGE	= 0x8,
	MIF_LOADADDRESS	= 0x10,
	MIF_PREFFEREDADDRESS	= 0x20,
	MIF_SIZE	= 0x40,
	MIF_LOADORDER	= 0x80,
	MIF_TIMESTAMP	= 0x100,
	MIF_URLSYMBOLLOCATION	= 0x200,
	MIF_FLAGS	= 0x400,
	MIF_ALLFIELDS	= 0x7ff
    } ;
typedef DWORD MODULE_INFO_FIELDS;

typedef struct _tagMODULE_INFO
    {
    MODULE_INFO_FIELDS dwValidFields;
    BSTR m_bstrName;
    BSTR m_bstrUrl;
    BSTR m_bstrVersion;
    BSTR m_bstrDebugMessage;
    UINT64 m_addrLoadAddress;
    UINT64 m_addrPreferredLoadAddress;
    DWORD m_dwSize;
    DWORD m_dwLoadOrder;
    FILETIME m_TimeStamp;
    BSTR m_bstrUrlSymbolLocation;
    MODULE_FLAGS m_dwModuleFlags;
    } 	MODULE_INFO;


EXTERN_C const IID IID_IDebugModule2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0fc1cd9a-b912-405c-a04c-43ce02cd7df2")
    IDebugModule2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ MODULE_INFO_FIELDS dwFields,
            /* [out] */ MODULE_INFO *pInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReloadSymbols( 
            /* [full][in] */ LPCOLESTR pszUrlToSymbols,
            /* [out] */ BSTR *pbstrDebugMessage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugModule2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugModule2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugModule2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugModule2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugModule2 * This,
            /* [in] */ MODULE_INFO_FIELDS dwFields,
            /* [out] */ MODULE_INFO *pInfo);
        
        HRESULT ( STDMETHODCALLTYPE *ReloadSymbols )( 
            IDebugModule2 * This,
            /* [full][in] */ LPCOLESTR pszUrlToSymbols,
            /* [out] */ BSTR *pbstrDebugMessage);
        
        END_INTERFACE
    } IDebugModule2Vtbl;

    interface IDebugModule2
    {
        CONST_VTBL struct IDebugModule2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugModule2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugModule2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugModule2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugModule2_GetInfo(This,dwFields,pInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pInfo)

#define IDebugModule2_ReloadSymbols(This,pszUrlToSymbols,pbstrDebugMessage)	\
    (This)->lpVtbl -> ReloadSymbols(This,pszUrlToSymbols,pbstrDebugMessage)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugModule2_GetInfo_Proxy( 
    IDebugModule2 * This,
    /* [in] */ MODULE_INFO_FIELDS dwFields,
    /* [out] */ MODULE_INFO *pInfo);


void __RPC_STUB IDebugModule2_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugModule2_ReloadSymbols_Proxy( 
    IDebugModule2 * This,
    /* [full][in] */ LPCOLESTR pszUrlToSymbols,
    /* [out] */ BSTR *pbstrDebugMessage);


void __RPC_STUB IDebugModule2_ReloadSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugModule2_INTERFACE_DEFINED__ */


#ifndef __IDebugModuleManaged_INTERFACE_DEFINED__
#define __IDebugModuleManaged_INTERFACE_DEFINED__

/* interface IDebugModuleManaged */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugModuleManaged;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("232397F8-B232-479d-B1BB-2F044C70A0F9")
    IDebugModuleManaged : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMvid( 
            /* [out] */ GUID *mvid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugModuleManagedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugModuleManaged * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugModuleManaged * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugModuleManaged * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMvid )( 
            IDebugModuleManaged * This,
            /* [out] */ GUID *mvid);
        
        END_INTERFACE
    } IDebugModuleManagedVtbl;

    interface IDebugModuleManaged
    {
        CONST_VTBL struct IDebugModuleManagedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugModuleManaged_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugModuleManaged_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugModuleManaged_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugModuleManaged_GetMvid(This,mvid)	\
    (This)->lpVtbl -> GetMvid(This,mvid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugModuleManaged_GetMvid_Proxy( 
    IDebugModuleManaged * This,
    /* [out] */ GUID *mvid);


void __RPC_STUB IDebugModuleManaged_GetMvid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugModuleManaged_INTERFACE_DEFINED__ */


#ifndef __IDebugDocument2_INTERFACE_DEFINED__
#define __IDebugDocument2_INTERFACE_DEFINED__

/* interface IDebugDocument2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugDocument2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1606dd73-5d5f-405c-b4f4-ce32baba2501")
    IDebugDocument2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [in] */ GETNAME_TYPE gnType,
            /* [out] */ BSTR *pbstrFileName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocumentClassId( 
            /* [out] */ CLSID *pclsid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDocument2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDocument2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDocument2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDocument2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugDocument2 * This,
            /* [in] */ GETNAME_TYPE gnType,
            /* [out] */ BSTR *pbstrFileName);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentClassId )( 
            IDebugDocument2 * This,
            /* [out] */ CLSID *pclsid);
        
        END_INTERFACE
    } IDebugDocument2Vtbl;

    interface IDebugDocument2
    {
        CONST_VTBL struct IDebugDocument2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDocument2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDocument2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDocument2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDocument2_GetName(This,gnType,pbstrFileName)	\
    (This)->lpVtbl -> GetName(This,gnType,pbstrFileName)

#define IDebugDocument2_GetDocumentClassId(This,pclsid)	\
    (This)->lpVtbl -> GetDocumentClassId(This,pclsid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDocument2_GetName_Proxy( 
    IDebugDocument2 * This,
    /* [in] */ GETNAME_TYPE gnType,
    /* [out] */ BSTR *pbstrFileName);


void __RPC_STUB IDebugDocument2_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocument2_GetDocumentClassId_Proxy( 
    IDebugDocument2 * This,
    /* [out] */ CLSID *pclsid);


void __RPC_STUB IDebugDocument2_GetDocumentClassId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDocument2_INTERFACE_DEFINED__ */


#ifndef __IDebugDocumentText2_INTERFACE_DEFINED__
#define __IDebugDocumentText2_INTERFACE_DEFINED__

/* interface IDebugDocumentText2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugDocumentText2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4b0645aa-08ef-4cb9-adb9-0395d6edad35")
    IDebugDocumentText2 : public IDebugDocument2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [full][out][in] */ ULONG *pcNumLines,
            /* [full][out][in] */ ULONG *pcNumChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetText( 
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ ULONG cMaxChars,
            /* [size_is][length_is][out] */ WCHAR *pText,
            /* [out] */ ULONG *pcNumChars) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDocumentText2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDocumentText2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDocumentText2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDocumentText2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IDebugDocumentText2 * This,
            /* [in] */ GETNAME_TYPE gnType,
            /* [out] */ BSTR *pbstrFileName);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentClassId )( 
            IDebugDocumentText2 * This,
            /* [out] */ CLSID *pclsid);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugDocumentText2 * This,
            /* [full][out][in] */ ULONG *pcNumLines,
            /* [full][out][in] */ ULONG *pcNumChars);
        
        HRESULT ( STDMETHODCALLTYPE *GetText )( 
            IDebugDocumentText2 * This,
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ ULONG cMaxChars,
            /* [size_is][length_is][out] */ WCHAR *pText,
            /* [out] */ ULONG *pcNumChars);
        
        END_INTERFACE
    } IDebugDocumentText2Vtbl;

    interface IDebugDocumentText2
    {
        CONST_VTBL struct IDebugDocumentText2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDocumentText2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDocumentText2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDocumentText2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDocumentText2_GetName(This,gnType,pbstrFileName)	\
    (This)->lpVtbl -> GetName(This,gnType,pbstrFileName)

#define IDebugDocumentText2_GetDocumentClassId(This,pclsid)	\
    (This)->lpVtbl -> GetDocumentClassId(This,pclsid)


#define IDebugDocumentText2_GetSize(This,pcNumLines,pcNumChars)	\
    (This)->lpVtbl -> GetSize(This,pcNumLines,pcNumChars)

#define IDebugDocumentText2_GetText(This,pos,cMaxChars,pText,pcNumChars)	\
    (This)->lpVtbl -> GetText(This,pos,cMaxChars,pText,pcNumChars)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDocumentText2_GetSize_Proxy( 
    IDebugDocumentText2 * This,
    /* [full][out][in] */ ULONG *pcNumLines,
    /* [full][out][in] */ ULONG *pcNumChars);


void __RPC_STUB IDebugDocumentText2_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentText2_GetText_Proxy( 
    IDebugDocumentText2 * This,
    /* [in] */ TEXT_POSITION pos,
    /* [in] */ ULONG cMaxChars,
    /* [size_is][length_is][out] */ WCHAR *pText,
    /* [out] */ ULONG *pcNumChars);


void __RPC_STUB IDebugDocumentText2_GetText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDocumentText2_INTERFACE_DEFINED__ */


#ifndef __IDebugDocumentPosition2_INTERFACE_DEFINED__
#define __IDebugDocumentPosition2_INTERFACE_DEFINED__

/* interface IDebugDocumentPosition2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugDocumentPosition2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bdde0eee-3b8d-4c82-b529-33f16b42832e")
    IDebugDocumentPosition2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetFileName( 
            /* [out] */ BSTR *pbstrFileName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocument( 
            /* [out] */ IDebugDocument2 **ppDoc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsPositionInDocument( 
            /* [in] */ IDebugDocument2 *pDoc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRange( 
            /* [full][out][in] */ TEXT_POSITION *pBegPosition,
            /* [full][out][in] */ TEXT_POSITION *pEndPosition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDocumentPosition2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDocumentPosition2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDocumentPosition2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDocumentPosition2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileName )( 
            IDebugDocumentPosition2 * This,
            /* [out] */ BSTR *pbstrFileName);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocument )( 
            IDebugDocumentPosition2 * This,
            /* [out] */ IDebugDocument2 **ppDoc);
        
        HRESULT ( STDMETHODCALLTYPE *IsPositionInDocument )( 
            IDebugDocumentPosition2 * This,
            /* [in] */ IDebugDocument2 *pDoc);
        
        HRESULT ( STDMETHODCALLTYPE *GetRange )( 
            IDebugDocumentPosition2 * This,
            /* [full][out][in] */ TEXT_POSITION *pBegPosition,
            /* [full][out][in] */ TEXT_POSITION *pEndPosition);
        
        END_INTERFACE
    } IDebugDocumentPosition2Vtbl;

    interface IDebugDocumentPosition2
    {
        CONST_VTBL struct IDebugDocumentPosition2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDocumentPosition2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDocumentPosition2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDocumentPosition2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDocumentPosition2_GetFileName(This,pbstrFileName)	\
    (This)->lpVtbl -> GetFileName(This,pbstrFileName)

#define IDebugDocumentPosition2_GetDocument(This,ppDoc)	\
    (This)->lpVtbl -> GetDocument(This,ppDoc)

#define IDebugDocumentPosition2_IsPositionInDocument(This,pDoc)	\
    (This)->lpVtbl -> IsPositionInDocument(This,pDoc)

#define IDebugDocumentPosition2_GetRange(This,pBegPosition,pEndPosition)	\
    (This)->lpVtbl -> GetRange(This,pBegPosition,pEndPosition)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDocumentPosition2_GetFileName_Proxy( 
    IDebugDocumentPosition2 * This,
    /* [out] */ BSTR *pbstrFileName);


void __RPC_STUB IDebugDocumentPosition2_GetFileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentPosition2_GetDocument_Proxy( 
    IDebugDocumentPosition2 * This,
    /* [out] */ IDebugDocument2 **ppDoc);


void __RPC_STUB IDebugDocumentPosition2_GetDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentPosition2_IsPositionInDocument_Proxy( 
    IDebugDocumentPosition2 * This,
    /* [in] */ IDebugDocument2 *pDoc);


void __RPC_STUB IDebugDocumentPosition2_IsPositionInDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentPosition2_GetRange_Proxy( 
    IDebugDocumentPosition2 * This,
    /* [full][out][in] */ TEXT_POSITION *pBegPosition,
    /* [full][out][in] */ TEXT_POSITION *pEndPosition);


void __RPC_STUB IDebugDocumentPosition2_GetRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDocumentPosition2_INTERFACE_DEFINED__ */


#ifndef __IDebugDocumentPositionOffset2_INTERFACE_DEFINED__
#define __IDebugDocumentPositionOffset2_INTERFACE_DEFINED__

/* interface IDebugDocumentPositionOffset2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugDocumentPositionOffset2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("037edd0f-8551-4f7f-8ca0-04d9e29f532d")
    IDebugDocumentPositionOffset2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRange( 
            /* [full][out][in] */ DWORD *pdwBegOffset,
            /* [full][out][in] */ DWORD *pdwEndOffset) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDocumentPositionOffset2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDocumentPositionOffset2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDocumentPositionOffset2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDocumentPositionOffset2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRange )( 
            IDebugDocumentPositionOffset2 * This,
            /* [full][out][in] */ DWORD *pdwBegOffset,
            /* [full][out][in] */ DWORD *pdwEndOffset);
        
        END_INTERFACE
    } IDebugDocumentPositionOffset2Vtbl;

    interface IDebugDocumentPositionOffset2
    {
        CONST_VTBL struct IDebugDocumentPositionOffset2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDocumentPositionOffset2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDocumentPositionOffset2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDocumentPositionOffset2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDocumentPositionOffset2_GetRange(This,pdwBegOffset,pdwEndOffset)	\
    (This)->lpVtbl -> GetRange(This,pdwBegOffset,pdwEndOffset)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDocumentPositionOffset2_GetRange_Proxy( 
    IDebugDocumentPositionOffset2 * This,
    /* [full][out][in] */ DWORD *pdwBegOffset,
    /* [full][out][in] */ DWORD *pdwEndOffset);


void __RPC_STUB IDebugDocumentPositionOffset2_GetRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDocumentPositionOffset2_INTERFACE_DEFINED__ */


#ifndef __IDebugFunctionPosition2_INTERFACE_DEFINED__
#define __IDebugFunctionPosition2_INTERFACE_DEFINED__

/* interface IDebugFunctionPosition2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugFunctionPosition2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1ede3b4b-35e7-4b97-8133-02845d600174")
    IDebugFunctionPosition2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetFunctionName( 
            /* [out] */ BSTR *pbstrFunctionName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOffset( 
            /* [full][out][in] */ TEXT_POSITION *pPosition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugFunctionPosition2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugFunctionPosition2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugFunctionPosition2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugFunctionPosition2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFunctionName )( 
            IDebugFunctionPosition2 * This,
            /* [out] */ BSTR *pbstrFunctionName);
        
        HRESULT ( STDMETHODCALLTYPE *GetOffset )( 
            IDebugFunctionPosition2 * This,
            /* [full][out][in] */ TEXT_POSITION *pPosition);
        
        END_INTERFACE
    } IDebugFunctionPosition2Vtbl;

    interface IDebugFunctionPosition2
    {
        CONST_VTBL struct IDebugFunctionPosition2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugFunctionPosition2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugFunctionPosition2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugFunctionPosition2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugFunctionPosition2_GetFunctionName(This,pbstrFunctionName)	\
    (This)->lpVtbl -> GetFunctionName(This,pbstrFunctionName)

#define IDebugFunctionPosition2_GetOffset(This,pPosition)	\
    (This)->lpVtbl -> GetOffset(This,pPosition)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugFunctionPosition2_GetFunctionName_Proxy( 
    IDebugFunctionPosition2 * This,
    /* [out] */ BSTR *pbstrFunctionName);


void __RPC_STUB IDebugFunctionPosition2_GetFunctionName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugFunctionPosition2_GetOffset_Proxy( 
    IDebugFunctionPosition2 * This,
    /* [full][out][in] */ TEXT_POSITION *pPosition);


void __RPC_STUB IDebugFunctionPosition2_GetOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugFunctionPosition2_INTERFACE_DEFINED__ */


#ifndef __IDebugDocumentTextEvents2_INTERFACE_DEFINED__
#define __IDebugDocumentTextEvents2_INTERFACE_DEFINED__

/* interface IDebugDocumentTextEvents2 */
/* [unique][uuid][object] */ 

typedef DWORD TEXT_DOC_ATTR_2;

#define	TEXT_DOC_ATTR_READONLY_2	( 0x1 )


EXTERN_C const IID IID_IDebugDocumentTextEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33ec72e3-002f-4966-b91c-5ce2f7ba5124")
    IDebugDocumentTextEvents2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE onDestroy( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE onInsertText( 
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ DWORD dwNumToInsert) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE onRemoveText( 
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ DWORD dwNumToRemove) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE onReplaceText( 
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ DWORD dwNumToReplace) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE onUpdateTextAttributes( 
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ DWORD dwNumToUpdate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE onUpdateDocumentAttributes( 
            /* [in] */ TEXT_DOC_ATTR_2 textdocattr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDocumentTextEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDocumentTextEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDocumentTextEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDocumentTextEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *onDestroy )( 
            IDebugDocumentTextEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *onInsertText )( 
            IDebugDocumentTextEvents2 * This,
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ DWORD dwNumToInsert);
        
        HRESULT ( STDMETHODCALLTYPE *onRemoveText )( 
            IDebugDocumentTextEvents2 * This,
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ DWORD dwNumToRemove);
        
        HRESULT ( STDMETHODCALLTYPE *onReplaceText )( 
            IDebugDocumentTextEvents2 * This,
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ DWORD dwNumToReplace);
        
        HRESULT ( STDMETHODCALLTYPE *onUpdateTextAttributes )( 
            IDebugDocumentTextEvents2 * This,
            /* [in] */ TEXT_POSITION pos,
            /* [in] */ DWORD dwNumToUpdate);
        
        HRESULT ( STDMETHODCALLTYPE *onUpdateDocumentAttributes )( 
            IDebugDocumentTextEvents2 * This,
            /* [in] */ TEXT_DOC_ATTR_2 textdocattr);
        
        END_INTERFACE
    } IDebugDocumentTextEvents2Vtbl;

    interface IDebugDocumentTextEvents2
    {
        CONST_VTBL struct IDebugDocumentTextEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDocumentTextEvents2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDocumentTextEvents2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDocumentTextEvents2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDocumentTextEvents2_onDestroy(This)	\
    (This)->lpVtbl -> onDestroy(This)

#define IDebugDocumentTextEvents2_onInsertText(This,pos,dwNumToInsert)	\
    (This)->lpVtbl -> onInsertText(This,pos,dwNumToInsert)

#define IDebugDocumentTextEvents2_onRemoveText(This,pos,dwNumToRemove)	\
    (This)->lpVtbl -> onRemoveText(This,pos,dwNumToRemove)

#define IDebugDocumentTextEvents2_onReplaceText(This,pos,dwNumToReplace)	\
    (This)->lpVtbl -> onReplaceText(This,pos,dwNumToReplace)

#define IDebugDocumentTextEvents2_onUpdateTextAttributes(This,pos,dwNumToUpdate)	\
    (This)->lpVtbl -> onUpdateTextAttributes(This,pos,dwNumToUpdate)

#define IDebugDocumentTextEvents2_onUpdateDocumentAttributes(This,textdocattr)	\
    (This)->lpVtbl -> onUpdateDocumentAttributes(This,textdocattr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDocumentTextEvents2_onDestroy_Proxy( 
    IDebugDocumentTextEvents2 * This);


void __RPC_STUB IDebugDocumentTextEvents2_onDestroy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentTextEvents2_onInsertText_Proxy( 
    IDebugDocumentTextEvents2 * This,
    /* [in] */ TEXT_POSITION pos,
    /* [in] */ DWORD dwNumToInsert);


void __RPC_STUB IDebugDocumentTextEvents2_onInsertText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentTextEvents2_onRemoveText_Proxy( 
    IDebugDocumentTextEvents2 * This,
    /* [in] */ TEXT_POSITION pos,
    /* [in] */ DWORD dwNumToRemove);


void __RPC_STUB IDebugDocumentTextEvents2_onRemoveText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentTextEvents2_onReplaceText_Proxy( 
    IDebugDocumentTextEvents2 * This,
    /* [in] */ TEXT_POSITION pos,
    /* [in] */ DWORD dwNumToReplace);


void __RPC_STUB IDebugDocumentTextEvents2_onReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentTextEvents2_onUpdateTextAttributes_Proxy( 
    IDebugDocumentTextEvents2 * This,
    /* [in] */ TEXT_POSITION pos,
    /* [in] */ DWORD dwNumToUpdate);


void __RPC_STUB IDebugDocumentTextEvents2_onUpdateTextAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDocumentTextEvents2_onUpdateDocumentAttributes_Proxy( 
    IDebugDocumentTextEvents2 * This,
    /* [in] */ TEXT_DOC_ATTR_2 textdocattr);


void __RPC_STUB IDebugDocumentTextEvents2_onUpdateDocumentAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDocumentTextEvents2_INTERFACE_DEFINED__ */


#ifndef __IDebugQueryEngine2_INTERFACE_DEFINED__
#define __IDebugQueryEngine2_INTERFACE_DEFINED__

/* interface IDebugQueryEngine2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugQueryEngine2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c989adc9-f305-4ef5-8ca2-20898e8d0e28")
    IDebugQueryEngine2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetEngineInterface( 
            /* [out] */ IUnknown **ppUnk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugQueryEngine2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugQueryEngine2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugQueryEngine2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugQueryEngine2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEngineInterface )( 
            IDebugQueryEngine2 * This,
            /* [out] */ IUnknown **ppUnk);
        
        END_INTERFACE
    } IDebugQueryEngine2Vtbl;

    interface IDebugQueryEngine2
    {
        CONST_VTBL struct IDebugQueryEngine2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugQueryEngine2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugQueryEngine2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugQueryEngine2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugQueryEngine2_GetEngineInterface(This,ppUnk)	\
    (This)->lpVtbl -> GetEngineInterface(This,ppUnk)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugQueryEngine2_GetEngineInterface_Proxy( 
    IDebugQueryEngine2 * This,
    /* [out] */ IUnknown **ppUnk);


void __RPC_STUB IDebugQueryEngine2_GetEngineInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugQueryEngine2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugProcesses2_INTERFACE_DEFINED__
#define __IEnumDebugProcesses2_INTERFACE_DEFINED__

/* interface IEnumDebugProcesses2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugProcesses2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96c74ef4-185d-4f9a-8a43-4d2723758e0a")
    IEnumDebugProcesses2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugProcess2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugProcesses2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugProcesses2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugProcesses2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugProcesses2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugProcesses2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugProcesses2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugProcess2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugProcesses2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugProcesses2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugProcesses2 * This,
            /* [out] */ IEnumDebugProcesses2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugProcesses2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugProcesses2Vtbl;

    interface IEnumDebugProcesses2
    {
        CONST_VTBL struct IEnumDebugProcesses2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugProcesses2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugProcesses2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugProcesses2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugProcesses2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugProcesses2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugProcesses2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugProcesses2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugProcesses2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugProcesses2_Next_Proxy( 
    IEnumDebugProcesses2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugProcess2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugProcesses2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugProcesses2_Skip_Proxy( 
    IEnumDebugProcesses2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugProcesses2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugProcesses2_Reset_Proxy( 
    IEnumDebugProcesses2 * This);


void __RPC_STUB IEnumDebugProcesses2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugProcesses2_Clone_Proxy( 
    IEnumDebugProcesses2 * This,
    /* [out] */ IEnumDebugProcesses2 **ppEnum);


void __RPC_STUB IEnumDebugProcesses2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugProcesses2_GetCount_Proxy( 
    IEnumDebugProcesses2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugProcesses2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugProcesses2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugPrograms2_INTERFACE_DEFINED__
#define __IEnumDebugPrograms2_INTERFACE_DEFINED__

/* interface IEnumDebugPrograms2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugPrograms2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8d14bca6-34ce-4efe-ac7e-0abc61dadb20")
    IEnumDebugPrograms2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugProgram2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugPrograms2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugPrograms2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugPrograms2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugPrograms2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugPrograms2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugPrograms2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugProgram2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugPrograms2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugPrograms2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugPrograms2 * This,
            /* [out] */ IEnumDebugPrograms2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugPrograms2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugPrograms2Vtbl;

    interface IEnumDebugPrograms2
    {
        CONST_VTBL struct IEnumDebugPrograms2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugPrograms2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugPrograms2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugPrograms2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugPrograms2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugPrograms2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugPrograms2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugPrograms2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugPrograms2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugPrograms2_Next_Proxy( 
    IEnumDebugPrograms2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugProgram2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugPrograms2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPrograms2_Skip_Proxy( 
    IEnumDebugPrograms2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugPrograms2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPrograms2_Reset_Proxy( 
    IEnumDebugPrograms2 * This);


void __RPC_STUB IEnumDebugPrograms2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPrograms2_Clone_Proxy( 
    IEnumDebugPrograms2 * This,
    /* [out] */ IEnumDebugPrograms2 **ppEnum);


void __RPC_STUB IEnumDebugPrograms2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPrograms2_GetCount_Proxy( 
    IEnumDebugPrograms2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugPrograms2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugPrograms2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugThreads2_INTERFACE_DEFINED__
#define __IEnumDebugThreads2_INTERFACE_DEFINED__

/* interface IEnumDebugThreads2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugThreads2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0d30dc12-c4f8-433d-9fcc-9ff117e5e5f4")
    IEnumDebugThreads2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugThread2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugThreads2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugThreads2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugThreads2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugThreads2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugThreads2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugThreads2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugThread2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugThreads2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugThreads2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugThreads2 * This,
            /* [out] */ IEnumDebugThreads2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugThreads2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugThreads2Vtbl;

    interface IEnumDebugThreads2
    {
        CONST_VTBL struct IEnumDebugThreads2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugThreads2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugThreads2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugThreads2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugThreads2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugThreads2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugThreads2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugThreads2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugThreads2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugThreads2_Next_Proxy( 
    IEnumDebugThreads2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugThread2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugThreads2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugThreads2_Skip_Proxy( 
    IEnumDebugThreads2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugThreads2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugThreads2_Reset_Proxy( 
    IEnumDebugThreads2 * This);


void __RPC_STUB IEnumDebugThreads2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugThreads2_Clone_Proxy( 
    IEnumDebugThreads2 * This,
    /* [out] */ IEnumDebugThreads2 **ppEnum);


void __RPC_STUB IEnumDebugThreads2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugThreads2_GetCount_Proxy( 
    IEnumDebugThreads2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugThreads2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugThreads2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugStackFrames2_INTERFACE_DEFINED__
#define __IEnumDebugStackFrames2_INTERFACE_DEFINED__

/* interface IEnumDebugStackFrames2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugStackFrames2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cd39102b-4b69-4495-8f29-e0b25c4a8855")
    IEnumDebugStackFrames2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugStackFrame2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugStackFrames2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetIndex( 
            /* [in] */ IDebugStackFrame2 *pStackFrame,
            /* [out][in] */ ULONG *pIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugStackFrames2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugStackFrames2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugStackFrames2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugStackFrames2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugStackFrames2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugStackFrame2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugStackFrames2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugStackFrames2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugStackFrames2 * This,
            /* [out] */ IEnumDebugStackFrames2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugStackFrames2 * This,
            /* [out] */ ULONG *pcelt);
        
        HRESULT ( STDMETHODCALLTYPE *GetIndex )( 
            IEnumDebugStackFrames2 * This,
            /* [in] */ IDebugStackFrame2 *pStackFrame,
            /* [out][in] */ ULONG *pIndex);
        
        END_INTERFACE
    } IEnumDebugStackFrames2Vtbl;

    interface IEnumDebugStackFrames2
    {
        CONST_VTBL struct IEnumDebugStackFrames2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugStackFrames2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugStackFrames2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugStackFrames2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugStackFrames2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugStackFrames2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugStackFrames2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugStackFrames2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugStackFrames2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#define IEnumDebugStackFrames2_GetIndex(This,pStackFrame,pIndex)	\
    (This)->lpVtbl -> GetIndex(This,pStackFrame,pIndex)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugStackFrames2_Next_Proxy( 
    IEnumDebugStackFrames2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugStackFrame2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugStackFrames2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugStackFrames2_Skip_Proxy( 
    IEnumDebugStackFrames2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugStackFrames2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugStackFrames2_Reset_Proxy( 
    IEnumDebugStackFrames2 * This);


void __RPC_STUB IEnumDebugStackFrames2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugStackFrames2_Clone_Proxy( 
    IEnumDebugStackFrames2 * This,
    /* [out] */ IEnumDebugStackFrames2 **ppEnum);


void __RPC_STUB IEnumDebugStackFrames2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugStackFrames2_GetCount_Proxy( 
    IEnumDebugStackFrames2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugStackFrames2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugStackFrames2_GetIndex_Proxy( 
    IEnumDebugStackFrames2 * This,
    /* [in] */ IDebugStackFrame2 *pStackFrame,
    /* [out][in] */ ULONG *pIndex);


void __RPC_STUB IEnumDebugStackFrames2_GetIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugStackFrames2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugCodeContexts2_INTERFACE_DEFINED__
#define __IEnumDebugCodeContexts2_INTERFACE_DEFINED__

/* interface IEnumDebugCodeContexts2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugCodeContexts2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ad47a80b-eda7-459e-af82-647cc9fbaa50")
    IEnumDebugCodeContexts2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugCodeContext2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugCodeContexts2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugCodeContexts2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugCodeContexts2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugCodeContexts2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugCodeContexts2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugCodeContext2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugCodeContexts2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugCodeContexts2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugCodeContexts2 * This,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugCodeContexts2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugCodeContexts2Vtbl;

    interface IEnumDebugCodeContexts2
    {
        CONST_VTBL struct IEnumDebugCodeContexts2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugCodeContexts2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugCodeContexts2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugCodeContexts2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugCodeContexts2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugCodeContexts2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugCodeContexts2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugCodeContexts2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugCodeContexts2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugCodeContexts2_Next_Proxy( 
    IEnumDebugCodeContexts2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugCodeContext2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugCodeContexts2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugCodeContexts2_Skip_Proxy( 
    IEnumDebugCodeContexts2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugCodeContexts2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugCodeContexts2_Reset_Proxy( 
    IEnumDebugCodeContexts2 * This);


void __RPC_STUB IEnumDebugCodeContexts2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugCodeContexts2_Clone_Proxy( 
    IEnumDebugCodeContexts2 * This,
    /* [out] */ IEnumDebugCodeContexts2 **ppEnum);


void __RPC_STUB IEnumDebugCodeContexts2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugCodeContexts2_GetCount_Proxy( 
    IEnumDebugCodeContexts2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugCodeContexts2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugCodeContexts2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugBoundBreakpoints2_INTERFACE_DEFINED__
#define __IEnumDebugBoundBreakpoints2_INTERFACE_DEFINED__

/* interface IEnumDebugBoundBreakpoints2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugBoundBreakpoints2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0f6b37e0-fcfe-44d9-9112-394ca9b92114")
    IEnumDebugBoundBreakpoints2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugBoundBreakpoint2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugBoundBreakpoints2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugBoundBreakpoints2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugBoundBreakpoints2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugBoundBreakpoints2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugBoundBreakpoints2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugBoundBreakpoint2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugBoundBreakpoints2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugBoundBreakpoints2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugBoundBreakpoints2 * This,
            /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugBoundBreakpoints2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugBoundBreakpoints2Vtbl;

    interface IEnumDebugBoundBreakpoints2
    {
        CONST_VTBL struct IEnumDebugBoundBreakpoints2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugBoundBreakpoints2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugBoundBreakpoints2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugBoundBreakpoints2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugBoundBreakpoints2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugBoundBreakpoints2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugBoundBreakpoints2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugBoundBreakpoints2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugBoundBreakpoints2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugBoundBreakpoints2_Next_Proxy( 
    IEnumDebugBoundBreakpoints2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugBoundBreakpoint2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugBoundBreakpoints2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugBoundBreakpoints2_Skip_Proxy( 
    IEnumDebugBoundBreakpoints2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugBoundBreakpoints2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugBoundBreakpoints2_Reset_Proxy( 
    IEnumDebugBoundBreakpoints2 * This);


void __RPC_STUB IEnumDebugBoundBreakpoints2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugBoundBreakpoints2_Clone_Proxy( 
    IEnumDebugBoundBreakpoints2 * This,
    /* [out] */ IEnumDebugBoundBreakpoints2 **ppEnum);


void __RPC_STUB IEnumDebugBoundBreakpoints2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugBoundBreakpoints2_GetCount_Proxy( 
    IEnumDebugBoundBreakpoints2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugBoundBreakpoints2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugBoundBreakpoints2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugPendingBreakpoints2_INTERFACE_DEFINED__
#define __IEnumDebugPendingBreakpoints2_INTERFACE_DEFINED__

/* interface IEnumDebugPendingBreakpoints2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugPendingBreakpoints2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70d2dc1e-4dcc-4786-a072-9a3b600c216b")
    IEnumDebugPendingBreakpoints2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugPendingBreakpoint2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugPendingBreakpoints2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugPendingBreakpoints2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugPendingBreakpoints2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugPendingBreakpoints2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugPendingBreakpoints2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugPendingBreakpoints2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugPendingBreakpoint2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugPendingBreakpoints2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugPendingBreakpoints2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugPendingBreakpoints2 * This,
            /* [out] */ IEnumDebugPendingBreakpoints2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugPendingBreakpoints2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugPendingBreakpoints2Vtbl;

    interface IEnumDebugPendingBreakpoints2
    {
        CONST_VTBL struct IEnumDebugPendingBreakpoints2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugPendingBreakpoints2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugPendingBreakpoints2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugPendingBreakpoints2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugPendingBreakpoints2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugPendingBreakpoints2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugPendingBreakpoints2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugPendingBreakpoints2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugPendingBreakpoints2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugPendingBreakpoints2_Next_Proxy( 
    IEnumDebugPendingBreakpoints2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugPendingBreakpoint2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugPendingBreakpoints2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPendingBreakpoints2_Skip_Proxy( 
    IEnumDebugPendingBreakpoints2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugPendingBreakpoints2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPendingBreakpoints2_Reset_Proxy( 
    IEnumDebugPendingBreakpoints2 * This);


void __RPC_STUB IEnumDebugPendingBreakpoints2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPendingBreakpoints2_Clone_Proxy( 
    IEnumDebugPendingBreakpoints2 * This,
    /* [out] */ IEnumDebugPendingBreakpoints2 **ppEnum);


void __RPC_STUB IEnumDebugPendingBreakpoints2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPendingBreakpoints2_GetCount_Proxy( 
    IEnumDebugPendingBreakpoints2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugPendingBreakpoints2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugPendingBreakpoints2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugErrorBreakpoints2_INTERFACE_DEFINED__
#define __IEnumDebugErrorBreakpoints2_INTERFACE_DEFINED__

/* interface IEnumDebugErrorBreakpoints2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugErrorBreakpoints2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e158f5aa-31fe-491b-a9f6-cff934b03a01")
    IEnumDebugErrorBreakpoints2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugErrorBreakpoint2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugErrorBreakpoints2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugErrorBreakpoints2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugErrorBreakpoints2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugErrorBreakpoints2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugErrorBreakpoints2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugErrorBreakpoints2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugErrorBreakpoint2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugErrorBreakpoints2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugErrorBreakpoints2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugErrorBreakpoints2 * This,
            /* [out] */ IEnumDebugErrorBreakpoints2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugErrorBreakpoints2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugErrorBreakpoints2Vtbl;

    interface IEnumDebugErrorBreakpoints2
    {
        CONST_VTBL struct IEnumDebugErrorBreakpoints2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugErrorBreakpoints2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugErrorBreakpoints2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugErrorBreakpoints2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugErrorBreakpoints2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugErrorBreakpoints2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugErrorBreakpoints2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugErrorBreakpoints2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugErrorBreakpoints2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugErrorBreakpoints2_Next_Proxy( 
    IEnumDebugErrorBreakpoints2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugErrorBreakpoint2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugErrorBreakpoints2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugErrorBreakpoints2_Skip_Proxy( 
    IEnumDebugErrorBreakpoints2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugErrorBreakpoints2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugErrorBreakpoints2_Reset_Proxy( 
    IEnumDebugErrorBreakpoints2 * This);


void __RPC_STUB IEnumDebugErrorBreakpoints2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugErrorBreakpoints2_Clone_Proxy( 
    IEnumDebugErrorBreakpoints2 * This,
    /* [out] */ IEnumDebugErrorBreakpoints2 **ppEnum);


void __RPC_STUB IEnumDebugErrorBreakpoints2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugErrorBreakpoints2_GetCount_Proxy( 
    IEnumDebugErrorBreakpoints2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugErrorBreakpoints2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugErrorBreakpoints2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugMachines2_INTERFACE_DEFINED__
#define __IEnumDebugMachines2_INTERFACE_DEFINED__

/* interface IEnumDebugMachines2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugMachines2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61d986ec-1eac-46b6-90ff-402a008f15d1")
    IEnumDebugMachines2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugMachine2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugMachines2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugMachines2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugMachines2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugMachines2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugMachines2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugMachines2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugMachine2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugMachines2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugMachines2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugMachines2 * This,
            /* [out] */ IEnumDebugMachines2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugMachines2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugMachines2Vtbl;

    interface IEnumDebugMachines2
    {
        CONST_VTBL struct IEnumDebugMachines2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugMachines2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugMachines2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugMachines2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugMachines2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugMachines2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugMachines2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugMachines2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugMachines2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugMachines2_Next_Proxy( 
    IEnumDebugMachines2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugMachine2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugMachines2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugMachines2_Skip_Proxy( 
    IEnumDebugMachines2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugMachines2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugMachines2_Reset_Proxy( 
    IEnumDebugMachines2 * This);


void __RPC_STUB IEnumDebugMachines2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugMachines2_Clone_Proxy( 
    IEnumDebugMachines2 * This,
    /* [out] */ IEnumDebugMachines2 **ppEnum);


void __RPC_STUB IEnumDebugMachines2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugMachines2_GetCount_Proxy( 
    IEnumDebugMachines2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugMachines2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugMachines2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugExceptionInfo2_INTERFACE_DEFINED__
#define __IEnumDebugExceptionInfo2_INTERFACE_DEFINED__

/* interface IEnumDebugExceptionInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugExceptionInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8e4bbd34-a2f4-41ef-87b5-c563b4ad6ee7")
    IEnumDebugExceptionInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ EXCEPTION_INFO *rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugExceptionInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugExceptionInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugExceptionInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugExceptionInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugExceptionInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugExceptionInfo2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ EXCEPTION_INFO *rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugExceptionInfo2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugExceptionInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugExceptionInfo2 * This,
            /* [out] */ IEnumDebugExceptionInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugExceptionInfo2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugExceptionInfo2Vtbl;

    interface IEnumDebugExceptionInfo2
    {
        CONST_VTBL struct IEnumDebugExceptionInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugExceptionInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugExceptionInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugExceptionInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugExceptionInfo2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugExceptionInfo2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugExceptionInfo2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugExceptionInfo2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugExceptionInfo2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugExceptionInfo2_Next_Proxy( 
    IEnumDebugExceptionInfo2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ EXCEPTION_INFO *rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugExceptionInfo2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugExceptionInfo2_Skip_Proxy( 
    IEnumDebugExceptionInfo2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugExceptionInfo2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugExceptionInfo2_Reset_Proxy( 
    IEnumDebugExceptionInfo2 * This);


void __RPC_STUB IEnumDebugExceptionInfo2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugExceptionInfo2_Clone_Proxy( 
    IEnumDebugExceptionInfo2 * This,
    /* [out] */ IEnumDebugExceptionInfo2 **ppEnum);


void __RPC_STUB IEnumDebugExceptionInfo2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugExceptionInfo2_GetCount_Proxy( 
    IEnumDebugExceptionInfo2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugExceptionInfo2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugExceptionInfo2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugFrameInfo2_INTERFACE_DEFINED__
#define __IEnumDebugFrameInfo2_INTERFACE_DEFINED__

/* interface IEnumDebugFrameInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugFrameInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("98bbba48-4c4d-4fff-8340-6097bec9c894")
    IEnumDebugFrameInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ FRAMEINFO *rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugFrameInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugFrameInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugFrameInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugFrameInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugFrameInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugFrameInfo2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ FRAMEINFO *rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugFrameInfo2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugFrameInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugFrameInfo2 * This,
            /* [out] */ IEnumDebugFrameInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugFrameInfo2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugFrameInfo2Vtbl;

    interface IEnumDebugFrameInfo2
    {
        CONST_VTBL struct IEnumDebugFrameInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugFrameInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugFrameInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugFrameInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugFrameInfo2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugFrameInfo2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugFrameInfo2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugFrameInfo2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugFrameInfo2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugFrameInfo2_Next_Proxy( 
    IEnumDebugFrameInfo2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ FRAMEINFO *rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugFrameInfo2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFrameInfo2_Skip_Proxy( 
    IEnumDebugFrameInfo2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugFrameInfo2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFrameInfo2_Reset_Proxy( 
    IEnumDebugFrameInfo2 * This);


void __RPC_STUB IEnumDebugFrameInfo2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFrameInfo2_Clone_Proxy( 
    IEnumDebugFrameInfo2 * This,
    /* [out] */ IEnumDebugFrameInfo2 **ppEnum);


void __RPC_STUB IEnumDebugFrameInfo2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFrameInfo2_GetCount_Proxy( 
    IEnumDebugFrameInfo2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugFrameInfo2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugFrameInfo2_INTERFACE_DEFINED__ */


#ifndef __IEnumCodePaths2_INTERFACE_DEFINED__
#define __IEnumCodePaths2_INTERFACE_DEFINED__

/* interface IEnumCodePaths2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumCodePaths2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9b13f80d-cfc6-4b78-81ef-1f7cc33f7639")
    IEnumCodePaths2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ CODE_PATH *rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumCodePaths2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumCodePaths2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumCodePaths2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumCodePaths2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumCodePaths2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumCodePaths2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ CODE_PATH *rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumCodePaths2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumCodePaths2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumCodePaths2 * This,
            /* [out] */ IEnumCodePaths2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumCodePaths2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumCodePaths2Vtbl;

    interface IEnumCodePaths2
    {
        CONST_VTBL struct IEnumCodePaths2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumCodePaths2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumCodePaths2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumCodePaths2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumCodePaths2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumCodePaths2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumCodePaths2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumCodePaths2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumCodePaths2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumCodePaths2_Next_Proxy( 
    IEnumCodePaths2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ CODE_PATH *rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumCodePaths2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumCodePaths2_Skip_Proxy( 
    IEnumCodePaths2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumCodePaths2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumCodePaths2_Reset_Proxy( 
    IEnumCodePaths2 * This);


void __RPC_STUB IEnumCodePaths2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumCodePaths2_Clone_Proxy( 
    IEnumCodePaths2 * This,
    /* [out] */ IEnumCodePaths2 **ppEnum);


void __RPC_STUB IEnumCodePaths2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumCodePaths2_GetCount_Proxy( 
    IEnumCodePaths2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumCodePaths2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumCodePaths2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugModules2_INTERFACE_DEFINED__
#define __IEnumDebugModules2_INTERFACE_DEFINED__

/* interface IEnumDebugModules2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugModules2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4c4a2835-682e-4ce1-aebc-1e6b3a165b44")
    IEnumDebugModules2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugModule2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugModules2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugModules2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugModules2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugModules2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugModules2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugModules2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugModule2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugModules2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugModules2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugModules2 * This,
            /* [out] */ IEnumDebugModules2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugModules2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugModules2Vtbl;

    interface IEnumDebugModules2
    {
        CONST_VTBL struct IEnumDebugModules2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugModules2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugModules2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugModules2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugModules2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugModules2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugModules2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugModules2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugModules2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugModules2_Next_Proxy( 
    IEnumDebugModules2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugModule2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugModules2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugModules2_Skip_Proxy( 
    IEnumDebugModules2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugModules2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugModules2_Reset_Proxy( 
    IEnumDebugModules2 * This);


void __RPC_STUB IEnumDebugModules2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugModules2_Clone_Proxy( 
    IEnumDebugModules2 * This,
    /* [out] */ IEnumDebugModules2 **ppEnum);


void __RPC_STUB IEnumDebugModules2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugModules2_GetCount_Proxy( 
    IEnumDebugModules2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugModules2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugModules2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugPortSuppliers2_INTERFACE_DEFINED__
#define __IEnumDebugPortSuppliers2_INTERFACE_DEFINED__

/* interface IEnumDebugPortSuppliers2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugPortSuppliers2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("59c9dc99-3eff-4ff3-b201-98acd01b0d87")
    IEnumDebugPortSuppliers2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugPortSupplier2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugPortSuppliers2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugPortSuppliers2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugPortSuppliers2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugPortSuppliers2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugPortSuppliers2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugPortSuppliers2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugPortSupplier2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugPortSuppliers2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugPortSuppliers2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugPortSuppliers2 * This,
            /* [out] */ IEnumDebugPortSuppliers2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugPortSuppliers2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugPortSuppliers2Vtbl;

    interface IEnumDebugPortSuppliers2
    {
        CONST_VTBL struct IEnumDebugPortSuppliers2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugPortSuppliers2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugPortSuppliers2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugPortSuppliers2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugPortSuppliers2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugPortSuppliers2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugPortSuppliers2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugPortSuppliers2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugPortSuppliers2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugPortSuppliers2_Next_Proxy( 
    IEnumDebugPortSuppliers2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugPortSupplier2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugPortSuppliers2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPortSuppliers2_Skip_Proxy( 
    IEnumDebugPortSuppliers2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugPortSuppliers2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPortSuppliers2_Reset_Proxy( 
    IEnumDebugPortSuppliers2 * This);


void __RPC_STUB IEnumDebugPortSuppliers2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPortSuppliers2_Clone_Proxy( 
    IEnumDebugPortSuppliers2 * This,
    /* [out] */ IEnumDebugPortSuppliers2 **ppEnum);


void __RPC_STUB IEnumDebugPortSuppliers2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPortSuppliers2_GetCount_Proxy( 
    IEnumDebugPortSuppliers2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugPortSuppliers2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugPortSuppliers2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugPorts2_INTERFACE_DEFINED__
#define __IEnumDebugPorts2_INTERFACE_DEFINED__

/* interface IEnumDebugPorts2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugPorts2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc827c5e-99ae-4ac8-83ad-2ea5c2034333")
    IEnumDebugPorts2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugPort2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugPorts2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugPorts2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugPorts2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugPorts2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugPorts2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugPorts2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugPort2 **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugPorts2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugPorts2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugPorts2 * This,
            /* [out] */ IEnumDebugPorts2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugPorts2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugPorts2Vtbl;

    interface IEnumDebugPorts2
    {
        CONST_VTBL struct IEnumDebugPorts2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugPorts2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugPorts2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugPorts2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugPorts2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugPorts2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugPorts2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugPorts2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugPorts2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugPorts2_Next_Proxy( 
    IEnumDebugPorts2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugPort2 **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugPorts2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPorts2_Skip_Proxy( 
    IEnumDebugPorts2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugPorts2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPorts2_Reset_Proxy( 
    IEnumDebugPorts2 * This);


void __RPC_STUB IEnumDebugPorts2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPorts2_Clone_Proxy( 
    IEnumDebugPorts2 * This,
    /* [out] */ IEnumDebugPorts2 **ppEnum);


void __RPC_STUB IEnumDebugPorts2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPorts2_GetCount_Proxy( 
    IEnumDebugPorts2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugPorts2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugPorts2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugPropertyInfo2_INTERFACE_DEFINED__
#define __IEnumDebugPropertyInfo2_INTERFACE_DEFINED__

/* interface IEnumDebugPropertyInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugPropertyInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6c7072c3-3ac4-408f-a680-fc5a2f96903e")
    IEnumDebugPropertyInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ DEBUG_PROPERTY_INFO *rgelt,
            /* [out] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugPropertyInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugPropertyInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugPropertyInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugPropertyInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugPropertyInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugPropertyInfo2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ DEBUG_PROPERTY_INFO *rgelt,
            /* [out] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugPropertyInfo2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugPropertyInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugPropertyInfo2 * This,
            /* [out] */ IEnumDebugPropertyInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugPropertyInfo2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugPropertyInfo2Vtbl;

    interface IEnumDebugPropertyInfo2
    {
        CONST_VTBL struct IEnumDebugPropertyInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugPropertyInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugPropertyInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugPropertyInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugPropertyInfo2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugPropertyInfo2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugPropertyInfo2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugPropertyInfo2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugPropertyInfo2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo2_Next_Proxy( 
    IEnumDebugPropertyInfo2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ DEBUG_PROPERTY_INFO *rgelt,
    /* [out] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugPropertyInfo2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo2_Skip_Proxy( 
    IEnumDebugPropertyInfo2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugPropertyInfo2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo2_Reset_Proxy( 
    IEnumDebugPropertyInfo2 * This);


void __RPC_STUB IEnumDebugPropertyInfo2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo2_Clone_Proxy( 
    IEnumDebugPropertyInfo2 * This,
    /* [out] */ IEnumDebugPropertyInfo2 **ppEnum);


void __RPC_STUB IEnumDebugPropertyInfo2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo2_GetCount_Proxy( 
    IEnumDebugPropertyInfo2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugPropertyInfo2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugPropertyInfo2_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugReferenceInfo2_INTERFACE_DEFINED__
#define __IEnumDebugReferenceInfo2_INTERFACE_DEFINED__

/* interface IEnumDebugReferenceInfo2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugReferenceInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e459dd12-864f-4aaa-abc1-dcecbc267f04")
    IEnumDebugReferenceInfo2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ DEBUG_REFERENCE_INFO *rgelt,
            /* [out] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugReferenceInfo2 **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugReferenceInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugReferenceInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugReferenceInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugReferenceInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugReferenceInfo2 * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ DEBUG_REFERENCE_INFO *rgelt,
            /* [out] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugReferenceInfo2 * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugReferenceInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugReferenceInfo2 * This,
            /* [out] */ IEnumDebugReferenceInfo2 **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugReferenceInfo2 * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugReferenceInfo2Vtbl;

    interface IEnumDebugReferenceInfo2
    {
        CONST_VTBL struct IEnumDebugReferenceInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugReferenceInfo2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugReferenceInfo2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugReferenceInfo2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugReferenceInfo2_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugReferenceInfo2_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugReferenceInfo2_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugReferenceInfo2_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugReferenceInfo2_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugReferenceInfo2_Next_Proxy( 
    IEnumDebugReferenceInfo2 * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ DEBUG_REFERENCE_INFO *rgelt,
    /* [out] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugReferenceInfo2_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugReferenceInfo2_Skip_Proxy( 
    IEnumDebugReferenceInfo2 * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugReferenceInfo2_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugReferenceInfo2_Reset_Proxy( 
    IEnumDebugReferenceInfo2 * This);


void __RPC_STUB IEnumDebugReferenceInfo2_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugReferenceInfo2_Clone_Proxy( 
    IEnumDebugReferenceInfo2 * This,
    /* [out] */ IEnumDebugReferenceInfo2 **ppEnum);


void __RPC_STUB IEnumDebugReferenceInfo2_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugReferenceInfo2_GetCount_Proxy( 
    IEnumDebugReferenceInfo2 * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugReferenceInfo2_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugReferenceInfo2_INTERFACE_DEFINED__ */



#ifndef __AD2Lib_LIBRARY_DEFINED__
#define __AD2Lib_LIBRARY_DEFINED__

/* library AD2Lib */
/* [uuid] */ 


EXTERN_C const IID LIBID_AD2Lib;

EXTERN_C const CLSID CLSID_SDMServer;

#ifdef __cplusplus

class DECLSPEC_UUID("5eb7d9f7-af21-400e-a2c4-7fd6396f8641")
SDMServer;
#endif

EXTERN_C const CLSID CLSID_MsMachineDebugManager;

#ifdef __cplusplus

class DECLSPEC_UUID("73b25ffd-f501-437b-8b11-7f0de383964f")
MsMachineDebugManager;
#endif

EXTERN_C const CLSID CLSID_MDMUtilServer;

#ifdef __cplusplus

class DECLSPEC_UUID("b20e899d-b079-479d-a4dc-10f758d9cd9a")
MDMUtilServer;
#endif
#endif /* __AD2Lib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\ProjBld2.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sun Jan 27 21:49:06 2002
 */
/* Compiler settings for ProjBld2.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __ProjBld2_h__
#define __ProjBld2_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVCBuildOptionsPage_FWD_DEFINED__
#define __IVCBuildOptionsPage_FWD_DEFINED__
typedef interface IVCBuildOptionsPage IVCBuildOptionsPage;
#endif 	/* __IVCBuildOptionsPage_FWD_DEFINED__ */


#ifndef __VCProjectConfigurationProperties_FWD_DEFINED__
#define __VCProjectConfigurationProperties_FWD_DEFINED__
typedef interface VCProjectConfigurationProperties VCProjectConfigurationProperties;
#endif 	/* __VCProjectConfigurationProperties_FWD_DEFINED__ */


#ifndef __VCFileConfigurationProperties_FWD_DEFINED__
#define __VCFileConfigurationProperties_FWD_DEFINED__
typedef interface VCFileConfigurationProperties VCFileConfigurationProperties;
#endif 	/* __VCFileConfigurationProperties_FWD_DEFINED__ */


#ifndef __VCProjectConfigurationProperties_FWD_DEFINED__
#define __VCProjectConfigurationProperties_FWD_DEFINED__
typedef interface VCProjectConfigurationProperties VCProjectConfigurationProperties;
#endif 	/* __VCProjectConfigurationProperties_FWD_DEFINED__ */


#ifndef __VCFileConfigurationProperties_FWD_DEFINED__
#define __VCFileConfigurationProperties_FWD_DEFINED__
typedef interface VCFileConfigurationProperties VCFileConfigurationProperties;
#endif 	/* __VCFileConfigurationProperties_FWD_DEFINED__ */


#ifndef __IVCBuildOptionsPage_FWD_DEFINED__
#define __IVCBuildOptionsPage_FWD_DEFINED__
typedef interface IVCBuildOptionsPage IVCBuildOptionsPage;
#endif 	/* __IVCBuildOptionsPage_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "vcpbobjects.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IVCBuildOptionsPage_INTERFACE_DEFINED__
#define __IVCBuildOptionsPage_INTERFACE_DEFINED__

/* interface IVCBuildOptionsPage */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_IVCBuildOptionsPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9F367026-33C6-11D3-8D52-00C04F8ECDB7")
    IVCBuildOptionsPage : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BuildLogging( 
            /* [retval][out] */ VARIANT_BOOL *pbLog) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BuildLogging( 
            /* [in] */ VARIANT_BOOL bLog) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BuildTiming( 
            /* [retval][out] */ VARIANT_BOOL *pbTime) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BuildTiming( 
            /* [in] */ VARIANT_BOOL bTime) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CPPExtensions( 
            /* [retval][out] */ BSTR *pbstrExtensions) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CPPExtensions( 
            /* [in] */ BSTR bstrExtensions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVCBuildOptionsPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVCBuildOptionsPage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVCBuildOptionsPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVCBuildOptionsPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVCBuildOptionsPage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVCBuildOptionsPage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVCBuildOptionsPage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVCBuildOptionsPage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BuildLogging )( 
            IVCBuildOptionsPage * This,
            /* [retval][out] */ VARIANT_BOOL *pbLog);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BuildLogging )( 
            IVCBuildOptionsPage * This,
            /* [in] */ VARIANT_BOOL bLog);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BuildTiming )( 
            IVCBuildOptionsPage * This,
            /* [retval][out] */ VARIANT_BOOL *pbTime);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BuildTiming )( 
            IVCBuildOptionsPage * This,
            /* [in] */ VARIANT_BOOL bTime);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CPPExtensions )( 
            IVCBuildOptionsPage * This,
            /* [retval][out] */ BSTR *pbstrExtensions);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CPPExtensions )( 
            IVCBuildOptionsPage * This,
            /* [in] */ BSTR bstrExtensions);
        
        END_INTERFACE
    } IVCBuildOptionsPageVtbl;

    interface IVCBuildOptionsPage
    {
        CONST_VTBL struct IVCBuildOptionsPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVCBuildOptionsPage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVCBuildOptionsPage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVCBuildOptionsPage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVCBuildOptionsPage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVCBuildOptionsPage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVCBuildOptionsPage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVCBuildOptionsPage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVCBuildOptionsPage_get_BuildLogging(This,pbLog)	\
    (This)->lpVtbl -> get_BuildLogging(This,pbLog)

#define IVCBuildOptionsPage_put_BuildLogging(This,bLog)	\
    (This)->lpVtbl -> put_BuildLogging(This,bLog)

#define IVCBuildOptionsPage_get_BuildTiming(This,pbTime)	\
    (This)->lpVtbl -> get_BuildTiming(This,pbTime)

#define IVCBuildOptionsPage_put_BuildTiming(This,bTime)	\
    (This)->lpVtbl -> put_BuildTiming(This,bTime)

#define IVCBuildOptionsPage_get_CPPExtensions(This,pbstrExtensions)	\
    (This)->lpVtbl -> get_CPPExtensions(This,pbstrExtensions)

#define IVCBuildOptionsPage_put_CPPExtensions(This,bstrExtensions)	\
    (This)->lpVtbl -> put_CPPExtensions(This,bstrExtensions)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE IVCBuildOptionsPage_get_BuildLogging_Proxy( 
    IVCBuildOptionsPage * This,
    /* [retval][out] */ VARIANT_BOOL *pbLog);


void __RPC_STUB IVCBuildOptionsPage_get_BuildLogging_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE IVCBuildOptionsPage_put_BuildLogging_Proxy( 
    IVCBuildOptionsPage * This,
    /* [in] */ VARIANT_BOOL bLog);


void __RPC_STUB IVCBuildOptionsPage_put_BuildLogging_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE IVCBuildOptionsPage_get_BuildTiming_Proxy( 
    IVCBuildOptionsPage * This,
    /* [retval][out] */ VARIANT_BOOL *pbTime);


void __RPC_STUB IVCBuildOptionsPage_get_BuildTiming_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE IVCBuildOptionsPage_put_BuildTiming_Proxy( 
    IVCBuildOptionsPage * This,
    /* [in] */ VARIANT_BOOL bTime);


void __RPC_STUB IVCBuildOptionsPage_put_BuildTiming_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE IVCBuildOptionsPage_get_CPPExtensions_Proxy( 
    IVCBuildOptionsPage * This,
    /* [retval][out] */ BSTR *pbstrExtensions);


void __RPC_STUB IVCBuildOptionsPage_get_CPPExtensions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE IVCBuildOptionsPage_put_CPPExtensions_Proxy( 
    IVCBuildOptionsPage * This,
    /* [in] */ BSTR bstrExtensions);


void __RPC_STUB IVCBuildOptionsPage_put_CPPExtensions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVCBuildOptionsPage_INTERFACE_DEFINED__ */


#ifndef __VCProjectConfigurationProperties_INTERFACE_DEFINED__
#define __VCProjectConfigurationProperties_INTERFACE_DEFINED__

/* interface VCProjectConfigurationProperties */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_VCProjectConfigurationProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("24DAA1C6-298A-4320-BC4B-C36B3F259E40")
    VCProjectConfigurationProperties : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutputDirectory( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OutputDirectory( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IntermediateDirectory( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IntermediateDirectory( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConfigurationType( 
            /* [retval][out] */ ConfigurationTypes *ConfigType) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ConfigurationType( 
            /* [in] */ ConfigurationTypes ConfigType) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BuildBrowserInformation( 
            /* [retval][out] */ VARIANT_BOOL *Bsc) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BuildBrowserInformation( 
            /* [in] */ VARIANT_BOOL Bsc) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseOfMFC( 
            /* [retval][out] */ useOfMfc *useMfc) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseOfMFC( 
            /* [in] */ useOfMfc useMfc) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseOfATL( 
            /* [retval][out] */ useOfATL *useATL) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseOfATL( 
            /* [in] */ useOfATL useATL) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ATLMinimizesCRunTimeLibraryUsage( 
            /* [retval][out] */ VARIANT_BOOL *UseCRT) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ATLMinimizesCRunTimeLibraryUsage( 
            /* [in] */ VARIANT_BOOL UseCRT) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterSet( 
            /* [retval][out] */ charSet *optSetting) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CharacterSet( 
            /* [in] */ charSet optSetting) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ManagedExtensions( 
            /* [retval][out] */ VARIANT_BOOL *Managed) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ManagedExtensions( 
            /* [in] */ VARIANT_BOOL Managed) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DeleteExtensionsOnClean( 
            /* [retval][out] */ BSTR *Ext) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DeleteExtensionsOnClean( 
            /* [in] */ BSTR Ext) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WholeProgramOptimization( 
            /* [retval][out] */ VARIANT_BOOL *Optimize) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WholeProgramOptimization( 
            /* [in] */ VARIANT_BOOL Optimize) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Command( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Command( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WorkingDirectory( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WorkingDirectory( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommandArguments( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CommandArguments( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Attach( 
            /* [retval][out] */ VARIANT_BOOL *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Attach( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Remote( 
            /* [retval][out] */ RemoteDebuggerType *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Remote( 
            /* [in] */ RemoteDebuggerType newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RemoteMachine( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RemoteMachine( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DebuggerType( 
            /* [retval][out] */ TypeOfDebugger *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DebuggerType( 
            /* [in] */ TypeOfDebugger newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RemoteCommand( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RemoteCommand( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HttpUrl( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HttpUrl( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PDBPath( 
            /* [retval][out] */ BSTR *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PDBPath( 
            /* [in] */ BSTR NewVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SQLDebugging( 
            /* [retval][out] */ VARIANT_BOOL *Val) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SQLDebugging( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VCProjectConfigurationPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            VCProjectConfigurationProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            VCProjectConfigurationProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            VCProjectConfigurationProperties * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputDirectory )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputDirectory )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IntermediateDirectory )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IntermediateDirectory )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationType )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ ConfigurationTypes *ConfigType);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConfigurationType )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ ConfigurationTypes ConfigType);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BuildBrowserInformation )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ VARIANT_BOOL *Bsc);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BuildBrowserInformation )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ VARIANT_BOOL Bsc);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseOfMFC )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ useOfMfc *useMfc);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseOfMFC )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ useOfMfc useMfc);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseOfATL )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ useOfATL *useATL);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseOfATL )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ useOfATL useATL);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ATLMinimizesCRunTimeLibraryUsage )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ VARIANT_BOOL *UseCRT);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ATLMinimizesCRunTimeLibraryUsage )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ VARIANT_BOOL UseCRT);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterSet )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ charSet *optSetting);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterSet )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ charSet optSetting);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ManagedExtensions )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ VARIANT_BOOL *Managed);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ManagedExtensions )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ VARIANT_BOOL Managed);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeleteExtensionsOnClean )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Ext);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DeleteExtensionsOnClean )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR Ext);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WholeProgramOptimization )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ VARIANT_BOOL *Optimize);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WholeProgramOptimization )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ VARIANT_BOOL Optimize);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Command )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Command )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WorkingDirectory )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WorkingDirectory )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommandArguments )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CommandArguments )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Attach )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ VARIANT_BOOL *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Attach )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Remote )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ RemoteDebuggerType *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Remote )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ RemoteDebuggerType newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RemoteMachine )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RemoteMachine )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DebuggerType )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ TypeOfDebugger *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DebuggerType )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ TypeOfDebugger newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RemoteCommand )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RemoteCommand )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HttpUrl )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HttpUrl )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PDBPath )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ BSTR *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PDBPath )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ BSTR NewVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SQLDebugging )( 
            VCProjectConfigurationProperties * This,
            /* [retval][out] */ VARIANT_BOOL *Val);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SQLDebugging )( 
            VCProjectConfigurationProperties * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } VCProjectConfigurationPropertiesVtbl;

    interface VCProjectConfigurationProperties
    {
        CONST_VTBL struct VCProjectConfigurationPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define VCProjectConfigurationProperties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define VCProjectConfigurationProperties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define VCProjectConfigurationProperties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define VCProjectConfigurationProperties_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define VCProjectConfigurationProperties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define VCProjectConfigurationProperties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define VCProjectConfigurationProperties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define VCProjectConfigurationProperties_get_OutputDirectory(This,Val)	\
    (This)->lpVtbl -> get_OutputDirectory(This,Val)

#define VCProjectConfigurationProperties_put_OutputDirectory(This,newVal)	\
    (This)->lpVtbl -> put_OutputDirectory(This,newVal)

#define VCProjectConfigurationProperties_get_IntermediateDirectory(This,Val)	\
    (This)->lpVtbl -> get_IntermediateDirectory(This,Val)

#define VCProjectConfigurationProperties_put_IntermediateDirectory(This,newVal)	\
    (This)->lpVtbl -> put_IntermediateDirectory(This,newVal)

#define VCProjectConfigurationProperties_get_ConfigurationType(This,ConfigType)	\
    (This)->lpVtbl -> get_ConfigurationType(This,ConfigType)

#define VCProjectConfigurationProperties_put_ConfigurationType(This,ConfigType)	\
    (This)->lpVtbl -> put_ConfigurationType(This,ConfigType)

#define VCProjectConfigurationProperties_get_BuildBrowserInformation(This,Bsc)	\
    (This)->lpVtbl -> get_BuildBrowserInformation(This,Bsc)

#define VCProjectConfigurationProperties_put_BuildBrowserInformation(This,Bsc)	\
    (This)->lpVtbl -> put_BuildBrowserInformation(This,Bsc)

#define VCProjectConfigurationProperties_get_UseOfMFC(This,useMfc)	\
    (This)->lpVtbl -> get_UseOfMFC(This,useMfc)

#define VCProjectConfigurationProperties_put_UseOfMFC(This,useMfc)	\
    (This)->lpVtbl -> put_UseOfMFC(This,useMfc)

#define VCProjectConfigurationProperties_get_UseOfATL(This,useATL)	\
    (This)->lpVtbl -> get_UseOfATL(This,useATL)

#define VCProjectConfigurationProperties_put_UseOfATL(This,useATL)	\
    (This)->lpVtbl -> put_UseOfATL(This,useATL)

#define VCProjectConfigurationProperties_get_ATLMinimizesCRunTimeLibraryUsage(This,UseCRT)	\
    (This)->lpVtbl -> get_ATLMinimizesCRunTimeLibraryUsage(This,UseCRT)

#define VCProjectConfigurationProperties_put_ATLMinimizesCRunTimeLibraryUsage(This,UseCRT)	\
    (This)->lpVtbl -> put_ATLMinimizesCRunTimeLibraryUsage(This,UseCRT)

#define VCProjectConfigurationProperties_get_CharacterSet(This,optSetting)	\
    (This)->lpVtbl -> get_CharacterSet(This,optSetting)

#define VCProjectConfigurationProperties_put_CharacterSet(This,optSetting)	\
    (This)->lpVtbl -> put_CharacterSet(This,optSetting)

#define VCProjectConfigurationProperties_get_ManagedExtensions(This,Managed)	\
    (This)->lpVtbl -> get_ManagedExtensions(This,Managed)

#define VCProjectConfigurationProperties_put_ManagedExtensions(This,Managed)	\
    (This)->lpVtbl -> put_ManagedExtensions(This,Managed)

#define VCProjectConfigurationProperties_get_DeleteExtensionsOnClean(This,Ext)	\
    (This)->lpVtbl -> get_DeleteExtensionsOnClean(This,Ext)

#define VCProjectConfigurationProperties_put_DeleteExtensionsOnClean(This,Ext)	\
    (This)->lpVtbl -> put_DeleteExtensionsOnClean(This,Ext)

#define VCProjectConfigurationProperties_get_WholeProgramOptimization(This,Optimize)	\
    (This)->lpVtbl -> get_WholeProgramOptimization(This,Optimize)

#define VCProjectConfigurationProperties_put_WholeProgramOptimization(This,Optimize)	\
    (This)->lpVtbl -> put_WholeProgramOptimization(This,Optimize)

#define VCProjectConfigurationProperties_get_Command(This,Val)	\
    (This)->lpVtbl -> get_Command(This,Val)

#define VCProjectConfigurationProperties_put_Command(This,newVal)	\
    (This)->lpVtbl -> put_Command(This,newVal)

#define VCProjectConfigurationProperties_get_WorkingDirectory(This,Val)	\
    (This)->lpVtbl -> get_WorkingDirectory(This,Val)

#define VCProjectConfigurationProperties_put_WorkingDirectory(This,newVal)	\
    (This)->lpVtbl -> put_WorkingDirectory(This,newVal)

#define VCProjectConfigurationProperties_get_CommandArguments(This,Val)	\
    (This)->lpVtbl -> get_CommandArguments(This,Val)

#define VCProjectConfigurationProperties_put_CommandArguments(This,newVal)	\
    (This)->lpVtbl -> put_CommandArguments(This,newVal)

#define VCProjectConfigurationProperties_get_Attach(This,Val)	\
    (This)->lpVtbl -> get_Attach(This,Val)

#define VCProjectConfigurationProperties_put_Attach(This,newVal)	\
    (This)->lpVtbl -> put_Attach(This,newVal)

#define VCProjectConfigurationProperties_get_Remote(This,Val)	\
    (This)->lpVtbl -> get_Remote(This,Val)

#define VCProjectConfigurationProperties_put_Remote(This,newVal)	\
    (This)->lpVtbl -> put_Remote(This,newVal)

#define VCProjectConfigurationProperties_get_RemoteMachine(This,Val)	\
    (This)->lpVtbl -> get_RemoteMachine(This,Val)

#define VCProjectConfigurationProperties_put_RemoteMachine(This,newVal)	\
    (This)->lpVtbl -> put_RemoteMachine(This,newVal)

#define VCProjectConfigurationProperties_get_DebuggerType(This,Val)	\
    (This)->lpVtbl -> get_DebuggerType(This,Val)

#define VCProjectConfigurationProperties_put_DebuggerType(This,newVal)	\
    (This)->lpVtbl -> put_DebuggerType(This,newVal)

#define VCProjectConfigurationProperties_get_RemoteCommand(This,Val)	\
    (This)->lpVtbl -> get_RemoteCommand(This,Val)

#define VCProjectConfigurationProperties_put_RemoteCommand(This,newVal)	\
    (This)->lpVtbl -> put_RemoteCommand(This,newVal)

#define VCProjectConfigurationProperties_get_HttpUrl(This,Val)	\
    (This)->lpVtbl -> get_HttpUrl(This,Val)

#define VCProjectConfigurationProperties_put_HttpUrl(This,newVal)	\
    (This)->lpVtbl -> put_HttpUrl(This,newVal)

#define VCProjectConfigurationProperties_get_PDBPath(This,Val)	\
    (This)->lpVtbl -> get_PDBPath(This,Val)

#define VCProjectConfigurationProperties_put_PDBPath(This,NewVal)	\
    (This)->lpVtbl -> put_PDBPath(This,NewVal)

#define VCProjectConfigurationProperties_get_SQLDebugging(This,Val)	\
    (This)->lpVtbl -> get_SQLDebugging(This,Val)

#define VCProjectConfigurationProperties_put_SQLDebugging(This,newVal)	\
    (This)->lpVtbl -> put_SQLDebugging(This,newVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_OutputDirectory_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_OutputDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_OutputDirectory_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_OutputDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_IntermediateDirectory_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_IntermediateDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_IntermediateDirectory_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_IntermediateDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_ConfigurationType_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ ConfigurationTypes *ConfigType);


void __RPC_STUB VCProjectConfigurationProperties_get_ConfigurationType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_ConfigurationType_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ ConfigurationTypes ConfigType);


void __RPC_STUB VCProjectConfigurationProperties_put_ConfigurationType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_BuildBrowserInformation_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ VARIANT_BOOL *Bsc);


void __RPC_STUB VCProjectConfigurationProperties_get_BuildBrowserInformation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_BuildBrowserInformation_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ VARIANT_BOOL Bsc);


void __RPC_STUB VCProjectConfigurationProperties_put_BuildBrowserInformation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_UseOfMFC_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ useOfMfc *useMfc);


void __RPC_STUB VCProjectConfigurationProperties_get_UseOfMFC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_UseOfMFC_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ useOfMfc useMfc);


void __RPC_STUB VCProjectConfigurationProperties_put_UseOfMFC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_UseOfATL_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ useOfATL *useATL);


void __RPC_STUB VCProjectConfigurationProperties_get_UseOfATL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_UseOfATL_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ useOfATL useATL);


void __RPC_STUB VCProjectConfigurationProperties_put_UseOfATL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_ATLMinimizesCRunTimeLibraryUsage_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ VARIANT_BOOL *UseCRT);


void __RPC_STUB VCProjectConfigurationProperties_get_ATLMinimizesCRunTimeLibraryUsage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_ATLMinimizesCRunTimeLibraryUsage_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ VARIANT_BOOL UseCRT);


void __RPC_STUB VCProjectConfigurationProperties_put_ATLMinimizesCRunTimeLibraryUsage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_CharacterSet_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ charSet *optSetting);


void __RPC_STUB VCProjectConfigurationProperties_get_CharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_CharacterSet_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ charSet optSetting);


void __RPC_STUB VCProjectConfigurationProperties_put_CharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_ManagedExtensions_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ VARIANT_BOOL *Managed);


void __RPC_STUB VCProjectConfigurationProperties_get_ManagedExtensions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_ManagedExtensions_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ VARIANT_BOOL Managed);


void __RPC_STUB VCProjectConfigurationProperties_put_ManagedExtensions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_DeleteExtensionsOnClean_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Ext);


void __RPC_STUB VCProjectConfigurationProperties_get_DeleteExtensionsOnClean_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_DeleteExtensionsOnClean_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR Ext);


void __RPC_STUB VCProjectConfigurationProperties_put_DeleteExtensionsOnClean_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_WholeProgramOptimization_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ VARIANT_BOOL *Optimize);


void __RPC_STUB VCProjectConfigurationProperties_get_WholeProgramOptimization_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_WholeProgramOptimization_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ VARIANT_BOOL Optimize);


void __RPC_STUB VCProjectConfigurationProperties_put_WholeProgramOptimization_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_Command_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_Command_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_Command_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_Command_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_WorkingDirectory_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_WorkingDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_WorkingDirectory_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_WorkingDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_CommandArguments_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_CommandArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_CommandArguments_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_CommandArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_Attach_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ VARIANT_BOOL *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_Attach_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ VARIANT_BOOL newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_Remote_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ RemoteDebuggerType *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_Remote_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_Remote_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ RemoteDebuggerType newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_Remote_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_RemoteMachine_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_RemoteMachine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_RemoteMachine_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_RemoteMachine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_DebuggerType_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ TypeOfDebugger *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_DebuggerType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_DebuggerType_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ TypeOfDebugger newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_DebuggerType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_RemoteCommand_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_RemoteCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_RemoteCommand_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_RemoteCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_HttpUrl_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_HttpUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_HttpUrl_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_HttpUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_PDBPath_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ BSTR *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_PDBPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_PDBPath_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ BSTR NewVal);


void __RPC_STUB VCProjectConfigurationProperties_put_PDBPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_get_SQLDebugging_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [retval][out] */ VARIANT_BOOL *Val);


void __RPC_STUB VCProjectConfigurationProperties_get_SQLDebugging_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCProjectConfigurationProperties_put_SQLDebugging_Proxy( 
    VCProjectConfigurationProperties * This,
    /* [in] */ VARIANT_BOOL newVal);


void __RPC_STUB VCProjectConfigurationProperties_put_SQLDebugging_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __VCProjectConfigurationProperties_INTERFACE_DEFINED__ */


#ifndef __VCFileConfigurationProperties_INTERFACE_DEFINED__
#define __VCFileConfigurationProperties_INTERFACE_DEFINED__

/* interface VCFileConfigurationProperties */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_VCFileConfigurationProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("24DAA1C7-298A-4320-BC4B-C36B3F259E40")
    VCFileConfigurationProperties : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExcludedFromBuild( 
            /* [retval][out] */ VARIANT_BOOL *ExcludedFromBuild) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExcludedFromBuild( 
            /* [in] */ VARIANT_BOOL ExcludedFromBuild) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VCFileConfigurationPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            VCFileConfigurationProperties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            VCFileConfigurationProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            VCFileConfigurationProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            VCFileConfigurationProperties * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            VCFileConfigurationProperties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            VCFileConfigurationProperties * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            VCFileConfigurationProperties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExcludedFromBuild )( 
            VCFileConfigurationProperties * This,
            /* [retval][out] */ VARIANT_BOOL *ExcludedFromBuild);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExcludedFromBuild )( 
            VCFileConfigurationProperties * This,
            /* [in] */ VARIANT_BOOL ExcludedFromBuild);
        
        END_INTERFACE
    } VCFileConfigurationPropertiesVtbl;

    interface VCFileConfigurationProperties
    {
        CONST_VTBL struct VCFileConfigurationPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define VCFileConfigurationProperties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define VCFileConfigurationProperties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define VCFileConfigurationProperties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define VCFileConfigurationProperties_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define VCFileConfigurationProperties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define VCFileConfigurationProperties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define VCFileConfigurationProperties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define VCFileConfigurationProperties_get_ExcludedFromBuild(This,ExcludedFromBuild)	\
    (This)->lpVtbl -> get_ExcludedFromBuild(This,ExcludedFromBuild)

#define VCFileConfigurationProperties_put_ExcludedFromBuild(This,ExcludedFromBuild)	\
    (This)->lpVtbl -> put_ExcludedFromBuild(This,ExcludedFromBuild)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE VCFileConfigurationProperties_get_ExcludedFromBuild_Proxy( 
    VCFileConfigurationProperties * This,
    /* [retval][out] */ VARIANT_BOOL *ExcludedFromBuild);


void __RPC_STUB VCFileConfigurationProperties_get_ExcludedFromBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE VCFileConfigurationProperties_put_ExcludedFromBuild_Proxy( 
    VCFileConfigurationProperties * This,
    /* [in] */ VARIANT_BOOL ExcludedFromBuild);


void __RPC_STUB VCFileConfigurationProperties_put_ExcludedFromBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __VCFileConfigurationProperties_INTERFACE_DEFINED__ */



#ifndef __VCProjectLibrary_LIBRARY_DEFINED__
#define __VCProjectLibrary_LIBRARY_DEFINED__

/* library VCProjectLibrary */
/* [helpstringdll][helpstring][version][uuid] */ 





EXTERN_C const IID LIBID_VCProjectLibrary;
#endif /* __VCProjectLibrary_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\vcprojcnvt2.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sun Jan 27 21:49:32 2002
 */
/* Compiler settings for vcprojcnvt2.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __vcprojcnvt2_h__
#define __vcprojcnvt2_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVCProjConvert_FWD_DEFINED__
#define __IVCProjConvert_FWD_DEFINED__
typedef interface IVCProjConvert IVCProjConvert;
#endif 	/* __IVCProjConvert_FWD_DEFINED__ */


#ifndef __VCProjConvert_FWD_DEFINED__
#define __VCProjConvert_FWD_DEFINED__

#ifdef __cplusplus
typedef class VCProjConvert VCProjConvert;
#else
typedef struct VCProjConvert VCProjConvert;
#endif /* __cplusplus */

#endif 	/* __VCProjConvert_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IVCProjConvert_INTERFACE_DEFINED__
#define __IVCProjConvert_INTERFACE_DEFINED__

/* interface IVCProjConvert */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IVCProjConvert;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7D8AE8C4-3FD3-11D3-8D52-00C04F8ECDB6")
    IVCProjConvert : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE OpenProject( 
            BSTR bstrProjectPath,
            IUnknown *pProjEngine,
            IUnknown *pUnkServiceProvider) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Initialize( 
            BSTR bstrSourceFilesString) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPackage( 
            long **ppPackage) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetProject( 
            IDispatch **ppProject) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasProjectDependencies( 
            /* [retval][out] */ VARIANT_BOOL *pbHasDeps) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProjectDependenciesCount( 
            /* [retval][out] */ long *plNumDeps) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetNextProjectDependency( 
            /* [out] */ BSTR *pbstrProject,
            /* [out] */ BSTR *pbstrDependentProject) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ResetProjectDependencyEnum( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVCProjConvertVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVCProjConvert * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVCProjConvert * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVCProjConvert * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *OpenProject )( 
            IVCProjConvert * This,
            BSTR bstrProjectPath,
            IUnknown *pProjEngine,
            IUnknown *pUnkServiceProvider);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IVCProjConvert * This,
            BSTR bstrSourceFilesString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPackage )( 
            IVCProjConvert * This,
            long **ppPackage);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetProject )( 
            IVCProjConvert * This,
            IDispatch **ppProject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasProjectDependencies )( 
            IVCProjConvert * This,
            /* [retval][out] */ VARIANT_BOOL *pbHasDeps);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectDependenciesCount )( 
            IVCProjConvert * This,
            /* [retval][out] */ long *plNumDeps);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetNextProjectDependency )( 
            IVCProjConvert * This,
            /* [out] */ BSTR *pbstrProject,
            /* [out] */ BSTR *pbstrDependentProject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetProjectDependencyEnum )( 
            IVCProjConvert * This);
        
        END_INTERFACE
    } IVCProjConvertVtbl;

    interface IVCProjConvert
    {
        CONST_VTBL struct IVCProjConvertVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVCProjConvert_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVCProjConvert_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVCProjConvert_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVCProjConvert_OpenProject(This,bstrProjectPath,pProjEngine,pUnkServiceProvider)	\
    (This)->lpVtbl -> OpenProject(This,bstrProjectPath,pProjEngine,pUnkServiceProvider)

#define IVCProjConvert_Initialize(This,bstrSourceFilesString)	\
    (This)->lpVtbl -> Initialize(This,bstrSourceFilesString)

#define IVCProjConvert_GetPackage(This,ppPackage)	\
    (This)->lpVtbl -> GetPackage(This,ppPackage)

#define IVCProjConvert_GetProject(This,ppProject)	\
    (This)->lpVtbl -> GetProject(This,ppProject)

#define IVCProjConvert_get_HasProjectDependencies(This,pbHasDeps)	\
    (This)->lpVtbl -> get_HasProjectDependencies(This,pbHasDeps)

#define IVCProjConvert_get_ProjectDependenciesCount(This,plNumDeps)	\
    (This)->lpVtbl -> get_ProjectDependenciesCount(This,plNumDeps)

#define IVCProjConvert_GetNextProjectDependency(This,pbstrProject,pbstrDependentProject)	\
    (This)->lpVtbl -> GetNextProjectDependency(This,pbstrProject,pbstrDependentProject)

#define IVCProjConvert_ResetProjectDependencyEnum(This)	\
    (This)->lpVtbl -> ResetProjectDependencyEnum(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_OpenProject_Proxy( 
    IVCProjConvert * This,
    BSTR bstrProjectPath,
    IUnknown *pProjEngine,
    IUnknown *pUnkServiceProvider);


void __RPC_STUB IVCProjConvert_OpenProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_Initialize_Proxy( 
    IVCProjConvert * This,
    BSTR bstrSourceFilesString);


void __RPC_STUB IVCProjConvert_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_GetPackage_Proxy( 
    IVCProjConvert * This,
    long **ppPackage);


void __RPC_STUB IVCProjConvert_GetPackage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_GetProject_Proxy( 
    IVCProjConvert * This,
    IDispatch **ppProject);


void __RPC_STUB IVCProjConvert_GetProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_get_HasProjectDependencies_Proxy( 
    IVCProjConvert * This,
    /* [retval][out] */ VARIANT_BOOL *pbHasDeps);


void __RPC_STUB IVCProjConvert_get_HasProjectDependencies_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_get_ProjectDependenciesCount_Proxy( 
    IVCProjConvert * This,
    /* [retval][out] */ long *plNumDeps);


void __RPC_STUB IVCProjConvert_get_ProjectDependenciesCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_GetNextProjectDependency_Proxy( 
    IVCProjConvert * This,
    /* [out] */ BSTR *pbstrProject,
    /* [out] */ BSTR *pbstrDependentProject);


void __RPC_STUB IVCProjConvert_GetNextProjectDependency_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_ResetProjectDependencyEnum_Proxy( 
    IVCProjConvert * This);


void __RPC_STUB IVCProjConvert_ResetProjectDependencyEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVCProjConvert_INTERFACE_DEFINED__ */



#ifndef __VCPROJCNVTLib_LIBRARY_DEFINED__
#define __VCPROJCNVTLib_LIBRARY_DEFINED__

/* library VCPROJCNVTLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_VCPROJCNVTLib;

EXTERN_C const CLSID CLSID_VCProjConvert;

#ifdef __cplusplus

class DECLSPEC_UUID("7D8AE8C5-3FD3-11D3-8D52-00C04F8ECDB6")
VCProjConvert;
#endif
#endif /* __VCPROJCNVTLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\vcbuild.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sun Jan 27 21:56:03 2002
 */
/* Compiler settings for vcbuild.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __vcbuild_h__
#define __vcbuild_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVCBuildErrorContext_FWD_DEFINED__
#define __IVCBuildErrorContext_FWD_DEFINED__
typedef interface IVCBuildErrorContext IVCBuildErrorContext;
#endif 	/* __IVCBuildErrorContext_FWD_DEFINED__ */


#ifndef __IENCBuildSpawner_FWD_DEFINED__
#define __IENCBuildSpawner_FWD_DEFINED__
typedef interface IENCBuildSpawner IENCBuildSpawner;
#endif 	/* __IENCBuildSpawner_FWD_DEFINED__ */


#ifndef __IENCBuildSpawnerCallback_FWD_DEFINED__
#define __IENCBuildSpawnerCallback_FWD_DEFINED__
typedef interface IENCBuildSpawnerCallback IENCBuildSpawnerCallback;
#endif 	/* __IENCBuildSpawnerCallback_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IVCBuildErrorContext_INTERFACE_DEFINED__
#define __IVCBuildErrorContext_INTERFACE_DEFINED__

/* interface IVCBuildErrorContext */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IVCBuildErrorContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A8F1429B-1E96-11D3-B96D-00C04F685D26")
    IVCBuildErrorContext : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddError( 
            /* [in] */ BSTR bstrMessage,
            /* [in] */ BSTR bstrHelp,
            /* [in] */ BSTR bstrFile,
            /* [in] */ long nLine,
            /* [in] */ BSTR bstrFull) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddWarning( 
            /* [in] */ BSTR bstrMessage,
            /* [in] */ BSTR bstrHelp,
            /* [in] */ BSTR bstrFile,
            /* [in] */ long nLine,
            /* [in] */ BSTR bstrFull) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddInfo( 
            /* [in] */ BSTR bstrMessage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddLine( 
            /* [in] */ BSTR bstrMessage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteLog( 
            /* [in] */ BSTR bstrMessage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ActivateWindow( 
            /* [in] */ VARIANT_BOOL bForce) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ActivateTaskList( 
            /* [in] */ VARIANT_BOOL bForce) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearWindow( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Warnings( 
            /* [retval][out] */ long *pnErr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Errors( 
            /* [retval][out] */ long *pnWrn) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BaseDirectory( 
            /* [retval][out] */ BSTR *pbstrBaseDir) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BaseDirectory( 
            /* [in] */ BSTR bstrBaseDir) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProjectName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProjectName( 
            /* [in] */ BSTR bstrBaseName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AssociatedBuildEngine( 
            /* [retval][out] */ IDispatch **ppBldEngine) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AssociatedBuildEngine( 
            /* [in] */ IDispatch *pBldEngine) = 0;
        
        virtual /* [propget][hidden][nonbrowsable] */ HRESULT STDMETHODCALLTYPE get_ShowOutput( 
            /* [retval][out] */ VARIANT_BOOL *pbShow) = 0;
        
        virtual /* [propput][hidden][nonbrowsable] */ HRESULT STDMETHODCALLTYPE put_ShowOutput( 
            /* [in] */ VARIANT_BOOL bShow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVCBuildErrorContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVCBuildErrorContext * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVCBuildErrorContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVCBuildErrorContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVCBuildErrorContext * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVCBuildErrorContext * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVCBuildErrorContext * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVCBuildErrorContext * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *AddError )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage,
            /* [in] */ BSTR bstrHelp,
            /* [in] */ BSTR bstrFile,
            /* [in] */ long nLine,
            /* [in] */ BSTR bstrFull);
        
        HRESULT ( STDMETHODCALLTYPE *AddWarning )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage,
            /* [in] */ BSTR bstrHelp,
            /* [in] */ BSTR bstrFile,
            /* [in] */ long nLine,
            /* [in] */ BSTR bstrFull);
        
        HRESULT ( STDMETHODCALLTYPE *AddInfo )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage);
        
        HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage);
        
        HRESULT ( STDMETHODCALLTYPE *WriteLog )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateWindow )( 
            IVCBuildErrorContext * This,
            /* [in] */ VARIANT_BOOL bForce);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateTaskList )( 
            IVCBuildErrorContext * This,
            /* [in] */ VARIANT_BOOL bForce);
        
        HRESULT ( STDMETHODCALLTYPE *ClearWindow )( 
            IVCBuildErrorContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IVCBuildErrorContext * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Warnings )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ long *pnErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Errors )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ long *pnWrn);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseDirectory )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ BSTR *pbstrBaseDir);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BaseDirectory )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrBaseDir);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectName )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProjectName )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrBaseName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AssociatedBuildEngine )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ IDispatch **ppBldEngine);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AssociatedBuildEngine )( 
            IVCBuildErrorContext * This,
            /* [in] */ IDispatch *pBldEngine);
        
        /* [propget][hidden][nonbrowsable] */ HRESULT ( STDMETHODCALLTYPE *get_ShowOutput )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ VARIANT_BOOL *pbShow);
        
        /* [propput][hidden][nonbrowsable] */ HRESULT ( STDMETHODCALLTYPE *put_ShowOutput )( 
            IVCBuildErrorContext * This,
            /* [in] */ VARIANT_BOOL bShow);
        
        END_INTERFACE
    } IVCBuildErrorContextVtbl;

    interface IVCBuildErrorContext
    {
        CONST_VTBL struct IVCBuildErrorContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVCBuildErrorContext_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVCBuildErrorContext_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVCBuildErrorContext_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVCBuildErrorContext_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVCBuildErrorContext_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVCBuildErrorContext_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVCBuildErrorContext_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVCBuildErrorContext_AddError(This,bstrMessage,bstrHelp,bstrFile,nLine,bstrFull)	\
    (This)->lpVtbl -> AddError(This,bstrMessage,bstrHelp,bstrFile,nLine,bstrFull)

#define IVCBuildErrorContext_AddWarning(This,bstrMessage,bstrHelp,bstrFile,nLine,bstrFull)	\
    (This)->lpVtbl -> AddWarning(This,bstrMessage,bstrHelp,bstrFile,nLine,bstrFull)

#define IVCBuildErrorContext_AddInfo(This,bstrMessage)	\
    (This)->lpVtbl -> AddInfo(This,bstrMessage)

#define IVCBuildErrorContext_AddLine(This,bstrMessage)	\
    (This)->lpVtbl -> AddLine(This,bstrMessage)

#define IVCBuildErrorContext_WriteLog(This,bstrMessage)	\
    (This)->lpVtbl -> WriteLog(This,bstrMessage)

#define IVCBuildErrorContext_ActivateWindow(This,bForce)	\
    (This)->lpVtbl -> ActivateWindow(This,bForce)

#define IVCBuildErrorContext_ActivateTaskList(This,bForce)	\
    (This)->lpVtbl -> ActivateTaskList(This,bForce)

#define IVCBuildErrorContext_ClearWindow(This)	\
    (This)->lpVtbl -> ClearWindow(This)

#define IVCBuildErrorContext_Close(This)	\
    (This)->lpVtbl -> Close(This)

#define IVCBuildErrorContext_get_Warnings(This,pnErr)	\
    (This)->lpVtbl -> get_Warnings(This,pnErr)

#define IVCBuildErrorContext_get_Errors(This,pnWrn)	\
    (This)->lpVtbl -> get_Errors(This,pnWrn)

#define IVCBuildErrorContext_get_BaseDirectory(This,pbstrBaseDir)	\
    (This)->lpVtbl -> get_BaseDirectory(This,pbstrBaseDir)

#define IVCBuildErrorContext_put_BaseDirectory(This,bstrBaseDir)	\
    (This)->lpVtbl -> put_BaseDirectory(This,bstrBaseDir)

#define IVCBuildErrorContext_get_ProjectName(This,pbstrName)	\
    (This)->lpVtbl -> get_ProjectName(This,pbstrName)

#define IVCBuildErrorContext_put_ProjectName(This,bstrBaseName)	\
    (This)->lpVtbl -> put_ProjectName(This,bstrBaseName)

#define IVCBuildErrorContext_get_AssociatedBuildEngine(This,ppBldEngine)	\
    (This)->lpVtbl -> get_AssociatedBuildEngine(This,ppBldEngine)

#define IVCBuildErrorContext_put_AssociatedBuildEngine(This,pBldEngine)	\
    (This)->lpVtbl -> put_AssociatedBuildEngine(This,pBldEngine)

#define IVCBuildErrorContext_get_ShowOutput(This,pbShow)	\
    (This)->lpVtbl -> get_ShowOutput(This,pbShow)

#define IVCBuildErrorContext_put_ShowOutput(This,bShow)	\
    (This)->lpVtbl -> put_ShowOutput(This,bShow)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_AddError_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage,
    /* [in] */ BSTR bstrHelp,
    /* [in] */ BSTR bstrFile,
    /* [in] */ long nLine,
    /* [in] */ BSTR bstrFull);


void __RPC_STUB IVCBuildErrorContext_AddError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_AddWarning_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage,
    /* [in] */ BSTR bstrHelp,
    /* [in] */ BSTR bstrFile,
    /* [in] */ long nLine,
    /* [in] */ BSTR bstrFull);


void __RPC_STUB IVCBuildErrorContext_AddWarning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_AddInfo_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage);


void __RPC_STUB IVCBuildErrorContext_AddInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_AddLine_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage);


void __RPC_STUB IVCBuildErrorContext_AddLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_WriteLog_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage);


void __RPC_STUB IVCBuildErrorContext_WriteLog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_ActivateWindow_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ VARIANT_BOOL bForce);


void __RPC_STUB IVCBuildErrorContext_ActivateWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_ActivateTaskList_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ VARIANT_BOOL bForce);


void __RPC_STUB IVCBuildErrorContext_ActivateTaskList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_ClearWindow_Proxy( 
    IVCBuildErrorContext * This);


void __RPC_STUB IVCBuildErrorContext_ClearWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_Close_Proxy( 
    IVCBuildErrorContext * This);


void __RPC_STUB IVCBuildErrorContext_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_Warnings_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ long *pnErr);


void __RPC_STUB IVCBuildErrorContext_get_Warnings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_Errors_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ long *pnWrn);


void __RPC_STUB IVCBuildErrorContext_get_Errors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_BaseDirectory_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ BSTR *pbstrBaseDir);


void __RPC_STUB IVCBuildErrorContext_get_BaseDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_put_BaseDirectory_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrBaseDir);


void __RPC_STUB IVCBuildErrorContext_put_BaseDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_ProjectName_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ BSTR *pbstrName);


void __RPC_STUB IVCBuildErrorContext_get_ProjectName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_put_ProjectName_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrBaseName);


void __RPC_STUB IVCBuildErrorContext_put_ProjectName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_AssociatedBuildEngine_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ IDispatch **ppBldEngine);


void __RPC_STUB IVCBuildErrorContext_get_AssociatedBuildEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_put_AssociatedBuildEngine_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ IDispatch *pBldEngine);


void __RPC_STUB IVCBuildErrorContext_put_AssociatedBuildEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][hidden][nonbrowsable] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_ShowOutput_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ VARIANT_BOOL *pbShow);


void __RPC_STUB IVCBuildErrorContext_get_ShowOutput_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][hidden][nonbrowsable] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_put_ShowOutput_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ VARIANT_BOOL bShow);


void __RPC_STUB IVCBuildErrorContext_put_ShowOutput_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVCBuildErrorContext_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_vcbuild_0255 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_vcbuild_0255_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_vcbuild_0255_v0_0_s_ifspec;

#ifndef __IENCBuildSpawner_INTERFACE_DEFINED__
#define __IENCBuildSpawner_INTERFACE_DEFINED__

/* interface IENCBuildSpawner */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IENCBuildSpawner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("66e3a41c-fdb9-11d2-b144-00c04f72dc32")
    IENCBuildSpawner : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StartSpawn( 
            /* [in] */ LPCOLESTR szCurrentDir,
            /* [in] */ LPCOLESTR szCmdLine,
            /* [in] */ IVCBuildErrorContext *pIVCBuildErrorContext,
            /* [in] */ IENCBuildSpawnerCallback *pCallback,
            /* [in] */ BOOL fUseConsoleCP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StopSpawn( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsSysHeader( 
            /* [in] */ LPCOLESTR szIncFileName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IENCBuildSpawnerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IENCBuildSpawner * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IENCBuildSpawner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IENCBuildSpawner * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartSpawn )( 
            IENCBuildSpawner * This,
            /* [in] */ LPCOLESTR szCurrentDir,
            /* [in] */ LPCOLESTR szCmdLine,
            /* [in] */ IVCBuildErrorContext *pIVCBuildErrorContext,
            /* [in] */ IENCBuildSpawnerCallback *pCallback,
            /* [in] */ BOOL fUseConsoleCP);
        
        HRESULT ( STDMETHODCALLTYPE *StopSpawn )( 
            IENCBuildSpawner * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsSysHeader )( 
            IENCBuildSpawner * This,
            /* [in] */ LPCOLESTR szIncFileName);
        
        END_INTERFACE
    } IENCBuildSpawnerVtbl;

    interface IENCBuildSpawner
    {
        CONST_VTBL struct IENCBuildSpawnerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IENCBuildSpawner_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IENCBuildSpawner_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IENCBuildSpawner_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IENCBuildSpawner_StartSpawn(This,szCurrentDir,szCmdLine,pIVCBuildErrorContext,pCallback,fUseConsoleCP)	\
    (This)->lpVtbl -> StartSpawn(This,szCurrentDir,szCmdLine,pIVCBuildErrorContext,pCallback,fUseConsoleCP)

#define IENCBuildSpawner_StopSpawn(This)	\
    (This)->lpVtbl -> StopSpawn(This)

#define IENCBuildSpawner_IsSysHeader(This,szIncFileName)	\
    (This)->lpVtbl -> IsSysHeader(This,szIncFileName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IENCBuildSpawner_StartSpawn_Proxy( 
    IENCBuildSpawner * This,
    /* [in] */ LPCOLESTR szCurrentDir,
    /* [in] */ LPCOLESTR szCmdLine,
    /* [in] */ IVCBuildErrorContext *pIVCBuildErrorContext,
    /* [in] */ IENCBuildSpawnerCallback *pCallback,
    /* [in] */ BOOL fUseConsoleCP);


void __RPC_STUB IENCBuildSpawner_StartSpawn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IENCBuildSpawner_StopSpawn_Proxy( 
    IENCBuildSpawner * This);


void __RPC_STUB IENCBuildSpawner_StopSpawn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IENCBuildSpawner_IsSysHeader_Proxy( 
    IENCBuildSpawner * This,
    /* [in] */ LPCOLESTR szIncFileName);


void __RPC_STUB IENCBuildSpawner_IsSysHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IENCBuildSpawner_INTERFACE_DEFINED__ */


#ifndef __IENCBuildSpawnerCallback_INTERFACE_DEFINED__
#define __IENCBuildSpawnerCallback_INTERFACE_DEFINED__

/* interface IENCBuildSpawnerCallback */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IENCBuildSpawnerCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4ce8c2c0-fdbb-11d2-b144-00c04f72dc32")
    IENCBuildSpawnerCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Done( 
            /* [in] */ HRESULT hrFromBuild,
            /* [in] */ DWORD dwReportedErrors,
            /* [in] */ DWORD dwReportedWarnings) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IENCBuildSpawnerCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IENCBuildSpawnerCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IENCBuildSpawnerCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IENCBuildSpawnerCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            IENCBuildSpawnerCallback * This,
            /* [in] */ HRESULT hrFromBuild,
            /* [in] */ DWORD dwReportedErrors,
            /* [in] */ DWORD dwReportedWarnings);
        
        END_INTERFACE
    } IENCBuildSpawnerCallbackVtbl;

    interface IENCBuildSpawnerCallback
    {
        CONST_VTBL struct IENCBuildSpawnerCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IENCBuildSpawnerCallback_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IENCBuildSpawnerCallback_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IENCBuildSpawnerCallback_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IENCBuildSpawnerCallback_Done(This,hrFromBuild,dwReportedErrors,dwReportedWarnings)	\
    (This)->lpVtbl -> Done(This,hrFromBuild,dwReportedErrors,dwReportedWarnings)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IENCBuildSpawnerCallback_Done_Proxy( 
    IENCBuildSpawnerCallback * This,
    /* [in] */ HRESULT hrFromBuild,
    /* [in] */ DWORD dwReportedErrors,
    /* [in] */ DWORD dwReportedWarnings);


void __RPC_STUB IENCBuildSpawnerCallback_Done_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IENCBuildSpawnerCallback_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\vsmanaged.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:43:34 2002
 */
/* Compiler settings for vsmanaged.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __vsmanaged_h__
#define __vsmanaged_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVSMDCodeDomCreator_FWD_DEFINED__
#define __IVSMDCodeDomCreator_FWD_DEFINED__
typedef interface IVSMDCodeDomCreator IVSMDCodeDomCreator;
#endif 	/* __IVSMDCodeDomCreator_FWD_DEFINED__ */


#ifndef __IVSMDCodeDomProvider_FWD_DEFINED__
#define __IVSMDCodeDomProvider_FWD_DEFINED__
typedef interface IVSMDCodeDomProvider IVSMDCodeDomProvider;
#endif 	/* __IVSMDCodeDomProvider_FWD_DEFINED__ */


#ifndef __IVSMDDesigner_FWD_DEFINED__
#define __IVSMDDesigner_FWD_DEFINED__
typedef interface IVSMDDesigner IVSMDDesigner;
#endif 	/* __IVSMDDesigner_FWD_DEFINED__ */


#ifndef __IVSMDDesignerLoader_FWD_DEFINED__
#define __IVSMDDesignerLoader_FWD_DEFINED__
typedef interface IVSMDDesignerLoader IVSMDDesignerLoader;
#endif 	/* __IVSMDDesignerLoader_FWD_DEFINED__ */


#ifndef __IVSMDDesignerService_FWD_DEFINED__
#define __IVSMDDesignerService_FWD_DEFINED__
typedef interface IVSMDDesignerService IVSMDDesignerService;
#endif 	/* __IVSMDDesignerService_FWD_DEFINED__ */


#ifndef __IVSMDPropertyGrid_FWD_DEFINED__
#define __IVSMDPropertyGrid_FWD_DEFINED__
typedef interface IVSMDPropertyGrid IVSMDPropertyGrid;
#endif 	/* __IVSMDPropertyGrid_FWD_DEFINED__ */


#ifndef __IVSMDPropertyBrowser_FWD_DEFINED__
#define __IVSMDPropertyBrowser_FWD_DEFINED__
typedef interface IVSMDPropertyBrowser IVSMDPropertyBrowser;
#endif 	/* __IVSMDPropertyBrowser_FWD_DEFINED__ */


#ifndef __IVSMDPerPropertyBrowsing_FWD_DEFINED__
#define __IVSMDPerPropertyBrowsing_FWD_DEFINED__
typedef interface IVSMDPerPropertyBrowsing IVSMDPerPropertyBrowsing;
#endif 	/* __IVSMDPerPropertyBrowsing_FWD_DEFINED__ */


/* header files for imported files */
#include "servprov.h"
#include "vsshell.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_vsmanaged_0000 */
/* [local] */ 



enum __VSHPROPID_ASPX
    {	VSHPROPID_ProjAspxLanguage	= 5000,
	VSHPROPID_ProjAspxCodeBehindExt	= 5001,
	VSHPROPID_ProjAspxAutoEventWireup	= 5002
    } ;
extern const __declspec(selectany) GUID CLSID_VSMDResxGenerator = { 0x9abb9d6c, 0x3fe7, 0x44bb, {0xa6, 0xb1, 0xef, 0x38, 0xfd, 0xf2, 0xed, 0xdd } };


extern RPC_IF_HANDLE __MIDL_itf_vsmanaged_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_vsmanaged_0000_v0_0_s_ifspec;


#ifndef __VSManagedDesigner_LIBRARY_DEFINED__
#define __VSManagedDesigner_LIBRARY_DEFINED__

/* library VSManagedDesigner */
/* [helpstring][version][uuid] */ 

#define SID_SVSMDCodeDomProvider IID_IVSMDCodeDomProvider
#define SID_SVSMDDesignerService IID_IVSMDDesignerService
typedef 
enum _PROPERTYGRIDSORT
    {	PGSORT_NOSORT	= 0,
	PGSORT_ALPHABETICAL	= 1,
	PGSORT_CATEGORIZED	= 2
    } 	PROPERTYGRIDSORT;

typedef 
enum _PROPERTYGRIDOPTION
    {	PGOPT_HOTCOMMANDS	= 0,
	PGOPT_HELP	= 1,
	PGOPT_TOOLBAR	= 2
    } 	PROPERTYGRIDOPTION;

#define SID_SVSMDPropertyBrowser IID_IVSMDPropertyBrowser

EXTERN_C const IID LIBID_VSManagedDesigner;

#ifndef __IVSMDCodeDomCreator_INTERFACE_DEFINED__
#define __IVSMDCodeDomCreator_INTERFACE_DEFINED__

/* interface IVSMDCodeDomCreator */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDCodeDomCreator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4CC03BF7-4D89-4198-8E4D-17E217CA07B2")
    IVSMDCodeDomCreator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateCodeDomProvider( 
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [retval][out] */ IVSMDCodeDomProvider **ppProvider) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDCodeDomCreatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDCodeDomCreator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDCodeDomCreator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDCodeDomCreator * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCodeDomProvider )( 
            IVSMDCodeDomCreator * This,
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [retval][out] */ IVSMDCodeDomProvider **ppProvider);
        
        END_INTERFACE
    } IVSMDCodeDomCreatorVtbl;

    interface IVSMDCodeDomCreator
    {
        CONST_VTBL struct IVSMDCodeDomCreatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDCodeDomCreator_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDCodeDomCreator_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDCodeDomCreator_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDCodeDomCreator_CreateCodeDomProvider(This,pHier,itemid,ppProvider)	\
    (This)->lpVtbl -> CreateCodeDomProvider(This,pHier,itemid,ppProvider)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVSMDCodeDomCreator_CreateCodeDomProvider_Proxy( 
    IVSMDCodeDomCreator * This,
    /* [in] */ IVsHierarchy *pHier,
    /* [in] */ VSITEMID itemid,
    /* [retval][out] */ IVSMDCodeDomProvider **ppProvider);


void __RPC_STUB IVSMDCodeDomCreator_CreateCodeDomProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDCodeDomCreator_INTERFACE_DEFINED__ */


#ifndef __IVSMDCodeDomProvider_INTERFACE_DEFINED__
#define __IVSMDCodeDomProvider_INTERFACE_DEFINED__

/* interface IVSMDCodeDomProvider */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDCodeDomProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("73E59688-C7C4-4a85-AF64-A538754784C5")
    IVSMDCodeDomProvider : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CodeDomProvider( 
            /* [retval][out] */ IDispatch **ppProvider) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDCodeDomProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDCodeDomProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDCodeDomProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDCodeDomProvider * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodeDomProvider )( 
            IVSMDCodeDomProvider * This,
            /* [retval][out] */ IDispatch **ppProvider);
        
        END_INTERFACE
    } IVSMDCodeDomProviderVtbl;

    interface IVSMDCodeDomProvider
    {
        CONST_VTBL struct IVSMDCodeDomProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDCodeDomProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDCodeDomProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDCodeDomProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDCodeDomProvider_get_CodeDomProvider(This,ppProvider)	\
    (This)->lpVtbl -> get_CodeDomProvider(This,ppProvider)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDCodeDomProvider_get_CodeDomProvider_Proxy( 
    IVSMDCodeDomProvider * This,
    /* [retval][out] */ IDispatch **ppProvider);


void __RPC_STUB IVSMDCodeDomProvider_get_CodeDomProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDCodeDomProvider_INTERFACE_DEFINED__ */


#ifndef __IVSMDDesigner_INTERFACE_DEFINED__
#define __IVSMDDesigner_INTERFACE_DEFINED__

/* interface IVSMDDesigner */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDDesigner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7494682A-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDDesigner : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CommandGuid( 
            /* [retval][out] */ GUID *pguidCmdId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ IUnknown **pView) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SelectionContainer( 
            /* [retval][out] */ IUnknown **ppSelCon) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Dispose( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Flush( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLoadError( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDDesignerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDDesigner * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDDesigner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDDesigner * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommandGuid )( 
            IVSMDDesigner * This,
            /* [retval][out] */ GUID *pguidCmdId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IVSMDDesigner * This,
            /* [retval][out] */ IUnknown **pView);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionContainer )( 
            IVSMDDesigner * This,
            /* [retval][out] */ IUnknown **ppSelCon);
        
        HRESULT ( STDMETHODCALLTYPE *Dispose )( 
            IVSMDDesigner * This);
        
        HRESULT ( STDMETHODCALLTYPE *Flush )( 
            IVSMDDesigner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLoadError )( 
            IVSMDDesigner * This);
        
        END_INTERFACE
    } IVSMDDesignerVtbl;

    interface IVSMDDesigner
    {
        CONST_VTBL struct IVSMDDesignerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDDesigner_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDDesigner_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDDesigner_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDDesigner_get_CommandGuid(This,pguidCmdId)	\
    (This)->lpVtbl -> get_CommandGuid(This,pguidCmdId)

#define IVSMDDesigner_get_View(This,pView)	\
    (This)->lpVtbl -> get_View(This,pView)

#define IVSMDDesigner_get_SelectionContainer(This,ppSelCon)	\
    (This)->lpVtbl -> get_SelectionContainer(This,ppSelCon)

#define IVSMDDesigner_Dispose(This)	\
    (This)->lpVtbl -> Dispose(This)

#define IVSMDDesigner_Flush(This)	\
    (This)->lpVtbl -> Flush(This)

#define IVSMDDesigner_GetLoadError(This)	\
    (This)->lpVtbl -> GetLoadError(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDDesigner_get_CommandGuid_Proxy( 
    IVSMDDesigner * This,
    /* [retval][out] */ GUID *pguidCmdId);


void __RPC_STUB IVSMDDesigner_get_CommandGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDDesigner_get_View_Proxy( 
    IVSMDDesigner * This,
    /* [retval][out] */ IUnknown **pView);


void __RPC_STUB IVSMDDesigner_get_View_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDDesigner_get_SelectionContainer_Proxy( 
    IVSMDDesigner * This,
    /* [retval][out] */ IUnknown **ppSelCon);


void __RPC_STUB IVSMDDesigner_get_SelectionContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesigner_Dispose_Proxy( 
    IVSMDDesigner * This);


void __RPC_STUB IVSMDDesigner_Dispose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesigner_Flush_Proxy( 
    IVSMDDesigner * This);


void __RPC_STUB IVSMDDesigner_Flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesigner_GetLoadError_Proxy( 
    IVSMDDesigner * This);


void __RPC_STUB IVSMDDesigner_GetLoadError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDDesigner_INTERFACE_DEFINED__ */


#ifndef __IVSMDDesignerLoader_INTERFACE_DEFINED__
#define __IVSMDDesignerLoader_INTERFACE_DEFINED__

/* interface IVSMDDesignerLoader */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDDesignerLoader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74946834-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDDesignerLoader : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Dispose( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEditorCaption( 
            /* [in] */ READONLYSTATUS status,
            /* [retval][out] */ BSTR *pbstrCaption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [in] */ IUnknown *pDocData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBaseEditorCaption( 
            /* [in] */ LPCOLESTR pwszCaption) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDDesignerLoaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDDesignerLoader * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDDesignerLoader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDDesignerLoader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Dispose )( 
            IVSMDDesignerLoader * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEditorCaption )( 
            IVSMDDesignerLoader * This,
            /* [in] */ READONLYSTATUS status,
            /* [retval][out] */ BSTR *pbstrCaption);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IVSMDDesignerLoader * This,
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [in] */ IUnknown *pDocData);
        
        HRESULT ( STDMETHODCALLTYPE *SetBaseEditorCaption )( 
            IVSMDDesignerLoader * This,
            /* [in] */ LPCOLESTR pwszCaption);
        
        END_INTERFACE
    } IVSMDDesignerLoaderVtbl;

    interface IVSMDDesignerLoader
    {
        CONST_VTBL struct IVSMDDesignerLoaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDDesignerLoader_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDDesignerLoader_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDDesignerLoader_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDDesignerLoader_Dispose(This)	\
    (This)->lpVtbl -> Dispose(This)

#define IVSMDDesignerLoader_GetEditorCaption(This,status,pbstrCaption)	\
    (This)->lpVtbl -> GetEditorCaption(This,status,pbstrCaption)

#define IVSMDDesignerLoader_Initialize(This,pSp,pHier,itemid,pDocData)	\
    (This)->lpVtbl -> Initialize(This,pSp,pHier,itemid,pDocData)

#define IVSMDDesignerLoader_SetBaseEditorCaption(This,pwszCaption)	\
    (This)->lpVtbl -> SetBaseEditorCaption(This,pwszCaption)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVSMDDesignerLoader_Dispose_Proxy( 
    IVSMDDesignerLoader * This);


void __RPC_STUB IVSMDDesignerLoader_Dispose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerLoader_GetEditorCaption_Proxy( 
    IVSMDDesignerLoader * This,
    /* [in] */ READONLYSTATUS status,
    /* [retval][out] */ BSTR *pbstrCaption);


void __RPC_STUB IVSMDDesignerLoader_GetEditorCaption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerLoader_Initialize_Proxy( 
    IVSMDDesignerLoader * This,
    /* [in] */ IServiceProvider *pSp,
    /* [in] */ IVsHierarchy *pHier,
    /* [in] */ VSITEMID itemid,
    /* [in] */ IUnknown *pDocData);


void __RPC_STUB IVSMDDesignerLoader_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerLoader_SetBaseEditorCaption_Proxy( 
    IVSMDDesignerLoader * This,
    /* [in] */ LPCOLESTR pwszCaption);


void __RPC_STUB IVSMDDesignerLoader_SetBaseEditorCaption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDDesignerLoader_INTERFACE_DEFINED__ */


#ifndef __IVSMDDesignerService_INTERFACE_DEFINED__
#define __IVSMDDesignerService_INTERFACE_DEFINED__

/* interface IVSMDDesignerService */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDDesignerService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74946829-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDDesignerService : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DesignViewAttribute( 
            /* [retval][out] */ BSTR *pbstrAttribute) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDesigner( 
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ IUnknown *pDesignerLoader,
            /* [retval][out] */ IVSMDDesigner **ppDesigner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDesignerForClass( 
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ LPCOLESTR pwszComponentClass,
            /* [retval][out] */ IVSMDDesigner **ppDesigner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDesignerLoader( 
            /* [in] */ LPCOLESTR pwszCodeStreamClass,
            /* [retval][out] */ IUnknown **ppCodeStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDesignerLoaderClassForFile( 
            /* [in] */ LPCOLESTR pwszFileName,
            /* [retval][out] */ BSTR *pbstrDesignerLoaderClass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterDesignViewAttribute( 
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [in] */ int dwClass,
            /* [in] */ LPOLESTR pwszAttributeValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDDesignerServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDDesignerService * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDDesignerService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDDesignerService * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DesignViewAttribute )( 
            IVSMDDesignerService * This,
            /* [retval][out] */ BSTR *pbstrAttribute);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDesigner )( 
            IVSMDDesignerService * This,
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ IUnknown *pDesignerLoader,
            /* [retval][out] */ IVSMDDesigner **ppDesigner);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDesignerForClass )( 
            IVSMDDesignerService * This,
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ LPCOLESTR pwszComponentClass,
            /* [retval][out] */ IVSMDDesigner **ppDesigner);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDesignerLoader )( 
            IVSMDDesignerService * This,
            /* [in] */ LPCOLESTR pwszCodeStreamClass,
            /* [retval][out] */ IUnknown **ppCodeStream);
        
        HRESULT ( STDMETHODCALLTYPE *GetDesignerLoaderClassForFile )( 
            IVSMDDesignerService * This,
            /* [in] */ LPCOLESTR pwszFileName,
            /* [retval][out] */ BSTR *pbstrDesignerLoaderClass);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterDesignViewAttribute )( 
            IVSMDDesignerService * This,
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [in] */ int dwClass,
            /* [in] */ LPOLESTR pwszAttributeValue);
        
        END_INTERFACE
    } IVSMDDesignerServiceVtbl;

    interface IVSMDDesignerService
    {
        CONST_VTBL struct IVSMDDesignerServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDDesignerService_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDDesignerService_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDDesignerService_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDDesignerService_get_DesignViewAttribute(This,pbstrAttribute)	\
    (This)->lpVtbl -> get_DesignViewAttribute(This,pbstrAttribute)

#define IVSMDDesignerService_CreateDesigner(This,pSp,pDesignerLoader,ppDesigner)	\
    (This)->lpVtbl -> CreateDesigner(This,pSp,pDesignerLoader,ppDesigner)

#define IVSMDDesignerService_CreateDesignerForClass(This,pSp,pwszComponentClass,ppDesigner)	\
    (This)->lpVtbl -> CreateDesignerForClass(This,pSp,pwszComponentClass,ppDesigner)

#define IVSMDDesignerService_CreateDesignerLoader(This,pwszCodeStreamClass,ppCodeStream)	\
    (This)->lpVtbl -> CreateDesignerLoader(This,pwszCodeStreamClass,ppCodeStream)

#define IVSMDDesignerService_GetDesignerLoaderClassForFile(This,pwszFileName,pbstrDesignerLoaderClass)	\
    (This)->lpVtbl -> GetDesignerLoaderClassForFile(This,pwszFileName,pbstrDesignerLoaderClass)

#define IVSMDDesignerService_RegisterDesignViewAttribute(This,pHier,itemid,dwClass,pwszAttributeValue)	\
    (This)->lpVtbl -> RegisterDesignViewAttribute(This,pHier,itemid,dwClass,pwszAttributeValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDDesignerService_get_DesignViewAttribute_Proxy( 
    IVSMDDesignerService * This,
    /* [retval][out] */ BSTR *pbstrAttribute);


void __RPC_STUB IVSMDDesignerService_get_DesignViewAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_CreateDesigner_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ IServiceProvider *pSp,
    /* [in] */ IUnknown *pDesignerLoader,
    /* [retval][out] */ IVSMDDesigner **ppDesigner);


void __RPC_STUB IVSMDDesignerService_CreateDesigner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_CreateDesignerForClass_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ IServiceProvider *pSp,
    /* [in] */ LPCOLESTR pwszComponentClass,
    /* [retval][out] */ IVSMDDesigner **ppDesigner);


void __RPC_STUB IVSMDDesignerService_CreateDesignerForClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_CreateDesignerLoader_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ LPCOLESTR pwszCodeStreamClass,
    /* [retval][out] */ IUnknown **ppCodeStream);


void __RPC_STUB IVSMDDesignerService_CreateDesignerLoader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_GetDesignerLoaderClassForFile_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ LPCOLESTR pwszFileName,
    /* [retval][out] */ BSTR *pbstrDesignerLoaderClass);


void __RPC_STUB IVSMDDesignerService_GetDesignerLoaderClassForFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_RegisterDesignViewAttribute_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ IVsHierarchy *pHier,
    /* [in] */ VSITEMID itemid,
    /* [in] */ int dwClass,
    /* [in] */ LPOLESTR pwszAttributeValue);


void __RPC_STUB IVSMDDesignerService_RegisterDesignViewAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDDesignerService_INTERFACE_DEFINED__ */


#ifndef __IVSMDPropertyGrid_INTERFACE_DEFINED__
#define __IVSMDPropertyGrid_INTERFACE_DEFINED__

/* interface IVSMDPropertyGrid */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDPropertyGrid;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74946837-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDPropertyGrid : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CommandsVisible( 
            /* [retval][out] */ VARIANT_BOOL *pfVisible) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ HWND *phwnd) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GridSort( 
            /* [retval][out] */ PROPERTYGRIDSORT *pSort) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GridSort( 
            /* [in] */ PROPERTYGRIDSORT sort) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SelectedPropertyName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Dispose( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOption( 
            /* [in] */ PROPERTYGRIDOPTION option,
            /* [retval][out] */ VARIANT *pvtOption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOption( 
            /* [in] */ PROPERTYGRIDOPTION option,
            /* [in] */ VARIANT vtOption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSelectedObjects( 
            int cObjects,
            /* [size_is][in] */ IUnknown **ppUnk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDPropertyGridVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDPropertyGrid * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDPropertyGrid * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDPropertyGrid * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommandsVisible )( 
            IVSMDPropertyGrid * This,
            /* [retval][out] */ VARIANT_BOOL *pfVisible);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IVSMDPropertyGrid * This,
            /* [retval][out] */ HWND *phwnd);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GridSort )( 
            IVSMDPropertyGrid * This,
            /* [retval][out] */ PROPERTYGRIDSORT *pSort);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GridSort )( 
            IVSMDPropertyGrid * This,
            /* [in] */ PROPERTYGRIDSORT sort);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedPropertyName )( 
            IVSMDPropertyGrid * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *Dispose )( 
            IVSMDPropertyGrid * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetOption )( 
            IVSMDPropertyGrid * This,
            /* [in] */ PROPERTYGRIDOPTION option,
            /* [retval][out] */ VARIANT *pvtOption);
        
        HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            IVSMDPropertyGrid * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetOption )( 
            IVSMDPropertyGrid * This,
            /* [in] */ PROPERTYGRIDOPTION option,
            /* [in] */ VARIANT vtOption);
        
        HRESULT ( STDMETHODCALLTYPE *SetSelectedObjects )( 
            IVSMDPropertyGrid * This,
            int cObjects,
            /* [size_is][in] */ IUnknown **ppUnk);
        
        END_INTERFACE
    } IVSMDPropertyGridVtbl;

    interface IVSMDPropertyGrid
    {
        CONST_VTBL struct IVSMDPropertyGridVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDPropertyGrid_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDPropertyGrid_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDPropertyGrid_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDPropertyGrid_get_CommandsVisible(This,pfVisible)	\
    (This)->lpVtbl -> get_CommandsVisible(This,pfVisible)

#define IVSMDPropertyGrid_get_Handle(This,phwnd)	\
    (This)->lpVtbl -> get_Handle(This,phwnd)

#define IVSMDPropertyGrid_get_GridSort(This,pSort)	\
    (This)->lpVtbl -> get_GridSort(This,pSort)

#define IVSMDPropertyGrid_put_GridSort(This,sort)	\
    (This)->lpVtbl -> put_GridSort(This,sort)

#define IVSMDPropertyGrid_get_SelectedPropertyName(This,pbstrName)	\
    (This)->lpVtbl -> get_SelectedPropertyName(This,pbstrName)

#define IVSMDPropertyGrid_Dispose(This)	\
    (This)->lpVtbl -> Dispose(This)

#define IVSMDPropertyGrid_GetOption(This,option,pvtOption)	\
    (This)->lpVtbl -> GetOption(This,option,pvtOption)

#define IVSMDPropertyGrid_Refresh(This)	\
    (This)->lpVtbl -> Refresh(This)

#define IVSMDPropertyGrid_SetOption(This,option,vtOption)	\
    (This)->lpVtbl -> SetOption(This,option,vtOption)

#define IVSMDPropertyGrid_SetSelectedObjects(This,cObjects,ppUnk)	\
    (This)->lpVtbl -> SetSelectedObjects(This,cObjects,ppUnk)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_get_CommandsVisible_Proxy( 
    IVSMDPropertyGrid * This,
    /* [retval][out] */ VARIANT_BOOL *pfVisible);


void __RPC_STUB IVSMDPropertyGrid_get_CommandsVisible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_get_Handle_Proxy( 
    IVSMDPropertyGrid * This,
    /* [retval][out] */ HWND *phwnd);


void __RPC_STUB IVSMDPropertyGrid_get_Handle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_get_GridSort_Proxy( 
    IVSMDPropertyGrid * This,
    /* [retval][out] */ PROPERTYGRIDSORT *pSort);


void __RPC_STUB IVSMDPropertyGrid_get_GridSort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_put_GridSort_Proxy( 
    IVSMDPropertyGrid * This,
    /* [in] */ PROPERTYGRIDSORT sort);


void __RPC_STUB IVSMDPropertyGrid_put_GridSort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_get_SelectedPropertyName_Proxy( 
    IVSMDPropertyGrid * This,
    /* [retval][out] */ BSTR *pbstrName);


void __RPC_STUB IVSMDPropertyGrid_get_SelectedPropertyName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_Dispose_Proxy( 
    IVSMDPropertyGrid * This);


void __RPC_STUB IVSMDPropertyGrid_Dispose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_GetOption_Proxy( 
    IVSMDPropertyGrid * This,
    /* [in] */ PROPERTYGRIDOPTION option,
    /* [retval][out] */ VARIANT *pvtOption);


void __RPC_STUB IVSMDPropertyGrid_GetOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_Refresh_Proxy( 
    IVSMDPropertyGrid * This);


void __RPC_STUB IVSMDPropertyGrid_Refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_SetOption_Proxy( 
    IVSMDPropertyGrid * This,
    /* [in] */ PROPERTYGRIDOPTION option,
    /* [in] */ VARIANT vtOption);


void __RPC_STUB IVSMDPropertyGrid_SetOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_SetSelectedObjects_Proxy( 
    IVSMDPropertyGrid * This,
    int cObjects,
    /* [size_is][in] */ IUnknown **ppUnk);


void __RPC_STUB IVSMDPropertyGrid_SetSelectedObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDPropertyGrid_INTERFACE_DEFINED__ */


#ifndef __IVSMDPropertyBrowser_INTERFACE_DEFINED__
#define __IVSMDPropertyBrowser_INTERFACE_DEFINED__

/* interface IVSMDPropertyBrowser */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDPropertyBrowser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74946810-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDPropertyBrowser : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WindowGlyphResourceID( 
            /* [retval][out] */ DWORD *pdwResID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePropertyGrid( 
            /* [retval][out] */ IVSMDPropertyGrid **ppGrid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDPropertyBrowserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDPropertyBrowser * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDPropertyBrowser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDPropertyBrowser * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowGlyphResourceID )( 
            IVSMDPropertyBrowser * This,
            /* [retval][out] */ DWORD *pdwResID);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePropertyGrid )( 
            IVSMDPropertyBrowser * This,
            /* [retval][out] */ IVSMDPropertyGrid **ppGrid);
        
        HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            IVSMDPropertyBrowser * This);
        
        END_INTERFACE
    } IVSMDPropertyBrowserVtbl;

    interface IVSMDPropertyBrowser
    {
        CONST_VTBL struct IVSMDPropertyBrowserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDPropertyBrowser_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDPropertyBrowser_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDPropertyBrowser_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDPropertyBrowser_get_WindowGlyphResourceID(This,pdwResID)	\
    (This)->lpVtbl -> get_WindowGlyphResourceID(This,pdwResID)

#define IVSMDPropertyBrowser_CreatePropertyGrid(This,ppGrid)	\
    (This)->lpVtbl -> CreatePropertyGrid(This,ppGrid)

#define IVSMDPropertyBrowser_Refresh(This)	\
    (This)->lpVtbl -> Refresh(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyBrowser_get_WindowGlyphResourceID_Proxy( 
    IVSMDPropertyBrowser * This,
    /* [retval][out] */ DWORD *pdwResID);


void __RPC_STUB IVSMDPropertyBrowser_get_WindowGlyphResourceID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyBrowser_CreatePropertyGrid_Proxy( 
    IVSMDPropertyBrowser * This,
    /* [retval][out] */ IVSMDPropertyGrid **ppGrid);


void __RPC_STUB IVSMDPropertyBrowser_CreatePropertyGrid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyBrowser_Refresh_Proxy( 
    IVSMDPropertyBrowser * This);


void __RPC_STUB IVSMDPropertyBrowser_Refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDPropertyBrowser_INTERFACE_DEFINED__ */


#ifndef __IVSMDPerPropertyBrowsing_INTERFACE_DEFINED__
#define __IVSMDPerPropertyBrowsing_INTERFACE_DEFINED__

/* interface IVSMDPerPropertyBrowsing */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IVSMDPerPropertyBrowsing;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7494683C-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDPerPropertyBrowsing : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPropertyAttributes( 
            DISPID dispid,
            /* [out] */ UINT *pceltAttrs,
            /* [size_is][size_is][out] */ BSTR **ppbstrTypeNames,
            /* [size_is][size_is][out] */ VARIANT **ppvarAttrValues) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDPerPropertyBrowsingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDPerPropertyBrowsing * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDPerPropertyBrowsing * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDPerPropertyBrowsing * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyAttributes )( 
            IVSMDPerPropertyBrowsing * This,
            DISPID dispid,
            /* [out] */ UINT *pceltAttrs,
            /* [size_is][size_is][out] */ BSTR **ppbstrTypeNames,
            /* [size_is][size_is][out] */ VARIANT **ppvarAttrValues);
        
        END_INTERFACE
    } IVSMDPerPropertyBrowsingVtbl;

    interface IVSMDPerPropertyBrowsing
    {
        CONST_VTBL struct IVSMDPerPropertyBrowsingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDPerPropertyBrowsing_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDPerPropertyBrowsing_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDPerPropertyBrowsing_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDPerPropertyBrowsing_GetPropertyAttributes(This,dispid,pceltAttrs,ppbstrTypeNames,ppvarAttrValues)	\
    (This)->lpVtbl -> GetPropertyAttributes(This,dispid,pceltAttrs,ppbstrTypeNames,ppvarAttrValues)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVSMDPerPropertyBrowsing_GetPropertyAttributes_Proxy( 
    IVSMDPerPropertyBrowsing * This,
    DISPID dispid,
    /* [out] */ UINT *pceltAttrs,
    /* [size_is][size_is][out] */ BSTR **ppbstrTypeNames,
    /* [size_is][size_is][out] */ VARIANT **ppvarAttrValues);


void __RPC_STUB IVSMDPerPropertyBrowsing_GetPropertyAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDPerPropertyBrowsing_INTERFACE_DEFINED__ */

#endif /* __VSManagedDesigner_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\sh.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:51:35 2002
 */
/* Compiler settings for sh.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __sh_h__
#define __sh_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDebugSymbolProvider_FWD_DEFINED__
#define __IDebugSymbolProvider_FWD_DEFINED__
typedef interface IDebugSymbolProvider IDebugSymbolProvider;
#endif 	/* __IDebugSymbolProvider_FWD_DEFINED__ */


#ifndef __IDebugComPlusSymbolProvider_FWD_DEFINED__
#define __IDebugComPlusSymbolProvider_FWD_DEFINED__
typedef interface IDebugComPlusSymbolProvider IDebugComPlusSymbolProvider;
#endif 	/* __IDebugComPlusSymbolProvider_FWD_DEFINED__ */


#ifndef __IDebugNativeSymbolProvider_FWD_DEFINED__
#define __IDebugNativeSymbolProvider_FWD_DEFINED__
typedef interface IDebugNativeSymbolProvider IDebugNativeSymbolProvider;
#endif 	/* __IDebugNativeSymbolProvider_FWD_DEFINED__ */


#ifndef __IDebugField_FWD_DEFINED__
#define __IDebugField_FWD_DEFINED__
typedef interface IDebugField IDebugField;
#endif 	/* __IDebugField_FWD_DEFINED__ */


#ifndef __IDebugContainerField_FWD_DEFINED__
#define __IDebugContainerField_FWD_DEFINED__
typedef interface IDebugContainerField IDebugContainerField;
#endif 	/* __IDebugContainerField_FWD_DEFINED__ */


#ifndef __IDebugMethodField_FWD_DEFINED__
#define __IDebugMethodField_FWD_DEFINED__
typedef interface IDebugMethodField IDebugMethodField;
#endif 	/* __IDebugMethodField_FWD_DEFINED__ */


#ifndef __IDebugClassField_FWD_DEFINED__
#define __IDebugClassField_FWD_DEFINED__
typedef interface IDebugClassField IDebugClassField;
#endif 	/* __IDebugClassField_FWD_DEFINED__ */


#ifndef __IDebugPropertyField_FWD_DEFINED__
#define __IDebugPropertyField_FWD_DEFINED__
typedef interface IDebugPropertyField IDebugPropertyField;
#endif 	/* __IDebugPropertyField_FWD_DEFINED__ */


#ifndef __IDebugArrayField_FWD_DEFINED__
#define __IDebugArrayField_FWD_DEFINED__
typedef interface IDebugArrayField IDebugArrayField;
#endif 	/* __IDebugArrayField_FWD_DEFINED__ */


#ifndef __IDebugPointerField_FWD_DEFINED__
#define __IDebugPointerField_FWD_DEFINED__
typedef interface IDebugPointerField IDebugPointerField;
#endif 	/* __IDebugPointerField_FWD_DEFINED__ */


#ifndef __IDebugEnumField_FWD_DEFINED__
#define __IDebugEnumField_FWD_DEFINED__
typedef interface IDebugEnumField IDebugEnumField;
#endif 	/* __IDebugEnumField_FWD_DEFINED__ */


#ifndef __IDebugBitField_FWD_DEFINED__
#define __IDebugBitField_FWD_DEFINED__
typedef interface IDebugBitField IDebugBitField;
#endif 	/* __IDebugBitField_FWD_DEFINED__ */


#ifndef __IDebugDynamicField_FWD_DEFINED__
#define __IDebugDynamicField_FWD_DEFINED__
typedef interface IDebugDynamicField IDebugDynamicField;
#endif 	/* __IDebugDynamicField_FWD_DEFINED__ */


#ifndef __IDebugDynamicFieldCOMPlus_FWD_DEFINED__
#define __IDebugDynamicFieldCOMPlus_FWD_DEFINED__
typedef interface IDebugDynamicFieldCOMPlus IDebugDynamicFieldCOMPlus;
#endif 	/* __IDebugDynamicFieldCOMPlus_FWD_DEFINED__ */


#ifndef __IDebugEngineSymbolProviderServices_FWD_DEFINED__
#define __IDebugEngineSymbolProviderServices_FWD_DEFINED__
typedef interface IDebugEngineSymbolProviderServices IDebugEngineSymbolProviderServices;
#endif 	/* __IDebugEngineSymbolProviderServices_FWD_DEFINED__ */


#ifndef __IDebugAddress_FWD_DEFINED__
#define __IDebugAddress_FWD_DEFINED__
typedef interface IDebugAddress IDebugAddress;
#endif 	/* __IDebugAddress_FWD_DEFINED__ */


#ifndef __IEnumDebugFields_FWD_DEFINED__
#define __IEnumDebugFields_FWD_DEFINED__
typedef interface IEnumDebugFields IEnumDebugFields;
#endif 	/* __IEnumDebugFields_FWD_DEFINED__ */


#ifndef __IEnumDebugAddresses_FWD_DEFINED__
#define __IEnumDebugAddresses_FWD_DEFINED__
typedef interface IEnumDebugAddresses IEnumDebugAddresses;
#endif 	/* __IEnumDebugAddresses_FWD_DEFINED__ */


#ifndef __IDebugCustomAttributeQuery_FWD_DEFINED__
#define __IDebugCustomAttributeQuery_FWD_DEFINED__
typedef interface IDebugCustomAttributeQuery IDebugCustomAttributeQuery;
#endif 	/* __IDebugCustomAttributeQuery_FWD_DEFINED__ */


#ifndef __SHManaged_FWD_DEFINED__
#define __SHManaged_FWD_DEFINED__

#ifdef __cplusplus
typedef class SHManaged SHManaged;
#else
typedef struct SHManaged SHManaged;
#endif /* __cplusplus */

#endif 	/* __SHManaged_FWD_DEFINED__ */


/* header files for imported files */
#include "wtypes.h"
#include "msdbg.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_sh_0000 */
/* [local] */ 


















// Symbol provider HRESULTs
//
// HRESULTs: General
static const int E_SH_SYMBOL_STORE_NOT_INITIALIZED			= MAKE_HRESULT(1, FACILITY_ITF, 0x0001);
static const int E_SH_SYMBOL_STORE_ALREADY_INITIALIZED		= MAKE_HRESULT(1, FACILITY_ITF, 0x0002);
// HRESULTs: GetContainerField and GetTypeFromAddress
static const int E_SH_INVALID_ADDRESS						= MAKE_HRESULT(1, FACILITY_ITF, 0x0003);
// HRESULTs: GetAddressesFromPosition
static const int E_SH_NO_SYMBOLS_FOR_POSITION				= MAKE_HRESULT(1, FACILITY_ITF, 0x0004);
static const int E_SH_INVALID_POSITION						= MAKE_HRESULT(1, FACILITY_ITF, 0x0005);
// HRESULTs: GetContextFromAddress
static const int E_SH_NO_SYMBOLS_FOR_ADDRESS					= MAKE_HRESULT(1, FACILITY_ITF, 0x0006);
// HRESULTs: GetAddress
static const int E_SH_NO_ADDRESS								= MAKE_HRESULT(1, FACILITY_ITF, 0x0007);
// HRESULTs: GetType
static const int E_SH_NO_TYPE								= MAKE_HRESULT(1, FACILITY_ITF, 0x0008);
static const int E_SH_DYNAMIC_TYPE							= MAKE_HRESULT(1, FACILITY_ITF, 0x0009);
// HRESULTs: GetContainer
static const int S_SH_NO_CONTAINER							= MAKE_HRESULT(0, FACILITY_ITF, 0x000a);
// HRESULTs: GetSize
static const int S_SH_NO_SIZE								= MAKE_HRESULT(0, FACILITY_ITF, 0x000b);
static const int E_SH_DYNAMIC_SIZE							= MAKE_HRESULT(1, FACILITY_ITF, 0x000c);
// HRESULTs: EnumFields
static const int S_SH_NO_FIELDS								= MAKE_HRESULT(0, FACILITY_ITF, 0x000d);
// HRESULTs: GetThis
static const int S_SH_METHOD_NO_THIS							= MAKE_HRESULT(0, FACILITY_ITF, 0x000e);
// HRESULTs: EnumBaseClasses
static const int S_SH_NO_BASE_CLASSES						= MAKE_HRESULT(0, FACILITY_ITF, 0x000f);
static const int E_SH_FILE_NOT_FOUND						    = MAKE_HRESULT(1, FACILITY_ITF, 0x0010);
extern GUID guidSymStoreMetaPDB;
extern GUID guidConstantValue;
extern GUID guidConstantType;
extern GUID guidIntPtr;
// HRESULTS: GetContextInfo
static const int E_SH_NO_DOC_CONTEXT						    = MAKE_HRESULT(1, FACILITY_ITF, 0x0011);
// HRESULTS: ClassRefToClassDef
static const int E_SH_CLASSDEFINITION_NOT_LOADED				= MAKE_HRESULT(1, FACILITY_ITF, 0x0012);
typedef INT32 _mdToken;

typedef 
enum NameMatchOptions
    {	nmNone	= 0,
	nmCaseSensitive	= nmNone + 1,
	nmCaseInsensitive	= nmCaseSensitive + 1
    } 	NAME_MATCH;



extern RPC_IF_HANDLE __MIDL_itf_sh_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_sh_0000_v0_0_s_ifspec;

#ifndef __IDebugSymbolProvider_INTERFACE_DEFINED__
#define __IDebugSymbolProvider_INTERFACE_DEFINED__

/* interface IDebugSymbolProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugSymbolProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eae-8b9d-11d2-9014-00c04fa38338")
    IDebugSymbolProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IDebugEngineSymbolProviderServices *pServices) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Uninitialize( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContainerField( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugContainerField **ppContainerField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetField( 
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugAddress *pAddressCur,
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAddressesFromPosition( 
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAddressesFromContext( 
            /* [in] */ IDebugDocumentContext2 *pDocContext,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContextFromAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugDocumentContext2 **ppDocContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguage( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ GUID *pguidLanguage,
            /* [out] */ GUID *pguidLanguageVendor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGlobalContainer( 
            /* [out] */ IDebugContainerField **pField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMethodFieldsByName( 
            /* [full][in] */ LPCOLESTR pszFullName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClassTypeByName( 
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugClassField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNamespacesUsedAtAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeByName( 
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNextAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IDebugAddress **ppAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugSymbolProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugSymbolProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugSymbolProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugEngineSymbolProviderServices *pServices);
        
        HRESULT ( STDMETHODCALLTYPE *Uninitialize )( 
            IDebugSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainerField )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetField )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugAddress *pAddressCur,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromPosition )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromContext )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugDocumentContext2 *pDocContext,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetContextFromAddress )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugDocumentContext2 **ppDocContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ GUID *pguidLanguage,
            /* [out] */ GUID *pguidLanguageVendor);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalContainer )( 
            IDebugSymbolProvider * This,
            /* [out] */ IDebugContainerField **pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetMethodFieldsByName )( 
            IDebugSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszFullName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassTypeByName )( 
            IDebugSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugClassField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespacesUsedAtAddress )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeByName )( 
            IDebugSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextAddress )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IDebugAddress **ppAddress);
        
        END_INTERFACE
    } IDebugSymbolProviderVtbl;

    interface IDebugSymbolProvider
    {
        CONST_VTBL struct IDebugSymbolProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugSymbolProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugSymbolProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugSymbolProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugSymbolProvider_Initialize(This,pServices)	\
    (This)->lpVtbl -> Initialize(This,pServices)

#define IDebugSymbolProvider_Uninitialize(This)	\
    (This)->lpVtbl -> Uninitialize(This)

#define IDebugSymbolProvider_GetContainerField(This,pAddress,ppContainerField)	\
    (This)->lpVtbl -> GetContainerField(This,pAddress,ppContainerField)

#define IDebugSymbolProvider_GetField(This,pAddress,pAddressCur,ppField)	\
    (This)->lpVtbl -> GetField(This,pAddress,pAddressCur,ppField)

#define IDebugSymbolProvider_GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugSymbolProvider_GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugSymbolProvider_GetContextFromAddress(This,pAddress,ppDocContext)	\
    (This)->lpVtbl -> GetContextFromAddress(This,pAddress,ppDocContext)

#define IDebugSymbolProvider_GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)	\
    (This)->lpVtbl -> GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)

#define IDebugSymbolProvider_GetGlobalContainer(This,pField)	\
    (This)->lpVtbl -> GetGlobalContainer(This,pField)

#define IDebugSymbolProvider_GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)	\
    (This)->lpVtbl -> GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)

#define IDebugSymbolProvider_GetClassTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetClassTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugSymbolProvider_GetNamespacesUsedAtAddress(This,pAddress,ppEnum)	\
    (This)->lpVtbl -> GetNamespacesUsedAtAddress(This,pAddress,ppEnum)

#define IDebugSymbolProvider_GetTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugSymbolProvider_GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)	\
    (This)->lpVtbl -> GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_Initialize_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugEngineSymbolProviderServices *pServices);


void __RPC_STUB IDebugSymbolProvider_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_Uninitialize_Proxy( 
    IDebugSymbolProvider * This);


void __RPC_STUB IDebugSymbolProvider_Uninitialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetContainerField_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IDebugContainerField **ppContainerField);


void __RPC_STUB IDebugSymbolProvider_GetContainerField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetField_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [in] */ IDebugAddress *pAddressCur,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugSymbolProvider_GetField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetAddressesFromPosition_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugDocumentPosition2 *pDocPos,
    /* [in] */ BOOL fStatmentOnly,
    /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
    /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);


void __RPC_STUB IDebugSymbolProvider_GetAddressesFromPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetAddressesFromContext_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugDocumentContext2 *pDocContext,
    /* [in] */ BOOL fStatmentOnly,
    /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
    /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);


void __RPC_STUB IDebugSymbolProvider_GetAddressesFromContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetContextFromAddress_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IDebugDocumentContext2 **ppDocContext);


void __RPC_STUB IDebugSymbolProvider_GetContextFromAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetLanguage_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ GUID *pguidLanguage,
    /* [out] */ GUID *pguidLanguageVendor);


void __RPC_STUB IDebugSymbolProvider_GetLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetGlobalContainer_Proxy( 
    IDebugSymbolProvider * This,
    /* [out] */ IDebugContainerField **pField);


void __RPC_STUB IDebugSymbolProvider_GetGlobalContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetMethodFieldsByName_Proxy( 
    IDebugSymbolProvider * This,
    /* [full][in] */ LPCOLESTR pszFullName,
    /* [in] */ NAME_MATCH nameMatch,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugSymbolProvider_GetMethodFieldsByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetClassTypeByName_Proxy( 
    IDebugSymbolProvider * This,
    /* [full][in] */ LPCOLESTR pszClassName,
    /* [in] */ NAME_MATCH nameMatch,
    /* [out] */ IDebugClassField **ppField);


void __RPC_STUB IDebugSymbolProvider_GetClassTypeByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetNamespacesUsedAtAddress_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugSymbolProvider_GetNamespacesUsedAtAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetTypeByName_Proxy( 
    IDebugSymbolProvider * This,
    /* [full][in] */ LPCOLESTR pszClassName,
    /* [in] */ NAME_MATCH nameMatch,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugSymbolProvider_GetTypeByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetNextAddress_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [in] */ BOOL fStatmentOnly,
    /* [out] */ IDebugAddress **ppAddress);


void __RPC_STUB IDebugSymbolProvider_GetNextAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugSymbolProvider_INTERFACE_DEFINED__ */


#ifndef __IDebugComPlusSymbolProvider_INTERFACE_DEFINED__
#define __IDebugComPlusSymbolProvider_INTERFACE_DEFINED__

/* interface IDebugComPlusSymbolProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugComPlusSymbolProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eaf-8b9d-11d2-9014-00c04fa38338")
    IDebugComPlusSymbolProvider : public IDebugSymbolProvider
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LoadSymbols( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONGLONG baseAddress,
            /* [in] */ IUnknown *pUnkMetadataImport,
            /* [in] */ BSTR bstrModuleName,
            /* [in] */ BSTR bstrSymSearchPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnloadSymbols( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEntryPoint( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ IDebugAddress **ppAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeFromAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UpdateSymbols( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IStream *pUpdateStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateTypeFromPrimitive( 
            /* [in] */ DWORD dwPrimType,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugField **ppType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFunctionLineOffset( 
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ DWORD dwLine,
            /* [out] */ IDebugAddress **ppNewAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAddressesInModuleFromPosition( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetArrayTypeFromAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [length_is][size_is][in] */ BYTE *pSig,
            /* [in] */ DWORD dwSigLength,
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSymAttribute( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ _mdToken tokParent,
            /* [in] */ LPOLESTR pstrName,
            /* [in] */ ULONG32 cBuffer,
            /* [out] */ ULONG32 *pcBuffer,
            /* [length_is][size_is][out] */ BYTE buffer[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceSymbols( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IStream *pStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AreSymbolsLoaded( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadSymbolsFromStream( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONGLONG baseAddress,
            /* [in] */ IUnknown *pUnkMetadataImport,
            /* [in] */ IStream *pStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSymUnmanagedReader( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ IUnknown **ppSymUnmanagedReader) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributedClassesinModule( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ LPOLESTR pstrAttribute,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributedClassesForLanguage( 
            /* [in] */ GUID guidLanguage,
            /* [in] */ LPOLESTR pstrAttribute,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsHiddenCode( 
            /* [in] */ IDebugAddress *pAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFunctionDeleted( 
            /* [in] */ IDebugAddress *pAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNameFromToken( 
            /* [in] */ IUnknown *pMetadataImport,
            /* [in] */ DWORD dwToken,
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFunctionStale( 
            /* [in] */ IDebugAddress *pAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLocalVariablelayout( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONG32 cMethods,
            /* [size_is][in] */ _mdToken rgMethodTokens[  ],
            /* [out] */ IStream **pStreamLayout) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAssemblyName( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ BSTR *pbstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugComPlusSymbolProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugComPlusSymbolProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugComPlusSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugEngineSymbolProviderServices *pServices);
        
        HRESULT ( STDMETHODCALLTYPE *Uninitialize )( 
            IDebugComPlusSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainerField )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetField )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugAddress *pAddressCur,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromPosition )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromContext )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugDocumentContext2 *pDocContext,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetContextFromAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugDocumentContext2 **ppDocContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ GUID *pguidLanguage,
            /* [out] */ GUID *pguidLanguageVendor);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalContainer )( 
            IDebugComPlusSymbolProvider * This,
            /* [out] */ IDebugContainerField **pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetMethodFieldsByName )( 
            IDebugComPlusSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszFullName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassTypeByName )( 
            IDebugComPlusSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugClassField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespacesUsedAtAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeByName )( 
            IDebugComPlusSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *LoadSymbols )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONGLONG baseAddress,
            /* [in] */ IUnknown *pUnkMetadataImport,
            /* [in] */ BSTR bstrModuleName,
            /* [in] */ BSTR bstrSymSearchPath);
        
        HRESULT ( STDMETHODCALLTYPE *UnloadSymbols )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule);
        
        HRESULT ( STDMETHODCALLTYPE *GetEntryPoint )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeFromAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateSymbols )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IStream *pUpdateStream);
        
        HRESULT ( STDMETHODCALLTYPE *CreateTypeFromPrimitive )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ DWORD dwPrimType,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetFunctionLineOffset )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ DWORD dwLine,
            /* [out] */ IDebugAddress **ppNewAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesInModuleFromPosition )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetArrayTypeFromAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [length_is][size_is][in] */ BYTE *pSig,
            /* [in] */ DWORD dwSigLength,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetSymAttribute )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ _mdToken tokParent,
            /* [in] */ LPOLESTR pstrName,
            /* [in] */ ULONG32 cBuffer,
            /* [out] */ ULONG32 *pcBuffer,
            /* [length_is][size_is][out] */ BYTE buffer[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceSymbols )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IStream *pStream);
        
        HRESULT ( STDMETHODCALLTYPE *AreSymbolsLoaded )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule);
        
        HRESULT ( STDMETHODCALLTYPE *LoadSymbolsFromStream )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONGLONG baseAddress,
            /* [in] */ IUnknown *pUnkMetadataImport,
            /* [in] */ IStream *pStream);
        
        HRESULT ( STDMETHODCALLTYPE *GetSymUnmanagedReader )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ IUnknown **ppSymUnmanagedReader);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributedClassesinModule )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ LPOLESTR pstrAttribute,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributedClassesForLanguage )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ GUID guidLanguage,
            /* [in] */ LPOLESTR pstrAttribute,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *IsHiddenCode )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *IsFunctionDeleted )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetNameFromToken )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IUnknown *pMetadataImport,
            /* [in] */ DWORD dwToken,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *IsFunctionStale )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalVariablelayout )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONG32 cMethods,
            /* [size_is][in] */ _mdToken rgMethodTokens[  ],
            /* [out] */ IStream **pStreamLayout);
        
        HRESULT ( STDMETHODCALLTYPE *GetAssemblyName )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ BSTR *pbstrName);
        
        END_INTERFACE
    } IDebugComPlusSymbolProviderVtbl;

    interface IDebugComPlusSymbolProvider
    {
        CONST_VTBL struct IDebugComPlusSymbolProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugComPlusSymbolProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugComPlusSymbolProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugComPlusSymbolProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugComPlusSymbolProvider_Initialize(This,pServices)	\
    (This)->lpVtbl -> Initialize(This,pServices)

#define IDebugComPlusSymbolProvider_Uninitialize(This)	\
    (This)->lpVtbl -> Uninitialize(This)

#define IDebugComPlusSymbolProvider_GetContainerField(This,pAddress,ppContainerField)	\
    (This)->lpVtbl -> GetContainerField(This,pAddress,ppContainerField)

#define IDebugComPlusSymbolProvider_GetField(This,pAddress,pAddressCur,ppField)	\
    (This)->lpVtbl -> GetField(This,pAddress,pAddressCur,ppField)

#define IDebugComPlusSymbolProvider_GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugComPlusSymbolProvider_GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugComPlusSymbolProvider_GetContextFromAddress(This,pAddress,ppDocContext)	\
    (This)->lpVtbl -> GetContextFromAddress(This,pAddress,ppDocContext)

#define IDebugComPlusSymbolProvider_GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)	\
    (This)->lpVtbl -> GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)

#define IDebugComPlusSymbolProvider_GetGlobalContainer(This,pField)	\
    (This)->lpVtbl -> GetGlobalContainer(This,pField)

#define IDebugComPlusSymbolProvider_GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)	\
    (This)->lpVtbl -> GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)

#define IDebugComPlusSymbolProvider_GetClassTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetClassTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugComPlusSymbolProvider_GetNamespacesUsedAtAddress(This,pAddress,ppEnum)	\
    (This)->lpVtbl -> GetNamespacesUsedAtAddress(This,pAddress,ppEnum)

#define IDebugComPlusSymbolProvider_GetTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugComPlusSymbolProvider_GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)	\
    (This)->lpVtbl -> GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)


#define IDebugComPlusSymbolProvider_LoadSymbols(This,ulAppDomainID,guidModule,baseAddress,pUnkMetadataImport,bstrModuleName,bstrSymSearchPath)	\
    (This)->lpVtbl -> LoadSymbols(This,ulAppDomainID,guidModule,baseAddress,pUnkMetadataImport,bstrModuleName,bstrSymSearchPath)

#define IDebugComPlusSymbolProvider_UnloadSymbols(This,ulAppDomainID,guidModule)	\
    (This)->lpVtbl -> UnloadSymbols(This,ulAppDomainID,guidModule)

#define IDebugComPlusSymbolProvider_GetEntryPoint(This,ulAppDomainID,guidModule,ppAddress)	\
    (This)->lpVtbl -> GetEntryPoint(This,ulAppDomainID,guidModule,ppAddress)

#define IDebugComPlusSymbolProvider_GetTypeFromAddress(This,pAddress,ppField)	\
    (This)->lpVtbl -> GetTypeFromAddress(This,pAddress,ppField)

#define IDebugComPlusSymbolProvider_UpdateSymbols(This,ulAppDomainID,guidModule,pUpdateStream)	\
    (This)->lpVtbl -> UpdateSymbols(This,ulAppDomainID,guidModule,pUpdateStream)

#define IDebugComPlusSymbolProvider_CreateTypeFromPrimitive(This,dwPrimType,pAddress,ppType)	\
    (This)->lpVtbl -> CreateTypeFromPrimitive(This,dwPrimType,pAddress,ppType)

#define IDebugComPlusSymbolProvider_GetFunctionLineOffset(This,pAddress,dwLine,ppNewAddress)	\
    (This)->lpVtbl -> GetFunctionLineOffset(This,pAddress,dwLine,ppNewAddress)

#define IDebugComPlusSymbolProvider_GetAddressesInModuleFromPosition(This,ulAppDomainID,guidModule,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesInModuleFromPosition(This,ulAppDomainID,guidModule,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugComPlusSymbolProvider_GetArrayTypeFromAddress(This,pAddress,pSig,dwSigLength,ppField)	\
    (This)->lpVtbl -> GetArrayTypeFromAddress(This,pAddress,pSig,dwSigLength,ppField)

#define IDebugComPlusSymbolProvider_GetSymAttribute(This,ulAppDomainID,guidModule,tokParent,pstrName,cBuffer,pcBuffer,buffer)	\
    (This)->lpVtbl -> GetSymAttribute(This,ulAppDomainID,guidModule,tokParent,pstrName,cBuffer,pcBuffer,buffer)

#define IDebugComPlusSymbolProvider_ReplaceSymbols(This,ulAppDomainID,guidModule,pStream)	\
    (This)->lpVtbl -> ReplaceSymbols(This,ulAppDomainID,guidModule,pStream)

#define IDebugComPlusSymbolProvider_AreSymbolsLoaded(This,ulAppDomainID,guidModule)	\
    (This)->lpVtbl -> AreSymbolsLoaded(This,ulAppDomainID,guidModule)

#define IDebugComPlusSymbolProvider_LoadSymbolsFromStream(This,ulAppDomainID,guidModule,baseAddress,pUnkMetadataImport,pStream)	\
    (This)->lpVtbl -> LoadSymbolsFromStream(This,ulAppDomainID,guidModule,baseAddress,pUnkMetadataImport,pStream)

#define IDebugComPlusSymbolProvider_GetSymUnmanagedReader(This,ulAppDomainID,guidModule,ppSymUnmanagedReader)	\
    (This)->lpVtbl -> GetSymUnmanagedReader(This,ulAppDomainID,guidModule,ppSymUnmanagedReader)

#define IDebugComPlusSymbolProvider_GetAttributedClassesinModule(This,ulAppDomainID,guidModule,pstrAttribute,ppEnum)	\
    (This)->lpVtbl -> GetAttributedClassesinModule(This,ulAppDomainID,guidModule,pstrAttribute,ppEnum)

#define IDebugComPlusSymbolProvider_GetAttributedClassesForLanguage(This,guidLanguage,pstrAttribute,ppEnum)	\
    (This)->lpVtbl -> GetAttributedClassesForLanguage(This,guidLanguage,pstrAttribute,ppEnum)

#define IDebugComPlusSymbolProvider_IsHiddenCode(This,pAddress)	\
    (This)->lpVtbl -> IsHiddenCode(This,pAddress)

#define IDebugComPlusSymbolProvider_IsFunctionDeleted(This,pAddress)	\
    (This)->lpVtbl -> IsFunctionDeleted(This,pAddress)

#define IDebugComPlusSymbolProvider_GetNameFromToken(This,pMetadataImport,dwToken,pbstrName)	\
    (This)->lpVtbl -> GetNameFromToken(This,pMetadataImport,dwToken,pbstrName)

#define IDebugComPlusSymbolProvider_IsFunctionStale(This,pAddress)	\
    (This)->lpVtbl -> IsFunctionStale(This,pAddress)

#define IDebugComPlusSymbolProvider_GetLocalVariablelayout(This,ulAppDomainID,guidModule,cMethods,rgMethodTokens,pStreamLayout)	\
    (This)->lpVtbl -> GetLocalVariablelayout(This,ulAppDomainID,guidModule,cMethods,rgMethodTokens,pStreamLayout)

#define IDebugComPlusSymbolProvider_GetAssemblyName(This,ulAppDomainID,guidModule,pbstrName)	\
    (This)->lpVtbl -> GetAssemblyName(This,ulAppDomainID,guidModule,pbstrName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_LoadSymbols_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ ULONGLONG baseAddress,
    /* [in] */ IUnknown *pUnkMetadataImport,
    /* [in] */ BSTR bstrModuleName,
    /* [in] */ BSTR bstrSymSearchPath);


void __RPC_STUB IDebugComPlusSymbolProvider_LoadSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_UnloadSymbols_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule);


void __RPC_STUB IDebugComPlusSymbolProvider_UnloadSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetEntryPoint_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [out] */ IDebugAddress **ppAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_GetEntryPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetTypeFromAddress_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugComPlusSymbolProvider_GetTypeFromAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_UpdateSymbols_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ IStream *pUpdateStream);


void __RPC_STUB IDebugComPlusSymbolProvider_UpdateSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_CreateTypeFromPrimitive_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ DWORD dwPrimType,
    /* [in] */ IDebugAddress *pAddress,
    /* [in] */ IDebugField **ppType);


void __RPC_STUB IDebugComPlusSymbolProvider_CreateTypeFromPrimitive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetFunctionLineOffset_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [in] */ DWORD dwLine,
    /* [out] */ IDebugAddress **ppNewAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_GetFunctionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetAddressesInModuleFromPosition_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ IDebugDocumentPosition2 *pDocPos,
    /* [in] */ BOOL fStatmentOnly,
    /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
    /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);


void __RPC_STUB IDebugComPlusSymbolProvider_GetAddressesInModuleFromPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetArrayTypeFromAddress_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [length_is][size_is][in] */ BYTE *pSig,
    /* [in] */ DWORD dwSigLength,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugComPlusSymbolProvider_GetArrayTypeFromAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetSymAttribute_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ _mdToken tokParent,
    /* [in] */ LPOLESTR pstrName,
    /* [in] */ ULONG32 cBuffer,
    /* [out] */ ULONG32 *pcBuffer,
    /* [length_is][size_is][out] */ BYTE buffer[  ]);


void __RPC_STUB IDebugComPlusSymbolProvider_GetSymAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_ReplaceSymbols_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ IStream *pStream);


void __RPC_STUB IDebugComPlusSymbolProvider_ReplaceSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_AreSymbolsLoaded_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule);


void __RPC_STUB IDebugComPlusSymbolProvider_AreSymbolsLoaded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_LoadSymbolsFromStream_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ ULONGLONG baseAddress,
    /* [in] */ IUnknown *pUnkMetadataImport,
    /* [in] */ IStream *pStream);


void __RPC_STUB IDebugComPlusSymbolProvider_LoadSymbolsFromStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetSymUnmanagedReader_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [out] */ IUnknown **ppSymUnmanagedReader);


void __RPC_STUB IDebugComPlusSymbolProvider_GetSymUnmanagedReader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetAttributedClassesinModule_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ LPOLESTR pstrAttribute,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugComPlusSymbolProvider_GetAttributedClassesinModule_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetAttributedClassesForLanguage_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ GUID guidLanguage,
    /* [in] */ LPOLESTR pstrAttribute,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugComPlusSymbolProvider_GetAttributedClassesForLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_IsHiddenCode_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_IsHiddenCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_IsFunctionDeleted_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_IsFunctionDeleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetNameFromToken_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IUnknown *pMetadataImport,
    /* [in] */ DWORD dwToken,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugComPlusSymbolProvider_GetNameFromToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_IsFunctionStale_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_IsFunctionStale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetLocalVariablelayout_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ ULONG32 cMethods,
    /* [size_is][in] */ _mdToken rgMethodTokens[  ],
    /* [out] */ IStream **pStreamLayout);


void __RPC_STUB IDebugComPlusSymbolProvider_GetLocalVariablelayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetAssemblyName_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugComPlusSymbolProvider_GetAssemblyName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugComPlusSymbolProvider_INTERFACE_DEFINED__ */


#ifndef __IDebugNativeSymbolProvider_INTERFACE_DEFINED__
#define __IDebugNativeSymbolProvider_INTERFACE_DEFINED__

/* interface IDebugNativeSymbolProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugNativeSymbolProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb0-8b9d-11d2-9014-00c04fa38338")
    IDebugNativeSymbolProvider : public IDebugSymbolProvider
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LoadSymbols( 
            /* [in] */ LPCOLESTR pszFileName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugNativeSymbolProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugNativeSymbolProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugNativeSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugEngineSymbolProviderServices *pServices);
        
        HRESULT ( STDMETHODCALLTYPE *Uninitialize )( 
            IDebugNativeSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainerField )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetField )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugAddress *pAddressCur,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromPosition )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromContext )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugDocumentContext2 *pDocContext,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetContextFromAddress )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugDocumentContext2 **ppDocContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ GUID *pguidLanguage,
            /* [out] */ GUID *pguidLanguageVendor);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalContainer )( 
            IDebugNativeSymbolProvider * This,
            /* [out] */ IDebugContainerField **pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetMethodFieldsByName )( 
            IDebugNativeSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszFullName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassTypeByName )( 
            IDebugNativeSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugClassField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespacesUsedAtAddress )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeByName )( 
            IDebugNativeSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextAddress )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *LoadSymbols )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ LPCOLESTR pszFileName);
        
        END_INTERFACE
    } IDebugNativeSymbolProviderVtbl;

    interface IDebugNativeSymbolProvider
    {
        CONST_VTBL struct IDebugNativeSymbolProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugNativeSymbolProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugNativeSymbolProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugNativeSymbolProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugNativeSymbolProvider_Initialize(This,pServices)	\
    (This)->lpVtbl -> Initialize(This,pServices)

#define IDebugNativeSymbolProvider_Uninitialize(This)	\
    (This)->lpVtbl -> Uninitialize(This)

#define IDebugNativeSymbolProvider_GetContainerField(This,pAddress,ppContainerField)	\
    (This)->lpVtbl -> GetContainerField(This,pAddress,ppContainerField)

#define IDebugNativeSymbolProvider_GetField(This,pAddress,pAddressCur,ppField)	\
    (This)->lpVtbl -> GetField(This,pAddress,pAddressCur,ppField)

#define IDebugNativeSymbolProvider_GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugNativeSymbolProvider_GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugNativeSymbolProvider_GetContextFromAddress(This,pAddress,ppDocContext)	\
    (This)->lpVtbl -> GetContextFromAddress(This,pAddress,ppDocContext)

#define IDebugNativeSymbolProvider_GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)	\
    (This)->lpVtbl -> GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)

#define IDebugNativeSymbolProvider_GetGlobalContainer(This,pField)	\
    (This)->lpVtbl -> GetGlobalContainer(This,pField)

#define IDebugNativeSymbolProvider_GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)	\
    (This)->lpVtbl -> GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)

#define IDebugNativeSymbolProvider_GetClassTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetClassTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugNativeSymbolProvider_GetNamespacesUsedAtAddress(This,pAddress,ppEnum)	\
    (This)->lpVtbl -> GetNamespacesUsedAtAddress(This,pAddress,ppEnum)

#define IDebugNativeSymbolProvider_GetTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugNativeSymbolProvider_GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)	\
    (This)->lpVtbl -> GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)


#define IDebugNativeSymbolProvider_LoadSymbols(This,pszFileName)	\
    (This)->lpVtbl -> LoadSymbols(This,pszFileName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugNativeSymbolProvider_LoadSymbols_Proxy( 
    IDebugNativeSymbolProvider * This,
    /* [in] */ LPCOLESTR pszFileName);


void __RPC_STUB IDebugNativeSymbolProvider_LoadSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugNativeSymbolProvider_INTERFACE_DEFINED__ */


#ifndef __IDebugField_INTERFACE_DEFINED__
#define __IDebugField_INTERFACE_DEFINED__

/* interface IDebugField */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugField_0001
    {	FIELD_MOD_NONE	= 0,
	FIELD_MOD_ACCESS_NONE	= 0x1,
	FIELD_MOD_ACCESS_PUBLIC	= 0x2,
	FIELD_MOD_ACCESS_PROTECTED	= 0x4,
	FIELD_MOD_ACCESS_PRIVATE	= 0x8,
	FIELD_MOD_NOMODIFIERS	= 0x10,
	FIELD_MOD_STATIC	= 0x20,
	FIELD_MOD_CONSTANT	= 0x40,
	FIELD_MOD_TRANSIENT	= 0x80,
	FIELD_MOD_VOLATILE	= 0x100,
	FIELD_MOD_ABSTRACT	= 0x200,
	FIELD_MOD_NATIVE	= 0x400,
	FIELD_MOD_SYNCHRONIZED	= 0x800,
	FIELD_MOD_VIRTUAL	= 0x1000,
	FIELD_MOD_INTERFACE	= 0x2000,
	FIELD_MOD_FINAL	= 0x4000,
	FIELD_MOD_SENTINEL	= 0x8000,
	FIELD_MOD_INNERCLASS	= 0x10000,
	FIELD_MOD_OPTIONAL	= 0x20000,
	FIELD_MOD_BYREF	= 0x40000,
	FIELD_MOD_HIDDEN	= 0x80000,
	FIELD_MOD_MARSHALASOBJECT	= 0x100000,
	FIELD_MOD_WRITEONLY	= 0x80000000,
	FIELD_MOD_ACCESS_MASK	= 0xff,
	FIELD_MOD_MASK	= 0xffffff00,
	FIELD_MOD_ALL	= 0x7fffffff
    } ;
typedef DWORD FIELD_MODIFIERS;


enum __MIDL_IDebugField_0002
    {	FIELD_KIND_NONE	= 0,
	FIELD_KIND_TYPE	= 0x1,
	FIELD_KIND_SYMBOL	= 0x2,
	FIELD_TYPE_PRIMITIVE	= 0x10,
	FIELD_TYPE_STRUCT	= 0x20,
	FIELD_TYPE_CLASS	= 0x40,
	FIELD_TYPE_INTERFACE	= 0x80,
	FIELD_TYPE_UNION	= 0x100,
	FIELD_TYPE_ARRAY	= 0x200,
	FIELD_TYPE_METHOD	= 0x400,
	FIELD_TYPE_BLOCK	= 0x800,
	FIELD_TYPE_POINTER	= 0x1000,
	FIELD_TYPE_ENUM	= 0x2000,
	FIELD_TYPE_LABEL	= 0x4000,
	FIELD_TYPE_TYPEDEF	= 0x8000,
	FIELD_TYPE_BITFIELD	= 0x10000,
	FIELD_TYPE_NAMESPACE	= 0x20000,
	FIELD_TYPE_MODULE	= 0x40000,
	FIELD_TYPE_DYNAMIC	= 0x80000,
	FIELD_TYPE_PROP	= 0x100000,
	FIELD_TYPE_INNERCLASS	= 0x200000,
	FIELD_TYPE_REFERENCE	= 0x400000,
	FIELD_TYPE_EXTENDED	= 0x800000,
	FIELD_SYM_MEMBER	= 0x1000000,
	FIELD_SYM_LOCAL	= 0x2000000,
	FIELD_SYM_PARAM	= 0x4000000,
	FIELD_SYM_THIS	= 0x8000000,
	FIELD_SYM_GLOBAL	= 0x10000000,
	FIELD_SYM_PROP_GETTER	= 0x20000000,
	FIELD_SYM_PROP_SETTER	= 0x40000000,
	FIELD_SYM_EXTENED	= 0x80000000,
	FIELD_KIND_MASK	= 0xf,
	FIELD_TYPE_MASK	= 0xfffff0,
	FIELD_SYM_MASK	= 0xff000000,
	FIELD_KIND_ALL	= 0xffffffff
    } ;
typedef DWORD FIELD_KIND;


enum __MIDL_IDebugField_0003
    {	FIF_FULLNAME	= 0x1,
	FIF_NAME	= 0x2,
	FIF_TYPE	= 0x4,
	FIF_MODIFIERS	= 0x8,
	FIF_ALL	= 0xffffffff
    } ;
typedef DWORD FIELD_INFO_FIELDS;

typedef struct _tagFieldInfo
    {
    FIELD_INFO_FIELDS dwFields;
    BSTR bstrFullName;
    BSTR bstrName;
    BSTR bstrType;
    FIELD_MODIFIERS dwModifiers;
    } 	FIELD_INFO;


enum __MIDL_IDebugField_0004
    {	TYPE_KIND_METADATA	= 0x1,
	TYPE_KIND_PDB	= 0x2
    } ;
typedef DWORD dwTYPE_KIND;

typedef struct _tagTYPE_METADATA
    {
    ULONG32 ulAppDomainID;
    GUID guidModule;
    _mdToken tokClass;
    } 	METADATA_TYPE;

typedef struct _tagTYPE_PDB
    {
    ULONG32 ulAppDomainID;
    GUID guidModule;
    DWORD symid;
    } 	PDB_TYPE;

typedef struct _tagTYPE_INFO_UNION
    {
    dwTYPE_KIND dwKind;
    /* [switch_is] */ /* [switch_type] */ union __MIDL_IDebugField_0005
        {
        /* [case()] */ METADATA_TYPE typeMeta;
        /* [case()] */ PDB_TYPE typePdb;
        /* [default] */ DWORD unused;
        } 	type;
    } 	TYPE_INFO;


EXTERN_C const IID IID_IDebugField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb1-8b9d-11d2-9014-00c04fa38338")
    IDebugField : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetKind( 
            /* [out] */ FIELD_KIND *pdwKind) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ IDebugField **ppType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContainer( 
            /* [out] */ IDebugContainerField **ppContainerField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAddress( 
            /* [out] */ IDebugAddress **ppAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExtendedInfo( 
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Equal( 
            /* [in] */ IDebugField *pField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeInfo( 
            /* [out] */ TYPE_INFO *pTypeInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        END_INTERFACE
    } IDebugFieldVtbl;

    interface IDebugField
    {
        CONST_VTBL struct IDebugFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugField_GetInfo_Proxy( 
    IDebugField * This,
    /* [in] */ FIELD_INFO_FIELDS dwFields,
    /* [out] */ FIELD_INFO *pFieldInfo);


void __RPC_STUB IDebugField_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetKind_Proxy( 
    IDebugField * This,
    /* [out] */ FIELD_KIND *pdwKind);


void __RPC_STUB IDebugField_GetKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetType_Proxy( 
    IDebugField * This,
    /* [out] */ IDebugField **ppType);


void __RPC_STUB IDebugField_GetType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetContainer_Proxy( 
    IDebugField * This,
    /* [out] */ IDebugContainerField **ppContainerField);


void __RPC_STUB IDebugField_GetContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetAddress_Proxy( 
    IDebugField * This,
    /* [out] */ IDebugAddress **ppAddress);


void __RPC_STUB IDebugField_GetAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetSize_Proxy( 
    IDebugField * This,
    /* [out] */ DWORD *pdwSize);


void __RPC_STUB IDebugField_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetExtendedInfo_Proxy( 
    IDebugField * This,
    /* [in] */ REFGUID guidExtendedInfo,
    /* [length_is][size_is][out] */ BYTE **prgBuffer,
    /* [out][in] */ DWORD *pdwLen);


void __RPC_STUB IDebugField_GetExtendedInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_Equal_Proxy( 
    IDebugField * This,
    /* [in] */ IDebugField *pField);


void __RPC_STUB IDebugField_Equal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetTypeInfo_Proxy( 
    IDebugField * This,
    /* [out] */ TYPE_INFO *pTypeInfo);


void __RPC_STUB IDebugField_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugField_INTERFACE_DEFINED__ */


#ifndef __IDebugContainerField_INTERFACE_DEFINED__
#define __IDebugContainerField_INTERFACE_DEFINED__

/* interface IDebugContainerField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugContainerField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb2-8b9d-11d2-9014-00c04fa38338")
    IDebugContainerField : public IDebugField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumFields( 
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugContainerFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugContainerField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugContainerField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugContainerField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugContainerField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugContainerField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugContainerField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugContainerField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugContainerField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugContainerField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugContainerField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugContainerField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugContainerField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugContainerField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        END_INTERFACE
    } IDebugContainerFieldVtbl;

    interface IDebugContainerField
    {
        CONST_VTBL struct IDebugContainerFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugContainerField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugContainerField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugContainerField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugContainerField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugContainerField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugContainerField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugContainerField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugContainerField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugContainerField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugContainerField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugContainerField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugContainerField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugContainerField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugContainerField_EnumFields_Proxy( 
    IDebugContainerField * This,
    /* [in] */ FIELD_KIND dwKindFilter,
    /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
    /* [full][in] */ LPCOLESTR pszNameFilter,
    /* [in] */ NAME_MATCH nameMatch,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugContainerField_EnumFields_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugContainerField_INTERFACE_DEFINED__ */


#ifndef __IDebugMethodField_INTERFACE_DEFINED__
#define __IDebugMethodField_INTERFACE_DEFINED__

/* interface IDebugMethodField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugMethodField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb4-8b9d-11d2-9014-00c04fa38338")
    IDebugMethodField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumParameters( 
            /* [out] */ IEnumDebugFields **ppParams) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetThis( 
            /* [out] */ IDebugClassField **ppClass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumAllLocals( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppLocals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumLocals( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppLocals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsCustomAttributeDefined( 
            /* [full][in] */ LPCOLESTR pszCustomAttributeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumStaticLocals( 
            /* [out] */ IEnumDebugFields **ppLocals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGlobalContainer( 
            /* [out] */ IDebugClassField **ppClass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumArguments( 
            /* [out] */ IEnumDebugFields **ppParams) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMethodFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMethodField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMethodField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMethodField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugMethodField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugMethodField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugMethodField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugMethodField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugMethodField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugMethodField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugMethodField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugMethodField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugMethodField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugMethodField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumParameters )( 
            IDebugMethodField * This,
            /* [out] */ IEnumDebugFields **ppParams);
        
        HRESULT ( STDMETHODCALLTYPE *GetThis )( 
            IDebugMethodField * This,
            /* [out] */ IDebugClassField **ppClass);
        
        HRESULT ( STDMETHODCALLTYPE *EnumAllLocals )( 
            IDebugMethodField * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppLocals);
        
        HRESULT ( STDMETHODCALLTYPE *EnumLocals )( 
            IDebugMethodField * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppLocals);
        
        HRESULT ( STDMETHODCALLTYPE *IsCustomAttributeDefined )( 
            IDebugMethodField * This,
            /* [full][in] */ LPCOLESTR pszCustomAttributeName);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStaticLocals )( 
            IDebugMethodField * This,
            /* [out] */ IEnumDebugFields **ppLocals);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalContainer )( 
            IDebugMethodField * This,
            /* [out] */ IDebugClassField **ppClass);
        
        HRESULT ( STDMETHODCALLTYPE *EnumArguments )( 
            IDebugMethodField * This,
            /* [out] */ IEnumDebugFields **ppParams);
        
        END_INTERFACE
    } IDebugMethodFieldVtbl;

    interface IDebugMethodField
    {
        CONST_VTBL struct IDebugMethodFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMethodField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMethodField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMethodField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMethodField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugMethodField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugMethodField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugMethodField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugMethodField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugMethodField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugMethodField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugMethodField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugMethodField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugMethodField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugMethodField_EnumParameters(This,ppParams)	\
    (This)->lpVtbl -> EnumParameters(This,ppParams)

#define IDebugMethodField_GetThis(This,ppClass)	\
    (This)->lpVtbl -> GetThis(This,ppClass)

#define IDebugMethodField_EnumAllLocals(This,pAddress,ppLocals)	\
    (This)->lpVtbl -> EnumAllLocals(This,pAddress,ppLocals)

#define IDebugMethodField_EnumLocals(This,pAddress,ppLocals)	\
    (This)->lpVtbl -> EnumLocals(This,pAddress,ppLocals)

#define IDebugMethodField_IsCustomAttributeDefined(This,pszCustomAttributeName)	\
    (This)->lpVtbl -> IsCustomAttributeDefined(This,pszCustomAttributeName)

#define IDebugMethodField_EnumStaticLocals(This,ppLocals)	\
    (This)->lpVtbl -> EnumStaticLocals(This,ppLocals)

#define IDebugMethodField_GetGlobalContainer(This,ppClass)	\
    (This)->lpVtbl -> GetGlobalContainer(This,ppClass)

#define IDebugMethodField_EnumArguments(This,ppParams)	\
    (This)->lpVtbl -> EnumArguments(This,ppParams)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumParameters_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IEnumDebugFields **ppParams);


void __RPC_STUB IDebugMethodField_EnumParameters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_GetThis_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IDebugClassField **ppClass);


void __RPC_STUB IDebugMethodField_GetThis_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumAllLocals_Proxy( 
    IDebugMethodField * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IEnumDebugFields **ppLocals);


void __RPC_STUB IDebugMethodField_EnumAllLocals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumLocals_Proxy( 
    IDebugMethodField * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IEnumDebugFields **ppLocals);


void __RPC_STUB IDebugMethodField_EnumLocals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_IsCustomAttributeDefined_Proxy( 
    IDebugMethodField * This,
    /* [full][in] */ LPCOLESTR pszCustomAttributeName);


void __RPC_STUB IDebugMethodField_IsCustomAttributeDefined_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumStaticLocals_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IEnumDebugFields **ppLocals);


void __RPC_STUB IDebugMethodField_EnumStaticLocals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_GetGlobalContainer_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IDebugClassField **ppClass);


void __RPC_STUB IDebugMethodField_GetGlobalContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumArguments_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IEnumDebugFields **ppParams);


void __RPC_STUB IDebugMethodField_EnumArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMethodField_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_sh_0379 */
/* [local] */ 

typedef 
enum ConstructorMatchOptions
    {	crAll	= 0,
	crNonStatic	= crAll + 1,
	crStatic	= crNonStatic + 1
    } 	CONSTRUCTOR_ENUM;



extern RPC_IF_HANDLE __MIDL_itf_sh_0379_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_sh_0379_v0_0_s_ifspec;

#ifndef __IDebugClassField_INTERFACE_DEFINED__
#define __IDebugClassField_INTERFACE_DEFINED__

/* interface IDebugClassField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugClassField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb5-8b9d-11d2-9014-00c04fa38338")
    IDebugClassField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumBaseClasses( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DoesInterfaceExist( 
            /* [full][in] */ LPCOLESTR pszInterfaceName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumNestedClasses( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnclosingClass( 
            /* [out] */ IDebugClassField **ppClassField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumInterfacesImplemented( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumConstructors( 
            /* [in] */ CONSTRUCTOR_ENUM cMatch,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultIndexer( 
            /* [out] */ BSTR *pbstrIndexer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumNestedEnums( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugClassFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugClassField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugClassField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugClassField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugClassField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugClassField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugClassField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugClassField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugClassField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugClassField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugClassField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugClassField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugClassField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugClassField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumBaseClasses )( 
            IDebugClassField * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *DoesInterfaceExist )( 
            IDebugClassField * This,
            /* [full][in] */ LPCOLESTR pszInterfaceName);
        
        HRESULT ( STDMETHODCALLTYPE *EnumNestedClasses )( 
            IDebugClassField * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnclosingClass )( 
            IDebugClassField * This,
            /* [out] */ IDebugClassField **ppClassField);
        
        HRESULT ( STDMETHODCALLTYPE *EnumInterfacesImplemented )( 
            IDebugClassField * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumConstructors )( 
            IDebugClassField * This,
            /* [in] */ CONSTRUCTOR_ENUM cMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultIndexer )( 
            IDebugClassField * This,
            /* [out] */ BSTR *pbstrIndexer);
        
        HRESULT ( STDMETHODCALLTYPE *EnumNestedEnums )( 
            IDebugClassField * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        END_INTERFACE
    } IDebugClassFieldVtbl;

    interface IDebugClassField
    {
        CONST_VTBL struct IDebugClassFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugClassField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugClassField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugClassField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugClassField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugClassField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugClassField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugClassField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugClassField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugClassField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugClassField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugClassField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugClassField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugClassField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugClassField_EnumBaseClasses(This,ppEnum)	\
    (This)->lpVtbl -> EnumBaseClasses(This,ppEnum)

#define IDebugClassField_DoesInterfaceExist(This,pszInterfaceName)	\
    (This)->lpVtbl -> DoesInterfaceExist(This,pszInterfaceName)

#define IDebugClassField_EnumNestedClasses(This,ppEnum)	\
    (This)->lpVtbl -> EnumNestedClasses(This,ppEnum)

#define IDebugClassField_GetEnclosingClass(This,ppClassField)	\
    (This)->lpVtbl -> GetEnclosingClass(This,ppClassField)

#define IDebugClassField_EnumInterfacesImplemented(This,ppEnum)	\
    (This)->lpVtbl -> EnumInterfacesImplemented(This,ppEnum)

#define IDebugClassField_EnumConstructors(This,cMatch,ppEnum)	\
    (This)->lpVtbl -> EnumConstructors(This,cMatch,ppEnum)

#define IDebugClassField_GetDefaultIndexer(This,pbstrIndexer)	\
    (This)->lpVtbl -> GetDefaultIndexer(This,pbstrIndexer)

#define IDebugClassField_EnumNestedEnums(This,ppEnum)	\
    (This)->lpVtbl -> EnumNestedEnums(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugClassField_EnumBaseClasses_Proxy( 
    IDebugClassField * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumBaseClasses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_DoesInterfaceExist_Proxy( 
    IDebugClassField * This,
    /* [full][in] */ LPCOLESTR pszInterfaceName);


void __RPC_STUB IDebugClassField_DoesInterfaceExist_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_EnumNestedClasses_Proxy( 
    IDebugClassField * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumNestedClasses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_GetEnclosingClass_Proxy( 
    IDebugClassField * This,
    /* [out] */ IDebugClassField **ppClassField);


void __RPC_STUB IDebugClassField_GetEnclosingClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_EnumInterfacesImplemented_Proxy( 
    IDebugClassField * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumInterfacesImplemented_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_EnumConstructors_Proxy( 
    IDebugClassField * This,
    /* [in] */ CONSTRUCTOR_ENUM cMatch,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumConstructors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_GetDefaultIndexer_Proxy( 
    IDebugClassField * This,
    /* [out] */ BSTR *pbstrIndexer);


void __RPC_STUB IDebugClassField_GetDefaultIndexer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_EnumNestedEnums_Proxy( 
    IDebugClassField * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumNestedEnums_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugClassField_INTERFACE_DEFINED__ */


#ifndef __IDebugPropertyField_INTERFACE_DEFINED__
#define __IDebugPropertyField_INTERFACE_DEFINED__

/* interface IDebugPropertyField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPropertyField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb6-8b9d-11d2-9014-00c04fa38338")
    IDebugPropertyField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropertyGetter( 
            /* [out] */ IDebugMethodField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertySetter( 
            /* [out] */ IDebugMethodField **ppField) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPropertyFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPropertyField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPropertyField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPropertyField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugPropertyField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugPropertyField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugPropertyField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugPropertyField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugPropertyField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugPropertyField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugPropertyField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyGetter )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugMethodField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertySetter )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugMethodField **ppField);
        
        END_INTERFACE
    } IDebugPropertyFieldVtbl;

    interface IDebugPropertyField
    {
        CONST_VTBL struct IDebugPropertyFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPropertyField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPropertyField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPropertyField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPropertyField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugPropertyField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugPropertyField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugPropertyField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugPropertyField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugPropertyField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugPropertyField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugPropertyField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugPropertyField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugPropertyField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugPropertyField_GetPropertyGetter(This,ppField)	\
    (This)->lpVtbl -> GetPropertyGetter(This,ppField)

#define IDebugPropertyField_GetPropertySetter(This,ppField)	\
    (This)->lpVtbl -> GetPropertySetter(This,ppField)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPropertyField_GetPropertyGetter_Proxy( 
    IDebugPropertyField * This,
    /* [out] */ IDebugMethodField **ppField);


void __RPC_STUB IDebugPropertyField_GetPropertyGetter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPropertyField_GetPropertySetter_Proxy( 
    IDebugPropertyField * This,
    /* [out] */ IDebugMethodField **ppField);


void __RPC_STUB IDebugPropertyField_GetPropertySetter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPropertyField_INTERFACE_DEFINED__ */


#ifndef __IDebugArrayField_INTERFACE_DEFINED__
#define __IDebugArrayField_INTERFACE_DEFINED__

/* interface IDebugArrayField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugArrayField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb7-8b9d-11d2-9014-00c04fa38338")
    IDebugArrayField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetNumberOfElements( 
            /* [out] */ DWORD *pdwNumElements) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetElementType( 
            /* [out] */ IDebugField **ppType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRank( 
            /* [out] */ DWORD *pdwRank) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugArrayFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugArrayField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugArrayField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugArrayField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugArrayField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugArrayField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugArrayField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugArrayField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugArrayField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugArrayField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugArrayField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugArrayField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugArrayField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugArrayField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumberOfElements )( 
            IDebugArrayField * This,
            /* [out] */ DWORD *pdwNumElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetElementType )( 
            IDebugArrayField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetRank )( 
            IDebugArrayField * This,
            /* [out] */ DWORD *pdwRank);
        
        END_INTERFACE
    } IDebugArrayFieldVtbl;

    interface IDebugArrayField
    {
        CONST_VTBL struct IDebugArrayFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugArrayField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugArrayField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugArrayField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugArrayField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugArrayField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugArrayField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugArrayField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugArrayField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugArrayField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugArrayField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugArrayField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugArrayField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugArrayField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugArrayField_GetNumberOfElements(This,pdwNumElements)	\
    (This)->lpVtbl -> GetNumberOfElements(This,pdwNumElements)

#define IDebugArrayField_GetElementType(This,ppType)	\
    (This)->lpVtbl -> GetElementType(This,ppType)

#define IDebugArrayField_GetRank(This,pdwRank)	\
    (This)->lpVtbl -> GetRank(This,pdwRank)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugArrayField_GetNumberOfElements_Proxy( 
    IDebugArrayField * This,
    /* [out] */ DWORD *pdwNumElements);


void __RPC_STUB IDebugArrayField_GetNumberOfElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugArrayField_GetElementType_Proxy( 
    IDebugArrayField * This,
    /* [out] */ IDebugField **ppType);


void __RPC_STUB IDebugArrayField_GetElementType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugArrayField_GetRank_Proxy( 
    IDebugArrayField * This,
    /* [out] */ DWORD *pdwRank);


void __RPC_STUB IDebugArrayField_GetRank_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugArrayField_INTERFACE_DEFINED__ */


#ifndef __IDebugPointerField_INTERFACE_DEFINED__
#define __IDebugPointerField_INTERFACE_DEFINED__

/* interface IDebugPointerField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPointerField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb8-8b9d-11d2-9014-00c04fa38338")
    IDebugPointerField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDereferencedField( 
            /* [out] */ IDebugField **ppField) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPointerFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPointerField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPointerField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPointerField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugPointerField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugPointerField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugPointerField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugPointerField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugPointerField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugPointerField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugPointerField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugPointerField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugPointerField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugPointerField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDereferencedField )( 
            IDebugPointerField * This,
            /* [out] */ IDebugField **ppField);
        
        END_INTERFACE
    } IDebugPointerFieldVtbl;

    interface IDebugPointerField
    {
        CONST_VTBL struct IDebugPointerFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPointerField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPointerField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPointerField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPointerField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugPointerField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugPointerField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugPointerField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugPointerField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugPointerField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugPointerField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugPointerField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugPointerField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugPointerField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugPointerField_GetDereferencedField(This,ppField)	\
    (This)->lpVtbl -> GetDereferencedField(This,ppField)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPointerField_GetDereferencedField_Proxy( 
    IDebugPointerField * This,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugPointerField_GetDereferencedField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPointerField_INTERFACE_DEFINED__ */


#ifndef __IDebugEnumField_INTERFACE_DEFINED__
#define __IDebugEnumField_INTERFACE_DEFINED__

/* interface IDebugEnumField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugEnumField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb9-8b9d-11d2-9014-00c04fa38338")
    IDebugEnumField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUnderlyingSymbol( 
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStringFromValue( 
            /* [in] */ ULONGLONG value,
            /* [out] */ BSTR *pbstrValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueFromString( 
            /* [full][in] */ LPCOLESTR pszValue,
            /* [out] */ ULONGLONG *pvalue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueFromStringCaseInsensitive( 
            /* [full][in] */ LPCOLESTR pszValue,
            /* [out] */ ULONGLONG *pvalue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEnumFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEnumField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEnumField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEnumField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugEnumField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugEnumField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugEnumField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugEnumField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugEnumField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugEnumField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugEnumField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugEnumField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugEnumField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugEnumField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetUnderlyingSymbol )( 
            IDebugEnumField * This,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetStringFromValue )( 
            IDebugEnumField * This,
            /* [in] */ ULONGLONG value,
            /* [out] */ BSTR *pbstrValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFromString )( 
            IDebugEnumField * This,
            /* [full][in] */ LPCOLESTR pszValue,
            /* [out] */ ULONGLONG *pvalue);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFromStringCaseInsensitive )( 
            IDebugEnumField * This,
            /* [full][in] */ LPCOLESTR pszValue,
            /* [out] */ ULONGLONG *pvalue);
        
        END_INTERFACE
    } IDebugEnumFieldVtbl;

    interface IDebugEnumField
    {
        CONST_VTBL struct IDebugEnumFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEnumField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEnumField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEnumField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEnumField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugEnumField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugEnumField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugEnumField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugEnumField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugEnumField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugEnumField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugEnumField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugEnumField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugEnumField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugEnumField_GetUnderlyingSymbol(This,ppField)	\
    (This)->lpVtbl -> GetUnderlyingSymbol(This,ppField)

#define IDebugEnumField_GetStringFromValue(This,value,pbstrValue)	\
    (This)->lpVtbl -> GetStringFromValue(This,value,pbstrValue)

#define IDebugEnumField_GetValueFromString(This,pszValue,pvalue)	\
    (This)->lpVtbl -> GetValueFromString(This,pszValue,pvalue)

#define IDebugEnumField_GetValueFromStringCaseInsensitive(This,pszValue,pvalue)	\
    (This)->lpVtbl -> GetValueFromStringCaseInsensitive(This,pszValue,pvalue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEnumField_GetUnderlyingSymbol_Proxy( 
    IDebugEnumField * This,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugEnumField_GetUnderlyingSymbol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEnumField_GetStringFromValue_Proxy( 
    IDebugEnumField * This,
    /* [in] */ ULONGLONG value,
    /* [out] */ BSTR *pbstrValue);


void __RPC_STUB IDebugEnumField_GetStringFromValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEnumField_GetValueFromString_Proxy( 
    IDebugEnumField * This,
    /* [full][in] */ LPCOLESTR pszValue,
    /* [out] */ ULONGLONG *pvalue);


void __RPC_STUB IDebugEnumField_GetValueFromString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEnumField_GetValueFromStringCaseInsensitive_Proxy( 
    IDebugEnumField * This,
    /* [full][in] */ LPCOLESTR pszValue,
    /* [out] */ ULONGLONG *pvalue);


void __RPC_STUB IDebugEnumField_GetValueFromStringCaseInsensitive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEnumField_INTERFACE_DEFINED__ */


#ifndef __IDebugBitField_INTERFACE_DEFINED__
#define __IDebugBitField_INTERFACE_DEFINED__

/* interface IDebugBitField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugBitField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eba-8b9d-11d2-9014-00c04fa38338")
    IDebugBitField : public IDebugField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStart( 
            /* [out] */ DWORD *pdwBitOffset) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBitFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBitField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBitField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBitField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugBitField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugBitField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugBitField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugBitField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugBitField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugBitField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugBitField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugBitField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugBitField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetStart )( 
            IDebugBitField * This,
            /* [out] */ DWORD *pdwBitOffset);
        
        END_INTERFACE
    } IDebugBitFieldVtbl;

    interface IDebugBitField
    {
        CONST_VTBL struct IDebugBitFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBitField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBitField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBitField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBitField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugBitField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugBitField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugBitField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugBitField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugBitField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugBitField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugBitField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugBitField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugBitField_GetStart(This,pdwBitOffset)	\
    (This)->lpVtbl -> GetStart(This,pdwBitOffset)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBitField_GetStart_Proxy( 
    IDebugBitField * This,
    /* [out] */ DWORD *pdwBitOffset);


void __RPC_STUB IDebugBitField_GetStart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBitField_INTERFACE_DEFINED__ */


#ifndef __IDebugDynamicField_INTERFACE_DEFINED__
#define __IDebugDynamicField_INTERFACE_DEFINED__

/* interface IDebugDynamicField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugDynamicField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B5A2A5EA-D5AB-11d2-9033-00C04FA302A1")
    IDebugDynamicField : public IDebugField
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugDynamicFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDynamicField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDynamicField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDynamicField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugDynamicField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugDynamicField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugDynamicField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugDynamicField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugDynamicField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugDynamicField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugDynamicField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugDynamicField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugDynamicField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        END_INTERFACE
    } IDebugDynamicFieldVtbl;

    interface IDebugDynamicField
    {
        CONST_VTBL struct IDebugDynamicFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDynamicField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDynamicField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDynamicField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDynamicField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugDynamicField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugDynamicField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugDynamicField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugDynamicField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugDynamicField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugDynamicField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugDynamicField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugDynamicField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugDynamicField_INTERFACE_DEFINED__ */


#ifndef __IDebugDynamicFieldCOMPlus_INTERFACE_DEFINED__
#define __IDebugDynamicFieldCOMPlus_INTERFACE_DEFINED__

/* interface IDebugDynamicFieldCOMPlus */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugDynamicFieldCOMPlus;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B5B20820-E233-11d2-9037-00C04FA302A1")
    IDebugDynamicFieldCOMPlus : public IDebugDynamicField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetTypeFromPrimitive( 
            /* [in] */ DWORD dwCorElementType,
            /* [out] */ IDebugField **ppType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeFromTypeDef( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ _mdToken tokClass,
            /* [out] */ IDebugField **ppType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDynamicFieldCOMPlusVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDynamicFieldCOMPlus * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDynamicFieldCOMPlus * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeFromPrimitive )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ DWORD dwCorElementType,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeFromTypeDef )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ _mdToken tokClass,
            /* [out] */ IDebugField **ppType);
        
        END_INTERFACE
    } IDebugDynamicFieldCOMPlusVtbl;

    interface IDebugDynamicFieldCOMPlus
    {
        CONST_VTBL struct IDebugDynamicFieldCOMPlusVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDynamicFieldCOMPlus_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDynamicFieldCOMPlus_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDynamicFieldCOMPlus_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDynamicFieldCOMPlus_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugDynamicFieldCOMPlus_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugDynamicFieldCOMPlus_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugDynamicFieldCOMPlus_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugDynamicFieldCOMPlus_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugDynamicFieldCOMPlus_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugDynamicFieldCOMPlus_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugDynamicFieldCOMPlus_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugDynamicFieldCOMPlus_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)



#define IDebugDynamicFieldCOMPlus_GetTypeFromPrimitive(This,dwCorElementType,ppType)	\
    (This)->lpVtbl -> GetTypeFromPrimitive(This,dwCorElementType,ppType)

#define IDebugDynamicFieldCOMPlus_GetTypeFromTypeDef(This,ulAppDomainID,guidModule,tokClass,ppType)	\
    (This)->lpVtbl -> GetTypeFromTypeDef(This,ulAppDomainID,guidModule,tokClass,ppType)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDynamicFieldCOMPlus_GetTypeFromPrimitive_Proxy( 
    IDebugDynamicFieldCOMPlus * This,
    /* [in] */ DWORD dwCorElementType,
    /* [out] */ IDebugField **ppType);


void __RPC_STUB IDebugDynamicFieldCOMPlus_GetTypeFromPrimitive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDynamicFieldCOMPlus_GetTypeFromTypeDef_Proxy( 
    IDebugDynamicFieldCOMPlus * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ _mdToken tokClass,
    /* [out] */ IDebugField **ppType);


void __RPC_STUB IDebugDynamicFieldCOMPlus_GetTypeFromTypeDef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDynamicFieldCOMPlus_INTERFACE_DEFINED__ */


#ifndef __IDebugEngineSymbolProviderServices_INTERFACE_DEFINED__
#define __IDebugEngineSymbolProviderServices_INTERFACE_DEFINED__

/* interface IDebugEngineSymbolProviderServices */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugEngineSymbolProviderServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("83919262-ACD6-11d2-9028-00C04FA302A1")
    IDebugEngineSymbolProviderServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumCodeContexts( 
            /* [length_is][size_is][in] */ IDebugAddress **rgpAddresses,
            /* [in] */ DWORD celtAddresses,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEngineSymbolProviderServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEngineSymbolProviderServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEngineSymbolProviderServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEngineSymbolProviderServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCodeContexts )( 
            IDebugEngineSymbolProviderServices * This,
            /* [length_is][size_is][in] */ IDebugAddress **rgpAddresses,
            /* [in] */ DWORD celtAddresses,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum);
        
        END_INTERFACE
    } IDebugEngineSymbolProviderServicesVtbl;

    interface IDebugEngineSymbolProviderServices
    {
        CONST_VTBL struct IDebugEngineSymbolProviderServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEngineSymbolProviderServices_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEngineSymbolProviderServices_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEngineSymbolProviderServices_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEngineSymbolProviderServices_EnumCodeContexts(This,rgpAddresses,celtAddresses,ppEnum)	\
    (This)->lpVtbl -> EnumCodeContexts(This,rgpAddresses,celtAddresses,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEngineSymbolProviderServices_EnumCodeContexts_Proxy( 
    IDebugEngineSymbolProviderServices * This,
    /* [length_is][size_is][in] */ IDebugAddress **rgpAddresses,
    /* [in] */ DWORD celtAddresses,
    /* [out] */ IEnumDebugCodeContexts2 **ppEnum);


void __RPC_STUB IDebugEngineSymbolProviderServices_EnumCodeContexts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEngineSymbolProviderServices_INTERFACE_DEFINED__ */


#ifndef __IDebugAddress_INTERFACE_DEFINED__
#define __IDebugAddress_INTERFACE_DEFINED__

/* interface IDebugAddress */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugAddress_0001
    {	ADDRESS_KIND_NATIVE	= 0x1,
	ADDRESS_KIND_UNMANAGED_THIS_RELATIVE	= 0x2,
	ADDRESS_KIND_UNMANAGED_PHYSICAL	= 0x5,
	ADDRESS_KIND_METADATA_METHOD	= 0x10,
	ADDRESS_KIND_METADATA_FIELD	= 0x11,
	ADDRESS_KIND_METADATA_LOCAL	= 0x12,
	ADDRESS_KIND_METADATA_PARAM	= 0x13,
	ADDRESS_KIND_METADATA_ARRAYELEM	= 0x14,
	ADDRESS_KIND_METADATA_RETVAL	= 0x15
    } ;
typedef DWORD ADDRESS_KIND;

typedef struct _tagNATIVE_ADDRESS
    {
    DWORD unknown;
    } 	NATIVE_ADDRESS;

typedef struct _tagUNMANAGED_THIS_RELATIVE
    {
    DWORD dwOffset;
    DWORD dwBitOffset;
    DWORD dwBitLength;
    } 	UNMANAGED_ADDRESS_THIS_RELATIVE;

typedef struct _tagUNMANAGED_ADDRESS_PHYSICAL
    {
    ULONGLONG offset;
    } 	UNMANAGED_ADDRESS_PHYSICAL;

typedef struct _tagMETADATA_ADDRESS_METHOD
    {
    _mdToken tokMethod;
    DWORD dwOffset;
    DWORD dwVersion;
    } 	METADATA_ADDRESS_METHOD;

typedef struct _tagMETADATA_ADDRESS_FIELD
    {
    _mdToken tokField;
    } 	METADATA_ADDRESS_FIELD;

typedef struct _tagMETADATA_ADDRESS_LOCAL
    {
    _mdToken tokMethod;
    IUnknown *pLocal;
    DWORD dwIndex;
    } 	METADATA_ADDRESS_LOCAL;

typedef struct _tagMETADATA_ADDRESS_PARAM
    {
    _mdToken tokMethod;
    _mdToken tokParam;
    DWORD dwIndex;
    } 	METADATA_ADDRESS_PARAM;

typedef struct _tagMETADATA_ADDRESS_ARRAYELEM
    {
    _mdToken tokMethod;
    DWORD dwIndex;
    } 	METADATA_ADDRESS_ARRAYELEM;

typedef struct _tagMETADATA_ADDRESS_RETVAL
    {
    _mdToken tokMethod;
    DWORD dwCorType;
    DWORD dwSigSize;
    BYTE rgSig[ 10 ];
    } 	METADATA_ADDRESS_RETVAL;

typedef struct _tagDEBUG_ADDRESS_UNION
    {
    ADDRESS_KIND dwKind;
    /* [switch_is] */ /* [switch_type] */ union __MIDL_IDebugAddress_0002
        {
        /* [case()] */ NATIVE_ADDRESS addrNative;
        /* [case()] */ UNMANAGED_ADDRESS_THIS_RELATIVE addrThisRel;
        /* [case()] */ UNMANAGED_ADDRESS_PHYSICAL addrUPhysical;
        /* [case()] */ METADATA_ADDRESS_METHOD addrMethod;
        /* [case()] */ METADATA_ADDRESS_FIELD addrField;
        /* [case()] */ METADATA_ADDRESS_LOCAL addrLocal;
        /* [case()] */ METADATA_ADDRESS_PARAM addrParam;
        /* [case()] */ METADATA_ADDRESS_ARRAYELEM addrArrayElem;
        /* [case()] */ METADATA_ADDRESS_RETVAL addrRetVal;
        /* [default] */ DWORD unused;
        } 	addr;
    } 	DEBUG_ADDRESS_UNION;

typedef struct _tagDEBUG_ADDRESS
    {
    ULONG32 ulAppDomainID;
    GUID guidModule;
    _mdToken tokClass;
    DEBUG_ADDRESS_UNION addr;
    } 	DEBUG_ADDRESS;


EXTERN_C const IID IID_IDebugAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34ebb-8b9d-11d2-9014-00c04fa38338")
    IDebugAddress : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAddress( 
            /* [out] */ DEBUG_ADDRESS *pAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugAddress * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugAddress * This,
            /* [out] */ DEBUG_ADDRESS *pAddress);
        
        END_INTERFACE
    } IDebugAddressVtbl;

    interface IDebugAddress
    {
        CONST_VTBL struct IDebugAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugAddress_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugAddress_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugAddress_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugAddress_GetAddress(This,pAddress)	\
    (This)->lpVtbl -> GetAddress(This,pAddress)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugAddress_GetAddress_Proxy( 
    IDebugAddress * This,
    /* [out] */ DEBUG_ADDRESS *pAddress);


void __RPC_STUB IDebugAddress_GetAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugAddress_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugFields_INTERFACE_DEFINED__
#define __IEnumDebugFields_INTERFACE_DEFINED__

/* interface IEnumDebugFields */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugFields;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34ebc-8b9d-11d2-9014-00c04fa38338")
    IEnumDebugFields : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugField **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugFieldsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugFields * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugFields * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugFields * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugField **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugFields * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugFields * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugFields * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugFieldsVtbl;

    interface IEnumDebugFields
    {
        CONST_VTBL struct IEnumDebugFieldsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugFields_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugFields_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugFields_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugFields_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugFields_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugFields_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugFields_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugFields_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugFields_Next_Proxy( 
    IEnumDebugFields * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugField **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugFields_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFields_Skip_Proxy( 
    IEnumDebugFields * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugFields_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFields_Reset_Proxy( 
    IEnumDebugFields * This);


void __RPC_STUB IEnumDebugFields_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFields_Clone_Proxy( 
    IEnumDebugFields * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IEnumDebugFields_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFields_GetCount_Proxy( 
    IEnumDebugFields * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugFields_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugFields_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugAddresses_INTERFACE_DEFINED__
#define __IEnumDebugAddresses_INTERFACE_DEFINED__

/* interface IEnumDebugAddresses */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugAddresses;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34ebd-8b9d-11d2-9014-00c04fa38338")
    IEnumDebugAddresses : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugAddress **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugAddresses **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugAddressesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugAddresses * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugAddresses * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugAddresses * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugAddresses * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugAddress **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugAddresses * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugAddresses * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugAddresses * This,
            /* [out] */ IEnumDebugAddresses **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugAddresses * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugAddressesVtbl;

    interface IEnumDebugAddresses
    {
        CONST_VTBL struct IEnumDebugAddressesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugAddresses_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugAddresses_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugAddresses_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugAddresses_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugAddresses_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugAddresses_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugAddresses_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugAddresses_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_Next_Proxy( 
    IEnumDebugAddresses * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugAddress **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugAddresses_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_Skip_Proxy( 
    IEnumDebugAddresses * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugAddresses_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_Reset_Proxy( 
    IEnumDebugAddresses * This);


void __RPC_STUB IEnumDebugAddresses_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_Clone_Proxy( 
    IEnumDebugAddresses * This,
    /* [out] */ IEnumDebugAddresses **ppEnum);


void __RPC_STUB IEnumDebugAddresses_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_GetCount_Proxy( 
    IEnumDebugAddresses * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugAddresses_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugAddresses_INTERFACE_DEFINED__ */


#ifndef __IDebugCustomAttributeQuery_INTERFACE_DEFINED__
#define __IDebugCustomAttributeQuery_INTERFACE_DEFINED__

/* interface IDebugCustomAttributeQuery */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugCustomAttributeQuery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DFD37B5A-1E3A-4f15-8098-220ABADC620B")
    IDebugCustomAttributeQuery : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsCustomAttributeDefined( 
            /* [full][in] */ LPCOLESTR pszCustomAttributeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCustomAttributeByName( 
            /* [full][in] */ LPCOLESTR pszCustomAttributeName,
            /* [length_is][size_is][out][in] */ BYTE *ppBlob,
            /* [out][in] */ DWORD *pdwLen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugCustomAttributeQueryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugCustomAttributeQuery * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugCustomAttributeQuery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugCustomAttributeQuery * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsCustomAttributeDefined )( 
            IDebugCustomAttributeQuery * This,
            /* [full][in] */ LPCOLESTR pszCustomAttributeName);
        
        HRESULT ( STDMETHODCALLTYPE *GetCustomAttributeByName )( 
            IDebugCustomAttributeQuery * This,
            /* [full][in] */ LPCOLESTR pszCustomAttributeName,
            /* [length_is][size_is][out][in] */ BYTE *ppBlob,
            /* [out][in] */ DWORD *pdwLen);
        
        END_INTERFACE
    } IDebugCustomAttributeQueryVtbl;

    interface IDebugCustomAttributeQuery
    {
        CONST_VTBL struct IDebugCustomAttributeQueryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugCustomAttributeQuery_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugCustomAttributeQuery_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugCustomAttributeQuery_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugCustomAttributeQuery_IsCustomAttributeDefined(This,pszCustomAttributeName)	\
    (This)->lpVtbl -> IsCustomAttributeDefined(This,pszCustomAttributeName)

#define IDebugCustomAttributeQuery_GetCustomAttributeByName(This,pszCustomAttributeName,ppBlob,pdwLen)	\
    (This)->lpVtbl -> GetCustomAttributeByName(This,pszCustomAttributeName,ppBlob,pdwLen)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugCustomAttributeQuery_IsCustomAttributeDefined_Proxy( 
    IDebugCustomAttributeQuery * This,
    /* [full][in] */ LPCOLESTR pszCustomAttributeName);


void __RPC_STUB IDebugCustomAttributeQuery_IsCustomAttributeDefined_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugCustomAttributeQuery_GetCustomAttributeByName_Proxy( 
    IDebugCustomAttributeQuery * This,
    /* [full][in] */ LPCOLESTR pszCustomAttributeName,
    /* [length_is][size_is][out][in] */ BYTE *ppBlob,
    /* [out][in] */ DWORD *pdwLen);


void __RPC_STUB IDebugCustomAttributeQuery_GetCustomAttributeByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugCustomAttributeQuery_INTERFACE_DEFINED__ */



#ifndef __SHLib_LIBRARY_DEFINED__
#define __SHLib_LIBRARY_DEFINED__

/* library SHLib */
/* [uuid] */ 


EXTERN_C const IID LIBID_SHLib;

EXTERN_C const CLSID CLSID_SHManaged;

#ifdef __cplusplus

class DECLSPEC_UUID("c2e34ebf-8b9d-11d2-9014-00c04fa38338")
SHManaged;
#endif
#endif /* __SHLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\vshelp.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:43:10 2002
 */
/* Compiler settings for vshelp.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __vshelp_h__
#define __vshelp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVsHelpOwner_FWD_DEFINED__
#define __IVsHelpOwner_FWD_DEFINED__
typedef interface IVsHelpOwner IVsHelpOwner;
#endif 	/* __IVsHelpOwner_FWD_DEFINED__ */


#ifndef __IVsHelpTopicShowEvents_FWD_DEFINED__
#define __IVsHelpTopicShowEvents_FWD_DEFINED__
typedef interface IVsHelpTopicShowEvents IVsHelpTopicShowEvents;
#endif 	/* __IVsHelpTopicShowEvents_FWD_DEFINED__ */


#ifndef __Help_FWD_DEFINED__
#define __Help_FWD_DEFINED__
typedef interface Help Help;
#endif 	/* __Help_FWD_DEFINED__ */


#ifndef __IVsHelpEvents_FWD_DEFINED__
#define __IVsHelpEvents_FWD_DEFINED__
typedef interface IVsHelpEvents IVsHelpEvents;
#endif 	/* __IVsHelpEvents_FWD_DEFINED__ */


#ifndef __DExploreAppObj_FWD_DEFINED__
#define __DExploreAppObj_FWD_DEFINED__

#ifdef __cplusplus
typedef class DExploreAppObj DExploreAppObj;
#else
typedef struct DExploreAppObj DExploreAppObj;
#endif /* __cplusplus */

#endif 	/* __DExploreAppObj_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 


#ifndef __VsHelp_LIBRARY_DEFINED__
#define __VsHelp_LIBRARY_DEFINED__

/* library VsHelp */
/* [version][uuid] */ 


EXTERN_C const IID LIBID_VsHelp;

#ifndef __IVsHelpOwner_INTERFACE_DEFINED__
#define __IVsHelpOwner_INTERFACE_DEFINED__

/* interface IVsHelpOwner */
/* [version][helpstring][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IVsHelpOwner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B9B0983A-364C-4866-873F-D5ED190138FB")
    IVsHelpOwner : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE BringHelpToTop( 
            /* [in] */ long hwndHelpApp) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AutomationObject( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsHelpOwnerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsHelpOwner * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsHelpOwner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsHelpOwner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsHelpOwner * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsHelpOwner * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsHelpOwner * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsHelpOwner * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BringHelpToTop )( 
            IVsHelpOwner * This,
            /* [in] */ long hwndHelpApp);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutomationObject )( 
            IVsHelpOwner * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        END_INTERFACE
    } IVsHelpOwnerVtbl;

    interface IVsHelpOwner
    {
        CONST_VTBL struct IVsHelpOwnerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsHelpOwner_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsHelpOwner_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsHelpOwner_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsHelpOwner_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsHelpOwner_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsHelpOwner_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsHelpOwner_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsHelpOwner_BringHelpToTop(This,hwndHelpApp)	\
    (This)->lpVtbl -> BringHelpToTop(This,hwndHelpApp)

#define IVsHelpOwner_get_AutomationObject(This,ppObj)	\
    (This)->lpVtbl -> get_AutomationObject(This,ppObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpOwner_BringHelpToTop_Proxy( 
    IVsHelpOwner * This,
    /* [in] */ long hwndHelpApp);


void __RPC_STUB IVsHelpOwner_BringHelpToTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IVsHelpOwner_get_AutomationObject_Proxy( 
    IVsHelpOwner * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB IVsHelpOwner_get_AutomationObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsHelpOwner_INTERFACE_DEFINED__ */


#ifndef __IVsHelpTopicShowEvents_INTERFACE_DEFINED__
#define __IVsHelpTopicShowEvents_INTERFACE_DEFINED__

/* interface IVsHelpTopicShowEvents */
/* [object][helpstring][uuid] */ 


EXTERN_C const IID IID_IVsHelpTopicShowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D1AAC64A-6A25-4274-B2C6-BC3B840B6E54")
    IVsHelpTopicShowEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnBeforeTopicShow( 
            /* [in] */ BSTR bstrURL,
            /* [in] */ IDispatch *pWB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnTopicShowComplete( 
            /* [in] */ BSTR bstrURL,
            /* [in] */ IDispatch *pWB) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsHelpTopicShowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsHelpTopicShowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsHelpTopicShowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsHelpTopicShowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnBeforeTopicShow )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ BSTR bstrURL,
            /* [in] */ IDispatch *pWB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnTopicShowComplete )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ BSTR bstrURL,
            /* [in] */ IDispatch *pWB);
        
        END_INTERFACE
    } IVsHelpTopicShowEventsVtbl;

    interface IVsHelpTopicShowEvents
    {
        CONST_VTBL struct IVsHelpTopicShowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsHelpTopicShowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsHelpTopicShowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsHelpTopicShowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsHelpTopicShowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsHelpTopicShowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsHelpTopicShowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsHelpTopicShowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsHelpTopicShowEvents_OnBeforeTopicShow(This,bstrURL,pWB)	\
    (This)->lpVtbl -> OnBeforeTopicShow(This,bstrURL,pWB)

#define IVsHelpTopicShowEvents_OnTopicShowComplete(This,bstrURL,pWB)	\
    (This)->lpVtbl -> OnTopicShowComplete(This,bstrURL,pWB)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpTopicShowEvents_OnBeforeTopicShow_Proxy( 
    IVsHelpTopicShowEvents * This,
    /* [in] */ BSTR bstrURL,
    /* [in] */ IDispatch *pWB);


void __RPC_STUB IVsHelpTopicShowEvents_OnBeforeTopicShow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpTopicShowEvents_OnTopicShowComplete_Proxy( 
    IVsHelpTopicShowEvents * This,
    /* [in] */ BSTR bstrURL,
    /* [in] */ IDispatch *pWB);


void __RPC_STUB IVsHelpTopicShowEvents_OnTopicShowComplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsHelpTopicShowEvents_INTERFACE_DEFINED__ */


#ifndef __Help_INTERFACE_DEFINED__
#define __Help_INTERFACE_DEFINED__

/* interface Help */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Help;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A791148-19E4-11d3-B86B-00C04F79F802")
    Help : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Contents( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Index( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Search( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IndexResults( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SearchResults( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromId( 
            /* [in] */ BSTR bstrFile,
            /* [in] */ DWORD Id) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromURL( 
            /* [in] */ BSTR pszURL) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromURLEx( 
            /* [in] */ BSTR pszURL,
            /* [in] */ IVsHelpTopicShowEvents *pIVsHelpTopicShowEvents) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromKeyword( 
            /* [in] */ BSTR pszKeyword) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromF1Keyword( 
            /* [in] */ BSTR pszKeyword) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFrom_OLD_Help( 
            /* [in] */ BSTR bstrFile,
            /* [in] */ DWORD Id) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SyncContents( 
            /* [in] */ BSTR bstrURL) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CanSyncContents( 
            /* [in] */ BSTR bstrURL) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNextTopic( 
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ BSTR *pbstrNext) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetPrevTopic( 
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ BSTR *pbstrPrev) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FilterUI( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CanShowFilterUI( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SyncIndex( 
            /* [in] */ BSTR bstrKeyword,
            /* [in] */ BOOL fShow) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetCollection( 
            /* [in] */ BSTR bstrCollection,
            /* [in] */ BSTR bstrFilter) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ BSTR *pbstrCollection) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Filter( 
            /* [retval][out] */ BSTR *pbstrFilter) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Filter( 
            /* [in] */ BSTR bstrFilter) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterQuery( 
            /* [retval][out] */ BSTR *pbstrFilterQuery) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HelpOwner( 
            /* [retval][out] */ IVsHelpOwner **ppObj) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HelpOwner( 
            /* [in] */ IVsHelpOwner *pObj) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HxSession( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Help( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR bstrMoniker,
            /* [in] */ BSTR bstrOptions,
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HelpVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Help * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Help * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Help * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Help * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Help * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Help * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Help * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Contents )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Index )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Search )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IndexResults )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SearchResults )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromId )( 
            Help * This,
            /* [in] */ BSTR bstrFile,
            /* [in] */ DWORD Id);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromURL )( 
            Help * This,
            /* [in] */ BSTR pszURL);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromURLEx )( 
            Help * This,
            /* [in] */ BSTR pszURL,
            /* [in] */ IVsHelpTopicShowEvents *pIVsHelpTopicShowEvents);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromKeyword )( 
            Help * This,
            /* [in] */ BSTR pszKeyword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromF1Keyword )( 
            Help * This,
            /* [in] */ BSTR pszKeyword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFrom_OLD_Help )( 
            Help * This,
            /* [in] */ BSTR bstrFile,
            /* [in] */ DWORD Id);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SyncContents )( 
            Help * This,
            /* [in] */ BSTR bstrURL);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CanSyncContents )( 
            Help * This,
            /* [in] */ BSTR bstrURL);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextTopic )( 
            Help * This,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ BSTR *pbstrNext);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetPrevTopic )( 
            Help * This,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ BSTR *pbstrPrev);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FilterUI )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CanShowFilterUI )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SyncIndex )( 
            Help * This,
            /* [in] */ BSTR bstrKeyword,
            /* [in] */ BOOL fShow);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetCollection )( 
            Help * This,
            /* [in] */ BSTR bstrCollection,
            /* [in] */ BSTR bstrFilter);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Help * This,
            /* [retval][out] */ BSTR *pbstrCollection);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Filter )( 
            Help * This,
            /* [retval][out] */ BSTR *pbstrFilter);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Filter )( 
            Help * This,
            /* [in] */ BSTR bstrFilter);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterQuery )( 
            Help * This,
            /* [retval][out] */ BSTR *pbstrFilterQuery);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HelpOwner )( 
            Help * This,
            /* [retval][out] */ IVsHelpOwner **ppObj);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HelpOwner )( 
            Help * This,
            /* [in] */ IVsHelpOwner *pObj);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HxSession )( 
            Help * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Help )( 
            Help * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            Help * This,
            /* [in] */ BSTR bstrMoniker,
            /* [in] */ BSTR bstrOptions,
            /* [retval][out] */ IDispatch **ppDisp);
        
        END_INTERFACE
    } HelpVtbl;

    interface Help
    {
        CONST_VTBL struct HelpVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Help_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Help_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Help_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Help_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Help_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Help_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Help_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Help_Contents(This)	\
    (This)->lpVtbl -> Contents(This)

#define Help_Index(This)	\
    (This)->lpVtbl -> Index(This)

#define Help_Search(This)	\
    (This)->lpVtbl -> Search(This)

#define Help_IndexResults(This)	\
    (This)->lpVtbl -> IndexResults(This)

#define Help_SearchResults(This)	\
    (This)->lpVtbl -> SearchResults(This)

#define Help_DisplayTopicFromId(This,bstrFile,Id)	\
    (This)->lpVtbl -> DisplayTopicFromId(This,bstrFile,Id)

#define Help_DisplayTopicFromURL(This,pszURL)	\
    (This)->lpVtbl -> DisplayTopicFromURL(This,pszURL)

#define Help_DisplayTopicFromURLEx(This,pszURL,pIVsHelpTopicShowEvents)	\
    (This)->lpVtbl -> DisplayTopicFromURLEx(This,pszURL,pIVsHelpTopicShowEvents)

#define Help_DisplayTopicFromKeyword(This,pszKeyword)	\
    (This)->lpVtbl -> DisplayTopicFromKeyword(This,pszKeyword)

#define Help_DisplayTopicFromF1Keyword(This,pszKeyword)	\
    (This)->lpVtbl -> DisplayTopicFromF1Keyword(This,pszKeyword)

#define Help_DisplayTopicFrom_OLD_Help(This,bstrFile,Id)	\
    (This)->lpVtbl -> DisplayTopicFrom_OLD_Help(This,bstrFile,Id)

#define Help_SyncContents(This,bstrURL)	\
    (This)->lpVtbl -> SyncContents(This,bstrURL)

#define Help_CanSyncContents(This,bstrURL)	\
    (This)->lpVtbl -> CanSyncContents(This,bstrURL)

#define Help_GetNextTopic(This,bstrURL,pbstrNext)	\
    (This)->lpVtbl -> GetNextTopic(This,bstrURL,pbstrNext)

#define Help_GetPrevTopic(This,bstrURL,pbstrPrev)	\
    (This)->lpVtbl -> GetPrevTopic(This,bstrURL,pbstrPrev)

#define Help_FilterUI(This)	\
    (This)->lpVtbl -> FilterUI(This)

#define Help_CanShowFilterUI(This)	\
    (This)->lpVtbl -> CanShowFilterUI(This)

#define Help_Close(This)	\
    (This)->lpVtbl -> Close(This)

#define Help_SyncIndex(This,bstrKeyword,fShow)	\
    (This)->lpVtbl -> SyncIndex(This,bstrKeyword,fShow)

#define Help_SetCollection(This,bstrCollection,bstrFilter)	\
    (This)->lpVtbl -> SetCollection(This,bstrCollection,bstrFilter)

#define Help_get_Collection(This,pbstrCollection)	\
    (This)->lpVtbl -> get_Collection(This,pbstrCollection)

#define Help_get_Filter(This,pbstrFilter)	\
    (This)->lpVtbl -> get_Filter(This,pbstrFilter)

#define Help_put_Filter(This,bstrFilter)	\
    (This)->lpVtbl -> put_Filter(This,bstrFilter)

#define Help_get_FilterQuery(This,pbstrFilterQuery)	\
    (This)->lpVtbl -> get_FilterQuery(This,pbstrFilterQuery)

#define Help_get_HelpOwner(This,ppObj)	\
    (This)->lpVtbl -> get_HelpOwner(This,ppObj)

#define Help_put_HelpOwner(This,pObj)	\
    (This)->lpVtbl -> put_HelpOwner(This,pObj)

#define Help_get_HxSession(This,ppObj)	\
    (This)->lpVtbl -> get_HxSession(This,ppObj)

#define Help_get_Help(This,ppObj)	\
    (This)->lpVtbl -> get_Help(This,ppObj)

#define Help_GetObject(This,bstrMoniker,bstrOptions,ppDisp)	\
    (This)->lpVtbl -> GetObject(This,bstrMoniker,bstrOptions,ppDisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE Help_Contents_Proxy( 
    Help * This);


void __RPC_STUB Help_Contents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_Index_Proxy( 
    Help * This);


void __RPC_STUB Help_Index_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_Search_Proxy( 
    Help * This);


void __RPC_STUB Help_Search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_IndexResults_Proxy( 
    Help * This);


void __RPC_STUB Help_IndexResults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_SearchResults_Proxy( 
    Help * This);


void __RPC_STUB Help_SearchResults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromId_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrFile,
    /* [in] */ DWORD Id);


void __RPC_STUB Help_DisplayTopicFromId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromURL_Proxy( 
    Help * This,
    /* [in] */ BSTR pszURL);


void __RPC_STUB Help_DisplayTopicFromURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromURLEx_Proxy( 
    Help * This,
    /* [in] */ BSTR pszURL,
    /* [in] */ IVsHelpTopicShowEvents *pIVsHelpTopicShowEvents);


void __RPC_STUB Help_DisplayTopicFromURLEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromKeyword_Proxy( 
    Help * This,
    /* [in] */ BSTR pszKeyword);


void __RPC_STUB Help_DisplayTopicFromKeyword_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromF1Keyword_Proxy( 
    Help * This,
    /* [in] */ BSTR pszKeyword);


void __RPC_STUB Help_DisplayTopicFromF1Keyword_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFrom_OLD_Help_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrFile,
    /* [in] */ DWORD Id);


void __RPC_STUB Help_DisplayTopicFrom_OLD_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_SyncContents_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrURL);


void __RPC_STUB Help_SyncContents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_CanSyncContents_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrURL);


void __RPC_STUB Help_CanSyncContents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_GetNextTopic_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrURL,
    /* [retval][out] */ BSTR *pbstrNext);


void __RPC_STUB Help_GetNextTopic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_GetPrevTopic_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrURL,
    /* [retval][out] */ BSTR *pbstrPrev);


void __RPC_STUB Help_GetPrevTopic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_FilterUI_Proxy( 
    Help * This);


void __RPC_STUB Help_FilterUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_CanShowFilterUI_Proxy( 
    Help * This);


void __RPC_STUB Help_CanShowFilterUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_Close_Proxy( 
    Help * This);


void __RPC_STUB Help_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_SyncIndex_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrKeyword,
    /* [in] */ BOOL fShow);


void __RPC_STUB Help_SyncIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_SetCollection_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrCollection,
    /* [in] */ BSTR bstrFilter);


void __RPC_STUB Help_SetCollection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_Collection_Proxy( 
    Help * This,
    /* [retval][out] */ BSTR *pbstrCollection);


void __RPC_STUB Help_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_Filter_Proxy( 
    Help * This,
    /* [retval][out] */ BSTR *pbstrFilter);


void __RPC_STUB Help_get_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE Help_put_Filter_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrFilter);


void __RPC_STUB Help_put_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_FilterQuery_Proxy( 
    Help * This,
    /* [retval][out] */ BSTR *pbstrFilterQuery);


void __RPC_STUB Help_get_FilterQuery_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_HelpOwner_Proxy( 
    Help * This,
    /* [retval][out] */ IVsHelpOwner **ppObj);


void __RPC_STUB Help_get_HelpOwner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE Help_put_HelpOwner_Proxy( 
    Help * This,
    /* [in] */ IVsHelpOwner *pObj);


void __RPC_STUB Help_put_HelpOwner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_HxSession_Proxy( 
    Help * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB Help_get_HxSession_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_Help_Proxy( 
    Help * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB Help_get_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_GetObject_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrMoniker,
    /* [in] */ BSTR bstrOptions,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB Help_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Help_INTERFACE_DEFINED__ */


#ifndef __IVsHelpEvents_INTERFACE_DEFINED__
#define __IVsHelpEvents_INTERFACE_DEFINED__

/* interface IVsHelpEvents */
/* [object][helpstring][uuid] */ 


EXTERN_C const IID IID_IVsHelpEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("507E4490-5A8C-11d3-B897-00C04F79F802")
    IVsHelpEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnFilterChanged( 
            /* [in] */ BSTR bstrNewFilter) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnCollectionChanged( 
            /* [in] */ BSTR bstrNewCollection,
            /* [in] */ BSTR bstrNewFilter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsHelpEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsHelpEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsHelpEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsHelpEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsHelpEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsHelpEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsHelpEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsHelpEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnFilterChanged )( 
            IVsHelpEvents * This,
            /* [in] */ BSTR bstrNewFilter);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnCollectionChanged )( 
            IVsHelpEvents * This,
            /* [in] */ BSTR bstrNewCollection,
            /* [in] */ BSTR bstrNewFilter);
        
        END_INTERFACE
    } IVsHelpEventsVtbl;

    interface IVsHelpEvents
    {
        CONST_VTBL struct IVsHelpEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsHelpEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsHelpEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsHelpEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsHelpEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsHelpEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsHelpEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsHelpEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsHelpEvents_OnFilterChanged(This,bstrNewFilter)	\
    (This)->lpVtbl -> OnFilterChanged(This,bstrNewFilter)

#define IVsHelpEvents_OnCollectionChanged(This,bstrNewCollection,bstrNewFilter)	\
    (This)->lpVtbl -> OnCollectionChanged(This,bstrNewCollection,bstrNewFilter)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpEvents_OnFilterChanged_Proxy( 
    IVsHelpEvents * This,
    /* [in] */ BSTR bstrNewFilter);


void __RPC_STUB IVsHelpEvents_OnFilterChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpEvents_OnCollectionChanged_Proxy( 
    IVsHelpEvents * This,
    /* [in] */ BSTR bstrNewCollection,
    /* [in] */ BSTR bstrNewFilter);


void __RPC_STUB IVsHelpEvents_OnCollectionChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsHelpEvents_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DExploreAppObj;

#ifdef __cplusplus

class DECLSPEC_UUID("4A79114D-19E4-11d3-B86B-00C04F79F802")
DExploreAppObj;
#endif
#endif /* __VsHelp_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_vshelp_0256 */
/* [local] */ 

#define SID_SVsHelp	IID_Help
#define IID_IVsHelp	IID_Help
#define IVsHelp	    Help
#define CLSID_MsdnAppObj	CLSID_DExploreAppObj
extern const __declspec(selectany) GUID SID_SVsIntegratedHelp = { 0xca8a686a, 0x882, 0x4e79, { 0xbc, 0xa3, 0xaf, 0x3f, 0x3a, 0xb3, 0xeb, 0x8a } };


extern RPC_IF_HANDLE __MIDL_itf_vshelp_0256_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_vshelp_0256_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\projbldprivate.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sun Jan 27 21:49:08 2002
 */
/* Compiler settings for projbldprivate.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __projbldprivate_h__
#define __projbldprivate_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVCCfg_FWD_DEFINED__
#define __IVCCfg_FWD_DEFINED__
typedef interface IVCCfg IVCCfg;
#endif 	/* __IVCCfg_FWD_DEFINED__ */


#ifndef __File_FWD_DEFINED__
#define __File_FWD_DEFINED__
typedef interface File File;
#endif 	/* __File_FWD_DEFINED__ */


#ifndef __Filter_FWD_DEFINED__
#define __Filter_FWD_DEFINED__
typedef interface Filter Filter;
#endif 	/* __Filter_FWD_DEFINED__ */


#ifndef ___VCProject_FWD_DEFINED__
#define ___VCProject_FWD_DEFINED__
typedef interface _VCProject _VCProject;
#endif 	/* ___VCProject_FWD_DEFINED__ */


#ifndef __FileNodeProps_FWD_DEFINED__
#define __FileNodeProps_FWD_DEFINED__

#ifdef __cplusplus
typedef class FileNodeProps FileNodeProps;
#else
typedef struct FileNodeProps FileNodeProps;
#endif /* __cplusplus */

#endif 	/* __FileNodeProps_FWD_DEFINED__ */


#ifndef __FolderNodeProps_FWD_DEFINED__
#define __FolderNodeProps_FWD_DEFINED__

#ifdef __cplusplus
typedef class FolderNodeProps FolderNodeProps;
#else
typedef struct FolderNodeProps FolderNodeProps;
#endif /* __cplusplus */

#endif 	/* __FolderNodeProps_FWD_DEFINED__ */


#ifndef __ProjectNodeProps_FWD_DEFINED__
#define __ProjectNodeProps_FWD_DEFINED__

#ifdef __cplusplus
typedef class ProjectNodeProps ProjectNodeProps;
#else
typedef struct ProjectNodeProps ProjectNodeProps;
#endif /* __cplusplus */

#endif 	/* __ProjectNodeProps_FWD_DEFINED__ */


#ifndef __BuildPackage_FWD_DEFINED__
#define __BuildPackage_FWD_DEFINED__

#ifdef __cplusplus
typedef class BuildPackage BuildPackage;
#else
typedef struct BuildPackage BuildPackage;
#endif /* __cplusplus */

#endif 	/* __BuildPackage_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_projbldprivate_0000 */
/* [local] */ 


extern "C" const __declspec(selectany) GUID SID_SProjectEngine = { 0x531ADA6BL,0x0EEA,0x11D3,0x8D,0x31,0x00,0xC0,0x4F,0x8E,0xEA,0x30 };
extern "C" const __declspec(selectany) GUID SID_SENCBuildSpawner = { 0x39642745L,0x908C,0x11D3,0xB9,0x9A,0x00,0xC0,0x4F,0x68,0x5D,0x26 };
extern "C" const __declspec(selectany) GUID SID_SBuildErrorContext = { 0x39642745L,0x908C,0x11D3,0xB9,0x9A,0x00,0xC0,0x4F,0x68,0x5D,0x27 };
extern "C" const __declspec(selectany) GUID GUID_ItemType_VC = { 0x31df8af1L,0xe859,0x43eb,0xac,0xfb,0x23,0x8d,0x73,0x74,0x27,0x1f };

enum __VCPROPID
    {	VCPROPID_NIL	= -1,
	VCPROPID_FIRST	= 1000,
	VCPROPID_ProjBldObject	= 1000,
	VCPROPID_ProjBldProject	= 1001,
	VCPROPID_ProjBldActiveProjConfig	= 1002,
	VCPROPID_ProjBldActiveFileConfig	= 1003,
	VCPROPID_ProjBldIncludePath	= 1004,
	VCPROPID_ProjBldBscFile	= 1005,
	VCPROPID_LAST	= 1005
    } ;
typedef LONG VCPROPID;



extern RPC_IF_HANDLE __MIDL_itf_projbldprivate_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_projbldprivate_0000_v0_0_s_ifspec;

#ifndef __IVCCfg_INTERFACE_DEFINED__
#define __IVCCfg_INTERFACE_DEFINED__

/* interface IVCCfg */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IVCCfg;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("694C76BC-3EF4-11d3-B278-0050041DB12A")
    IVCCfg : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE get_Tool( 
            /* [in] */ VARIANT toolIndex,
            /* [retval][out] */ IUnknown **ppTool) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVCCfgVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVCCfg * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVCCfg * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVCCfg * This);
        
        HRESULT ( STDMETHODCALLTYPE *get_Tool )( 
            IVCCfg * This,
            /* [in] */ VARIANT toolIndex,
            /* [retval][out] */ IUnknown **ppTool);
        
        HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            IVCCfg * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        END_INTERFACE
    } IVCCfgVtbl;

    interface IVCCfg
    {
        CONST_VTBL struct IVCCfgVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVCCfg_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVCCfg_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVCCfg_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVCCfg_get_Tool(This,toolIndex,ppTool)	\
    (This)->lpVtbl -> get_Tool(This,toolIndex,ppTool)

#define IVCCfg_get_Object(This,ppObj)	\
    (This)->lpVtbl -> get_Object(This,ppObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVCCfg_get_Tool_Proxy( 
    IVCCfg * This,
    /* [in] */ VARIANT toolIndex,
    /* [retval][out] */ IUnknown **ppTool);


void __RPC_STUB IVCCfg_get_Tool_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCCfg_get_Object_Proxy( 
    IVCCfg * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB IVCCfg_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVCCfg_INTERFACE_DEFINED__ */


#ifndef __File_INTERFACE_DEFINED__
#define __File_INTERFACE_DEFINED__

/* interface File */
/* [unique][helpstringcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_File;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2D5D650E-3E0D-11d3-9415-00C04F68FB62")
    File : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FullPath( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RelativePath( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RelativePath( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DeploymentContent( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DeploymentContent( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *pvarNames) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pbstrGuid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            File * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            File * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            File * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            File * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            File * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            File * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            File * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            File * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            File * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RelativePath )( 
            File * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RelativePath )( 
            File * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentContent )( 
            File * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DeploymentContent )( 
            File * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            File * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            File * This,
            /* [retval][out] */ VARIANT *pvarNames);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            File * This,
            /* [retval][out] */ BSTR *pbstrGuid);
        
        END_INTERFACE
    } FileVtbl;

    interface File
    {
        CONST_VTBL struct FileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define File_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define File_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define File_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define File_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define File_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define File_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define File_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define File_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define File_get_FullPath(This,pVal)	\
    (This)->lpVtbl -> get_FullPath(This,pVal)

#define File_get_RelativePath(This,pVal)	\
    (This)->lpVtbl -> get_RelativePath(This,pVal)

#define File_put_RelativePath(This,newVal)	\
    (This)->lpVtbl -> put_RelativePath(This,newVal)

#define File_get_DeploymentContent(This,pVal)	\
    (This)->lpVtbl -> get_DeploymentContent(This,pVal)

#define File_put_DeploymentContent(This,newVal)	\
    (This)->lpVtbl -> put_DeploymentContent(This,newVal)

#define File_get_Extender(This,bstrName,ppDisp)	\
    (This)->lpVtbl -> get_Extender(This,bstrName,ppDisp)

#define File_get_ExtenderNames(This,pvarNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,pvarNames)

#define File_get_ExtenderCATID(This,pbstrGuid)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pbstrGuid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE File_get_Name_Proxy( 
    File * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB File_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE File_get_FullPath_Proxy( 
    File * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB File_get_FullPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE File_get_RelativePath_Proxy( 
    File * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB File_get_RelativePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE File_put_RelativePath_Proxy( 
    File * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB File_put_RelativePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE File_get_DeploymentContent_Proxy( 
    File * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB File_get_DeploymentContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE File_put_DeploymentContent_Proxy( 
    File * This,
    /* [in] */ VARIANT_BOOL newVal);


void __RPC_STUB File_put_DeploymentContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE File_get_Extender_Proxy( 
    File * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB File_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE File_get_ExtenderNames_Proxy( 
    File * This,
    /* [retval][out] */ VARIANT *pvarNames);


void __RPC_STUB File_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE File_get_ExtenderCATID_Proxy( 
    File * This,
    /* [retval][out] */ BSTR *pbstrGuid);


void __RPC_STUB File_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __File_INTERFACE_DEFINED__ */


#ifndef __Filter_INTERFACE_DEFINED__
#define __Filter_INTERFACE_DEFINED__

/* interface Filter */
/* [unique][helpstringcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_Filter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2111B8B8-4150-11d3-9416-00C04F68FB62")
    Filter : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Filter( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Filter( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParseFiles( 
            /* [retval][out] */ VARIANT_BOOL *pbParse) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ParseFiles( 
            /* [in] */ VARIANT_BOOL bParse) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceControlFiles( 
            /* [retval][out] */ VARIANT_BOOL *pbSCC) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SourceControlFiles( 
            /* [in] */ VARIANT_BOOL bSCC) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *pvarNames) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pbstrGuid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FilterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Filter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Filter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Filter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Filter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Filter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Filter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Filter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Filter * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Filter * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Filter )( 
            Filter * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Filter )( 
            Filter * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParseFiles )( 
            Filter * This,
            /* [retval][out] */ VARIANT_BOOL *pbParse);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ParseFiles )( 
            Filter * This,
            /* [in] */ VARIANT_BOOL bParse);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceControlFiles )( 
            Filter * This,
            /* [retval][out] */ VARIANT_BOOL *pbSCC);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceControlFiles )( 
            Filter * This,
            /* [in] */ VARIANT_BOOL bSCC);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            Filter * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            Filter * This,
            /* [retval][out] */ VARIANT *pvarNames);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            Filter * This,
            /* [retval][out] */ BSTR *pbstrGuid);
        
        END_INTERFACE
    } FilterVtbl;

    interface Filter
    {
        CONST_VTBL struct FilterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Filter_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Filter_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Filter_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Filter_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Filter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Filter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Filter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Filter_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define Filter_put_Name(This,newVal)	\
    (This)->lpVtbl -> put_Name(This,newVal)

#define Filter_get_Filter(This,pVal)	\
    (This)->lpVtbl -> get_Filter(This,pVal)

#define Filter_put_Filter(This,newVal)	\
    (This)->lpVtbl -> put_Filter(This,newVal)

#define Filter_get_ParseFiles(This,pbParse)	\
    (This)->lpVtbl -> get_ParseFiles(This,pbParse)

#define Filter_put_ParseFiles(This,bParse)	\
    (This)->lpVtbl -> put_ParseFiles(This,bParse)

#define Filter_get_SourceControlFiles(This,pbSCC)	\
    (This)->lpVtbl -> get_SourceControlFiles(This,pbSCC)

#define Filter_put_SourceControlFiles(This,bSCC)	\
    (This)->lpVtbl -> put_SourceControlFiles(This,bSCC)

#define Filter_get_Extender(This,bstrName,ppDisp)	\
    (This)->lpVtbl -> get_Extender(This,bstrName,ppDisp)

#define Filter_get_ExtenderNames(This,pvarNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,pvarNames)

#define Filter_get_ExtenderCATID(This,pbstrGuid)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pbstrGuid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_Name_Proxy( 
    Filter * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB Filter_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Filter_put_Name_Proxy( 
    Filter * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB Filter_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_Filter_Proxy( 
    Filter * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB Filter_get_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Filter_put_Filter_Proxy( 
    Filter * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB Filter_put_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_ParseFiles_Proxy( 
    Filter * This,
    /* [retval][out] */ VARIANT_BOOL *pbParse);


void __RPC_STUB Filter_get_ParseFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Filter_put_ParseFiles_Proxy( 
    Filter * This,
    /* [in] */ VARIANT_BOOL bParse);


void __RPC_STUB Filter_put_ParseFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_SourceControlFiles_Proxy( 
    Filter * This,
    /* [retval][out] */ VARIANT_BOOL *pbSCC);


void __RPC_STUB Filter_get_SourceControlFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Filter_put_SourceControlFiles_Proxy( 
    Filter * This,
    /* [in] */ VARIANT_BOOL bSCC);


void __RPC_STUB Filter_put_SourceControlFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_Extender_Proxy( 
    Filter * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB Filter_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_ExtenderNames_Proxy( 
    Filter * This,
    /* [retval][out] */ VARIANT *pvarNames);


void __RPC_STUB Filter_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_ExtenderCATID_Proxy( 
    Filter * This,
    /* [retval][out] */ BSTR *pbstrGuid);


void __RPC_STUB Filter_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Filter_INTERFACE_DEFINED__ */


#ifndef ___VCProject_INTERFACE_DEFINED__
#define ___VCProject_INTERFACE_DEFINED__

/* interface _VCProject */
/* [unique][helpstringcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID__VCProject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2111B8BA-4150-11d3-9416-00C04F68FB62")
    _VCProject : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProjectFile( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProjectDependencies( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *pvarNames) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pbstrGuid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _VCProjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _VCProject * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _VCProject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _VCProject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _VCProject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _VCProject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _VCProject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _VCProject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _VCProject * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            _VCProject * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectFile )( 
            _VCProject * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectDependencies )( 
            _VCProject * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            _VCProject * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            _VCProject * This,
            /* [retval][out] */ VARIANT *pvarNames);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            _VCProject * This,
            /* [retval][out] */ BSTR *pbstrGuid);
        
        END_INTERFACE
    } _VCProjectVtbl;

    interface _VCProject
    {
        CONST_VTBL struct _VCProjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _VCProject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _VCProject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _VCProject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _VCProject_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _VCProject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _VCProject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _VCProject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _VCProject_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define _VCProject_put_Name(This,newVal)	\
    (This)->lpVtbl -> put_Name(This,newVal)

#define _VCProject_get_ProjectFile(This,pVal)	\
    (This)->lpVtbl -> get_ProjectFile(This,pVal)

#define _VCProject_get_ProjectDependencies(This,pVal)	\
    (This)->lpVtbl -> get_ProjectDependencies(This,pVal)

#define _VCProject_get_Extender(This,bstrName,ppDisp)	\
    (This)->lpVtbl -> get_Extender(This,bstrName,ppDisp)

#define _VCProject_get_ExtenderNames(This,pvarNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,pvarNames)

#define _VCProject_get_ExtenderCATID(This,pbstrGuid)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pbstrGuid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_Name_Proxy( 
    _VCProject * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB _VCProject_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE _VCProject_put_Name_Proxy( 
    _VCProject * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB _VCProject_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_ProjectFile_Proxy( 
    _VCProject * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB _VCProject_get_ProjectFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_ProjectDependencies_Proxy( 
    _VCProject * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB _VCProject_get_ProjectDependencies_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_Extender_Proxy( 
    _VCProject * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB _VCProject_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_ExtenderNames_Proxy( 
    _VCProject * This,
    /* [retval][out] */ VARIANT *pvarNames);


void __RPC_STUB _VCProject_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_ExtenderCATID_Proxy( 
    _VCProject * This,
    /* [retval][out] */ BSTR *pbstrGuid);


void __RPC_STUB _VCProject_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___VCProject_INTERFACE_DEFINED__ */



#ifndef __VCPrivateProjectLibrary_LIBRARY_DEFINED__
#define __VCPrivateProjectLibrary_LIBRARY_DEFINED__

/* library VCPrivateProjectLibrary */
/* [helpstringdll][helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_VCPrivateProjectLibrary;

EXTERN_C const CLSID CLSID_FileNodeProps;

#ifdef __cplusplus

class DECLSPEC_UUID("2D5D650F-3E0D-11d3-9415-00C04F68FB62")
FileNodeProps;
#endif

EXTERN_C const CLSID CLSID_FolderNodeProps;

#ifdef __cplusplus

class DECLSPEC_UUID("2111B8B9-4150-11d3-9416-00C04F68FB62")
FolderNodeProps;
#endif

EXTERN_C const CLSID CLSID_ProjectNodeProps;

#ifdef __cplusplus

class DECLSPEC_UUID("2111B8BB-4150-11d3-9416-00C04F68FB62")
ProjectNodeProps;
#endif

EXTERN_C const CLSID CLSID_BuildPackage;

#ifdef __cplusplus

class DECLSPEC_UUID("F1C25864-3097-11D2-A5C5-00C04F7968B4")
BuildPackage;
#endif
#endif /* __VCPrivateProjectLibrary_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\webref.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:43:50 2002
 */
/* Compiler settings for webref.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __webref_h__
#define __webref_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVsAddWebReference_FWD_DEFINED__
#define __IVsAddWebReference_FWD_DEFINED__
typedef interface IVsAddWebReference IVsAddWebReference;
#endif 	/* __IVsAddWebReference_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IVsAddWebReference_INTERFACE_DEFINED__
#define __IVsAddWebReference_INTERFACE_DEFINED__

/* interface IVsAddWebReference */
/* [object][unique][uuid] */ 


EXTERN_C const IID IID_IVsAddWebReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D85F3427-8160-4d1f-8A2B-A8A1E3011C2D")
    IVsAddWebReference : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddWebReferenceEx( 
            /* [in] */ LPCOLESTR pszUrl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsAddWebReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsAddWebReference * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsAddWebReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsAddWebReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddWebReferenceEx )( 
            IVsAddWebReference * This,
            /* [in] */ LPCOLESTR pszUrl);
        
        END_INTERFACE
    } IVsAddWebReferenceVtbl;

    interface IVsAddWebReference
    {
        CONST_VTBL struct IVsAddWebReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsAddWebReference_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsAddWebReference_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsAddWebReference_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsAddWebReference_AddWebReferenceEx(This,pszUrl)	\
    (This)->lpVtbl -> AddWebReferenceEx(This,pszUrl)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVsAddWebReference_AddWebReferenceEx_Proxy( 
    IVsAddWebReference * This,
    /* [in] */ LPCOLESTR pszUrl);


void __RPC_STUB IVsAddWebReference_AddWebReferenceEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsAddWebReference_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\win2000\drivers\sctrsz\power.c ===
/*++

Copyright (c) 1996-2000  Microsoft Corporation

Module Name:

    power.c

Abstract:
  Filter driver to adapt the SectorSize of USB Mass Storage devices to effectively
  be 512 bytes.  Design to work with up to 8 kbyte sector size.


  Based on NULL filter driver -- boilerplate code -- from NTDDK.

Author:

    ervinp (original boiler plate)
	mitchd (sctrsize)

Environment:

    Kernel mode

Revision History:


--*/

#include <WDM.H>

#include "filter.h"


#ifdef ALLOC_PRAGMA
    #ifdef HANDLE_DEVICE_USAGE
        #pragma alloc_text(PAGEPOWR, SCTRSZ_Power)
    #endif // HANDLE_DEVICE_USAGE
#endif


NTSTATUS SCTRSZ_Power(struct DEVICE_EXTENSION *devExt, PIRP irp)
/*++

Routine Description:

    Dispatch routine for Power IRPs (MajorFunction == IRP_MJ_Power)


    Note:
        If HANDLE_DEVICE_USAGE is defined     
     
           This function may or may not be locked down, depending on the lower
           device object and if the device is in the paging path, so we can't
           use the PAGED_CODE() macro.  Furthermore, we can't use PagedPool. 
           
        Otherwise

            This function is left locked down.        

Arguments:

    devExt - device extension for targetted device object
    irp - Io Request Packet

Return Value:

    NT status code

--*/
{
    PIO_STACK_LOCATION irpSp;
    NTSTATUS status;

    irpSp = IoGetCurrentIrpStackLocation(irp);

    DBGOUT(("SCTRSZ_Power, minorFunc = %d ", (ULONG)irpSp->MinorFunction)); 


    switch (irpSp->MinorFunction){

        case IRP_MN_SET_POWER:

            switch (irpSp->Parameters.Power.Type) {

                case SystemPowerState:
                    /*
                     *  For system power states, just pass the IRP down.
                     */
                    break;

                case DevicePowerState:

                    switch (irpSp->Parameters.Power.State.DeviceState) {

                        case PowerDeviceD0:
                            /*
                             *  Resume from APM Suspend
                             *
                             *  Do nothing here; 
                             *  Send down the read IRPs in the completion
                             *  routine for this (the power) IRP.
                             */
                            break;

                        case PowerDeviceD1:
                        case PowerDeviceD2:
                        case PowerDeviceD3:
                            /*
                             *  Suspend
                             */
                            if (devExt->state == STATE_STARTED){
                                devExt->state = STATE_SUSPENDED;
                            }
                            break;

                    }
                    break;

            }
            break;

    }


    /*
     *  Send the IRP down the driver stack,
     *  using PoCallDriver (not IoCallDriver, as for non-power irps).
     */
    IncrementPendingActionCount(devExt);
    IoCopyCurrentIrpStackLocationToNext(irp);
    IoSetCompletionRoutine( irp, 
                            SCTRSZ_PowerComplete, 
                            (PVOID)devExt,  // context
                            TRUE, 
                            TRUE, 
                            TRUE);
    status = PoCallDriver(devExt->topDevObj, irp);

    return status;
}


NTSTATUS SCTRSZ_PowerComplete(
                            IN PDEVICE_OBJECT devObj, 
                            IN PIRP irp, 
                            IN PVOID context)
/*++

Routine Description:

      Completion routine for Power IRPs (MajorFunction == IRP_MJ_Power)

Arguments:

    devObj - targetted device object
    irp - Io Request Packet
    context - context value passed to IoSetCompletionRoutine by SCTRSZ_Power

Return Value:

    NT status code

--*/
{
    PIO_STACK_LOCATION irpSp;
    struct DEVICE_EXTENSION *devExt = (struct DEVICE_EXTENSION *)context;

    ASSERT(devExt);
    ASSERT(devExt->signature == DEVICE_EXTENSION_SIGNATURE); 

    /*
     *  If the lower driver returned PENDING, mark our stack location as
     *  pending also.
     */
    if (irp->PendingReturned){
        IoMarkIrpPending(irp);
    }

    irpSp = IoGetCurrentIrpStackLocation(irp);
    ASSERT(irpSp->MajorFunction == IRP_MJ_POWER);

    if (NT_SUCCESS(irp->IoStatus.Status)){
        switch (irpSp->MinorFunction){

            case IRP_MN_SET_POWER:

                switch (irpSp->Parameters.Power.Type){

                    case DevicePowerState:
                        switch (irpSp->Parameters.Power.State.DeviceState){
                            case PowerDeviceD0:
                                if (devExt->state == STATE_SUSPENDED){
                                    devExt->state = STATE_STARTED;
                                }
                                break;
                        }
                        break;

                }
                break;
        }

    }
    
    
    /*
     *  Whether we are completing or relaying this power IRP,
     *  we must call PoStartNextPowerIrp.
     */
    PoStartNextPowerIrp(irp);

    /*
     *  Decrement the pendingActionCount, which we incremented in SCTRSZ_Power.
     */
    DecrementPendingActionCount(devExt);

    return STATUS_SUCCESS;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\win2000\drivers\sctrsz\filter.c ===
/*++

Copyright (c) 1996-2000  Microsoft Corporation

Module Name:

    filter.c

Abstract:
  Filter driver to adapt the SectorSize of USB Mass Storage devices to effectively
  be 512 bytes.  Design to work with up to 8 kbyte sector size.


  Based on NULL filter driver -- boilerplate code -- from NTDDK.

Author:

    ervinp (original boiler plate)
	mitchd (sctrsize)

Environment:

    Kernel mode

Revision History:


--*/

#include <WDM.H>

#include "filter.h"

#ifdef ALLOC_PRAGMA
        #pragma alloc_text(INIT, DriverEntry)
        #pragma alloc_text(PAGE, SCTRSZ_AddDevice)
        #pragma alloc_text(PAGE, SCTRSZ_DriverUnload)
#endif


NTSTATUS DriverEntry(
                        IN PDRIVER_OBJECT DriverObject, 
                        IN PUNICODE_STRING RegistryPath
                    )
/*++

Routine Description:

    Installable driver initialization entry point.
    This entry point is called directly by the I/O system.

Arguments:

    DriverObject - pointer to the driver object

    RegistryPath - pointer to a unicode string representing the path,
                   to driver-specific key in the registry.

Return Value:

    STATUS_SUCCESS if successful,
    STATUS_UNSUCCESSFUL otherwise

--*/
{
    ULONG i;

    PAGED_CODE();

    UNREFERENCED_PARAMETER(RegistryPath);

    DBGOUT(("DriverEntry")); 

    /*
     *  Route all IRPs on device objects created by this driver
     *  to our IRP dispatch routine.
     */
    for (i = 0; i <= IRP_MJ_MAXIMUM_FUNCTION; i++){
        DriverObject->MajorFunction[i] = SCTRSZ_Dispatch; 
    }
	DriverObject->DriverExtension->AddDevice = SCTRSZ_AddDevice;
    DriverObject->DriverUnload = SCTRSZ_DriverUnload;

    return STATUS_SUCCESS;
}


NTSTATUS SCTRSZ_AddDevice(
                        IN PDRIVER_OBJECT driverObj, 
                        IN PDEVICE_OBJECT physicalDevObj
                     )
/*++

Routine Description:

    The PlugPlay subsystem is handing us a brand new 
    PDO (Physical Device Object), for which we
    (by means of INF registration) have been asked to filter.

    We need to determine if we should attach or not.
    Create a filter device object to attach to the stack
    Initialize that device object
    Return status success.

    Remember: we can NOT actually send ANY non pnp IRPS to the given driver
    stack, UNTIL we have received an IRP_MN_START_DEVICE.

Arguments:

    driverObj - pointer to a device object.

    physicalDevObj -    pointer to a physical device object pointer 
                        created by the  underlying bus driver.

Return Value:

    NT status code.

--*/

{
    NTSTATUS status;
    PDEVICE_OBJECT filterDevObj = NULL;
	HANDLE	threadHandle;
    
    PAGED_CODE();

    DBGOUT(("SCTRSZ_AddDevice: drvObj=%ph, pdo=%ph", driverObj, physicalDevObj)); 

    status = IoCreateDevice(    driverObj, 
                                sizeof(struct DEVICE_EXTENSION),
                                NULL,           // name for this device
                                FILE_DEVICE_UNKNOWN, 
                                FILE_AUTOGENERATED_DEVICE_NAME,                // device characteristics
                                FALSE,          // not exclusive
                                &filterDevObj); // our device object

    if (NT_SUCCESS(status)){
        struct DEVICE_EXTENSION *devExt;

        ASSERT(filterDevObj);

        /*
         *  Initialize device extension for new device object
         */
        devExt = (struct DEVICE_EXTENSION *)filterDevObj->DeviceExtension;
        RtlZeroMemory(devExt, sizeof(struct DEVICE_EXTENSION));
        devExt->signature = DEVICE_EXTENSION_SIGNATURE;
        devExt->state = STATE_INITIALIZED;
        devExt->filterDevObj = filterDevObj;
        devExt->physicalDevObj = physicalDevObj;
        
        devExt->pendingActionCount = 0;
        KeInitializeEvent(&devExt->removeEvent, NotificationEvent, FALSE);
#ifdef HANDLE_DEVICE_USAGE
        KeInitializeEvent(&devExt->deviceUsageNotificationEvent, SynchronizationEvent, TRUE);
#endif // HANDLE_DEVICE_USAGE
	
		/*
		 *	Initialize the SECTOR SIZE specific portion of the extension
		 *
		 */
		InitializeListHead(&devExt->ext.IrpQueue);
		KeInitializeSpinLock(&devExt->ext.IrpQueueLock);
		
		/*
		 *	Create a system thread for ping-ponging READ, and WRITE
		 *	SRBs.  The overhead of the thread is probably worth
		 *	the great deal of simplification that can be achieved.
		 */
		KeInitializeEvent(&devExt->ext.NewIrpEvent, SynchronizationEvent, FALSE);
		KeInitializeEvent(&devExt->ext.TerminateThreadEvent, SynchronizationEvent, FALSE);
		status = PsCreateSystemThread(
						&threadHandle,
						0,
						NULL,
						NULL,
						NULL,
						SCTRSZ_SrbThreadRoutine,
						(PVOID)devExt
						);
		if(!NT_SUCCESS(status))
		{
			IoDeleteDevice(filterDevObj);
		} else
		{
			
			/*
			 * Convert the handle to an object and close the handle
			 *
			 */
			ObReferenceObjectByHandle(
				threadHandle,
				THREAD_ALL_ACCESS,
				NULL,
				KernelMode,
				&devExt->ext.ThreadObj,
				NULL
				);
			ZwClose(threadHandle);

			/*
			 *  Attach the new device object to the top of the device stack.
			 */
			devExt->topDevObj = IoAttachDeviceToDeviceStack(filterDevObj, physicalDevObj);

			ASSERT(devExt->topDevObj);
			DBGOUT(("created filterDevObj %ph attached to %ph.", filterDevObj, devExt->topDevObj));


			//
			// As a filter driver, we do not want to change the power or I/O
			// behavior of the driver stack in any way.  Recall that a filter
			// driver should "appear" the same (almost) as the underlying device.
			// Therefore we must copy some bits from the device object _directly_
			// below us in the device stack (notice: DON'T copy from the PDO!)
			//


			/* Various I/O-related flags which should be maintained */
			/* (copy from lower device object) */
			filterDevObj->Flags |=
				(devExt->topDevObj->Flags & (DO_BUFFERED_IO | DO_DIRECT_IO));

			/* Various Power-related flags which should be maintained */
			/* (copy from lower device object) */
			filterDevObj->Flags |= (devExt->topDevObj->Flags &
				(DO_POWER_INRUSH | DO_POWER_PAGABLE /*| DO_POWER_NOOP*/)); 

#ifdef HANDLE_DEVICE_USAGE
			//
			// To determine whether some of our routines should initially be
			// pageable, we must consider the DO_POWER_xxxx flags of the
			// device object directly below us in the device stack.
			//
			// * We make ourselves pageable if:
			//     - that devobj has its PAGABLE bit set (so we know our power
			//       routines won't be called at DISPATCH_LEVEL)
			// -OR-
			//     - that devobj has its NOOP bit set (so we know we won't be
			//       participating in power-management at all).  NOTE, currently
			//       DO_POWER_NOOP is not implemented.
			//
			// * Otherwise, we make ourselves non-pageable because either:
			//     - that devobj has its INRUSH bit set (so we also have to be
			//       INRUSH, and code that handles INRUSH irps can't be pageable)
			// -OR-
			//     - that devobj does NOT have its PAGABLE bit set (and NOOP isn't
			//       set, so some of our code might be called at DISPATCH_LEVEL)
			//
			if ((devExt->topDevObj->Flags & DO_POWER_PAGABLE)
				 /*|| (devExt->topDevObj->Flags & DO_POWER_NOOP)*/)
			{
				// We're initially pageable.
				//
				// Don't need to do anything else here, for now.
			}
			else
			{
				// We're initially non-pageable.
				//
				// We need to lock-down the code for all routines
				// that could be called at IRQL >= DISPATCH_LEVEL.
				DBGOUT(( "LOCKing some driver code (non-pageable) (b/c init conditions)" ));
				devExt->initUnlockHandle = MmLockPagableCodeSection( SCTRSZ_Power );  // some func that's inside the code section that we want to lock
				ASSERT( NULL != devExt->initUnlockHandle );
			}

			/*
			 *  Remember our initial flag settings.
			 *  (Need remember initial settings to correctly handle
			 *  setting of PAGABLE bit later.)
			 */
			devExt->initialFlags = filterDevObj->Flags & ~DO_DEVICE_INITIALIZING;
#endif // HANDLE_DEVICE_USAGE

			/*
			 *  Clear the initializing bit from the new device object's flags.
			 *  NOTE: must not do this until *after* setting DO_POWER_xxxx flags
			 */
			filterDevObj->Flags &= ~DO_DEVICE_INITIALIZING;

			/*
			 *  This is a do-nothing call to a sample function which
			 *  demonstrates how to read the device's registry area.
			 *  Note that you cannot make this call on devExt->filterDevObj
			 *  because a filter device object does not have a devNode.
			 *  We pass devExt->physicalDevObj, which is the device object
			 *  for which this driver is a filter driver.
			 */
			//RegistryAccessSample(devExt, devExt->physicalDevObj);
		}
    } 
    ASSERT(NT_SUCCESS(status));
    return status;
}


VOID SCTRSZ_DriverUnload(IN PDRIVER_OBJECT DriverObject)
/*++

Routine Description:

    Free all the allocated resources, etc.

    Note:  Although the DriverUnload function often does nothing,
           the driver must set a DriverUnload function in 
           DriverEntry; otherwise, the kernel will never unload
           the driver.

Arguments:

    DriverObject - pointer to a driver object.

Return Value:

    VOID.

--*/
{
    PAGED_CODE();

    DBGOUT(("SCTRSZ_DriverUnload")); 
}


NTSTATUS SCTRSZ_Dispatch(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp)
/*++

Routine Description:

    Common entrypoint for all Io Request Packets

Arguments:

    DeviceObject - pointer to a device object.
    Irp - Io Request Packet

Return Value:

    NT status code.

--*/

{
    struct DEVICE_EXTENSION *devExt;
    PIO_STACK_LOCATION irpSp;
    BOOLEAN passIrpDown = TRUE;
    UCHAR majorFunc, minorFunc;
    NTSTATUS status;

    devExt = DeviceObject->DeviceExtension;
    ASSERT(devExt->signature == DEVICE_EXTENSION_SIGNATURE);

    irpSp = IoGetCurrentIrpStackLocation(Irp);

    /*
     *  Get major/minor function codes in private variables
     *  so we can access them after the IRP is completed.
     */
    majorFunc = irpSp->MajorFunction;
    minorFunc = irpSp->MinorFunction;

	/*
	 *	Quite down the filter, comment out.
	 */
    //DBGOUT(("SCTRSZ_Dispatch: majorFunc=%d, minorFunc=%d", 
    //      (ULONG)majorFunc, (ULONG)minorFunc)); 

    /*
     *  For all IRPs except REMOVE, we increment the PendingActionCount
     *  across the dispatch routine in order to prevent a race condition with
     *  the REMOVE_DEVICE IRP (without this increment, if REMOVE_DEVICE
     *  preempted another IRP, device object and extension might get
     *  freed while the second thread was still using it).
     */
    if (!((majorFunc == IRP_MJ_PNP) && (minorFunc == IRP_MN_REMOVE_DEVICE))){
        IncrementPendingActionCount(devExt);
    }

    if ((majorFunc != IRP_MJ_PNP) &&
        (majorFunc != IRP_MJ_CLOSE) &&
        ((devExt->state == STATE_REMOVING) ||
         (devExt->state == STATE_REMOVED))){

        /*
         *  While the device is being removed, 
         *  we only pass down the PNP and CLOSE IRPs.
         *  We fail all other IRPs.
         */
        status = Irp->IoStatus.Status = STATUS_DELETE_PENDING;
        IoCompleteRequest(Irp, IO_NO_INCREMENT);
        passIrpDown = FALSE;
    }
    else {
        switch (majorFunc){

            case IRP_MJ_PNP:
                status = SCTRSZ_PnP(devExt, Irp);
                passIrpDown = FALSE;
                break;

            case IRP_MJ_POWER:
                status = SCTRSZ_Power(devExt, Irp);
                passIrpDown = FALSE;
                break;

            case IRP_MJ_DEVICE_CONTROL:
				status = SCTRSZ_Ioctl(devExt, Irp, &passIrpDown);
				break;

			case IRP_MJ_SCSI:
				status = SCTRSZ_Scsi(devExt, Irp, &passIrpDown);
				break;

			case IRP_MJ_CREATE:
            case IRP_MJ_CLOSE:
            case IRP_MJ_SYSTEM_CONTROL:
            default:
                /*
                 *  For unsupported IRPs, we simply send the IRP
                 *  down the driver stack.
                 */
                break;
        }
    }

    if (passIrpDown){
        IoCopyCurrentIrpStackLocationToNext(Irp);
        status = IoCallDriver(devExt->topDevObj, Irp);
    }

    /*
     *  Balance the increment to PendingActionCount above.
     */
    if (!((majorFunc == IRP_MJ_PNP) && (minorFunc == IRP_MN_REMOVE_DEVICE))){
        DecrementPendingActionCount(devExt);
    }

    return status;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\win2000\drivers\sctrsz\pnp.c ===
/*++

Copyright (c) 1996-2000  Microsoft Corporation

Module Name:

    pnp.c

Abstract:
  Filter driver to adapt the SectorSize of USB Mass Storage devices to effectively
  be 512 bytes.  Design to work with up to 8 kbyte sector size.


  Based on NULL filter driver -- boilerplate code -- from NTDDK.

Author:

    ervinp (original boiler plate)
	mitchd (sctrsize)

Environment:

    Kernel mode

Revision History:


--*/

#include <WDM.H>

#include "filter.h"


#ifdef ALLOC_PRAGMA
        #pragma alloc_text(PAGE, SCTRSZ_PnP)
        #pragma alloc_text(PAGE, GetDeviceCapabilities)
        #ifdef HANDLE_DEVICE_USAGE
            #pragma alloc_text(PAGE, SCTRSZ_DeviceUsageNotification)
        #endif // HANDLE_DEVICE_USAGE
#endif

            
NTSTATUS SCTRSZ_PnP(struct DEVICE_EXTENSION *devExt, PIRP irp)
/*++

Routine Description:

    Dispatch routine for PnP IRPs (MajorFunction == IRP_MJ_PNP)

Arguments:

    devExt - device extension for the targetted device object
    irp - IO Request Packet

Return Value:

    NT status code

--*/
{
    PIO_STACK_LOCATION irpSp;
    NTSTATUS status = STATUS_SUCCESS;
    BOOLEAN completeIrpHere = FALSE;
    BOOLEAN justReturnStatus = FALSE;

    PAGED_CODE();

    irpSp = IoGetCurrentIrpStackLocation(irp);

    DBGOUT(("SCTRSZ_PnP, minorFunc = %d ", (ULONG)irpSp->MinorFunction)); 

    switch (irpSp->MinorFunction){

    case IRP_MN_START_DEVICE:
        DBGOUT(("START_DEVICE")); 

        devExt->state = STATE_STARTING;

        /*
         *  First, send the START_DEVICE irp down the stack
         *  synchronously to start the lower stack.
         *  We cannot do anything with our device object
         *  before propagating the START_DEVICE this way.
         */
        IoCopyCurrentIrpStackLocationToNext(irp);
        status = CallNextDriverSync(devExt, irp);

        if (NT_SUCCESS(status)){
            /*
             *  Now that the lower stack is started,
             *  do any initialization required by this device object.
             */
            status = GetDeviceCapabilities(devExt);
            if (NT_SUCCESS(status)){
                devExt->state = STATE_STARTED;
            }
            else {
                devExt->state = STATE_START_FAILED;
            }
        }
        else {
            devExt->state = STATE_START_FAILED;
        }
        completeIrpHere = TRUE;
        break;

    case IRP_MN_QUERY_STOP_DEVICE:
    case IRP_MN_QUERY_REMOVE_DEVICE:
#ifdef HANDLE_DEVICE_USAGE
        //
        // Need to fail these IRPs if a paging, hibernation, or crashdump
        // file is currently open on this device
        //
        if(    devExt->pagingFileCount      != 0
            || devExt->hibernationFileCount != 0
            || devExt->crashdumpFileCount   != 0 )
        {
            // Fail the IRP
            DBGOUT(( "Failing QUERY_(STOP,REMOVE)_DEVICE request b/c "
                     "paging, hiber, or crashdump file is present on device." ));
            status = STATUS_UNSUCCESSFUL;
            completeIrpHere = TRUE;
        }
        else
        {
            // We'll just pass this IRP down the driver stack.  But
            // first, must change the IRP's status to STATUS_SUCCESS
            // (default is STATUS_NOT_SUPPORTED)
            irp->IoStatus.Status = STATUS_SUCCESS;
        }
#else
        /*
         *  We will pass this IRP down the driver stack.
         *  However, we need to change the default status
         *  from STATUS_NOT_SUPPORTED to STATUS_SUCCESS.
         */
        irp->IoStatus.Status = STATUS_SUCCESS;
#endif

        break;

    case IRP_MN_STOP_DEVICE:
        if (devExt->state == STATE_SUSPENDED){
            status = STATUS_DEVICE_POWER_FAILURE;
            completeIrpHere = TRUE;
        }
        else {
            /*
             *  Only set state to STOPPED if the device was
             *  previously started successfully.
             */
            if (devExt->state == STATE_STARTED){
                devExt->state = STATE_STOPPED;
            }
        }
        break;
  

    case IRP_MN_SURPRISE_REMOVAL:
        DBGOUT(("SURPRISE_REMOVAL")); 

        /*
         *  We will pass this IRP down the driver stack.
         *  However, we need to change the default status
         *  from STATUS_NOT_SUPPORTED to STATUS_SUCCESS.
         */
        irp->IoStatus.Status = STATUS_SUCCESS;

        /*
         *  For now just set the STATE_REMOVING state so that
         *  we don't do any more IO.  We are guaranteed to get
         *  IRP_MN_REMOVE_DEVICE soon; we'll do the rest of
         *  the remove processing there.
         */
        devExt->state = STATE_REMOVING;

        break;

    case IRP_MN_REMOVE_DEVICE:
        /*
         *  Check the current state to guard against multiple
         *  REMOVE_DEVICE IRPs.
         */
        DBGOUT(("REMOVE_DEVICE")); 
        if (devExt->state != STATE_REMOVED){

            devExt->state = STATE_REMOVED;

            /*
             *  Send the REMOVE IRP down the stack asynchronously.
             *  Do not synchronize sending down the REMOVE_DEVICE
             *  IRP, because the REMOVE_DEVICE IRP must be sent
             *  down and completed all the way back up to the sender
             *  before we continue.
             */
            IoCopyCurrentIrpStackLocationToNext(irp);
            status = IoCallDriver(devExt->topDevObj, irp);
            justReturnStatus = TRUE;

            DBGOUT(("REMOVE_DEVICE - waiting for %d irps to complete...",
                    devExt->pendingActionCount));  

            /*
             *  We must for all outstanding IO to complete before
             *  completing the REMOVE_DEVICE IRP.
             *
             *  First do an extra decrement on the pendingActionCount.
             *  This will cause pendingActionCount to eventually
             *  go to -1 once all asynchronous actions on this
             *  device object are complete.
             *  Then wait on the event that gets set when the
             *  pendingActionCount actually reaches -1.
             */
            DecrementPendingActionCount(devExt);
            KeWaitForSingleObject(  &devExt->removeEvent,
                                    Executive,      // wait reason
                                    KernelMode,
                                    FALSE,          // not alertable
                                    NULL );         // no timeout

            DBGOUT(("REMOVE_DEVICE - ... DONE waiting. ")); 

			/*
			 *	Terminate the SrbThreadRoutine
			 *
			 */
			DBGOUT(("Terminate the SrbThreadRoutine, waiting ... ")); 
			KeSetEvent(&devExt->ext.TerminateThreadEvent, IO_NO_INCREMENT, FALSE);
			KeWaitForSingleObject(
				devExt->ext.ThreadObj,
				Executive,
				KernelMode,
				FALSE,
				NULL);
			DBGOUT(("SrbThreadRoutine has terminated"));
			ObDereferenceObject(devExt->ext.ThreadObj);

#ifdef HANDLE_DEVICE_USAGE
            /*
             *  If we locked-down certain paged code sections earlier
             *  because of this device, then need to unlock them now
             *  (before calling IoDeleteDevice)
             */
            if( NULL != devExt->pagingPathUnlockHandle )
            {
                DBGOUT(( "UNLOCKing some driver code (non-pageable) (b/c paging path)" ));
                MmUnlockPagableImageSection( devExt->pagingPathUnlockHandle );
                devExt->pagingPathUnlockHandle = NULL;
            }

            if( NULL != devExt->initUnlockHandle )
            {
                DBGOUT(( "UNLOCKing some driver code (non-pageable) (b/c init conditions)" ));
                MmUnlockPagableImageSection( devExt->initUnlockHandle );
                devExt->initUnlockHandle = NULL;
            }
#endif // HANDLE_DEVICE_USAGE

            /*
             *  Detach our device object from the lower 
             *  device object stack.
             */
            IoDetachDevice(devExt->topDevObj);

            /*
             *  Delete our device object.
             *  This will also delete the associated device extension.
             */
            IoDeleteDevice(devExt->filterDevObj);
        }
        break;

#ifdef HANDLE_DEVICE_USAGE
    case IRP_MN_DEVICE_USAGE_NOTIFICATION:


        //
        // Make sure the Type of this UsageNotification is one that we handle
        //
        if(    irpSp->Parameters.UsageNotification.Type != DeviceUsageTypePaging
            && irpSp->Parameters.UsageNotification.Type != DeviceUsageTypeHibernation
            && irpSp->Parameters.UsageNotification.Type != DeviceUsageTypeDumpFile )
        {
            break; // out of the big switch statement (and just forward this IRP)
        }

        status = SCTRSZ_DeviceUsageNotification(devExt, irp);
        justReturnStatus = TRUE;
        break;
#endif // HANDLE_DEVICE_USAGE

#ifdef HANDLE_DEVICE_USAGE
    case IRP_MN_QUERY_PNP_DEVICE_STATE:
        //
        // If a paging, hibernation, or crashdump file is currently open
        // on this device, must set NOT_DISABLEABLE flag in DeviceState
        //
        if(    devExt->pagingFileCount      != 0
            || devExt->hibernationFileCount != 0
            || devExt->crashdumpFileCount   != 0  )
        {
            // Mark the device as not disableable
            PPNP_DEVICE_STATE pDeviceState;
            pDeviceState = (PPNP_DEVICE_STATE) &irp->IoStatus.Information;
            *pDeviceState |= PNP_DEVICE_NOT_DISABLEABLE;
        }

        //
        // We _did_ handle this IRP (as best we could), so set IRP's
        // status to STATUS_SUCCESS (default is STATUS_NOT_SUPPORTED)
        // before passing it down the driver stack
        //
        irp->IoStatus.Status = STATUS_SUCCESS;

        break;
#endif // HANDLE_DEVICE_USAGE

    case IRP_MN_QUERY_DEVICE_RELATIONS:
    default:
        break;


    }

    if (justReturnStatus){
        /*
         *  We've already sent this IRP down the stack.
         */
    }
    else if (completeIrpHere){
        irp->IoStatus.Status = status;
        IoCompleteRequest(irp, IO_NO_INCREMENT);
    }
    else {
        IoCopyCurrentIrpStackLocationToNext(irp);
        status = IoCallDriver(devExt->topDevObj, irp);
    }

    return status;
}

#ifdef HANDLE_DEVICE_USAGE
NTSTATUS
SCTRSZ_DeviceUsageNotification(struct DEVICE_EXTENSION *devExt, PIRP irp)
{
    PIO_STACK_LOCATION irpSp;
    NTSTATUS status;
    BOOLEAN fSetPagable = FALSE;  // whether we set the PAGABLE bit
                                  /// before we passed-on this IRP

    PAGED_CODE();

    irpSp = IoGetCurrentIrpStackLocation(irp);

    DBGOUT(( "DEVICE_USAGE_NOTIFICATION (Type==%d , InPath==%d)"
             , irpSp->Parameters.UsageNotification.Type
             , irpSp->Parameters.UsageNotification.InPath
          ));
    DBGOUT(( "    [devExt=0x%08X fltrDevObj=0x%08X]", devExt, devExt->filterDevObj ));

    //
    // Wait on the paging path event (to prevent several instances of
    // this IRP from being processed at once)
    //
    status = KeWaitForSingleObject( &devExt->deviceUsageNotificationEvent
                                    , Executive    // wait reason
                                    , KernelMode
                                    , FALSE        // not alertable
                                    , NULL         // no timeout
                                  );


    /*
     * IMPORTANT NOTE: When to modify our DO_POWER_PAGABLE bit depends
     * on whether it needs to be set or cleared.  If the IRP indicates
     * our PAGABLE bit should be set, then we must set it _before_
     * forwarding the IRP down the driver stack (and possibly clear it
     * afterward, if lower drivers fail the IRP).  But if the IRP
     * indicates that our PAGABLE bit should be cleared, then we must
     * first forward the IRP to lower drivers, and then clear our bit
     * only if the lower drivers return STATUS_SUCCESS.
     */

    //
    // If removing last paging file from this device...
    //
    if(    irpSp->Parameters.UsageNotification.Type == DeviceUsageTypePaging
        && !irpSp->Parameters.UsageNotification.InPath
        && devExt->pagingFileCount == 1       )
    {
        //
        // Set DO_POWER_PAGABLE bit (if it was set at startup).
        // If lower drivers fail this IRP, we'll clear it later.
        //
        DBGOUT(( "Removing last paging file..." ));

        if( devExt->initialFlags & DO_POWER_PAGABLE )
        {
            DBGOUT(( "...so RE-setting PAGABLE bit" ));
            devExt->filterDevObj->Flags |= DO_POWER_PAGABLE;
            fSetPagable = TRUE;
        }
        else
        {
            DBGOUT(( "...but PAGABLE bit wasn't set initially, so not setting it now." ));
        }

    }


    //
    // Forward the irp synchronously
    //
    IoCopyCurrentIrpStackLocationToNext( irp );
    status = CallNextDriverSync( devExt, irp );


    //
    // Now deal with the failure and success cases.
    //
    if( ! NT_SUCCESS(status) )
    {
        //
        // Lower drivers failed the IRP, so _undo_ any changes we
        // made before passing-on the IRP to those drivers.
        //
        if( fSetPagable )
        {
            DBGOUT(( "IRP was failed, so UN-setting PAGABLE bit" ));
            devExt->filterDevObj->Flags &= ~DO_POWER_PAGABLE;
        }
    }
    else
    {
        //
        // Lower drivers returned SUCCESS, so we can do everything
        // that must be done in response to this IRP...
        //

        switch( irpSp->Parameters.UsageNotification.Type )
        {
        case DeviceUsageTypeHibernation:

            // Adjust counter
            IoAdjustPagingPathCount( &devExt->hibernationFileCount,
                                     irpSp->Parameters.UsageNotification.InPath );
            DBGOUT(( "Num. Hibernation files is now %d", devExt->hibernationFileCount ));
            ASSERT( devExt->hibernationFileCount >= 0 );
            break;

        case DeviceUsageTypeDumpFile:
            
            // Adjust counter
            IoAdjustPagingPathCount( &devExt->crashdumpFileCount,
                                     irpSp->Parameters.UsageNotification.InPath );
            DBGOUT(( "Num. Crashdump files is now %d", devExt->crashdumpFileCount ));
            ASSERT( devExt->crashdumpFileCount >= 0 );
            break;

        case DeviceUsageTypePaging:
            
            // Adjust counter
            IoAdjustPagingPathCount( &devExt->pagingFileCount,
                                     irpSp->Parameters.UsageNotification.InPath );
            DBGOUT(( "Num. Paging files is now %d", devExt->pagingFileCount ));
            ASSERT( devExt->pagingFileCount >= 0 );

            //
            // If we've just switched between being pageable<->nonpageable...
            //
            if(    irpSp->Parameters.UsageNotification.InPath
                && devExt->pagingFileCount == 1  )
            {
                //
                // Just added a paging file, so clear the PAGABLE
                // flag, and lock-down the code for all routines
                // that could be called at IRQL >= DISPATCH_LEVEL
                // (so that they're _non-pageable_).
                //
                DBGOUT(( "Just added first paging file..." ));
                DBGOUT(( "...so clearing PAGABLE bit" ));
                devExt->filterDevObj->Flags &= ~DO_POWER_PAGABLE;

                DBGOUT(( "LOCKing some driver code (non-pageable) (b/c paging path)" ));
                devExt->pagingPathUnlockHandle = MmLockPagableCodeSection( SCTRSZ_Power );  // some func that's inside the code section that we want to lock
                ASSERT( NULL != devExt->pagingPathUnlockHandle );
            }
            else if (    !irpSp->Parameters.UsageNotification.InPath
                      && devExt->pagingFileCount == 0  )
            {
                //
                // Just removed the last paging file, but we
                // already set the PAGABLE flag (if necessary)
                // before forwarding IRP, so just remove the
                // _paging-path_ lock from this driver. (NOTE:
                // initial-condition lock might still be in place,
                // but that's what we want.)
                //
                DBGOUT(( "UNLOCKing some driver code (pageable) (b/c paging path)" ));
                ASSERT( NULL != devExt->pagingPathUnlockHandle );
                MmUnlockPagableImageSection( devExt->pagingPathUnlockHandle );
                devExt->pagingPathUnlockHandle = NULL;
            }
            break;

        default:
            ASSERT( FALSE );  // should never get here (b/c checked for invalid Type earlier)

        } //END: switch on Type of special-file


        //
        // Invalidate state, so that certain flags will get updated
        //
        IoInvalidateDeviceState( devExt->physicalDevObj );

    }//END: handling of irp success/failure cases


    //
    // Set event so that the next DEVICE_USAGE_NOTIFICATION IRP that
    // comes along can be processed.
    //
    KeSetEvent( &devExt->deviceUsageNotificationEvent
                , IO_NO_INCREMENT
                , FALSE
              );

    //
    // Complete the irp
    //
    IoCompleteRequest( irp, IO_NO_INCREMENT );
    return status;
}
#endif // HANDLE_DEVICE_USAGE



NTSTATUS GetDeviceCapabilities(struct DEVICE_EXTENSION *devExt)
/*++

Routine Description:

    Function retrieves the DEVICE_CAPABILITIES descriptor from the device

Arguments:

    devExt - device extension for targetted device object

Return Value:

    NT status code

--*/
{
    NTSTATUS status;
    PIRP irp;

    PAGED_CODE();

    irp = IoAllocateIrp(devExt->topDevObj->StackSize, FALSE);
    if (irp){
        PIO_STACK_LOCATION nextSp = IoGetNextIrpStackLocation(irp);

        // must initialize DeviceCapabilities before sending...
        RtlZeroMemory(  &devExt->deviceCapabilities, 
                        sizeof(DEVICE_CAPABILITIES));
        devExt->deviceCapabilities.Size = sizeof(DEVICE_CAPABILITIES);
        devExt->deviceCapabilities.Version = 1;

        // setup irp stack location...
        nextSp->MajorFunction = IRP_MJ_PNP;
        nextSp->MinorFunction = IRP_MN_QUERY_CAPABILITIES;
        nextSp->Parameters.DeviceCapabilities.Capabilities = 
                        &devExt->deviceCapabilities;

        /*
         *  For any IRP you create, you must set the default status
         *  to STATUS_NOT_SUPPORTED before sending it.
         */
        irp->IoStatus.Status = STATUS_NOT_SUPPORTED;

        status = CallNextDriverSync(devExt, irp);

        IoFreeIrp(irp);
    }
    else {
        status = STATUS_INSUFFICIENT_RESOURCES;
    }

    ASSERT(NT_SUCCESS(status));
    return status;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\win2000\drivers\sctrsz\sctrsz.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    sctrsz.h

Abstract: Filter driver to change the sector size. based on ervinp's boiler plate
code in the DDK.

Author:

    mitchd

Environment:

    Kernel mode

Revision History:


--*/

//
//	Extension to the boiler plate devision extension
//
typedef struct _SCTRSZ_EXT
{
	

} SCTRSZ_EXT, *PSCTRSZ_EXT;

#include "filter.h"

//
//	Declaration of filter routine
//


NSTATUS
SCTRSZ_Ioctl(
	devExt,
	Irp,
	&passIrpDown);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\win2000\drivers\sctrsz\filter.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    filter.h

Abstract:
  Filter driver to adapt the SectorSize of USB Mass Storage devices to effectively
  be 512 bytes.  Design to work with up to 8 kbyte sector size.


  Based on NULL filter driver -- boilerplate code -- from NTDDK.

Author:

    ervinp (original boiler plate)
	mitchd (sctrsize)

Environment:

    Kernel mode

Revision History:


--*/


//
// If this driver is going to be a filter in the paging, hibernation, or dump
// file path, then HANDLE_DEVICE_USAGE should be defined.
//
// #define HANDLE_DEVICE_USAGE 1

enum deviceState {
        STATE_INITIALIZED,
        STATE_STARTING,
        STATE_STARTED,
        STATE_START_FAILED,
        STATE_STOPPED,  // implies device was previously started successfully
        STATE_SUSPENDED,
        STATE_REMOVING,
        STATE_REMOVED
};


/*
 *  Memory tag for memory blocks allocated by this driver
 *  (used in ExAllocatePoolWithTag() call).
 *  This DWORD appears as "Filt" in a little-endian memory byte dump.
 *
 *  NOTE:  PLEASE change this value to be unique for your driver!  Otherwise,
 *  your allocations will show up with every other driver that uses 'tliF' as
 *  an allocation tag.
 *  
 */
#define FILTER_TAG (ULONG)'tliF'

#undef ExAllocatePool
#define ExAllocatePool(type, size) \
            ExAllocatePoolWithTag (type, size, FILTER_TAG)


/*
 *	SCTRSIZE specific extension to the boiler-plate
 *	filter device extension.
 *
 */
typedef struct _SCTRSZ_EXT
{
	ULONG BlockSize;		//Block Size Reported by Device
	ULONG BlockCount;		//Block Count Reported by Device
	ULONG BlocksPerSector;	//Sectors (512 byte blocks) per Block
	ULONG SectorCount;		//Sector Count
	PVOID BlockBuffer;		//Allocated during read capacity.
	PVOID BlockBufferMdl;	//Mdl to describe the block buffer
	BOOLEAN CapacityKnown;	//TRUE if we have seen READ_CAPACITY go by yet.
	
	PETHREAD ThreadObj;		//Thread object for pumping the IrpQueue.
	KEVENT NewIrpEvent;				//Event to signal that a new IRP has been queued
	KEVENT TerminateThreadEvent;	//Event to signal termination of the thread.

	LIST_ENTRY IrpQueue;	//IrpQueue
	KSPIN_LOCK IrpQueueLock;//Spin for IrpQueue

} SCTRSZ_EXT, *PSCTRSZ_EXT;


/*
 *	Structure for breaking up transfers into three:
 *	Initial (Partial) Block
 *	Whole Blocks
 *	Final (Partial) Block
 */
typedef struct _SCRTSZ_BLOCK_DESC
{
	ULONG FirstSector;		//First sector requested in CDB
	ULONG InitialBlock;		//The initial (partial) block we need to get.
	ULONG FirstWholeBlock;	//The first while block we need.
	ULONG FinalBlock;		//The final (partial) block we need.
	USHORT InitialSectorOffset;		//Offset of first sector requested in initial block
	USHORT InitialBlockSectorCount;	//Number of sectors need from the Initial Block
	USHORT WholeBlockCount;			//Number of whole blocks needed.
	USHORT FinalBlockSectorCount;	//Number of sectors needed from the Final Block
} SCRTSZ_BLOCK_DESC, *PSCRTSZ_BLOCK_DESC;


#define DEVICE_EXTENSION_SIGNATURE 'rtlF'

typedef struct DEVICE_EXTENSION {

    /*
     *  Memory signature of a device extension, for debugging.
     */
    ULONG signature;

    /*
     *  Plug-and-play state of this device object.
     */
    enum deviceState state;

    /*
     *  The device object that this filter driver created.
     */
    PDEVICE_OBJECT filterDevObj;

    /*
     *  The device object created by the next lower driver.
     */
    PDEVICE_OBJECT physicalDevObj;

    /*
     *  The device object at the top of the stack that we attached to.
     *  This is often (but not always) the same as physicalDevObj.
     */
    PDEVICE_OBJECT topDevObj;

    /*
     *  deviceCapabilities includes a
     *  table mapping system power states to device power states.
     */
    DEVICE_CAPABILITIES deviceCapabilities;

    /*
     *  pendingActionCount is used to keep track of outstanding actions.
     *  removeEvent is used to wait until all pending actions are
     *  completed before complete the REMOVE_DEVICE IRP and let the
     *  driver get unloaded.
     */
    LONG pendingActionCount;
    KEVENT removeEvent;

#ifdef HANDLE_DEVICE_USAGE
    /*
     *  Keep track of the number of paging/hibernation/crashdump
     *  files that are opened on this device.
     */
    ULONG  pagingFileCount, hibernationFileCount, crashdumpFileCount;
    KEVENT deviceUsageNotificationEvent;
    PVOID  pagingPathUnlockHandle;  /* handle to lock certain code as non-pageable */

    /*
     *  Also, might need to lock certain driver code as non-pageable, based on
     *  initial conditions (as opposed to paging-file considerations).
     */
    PVOID  initUnlockHandle;
    ULONG  initialFlags;
#endif // HANDLE_DEVICE_USAGE 

	/*
	 *	All the SCTRSZ specific fields.
	 *
	 */
	SCTRSZ_EXT ext;
};




#if DBG
    #define DBGOUT(params_in_parentheses)   \
        {                                               \
            DbgPrint("'SCTRSIZE> "); \
            DbgPrint params_in_parentheses; \
            DbgPrint("\n"); \
        }
    #define TRAP(msg)  \
        {   \
            DBGOUT(("TRAP at file %s, line %d: '%s'.", __FILE__, __LINE__, msg)); \
            DbgBreakPoint(); \
        }
#else
    #define DBGOUT(params_in_parentheses)
    #define TRAP(msg)
#endif


/*
 *  Function externs
 */
NTSTATUS    DriverEntry(IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING RegistryPath);
NTSTATUS    SCTRSZ_AddDevice(IN PDRIVER_OBJECT driverObj, IN PDEVICE_OBJECT pdo);
VOID        SCTRSZ_DriverUnload(IN PDRIVER_OBJECT DriverObject);
NTSTATUS    SCTRSZ_Dispatch(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);
NTSTATUS    SCTRSZ_PnP(struct DEVICE_EXTENSION *devExt, PIRP irp);
#ifdef HANDLE_DEVICE_USAGE
NTSTATUS    SCTRSZ_DeviceUsageNotification(struct DEVICE_EXTENSION *devExt, PIRP irp);
#endif // HANDLE_DEVICE_USAGE 
NTSTATUS    SCTRSZ_Power(struct DEVICE_EXTENSION *devExt, PIRP irp);
NTSTATUS    SCTRSZ_PowerComplete(IN PDEVICE_OBJECT devObj, IN PIRP irp, IN PVOID context);
NTSTATUS    GetDeviceCapabilities(struct DEVICE_EXTENSION *devExt);
NTSTATUS    CallNextDriverSync(struct DEVICE_EXTENSION *devExt, PIRP irp);
NTSTATUS    CallDriverSync(PDEVICE_OBJECT devObj, PIRP irp);
NTSTATUS    CallDriverSyncCompletion(IN PDEVICE_OBJECT devObj, IN PIRP irp, IN PVOID Context);
VOID        IncrementPendingActionCount(struct DEVICE_EXTENSION *devExt);
VOID        DecrementPendingActionCount(struct DEVICE_EXTENSION *devExt);
NTSTATUS    QueryDeviceKey(HANDLE Handle, PWCHAR ValueNameString, PVOID Data, ULONG DataLength);
//VOID        RegistryAccessSample(struct DEVICE_EXTENSION *devExt, PDEVICE_OBJECT devObj);

/*
 *	Function externs not in original boiler plate
 */
NTSTATUS	SCTRSZ_Ioctl(struct DEVICE_EXTENSION *devExt, PIRP irp, BOOLEAN *passIrpDown);
NTSTATUS	SCTRSZ_Scsi(struct DEVICE_EXTENSION *DevExt, PIRP Irp, BOOLEAN *PassIrpDown);
NTSTATUS	SCTRSZ_ScsiExecute(struct DEVICE_EXTENSION *DevExt, PIRP Irp);
VOID		SCTRSZ_SrbThreadRoutine(PVOID StartContext);
PIRP		SCTRSZ_DequeueIrp(struct DEVICE_EXTENSION *DevExt);
VOID		SCTRSZ_ScsiReadCapacity(struct DEVICE_EXTENSION *DevExt, PIRP Irp);
VOID		SCTRSZ_ScsiRead(struct DEVICE_EXTENSION *DevExt, PIRP Irp);
VOID		SCTRSZ_ScsiWrite(struct DEVICE_EXTENSION *DevExt, PIRP Irp);
VOID		SCTRSZ_BreakUpRequest(union _CDB *Cdb, PSCRTSZ_BLOCK_DESC BlockDesc, UCHAR BlocksPerSector);
VOID		SCTRSZ_ScsiCancel(PDEVICE_OBJECT DeviceObject, PIRP Irp);


/*
 *	A little utility function
 */
_inline long ChangeEndian(long x)
{	
	return(	(((x) >> 24) & 0x000000FFL) |
			(((x) >>  8) & 0x0000FF00L) |
			(((x) <<  8) & 0x00FF0000L) |
			(((x) << 24) & 0xFF000000L)
		);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\ditest\ditest.h ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    di.cpp

Abstract:

    Header file for testing port of DirectInput to XBOX.
	
Environment:

	XAPI

Revision History:

    05-10-00 : created by mitchd

--*/

// Hack! DbgPrint is much nicer than OutputDebugString so JonT exported it from xapi.lib
// (as DebugPrint) but the prototype isn't in the public headers...
extern "C"
{
	ULONG
	DebugPrint(
		PCHAR Format,
		...
		);
}


class CDIDevice;
class CDITest;

CDITest *g_pDITest;

#define VERIFY_SUCCESS(_hr_, _expression_)\
_hr_ = (_expression_);\
if(FAILED(_hr_))\
{\
	DebugPrint("%s failed with code 0x%0.8x\n", #_expression_, _hr_);\
	DebugBreak();\
}

class CDITest
{
 public:
	CDITest();
	HRESULT			CreateDI8();
	void			ReleaseDI8(BOOL fCleanup);
	HRESULT			NotifyRemove(BOOL fTurnOn);
	HRESULT			EnumAndNotifyInsertion(BOOL fTurnOn);
	void			AddDevice(CDIDevice *pNewDevice);
	void			RemoveDevice(CDIDevice *pDoomedDevice, BOOL fIfNotControlDevice);
	CDIDevice		*FindDevice(REFGUID guidInstance);
	IDirectInput8	*GetDI8() {return m_pDI8;}
	void			BasicTest();
 private:
	void			UsesDi8() {if(!m_pDI8){DebugPrint("ERROR: m_pDI8 is NULL, and member function requires DI8!\n");DebugBreak();}}
	IDirectInput8	*m_pDI8;
	CDIDevice		*m_pControlDevice;
	CDIDevice		*m_pOtherDevices;
	BOOL			m_fRemoveNotifyOn;
	BOOL			m_fInsertNotifyOn;
};


class CDIDevice
{
public:
	CDIDevice(REFGUID guidInstance);
	~CDIDevice();
	HRESULT	CreateDID8(IDirectInput8 *pDI);
	void	ReleaseDID8();

	//
	//	Maps to DID8 commands
	//
	void Acquire(BOOL fAutoPoll);
	void Unacquire();
	void Poll();
	HRESULT GetDeviceState(DIXBOXCONTROLLERSTATE *pDiXBoxControllerState);
	void GetDeviceInfo(); //Call GetDeviceInfo and dumps the info to the debugger.
	void GetCapabilities(); //Call GetDeviceCapabilities and dump the info to the debugger.

	//
	//	Data
	//
	IDirectInputDevice8	*m_pDID8;
	GUID				m_guidInstance;
	CDIDevice			*m_pNextDevice;
	CDIDevice			*m_pPreviousDevice;
	BOOL				m_fAcquired;
};


//
//	Declare enumeration call back
//
#define ENUM_DEVICE_REMOVE_REF ((PVOID)0)
#define ENUM_DEVICE_INSERT_REF ((PVOID)1)

BOOL CALLBACK
EnumDevicesCallback(
	LPCDIDEVICEINSTANCE lpddi,
	LPVOID pvRef
	);

/*++
 Implementation of new and delete in-terms of LocalAlloc and FreeAlloc,
 we should revisit where this memory comes from
--*/

void * _cdecl operator new(size_t size)
{
	if(0==size) size = 1;
	return LocalAlloc(LMEM_FIXED, size);
}

void _cdecl operator delete(void *pvMem)
{
	if(pvMem) LocalFree(pvMem);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\win2000\drivers\sctrsz\sctrsz.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    sctrsz.c

Abstract:
  Filter driver to adapt the SectorSize of USB Mass Storage devices to effectively
  be 512 bytes.  Design to work with up to 8 kbyte sector size.

  All of the new implementation not taken from the boiler plate.
  

Author:

    mitchd

Environment:

    Kernel mode

Revision History:


--*/
#include <WDM.H>
#include <ntddscsi.h>
#include <scsi.h>
#include "filter.h"

//
//	Forward Declaration
//
char *ScsiOpName(UCHAR SciOp);

NTSTATUS SCTRSZ_Ioctl(struct DEVICE_EXTENSION *DevExt, PIRP Irp, BOOLEAN *PassIrpDown)
{
    PIO_STACK_LOCATION irpSp;
    UCHAR majorCode;
	ULONG ioControlCode;
	PSCSI_PASS_THROUGH srbControl;
    NTSTATUS status = STATUS_SUCCESS;

	*PassIrpDown = TRUE;
    irpSp = IoGetCurrentIrpStackLocation(Irp);
	ioControlCode = irpSp->Parameters.DeviceIoControl.IoControlCode;
	
	//DBGOUT(("IOCTL code = 0x%0.8x\n", ioControlCode));

	//
	//	We want to process IOCTL_SCSI_PASS_THROUGH
	//
	if( (IOCTL_SCSI_PASS_THROUGH == ioControlCode) || (IOCTL_SCSI_PASS_THROUGH_DIRECT == ioControlCode))
	{
		DBGOUT(("IOCTL_SCSI_PASS_THROUGH\n"));
		srbControl = Irp->AssociatedIrp.SystemBuffer;
		majorCode = !srbControl->DataIn ? IRP_MJ_WRITE : IRP_MJ_READ;
		if (srbControl->DataTransferLength == 0)
		{
			majorCode = IRP_MJ_FLUSH_BUFFERS;
		}
		switch(majorCode)
		{
			case IRP_MJ_FLUSH_BUFFERS:
				DBGOUT(("IRP_MJ_FLUSH_BUFFERS\n"));
				break;
			case IRP_MJ_READ:
				DBGOUT(("IRP_MJ_READ\n"));
				break;
			case IRP_MJ_WRITE:
				DBGOUT(("IRP_MJ_READ\n"));
				break;
		}
    }

	//
	//	As long as passIrpDown is true, the status doesn't matter
	//
	return status;
}


NTSTATUS SCTRSZ_Scsi(struct DEVICE_EXTENSION *DevExt, PIRP Irp, BOOLEAN *PassIrpDown)
{
	
    PIO_STACK_LOCATION irpSp;
	PSCSI_REQUEST_BLOCK srb;
    UCHAR minorFunc;
	UCHAR *funcName;
	NTSTATUS status = STATUS_SUCCESS;

	irpSp = IoGetCurrentIrpStackLocation(Irp);
	minorFunc = irpSp->MinorFunction;
    srb = irpSp->Parameters.Scsi.Srb;
	switch(srb->Function)
	{
		case SRB_FUNCTION_EXECUTE_SCSI:
			funcName = "SRB_FUNCTION_EXECUTE_SCSI";
			// Defer to the ScsiExecute Filter routine
			*PassIrpDown = FALSE;
			return SCTRSZ_ScsiExecute(DevExt, Irp);
		case SRB_FUNCTION_CLAIM_DEVICE:
			funcName = "SRB_FUNCTION_CLAIM_DEVICE";
			break;
		case SRB_FUNCTION_IO_CONTROL:
			funcName = "SRB_FUNCTION_IO_CONTROL";
			break;
		case SRB_FUNCTION_RECEIVE_EVENT:
			funcName = "SRB_FUNCTION_RECEIVE_EVENT";
			break;
		case SRB_FUNCTION_RELEASE_QUEUE:
			funcName = "SRB_FUNCTION_RELEASE_QUEUE";
			break;
		case SRB_FUNCTION_ATTACH_DEVICE:
			funcName = "SRB_FUNCTION_ATTACH_DEVICE";
			break;
		case SRB_FUNCTION_RELEASE_DEVICE:
			funcName = "SRB_FUNCTION_RELEASE_DEVICE";
			break;
		case SRB_FUNCTION_SHUTDOWN:
			funcName = "SRB_FUNCTION_SHUTDOWN";
			break;
		case SRB_FUNCTION_FLUSH:
			funcName = "SRB_FUNCTION_FLUSH";
			break;
		case SRB_FUNCTION_ABORT_COMMAND:
			funcName = "SRB_FUNCTION_ABORT_COMMAND";
			break;
		case SRB_FUNCTION_RELEASE_RECOVERY:
			funcName = "SRB_FUNCTION_RELEASE_RECOVERY";
			break;
		case SRB_FUNCTION_RESET_BUS:
			funcName = "SRB_FUNCTION_RESET_BUS";
			break;
		case SRB_FUNCTION_RESET_DEVICE:
			funcName = "SRB_FUNCTION_RESET_DEVICE";
			break;
		case SRB_FUNCTION_TERMINATE_IO:
			funcName = "SRB_FUNCTION_TERMINATE_IO";
			break;
		case SRB_FUNCTION_FLUSH_QUEUE:
			funcName = "SRB_FUNCTION_FLUSH_QUEUE";
			break;
		case SRB_FUNCTION_REMOVE_DEVICE:
			funcName = "SRB_FUNCTION_REMOVE_DEVICE";
			break;
		case SRB_FUNCTION_WMI:
			funcName = "SRB_FUNCTION_WMI";
			break;
		case SRB_FUNCTION_LOCK_QUEUE:
			funcName = "SRB_FUNCTION_LOCK_QUEUE";
			break;
		case SRB_FUNCTION_UNLOCK_QUEUE:
			funcName = "SRB_FUNCTION_UNLOCK_QUEUE";
			break;
		default:
			funcName = "SRB_FUNCTION_*** Unknown";
	}
	DBGOUT(("SCSI REQUEST = %s\n", funcName));
	//
	//	As long as passIrpDown is true, the status doesn't matter
	//
	return status;
}



NTSTATUS SCTRSZ_ScsiExecute(struct DEVICE_EXTENSION *DevExt, PIRP Irp)
{
    PIO_STACK_LOCATION irpSp;
	PSCSI_REQUEST_BLOCK srb;
	NTSTATUS status = STATUS_SUCCESS;
	KIRQL	oldIrql;
	LIST_ENTRY prevTail;
	
	irpSp = IoGetCurrentIrpStackLocation(Irp);
    srb = irpSp->Parameters.Scsi.Srb;
	switch(srb->Cdb[0])
	{
		case SCSIOP_READ_CAPACITY:
		case SCSIOP_READ:
		case SCSIOP_WRITE:
		{
			KeAcquireSpinLock(&DevExt->ext.IrpQueueLock, &oldIrql);
			
			//
			//	Set the cancel routine
			//
			IoSetCancelRoutine(Irp, SCTRSZ_ScsiCancel);

			//
			//	Check if the IRP has been canceled
			//
			if(Irp->Cancel)
			{
				DBGOUT(("SCTRSZ_ScsiExecute: Irp was cancelled"));
				//
				//	Clear the cancel routine
				//
				IoSetCancelRoutine(Irp, NULL);
				//
				//	set the status as cancelled.
				//
				status = STATUS_CANCELLED;	
				Irp->IoStatus.Status = status;
			} else
			{
				//
				//	We are going to queue, so increment our pending action count.
				//
				IncrementPendingActionCount(DevExt);
				//
				//	Mark the IRP Pending
				//
				//DBGOUT(("SCTRSZ_ScsiExecute: Queuing IRP"));
				IoMarkIrpPending(Irp);
				status = STATUS_PENDING;	
				//
				//	Insert the IRP in the queue.
				//
				InsertTailList(&DevExt->ext.IrpQueue, &Irp->Tail.Overlay.ListEntry);
				//
				//	Set the synchronization event to wake up the SrbThreadRoutine
				//	if it is blocked.
				//
				KeSetEvent(&DevExt->ext.NewIrpEvent, IO_NO_INCREMENT, FALSE);
			}
			KeReleaseSpinLock(&DevExt->ext.IrpQueueLock, oldIrql);
			//
			//	Complete the IRP here if it was cancelled (We didn't want
			//	to complete the IRP while holding a spin lock.)
			//
			if(STATUS_CANCELLED == status)
			{
				DBGOUT(("SCTRSZ_ScsiExecute: Completing cancelled IRP"));
				IoCompleteRequest(Irp, IO_NO_INCREMENT);
			}
		}
			break;
		default:
			//
			//	Anything we don't filter, just fire and forget.
			//
			IoCopyCurrentIrpStackLocationToNext(Irp);
	        status = IoCallDriver(DevExt->topDevObj, Irp);
	}
	return status;
}

VOID SCTRSZ_ScsiCancel(PDEVICE_OBJECT DeviceObject, PIRP Irp)
{
	KIRQL	oldIrql;
	struct DEVICE_EXTENSION *devExt = (struct DEVICE_EXTENSION *)DeviceObject->DeviceExtension;
	BOOLEAN		found = FALSE;
	PLIST_ENTRY	firstIrpListEntry;
	PLIST_ENTRY	irpListEntry = NULL;

	DBGOUT(("SCTRSZ_ScsiCancel"));
	//
	//	Release the global cancel spinlock
	//
	IoReleaseCancelSpinLock(Irp->CancelIrql);
	//
	//	Get the spinlock protecting our queue
	//
	KeAcquireSpinLock(&devExt->ext.IrpQueueLock, &oldIrql);
	//
	// Rifle through our queue looking for the irp
	// to cancel.
	//
	firstIrpListEntry = RemoveHeadList(&devExt->ext.IrpQueue);
	irpListEntry = firstIrpListEntry;
	if(firstIrpListEntry)
	{
		do
		{
			//
			// check if this is the irp we are looking for
			//
			if(Irp == CONTAINING_RECORD(irpListEntry, IRP, Tail.Overlay.ListEntry))
			{
				found = TRUE;
				//
				//	If this is the first IRP break.
				//
				if(irpListEntry == firstIrpListEntry) break;
			} else
			//
			//	Otherwise, insert the Irp at the tail.
			//
			{
				InsertTailList(&devExt->ext.IrpQueue, irpListEntry);
			}
			//
			//	Get the next irp
			//
			irpListEntry = RemoveHeadList(&devExt->ext.IrpQueue);
		}while(irpListEntry != firstIrpListEntry);
		//
		//	If the irp is not the first irp, but the
		//	first irp back on the head
		if(Irp != CONTAINING_RECORD(firstIrpListEntry, IRP, Tail.Overlay.ListEntry))
		{
			InsertHeadList(&devExt->ext.IrpQueue, irpListEntry);
		}
	}
	KeReleaseSpinLock(&devExt->ext.IrpQueueLock, oldIrql);
	//
	//	If the IRP was on the queue, complete it
	//	as cancelled
	//
	if(found)
	{
		DBGOUT(("Cancelling Irp"));
		Irp->IoStatus.Status = STATUS_CANCELLED;
		IoCompleteRequest(Irp, IO_NO_INCREMENT);
		DecrementPendingActionCount(devExt);
	}
}

VOID SCTRSZ_SrbThreadRoutine(PVOID StartContext)
{
	struct DEVICE_EXTENSION *devExt = (struct DEVICE_EXTENSION *)StartContext;
	PIO_STACK_LOCATION irpSp;
	PSCSI_REQUEST_BLOCK srb;

	PVOID WaitEvents[2];
	NTSTATUS status;
	WaitEvents[0] = &devExt->ext.NewIrpEvent;
	WaitEvents[1] = &devExt->ext.TerminateThreadEvent;
	//
	//	Loop until WaitEvents[1] is set.
	//
	do
	{
		status = KeWaitForMultipleObjects(2, WaitEvents, WaitAny, Executive, KernelMode, FALSE, NULL, NULL);
		ASSERT(NT_SUCCESS(status));
		if(0 == status)
		//
		//	There should be a new IRP, work on it.
		//
		{
			PIRP irp;
			//
			//	Keep pulling IRPS off the queue and processing them,
			//	until there are none left.
			//
			while(NULL != (irp = SCTRSZ_DequeueIrp(devExt)))
			{
				irpSp = IoGetCurrentIrpStackLocation(irp);
				srb = irpSp->Parameters.Scsi.Srb;
				DBGOUT(("Executing %s\n", ScsiOpName(srb->Cdb[0])));
				switch(srb->Cdb[0])
				{
					case SCSIOP_READ_CAPACITY:
						SCTRSZ_ScsiReadCapacity(devExt, irp);
						break;
					case SCSIOP_READ:
						SCTRSZ_ScsiRead(devExt, irp);
						break;
					case SCSIOP_WRITE:
						SCTRSZ_ScsiWrite(devExt, irp);
						break;
					default:
						ASSERT(FALSE);
				}
				DecrementPendingActionCount(devExt);
			} 
		} 
	} while(1 != status); // Thread should terminate
	//
	//	if the READ_CAPACITY routine allocated a block buffer
	//	delete it.
	//
	if(devExt->ext.BlockBuffer)
	{
		IoFreeMdl(devExt->ext.BlockBufferMdl);
		ExFreePool(devExt->ext.BlockBuffer);
		devExt->ext.BlockBufferMdl = NULL;
		devExt->ext.BlockBuffer = NULL;
	}
	DBGOUT(("About to terminate thread"));
	PsTerminateSystemThread(STATUS_SUCCESS);
	return;
}

PIRP SCTRSZ_DequeueIrp(struct DEVICE_EXTENSION *DevExt)
{
	KIRQL		oldIrql;
	PLIST_ENTRY irpListEntry;
	PIRP		irp = NULL;
	BOOLEAN		repeat;
	do
	{
		repeat = FALSE;
		KeAcquireSpinLock(&DevExt->ext.IrpQueueLock, &oldIrql);
		if(IsListEmpty(&DevExt->ext.IrpQueue))
		{
			irpListEntry = NULL;
		} else
		{
			irpListEntry = RemoveHeadList(&DevExt->ext.IrpQueue);
		}
		KeReleaseSpinLock(&DevExt->ext.IrpQueueLock, oldIrql);
		if(irpListEntry)
		{
			irp = CONTAINING_RECORD(irpListEntry, IRP, Tail.Overlay.ListEntry);
			//
			//	Clear the cancel routine
			//
			IoSetCancelRoutine(irp, NULL);
			//
			//	Check if it needs cancelled
			//
			if(irp->Cancel)
			{
				DBGOUT(("SCTRSZ_DequeueIrp: Irp was cancelled"));
				irp->IoStatus.Status = STATUS_CANCELLED;
				IoCompleteRequest(irp, IO_NO_INCREMENT);
				DecrementPendingActionCount(DevExt);
				irp = NULL;
				repeat = TRUE;
			}
		}
	} while(repeat);
	return irp;
}

VOID SCTRSZ_ScsiReadCapacity(struct DEVICE_EXTENSION *DevExt, PIRP Irp)
{
    PIO_STACK_LOCATION irpSp;
	PSCSI_REQUEST_BLOCK srb;
	NTSTATUS status = STATUS_SUCCESS;
	PREAD_CAPACITY_DATA readCapacityData;
	
	//
	//	If we do not know the capacity get it.
	//
	if(!DevExt->ext.CapacityKnown)
	{
		//
		// Forward the irp synchronously
		//
		IoCopyCurrentIrpStackLocationToNext( Irp );
		status = CallNextDriverSync( DevExt, Irp );
	
		if(NT_SUCCESS(status))
		{
			irpSp = IoGetCurrentIrpStackLocation(Irp);
			srb = irpSp->Parameters.Scsi.Srb;
			readCapacityData = (PREAD_CAPACITY_DATA)srb->DataBuffer;
			DevExt->ext.BlockCount = ChangeEndian(readCapacityData->LogicalBlockAddress);
			DevExt->ext.BlockSize = ChangeEndian(readCapacityData->BytesPerBlock);
			DevExt->ext.BlocksPerSector = (DevExt->ext.BlockSize/512);
			DevExt->ext.SectorCount = DevExt->ext.BlocksPerSector * DevExt->ext.BlockCount;
			DevExt->ext.BlockBuffer = ExAllocatePool(NonPagedPool, DevExt->ext.BlockSize);
			if(DevExt->ext.BlockBuffer)
			{
				DevExt->ext.CapacityKnown = TRUE;
				DBGOUT(("\n  BlockSize = %d\n  BlockCount = %d\n  BlocksPerSector = %d\n SectorCount = %d\n",
					DevExt->ext.BlockSize,
					DevExt->ext.BlockCount,
					DevExt->ext.BlocksPerSector,
					DevExt->ext.SectorCount));
				DevExt->ext.BlockBufferMdl = 
				IoAllocateMdl(DevExt->ext.BlockBuffer, DevExt->ext.BlockSize, FALSE, FALSE, NULL);
				if(DevExt->ext.BlockBufferMdl)
				{
					MmBuildMdlForNonPagedPool(DevExt->ext.BlockBufferMdl);
				} else
				{
					ExFreePool(DevExt->ext.BlockBuffer);
					DevExt->ext.BlockBuffer = NULL;
				}
			}
			//	
			//	Even if the BlockBuffer was allocated, it could have been
			//	free, if the attempt allocate a MDL failed.
			//
			if(NULL == DevExt->ext.BlockBuffer)
			{
				srb->ScsiStatus = SRB_STATUS_ERROR;
				Irp->IoStatus.Status = STATUS_NO_MEMORY;
			}

		}
	} else
	//
	//	We knew the capacity, so don't send it down.
	//
	{
		irpSp = IoGetCurrentIrpStackLocation(Irp);
		srb = irpSp->Parameters.Scsi.Srb;
	}
	//
	//	We ought to know the capacity now, so fill everything out
	//
	if(DevExt->ext.CapacityKnown)
	{
		readCapacityData = (PREAD_CAPACITY_DATA)srb->DataBuffer;
		readCapacityData->BytesPerBlock = ChangeEndian(512);
		readCapacityData->LogicalBlockAddress = ChangeEndian(DevExt->ext.SectorCount);
		/*
		DBGOUT(("LogicalAddress = %d, BytesPerBlock = %d\n",
					ChangeEndian(readCapacityData->LogicalBlockAddress),
					ChangeEndian(readCapacityData->BytesPerBlock)));
		*/
		Irp->IoStatus.Status = STATUS_SUCCESS;
		Irp->IoStatus.Information = sizeof(READ_CAPACITY_DATA);
		srb->SrbStatus = SRB_STATUS_SUCCESS;
	}
	//DBGOUT(("Completing read capacity request"));
	IoCompleteRequest(Irp, IO_NO_INCREMENT);
	return;
}

VOID SCTRSZ_ScsiRead(struct DEVICE_EXTENSION *DevExt, PIRP Irp)
{
	PIO_STACK_LOCATION irpSp;
	PSCSI_REQUEST_BLOCK srb;
	PCDB cdb;
	SCRTSZ_BLOCK_DESC blockDesc;
	ULONG blockCopySize = 0;
	PVOID blockCopyStart = 0;
	ULONG bytesTransfered = 0;
	UCHAR savedCdb[10];
	PMDL originalMdl;
	PMDL partialMdl;
	NTSTATUS status = STATUS_SUCCESS;
	

	//
	//	Original data buffer
	//
	PCHAR dataBuffer;
	ULONG dataTransferLength;
	PCHAR dataVa;
	ULONG dataLength;
	
	//
	//	Get the CDB and start working on next stack location
	//
	IoCopyCurrentIrpStackLocationToNext(Irp);
	irpSp = IoGetNextIrpStackLocation(Irp);
	srb = irpSp->Parameters.Scsi.Srb;
	cdb = (PCDB)srb->Cdb;
	RtlCopyMemory( (PVOID)savedCdb, (PVOID)srb->Cdb, 10);
	originalMdl = Irp->MdlAddress;

	//
	//	If the capacity of the device is not
	//	known yet, we cannot complete this request.
	//
	if(!DevExt->ext.CapacityKnown)
	{
		srb->SrbStatus = SRB_STATUS_BUSY;
		Irp->IoStatus.Status = STATUS_DEVICE_NOT_READY;
		DBGOUT(("SCTRSZ_ScsiRead: Failing because we don't capacity yet."));
		IoCompleteRequest(Irp, IO_NO_INCREMENT);
		return;
	}
	//
	//	Break up the request
	//
	SCTRSZ_BreakUpRequest(cdb, &blockDesc, (UCHAR)DevExt->ext.BlocksPerSector);

	dataBuffer = (PCHAR)srb->DataBuffer;
	dataTransferLength = srb->DataTransferLength;
	dataVa = MmGetSystemAddressForMdlSafe(originalMdl, NormalPagePriority);
	if(!dataVa)
	{
		status = STATUS_NO_MEMORY;
		goto read_failure;
	}
	dataLength = MmGetMdlByteCount(originalMdl);
	
	
	//
	//	Perform InitialBlock transfer
	//
	if(blockDesc.InitialBlockSectorCount)
	{
		//DBGOUT(("InitialBlockSectorCount = %d", blockDesc.InitialBlockSectorCount));
		//
		//	Alter the IRP to read into our buffer
		//
		Irp->MdlAddress = DevExt->ext.BlockBufferMdl;
		//
		//	Alter the SRB to read into our buffer
		//
		srb->DataBuffer = DevExt->ext.BlockBuffer;
		srb->DataTransferLength = DevExt->ext.BlockSize;
		//
		//	Alter the cdb to read the block that we need
		//
		*((PULONG)&cdb->CDB10.LogicalBlockByte0) = ChangeEndian(blockDesc.InitialBlock);
		//
		//	Get one block.
		//
		cdb->CDB10.TransferBlocksLsb = 1;
		cdb->CDB10.TransferBlocksMsb = 0;
		//
		//	Send the IRP down synchronously
		//
		status = CallNextDriverSync(DevExt, Irp);
		IoCopyCurrentIrpStackLocationToNext(Irp);
		if(!NT_SUCCESS(status)) goto read_failure;
		//
		//	Copy the initial sectors into the uses buffer.
		//  (512 is the size of a sector, always!)
		blockCopySize = 512*(ULONG)blockDesc.InitialBlockSectorCount;
		blockCopyStart = (PVOID)(((PCHAR)DevExt->ext.BlockBuffer) + 512*blockDesc.InitialSectorOffset);
		RtlCopyMemory((PVOID)dataVa,  blockCopyStart, blockCopySize);
		bytesTransfered += blockCopySize;
	}

	//
	//	Perform whole block transfer
	//
	if(blockDesc.WholeBlockCount)
	{
		//DBGOUT(("WholeBlockCount = %d", blockDesc.WholeBlockCount));
	
		srb->DataBuffer = dataBuffer + blockCopySize;
		srb->DataTransferLength = blockDesc.WholeBlockCount*DevExt->ext.BlockSize;
		
		//
		//	Build a partialMdl for transfer
		//
		partialMdl = IoAllocateMdl(srb->DataBuffer, srb->DataTransferLength, FALSE, FALSE, NULL);
		if(!partialMdl) goto read_failure;
		IoBuildPartialMdl(originalMdl, partialMdl, srb->DataBuffer, srb->DataTransferLength);
		Irp->MdlAddress = partialMdl;
		
		//
		//	Alter the cdb to read the block that we need
		//
		*((PULONG)&cdb->CDB10.LogicalBlockByte0) = ChangeEndian(blockDesc.FirstWholeBlock);
		cdb->CDB10.TransferBlocksLsb = (UCHAR)(blockDesc.WholeBlockCount & 0x00FF);
		cdb->CDB10.TransferBlocksMsb = (UCHAR)((blockDesc.WholeBlockCount & 0xFF00) >> 8);
		//
		//	Send the IRP down synchronously
		//
		status = CallNextDriverSync(DevExt, Irp);
		IoCopyCurrentIrpStackLocationToNext(Irp);
		IoFreeMdl(partialMdl);
		if(!NT_SUCCESS(status)) goto read_failure;
		//
		//	No copy necessary we wrote into the buffer passed from above
		//
		bytesTransfered += srb->DataTransferLength;
	}

	//
	//	Perform the final block transfersss
	//
	if(blockDesc.FinalBlockSectorCount)
	{
		//DBGOUT(("FinalBlockSectorCount = %d", blockDesc.FinalBlockSectorCount));
		//
		//	Alter the IRP to read into our buffer
		//
		Irp->MdlAddress = DevExt->ext.BlockBufferMdl;
		//
		//	Alter the SRB to read into our buffer
		//
		srb->DataBuffer = DevExt->ext.BlockBuffer;
		srb->DataTransferLength = DevExt->ext.BlockSize;
		//
		//	Alter the cdb to read the block that we need
		//
		*((PULONG)&cdb->CDB10.LogicalBlockByte0) = ChangeEndian(blockDesc.FinalBlock);
		//
		//	Get one block.
		//
		cdb->CDB10.TransferBlocksLsb = 1;
		cdb->CDB10.TransferBlocksMsb = 0;
		//
		//	Send the IRP down synchronously
		//
		status = CallNextDriverSync(DevExt, Irp);
		if(!NT_SUCCESS(status)) goto read_failure;
		//
		//	Copy the initial sectors into the user buffer.
		//  (512 is the size of a sector, always!)
		blockCopySize = 512*(ULONG)blockDesc.FinalBlockSectorCount;
		blockCopyStart = (PVOID)(dataVa + (dataLength - blockCopySize));
		/*
		DBGOUT(("blockCopyStart(0x%0.8x), blockBuffer(0x%0.8x), blockCopySize(%d)", 
			blockCopyStart, DevExt->ext.BlockBuffer, blockCopySize));
		DBGOUT(("dataVa = 0x%0.8x", dataVa));
		DBGOUT(("dataLength = %d", dataLength));
		*/
		RtlCopyMemory(blockCopyStart, DevExt->ext.BlockBuffer, blockCopySize);
		bytesTransfered += blockCopySize;
	}

read_failure:
	//
	//	Restore IRP
	//
	Irp->MdlAddress = originalMdl;
	srb->DataBuffer = (PVOID)dataBuffer;
	ASSERT(bytesTransfered == dataTransferLength);
	srb->DataTransferLength = bytesTransfered;
	RtlCopyMemory((PVOID)srb->Cdb, (PVOID)savedCdb, 10);
	Irp->IoStatus.Information = bytesTransfered;
	//DBGOUT(("Completing Read IRP"));
	IoCompleteRequest(Irp, IO_NO_INCREMENT);
}

VOID SCTRSZ_ScsiWrite(struct DEVICE_EXTENSION *DevExt, PIRP Irp)
{
	PIO_STACK_LOCATION irpSp;
	PSCSI_REQUEST_BLOCK srb;
	PCDB cdb;
	UCHAR savedCdb[10];
	SCRTSZ_BLOCK_DESC blockDesc;
	ULONG blockCopySize = 0;
	PVOID blockCopyStart = 0;
	ULONG bytesTransfered = 0;
	PMDL originalMdl;
	PMDL partialMdl;
	NTSTATUS status = STATUS_SUCCESS;

	//
	//	Original data buffer
	//
	PCHAR dataBuffer;
	ULONG dataTransferLength;
	PCHAR dataVa;
	ULONG dataLength;
	
	
	//
	//	Get the CDB and start working on next stack location
	//
	IoCopyCurrentIrpStackLocationToNext(Irp);
	irpSp = IoGetNextIrpStackLocation(Irp);
	srb = irpSp->Parameters.Scsi.Srb;
	cdb = (PCDB)srb->Cdb;
	RtlCopyMemory( (PVOID)savedCdb, (PVOID)srb->Cdb, 10);
	originalMdl = Irp->MdlAddress;
	//
	//	If the capacity of the device is not
	//	known yet, we cannot complete this request.
	//
	if(!DevExt->ext.CapacityKnown)
	{
		srb->SrbStatus = SRB_STATUS_BUSY;
		Irp->IoStatus.Status = STATUS_DEVICE_NOT_READY;
		IoCompleteRequest(Irp, IO_NO_INCREMENT);
		return;
	}
	//
	//	Break up the request
	//
	SCTRSZ_BreakUpRequest(cdb, &blockDesc, (UCHAR)DevExt->ext.BlocksPerSector);

	dataBuffer = (PCHAR)srb->DataBuffer;
	dataTransferLength = srb->DataTransferLength;
	dataVa = MmGetSystemAddressForMdlSafe(originalMdl, NormalPagePriority);
	if(!dataVa)
	{
		status = STATUS_NO_MEMORY;
		goto write_failure;
	}
	dataLength = MmGetMdlByteCount(originalMdl);
	
	//
	//	Perform InitialBlock transfer
	//
	if(blockDesc.InitialBlockSectorCount)
	{
		//DBGOUT(("InitialBlockSectorCount = %d", blockDesc.InitialBlockSectorCount));
		//
		//	Alter the IRP to read into our buffer
		//
		Irp->MdlAddress = DevExt->ext.BlockBufferMdl;
		//
		//	Alter the SRB to read into our buffer
		//
		srb->DataBuffer = DevExt->ext.BlockBuffer;
		srb->DataTransferLength = DevExt->ext.BlockSize;
		srb->SrbFlags &= ~SRB_FLAGS_DATA_OUT;
		srb->SrbFlags |= SRB_FLAGS_DATA_IN;
		//
		//	Alter the cdb to read the block that we need
		//
		*((PULONG)&cdb->CDB10.LogicalBlockByte0) = ChangeEndian(blockDesc.InitialBlock);
		//
		//	Get one block.
		//
		cdb->CDB10.OperationCode = SCSIOP_READ;
		cdb->CDB10.TransferBlocksLsb = 1;
		cdb->CDB10.TransferBlocksMsb = 0;
		//
		//	Send the IRP down synchronously
		//
		status = CallNextDriverSync(DevExt, Irp);
		IoCopyCurrentIrpStackLocationToNext(Irp);
		cdb->CDB10.OperationCode = SCSIOP_WRITE;  //win or lose, better switch it back to write
		srb->SrbFlags &= ~SRB_FLAGS_DATA_IN;
		srb->SrbFlags |= SRB_FLAGS_DATA_OUT;
		if(!NT_SUCCESS(status)) goto write_failure;
		//
		//	Copy the initial sectors over those in the output buffer
		//  (512 is the size of a sector, always!)
		blockCopySize = 512*(ULONG)blockDesc.InitialBlockSectorCount;
		blockCopyStart = (PVOID)(((PCHAR)DevExt->ext.BlockBuffer) + 512*blockDesc.InitialSectorOffset);
		RtlCopyMemory(blockCopyStart, (PVOID)dataVa, blockCopySize);
		//
		//	Write the databack out
		//
		status = CallNextDriverSync(DevExt, Irp);
		IoCopyCurrentIrpStackLocationToNext(Irp);
		if(!NT_SUCCESS(status)) goto write_failure;

		bytesTransfered += blockCopySize;
	}

	//
	//	Perform whole block transfer
	//
	if(blockDesc.WholeBlockCount)
	{
		//DBGOUT(("WholeBlockCount = %d", blockDesc.WholeBlockCount));
		//
		//	Alter the SRB to write from user buffer, but only the section spanning whole blocks.
		//
		srb->DataBuffer = dataBuffer + blockCopySize;
		srb->DataTransferLength = blockDesc.WholeBlockCount*DevExt->ext.BlockSize;
		//
		//	Build a partialMdl for transfer
		//
		partialMdl = IoAllocateMdl(srb->DataBuffer, srb->DataTransferLength, FALSE, FALSE, NULL);
		if(!partialMdl) goto write_failure;
		IoBuildPartialMdl(originalMdl, partialMdl, srb->DataBuffer, srb->DataTransferLength);
		Irp->MdlAddress = partialMdl;
		//
		//	Alter the cdb to read the block that we need
		//
		*((PULONG)&cdb->CDB10.LogicalBlockByte0) = ChangeEndian(blockDesc.FirstWholeBlock);
		cdb->CDB10.TransferBlocksLsb = (UCHAR)(blockDesc.WholeBlockCount & 0x00FF);
		cdb->CDB10.TransferBlocksMsb = (UCHAR)((blockDesc.WholeBlockCount & 0xFF00) >> 8);
		//
		//	Send the IRP down synchronously
		//
		status = CallNextDriverSync(DevExt, Irp);
		IoCopyCurrentIrpStackLocationToNext(Irp);
		if(!NT_SUCCESS(status)) goto write_failure;
		//
		//	No copy necessary we wrote into the buffer passed from above
		//
		bytesTransfered += srb->DataTransferLength;
	}

	//
	//	Perform the final block transfersss
	//
	if(blockDesc.FinalBlockSectorCount)
	{
		//DBGOUT(("FinalBlockSectorCount = %d", blockDesc.FinalBlockSectorCount));
		//
		//	Alter the IRP to read into our buffer
		//
		Irp->MdlAddress = DevExt->ext.BlockBufferMdl;
		//
		//	Alter the SRB to read into our buffer
		//
		srb->DataBuffer = DevExt->ext.BlockBuffer;
		srb->DataTransferLength = DevExt->ext.BlockSize;
		//
		//	Alter the cdb to read the block that we need
		//
		cdb->CDB10.OperationCode = SCSIOP_READ;
		srb->SrbFlags &= ~SRB_FLAGS_DATA_OUT;
		srb->SrbFlags |= SRB_FLAGS_DATA_IN;
		*((PULONG)&cdb->CDB10.LogicalBlockByte0) = ChangeEndian(blockDesc.FinalBlock);
		//
		//	Get one block.
		//
		cdb->CDB10.TransferBlocksLsb = 1;
		cdb->CDB10.TransferBlocksMsb = 0;
		//
		//	Send the IRP down synchronously
		//
		status = CallNextDriverSync(DevExt, Irp);
		IoCopyCurrentIrpStackLocationToNext(Irp);
		cdb->CDB10.OperationCode = SCSIOP_WRITE;  //win or lose, better switch it back to write
		srb->SrbFlags &= ~SRB_FLAGS_DATA_IN;
		srb->SrbFlags |= SRB_FLAGS_DATA_OUT;
		if(!NT_SUCCESS(status)) goto write_failure;
		//
		//	Copy the final sectors from the user buffer.
		//  (512 is the size of a sector, always!)
		blockCopySize = 512*(ULONG)blockDesc.FinalBlockSectorCount;
		blockCopyStart = (PVOID)(dataVa + (dataLength - blockCopySize));
		RtlCopyMemory(DevExt->ext.BlockBuffer, blockCopyStart, blockCopySize);
		//
		//	Write the data back out
		//
		status = CallNextDriverSync(DevExt, Irp);
		if(!NT_SUCCESS(status)) goto write_failure;
		bytesTransfered += blockCopySize;
	}

write_failure:
	//
	//	Restore IRP
	//
	Irp->MdlAddress = originalMdl;
	srb->DataBuffer = (PVOID)dataBuffer;
	ASSERT(bytesTransfered == dataTransferLength);
	srb->DataTransferLength = bytesTransfered;
	RtlCopyMemory((PVOID)srb->Cdb, (PVOID)savedCdb, 10);
	Irp->IoStatus.Information = bytesTransfered;
	//DBGOUT(("Completing Write IRP"));
	IoCompleteRequest(Irp, IO_NO_INCREMENT);
}


void SCTRSZ_BreakUpRequest(PCDB Cdb, PSCRTSZ_BLOCK_DESC BlockDesc, UCHAR BlocksPerSector)
/*++
	Look at a read or write, break it into three
	sections:
		1) Initial partial block, if there is one.
		2) Zero or more whole blocks.
		3) Final partial block, if there is one.
--*/
{
	USHORT SectorCount;
	//
	//	Get the first sector. It is stored as big endian.
	//	We might as well use our ChangeEndian function.
	//
	BlockDesc->FirstSector = 0;
	BlockDesc->FirstSector = ChangeEndian(*((long *)&Cdb->CDB10.LogicalBlockByte0));
	SectorCount = (((USHORT)Cdb->CDB10.TransferBlocksMsb) << 8) + Cdb->CDB10.TransferBlocksLsb;
	
	//
	//	Calculate begining of initial block, and the number of sectors
	//	needed from it.  (note that DevExt->ext.BlocksPerSector is results
	//	instead of 0.)
	//
	BlockDesc->InitialBlock = BlockDesc->FirstSector/BlocksPerSector;
	BlockDesc->InitialSectorOffset = (USHORT)(BlockDesc->FirstSector%BlocksPerSector);
	if(BlockDesc->InitialSectorOffset)
	{
		BlockDesc->InitialBlockSectorCount = (USHORT)(BlocksPerSector - BlockDesc->InitialSectorOffset);
		if(BlockDesc->InitialBlockSectorCount > SectorCount)
					BlockDesc->InitialBlockSectorCount = SectorCount;
	} else
	{
		BlockDesc->InitialBlockSectorCount = 0;
	}
	
	
	//
	//	Calculate First whole block and fix InitialBlockSectorCount
	//	in the case that an initial block is not needed.
	//
	if(0 == BlockDesc->InitialBlockSectorCount)
	{
		BlockDesc->FirstWholeBlock = BlockDesc->InitialBlock;
	} else
	{
		BlockDesc->FirstWholeBlock = BlockDesc->InitialBlock+1;
	}
	BlockDesc->WholeBlockCount = (SectorCount - BlockDesc->InitialBlockSectorCount)/BlocksPerSector;
	
	//
	//	Calculate the final block.
	//
	BlockDesc->FinalBlockSectorCount = (SectorCount - BlockDesc->InitialBlockSectorCount)%BlocksPerSector;
	BlockDesc->FinalBlock = BlockDesc->FirstWholeBlock + BlockDesc->WholeBlockCount;
	//
	//	Dump the blocks
	//
	
	DBGOUT(("FirstSector             %d", BlockDesc->FirstSector));
	DBGOUT(("InitialSectorOffset     %d", BlockDesc->InitialSectorOffset));
	DBGOUT(("InitialBlock            %d", BlockDesc->InitialBlock));
	DBGOUT(("InitialBlockSectorCount %d", BlockDesc->InitialBlockSectorCount));
	DBGOUT(("FirstWholeBlock         %d", BlockDesc->FirstWholeBlock));
	DBGOUT(("WholeBlockCount         %d", BlockDesc->WholeBlockCount));
	DBGOUT(("FinalBlock              %d", BlockDesc->FinalBlock));
	DBGOUT(("FinalBlockSectorCount   %d", BlockDesc->FinalBlockSectorCount));
	
}

char *ScsiOpName(UCHAR SciOp)
{
	UCHAR *scsiopName = NULL;
	switch(SciOp)
	{
		case SCSIOP_TEST_UNIT_READY:
			scsiopName = "SCSIOP_TEST_UNIT_READY";
			break;
		case SCSIOP_REZERO_UNIT:
			scsiopName = "SCSIOP_REZERO_UNIT";
			break;
		//case SCSIOP_REWIND: same as SCSIOP_REZERO_UNIT
		//	scsiopName = "SCSIOP_REWIND";
		//	break;
		case SCSIOP_REQUEST_BLOCK_ADDR:
			scsiopName = "SCSIOP_REQUEST_BLOCK_ADDR";
			break;
		case SCSIOP_REQUEST_SENSE:
			scsiopName = "SCSIOP_REQUEST_SENSE";
			break;
		case SCSIOP_FORMAT_UNIT:
			scsiopName = "SCSIOP_FORMAT_UNIT";
			break;
		case SCSIOP_READ_BLOCK_LIMITS:
			scsiopName = "SCSIOP_READ_BLOCK_LIMITS";
			break;
		case SCSIOP_REASSIGN_BLOCKS:
			scsiopName = "SCSIOP_REASSIGN_BLOCKS";
			break;
		//case SCSIOP_INIT_ELEMENT_STATUS: same as SCSIOP_REASSIGN_BLOCKS
		//	scsiopName = "SCSIOP_INIT_ELEMENT_STATUS";
		//	break;
		case SCSIOP_READ6:
			scsiopName = "SCSIOP_READ6";
			break;
		//case SCSIOP_RECEIVE: same as SCSIOP_READ6
		//	scsiopName = "SCSIOP_RECEIVE";
		//	break;
		case SCSIOP_WRITE6:
			scsiopName = "SCSIOP_WRITE6";
			break;
		//case SCSIOP_PRINT: same as SCSIOP_WRITE6
		//	scsiopName = "SCSIOP_PRINT";
		//	break;
		//case SCSIOP_SEND: same as SCSIOP_WRITE6
		//	scsiopName = "SCSIOP_SEND";
		//	break;
		case SCSIOP_SEEK6:
			scsiopName = "SCSIOP_SEEK6";
			break;
		//case SCSIOP_TRACK_SELECT: same as SCSIOP_SEEK6
		//	scsiopName = "SCSIOP_TRACK_SELECT";
		//	break;
		//case SCSIOP_SLEW_PRINT: same as SCSIOP_SEEK6
		//	scsiopName = "SCSIOP_SLEW_PRINT";
		//	break;
		case SCSIOP_SEEK_BLOCK:
			scsiopName = "SCSIOP_SEEK_BLOCK";
			break;
		case SCSIOP_PARTITION:
			scsiopName = "SCSIOP_PARTITION";
			break;
		case SCSIOP_READ_REVERSE:
			scsiopName = "SCSIOP_READ_REVERSE";
			break;
		case SCSIOP_WRITE_FILEMARKS:
			scsiopName = "SCSIOP_WRITE_FILEMARKS";
			break;
		//case SCSIOP_FLUSH_BUFFER: same as SCSIOP_WRITE_FILEMARKS
		//	scsiopName = "SCSIOP_FLUSH_BUFFER";
		//	break;
		case SCSIOP_SPACE:
			scsiopName = "SCSIOP_SPACE";
			break;
		case SCSIOP_INQUIRY:
			scsiopName = "SCSIOP_INQUIRY";
			break;
		case SCSIOP_VERIFY6:
			scsiopName = "SCSIOP_VERIFY6";
			break;
		case SCSIOP_RECOVER_BUF_DATA:
			scsiopName = "SCSIOP_RECOVER_BUF_DATA";
			break;
		case SCSIOP_MODE_SELECT:
			scsiopName = "SCSIOP_MODE_SELECT";
			break;
		case SCSIOP_RESERVE_UNIT:
			scsiopName = "SCSIOP_RESERVE_UNIT";
			break;
		case SCSIOP_RELEASE_UNIT:
			scsiopName = "SCSIOP_RELEASE_UNIT";
			break;
		case SCSIOP_COPY:
			scsiopName = "SCSIOP_COPY";
			break;
		case SCSIOP_ERASE:
			scsiopName = "SCSIOP_ERASE";
			break;
		case SCSIOP_MODE_SENSE:
			scsiopName = "SCSIOP_MODE_SENSE";
			break;
		case SCSIOP_START_STOP_UNIT:
			scsiopName = "SCSIOP_START_STOP_UNIT";
			break;
		//case SCSIOP_STOP_PRINT: same as SCSIOP_START_STOP_UNIT
		//	scsiopName = "SCSIOP_STOP_PRINT";
		//	break;
		//case SCSIOP_LOAD_UNLOAD: same as SCSIOP_START_STOP_UNIT
		//	scsiopName = "SCSIOP_LOAD_UNLOAD";
		//	break;
		case SCSIOP_RECEIVE_DIAGNOSTIC:
			scsiopName = "SCSIOP_RECEIVE_DIAGNOSTIC";
			break;
		case SCSIOP_SEND_DIAGNOSTIC:
			scsiopName = "SCSIOP_SEND_DIAGNOSTIC";
			break;
		case SCSIOP_MEDIUM_REMOVAL:
			scsiopName = "SCSIOP_MEDIUM_REMOVAL";
			break;
		case SCSIOP_READ_FORMATTED_CAPACITY:
			scsiopName = "SCSIOP_READ_FORMATTED_CAPACITY";
			break;
		case SCSIOP_READ_CAPACITY:
			scsiopName = "SCSIOP_READ_CAPACITY";
			break;
		case SCSIOP_READ:
			scsiopName = "SCSIOP_READ";
			break;
		case SCSIOP_WRITE:
			scsiopName = "SCSIOP_WRITE";
			break;
		case SCSIOP_SEEK:
			scsiopName = "SCSIOP_SEEK";
			break;
		//case SCSIOP_LOCATE: same as SCSIOP_SEEK
		//	scsiopName = "SCSIOP_LOCATE";
		//	break;
		//case SCSIOP_POSITION_TO_ELEMENT: same as SCSIOP_SEEK
		//	scsiopName = "SCSIOP_POSITION_TO_ELEMENT";
		//	break;
		case SCSIOP_WRITE_VERIFY:
			scsiopName = "SCSIOP_WRITE_VERIFY";
			break;
		case SCSIOP_VERIFY:
			scsiopName = "SCSIOP_VERIFY";
			break;
		case SCSIOP_SEARCH_DATA_HIGH:
			scsiopName = "SCSIOP_SEARCH_DATA_HIGH";
			break;
		case SCSIOP_SEARCH_DATA_EQUAL:
			scsiopName = "SCSIOP_SEARCH_DATA_EQUAL";
			break;
		case SCSIOP_SEARCH_DATA_LOW:
			scsiopName = "SCSIOP_SEARCH_DATA_LOW";
			break;
		case SCSIOP_SET_LIMITS:
			scsiopName = "SCSIOP_SET_LIMITS";
			break;
		case SCSIOP_READ_POSITION:
			scsiopName = "SCSIOP_READ_POSITION";
			break;
		case SCSIOP_SYNCHRONIZE_CACHE:
			scsiopName = "SCSIOP_SYNCHRONIZE_CACHE";
			break;
		case SCSIOP_COMPARE:
			scsiopName = "SCSIOP_COMPARE";
			break;
		case SCSIOP_COPY_COMPARE:
			scsiopName = "SCSIOP_COPY_COMPARE";
			break;
		case SCSIOP_WRITE_DATA_BUFF:
			scsiopName = "SCSIOP_WRITE_DATA_BUFF";
			break;
		case SCSIOP_READ_DATA_BUFF:
			scsiopName = "SCSIOP_READ_DATA_BUFF";
			break;
		case SCSIOP_CHANGE_DEFINITION:
			scsiopName = "SCSIOP_CHANGE_DEFINITION";
			break;
		case SCSIOP_READ_SUB_CHANNEL:
			scsiopName = "SCSIOP_READ_SUB_CHANNEL";
			break;
		case SCSIOP_READ_TOC:
			scsiopName = "SCSIOP_READ_TOC";
			break;
		case SCSIOP_READ_HEADER:
			scsiopName = "SCSIOP_READ_HEADER";
			break;
		case SCSIOP_PLAY_AUDIO:
			scsiopName = "SCSIOP_PLAY_AUDIO";
			break;
		case SCSIOP_PLAY_AUDIO_MSF:
			scsiopName = "SCSIOP_PLAY_AUDIO_MSF";
			break;
		case SCSIOP_PLAY_TRACK_INDEX:
			scsiopName = "SCSIOP_PLAY_TRACK_INDEX";
			break;
		case SCSIOP_PLAY_TRACK_RELATIVE:
			scsiopName = "SCSIOP_PLAY_TRACK_RELATIVE";
			break;
		case SCSIOP_PAUSE_RESUME:
			scsiopName = "SCSIOP_PAUSE_RESUME";
			break;
		case SCSIOP_LOG_SELECT:
			scsiopName = "SCSIOP_LOG_SELECT";
			break;
		case SCSIOP_LOG_SENSE:
			scsiopName = "SCSIOP_LOG_SENSE";
			break;
		case SCSIOP_STOP_PLAY_SCAN:
			scsiopName = "SCSIOP_STOP_PLAY_SCAN";
			break;
		case SCSIOP_READ_DISK_INFORMATION:
			scsiopName = "SCSIOP_READ_DISK_INFORMATION";
			break;
		case SCSIOP_READ_TRACK_INFORMATION:
			scsiopName = "SCSIOP_READ_TRACK_INFORMATION";
			break;
		case SCSIOP_MODE_SELECT10:
			scsiopName = "SCSIOP_MODE_SELECT10";
			break;
		case SCSIOP_MODE_SENSE10:
			scsiopName = "SCSIOP_MODE_SENSE10";
			break;
		case SCSIOP_REPORT_LUNS:
			scsiopName = "SCSIOP_REPORT_LUNS";
			break;
		case SCSIOP_SEND_KEY:
			scsiopName = "SCSIOP_SEND_KEY";
			break;
		case SCSIOP_REPORT_KEY:
			scsiopName = "SCSIOP_REPORT_KEY";
			break;
		case SCSIOP_MOVE_MEDIUM:
			scsiopName = "SCSIOP_MOVE_MEDIUM";
			break;
		case SCSIOP_LOAD_UNLOAD_SLOT:
			scsiopName = "SCSIOP_LOAD_UNLOAD_SLOT";
			break;
		//case SCSIOP_EXCHANGE_MEDIUM: same as SCSIOP_LOAD_UNLOAD_SLOT
		//	scsiopName = "SCSIOP_EXCHANGE_MEDIUM";
		//	break;
		case SCSIOP_SET_READ_AHEAD:
			scsiopName = "SCSIOP_SET_READ_AHEAD";
			break;
		case SCSIOP_READ_DVD_STRUCTURE:
			scsiopName = "SCSIOP_READ_DVD_STRUCTURE";
			break;
		case SCSIOP_REQUEST_VOL_ELEMENT:
			scsiopName = "SCSIOP_REQUEST_VOL_ELEMENT";
			break;
		case SCSIOP_SEND_VOLUME_TAG:
			scsiopName = "SCSIOP_SEND_VOLUME_TAG";
			break;
		case SCSIOP_READ_ELEMENT_STATUS:
			scsiopName = "SCSIOP_READ_ELEMENT_STATUS";
			break;
		case SCSIOP_READ_CD_MSF:
			scsiopName = "SCSIOP_READ_CD_MSF";
			break;
		case SCSIOP_SCAN_CD:
			scsiopName = "SCSIOP_SCAN_CD";
			break;
		case SCSIOP_PLAY_CD:
			scsiopName = "SCSIOP_PLAY_CD";
			break;
		case SCSIOP_MECHANISM_STATUS:
			scsiopName = "SCSIOP_MECHANISM_STATUS";
			break;
		case SCSIOP_READ_CD:
			scsiopName = "SCSIOP_READ_CD";
			break;
		case SCSIOP_INIT_ELEMENT_RANGE:
			scsiopName = "SCSIOP_INIT_ELEMENT_RANGE";
			break;
		default:
			scsiopName = "SCSIOP_???";
	}
	return scsiopName;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\dll\aggregat.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    di.cpp

Abstract:

    Implementation of Support Class for Aggregation

Environment:

	XAPI

Revision History:

    05-10-00 : created

--*/

#include <objbase.h>
#include <aggregat.h>

STDMETHODIMP CImplInnerUnk::QueryInterface(REFIID riid, LPVOID * ppvObj)
{
	return m_pAggregable->ImplQI(riid, ppvObj);
}
STDMETHODIMP_(ULONG) CImplInnerUnk::AddRef()
{
	return m_pAggregable->ImplAddRef();
}
STDMETHODIMP_(ULONG) CImplInnerUnk::Release()
{
	return m_pAggregable->ImplRelease();
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\dll\aggregat.h ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    di.cpp

Abstract:

    Declaration of Support Classes for Aggregation

Environment:

	XAPI

Revision History:

    05-10-00 : created

--*/

//
//	Class that need to be aggregable inherits CAggregable
//	in addition to the interfaces that they are implementing
//	(This assumes Multiple Inheritance of pure abstract base classes,
//	is the technique for exposing interfaces).
//

class CAggregable
{
	friend class CImplInnerUnk;
	virtual HRESULT ImplQI(REFIID riid, LPVOID * ppvObj) = 0;
	virtual ULONG ImplAddRef() = 0;
	virtual ULONG ImplRelease() = 0;
};


//
// This class provide the vtable for the "real" IUnknown
// when aggregation is in effect.  It delegates to
// the ImplQI, ImplAddRef, and ImplRelease methods
//	pf CAggregable.
//
class CImplInnerUnk : public IUnknown
{
	public:
		STDMETHOD(QueryInterface)(REFIID riid, LPVOID * ppvObj);
		STDMETHOD_(ULONG,AddRef)();
		STDMETHOD_(ULONG,Release)();
		void Init(CAggregable *pInnerObj)
		{
			m_pAggregable = pInnerObj;
		}
	private:
		CAggregable *m_pAggregable;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\ditest\ditest.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    di.cpp

Abstract:

    Main module for testing port of DirectInput to XBOX.
	
	Methods tested:

		DirectInputCreate
		DirectInputCreateEx

		IDirectInput8:
			CreateDevice
			CreateDeviceEx
			EnumDevices
			GetDeviceStatus
		IDirectInputDevice8:
			Acquire
			GetCapabilities
			GetDeviceInfo
			GetDeviceState
			GetProperty
			Poll
			SendDeviceData
			SetProperty
			Unacquire

Environment:

	XAPI

Revision History:

    05-10-00 : created by mitchd

--*/
#include <windows.h>
#include <initguid.h>
#include <dinput.h>

//
//	Hack, I need InputPumpCallbacks temporarily
//
#include <input.h>
#include "ditest.h"



DWORD
WINAPI
main( VOID )
{
    HRESULT hr;
	ULONG	uRef;
	DebugPrint("Welcome to the DI Test Applet: Built on %s at %s\n", __DATE__,__TIME__);
	

	g_pDITest = new CDITest;

	g_pDITest->BasicTest();

	delete g_pDITest;
	g_pDITest = NULL;


	return 0;
}

BOOL CALLBACK
EnumDevicesCallback(
	LPCDIDEVICEINSTANCE lpddi,
	LPVOID pvRef
	)
{
	CDIDevice *pDevice;

	if(pvRef == ENUM_DEVICE_REMOVE_REF)
	{
		pDevice = g_pDITest->FindDevice(lpddi->guidInstance);
		g_pDITest->RemoveDevice(pDevice, FALSE);
		delete pDevice;
	}

	if(pvRef == ENUM_DEVICE_INSERT_REF)
	{
		pDevice = new CDIDevice(lpddi->guidInstance);
		if(pDevice)
		{
			pDevice->CreateDID8(g_pDITest->GetDI8());
			g_pDITest->AddDevice(pDevice);
		}
	}
	return TRUE;
}


CDITest::CDITest():
m_pDI8(NULL), m_pControlDevice(NULL), m_pOtherDevices(NULL), m_fRemoveNotifyOn(FALSE), m_fInsertNotifyOn(FALSE)
{
	
}

HRESULT CDITest::CreateDI8()
{
	HRESULT hr;
	VERIFY_SUCCESS(hr,DirectInput8Create(NULL, DIRECTINPUT_VERSION, IID_IDirectInput8,(PVOID *)&m_pDI8, NULL));
	return hr;
}


void CDITest::ReleaseDI8(BOOL fCleanup)
{
	if(fCleanup)
	{
		EnumAndNotifyInsertion(FALSE);
		NotifyRemove(FALSE);
	}
	if(0 == m_pDI8->Release())
	{
		m_pDI8 = NULL;
	} else
	{
		DebugPrint("Refcount on DI8 didn't go to zero\n");
	}
}
HRESULT CDITest::NotifyRemove(BOOL fTurnOn)
{
	HRESULT hr = E_FAIL;
	
	UsesDi8();

	if(fTurnOn && !m_fRemoveNotifyOn)
	{
		VERIFY_SUCCESS(hr, m_pDI8->EnumDevices(0, EnumDevicesCallback, ENUM_DEVICE_REMOVE_REF, DIEDFL_NOTIFYREMOVE));
		if(SUCCEEDED(hr)) m_fRemoveNotifyOn = TRUE;
	} else if(!fTurnOn && m_fRemoveNotifyOn)
	{
		VERIFY_SUCCESS(hr, m_pDI8->EnumDevices(0, EnumDevicesCallback, ENUM_DEVICE_REMOVE_REF, DIEDFL_HALTNOTIFYREMOVE));
		if(SUCCEEDED(hr)) m_fRemoveNotifyOn = FALSE;
	}
	return hr;
}
	
HRESULT CDITest::EnumAndNotifyInsertion(BOOL fTurnOn)
{
	HRESULT hr = E_FAIL;
	
	UsesDi8();

	if(fTurnOn && !m_fInsertNotifyOn)
	{
		VERIFY_SUCCESS(hr, m_pDI8->EnumDevices(0, EnumDevicesCallback, ENUM_DEVICE_INSERT_REF, DIEDFL_ENUMANDNOTIFYINSERT));
		if(SUCCEEDED(hr)) m_fInsertNotifyOn = TRUE;
	} else if(!fTurnOn && m_fInsertNotifyOn)
	{
		VERIFY_SUCCESS(hr, m_pDI8->EnumDevices(0, EnumDevicesCallback, ENUM_DEVICE_INSERT_REF, DIEDFL_HALTNOTIFYINSERT));
		if(SUCCEEDED(hr)) m_fInsertNotifyOn = FALSE;
	}
	return hr;
}

void CDITest::AddDevice(CDIDevice *pNewDevice)
{
	//
	//	The first device added always becomes the control device
	//
	if(!m_pControlDevice)
	{
		pNewDevice->m_pNextDevice = pNewDevice->m_pPreviousDevice = NULL;
		m_pControlDevice = pNewDevice;
		DebugPrint("New control device detected.\n");
	} else
	{
		//
		//	Add to list of devices
		//
		pNewDevice->m_pPreviousDevice = NULL;
		pNewDevice->m_pNextDevice = m_pOtherDevices;
		m_pOtherDevices = pNewDevice;
	}
}

void CDITest::RemoveDevice(CDIDevice *pDoomedDevice, BOOL fIfNotControlDevice)
{
	if(!pDoomedDevice)
	{
		DebugPrint("Nothing to remove.!\n");
		return;
	}
	//
	// Check to make sure that it is not the control device.
	//
	if(m_pControlDevice == pDoomedDevice)
	{
		m_pControlDevice = NULL;
		DebugPrint("Control Device Removed.\n");
	} else
	{
		if(NULL == pDoomedDevice->m_pPreviousDevice)
		{
			if(pDoomedDevice != m_pOtherDevices)
			{
				DebugPrint("Serious Error in Remove Device\n");
				DebugBreak();
			}
			m_pOtherDevices = pDoomedDevice->m_pNextDevice;
		} else
		{
			pDoomedDevice->m_pPreviousDevice->m_pNextDevice = pDoomedDevice->m_pNextDevice;
		}
		if(pDoomedDevice->m_pNextDevice)
		{
			pDoomedDevice->m_pNextDevice->m_pPreviousDevice = pDoomedDevice->m_pPreviousDevice;
		}
		pDoomedDevice->m_pNextDevice = pDoomedDevice->m_pPreviousDevice = NULL;
	}
}

CDIDevice  *CDITest::FindDevice(REFGUID guidInstance)
{
	if(m_pControlDevice)
	{
		if(guidInstance == m_pControlDevice->m_guidInstance)
		{
			return m_pControlDevice;
		}
	}
	CDIDevice *pDevice = m_pOtherDevices;
	while(pDevice)
	{
		if(pDevice->m_guidInstance == guidInstance) break;
		pDevice = pDevice->m_pNextDevice;
	}
	DebugPrint("CDITest::FindDevice returning 0x%0.8x\n", pDevice);
	return pDevice;
}


void CDITest::BasicTest()
{
	BOOL					fTestOver = FALSE;
	DIXBOXCONTROLLERSTATE	prevControllerState;
	DIXBOXCONTROLLERSTATE	controllerState;
	BOOL					fAutoPoll = TRUE;
	HRESULT					hr;
	//
	//	Try DirectInput8Create
	//
	CreateDI8();
	
	//
	//	Turn on notifications
	//
	hr = NotifyRemove(TRUE);
	if(FAILED(hr))
	{
		DebugPrint("Call to NotifyRemove failed with 0x%0.8x\n", hr);
	}
	hr = EnumAndNotifyInsertion(TRUE);
	if(FAILED(hr))
	{
		DebugPrint("Call to EnumAndNotifyInsertion failed with 0x%0.8x\n", hr);
	}
	
	//
	//	Wait 
	//
	if(!m_pControlDevice)
	{
		DebugPrint("Insert a device to use to control this test . . .\n");
	}
	while(!m_pControlDevice)
	{
		Sleep(16);
		InputPumpCallbacks();
	}

	//
	//	Initialize the control device
	//
	m_pControlDevice->Acquire(fAutoPoll);

	//
	//	OK for the most basic device, 
	//
	DebugPrint("\n");
	DebugPrint("Press Button 0 to adjust the motor speed of the left motor.\n");
	DebugPrint("Press Button 1 to lock\\unlock the speed of the left motor.\n");
	DebugPrint("Press Button 2 to adjust the motor speed of the right motor.\n");
	DebugPrint("Press Button 3 to lock\\unlock the speed of the right motor.\n");
	DebugPrint("Press Start Button to dump state of device.\n");
	DebugPrint("Press Select Button to end test.\n");

	DIDEVICEOBJECTDATA		DeviceObjectData[2];
	DWORD					dwDeviceObjectCount = 2;
	DeviceObjectData[0].dwOfs = DIXROFS_LEFTMOTOR;
	DeviceObjectData[0].dwData = 0;
	DeviceObjectData[1].dwOfs = DIXROFS_RIGHTMOTOR;
	DeviceObjectData[1].dwData = 0;
	
	BOOL fLeftMotorLocked = FALSE;
	BOOL fRightMotorLocked = FALSE;
	BOOL fButton1Down = FALSE;
	BOOL fButton3Down = FALSE;
	BOOL fStartButtonDown = FALSE;
	BOOL fSpeedModified = FALSE;
	
	m_pControlDevice->GetDeviceState(&prevControllerState);
	while(!fTestOver)
	{
		//
		// Pump callbacks
		//
		InputPumpCallbacks();

		if(!m_pControlDevice)
		{
			DebugPrint("Reinsert control device.\n");
			while(!m_pControlDevice)
			{
				Sleep(16);
				InputPumpCallbacks();
			}
			fAutoPoll = !fAutoPoll;
			m_pControlDevice->Acquire(fAutoPoll);
		}
		
		//
		//	Poll device if autopoll is off
		//
		if(!fAutoPoll) m_pControlDevice->Poll();

		//
		//	Right now we still have a lowspeed POC that takes 3 packets, so
		//	sleep 9 ms, rather than 3 ms.
		//
		//	Game would normally be rendering rather than sleeping.
		//
		Sleep(9);

		//
		//	Grab input from control device
		//
		m_pControlDevice->GetDeviceState(&controllerState);
				
		//
		//	Do something interesting
		//
		if(controllerState.rgbAnalogButtons[1] && !fButton1Down)
		{
			//
			//	Level detect on lock button
			fButton1Down = TRUE;
			//
			//
			//	Toggle lock
			//
			fLeftMotorLocked = !fLeftMotorLocked;
			DebugPrint("Left Motor speed is %s\n", fLeftMotorLocked ? "locked." : "not locked");
			
		} else if(0 == controllerState.rgbAnalogButtons[1])
		{
			fButton1Down = FALSE;
		}
		if(controllerState.rgbAnalogButtons[3] && !fButton3Down)
		{
			//
			//	Level detect on lock button
			//
			fButton3Down = TRUE;
			//
			//	Toggle lock
			//
			fRightMotorLocked = !fRightMotorLocked;
			DebugPrint("Right Motor speed is %s\n", fRightMotorLocked ? "locked." : "not locked");
		} else if(0 == controllerState.rgbAnalogButtons[3])
		{
			fButton3Down = FALSE;
		}

		//
		//	Adjust motor speeds
		//
		fSpeedModified = FALSE;
		if(!fLeftMotorLocked)
		{
			if(DeviceObjectData[0].dwData != (DWORD)controllerState.rgbAnalogButtons[0])
			{
				DeviceObjectData[0].dwData = (DWORD)controllerState.rgbAnalogButtons[0];
				fSpeedModified = TRUE;
			}
		}
		if(!fRightMotorLocked)
		{
			DeviceObjectData[1].dwData = (DWORD)controllerState.rgbAnalogButtons[2];
			fSpeedModified = TRUE;
		}
		if(fSpeedModified)
		{
			m_pControlDevice->m_pDID8->SendDeviceData(sizeof(DIDEVICEOBJECTDATA), DeviceObjectData, &dwDeviceObjectCount, 0);
		}
		if(controllerState.bmButtons && !fStartButtonDown)
		{
			fStartButtonDown = TRUE;
			DebugPrint("controllerState.bmButtons = 0x%0.4x\n", controllerState.bmButtons);
			for(int buttonNum=0; buttonNum < 8; buttonNum++)
			{
				DebugPrint("controllerState.rgbAnalogButtons[%d] = %d\n", buttonNum, controllerState.rgbAnalogButtons[buttonNum]);
			}
			DebugPrint("controllerState.wDPAD = 0x%0.4x\n", controllerState.wDPAD);
			DebugPrint("controllerState.wThumb1X = 0x%0.4x\n", controllerState.wThumb1X);
			DebugPrint("controllerState.wThumb1Y = 0x%0.4x\n", controllerState.wThumb1Y);
			DebugPrint("controllerState.wThumb2X = 0x%0.4x\n", controllerState.wThumb2X);
			DebugPrint("controllerState.wThumb2Y = 0x%0.4x\n", controllerState.wThumb2Y);
			DebugPrint("controllerState.wTiltX = 0x%0.4x\n", controllerState.wTiltX);
			DebugPrint("controllerState.wTiltY = 0x%0.4x\n", controllerState.wTiltY);
		} else if(!controllerState.bmButtons)
		{
			fStartButtonDown = FALSE;
		}
		/*
		if(controllerState.bmButtons&2)
		{
			DebugPrint("Terminating the test.\n");
			break;
		}*/
		
		//
		//	Sleep to simulate real work
		//
		Sleep(10);
	}
}

CDIDevice::CDIDevice(REFGUID guidInstance) : 
	m_pDID8(NULL), m_guidInstance(guidInstance),
	m_pNextDevice(NULL), m_pPreviousDevice(NULL),
	m_fAcquired(FALSE)
{

}

CDIDevice::~CDIDevice()
{
	Unacquire();
	ReleaseDID8();
}
HRESULT CDIDevice::CreateDID8(IDirectInput8 *pDI)
{
	HRESULT hr;
	VERIFY_SUCCESS(hr,pDI->CreateDevice(m_guidInstance, &m_pDID8, NULL));
	return hr;
}

void CDIDevice::ReleaseDID8()
{
	ULONG refCount = m_pDID8->Release();
	if(0==refCount)
	{
		m_pDID8 = NULL;
	} else
	{
		DebugPrint("Refcount (%d) for m_pDID7 is not zero!\n", refCount);
		DebugBreak();
	}
}


void CDIDevice::Acquire(BOOL fAutoPoll)
{
	
	if(m_fAcquired) return;
	HRESULT hr;
	DIPROPDWORD dipdw;
	dipdw.diph.dwSize = sizeof(DIPROPDWORD);
	dipdw.diph.dwHeaderSize = sizeof(DIPROPHEADER);
	dipdw.diph.dwObj = 0;
	dipdw.diph.dwHow = DIPH_DEVICE;
	dipdw.dwData = fAutoPoll;
	DebugPrint("Acquiring device with autopoll %s\n", fAutoPoll ? "on" : "off");
	if(m_pDID8)
	{
		VERIFY_SUCCESS(hr, m_pDID8->SetProperty(DIPROP_AUTOPOLL, &dipdw.diph));
		VERIFY_SUCCESS(hr, m_pDID8->Acquire());
	}
	m_fAcquired = TRUE;
}

void CDIDevice::Unacquire()
{
	if(!m_fAcquired) return;
	HRESULT hr = E_FAIL;
	if(m_pDID8)
	{
		VERIFY_SUCCESS(hr, m_pDID8->Unacquire());
	}
	m_fAcquired = FALSE;
}


void CDIDevice::Poll()
{
	HRESULT hr = E_FAIL;
	if(m_pDID8)
	{
		VERIFY_SUCCESS(hr, m_pDID8->Poll());
	}
}
HRESULT CDIDevice::GetDeviceState(
	DIXBOXCONTROLLERSTATE *pDiXBoxControllerState
	)
{
	HRESULT hr = E_FAIL;
	if(m_pDID8)
	{
		VERIFY_SUCCESS(hr, m_pDID8->GetDeviceState(sizeof(DIXBOXCONTROLLERSTATE), pDiXBoxControllerState));
	}
	return hr;
}
void CDIDevice::GetDeviceInfo()
 //Call GetDeviceInfo and dumps the info to the debugger.
{
	HRESULT hr = E_FAIL;
	DIDEVICEINSTANCE deviceInfo;

	if(m_pDID8)
	{
		deviceInfo.dwSize = sizeof(DIDEVICEINSTANCE);
		hr =m_pDID8->GetDeviceInfo(&deviceInfo);
		if(SUCCEEDED(hr))
		{
			DebugPrint("Device Type: %s\n", deviceInfo.dwDevType);
			//DebugPrint("GuidInstance {0x%0.8x,deviceInfo.guidInstance);
			//	deviceInfo.guidProduct;
			//	deviceInfo.tszInstanceName;
			//	deviceInfo.tszProductName;
			//	deviceInfo.wUsage;
			//	deviceInfo.wUsagePage;
		} else
		{
			DebugPrint("Get device info failed: 0x%0.8x\n", hr);
		}
	}
	
}
void CDIDevice::GetCapabilities()
//Call GetDeviceCapabilities and dump the info to the debugger.
{
	HRESULT hr;
	DIDEVCAPS diDevCaps;
	if(m_pDID8)
	{
		diDevCaps.dwSize = sizeof(DIDEVCAPS);
		hr =m_pDID8->GetCapabilities(&diDevCaps);
		if(SUCCEEDED(hr))
		{
			DebugPrint("diDevCaps.dwAxes                = 0x%0.8x\n", diDevCaps.dwAxes);
			DebugPrint("diDevCaps.dwButtons             = 0x%0.8x\n", diDevCaps.dwButtons);
			DebugPrint("diDevCaps.dwDevType             = 0x%0.8x\n", diDevCaps.dwDevType);
			DebugPrint("diDevCaps.dwFFDriverVersion     = 0x%0.8x\n", diDevCaps.dwFFDriverVersion);
			DebugPrint("diDevCaps.dwFFMinTimeResolution = 0x%0.8x\n", diDevCaps.dwFFMinTimeResolution);
			DebugPrint("diDevCaps.dwFFSamplePeriod      = 0x%0.8x\n", diDevCaps.dwFFSamplePeriod);
			DebugPrint("diDevCaps.dwFirmwareRevision    = 0x%0.8x\n", diDevCaps.dwFirmwareRevision);
			DebugPrint("diDevCaps.dwFlags               = 0x%0.8x\n", diDevCaps.dwFlags);
			DebugPrint("diDevCaps.dwHardwareRevision    = 0x%0.8x\n", diDevCaps.dwHardwareRevision);
			DebugPrint("diDevCaps.dwPOVs                = 0x%0.8x\n", diDevCaps.dwPOVs);
		} else
		{
			DebugPrint("Get device capabilities: 0x%0.8x\n", hr);
		}
	}
}

/*

	//
	//	Repeat loop infinitely
	//
	while(1)
	{
		DebugPrint("Creating deviceCollection:\n");
		pDeviceCollection = new CXidDeviceCollection;
		if(pDeviceCollection)
		{
			DebugPrint("Detecting devices currently inserted . . .:\n");
			InputAdviseDeviceChanges((PFNINPUTDEVICECHANGEPROC)DeviceChanges, (PVOID)pDeviceCollection);
			//
			//	Poll for roughly 30 seconds
			//
			DebugPrint("Poll for roughly 30 seconds:\n");
			for(int loop=0; loop < 1800; loop++)
			{
				pDeviceCollection->PollDevices();
				Sleep(16);
				InputPumpCallbacks();
			}
			DebugPrint("Stop detecting devices. . .:\n");
			InputUnadviseDeviceChanges();
			DebugPrint("Deleteing deviceCollection:\n");
			delete pDeviceCollection;
		}
		DebugPrint("Pause for about 30 seconds before creating a new device colletion.\n");
		Sleep(30000);
		DebugPrint("Creating deviceCollection:\n");
		pDeviceCollection = new CXidDeviceCollection;
		if(pDeviceCollection)
		{
			DebugPrint("Detecting devices currently inserted . . .:\n");
			InputAdviseDeviceChanges((PFNINPUTDEVICECHANGEPROC)DeviceChanges, (PVOID)pDeviceCollection);
			//
			//	Poll for roughly 15 seconds
			//
			DebugPrint("Poll for roughly 15 seconds:\n");
			for(int loop=0; loop < 900; loop++)
			{
				pDeviceCollection->PollDevices();
				Sleep(16);
				InputPumpCallbacks();
			}
			//
			//	Close the devices
			//
			DebugPrint("Closing Devices:\n");
			pDeviceCollection->CloseDevices();
			//
			//	Pause for 15 seconds, continue pumping for messages.
			//
			DebugPrint("Pause for roughly 15 seconds:\n");
			for(loop=0; loop < 900; loop++)
			{
				Sleep(16);
				InputPumpCallbacks();
			}
			DebugPrint("Reopen devices:\n");
			pDeviceCollection->OpenDevices();
			//
			//	Poll for roughly 15 seconds
			//
			DebugPrint("Poll for roughly 15 seconds:\n");
			for(loop=0; loop < 900; loop++)
			{
				pDeviceCollection->PollDevices();
				Sleep(16);
				InputPumpCallbacks();
			}
			DebugPrint("Stop detecting devices. . .:\n");
			InputUnadviseDeviceChanges();
			DebugPrint("Deleteing deviceCollection:\n");
			delete pDeviceCollection;
			
		}
		DebugPrint("Pause for about 30 seconds before creating a new device colletion.\n");
		Sleep(30000);
	};

*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\win2000\drivers\sctrsz\util.c ===
/*++

Copyright (c) 1996-2000  Microsoft Corporation

Module Name:

    util.c

Abstract:
  Filter driver to adapt the SectorSize of USB Mass Storage devices to effectively
  be 512 bytes.  Design to work with up to 8 kbyte sector size.


  Based on NULL filter driver -- boilerplate code -- from NTDDK.

Author:

    ervinp (original boiler plate)
	mitchd (sctrsize)

Environment:

    Kernel mode

Revision History:


--*/

#include <WDM.H>

#include "filter.h"


#ifdef ALLOC_PRAGMA
        #pragma alloc_text(PAGE, CallNextDriverSync)
        #pragma alloc_text(PAGE, CallDriverSync)
        #pragma alloc_text(PAGE, QueryDeviceKey)
        //#pragma alloc_text(PAGE, RegistryAccessSample)
#endif


NTSTATUS CallNextDriverSync(struct DEVICE_EXTENSION *devExt, PIRP irp)
/*++

Routine Description:

        Pass the IRP down to the next device object in the stack
        synchronously, and bump the pendingActionCount around
        the call to prevent the current device object from getting
        removed before the IRP completes.

Arguments:

    devExt - device extension of one of our device objects
    irp - Io Request Packet

Return Value:

    NT status code, indicates result returned by lower driver for this IRP.

--*/
{
    NTSTATUS status;

    PAGED_CODE();

    IncrementPendingActionCount(devExt);
    status = CallDriverSync(devExt->topDevObj, irp);
    DecrementPendingActionCount(devExt);

    return status;
}



NTSTATUS CallDriverSync(PDEVICE_OBJECT devObj, PIRP irp)
/*++

Routine Description:

      Call IoCallDriver to send the irp to the device object;
      then, synchronize with the completion routine.
      When CallDriverSync returns, the action has completed
      and the irp again belongs to the current driver.

      NOTE:  In order to keep the device object from getting freed
             while this IRP is pending, you should call
             IncrementPendingActionCount() and 
             DecrementPendingActionCount()
             around the CallDriverSync call.

Arguments:

    devObj - targetted device object
    irp - Io Request Packet

Return Value:

    NT status code, indicates result returned by lower driver for this IRP.

--*/
{
    KEVENT event;
    NTSTATUS status;

    PAGED_CODE();

    KeInitializeEvent(&event, NotificationEvent, FALSE);

    IoSetCompletionRoutine( irp, 
                            CallDriverSyncCompletion, 
                            &event,     // context
                            TRUE, TRUE, TRUE);

    status = IoCallDriver(devObj, irp);

    KeWaitForSingleObject(  &event,
                            Executive,      // wait reason
                            KernelMode,
                            FALSE,          // not alertable
                            NULL );         // no timeout

    status = irp->IoStatus.Status;

    ASSERT(NT_SUCCESS(status));

    return status;
}


NTSTATUS CallDriverSyncCompletion(
                                    IN PDEVICE_OBJECT devObjOrNULL, 
                                    IN PIRP irp, 
                                    IN PVOID context)
/*++

Routine Description:

      Completion routine for CallDriverSync.

Arguments:

    devObjOrNULL - 
            Usually, this is this driver's device object.
             However, if this driver created the IRP, 
             there is no stack location in the IRP for this driver;
             so the kernel has no place to store the device object;
             ** so devObj will be NULL in this case **.

    irp - completed Io Request Packet
    context - context passed to IoSetCompletionRoutine by CallDriverSync. 

    
Return Value:

    NT status code, indicates result returned by lower driver for this IRP.

--*/
{
    PKEVENT event = context;

    ASSERT(irp->IoStatus.Status != STATUS_IO_TIMEOUT);

    KeSetEvent(event, 0, FALSE);

    return STATUS_MORE_PROCESSING_REQUIRED;
}



VOID IncrementPendingActionCount(struct DEVICE_EXTENSION *devExt)
/*++

Routine Description:

      Increment the pendingActionCount for a device object.
      This keeps the device object from getting freed before
      the action is completed.

Arguments:

    devExt - device extension of device object

Return Value:

    VOID

--*/
{
    ASSERT(devExt->pendingActionCount >= 0);
    InterlockedIncrement(&devExt->pendingActionCount);    
}



VOID DecrementPendingActionCount(struct DEVICE_EXTENSION *devExt)
/*++

Routine Description:

      Decrement the pendingActionCount for a device object.
      This is called when an asynchronous action is completed
      AND ALSO when we get the REMOVE_DEVICE IRP.
      If the pendingActionCount goes to -1, that means that all
      actions are completed and we've gotten the REMOVE_DEVICE IRP;
      in this case, set the removeEvent event so we can finish
      unloading.

Arguments:

    devExt - device extension of device object

Return Value:

    VOID

--*/
{
    ASSERT(devExt->pendingActionCount >= 0);
    InterlockedDecrement(&devExt->pendingActionCount);    

    if (devExt->pendingActionCount < 0){
        /*
         *  All pending actions have completed and we've gotten
         *  the REMOVE_DEVICE IRP.
         *  Set the removeEvent so we'll stop waiting on REMOVE_DEVICE.
         */
        ASSERT((devExt->state == STATE_REMOVING) || 
               (devExt->state == STATE_REMOVED));
        KeSetEvent(&devExt->removeEvent, 0, FALSE);
    }
}


NTSTATUS
QueryDeviceKey (
    IN  HANDLE  Handle,
    IN  PWCHAR  ValueNameString,
    OUT PVOID   Data,
    IN  ULONG   DataLength
    )
/*++

Routine Description:

    Retrieve the data associated with a specified registry value.

Arguments:

    Handle - handle of key for which value entry is to be read
    ValueNameString - name of value whose data is to be retrieved
    Data - buffer to receive the data
    DataLength - length of data buffer

Return Value:

    NTSTATUS

--*/
{
    NTSTATUS        status;
    UNICODE_STRING  valueName;
    ULONG           length;
    PKEY_VALUE_FULL_INFORMATION fullInfo;

    PAGED_CODE();

    RtlInitUnicodeString (&valueName, ValueNameString);

    length = sizeof (KEY_VALUE_FULL_INFORMATION)
           + valueName.MaximumLength;
           + DataLength;

    fullInfo = ExAllocatePool (PagedPool, length);

    if (fullInfo) {
        status = ZwQueryValueKey (Handle,
                                  &valueName,
                                  KeyValueFullInformation,
                                  fullInfo,
                                  length,
                                  &length);

        if (NT_SUCCESS (status)) {
            ASSERT (DataLength == fullInfo->DataLength);
            RtlCopyMemory (Data,
                           ((PUCHAR) fullInfo) + fullInfo->DataOffset,
                           fullInfo->DataLength);
        }

        ExFreePool (fullInfo);
    } else {
        status = STATUS_NO_MEMORY;
    }

    return status;
}

#if 0
VOID RegistryAccessSample(struct DEVICE_EXTENSION *devExt,
                          PDEVICE_OBJECT devObj)
/*++

Routine Description:

    SAMPLE showing how to access the device-specific registry key 

Arguments:

    devExt - device extension (for our _filter_ device object)
    devObj - device object pointer
             NOTE: This must not be the functional device object
                   created by this filter driver, because that
                   device object does not have a devnode area
                   in the registry; pass the device object of
                   the device object for which this driver is
                   a filter.  This is the device object passed
                   to SCTRSZ_AddDevice.

Return Value:

    VOID

--*/
{
    NTSTATUS status;
    HANDLE hRegDevice;

    PAGED_CODE();

    status = IoOpenDeviceRegistryKey(   devObj, 
                                        PLUGPLAY_REGKEY_DEVICE, 
                                        KEY_READ, 
                                        &hRegDevice);

    if (NT_SUCCESS(status)){
        ULONG value, otherValue;

        if (NT_SUCCESS(QueryDeviceKey( hRegDevice,
                                       L"SampleFilterParam",
                                       &value,
                                       sizeof(value)))) {
            //
            // Perform whatever operation is necessary 
            //
        }

        if (NT_SUCCESS(QueryDeviceKey( hRegDevice,
                                       L"SampleFilterParam2",
                                       &otherValue,
                                       sizeof(otherValue)))) {
            //
            // Perform whatever operation is necessary 
            //
        }

        ZwClose(hRegDevice);
    }
    else {
        DBGOUT(("IoOpenDeviceRegistryKey failed with %xh.", status));
    }

}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\dll\did.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    did.cpp

Abstract:

    Implementation of IDirectInputDevice8 for XBOX

Environment:

	XAPI

Revision History:

    05-10-00 : created

--*/

#define DEBUG_MODULE_NAME  _MODULE_DIRECTINPUTDEVICE_
#define DEBUG_TRACE_NAME "DIDEV"
#include "dinputi.h"


/****************************************************************************
****	c'tor, d'tor, and initialization
****
***/
CDirectInputDevice8::CDirectInputDevice8() : 
	m_uRefCount(0), m_pOuterUnknown(NULL),
    m_bDeviceID(0), m_dwPlayerSlot(0),
    m_dwDeviceType(0), m_dwDeviceHandle(0),
	m_fProperyAutoPoll(TRUE)
{
	m_OutputFormatRumble.Header.hEvent = NULL;
	m_OutputFormatRumble.Header.dwStatus = ERROR_SUCCESS;
	m_OutputFormatRumble.bReportId = 0;
	m_OutputFormatRumble.bSize = OUTPUT_FORMAT_RUMBLE_SIZE;
}

CDirectInputDevice8::~CDirectInputDevice8()
{
    if(m_dwDeviceHandle)
    {
        Unacquire();
    }
}

BOOL CDirectInputDevice8::InternalInit(LPUNKNOWN pOuterUnknown, BYTE bDeviceID)
{
	m_pOuterUnknown = pOuterUnknown;
    m_ImplInnerUnk.Init(this);
    m_bDeviceID = bDeviceID;
    
    //
    //  Now gather basic information about the device
    //
    INPUT_DEVICE_INFORMATION DeviceInformation;
    DeviceInformation.dwSize = sizeof(INPUT_DEVICE_INFORMATION);
    if(ERROR_SUCCESS == InputQueryDeviceInformation(m_bDeviceID, &DeviceInformation))
    {
        m_dwDeviceType = MAKE_DIDEVICE_TYPE(DeviceInformation.bDeviceType, DeviceInformation.bDeviceSubtype);
        m_dwPlayerSlot = (DWORD)DeviceInformation.bPlayerSlot;
        return TRUE;
    }
    return FALSE;
}

/****************************************************************************
****	CAggregable Methods
****
***/

HRESULT
CDirectInputDevice8::ImplQI(
	REFIID riid,
	LPVOID *ppvObj
	)
/*++
	Routine Descirption:
		The real implementation of QueryInterface for CDirectInputDevice8.
		It is not implemented directly, so that we can support
		aggregation.

	Parameters:
		riid	- interface requested
		ppvObj	- buffer to receive interface pointer.
	
	Return Value:
		One of the following:
			S_OK
			E_NOINTERFACE
--*/
{
	*ppvObj = NULL;
	if(IID_IDirectInputDevice8 == riid || IID_IUnknown == riid)
	{
		*ppvObj=dynamic_cast<IDirectInputDevice8 *>(this); //Make sure that they get the IDirectInputDevice8 VTABLE
	}
	if(NULL == *ppvObj)
	{
		return E_NOINTERFACE;
	}
	AddRef();
	return S_OK;
}

ULONG
CDirectInputDevice8::ImplAddRef()
/*++
	Routine Descirption:
		The real implementation of AddRef for CDirectInputDevice8.
		It is not implemented directly, so that we can support
		aggregation.

	Parameters:
		None
	
	Return Value:
		The new reference count.
--*/
{
	return InterlockedIncrement((PLONG)&m_uRefCount);
}

ULONG
CDirectInputDevice8::ImplRelease()
/*++
	Routine Descirption:
		The real implementation of Release for CDirectInputDevice8.
		It is not implemented directly, so that we can support
		aggregation.

	Parameters:
		None
	
	Return Value:
		The new reference count.
	Note:
		The temporary variable "refCount" may seem silly,
		but it ensures that you do not attempt to
		access m_uRefCount after killing yourself.
--*/
{
	ULONG refCount = InterlockedDecrement((PLONG)&m_uRefCount);
	if(0==refCount)
	{
		delete this;
	}
	return refCount;
}

/****************************************************************************
****	IUnknown Methods
****
***/

STDMETHODIMP
CDirectInputDevice8::QueryInterface(
	REFIID riid,
	LPVOID * ppvObj
	)
/*++
	Routine Descirption:
		PUBLIC version QueryInterface for CDirectInputDevice8.
		 When aggregated, it delegates to the outer unknown.
		 Otherwise it calls ImpQI.

	Parameters:
		riid	- interface requested
		ppvObj	- buffer to receive interface pointer.
	
	Return Value:
		One of the following:
			S_OK
			E_NOINTERFACE
--*/
{
	if(m_pOuterUnknown)
	{
		return m_pOuterUnknown->QueryInterface(riid, ppvObj);
	}
	return ImplQI(riid, ppvObj);
}

STDMETHODIMP_(ULONG)
CDirectInputDevice8::AddRef()
/*++
	Routine Descirption:
		PUBLIC version of AddRef for CDirectInputDevice8.
		 When aggregated, it delegates to the outer unknown.
		 Otherwise it calls ImpAddRef.

	Parameters:
	
	Return Value:
		New Reference Count
--*/
{
	if(m_pOuterUnknown)
	{
		return m_pOuterUnknown->AddRef();
	}
	return ImplAddRef();
}

STDMETHODIMP_(ULONG)
CDirectInputDevice8::Release()
/*++
	Routine Descirption:
		PUBLIC version of Release for CDirectInputDevice8.
		 When aggregated, it delegates to the outer unknown.
		 Otherwise it calls ImpRelease.

	Parameters:
	
	Return Value:
		New Reference Count
--*/
{
	if(m_pOuterUnknown)
	{
		return m_pOuterUnknown->Release();
	}
	return ImplRelease();
}

/*** IDirectInputDevice (2A and 7) methods ***/
STDMETHODIMP
CDirectInputDevice8::GetCapabilities(
    LPDIDEVCAPS lpDiDevCaps
    )
/*++
	Routine Descirption:

        This differs from DI for Windows in that you need to acquire the
        device in order to get the number of access and stuff.  We could
        get around this by opening the device when the object is created,
        and closing it in the destructor, but YUCK!

	Parameters:
	Return Value:
        DI_OK
        DIERR_NOTACQUIRED
		
--*/
{
    //
    //  Does work in both free and checked.
    //
    CHECK_STRUCT_SIZE(lpDiDevCaps->dwSize, DIDEVCAPS, IDirectInputDevice8::GetCapabilities);
    lpDiDevCaps->dwDevType = m_dwDeviceType;
    
    //
    //  Make sure that the device is aqcuired.
    //
    if(!m_dwDeviceHandle)
    {
        return DIERR_NOTACQUIRED;
    } else
    {
        //
        // We really need to query the device for its
        // capabilities at this point.  Then parse out
        // what we get from it.
        // For right now, lets lie and tell them about
        // DUKE.
        //
        lpDiDevCaps->dwAxes = 4;
        lpDiDevCaps->dwButtons = 12;
        lpDiDevCaps->dwFFDriverVersion = 0;
        lpDiDevCaps->dwFFMinTimeResolution = 0;
        lpDiDevCaps->dwFFSamplePeriod = 0;
        lpDiDevCaps->dwFirmwareRevision = 0;
        lpDiDevCaps->dwFlags = 0;
        lpDiDevCaps->dwHardwareRevision = 0;
        lpDiDevCaps->dwPOVs = 1;
    }
    return DI_OK;
}

STDMETHODIMP 
CDirectInputDevice8::EnumObjects(
    LPDIENUMDEVICEOBJECTSCALLBACK,
    LPVOID,
    DWORD
    )
/*++
	Routine Descirption:
        Right now it doesn't seem prudent to implement
        this, or encourage people to call it, we may change
        our minds.

	Parameters:
	Return Value:
        E_NOTIMPL;
--*/
{
    return E_NOTIMPL;
}

STDMETHODIMP
CDirectInputDevice8::GetProperty(
	REFGUID rguidProp,
    LPDIPROPHEADER pdihph
    )
/*++
	Routine Descirption:
        This will eventually be implemented with three properties supported.

        DIPROP_BUFFERSIZE ???

        Also, two new properties:

        DIPROP_PLAYERSLOT - the player slot number.
        DIPROP_AUTOPOLL   - the automatic poll rate.

	Parameters:
		rguidProp - Property to perform get operation on.
		pdihph	  - Header for placing 
	Return Value:
		DI_OK				- for supported property
		DIERR_UNSUPPORTED	- for unsupported property.
        
--*/
{
	CHECK_STRUCT_SIZE(pdihph->dwHeaderSize, DIPROPHEADER, IDirectInputDevice8::GetProperty);
	LPDIPROPDWORD pdipdw = (LPDIPROPDWORD)pdihph;
	if( &rguidProp == &DIPROP_AUTOPOLL)
	{
		CHECK_STRUCT_SIZE(pdihph->dwSize, DIPROPDWORD, IDirectInputDevice8::GetProperty);
		pdipdw->dwData = m_fProperyAutoPoll;
	} else if( &rguidProp == &DIPROP_PLAYERSLOT)
	{
		CHECK_STRUCT_SIZE(pdihph->dwSize, DIPROPDWORD, IDirectInputDevice8::GetProperty);
		pdipdw->dwData = m_dwPlayerSlot;
	} else
	{
		return DIERR_UNSUPPORTED;
	}
    return DI_OK;
}
STDMETHODIMP
CDirectInputDevice8::SetProperty(
    REFGUID rguidProp,
    LPCDIPROPHEADER pdihph
    )
/*++
	Routine Descirption:
        This will eventually be implemented with two properties supported.

        DIPROP_BUFFERSIZE ??
        
        and a new property.

        DIPROP_AUTOPOLL   - the automatic poll rate.

        If setting the former property the device must not be acquired.

	Parameters:
	Return Value:
        E_NOTIMPL;
--*/
{
    CHECK_STRUCT_SIZE(pdihph->dwHeaderSize, DIPROPHEADER, IDirectInputDevice8::GetProperty);
	LPDIPROPDWORD pdipdw = (LPDIPROPDWORD)pdihph;
	if( &rguidProp == &DIPROP_AUTOPOLL)
	{
		if(!m_dwDeviceHandle)
		{
			CHECK_STRUCT_SIZE(pdihph->dwSize, DIPROPDWORD, IDirectInputDevice8::GetProperty);
			m_fProperyAutoPoll = pdipdw->dwData ? TRUE : FALSE;
		} else
		{
			return DIERR_ACQUIRED;
		}
	} else
	{
		return DIERR_UNSUPPORTED;
	}
    return DI_OK;
}

STDMETHODIMP
CDirectInputDevice8::Acquire()
/*++
	Routine Descirption:
       Opens the device for now.  In the future, we may mess around with
       the polling method.
	Parameters:
	Return Value:
       
--*/
{
    if(m_dwDeviceHandle)
        return DIERR_ACQUIRED;

    DWORD dwError = InputOpenDevice(m_bDeviceID, m_fProperyAutoPoll, &m_dwDeviceHandle);
    if(dwError == ERROR_SHARING_VIOLATION)
        return DIERR_OTHERAPPHASPRIO;
    if(dwError == ERROR_DEVICE_NOT_CONNECTED)
        return DIERR_UNPLUGGED;
    return HRESULT_FROM_WIN32(dwError);
}

STDMETHODIMP
CDirectInputDevice8::Unacquire()
/*++
	Routine Descirption:
      Closes the device
	Parameters:
	Return Value:
       
--*/
{
    DWORD dwError;
	if(!m_dwDeviceHandle)
        return DIERR_NOTACQUIRED;
	dwError = InputCloseDevice(m_dwDeviceHandle);
	m_dwDeviceHandle = 0;
    return HRESULT_FROM_WIN32(dwError);
}



STDMETHODIMP
CDirectInputDevice8::GetDeviceState(
    DWORD cbData,
    LPVOID lpvData
    )
{
    PINPUT_FORMAT pInputFormat = reinterpret_cast<PINPUT_FORMAT>(lpvData);
    DWORD dwError;
    pInputFormat->bReportId = 0;
    ASSERT(cbData < 0xFF);
    pInputFormat->bSize = static_cast<BYTE>(cbData);
    dwError = InputGetDeviceState(m_dwDeviceHandle, pInputFormat, NULL);
    if(dwError == ERROR_DEVICE_NOT_CONNECTED)
    {
        return DIERR_UNPLUGGED;
    }
    return HRESULT_FROM_WIN32(dwError);
}

STDMETHODIMP
CDirectInputDevice8::GetDeviceData(
    DWORD,
    LPDIDEVICEOBJECTDATA,
    LPDWORD,
    DWORD
    )
{
	return E_NOTIMPL;
}


STDMETHODIMP
CDirectInputDevice8::SetEventNotification(
    HANDLE
    )
{
    return E_NOTIMPL;
}

STDMETHODIMP
CDirectInputDevice8::GetObjectInfo(
    LPDIDEVICEOBJECTINSTANCE,
    DWORD,
    DWORD
    )
{
    return E_NOTIMPL;
}

STDMETHODIMP
CDirectInputDevice8::GetDeviceInfo(
    LPDIDEVICEINSTANCE lpDiDeviceInstance
    )
{
    //
    //  Does work in both free and checked.
    //
    CHECK_STRUCT_SIZE(lpDiDeviceInstance->dwSize, DIDEVICEINSTANCE, IDirectInputDevice8::GetDeviceInfo);
    lpDiDeviceInstance->dwDevType = m_dwDeviceType;
    lpDiDeviceInstance->guidFFDriver = GUID_NULL;
    INITINSTANCEGUID(lpDiDeviceInstance->guidInstance, m_bDeviceID);
    lpDiDeviceInstance->guidProduct = GUID_NULL;
    lpDiDeviceInstance->tszInstanceName[0] = NULL;
    lpDiDeviceInstance->tszProductName[0] = NULL;
    lpDiDeviceInstance->wUsage = 0;
    lpDiDeviceInstance->wUsagePage = 0;
    return DI_OK;
}

STDMETHODIMP
CDirectInputDevice8::Poll()
{
	DWORD dwErrorCode;
	if(!m_dwDeviceHandle)
        return DIERR_NOTACQUIRED;
    if(m_fProperyAutoPoll)
		return DIERR_UNSUPPORTED;
	dwErrorCode = InputPollDevice(m_dwDeviceHandle);
	return HRESULT_FROM_WIN32(dwErrorCode);
}

STDMETHODIMP
CDirectInputDevice8::SendDeviceData(
    DWORD cbObjectData,
    LPCDIDEVICEOBJECTDATA rgdod,
    LPDWORD pdwInOut,
    DWORD 
    )
{
	DWORD dwError;
	if(GET_DIDEVICE_TYPE(m_dwDeviceType) == INPUT_DEVTYPE_GAMECONTROLLER)
	{
		if(ERROR_SUCCESS != m_OutputFormatRumble.Header.dwStatus)
		{
			return DIERR_REPORTFULL;	
		} else
		{
			for(DWORD i=0; i < *pdwInOut; i++)
			{
				if(rgdod[i].dwOfs == DIXROFS_LEFTMOTOR)
				{
					m_OutputFormatRumble.bLeftMotorSpeed = (BYTE)rgdod[i].dwData;
				} else if (rgdod[i].dwOfs == DIXROFS_RIGHTMOTOR)
				{
					m_OutputFormatRumble.bRightMotorSpeed = (BYTE)rgdod[i].dwData;
				}
			}
			dwError = InputSendDeviceReport(m_dwDeviceHandle, (POUTPUT_HEADER)&m_OutputFormatRumble);
			return HRESULT_FROM_WIN32(dwError);
		}
	}
	return DIERR_INVALIDPARAM;
}


STDMETHODIMP
DirectInputCreateDevice(
    DWORD dwDeviceInstance,
    REFIID riid,
    LPVOID *ppvOut,
    LPUNKNOWN punkOuter
    )
/*++
	Routine Descirption:
        Factory method to create DirectInputDevice

    Parameters:
        dwDeviceInstance  - LPARAM from WM_USB_DEVICE_INSERTED message.
        riid              - Interface ID to create
        ppvOut            - receives interface pointer
        punkOuter         - outer ("controlling") unknown
--*/
{	
	CDirectInputDevice8 *pObj;
    
    
    //
    //  NULL out our return value here, because
    //  not all failure paths would otherwise null
    //  it.
    //
    *ppvOut = NULL;

    //
    //  Make sure that they are asking for
    //  IUnknown if they want to aggregate.
    //
    if( NULL!=punkOuter && riid!=IID_IUnknown)
    {
        return DIERR_INVALIDPARAM;
    }

    //
    //  Create a DirectInput8 object
    //
    pObj = new CDirectInputDevice8();
    if(NULL==pObj) return DIERR_OUTOFMEMORY;
    
    //
    //  Call the init function (which tells
    //  it about aggregation.)
    //
    if(pObj->InternalInit(punkOuter, dwDeviceInstance))
    {
        //
        //  If we need to aggregate, we look inside the object
        //  (we are a friend) and pull out the special "inner unknown"
        //  implementation.
        //
        if(NULL!=punkOuter)
        {
            pObj->ImplAddRef();
            *ppvOut = &pObj->m_ImplInnerUnk;
            return S_OK;
        }

        //
        // If we are not aggregated,
        // than we just call QI
        // as usual.
        //
        HRESULT hr = pObj->QueryInterface(riid, ppvOut);
        if(FAILED(hr))
        {
            delete pObj;
        }
        return hr;
    }
    delete pObj;
    return DIERR_DEVICENOTREG;
}


/*** Not needed for XBOX ***/
STDMETHODIMP CDirectInputDevice8::SetDataFormat(LPCDIDATAFORMAT){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::SetCooperativeLevel(HWND,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::RunControlPanel(HWND,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::Initialize(HINSTANCE,DWORD,REFGUID){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::CreateEffect(REFGUID,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::EnumEffects(LPDIENUMEFFECTSCALLBACK,LPVOID,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::GetEffectInfo(LPDIEFFECTINFO,REFGUID){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::GetForceFeedbackState(LPDWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::SendForceFeedbackCommand(DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::EnumCreatedEffectObjects(LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::Escape(LPDIEFFESCAPE){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::EnumEffectsInFile(LPCTSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::WriteEffectToFile(LPCTSTR,DWORD,LPDIFILEEFFECT,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::BuildActionMap(LPDIACTIONFORMAT,LPCTSTR,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::SetActionMap(LPDIACTIONFORMAT,LPCTSTR,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInputDevice8::GetImageInfo(LPDIDEVICEIMAGEINFOHEADER){return E_NOTIMPL;}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\dll\di.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    di.cpp

Abstract:

    Implementation of IDirectInput8 for XBOX

Environment:

	XAPI

Revision History:

    05-10-00 : created

--*/

#define DEBUG_MODULE_NAME  _MODULE_DIRECTINPUT_
#define DEBUG_TRACE_NAME "DI"
#include "dinputi.h"


/****************************************************************************
****	c'tor, d'tor, and initialization
****
***/
CDirectInput8::CDirectInput8() : 
	m_uRefCount(0), m_pOuterUnknown(NULL),
	m_pAddDeviceCallback(NULL), m_pAddDeviceContext(NULL),
    m_pRemoveDeviceCallback(NULL), m_pRemoveDeviceContext(NULL)
{
}

CDirectInput8::~CDirectInput8()
{
}

void CDirectInput8::InternalInit(LPUNKNOWN pOuterUnknown)
{
	m_pOuterUnknown = pOuterUnknown;
    m_ImplInnerUnk.Init(this);
}

/****************************************************************************
****	CAggregable Methods
****
***/

HRESULT
CDirectInput8::ImplQI(
	REFIID riid,
	LPVOID *ppvObj
	)
/*++
	Routine Descirption:
		The real implementation of QueryInterface for CDirectInput8.
		It is not implemented directly, so that we can support
		aggregation.

	Parameters:
		riid	- interface requested
		ppvObj	- buffer to receive interface pointer.
	
	Return Value:
		One of the following:
			S_OK
			E_NOINTERFACE
--*/
{
	*ppvObj = NULL;
	if(IID_IDirectInput8 == riid || IID_IUnknown == riid)
	{
		*ppvObj=dynamic_cast<IDirectInput8 *>(this); //Make sure that they get the IDirectInput8 VTABLE
	}
	if(NULL == *ppvObj)
	{
		return E_NOINTERFACE;
	}
	AddRef();
	return S_OK;
}

ULONG
CDirectInput8::ImplAddRef()
/*++
	Routine Descirption:
		The real implementation of AddRef for CDirectInput8.
		It is not implemented directly, so that we can support
		aggregation.

	Parameters:
		None
	
	Return Value:
		The new reference count.
--*/
{
	return InterlockedIncrement((PLONG)&m_uRefCount);
}

ULONG
CDirectInput8::ImplRelease()
/*++
	Routine Descirption:
		The real implementation of Release for CDirectInput8.
		It is not implemented directly, so that we can support
		aggregation.

	Parameters:
		None
	
	Return Value:
		The new reference count.
	Note:
		The temporary variable "refCount" may seem silly,
		but it ensures that you do not attempt to
		access m_uRefCount after killing yourself.
--*/
{
	ULONG refCount = InterlockedDecrement((PLONG)&m_uRefCount);
	if(0==refCount)
	{
		delete this;
	}
	return refCount;
}

/****************************************************************************
****	IUnknown Methods
****
***/

STDMETHODIMP
CDirectInput8::QueryInterface(
	REFIID riid,
	LPVOID * ppvObj
	)
/*++
	Routine Descirption:
		PUBLIC version QueryInterface for CDirectInput8.
		 When aggregated, it delegates to the outer unknown.
		 Otherwise it calls ImpQI.

	Parameters:
		riid	- interface requested
		ppvObj	- buffer to receive interface pointer.
	
	Return Value:
		One of the following:
			S_OK
			E_NOINTERFACE
--*/
{
	if(m_pOuterUnknown)
	{
		return m_pOuterUnknown->QueryInterface(riid, ppvObj);
	}
	return ImplQI(riid, ppvObj);
}

STDMETHODIMP_(ULONG)
CDirectInput8::AddRef()
/*++
	Routine Descirption:
		PUBLIC version of AddRef for CDirectInput8.
		 When aggregated, it delegates to the outer unknown.
		 Otherwise it calls ImpAddRef.

	Parameters:
	
	Return Value:
		New Reference Count
--*/
{
	if(m_pOuterUnknown)
	{
		return m_pOuterUnknown->AddRef();
	}
	return ImplAddRef();
}

STDMETHODIMP_(ULONG)
CDirectInput8::Release()
/*++
	Routine Descirption:
		PUBLIC version of Release for CDirectInput8.
		 When aggregated, it delegates to the outer unknown.
		 Otherwise it calls ImpRelease.

	Parameters:
	
	Return Value:
		New Reference Count
--*/
{
	if(m_pOuterUnknown)
	{
		return m_pOuterUnknown->Release();
	}
	return ImplRelease();
}
	
/****************************************************************************
****	IDirectInput8 Methods
****
***/

STDMETHODIMP
CDirectInput8::CreateDevice(
        REFGUID guidInstance,
        LPDIRECTINPUTDEVICE8W *ppDirectInputDevice,
        LPUNKNOWN pUnkOuter
        )
/*++
	Routine Descirption:
		Delegates to CreateDeviceEx. Very similar to
        aggregation issues as with DirectInputCreate.
--*/
{
    if(pUnkOuter)
    {
       return CreateDeviceEx(
            guidInstance,
            IID_IDirectInputDevice8,
            reinterpret_cast<LPVOID *>(ppDirectInputDevice),
            pUnkOuter
            );
    }

   return CreateDeviceEx(
        guidInstance,
        IID_IUnknown,
        reinterpret_cast<LPVOID *>(ppDirectInputDevice),
        NULL
        );
}

STDMETHODIMP
CDirectInput8::EnumDevices(
  DWORD dwDevType,              
  LPDIENUMDEVICESCALLBACKW lpCallback,  
  LPVOID pvRef,                 
  DWORD dwFlags
  )
/*++
	Routine Descirption:
        XBOX Implementation is different in a couple of major ways:
        
        1) Enum devices has been overloaded to provide continuous hot-plug notification.

        2) New flags have been defined to aid in this new functionality:
            DIEDFL_ENUMANDNOTIFYINSERT - Call EnumDevices with this flag to begin enumeration and continue to get
                                      notification to the same callback when a device is inserted.
            DIEDFL_NOTIFYREMOVE - Call EnumDevices with this flag to setup a callback for device removal notifications.
            DIEDFL_HALTNOTIFYINSERT - Call EnumDevices with this flag to stop getting device insertion notifications.
            DIEDFL_HALTNOTIFYREMOVE - Call EnumDevices with this flag to stop getting device removal notifications.

        3) Removal notification occur only when insertion notifications are on.

        4) None of the previous flags apply.

        5) The flags cannot be or'd.

        6) The return value of the callback is now ignored.

        7) The device type is ignored.

        8) One callback can be registered for device insertion notification,
           and one callback can be registered for device removal notification.
           Removal should be registered first and unregistered last to avoid
           missing removal notifications.
        
--*/
{
	CHECK_PARAMETER_NOT_NULL(CDirectInput8::EnumDevices, lpCallback);

    DWORD dwError = DI_OK;
    switch(dwFlags)
    {
        case DIEDFL_ENUMANDNOTIFYINSERT:
            if(m_pAddDeviceCallback)
            {
                dwError = DIERR_CALLBACKEXISTS;
            } else
            {
                m_pAddDeviceCallback = lpCallback;
                m_pAddDeviceContext = pvRef;
                dwError = InputAdviseDeviceChanges( (PFNINPUTDEVICECHANGEPROC)InputDeviceChangeProc, (PVOID)this);
            }
            break;
        case DIEDFL_NOTIFYREMOVE:
            if(m_pRemoveDeviceCallback)
            {
                dwError = DIERR_CALLBACKEXISTS;
            } else
            {
                m_pRemoveDeviceCallback = lpCallback;
                m_pRemoveDeviceContext = pvRef;
            }
            break;
        case DIEDFL_HALTNOTIFYINSERT:
            if(!m_pAddDeviceCallback)
            {
                dwError = DIERR_NOCALLBACK;
            } else
            {
                m_pAddDeviceCallback = NULL;
                m_pAddDeviceContext = NULL;
                InputUnadviseDeviceChanges();
            }
            break;
        case DIEDFL_HALTNOTIFYREMOVE:
            if(!m_pRemoveDeviceCallback)
            {
                dwError = DIERR_NOCALLBACK;
            } else
            {
                m_pRemoveDeviceCallback = NULL;
                m_pRemoveDeviceContext = NULL;
            }       
            break;
        default:
            TRACE_ERROR(("CDirectInput8::EnumDevices was called with an illegal value for dwFlags.\n"));
			dwError = DIERR_INVALIDPARAM;
            DEBUG_BREAK();
    };
    return dwError;
}

STDMETHODIMP CDirectInput8::GetDeviceStatus(REFGUID guidInstance)
{
    CHECK_PARAMETER_VALID_INSTANCE_GUID(CDirectInput8::GetDeviceStatus, guidInstance);
	DWORD dwError;
    INPUT_DEVICE_INFORMATION	DeviceInformation;
    DeviceInformation.dwSize = sizeof(INPUT_DEVICE_INFORMATION);
	dwError = InputQueryDeviceInformation(DEVICEIDFROMGUID(guidInstance), &DeviceInformation);
    if(dwError == ERROR_DEVICE_NOT_CONNECTED)
    {
        return DI_NOTATTACHED;
    }
    return HRESULT_FROM_WIN32(dwError);
}

/*** None of these apply to XBOX ***/
STDMETHODIMP CDirectInput8::RunControlPanel(HWND,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInput8::Initialize(HINSTANCE,DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInput8::FindDevice(REFGUID,LPCWSTR,LPGUID){return E_NOTIMPL;}
STDMETHODIMP CDirectInput8::EnumDevicesBySemantics(LPCWSTR,LPDIACTIONFORMATW,LPDIENUMDEVICESBYSEMANTICSCBW, LPVOID, DWORD){return E_NOTIMPL;}
STDMETHODIMP CDirectInput8::ConfigureDevices(LPDICONFIGUREDEVICESCALLBACK, LPDICONFIGUREDEVICESPARAMSW, DWORD, LPVOID){return E_NOTIMPL;}


/****************************************************************************
****	IDirectInput8 Methods
****
***/

STDMETHODIMP
CDirectInput8::CreateDeviceEx(
    REFGUID guidInstance,
    REFIID riid,
    LPVOID *ppvOut,
    LPUNKNOWN punkOuter
    )
/*++
	Routine Descirption:
        Factory method to create DirectInputDevice

    Parameters:
        guidInstance- Instance GUID obtained from EnumDevices.
        riid        - Interface ID to create
        ppvOut      - receives interface pointer
        punkOuter   - outer ("controlling") unknown
--*/
{	
    CHECK_PARAMETER_VALID_INSTANCE_GUID(CDirectInput8::CreateDeviceEx,guidInstance);
	CDirectInputDevice8 *pObj;
    
    //
    //  NULL out our return value here, because
    //  not all failure paths would otherwise null
    //  it.
    //
    *ppvOut = NULL;

    //
    //  Make sure that they are asking for
    //  IUnknown if they want to aggregate.
    //
    if( NULL!=punkOuter && riid!=IID_IUnknown)
    {
        return DIERR_INVALIDPARAM;
    }

    //
    //  Create a DirectInput8 object
    //
    pObj = new CDirectInputDevice8();
    if(NULL==pObj) return DIERR_OUTOFMEMORY;
    
    //
    //  Call the init function (which tells
    //  it about aggregation.)
    //
    if(pObj->InternalInit(punkOuter, DEVICEIDFROMGUID(guidInstance)))
    {
        //
        //  If we need to aggregate, we look inside the object
        //  (we are a friend) and pull out the special "inner unknown"
        //  implementation.
        //
        if(NULL!=punkOuter)
        {
            pObj->ImplAddRef();
            *ppvOut = &pObj->m_ImplInnerUnk;
            return S_OK;
        }

        //
        // If we are not aggregated,
        // than we just call QI
        // as usual.
        //
        HRESULT hr = pObj->QueryInterface(riid, ppvOut);
        if(FAILED(hr))
        {
            delete pObj;
        }
        return hr;
    }
    delete pObj;
    return DIERR_DEVICENOTREG;
}




/****************************************************************************
****	Factory Methods
****
***/
#if 0
HRESULT WINAPI
DirectInputCreate(
	HINSTANCE hinst,
	DWORD dwVersion,
	LPDIRECTINPUT* ppDirectInput,
	LPUNKNOWN punkOuter
	)
/*++
	Routine Descirption:
		DirectInputCreate pretty much delegates to DirectInputCreateEx,
        but the signiture is not totally on the up and up with COM.
        When aggregating *ppDirectInput really returns an IUnknown.
        So we delegate slightly differently depending punkOuter.
--*/
{
    if(punkOuter)
    {
        return DirectInputCreateEx(
            hinst,
            dwVersion,
            IID_IUnknown,
            reinterpret_cast<LPVOID*>(ppDirectInput),
            punkOuter
            );
    }

    return DirectInputCreateEx(
            hinst,
            dwVersion,
            IID_IDirectInput8,
            reinterpret_cast<LPVOID*>(ppDirectInput),
            NULL
            );
}
#endif

HRESULT WINAPI
//DirectInputCreateEx
DirectInput8Create(
	HINSTANCE /*hinst*/,
	DWORD /*dwVersion*/,
	REFIID riid,
	LPVOID *ppvOut,
	LPUNKNOWN punkOuter
	)
/*++
	Routine Descirption:
        Factory method to create DirectInput

    Parameters:
        hinst       - Ignored.
        dwVersion   - Ignored.
        riid        - Interface ID to create
        ppvOut      - receives interface pointer
        punkOuter   - outer ("controlling") unknown
--*/
{
    CDirectInput8 *pObj;
    
    //
    //  NULL out our return value here, because
    //  not all failure paths would otherwise null
    //  it.
    //
    *ppvOut = NULL;

    //
    //  Make sure that they are asking for
    //  IUnknown if they want to aggregate.
    //
    if( NULL!=punkOuter && riid!=IID_IUnknown)
    {
        return DIERR_INVALIDPARAM;
    }

    //
    //  Create a DirectInput8 object
    //
    pObj = new CDirectInput8();
    if(NULL==pObj) return DIERR_OUTOFMEMORY;
    
    //
    //  Call the init function (which tells
    //  it about aggregation.)
    //
    pObj->InternalInit(punkOuter);

    //
    //  If we need to aggregate, we look inside the object
    //  (we are a friend) and pull out the special "inner unknown"
    //  implementation.
    //
    if(NULL!=punkOuter)
    {
        pObj->ImplAddRef();
        *ppvOut = &pObj->m_ImplInnerUnk;
        return S_OK;
    }

    //
    // If we are not aggregated,
    // than we just call QI
    // as usual.
    //
    HRESULT hr = pObj->QueryInterface(riid, ppvOut);
    if(FAILED(hr))
    {
        delete pObj;
    }
    return hr;
}


/****************************************************************************
****	Private Methods
****
***/
void CALLBACK
CDirectInput8::InputDeviceChangeProc(
	PCINPUT_DEVICE_INFORMATION DeviceInformation,
	BOOL fAdd,
	BOOL fEnum,
	CDirectInput8 *pThis
	)
{
	DIDEVICEINSTANCE diDeviceInstance;

	diDeviceInstance.dwSize = sizeof(DIDEVICEINSTANCE);
	diDeviceInstance.dwDevType = MAKE_DIDEVICE_TYPE(DeviceInformation->bDeviceType, DeviceInformation->bDeviceSubtype);
	diDeviceInstance.guidFFDriver = GUID_NULL;
	INITINSTANCEGUID(diDeviceInstance.guidInstance, DeviceInformation->bDeviceID);
	diDeviceInstance.guidProduct = GUID_NULL;
	diDeviceInstance.tszInstanceName[0] = NULL;
	diDeviceInstance.tszProductName[0] = NULL;
	diDeviceInstance.wUsage = 0;
	diDeviceInstance.wUsagePage = 0;
	
	if(fAdd && pThis->m_pAddDeviceCallback)
    {
	    pThis->m_pAddDeviceCallback(&diDeviceInstance, pThis->m_pAddDeviceContext);
    } else if(!fAdd && pThis->m_pRemoveDeviceCallback)
    {
	    pThis->m_pRemoveDeviceCallback(&diDeviceInstance, pThis->m_pRemoveDeviceContext);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dmusic\daytona.inc ===
!if 0
Copyright (c) 1998-1999 Microsoft Corporation
!endif

PLAT_DIR           = daytona
# ALT_PROJECT_TARGET = .

!if defined(NTDEBUG) && "$(NTDEBUG)" != "ntsdnodebug"
DEBUG=1
!endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\dll\dinputi.h ===
#ifndef __DINPUTI_H__
#define __DINPUTI_H__
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    di.cpp

Abstract:

    Internal header file for the XBOX implementation of DirectInput8.

Environment:

	XAPI

Revision History:

    05-10-00 : created

--*/

#include <objbase.h>
#include <dinput.h>
#include <dinputp.h>
#include <input.h>
#include "didbg.h"
#include "aggregat.h"

class CDirectInputDevice8 : public IDirectInputDevice8, public CAggregable
{
    /*** factory method is a friend ***/
    friend HRESULT DirectInputCreateDevice(
                            DWORD dwDeviceInstance,
                            REFIID riid,
                            LPVOID *ppvOut,
                            LPUNKNOWN punkOuter
                            );


    /*** private c'tor, d'tor and initialization ***/
	CDirectInputDevice8();
	~CDirectInputDevice8();
	BOOL InternalInit(LPUNKNOWN pOuterUnknown, DWORD dwDeviceInstance);

    /*** CAggregable methods ***/
	virtual HRESULT ImplQI(REFIID riid, LPVOID *ppvObj);
	virtual ULONG ImplAddRef();
	virtual ULONG ImplRelease();

	public:
	/*** IUnknown methods ***/
	STDMETHOD(QueryInterface)(REFIID riid, LPVOID * ppvObj);
	STDMETHOD_(ULONG,AddRef)();
	STDMETHOD_(ULONG,Release)();
    
    /*** IDirectInputDevice2 methods ***/
    STDMETHOD(GetCapabilities)(LPDIDEVCAPS);
    STDMETHOD(EnumObjects)(LPDIENUMDEVICEOBJECTSCALLBACK,LPVOID,DWORD);
    STDMETHOD(GetProperty)(REFGUID,LPDIPROPHEADER);
    STDMETHOD(SetProperty)(REFGUID,LPCDIPROPHEADER);
    STDMETHOD(Acquire)();
    STDMETHOD(Unacquire)();
    STDMETHOD(GetDeviceState)(DWORD,LPVOID);
    STDMETHOD(GetDeviceData)(DWORD,LPDIDEVICEOBJECTDATA,LPDWORD,DWORD);
    STDMETHOD(SetDataFormat)(LPCDIDATAFORMAT);
    STDMETHOD(SetEventNotification)(HANDLE);
    STDMETHOD(SetCooperativeLevel)(HWND,DWORD);
    STDMETHOD(GetObjectInfo)(LPDIDEVICEOBJECTINSTANCE,DWORD,DWORD);
    STDMETHOD(GetDeviceInfo)(LPDIDEVICEINSTANCE);
    STDMETHOD(RunControlPanel)(HWND,DWORD);
    STDMETHOD(Initialize)(HINSTANCE,DWORD,REFGUID);
    STDMETHOD(CreateEffect)(REFGUID,LPCDIEFFECT,LPDIRECTINPUTEFFECT *,LPUNKNOWN);
    STDMETHOD(EnumEffects)(LPDIENUMEFFECTSCALLBACK,LPVOID,DWORD);
    STDMETHOD(GetEffectInfo)(LPDIEFFECTINFO,REFGUID);
    STDMETHOD(GetForceFeedbackState)(LPDWORD);
    STDMETHOD(SendForceFeedbackCommand)(DWORD);
    STDMETHOD(EnumCreatedEffectObjects)(LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD);
    STDMETHOD(Escape)(LPDIEFFESCAPE);
    STDMETHOD(Poll)();
    STDMETHOD(SendDeviceData)(DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD);

    /*** IDirectInputDevice7 methods ***/
    STDMETHOD(EnumEffectsInFile)(LPCTSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD);
    STDMETHOD(WriteEffectToFile)(LPCTSTR,DWORD,LPDIFILEEFFECT,DWORD);

	/*** IDirectInputDevice8 methods ***/
	STDMETHOD(BuildActionMap)(LPDIACTIONFORMAT,LPCTSTR,DWORD);
    STDMETHOD(SetActionMap)(LPDIACTIONFORMAT,LPCTSTR,DWORD);
    STDMETHOD(GetImageInfo)(LPDIDEVICEIMAGEINFOHEADER);


    private:
	/*** private IUnknown stuff***/
	ULONG					m_uRefCount;
	LPUNKNOWN				m_pOuterUnknown;
	CImplInnerUnk			m_ImplInnerUnk;
    /*** private instance data***/
    BYTE                    m_bDeviceID;
	BOOL					m_fProperyAutoPoll;
    DWORD                   m_dwPlayerSlot;
    DWORD                   m_dwDeviceType;
    DWORD                   m_dwDeviceHandle;
	
	union {
	OUTPUT_FORMAT_RUMBLE	m_OutputFormatRumble;
	};
};



#endif __DINPUTI_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dmusic\win9x.inc ===
!if 0
Copyright (c) 1998 Microsoft Corporation
!endif

PLAT_DIR           = win9x
ALT_PROJECT_TARGET = win9x

USE_MAPSYM = 1

C_DEFINES    = $(C_DEFINES) /UWINNT /DWIN95

!ifdef NTDEBUG
C_DEFINES = $(C_DEFINES) /DDEBUG_RETAIL /DDEBUG
!endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\dll\main.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    di.cpp

Abstract:

    Implementation of IDirectInput8 for XBOX, 
	contains init code, guids and new and delete.

Environment:

	XAPI

Revision History:

    05-10-00 : created

--*/
#define DEBUG_MODULE_NAME  _MODULE_DI_MISC_
#define DEBUG_TRACE_NAME "DI"
#include <initguid.h>
#include "dinputi.h"
DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

BOOL WINAPI
DllMain(
    IN HINSTANCE hinstDll,
    IN DWORD fdwReason,
    IN LPVOID lpvReserved
    )

/*++

Routine Description:

    DLL entrypoint - refer to XAPI SDK documentation

--*/

{
    //TRACE(("Entering DINPUT.DLL entrypoint: %d\n", fdwReason));
    switch (fdwReason)
	{
	    case DLL_PROCESS_ATTACH:
	    case DLL_THREAD_ATTACH:
		case DLL_THREAD_DETACH:
	    case DLL_PROCESS_DETACH:
		;
    }
    return TRUE;
}

/*++
 Implementation of new and delete in-terms of LocalAlloc and FreeAlloc,
 we should revisit where this memory comes from
--*/

void * _cdecl operator new(size_t size)
{
	if(0==size) size = 1;
	return LocalAlloc(LMEM_FIXED, size);
}

void _cdecl operator delete(void *pvMem)
{
	if(pvMem) LocalFree(pvMem);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dmusic\sources.inc ===
!IF 0

Copyright (c) Microsoft Corporation

!ENDIF

C_DEFINES=$(C_DEFINES) -DDSOUND_IFACE_VERSION="4000" -DDPF_LIBRARY="\"DMUSIC\"" -DPOOL_TAG='SUMD' /FIdmusver.h

!if $(FREEBUILD)
C_DEFINES=$(C_DEFINES) -DASSUME_VALID_PARAMETERS
!else
MSC_OPTIMIZATION=$(MSC_OPTIMIZATION) /Od
!endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dinput\dll\didbg.h ===
/*++

Copyright (c) 2000 Microsoft Corporation


Module Name:

    didbg.h

Abstract:

  Macros for printing debug messages.

Environment:

  XAPI

Notes:

Revision History:

    05-11-00 created by Mitchell Dernis (mitchd)

--*/

#ifndef	__DIDBG_H__
#define	__DIDBG_H__

// Hack! DbgPrint is much nicer than OutputDebugString so JonT exported it from xapi.lib
// (as DebugPrint) but the prototype isn't in the public headers...
extern "C"
{
	ULONG
	DebugPrint(
		PCHAR Format,
		...
		);
}

//
//	DEBUG_MODULE_NAME is declared as a variable for the debug level of the module.
//	DEBUG_TRACE_NAME is a name prepended to all tracouts.
//
//	example:
//		#define DEBUG_MODULE_NAME FooCpp
//		#define DEBUG_TRACE_NAME "Foo"
//		#include <dinputi.h>
//
#ifndef DEBUG_MODULE_NAME
#error "You need to #define DEBUG_MODULE_NAME before including didbg.h"
#endif

#ifndef DEBUG_TRACE_NAME
#error "You need to #define DEBUG_TRACE_NAME before including didbg.h"
#endif

//---------------------------------------------------------------------------
//			Definitions
//---------------------------------------------------------------------------

#define DEBUG_LEVEL_VERBOSE	0
#define DEBUG_LEVEL_WARN	1
#define DEBUG_LEVEL_ERROR	2

#ifndef DEBUG_LEVEL_DEFAULT
#define DEBUG_LEVEL_DEFAULT DEBUG_LEVEL_ERROR
#endif

/*
**	Definitions for DEBUG BUILDS
**
**
*/
#if	DBG

int DEBUG_MODULE_NAME = DEBUG_LEVEL_DEFAULT;

#define TRACE_VERBOSE(__x__)\
	if(DEBUG_MODULE_NAME >= DEBUG_LEVEL_VERBOSE)\
	{\
		DebugPrint( "%s: ", DEBUG_TRACE_NAME);\
		DebugPrint __x__;\
	}

#define TRACE_WARN(__x__)\
	if(DEBUG_MODULE_NAME >= DEBUG_LEVEL_WARN)\
	{\
		DebugPrint( "%s: ", DEBUG_TRACE_NAME);\
		DebugPrint __x__;\
	}

#define TRACE_ERROR(__x__)\
	if(DEBUG_MODULE_NAME >= DEBUG_LEVEL_ERROR)\
	{\
		DebugPrint( "%s: ", DEBUG_TRACE_NAME);\
		DebugPrint __x__;\
	}

#define TRACE(__x__)\
	DebugPrint( "%s: ", DEBUG_TRACE_NAME);\
	DebugPrint __x__;


#define	ASSERT_MSG(_cond_, _msg_)\
	if(!(_cond_))\
	{\
		DebugPrint("Assertion failed: %s(%d)\n", __FILE__,__LINE__);\
		DebugPrint(#_cond_);\
		DebugPrint("\n");\
		DebugPrint _msg_;\
		DebugBreak();\
	}

#define	ASSERT(_cond_)\
	if(!(_cond_))\
	{\
		DebugPrint("Assertion failed: %s(%d)\n", __FILE__,__LINE__);\
		DebugPrint(#_cond_);\
		DebugPrint("\n");\
		DebugBreak();\
	}

#define DEBUG_BREAK() DebugBreak()

#define CHECK_STRUCT_SIZE(_SizeExpression_, _StructName_, _ApiName_)\
    if( (_SizeExpression_) != sizeof(_StructName_))\
    {\
        DebugPrint("Call to %s, %s is invalid.\n",#_ApiName_, #_SizeExpression_);\
        DebugPrint("sizeof(%s) = %d\n", #_StructName_, sizeof(_StructName_));\
        DebugPrint("%s = %d\n", #_SizeExpression_, (_SizeExpression_));\
        DebugBreak();\
        return DIERR_INVALIDPARAM;\
    }

#define CHECK_PARAMETER_NOT_NULL(_API_NAME_, _PARAMETER_)\
	if(NULL == _PARAMETER_)\
	{\
		DebugPrint("ERROR: %s was NULL in call to %s\n",  #_PARAMETER_, #_API_NAME_);\
		DebugBreak();\
        return DIERR_INVALIDPARAM;\
    }

#define CHECK_PARAMETER_VALID_INSTANCE_GUID(_API_NAME_, _guidInstance_)\
	if(!IS_VALID_GUID_INSTANCE(_guidInstance_))\
	{\
		DebugPrint("ERROR: %s invalid in call to %s\n",  #_guidInstance_, #_API_NAME_);\
		DebugBreak();\
		return DIERR_INVALIDPARAM;\
	}

/*
**	Definitions for RELEASE builds
**
**
*/

#else		// DBG=0

#define	TRACE_VERBOSE(__x__)
#define	TRACE_WARN(__x__)
#define	TRACE_ERROR(__x__)
#define TRACE(__x__)

#define	ASSERT_MSG(_cond_, _msg_)
#define	ASSERT(_cond_)

#define DEBUG_BREAK()

#define CHECK_STRUCT_SIZE(_SizeExpression_, _StructName_, _ApiName_)\
    if((_SizeExpression_) != sizeof(_StructName_)) return DIERR_INVALIDPARAM;

#define CHECK_PARAMETER_NOT_NULL(_API_NAME_, _PARAMETER_)\
	if(NULL == _PARAMETER_) return DIERR_INVALIDPARAM;

#define CHECK_PARAMETER_VALID_INSTANCE_GUID(_API_NAME_, _guidInstance_)\
	if(!IS_VALID_GUID_INSTANCE(_guidInstance_))	return DIERR_INVALIDPARAM;

#endif	// DBG=?


//===========================================================================
//			End
//===========================================================================

#endif	// __DIDBG_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dmusic\dmband\bandinst.cpp ===
//
// bandinst.cpp
// 
// Copyright (c) 1997-1998 Microsoft Corporation. All rights reserved.
//

#include "pchdmband.h"

//////////////////////////////////////////////////////////////////////
// Class CDownloadedInstrument

//////////////////////////////////////////////////////////////////////
// CDownloadedInstrument::CDownloadedInstrument
#ifdef DXAPI
CDownloadedInstrument::~CDownloadedInstrument()
{
	if(m_pDLInstrument)
	{
		if (m_pPort)
        {
            if (FAILED(m_pPort->UnloadInstrument(m_pDLInstrument)))
            {
                Trace(1,"Error: UnloadInstrument failed\n");    
            }
        }
        m_pDLInstrument->Release();
	}

	if(m_pPort)
	{
		m_pPort->Release();
	}
}
#endif

//////////////////////////////////////////////////////////////////////
// Class CBandInstrument

//////////////////////////////////////////////////////////////////////
// CBandInstrument::CBandInstrument

CBandInstrument::CBandInstrument() 
{
    m_dwPatch = 0;
    m_dwAssignPatch = 0;
    m_bPan = 0;
    m_bVolume = 0;
    m_dwPChannel = 0;
    m_dwFlags = 0;
    m_nTranspose = 0;
    m_fGMOnly = false;
    m_fNotInFile = false;
    m_pIDMCollection = NULL;
    m_dwChannelPriority = 0;
    m_dwFullPatch = 0;
    m_nPitchBendRange = 0;
	ZeroMemory(m_dwNoteRanges, sizeof(m_dwNoteRanges));
}

//////////////////////////////////////////////////////////////////////
// CBandInstrument::~CBandInstrument

CBandInstrument::~CBandInstrument()
{
	if(m_pIDMCollection)
	{
		m_pIDMCollection->Release();
	}
}
#ifdef DXAPI
void CDownloadList::Clear()

{
    CDownloadedInstrument *pDownload;
    while (pDownload = RemoveHead())
    {
        delete pDownload;
    }
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dmusic\dmband\bandinst.h ===
//
// bandinst.h
// 
// Copyright (c) 1997-1999 Microsoft Corporation
//
// Note: Originally written by Robert K. Amenn
//

#ifndef BANDINST_H
#define BANDINST_H

#include "dmusicc.h"
#include "alist.h"

struct IDirectMusicPerformance;
struct IDirectMusicPerformanceP;
struct IDirectMusicAudioPath;
class CBandInstrumentList;
class CBand;
class CBandTrk;
#ifdef DXAPI
class CDownloadedInstrument : public AListItem
{
public:
	CDownloadedInstrument() 
    {
	    m_pDLInstrument = NULL; 
	    m_pPort = NULL; 
	    m_cRef = 1;
    }
	~CDownloadedInstrument();
	CDownloadedInstrument* GetNext(){return(CDownloadedInstrument*)AListItem::GetNext();}

public:
	IDirectMusicDownloadedInstrument* m_pDLInstrument;
	IDirectMusicPort*				  m_pPort;
	long							  m_cRef;

}; 

class CDownloadList : public AList
{
public:
	CDownloadList(){}
    ~CDownloadList() { Clear(); }
    void Clear();
    CDownloadedInstrument* GetHead(){return(CDownloadedInstrument *)AList::GetHead();}
	CDownloadedInstrument* GetItem(LONG lIndex){return(CDownloadedInstrument*)AList::GetItem(lIndex);}
    CDownloadedInstrument* RemoveHead(){return(CDownloadedInstrument *)AList::RemoveHead();}
	void Remove(CDownloadedInstrument* pDownloadedInstrument){AList::Remove((AListItem *)pDownloadedInstrument);}
	void AddTail(CDownloadedInstrument* pDownloadedInstrument){AList::AddTail((AListItem *)pDownloadedInstrument);}
};
#endif
//////////////////////////////////////////////////////////////////////
// Class CBandInstrument

class CBandInstrument : public AListItem
{
friend CBand;
friend CBandTrk;

public:
	CBandInstrument();
	~CBandInstrument();
	CBandInstrument* GetNext(){return(CBandInstrument*)AListItem::GetNext();}
#ifdef DXAPI
    HRESULT Download(IDirectMusicPerformanceP *pPerformance, 
                                  IDirectMusicAudioPath *pPath,
                                  DWORD dwMIDIMode);
    HRESULT Unload(IDirectMusicPerformanceP *pPerformance, IDirectMusicAudioPath *pPath);

private:
    HRESULT DownloadAddRecord(IDirectMusicPort *pPort);
    HRESULT BuildNoteRangeArray(DWORD *pNoteRangeMap, DMUS_NOTERANGE **ppNoteRanges, DWORD *pdwNumNoteRanges);
#endif
private:
    DWORD								m_dwPatch;			// Patch used with DLS Collection		
	DWORD								m_dwAssignPatch;	// Patch used with Download overrides m_dwPatch
	DWORD								m_dwChannelPriority;
	BYTE								m_bPan;
	BYTE								m_bVolume;
	short								m_nTranspose;
	BOOL								m_fGMOnly;
	BOOL								m_fNotInFile;
	DWORD								m_dwFullPatch; // if m_fGMOnly is true, this contains the original, premodified, m_dwPatch
	DWORD								m_dwPChannel;
	DWORD								m_dwFlags;
	DWORD								m_dwNoteRanges[4];
	short								m_nPitchBendRange;
	IDirectMusicCollection*				m_pIDMCollection;
#ifdef DXAPI
	CDownloadList                  		m_DownloadList;
#endif
};

//////////////////////////////////////////////////////////////////////
// Class CBandInstrumentList

class CBandInstrumentList : public AList
{
public:
	CBandInstrumentList(){}
    ~CBandInstrumentList() { Clear(); }
    void Clear();
    CBandInstrument* GetHead(){return(CBandInstrument *)AList::GetHead();}
	CBandInstrument* GetItem(LONG lIndex){return(CBandInstrument*)AList::GetItem(lIndex);}
    CBandInstrument* RemoveHead(){return(CBandInstrument *)AList::RemoveHead();}
	void Remove(CBandInstrument* pBandInstrument){AList::Remove((AListItem *)pBandInstrument);}
	void AddTail(CBandInstrument* pBandInstrument){AList::AddTail((AListItem *)pBandInstrument);}
};


#ifdef DXAPI
// CDestination keeps track of which performance or audiopath the band was downloaded to.

class CDestination : public AListItem
{
public:
	CBandInstrument* GetNext(){return(CBandInstrument*)AListItem::GetNext();}
    IUnknown *          m_pDestination; // Performance or audiopath this download was sent to. This is a weak reference, no AddRef.
};

class CDestinationList : public AList
{
public:
	CDestinationList(){}
    ~CDestinationList() { Clear(); }
    void Clear();
    CDestination* GetHead(){return(CDestination *)AList::GetHead();}
	CDestination* GetItem(LONG lIndex){return(CDestination*)AList::GetItem(lIndex);}
    CDestination* RemoveHead(){return(CDestination *)AList::RemoveHead();}
	void Remove(CDestination* pDestination){AList::Remove((AListItem *)pDestination);}
	void AddTail(CDestination* pDestination){AList::AddTail((AListItem *)pDestination);}
};
#endif

#endif // #ifndef BANDINST_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dmusic\dmband\bandtrk.h ===
//
// bandtrk.h
// 
// Copyright (c) 1997-2000 Microsoft Corporation
//

#ifndef BANDTRK_H
#define BANDTRK_H

#include "dmbndtrk.h"
#include "dmbandp.h"

class SeekEvent;

struct IDirectMusicPerformance;
class CRiffParser;

//////////////////////////////////////////////////////////////////////
// Class CBandTrk

class CBandTrk : public IDirectMusicTrack8, public IDirectMusicBandTrk, public IPersistStream
{
    friend CBand;
public:
	// IUnknown
    //
    STDMETHODIMP QueryInterface(const IID &iid, void **ppv);
    STDMETHODIMP_(ULONG) AddRef();
    STDMETHODIMP_(ULONG) Release();

    // IPersist
    STDMETHODIMP GetClassID(CLSID* pClassID);

    // IPersistStream
    STDMETHODIMP IsDirty() {return S_FALSE;}
    STDMETHODIMP Load(IStream* pStream);
    STDMETHODIMP Save(IStream* pStream, BOOL fClearDirty) {return E_NOTIMPL;}
    STDMETHODIMP GetSizeMax(ULARGE_INTEGER* pcbSize) {return E_NOTIMPL;}

	// IDirectMusicTrack
	STDMETHODIMP Init(IDirectMusicSegment* pSegment);

	STDMETHODIMP InitPlay(IDirectMusicSegmentState* pSegmentState,
						  IDirectMusicPerformance* pPerformance,
						  void** ppStateData,
						  DWORD dwVirtualTrackID,
                          DWORD dwFlags);

	STDMETHODIMP EndPlay(void* pStateData);

	STDMETHODIMP Play(void* pStateData,
					  MUSIC_TIME mtStart,
					  MUSIC_TIME mtEnd,
					  MUSIC_TIME mtOffset,
					  DWORD dwFlags,
					  IDirectMusicPerformance* pPerf, 
					  IDirectMusicSegmentState* pSegSt, 
					  DWORD dwVirtualID);

	STDMETHODIMP GetParam(REFGUID rguidDataType, 
						 MUSIC_TIME mtTime, 
						 MUSIC_TIME* pmtNext,
						 void* pData);

	STDMETHODIMP SetParam(REFGUID rguidDataType, 
						 MUSIC_TIME mtTime, 
						 void* pData);
	
	STDMETHODIMP IsParamSupported(REFGUID rguidDataType);

	STDMETHODIMP AddNotificationType(REFGUID rguidNotify);

	STDMETHODIMP RemoveNotificationType(REFGUID rguidNotify);

	STDMETHODIMP Clone(	MUSIC_TIME mtStart,
						MUSIC_TIME mtEnd,
						IDirectMusicTrack** ppTrack);
// IDirectMusicTrack8 
    STDMETHODIMP PlayEx(void* pStateData,REFERENCE_TIME rtStart, 
                REFERENCE_TIME rtEnd,REFERENCE_TIME rtOffset,
                DWORD dwFlags,IDirectMusicPerformance* pPerf, 
                IDirectMusicSegmentState* pSegSt,DWORD dwVirtualID) ; 
    STDMETHODIMP GetParamEx(REFGUID rguidType,REFERENCE_TIME rtTime, 
                REFERENCE_TIME* prtNext,void* pParam,void * pStateData, DWORD dwFlags) ; 
    STDMETHODIMP SetParamEx(REFGUID rguidType,REFERENCE_TIME rtTime,void* pParam, void * pStateData, DWORD dwFlags) ;
    STDMETHODIMP Compose(IUnknown* pContext, 
		DWORD dwTrackGroup,
		IDirectMusicTrack** ppResultTrack) ;
    STDMETHODIMP Join(IDirectMusicTrack* pNewTrack,
		MUSIC_TIME mtJoin,
		IUnknown* pContext,
		DWORD dwTrackGroup,
		IDirectMusicTrack** ppResultTrack) ;

	// IDirectMusicCommon
	STDMETHODIMP GetName(BSTR* pbstrName);

	// IDirectMusicBandTrk (Private Interface)
	STDMETHODIMP AddBand(DMUS_IO_PATCH_ITEM* BandEvent);
	STDMETHODIMP AddBand(IDirectMusicBand* pIDMBand);
#ifdef DXAPI
	STDMETHODIMP SetGMGSXGMode(MUSIC_TIME mtTime, DWORD dwMidiMode)
	{
		TListItem<StampedGMGSXG>* pPair = new TListItem<StampedGMGSXG>;
		if (!pPair) return E_OUTOFMEMORY;
		pPair->GetItemValue().mtTime = mtTime;
		pPair->GetItemValue().dwMidiMode = dwMidiMode;

		TListItem<StampedGMGSXG>* pScan = m_MidiModeList.GetHead();
		TListItem<StampedGMGSXG>* pPrev = NULL;
		
		if(!pScan)
		{
			// Empty list
			m_MidiModeList.AddHead(pPair);
		}
		else
		{
			while(pScan && pPair->GetItemValue().mtTime > pScan->GetItemValue().mtTime)
			{
				pPrev = pScan;
				pScan = pScan->GetNext();
			}	
			
			if(pPrev)
			{
				// Insert in the middle or end of list
				pPair->SetNext(pScan);
				pPrev->SetNext(pPair);
			}
			else
			{
				// Insert at beginning
				m_MidiModeList.AddHead(pPair);
			}
		}

		CBand* pBand = BandList.GetHead();
		for(; pBand; pBand = pBand->GetNext())
		{
			// only set bands affected by new mode
			if ( (pBand->m_lTimeLogical >= pPair->GetItemValue().mtTime) &&
				 ( !pScan || pBand->m_lTimeLogical < pScan->GetItemValue().mtTime) )
			{
				pBand->SetGMGSXGMode(dwMidiMode);
			}
		}
		return S_OK;
	}
#endif

	// Class
	CBandTrk();
	~CBandTrk();

private:
	HRESULT BuildDirectMusicBandList(CRiffParser *pParser);
	

	HRESULT  ExtractBand(CRiffParser *pParser);

	HRESULT LoadBand(IStream *pIStream, CBand* pBand);

	HRESULT LoadClone(IDirectMusicBandTrk* pBandTrack,
					  MUSIC_TIME mtStart, 
					  MUSIC_TIME mtEnd);

	HRESULT InsertBand(CBand* pNewBand);
	HRESULT Seek(CBandTrkStateData* pBandTrkStateData,
				 MUSIC_TIME mtStart, 
				 MUSIC_TIME mtOffset,
				 REFERENCE_TIME rtOffset,
				 bool fClockTime);

	HRESULT FindSEReplaceInstr(TList<SeekEvent>& SEList,
							   DWORD dwPChannel,
							   CBandInstrument* pInstrument);

	// Shared implentation of play for either music or clock time.
    HRESULT PlayMusicOrClock(
        void *pStateData,	
        MUSIC_TIME mtStart,	
        MUSIC_TIME mtEnd,
        MUSIC_TIME mtOffset,
        REFERENCE_TIME rtOffset,
	    DWORD dwFlags,		
	    IDirectMusicPerformance* pPerf,	
	    IDirectMusicSegmentState* pSegSt,
	    DWORD dwVirtualID,
        bool fClockTime);

	HRESULT CBandTrk::JoinInternal(
		IDirectMusicTrack* pNewTrack,
		MUSIC_TIME mtJoin,
		DWORD dwTrackGroup);

private:
    CMemTrack               m_MemTrack;
	CRITICAL_SECTION m_CriticalSection;
    BOOL m_fCSInitialized;
	DWORD m_dwValidate; // used to validate state data
	CBandList BandList;
#ifdef DXAPI
	bool m_bAutoDownload;
	bool m_fLockAutoDownload; // if true, this flag indicates that we've specifically
								// commanded the band to autodownload. Otherwise,
								// it gets its preference from the performance via
								// GetGlobalParam.
	TList<StampedGMGSXG> m_MidiModeList; // List of time-stamped midi mode messages
#endif
    DWORD m_dwFlags;
	long m_cRef;
};

//////////////////////////////////////////////////////////////////////
// Class BandTrkStateData

class CBandTrkStateData
{
public: 
	CBandTrkStateData() : 
	m_pSegmentState(NULL),
	m_pPerformance(NULL),
	m_pNextBandToSPE(NULL),
	m_fPlayPreviousInSeek(FALSE),
	m_dwVirtualTrackID(0),
	dwValidate(0){}

	~CBandTrkStateData(){}

public:		
	IDirectMusicSegmentState*	m_pSegmentState;
	IDirectMusicPerformance*	m_pPerformance;
	IDirectMusicBand*			m_pNextBandToSPE;
	DWORD						m_dwVirtualTrackID;
	BOOL						m_fPlayPreviousInSeek;
	DWORD						dwValidate;
};

//////////////////////////////////////////////////////////////////////
// Class SeekEvent

class SeekEvent
{
public:
	SeekEvent() :
	m_pParentBand(NULL),
	m_pInstrument(NULL),
	m_dwPChannel(0) {}
	
	~SeekEvent(){}

public:
	CBand*	m_pParentBand;
	CBandInstrument*	m_pInstrument;
	DWORD				m_dwPChannel;
};

#endif // #ifndef BANDTRK_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dmusic\dmband\dmband.cpp ===
//
// dmband.cpp
// 
// Copyright (c) 1997-1999 Microsoft Corporation
//

#include "pchdmband.h"

extern long g_cComponent;

//////////////////////////////////////////////////////////////////////
// Class CBand

//////////////////////////////////////////////////////////////////////
// CBand::CBand

CBand::CBand() : m_MemTrack(DMTRACK_BAND)
{
    m_lTimeLogical = 0;
    m_lTimePhysical = 0;
    m_dwFlags = 0;
    m_dwGroupBits = 0xffffffff;
    m_dwMidiMode = 0;
    m_cRef = 1;
    m_fCSInitialized = FALSE;
	IncrementDLLCount();
    // Do this first since it can throw an exception
    //
	InitializeCriticalSection(&m_CriticalSection);
    m_fCSInitialized = TRUE;
//    m_dwValidData = 0;
}

//////////////////////////////////////////////////////////////////////
// CBand::~CBand

CBand::~CBand()
{
    if (m_fCSInitialized)
    {
    	m_BandInstrumentList.Clear();
	    DeleteCriticalSection(&m_CriticalSection);	
    }
	
	DecrementDLLCount();
}

void CBandInstrumentList::Clear()

{
    CBandInstrument* pBandInstrument;
	while(pBandInstrument = RemoveHead())
	{
		delete pBandInstrument;
	}
}

//////////////////////////////////////////////////////////////////////
// IUnknown

//////////////////////////////////////////////////////////////////////
// CBand::QueryInterface

STDMETHODIMP 
CBand::QueryInterface(const IID &iid, void **ppv)
{
	V_INAME(CBand::QueryInterface);
	V_PTRPTR_WRITE(ppv);
	V_REFGUID(iid);

	*ppv = NULL;

	if(iid == IID_IUnknown || iid == IID_IDirectMusicBand)
	{
		*ppv = static_cast<IDirectMusicBand*>(this);
	} 
#ifdef DXAPI
	else if(iid == IID_IDirectMusicBandP)
	{
		*ppv = static_cast<IDirectMusicBandP*>(this);
	}
#endif
	else if(iid == IID_IDirectMusicBandPrivate)
	{
		*ppv = static_cast<IDirectMusicBandPrivate*>(this);
	}
	else if(iid == IID_IDirectMusicObject)
	{
		*ppv = static_cast<IDirectMusicObject*>(this);
	}
	else if(iid == IID_IPersistStream)
	{
		*ppv = static_cast<IPersistStream*>(this);
	}
	else if(iid == IID_IPersist)
	{
		*ppv = static_cast<IPersist*>(this);
	}

	if (*ppv == NULL)
		return E_NOINTERFACE;
    
	reinterpret_cast<IUnknown*>(this)->AddRef();
    
	return S_OK;
}

//////////////////////////////////////////////////////////////////////
// CBand::AddRef

STDMETHODIMP_(ULONG)
CBand::AddRef()
{
    return InterlockedIncrement(&m_cRef);
}

//////////////////////////////////////////////////////////////////////
// CBand::Release

STDMETHODIMP_(ULONG)
CBand::Release()
{
    if (!InterlockedDecrement(&m_cRef)) 
	{
		m_cRef = 100; // artificial reference count to prevent reentrency due to COM aggregation
        delete this;
        return 0;
    }

    return m_cRef;
}

//////////////////////////////////////////////////////////////////////
// IPersistStream

//////////////////////////////////////////////////////////////////////
// CBand::Load

STDMETHODIMP CBand::Load(IStream* pStream)
{
	V_INAME(CBand::Load);
	V_PTR_READ(pStream, IStream);

    // Get the loader from stream if it has one
	// 