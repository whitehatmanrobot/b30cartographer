      this.Manager.Comment("reaching state \'S4872\'");
            string temp1933;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length251,NoHeader)\'");
            temp1933 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S6825\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1933 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S6825)", TestManagerHelpers.Describe(temp1933)));
            this.Manager.Comment("reaching state \'S7802\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1934
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1934() {
            this.Manager.BeginTest("BVTsS1934");
            this.Manager.Comment("reaching state \'S1934\'");
            string temp1934;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1934 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1935\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1934 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1935)", TestManagerHelpers.Describe(temp1934)));
            this.Manager.Comment("reaching state \'S4873\'");
            string temp1935;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length0,CorrectHeader)" +
                    "\'");
            temp1935 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S6826\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp1935 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S6826)", TestManagerHelpers.Describe(temp1935)));
            this.Manager.Comment("reaching state \'S7803\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1936
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1936() {
            this.Manager.BeginTest("BVTsS1936");
            this.Manager.Comment("reaching state \'S1936\'");
            string temp1936;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1936 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1937\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1936 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1937)", TestManagerHelpers.Describe(temp1936)));
            this.Manager.Comment("reaching state \'S4874\'");
            string temp1937;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length0,CorrectHeade" +
                    "r)\'");
            temp1937 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S6827\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp1937 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S6827)", TestManagerHelpers.Describe(temp1937)));
            this.Manager.Comment("reaching state \'S7804\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1938
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1938() {
            this.Manager.BeginTest("BVTsS1938");
            this.Manager.Comment("reaching state \'S1938\'");
            string temp1938;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1938 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1939\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1938 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1939)", TestManagerHelpers.Describe(temp1938)));
            this.Manager.Comment("reaching state \'S4875\'");
            string temp1939;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length0,NoHeader)\'");
            temp1939 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S6828\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1939 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S6828)", TestManagerHelpers.Describe(temp1939)));
            this.Manager.Comment("reaching state \'S7805\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1940
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1940() {
            this.Manager.BeginTest("BVTsS1940");
            this.Manager.Comment("reaching state \'S1940\'");
            string temp1940;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1940 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1941\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1940 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1941)", TestManagerHelpers.Describe(temp1940)));
            this.Manager.Comment("reaching state \'S4876\'");
            string temp1941;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length0,NoHeader)\'");
            temp1941 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S6829\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1941 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S6829)", TestManagerHelpers.Describe(temp1941)));
            this.Manager.Comment("reaching state \'S7806\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1942
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1942() {
            this.Manager.BeginTest("BVTsS1942");
            this.Manager.Comment("reaching state \'S1942\'");
            string temp1942;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1942 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1943\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1942 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1943)", TestManagerHelpers.Describe(temp1942)));
            this.Manager.Comment("reaching state \'S4877\'");
            string temp1943;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length0,WrongHeader)\'");
            temp1943 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S6830\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1943 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S6830)", TestManagerHelpers.Describe(temp1943)));
            this.Manager.Comment("reaching state \'S7807\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1944
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1944() {
            this.Manager.BeginTest("BVTsS1944");
            this.Manager.Comment("reaching state \'S1944\'");
            string temp1944;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1944 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1945\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1944 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1945)", TestManagerHelpers.Describe(temp1944)));
            this.Manager.Comment("reaching state \'S4878\'");
            string temp1945;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length0,WrongHeader)\'");
            temp1945 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S6831\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1945 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S6831)", TestManagerHelpers.Describe(temp1945)));
            this.Manager.Comment("reaching state \'S7808\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1946
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1946() {
            this.Manager.BeginTest("BVTsS1946");
            this.Manager.Comment("reaching state \'S1946\'");
            string temp1946;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1946 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1947\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1946 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1947)", TestManagerHelpers.Describe(temp1946)));
            this.Manager.Comment("reaching state \'S4879\'");
            string temp1947;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length0,WrongHeader)" +
                    "\'");
            temp1947 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S6832\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1947 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S6832)", TestManagerHelpers.Describe(temp1947)));
            this.Manager.Comment("reaching state \'S7809\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1948
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1948() {
            this.Manager.BeginTest("BVTsS1948");
            this.Manager.Comment("reaching state \'S1948\'");
            string temp1948;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1948 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1949\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1948 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1949)", TestManagerHelpers.Describe(temp1948)));
            this.Manager.Comment("reaching state \'S4880\'");
            string temp1949;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length0,CorrectHeader)\'");
            temp1949 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S6833\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp1949 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S6833)", TestManagerHelpers.Describe(temp1949)));
            this.Manager.Comment("reaching state \'S7810\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1950
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1950() {
            this.Manager.BeginTest("BVTsS1950");
            this.Manager.Comment("reaching state \'S1950\'");
            string temp1950;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1950 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1951\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1950 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1951)", TestManagerHelpers.Describe(temp1950)));
            this.Manager.Comment("reaching state \'S4881\'");
            string temp1951;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length0,WrongHeader)\'");
            temp1951 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S6834\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1951 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S6834)", TestManagerHelpers.Describe(temp1951)));
            this.Manager.Comment("reaching state \'S7811\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1952
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1952() {
            this.Manager.BeginTest("BVTsS1952");
            this.Manager.Comment("reaching state \'S1952\'");
            string temp1952;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,NoHeader)\'");
            temp1952 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1953\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1952 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1953)", TestManagerHelpers.Describe(temp1952)));
            this.Manager.Comment("reaching state \'S4882\'");
            string temp1953;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length0,NoHeader)\'");
            temp1953 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S6835\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1953 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S6835)", TestManagerHelpers.Describe(temp1953)));
            this.Manager.Comment("reaching state \'S7812\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1954
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1954() {
            this.Manager.BeginTest("BVTsS1954");
            this.Manager.Comment("reaching state \'S1954\'");
            string temp1954;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,New,Length50,NoHeader)\'");
            temp1954 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1955\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1954 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1955)", TestManagerHelpers.Describe(temp1954)));
            this.Manager.Comment("reaching state \'S4883\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1956
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1956() {
            this.Manager.BeginTest("BVTsS1956");
            this.Manager.Comment("reaching state \'S1956\'");
            string temp1955;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,CorrectHeader)\'");
            temp1955 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1957\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp1955 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S1957)", TestManagerHelpers.Describe(temp1955)));
            this.Manager.Comment("reaching state \'S4884\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1958
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1958() {
            this.Manager.BeginTest("BVTsS1958");
            this.Manager.Comment("reaching state \'S1958\'");
            string temp1956;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,New,Length50,CorrectHeader)\'");
            temp1956 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1959\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp1956 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S1959)", TestManagerHelpers.Describe(temp1956)));
            this.Manager.Comment("reaching state \'S4885\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1960
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1960() {
            this.Manager.BeginTest("BVTsS1960");
            this.Manager.Comment("reaching state \'S1960\'");
            string temp1957;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,Existing,Length50,CorrectHeader)\'");
            temp1957 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1961\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp1957 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S1961)", TestManagerHelpers.Describe(temp1957)));
            this.Manager.Comment("reaching state \'S4886\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1962
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1962() {
            this.Manager.BeginTest("BVTsS1962");
            this.Manager.Comment("reaching state \'S1962\'");
            string temp1958;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,Existing,Length50,NoHeader)\'");
            temp1958 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1963\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1958 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1963)", TestManagerHelpers.Describe(temp1958)));
            this.Manager.Comment("reaching state \'S4887\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1964
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1964() {
            this.Manager.BeginTest("BVTsS1964");
            this.Manager.Comment("reaching state \'S1964\'");
            string temp1959;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,New,Length50,NoHeader)\'");
            temp1959 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1965\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1959 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1965)", TestManagerHelpers.Describe(temp1959)));
            this.Manager.Comment("reaching state \'S4888\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1966
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1966() {
            this.Manager.BeginTest("BVTsS1966");
            this.Manager.Comment("reaching state \'S1966\'");
            string temp1960;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,New,Length50,WrongHeader)\'");
            temp1960 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S1967\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1960 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1967)", TestManagerHelpers.Describe(temp1960)));
            this.Manager.Comment("reaching state \'S4889\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1968
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1968() {
            this.Manager.BeginTest("BVTsS1968");
            this.Manager.Comment("reaching state \'S1968\'");
            string temp1961;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,Existing,Length50,WrongHeader)\'");
            temp1961 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S1969\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1961 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1969)", TestManagerHelpers.Describe(temp1961)));
            this.Manager.Comment("reaching state \'S4890\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1970
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1970() {
            this.Manager.BeginTest("BVTsS1970");
            this.Manager.Comment("reaching state \'S1970\'");
            string temp1962;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,WrongHeader)\'");
            temp1962 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S1971\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1962 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1971)", TestManagerHelpers.Describe(temp1962)));
            this.Manager.Comment("reaching state \'S4891\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1972
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1972() {
            this.Manager.BeginTest("BVTsS1972");
            this.Manager.Comment("reaching state \'S1972\'");
            string temp1963;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,New,Length50,WrongHeader)\'");
            temp1963 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S1973\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1963 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveAudioEncoding, stat" +
                        "e S1973)", TestManagerHelpers.Describe(temp1963)));
            this.Manager.Comment("reaching state \'S4892\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1974
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1974() {
            this.Manager.BeginTest("BVTsS1974");
            this.Manager.Comment("reaching state \'S1974\'");
            string temp1964;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,New,Length50,CorrectHeader)\'");
            temp1964 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1975\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp1964 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S1975)", TestManagerHelpers.Describe(temp1964)));
            this.Manager.Comment("reaching state \'S4893\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1976
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1976() {
            this.Manager.BeginTest("BVTsS1976");
            this.Manager.Comment("reaching state \'S1976\'");
            string temp1965;
            this.Manager.Comment("executing step \'call SaveCategory(Add,Existing,Existing,ExistingNotSelf,OnlyOneEl" +
                    "ement,OnlyOneElement,OnlyOneElement,NoHeader)\'");
            temp1965 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1977\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1965 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S19" +
                        "77)", TestManagerHelpers.Describe(temp1965)));
            this.Manager.Comment("reaching state \'S4894\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1978
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1978() {
            this.Manager.BeginTest("BVTsS1978");
            this.Manager.Comment("reaching state \'S1978\'");
            string temp1966;
            this.Manager.Comment("executing step \'call SaveCategory(Add,Existing,Existing,ExistingNotSelf,OnlyOneEl" +
                    "ement,OnlyOneElement,OnlyOneElement,CorrectHeader)\'");
            temp1966 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1979\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"NoError\"\'");
            this.Manager.Assert((temp1966 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveCategory, state S1979)", TestManagerHelpers.Describe(temp1966)));
            this.Manager.Comment("reaching state \'S4895\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1980
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1980() {
            this.Manager.BeginTest("BVTsS1980");
            this.Manager.Comment("reaching state \'S1980\'");
            string temp1967;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,Existing,Existing,ExistingNotSelf,OnlyOn" +
                    "eElement,OnlyOneElement,OnlyOneElement,CorrectHeader)\'");
            temp1967 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1981\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"NotSupportedException\"\'");
            this.Manager.Assert((temp1967 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveCategory, state S" +
                        "1981)", TestManagerHelpers.Describe(temp1967)));
            this.Manager.Comment("reaching state \'S4896\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1982
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1982() {
            this.Manager.BeginTest("BVTsS1982");
            this.Manager.Comment("reaching state \'S1982\'");
            string temp1968;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,Existing,New,ExistingNotSelf,OnlyOneElem" +
                    "ent,OnlyOneElement,OnlyOneElement,CorrectHeader)\'");
            temp1968 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1983\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"ArgumentNullException\"\'");
            this.Manager.Assert((temp1968 == "ArgumentNullException"), String.Format("expected \'\"ArgumentNullException\"\', actual \'{0}\' (return of SaveCategory, state S" +
                        "1983)", TestManagerHelpers.Describe(temp1968)));
            this.Manager.Comment("reaching state \'S4897\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1984
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1984() {
            this.Manager.BeginTest("BVTsS1984");
            this.Manager.Comment("reaching state \'S1984\'");
            string temp1969;
            this.Manager.Comment("executing step \'call SaveCategory(Add,Existing,New,ExistingNotSelf,OnlyOneElement" +
                    ",OnlyOneElement,OnlyOneElement,WrongHeader)\'");
            temp1969 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S1985\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1969 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S19" +
                        "85)", TestManagerHelpers.Describe(temp1969)));
            this.Manager.Comment("reaching state \'S4898\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1986
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1986() {
            this.Manager.BeginTest("BVTsS1986");
            this.Manager.Comment("reaching state \'S1986\'");
            string temp1970;
            this.Manager.Comment("executing step \'call SaveCategory(Add,Existing,Existing,ExistingNotSelf,OnlyOneEl" +
                    "ement,OnlyOneElement,OnlyOneElement,WrongHeader)\'");
            temp1970 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S1987\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1970 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S19" +
                        "87)", TestManagerHelpers.Describe(temp1970)));
            this.Manager.Comment("reaching state \'S4899\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1988
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1988() {
            this.Manager.BeginTest("BVTsS1988");
            this.Manager.Comment("reaching state \'S1988\'");
            string temp1971;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,Existing,Existing,ExistingNotSelf,OnlyOn" +
                    "eElement,OnlyOneElement,OnlyOneElement,NoHeader)\'");
            temp1971 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1989\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1971 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S19" +
                        "89)", TestManagerHelpers.Describe(temp1971)));
            this.Manager.Comment("reaching state \'S4900\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1990
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1990() {
            this.Manager.BeginTest("BVTsS1990");
            this.Manager.Comment("reaching state \'S1990\'");
            string temp1972;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,New,New,ExistingNotSelf,OnlyOneElement,O" +
                    "nlyOneElement,OnlyOneElement,CorrectHeader)\'");
            temp1972 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1991\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"ArgumentNullException\"\'");
            this.Manager.Assert((temp1972 == "ArgumentNullException"), String.Format("expected \'\"ArgumentNullException\"\', actual \'{0}\' (return of SaveCategory, state S" +
                        "1991)", TestManagerHelpers.Describe(temp1972)));
            this.Manager.Comment("reaching state \'S4901\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1992
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1992() {
            this.Manager.BeginTest("BVTsS1992");
            this.Manager.Comment("reaching state \'S1992\'");
            string temp1973;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,New,New,ExistingNotSelf,OnlyOneElement,O" +
                    "nlyOneElement,OnlyOneElement,NoHeader)\'");
            temp1973 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S1993\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1973 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S19" +
                        "93)", TestManagerHelpers.Describe(temp1973)));
            this.Manager.Comment("reaching state \'S4902\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1994
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1994() {
            this.Manager.BeginTest("BVTsS1994");
            this.Manager.Comment("reaching state \'S1994\'");
            string temp1974;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,New,Existing,ExistingNotSelf,OnlyOneElem" +
                    "ent,OnlyOneElement,OnlyOneElement,CorrectHeader)\'");
            temp1974 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1995\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"NotSupportedException\"\'");
            this.Manager.Assert((temp1974 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveCategory, state S" +
                        "1995)", TestManagerHelpers.Describe(temp1974)));
            this.Manager.Comment("reaching state \'S4903\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1996
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1996() {
            this.Manager.BeginTest("BVTsS1996");
            this.Manager.Comment("reaching state \'S1996\'");
            string temp1975;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,New,New,ExistingNotSelf,OnlyOneElement,O" +
                    "nlyOneElement,OnlyOneElement,WrongHeader)\'");
            temp1975 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S1997\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1975 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S19" +
                        "97)", TestManagerHelpers.Describe(temp1975)));
            this.Manager.Comment("reaching state \'S4904\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1998
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS1998() {
            this.Manager.BeginTest("BVTsS1998");
            this.Manager.Comment("reaching state \'S1998\'");
            string temp1976;
            this.Manager.Comment("executing step \'call SaveCategory(Add,New,Existing,ExistingNotSelf,OnlyOneElement" +
                    ",OnlyOneElement,OnlyOneElement,CorrectHeader)\'");
            temp1976 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1999\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"NoError\"\'");
            this.Manager.Assert((temp1976 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveCategory, state S1999)", TestManagerHelpers.Describe(temp1976)));
            this.Manager.Comment("reaching state \'S4905\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2000
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2000() {
            this.Manager.BeginTest("BVTsS2000");
            this.Manager.Comment("reaching state \'S2000\'");
            string temp1977;
            this.Manager.Comment("executing step \'call SaveCategory(Add,New,Existing,ExistingNotSelf,OnlyOneElement" +
                    ",OnlyOneElement,OnlyOneElement,WrongHeader)\'");
            temp1977 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2001\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1977 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "01)", TestManagerHelpers.Describe(temp1977)));
            this.Manager.Comment("reaching state \'S4906\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2002
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2002() {
            this.Manager.BeginTest("BVTsS2002");
            this.Manager.Comment("reaching state \'S2002\'");
            string temp1978;
            this.Manager.Comment("executing step \'call SaveCategory(Add,New,Existing,ExistingNotSelf,OnlyOneElement" +
                    ",OnlyOneElement,OnlyOneElement,NoHeader)\'");
            temp1978 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2003\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1978 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "03)", TestManagerHelpers.Describe(temp1978)));
            this.Manager.Comment("reaching state \'S4907\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2004
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2004() {
            this.Manager.BeginTest("BVTsS2004");
            this.Manager.Comment("reaching state \'S2004\'");
            string temp1979;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,New,Existing,ExistingNotSelf,OnlyOneElem" +
                    "ent,OnlyOneElement,OnlyOneElement,WrongHeader)\'");
            temp1979 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2005\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1979 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "05)", TestManagerHelpers.Describe(temp1979)));
            this.Manager.Comment("reaching state \'S4908\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2006
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2006() {
            this.Manager.BeginTest("BVTsS2006");
            this.Manager.Comment("reaching state \'S2006\'");
            string temp1980;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,Existing,New,ExistingNotSelf,OnlyOneElem" +
                    "ent,OnlyOneElement,OnlyOneElement,WrongHeader)\'");
            temp1980 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2007\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1980 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "07)", TestManagerHelpers.Describe(temp1980)));
            this.Manager.Comment("reaching state \'S4909\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2008
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2008() {
            this.Manager.BeginTest("BVTsS2008");
            this.Manager.Comment("reaching state \'S2008\'");
            string temp1981;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,Existing,New,ExistingNotSelf,OnlyOneElem" +
                    "ent,OnlyOneElement,OnlyOneElement,NoHeader)\'");
            temp1981 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2009\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1981 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "09)", TestManagerHelpers.Describe(temp1981)));
            this.Manager.Comment("reaching state \'S4910\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2010
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2010() {
            this.Manager.BeginTest("BVTsS2010");
            this.Manager.Comment("reaching state \'S2010\'");
            string temp1982;
            this.Manager.Comment("executing step \'call SaveCategory(Add,Existing,New,ExistingNotSelf,OnlyOneElement" +
                    ",OnlyOneElement,OnlyOneElement,NoHeader)\'");
            temp1982 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2011\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1982 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "11)", TestManagerHelpers.Describe(temp1982)));
            this.Manager.Comment("reaching state \'S4911\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2012
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2012() {
            this.Manager.BeginTest("BVTsS2012");
            this.Manager.Comment("reaching state \'S2012\'");
            string temp1983;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,New,Existing,ExistingNotSelf,OnlyOneElem" +
                    "ent,OnlyOneElement,OnlyOneElement,NoHeader)\'");
            temp1983 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2013\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1983 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "13)", TestManagerHelpers.Describe(temp1983)));
            this.Manager.Comment("reaching state \'S4912\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2014
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2014() {
            this.Manager.BeginTest("BVTsS2014");
            this.Manager.Comment("reaching state \'S2014\'");
            string temp1984;
            this.Manager.Comment("executing step \'call SaveCategory(Add,New,New,ExistingNotSelf,OnlyOneElement,Only" +
                    "OneElement,OnlyOneElement,NoHeader)\'");
            temp1984 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2015\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1984 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "15)", TestManagerHelpers.Describe(temp1984)));
            this.Manager.Comment("reaching state \'S4913\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2016
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2016() {
            this.Manager.BeginTest("BVTsS2016");
            this.Manager.Comment("reaching state \'S2016\'");
            string temp1985;
            this.Manager.Comment("executing step \'call SaveCategory(Delete,Existing,Existing,ExistingNotSelf,OnlyOn" +
                    "eElement,OnlyOneElement,OnlyOneElement,WrongHeader)\'");
            temp1985 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.IdType.Existing, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2017\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1985 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "17)", TestManagerHelpers.Describe(temp1985)));
            this.Manager.Comment("reaching state \'S4914\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2018
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2018() {
            this.Manager.BeginTest("BVTsS2018");
            this.Manager.Comment("reaching state \'S2018\'");
            string temp1986;
            this.Manager.Comment("executing step \'call SaveCategory(Add,New,New,ExistingNotSelf,OnlyOneElement,Only" +
                    "OneElement,OnlyOneElement,WrongHeader)\'");
            temp1986 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2019\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1986 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveCategory, state S20" +
                        "19)", TestManagerHelpers.Describe(temp1986)));
            this.Manager.Comment("reaching state \'S4915\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2020
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2020() {
            this.Manager.BeginTest("BVTsS2020");
            this.Manager.Comment("reaching state \'S2020\'");
            string temp1987;
            this.Manager.Comment("executing step \'call SaveCategory(Add,Existing,New,ExistingNotSelf,OnlyOneElement" +
                    ",OnlyOneElement,OnlyOneElement,CorrectHeader)\'");
            temp1987 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2021\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"ArgumentNullException\"\'");
            this.Manager.Assert((temp1987 == "ArgumentNullException"), String.Format("expected \'\"ArgumentNullException\"\', actual \'{0}\' (return of SaveCategory, state S" +
                        "2021)", TestManagerHelpers.Describe(temp1987)));
            this.Manager.Comment("reaching state \'S4916\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2022
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2022() {
            this.Manager.BeginTest("BVTsS2022");
            this.Manager.Comment("reaching state \'S2022\'");
            string temp1988;
            this.Manager.Comment("executing step \'call SaveCategory(Add,New,New,ExistingNotSelf,OnlyOneElement,Only" +
                    "OneElement,OnlyOneElement,CorrectHeader)\'");
            temp1988 = this.ICatalogWebServiceAdapterInstance.SaveCategory(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.IdType.New, InputTypes.TreeParentIdType.ExistingNotSelf, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2023\'");
            this.Manager.Comment("checking step \'return SaveCategory/\"ArgumentNullException\"\'");
            this.Manager.Assert((temp1988 == "ArgumentNullException"), String.Format("expected \'\"ArgumentNullException\"\', actual \'{0}\' (return of SaveCategory, state S" +
                        "2023)", TestManagerHelpers.Describe(temp1988)));
            this.Manager.Comment("reaching state \'S4917\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2024
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2024() {
            this.Manager.BeginTest("BVTsS2024");
            this.Manager.Comment("reaching state \'S2024\'");
            string temp1989;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp1989 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2025\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1989 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S202" +
                        "5)", TestManagerHelpers.Describe(temp1989)));
            this.Manager.Comment("reaching state \'S4918\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2026
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2026() {
            this.Manager.BeginTest("BVTsS2026");
            this.Manager.Comment("reaching state \'S2026\'");
            string temp1990;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp1990 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2027\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp1990 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2027)" +
                        "", TestManagerHelpers.Describe(temp1990)));
            this.Manager.Comment("reaching state \'S4919\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2028
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2028() {
            this.Manager.BeginTest("BVTsS2028");
            this.Manager.Comment("reaching state \'S2028\'");
            string temp1991;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp1991 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2029\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1991 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S202" +
                        "9)", TestManagerHelpers.Describe(temp1991)));
            this.Manager.Comment("reaching state \'S4920\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2030
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2030() {
            this.Manager.BeginTest("BVTsS2030");
            this.Manager.Comment("reaching state \'S2030\'");
            string temp1992;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp1992 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2031\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp1992 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2031)", TestManagerHelpers.Describe(temp1992)));
            this.Manager.Comment("reaching state \'S4921\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2032
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2032() {
            this.Manager.BeginTest("BVTsS2032");
            this.Manager.Comment("reaching state \'S2032\'");
            string temp1993;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp1993 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2033\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1993 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S203" +
                        "3)", TestManagerHelpers.Describe(temp1993)));
            this.Manager.Comment("reaching state \'S4922\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2034
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2034() {
            this.Manager.BeginTest("BVTsS2034");
            this.Manager.Comment("reaching state \'S2034\'");
            string temp1994;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp1994 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2035\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp1994 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2035)", TestManagerHelpers.Describe(temp1994)));
            this.Manager.Comment("reaching state \'S4923\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2036
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2036() {
            this.Manager.BeginTest("BVTsS2036");
            this.Manager.Comment("reaching state \'S2036\'");
            string temp1995;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp1995 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2037\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1995 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S203" +
                        "7)", TestManagerHelpers.Describe(temp1995)));
            this.Manager.Comment("reaching state \'S4924\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2038
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2038() {
            this.Manager.BeginTest("BVTsS2038");
            this.Manager.Comment("reaching state \'S2038\'");
            string temp1996;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp1996 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2039\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1996 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S203" +
                        "9)", TestManagerHelpers.Describe(temp1996)));
            this.Manager.Comment("reaching state \'S4925\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2040
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2040() {
            this.Manager.BeginTest("BVTsS2040");
            this.Manager.Comment("reaching state \'S2040\'");
            string temp1997;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp1997 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2041\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp1997 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2041)" +
                        "", TestManagerHelpers.Describe(temp1997)));
            this.Manager.Comment("reaching state \'S4926\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2042
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2042() {
            this.Manager.BeginTest("BVTsS2042");
            this.Manager.Comment("reaching state \'S2042\'");
            string temp1998;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp1998 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2043\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp1998 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S204" +
                        "3)", TestManagerHelpers.Describe(temp1998)));
            this.Manager.Comment("reaching state \'S4927\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2044
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2044() {
            this.Manager.BeginTest("BVTsS2044");
            this.Manager.Comment("reaching state \'S2044\'");
            string temp1999;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp1999 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2045\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp1999 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2045)", TestManagerHelpers.Describe(temp1999)));
            this.Manager.Comment("reaching state \'S4928\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2046
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2046() {
            this.Manager.BeginTest("BVTsS2046");
            this.Manager.Comment("reaching state \'S2046\'");
            string temp2000;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2000 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2047\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2000 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2047)", TestManagerHelpers.Describe(temp2000)));
            this.Manager.Comment("reaching state \'S4929\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2048
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2048() {
            this.Manager.BeginTest("BVTsS2048");
            this.Manager.Comment("reaching state \'S2048\'");
            string temp2001;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2001 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2049\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2001 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2049)", TestManagerHelpers.Describe(temp2001)));
            this.Manager.Comment("reaching state \'S4930\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2050
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2050() {
            this.Manager.BeginTest("BVTsS2050");
            this.Manager.Comment("reaching state \'S2050\'");
            string temp2002;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp2002 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2051\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2002 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2051)", TestManagerHelpers.Describe(temp2002)));
            this.Manager.Comment("reaching state \'S4931\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2052
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2052() {
            this.Manager.BeginTest("BVTsS2052");
            this.Manager.Comment("reaching state \'S2052\'");
            string temp2003;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2003 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2053\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2003 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2053)" +
                        "", TestManagerHelpers.Describe(temp2003)));
            this.Manager.Comment("reaching state \'S4932\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2054
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2054() {
            this.Manager.BeginTest("BVTsS2054");
            this.Manager.Comment("reaching state \'S2054\'");
            string temp2004;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2004 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2055\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2004 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S205" +
                        "5)", TestManagerHelpers.Describe(temp2004)));
            this.Manager.Comment("reaching state \'S4933\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2056
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2056() {
            this.Manager.BeginTest("BVTsS2056");
            this.Manager.Comment("reaching state \'S2056\'");
            string temp2005;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2005 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2057\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2005 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S205" +
                        "7)", TestManagerHelpers.Describe(temp2005)));
            this.Manager.Comment("reaching state \'S4934\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2058
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2058() {
            this.Manager.BeginTest("BVTsS2058");
            this.Manager.Comment("reaching state \'S2058\'");
            string temp2006;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2006 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2059\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2006 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S205" +
                        "9)", TestManagerHelpers.Describe(temp2006)));
            this.Manager.Comment("reaching state \'S4935\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2060
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2060() {
            this.Manager.BeginTest("BVTsS2060");
            this.Manager.Comment("reaching state \'S2060\'");
            string temp2007;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2007 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2061\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2007 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S206" +
                        "1)", TestManagerHelpers.Describe(temp2007)));
            this.Manager.Comment("reaching state \'S4936\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2062
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2062() {
            this.Manager.BeginTest("BVTsS2062");
            this.Manager.Comment("reaching state \'S2062\'");
            string temp2008;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2008 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2063\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2008 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2063)" +
                        "", TestManagerHelpers.Describe(temp2008)));
            this.Manager.Comment("reaching state \'S4937\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2064
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2064() {
            this.Manager.BeginTest("BVTsS2064");
            this.Manager.Comment("reaching state \'S2064\'");
            string temp2009;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp2009 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2065\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2009 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2065)" +
                        "", TestManagerHelpers.Describe(temp2009)));
            this.Manager.Comment("reaching state \'S4938\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2066
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2066() {
            this.Manager.BeginTest("BVTsS2066");
            this.Manager.Comment("reaching state \'S2066\'");
            string temp2010;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)" +
                    "\'");
            temp2010 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2067\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2010 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2067)" +
                        "", TestManagerHelpers.Describe(temp2010)));
            this.Manager.Comment("reaching state \'S4939\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2068
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2068() {
            this.Manager.BeginTest("BVTsS2068");
            this.Manager.Comment("reaching state \'S2068\'");
            string temp2011;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,Existing,Today,Future,Length2" +
                    "55,Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp2011 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2069\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2011 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S206" +
                        "9)", TestManagerHelpers.Describe(temp2011)));
            this.Manager.Comment("reaching state \'S4940\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2070
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2070() {
            this.Manager.BeginTest("BVTsS2070");
            this.Manager.Comment("reaching state \'S2070\'");
            string temp2012;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp2012 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2071\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2012 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S207" +
                        "1)", TestManagerHelpers.Describe(temp2012)));
            this.Manager.Comment("reaching state \'S4941\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2072
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2072() {
            this.Manager.BeginTest("BVTsS2072");
            this.Manager.Comment("reaching state \'S2072\'");
            string temp2013;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,New,Today,Future,Length255,Le" +
                    "ngth2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp2013 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2073\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2013 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S207" +
                        "3)", TestManagerHelpers.Describe(temp2013)));
            this.Manager.Comment("reaching state \'S4942\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2074
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2074() {
            this.Manager.BeginTest("BVTsS2074");
            this.Manager.Comment("reaching state \'S2074\'");
            string temp2014;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,New,Today,Future,Length255,Le" +
                    "ngth2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2014 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2075\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2014 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S207" +
                        "5)", TestManagerHelpers.Describe(temp2014)));
            this.Manager.Comment("reaching state \'S4943\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2076
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2076() {
            this.Manager.BeginTest("BVTsS2076");
            this.Manager.Comment("reaching state \'S2076\'");
            string temp2015;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2015 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2077\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2015 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S207" +
                        "7)", TestManagerHelpers.Describe(temp2015)));
            this.Manager.Comment("reaching state \'S4944\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2078
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2078() {
            this.Manager.BeginTest("BVTsS2078");
            this.Manager.Comment("reaching state \'S2078\'");
            string temp2016;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2016 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2079\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2016 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S207" +
                        "9)", TestManagerHelpers.Describe(temp2016)));
            this.Manager.Comment("reaching state \'S4945\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2080
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2080() {
            this.Manager.BeginTest("BVTsS2080");
            this.Manager.Comment("reaching state \'S2080\'");
            string temp2017;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2017 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2081\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2017 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S208" +
                        "1)", TestManagerHelpers.Describe(temp2017)));
            this.Manager.Comment("reaching state \'S4946\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2082
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2082() {
            this.Manager.BeginTest("BVTsS2082");
            this.Manager.Comment("reaching state \'S2082\'");
            string temp2018;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,Existing,Today,Future,Length2" +
                    "55,Length2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2018 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2083\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2018 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S208" +
                        "3)", TestManagerHelpers.Describe(temp2018)));
            this.Manager.Comment("reaching state \'S4947\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2084
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2084() {
            this.Manager.BeginTest("BVTsS2084");
            this.Manager.Comment("reaching state \'S2084\'");
            string temp2019;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2019 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2085\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2019 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S208" +
                        "5)", TestManagerHelpers.Describe(temp2019)));
            this.Manager.Comment("reaching state \'S4948\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2086
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2086() {
            this.Manager.BeginTest("BVTsS2086");
            this.Manager.Comment("reaching state \'S2086\'");
            string temp2020;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2020 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2087\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2020 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S208" +
                        "7)", TestManagerHelpers.Describe(temp2020)));
            this.Manager.Comment("reaching state \'S4949\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2088
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2088() {
            this.Manager.BeginTest("BVTsS2088");
            this.Manager.Comment("reaching state \'S2088\'");
            string temp2021;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2021 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2089\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2021 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S208" +
                        "9)", TestManagerHelpers.Describe(temp2021)));
            this.Manager.Comment("reaching state \'S4950\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2090
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2090() {
            this.Manager.BeginTest("BVTsS2090");
            this.Manager.Comment("reaching state \'S2090\'");
            string temp2022;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2022 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2091\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2022 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S209" +
                        "1)", TestManagerHelpers.Describe(temp2022)));
            this.Manager.Comment("reaching state \'S4951\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2092
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2092() {
            this.Manager.BeginTest("BVTsS2092");
            this.Manager.Comment("reaching state \'S2092\'");
            string temp2023;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,Existing,Today,Future,Length2" +
                    "55,Length2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2023 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2093\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2023 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S209" +
                        "3)", TestManagerHelpers.Describe(temp2023)));
            this.Manager.Comment("reaching state \'S4952\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2094
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2094() {
            this.Manager.BeginTest("BVTsS2094");
            this.Manager.Comment("reaching state \'S2094\'");
            string temp2024;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,New,Today,Future,Length255,Le" +
                    "ngth2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2024 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2095\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2024 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S209" +
                        "5)", TestManagerHelpers.Describe(temp2024)));
            this.Manager.Comment("reaching state \'S4953\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2096
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2096() {
            this.Manager.BeginTest("BVTsS2096");
            this.Manager.Comment("reaching state \'S2096\'");
            string temp2025;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2025 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2097\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2025 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2097)" +
                        "", TestManagerHelpers.Describe(temp2025)));
            this.Manager.Comment("reaching state \'S4954\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2098
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2098() {
            this.Manager.BeginTest("BVTsS2098");
            this.Manager.Comment("reaching state \'S2098\'");
            string temp2026;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2026 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2099\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2026 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2099)", TestManagerHelpers.Describe(temp2026)));
            this.Manager.Comment("reaching state \'S4955\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2100() {
            this.Manager.BeginTest("BVTsS2100");
            this.Manager.Comment("reaching state \'S2100\'");
            string temp2027;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2027 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2101\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2027 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2101)", TestManagerHelpers.Describe(temp2027)));
            this.Manager.Comment("reaching state \'S4956\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2102() {
            this.Manager.BeginTest("BVTsS2102");
            this.Manager.Comment("reaching state \'S2102\'");
            string temp2028;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2028 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2103\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2028 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2103)", TestManagerHelpers.Describe(temp2028)));
            this.Manager.Comment("reaching state \'S4957\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2104() {
            this.Manager.BeginTest("BVTsS2104");
            this.Manager.Comment("reaching state \'S2104\'");
            string temp2029;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2029 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2105\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2029 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2105)", TestManagerHelpers.Describe(temp2029)));
            this.Manager.Comment("reaching state \'S4958\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2106() {
            this.Manager.BeginTest("BVTsS2106");
            this.Manager.Comment("reaching state \'S2106\'");
            string temp2030;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2030 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2107\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2030 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S210" +
                        "7)", TestManagerHelpers.Describe(temp2030)));
            this.Manager.Comment("reaching state \'S4959\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2108() {
            this.Manager.BeginTest("BVTsS2108");
            this.Manager.Comment("reaching state \'S2108\'");
            string temp2031;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2031 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2109\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2031 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S210" +
                        "9)", TestManagerHelpers.Describe(temp2031)));
            this.Manager.Comment("reaching state \'S4960\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2110() {
            this.Manager.BeginTest("BVTsS2110");
            this.Manager.Comment("reaching state \'S2110\'");
            string temp2032;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2032 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2111\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2032 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2111)" +
                        "", TestManagerHelpers.Describe(temp2032)));
            this.Manager.Comment("reaching state \'S4961\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2112() {
            this.Manager.BeginTest("BVTsS2112");
            this.Manager.Comment("reaching state \'S2112\'");
            string temp2033;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2033 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2113\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2033 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S211" +
                        "3)", TestManagerHelpers.Describe(temp2033)));
            this.Manager.Comment("reaching state \'S4962\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2114() {
            this.Manager.BeginTest("BVTsS2114");
            this.Manager.Comment("reaching state \'S2114\'");
            string temp2034;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2034 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2115\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2034 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2115)", TestManagerHelpers.Describe(temp2034)));
            this.Manager.Comment("reaching state \'S4963\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2116() {
            this.Manager.BeginTest("BVTsS2116");
            this.Manager.Comment("reaching state \'S2116\'");
            string temp2035;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2035 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2117\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2035 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2117)", TestManagerHelpers.Describe(temp2035)));
            this.Manager.Comment("reaching state \'S4964\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2118() {
            this.Manager.BeginTest("BVTsS2118");
            this.Manager.Comment("reaching state \'S2118\'");
            string temp2036;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp2036 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2119\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2036 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S211" +
                        "9)", TestManagerHelpers.Describe(temp2036)));
            this.Manager.Comment("reaching state \'S4965\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2120() {
            this.Manager.BeginTest("BVTsS2120");
            this.Manager.Comment("reaching state \'S2120\'");
            string temp2037;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2037 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2121\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2037 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2121)", TestManagerHelpers.Describe(temp2037)));
            this.Manager.Comment("reaching state \'S4966\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2122() {
            this.Manager.BeginTest("BVTsS2122");
            this.Manager.Comment("reaching state \'S2122\'");
            string temp2038;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2038 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2123\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2038 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2123)", TestManagerHelpers.Describe(temp2038)));
            this.Manager.Comment("reaching state \'S4967\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2124() {
            this.Manager.BeginTest("BVTsS2124");
            this.Manager.Comment("reaching state \'S2124\'");
            string temp2039;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2039 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2125\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2039 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S212" +
                        "5)", TestManagerHelpers.Describe(temp2039)));
            this.Manager.Comment("reaching state \'S4968\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2126() {
            this.Manager.BeginTest("BVTsS2126");
            this.Manager.Comment("reaching state \'S2126\'");
            string temp2040;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2040 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2127\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2040 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S212" +
                        "7)", TestManagerHelpers.Describe(temp2040)));
            this.Manager.Comment("reaching state \'S4969\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2128() {
            this.Manager.BeginTest("BVTsS2128");
            this.Manager.Comment("reaching state \'S2128\'");
            string temp2041;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2041 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2129\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2041 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S212" +
                        "9)", TestManagerHelpers.Describe(temp2041)));
            this.Manager.Comment("reaching state \'S4970\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2130() {
            this.Manager.BeginTest("BVTsS2130");
            this.Manager.Comment("reaching state \'S2130\'");
            string temp2042;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp2042 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2131\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2042 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S213" +
                        "1)", TestManagerHelpers.Describe(temp2042)));
            this.Manager.Comment("reaching state \'S4971\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2132() {
            this.Manager.BeginTest("BVTsS2132");
            this.Manager.Comment("reaching state \'S2132\'");
            string temp2043;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp2043 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2133\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2043 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S213" +
                        "3)", TestManagerHelpers.Describe(temp2043)));
            this.Manager.Comment("reaching state \'S4972\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2134() {
            this.Manager.BeginTest("BVTsS2134");
            this.Manager.Comment("reaching state \'S2134\'");
            string temp2044;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,Existing,Today,Future,Length2" +
                    "55,Length2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'" +
                    "");
            temp2044 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2135\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2044 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S213" +
                        "5)", TestManagerHelpers.Describe(temp2044)));
            this.Manager.Comment("reaching state \'S4973\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2136() {
            this.Manager.BeginTest("BVTsS2136");
            this.Manager.Comment("reaching state \'S2136\'");
            string temp2045;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2045 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2137\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2045 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S213" +
                        "7)", TestManagerHelpers.Describe(temp2045)));
            this.Manager.Comment("reaching state \'S4974\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2138() {
            this.Manager.BeginTest("BVTsS2138");
            this.Manager.Comment("reaching state \'S2138\'");
            string temp2046;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2046 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2139\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2046 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S213" +
                        "9)", TestManagerHelpers.Describe(temp2046)));
            this.Manager.Comment("reaching state \'S4975\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2140() {
            this.Manager.BeginTest("BVTsS2140");
            this.Manager.Comment("reaching state \'S2140\'");
            string temp2047;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp2047 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2141\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2047 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S214" +
                        "1)", TestManagerHelpers.Describe(temp2047)));
            this.Manager.Comment("reaching state \'S4976\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2142() {
            this.Manager.BeginTest("BVTsS2142");
            this.Manager.Comment("reaching state \'S2142\'");
            string temp2048;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp2048 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2143\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2048 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S214" +
                        "3)", TestManagerHelpers.Describe(temp2048)));
            this.Manager.Comment("reaching state \'S4977\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2144() {
            this.Manager.BeginTest("BVTsS2144");
            this.Manager.Comment("reaching state \'S2144\'");
            string temp2049;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2049 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2145\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2049 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S214" +
                        "5)", TestManagerHelpers.Describe(temp2049)));
            this.Manager.Comment("reaching state \'S4978\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2146() {
            this.Manager.BeginTest("BVTsS2146");
            this.Manager.Comment("reaching state \'S2146\'");
            string temp2050;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2050 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2147\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2050 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S214" +
                        "7)", TestManagerHelpers.Describe(temp2050)));
            this.Manager.Comment("reaching state \'S4979\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2148() {
            this.Manager.BeginTest("BVTsS2148");
            this.Manager.Comment("reaching state \'S2148\'");
            string temp2051;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2051 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2149\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2051 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S214" +
                        "9)", TestManagerHelpers.Describe(temp2051)));
            this.Manager.Comment("reaching state \'S4980\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2150() {
            this.Manager.BeginTest("BVTsS2150");
            this.Manager.Comment("reaching state \'S2150\'");
            string temp2052;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2052 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2151\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2052 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S215" +
                        "1)", TestManagerHelpers.Describe(temp2052)));
            this.Manager.Comment("reaching state \'S4981\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2152() {
            this.Manager.BeginTest("BVTsS2152");
            this.Manager.Comment("reaching state \'S2152\'");
            string temp2053;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2053 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2153\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2053 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S215" +
                        "3)", TestManagerHelpers.Describe(temp2053)));
            this.Manager.Comment("reaching state \'S4982\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2154() {
            this.Manager.BeginTest("BVTsS2154");
            this.Manager.Comment("reaching state \'S2154\'");
            string temp2054;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2054 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2155\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2054 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S215" +
                        "5)", TestManagerHelpers.Describe(temp2054)));
            this.Manager.Comment("reaching state \'S4983\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2156() {
            this.Manager.BeginTest("BVTsS2156");
            this.Manager.Comment("reaching state \'S2156\'");
            string temp2055;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,New,Today,Future,Length255,Le" +
                    "ngth2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2055 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2157\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2055 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S215" +
                        "7)", TestManagerHelpers.Describe(temp2055)));
            this.Manager.Comment("reaching state \'S4984\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2158() {
            this.Manager.BeginTest("BVTsS2158");
            this.Manager.Comment("reaching state \'S2158\'");
            string temp2056;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,New,Today,Future,Length255,Le" +
                    "ngth2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2056 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2159\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2056 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S215" +
                        "9)", TestManagerHelpers.Describe(temp2056)));
            this.Manager.Comment("reaching state \'S4985\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2160() {
            this.Manager.BeginTest("BVTsS2160");
            this.Manager.Comment("reaching state \'S2160\'");
            string temp2057;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,True,Existing)\'");
            temp2057 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2161\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2057 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S216" +
                        "1)", TestManagerHelpers.Describe(temp2057)));
            this.Manager.Comment("reaching state \'S4986\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2162() {
            this.Manager.BeginTest("BVTsS2162");
            this.Manager.Comment("reaching state \'S2162\'");
            string temp2058;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2058 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2163\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2058 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S216" +
                        "3)", TestManagerHelpers.Describe(temp2058)));
            this.Manager.Comment("reaching state \'S4987\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2164
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2164() {
            this.Manager.BeginTest("BVTsS2164");
            this.Manager.Comment("reaching state \'S2164\'");
            string temp2059;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2059 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2165\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2059 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S216" +
                        "5)", TestManagerHelpers.Describe(temp2059)));
            this.Manager.Comment("reaching state \'S4988\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2166
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2166() {
            this.Manager.BeginTest("BVTsS2166");
            this.Manager.Comment("reaching state \'S2166\'");
            string temp2060;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2060 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2167\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2060 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S216" +
                        "7)", TestManagerHelpers.Describe(temp2060)));
            this.Manager.Comment("reaching state \'S4989\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2168() {
            this.Manager.BeginTest("BVTsS2168");
            this.Manager.Comment("reaching state \'S2168\'");
            string temp2061;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2061 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2169\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2061 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S216" +
                        "9)", TestManagerHelpers.Describe(temp2061)));
            this.Manager.Comment("reaching state \'S4990\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2170() {
            this.Manager.BeginTest("BVTsS2170");
            this.Manager.Comment("reaching state \'S2170\'");
            string temp2062;
            this.Manager.Comment("executing step \'call SaveDRMTask(NoHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2062 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2171\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2062 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S217" +
                        "1)", TestManagerHelpers.Describe(temp2062)));
            this.Manager.Comment("reaching state \'S4991\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2172() {
            this.Manager.BeginTest("BVTsS2172");
            this.Manager.Comment("reaching state \'S2172\'");
            string temp2063;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,Existing,Today,Future,Length2" +
                    "55,Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2063 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2173\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2063 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S217" +
                        "3)", TestManagerHelpers.Describe(temp2063)));
            this.Manager.Comment("reaching state \'S4992\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2174() {
            this.Manager.BeginTest("BVTsS2174");
            this.Manager.Comment("reaching state \'S2174\'");
            string temp2064;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2064 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2175\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2064 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S217" +
                        "5)", TestManagerHelpers.Describe(temp2064)));
            this.Manager.Comment("reaching state \'S4993\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2176
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2176() {
            this.Manager.BeginTest("BVTsS2176");
            this.Manager.Comment("reaching state \'S2176\'");
            string temp2065;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,Existing,True,NotSpecified)\'");
            temp2065 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2177\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2065 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2177)" +
                        "", TestManagerHelpers.Describe(temp2065)));
            this.Manager.Comment("reaching state \'S4994\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2178() {
            this.Manager.BeginTest("BVTsS2178");
            this.Manager.Comment("reaching state \'S2178\'");
            string temp2066;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,Existing,Today,Future,Length2" +
                    "55,Length2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2066 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2179\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2066 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S217" +
                        "9)", TestManagerHelpers.Describe(temp2066)));
            this.Manager.Comment("reaching state \'S4995\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2180
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2180() {
            this.Manager.BeginTest("BVTsS2180");
            this.Manager.Comment("reaching state \'S2180\'");
            string temp2067;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,New,Today,Future,Length255,Le" +
                    "ngth2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp2067 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2181\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2067 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S218" +
                        "1)", TestManagerHelpers.Describe(temp2067)));
            this.Manager.Comment("reaching state \'S4996\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2182() {
            this.Manager.BeginTest("BVTsS2182");
            this.Manager.Comment("reaching state \'S2182\'");
            string temp2068;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2068 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2183\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2068 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2183)" +
                        "", TestManagerHelpers.Describe(temp2068)));
            this.Manager.Comment("reaching state \'S4997\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2184() {
            this.Manager.BeginTest("BVTsS2184");
            this.Manager.Comment("reaching state \'S2184\'");
            string temp2069;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp2069 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2185\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2069 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S218" +
                        "5)", TestManagerHelpers.Describe(temp2069)));
            this.Manager.Comment("reaching state \'S4998\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2186() {
            this.Manager.BeginTest("BVTsS2186");
            this.Manager.Comment("reaching state \'S2186\'");
            string temp2070;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,New,Today,Future,Length255,Le" +
                    "ngth2000,Length2000,Length2000,Length2000,NotSpecified,True,NotSpecified)\'");
            temp2070 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2187\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2070 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S218" +
                        "7)", TestManagerHelpers.Describe(temp2070)));
            this.Manager.Comment("reaching state \'S4999\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2188() {
            this.Manager.BeginTest("BVTsS2188");
            this.Manager.Comment("reaching state \'S2188\'");
            string temp2071;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,Existing,Today,Future,Length2" +
                    "55,Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2071 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2189\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2071 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S218" +
                        "9)", TestManagerHelpers.Describe(temp2071)));
            this.Manager.Comment("reaching state \'S5000\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2190
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2190() {
            this.Manager.BeginTest("BVTsS2190");
            this.Manager.Comment("reaching state \'S2190\'");
            string temp2072;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,Existing,Today,Future,Length2" +
                    "55,Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2072 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2191\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2072 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S219" +
                        "1)", TestManagerHelpers.Describe(temp2072)));
            this.Manager.Comment("reaching state \'S5001\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2192
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2192() {
            this.Manager.BeginTest("BVTsS2192");
            this.Manager.Comment("reaching state \'S2192\'");
            string temp2073;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified,False,Existing)\'");
            temp2073 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2193\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2073 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S219" +
                        "3)", TestManagerHelpers.Describe(temp2073)));
            this.Manager.Comment("reaching state \'S5002\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2194() {
            this.Manager.BeginTest("BVTsS2194");
            this.Manager.Comment("reaching state \'S2194\'");
            string temp2074;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Delete,New,Today,Future,Length255,Le" +
                    "ngth2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2074 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2195\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2074 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S219" +
                        "5)", TestManagerHelpers.Describe(temp2074)));
            this.Manager.Comment("reaching state \'S5003\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2196() {
            this.Manager.BeginTest("BVTsS2196");
            this.Manager.Comment("reaching state \'S2196\'");
            string temp2075;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,True,Existing)\'");
            temp2075 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, true, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2197\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2075 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S219" +
                        "7)", TestManagerHelpers.Describe(temp2075)));
            this.Manager.Comment("reaching state \'S5004\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2198
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2198() {
            this.Manager.BeginTest("BVTsS2198");
            this.Manager.Comment("reaching state \'S2198\'");
            string temp2076;
            this.Manager.Comment("executing step \'call SaveDRMTask(WrongHeader,Add,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2076 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2199\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2076 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveDRMTask, state S219" +
                        "9)", TestManagerHelpers.Describe(temp2076)));
            this.Manager.Comment("reaching state \'S5005\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2200
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2200() {
            this.Manager.BeginTest("BVTsS2200");
            this.Manager.Comment("reaching state \'S2200\'");
            string temp2077;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2077 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2201\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2077 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2201)", TestManagerHelpers.Describe(temp2077)));
            this.Manager.Comment("reaching state \'S5006\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2202
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2202() {
            this.Manager.BeginTest("BVTsS2202");
            this.Manager.Comment("reaching state \'S2202\'");
            string temp2078;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2078 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2203\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2078 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2203)" +
                        "", TestManagerHelpers.Describe(temp2078)));
            this.Manager.Comment("reaching state \'S5007\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2204
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2204() {
            this.Manager.BeginTest("BVTsS2204");
            this.Manager.Comment("reaching state \'S2204\'");
            string temp2079;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2079 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2205\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2079 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2205)" +
                        "", TestManagerHelpers.Describe(temp2079)));
            this.Manager.Comment("reaching state \'S5008\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2206
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2206() {
            this.Manager.BeginTest("BVTsS2206");
            this.Manager.Comment("reaching state \'S2206\'");
            string temp2080;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,New,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified)\'");
            temp2080 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2207\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2080 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2207)" +
                        "", TestManagerHelpers.Describe(temp2080)));
            this.Manager.Comment("reaching state \'S5009\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2208
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2208() {
            this.Manager.BeginTest("BVTsS2208");
            this.Manager.Comment("reaching state \'S2208\'");
            string temp2081;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2081 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2209\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2081 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2209)" +
                        "", TestManagerHelpers.Describe(temp2081)));
            this.Manager.Comment("reaching state \'S5010\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2210
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2210() {
            this.Manager.BeginTest("BVTsS2210");
            this.Manager.Comment("reaching state \'S2210\'");
            string temp2082;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Add,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,Existing,False,NotSpecified)\'");
            temp2082 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2211\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2082 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2211)" +
                        "", TestManagerHelpers.Describe(temp2082)));
            this.Manager.Comment("reaching state \'S5011\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2212
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2212() {
            this.Manager.BeginTest("BVTsS2212");
            this.Manager.Comment("reaching state \'S2212\'");
            string temp2083;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,Existing,False,Existing)\'");
            temp2083 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing, false, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2213\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"NoError\"\'");
            this.Manager.Assert((temp2083 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveDRMTask, state S2213)", TestManagerHelpers.Describe(temp2083)));
            this.Manager.Comment("reaching state \'S5012\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2214() {
            this.Manager.BeginTest("BVTsS2214");
            this.Manager.Comment("reaching state \'S2214\'");
            string temp2084;
            this.Manager.Comment("executing step \'call SaveDRMTask(CorrectHeader,Delete,Existing,Today,Future,Lengt" +
                    "h255,Length2000,Length2000,Length2000,Length2000,NotSpecified,False,NotSpecified" +
                    ")\'");
            temp2084 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified, false, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2215\'");
            this.Manager.Comment("checking step \'return SaveDRMTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2084 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveDRMTask, state S2215)" +
                        "", TestManagerHelpers.Describe(temp2084)));
            this.Manager.Comment("reaching state \'S5013\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2216
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2216() {
            this.Manager.BeginTest("BVTsS2216");
            this.Manager.Comment("reaching state \'S2216\'");
            string temp2085;
            this.Manager.Comment("executing step \'call SaveLicenseType(NoHeader,Add,Existing,Existing,Length50,Vali" +
                    "d,OnlyOneElement)\'");
            temp2085 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2217\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2085 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveLicenseType, state " +
                        "S2217)", TestManagerHelpers.Describe(temp2085)));
            this.Manager.Comment("reaching state \'S5014\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2218() {
            this.Manager.BeginTest("BVTsS2218");
            this.Manager.Comment("reaching state \'S2218\'");
            string temp2086;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,Existing,Existing,Length50" +
                    ",Valid,OnlyOneElement)\'");
            temp2086 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2219\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp2086 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S2219)", TestManagerHelpers.Describe(temp2086)));
            this.Manager.Comment("reaching state \'S5015\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2220
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2220() {
            this.Manager.BeginTest("BVTsS2220");
            this.Manager.Comment("reaching state \'S2220\'");
            string temp2087;
            this.Manager.Comment("executing step \'call SaveLicenseType(WrongHeader,Add,Existing,Existing,Length50,V" +
                    "alid,OnlyOneElement)\'");
            temp2087 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2221\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2087 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveLicenseType, state " +
                        "S2221)", TestManagerHelpers.Describe(temp2087)));
            this.Manager.Comment("reaching state \'S5016\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2222
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2222() {
            this.Manager.BeginTest("BVTsS2222");
            this.Manager.Comment("reaching state \'S2222\'");
            string temp2088;
            this.Manager.Comment("executing step \'call SaveLicenseType(NoHeader,Delete,Existing,Existing,Length50,V" +
                    "alid,OnlyOneElement)\'");
            temp2088 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2223\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2088 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveLicenseType, state " +
                        "S2223)", TestManagerHelpers.Describe(temp2088)));
            this.Manager.Comment("reaching state \'S5017\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2224
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2224() {
            this.Manager.BeginTest("BVTsS2224");
            this.Manager.Comment("reaching state \'S2224\'");
            string temp2089;
            this.Manager.Comment("executing step \'call SaveLicenseType(WrongHeader,Delete,New,Existing,Length50,Val" +
                    "id,OnlyOneElement)\'");
            temp2089 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2225\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2089 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveLicenseType, state " +
                        "S2225)", TestManagerHelpers.Describe(temp2089)));
            this.Manager.Comment("reaching state \'S5018\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2226
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2226() {
            this.Manager.BeginTest("BVTsS2226");
            this.Manager.Comment("reaching state \'S2226\'");
            string temp2090;
            this.Manager.Comment("executing step \'call SaveLicenseType(NoHeader,Delete,New,Existing,Length50,Valid," +
                    "OnlyOneElement)\'");
            temp2090 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2227\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2090 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveLicenseType, state " +
                        "S2227)", TestManagerHelpers.Describe(temp2090)));
            this.Manager.Comment("reaching state \'S5019\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2228
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2228() {
            this.Manager.BeginTest("BVTsS2228");
            this.Manager.Comment("reaching state \'S2228\'");
            string temp2091;
            this.Manager.Comment("executing step \'call SaveLicenseType(WrongHeader,Delete,Existing,Existing,Length5" +
                    "0,Valid,OnlyOneElement)\'");
            temp2091 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2229\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2091 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveLicenseType, state " +
                        "S2229)", TestManagerHelpers.Describe(temp2091)));
            this.Manager.Comment("reaching state \'S5020\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2230
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2230() {
            this.Manager.BeginTest("BVTsS2230");
            this.Manager.Comment("reaching state \'S2230\'");
            string temp2092;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Delete,New,Existing,Length50,V" +
                    "alid,OnlyOneElement)\'");
            temp2092 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2231\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2092 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveLicenseType, stat" +
                        "e S2231)", TestManagerHelpers.Describe(temp2092)));
            this.Manager.Comment("reaching state \'S5021\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2232
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2232() {
            this.Manager.BeginTest("BVTsS2232");
            this.Manager.Comment("reaching state \'S2232\'");
            string temp2093;
            this.Manager.Comment("executing step \'call SaveLicenseType(WrongHeader,Add,New,Existing,Length50,Valid," +
                    "OnlyOneElement)\'");
            temp2093 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2233\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2093 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveLicenseType, state " +
                        "S2233)", TestManagerHelpers.Describe(temp2093)));
            this.Manager.Comment("reaching state \'S5022\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2234
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2234() {
            this.Manager.BeginTest("BVTsS2234");
            this.Manager.Comment("reaching state \'S2234\'");
            string temp2094;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,New,Existing,Length50,Vali" +
                    "d,OnlyOneElement)\'");
            temp2094 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2235\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp2094 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S2235)", TestManagerHelpers.Describe(temp2094)));
            this.Manager.Comment("reaching state \'S5023\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2236
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2236() {
            this.Manager.BeginTest("BVTsS2236");
            this.Manager.Comment("reaching state \'S2236\'");
            string temp2095;
            this.Manager.Comment("executing step \'call SaveLicenseType(NoHeader,Add,New,Existing,Length50,Valid,Onl" +
                    "yOneElement)\'");
            temp2095 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2237\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2095 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveLicenseType, state " +
                        "S2237)", TestManagerHelpers.Describe(temp2095)));
            this.Manager.Comment("reaching state \'S5024\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2238
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2238() {
            this.Manager.BeginTest("BVTsS2238");
            this.Manager.Comment("reaching state \'S2238\'");
            string temp2096;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Delete,Existing,Existing,Lengt" +
                    "h50,Valid,OnlyOneElement)\'");
            temp2096 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2239\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2096 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveLicenseType, stat" +
                        "e S2239)", TestManagerHelpers.Describe(temp2096)));
            this.Manager.Comment("reaching state \'S5025\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2240
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2240() {
            this.Manager.BeginTest("BVTsS2240");
            this.Manager.Comment("reaching state \'S2240\'");
            string temp2097;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,NotSpecified,Existi" +
                    "ng,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2097 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2241\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2097 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2241)", TestManagerHelpers.Describe(temp2097)));
            this.Manager.Comment("reaching state \'S5026\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2242() {
            this.Manager.BeginTest("BVTsS2242");
            this.Manager.Comment("reaching state \'S2242\'");
            string temp2098;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,NotSpecified,E" +
                    "xisting,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneE" +
                    "lement)\'");
            temp2098 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2243\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2098 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "243)", TestManagerHelpers.Describe(temp2098)));
            this.Manager.Comment("reaching state \'S5027\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2244
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2244() {
            this.Manager.BeginTest("BVTsS2244");
            this.Manager.Comment("reaching state \'S2244\'");
            string temp2099;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,NotSpecified,Not" +
                    "Specified,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOn" +
                    "eElement)\'");
            temp2099 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2245\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2099 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2245)", TestManagerHelpers.Describe(temp2099)));
            this.Manager.Comment("reaching state \'S5028\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2246
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2246() {
            this.Manager.BeginTest("BVTsS2246");
            this.Manager.Comment("reaching state \'S2246\'");
            string temp2100;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,Existing,NotSpecifi" +
                    "ed,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2100 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2247\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2100 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2247)", TestManagerHelpers.Describe(temp2100)));
            this.Manager.Comment("reaching state \'S5029\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2248() {
            this.Manager.BeginTest("BVTsS2248");
            this.Manager.Comment("reaching state \'S2248\'");
            string temp2101;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,Existing,NotSp" +
                    "ecified,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,Only" +
                    "OneElement)\'");
            temp2101 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2249\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2101 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "249)", TestManagerHelpers.Describe(temp2101)));
            this.Manager.Comment("reaching state \'S5030\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2250
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2250() {
            this.Manager.BeginTest("BVTsS2250");
            this.Manager.Comment("reaching state \'S2250\'");
            string temp2102;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,NotSpeci" +
                    "fied,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2102 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2251\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2102 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "251)", TestManagerHelpers.Describe(temp2102)));
            this.Manager.Comment("reaching state \'S5031\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2252
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2252() {
            this.Manager.BeginTest("BVTsS2252");
            this.Manager.Comment("reaching state \'S2252\'");
            string temp2103;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,Existing,NotSp" +
                    "ecified,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneE" +
                    "lement)\'");
            temp2103 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2253\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2103 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "253)", TestManagerHelpers.Describe(temp2103)));
            this.Manager.Comment("reaching state \'S5032\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2254
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2254() {
            this.Manager.BeginTest("BVTsS2254");
            this.Manager.Comment("reaching state \'S2254\'");
            string temp2104;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,NotSpeci" +
                    "fied,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2104 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2255\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2104 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "255)", TestManagerHelpers.Describe(temp2104)));
            this.Manager.Comment("reaching state \'S5033\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2256
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2256() {
            this.Manager.BeginTest("BVTsS2256");
            this.Manager.Comment("reaching state \'S2256\'");
            string temp2105;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,NotSpecified,NotS" +
                    "pecified,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2105 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2257\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2105 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "257)", TestManagerHelpers.Describe(temp2105)));
            this.Manager.Comment("reaching state \'S5034\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2258
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2258() {
            this.Manager.BeginTest("BVTsS2258");
            this.Manager.Comment("reaching state \'S2258\'");
            string temp2106;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,NotSpecified,N" +
                    "otSpecified,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneE" +
                    "lement)\'");
            temp2106 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2259\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2106 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "259)", TestManagerHelpers.Describe(temp2106)));
            this.Manager.Comment("reaching state \'S5035\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2260
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2260() {
            this.Manager.BeginTest("BVTsS2260");
            this.Manager.Comment("reaching state \'S2260\'");
            string temp2107;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,NotSpecified,NotSpecif" +
                    "ied,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2107 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2261\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2107 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2261)", TestManagerHelpers.Describe(temp2107)));
            this.Manager.Comment("reaching state \'S5036\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2262
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2262() {
            this.Manager.BeginTest("BVTsS2262");
            this.Manager.Comment("reaching state \'S2262\'");
            string temp2108;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,NotSpecified,NotSpe" +
                    "cified,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2108 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2263\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2108 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2263)", TestManagerHelpers.Describe(temp2108)));
            this.Manager.Comment("reaching state \'S5037\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2264
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2264() {
            this.Manager.BeginTest("BVTsS2264");
            this.Manager.Comment("reaching state \'S2264\'");
            string temp2109;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,NotSpecified,NotS" +
                    "pecified,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOne" +
                    "Element)\'");
            temp2109 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2265\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2109 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "265)", TestManagerHelpers.Describe(temp2109)));
            this.Manager.Comment("reaching state \'S5038\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2266
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2266() {
            this.Manager.BeginTest("BVTsS2266");
            this.Manager.Comment("reaching state \'S2266\'");
            string temp2110;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,Existing,Existing,Existi" +
                    "ng,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2110 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2267\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2110 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2267)", TestManagerHelpers.Describe(temp2110)));
            this.Manager.Comment("reaching state \'S5039\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2268() {
            this.Manager.BeginTest("BVTsS2268");
            this.Manager.Comment("reaching state \'S2268\'");
            string temp2111;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,Existing,NotSpecified,Ex" +
                    "isting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2111 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2269\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2111 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2269)", TestManagerHelpers.Describe(temp2111)));
            this.Manager.Comment("reaching state \'S5040\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2270() {
            this.Manager.BeginTest("BVTsS2270");
            this.Manager.Comment("reaching state \'S2270\'");
            string temp2112;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,Existing,Existing,E" +
                    "xisting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2112 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2271\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2112 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "271)", TestManagerHelpers.Describe(temp2112)));
            this.Manager.Comment("reaching state \'S5041\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2272
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2272() {
            this.Manager.BeginTest("BVTsS2272");
            this.Manager.Comment("reaching state \'S2272\'");
            string temp2113;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,Existing,Existing,Existing," +
                    "NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2113 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2273\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2113 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2273)", TestManagerHelpers.Describe(temp2113)));
            this.Manager.Comment("reaching state \'S5042\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2274
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2274() {
            this.Manager.BeginTest("BVTsS2274");
            this.Manager.Comment("reaching state \'S2274\'");
            string temp2114;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,Existing,Existing,Existi" +
                    "ng,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2114 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2275\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2114 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2275)", TestManagerHelpers.Describe(temp2114)));
            this.Manager.Comment("reaching state \'S5043\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2276() {
            this.Manager.BeginTest("BVTsS2276");
            this.Manager.Comment("reaching state \'S2276\'");
            string temp2115;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,Existing,Exist" +
                    "ing,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneE" +
                    "lement)\'");
            temp2115 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2277\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2115 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "277)", TestManagerHelpers.Describe(temp2115)));
            this.Manager.Comment("reaching state \'S5044\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2278
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2278() {
            this.Manager.BeginTest("BVTsS2278");
            this.Manager.Comment("reaching state \'S2278\'");
            string temp2116;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,NotSpecified,NotS" +
                    "pecified,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOne" +
                    "Element)\'");
            temp2116 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2279\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2116 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "279)", TestManagerHelpers.Describe(temp2116)));
            this.Manager.Comment("reaching state \'S5045\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2280
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2280() {
            this.Manager.BeginTest("BVTsS2280");
            this.Manager.Comment("reaching state \'S2280\'");
            string temp2117;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,Existing,NotSpecified,Ex" +
                    "isting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2117 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2281\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2117 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2281)", TestManagerHelpers.Describe(temp2117)));
            this.Manager.Comment("reaching state \'S5046\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2282
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2282() {
            this.Manager.BeginTest("BVTsS2282");
            this.Manager.Comment("reaching state \'S2282\'");
            string temp2118;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,Existing,Existing,E" +
                    "xisting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2118 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2283\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2118 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2283)", TestManagerHelpers.Describe(temp2118)));
            this.Manager.Comment("reaching state \'S5047\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2284
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2284() {
            this.Manager.BeginTest("BVTsS2284");
            this.Manager.Comment("reaching state \'S2284\'");
            string temp2119;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,Existing,Existing,Existi" +
                    "ng,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2119 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2285\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2119 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2285)", TestManagerHelpers.Describe(temp2119)));
            this.Manager.Comment("reaching state \'S5048\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2286
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2286() {
            this.Manager.BeginTest("BVTsS2286");
            this.Manager.Comment("reaching state \'S2286\'");
            string temp2120;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,NotSpecified,Existing,Ex" +
                    "isting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2120 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2287\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2120 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2287)", TestManagerHelpers.Describe(temp2120)));
            this.Manager.Comment("reaching state \'S5049\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2288() {
            this.Manager.BeginTest("BVTsS2288");
            this.Manager.Comment("reaching state \'S2288\'");
            string temp2121;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,NotSpecified,Exis" +
                    "ting,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2121 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2289\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2121 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "289)", TestManagerHelpers.Describe(temp2121)));
            this.Manager.Comment("reaching state \'S5050\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2290
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2290() {
            this.Manager.BeginTest("BVTsS2290");
            this.Manager.Comment("reaching state \'S2290\'");
            string temp2122;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,NotSpecified,Exis" +
                    "ting,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOne" +
                    "Element)\'");
            temp2122 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2291\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2122 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "291)", TestManagerHelpers.Describe(temp2122)));
            this.Manager.Comment("reaching state \'S5051\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2292() {
            this.Manager.BeginTest("BVTsS2292");
            this.Manager.Comment("reaching state \'S2292\'");
            string temp2123;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,NotSpecified,Existing," +
                    "Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2123 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2293\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2123 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "293)", TestManagerHelpers.Describe(temp2123)));
            this.Manager.Comment("reaching state \'S5052\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2294
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2294() {
            this.Manager.BeginTest("BVTsS2294");
            this.Manager.Comment("reaching state \'S2294\'");
            string temp2124;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,Existing,NotSpecified,Ex" +
                    "isting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2124 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2295\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2124 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2295)", TestManagerHelpers.Describe(temp2124)));
            this.Manager.Comment("reaching state \'S5053\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2296
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2296() {
            this.Manager.BeginTest("BVTsS2296");
            this.Manager.Comment("reaching state \'S2296\'");
            string temp2125;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,NotSpecified,NotSpecifie" +
                    "d,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2125 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2297\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2125 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2297)", TestManagerHelpers.Describe(temp2125)));
            this.Manager.Comment("reaching state \'S5054\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2298
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2298() {
            this.Manager.BeginTest("BVTsS2298");
            this.Manager.Comment("reaching state \'S2298\'");
            string temp2126;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,Existing,NotSpecifi" +
                    "ed,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2126 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2299\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2126 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2299)", TestManagerHelpers.Describe(temp2126)));
            this.Manager.Comment("reaching state \'S5055\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2300() {
            this.Manager.BeginTest("BVTsS2300");
            this.Manager.Comment("reaching state \'S2300\'");
            string temp2127;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,Existing,Existing,E" +
                    "xisting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2127 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2301\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2127 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2301)", TestManagerHelpers.Describe(temp2127)));
            this.Manager.Comment("reaching state \'S5056\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2302
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2302() {
            this.Manager.BeginTest("BVTsS2302");
            this.Manager.Comment("reaching state \'S2302\'");
            string temp2128;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,Existing,Existing,Existi" +
                    "ng,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2128 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2303\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2128 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2303)", TestManagerHelpers.Describe(temp2128)));
            this.Manager.Comment("reaching state \'S5057\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2304
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2304() {
            this.Manager.BeginTest("BVTsS2304");
            this.Manager.Comment("reaching state \'S2304\'");
            string temp2129;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2129 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2305\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2129 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "305)", TestManagerHelpers.Describe(temp2129)));
            this.Manager.Comment("reaching state \'S5058\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2306
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2306() {
            this.Manager.BeginTest("BVTsS2306");
            this.Manager.Comment("reaching state \'S2306\'");
            string temp2130;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,NotSpecified,N" +
                    "otSpecified,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,Only" +
                    "OneElement)\'");
            temp2130 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2307\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2130 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "307)", TestManagerHelpers.Describe(temp2130)));
            this.Manager.Comment("reaching state \'S5059\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2308
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2308() {
            this.Manager.BeginTest("BVTsS2308");
            this.Manager.Comment("reaching state \'S2308\'");
            string temp2131;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2131 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2309\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2131 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "309)", TestManagerHelpers.Describe(temp2131)));
            this.Manager.Comment("reaching state \'S5060\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2310
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2310() {
            this.Manager.BeginTest("BVTsS2310");
            this.Manager.Comment("reaching state \'S2310\'");
            string temp2132;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2132 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2311\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2132 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "311)", TestManagerHelpers.Describe(temp2132)));
            this.Manager.Comment("reaching state \'S5061\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2312
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2312() {
            this.Manager.BeginTest("BVTsS2312");
            this.Manager.Comment("reaching state \'S2312\'");
            string temp2133;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,NotSpecified,NotS" +
                    "pecified,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,Onl" +
                    "yOneElement)\'");
            temp2133 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2313\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2133 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "313)", TestManagerHelpers.Describe(temp2133)));
            this.Manager.Comment("reaching state \'S5062\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2314() {
            this.Manager.BeginTest("BVTsS2314");
            this.Manager.Comment("reaching state \'S2314\'");
            string temp2134;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,NotSpecified,Exis" +
                    "ting,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2134 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2315\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2134 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "315)", TestManagerHelpers.Describe(temp2134)));
            this.Manager.Comment("reaching state \'S5063\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2316
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2316() {
            this.Manager.BeginTest("BVTsS2316");
            this.Manager.Comment("reaching state \'S2316\'");
            string temp2135;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,NotSpecified,Existing,Ex" +
                    "isting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2135 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2317\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2135 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2317)", TestManagerHelpers.Describe(temp2135)));
            this.Manager.Comment("reaching state \'S5064\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2318() {
            this.Manager.BeginTest("BVTsS2318");
            this.Manager.Comment("reaching state \'S2318\'");
            string temp2136;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,Existing,Existing,Existing," +
                    "Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2136 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2319\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2136 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2319)", TestManagerHelpers.Describe(temp2136)));
            this.Manager.Comment("reaching state \'S5065\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2320
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2320() {
            this.Manager.BeginTest("BVTsS2320");
            this.Manager.Comment("reaching state \'S2320\'");
            string temp2137;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2137 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2321\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp2137 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S2321)", TestManagerHelpers.Describe(temp2137)));
            this.Manager.Comment("reaching state \'S5066\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2322
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2322() {
            this.Manager.BeginTest("BVTsS2322");
            this.Manager.Comment("reaching state \'S2322\'");
            string temp2138;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,NotSpecified," +
                    "Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2138 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2323\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2138 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "323)", TestManagerHelpers.Describe(temp2138)));
            this.Manager.Comment("reaching state \'S5067\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2324() {
            this.Manager.BeginTest("BVTsS2324");
            this.Manager.Comment("reaching state \'S2324\'");
            string temp2139;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,NotSpecified,Existing," +
                    "Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2139 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2325\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2139 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "325)", TestManagerHelpers.Describe(temp2139)));
            this.Manager.Comment("reaching state \'S5068\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2326
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2326() {
            this.Manager.BeginTest("BVTsS2326");
            this.Manager.Comment("reaching state \'S2326\'");
            string temp2140;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,NotSpecified,Existi" +
                    "ng,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2140 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2327\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2140 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2327)", TestManagerHelpers.Describe(temp2140)));
            this.Manager.Comment("reaching state \'S5069\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2328
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2328() {
            this.Manager.BeginTest("BVTsS2328");
            this.Manager.Comment("reaching state \'S2328\'");
            string temp2141;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,NotSpecified,Existing,Ex" +
                    "isting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2141 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2329\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2141 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2329)", TestManagerHelpers.Describe(temp2141)));
            this.Manager.Comment("reaching state \'S5070\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2330
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2330() {
            this.Manager.BeginTest("BVTsS2330");
            this.Manager.Comment("reaching state \'S2330\'");
            string temp2142;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,Existing,Existing,E" +
                    "xisting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2142 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2331\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2142 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2331)", TestManagerHelpers.Describe(temp2142)));
            this.Manager.Comment("reaching state \'S5071\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2332
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2332() {
            this.Manager.BeginTest("BVTsS2332");
            this.Manager.Comment("reaching state \'S2332\'");
            string temp2143;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,NotSpecified,NotSpe" +
                    "cified,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2143 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2333\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2143 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2333)", TestManagerHelpers.Describe(temp2143)));
            this.Manager.Comment("reaching state \'S5072\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2334
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2334() {
            this.Manager.BeginTest("BVTsS2334");
            this.Manager.Comment("reaching state \'S2334\'");
            string temp2144;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,Existing,NotSpecifi" +
                    "ed,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2144 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2335\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2144 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2335)", TestManagerHelpers.Describe(temp2144)));
            this.Manager.Comment("reaching state \'S5073\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2336
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2336() {
            this.Manager.BeginTest("BVTsS2336");
            this.Manager.Comment("reaching state \'S2336\'");
            string temp2145;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,Existing,NotSpecifi" +
                    "ed,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2145 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2337\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2145 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "337)", TestManagerHelpers.Describe(temp2145)));
            this.Manager.Comment("reaching state \'S5074\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2338
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2338() {
            this.Manager.BeginTest("BVTsS2338");
            this.Manager.Comment("reaching state \'S2338\'");
            string temp2146;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,Existing,Existing,E" +
                    "xisting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2146 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2339\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2146 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "339)", TestManagerHelpers.Describe(temp2146)));
            this.Manager.Comment("reaching state \'S5075\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2340
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2340() {
            this.Manager.BeginTest("BVTsS2340");
            this.Manager.Comment("reaching state \'S2340\'");
            string temp2147;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,Existing,NotSpecifi" +
                    "ed,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2147 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2341\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2147 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "341)", TestManagerHelpers.Describe(temp2147)));
            this.Manager.Comment("reaching state \'S5076\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2342
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2342() {
            this.Manager.BeginTest("BVTsS2342");
            this.Manager.Comment("reaching state \'S2342\'");
            string temp2148;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,NotSpecified,Exis" +
                    "ting,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2148 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2343\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2148 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "343)", TestManagerHelpers.Describe(temp2148)));
            this.Manager.Comment("reaching state \'S5077\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2344
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2344() {
            this.Manager.BeginTest("BVTsS2344");
            this.Manager.Comment("reaching state \'S2344\'");
            string temp2149;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,NotSpecified,Existing," +
                    "Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2149 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2345\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2149 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "345)", TestManagerHelpers.Describe(temp2149)));
            this.Manager.Comment("reaching state \'S5078\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2346
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2346() {
            this.Manager.BeginTest("BVTsS2346");
            this.Manager.Comment("reaching state \'S2346\'");
            string temp2150;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,Existing,NotSpecifi" +
                    "ed,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2150 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2347\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2150 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2347)", TestManagerHelpers.Describe(temp2150)));
            this.Manager.Comment("reaching state \'S5079\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2348
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2348() {
            this.Manager.BeginTest("BVTsS2348");
            this.Manager.Comment("reaching state \'S2348\'");
            string temp2151;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,Existing,NotSpec" +
                    "ified,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEle" +
                    "ment)\'");
            temp2151 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2349\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2151 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2349)", TestManagerHelpers.Describe(temp2151)));
            this.Manager.Comment("reaching state \'S5080\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2350
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2350() {
            this.Manager.BeginTest("BVTsS2350");
            this.Manager.Comment("reaching state \'S2350\'");
            string temp2152;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,Existing,NotSpecified" +
                    ",Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2152 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2351\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2152 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2351)", TestManagerHelpers.Describe(temp2152)));
            this.Manager.Comment("reaching state \'S5081\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2352
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2352() {
            this.Manager.BeginTest("BVTsS2352");
            this.Manager.Comment("reaching state \'S2352\'");
            string temp2153;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,Existing,NotSpecified,Ex" +
                    "isting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2153 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2353\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2153 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2353)", TestManagerHelpers.Describe(temp2153)));
            this.Manager.Comment("reaching state \'S5082\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2354
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2354() {
            this.Manager.BeginTest("BVTsS2354");
            this.Manager.Comment("reaching state \'S2354\'");
            string temp2154;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,NotSpecified,NotSpecifie" +
                    "d,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2154 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2355\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2154 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2355)", TestManagerHelpers.Describe(temp2154)));
            this.Manager.Comment("reaching state \'S5083\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2356
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2356() {
            this.Manager.BeginTest("BVTsS2356");
            this.Manager.Comment("reaching state \'S2356\'");
            string temp2155;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,Existing,NotSpecifi" +
                    "ed,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2155 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2357\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2155 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2357)", TestManagerHelpers.Describe(temp2155)));
            this.Manager.Comment("reaching state \'S5084\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2358
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2358() {
            this.Manager.BeginTest("BVTsS2358");
            this.Manager.Comment("reaching state \'S2358\'");
            string temp2156;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,Existing,Existing,E" +
                    "xisting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2156 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2359\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2156 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2359)", TestManagerHelpers.Describe(temp2156)));
            this.Manager.Comment("reaching state \'S5085\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2360
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2360() {
            this.Manager.BeginTest("BVTsS2360");
            this.Manager.Comment("reaching state \'S2360\'");
            string temp2157;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,Existing,Existing,Existi" +
                    "ng,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2157 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2361\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2157 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2361)", TestManagerHelpers.Describe(temp2157)));
            this.Manager.Comment("reaching state \'S5086\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2362
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2362() {
            this.Manager.BeginTest("BVTsS2362");
            this.Manager.Comment("reaching state \'S2362\'");
            string temp2158;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,Existing,Existing,Exis" +
                    "ting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2158 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2363\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2158 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2363)", TestManagerHelpers.Describe(temp2158)));
            this.Manager.Comment("reaching state \'S5087\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2364
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2364() {
            this.Manager.BeginTest("BVTsS2364");
            this.Manager.Comment("reaching state \'S2364\'");
            string temp2159;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,NotSpecified,NotSpe" +
                    "cified,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2159 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2365\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2159 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2365)", TestManagerHelpers.Describe(temp2159)));
            this.Manager.Comment("reaching state \'S5088\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2366
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2366() {
            this.Manager.BeginTest("BVTsS2366");
            this.Manager.Comment("reaching state \'S2366\'");
            string temp2160;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,NotSpecified,Not" +
                    "Specified,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOn" +
                    "eElement)\'");
            temp2160 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2367\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2160 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2367)", TestManagerHelpers.Describe(temp2160)));
            this.Manager.Comment("reaching state \'S5089\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2368
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2368() {
            this.Manager.BeginTest("BVTsS2368");
            this.Manager.Comment("reaching state \'S2368\'");
            string temp2161;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,NotSpecified,NotSpe" +
                    "cified,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyO" +
                    "neElement)\'");
            temp2161 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2369\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2161 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2369)", TestManagerHelpers.Describe(temp2161)));
            this.Manager.Comment("reaching state \'S5090\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2370
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2370() {
            this.Manager.BeginTest("BVTsS2370");
            this.Manager.Comment("reaching state \'S2370\'");
            string temp2162;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,Existing,Existing,Existing," +
                    "Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2162 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2371\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2162 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2371)", TestManagerHelpers.Describe(temp2162)));
            this.Manager.Comment("reaching state \'S5091\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2372() {
            this.Manager.BeginTest("BVTsS2372");
            this.Manager.Comment("reaching state \'S2372\'");
            string temp2163;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,Existing,NotSpecified,Exist" +
                    "ing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2163 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2373\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2163 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2373)", TestManagerHelpers.Describe(temp2163)));
            this.Manager.Comment("reaching state \'S5092\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2374
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2374() {
            this.Manager.BeginTest("BVTsS2374");
            this.Manager.Comment("reaching state \'S2374\'");
            string temp2164;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,Existing,NotSpecified,Exist" +
                    "ing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2164 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2375\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2164 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2375)", TestManagerHelpers.Describe(temp2164)));
            this.Manager.Comment("reaching state \'S5093\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2376
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2376() {
            this.Manager.BeginTest("BVTsS2376");
            this.Manager.Comment("reaching state \'S2376\'");
            string temp2165;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,NotSpecified,NotSpe" +
                    "cified,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyO" +
                    "neElement)\'");
            temp2165 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2377\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2165 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2377)", TestManagerHelpers.Describe(temp2165)));
            this.Manager.Comment("reaching state \'S5094\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2378
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2378() {
            this.Manager.BeginTest("BVTsS2378");
            this.Manager.Comment("reaching state \'S2378\'");
            string temp2166;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,NotSpecified,NotSpe" +
                    "cified,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2166 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2379\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2166 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2379)", TestManagerHelpers.Describe(temp2166)));
            this.Manager.Comment("reaching state \'S5095\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2380() {
            this.Manager.BeginTest("BVTsS2380");
            this.Manager.Comment("reaching state \'S2380\'");
            string temp2167;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,NotSpecified,Exi" +
                    "sting,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneEle" +
                    "ment)\'");
            temp2167 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2381\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2167 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2381)", TestManagerHelpers.Describe(temp2167)));
            this.Manager.Comment("reaching state \'S5096\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2382
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2382() {
            this.Manager.BeginTest("BVTsS2382");
            this.Manager.Comment("reaching state \'S2382\'");
            string temp2168;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,NotSpecified,Exi" +
                    "sting,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOn" +
                    "eElement)\'");
            temp2168 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2383\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2168 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2383)", TestManagerHelpers.Describe(temp2168)));
            this.Manager.Comment("reaching state \'S5097\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2384
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2384() {
            this.Manager.BeginTest("BVTsS2384");
            this.Manager.Comment("reaching state \'S2384\'");
            string temp2169;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,NotSpecified,E" +
                    "xisting,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneE" +
                    "lement)\'");
            temp2169 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2385\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2169 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "385)", TestManagerHelpers.Describe(temp2169)));
            this.Manager.Comment("reaching state \'S5098\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2386
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2386() {
            this.Manager.BeginTest("BVTsS2386");
            this.Manager.Comment("reaching state \'S2386\'");
            string temp2170;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,NotSpecified,NotSpecif" +
                    "ied,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2170 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2387\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2170 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "387)", TestManagerHelpers.Describe(temp2170)));
            this.Manager.Comment("reaching state \'S5099\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2388
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2388() {
            this.Manager.BeginTest("BVTsS2388");
            this.Manager.Comment("reaching state \'S2388\'");
            string temp2171;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,NotSpeci" +
                    "fied,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2171 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2389\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2171 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "389)", TestManagerHelpers.Describe(temp2171)));
            this.Manager.Comment("reaching state \'S5100\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2390
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2390() {
            this.Manager.BeginTest("BVTsS2390");
            this.Manager.Comment("reaching state \'S2390\'");
            string temp2172;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,Existing,Existin" +
                    "g,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEle" +
                    "ment)\'");
            temp2172 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2391\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2172 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2391)", TestManagerHelpers.Describe(temp2172)));
            this.Manager.Comment("reaching state \'S5101\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2392
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2392() {
            this.Manager.BeginTest("BVTsS2392");
            this.Manager.Comment("reaching state \'S2392\'");
            string temp2173;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,Existing,Existing,Exi" +
                    "sting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2173 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2393\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2173 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2393)", TestManagerHelpers.Describe(temp2173)));
            this.Manager.Comment("reaching state \'S5102\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2394
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2394() {
            this.Manager.BeginTest("BVTsS2394");
            this.Manager.Comment("reaching state \'S2394\'");
            string temp2174;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,NotSpecified,NotSpecifie" +
                    "d,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEle" +
                    "ment)\'");
            temp2174 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2395\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2174 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2395)", TestManagerHelpers.Describe(temp2174)));
            this.Manager.Comment("reaching state \'S5103\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2396
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2396() {
            this.Manager.BeginTest("BVTsS2396");
            this.Manager.Comment("reaching state \'S2396\'");
            string temp2175;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,Existing,NotSpecifi" +
                    "ed,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2175 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2397\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2175 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2397)", TestManagerHelpers.Describe(temp2175)));
            this.Manager.Comment("reaching state \'S5104\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2398() {
            this.Manager.BeginTest("BVTsS2398");
            this.Manager.Comment("reaching state \'S2398\'");
            string temp2176;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,NotSpeci" +
                    "fied,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOne" +
                    "Element)\'");
            temp2176 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2399\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2176 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "399)", TestManagerHelpers.Describe(temp2176)));
            this.Manager.Comment("reaching state \'S5105\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2400
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2400() {
            this.Manager.BeginTest("BVTsS2400");
            this.Manager.Comment("reaching state \'S2400\'");
            string temp2177;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,NotSpecified,Existi" +
                    "ng,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2177 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2401\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2177 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "401)", TestManagerHelpers.Describe(temp2177)));
            this.Manager.Comment("reaching state \'S5106\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2402() {
            this.Manager.BeginTest("BVTsS2402");
            this.Manager.Comment("reaching state \'S2402\'");
            string temp2178;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,NotSpecified,NotSpe" +
                    "cified,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2178 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2403\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2178 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "403)", TestManagerHelpers.Describe(temp2178)));
            this.Manager.Comment("reaching state \'S5107\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2404
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2404() {
            this.Manager.BeginTest("BVTsS2404");
            this.Manager.Comment("reaching state \'S2404\'");
            string temp2179;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,NotSpecified," +
                    "Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2179 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2405\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2179 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "405)", TestManagerHelpers.Describe(temp2179)));
            this.Manager.Comment("reaching state \'S5108\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2406() {
            this.Manager.BeginTest("BVTsS2406");
            this.Manager.Comment("reaching state \'S2406\'");
            string temp2180;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,NotSpecified,NotSpeci" +
                    "fied,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2180 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2407\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2180 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2407)", TestManagerHelpers.Describe(temp2180)));
            this.Manager.Comment("reaching state \'S5109\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2408
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2408() {
            this.Manager.BeginTest("BVTsS2408");
            this.Manager.Comment("reaching state \'S2408\'");
            string temp2181;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,Existing,NotSpecified,Exist" +
                    "ing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2181 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2409\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2181 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2409)", TestManagerHelpers.Describe(temp2181)));
            this.Manager.Comment("reaching state \'S5110\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2410
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2410() {
            this.Manager.BeginTest("BVTsS2410");
            this.Manager.Comment("reaching state \'S2410\'");
            string temp2182;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,Existing,Existing,Existing," +
                    "NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2182 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2411\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2182 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2411)", TestManagerHelpers.Describe(temp2182)));
            this.Manager.Comment("reaching state \'S5111\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2412
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2412() {
            this.Manager.BeginTest("BVTsS2412");
            this.Manager.Comment("reaching state \'S2412\'");
            string temp2183;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2183 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2413\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2183 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "413)", TestManagerHelpers.Describe(temp2183)));
            this.Manager.Comment("reaching state \'S5112\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2414
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2414() {
            this.Manager.BeginTest("BVTsS2414");
            this.Manager.Comment("reaching state \'S2414\'");
            string temp2184;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,NotSpecified,Existing," +
                    "Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2184 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2415\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2184 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "415)", TestManagerHelpers.Describe(temp2184)));
            this.Manager.Comment("reaching state \'S5113\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2416
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2416() {
            this.Manager.BeginTest("BVTsS2416");
            this.Manager.Comment("reaching state \'S2416\'");
            string temp2185;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,NotSpecified,Not" +
                    "Specified,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneEle" +
                    "ment)\'");
            temp2185 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2417\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2185 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2417)", TestManagerHelpers.Describe(temp2185)));
            this.Manager.Comment("reaching state \'S5114\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2418
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2418() {
            this.Manager.BeginTest("BVTsS2418");
            this.Manager.Comment("reaching state \'S2418\'");
            string temp2186;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,NotSpecified,NotSpecified,E" +
                    "xisting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2186 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2419\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2186 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2419)", TestManagerHelpers.Describe(temp2186)));
            this.Manager.Comment("reaching state \'S5115\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2420
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2420() {
            this.Manager.BeginTest("BVTsS2420");
            this.Manager.Comment("reaching state \'S2420\'");
            string temp2187;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,Existing,Existing,Existi" +
                    "ng,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2187 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2421\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2187 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2421)", TestManagerHelpers.Describe(temp2187)));
            this.Manager.Comment("reaching state \'S5116\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2422
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2422() {
            this.Manager.BeginTest("BVTsS2422");
            this.Manager.Comment("reaching state \'S2422\'");
            string temp2188;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,Existing,NotSpecified,Exist" +
                    "ing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2188 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2423\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2188 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2423)", TestManagerHelpers.Describe(temp2188)));
            this.Manager.Comment("reaching state \'S5117\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2424
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2424() {
            this.Manager.BeginTest("BVTsS2424");
            this.Manager.Comment("reaching state \'S2424\'");
            string temp2189;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,NotSpecified,NotSpecif" +
                    "ied,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneE" +
                    "lement)\'");
            temp2189 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2425\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2189 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2425)", TestManagerHelpers.Describe(temp2189)));
            this.Manager.Comment("reaching state \'S5118\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2426
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2426() {
            this.Manager.BeginTest("BVTsS2426");
            this.Manager.Comment("reaching state \'S2426\'");
            string temp2190;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,NotSpecified,Existi" +
                    "ng,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2190 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2427\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2190 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2427)", TestManagerHelpers.Describe(temp2190)));
            this.Manager.Comment("reaching state \'S5119\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2428
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2428() {
            this.Manager.BeginTest("BVTsS2428");
            this.Manager.Comment("reaching state \'S2428\'");
            string temp2191;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,Existing,Existing,Exi" +
                    "sting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2191 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2429\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2191 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2429)", TestManagerHelpers.Describe(temp2191)));
            this.Manager.Comment("reaching state \'S5120\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2430
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2430() {
            this.Manager.BeginTest("BVTsS2430");
            this.Manager.Comment("reaching state \'S2430\'");
            string temp2192;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,Existing,NotSpecified" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2192 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2431\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2192 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2431)", TestManagerHelpers.Describe(temp2192)));
            this.Manager.Comment("reaching state \'S5121\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2432
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2432() {
            this.Manager.BeginTest("BVTsS2432");
            this.Manager.Comment("reaching state \'S2432\'");
            string temp2193;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,NotSpecified,Existi" +
                    "ng,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2193 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2433\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2193 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2433)", TestManagerHelpers.Describe(temp2193)));
            this.Manager.Comment("reaching state \'S5122\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2434
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2434() {
            this.Manager.BeginTest("BVTsS2434");
            this.Manager.Comment("reaching state \'S2434\'");
            string temp2194;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,Existing,Existing,E" +
                    "xisting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2194 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2435\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2194 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2435)", TestManagerHelpers.Describe(temp2194)));
            this.Manager.Comment("reaching state \'S5123\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2436() {
            this.Manager.BeginTest("BVTsS2436");
            this.Manager.Comment("reaching state \'S2436\'");
            string temp2195;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,NotSpecified,Existing,Ex" +
                    "isting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2195 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2437\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2195 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2437)", TestManagerHelpers.Describe(temp2195)));
            this.Manager.Comment("reaching state \'S5124\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2438
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2438() {
            this.Manager.BeginTest("BVTsS2438");
            this.Manager.Comment("reaching state \'S2438\'");
            string temp2196;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,NotSpecified,NotSpe" +
                    "cified,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2196 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2439\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2196 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "439)", TestManagerHelpers.Describe(temp2196)));
            this.Manager.Comment("reaching state \'S5125\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2440
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2440() {
            this.Manager.BeginTest("BVTsS2440");
            this.Manager.Comment("reaching state \'S2440\'");
            string temp2197;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,NotSpecified,NotSpecifie" +
                    "d,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2197 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2441\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2197 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2441)", TestManagerHelpers.Describe(temp2197)));
            this.Manager.Comment("reaching state \'S5126\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2442
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2442() {
            this.Manager.BeginTest("BVTsS2442");
            this.Manager.Comment("reaching state \'S2442\'");
            string temp2198;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,NotSpecified,Existing," +
                    "Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2198 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2443\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2198 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2443)", TestManagerHelpers.Describe(temp2198)));
            this.Manager.Comment("reaching state \'S5127\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2444
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2444() {
            this.Manager.BeginTest("BVTsS2444");
            this.Manager.Comment("reaching state \'S2444\'");
            string temp2199;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,NotSpecified,NotSpecif" +
                    "ied,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2199 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2445\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2199 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2445)", TestManagerHelpers.Describe(temp2199)));
            this.Manager.Comment("reaching state \'S5128\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2446
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2446() {
            this.Manager.BeginTest("BVTsS2446");
            this.Manager.Comment("reaching state \'S2446\'");
            string temp2200;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,NotSpecified," +
                    "Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2200 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2447\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2200 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "447)", TestManagerHelpers.Describe(temp2200)));
            this.Manager.Comment("reaching state \'S5129\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2448
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2448() {
            this.Manager.BeginTest("BVTsS2448");
            this.Manager.Comment("reaching state \'S2448\'");
            string temp2201;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,NotSpecified,Existing,Exist" +
                    "ing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2201 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2449\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2201 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2449)", TestManagerHelpers.Describe(temp2201)));
            this.Manager.Comment("reaching state \'S5130\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2450
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2450() {
            this.Manager.BeginTest("BVTsS2450");
            this.Manager.Comment("reaching state \'S2450\'");
            string temp2202;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,NotSpecified,E" +
                    "xisting,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,Only" +
                    "OneElement)\'");
            temp2202 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2451\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2202 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "451)", TestManagerHelpers.Describe(temp2202)));
            this.Manager.Comment("reaching state \'S5131\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2452
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2452() {
            this.Manager.BeginTest("BVTsS2452");
            this.Manager.Comment("reaching state \'S2452\'");
            string temp2203;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,NotSpecified,Existi" +
                    "ng,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2203 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2453\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2203 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "453)", TestManagerHelpers.Describe(temp2203)));
            this.Manager.Comment("reaching state \'S5132\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2454
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2454() {
            this.Manager.BeginTest("BVTsS2454");
            this.Manager.Comment("reaching state \'S2454\'");
            string temp2204;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,NotSpecified,NotSpecified,E" +
                    "xisting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2204 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2455\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2204 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2455)", TestManagerHelpers.Describe(temp2204)));
            this.Manager.Comment("reaching state \'S5133\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2456
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2456() {
            this.Manager.BeginTest("BVTsS2456");
            this.Manager.Comment("reaching state \'S2456\'");
            string temp2205;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,New,NotSpecified,Existing,Ex" +
                    "isting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2205 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2457\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2205 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2457)", TestManagerHelpers.Describe(temp2205)));
            this.Manager.Comment("reaching state \'S5134\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2458
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2458() {
            this.Manager.BeginTest("BVTsS2458");
            this.Manager.Comment("reaching state \'S2458\'");
            string temp2206;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,Existing,Existing,Exis" +
                    "ting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2206 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2459\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2206 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2459)", TestManagerHelpers.Describe(temp2206)));
            this.Manager.Comment("reaching state \'S5135\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2460
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2460() {
            this.Manager.BeginTest("BVTsS2460");
            this.Manager.Comment("reaching state \'S2460\'");
            string temp2207;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,Existing,Existing,Exis" +
                    "ting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2207 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2461\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2207 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2461)", TestManagerHelpers.Describe(temp2207)));
            this.Manager.Comment("reaching state \'S5136\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2462() {
            this.Manager.BeginTest("BVTsS2462");
            this.Manager.Comment("reaching state \'S2462\'");
            string temp2208;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,Existing,Existing,E" +
                    "xisting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2208 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2463\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2208 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2463)", TestManagerHelpers.Describe(temp2208)));
            this.Manager.Comment("reaching state \'S5137\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2464() {
            this.Manager.BeginTest("BVTsS2464");
            this.Manager.Comment("reaching state \'S2464\'");
            string temp2209;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,Existing,NotSpecified," +
                    "Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2209 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2465\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2209 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2465)", TestManagerHelpers.Describe(temp2209)));
            this.Manager.Comment("reaching state \'S5138\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2466
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2466() {
            this.Manager.BeginTest("BVTsS2466");
            this.Manager.Comment("reaching state \'S2466\'");
            string temp2210;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,NotSpecified,Existing,Exist" +
                    "ing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2210 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2467\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2210 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2467)", TestManagerHelpers.Describe(temp2210)));
            this.Manager.Comment("reaching state \'S5139\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2468
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2468() {
            this.Manager.BeginTest("BVTsS2468");
            this.Manager.Comment("reaching state \'S2468\'");
            string temp2211;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2211 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2469\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2211 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "469)", TestManagerHelpers.Describe(temp2211)));
            this.Manager.Comment("reaching state \'S5140\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2470
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2470() {
            this.Manager.BeginTest("BVTsS2470");
            this.Manager.Comment("reaching state \'S2470\'");
            string temp2212;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,NotSpecified,NotSpecif" +
                    "ied,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2212 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2471\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2212 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2471)", TestManagerHelpers.Describe(temp2212)));
            this.Manager.Comment("reaching state \'S5141\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2472
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2472() {
            this.Manager.BeginTest("BVTsS2472");
            this.Manager.Comment("reaching state \'S2472\'");
            string temp2213;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,Existing,Existing,E" +
                    "xisting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2213 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2473\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2213 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SavePricingRule, stat" +
                        "e S2473)", TestManagerHelpers.Describe(temp2213)));
            this.Manager.Comment("reaching state \'S5142\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2474
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2474() {
            this.Manager.BeginTest("BVTsS2474");
            this.Manager.Comment("reaching state \'S2474\'");
            string temp2214;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,Existing,NotSpecifi" +
                    "ed,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2214 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2475\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2214 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "475)", TestManagerHelpers.Describe(temp2214)));
            this.Manager.Comment("reaching state \'S5143\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2476
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2476() {
            this.Manager.BeginTest("BVTsS2476");
            this.Manager.Comment("reaching state \'S2476\'");
            string temp2215;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,NotSpecified,Existi" +
                    "ng,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2215 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2477\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2215 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "477)", TestManagerHelpers.Describe(temp2215)));
            this.Manager.Comment("reaching state \'S5144\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2478() {
            this.Manager.BeginTest("BVTsS2478");
            this.Manager.Comment("reaching state \'S2478\'");
            string temp2216;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,NotSpecified,Existing," +
                    "Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2216 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2479\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2216 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2479)", TestManagerHelpers.Describe(temp2216)));
            this.Manager.Comment("reaching state \'S5145\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2480
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2480() {
            this.Manager.BeginTest("BVTsS2480");
            this.Manager.Comment("reaching state \'S2480\'");
            string temp2217;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,Existing,NotSp" +
                    "ecified,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2217 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2481\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2217 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "481)", TestManagerHelpers.Describe(temp2217)));
            this.Manager.Comment("reaching state \'S5146\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2482
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2482() {
            this.Manager.BeginTest("BVTsS2482");
            this.Manager.Comment("reaching state \'S2482\'");
            string temp2218;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,Existing,NotSp" +
                    "ecified,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneE" +
                    "lement)\'");
            temp2218 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2483\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2218 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "483)", TestManagerHelpers.Describe(temp2218)));
            this.Manager.Comment("reaching state \'S5147\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2484
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2484() {
            this.Manager.BeginTest("BVTsS2484");
            this.Manager.Comment("reaching state \'S2484\'");
            string temp2219;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,Existing,NotSpecifi" +
                    "ed,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2219 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2485\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2219 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "485)", TestManagerHelpers.Describe(temp2219)));
            this.Manager.Comment("reaching state \'S5148\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2486
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2486() {
            this.Manager.BeginTest("BVTsS2486");
            this.Manager.Comment("reaching state \'S2486\'");
            string temp2220;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,NotSpecified,NotSpecif" +
                    "ied,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2220 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2487\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2220 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "487)", TestManagerHelpers.Describe(temp2220)));
            this.Manager.Comment("reaching state \'S5149\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2488
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2488() {
            this.Manager.BeginTest("BVTsS2488");
            this.Manager.Comment("reaching state \'S2488\'");
            string temp2221;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,NotSpecified,NotSpecified,E" +
                    "xisting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2221 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2489\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2221 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2489)", TestManagerHelpers.Describe(temp2221)));
            this.Manager.Comment("reaching state \'S5150\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2490
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2490() {
            this.Manager.BeginTest("BVTsS2490");
            this.Manager.Comment("reaching state \'S2490\'");
            string temp2222;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,Existing,Existing,E" +
                    "xisting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2222 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2491\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2222 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2491)", TestManagerHelpers.Describe(temp2222)));
            this.Manager.Comment("reaching state \'S5151\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2492() {
            this.Manager.BeginTest("BVTsS2492");
            this.Manager.Comment("reaching state \'S2492\'");
            string temp2223;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,NotSpecified,NotSpecifie" +
                    "d,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2223 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2493\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2223 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2493)", TestManagerHelpers.Describe(temp2223)));
            this.Manager.Comment("reaching state \'S5152\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2494
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2494() {
            this.Manager.BeginTest("BVTsS2494");
            this.Manager.Comment("reaching state \'S2494\'");
            string temp2224;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,NotSpecified,Existing,Ex" +
                    "isting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2224 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2495\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2224 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2495)", TestManagerHelpers.Describe(temp2224)));
            this.Manager.Comment("reaching state \'S5153\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2496
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2496() {
            this.Manager.BeginTest("BVTsS2496");
            this.Manager.Comment("reaching state \'S2496\'");
            string temp2225;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,Existing,Exist" +
                    "ing,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2225 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2497\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2225 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "497)", TestManagerHelpers.Describe(temp2225)));
            this.Manager.Comment("reaching state \'S5154\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2498
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2498() {
            this.Manager.BeginTest("BVTsS2498");
            this.Manager.Comment("reaching state \'S2498\'");
            string temp2226;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,NotSpecified,NotSpecified,E" +
                    "xisting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2226 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2499\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2226 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2499)", TestManagerHelpers.Describe(temp2226)));
            this.Manager.Comment("reaching state \'S5155\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2500
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2500() {
            this.Manager.BeginTest("BVTsS2500");
            this.Manager.Comment("reaching state \'S2500\'");
            string temp2227;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,Existing,NotSpecified," +
                    "Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2227 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2501\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2227 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2501)", TestManagerHelpers.Describe(temp2227)));
            this.Manager.Comment("reaching state \'S5156\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2502
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2502() {
            this.Manager.BeginTest("BVTsS2502");
            this.Manager.Comment("reaching state \'S2502\'");
            string temp2228;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,Existing,NotSpecified," +
                    "Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2228 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2503\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2228 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2503)", TestManagerHelpers.Describe(temp2228)));
            this.Manager.Comment("reaching state \'S5157\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2504
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2504() {
            this.Manager.BeginTest("BVTsS2504");
            this.Manager.Comment("reaching state \'S2504\'");
            string temp2229;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,Existing,Exist" +
                    "ing,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2229 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2505\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2229 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "505)", TestManagerHelpers.Describe(temp2229)));
            this.Manager.Comment("reaching state \'S5158\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2506
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2506() {
            this.Manager.BeginTest("BVTsS2506");
            this.Manager.Comment("reaching state \'S2506\'");
            string temp2230;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,NotSpecified,NotSpecif" +
                    "ied,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneE" +
                    "lement)\'");
            temp2230 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2507\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2230 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "507)", TestManagerHelpers.Describe(temp2230)));
            this.Manager.Comment("reaching state \'S5159\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2508() {
            this.Manager.BeginTest("BVTsS2508");
            this.Manager.Comment("reaching state \'S2508\'");
            string temp2231;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,NotSpecified," +
                    "Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2231 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2509\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2231 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "509)", TestManagerHelpers.Describe(temp2231)));
            this.Manager.Comment("reaching state \'S5160\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2510
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2510() {
            this.Manager.BeginTest("BVTsS2510");
            this.Manager.Comment("reaching state \'S2510\'");
            string temp2232;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,Existing,Existing,E" +
                    "xisting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2232 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2511\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2232 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "511)", TestManagerHelpers.Describe(temp2232)));
            this.Manager.Comment("reaching state \'S5161\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2512
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2512() {
            this.Manager.BeginTest("BVTsS2512");
            this.Manager.Comment("reaching state \'S2512\'");
            string temp2233;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,Existing,NotSpecifi" +
                    "ed,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2233 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2513\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2233 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2513)", TestManagerHelpers.Describe(temp2233)));
            this.Manager.Comment("reaching state \'S5162\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2514
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2514() {
            this.Manager.BeginTest("BVTsS2514");
            this.Manager.Comment("reaching state \'S2514\'");
            string temp2234;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,NotSpecified,NotSpecif" +
                    "ied,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2234 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2515\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2234 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "515)", TestManagerHelpers.Describe(temp2234)));
            this.Manager.Comment("reaching state \'S5163\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2516() {
            this.Manager.BeginTest("BVTsS2516");
            this.Manager.Comment("reaching state \'S2516\'");
            string temp2235;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,NotSpecified,NotSpe" +
                    "cified,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2235 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2517\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2235 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "517)", TestManagerHelpers.Describe(temp2235)));
            this.Manager.Comment("reaching state \'S5164\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2518
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2518() {
            this.Manager.BeginTest("BVTsS2518");
            this.Manager.Comment("reaching state \'S2518\'");
            string temp2236;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,Existing,NotSpecified," +
                    "Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2236 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2519\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2236 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2519)", TestManagerHelpers.Describe(temp2236)));
            this.Manager.Comment("reaching state \'S5165\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2520
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2520() {
            this.Manager.BeginTest("BVTsS2520");
            this.Manager.Comment("reaching state \'S2520\'");
            string temp2237;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,NotSpecified,NotSpe" +
                    "cified,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2237 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2521\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2237 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2521)", TestManagerHelpers.Describe(temp2237)));
            this.Manager.Comment("reaching state \'S5166\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2522
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2522() {
            this.Manager.BeginTest("BVTsS2522");
            this.Manager.Comment("reaching state \'S2522\'");
            string temp2238;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,NotSpecified,Existing," +
                    "Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2238 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2523\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2238 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2523)", TestManagerHelpers.Describe(temp2238)));
            this.Manager.Comment("reaching state \'S5167\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2524() {
            this.Manager.BeginTest("BVTsS2524");
            this.Manager.Comment("reaching state \'S2524\'");
            string temp2239;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,NotSpecified,Existi" +
                    "ng,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2239 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2525\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2239 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2525)", TestManagerHelpers.Describe(temp2239)));
            this.Manager.Comment("reaching state \'S5168\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2526
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2526() {
            this.Manager.BeginTest("BVTsS2526");
            this.Manager.Comment("reaching state \'S2526\'");
            string temp2240;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,NotSpecified,N" +
                    "otSpecified,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,Only" +
                    "OneElement)\'");
            temp2240 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2527\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2240 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "527)", TestManagerHelpers.Describe(temp2240)));
            this.Manager.Comment("reaching state \'S5169\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2528
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2528() {
            this.Manager.BeginTest("BVTsS2528");
            this.Manager.Comment("reaching state \'S2528\'");
            string temp2241;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2241 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2529\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2241 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2529)", TestManagerHelpers.Describe(temp2241)));
            this.Manager.Comment("reaching state \'S5170\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2530
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2530() {
            this.Manager.BeginTest("BVTsS2530");
            this.Manager.Comment("reaching state \'S2530\'");
            string temp2242;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,NotSpecified,Existing,Exist" +
                    "ing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2242 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2531\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2242 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2531)", TestManagerHelpers.Describe(temp2242)));
            this.Manager.Comment("reaching state \'S5171\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2532() {
            this.Manager.BeginTest("BVTsS2532");
            this.Manager.Comment("reaching state \'S2532\'");
            string temp2243;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2243 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2533\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2243 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "533)", TestManagerHelpers.Describe(temp2243)));
            this.Manager.Comment("reaching state \'S5172\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2534
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2534() {
            this.Manager.BeginTest("BVTsS2534");
            this.Manager.Comment("reaching state \'S2534\'");
            string temp2244;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Delete,Existing,NotSpecified,Existi" +
                    "ng,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2244 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2535\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2244 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2535)", TestManagerHelpers.Describe(temp2244)));
            this.Manager.Comment("reaching state \'S5173\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2536
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2536() {
            this.Manager.BeginTest("BVTsS2536");
            this.Manager.Comment("reaching state \'S2536\'");
            string temp2245;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,NotSpecified,Existi" +
                    "ng,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2245 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2537\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2245 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "537)", TestManagerHelpers.Describe(temp2245)));
            this.Manager.Comment("reaching state \'S5174\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2538
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2538() {
            this.Manager.BeginTest("BVTsS2538");
            this.Manager.Comment("reaching state \'S2538\'");
            string temp2246;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,New,NotSpecified,Existing,Exist" +
                    "ing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2246 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2539\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2246 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2539)", TestManagerHelpers.Describe(temp2246)));
            this.Manager.Comment("reaching state \'S5175\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2540
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2540() {
            this.Manager.BeginTest("BVTsS2540");
            this.Manager.Comment("reaching state \'S2540\'");
            string temp2247;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,New,NotSpecified,NotSpe" +
                    "cified,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyO" +
                    "neElement)\'");
            temp2247 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2541\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2247 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "541)", TestManagerHelpers.Describe(temp2247)));
            this.Manager.Comment("reaching state \'S5176\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2542
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2542() {
            this.Manager.BeginTest("BVTsS2542");
            this.Manager.Comment("reaching state \'S2542\'");
            string temp2248;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,NotSpecified,N" +
                    "otSpecified,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today," +
                    "OnlyOneElement)\'");
            temp2248 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2543\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2248 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "543)", TestManagerHelpers.Describe(temp2248)));
            this.Manager.Comment("reaching state \'S5177\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2544
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2544() {
            this.Manager.BeginTest("BVTsS2544");
            this.Manager.Comment("reaching state \'S2544\'");
            string temp2249;
            this.Manager.Comment("executing step \'call SavePricingRule(NoHeader,Add,Existing,NotSpecified,Existing," +
                    "Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2249 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2545\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2249 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2545)", TestManagerHelpers.Describe(temp2249)));
            this.Manager.Comment("reaching state \'S5178\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2546
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2546() {
            this.Manager.BeginTest("BVTsS2546");
            this.Manager.Comment("reaching state \'S2546\'");
            string temp2250;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,Existing,Exist" +
                    "ing,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'" +
                    "");
            temp2250 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2547\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2250 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SavePricingRule, stat" +
                        "e S2547)", TestManagerHelpers.Describe(temp2250)));
            this.Manager.Comment("reaching state \'S5179\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2548
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2548() {
            this.Manager.BeginTest("BVTsS2548");
            this.Manager.Comment("reaching state \'S2548\'");
            string temp2251;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Delete,Existing,NotSpecified,E" +
                    "xisting,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneEleme" +
                    "nt)\'");
            temp2251 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2549\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"ArgumentException\"\'");
            this.Manager.Assert((temp2251 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SavePricingRule, state S2" +
                        "549)", TestManagerHelpers.Describe(temp2251)));
            this.Manager.Comment("reaching state \'S5180\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2550
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2550() {
            this.Manager.BeginTest("BVTsS2550");
            this.Manager.Comment("reaching state \'S2550\'");
            string temp2252;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2252 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2551\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp2252 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S2551)", TestManagerHelpers.Describe(temp2252)));
            this.Manager.Comment("reaching state \'S5181\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2552
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2552() {
            this.Manager.BeginTest("BVTsS2552");
            this.Manager.Comment("reaching state \'S2552\'");
            string temp2253;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,Existing,NotSpecifi" +
                    "ed,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2253 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2553\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2253 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2553)", TestManagerHelpers.Describe(temp2253)));
            this.Manager.Comment("reaching state \'S5182\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2554
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2554() {
            this.Manager.BeginTest("BVTsS2554");
            this.Manager.Comment("reaching state \'S2554\'");
            string temp2254;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,NotSpecified,NotSpe" +
                    "cified,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEl" +
                    "ement)\'");
            temp2254 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2555\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2254 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2555)", TestManagerHelpers.Describe(temp2254)));
            this.Manager.Comment("reaching state \'S5183\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2556
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2556() {
            this.Manager.BeginTest("BVTsS2556");
            this.Manager.Comment("reaching state \'S2556\'");
            string temp2255;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,NotSpecified,NotSpeci" +
                    "fied,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOne" +
                    "Element)\'");
            temp2255 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2557\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2255 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2557)", TestManagerHelpers.Describe(temp2255)));
            this.Manager.Comment("reaching state \'S5184\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2558
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2558() {
            this.Manager.BeginTest("BVTsS2558");
            this.Manager.Comment("reaching state \'S2558\'");
            string temp2256;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,NotSpecified,NotSpeci" +
                    "fied,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2256 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2559\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2256 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2559)", TestManagerHelpers.Describe(temp2256)));
            this.Manager.Comment("reaching state \'S5185\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2560
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2560() {
            this.Manager.BeginTest("BVTsS2560");
            this.Manager.Comment("reaching state \'S2560\'");
            string temp2257;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,NotSpecified,NotSpeci" +
                    "fied,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2257 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2561\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2257 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2561)", TestManagerHelpers.Describe(temp2257)));
            this.Manager.Comment("reaching state \'S5186\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2562
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2562() {
            this.Manager.BeginTest("BVTsS2562");
            this.Manager.Comment("reaching state \'S2562\'");
            string temp2258;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,NotSpecified,Existing" +
                    ",Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2258 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2563\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2258 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2563)", TestManagerHelpers.Describe(temp2258)));
            this.Manager.Comment("reaching state \'S5187\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2564
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2564() {
            this.Manager.BeginTest("BVTsS2564");
            this.Manager.Comment("reaching state \'S2564\'");
            string temp2259;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,NotSpecified,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2259 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2565\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2259 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2565)", TestManagerHelpers.Describe(temp2259)));
            this.Manager.Comment("reaching state \'S5188\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2566
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2566() {
            this.Manager.BeginTest("BVTsS2566");
            this.Manager.Comment("reaching state \'S2566\'");
            string temp2260;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,Existing,Existing,Exi" +
                    "sting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2260 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2567\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2260 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2567)", TestManagerHelpers.Describe(temp2260)));
            this.Manager.Comment("reaching state \'S5189\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2568
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2568() {
            this.Manager.BeginTest("BVTsS2568");
            this.Manager.Comment("reaching state \'S2568\'");
            string temp2261;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,Existing,Existing,E" +
                    "xisting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2261 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2569\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2261 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2569)", TestManagerHelpers.Describe(temp2261)));
            this.Manager.Comment("reaching state \'S5190\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2570
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2570() {
            this.Manager.BeginTest("BVTsS2570");
            this.Manager.Comment("reaching state \'S2570\'");
            string temp2262;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,Existing,Existing,Exi" +
                    "sting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2262 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2571\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2262 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2571)", TestManagerHelpers.Describe(temp2262)));
            this.Manager.Comment("reaching state \'S5191\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2572
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2572() {
            this.Manager.BeginTest("BVTsS2572");
            this.Manager.Comment("reaching state \'S2572\'");
            string temp2263;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,Existing,Existing,Existi" +
                    "ng,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2263 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2573\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2263 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2573)", TestManagerHelpers.Describe(temp2263)));
            this.Manager.Comment("reaching state \'S5192\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2574
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2574() {
            this.Manager.BeginTest("BVTsS2574");
            this.Manager.Comment("reaching state \'S2574\'");
            string temp2264;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,NotSpecified,Existi" +
                    "ng,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElemen" +
                    "t)\'");
            temp2264 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2575\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2264 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2575)", TestManagerHelpers.Describe(temp2264)));
            this.Manager.Comment("reaching state \'S5193\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2576
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2576() {
            this.Manager.BeginTest("BVTsS2576");
            this.Manager.Comment("reaching state \'S2576\'");
            string temp2265;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,NotSpecified,Exi" +
                    "sting,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEle" +
                    "ment)\'");
            temp2265 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2577\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2265 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2577)", TestManagerHelpers.Describe(temp2265)));
            this.Manager.Comment("reaching state \'S5194\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2578() {
            this.Manager.BeginTest("BVTsS2578");
            this.Manager.Comment("reaching state \'S2578\'");
            string temp2266;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,NotSpecified,NotSpecifie" +
                    "d,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneEle" +
                    "ment)\'");
            temp2266 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2579\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2266 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2579)", TestManagerHelpers.Describe(temp2266)));
            this.Manager.Comment("reaching state \'S5195\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2580
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2580() {
            this.Manager.BeginTest("BVTsS2580");
            this.Manager.Comment("reaching state \'S2580\'");
            string temp2267;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,NotSpecified,Not" +
                    "Specified,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,On" +
                    "lyOneElement)\'");
            temp2267 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2581\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2267 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2581)", TestManagerHelpers.Describe(temp2267)));
            this.Manager.Comment("reaching state \'S5196\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2582
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2582() {
            this.Manager.BeginTest("BVTsS2582");
            this.Manager.Comment("reaching state \'S2582\'");
            string temp2268;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,Existing,Existin" +
                    "g,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2268 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2583\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2268 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2583)", TestManagerHelpers.Describe(temp2268)));
            this.Manager.Comment("reaching state \'S5197\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2584
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2584() {
            this.Manager.BeginTest("BVTsS2584");
            this.Manager.Comment("reaching state \'S2584\'");
            string temp2269;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,Existing,NotSpecified,Ex" +
                    "isting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2269 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2585\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2269 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2585)", TestManagerHelpers.Describe(temp2269)));
            this.Manager.Comment("reaching state \'S5198\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2586() {
            this.Manager.BeginTest("BVTsS2586");
            this.Manager.Comment("reaching state \'S2586\'");
            string temp2270;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,Existing,Existin" +
                    "g,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2270 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2587\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2270 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2587)", TestManagerHelpers.Describe(temp2270)));
            this.Manager.Comment("reaching state \'S5199\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2588
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2588() {
            this.Manager.BeginTest("BVTsS2588");
            this.Manager.Comment("reaching state \'S2588\'");
            string temp2271;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,NotSpecified,Existing" +
                    ",Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2271 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2589\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2271 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2589)", TestManagerHelpers.Describe(temp2271)));
            this.Manager.Comment("reaching state \'S5200\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2590
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2590() {
            this.Manager.BeginTest("BVTsS2590");
            this.Manager.Comment("reaching state \'S2590\'");
            string temp2272;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,NotSpecified,Existing" +
                    ",Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2272 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2591\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2272 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2591)", TestManagerHelpers.Describe(temp2272)));
            this.Manager.Comment("reaching state \'S5201\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2592
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2592() {
            this.Manager.BeginTest("BVTsS2592");
            this.Manager.Comment("reaching state \'S2592\'");
            string temp2273;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,Existing,Existing,Existi" +
                    "ng,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2273 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2593\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2273 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2593)", TestManagerHelpers.Describe(temp2273)));
            this.Manager.Comment("reaching state \'S5202\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2594
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2594() {
            this.Manager.BeginTest("BVTsS2594");
            this.Manager.Comment("reaching state \'S2594\'");
            string temp2274;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,Existing,NotSpec" +
                    "ified,Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneEle" +
                    "ment)\'");
            temp2274 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2595\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2274 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2595)", TestManagerHelpers.Describe(temp2274)));
            this.Manager.Comment("reaching state \'S5203\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2596
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2596() {
            this.Manager.BeginTest("BVTsS2596");
            this.Manager.Comment("reaching state \'S2596\'");
            string temp2275;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,Existing,NotSpec" +
                    "ified,Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOn" +
                    "eElement)\'");
            temp2275 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2597\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2275 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2597)", TestManagerHelpers.Describe(temp2275)));
            this.Manager.Comment("reaching state \'S5204\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2598
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2598() {
            this.Manager.BeginTest("BVTsS2598");
            this.Manager.Comment("reaching state \'S2598\'");
            string temp2276;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,NotSpecified,Existing,Ex" +
                    "isting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2276 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2599\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2276 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2599)", TestManagerHelpers.Describe(temp2276)));
            this.Manager.Comment("reaching state \'S5205\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2600() {
            this.Manager.BeginTest("BVTsS2600");
            this.Manager.Comment("reaching state \'S2600\'");
            string temp2277;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,NotSpecified,NotSpecifie" +
                    "d,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2277 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2601\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2277 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2601)", TestManagerHelpers.Describe(temp2277)));
            this.Manager.Comment("reaching state \'S5206\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2602() {
            this.Manager.BeginTest("BVTsS2602");
            this.Manager.Comment("reaching state \'S2602\'");
            string temp2278;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,NotSpecified,NotSpecifie" +
                    "d,Existing,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2278 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2603\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2278 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2603)", TestManagerHelpers.Describe(temp2278)));
            this.Manager.Comment("reaching state \'S5207\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2604
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2604() {
            this.Manager.BeginTest("BVTsS2604");
            this.Manager.Comment("reaching state \'S2604\'");
            string temp2279;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,NotSpecified,Existing,Ex" +
                    "isting,Existing,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement)\'");
            temp2279 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2605\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2279 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2605)", TestManagerHelpers.Describe(temp2279)));
            this.Manager.Comment("reaching state \'S5208\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2606
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2606() {
            this.Manager.BeginTest("BVTsS2606");
            this.Manager.Comment("reaching state \'S2606\'");
            string temp2280;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,Existing,NotSpecified,Ex" +
                    "isting,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2280 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2607\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2280 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2607)", TestManagerHelpers.Describe(temp2280)));
            this.Manager.Comment("reaching state \'S5209\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2608
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2608() {
            this.Manager.BeginTest("BVTsS2608");
            this.Manager.Comment("reaching state \'S2608\'");
            string temp2281;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,Existing,NotSpecified,Ex" +
                    "isting,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2281 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2609\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2281 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2609)", TestManagerHelpers.Describe(temp2281)));
            this.Manager.Comment("reaching state \'S5210\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2610
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2610() {
            this.Manager.BeginTest("BVTsS2610");
            this.Manager.Comment("reaching state \'S2610\'");
            string temp2282;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,Existing,NotSpecified,Existi" +
                    "ng,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2282 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2611\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2282 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2611)", TestManagerHelpers.Describe(temp2282)));
            this.Manager.Comment("reaching state \'S5211\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2612
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2612() {
            this.Manager.BeginTest("BVTsS2612");
            this.Manager.Comment("reaching state \'S2612\'");
            string temp2283;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Add,New,Existing,NotSpecified,Ex" +
                    "isting,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2283 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2613\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2283 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2613)", TestManagerHelpers.Describe(temp2283)));
            this.Manager.Comment("reaching state \'S5212\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2614() {
            this.Manager.BeginTest("BVTsS2614");
            this.Manager.Comment("reaching state \'S2614\'");
            string temp2284;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,Existing,NotSpecified" +
                    ",Existing,NotSpecified,Length50,Existing,Existing,Existing,Today,OnlyOneElement)" +
                    "\'");
            temp2284 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2615\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2284 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2615)", TestManagerHelpers.Describe(temp2284)));
            this.Manager.Comment("reaching state \'S5213\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2616
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2616() {
            this.Manager.BeginTest("BVTsS2616");
            this.Manager.Comment("reaching state \'S2616\'");
            string temp2285;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,New,Existing,NotSpecified" +
                    ",Existing,NotSpecified,Length50,NotSpecified,Existing,Existing,Today,OnlyOneElem" +
                    "ent)\'");
            temp2285 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2617\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2285 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2617)", TestManagerHelpers.Describe(temp2285)));
            this.Manager.Comment("reaching state \'S5214\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2618
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2618() {
            this.Manager.BeginTest("BVTsS2618");
            this.Manager.Comment("reaching state \'S2618\'");
            string temp2286;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,NotSpecified,Exi" +
                    "sting,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2286 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2619\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2286 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2619)", TestManagerHelpers.Describe(temp2286)));
            this.Manager.Comment("reaching state \'S5215\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2620
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2620() {
            this.Manager.BeginTest("BVTsS2620");
            this.Manager.Comment("reaching state \'S2620\'");
            string temp2287;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,Existing,Existin" +
                    "g,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement)\'");
            temp2287 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2621\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2287 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2621)", TestManagerHelpers.Describe(temp2287)));
            this.Manager.Comment("reaching state \'S5216\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2622
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2622() {
            this.Manager.BeginTest("BVTsS2622");
            this.Manager.Comment("reaching state \'S2622\'");
            string temp2288;
            this.Manager.Comment("executing step \'call SavePricingRule(WrongHeader,Delete,Existing,Existing,NotSpec" +
                    "ified,Existing,Existing,Length50,Existing,Existing,Existing,Today,OnlyOneElement" +
                    ")\'");
            temp2288 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.OnlyOneElement);
            this.Manager.Comment("reaching state \'S2623\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2288 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SavePricingRule, state " +
                        "S2623)", TestManagerHelpers.Describe(temp2288)));
            this.Manager.Comment("reaching state \'S5217\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2624
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2624() {
            this.Manager.BeginTest("BVTsS2624");
            this.Manager.Comment("reaching state \'S2624\'");
            string temp2289;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Add,Existing,Today,Future,Length255,Length" +
                    "2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2289 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2625\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2289 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2625)", TestManagerHelpers.Describe(temp2289)));
            this.Manager.Comment("reaching state \'S5218\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2626
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2626() {
            this.Manager.BeginTest("BVTsS2626");
            this.Manager.Comment("reaching state \'S2626\'");
            string temp2290;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Add,Existing,Today,Future,Length255,L" +
                    "ength2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2290 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2627\'");
            this.Manager.Comment("checking step \'return SaveTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2290 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveTask, state S2627)", TestManagerHelpers.Describe(temp2290)));
            this.Manager.Comment("reaching state \'S5219\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2628
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2628() {
            this.Manager.BeginTest("BVTsS2628");
            this.Manager.Comment("reaching state \'S2628\'");
            string temp2291;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Delete,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2291 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2629\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2291 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2629)", TestManagerHelpers.Describe(temp2291)));
            this.Manager.Comment("reaching state \'S5220\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2630
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2630() {
            this.Manager.BeginTest("BVTsS2630");
            this.Manager.Comment("reaching state \'S2630\'");
            string temp2292;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Delete,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2292 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2631\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp2292 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S2631)", TestManagerHelpers.Describe(temp2292)));
            this.Manager.Comment("reaching state \'S5221\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2632
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2632() {
            this.Manager.BeginTest("BVTsS2632");
            this.Manager.Comment("reaching state \'S2632\'");
            string temp2293;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Delete,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,Existing)\'");
            temp2293 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2633\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2293 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2633)", TestManagerHelpers.Describe(temp2293)));
            this.Manager.Comment("reaching state \'S5222\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2634
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2634() {
            this.Manager.BeginTest("BVTsS2634");
            this.Manager.Comment("reaching state \'S2634\'");
            string temp2294;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Delete,New,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2294 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2635\'");
            this.Manager.Comment("checking step \'return SaveTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2294 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveTask, state S2635)", TestManagerHelpers.Describe(temp2294)));
            this.Manager.Comment("reaching state \'S5223\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2636
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2636() {
            this.Manager.BeginTest("BVTsS2636");
            this.Manager.Comment("reaching state \'S2636\'");
            string temp2295;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Add,New,Today,Future,Length255,Length" +
                    "2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2295 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2637\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp2295 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S2637)", TestManagerHelpers.Describe(temp2295)));
            this.Manager.Comment("reaching state \'S5224\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2638
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2638() {
            this.Manager.BeginTest("BVTsS2638");
            this.Manager.Comment("reaching state \'S2638\'");
            string temp2296;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Add,New,Today,Future,Length255,Length2000," +
                    "Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2296 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2639\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2296 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2639)", TestManagerHelpers.Describe(temp2296)));
            this.Manager.Comment("reaching state \'S5225\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2640
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2640() {
            this.Manager.BeginTest("BVTsS2640");
            this.Manager.Comment("reaching state \'S2640\'");
            string temp2297;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Delete,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2297 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2641\'");
            this.Manager.Comment("checking step \'return SaveTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2297 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveTask, state S2641)", TestManagerHelpers.Describe(temp2297)));
            this.Manager.Comment("reaching state \'S5226\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2642
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2642() {
            this.Manager.BeginTest("BVTsS2642");
            this.Manager.Comment("reaching state \'S2642\'");
            string temp2298;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Add,Existing,Today,Future,Length255,Length" +
                    "2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2298 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2643\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2298 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2643)", TestManagerHelpers.Describe(temp2298)));
            this.Manager.Comment("reaching state \'S5227\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2644
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2644() {
            this.Manager.BeginTest("BVTsS2644");
            this.Manager.Comment("reaching state \'S2644\'");
            string temp2299;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Delete,Existing,Today,Future,Length25" +
                    "5,Length2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2299 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2645\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp2299 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S2645)", TestManagerHelpers.Describe(temp2299)));
            this.Manager.Comment("reaching state \'S5228\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2646
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2646() {
            this.Manager.BeginTest("BVTsS2646");
            this.Manager.Comment("reaching state \'S2646\'");
            string temp2300;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Add,Existing,Today,Future,Length255,L" +
                    "ength2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2300 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2647\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp2300 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S2647)", TestManagerHelpers.Describe(temp2300)));
            this.Manager.Comment("reaching state \'S5229\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2648
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2648() {
            this.Manager.BeginTest("BVTsS2648");
            this.Manager.Comment("reaching state \'S2648\'");
            string temp2301;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Add,New,Today,Future,Length255,Length" +
                    "2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2301 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2649\'");
            this.Manager.Comment("checking step \'return SaveTask/\"ArgumentException\"\'");
            this.Manager.Assert((temp2301 == "ArgumentException"), String.Format("expected \'\"ArgumentException\"\', actual \'{0}\' (return of SaveTask, state S2649)", TestManagerHelpers.Describe(temp2301)));
            this.Manager.Comment("reaching state \'S5230\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2650
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2650() {
            this.Manager.BeginTest("BVTsS2650");
            this.Manager.Comment("reaching state \'S2650\'");
            string temp2302;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2302 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2651\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2302 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2651)", TestManagerHelpers.Describe(temp2302)));
            this.Manager.Comment("reaching state \'S5231\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2652
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2652() {
            this.Manager.BeginTest("BVTsS2652");
            this.Manager.Comment("reaching state \'S2652\'");
            string temp2303;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2303 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2653\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2303 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2653)", TestManagerHelpers.Describe(temp2303)));
            this.Manager.Comment("reaching state \'S5232\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2654
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2654() {
            this.Manager.BeginTest("BVTsS2654");
            this.Manager.Comment("reaching state \'S2654\'");
            string temp2304;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Delete,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2304 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2655\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2304 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2655)", TestManagerHelpers.Describe(temp2304)));
            this.Manager.Comment("reaching state \'S5233\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2656
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2656() {
            this.Manager.BeginTest("BVTsS2656");
            this.Manager.Comment("reaching state \'S2656\'");
            string temp2305;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2305 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2657\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2305 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2657)", TestManagerHelpers.Describe(temp2305)));
            this.Manager.Comment("reaching state \'S5234\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2658
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2658() {
            this.Manager.BeginTest("BVTsS2658");
            this.Manager.Comment("reaching state \'S2658\'");
            string temp2306;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Delete,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2306 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2659\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2306 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2659)", TestManagerHelpers.Describe(temp2306)));
            this.Manager.Comment("reaching state \'S5235\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2660
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2660() {
            this.Manager.BeginTest("BVTsS2660");
            this.Manager.Comment("reaching state \'S2660\'");
            string temp2307;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Add,New,Today,Future,Length255,Length2000," +
                    "Length2000,Length2000,Length2000,Existing)\'");
            temp2307 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2661\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2307 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2661)", TestManagerHelpers.Describe(temp2307)));
            this.Manager.Comment("reaching state \'S5236\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2662
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2662() {
            this.Manager.BeginTest("BVTsS2662");
            this.Manager.Comment("reaching state \'S2662\'");
            string temp2308;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Add,New,Today,Future,Length255,Length20" +
                    "00,Length2000,Length2000,Length2000,Existing)\'");
            temp2308 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2663\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2308 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2663)", TestManagerHelpers.Describe(temp2308)));
            this.Manager.Comment("reaching state \'S5237\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2664
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2664() {
            this.Manager.BeginTest("BVTsS2664");
            this.Manager.Comment("reaching state \'S2664\'");
            string temp2309;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Add,Existing,Today,Future,Length255,Len" +
                    "gth2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2309 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2665\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2309 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2665)", TestManagerHelpers.Describe(temp2309)));
            this.Manager.Comment("reaching state \'S5238\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2666
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2666() {
            this.Manager.BeginTest("BVTsS2666");
            this.Manager.Comment("reaching state \'S2666\'");
            string temp2310;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Delete,New,Today,Future,Length255,Lengt" +
                    "h2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2310 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2667\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2310 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2667)", TestManagerHelpers.Describe(temp2310)));
            this.Manager.Comment("reaching state \'S5239\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2668
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2668() {
            this.Manager.BeginTest("BVTsS2668");
            this.Manager.Comment("reaching state \'S2668\'");
            string temp2311;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,NotSpecified)\'");
            temp2311 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.NotSpecified);
            this.Manager.Comment("reaching state \'S2669\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2311 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2669)", TestManagerHelpers.Describe(temp2311)));
            this.Manager.Comment("reaching state \'S5240\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2670() {
            this.Manager.BeginTest("BVTsS2670");
            this.Manager.Comment("reaching state \'S2670\'");
            string temp2312;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Delete,Existing,Today,Future,Length255," +
                    "Length2000,Length2000,Length2000,Length2000,Existing)\'");
            temp2312 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.LongStringType.Length2000, InputTypes.RelatedItemIdType.Existing);
            this.Manager.Comment("reaching state \'S2671\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2312 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2671)", TestManagerHelpers.Describe(temp2312)));
            this.Manager.Comment("reaching state \'S5241\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2672
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2672() {
            this.Manager.BeginTest("BVTsS2672");
            this.Manager.Comment("reaching state \'S2672\'");
            string temp2313;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,Existing,Length50,NoHeader)\'");
            temp2313 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2673\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2313 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveVideoEncoding, stat" +
                        "e S2673)", TestManagerHelpers.Describe(temp2313)));
            this.Manager.Comment("reaching state \'S5242\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2674
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2674() {
            this.Manager.BeginTest("BVTsS2674");
            this.Manager.Comment("reaching state \'S2674\'");
            string temp2314;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,Existing,Length50,CorrectHeader)\'");
            temp2314 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2675\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp2314 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S2675)", TestManagerHelpers.Describe(temp2314)));
            this.Manager.Comment("reaching state \'S5243\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2676
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2676() {
            this.Manager.BeginTest("BVTsS2676");
            this.Manager.Comment("reaching state \'S2676\'");
            string temp2315;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,Existing,Length50,WrongHeader)\'");
            temp2315 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2677\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2315 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveVideoEncoding, stat" +
                        "e S2677)", TestManagerHelpers.Describe(temp2315)));
            this.Manager.Comment("reaching state \'S5244\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2678
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2678() {
            this.Manager.BeginTest("BVTsS2678");
            this.Manager.Comment("reaching state \'S2678\'");
            string temp2316;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,Existing,Length50,NoHeader)\'");
            temp2316 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2679\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2316 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveVideoEncoding, stat" +
                        "e S2679)", TestManagerHelpers.Describe(temp2316)));
            this.Manager.Comment("reaching state \'S5245\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2680
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2680() {
            this.Manager.BeginTest("BVTsS2680");
            this.Manager.Comment("reaching state \'S2680\'");
            string temp2317;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,New,Length50,WrongHeader)\'");
            temp2317 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2681\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2317 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveVideoEncoding, stat" +
                        "e S2681)", TestManagerHelpers.Describe(temp2317)));
            this.Manager.Comment("reaching state \'S5246\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2682
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2682() {
            this.Manager.BeginTest("BVTsS2682");
            this.Manager.Comment("reaching state \'S2682\'");
            string temp2318;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,New,Length50,NoHeader)\'");
            temp2318 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2683\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2318 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveVideoEncoding, stat" +
                        "e S2683)", TestManagerHelpers.Describe(temp2318)));
            this.Manager.Comment("reaching state \'S5247\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2684
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2684() {
            this.Manager.BeginTest("BVTsS2684");
            this.Manager.Comment("reaching state \'S2684\'");
            string temp2319;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,Existing,Length50,WrongHeader)\'");
            temp2319 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2685\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2319 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveVideoEncoding, stat" +
                        "e S2685)", TestManagerHelpers.Describe(temp2319)));
            this.Manager.Comment("reaching state \'S5248\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2686
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2686() {
            this.Manager.BeginTest("BVTsS2686");
            this.Manager.Comment("reaching state \'S2686\'");
            string temp2320;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,New,Length50,CorrectHeader)\'");
            temp2320 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2687\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp2320 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S2687)", TestManagerHelpers.Describe(temp2320)));
            this.Manager.Comment("reaching state \'S5249\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2688
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2688() {
            this.Manager.BeginTest("BVTsS2688");
            this.Manager.Comment("reaching state \'S2688\'");
            string temp2321;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,New,Length50,WrongHeader)\'");
            temp2321 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2689\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2321 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveVideoEncoding, stat" +
                        "e S2689)", TestManagerHelpers.Describe(temp2321)));
            this.Manager.Comment("reaching state \'S5250\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2690
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2690() {
            this.Manager.BeginTest("BVTsS2690");
            this.Manager.Comment("reaching state \'S2690\'");
            string temp2322;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,New,Length50,CorrectHeader)\'");
            temp2322 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2691\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp2322 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S2691)", TestManagerHelpers.Describe(temp2322)));
            this.Manager.Comment("reaching state \'S5251\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2692
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2692() {
            this.Manager.BeginTest("BVTsS2692");
            this.Manager.Comment("reaching state \'S2692\'");
            string temp2323;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,New,Length50,NoHeader)\'");
            temp2323 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2693\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2323 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveVideoEncoding, stat" +
                        "e S2693)", TestManagerHelpers.Describe(temp2323)));
            this.Manager.Comment("reaching state \'S5252\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2694
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2694() {
            this.Manager.BeginTest("BVTsS2694");
            this.Manager.Comment("reaching state \'S2694\'");
            string temp2324;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,Existing,Length50,CorrectHeader)\'");
            temp2324 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2695\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp2324 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S2695)", TestManagerHelpers.Describe(temp2324)));
            this.Manager.Comment("reaching state \'S5253\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2696
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2696() {
            this.Manager.BeginTest("BVTsS2696");
            this.Manager.Comment("reaching state \'S2696\'");
            string temp2325;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,Existing,Length255,Length255,Leng" +
                    "th50,Length50,False,True,False)\'");
            temp2325 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2697\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2325 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2697" +
                        ")", TestManagerHelpers.Describe(temp2325)));
            this.Manager.Comment("reaching state \'S5254\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2698
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2698() {
            this.Manager.BeginTest("BVTsS2698");
            this.Manager.Comment("reaching state \'S2698\'");
            string temp2326;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,Existing,Length255,Length255" +
                    ",Length50,Length50,False,True,False)\'");
            temp2326 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2699\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2326 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S26" +
                        "99)", TestManagerHelpers.Describe(temp2326)));
            this.Manager.Comment("reaching state \'S5255\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2700
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2700() {
            this.Manager.BeginTest("BVTsS2700");
            this.Manager.Comment("reaching state \'S2700\'");
            string temp2327;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,Existing,Length255,Length255,L" +
                    "ength50,Length50,False,False,True)\'");
            temp2327 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2701\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2327 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2701" +
                        ")", TestManagerHelpers.Describe(temp2327)));
            this.Manager.Comment("reaching state \'S5256\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2702
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2702() {
            this.Manager.BeginTest("BVTsS2702");
            this.Manager.Comment("reaching state \'S2702\'");
            string temp2328;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,Existing,Length255,Length255,Leng" +
                    "th50,Length50,False,False,True)\'");
            temp2328 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2703\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2328 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2703" +
                        ")", TestManagerHelpers.Describe(temp2328)));
            this.Manager.Comment("reaching state \'S5257\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2704
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2704() {
            this.Manager.BeginTest("BVTsS2704");
            this.Manager.Comment("reaching state \'S2704\'");
            string temp2329;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,Existing,Length255,Length255" +
                    ",Length50,Length50,False,False,True)\'");
            temp2329 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2705\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2329 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "05)", TestManagerHelpers.Describe(temp2329)));
            this.Manager.Comment("reaching state \'S5258\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2706
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2706() {
            this.Manager.BeginTest("BVTsS2706");
            this.Manager.Comment("reaching state \'S2706\'");
            string temp2330;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,Existing,Length255,Length255,Leng" +
                    "th50,Length50,False,False,True)\'");
            temp2330 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2707\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2330 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2707" +
                        ")", TestManagerHelpers.Describe(temp2330)));
            this.Manager.Comment("reaching state \'S5259\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2708
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2708() {
            this.Manager.BeginTest("BVTsS2708");
            this.Manager.Comment("reaching state \'S2708\'");
            string temp2331;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,True,False)\'");
            temp2331 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2709\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2331 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2709)", TestManagerHelpers.Describe(temp2331)));
            this.Manager.Comment("reaching state \'S5260\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2710
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2710() {
            this.Manager.BeginTest("BVTsS2710");
            this.Manager.Comment("reaching state \'S2710\'");
            string temp2332;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,New,Length255,Length255,Length50," +
                    "Length50,True,True,False)\'");
            temp2332 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2711\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2332 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2711" +
                        ")", TestManagerHelpers.Describe(temp2332)));
            this.Manager.Comment("reaching state \'S5261\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2712
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2712() {
            this.Manager.BeginTest("BVTsS2712");
            this.Manager.Comment("reaching state \'S2712\'");
            string temp2333;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,False,False)\'");
            temp2333 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2713\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2333 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2713)", TestManagerHelpers.Describe(temp2333)));
            this.Manager.Comment("reaching state \'S5262\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2714
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2714() {
            this.Manager.BeginTest("BVTsS2714");
            this.Manager.Comment("reaching state \'S2714\'");
            string temp2334;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,New,Length255,Length255,Length50,Len" +
                    "gth50,True,True,False)\'");
            temp2334 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2715\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2334 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2715" +
                        ")", TestManagerHelpers.Describe(temp2334)));
            this.Manager.Comment("reaching state \'S5263\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2716
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2716() {
            this.Manager.BeginTest("BVTsS2716");
            this.Manager.Comment("reaching state \'S2716\'");
            string temp2335;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,New,Length255,Length255,Length50," +
                    "Length50,True,False,False)\'");
            temp2335 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2717\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2335 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2717" +
                        ")", TestManagerHelpers.Describe(temp2335)));
            this.Manager.Comment("reaching state \'S5264\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2718
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2718() {
            this.Manager.BeginTest("BVTsS2718");
            this.Manager.Comment("reaching state \'S2718\'");
            string temp2336;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,New,Length255,Length255,Length50,Len" +
                    "gth50,True,True,True)\'");
            temp2336 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2719\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2336 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2719" +
                        ")", TestManagerHelpers.Describe(temp2336)));
            this.Manager.Comment("reaching state \'S5265\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2720
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2720() {
            this.Manager.BeginTest("BVTsS2720");
            this.Manager.Comment("reaching state \'S2720\'");
            string temp2337;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,Existing,Length255,Length255,L" +
                    "ength50,Length50,True,False,True)\'");
            temp2337 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2721\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2337 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2721" +
                        ")", TestManagerHelpers.Describe(temp2337)));
            this.Manager.Comment("reaching state \'S5266\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2722
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2722() {
            this.Manager.BeginTest("BVTsS2722");
            this.Manager.Comment("reaching state \'S2722\'");
            string temp2338;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,New,Length255,Length255,Length50," +
                    "Length50,True,True,False)\'");
            temp2338 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2723\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2338 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2723" +
                        ")", TestManagerHelpers.Describe(temp2338)));
            this.Manager.Comment("reaching state \'S5267\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2724
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2724() {
            this.Manager.BeginTest("BVTsS2724");
            this.Manager.Comment("reaching state \'S2724\'");
            string temp2339;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,New,Length255,Length255,Leng" +
                    "th50,Length50,True,True,False)\'");
            temp2339 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2725\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2339 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "25)", TestManagerHelpers.Describe(temp2339)));
            this.Manager.Comment("reaching state \'S5268\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2726
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2726() {
            this.Manager.BeginTest("BVTsS2726");
            this.Manager.Comment("reaching state \'S2726\'");
            string temp2340;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,New,Length255,Length255,Length50," +
                    "Length50,True,True,True)\'");
            temp2340 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2727\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2340 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2727" +
                        ")", TestManagerHelpers.Describe(temp2340)));
            this.Manager.Comment("reaching state \'S5269\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2728
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2728() {
            this.Manager.BeginTest("BVTsS2728");
            this.Manager.Comment("reaching state \'S2728\'");
            string temp2341;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,Existing,Length255,Length255,Length5" +
                    "0,Length50,False,False,True)\'");
            temp2341 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2729\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2341 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2729" +
                        ")", TestManagerHelpers.Describe(temp2341)));
            this.Manager.Comment("reaching state \'S5270\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2730
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2730() {
            this.Manager.BeginTest("BVTsS2730");
            this.Manager.Comment("reaching state \'S2730\'");
            string temp2342;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,Existing,Length255,Length255,Length5" +
                    "0,Length50,True,False,True)\'");
            temp2342 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2731\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2342 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2731" +
                        ")", TestManagerHelpers.Describe(temp2342)));
            this.Manager.Comment("reaching state \'S5271\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2732
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2732() {
            this.Manager.BeginTest("BVTsS2732");
            this.Manager.Comment("reaching state \'S2732\'");
            string temp2343;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,Existing,Length255,Length255,Length5" +
                    "0,Length50,False,False,False)\'");
            temp2343 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2733\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2343 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2733" +
                        ")", TestManagerHelpers.Describe(temp2343)));
            this.Manager.Comment("reaching state \'S5272\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2734
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2734() {
            this.Manager.BeginTest("BVTsS2734");
            this.Manager.Comment("reaching state \'S2734\'");
            string temp2344;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,New,Length255,Length255,Leng" +
                    "th50,Length50,False,True,False)\'");
            temp2344 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2735\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2344 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "35)", TestManagerHelpers.Describe(temp2344)));
            this.Manager.Comment("reaching state \'S5273\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2736
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2736() {
            this.Manager.BeginTest("BVTsS2736");
            this.Manager.Comment("reaching state \'S2736\'");
            string temp2345;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,New,Length255,Length255,Leng" +
                    "th50,Length50,False,True,True)\'");
            temp2345 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2737\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2345 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "37)", TestManagerHelpers.Describe(temp2345)));
            this.Manager.Comment("reaching state \'S5274\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2738
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2738() {
            this.Manager.BeginTest("BVTsS2738");
            this.Manager.Comment("reaching state \'S2738\'");
            string temp2346;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,New,Length255,Length255,Leng" +
                    "th50,Length50,False,False,False)\'");
            temp2346 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2739\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2346 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "39)", TestManagerHelpers.Describe(temp2346)));
            this.Manager.Comment("reaching state \'S5275\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2740
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2740() {
            this.Manager.BeginTest("BVTsS2740");
            this.Manager.Comment("reaching state \'S2740\'");
            string temp2347;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,Existing,Length255,Length255" +
                    ",Length50,Length50,False,False,False)\'");
            temp2347 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2741\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2347 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "41)", TestManagerHelpers.Describe(temp2347)));
            this.Manager.Comment("reaching state \'S5276\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2742
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2742() {
            this.Manager.BeginTest("BVTsS2742");
            this.Manager.Comment("reaching state \'S2742\'");
            string temp2348;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,New,Length255,Length255,Length50," +
                    "Length50,True,False,True)\'");
            temp2348 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2743\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2348 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2743" +
                        ")", TestManagerHelpers.Describe(temp2348)));
            this.Manager.Comment("reaching state \'S5277\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2744
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2744() {
            this.Manager.BeginTest("BVTsS2744");
            this.Manager.Comment("reaching state \'S2744\'");
            string temp2349;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,New,Length255,Length255,Length50,Len" +
                    "gth50,True,False,True)\'");
            temp2349 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2745\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2349 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2745" +
                        ")", TestManagerHelpers.Describe(temp2349)));
            this.Manager.Comment("reaching state \'S5278\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2746
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2746() {
            this.Manager.BeginTest("BVTsS2746");
            this.Manager.Comment("reaching state \'S2746\'");
            string temp2350;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,Existing,Length255,Length255,Leng" +
                    "th50,Length50,False,True,True)\'");
            temp2350 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2747\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2350 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2747" +
                        ")", TestManagerHelpers.Describe(temp2350)));
            this.Manager.Comment("reaching state \'S5279\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2748
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2748() {
            this.Manager.BeginTest("BVTsS2748");
            this.Manager.Comment("reaching state \'S2748\'");
            string temp2351;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,Existing,Length255,Length255" +
                    ",Length50,Length50,False,True,True)\'");
            temp2351 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2749\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2351 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "49)", TestManagerHelpers.Describe(temp2351)));
            this.Manager.Comment("reaching state \'S5280\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2750
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2750() {
            this.Manager.BeginTest("BVTsS2750");
            this.Manager.Comment("reaching state \'S2750\'");
            string temp2352;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,Existing,Length255,Length255,Length5" +
                    "0,Length50,False,True,True)\'");
            temp2352 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2751\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2352 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2751" +
                        ")", TestManagerHelpers.Describe(temp2352)));
            this.Manager.Comment("reaching state \'S5281\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2752
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2752() {
            this.Manager.BeginTest("BVTsS2752");
            this.Manager.Comment("reaching state \'S2752\'");
            string temp2353;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,Existing,Length255,Length255,Length5" +
                    "0,Length50,True,True,False)\'");
            temp2353 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2753\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2353 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2753" +
                        ")", TestManagerHelpers.Describe(temp2353)));
            this.Manager.Comment("reaching state \'S5282\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2754
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2754() {
            this.Manager.BeginTest("BVTsS2754");
            this.Manager.Comment("reaching state \'S2754\'");
            string temp2354;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,False,True)\'");
            temp2354 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2755\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2354 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2755)", TestManagerHelpers.Describe(temp2354)));
            this.Manager.Comment("reaching state \'S5283\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2756
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2756() {
            this.Manager.BeginTest("BVTsS2756");
            this.Manager.Comment("reaching state \'S2756\'");
            string temp2355;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,False,True)\'");
            temp2355 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2757\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2355 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2757)", TestManagerHelpers.Describe(temp2355)));
            this.Manager.Comment("reaching state \'S5284\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2758
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2758() {
            this.Manager.BeginTest("BVTsS2758");
            this.Manager.Comment("reaching state \'S2758\'");
            string temp2356;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,False,False)\'");
            temp2356 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2759\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2356 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2759)", TestManagerHelpers.Describe(temp2356)));
            this.Manager.Comment("reaching state \'S5285\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2760
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2760() {
            this.Manager.BeginTest("BVTsS2760");
            this.Manager.Comment("reaching state \'S2760\'");
            string temp2357;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,New,Length255,Length255,Length50," +
                    "Length50,False,True,False)\'");
            temp2357 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2761\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2357 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2761" +
                        ")", TestManagerHelpers.Describe(temp2357)));
            this.Manager.Comment("reaching state \'S5286\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2762
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2762() {
            this.Manager.BeginTest("BVTsS2762");
            this.Manager.Comment("reaching state \'S2762\'");
            string temp2358;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,New,Length255,Length255,Length50," +
                    "Length50,False,False,False)\'");
            temp2358 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2763\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2358 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2763" +
                        ")", TestManagerHelpers.Describe(temp2358)));
            this.Manager.Comment("reaching state \'S5287\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2764
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2764() {
            this.Manager.BeginTest("BVTsS2764");
            this.Manager.Comment("reaching state \'S2764\'");
            string temp2359;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,New,Length255,Length255,Length50,Len" +
                    "gth50,True,False,False)\'");
            temp2359 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2765\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2359 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2765" +
                        ")", TestManagerHelpers.Describe(temp2359)));
            this.Manager.Comment("reaching state \'S5288\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2766
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2766() {
            this.Manager.BeginTest("BVTsS2766");
            this.Manager.Comment("reaching state \'S2766\'");
            string temp2360;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,New,Length255,Length255,Length50," +
                    "Length50,True,False,True)\'");
            temp2360 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2767\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2360 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2767" +
                        ")", TestManagerHelpers.Describe(temp2360)));
            this.Manager.Comment("reaching state \'S5289\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2768
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2768() {
            this.Manager.BeginTest("BVTsS2768");
            this.Manager.Comment("reaching state \'S2768\'");
            string temp2361;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,True,True)\'");
            temp2361 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2769\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2361 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2769)", TestManagerHelpers.Describe(temp2361)));
            this.Manager.Comment("reaching state \'S5290\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2770
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2770() {
            this.Manager.BeginTest("BVTsS2770");
            this.Manager.Comment("reaching state \'S2770\'");
            string temp2362;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,Existing,Length255,Length255" +
                    ",Length50,Length50,True,True,True)\'");
            temp2362 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2771\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2362 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "71)", TestManagerHelpers.Describe(temp2362)));
            this.Manager.Comment("reaching state \'S5291\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2772
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2772() {
            this.Manager.BeginTest("BVTsS2772");
            this.Manager.Comment("reaching state \'S2772\'");
            string temp2363;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,Existing,Length255,Length255" +
                    ",Length50,Length50,True,True,False)\'");
            temp2363 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2773\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2363 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "73)", TestManagerHelpers.Describe(temp2363)));
            this.Manager.Comment("reaching state \'S5292\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2774
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2774() {
            this.Manager.BeginTest("BVTsS2774");
            this.Manager.Comment("reaching state \'S2774\'");
            string temp2364;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,Existing,Length255,Length255,Leng" +
                    "th50,Length50,True,True,False)\'");
            temp2364 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2775\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2364 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2775" +
                        ")", TestManagerHelpers.Describe(temp2364)));
            this.Manager.Comment("reaching state \'S5293\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2776
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2776() {
            this.Manager.BeginTest("BVTsS2776");
            this.Manager.Comment("reaching state \'S2776\'");
            string temp2365;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,Existing,Length255,Length255" +
                    ",Length50,Length50,True,False,False)\'");
            temp2365 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2777\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2365 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "77)", TestManagerHelpers.Describe(temp2365)));
            this.Manager.Comment("reaching state \'S5294\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2778
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2778() {
            this.Manager.BeginTest("BVTsS2778");
            this.Manager.Comment("reaching state \'S2778\'");
            string temp2366;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,Existing,Length255,Length255" +
                    ",Length50,Length50,True,False,True)\'");
            temp2366 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2779\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2366 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "79)", TestManagerHelpers.Describe(temp2366)));
            this.Manager.Comment("reaching state \'S5295\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2780
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2780() {
            this.Manager.BeginTest("BVTsS2780");
            this.Manager.Comment("reaching state \'S2780\'");
            string temp2367;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,False,False)\'");
            temp2367 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2781\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2367 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2781)", TestManagerHelpers.Describe(temp2367)));
            this.Manager.Comment("reaching state \'S5296\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2782
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2782() {
            this.Manager.BeginTest("BVTsS2782");
            this.Manager.Comment("reaching state \'S2782\'");
            string temp2368;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,New,Length255,Length255,Leng" +
                    "th50,Length50,True,True,True)\'");
            temp2368 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2783\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2368 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S27" +
                        "83)", TestManagerHelpers.Describe(temp2368)));
            this.Manager.Comment("reaching state \'S5297\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2784
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2784() {
            this.Manager.BeginTest("BVTsS2784");
            this.Manager.Comment("reaching state \'S2784\'");
            string temp2369;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,New,Length255,Length255,Length50," +
                    "Length50,True,False,False)\'");
            temp2369 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2785\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2369 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2785" +
                        ")", TestManagerHelpers.Describe(temp2369)));
            this.Manager.Comment("reaching state \'S5298\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2786
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2786() {
            this.Manager.BeginTest("BVTsS2786");
            this.Manager.Comment("reaching state \'S2786\'");
            string temp2370;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,New,Length255,Length255,Length50,Len" +
                    "gth50,False,True,True)\'");
            temp2370 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2787\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2370 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2787" +
                        ")", TestManagerHelpers.Describe(temp2370)));
            this.Manager.Comment("reaching state \'S5299\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2788
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2788() {
            this.Manager.BeginTest("BVTsS2788");
            this.Manager.Comment("reaching state \'S2788\'");
            string temp2371;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,New,Length255,Length255,Length50,Len" +
                    "gth50,False,False,True)\'");
            temp2371 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2789\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2371 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2789" +
                        ")", TestManagerHelpers.Describe(temp2371)));
            this.Manager.Comment("reaching state \'S5300\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2790
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2790() {
            this.Manager.BeginTest("BVTsS2790");
            this.Manager.Comment("reaching state \'S2790\'");
            string temp2372;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,Existing,Length255,Length255,Length5" +
                    "0,Length50,True,True,True)\'");
            temp2372 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2791\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2372 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2791" +
                        ")", TestManagerHelpers.Describe(temp2372)));
            this.Manager.Comment("reaching state \'S5301\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2792
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2792() {
            this.Manager.BeginTest("BVTsS2792");
            this.Manager.Comment("reaching state \'S2792\'");
            string temp2373;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,Existing,Length255,Length255,L" +
                    "ength50,Length50,True,True,False)\'");
            temp2373 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2793\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2373 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2793" +
                        ")", TestManagerHelpers.Describe(temp2373)));
            this.Manager.Comment("reaching state \'S5302\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2794
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2794() {
            this.Manager.BeginTest("BVTsS2794");
            this.Manager.Comment("reaching state \'S2794\'");
            string temp2374;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,New,Length255,Length255,Length" +
                    "50,Length50,True,True,False)\'");
            temp2374 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2795\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2374 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2795" +
                        ")", TestManagerHelpers.Describe(temp2374)));
            this.Manager.Comment("reaching state \'S5303\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2796
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2796() {
            this.Manager.BeginTest("BVTsS2796");
            this.Manager.Comment("reaching state \'S2796\'");
            string temp2375;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,Existing,Length255,Length255,Leng" +
                    "th50,Length50,True,False,False)\'");
            temp2375 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2797\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2375 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2797" +
                        ")", TestManagerHelpers.Describe(temp2375)));
            this.Manager.Comment("reaching state \'S5304\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2798
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2798() {
            this.Manager.BeginTest("BVTsS2798");
            this.Manager.Comment("reaching state \'S2798\'");
            string temp2376;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,Existing,Length255,Length255,Leng" +
                    "th50,Length50,False,False,False)\'");
            temp2376 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2799\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2376 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2799" +
                        ")", TestManagerHelpers.Describe(temp2376)));
            this.Manager.Comment("reaching state \'S5305\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2800
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2800() {
            this.Manager.BeginTest("BVTsS2800");
            this.Manager.Comment("reaching state \'S2800\'");
            string temp2377;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,True,True)\'");
            temp2377 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2801\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2377 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2801)", TestManagerHelpers.Describe(temp2377)));
            this.Manager.Comment("reaching state \'S5306\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2802
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2802() {
            this.Manager.BeginTest("BVTsS2802");
            this.Manager.Comment("reaching state \'S2802\'");
            string temp2378;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,True,True)\'");
            temp2378 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2803\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2378 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2803)", TestManagerHelpers.Describe(temp2378)));
            this.Manager.Comment("reaching state \'S5307\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2804
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2804() {
            this.Manager.BeginTest("BVTsS2804");
            this.Manager.Comment("reaching state \'S2804\'");
            string temp2379;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,True,False)\'");
            temp2379 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2805\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2379 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2805)", TestManagerHelpers.Describe(temp2379)));
            this.Manager.Comment("reaching state \'S5308\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2806
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2806() {
            this.Manager.BeginTest("BVTsS2806");
            this.Manager.Comment("reaching state \'S2806\'");
            string temp2380;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,Existing,Length255,Length255,Leng" +
                    "th50,Length50,False,False,False)\'");
            temp2380 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2807\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2380 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2807" +
                        ")", TestManagerHelpers.Describe(temp2380)));
            this.Manager.Comment("reaching state \'S5309\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2808
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2808() {
            this.Manager.BeginTest("BVTsS2808");
            this.Manager.Comment("reaching state \'S2808\'");
            string temp2381;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,New,Length255,Length255,Length50,Len" +
                    "gth50,False,True,False)\'");
            temp2381 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2809\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2381 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2809" +
                        ")", TestManagerHelpers.Describe(temp2381)));
            this.Manager.Comment("reaching state \'S5310\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2810
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2810() {
            this.Manager.BeginTest("BVTsS2810");
            this.Manager.Comment("reaching state \'S2810\'");
            string temp2382;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,True,True)\'");
            temp2382 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2811\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2382 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2811)", TestManagerHelpers.Describe(temp2382)));
            this.Manager.Comment("reaching state \'S5311\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2812
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2812() {
            this.Manager.BeginTest("BVTsS2812");
            this.Manager.Comment("reaching state \'S2812\'");
            string temp2383;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,True,False)\'");
            temp2383 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2813\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2383 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2813)", TestManagerHelpers.Describe(temp2383)));
            this.Manager.Comment("reaching state \'S5312\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2814
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2814() {
            this.Manager.BeginTest("BVTsS2814");
            this.Manager.Comment("reaching state \'S2814\'");
            string temp2384;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,Existing,Length255,Length255,Leng" +
                    "th50,Length50,True,False,True)\'");
            temp2384 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2815\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2384 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2815" +
                        ")", TestManagerHelpers.Describe(temp2384)));
            this.Manager.Comment("reaching state \'S5313\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2816
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2816() {
            this.Manager.BeginTest("BVTsS2816");
            this.Manager.Comment("reaching state \'S2816\'");
            string temp2385;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,Existing,Length255,Length255,Leng" +
                    "th50,Length50,True,True,True)\'");
            temp2385 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2817\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2385 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2817" +
                        ")", TestManagerHelpers.Describe(temp2385)));
            this.Manager.Comment("reaching state \'S5314\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2818
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2818() {
            this.Manager.BeginTest("BVTsS2818");
            this.Manager.Comment("reaching state \'S2818\'");
            string temp2386;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,New,Length255,Length255,Length50," +
                    "Length50,False,True,True)\'");
            temp2386 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2819\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2386 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2819" +
                        ")", TestManagerHelpers.Describe(temp2386)));
            this.Manager.Comment("reaching state \'S5315\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2820
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2820() {
            this.Manager.BeginTest("BVTsS2820");
            this.Manager.Comment("reaching state \'S2820\'");
            string temp2387;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,New,Length255,Length255,Length" +
                    "50,Length50,False,True,True)\'");
            temp2387 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2821\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2387 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2821" +
                        ")", TestManagerHelpers.Describe(temp2387)));
            this.Manager.Comment("reaching state \'S5316\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2822
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2822() {
            this.Manager.BeginTest("BVTsS2822");
            this.Manager.Comment("reaching state \'S2822\'");
            string temp2388;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,Existing,Length255,Length255,L" +
                    "ength50,Length50,False,True,False)\'");
            temp2388 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2823\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2388 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2823" +
                        ")", TestManagerHelpers.Describe(temp2388)));
            this.Manager.Comment("reaching state \'S5317\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2824
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2824() {
            this.Manager.BeginTest("BVTsS2824");
            this.Manager.Comment("reaching state \'S2824\'");
            string temp2389;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,Existing,Length255,Length255,L" +
                    "ength50,Length50,False,False,False)\'");
            temp2389 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2825\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2389 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2825" +
                        ")", TestManagerHelpers.Describe(temp2389)));
            this.Manager.Comment("reaching state \'S5318\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2826
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2826() {
            this.Manager.BeginTest("BVTsS2826");
            this.Manager.Comment("reaching state \'S2826\'");
            string temp2390;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,True,False)\'");
            temp2390 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2827\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2390 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2827)", TestManagerHelpers.Describe(temp2390)));
            this.Manager.Comment("reaching state \'S5319\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2828
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2828() {
            this.Manager.BeginTest("BVTsS2828");
            this.Manager.Comment("reaching state \'S2828\'");
            string temp2391;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,False,True)\'");
            temp2391 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2829\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2391 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2829)", TestManagerHelpers.Describe(temp2391)));
            this.Manager.Comment("reaching state \'S5320\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2830
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2830() {
            this.Manager.BeginTest("BVTsS2830");
            this.Manager.Comment("reaching state \'S2830\'");
            string temp2392;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,False,True)\'");
            temp2392 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2831\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2392 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2831)", TestManagerHelpers.Describe(temp2392)));
            this.Manager.Comment("reaching state \'S5321\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2832
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2832() {
            this.Manager.BeginTest("BVTsS2832");
            this.Manager.Comment("reaching state \'S2832\'");
            string temp2393;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,Existing,Length255,Length255,Length5" +
                    "0,Length50,False,True,False)\'");
            temp2393 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2833\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2393 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2833" +
                        ")", TestManagerHelpers.Describe(temp2393)));
            this.Manager.Comment("reaching state \'S5322\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2834
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2834() {
            this.Manager.BeginTest("BVTsS2834");
            this.Manager.Comment("reaching state \'S2834\'");
            string temp2394;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,Existing,Length255,Length255,Length5" +
                    "0,Length50,True,False,False)\'");
            temp2394 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2835\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2394 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2835" +
                        ")", TestManagerHelpers.Describe(temp2394)));
            this.Manager.Comment("reaching state \'S5323\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2836
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2836() {
            this.Manager.BeginTest("BVTsS2836");
            this.Manager.Comment("reaching state \'S2836\'");
            string temp2395;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,New,Length255,Length255,Length50," +
                    "Length50,False,True,True)\'");
            temp2395 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2837\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2395 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2837" +
                        ")", TestManagerHelpers.Describe(temp2395)));
            this.Manager.Comment("reaching state \'S5324\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2838
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2838() {
            this.Manager.BeginTest("BVTsS2838");
            this.Manager.Comment("reaching state \'S2838\'");
            string temp2396;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,False,False)\'");
            temp2396 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2839\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp2396 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S2839)", TestManagerHelpers.Describe(temp2396)));
            this.Manager.Comment("reaching state \'S5325\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2840
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2840() {
            this.Manager.BeginTest("BVTsS2840");
            this.Manager.Comment("reaching state \'S2840\'");
            string temp2397;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Add,New,Length255,Length255,Length50,Len" +
                    "gth50,False,False,False)\'");
            temp2397 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2841\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2397 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2841" +
                        ")", TestManagerHelpers.Describe(temp2397)));
            this.Manager.Comment("reaching state \'S5326\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2842
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2842() {
            this.Manager.BeginTest("BVTsS2842");
            this.Manager.Comment("reaching state \'S2842\'");
            string temp2398;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,Existing,Length255,Length255,Leng" +
                    "th50,Length50,True,False,False)\'");
            temp2398 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2843\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2398 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2843" +
                        ")", TestManagerHelpers.Describe(temp2398)));
            this.Manager.Comment("reaching state \'S5327\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2844
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2844() {
            this.Manager.BeginTest("BVTsS2844");
            this.Manager.Comment("reaching state \'S2844\'");
            string temp2399;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,New,Length255,Length255,Leng" +
                    "th50,Length50,True,False,False)\'");
            temp2399 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2845\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2399 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S28" +
                        "45)", TestManagerHelpers.Describe(temp2399)));
            this.Manager.Comment("reaching state \'S5328\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2846
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2846() {
            this.Manager.BeginTest("BVTsS2846");
            this.Manager.Comment("reaching state \'S2846\'");
            string temp2400;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,New,Length255,Length255,Leng" +
                    "th50,Length50,True,False,True)\'");
            temp2400 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2847\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2400 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S28" +
                        "47)", TestManagerHelpers.Describe(temp2400)));
            this.Manager.Comment("reaching state \'S5329\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2848
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2848() {
            this.Manager.BeginTest("BVTsS2848");
            this.Manager.Comment("reaching state \'S2848\'");
            string temp2401;
            this.Manager.Comment("executing step \'call SaveEntity(NoHeader,Delete,New,Length255,Length255,Length50," +
                    "Length50,False,False,True)\'");
            temp2401 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.NoHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2849\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2401 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2849" +
                        ")", TestManagerHelpers.Describe(temp2401)));
            this.Manager.Comment("reaching state \'S5330\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2850
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2850() {
            this.Manager.BeginTest("BVTsS2850");
            this.Manager.Comment("reaching state \'S2850\'");
            string temp2402;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,Existing,Length255,Length255,L" +
                    "ength50,Length50,True,False,False)\'");
            temp2402 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2851\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2402 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2851" +
                        ")", TestManagerHelpers.Describe(temp2402)));
            this.Manager.Comment("reaching state \'S5331\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2852
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2852() {
            this.Manager.BeginTest("BVTsS2852");
            this.Manager.Comment("reaching state \'S2852\'");
            string temp2403;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Delete,New,Length255,Length255,Leng" +
                    "th50,Length50,False,False,True)\'");
            temp2403 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2853\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NotSupportedException\"\'");
            this.Manager.Assert((temp2403 == "NotSupportedException"), String.Format("expected \'\"NotSupportedException\"\', actual \'{0}\' (return of SaveEntity, state S28" +
                        "53)", TestManagerHelpers.Describe(temp2403)));
            this.Manager.Comment("reaching state \'S5332\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2854
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2854() {
            this.Manager.BeginTest("BVTsS2854");
            this.Manager.Comment("reaching state \'S2854\'");
            string temp2404;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,Existing,Length255,Length255,Leng" +
                    "th50,Length50,False,True,False)\'");
            temp2404 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2855\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2404 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2855" +
                        ")", TestManagerHelpers.Describe(temp2404)));
            this.Manager.Comment("reaching state \'S5333\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2856
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2856() {
            this.Manager.BeginTest("BVTsS2856");
            this.Manager.Comment("reaching state \'S2856\'");
            string temp2405;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,Existing,Length255,Length255,Leng" +
                    "th50,Length50,False,True,True)\'");
            temp2405 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2857\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2405 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2857" +
                        ")", TestManagerHelpers.Describe(temp2405)));
            this.Manager.Comment("reaching state \'S5334\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2858
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2858() {
            this.Manager.BeginTest("BVTsS2858");
            this.Manager.Comment("reaching state \'S2858\'");
            string temp2406;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,Existing,Length255,Length255,L" +
                    "ength50,Length50,False,True,True)\'");
            temp2406 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S2859\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2406 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2859" +
                        ")", TestManagerHelpers.Describe(temp2406)));
            this.Manager.Comment("reaching state \'S5335\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2860
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2860() {
            this.Manager.BeginTest("BVTsS2860");
            this.Manager.Comment("reaching state \'S2860\'");
            string temp2407;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,Existing,Length255,Length255,L" +
                    "ength50,Length50,True,True,True)\'");
            temp2407 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2861\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2407 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2861" +
                        ")", TestManagerHelpers.Describe(temp2407)));
            this.Manager.Comment("reaching state \'S5336\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2862
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2862() {
            this.Manager.BeginTest("BVTsS2862");
            this.Manager.Comment("reaching state \'S2862\'");
            string temp2408;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,Existing,Length255,Length255,Leng" +
                    "th50,Length50,True,True,True)\'");
            temp2408 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2863\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2408 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2863" +
                        ")", TestManagerHelpers.Describe(temp2408)));
            this.Manager.Comment("reaching state \'S5337\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2864
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2864() {
            this.Manager.BeginTest("BVTsS2864");
            this.Manager.Comment("reaching state \'S2864\'");
            string temp2409;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,Existing,Length255,Length255,Leng" +
                    "th50,Length50,True,True,False)\'");
            temp2409 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S2865\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2409 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2865" +
                        ")", TestManagerHelpers.Describe(temp2409)));
            this.Manager.Comment("reaching state \'S5338\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2866
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2866() {
            this.Manager.BeginTest("BVTsS2866");
            this.Manager.Comment("reaching state \'S2866\'");
            string temp2410;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,Existing,Length255,Length255,Leng" +
                    "th50,Length50,True,False,True)\'");
            temp2410 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2867\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2410 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2867" +
                        ")", TestManagerHelpers.Describe(temp2410)));
            this.Manager.Comment("reaching state \'S5339\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2868
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2868() {
            this.Manager.BeginTest("BVTsS2868");
            this.Manager.Comment("reaching state \'S2868\'");
            string temp2411;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,New,Length255,Length255,Length" +
                    "50,Length50,True,True,True)\'");
            temp2411 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2869\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2411 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2869" +
                        ")", TestManagerHelpers.Describe(temp2411)));
            this.Manager.Comment("reaching state \'S5340\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2870
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2870() {
            this.Manager.BeginTest("BVTsS2870");
            this.Manager.Comment("reaching state \'S2870\'");
            string temp2412;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,New,Length255,Length255,Length50," +
                    "Length50,True,True,True)\'");
            temp2412 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S2871\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2412 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2871" +
                        ")", TestManagerHelpers.Describe(temp2412)));
            this.Manager.Comment("reaching state \'S5341\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2872
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2872() {
            this.Manager.BeginTest("BVTsS2872");
            this.Manager.Comment("reaching state \'S2872\'");
            string temp2413;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,New,Length255,Length255,Length" +
                    "50,Length50,False,False,False)\'");
            temp2413 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2873\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2413 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2873" +
                        ")", TestManagerHelpers.Describe(temp2413)));
            this.Manager.Comment("reaching state \'S5342\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2874
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2874() {
            this.Manager.BeginTest("BVTsS2874");
            this.Manager.Comment("reaching state \'S2874\'");
            string temp2414;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,New,Length255,Length255,Length" +
                    "50,Length50,True,False,False)\'");
            temp2414 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S2875\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2414 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2875" +
                        ")", TestManagerHelpers.Describe(temp2414)));
            this.Manager.Comment("reaching state \'S5343\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2876
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2876() {
            this.Manager.BeginTest("BVTsS2876");
            this.Manager.Comment("reaching state \'S2876\'");
            string temp2415;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,New,Length255,Length255,Length" +
                    "50,Length50,False,True,False)\'");
            temp2415 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2877\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2415 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2877" +
                        ")", TestManagerHelpers.Describe(temp2415)));
            this.Manager.Comment("reaching state \'S5344\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2878
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2878() {
            this.Manager.BeginTest("BVTsS2878");
            this.Manager.Comment("reaching state \'S2878\'");
            string temp2416;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,New,Length255,Length255,Length50," +
                    "Length50,False,False,True)\'");
            temp2416 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2879\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2416 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2879" +
                        ")", TestManagerHelpers.Describe(temp2416)));
            this.Manager.Comment("reaching state \'S5345\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2880
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2880() {
            this.Manager.BeginTest("BVTsS2880");
            this.Manager.Comment("reaching state \'S2880\'");
            string temp2417;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,New,Length255,Length255,Length50," +
                    "Length50,False,False,False)\'");
            temp2417 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S2881\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2417 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2881" +
                        ")", TestManagerHelpers.Describe(temp2417)));
            this.Manager.Comment("reaching state \'S5346\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2882
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2882() {
            this.Manager.BeginTest("BVTsS2882");
            this.Manager.Comment("reaching state \'S2882\'");
            string temp2418;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Add,New,Length255,Length255,Length50," +
                    "Length50,False,True,False)\'");
            temp2418 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S2883\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2418 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2883" +
                        ")", TestManagerHelpers.Describe(temp2418)));
            this.Manager.Comment("reaching state \'S5347\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2884
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2884() {
            this.Manager.BeginTest("BVTsS2884");
            this.Manager.Comment("reaching state \'S2884\'");
            string temp2419;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,New,Length255,Length255,Length" +
                    "50,Length50,False,False,True)\'");
            temp2419 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S2885\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2419 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2885" +
                        ")", TestManagerHelpers.Describe(temp2419)));
            this.Manager.Comment("reaching state \'S5348\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2886
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2886() {
            this.Manager.BeginTest("BVTsS2886");
            this.Manager.Comment("reaching state \'S2886\'");
            string temp2420;
            this.Manager.Comment("executing step \'call SaveEntity(WrongHeader,Delete,New,Length255,Length255,Length" +
                    "50,Length50,True,False,True)\'");
            temp2420 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.WrongHeader, InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S2887\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2420 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveEntity, state S2887" +
                        ")", TestManagerHelpers.Describe(temp2420)));
            this.Manager.Comment("reaching state \'S5349\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2888
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2888() {
            this.Manager.BeginTest("BVTsS2888");
            this.Manager.Comment("reaching state \'S2888\'");
            string temp2421;
            this.Manager.Comment("executing step \'call SaveTask(NoHeader,Valid)\'");
            temp2421 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.NoHeader, InputTypes.XmlType.Valid);
            this.Manager.Comment("reaching state \'S2889\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2421 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2889)", TestManagerHelpers.Describe(temp2421)));
            this.Manager.Comment("reaching state \'S5350\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2890
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2890() {
            this.Manager.BeginTest("BVTsS2890");
            this.Manager.Comment("reaching state \'S2890\'");
            string temp2422;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Valid)\'");
            temp2422 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.XmlType.Valid);
            this.Manager.Comment("reaching state \'S2891\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp2422 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S2891)", TestManagerHelpers.Describe(temp2422)));
            this.Manager.Comment("reaching state \'S5351\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2892
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2892() {
            this.Manager.BeginTest("BVTsS2892");
            this.Manager.Comment("reaching state \'S2892\'");
            string temp2423;
            this.Manager.Comment("executing step \'call SaveTask(WrongHeader,Valid)\'");
            temp2423 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.WrongHeader, InputTypes.XmlType.Valid);
            this.Manager.Comment("reaching state \'S2893\'");
            this.Manager.Comment("checking step \'return SaveTask/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2423 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveTask, state S2893)", TestManagerHelpers.Describe(temp2423)));
            this.Manager.Comment("reaching state \'S5352\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2894
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2894() {
            this.Manager.BeginTest("BVTsS2894");
            this.Manager.Comment("reaching state \'S2894\'");
            string temp2424;
            this.Manager.Comment("executing step \'call GetArticle(Existing,NoHeader)\'");
            temp2424 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2895\'");
            this.Manager.Comment("checking step \'return GetArticle/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2424 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetArticle, state S2895" +
                        ")", TestManagerHelpers.Describe(temp2424)));
            this.Manager.Comment("reaching state \'S5353\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2896
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2896() {
            this.Manager.BeginTest("BVTsS2896");
            this.Manager.Comment("reaching state \'S2896\'");
            string temp2425;
            this.Manager.Comment("executing step \'call GetArticle(Existing,CorrectHeader)\'");
            temp2425 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2897\'");
            this.Manager.Comment("checking step \'return GetArticle/\"NoError\"\'");
            this.Manager.Assert((temp2425 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticle, state S2897)", TestManagerHelpers.Describe(temp2425)));
            this.Manager.Comment("reaching state \'S5354\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2898
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2898() {
            this.Manager.BeginTest("BVTsS2898");
            this.Manager.Comment("reaching state \'S2898\'");
            string temp2426;
            this.Manager.Comment("executing step \'call GetArticle(Existing,WrongHeader)\'");
            temp2426 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2899\'");
            this.Manager.Comment("checking step \'return GetArticle/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2426 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetArticle, state S2899" +
                        ")", TestManagerHelpers.Describe(temp2426)));
            this.Manager.Comment("reaching state \'S5355\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2900
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2900() {
            this.Manager.BeginTest("BVTsS2900");
            this.Manager.Comment("reaching state \'S2900\'");
            string temp2427;
            this.Manager.Comment("executing step \'call GetArticle(New,NoHeader)\'");
            temp2427 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2901\'");
            this.Manager.Comment("checking step \'return GetArticle/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2427 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetArticle, state S2901" +
                        ")", TestManagerHelpers.Describe(temp2427)));
            this.Manager.Comment("reaching state \'S5356\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2902
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2902() {
            this.Manager.BeginTest("BVTsS2902");
            this.Manager.Comment("reaching state \'S2902\'");
            string temp2428;
            this.Manager.Comment("executing step \'call GetArticle(New,WrongHeader)\'");
            temp2428 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2903\'");
            this.Manager.Comment("checking step \'return GetArticle/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2428 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetArticle, state S2903" +
                        ")", TestManagerHelpers.Describe(temp2428)));
            this.Manager.Comment("reaching state \'S5357\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2904
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2904() {
            this.Manager.BeginTest("BVTsS2904");
            this.Manager.Comment("reaching state \'S2904\'");
            string temp2429;
            this.Manager.Comment("executing step \'call GetArticle(New,CorrectHeader)\'");
            temp2429 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2905\'");
            this.Manager.Comment("checking step \'return GetArticle/\"NoError\"\'");
            this.Manager.Assert((temp2429 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticle, state S2905)", TestManagerHelpers.Describe(temp2429)));
            this.Manager.Comment("reaching state \'S5358\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2906
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2906() {
            this.Manager.BeginTest("BVTsS2906");
            this.Manager.Comment("reaching state \'S2906\'");
            string temp2430;
            this.Manager.Comment("executing step \'call GetArticleArray(OnlyOneElement,NoHeader)\'");
            temp2430 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2907\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2430 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetArticleArray, state " +
                        "S2907)", TestManagerHelpers.Describe(temp2430)));
            this.Manager.Comment("reaching state \'S5359\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2908
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2908() {
            this.Manager.BeginTest("BVTsS2908");
            this.Manager.Comment("reaching state \'S2908\'");
            string temp2431;
            this.Manager.Comment("executing step \'call GetArticleArray(OnlyOneElement,CorrectHeader)\'");
            temp2431 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2909\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"NoError\"\'");
            this.Manager.Assert((temp2431 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticleArray, state S2909)", TestManagerHelpers.Describe(temp2431)));
            this.Manager.Comment("reaching state \'S5360\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2910
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2910() {
            this.Manager.BeginTest("BVTsS2910");
            this.Manager.Comment("reaching state \'S2910\'");
            string temp2432;
            this.Manager.Comment("executing step \'call GetArticleArray(OnlyOneElement,WrongHeader)\'");
            temp2432 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2911\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2432 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetArticleArray, state " +
                        "S2911)", TestManagerHelpers.Describe(temp2432)));
            this.Manager.Comment("reaching state \'S5361\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2912
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2912() {
            this.Manager.BeginTest("BVTsS2912");
            this.Manager.Comment("reaching state \'S2912\'");
            string temp2433;
            this.Manager.Comment("executing step \'call GetAudioEncodingArray(NoHeader)\'");
            temp2433 = this.ICatalogWebServiceAdapterInstance.GetAudioEncodingArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2913\'");
            this.Manager.Comment("checking step \'return GetAudioEncodingArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2433 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAudioEncodingArray, " +
                        "state S2913)", TestManagerHelpers.Describe(temp2433)));
            this.Manager.Comment("reaching state \'S5362\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2914
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2914() {
            this.Manager.BeginTest("BVTsS2914");
            this.Manager.Comment("reaching state \'S2914\'");
            string temp2434;
            this.Manager.Comment("executing step \'call GetAudioEncodingArray(CorrectHeader)\'");
            temp2434 = this.ICatalogWebServiceAdapterInstance.GetAudioEncodingArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2915\'");
            this.Manager.Comment("checking step \'return GetAudioEncodingArray/\"NoError\"\'");
            this.Manager.Assert((temp2434 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAudioEncodingArray, state S2915)" +
                        "", TestManagerHelpers.Describe(temp2434)));
            this.Manager.Comment("reaching state \'S5363\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2916
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2916() {
            this.Manager.BeginTest("BVTsS2916");
            this.Manager.Comment("reaching state \'S2916\'");
            string temp2435;
            this.Manager.Comment("executing step \'call GetAudioEncodingArray(WrongHeader)\'");
            temp2435 = this.ICatalogWebServiceAdapterInstance.GetAudioEncodingArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2917\'");
            this.Manager.Comment("checking step \'return GetAudioEncodingArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2435 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAudioEncodingArray, " +
                        "state S2917)", TestManagerHelpers.Describe(temp2435)));
            this.Manager.Comment("reaching state \'S5364\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2918
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2918() {
            this.Manager.BeginTest("BVTsS2918");
            this.Manager.Comment("reaching state \'S2918\'");
            string temp2436;
            this.Manager.Comment("executing step \'call GetCategorySystem(Existing,NoHeader)\'");
            temp2436 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2919\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2436 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCategorySystem, stat" +
                        "e S2919)", TestManagerHelpers.Describe(temp2436)));
            this.Manager.Comment("reaching state \'S5365\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2920
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2920() {
            this.Manager.BeginTest("BVTsS2920");
            this.Manager.Comment("reaching state \'S2920\'");
            string temp2437;
            this.Manager.Comment("executing step \'call GetCategorySystem(Existing,WrongHeader)\'");
            temp2437 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2921\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2437 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCategorySystem, stat" +
                        "e S2921)", TestManagerHelpers.Describe(temp2437)));
            this.Manager.Comment("reaching state \'S5366\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2922
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2922() {
            this.Manager.BeginTest("BVTsS2922");
            this.Manager.Comment("reaching state \'S2922\'");
            string temp2438;
            this.Manager.Comment("executing step \'call GetCategorySystem(Existing,CorrectHeader)\'");
            temp2438 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2923\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"NoError\"\'");
            this.Manager.Assert((temp2438 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystem, state S2923)", TestManagerHelpers.Describe(temp2438)));
            this.Manager.Comment("reaching state \'S5367\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2924
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2924() {
            this.Manager.BeginTest("BVTsS2924");
            this.Manager.Comment("reaching state \'S2924\'");
            string temp2439;
            this.Manager.Comment("executing step \'call GetCategorySystem(New,NoHeader)\'");
            temp2439 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2925\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2439 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCategorySystem, stat" +
                        "e S2925)", TestManagerHelpers.Describe(temp2439)));
            this.Manager.Comment("reaching state \'S5368\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2926
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2926() {
            this.Manager.BeginTest("BVTsS2926");
            this.Manager.Comment("reaching state \'S2926\'");
            string temp2440;
            this.Manager.Comment("executing step \'call GetCategorySystem(New,CorrectHeader)\'");
            temp2440 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2927\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"NoError\"\'");
            this.Manager.Assert((temp2440 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystem, state S2927)", TestManagerHelpers.Describe(temp2440)));
            this.Manager.Comment("reaching state \'S5369\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2928
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2928() {
            this.Manager.BeginTest("BVTsS2928");
            this.Manager.Comment("reaching state \'S2928\'");
            string temp2441;
            this.Manager.Comment("executing step \'call GetCategorySystem(New,WrongHeader)\'");
            temp2441 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2929\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2441 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCategorySystem, stat" +
                        "e S2929)", TestManagerHelpers.Describe(temp2441)));
            this.Manager.Comment("reaching state \'S5370\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2930
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2930() {
            this.Manager.BeginTest("BVTsS2930");
            this.Manager.Comment("reaching state \'S2930\'");
            string temp2442;
            this.Manager.Comment("executing step \'call GetCategorySystemArray(NoHeader)\'");
            temp2442 = this.ICatalogWebServiceAdapterInstance.GetCategorySystemArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2931\'");
            this.Manager.Comment("checking step \'return GetCategorySystemArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2442 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCategorySystemArray," +
                        " state S2931)", TestManagerHelpers.Describe(temp2442)));
            this.Manager.Comment("reaching state \'S5371\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2932
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2932() {
            this.Manager.BeginTest("BVTsS2932");
            this.Manager.Comment("reaching state \'S2932\'");
            string temp2443;
            this.Manager.Comment("executing step \'call GetCategorySystemArray(CorrectHeader)\'");
            temp2443 = this.ICatalogWebServiceAdapterInstance.GetCategorySystemArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2933\'");
            this.Manager.Comment("checking step \'return GetCategorySystemArray/\"NoError\"\'");
            this.Manager.Assert((temp2443 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystemArray, state S2933" +
                        ")", TestManagerHelpers.Describe(temp2443)));
            this.Manager.Comment("reaching state \'S5372\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2934
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2934() {
            this.Manager.BeginTest("BVTsS2934");
            this.Manager.Comment("reaching state \'S2934\'");
            string temp2444;
            this.Manager.Comment("executing step \'call GetCategorySystemArray(WrongHeader)\'");
            temp2444 = this.ICatalogWebServiceAdapterInstance.GetCategorySystemArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2935\'");
            this.Manager.Comment("checking step \'return GetCategorySystemArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2444 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCategorySystemArray," +
                        " state S2935)", TestManagerHelpers.Describe(temp2444)));
            this.Manager.Comment("reaching state \'S5373\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2936
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2936() {
            this.Manager.BeginTest("BVTsS2936");
            this.Manager.Comment("reaching state \'S2936\'");
            string temp2445;
            this.Manager.Comment("executing step \'call GetClientTypeArray(NoHeader)\'");
            temp2445 = this.ICatalogWebServiceAdapterInstance.GetClientTypeArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2937\'");
            this.Manager.Comment("checking step \'return GetClientTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2445 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetClientTypeArray, sta" +
                        "te S2937)", TestManagerHelpers.Describe(temp2445)));
            this.Manager.Comment("reaching state \'S5374\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2938
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2938() {
            this.Manager.BeginTest("BVTsS2938");
            this.Manager.Comment("reaching state \'S2938\'");
            string temp2446;
            this.Manager.Comment("executing step \'call GetClientTypeArray(CorrectHeader)\'");
            temp2446 = this.ICatalogWebServiceAdapterInstance.GetClientTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2939\'");
            this.Manager.Comment("checking step \'return GetClientTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp2446 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetClientTypeArray, state S2939)", TestManagerHelpers.Describe(temp2446)));
            this.Manager.Comment("reaching state \'S5375\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2940
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2940() {
            this.Manager.BeginTest("BVTsS2940");
            this.Manager.Comment("reaching state \'S2940\'");
            string temp2447;
            this.Manager.Comment("executing step \'call GetClientTypeArray(WrongHeader)\'");
            temp2447 = this.ICatalogWebServiceAdapterInstance.GetClientTypeArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2941\'");
            this.Manager.Comment("checking step \'return GetClientTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2447 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetClientTypeArray, sta" +
                        "te S2941)", TestManagerHelpers.Describe(temp2447)));
            this.Manager.Comment("reaching state \'S5376\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2942
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2942() {
            this.Manager.BeginTest("BVTsS2942");
            this.Manager.Comment("reaching state \'S2942\'");
            string temp2448;
            this.Manager.Comment("executing step \'call GetContributor(Existing,NoHeader)\'");
            temp2448 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2943\'");
            this.Manager.Comment("checking step \'return GetContributor/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2448 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetContributor, state S" +
                        "2943)", TestManagerHelpers.Describe(temp2448)));
            this.Manager.Comment("reaching state \'S5377\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2944
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2944() {
            this.Manager.BeginTest("BVTsS2944");
            this.Manager.Comment("reaching state \'S2944\'");
            string temp2449;
            this.Manager.Comment("executing step \'call GetContributor(Existing,CorrectHeader)\'");
            temp2449 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2945\'");
            this.Manager.Comment("checking step \'return GetContributor/\"NoError\"\'");
            this.Manager.Assert((temp2449 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributor, state S2945)", TestManagerHelpers.Describe(temp2449)));
            this.Manager.Comment("reaching state \'S5378\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2946
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2946() {
            this.Manager.BeginTest("BVTsS2946");
            this.Manager.Comment("reaching state \'S2946\'");
            string temp2450;
            this.Manager.Comment("executing step \'call GetContributor(Existing,WrongHeader)\'");
            temp2450 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2947\'");
            this.Manager.Comment("checking step \'return GetContributor/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2450 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetContributor, state S" +
                        "2947)", TestManagerHelpers.Describe(temp2450)));
            this.Manager.Comment("reaching state \'S5379\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2948
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2948() {
            this.Manager.BeginTest("BVTsS2948");
            this.Manager.Comment("reaching state \'S2948\'");
            string temp2451;
            this.Manager.Comment("executing step \'call GetContributor(New,NoHeader)\'");
            temp2451 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2949\'");
            this.Manager.Comment("checking step \'return GetContributor/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2451 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetContributor, state S" +
                        "2949)", TestManagerHelpers.Describe(temp2451)));
            this.Manager.Comment("reaching state \'S5380\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2950
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2950() {
            this.Manager.BeginTest("BVTsS2950");
            this.Manager.Comment("reaching state \'S2950\'");
            string temp2452;
            this.Manager.Comment("executing step \'call GetContributor(New,WrongHeader)\'");
            temp2452 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2951\'");
            this.Manager.Comment("checking step \'return GetContributor/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2452 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetContributor, state S" +
                        "2951)", TestManagerHelpers.Describe(temp2452)));
            this.Manager.Comment("reaching state \'S5381\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2952
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2952() {
            this.Manager.BeginTest("BVTsS2952");
            this.Manager.Comment("reaching state \'S2952\'");
            string temp2453;
            this.Manager.Comment("executing step \'call GetContributor(New,CorrectHeader)\'");
            temp2453 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2953\'");
            this.Manager.Comment("checking step \'return GetContributor/\"NoError\"\'");
            this.Manager.Assert((temp2453 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributor, state S2953)", TestManagerHelpers.Describe(temp2453)));
            this.Manager.Comment("reaching state \'S5382\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2954
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2954() {
            this.Manager.BeginTest("BVTsS2954");
            this.Manager.Comment("reaching state \'S2954\'");
            string temp2454;
            this.Manager.Comment("executing step \'call GetContributorArray(OnlyOneElement,NoHeader)\'");
            temp2454 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2955\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2454 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetContributorArray, st" +
                        "ate S2955)", TestManagerHelpers.Describe(temp2454)));
            this.Manager.Comment("reaching state \'S5383\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2956
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2956() {
            this.Manager.BeginTest("BVTsS2956");
            this.Manager.Comment("reaching state \'S2956\'");
            string temp2455;
            this.Manager.Comment("executing step \'call GetContributorArray(OnlyOneElement,CorrectHeader)\'");
            temp2455 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2957\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"NoError\"\'");
            this.Manager.Assert((temp2455 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorArray, state S2957)", TestManagerHelpers.Describe(temp2455)));
            this.Manager.Comment("reaching state \'S5384\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2958
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2958() {
            this.Manager.BeginTest("BVTsS2958");
            this.Manager.Comment("reaching state \'S2958\'");
            string temp2456;
            this.Manager.Comment("executing step \'call GetContributorArray(OnlyOneElement,WrongHeader)\'");
            temp2456 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.OnlyOneElement, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2959\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2456 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetContributorArray, st" +
                        "ate S2959)", TestManagerHelpers.Describe(temp2456)));
            this.Manager.Comment("reaching state \'S5385\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2960
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2960() {
            this.Manager.BeginTest("BVTsS2960");
            this.Manager.Comment("reaching state \'S2960\'");
            string temp2457;
            this.Manager.Comment("executing step \'call GetContributorRelationshipTypeArray(NoHeader)\'");
            temp2457 = this.ICatalogWebServiceAdapterInstance.GetContributorRelationshipTypeArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2961\'");
            this.Manager.Comment("checking step \'return GetContributorRelationshipTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2457 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetContributorRelations" +
                        "hipTypeArray, state S2961)", TestManagerHelpers.Describe(temp2457)));
            this.Manager.Comment("reaching state \'S5386\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2962
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2962() {
            this.Manager.BeginTest("BVTsS2962");
            this.Manager.Comment("reaching state \'S2962\'");
            string temp2458;
            this.Manager.Comment("executing step \'call GetContributorRelationshipTypeArray(CorrectHeader)\'");
            temp2458 = this.ICatalogWebServiceAdapterInstance.GetContributorRelationshipTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2963\'");
            this.Manager.Comment("checking step \'return GetContributorRelationshipTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp2458 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorRelationshipTypeArray" +
                        ", state S2963)", TestManagerHelpers.Describe(temp2458)));
            this.Manager.Comment("reaching state \'S5387\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2964
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2964() {
            this.Manager.BeginTest("BVTsS2964");
            this.Manager.Comment("reaching state \'S2964\'");
            string temp2459;
            this.Manager.Comment("executing step \'call GetContributorRelationshipTypeArray(WrongHeader)\'");
            temp2459 = this.ICatalogWebServiceAdapterInstance.GetContributorRelationshipTypeArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2965\'");
            this.Manager.Comment("checking step \'return GetContributorRelationshipTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2459 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetContributorRelations" +
                        "hipTypeArray, state S2965)", TestManagerHelpers.Describe(temp2459)));
            this.Manager.Comment("reaching state \'S5388\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2966
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2966() {
            this.Manager.BeginTest("BVTsS2966");
            this.Manager.Comment("reaching state \'S2966\'");
            string temp2460;
            this.Manager.Comment("executing step \'call GetCountry(Existing,NoHeader)\'");
            temp2460 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2967\'");
            this.Manager.Comment("checking step \'return GetCountry/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2460 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCountry, state S2967" +
                        ")", TestManagerHelpers.Describe(temp2460)));
            this.Manager.Comment("reaching state \'S5389\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2968
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2968() {
            this.Manager.BeginTest("BVTsS2968");
            this.Manager.Comment("reaching state \'S2968\'");
            string temp2461;
            this.Manager.Comment("executing step \'call GetCountry(Existing,WrongHeader)\'");
            temp2461 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2969\'");
            this.Manager.Comment("checking step \'return GetCountry/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2461 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCountry, state S2969" +
                        ")", TestManagerHelpers.Describe(temp2461)));
            this.Manager.Comment("reaching state \'S5390\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2970
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2970() {
            this.Manager.BeginTest("BVTsS2970");
            this.Manager.Comment("reaching state \'S2970\'");
            string temp2462;
            this.Manager.Comment("executing step \'call GetCountry(Existing,CorrectHeader)\'");
            temp2462 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2971\'");
            this.Manager.Comment("checking step \'return GetCountry/\"NoError\"\'");
            this.Manager.Assert((temp2462 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountry, state S2971)", TestManagerHelpers.Describe(temp2462)));
            this.Manager.Comment("reaching state \'S5391\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2972
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2972() {
            this.Manager.BeginTest("BVTsS2972");
            this.Manager.Comment("reaching state \'S2972\'");
            string temp2463;
            this.Manager.Comment("executing step \'call GetCountry(New,NoHeader)\'");
            temp2463 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2973\'");
            this.Manager.Comment("checking step \'return GetCountry/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2463 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCountry, state S2973" +
                        ")", TestManagerHelpers.Describe(temp2463)));
            this.Manager.Comment("reaching state \'S5392\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2974
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2974() {
            this.Manager.BeginTest("BVTsS2974");
            this.Manager.Comment("reaching state \'S2974\'");
            string temp2464;
            this.Manager.Comment("executing step \'call GetCountry(New,CorrectHeader)\'");
            temp2464 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2975\'");
            this.Manager.Comment("checking step \'return GetCountry/\"NoError\"\'");
            this.Manager.Assert((temp2464 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountry, state S2975)", TestManagerHelpers.Describe(temp2464)));
            this.Manager.Comment("reaching state \'S5393\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2976
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2976() {
            this.Manager.BeginTest("BVTsS2976");
            this.Manager.Comment("reaching state \'S2976\'");
            string temp2465;
            this.Manager.Comment("executing step \'call GetCountry(New,WrongHeader)\'");
            temp2465 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2977\'");
            this.Manager.Comment("checking step \'return GetCountry/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2465 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCountry, state S2977" +
                        ")", TestManagerHelpers.Describe(temp2465)));
            this.Manager.Comment("reaching state \'S5394\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2978
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2978() {
            this.Manager.BeginTest("BVTsS2978");
            this.Manager.Comment("reaching state \'S2978\'");
            string temp2466;
            this.Manager.Comment("executing step \'call GetCountryArray(NoHeader)\'");
            temp2466 = this.ICatalogWebServiceAdapterInstance.GetCountryArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2979\'");
            this.Manager.Comment("checking step \'return GetCountryArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2466 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCountryArray, state " +
                        "S2979)", TestManagerHelpers.Describe(temp2466)));
            this.Manager.Comment("reaching state \'S5395\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2980
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2980() {
            this.Manager.BeginTest("BVTsS2980");
            this.Manager.Comment("reaching state \'S2980\'");
            string temp2467;
            this.Manager.Comment("executing step \'call GetCountryArray(CorrectHeader)\'");
            temp2467 = this.ICatalogWebServiceAdapterInstance.GetCountryArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2981\'");
            this.Manager.Comment("checking step \'return GetCountryArray/\"NoError\"\'");
            this.Manager.Assert((temp2467 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountryArray, state S2981)", TestManagerHelpers.Describe(temp2467)));
            this.Manager.Comment("reaching state \'S5396\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2982
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2982() {
            this.Manager.BeginTest("BVTsS2982");
            this.Manager.Comment("reaching state \'S2982\'");
            string temp2468;
            this.Manager.Comment("executing step \'call GetCountryArray(WrongHeader)\'");
            temp2468 = this.ICatalogWebServiceAdapterInstance.GetCountryArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2983\'");
            this.Manager.Comment("checking step \'return GetCountryArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2468 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCountryArray, state " +
                        "S2983)", TestManagerHelpers.Describe(temp2468)));
            this.Manager.Comment("reaching state \'S5397\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2984
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2984() {
            this.Manager.BeginTest("BVTsS2984");
            this.Manager.Comment("reaching state \'S2984\'");
            string temp2469;
            this.Manager.Comment("executing step \'call GetCurrency(Existing,NoHeader)\'");
            temp2469 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2985\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2469 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCurrency, state S298" +
                        "5)", TestManagerHelpers.Describe(temp2469)));
            this.Manager.Comment("reaching state \'S5398\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2986
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2986() {
            this.Manager.BeginTest("BVTsS2986");
            this.Manager.Comment("reaching state \'S2986\'");
            string temp2470;
            this.Manager.Comment("executing step \'call GetCurrency(Existing,CorrectHeader)\'");
            temp2470 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2987\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"NoError\"\'");
            this.Manager.Assert((temp2470 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrency, state S2987)", TestManagerHelpers.Describe(temp2470)));
            this.Manager.Comment("reaching state \'S5399\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2988
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2988() {
            this.Manager.BeginTest("BVTsS2988");
            this.Manager.Comment("reaching state \'S2988\'");
            string temp2471;
            this.Manager.Comment("executing step \'call GetCurrency(Existing,WrongHeader)\'");
            temp2471 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2989\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2471 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCurrency, state S298" +
                        "9)", TestManagerHelpers.Describe(temp2471)));
            this.Manager.Comment("reaching state \'S5400\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2990
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2990() {
            this.Manager.BeginTest("BVTsS2990");
            this.Manager.Comment("reaching state \'S2990\'");
            string temp2472;
            this.Manager.Comment("executing step \'call GetCurrency(New,NoHeader)\'");
            temp2472 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2991\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2472 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCurrency, state S299" +
                        "1)", TestManagerHelpers.Describe(temp2472)));
            this.Manager.Comment("reaching state \'S5401\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2992
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2992() {
            this.Manager.BeginTest("BVTsS2992");
            this.Manager.Comment("reaching state \'S2992\'");
            string temp2473;
            this.Manager.Comment("executing step \'call GetCurrency(New,WrongHeader)\'");
            temp2473 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S2993\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2473 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCurrency, state S299" +
                        "3)", TestManagerHelpers.Describe(temp2473)));
            this.Manager.Comment("reaching state \'S5402\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2994
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2994() {
            this.Manager.BeginTest("BVTsS2994");
            this.Manager.Comment("reaching state \'S2994\'");
            string temp2474;
            this.Manager.Comment("executing step \'call GetCurrency(New,CorrectHeader)\'");
            temp2474 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2995\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"NoError\"\'");
            this.Manager.Assert((temp2474 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrency, state S2995)", TestManagerHelpers.Describe(temp2474)));
            this.Manager.Comment("reaching state \'S5403\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2996
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2996() {
            this.Manager.BeginTest("BVTsS2996");
            this.Manager.Comment("reaching state \'S2996\'");
            string temp2475;
            this.Manager.Comment("executing step \'call GetCurrencyArray(NoHeader)\'");
            temp2475 = this.ICatalogWebServiceAdapterInstance.GetCurrencyArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S2997\'");
            this.Manager.Comment("checking step \'return GetCurrencyArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2475 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCurrencyArray, state" +
                        " S2997)", TestManagerHelpers.Describe(temp2475)));
            this.Manager.Comment("reaching state \'S5404\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2998
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS2998() {
            this.Manager.BeginTest("BVTsS2998");
            this.Manager.Comment("reaching state \'S2998\'");
            string temp2476;
            this.Manager.Comment("executing step \'call GetCurrencyArray(CorrectHeader)\'");
            temp2476 = this.ICatalogWebServiceAdapterInstance.GetCurrencyArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S2999\'");
            this.Manager.Comment("checking step \'return GetCurrencyArray/\"NoError\"\'");
            this.Manager.Assert((temp2476 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrencyArray, state S2999)", TestManagerHelpers.Describe(temp2476)));
            this.Manager.Comment("reaching state \'S5405\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3000
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3000() {
            this.Manager.BeginTest("BVTsS3000");
            this.Manager.Comment("reaching state \'S3000\'");
            string temp2477;
            this.Manager.Comment("executing step \'call GetCurrencyArray(WrongHeader)\'");
            temp2477 = this.ICatalogWebServiceAdapterInstance.GetCurrencyArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3001\'");
            this.Manager.Comment("checking step \'return GetCurrencyArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2477 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCurrencyArray, state" +
                        " S3001)", TestManagerHelpers.Describe(temp2477)));
            this.Manager.Comment("reaching state \'S5406\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3002
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3002() {
            this.Manager.BeginTest("BVTsS3002");
            this.Manager.Comment("reaching state \'S3002\'");
            string temp2478;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(Existing,NoHeader)\'");
            temp2478 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3003\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2478 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, st" +
                        "ate S3003)", TestManagerHelpers.Describe(temp2478)));
            this.Manager.Comment("reaching state \'S5407\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3004
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3004() {
            this.Manager.BeginTest("BVTsS3004");
            this.Manager.Comment("reaching state \'S3004\'");
            string temp2479;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(Existing,CorrectHeader)\'");
            temp2479 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3005\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"NoError\"\'");
            this.Manager.Assert((temp2479 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, state S3005)", TestManagerHelpers.Describe(temp2479)));
            this.Manager.Comment("reaching state \'S5408\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3006
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3006() {
            this.Manager.BeginTest("BVTsS3006");
            this.Manager.Comment("reaching state \'S3006\'");
            string temp2480;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(Existing,WrongHeader)\'");
            temp2480 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3007\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2480 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, st" +
                        "ate S3007)", TestManagerHelpers.Describe(temp2480)));
            this.Manager.Comment("reaching state \'S5409\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3008
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3008() {
            this.Manager.BeginTest("BVTsS3008");
            this.Manager.Comment("reaching state \'S3008\'");
            string temp2481;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(New,NoHeader)\'");
            temp2481 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3009\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2481 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, st" +
                        "ate S3009)", TestManagerHelpers.Describe(temp2481)));
            this.Manager.Comment("reaching state \'S5410\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3010
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3010() {
            this.Manager.BeginTest("BVTsS3010");
            this.Manager.Comment("reaching state \'S3010\'");
            string temp2482;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(New,WrongHeader)\'");
            temp2482 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3011\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2482 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, st" +
                        "ate S3011)", TestManagerHelpers.Describe(temp2482)));
            this.Manager.Comment("reaching state \'S5411\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3012
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3012() {
            this.Manager.BeginTest("BVTsS3012");
            this.Manager.Comment("reaching state \'S3012\'");
            string temp2483;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(New,CorrectHeader)\'");
            temp2483 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3013\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"NoError\"\'");
            this.Manager.Assert((temp2483 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, state S3013)", TestManagerHelpers.Describe(temp2483)));
            this.Manager.Comment("reaching state \'S5412\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3014
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3014() {
            this.Manager.BeginTest("BVTsS3014");
            this.Manager.Comment("reaching state \'S3014\'");
            string temp2484;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuerArray(NoHeader)\'");
            temp2484 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuerArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3015\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuerArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2484 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetDRMLicenseIssuerArra" +
                        "y, state S3015)", TestManagerHelpers.Describe(temp2484)));
            this.Manager.Comment("reaching state \'S5413\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3016
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3016() {
            this.Manager.BeginTest("BVTsS3016");
            this.Manager.Comment("reaching state \'S3016\'");
            string temp2485;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuerArray(CorrectHeader)\'");
            temp2485 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuerArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3017\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuerArray/\"NoError\"\'");
            this.Manager.Assert((temp2485 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuerArray, state S30" +
                        "17)", TestManagerHelpers.Describe(temp2485)));
            this.Manager.Comment("reaching state \'S5414\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3018
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3018() {
            this.Manager.BeginTest("BVTsS3018");
            this.Manager.Comment("reaching state \'S3018\'");
            string temp2486;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuerArray(WrongHeader)\'");
            temp2486 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuerArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3019\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuerArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2486 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetDRMLicenseIssuerArra" +
                        "y, state S3019)", TestManagerHelpers.Describe(temp2486)));
            this.Manager.Comment("reaching state \'S5415\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3020
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3020() {
            this.Manager.BeginTest("BVTsS3020");
            this.Manager.Comment("reaching state \'S3020\'");
            string temp2487;
            this.Manager.Comment("executing step \'call GetEntity(Existing,NoHeader)\'");
            temp2487 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3021\'");
            this.Manager.Comment("checking step \'return GetEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2487 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetEntity, state S3021)" +
                        "", TestManagerHelpers.Describe(temp2487)));
            this.Manager.Comment("reaching state \'S5416\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3022
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3022() {
            this.Manager.BeginTest("BVTsS3022");
            this.Manager.Comment("reaching state \'S3022\'");
            string temp2488;
            this.Manager.Comment("executing step \'call GetEntity(Existing,CorrectHeader)\'");
            temp2488 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3023\'");
            this.Manager.Comment("checking step \'return GetEntity/\"NoError\"\'");
            this.Manager.Assert((temp2488 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntity, state S3023)", TestManagerHelpers.Describe(temp2488)));
            this.Manager.Comment("reaching state \'S5417\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3024
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3024() {
            this.Manager.BeginTest("BVTsS3024");
            this.Manager.Comment("reaching state \'S3024\'");
            string temp2489;
            this.Manager.Comment("executing step \'call GetEntity(Existing,WrongHeader)\'");
            temp2489 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3025\'");
            this.Manager.Comment("checking step \'return GetEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2489 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetEntity, state S3025)" +
                        "", TestManagerHelpers.Describe(temp2489)));
            this.Manager.Comment("reaching state \'S5418\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3026
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3026() {
            this.Manager.BeginTest("BVTsS3026");
            this.Manager.Comment("reaching state \'S3026\'");
            string temp2490;
            this.Manager.Comment("executing step \'call GetEntity(New,NoHeader)\'");
            temp2490 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3027\'");
            this.Manager.Comment("checking step \'return GetEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2490 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetEntity, state S3027)" +
                        "", TestManagerHelpers.Describe(temp2490)));
            this.Manager.Comment("reaching state \'S5419\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3028
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3028() {
            this.Manager.BeginTest("BVTsS3028");
            this.Manager.Comment("reaching state \'S3028\'");
            string temp2491;
            this.Manager.Comment("executing step \'call GetEntity(New,WrongHeader)\'");
            temp2491 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3029\'");
            this.Manager.Comment("checking step \'return GetEntity/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2491 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetEntity, state S3029)" +
                        "", TestManagerHelpers.Describe(temp2491)));
            this.Manager.Comment("reaching state \'S5420\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3030
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3030() {
            this.Manager.BeginTest("BVTsS3030");
            this.Manager.Comment("reaching state \'S3030\'");
            string temp2492;
            this.Manager.Comment("executing step \'call GetEntity(New,CorrectHeader)\'");
            temp2492 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3031\'");
            this.Manager.Comment("checking step \'return GetEntity/\"NoError\"\'");
            this.Manager.Assert((temp2492 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntity, state S3031)", TestManagerHelpers.Describe(temp2492)));
            this.Manager.Comment("reaching state \'S5421\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3032
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3032() {
            this.Manager.BeginTest("BVTsS3032");
            this.Manager.Comment("reaching state \'S3032\'");
            string temp2493;
            this.Manager.Comment("executing step \'call GetEntityArray(NoHeader)\'");
            temp2493 = this.ICatalogWebServiceAdapterInstance.GetEntityArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3033\'");
            this.Manager.Comment("checking step \'return GetEntityArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2493 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetEntityArray, state S" +
                        "3033)", TestManagerHelpers.Describe(temp2493)));
            this.Manager.Comment("reaching state \'S5422\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3034
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3034() {
            this.Manager.BeginTest("BVTsS3034");
            this.Manager.Comment("reaching state \'S3034\'");
            string temp2494;
            this.Manager.Comment("executing step \'call GetEntityArray(CorrectHeader)\'");
            temp2494 = this.ICatalogWebServiceAdapterInstance.GetEntityArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3035\'");
            this.Manager.Comment("checking step \'return GetEntityArray/\"NoError\"\'");
            this.Manager.Assert((temp2494 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntityArray, state S3035)", TestManagerHelpers.Describe(temp2494)));
            this.Manager.Comment("reaching state \'S5423\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3036
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3036() {
            this.Manager.BeginTest("BVTsS3036");
            this.Manager.Comment("reaching state \'S3036\'");
            string temp2495;
            this.Manager.Comment("executing step \'call GetEntityArray(WrongHeader)\'");
            temp2495 = this.ICatalogWebServiceAdapterInstance.GetEntityArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3037\'");
            this.Manager.Comment("checking step \'return GetEntityArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2495 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetEntityArray, state S" +
                        "3037)", TestManagerHelpers.Describe(temp2495)));
            this.Manager.Comment("reaching state \'S5424\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3038
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3038() {
            this.Manager.BeginTest("BVTsS3038");
            this.Manager.Comment("reaching state \'S3038\'");
            string temp2496;
            this.Manager.Comment("executing step \'call GetGame(Existing,NoHeader)\'");
            temp2496 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3039\'");
            this.Manager.Comment("checking step \'return GetGame/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2496 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetGame, state S3039)", TestManagerHelpers.Describe(temp2496)));
            this.Manager.Comment("reaching state \'S5425\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3040
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3040() {
            this.Manager.BeginTest("BVTsS3040");
            this.Manager.Comment("reaching state \'S3040\'");
            string temp2497;
            this.Manager.Comment("executing step \'call GetGame(Existing,CorrectHeader)\'");
            temp2497 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3041\'");
            this.Manager.Comment("checking step \'return GetGame/\"NoError\"\'");
            this.Manager.Assert((temp2497 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGame, state S3041)", TestManagerHelpers.Describe(temp2497)));
            this.Manager.Comment("reaching state \'S5426\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3042
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3042() {
            this.Manager.BeginTest("BVTsS3042");
            this.Manager.Comment("reaching state \'S3042\'");
            string temp2498;
            this.Manager.Comment("executing step \'call GetGame(Existing,WrongHeader)\'");
            temp2498 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3043\'");
            this.Manager.Comment("checking step \'return GetGame/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2498 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetGame, state S3043)", TestManagerHelpers.Describe(temp2498)));
            this.Manager.Comment("reaching state \'S5427\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3044
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3044() {
            this.Manager.BeginTest("BVTsS3044");
            this.Manager.Comment("reaching state \'S3044\'");
            string temp2499;
            this.Manager.Comment("executing step \'call GetGame(New,NoHeader)\'");
            temp2499 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3045\'");
            this.Manager.Comment("checking step \'return GetGame/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2499 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetGame, state S3045)", TestManagerHelpers.Describe(temp2499)));
            this.Manager.Comment("reaching state \'S5428\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3046
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3046() {
            this.Manager.BeginTest("BVTsS3046");
            this.Manager.Comment("reaching state \'S3046\'");
            string temp2500;
            this.Manager.Comment("executing step \'call GetGame(New,WrongHeader)\'");
            temp2500 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3047\'");
            this.Manager.Comment("checking step \'return GetGame/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2500 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetGame, state S3047)", TestManagerHelpers.Describe(temp2500)));
            this.Manager.Comment("reaching state \'S5429\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3048
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3048() {
            this.Manager.BeginTest("BVTsS3048");
            this.Manager.Comment("reaching state \'S3048\'");
            string temp2501;
            this.Manager.Comment("executing step \'call GetGame(New,CorrectHeader)\'");
            temp2501 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3049\'");
            this.Manager.Comment("checking step \'return GetGame/\"NoError\"\'");
            this.Manager.Assert((temp2501 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGame, state S3049)", TestManagerHelpers.Describe(temp2501)));
            this.Manager.Comment("reaching state \'S5430\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3050
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3050() {
            this.Manager.BeginTest("BVTsS3050");
            this.Manager.Comment("reaching state \'S3050\'");
            string temp2502;
            this.Manager.Comment("executing step \'call GetGameContent(Existing,NoHeader)\'");
            temp2502 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3051\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2502 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetGameContent, state S" +
                        "3051)", TestManagerHelpers.Describe(temp2502)));
            this.Manager.Comment("reaching state \'S5431\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3052
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3052() {
            this.Manager.BeginTest("BVTsS3052");
            this.Manager.Comment("reaching state \'S3052\'");
            string temp2503;
            this.Manager.Comment("executing step \'call GetGameContent(Existing,CorrectHeader)\'");
            temp2503 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3053\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"NoError\"\'");
            this.Manager.Assert((temp2503 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGameContent, state S3053)", TestManagerHelpers.Describe(temp2503)));
            this.Manager.Comment("reaching state \'S5432\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3054
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3054() {
            this.Manager.BeginTest("BVTsS3054");
            this.Manager.Comment("reaching state \'S3054\'");
            string temp2504;
            this.Manager.Comment("executing step \'call GetGameContent(Existing,WrongHeader)\'");
            temp2504 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3055\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2504 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetGameContent, state S" +
                        "3055)", TestManagerHelpers.Describe(temp2504)));
            this.Manager.Comment("reaching state \'S5433\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3056
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3056() {
            this.Manager.BeginTest("BVTsS3056");
            this.Manager.Comment("reaching state \'S3056\'");
            string temp2505;
            this.Manager.Comment("executing step \'call GetGameContent(New,NoHeader)\'");
            temp2505 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3057\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2505 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetGameContent, state S" +
                        "3057)", TestManagerHelpers.Describe(temp2505)));
            this.Manager.Comment("reaching state \'S5434\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3058
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3058() {
            this.Manager.BeginTest("BVTsS3058");
            this.Manager.Comment("reaching state \'S3058\'");
            string temp2506;
            this.Manager.Comment("executing step \'call GetGameContent(New,WrongHeader)\'");
            temp2506 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3059\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2506 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetGameContent, state S" +
                        "3059)", TestManagerHelpers.Describe(temp2506)));
            this.Manager.Comment("reaching state \'S5435\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3060
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3060() {
            this.Manager.BeginTest("BVTsS3060");
            this.Manager.Comment("reaching state \'S3060\'");
            string temp2507;
            this.Manager.Comment("executing step \'call GetGameContent(New,CorrectHeader)\'");
            temp2507 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3061\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"NoError\"\'");
            this.Manager.Assert((temp2507 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGameContent, state S3061)", TestManagerHelpers.Describe(temp2507)));
            this.Manager.Comment("reaching state \'S5436\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3062
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3062() {
            this.Manager.BeginTest("BVTsS3062");
            this.Manager.Comment("reaching state \'S3062\'");
            string temp2508;
            this.Manager.Comment("executing step \'call GetImage(Existing,NoHeader)\'");
            temp2508 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3063\'");
            this.Manager.Comment("checking step \'return GetImage/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2508 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetImage, state S3063)", TestManagerHelpers.Describe(temp2508)));
            this.Manager.Comment("reaching state \'S5437\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3064
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3064() {
            this.Manager.BeginTest("BVTsS3064");
            this.Manager.Comment("reaching state \'S3064\'");
            string temp2509;
            this.Manager.Comment("executing step \'call GetImage(Existing,CorrectHeader)\'");
            temp2509 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3065\'");
            this.Manager.Comment("checking step \'return GetImage/\"NoError\"\'");
            this.Manager.Assert((temp2509 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImage, state S3065)", TestManagerHelpers.Describe(temp2509)));
            this.Manager.Comment("reaching state \'S5438\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3066
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3066() {
            this.Manager.BeginTest("BVTsS3066");
            this.Manager.Comment("reaching state \'S3066\'");
            string temp2510;
            this.Manager.Comment("executing step \'call GetImage(Existing,WrongHeader)\'");
            temp2510 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3067\'");
            this.Manager.Comment("checking step \'return GetImage/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2510 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetImage, state S3067)", TestManagerHelpers.Describe(temp2510)));
            this.Manager.Comment("reaching state \'S5439\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3068
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3068() {
            this.Manager.BeginTest("BVTsS3068");
            this.Manager.Comment("reaching state \'S3068\'");
            string temp2511;
            this.Manager.Comment("executing step \'call GetImage(New,NoHeader)\'");
            temp2511 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3069\'");
            this.Manager.Comment("checking step \'return GetImage/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2511 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetImage, state S3069)", TestManagerHelpers.Describe(temp2511)));
            this.Manager.Comment("reaching state \'S5440\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3070
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3070() {
            this.Manager.BeginTest("BVTsS3070");
            this.Manager.Comment("reaching state \'S3070\'");
            string temp2512;
            this.Manager.Comment("executing step \'call GetImage(New,WrongHeader)\'");
            temp2512 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3071\'");
            this.Manager.Comment("checking step \'return GetImage/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2512 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetImage, state S3071)", TestManagerHelpers.Describe(temp2512)));
            this.Manager.Comment("reaching state \'S5441\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3072
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3072() {
            this.Manager.BeginTest("BVTsS3072");
            this.Manager.Comment("reaching state \'S3072\'");
            string temp2513;
            this.Manager.Comment("executing step \'call GetImage(New,CorrectHeader)\'");
            temp2513 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3073\'");
            this.Manager.Comment("checking step \'return GetImage/\"NoError\"\'");
            this.Manager.Assert((temp2513 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImage, state S3073)", TestManagerHelpers.Describe(temp2513)));
            this.Manager.Comment("reaching state \'S5442\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3074
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3074() {
            this.Manager.BeginTest("BVTsS3074");
            this.Manager.Comment("reaching state \'S3074\'");
            string temp2514;
            this.Manager.Comment("executing step \'call GetImageFormat(NoHeader)\'");
            temp2514 = this.ICatalogWebServiceAdapterInstance.GetImageFormat(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3075\'");
            this.Manager.Comment("checking step \'return GetImageFormat/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2514 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetImageFormat, state S" +
                        "3075)", TestManagerHelpers.Describe(temp2514)));
            this.Manager.Comment("reaching state \'S5443\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3076
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3076() {
            this.Manager.BeginTest("BVTsS3076");
            this.Manager.Comment("reaching state \'S3076\'");
            string temp2515;
            this.Manager.Comment("executing step \'call GetImageFormat(CorrectHeader)\'");
            temp2515 = this.ICatalogWebServiceAdapterInstance.GetImageFormat(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3077\'");
            this.Manager.Comment("checking step \'return GetImageFormat/\"NoError\"\'");
            this.Manager.Assert((temp2515 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImageFormat, state S3077)", TestManagerHelpers.Describe(temp2515)));
            this.Manager.Comment("reaching state \'S5444\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3078
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3078() {
            this.Manager.BeginTest("BVTsS3078");
            this.Manager.Comment("reaching state \'S3078\'");
            string temp2516;
            this.Manager.Comment("executing step \'call GetImageFormat(WrongHeader)\'");
            temp2516 = this.ICatalogWebServiceAdapterInstance.GetImageFormat(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3079\'");
            this.Manager.Comment("checking step \'return GetImageFormat/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2516 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetImageFormat, state S" +
                        "3079)", TestManagerHelpers.Describe(temp2516)));
            this.Manager.Comment("reaching state \'S5445\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3080
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3080() {
            this.Manager.BeginTest("BVTsS3080");
            this.Manager.Comment("reaching state \'S3080\'");
            string temp2517;
            this.Manager.Comment("executing step \'call GetImageSizeArray(NoHeader)\'");
            temp2517 = this.ICatalogWebServiceAdapterInstance.GetImageSizeArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3081\'");
            this.Manager.Comment("checking step \'return GetImageSizeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2517 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetImageSizeArray, stat" +
                        "e S3081)", TestManagerHelpers.Describe(temp2517)));
            this.Manager.Comment("reaching state \'S5446\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3082
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3082() {
            this.Manager.BeginTest("BVTsS3082");
            this.Manager.Comment("reaching state \'S3082\'");
            string temp2518;
            this.Manager.Comment("executing step \'call GetImageSizeArray(CorrectHeader)\'");
            temp2518 = this.ICatalogWebServiceAdapterInstance.GetImageSizeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3083\'");
            this.Manager.Comment("checking step \'return GetImageSizeArray/\"NoError\"\'");
            this.Manager.Assert((temp2518 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImageSizeArray, state S3083)", TestManagerHelpers.Describe(temp2518)));
            this.Manager.Comment("reaching state \'S5447\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3084
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3084() {
            this.Manager.BeginTest("BVTsS3084");
            this.Manager.Comment("reaching state \'S3084\'");
            string temp2519;
            this.Manager.Comment("executing step \'call GetImageSizeArray(WrongHeader)\'");
            temp2519 = this.ICatalogWebServiceAdapterInstance.GetImageSizeArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3085\'");
            this.Manager.Comment("checking step \'return GetImageSizeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2519 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetImageSizeArray, stat" +
                        "e S3085)", TestManagerHelpers.Describe(temp2519)));
            this.Manager.Comment("reaching state \'S5448\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3086
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3086() {
            this.Manager.BeginTest("BVTsS3086");
            this.Manager.Comment("reaching state \'S3086\'");
            string temp2520;
            this.Manager.Comment("executing step \'call GetLicenseClass(Existing,NoHeader)\'");
            temp2520 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3087\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2520 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseClass, state " +
                        "S3087)", TestManagerHelpers.Describe(temp2520)));
            this.Manager.Comment("reaching state \'S5449\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3088
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3088() {
            this.Manager.BeginTest("BVTsS3088");
            this.Manager.Comment("reaching state \'S3088\'");
            string temp2521;
            this.Manager.Comment("executing step \'call GetLicenseClass(Existing,CorrectHeader)\'");
            temp2521 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3089\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"NoError\"\'");
            this.Manager.Assert((temp2521 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClass, state S3089)", TestManagerHelpers.Describe(temp2521)));
            this.Manager.Comment("reaching state \'S5450\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3090
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3090() {
            this.Manager.BeginTest("BVTsS3090");
            this.Manager.Comment("reaching state \'S3090\'");
            string temp2522;
            this.Manager.Comment("executing step \'call GetLicenseClass(Existing,WrongHeader)\'");
            temp2522 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3091\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2522 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseClass, state " +
                        "S3091)", TestManagerHelpers.Describe(temp2522)));
            this.Manager.Comment("reaching state \'S5451\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3092
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3092() {
            this.Manager.BeginTest("BVTsS3092");
            this.Manager.Comment("reaching state \'S3092\'");
            string temp2523;
            this.Manager.Comment("executing step \'call GetLicenseClass(New,NoHeader)\'");
            temp2523 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3093\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2523 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseClass, state " +
                        "S3093)", TestManagerHelpers.Describe(temp2523)));
            this.Manager.Comment("reaching state \'S5452\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3094
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3094() {
            this.Manager.BeginTest("BVTsS3094");
            this.Manager.Comment("reaching state \'S3094\'");
            string temp2524;
            this.Manager.Comment("executing step \'call GetLicenseClass(New,WrongHeader)\'");
            temp2524 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3095\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2524 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseClass, state " +
                        "S3095)", TestManagerHelpers.Describe(temp2524)));
            this.Manager.Comment("reaching state \'S5453\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3096
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3096() {
            this.Manager.BeginTest("BVTsS3096");
            this.Manager.Comment("reaching state \'S3096\'");
            string temp2525;
            this.Manager.Comment("executing step \'call GetLicenseClass(New,CorrectHeader)\'");
            temp2525 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3097\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"NoError\"\'");
            this.Manager.Assert((temp2525 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClass, state S3097)", TestManagerHelpers.Describe(temp2525)));
            this.Manager.Comment("reaching state \'S5454\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3098
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3098() {
            this.Manager.BeginTest("BVTsS3098");
            this.Manager.Comment("reaching state \'S3098\'");
            string temp2526;
            this.Manager.Comment("executing step \'call GetLicenseClassArray(NoHeader)\'");
            temp2526 = this.ICatalogWebServiceAdapterInstance.GetLicenseClassArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3099\'");
            this.Manager.Comment("checking step \'return GetLicenseClassArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2526 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseClassArray, s" +
                        "tate S3099)", TestManagerHelpers.Describe(temp2526)));
            this.Manager.Comment("reaching state \'S5455\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3100() {
            this.Manager.BeginTest("BVTsS3100");
            this.Manager.Comment("reaching state \'S3100\'");
            string temp2527;
            this.Manager.Comment("executing step \'call GetLicenseClassArray(CorrectHeader)\'");
            temp2527 = this.ICatalogWebServiceAdapterInstance.GetLicenseClassArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3101\'");
            this.Manager.Comment("checking step \'return GetLicenseClassArray/\"NoError\"\'");
            this.Manager.Assert((temp2527 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClassArray, state S3101)", TestManagerHelpers.Describe(temp2527)));
            this.Manager.Comment("reaching state \'S5456\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3102() {
            this.Manager.BeginTest("BVTsS3102");
            this.Manager.Comment("reaching state \'S3102\'");
            string temp2528;
            this.Manager.Comment("executing step \'call GetLicenseClassArray(WrongHeader)\'");
            temp2528 = this.ICatalogWebServiceAdapterInstance.GetLicenseClassArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3103\'");
            this.Manager.Comment("checking step \'return GetLicenseClassArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2528 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseClassArray, s" +
                        "tate S3103)", TestManagerHelpers.Describe(temp2528)));
            this.Manager.Comment("reaching state \'S5457\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3104() {
            this.Manager.BeginTest("BVTsS3104");
            this.Manager.Comment("reaching state \'S3104\'");
            string temp2529;
            this.Manager.Comment("executing step \'call GetLicenseType(Existing,NoHeader)\'");
            temp2529 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3105\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2529 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseType, state S" +
                        "3105)", TestManagerHelpers.Describe(temp2529)));
            this.Manager.Comment("reaching state \'S5458\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3106() {
            this.Manager.BeginTest("BVTsS3106");
            this.Manager.Comment("reaching state \'S3106\'");
            string temp2530;
            this.Manager.Comment("executing step \'call GetLicenseType(Existing,CorrectHeader)\'");
            temp2530 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3107\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp2530 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseType, state S3107)", TestManagerHelpers.Describe(temp2530)));
            this.Manager.Comment("reaching state \'S5459\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3108() {
            this.Manager.BeginTest("BVTsS3108");
            this.Manager.Comment("reaching state \'S3108\'");
            string temp2531;
            this.Manager.Comment("executing step \'call GetLicenseType(Existing,WrongHeader)\'");
            temp2531 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3109\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2531 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseType, state S" +
                        "3109)", TestManagerHelpers.Describe(temp2531)));
            this.Manager.Comment("reaching state \'S5460\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3110() {
            this.Manager.BeginTest("BVTsS3110");
            this.Manager.Comment("reaching state \'S3110\'");
            string temp2532;
            this.Manager.Comment("executing step \'call GetLicenseType(New,NoHeader)\'");
            temp2532 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3111\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2532 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseType, state S" +
                        "3111)", TestManagerHelpers.Describe(temp2532)));
            this.Manager.Comment("reaching state \'S5461\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3112() {
            this.Manager.BeginTest("BVTsS3112");
            this.Manager.Comment("reaching state \'S3112\'");
            string temp2533;
            this.Manager.Comment("executing step \'call GetLicenseType(New,WrongHeader)\'");
            temp2533 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3113\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2533 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseType, state S" +
                        "3113)", TestManagerHelpers.Describe(temp2533)));
            this.Manager.Comment("reaching state \'S5462\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3114() {
            this.Manager.BeginTest("BVTsS3114");
            this.Manager.Comment("reaching state \'S3114\'");
            string temp2534;
            this.Manager.Comment("executing step \'call GetLicenseType(New,CorrectHeader)\'");
            temp2534 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3115\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp2534 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseType, state S3115)", TestManagerHelpers.Describe(temp2534)));
            this.Manager.Comment("reaching state \'S5463\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3116() {
            this.Manager.BeginTest("BVTsS3116");
            this.Manager.Comment("reaching state \'S3116\'");
            string temp2535;
            this.Manager.Comment("executing step \'call GetLicenseTypeArray(NoHeader)\'");
            temp2535 = this.ICatalogWebServiceAdapterInstance.GetLicenseTypeArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3117\'");
            this.Manager.Comment("checking step \'return GetLicenseTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2535 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseTypeArray, st" +
                        "ate S3117)", TestManagerHelpers.Describe(temp2535)));
            this.Manager.Comment("reaching state \'S5464\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3118() {
            this.Manager.BeginTest("BVTsS3118");
            this.Manager.Comment("reaching state \'S3118\'");
            string temp2536;
            this.Manager.Comment("executing step \'call GetLicenseTypeArray(CorrectHeader)\'");
            temp2536 = this.ICatalogWebServiceAdapterInstance.GetLicenseTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3119\'");
            this.Manager.Comment("checking step \'return GetLicenseTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp2536 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseTypeArray, state S3119)", TestManagerHelpers.Describe(temp2536)));
            this.Manager.Comment("reaching state \'S5465\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3120() {
            this.Manager.BeginTest("BVTsS3120");
            this.Manager.Comment("reaching state \'S3120\'");
            string temp2537;
            this.Manager.Comment("executing step \'call GetLicenseTypeArray(WrongHeader)\'");
            temp2537 = this.ICatalogWebServiceAdapterInstance.GetLicenseTypeArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3121\'");
            this.Manager.Comment("checking step \'return GetLicenseTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2537 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLicenseTypeArray, st" +
                        "ate S3121)", TestManagerHelpers.Describe(temp2537)));
            this.Manager.Comment("reaching state \'S5466\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3122() {
            this.Manager.BeginTest("BVTsS3122");
            this.Manager.Comment("reaching state \'S3122\'");
            string temp2538;
            this.Manager.Comment("executing step \'call GetLocaleArray(NoHeader)\'");
            temp2538 = this.ICatalogWebServiceAdapterInstance.GetLocaleArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3123\'");
            this.Manager.Comment("checking step \'return GetLocaleArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2538 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLocaleArray, state S" +
                        "3123)", TestManagerHelpers.Describe(temp2538)));
            this.Manager.Comment("reaching state \'S5467\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3124() {
            this.Manager.BeginTest("BVTsS3124");
            this.Manager.Comment("reaching state \'S3124\'");
            string temp2539;
            this.Manager.Comment("executing step \'call GetLocaleArray(CorrectHeader)\'");
            temp2539 = this.ICatalogWebServiceAdapterInstance.GetLocaleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3125\'");
            this.Manager.Comment("checking step \'return GetLocaleArray/\"NoError\"\'");
            this.Manager.Assert((temp2539 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLocaleArray, state S3125)", TestManagerHelpers.Describe(temp2539)));
            this.Manager.Comment("reaching state \'S5468\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3126() {
            this.Manager.BeginTest("BVTsS3126");
            this.Manager.Comment("reaching state \'S3126\'");
            string temp2540;
            this.Manager.Comment("executing step \'call GetLocaleArray(WrongHeader)\'");
            temp2540 = this.ICatalogWebServiceAdapterInstance.GetLocaleArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3127\'");
            this.Manager.Comment("checking step \'return GetLocaleArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2540 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetLocaleArray, state S" +
                        "3127)", TestManagerHelpers.Describe(temp2540)));
            this.Manager.Comment("reaching state \'S5469\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3128() {
            this.Manager.BeginTest("BVTsS3128");
            this.Manager.Comment("reaching state \'S3128\'");
            string temp2541;
            this.Manager.Comment("executing step \'call GetMediaRelationshipTypeArray(NoHeader)\'");
            temp2541 = this.ICatalogWebServiceAdapterInstance.GetMediaRelationshipTypeArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3129\'");
            this.Manager.Comment("checking step \'return GetMediaRelationshipTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2541 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMediaRelationshipTyp" +
                        "eArray, state S3129)", TestManagerHelpers.Describe(temp2541)));
            this.Manager.Comment("reaching state \'S5470\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3130() {
            this.Manager.BeginTest("BVTsS3130");
            this.Manager.Comment("reaching state \'S3130\'");
            string temp2542;
            this.Manager.Comment("executing step \'call GetMediaRelationshipTypeArray(CorrectHeader)\'");
            temp2542 = this.ICatalogWebServiceAdapterInstance.GetMediaRelationshipTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3131\'");
            this.Manager.Comment("checking step \'return GetMediaRelationshipTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp2542 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMediaRelationshipTypeArray, stat" +
                        "e S3131)", TestManagerHelpers.Describe(temp2542)));
            this.Manager.Comment("reaching state \'S5471\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3132() {
            this.Manager.BeginTest("BVTsS3132");
            this.Manager.Comment("reaching state \'S3132\'");
            string temp2543;
            this.Manager.Comment("executing step \'call GetMediaRelationshipTypeArray(WrongHeader)\'");
            temp2543 = this.ICatalogWebServiceAdapterInstance.GetMediaRelationshipTypeArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3133\'");
            this.Manager.Comment("checking step \'return GetMediaRelationshipTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2543 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMediaRelationshipTyp" +
                        "eArray, state S3133)", TestManagerHelpers.Describe(temp2543)));
            this.Manager.Comment("reaching state \'S5472\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3134() {
            this.Manager.BeginTest("BVTsS3134");
            this.Manager.Comment("reaching state \'S3134\'");
            string temp2544;
            this.Manager.Comment("executing step \'call GetMediaTypeArray(NoHeader)\'");
            temp2544 = this.ICatalogWebServiceAdapterInstance.GetMediaTypeArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3135\'");
            this.Manager.Comment("checking step \'return GetMediaTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2544 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMediaTypeArray, stat" +
                        "e S3135)", TestManagerHelpers.Describe(temp2544)));
            this.Manager.Comment("reaching state \'S5473\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3136() {
            this.Manager.BeginTest("BVTsS3136");
            this.Manager.Comment("reaching state \'S3136\'");
            string temp2545;
            this.Manager.Comment("executing step \'call GetMediaTypeArray(CorrectHeader)\'");
            temp2545 = this.ICatalogWebServiceAdapterInstance.GetMediaTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3137\'");
            this.Manager.Comment("checking step \'return GetMediaTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp2545 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMediaTypeArray, state S3137)", TestManagerHelpers.Describe(temp2545)));
            this.Manager.Comment("reaching state \'S5474\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3138() {
            this.Manager.BeginTest("BVTsS3138");
            this.Manager.Comment("reaching state \'S3138\'");
            string temp2546;
            this.Manager.Comment("executing step \'call GetMediaTypeArray(WrongHeader)\'");
            temp2546 = this.ICatalogWebServiceAdapterInstance.GetMediaTypeArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3139\'");
            this.Manager.Comment("checking step \'return GetMediaTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2546 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMediaTypeArray, stat" +
                        "e S3139)", TestManagerHelpers.Describe(temp2546)));
            this.Manager.Comment("reaching state \'S5475\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3140() {
            this.Manager.BeginTest("BVTsS3140");
            this.Manager.Comment("reaching state \'S3140\'");
            string temp2547;
            this.Manager.Comment("executing step \'call GetMetadataProvider(Existing,NoHeader)\'");
            temp2547 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3141\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2547 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMetadataProvider, st" +
                        "ate S3141)", TestManagerHelpers.Describe(temp2547)));
            this.Manager.Comment("reaching state \'S5476\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3142() {
            this.Manager.BeginTest("BVTsS3142");
            this.Manager.Comment("reaching state \'S3142\'");
            string temp2548;
            this.Manager.Comment("executing step \'call GetMetadataProvider(Existing,CorrectHeader)\'");
            temp2548 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3143\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"NoError\"\'");
            this.Manager.Assert((temp2548 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProvider, state S3143)", TestManagerHelpers.Describe(temp2548)));
            this.Manager.Comment("reaching state \'S5477\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3144() {
            this.Manager.BeginTest("BVTsS3144");
            this.Manager.Comment("reaching state \'S3144\'");
            string temp2549;
            this.Manager.Comment("executing step \'call GetMetadataProvider(Existing,WrongHeader)\'");
            temp2549 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3145\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2549 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMetadataProvider, st" +
                        "ate S3145)", TestManagerHelpers.Describe(temp2549)));
            this.Manager.Comment("reaching state \'S5478\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3146() {
            this.Manager.BeginTest("BVTsS3146");
            this.Manager.Comment("reaching state \'S3146\'");
            string temp2550;
            this.Manager.Comment("executing step \'call GetMetadataProvider(New,NoHeader)\'");
            temp2550 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3147\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2550 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMetadataProvider, st" +
                        "ate S3147)", TestManagerHelpers.Describe(temp2550)));
            this.Manager.Comment("reaching state \'S5479\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3148() {
            this.Manager.BeginTest("BVTsS3148");
            this.Manager.Comment("reaching state \'S3148\'");
            string temp2551;
            this.Manager.Comment("executing step \'call GetMetadataProvider(New,WrongHeader)\'");
            temp2551 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3149\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2551 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMetadataProvider, st" +
                        "ate S3149)", TestManagerHelpers.Describe(temp2551)));
            this.Manager.Comment("reaching state \'S5480\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3150() {
            this.Manager.BeginTest("BVTsS3150");
            this.Manager.Comment("reaching state \'S3150\'");
            string temp2552;
            this.Manager.Comment("executing step \'call GetMetadataProvider(New,CorrectHeader)\'");
            temp2552 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3151\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"NoError\"\'");
            this.Manager.Assert((temp2552 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProvider, state S3151)", TestManagerHelpers.Describe(temp2552)));
            this.Manager.Comment("reaching state \'S5481\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3152() {
            this.Manager.BeginTest("BVTsS3152");
            this.Manager.Comment("reaching state \'S3152\'");
            string temp2553;
            this.Manager.Comment("executing step \'call GetMetadataProviderArray(NoHeader)\'");
            temp2553 = this.ICatalogWebServiceAdapterInstance.GetMetadataProviderArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3153\'");
            this.Manager.Comment("checking step \'return GetMetadataProviderArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2553 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMetadataProviderArra" +
                        "y, state S3153)", TestManagerHelpers.Describe(temp2553)));
            this.Manager.Comment("reaching state \'S5482\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3154() {
            this.Manager.BeginTest("BVTsS3154");
            this.Manager.Comment("reaching state \'S3154\'");
            string temp2554;
            this.Manager.Comment("executing step \'call GetMetadataProviderArray(CorrectHeader)\'");
            temp2554 = this.ICatalogWebServiceAdapterInstance.GetMetadataProviderArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3155\'");
            this.Manager.Comment("checking step \'return GetMetadataProviderArray/\"NoError\"\'");
            this.Manager.Assert((temp2554 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProviderArray, state S31" +
                        "55)", TestManagerHelpers.Describe(temp2554)));
            this.Manager.Comment("reaching state \'S5483\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3156() {
            this.Manager.BeginTest("BVTsS3156");
            this.Manager.Comment("reaching state \'S3156\'");
            string temp2555;
            this.Manager.Comment("executing step \'call GetMetadataProviderArray(WrongHeader)\'");
            temp2555 = this.ICatalogWebServiceAdapterInstance.GetMetadataProviderArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3157\'");
            this.Manager.Comment("checking step \'return GetMetadataProviderArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2555 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetMetadataProviderArra" +
                        "y, state S3157)", TestManagerHelpers.Describe(temp2555)));
            this.Manager.Comment("reaching state \'S5484\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3158() {
            this.Manager.BeginTest("BVTsS3158");
            this.Manager.Comment("reaching state \'S3158\'");
            string temp2556;
            this.Manager.Comment("executing step \'call GetOffer(Existing,NoHeader)\'");
            temp2556 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3159\'");
            this.Manager.Comment("checking step \'return GetOffer/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2556 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetOffer, state S3159)", TestManagerHelpers.Describe(temp2556)));
            this.Manager.Comment("reaching state \'S5485\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3160() {
            this.Manager.BeginTest("BVTsS3160");
            this.Manager.Comment("reaching state \'S3160\'");
            string temp2557;
            this.Manager.Comment("executing step \'call GetOffer(Existing,WrongHeader)\'");
            temp2557 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3161\'");
            this.Manager.Comment("checking step \'return GetOffer/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2557 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetOffer, state S3161)", TestManagerHelpers.Describe(temp2557)));
            this.Manager.Comment("reaching state \'S5486\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3162() {
            this.Manager.BeginTest("BVTsS3162");
            this.Manager.Comment("reaching state \'S3162\'");
            string temp2558;
            this.Manager.Comment("executing step \'call GetOffer(Existing,CorrectHeader)\'");
            temp2558 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3163\'");
            this.Manager.Comment("checking step \'return GetOffer/\"NoError\"\'");
            this.Manager.Assert((temp2558 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetOffer, state S3163)", TestManagerHelpers.Describe(temp2558)));
            this.Manager.Comment("reaching state \'S5487\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3164
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3164() {
            this.Manager.BeginTest("BVTsS3164");
            this.Manager.Comment("reaching state \'S3164\'");
            string temp2559;
            this.Manager.Comment("executing step \'call GetOffer(New,NoHeader)\'");
            temp2559 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3165\'");
            this.Manager.Comment("checking step \'return GetOffer/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2559 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetOffer, state S3165)", TestManagerHelpers.Describe(temp2559)));
            this.Manager.Comment("reaching state \'S5488\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3166
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3166() {
            this.Manager.BeginTest("BVTsS3166");
            this.Manager.Comment("reaching state \'S3166\'");
            string temp2560;
            this.Manager.Comment("executing step \'call GetOffer(New,CorrectHeader)\'");
            temp2560 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3167\'");
            this.Manager.Comment("checking step \'return GetOffer/\"NoError\"\'");
            this.Manager.Assert((temp2560 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetOffer, state S3167)", TestManagerHelpers.Describe(temp2560)));
            this.Manager.Comment("reaching state \'S5489\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3168() {
            this.Manager.BeginTest("BVTsS3168");
            this.Manager.Comment("reaching state \'S3168\'");
            string temp2561;
            this.Manager.Comment("executing step \'call GetOffer(New,WrongHeader)\'");
            temp2561 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3169\'");
            this.Manager.Comment("checking step \'return GetOffer/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2561 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetOffer, state S3169)", TestManagerHelpers.Describe(temp2561)));
            this.Manager.Comment("reaching state \'S5490\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3170() {
            this.Manager.BeginTest("BVTsS3170");
            this.Manager.Comment("reaching state \'S3170\'");
            string temp2562;
            this.Manager.Comment("executing step \'call GetPreviewMediaInstanceTypeArray(NoHeader)\'");
            temp2562 = this.ICatalogWebServiceAdapterInstance.GetPreviewMediaInstanceTypeArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3171\'");
            this.Manager.Comment("checking step \'return GetPreviewMediaInstanceTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2562 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPreviewMediaInstance" +
                        "TypeArray, state S3171)", TestManagerHelpers.Describe(temp2562)));
            this.Manager.Comment("reaching state \'S5491\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3172() {
            this.Manager.BeginTest("BVTsS3172");
            this.Manager.Comment("reaching state \'S3172\'");
            string temp2563;
            this.Manager.Comment("executing step \'call GetPreviewMediaInstanceTypeArray(CorrectHeader)\'");
            temp2563 = this.ICatalogWebServiceAdapterInstance.GetPreviewMediaInstanceTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3173\'");
            this.Manager.Comment("checking step \'return GetPreviewMediaInstanceTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp2563 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPreviewMediaInstanceTypeArray, s" +
                        "tate S3173)", TestManagerHelpers.Describe(temp2563)));
            this.Manager.Comment("reaching state \'S5492\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3174() {
            this.Manager.BeginTest("BVTsS3174");
            this.Manager.Comment("reaching state \'S3174\'");
            string temp2564;
            this.Manager.Comment("executing step \'call GetPreviewMediaInstanceTypeArray(WrongHeader)\'");
            temp2564 = this.ICatalogWebServiceAdapterInstance.GetPreviewMediaInstanceTypeArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3175\'");
            this.Manager.Comment("checking step \'return GetPreviewMediaInstanceTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2564 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPreviewMediaInstance" +
                        "TypeArray, state S3175)", TestManagerHelpers.Describe(temp2564)));
            this.Manager.Comment("reaching state \'S5493\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3176
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3176() {
            this.Manager.BeginTest("BVTsS3176");
            this.Manager.Comment("reaching state \'S3176\'");
            string temp2565;
            this.Manager.Comment("executing step \'call GetPricingRule(Existing,NoHeader)\'");
            temp2565 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3177\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2565 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPricingRule, state S" +
                        "3177)", TestManagerHelpers.Describe(temp2565)));
            this.Manager.Comment("reaching state \'S5494\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3178() {
            this.Manager.BeginTest("BVTsS3178");
            this.Manager.Comment("reaching state \'S3178\'");
            string temp2566;
            this.Manager.Comment("executing step \'call GetPricingRule(Existing,CorrectHeader)\'");
            temp2566 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3179\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"NoError\"\'");
            this.Manager.Assert((temp2566 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRule, state S3179)", TestManagerHelpers.Describe(temp2566)));
            this.Manager.Comment("reaching state \'S5495\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3180
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3180() {
            this.Manager.BeginTest("BVTsS3180");
            this.Manager.Comment("reaching state \'S3180\'");
            string temp2567;
            this.Manager.Comment("executing step \'call GetPricingRule(Existing,WrongHeader)\'");
            temp2567 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3181\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2567 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPricingRule, state S" +
                        "3181)", TestManagerHelpers.Describe(temp2567)));
            this.Manager.Comment("reaching state \'S5496\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3182() {
            this.Manager.BeginTest("BVTsS3182");
            this.Manager.Comment("reaching state \'S3182\'");
            string temp2568;
            this.Manager.Comment("executing step \'call GetPricingRule(New,NoHeader)\'");
            temp2568 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3183\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2568 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPricingRule, state S" +
                        "3183)", TestManagerHelpers.Describe(temp2568)));
            this.Manager.Comment("reaching state \'S5497\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3184() {
            this.Manager.BeginTest("BVTsS3184");
            this.Manager.Comment("reaching state \'S3184\'");
            string temp2569;
            this.Manager.Comment("executing step \'call GetPricingRule(New,WrongHeader)\'");
            temp2569 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3185\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2569 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPricingRule, state S" +
                        "3185)", TestManagerHelpers.Describe(temp2569)));
            this.Manager.Comment("reaching state \'S5498\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3186() {
            this.Manager.BeginTest("BVTsS3186");
            this.Manager.Comment("reaching state \'S3186\'");
            string temp2570;
            this.Manager.Comment("executing step \'call GetPricingRule(New,CorrectHeader)\'");
            temp2570 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3187\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"NoError\"\'");
            this.Manager.Assert((temp2570 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRule, state S3187)", TestManagerHelpers.Describe(temp2570)));
            this.Manager.Comment("reaching state \'S5499\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3188() {
            this.Manager.BeginTest("BVTsS3188");
            this.Manager.Comment("reaching state \'S3188\'");
            string temp2571;
            this.Manager.Comment("executing step \'call GetPricingRuleArray(NoHeader)\'");
            temp2571 = this.ICatalogWebServiceAdapterInstance.GetPricingRuleArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3189\'");
            this.Manager.Comment("checking step \'return GetPricingRuleArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2571 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPricingRuleArray, st" +
                        "ate S3189)", TestManagerHelpers.Describe(temp2571)));
            this.Manager.Comment("reaching state \'S5500\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3190
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3190() {
            this.Manager.BeginTest("BVTsS3190");
            this.Manager.Comment("reaching state \'S3190\'");
            string temp2572;
            this.Manager.Comment("executing step \'call GetPricingRuleArray(CorrectHeader)\'");
            temp2572 = this.ICatalogWebServiceAdapterInstance.GetPricingRuleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3191\'");
            this.Manager.Comment("checking step \'return GetPricingRuleArray/\"NoError\"\'");
            this.Manager.Assert((temp2572 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRuleArray, state S3191)", TestManagerHelpers.Describe(temp2572)));
            this.Manager.Comment("reaching state \'S5501\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3192
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3192() {
            this.Manager.BeginTest("BVTsS3192");
            this.Manager.Comment("reaching state \'S3192\'");
            string temp2573;
            this.Manager.Comment("executing step \'call GetPricingRuleArray(WrongHeader)\'");
            temp2573 = this.ICatalogWebServiceAdapterInstance.GetPricingRuleArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3193\'");
            this.Manager.Comment("checking step \'return GetPricingRuleArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2573 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPricingRuleArray, st" +
                        "ate S3193)", TestManagerHelpers.Describe(temp2573)));
            this.Manager.Comment("reaching state \'S5502\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3194() {
            this.Manager.BeginTest("BVTsS3194");
            this.Manager.Comment("reaching state \'S3194\'");
            string temp2574;
            this.Manager.Comment("executing step \'call GetProvider(Existing,NoHeader)\'");
            temp2574 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3195\'");
            this.Manager.Comment("checking step \'return GetProvider/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2574 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetProvider, state S319" +
                        "5)", TestManagerHelpers.Describe(temp2574)));
            this.Manager.Comment("reaching state \'S5503\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3196() {
            this.Manager.BeginTest("BVTsS3196");
            this.Manager.Comment("reaching state \'S3196\'");
            string temp2575;
            this.Manager.Comment("executing step \'call GetProvider(Existing,CorrectHeader)\'");
            temp2575 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3197\'");
            this.Manager.Comment("checking step \'return GetProvider/\"NoError\"\'");
            this.Manager.Assert((temp2575 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProvider, state S3197)", TestManagerHelpers.Describe(temp2575)));
            this.Manager.Comment("reaching state \'S5504\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3198
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3198() {
            this.Manager.BeginTest("BVTsS3198");
            this.Manager.Comment("reaching state \'S3198\'");
            string temp2576;
            this.Manager.Comment("executing step \'call GetProvider(Existing,WrongHeader)\'");
            temp2576 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3199\'");
            this.Manager.Comment("checking step \'return GetProvider/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2576 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetProvider, state S319" +
                        "9)", TestManagerHelpers.Describe(temp2576)));
            this.Manager.Comment("reaching state \'S5505\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3200
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3200() {
            this.Manager.BeginTest("BVTsS3200");
            this.Manager.Comment("reaching state \'S3200\'");
            string temp2577;
            this.Manager.Comment("executing step \'call GetProvider(New,NoHeader)\'");
            temp2577 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3201\'");
            this.Manager.Comment("checking step \'return GetProvider/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2577 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetProvider, state S320" +
                        "1)", TestManagerHelpers.Describe(temp2577)));
            this.Manager.Comment("reaching state \'S5506\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3202
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3202() {
            this.Manager.BeginTest("BVTsS3202");
            this.Manager.Comment("reaching state \'S3202\'");
            string temp2578;
            this.Manager.Comment("executing step \'call GetProvider(New,WrongHeader)\'");
            temp2578 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3203\'");
            this.Manager.Comment("checking step \'return GetProvider/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2578 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetProvider, state S320" +
                        "3)", TestManagerHelpers.Describe(temp2578)));
            this.Manager.Comment("reaching state \'S5507\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3204
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3204() {
            this.Manager.BeginTest("BVTsS3204");
            this.Manager.Comment("reaching state \'S3204\'");
            string temp2579;
            this.Manager.Comment("executing step \'call GetProvider(New,CorrectHeader)\'");
            temp2579 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3205\'");
            this.Manager.Comment("checking step \'return GetProvider/\"NoError\"\'");
            this.Manager.Assert((temp2579 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProvider, state S3205)", TestManagerHelpers.Describe(temp2579)));
            this.Manager.Comment("reaching state \'S5508\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3206
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3206() {
            this.Manager.BeginTest("BVTsS3206");
            this.Manager.Comment("reaching state \'S3206\'");
            string temp2580;
            this.Manager.Comment("executing step \'call GetProviderArray(NoHeader)\'");
            temp2580 = this.ICatalogWebServiceAdapterInstance.GetProviderArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3207\'");
            this.Manager.Comment("checking step \'return GetProviderArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2580 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetProviderArray, state" +
                        " S3207)", TestManagerHelpers.Describe(temp2580)));
            this.Manager.Comment("reaching state \'S5509\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3208
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3208() {
            this.Manager.BeginTest("BVTsS3208");
            this.Manager.Comment("reaching state \'S3208\'");
            string temp2581;
            this.Manager.Comment("executing step \'call GetProviderArray(CorrectHeader)\'");
            temp2581 = this.ICatalogWebServiceAdapterInstance.GetProviderArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3209\'");
            this.Manager.Comment("checking step \'return GetProviderArray/\"NoError\"\'");
            this.Manager.Assert((temp2581 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProviderArray, state S3209)", TestManagerHelpers.Describe(temp2581)));
            this.Manager.Comment("reaching state \'S5510\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3210
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3210() {
            this.Manager.BeginTest("BVTsS3210");
            this.Manager.Comment("reaching state \'S3210\'");
            string temp2582;
            this.Manager.Comment("executing step \'call GetProviderArray(WrongHeader)\'");
            temp2582 = this.ICatalogWebServiceAdapterInstance.GetProviderArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3211\'");
            this.Manager.Comment("checking step \'return GetProviderArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2582 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetProviderArray, state" +
                        " S3211)", TestManagerHelpers.Describe(temp2582)));
            this.Manager.Comment("reaching state \'S5511\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3212
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3212() {
            this.Manager.BeginTest("BVTsS3212");
            this.Manager.Comment("reaching state \'S3212\'");
            string temp2583;
            this.Manager.Comment("executing step \'call GetRatingSystem(Existing,NoHeader)\'");
            temp2583 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3213\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2583 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetRatingSystem, state " +
                        "S3213)", TestManagerHelpers.Describe(temp2583)));
            this.Manager.Comment("reaching state \'S5512\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3214() {
            this.Manager.BeginTest("BVTsS3214");
            this.Manager.Comment("reaching state \'S3214\'");
            string temp2584;
            this.Manager.Comment("executing step \'call GetRatingSystem(Existing,CorrectHeader)\'");
            temp2584 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3215\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"NoError\"\'");
            this.Manager.Assert((temp2584 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystem, state S3215)", TestManagerHelpers.Describe(temp2584)));
            this.Manager.Comment("reaching state \'S5513\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3216
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3216() {
            this.Manager.BeginTest("BVTsS3216");
            this.Manager.Comment("reaching state \'S3216\'");
            string temp2585;
            this.Manager.Comment("executing step \'call GetRatingSystem(Existing,WrongHeader)\'");
            temp2585 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3217\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2585 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetRatingSystem, state " +
                        "S3217)", TestManagerHelpers.Describe(temp2585)));
            this.Manager.Comment("reaching state \'S5514\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3218() {
            this.Manager.BeginTest("BVTsS3218");
            this.Manager.Comment("reaching state \'S3218\'");
            string temp2586;
            this.Manager.Comment("executing step \'call GetRatingSystem(New,NoHeader)\'");
            temp2586 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3219\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2586 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetRatingSystem, state " +
                        "S3219)", TestManagerHelpers.Describe(temp2586)));
            this.Manager.Comment("reaching state \'S5515\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3220
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3220() {
            this.Manager.BeginTest("BVTsS3220");
            this.Manager.Comment("reaching state \'S3220\'");
            string temp2587;
            this.Manager.Comment("executing step \'call GetRatingSystem(New,WrongHeader)\'");
            temp2587 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3221\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2587 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetRatingSystem, state " +
                        "S3221)", TestManagerHelpers.Describe(temp2587)));
            this.Manager.Comment("reaching state \'S5516\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3222
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3222() {
            this.Manager.BeginTest("BVTsS3222");
            this.Manager.Comment("reaching state \'S3222\'");
            string temp2588;
            this.Manager.Comment("executing step \'call GetRatingSystem(New,CorrectHeader)\'");
            temp2588 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3223\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"NoError\"\'");
            this.Manager.Assert((temp2588 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystem, state S3223)", TestManagerHelpers.Describe(temp2588)));
            this.Manager.Comment("reaching state \'S5517\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3224
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3224() {
            this.Manager.BeginTest("BVTsS3224");
            this.Manager.Comment("reaching state \'S3224\'");
            string temp2589;
            this.Manager.Comment("executing step \'call GetRatingSystemArray(NoHeader)\'");
            temp2589 = this.ICatalogWebServiceAdapterInstance.GetRatingSystemArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3225\'");
            this.Manager.Comment("checking step \'return GetRatingSystemArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2589 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetRatingSystemArray, s" +
                        "tate S3225)", TestManagerHelpers.Describe(temp2589)));
            this.Manager.Comment("reaching state \'S5518\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3226
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3226() {
            this.Manager.BeginTest("BVTsS3226");
            this.Manager.Comment("reaching state \'S3226\'");
            string temp2590;
            this.Manager.Comment("executing step \'call GetRatingSystemArray(CorrectHeader)\'");
            temp2590 = this.ICatalogWebServiceAdapterInstance.GetRatingSystemArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3227\'");
            this.Manager.Comment("checking step \'return GetRatingSystemArray/\"NoError\"\'");
            this.Manager.Assert((temp2590 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystemArray, state S3227)", TestManagerHelpers.Describe(temp2590)));
            this.Manager.Comment("reaching state \'S5519\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3228
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3228() {
            this.Manager.BeginTest("BVTsS3228");
            this.Manager.Comment("reaching state \'S3228\'");
            string temp2591;
            this.Manager.Comment("executing step \'call GetRatingSystemArray(WrongHeader)\'");
            temp2591 = this.ICatalogWebServiceAdapterInstance.GetRatingSystemArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3229\'");
            this.Manager.Comment("checking step \'return GetRatingSystemArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2591 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetRatingSystemArray, s" +
                        "tate S3229)", TestManagerHelpers.Describe(temp2591)));
            this.Manager.Comment("reaching state \'S5520\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3230
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3230() {
            this.Manager.BeginTest("BVTsS3230");
            this.Manager.Comment("reaching state \'S3230\'");
            string temp2592;
            this.Manager.Comment("executing step \'call GetRoleArray(NoHeader)\'");
            temp2592 = this.ICatalogWebServiceAdapterInstance.GetRoleArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3231\'");
            this.Manager.Comment("checking step \'return GetRoleArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2592 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetRoleArray, state S32" +
                        "31)", TestManagerHelpers.Describe(temp2592)));
            this.Manager.Comment("reaching state \'S5521\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3232
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3232() {
            this.Manager.BeginTest("BVTsS3232");
            this.Manager.Comment("reaching state \'S3232\'");
            string temp2593;
            this.Manager.Comment("executing step \'call GetRoleArray(CorrectHeader)\'");
            temp2593 = this.ICatalogWebServiceAdapterInstance.GetRoleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3233\'");
            this.Manager.Comment("checking step \'return GetRoleArray/\"NoError\"\'");
            this.Manager.Assert((temp2593 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRoleArray, state S3233)", TestManagerHelpers.Describe(temp2593)));
            this.Manager.Comment("reaching state \'S5522\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3234
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3234() {
            this.Manager.BeginTest("BVTsS3234");
            this.Manager.Comment("reaching state \'S3234\'");
            string temp2594;
            this.Manager.Comment("executing step \'call GetRoleArray(WrongHeader)\'");
            temp2594 = this.ICatalogWebServiceAdapterInstance.GetRoleArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3235\'");
            this.Manager.Comment("checking step \'return GetRoleArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2594 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetRoleArray, state S32" +
                        "35)", TestManagerHelpers.Describe(temp2594)));
            this.Manager.Comment("reaching state \'S5523\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3236
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3236() {
            this.Manager.BeginTest("BVTsS3236");
            this.Manager.Comment("reaching state \'S3236\'");
            string temp2595;
            this.Manager.Comment("executing step \'call GetStoreArray(NoHeader)\'");
            temp2595 = this.ICatalogWebServiceAdapterInstance.GetStoreArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3237\'");
            this.Manager.Comment("checking step \'return GetStoreArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2595 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetStoreArray, state S3" +
                        "237)", TestManagerHelpers.Describe(temp2595)));
            this.Manager.Comment("reaching state \'S5524\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3238
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3238() {
            this.Manager.BeginTest("BVTsS3238");
            this.Manager.Comment("reaching state \'S3238\'");
            string temp2596;
            this.Manager.Comment("executing step \'call GetStoreArray(CorrectHeader)\'");
            temp2596 = this.ICatalogWebServiceAdapterInstance.GetStoreArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3239\'");
            this.Manager.Comment("checking step \'return GetStoreArray/\"NoError\"\'");
            this.Manager.Assert((temp2596 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetStoreArray, state S3239)", TestManagerHelpers.Describe(temp2596)));
            this.Manager.Comment("reaching state \'S5525\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3240
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3240() {
            this.Manager.BeginTest("BVTsS3240");
            this.Manager.Comment("reaching state \'S3240\'");
            string temp2597;
            this.Manager.Comment("executing step \'call GetStoreArray(WrongHeader)\'");
            temp2597 = this.ICatalogWebServiceAdapterInstance.GetStoreArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3241\'");
            this.Manager.Comment("checking step \'return GetStoreArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2597 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetStoreArray, state S3" +
                        "241)", TestManagerHelpers.Describe(temp2597)));
            this.Manager.Comment("reaching state \'S5526\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3242() {
            this.Manager.BeginTest("BVTsS3242");
            this.Manager.Comment("reaching state \'S3242\'");
            string temp2598;
            this.Manager.Comment("executing step \'call GetTasks(NoHeader)\'");
            temp2598 = this.ICatalogWebServiceAdapterInstance.GetTasks(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3243\'");
            this.Manager.Comment("checking step \'return GetTasks/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2598 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetTasks, state S3243)", TestManagerHelpers.Describe(temp2598)));
            this.Manager.Comment("reaching state \'S5527\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3244
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3244() {
            this.Manager.BeginTest("BVTsS3244");
            this.Manager.Comment("reaching state \'S3244\'");
            string temp2599;
            this.Manager.Comment("executing step \'call GetTasks(CorrectHeader)\'");
            temp2599 = this.ICatalogWebServiceAdapterInstance.GetTasks(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3245\'");
            this.Manager.Comment("checking step \'return GetTasks/\"NoError\"\'");
            this.Manager.Assert((temp2599 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTasks, state S3245)", TestManagerHelpers.Describe(temp2599)));
            this.Manager.Comment("reaching state \'S5528\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3246
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3246() {
            this.Manager.BeginTest("BVTsS3246");
            this.Manager.Comment("reaching state \'S3246\'");
            string temp2600;
            this.Manager.Comment("executing step \'call GetTasks(WrongHeader)\'");
            temp2600 = this.ICatalogWebServiceAdapterInstance.GetTasks(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3247\'");
            this.Manager.Comment("checking step \'return GetTasks/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2600 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetTasks, state S3247)", TestManagerHelpers.Describe(temp2600)));
            this.Manager.Comment("reaching state \'S5529\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3248() {
            this.Manager.BeginTest("BVTsS3248");
            this.Manager.Comment("reaching state \'S3248\'");
            string temp2601;
            this.Manager.Comment("executing step \'call GetAvailableTaskAsXML(NoHeader)\'");
            temp2601 = this.ICatalogWebServiceAdapterInstance.GetAvailableTaskAsXML(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3249\'");
            this.Manager.Comment("checking step \'return GetAvailableTaskAsXML/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2601 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableTaskAsXML, " +
                        "state S3249)", TestManagerHelpers.Describe(temp2601)));
            this.Manager.Comment("reaching state \'S5530\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3250
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3250() {
            this.Manager.BeginTest("BVTsS3250");
            this.Manager.Comment("reaching state \'S3250\'");
            string temp2602;
            this.Manager.Comment("executing step \'call GetAvailableTaskAsXML(CorrectHeader)\'");
            temp2602 = this.ICatalogWebServiceAdapterInstance.GetAvailableTaskAsXML(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3251\'");
            this.Manager.Comment("checking step \'return GetAvailableTaskAsXML/\"NoError\"\'");
            this.Manager.Assert((temp2602 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableTaskAsXML, state S3251)" +
                        "", TestManagerHelpers.Describe(temp2602)));
            this.Manager.Comment("reaching state \'S5531\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3252
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3252() {
            this.Manager.BeginTest("BVTsS3252");
            this.Manager.Comment("reaching state \'S3252\'");
            string temp2603;
            this.Manager.Comment("executing step \'call GetAvailableTaskAsXML(WrongHeader)\'");
            temp2603 = this.ICatalogWebServiceAdapterInstance.GetAvailableTaskAsXML(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3253\'");
            this.Manager.Comment("checking step \'return GetAvailableTaskAsXML/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2603 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableTaskAsXML, " +
                        "state S3253)", TestManagerHelpers.Describe(temp2603)));
            this.Manager.Comment("reaching state \'S5532\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3254
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3254() {
            this.Manager.BeginTest("BVTsS3254");
            this.Manager.Comment("reaching state \'S3254\'");
            string temp2604;
            this.Manager.Comment("executing step \'call GetTaskStatusArray(NoHeader)\'");
            temp2604 = this.ICatalogWebServiceAdapterInstance.GetTaskStatusArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3255\'");
            this.Manager.Comment("checking step \'return GetTaskStatusArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2604 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetTaskStatusArray, sta" +
                        "te S3255)", TestManagerHelpers.Describe(temp2604)));
            this.Manager.Comment("reaching state \'S5533\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3256
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3256() {
            this.Manager.BeginTest("BVTsS3256");
            this.Manager.Comment("reaching state \'S3256\'");
            string temp2605;
            this.Manager.Comment("executing step \'call GetTaskStatusArray(CorrectHeader)\'");
            temp2605 = this.ICatalogWebServiceAdapterInstance.GetTaskStatusArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3257\'");
            this.Manager.Comment("checking step \'return GetTaskStatusArray/\"NoError\"\'");
            this.Manager.Assert((temp2605 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskStatusArray, state S3257)", TestManagerHelpers.Describe(temp2605)));
            this.Manager.Comment("reaching state \'S5534\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3258
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3258() {
            this.Manager.BeginTest("BVTsS3258");
            this.Manager.Comment("reaching state \'S3258\'");
            string temp2606;
            this.Manager.Comment("executing step \'call GetTaskStatusArray(WrongHeader)\'");
            temp2606 = this.ICatalogWebServiceAdapterInstance.GetTaskStatusArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3259\'");
            this.Manager.Comment("checking step \'return GetTaskStatusArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2606 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetTaskStatusArray, sta" +
                        "te S3259)", TestManagerHelpers.Describe(temp2606)));
            this.Manager.Comment("reaching state \'S5535\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3260
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3260() {
            this.Manager.BeginTest("BVTsS3260");
            this.Manager.Comment("reaching state \'S3260\'");
            string temp2607;
            this.Manager.Comment("executing step \'call GetTaskByStatus(Existing,NoHeader)\'");
            temp2607 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3261\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2607 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetTaskByStatus, state " +
                        "S3261)", TestManagerHelpers.Describe(temp2607)));
            this.Manager.Comment("reaching state \'S5536\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3262
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3262() {
            this.Manager.BeginTest("BVTsS3262");
            this.Manager.Comment("reaching state \'S3262\'");
            string temp2608;
            this.Manager.Comment("executing step \'call GetTaskByStatus(Existing,CorrectHeader)\'");
            temp2608 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3263\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"NoError\"\'");
            this.Manager.Assert((temp2608 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskByStatus, state S3263)", TestManagerHelpers.Describe(temp2608)));
            this.Manager.Comment("reaching state \'S5537\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3264
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3264() {
            this.Manager.BeginTest("BVTsS3264");
            this.Manager.Comment("reaching state \'S3264\'");
            string temp2609;
            this.Manager.Comment("executing step \'call GetTaskByStatus(Existing,WrongHeader)\'");
            temp2609 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3265\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2609 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetTaskByStatus, state " +
                        "S3265)", TestManagerHelpers.Describe(temp2609)));
            this.Manager.Comment("reaching state \'S5538\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3266
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3266() {
            this.Manager.BeginTest("BVTsS3266");
            this.Manager.Comment("reaching state \'S3266\'");
            string temp2610;
            this.Manager.Comment("executing step \'call GetTaskByStatus(New,NoHeader)\'");
            temp2610 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3267\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2610 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetTaskByStatus, state " +
                        "S3267)", TestManagerHelpers.Describe(temp2610)));
            this.Manager.Comment("reaching state \'S5539\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3268() {
            this.Manager.BeginTest("BVTsS3268");
            this.Manager.Comment("reaching state \'S3268\'");
            string temp2611;
            this.Manager.Comment("executing step \'call GetTaskByStatus(New,WrongHeader)\'");
            temp2611 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3269\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2611 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetTaskByStatus, state " +
                        "S3269)", TestManagerHelpers.Describe(temp2611)));
            this.Manager.Comment("reaching state \'S5540\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3270() {
            this.Manager.BeginTest("BVTsS3270");
            this.Manager.Comment("reaching state \'S3270\'");
            string temp2612;
            this.Manager.Comment("executing step \'call GetTaskByStatus(New,CorrectHeader)\'");
            temp2612 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3271\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"NoError\"\'");
            this.Manager.Assert((temp2612 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskByStatus, state S3271)", TestManagerHelpers.Describe(temp2612)));
            this.Manager.Comment("reaching state \'S5541\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3272
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3272() {
            this.Manager.BeginTest("BVTsS3272");
            this.Manager.Comment("reaching state \'S3272\'");
            string temp2613;
            this.Manager.Comment("executing step \'call GetUserTypeArray(NoHeader)\'");
            temp2613 = this.ICatalogWebServiceAdapterInstance.GetUserTypeArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3273\'");
            this.Manager.Comment("checking step \'return GetUserTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2613 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetUserTypeArray, state" +
                        " S3273)", TestManagerHelpers.Describe(temp2613)));
            this.Manager.Comment("reaching state \'S5542\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3274
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3274() {
            this.Manager.BeginTest("BVTsS3274");
            this.Manager.Comment("reaching state \'S3274\'");
            string temp2614;
            this.Manager.Comment("executing step \'call GetUserTypeArray(CorrectHeader)\'");
            temp2614 = this.ICatalogWebServiceAdapterInstance.GetUserTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3275\'");
            this.Manager.Comment("checking step \'return GetUserTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp2614 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetUserTypeArray, state S3275)", TestManagerHelpers.Describe(temp2614)));
            this.Manager.Comment("reaching state \'S5543\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3276() {
            this.Manager.BeginTest("BVTsS3276");
            this.Manager.Comment("reaching state \'S3276\'");
            string temp2615;
            this.Manager.Comment("executing step \'call GetUserTypeArray(WrongHeader)\'");
            temp2615 = this.ICatalogWebServiceAdapterInstance.GetUserTypeArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3277\'");
            this.Manager.Comment("checking step \'return GetUserTypeArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2615 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetUserTypeArray, state" +
                        " S3277)", TestManagerHelpers.Describe(temp2615)));
            this.Manager.Comment("reaching state \'S5544\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3278
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3278() {
            this.Manager.BeginTest("BVTsS3278");
            this.Manager.Comment("reaching state \'S3278\'");
            string temp2616;
            this.Manager.Comment("executing step \'call GetVideo(Existing,NoHeader)\'");
            temp2616 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3279\'");
            this.Manager.Comment("checking step \'return GetVideo/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2616 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideo, state S3279)", TestManagerHelpers.Describe(temp2616)));
            this.Manager.Comment("reaching state \'S5545\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3280
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3280() {
            this.Manager.BeginTest("BVTsS3280");
            this.Manager.Comment("reaching state \'S3280\'");
            string temp2617;
            this.Manager.Comment("executing step \'call GetVideo(Existing,CorrectHeader)\'");
            temp2617 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3281\'");
            this.Manager.Comment("checking step \'return GetVideo/\"NoError\"\'");
            this.Manager.Assert((temp2617 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideo, state S3281)", TestManagerHelpers.Describe(temp2617)));
            this.Manager.Comment("reaching state \'S5546\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3282
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3282() {
            this.Manager.BeginTest("BVTsS3282");
            this.Manager.Comment("reaching state \'S3282\'");
            string temp2618;
            this.Manager.Comment("executing step \'call GetVideo(Existing,WrongHeader)\'");
            temp2618 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3283\'");
            this.Manager.Comment("checking step \'return GetVideo/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2618 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideo, state S3283)", TestManagerHelpers.Describe(temp2618)));
            this.Manager.Comment("reaching state \'S5547\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3284
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3284() {
            this.Manager.BeginTest("BVTsS3284");
            this.Manager.Comment("reaching state \'S3284\'");
            string temp2619;
            this.Manager.Comment("executing step \'call GetVideo(New,NoHeader)\'");
            temp2619 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3285\'");
            this.Manager.Comment("checking step \'return GetVideo/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2619 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideo, state S3285)", TestManagerHelpers.Describe(temp2619)));
            this.Manager.Comment("reaching state \'S5548\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3286
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3286() {
            this.Manager.BeginTest("BVTsS3286");
            this.Manager.Comment("reaching state \'S3286\'");
            string temp2620;
            this.Manager.Comment("executing step \'call GetVideo(New,WrongHeader)\'");
            temp2620 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3287\'");
            this.Manager.Comment("checking step \'return GetVideo/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2620 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideo, state S3287)", TestManagerHelpers.Describe(temp2620)));
            this.Manager.Comment("reaching state \'S5549\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3288() {
            this.Manager.BeginTest("BVTsS3288");
            this.Manager.Comment("reaching state \'S3288\'");
            string temp2621;
            this.Manager.Comment("executing step \'call GetVideo(New,CorrectHeader)\'");
            temp2621 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3289\'");
            this.Manager.Comment("checking step \'return GetVideo/\"NoError\"\'");
            this.Manager.Assert((temp2621 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideo, state S3289)", TestManagerHelpers.Describe(temp2621)));
            this.Manager.Comment("reaching state \'S5550\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3290
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3290() {
            this.Manager.BeginTest("BVTsS3290");
            this.Manager.Comment("reaching state \'S3290\'");
            string temp2622;
            this.Manager.Comment("executing step \'call GetVideoDefinitionArray(NoHeader)\'");
            temp2622 = this.ICatalogWebServiceAdapterInstance.GetVideoDefinitionArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3291\'");
            this.Manager.Comment("checking step \'return GetVideoDefinitionArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2622 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoDefinitionArray" +
                        ", state S3291)", TestManagerHelpers.Describe(temp2622)));
            this.Manager.Comment("reaching state \'S5551\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3292() {
            this.Manager.BeginTest("BVTsS3292");
            this.Manager.Comment("reaching state \'S3292\'");
            string temp2623;
            this.Manager.Comment("executing step \'call GetVideoDefinitionArray(CorrectHeader)\'");
            temp2623 = this.ICatalogWebServiceAdapterInstance.GetVideoDefinitionArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3293\'");
            this.Manager.Comment("checking step \'return GetVideoDefinitionArray/\"NoError\"\'");
            this.Manager.Assert((temp2623 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoDefinitionArray, state S329" +
                        "3)", TestManagerHelpers.Describe(temp2623)));
            this.Manager.Comment("reaching state \'S5552\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3294
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3294() {
            this.Manager.BeginTest("BVTsS3294");
            this.Manager.Comment("reaching state \'S3294\'");
            string temp2624;
            this.Manager.Comment("executing step \'call GetVideoDefinitionArray(WrongHeader)\'");
            temp2624 = this.ICatalogWebServiceAdapterInstance.GetVideoDefinitionArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3295\'");
            this.Manager.Comment("checking step \'return GetVideoDefinitionArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2624 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoDefinitionArray" +
                        ", state S3295)", TestManagerHelpers.Describe(temp2624)));
            this.Manager.Comment("reaching state \'S5553\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3296
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3296() {
            this.Manager.BeginTest("BVTsS3296");
            this.Manager.Comment("reaching state \'S3296\'");
            string temp2625;
            this.Manager.Comment("executing step \'call GetVideoEncodingArray(NoHeader)\'");
            temp2625 = this.ICatalogWebServiceAdapterInstance.GetVideoEncodingArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3297\'");
            this.Manager.Comment("checking step \'return GetVideoEncodingArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2625 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoEncodingArray, " +
                        "state S3297)", TestManagerHelpers.Describe(temp2625)));
            this.Manager.Comment("reaching state \'S5554\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3298
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3298() {
            this.Manager.BeginTest("BVTsS3298");
            this.Manager.Comment("reaching state \'S3298\'");
            string temp2626;
            this.Manager.Comment("executing step \'call GetVideoEncodingArray(CorrectHeader)\'");
            temp2626 = this.ICatalogWebServiceAdapterInstance.GetVideoEncodingArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3299\'");
            this.Manager.Comment("checking step \'return GetVideoEncodingArray/\"NoError\"\'");
            this.Manager.Assert((temp2626 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoEncodingArray, state S3299)" +
                        "", TestManagerHelpers.Describe(temp2626)));
            this.Manager.Comment("reaching state \'S5555\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3300() {
            this.Manager.BeginTest("BVTsS3300");
            this.Manager.Comment("reaching state \'S3300\'");
            string temp2627;
            this.Manager.Comment("executing step \'call GetVideoEncodingArray(WrongHeader)\'");
            temp2627 = this.ICatalogWebServiceAdapterInstance.GetVideoEncodingArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3301\'");
            this.Manager.Comment("checking step \'return GetVideoEncodingArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2627 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoEncodingArray, " +
                        "state S3301)", TestManagerHelpers.Describe(temp2627)));
            this.Manager.Comment("reaching state \'S5556\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3302
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3302() {
            this.Manager.BeginTest("BVTsS3302");
            this.Manager.Comment("reaching state \'S3302\'");
            string temp2628;
            this.Manager.Comment("executing step \'call GetVideoSeason(Existing,NoHeader)\'");
            temp2628 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3303\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2628 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoSeason, state S" +
                        "3303)", TestManagerHelpers.Describe(temp2628)));
            this.Manager.Comment("reaching state \'S5557\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3304
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3304() {
            this.Manager.BeginTest("BVTsS3304");
            this.Manager.Comment("reaching state \'S3304\'");
            string temp2629;
            this.Manager.Comment("executing step \'call GetVideoSeason(Existing,CorrectHeader)\'");
            temp2629 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3305\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"NoError\"\'");
            this.Manager.Assert((temp2629 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeason, state S3305)", TestManagerHelpers.Describe(temp2629)));
            this.Manager.Comment("reaching state \'S5558\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3306
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3306() {
            this.Manager.BeginTest("BVTsS3306");
            this.Manager.Comment("reaching state \'S3306\'");
            string temp2630;
            this.Manager.Comment("executing step \'call GetVideoSeason(Existing,WrongHeader)\'");
            temp2630 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3307\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2630 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoSeason, state S" +
                        "3307)", TestManagerHelpers.Describe(temp2630)));
            this.Manager.Comment("reaching state \'S5559\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3308
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3308() {
            this.Manager.BeginTest("BVTsS3308");
            this.Manager.Comment("reaching state \'S3308\'");
            string temp2631;
            this.Manager.Comment("executing step \'call GetVideoSeason(New,NoHeader)\'");
            temp2631 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3309\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2631 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoSeason, state S" +
                        "3309)", TestManagerHelpers.Describe(temp2631)));
            this.Manager.Comment("reaching state \'S5560\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3310
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3310() {
            this.Manager.BeginTest("BVTsS3310");
            this.Manager.Comment("reaching state \'S3310\'");
            string temp2632;
            this.Manager.Comment("executing step \'call GetVideoSeason(New,WrongHeader)\'");
            temp2632 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3311\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2632 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoSeason, state S" +
                        "3311)", TestManagerHelpers.Describe(temp2632)));
            this.Manager.Comment("reaching state \'S5561\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3312
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3312() {
            this.Manager.BeginTest("BVTsS3312");
            this.Manager.Comment("reaching state \'S3312\'");
            string temp2633;
            this.Manager.Comment("executing step \'call GetVideoSeason(New,CorrectHeader)\'");
            temp2633 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3313\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"NoError\"\'");
            this.Manager.Assert((temp2633 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeason, state S3313)", TestManagerHelpers.Describe(temp2633)));
            this.Manager.Comment("reaching state \'S5562\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3314() {
            this.Manager.BeginTest("BVTsS3314");
            this.Manager.Comment("reaching state \'S3314\'");
            string temp2634;
            this.Manager.Comment("executing step \'call GetVideoSeries(Existing,NoHeader)\'");
            temp2634 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3315\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2634 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoSeries, state S" +
                        "3315)", TestManagerHelpers.Describe(temp2634)));
            this.Manager.Comment("reaching state \'S5563\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3316
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3316() {
            this.Manager.BeginTest("BVTsS3316");
            this.Manager.Comment("reaching state \'S3316\'");
            string temp2635;
            this.Manager.Comment("executing step \'call GetVideoSeries(Existing,CorrectHeader)\'");
            temp2635 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3317\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"NoError\"\'");
            this.Manager.Assert((temp2635 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeries, state S3317)", TestManagerHelpers.Describe(temp2635)));
            this.Manager.Comment("reaching state \'S5564\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3318() {
            this.Manager.BeginTest("BVTsS3318");
            this.Manager.Comment("reaching state \'S3318\'");
            string temp2636;
            this.Manager.Comment("executing step \'call GetVideoSeries(Existing,WrongHeader)\'");
            temp2636 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3319\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2636 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoSeries, state S" +
                        "3319)", TestManagerHelpers.Describe(temp2636)));
            this.Manager.Comment("reaching state \'S5565\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3320
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3320() {
            this.Manager.BeginTest("BVTsS3320");
            this.Manager.Comment("reaching state \'S3320\'");
            string temp2637;
            this.Manager.Comment("executing step \'call GetVideoSeries(New,NoHeader)\'");
            temp2637 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3321\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2637 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoSeries, state S" +
                        "3321)", TestManagerHelpers.Describe(temp2637)));
            this.Manager.Comment("reaching state \'S5566\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3322
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3322() {
            this.Manager.BeginTest("BVTsS3322");
            this.Manager.Comment("reaching state \'S3322\'");
            string temp2638;
            this.Manager.Comment("executing step \'call GetVideoSeries(New,WrongHeader)\'");
            temp2638 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3323\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2638 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVideoSeries, state S" +
                        "3323)", TestManagerHelpers.Describe(temp2638)));
            this.Manager.Comment("reaching state \'S5567\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3324() {
            this.Manager.BeginTest("BVTsS3324");
            this.Manager.Comment("reaching state \'S3324\'");
            string temp2639;
            this.Manager.Comment("executing step \'call GetVideoSeries(New,CorrectHeader)\'");
            temp2639 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3325\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"NoError\"\'");
            this.Manager.Assert((temp2639 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeries, state S3325)", TestManagerHelpers.Describe(temp2639)));
            this.Manager.Comment("reaching state \'S5568\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3326
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3326() {
            this.Manager.BeginTest("BVTsS3326");
            this.Manager.Comment("reaching state \'S3326\'");
            string temp2640;
            this.Manager.Comment("executing step \'call GetVisibilityLevelArray(NoHeader)\'");
            temp2640 = this.ICatalogWebServiceAdapterInstance.GetVisibilityLevelArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3327\'");
            this.Manager.Comment("checking step \'return GetVisibilityLevelArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2640 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVisibilityLevelArray" +
                        ", state S3327)", TestManagerHelpers.Describe(temp2640)));
            this.Manager.Comment("reaching state \'S5569\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3328
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3328() {
            this.Manager.BeginTest("BVTsS3328");
            this.Manager.Comment("reaching state \'S3328\'");
            string temp2641;
            this.Manager.Comment("executing step \'call GetVisibilityLevelArray(CorrectHeader)\'");
            temp2641 = this.ICatalogWebServiceAdapterInstance.GetVisibilityLevelArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3329\'");
            this.Manager.Comment("checking step \'return GetVisibilityLevelArray/\"NoError\"\'");
            this.Manager.Assert((temp2641 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVisibilityLevelArray, state S332" +
                        "9)", TestManagerHelpers.Describe(temp2641)));
            this.Manager.Comment("reaching state \'S5570\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3330
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3330() {
            this.Manager.BeginTest("BVTsS3330");
            this.Manager.Comment("reaching state \'S3330\'");
            string temp2642;
            this.Manager.Comment("executing step \'call GetVisibilityLevelArray(WrongHeader)\'");
            temp2642 = this.ICatalogWebServiceAdapterInstance.GetVisibilityLevelArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3331\'");
            this.Manager.Comment("checking step \'return GetVisibilityLevelArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2642 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVisibilityLevelArray" +
                        ", state S3331)", TestManagerHelpers.Describe(temp2642)));
            this.Manager.Comment("reaching state \'S5571\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3332
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3332() {
            this.Manager.BeginTest("BVTsS3332");
            this.Manager.Comment("reaching state \'S3332\'");
            string temp2643;
            this.Manager.Comment("executing step \'call GetVisibilityStatusArray(NoHeader)\'");
            temp2643 = this.ICatalogWebServiceAdapterInstance.GetVisibilityStatusArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3333\'");
            this.Manager.Comment("checking step \'return GetVisibilityStatusArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2643 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVisibilityStatusArra" +
                        "y, state S3333)", TestManagerHelpers.Describe(temp2643)));
            this.Manager.Comment("reaching state \'S5572\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3334
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3334() {
            this.Manager.BeginTest("BVTsS3334");
            this.Manager.Comment("reaching state \'S3334\'");
            string temp2644;
            this.Manager.Comment("executing step \'call GetVisibilityStatusArray(CorrectHeader)\'");
            temp2644 = this.ICatalogWebServiceAdapterInstance.GetVisibilityStatusArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3335\'");
            this.Manager.Comment("checking step \'return GetVisibilityStatusArray/\"NoError\"\'");
            this.Manager.Assert((temp2644 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVisibilityStatusArray, state S33" +
                        "35)", TestManagerHelpers.Describe(temp2644)));
            this.Manager.Comment("reaching state \'S5573\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3336
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3336() {
            this.Manager.BeginTest("BVTsS3336");
            this.Manager.Comment("reaching state \'S3336\'");
            string temp2645;
            this.Manager.Comment("executing step \'call GetVisibilityStatusArray(WrongHeader)\'");
            temp2645 = this.ICatalogWebServiceAdapterInstance.GetVisibilityStatusArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3337\'");
            this.Manager.Comment("checking step \'return GetVisibilityStatusArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2645 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetVisibilityStatusArra" +
                        "y, state S3337)", TestManagerHelpers.Describe(temp2645)));
            this.Manager.Comment("reaching state \'S5574\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3338
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3338() {
            this.Manager.BeginTest("BVTsS3338");
            this.Manager.Comment("reaching state \'S3338\'");
            string temp2646;
            this.Manager.Comment("executing step \'call GetAvailableEntityId(NoHeader)\'");
            temp2646 = this.ICatalogWebServiceAdapterInstance.GetAvailableEntityId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3339\'");
            this.Manager.Comment("checking step \'return GetAvailableEntityId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2646 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableEntityId, s" +
                        "tate S3339)", TestManagerHelpers.Describe(temp2646)));
            this.Manager.Comment("reaching state \'S5575\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3340
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3340() {
            this.Manager.BeginTest("BVTsS3340");
            this.Manager.Comment("reaching state \'S3340\'");
            string temp2647;
            this.Manager.Comment("executing step \'call GetAvailableEntityId(CorrectHeader)\'");
            temp2647 = this.ICatalogWebServiceAdapterInstance.GetAvailableEntityId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3341\'");
            this.Manager.Comment("checking step \'return GetAvailableEntityId/\"NoError\"\'");
            this.Manager.Assert((temp2647 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableEntityId, state S3341)", TestManagerHelpers.Describe(temp2647)));
            this.Manager.Comment("reaching state \'S5576\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3342
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3342() {
            this.Manager.BeginTest("BVTsS3342");
            this.Manager.Comment("reaching state \'S3342\'");
            string temp2648;
            this.Manager.Comment("executing step \'call GetAvailableEntityId(WrongHeader)\'");
            temp2648 = this.ICatalogWebServiceAdapterInstance.GetAvailableEntityId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3343\'");
            this.Manager.Comment("checking step \'return GetAvailableEntityId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2648 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableEntityId, s" +
                        "tate S3343)", TestManagerHelpers.Describe(temp2648)));
            this.Manager.Comment("reaching state \'S5577\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3344
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3344() {
            this.Manager.BeginTest("BVTsS3344");
            this.Manager.Comment("reaching state \'S3344\'");
            string temp2649;
            this.Manager.Comment("executing step \'call GetAvailableCategoryId(NoHeader)\'");
            temp2649 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategoryId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3345\'");
            this.Manager.Comment("checking step \'return GetAvailableCategoryId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2649 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableCategoryId," +
                        " state S3345)", TestManagerHelpers.Describe(temp2649)));
            this.Manager.Comment("reaching state \'S5578\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3346
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3346() {
            this.Manager.BeginTest("BVTsS3346");
            this.Manager.Comment("reaching state \'S3346\'");
            string temp2650;
            this.Manager.Comment("executing step \'call GetAvailableCategoryId(CorrectHeader)\'");
            temp2650 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategoryId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3347\'");
            this.Manager.Comment("checking step \'return GetAvailableCategoryId/\"NoError\"\'");
            this.Manager.Assert((temp2650 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableCategoryId, state S3347" +
                        ")", TestManagerHelpers.Describe(temp2650)));
            this.Manager.Comment("reaching state \'S5579\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3348
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3348() {
            this.Manager.BeginTest("BVTsS3348");
            this.Manager.Comment("reaching state \'S3348\'");
            string temp2651;
            this.Manager.Comment("executing step \'call GetAvailableCategoryId(WrongHeader)\'");
            temp2651 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategoryId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3349\'");
            this.Manager.Comment("checking step \'return GetAvailableCategoryId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2651 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableCategoryId," +
                        " state S3349)", TestManagerHelpers.Describe(temp2651)));
            this.Manager.Comment("reaching state \'S5580\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3350
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3350() {
            this.Manager.BeginTest("BVTsS3350");
            this.Manager.Comment("reaching state \'S3350\'");
            string temp2652;
            this.Manager.Comment("executing step \'call GetAvailableCategorySystemId(NoHeader)\'");
            temp2652 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategorySystemId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3351\'");
            this.Manager.Comment("checking step \'return GetAvailableCategorySystemId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2652 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableCategorySys" +
                        "temId, state S3351)", TestManagerHelpers.Describe(temp2652)));
            this.Manager.Comment("reaching state \'S5581\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3352
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3352() {
            this.Manager.BeginTest("BVTsS3352");
            this.Manager.Comment("reaching state \'S3352\'");
            string temp2653;
            this.Manager.Comment("executing step \'call GetAvailableCategorySystemId(CorrectHeader)\'");
            temp2653 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategorySystemId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3353\'");
            this.Manager.Comment("checking step \'return GetAvailableCategorySystemId/\"NoError\"\'");
            this.Manager.Assert((temp2653 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableCategorySystemId, state" +
                        " S3353)", TestManagerHelpers.Describe(temp2653)));
            this.Manager.Comment("reaching state \'S5582\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3354
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3354() {
            this.Manager.BeginTest("BVTsS3354");
            this.Manager.Comment("reaching state \'S3354\'");
            string temp2654;
            this.Manager.Comment("executing step \'call GetAvailableCategorySystemId(WrongHeader)\'");
            temp2654 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategorySystemId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3355\'");
            this.Manager.Comment("checking step \'return GetAvailableCategorySystemId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2654 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableCategorySys" +
                        "temId, state S3355)", TestManagerHelpers.Describe(temp2654)));
            this.Manager.Comment("reaching state \'S5583\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3356
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3356() {
            this.Manager.BeginTest("BVTsS3356");
            this.Manager.Comment("reaching state \'S3356\'");
            string temp2655;
            this.Manager.Comment("executing step \'call GetAvailableRatingSystemId(NoHeader)\'");
            temp2655 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingSystemId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3357\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingSystemId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2655 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableRatingSyste" +
                        "mId, state S3357)", TestManagerHelpers.Describe(temp2655)));
            this.Manager.Comment("reaching state \'S5584\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3358
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3358() {
            this.Manager.BeginTest("BVTsS3358");
            this.Manager.Comment("reaching state \'S3358\'");
            string temp2656;
            this.Manager.Comment("executing step \'call GetAvailableRatingSystemId(CorrectHeader)\'");
            temp2656 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingSystemId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3359\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingSystemId/\"NoError\"\'");
            this.Manager.Assert((temp2656 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingSystemId, state S" +
                        "3359)", TestManagerHelpers.Describe(temp2656)));
            this.Manager.Comment("reaching state \'S5585\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3360
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3360() {
            this.Manager.BeginTest("BVTsS3360");
            this.Manager.Comment("reaching state \'S3360\'");
            string temp2657;
            this.Manager.Comment("executing step \'call GetAvailableRatingSystemId(WrongHeader)\'");
            temp2657 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingSystemId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3361\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingSystemId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2657 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableRatingSyste" +
                        "mId, state S3361)", TestManagerHelpers.Describe(temp2657)));
            this.Manager.Comment("reaching state \'S5586\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3362
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3362() {
            this.Manager.BeginTest("BVTsS3362");
            this.Manager.Comment("reaching state \'S3362\'");
            string temp2658;
            this.Manager.Comment("executing step \'call GetAvailableRatingValueId(NoHeader)\'");
            temp2658 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingValueId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3363\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingValueId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2658 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableRatingValue" +
                        "Id, state S3363)", TestManagerHelpers.Describe(temp2658)));
            this.Manager.Comment("reaching state \'S5587\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3364
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3364() {
            this.Manager.BeginTest("BVTsS3364");
            this.Manager.Comment("reaching state \'S3364\'");
            string temp2659;
            this.Manager.Comment("executing step \'call GetAvailableRatingValueId(CorrectHeader)\'");
            temp2659 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingValueId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3365\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingValueId/\"NoError\"\'");
            this.Manager.Assert((temp2659 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingValueId, state S3" +
                        "365)", TestManagerHelpers.Describe(temp2659)));
            this.Manager.Comment("reaching state \'S5588\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3366
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3366() {
            this.Manager.BeginTest("BVTsS3366");
            this.Manager.Comment("reaching state \'S3366\'");
            string temp2660;
            this.Manager.Comment("executing step \'call GetAvailableRatingValueId(WrongHeader)\'");
            temp2660 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingValueId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3367\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingValueId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2660 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableRatingValue" +
                        "Id, state S3367)", TestManagerHelpers.Describe(temp2660)));
            this.Manager.Comment("reaching state \'S5589\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3368
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3368() {
            this.Manager.BeginTest("BVTsS3368");
            this.Manager.Comment("reaching state \'S3368\'");
            string temp2661;
            this.Manager.Comment("executing step \'call GetAvailableRatingDescriptorId(NoHeader)\'");
            temp2661 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingDescriptorId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3369\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingDescriptorId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2661 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableRatingDescr" +
                        "iptorId, state S3369)", TestManagerHelpers.Describe(temp2661)));
            this.Manager.Comment("reaching state \'S5590\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3370
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3370() {
            this.Manager.BeginTest("BVTsS3370");
            this.Manager.Comment("reaching state \'S3370\'");
            string temp2662;
            this.Manager.Comment("executing step \'call GetAvailableRatingDescriptorId(CorrectHeader)\'");
            temp2662 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingDescriptorId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3371\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingDescriptorId/\"NoError\"\'");
            this.Manager.Assert((temp2662 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingDescriptorId, sta" +
                        "te S3371)", TestManagerHelpers.Describe(temp2662)));
            this.Manager.Comment("reaching state \'S5591\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3372() {
            this.Manager.BeginTest("BVTsS3372");
            this.Manager.Comment("reaching state \'S3372\'");
            string temp2663;
            this.Manager.Comment("executing step \'call GetAvailableRatingDescriptorId(WrongHeader)\'");
            temp2663 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingDescriptorId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3373\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingDescriptorId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2663 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableRatingDescr" +
                        "iptorId, state S3373)", TestManagerHelpers.Describe(temp2663)));
            this.Manager.Comment("reaching state \'S5592\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3374
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3374() {
            this.Manager.BeginTest("BVTsS3374");
            this.Manager.Comment("reaching state \'S3374\'");
            string temp2664;
            this.Manager.Comment("executing step \'call GetAvailableLicenseTypeId(NoHeader)\'");
            temp2664 = this.ICatalogWebServiceAdapterInstance.GetAvailableLicenseTypeId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3375\'");
            this.Manager.Comment("checking step \'return GetAvailableLicenseTypeId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2664 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableLicenseType" +
                        "Id, state S3375)", TestManagerHelpers.Describe(temp2664)));
            this.Manager.Comment("reaching state \'S5593\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3376
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3376() {
            this.Manager.BeginTest("BVTsS3376");
            this.Manager.Comment("reaching state \'S3376\'");
            string temp2665;
            this.Manager.Comment("executing step \'call GetAvailableLicenseTypeId(CorrectHeader)\'");
            temp2665 = this.ICatalogWebServiceAdapterInstance.GetAvailableLicenseTypeId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3377\'");
            this.Manager.Comment("checking step \'return GetAvailableLicenseTypeId/\"NoError\"\'");
            this.Manager.Assert((temp2665 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableLicenseTypeId, state S3" +
                        "377)", TestManagerHelpers.Describe(temp2665)));
            this.Manager.Comment("reaching state \'S5594\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3378
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3378() {
            this.Manager.BeginTest("BVTsS3378");
            this.Manager.Comment("reaching state \'S3378\'");
            string temp2666;
            this.Manager.Comment("executing step \'call GetAvailableLicenseTypeId(WrongHeader)\'");
            temp2666 = this.ICatalogWebServiceAdapterInstance.GetAvailableLicenseTypeId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3379\'");
            this.Manager.Comment("checking step \'return GetAvailableLicenseTypeId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2666 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetAvailableLicenseType" +
                        "Id, state S3379)", TestManagerHelpers.Describe(temp2666)));
            this.Manager.Comment("reaching state \'S5595\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3380() {
            this.Manager.BeginTest("BVTsS3380");
            this.Manager.Comment("reaching state \'S3380\'");
            string temp2667;
            this.Manager.Comment("executing step \'call GetCatalogId(NoHeader)\'");
            temp2667 = this.ICatalogWebServiceAdapterInstance.GetCatalogId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3381\'");
            this.Manager.Comment("checking step \'return GetCatalogId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2667 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCatalogId, state S33" +
                        "81)", TestManagerHelpers.Describe(temp2667)));
            this.Manager.Comment("reaching state \'S5596\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3382
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3382() {
            this.Manager.BeginTest("BVTsS3382");
            this.Manager.Comment("reaching state \'S3382\'");
            string temp2668;
            this.Manager.Comment("executing step \'call GetCatalogId(CorrectHeader)\'");
            temp2668 = this.ICatalogWebServiceAdapterInstance.GetCatalogId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3383\'");
            this.Manager.Comment("checking step \'return GetCatalogId/\"NoError\"\'");
            this.Manager.Assert((temp2668 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCatalogId, state S3383)", TestManagerHelpers.Describe(temp2668)));
            this.Manager.Comment("reaching state \'S5597\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3384
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3384() {
            this.Manager.BeginTest("BVTsS3384");
            this.Manager.Comment("reaching state \'S3384\'");
            string temp2669;
            this.Manager.Comment("executing step \'call GetCatalogId(WrongHeader)\'");
            temp2669 = this.ICatalogWebServiceAdapterInstance.GetCatalogId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3385\'");
            this.Manager.Comment("checking step \'return GetCatalogId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2669 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetCatalogId, state S33" +
                        "85)", TestManagerHelpers.Describe(temp2669)));
            this.Manager.Comment("reaching state \'S5598\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3386
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3386() {
            this.Manager.BeginTest("BVTsS3386");
            this.Manager.Comment("reaching state \'S3386\'");
            string temp2670;
            this.Manager.Comment("executing step \'call GetExternalId(NoHeader)\'");
            temp2670 = this.ICatalogWebServiceAdapterInstance.GetExternalId(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3387\'");
            this.Manager.Comment("checking step \'return GetExternalId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2670 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalId, state S3" +
                        "387)", TestManagerHelpers.Describe(temp2670)));
            this.Manager.Comment("reaching state \'S5599\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3388
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3388() {
            this.Manager.BeginTest("BVTsS3388");
            this.Manager.Comment("reaching state \'S3388\'");
            string temp2671;
            this.Manager.Comment("executing step \'call GetExternalId(CorrectHeader)\'");
            temp2671 = this.ICatalogWebServiceAdapterInstance.GetExternalId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3389\'");
            this.Manager.Comment("checking step \'return GetExternalId/\"NoError\"\'");
            this.Manager.Assert((temp2671 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalId, state S3389)", TestManagerHelpers.Describe(temp2671)));
            this.Manager.Comment("reaching state \'S5600\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3390
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3390() {
            this.Manager.BeginTest("BVTsS3390");
            this.Manager.Comment("reaching state \'S3390\'");
            string temp2672;
            this.Manager.Comment("executing step \'call GetExternalId(WrongHeader)\'");
            temp2672 = this.ICatalogWebServiceAdapterInstance.GetExternalId(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3391\'");
            this.Manager.Comment("checking step \'return GetExternalId/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2672 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalId, state S3" +
                        "391)", TestManagerHelpers.Describe(temp2672)));
            this.Manager.Comment("reaching state \'S5601\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3392
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3392() {
            this.Manager.BeginTest("BVTsS3392");
            this.Manager.Comment("reaching state \'S3392\'");
            string temp2673;
            this.Manager.Comment("executing step \'call GetExternalFeedSource(NoHeader)\'");
            temp2673 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSource(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3393\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSource/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2673 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalFeedSource, " +
                        "state S3393)", TestManagerHelpers.Describe(temp2673)));
            this.Manager.Comment("reaching state \'S5602\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3394
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3394() {
            this.Manager.BeginTest("BVTsS3394");
            this.Manager.Comment("reaching state \'S3394\'");
            string temp2674;
            this.Manager.Comment("executing step \'call GetExternalFeedSource(CorrectHeader)\'");
            temp2674 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSource(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3395\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSource/\"NoError\"\'");
            this.Manager.Assert((temp2674 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedSource, state S3395)" +
                        "", TestManagerHelpers.Describe(temp2674)));
            this.Manager.Comment("reaching state \'S5603\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3396
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3396() {
            this.Manager.BeginTest("BVTsS3396");
            this.Manager.Comment("reaching state \'S3396\'");
            string temp2675;
            this.Manager.Comment("executing step \'call GetExternalFeedSource(WrongHeader)\'");
            temp2675 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSource(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3397\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSource/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2675 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalFeedSource, " +
                        "state S3397)", TestManagerHelpers.Describe(temp2675)));
            this.Manager.Comment("reaching state \'S5604\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3398() {
            this.Manager.BeginTest("BVTsS3398");
            this.Manager.Comment("reaching state \'S3398\'");
            string temp2676;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObject(NoHeader)\'");
            temp2676 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObject(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3399\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObject/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2676 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalFeedMappingO" +
                        "bject, state S3399)", TestManagerHelpers.Describe(temp2676)));
            this.Manager.Comment("reaching state \'S5605\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3400
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3400() {
            this.Manager.BeginTest("BVTsS3400");
            this.Manager.Comment("reaching state \'S3400\'");
            string temp2677;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObject(CorrectHeader)\'");
            temp2677 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObject(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3401\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObject/\"NoError\"\'");
            this.Manager.Assert((temp2677 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedMappingObject, state" +
                        " S3401)", TestManagerHelpers.Describe(temp2677)));
            this.Manager.Comment("reaching state \'S5606\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3402() {
            this.Manager.BeginTest("BVTsS3402");
            this.Manager.Comment("reaching state \'S3402\'");
            string temp2678;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObject(WrongHeader)\'");
            temp2678 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObject(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3403\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObject/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2678 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalFeedMappingO" +
                        "bject, state S3403)", TestManagerHelpers.Describe(temp2678)));
            this.Manager.Comment("reaching state \'S5607\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3404
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3404() {
            this.Manager.BeginTest("BVTsS3404");
            this.Manager.Comment("reaching state \'S3404\'");
            string temp2679;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping1(NoHeader)\'");
            temp2679 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping1(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3405\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping1/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2679 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveExternalFeedMapping" +
                        "1, state S3405)", TestManagerHelpers.Describe(temp2679)));
            this.Manager.Comment("reaching state \'S5608\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3406() {
            this.Manager.BeginTest("BVTsS3406");
            this.Manager.Comment("reaching state \'S3406\'");
            string temp2680;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping1(CorrectHeader)\'");
            temp2680 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping1(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3407\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping1/\"NoError\"\'");
            this.Manager.Assert((temp2680 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping1, state S34" +
                        "07)", TestManagerHelpers.Describe(temp2680)));
            this.Manager.Comment("reaching state \'S5609\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3408
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3408() {
            this.Manager.BeginTest("BVTsS3408");
            this.Manager.Comment("reaching state \'S3408\'");
            string temp2681;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping1(WrongHeader)\'");
            temp2681 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping1(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3409\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping1/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2681 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of SaveExternalFeedMapping" +
                        "1, state S3409)", TestManagerHelpers.Describe(temp2681)));
            this.Manager.Comment("reaching state \'S5610\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3410
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3410() {
            this.Manager.BeginTest("BVTsS3410");
            this.Manager.Comment("reaching state \'S3410\'");
            string temp2682;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping2()\'");
            temp2682 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping2();
            this.Manager.Comment("reaching state \'S3411\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping2/\"NoError\"\'");
            this.Manager.Assert((temp2682 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping2, state S34" +
                        "11)", TestManagerHelpers.Describe(temp2682)));
            this.Manager.Comment("reaching state \'S5611\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3412
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3412() {
            this.Manager.BeginTest("BVTsS3412");
            this.Manager.Comment("reaching state \'S3412\'");
            string temp2683;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping3()\'");
            temp2683 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping3();
            this.Manager.Comment("reaching state \'S3413\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping3/\"NoError\"\'");
            this.Manager.Assert((temp2683 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping3, state S34" +
                        "13)", TestManagerHelpers.Describe(temp2683)));
            this.Manager.Comment("reaching state \'S5612\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3414
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3414() {
            this.Manager.BeginTest("BVTsS3414");
            this.Manager.Comment("reaching state \'S3414\'");
            string temp2684;
            this.Manager.Comment("executing step \'call Ping(NoHeader)\'");
            temp2684 = this.ICatalogWebServiceAdapterInstance.Ping(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3415\'");
            this.Manager.Comment("checking step \'return Ping/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2684 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of Ping, state S3415)", TestManagerHelpers.Describe(temp2684)));
            this.Manager.Comment("reaching state \'S5613\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3416
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3416() {
            this.Manager.BeginTest("BVTsS3416");
            this.Manager.Comment("reaching state \'S3416\'");
            string temp2685;
            this.Manager.Comment("executing step \'call Ping(CorrectHeader)\'");
            temp2685 = this.ICatalogWebServiceAdapterInstance.Ping(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3417\'");
            this.Manager.Comment("checking step \'return Ping/\"NoError\"\'");
            this.Manager.Assert((temp2685 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of Ping, state S3417)", TestManagerHelpers.Describe(temp2685)));
            this.Manager.Comment("reaching state \'S5614\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3418
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3418() {
            this.Manager.BeginTest("BVTsS3418");
            this.Manager.Comment("reaching state \'S3418\'");
            string temp2686;
            this.Manager.Comment("executing step \'call Ping(WrongHeader)\'");
            temp2686 = this.ICatalogWebServiceAdapterInstance.Ping(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3419\'");
            this.Manager.Comment("checking step \'return Ping/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2686 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of Ping, state S3419)", TestManagerHelpers.Describe(temp2686)));
            this.Manager.Comment("reaching state \'S5615\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3420
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3420() {
            this.Manager.BeginTest("BVTsS3420");
            this.Manager.Comment("reaching state \'S3420\'");
            string temp2687;
            this.Manager.Comment("executing step \'call PurgeTaskQueue(NoHeader)\'");
            temp2687 = this.ICatalogWebServiceAdapterInstance.PurgeTaskQueue(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3421\'");
            this.Manager.Comment("checking step \'return PurgeTaskQueue/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2687 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of PurgeTaskQueue, state S" +
                        "3421)", TestManagerHelpers.Describe(temp2687)));
            this.Manager.Comment("reaching state \'S5616\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3422
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3422() {
            this.Manager.BeginTest("BVTsS3422");
            this.Manager.Comment("reaching state \'S3422\'");
            string temp2688;
            this.Manager.Comment("executing step \'call PurgeTaskQueue(CorrectHeader)\'");
            temp2688 = this.ICatalogWebServiceAdapterInstance.PurgeTaskQueue(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3423\'");
            this.Manager.Comment("checking step \'return PurgeTaskQueue/\"NoError\"\'");
            this.Manager.Assert((temp2688 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of PurgeTaskQueue, state S3423)", TestManagerHelpers.Describe(temp2688)));
            this.Manager.Comment("reaching state \'S5617\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3424
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3424() {
            this.Manager.BeginTest("BVTsS3424");
            this.Manager.Comment("reaching state \'S3424\'");
            string temp2689;
            this.Manager.Comment("executing step \'call PurgeTaskQueue(WrongHeader)\'");
            temp2689 = this.ICatalogWebServiceAdapterInstance.PurgeTaskQueue(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3425\'");
            this.Manager.Comment("checking step \'return PurgeTaskQueue/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2689 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of PurgeTaskQueue, state S" +
                        "3425)", TestManagerHelpers.Describe(temp2689)));
            this.Manager.Comment("reaching state \'S5618\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3426
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3426() {
            this.Manager.BeginTest("BVTsS3426");
            this.Manager.Comment("reaching state \'S3426\'");
            string temp2690;
            this.Manager.Comment("executing step \'call GetPaymentMethod(Existing,NoHeader)\'");
            temp2690 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.Existing, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3427\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2690 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPaymentMethod, state" +
                        " S3427)", TestManagerHelpers.Describe(temp2690)));
            this.Manager.Comment("reaching state \'S5619\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3428
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3428() {
            this.Manager.BeginTest("BVTsS3428");
            this.Manager.Comment("reaching state \'S3428\'");
            string temp2691;
            this.Manager.Comment("executing step \'call GetPaymentMethod(Existing,CorrectHeader)\'");
            temp2691 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3429\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"NoError\"\'");
            this.Manager.Assert((temp2691 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethod, state S3429)", TestManagerHelpers.Describe(temp2691)));
            this.Manager.Comment("reaching state \'S5620\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3430
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3430() {
            this.Manager.BeginTest("BVTsS3430");
            this.Manager.Comment("reaching state \'S3430\'");
            string temp2692;
            this.Manager.Comment("executing step \'call GetPaymentMethod(Existing,WrongHeader)\'");
            temp2692 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.Existing, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3431\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2692 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPaymentMethod, state" +
                        " S3431)", TestManagerHelpers.Describe(temp2692)));
            this.Manager.Comment("reaching state \'S5621\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3432
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3432() {
            this.Manager.BeginTest("BVTsS3432");
            this.Manager.Comment("reaching state \'S3432\'");
            string temp2693;
            this.Manager.Comment("executing step \'call GetPaymentMethod(New,NoHeader)\'");
            temp2693 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.New, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3433\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2693 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPaymentMethod, state" +
                        " S3433)", TestManagerHelpers.Describe(temp2693)));
            this.Manager.Comment("reaching state \'S5622\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3434
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3434() {
            this.Manager.BeginTest("BVTsS3434");
            this.Manager.Comment("reaching state \'S3434\'");
            string temp2694;
            this.Manager.Comment("executing step \'call GetPaymentMethod(New,WrongHeader)\'");
            temp2694 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.New, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3435\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2694 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPaymentMethod, state" +
                        " S3435)", TestManagerHelpers.Describe(temp2694)));
            this.Manager.Comment("reaching state \'S5623\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3436() {
            this.Manager.BeginTest("BVTsS3436");
            this.Manager.Comment("reaching state \'S3436\'");
            string temp2695;
            this.Manager.Comment("executing step \'call GetPaymentMethod(New,CorrectHeader)\'");
            temp2695 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3437\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"NoError\"\'");
            this.Manager.Assert((temp2695 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethod, state S3437)", TestManagerHelpers.Describe(temp2695)));
            this.Manager.Comment("reaching state \'S5624\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3438
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3438() {
            this.Manager.BeginTest("BVTsS3438");
            this.Manager.Comment("reaching state \'S3438\'");
            string temp2696;
            this.Manager.Comment("executing step \'call GetPaymentMethodArray(NoHeader)\'");
            temp2696 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethodArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3439\'");
            this.Manager.Comment("checking step \'return GetPaymentMethodArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2696 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPaymentMethodArray, " +
                        "state S3439)", TestManagerHelpers.Describe(temp2696)));
            this.Manager.Comment("reaching state \'S5625\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3440
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3440() {
            this.Manager.BeginTest("BVTsS3440");
            this.Manager.Comment("reaching state \'S3440\'");
            string temp2697;
            this.Manager.Comment("executing step \'call GetPaymentMethodArray(CorrectHeader)\'");
            temp2697 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethodArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3441\'");
            this.Manager.Comment("checking step \'return GetPaymentMethodArray/\"NoError\"\'");
            this.Manager.Assert((temp2697 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethodArray, state S3441)" +
                        "", TestManagerHelpers.Describe(temp2697)));
            this.Manager.Comment("reaching state \'S5626\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3442
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3442() {
            this.Manager.BeginTest("BVTsS3442");
            this.Manager.Comment("reaching state \'S3442\'");
            string temp2698;
            this.Manager.Comment("executing step \'call GetPaymentMethodArray(WrongHeader)\'");
            temp2698 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethodArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3443\'");
            this.Manager.Comment("checking step \'return GetPaymentMethodArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2698 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetPaymentMethodArray, " +
                        "state S3443)", TestManagerHelpers.Describe(temp2698)));
            this.Manager.Comment("reaching state \'S5627\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3444
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3444() {
            this.Manager.BeginTest("BVTsS3444");
            this.Manager.Comment("reaching state \'S3444\'");
            string temp2699;
            this.Manager.Comment("executing step \'call GetExternalFeedSourceArray(NoHeader)\'");
            temp2699 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSourceArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3445\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSourceArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2699 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalFeedSourceAr" +
                        "ray, state S3445)", TestManagerHelpers.Describe(temp2699)));
            this.Manager.Comment("reaching state \'S5628\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3446
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3446() {
            this.Manager.BeginTest("BVTsS3446");
            this.Manager.Comment("reaching state \'S3446\'");
            string temp2700;
            this.Manager.Comment("executing step \'call GetExternalFeedSourceArray(CorrectHeader)\'");
            temp2700 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSourceArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3447\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSourceArray/\"NoError\"\'");
            this.Manager.Assert((temp2700 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedSourceArray, state S" +
                        "3447)", TestManagerHelpers.Describe(temp2700)));
            this.Manager.Comment("reaching state \'S5629\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3448
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3448() {
            this.Manager.BeginTest("BVTsS3448");
            this.Manager.Comment("reaching state \'S3448\'");
            string temp2701;
            this.Manager.Comment("executing step \'call GetExternalFeedSourceArray(WrongHeader)\'");
            temp2701 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSourceArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3449\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSourceArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2701 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalFeedSourceAr" +
                        "ray, state S3449)", TestManagerHelpers.Describe(temp2701)));
            this.Manager.Comment("reaching state \'S5630\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3450
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3450() {
            this.Manager.BeginTest("BVTsS3450");
            this.Manager.Comment("reaching state \'S3450\'");
            string temp2702;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObjectArray(NoHeader)\'");
            temp2702 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObjectArray(InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3451\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObjectArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2702 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalFeedMappingO" +
                        "bjectArray, state S3451)", TestManagerHelpers.Describe(temp2702)));
            this.Manager.Comment("reaching state \'S5631\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3452
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3452() {
            this.Manager.BeginTest("BVTsS3452");
            this.Manager.Comment("reaching state \'S3452\'");
            string temp2703;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObjectArray(CorrectHeader)\'");
            temp2703 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObjectArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3453\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObjectArray/\"NoError\"\'");
            this.Manager.Assert((temp2703 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedMappingObjectArray, " +
                        "state S3453)", TestManagerHelpers.Describe(temp2703)));
            this.Manager.Comment("reaching state \'S5632\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3454
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3454() {
            this.Manager.BeginTest("BVTsS3454");
            this.Manager.Comment("reaching state \'S3454\'");
            string temp2704;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObjectArray(WrongHeader)\'");
            temp2704 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObjectArray(InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3455\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObjectArray/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2704 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GetExternalFeedMappingO" +
                        "bjectArray, state S3455)", TestManagerHelpers.Describe(temp2704)));
            this.Manager.Comment("reaching state \'S5633\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3456
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3456() {
            this.Manager.BeginTest("BVTsS3456");
            this.Manager.Comment("reaching state \'S3456\'");
            string temp2705;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length500,NoHeader)\'");
            temp2705 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3457\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2705 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3457)", TestManagerHelpers.Describe(temp2705)));
            this.Manager.Comment("reaching state \'S5634\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3458
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3458() {
            this.Manager.BeginTest("BVTsS3458");
            this.Manager.Comment("reaching state \'S3458\'");
            string temp2706;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length500,CorrectHeader)\'");
            temp2706 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3459\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2706 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3459)", TestManagerHelpers.Describe(temp2706)));
            this.Manager.Comment("reaching state \'S5635\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3460
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3460() {
            this.Manager.BeginTest("BVTsS3460");
            this.Manager.Comment("reaching state \'S3460\'");
            string temp2707;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length500,NoHeader)\'");
            temp2707 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3461\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2707 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3461)", TestManagerHelpers.Describe(temp2707)));
            this.Manager.Comment("reaching state \'S5636\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3462() {
            this.Manager.BeginTest("BVTsS3462");
            this.Manager.Comment("reaching state \'S3462\'");
            string temp2708;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length0,CorrectHeader)\'");
            temp2708 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3463\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2708 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3463)", TestManagerHelpers.Describe(temp2708)));
            this.Manager.Comment("reaching state \'S5637\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3464() {
            this.Manager.BeginTest("BVTsS3464");
            this.Manager.Comment("reaching state \'S3464\'");
            string temp2709;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length0,NoHeader)\'");
            temp2709 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3465\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2709 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3465)", TestManagerHelpers.Describe(temp2709)));
            this.Manager.Comment("reaching state \'S5638\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3466
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3466() {
            this.Manager.BeginTest("BVTsS3466");
            this.Manager.Comment("reaching state \'S3466\'");
            string temp2710;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length0,NoHeader)\'");
            temp2710 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3467\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2710 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3467)", TestManagerHelpers.Describe(temp2710)));
            this.Manager.Comment("reaching state \'S5639\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3468
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3468() {
            this.Manager.BeginTest("BVTsS3468");
            this.Manager.Comment("reaching state \'S3468\'");
            string temp2711;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length0,NoHeader)\'");
            temp2711 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3469\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2711 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3469)", TestManagerHelpers.Describe(temp2711)));
            this.Manager.Comment("reaching state \'S5640\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3470
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3470() {
            this.Manager.BeginTest("BVTsS3470");
            this.Manager.Comment("reaching state \'S3470\'");
            string temp2712;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length0,CorrectHeader)\'");
            temp2712 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3471\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2712 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3471)", TestManagerHelpers.Describe(temp2712)));
            this.Manager.Comment("reaching state \'S5641\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3472
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3472() {
            this.Manager.BeginTest("BVTsS3472");
            this.Manager.Comment("reaching state \'S3472\'");
            string temp2713;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length500,NoHeader)\'");
            temp2713 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3473\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2713 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3473)", TestManagerHelpers.Describe(temp2713)));
            this.Manager.Comment("reaching state \'S5642\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3474
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3474() {
            this.Manager.BeginTest("BVTsS3474");
            this.Manager.Comment("reaching state \'S3474\'");
            string temp2714;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length500,CorrectHeader)\'");
            temp2714 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3475\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2714 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3475)", TestManagerHelpers.Describe(temp2714)));
            this.Manager.Comment("reaching state \'S5643\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3476
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3476() {
            this.Manager.BeginTest("BVTsS3476");
            this.Manager.Comment("reaching state \'S3476\'");
            string temp2715;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length1,NoHeader)\'");
            temp2715 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3477\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2715 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3477)", TestManagerHelpers.Describe(temp2715)));
            this.Manager.Comment("reaching state \'S5644\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3478() {
            this.Manager.BeginTest("BVTsS3478");
            this.Manager.Comment("reaching state \'S3478\'");
            string temp2716;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length1,CorrectHeader)\'");
            temp2716 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3479\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2716 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3479)", TestManagerHelpers.Describe(temp2716)));
            this.Manager.Comment("reaching state \'S5645\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3480
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3480() {
            this.Manager.BeginTest("BVTsS3480");
            this.Manager.Comment("reaching state \'S3480\'");
            string temp2717;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length500,CorrectHeader)\'");
            temp2717 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3481\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2717 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3481)", TestManagerHelpers.Describe(temp2717)));
            this.Manager.Comment("reaching state \'S5646\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3482
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3482() {
            this.Manager.BeginTest("BVTsS3482");
            this.Manager.Comment("reaching state \'S3482\'");
            string temp2718;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length500,CorrectHeader)\'");
            temp2718 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3483\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2718 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3483)", TestManagerHelpers.Describe(temp2718)));
            this.Manager.Comment("reaching state \'S5647\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3484
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3484() {
            this.Manager.BeginTest("BVTsS3484");
            this.Manager.Comment("reaching state \'S3484\'");
            string temp2719;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length251,CorrectHeader)\'");
            temp2719 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3485\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2719 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3485)", TestManagerHelpers.Describe(temp2719)));
            this.Manager.Comment("reaching state \'S5648\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3486
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3486() {
            this.Manager.BeginTest("BVTsS3486");
            this.Manager.Comment("reaching state \'S3486\'");
            string temp2720;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length251,WrongHeader)\'");
            temp2720 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3487\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2720 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3487)", TestManagerHelpers.Describe(temp2720)));
            this.Manager.Comment("reaching state \'S5649\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3488
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3488() {
            this.Manager.BeginTest("BVTsS3488");
            this.Manager.Comment("reaching state \'S3488\'");
            string temp2721;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length250,WrongHeader)\'");
            temp2721 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3489\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2721 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3489)", TestManagerHelpers.Describe(temp2721)));
            this.Manager.Comment("reaching state \'S5650\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3490
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3490() {
            this.Manager.BeginTest("BVTsS3490");
            this.Manager.Comment("reaching state \'S3490\'");
            string temp2722;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length1,WrongHeader)\'");
            temp2722 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3491\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2722 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3491)", TestManagerHelpers.Describe(temp2722)));
            this.Manager.Comment("reaching state \'S5651\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3492() {
            this.Manager.BeginTest("BVTsS3492");
            this.Manager.Comment("reaching state \'S3492\'");
            string temp2723;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length0,WrongHeader)\'");
            temp2723 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3493\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2723 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3493)", TestManagerHelpers.Describe(temp2723)));
            this.Manager.Comment("reaching state \'S5652\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3494
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3494() {
            this.Manager.BeginTest("BVTsS3494");
            this.Manager.Comment("reaching state \'S3494\'");
            string temp2724;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length251,NoHeader)\'");
            temp2724 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3495\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2724 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3495)", TestManagerHelpers.Describe(temp2724)));
            this.Manager.Comment("reaching state \'S5653\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3496
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3496() {
            this.Manager.BeginTest("BVTsS3496");
            this.Manager.Comment("reaching state \'S3496\'");
            string temp2725;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length251,NoHeader)\'");
            temp2725 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3497\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2725 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3497)", TestManagerHelpers.Describe(temp2725)));
            this.Manager.Comment("reaching state \'S5654\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3498
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3498() {
            this.Manager.BeginTest("BVTsS3498");
            this.Manager.Comment("reaching state \'S3498\'");
            string temp2726;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length251,CorrectHeader)\'");
            temp2726 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3499\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2726 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3499)", TestManagerHelpers.Describe(temp2726)));
            this.Manager.Comment("reaching state \'S5655\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3500
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3500() {
            this.Manager.BeginTest("BVTsS3500");
            this.Manager.Comment("reaching state \'S3500\'");
            string temp2727;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length251,NoHeader)\'");
            temp2727 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3501\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2727 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3501)", TestManagerHelpers.Describe(temp2727)));
            this.Manager.Comment("reaching state \'S5656\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3502
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3502() {
            this.Manager.BeginTest("BVTsS3502");
            this.Manager.Comment("reaching state \'S3502\'");
            string temp2728;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length250,NoHeader)\'");
            temp2728 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3503\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2728 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3503)", TestManagerHelpers.Describe(temp2728)));
            this.Manager.Comment("reaching state \'S5657\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3504
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3504() {
            this.Manager.BeginTest("BVTsS3504");
            this.Manager.Comment("reaching state \'S3504\'");
            string temp2729;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length1,NoHeader)\'");
            temp2729 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3505\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2729 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3505)", TestManagerHelpers.Describe(temp2729)));
            this.Manager.Comment("reaching state \'S5658\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3506
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3506() {
            this.Manager.BeginTest("BVTsS3506");
            this.Manager.Comment("reaching state \'S3506\'");
            string temp2730;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length1,CorrectHeader)\'");
            temp2730 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3507\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2730 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3507)", TestManagerHelpers.Describe(temp2730)));
            this.Manager.Comment("reaching state \'S5659\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3508() {
            this.Manager.BeginTest("BVTsS3508");
            this.Manager.Comment("reaching state \'S3508\'");
            string temp2731;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length0,CorrectHeader)\'");
            temp2731 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3509\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2731 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3509)", TestManagerHelpers.Describe(temp2731)));
            this.Manager.Comment("reaching state \'S5660\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3510
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3510() {
            this.Manager.BeginTest("BVTsS3510");
            this.Manager.Comment("reaching state \'S3510\'");
            string temp2732;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length500,CorrectHeader)\'");
            temp2732 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3511\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2732 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3511)", TestManagerHelpers.Describe(temp2732)));
            this.Manager.Comment("reaching state \'S5661\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3512
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3512() {
            this.Manager.BeginTest("BVTsS3512");
            this.Manager.Comment("reaching state \'S3512\'");
            string temp2733;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length1,CorrectHeader)\'");
            temp2733 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3513\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2733 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3513)", TestManagerHelpers.Describe(temp2733)));
            this.Manager.Comment("reaching state \'S5662\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3514
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3514() {
            this.Manager.BeginTest("BVTsS3514");
            this.Manager.Comment("reaching state \'S3514\'");
            string temp2734;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length1,WrongHeader)\'");
            temp2734 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3515\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2734 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3515)", TestManagerHelpers.Describe(temp2734)));
            this.Manager.Comment("reaching state \'S5663\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3516() {
            this.Manager.BeginTest("BVTsS3516");
            this.Manager.Comment("reaching state \'S3516\'");
            string temp2735;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length0,WrongHeader)\'");
            temp2735 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3517\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2735 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3517)", TestManagerHelpers.Describe(temp2735)));
            this.Manager.Comment("reaching state \'S5664\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3518
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3518() {
            this.Manager.BeginTest("BVTsS3518");
            this.Manager.Comment("reaching state \'S3518\'");
            string temp2736;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length1,WrongHeader)\'");
            temp2736 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3519\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2736 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3519)", TestManagerHelpers.Describe(temp2736)));
            this.Manager.Comment("reaching state \'S5665\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3520
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3520() {
            this.Manager.BeginTest("BVTsS3520");
            this.Manager.Comment("reaching state \'S3520\'");
            string temp2737;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length1,NoHeader)\'");
            temp2737 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3521\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2737 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3521)", TestManagerHelpers.Describe(temp2737)));
            this.Manager.Comment("reaching state \'S5666\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3522
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3522() {
            this.Manager.BeginTest("BVTsS3522");
            this.Manager.Comment("reaching state \'S3522\'");
            string temp2738;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length1,NoHeader)\'");
            temp2738 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3523\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2738 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3523)", TestManagerHelpers.Describe(temp2738)));
            this.Manager.Comment("reaching state \'S5667\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3524() {
            this.Manager.BeginTest("BVTsS3524");
            this.Manager.Comment("reaching state \'S3524\'");
            string temp2739;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length1,NoHeader)\'");
            temp2739 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3525\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2739 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3525)", TestManagerHelpers.Describe(temp2739)));
            this.Manager.Comment("reaching state \'S5668\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3526
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3526() {
            this.Manager.BeginTest("BVTsS3526");
            this.Manager.Comment("reaching state \'S3526\'");
            string temp2740;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length1,CorrectHeader)\'");
            temp2740 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3527\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2740 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3527)", TestManagerHelpers.Describe(temp2740)));
            this.Manager.Comment("reaching state \'S5669\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3528
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3528() {
            this.Manager.BeginTest("BVTsS3528");
            this.Manager.Comment("reaching state \'S3528\'");
            string temp2741;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length0,CorrectHeader)\'");
            temp2741 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3529\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2741 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3529)", TestManagerHelpers.Describe(temp2741)));
            this.Manager.Comment("reaching state \'S5670\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3530
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3530() {
            this.Manager.BeginTest("BVTsS3530");
            this.Manager.Comment("reaching state \'S3530\'");
            string temp2742;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length0,WrongHeader)\'");
            temp2742 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3531\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2742 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3531)", TestManagerHelpers.Describe(temp2742)));
            this.Manager.Comment("reaching state \'S5671\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3532() {
            this.Manager.BeginTest("BVTsS3532");
            this.Manager.Comment("reaching state \'S3532\'");
            string temp2743;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length0,NoHeader)\'");
            temp2743 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3533\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2743 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3533)", TestManagerHelpers.Describe(temp2743)));
            this.Manager.Comment("reaching state \'S5672\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3534
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3534() {
            this.Manager.BeginTest("BVTsS3534");
            this.Manager.Comment("reaching state \'S3534\'");
            string temp2744;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length0,CorrectHeader)\'");
            temp2744 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3535\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2744 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3535)", TestManagerHelpers.Describe(temp2744)));
            this.Manager.Comment("reaching state \'S5673\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3536
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3536() {
            this.Manager.BeginTest("BVTsS3536");
            this.Manager.Comment("reaching state \'S3536\'");
            string temp2745;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length500,CorrectHeader)\'");
            temp2745 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3537\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2745 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3537)", TestManagerHelpers.Describe(temp2745)));
            this.Manager.Comment("reaching state \'S5674\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3538
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3538() {
            this.Manager.BeginTest("BVTsS3538");
            this.Manager.Comment("reaching state \'S3538\'");
            string temp2746;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length250,CorrectHeader)\'");
            temp2746 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3539\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2746 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3539)", TestManagerHelpers.Describe(temp2746)));
            this.Manager.Comment("reaching state \'S5675\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3540
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3540() {
            this.Manager.BeginTest("BVTsS3540");
            this.Manager.Comment("reaching state \'S3540\'");
            string temp2747;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length500,WrongHeader)\'");
            temp2747 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3541\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2747 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3541)", TestManagerHelpers.Describe(temp2747)));
            this.Manager.Comment("reaching state \'S5676\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3542
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3542() {
            this.Manager.BeginTest("BVTsS3542");
            this.Manager.Comment("reaching state \'S3542\'");
            string temp2748;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length500,WrongHeader)\'");
            temp2748 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3543\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2748 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3543)", TestManagerHelpers.Describe(temp2748)));
            this.Manager.Comment("reaching state \'S5677\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3544
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3544() {
            this.Manager.BeginTest("BVTsS3544");
            this.Manager.Comment("reaching state \'S3544\'");
            string temp2749;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length500,WrongHeader)\'");
            temp2749 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3545\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2749 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3545)", TestManagerHelpers.Describe(temp2749)));
            this.Manager.Comment("reaching state \'S5678\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3546
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3546() {
            this.Manager.BeginTest("BVTsS3546");
            this.Manager.Comment("reaching state \'S3546\'");
            string temp2750;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length500,NoHeader)\'");
            temp2750 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3547\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2750 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3547)", TestManagerHelpers.Describe(temp2750)));
            this.Manager.Comment("reaching state \'S5679\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3548
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3548() {
            this.Manager.BeginTest("BVTsS3548");
            this.Manager.Comment("reaching state \'S3548\'");
            string temp2751;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length250,NoHeader)\'");
            temp2751 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3549\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2751 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3549)", TestManagerHelpers.Describe(temp2751)));
            this.Manager.Comment("reaching state \'S5680\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3550
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3550() {
            this.Manager.BeginTest("BVTsS3550");
            this.Manager.Comment("reaching state \'S3550\'");
            string temp2752;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length250,NoHeader)\'");
            temp2752 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3551\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2752 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3551)", TestManagerHelpers.Describe(temp2752)));
            this.Manager.Comment("reaching state \'S5681\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3552
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3552() {
            this.Manager.BeginTest("BVTsS3552");
            this.Manager.Comment("reaching state \'S3552\'");
            string temp2753;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length250,CorrectHeader)\'");
            temp2753 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3553\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2753 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3553)", TestManagerHelpers.Describe(temp2753)));
            this.Manager.Comment("reaching state \'S5682\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3554
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3554() {
            this.Manager.BeginTest("BVTsS3554");
            this.Manager.Comment("reaching state \'S3554\'");
            string temp2754;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length1,CorrectHeader)\'");
            temp2754 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3555\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2754 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3555)", TestManagerHelpers.Describe(temp2754)));
            this.Manager.Comment("reaching state \'S5683\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3556
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3556() {
            this.Manager.BeginTest("BVTsS3556");
            this.Manager.Comment("reaching state \'S3556\'");
            string temp2755;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length1,WrongHeader)\'");
            temp2755 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3557\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2755 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3557)", TestManagerHelpers.Describe(temp2755)));
            this.Manager.Comment("reaching state \'S5684\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3558
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3558() {
            this.Manager.BeginTest("BVTsS3558");
            this.Manager.Comment("reaching state \'S3558\'");
            string temp2756;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length0,WrongHeader)\'");
            temp2756 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3559\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2756 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3559)", TestManagerHelpers.Describe(temp2756)));
            this.Manager.Comment("reaching state \'S5685\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3560
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3560() {
            this.Manager.BeginTest("BVTsS3560");
            this.Manager.Comment("reaching state \'S3560\'");
            string temp2757;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length251,WrongHeader)\'");
            temp2757 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3561\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2757 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3561)", TestManagerHelpers.Describe(temp2757)));
            this.Manager.Comment("reaching state \'S5686\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3562
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3562() {
            this.Manager.BeginTest("BVTsS3562");
            this.Manager.Comment("reaching state \'S3562\'");
            string temp2758;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length1,WrongHeader)\'");
            temp2758 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3563\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2758 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3563)", TestManagerHelpers.Describe(temp2758)));
            this.Manager.Comment("reaching state \'S5687\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3564
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3564() {
            this.Manager.BeginTest("BVTsS3564");
            this.Manager.Comment("reaching state \'S3564\'");
            string temp2759;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length1,CorrectHeader)\'");
            temp2759 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3565\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2759 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3565)", TestManagerHelpers.Describe(temp2759)));
            this.Manager.Comment("reaching state \'S5688\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3566
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3566() {
            this.Manager.BeginTest("BVTsS3566");
            this.Manager.Comment("reaching state \'S3566\'");
            string temp2760;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length0,WrongHeader)\'");
            temp2760 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3567\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2760 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3567)", TestManagerHelpers.Describe(temp2760)));
            this.Manager.Comment("reaching state \'S5689\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3568
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3568() {
            this.Manager.BeginTest("BVTsS3568");
            this.Manager.Comment("reaching state \'S3568\'");
            string temp2761;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length500,WrongHeader)\'");
            temp2761 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3569\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2761 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3569)", TestManagerHelpers.Describe(temp2761)));
            this.Manager.Comment("reaching state \'S5690\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3570
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3570() {
            this.Manager.BeginTest("BVTsS3570");
            this.Manager.Comment("reaching state \'S3570\'");
            string temp2762;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length0,NoHeader)\'");
            temp2762 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3571\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2762 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3571)", TestManagerHelpers.Describe(temp2762)));
            this.Manager.Comment("reaching state \'S5691\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3572
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3572() {
            this.Manager.BeginTest("BVTsS3572");
            this.Manager.Comment("reaching state \'S3572\'");
            string temp2763;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length500,NoHeader)\'");
            temp2763 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3573\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2763 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3573)", TestManagerHelpers.Describe(temp2763)));
            this.Manager.Comment("reaching state \'S5692\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3574
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3574() {
            this.Manager.BeginTest("BVTsS3574");
            this.Manager.Comment("reaching state \'S3574\'");
            string temp2764;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length0,CorrectHeader)\'");
            temp2764 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3575\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2764 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3575)", TestManagerHelpers.Describe(temp2764)));
            this.Manager.Comment("reaching state \'S5693\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3576
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3576() {
            this.Manager.BeginTest("BVTsS3576");
            this.Manager.Comment("reaching state \'S3576\'");
            string temp2765;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length1,NoHeader)\'");
            temp2765 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3577\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2765 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3577)", TestManagerHelpers.Describe(temp2765)));
            this.Manager.Comment("reaching state \'S5694\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3578() {
            this.Manager.BeginTest("BVTsS3578");
            this.Manager.Comment("reaching state \'S3578\'");
            string temp2766;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length500,WrongHeader)\'");
            temp2766 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3579\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2766 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3579)", TestManagerHelpers.Describe(temp2766)));
            this.Manager.Comment("reaching state \'S5695\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3580
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3580() {
            this.Manager.BeginTest("BVTsS3580");
            this.Manager.Comment("reaching state \'S3580\'");
            string temp2767;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length1,WrongHeader)\'");
            temp2767 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3581\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2767 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3581)", TestManagerHelpers.Describe(temp2767)));
            this.Manager.Comment("reaching state \'S5696\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3582
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3582() {
            this.Manager.BeginTest("BVTsS3582");
            this.Manager.Comment("reaching state \'S3582\'");
            string temp2768;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length0,WrongHeader)\'");
            temp2768 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3583\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2768 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3583)", TestManagerHelpers.Describe(temp2768)));
            this.Manager.Comment("reaching state \'S5697\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3584
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3584() {
            this.Manager.BeginTest("BVTsS3584");
            this.Manager.Comment("reaching state \'S3584\'");
            string temp2769;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length251,CorrectHeader)\'");
            temp2769 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3585\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2769 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3585)", TestManagerHelpers.Describe(temp2769)));
            this.Manager.Comment("reaching state \'S5698\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3586() {
            this.Manager.BeginTest("BVTsS3586");
            this.Manager.Comment("reaching state \'S3586\'");
            string temp2770;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length251,CorrectHeader)\'");
            temp2770 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3587\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2770 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3587)", TestManagerHelpers.Describe(temp2770)));
            this.Manager.Comment("reaching state \'S5699\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3588
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3588() {
            this.Manager.BeginTest("BVTsS3588");
            this.Manager.Comment("reaching state \'S3588\'");
            string temp2771;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length251,NoHeader)\'");
            temp2771 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3589\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2771 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3589)", TestManagerHelpers.Describe(temp2771)));
            this.Manager.Comment("reaching state \'S5700\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3590
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3590() {
            this.Manager.BeginTest("BVTsS3590");
            this.Manager.Comment("reaching state \'S3590\'");
            string temp2772;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length250,CorrectHeader)\'");
            temp2772 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3591\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2772 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3591)", TestManagerHelpers.Describe(temp2772)));
            this.Manager.Comment("reaching state \'S5701\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3592
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3592() {
            this.Manager.BeginTest("BVTsS3592");
            this.Manager.Comment("reaching state \'S3592\'");
            string temp2773;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length250,NoHeader)\'");
            temp2773 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3593\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2773 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3593)", TestManagerHelpers.Describe(temp2773)));
            this.Manager.Comment("reaching state \'S5702\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3594
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3594() {
            this.Manager.BeginTest("BVTsS3594");
            this.Manager.Comment("reaching state \'S3594\'");
            string temp2774;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length251,NoHeader)\'");
            temp2774 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3595\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2774 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3595)", TestManagerHelpers.Describe(temp2774)));
            this.Manager.Comment("reaching state \'S5703\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3596
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3596() {
            this.Manager.BeginTest("BVTsS3596");
            this.Manager.Comment("reaching state \'S3596\'");
            string temp2775;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length251,WrongHeader)\'");
            temp2775 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3597\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2775 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3597)", TestManagerHelpers.Describe(temp2775)));
            this.Manager.Comment("reaching state \'S5704\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3598
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3598() {
            this.Manager.BeginTest("BVTsS3598");
            this.Manager.Comment("reaching state \'S3598\'");
            string temp2776;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length250,CorrectHeader)\'");
            temp2776 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3599\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2776 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3599)", TestManagerHelpers.Describe(temp2776)));
            this.Manager.Comment("reaching state \'S5705\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3600() {
            this.Manager.BeginTest("BVTsS3600");
            this.Manager.Comment("reaching state \'S3600\'");
            string temp2777;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length251,WrongHeader)\'");
            temp2777 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3601\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2777 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3601)", TestManagerHelpers.Describe(temp2777)));
            this.Manager.Comment("reaching state \'S5706\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3602() {
            this.Manager.BeginTest("BVTsS3602");
            this.Manager.Comment("reaching state \'S3602\'");
            string temp2778;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length250,NoHeader)\'");
            temp2778 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3603\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2778 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3603)", TestManagerHelpers.Describe(temp2778)));
            this.Manager.Comment("reaching state \'S5707\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3604
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3604() {
            this.Manager.BeginTest("BVTsS3604");
            this.Manager.Comment("reaching state \'S3604\'");
            string temp2779;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length250,WrongHeader)\'");
            temp2779 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3605\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2779 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3605)", TestManagerHelpers.Describe(temp2779)));
            this.Manager.Comment("reaching state \'S5708\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3606
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3606() {
            this.Manager.BeginTest("BVTsS3606");
            this.Manager.Comment("reaching state \'S3606\'");
            string temp2780;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length250,WrongHeader)\'");
            temp2780 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3607\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2780 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3607)", TestManagerHelpers.Describe(temp2780)));
            this.Manager.Comment("reaching state \'S5709\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3608
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3608() {
            this.Manager.BeginTest("BVTsS3608");
            this.Manager.Comment("reaching state \'S3608\'");
            string temp2781;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length250,WrongHeader)\'");
            temp2781 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3609\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2781 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3609)", TestManagerHelpers.Describe(temp2781)));
            this.Manager.Comment("reaching state \'S5710\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3610
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3610() {
            this.Manager.BeginTest("BVTsS3610");
            this.Manager.Comment("reaching state \'S3610\'");
            string temp2782;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length251,CorrectHeader)\'");
            temp2782 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3611\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2782 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3611)", TestManagerHelpers.Describe(temp2782)));
            this.Manager.Comment("reaching state \'S5711\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3612
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3612() {
            this.Manager.BeginTest("BVTsS3612");
            this.Manager.Comment("reaching state \'S3612\'");
            string temp2783;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length251,WrongHeader)\'");
            temp2783 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3613\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2783 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3613)", TestManagerHelpers.Describe(temp2783)));
            this.Manager.Comment("reaching state \'S5712\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3614() {
            this.Manager.BeginTest("BVTsS3614");
            this.Manager.Comment("reaching state \'S3614\'");
            string temp2784;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length250,CorrectHeader)\'");
            temp2784 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3615\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2784 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3615)", TestManagerHelpers.Describe(temp2784)));
            this.Manager.Comment("reaching state \'S5713\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3616
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3616() {
            this.Manager.BeginTest("BVTsS3616");
            this.Manager.Comment("reaching state \'S3616\'");
            string temp2785;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length250,WrongHeader)\'");
            temp2785 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3617\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2785 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3617)", TestManagerHelpers.Describe(temp2785)));
            this.Manager.Comment("reaching state \'S5714\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3618
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3618() {
            this.Manager.BeginTest("BVTsS3618");
            this.Manager.Comment("reaching state \'S3618\'");
            string temp2786;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length0,NoHeader)\'");
            temp2786 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3619\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2786 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3619)", TestManagerHelpers.Describe(temp2786)));
            this.Manager.Comment("reaching state \'S5715\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3620
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3620() {
            this.Manager.BeginTest("BVTsS3620");
            this.Manager.Comment("reaching state \'S3620\'");
            string temp2787;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length500,NoHeader)\'");
            temp2787 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3621\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2787 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3621)", TestManagerHelpers.Describe(temp2787)));
            this.Manager.Comment("reaching state \'S5716\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3622
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3622() {
            this.Manager.BeginTest("BVTsS3622");
            this.Manager.Comment("reaching state \'S3622\'");
            string temp2788;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length251,CorrectHeader)\'");
            temp2788 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3623\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2788 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3623)", TestManagerHelpers.Describe(temp2788)));
            this.Manager.Comment("reaching state \'S5717\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3624
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3624() {
            this.Manager.BeginTest("BVTsS3624");
            this.Manager.Comment("reaching state \'S3624\'");
            string temp2789;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length251,NoHeader)\'");
            temp2789 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3625\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2789 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3625)", TestManagerHelpers.Describe(temp2789)));
            this.Manager.Comment("reaching state \'S5718\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3626
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3626() {
            this.Manager.BeginTest("BVTsS3626");
            this.Manager.Comment("reaching state \'S3626\'");
            string temp2790;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length250,CorrectHeader)\'");
            temp2790 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3627\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp2790 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S3627)", TestManagerHelpers.Describe(temp2790)));
            this.Manager.Comment("reaching state \'S5719\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3628
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3628() {
            this.Manager.BeginTest("BVTsS3628");
            this.Manager.Comment("reaching state \'S3628\'");
            string temp2791;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length250,NoHeader)\'");
            temp2791 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3629\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2791 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3629)", TestManagerHelpers.Describe(temp2791)));
            this.Manager.Comment("reaching state \'S5720\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3630
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3630() {
            this.Manager.BeginTest("BVTsS3630");
            this.Manager.Comment("reaching state \'S3630\'");
            string temp2792;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length500,WrongHeader)\'");
            temp2792 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3631\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2792 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3631)", TestManagerHelpers.Describe(temp2792)));
            this.Manager.Comment("reaching state \'S5721\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3632
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3632() {
            this.Manager.BeginTest("BVTsS3632");
            this.Manager.Comment("reaching state \'S3632\'");
            string temp2793;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length250,WrongHeader)\'");
            temp2793 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3633\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2793 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3633)", TestManagerHelpers.Describe(temp2793)));
            this.Manager.Comment("reaching state \'S5722\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3634
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3634() {
            this.Manager.BeginTest("BVTsS3634");
            this.Manager.Comment("reaching state \'S3634\'");
            string temp2794;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length251,WrongHeader)\'");
            temp2794 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3635\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2794 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameOfferSearch, state " +
                        "S3635)", TestManagerHelpers.Describe(temp2794)));
            this.Manager.Comment("reaching state \'S5723\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3636
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3636() {
            this.Manager.BeginTest("BVTsS3636");
            this.Manager.Comment("reaching state \'S3636\'");
            string temp2795;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length0,NoHeader)\'");
            temp2795 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3637\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2795 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3637)", TestManagerHelpers.Describe(temp2795)));
            this.Manager.Comment("reaching state \'S5724\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3638
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3638() {
            this.Manager.BeginTest("BVTsS3638");
            this.Manager.Comment("reaching state \'S3638\'");
            string temp2796;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length0,CorrectHeader)\'");
            temp2796 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3639\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2796 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3639)", TestManagerHelpers.Describe(temp2796)));
            this.Manager.Comment("reaching state \'S5725\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3640
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3640() {
            this.Manager.BeginTest("BVTsS3640");
            this.Manager.Comment("reaching state \'S3640\'");
            string temp2797;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length1,NoHeader)\'");
            temp2797 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3641\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2797 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3641)", TestManagerHelpers.Describe(temp2797)));
            this.Manager.Comment("reaching state \'S5726\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3642
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3642() {
            this.Manager.BeginTest("BVTsS3642");
            this.Manager.Comment("reaching state \'S3642\'");
            string temp2798;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length500,CorrectHeader)\'");
            temp2798 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3643\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2798 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3643)", TestManagerHelpers.Describe(temp2798)));
            this.Manager.Comment("reaching state \'S5727\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3644
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3644() {
            this.Manager.BeginTest("BVTsS3644");
            this.Manager.Comment("reaching state \'S3644\'");
            string temp2799;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length250,NoHeader)\'");
            temp2799 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3645\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2799 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3645)", TestManagerHelpers.Describe(temp2799)));
            this.Manager.Comment("reaching state \'S5728\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3646
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3646() {
            this.Manager.BeginTest("BVTsS3646");
            this.Manager.Comment("reaching state \'S3646\'");
            string temp2800;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length250,CorrectHeader)\'");
            temp2800 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3647\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2800 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3647)", TestManagerHelpers.Describe(temp2800)));
            this.Manager.Comment("reaching state \'S5729\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3648
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3648() {
            this.Manager.BeginTest("BVTsS3648");
            this.Manager.Comment("reaching state \'S3648\'");
            string temp2801;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length500,CorrectHeader)\'");
            temp2801 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3649\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2801 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3649)", TestManagerHelpers.Describe(temp2801)));
            this.Manager.Comment("reaching state \'S5730\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3650
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3650() {
            this.Manager.BeginTest("BVTsS3650");
            this.Manager.Comment("reaching state \'S3650\'");
            string temp2802;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length250,CorrectHeader)\'");
            temp2802 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3651\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2802 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3651)", TestManagerHelpers.Describe(temp2802)));
            this.Manager.Comment("reaching state \'S5731\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3652
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3652() {
            this.Manager.BeginTest("BVTsS3652");
            this.Manager.Comment("reaching state \'S3652\'");
            string temp2803;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length250,CorrectHeader)\'");
            temp2803 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3653\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2803 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3653)", TestManagerHelpers.Describe(temp2803)));
            this.Manager.Comment("reaching state \'S5732\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3654
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3654() {
            this.Manager.BeginTest("BVTsS3654");
            this.Manager.Comment("reaching state \'S3654\'");
            string temp2804;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length250,WrongHeader)\'");
            temp2804 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3655\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2804 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3655)", TestManagerHelpers.Describe(temp2804)));
            this.Manager.Comment("reaching state \'S5733\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3656
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3656() {
            this.Manager.BeginTest("BVTsS3656");
            this.Manager.Comment("reaching state \'S3656\'");
            string temp2805;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length0,WrongHeader)\'");
            temp2805 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3657\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2805 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3657)", TestManagerHelpers.Describe(temp2805)));
            this.Manager.Comment("reaching state \'S5734\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3658
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3658() {
            this.Manager.BeginTest("BVTsS3658");
            this.Manager.Comment("reaching state \'S3658\'");
            string temp2806;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length0,WrongHeader)\'");
            temp2806 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3659\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2806 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3659)", TestManagerHelpers.Describe(temp2806)));
            this.Manager.Comment("reaching state \'S5735\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3660
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3660() {
            this.Manager.BeginTest("BVTsS3660");
            this.Manager.Comment("reaching state \'S3660\'");
            string temp2807;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length1,WrongHeader)\'");
            temp2807 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3661\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2807 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3661)", TestManagerHelpers.Describe(temp2807)));
            this.Manager.Comment("reaching state \'S5736\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3662
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3662() {
            this.Manager.BeginTest("BVTsS3662");
            this.Manager.Comment("reaching state \'S3662\'");
            string temp2808;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length251,WrongHeader)\'");
            temp2808 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3663\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2808 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3663)", TestManagerHelpers.Describe(temp2808)));
            this.Manager.Comment("reaching state \'S5737\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3664
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3664() {
            this.Manager.BeginTest("BVTsS3664");
            this.Manager.Comment("reaching state \'S3664\'");
            string temp2809;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length251,NoHeader)\'");
            temp2809 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3665\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2809 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3665)", TestManagerHelpers.Describe(temp2809)));
            this.Manager.Comment("reaching state \'S5738\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3666
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3666() {
            this.Manager.BeginTest("BVTsS3666");
            this.Manager.Comment("reaching state \'S3666\'");
            string temp2810;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length1,NoHeader)\'");
            temp2810 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3667\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2810 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3667)", TestManagerHelpers.Describe(temp2810)));
            this.Manager.Comment("reaching state \'S5739\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3668
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3668() {
            this.Manager.BeginTest("BVTsS3668");
            this.Manager.Comment("reaching state \'S3668\'");
            string temp2811;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length251,NoHeader)\'");
            temp2811 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3669\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2811 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3669)", TestManagerHelpers.Describe(temp2811)));
            this.Manager.Comment("reaching state \'S5740\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3670() {
            this.Manager.BeginTest("BVTsS3670");
            this.Manager.Comment("reaching state \'S3670\'");
            string temp2812;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length1,NoHeader)\'");
            temp2812 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3671\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2812 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3671)", TestManagerHelpers.Describe(temp2812)));
            this.Manager.Comment("reaching state \'S5741\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3672
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3672() {
            this.Manager.BeginTest("BVTsS3672");
            this.Manager.Comment("reaching state \'S3672\'");
            string temp2813;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length1,WrongHeader)\'");
            temp2813 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3673\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2813 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3673)", TestManagerHelpers.Describe(temp2813)));
            this.Manager.Comment("reaching state \'S5742\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3674
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3674() {
            this.Manager.BeginTest("BVTsS3674");
            this.Manager.Comment("reaching state \'S3674\'");
            string temp2814;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length1,CorrectHeader)\'");
            temp2814 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3675\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2814 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3675)", TestManagerHelpers.Describe(temp2814)));
            this.Manager.Comment("reaching state \'S5743\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3676
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3676() {
            this.Manager.BeginTest("BVTsS3676");
            this.Manager.Comment("reaching state \'S3676\'");
            string temp2815;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length1,CorrectHeader)\'");
            temp2815 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3677\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2815 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3677)", TestManagerHelpers.Describe(temp2815)));
            this.Manager.Comment("reaching state \'S5744\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3678
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3678() {
            this.Manager.BeginTest("BVTsS3678");
            this.Manager.Comment("reaching state \'S3678\'");
            string temp2816;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length251,WrongHeader)\'");
            temp2816 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3679\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2816 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3679)", TestManagerHelpers.Describe(temp2816)));
            this.Manager.Comment("reaching state \'S5745\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3680
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3680() {
            this.Manager.BeginTest("BVTsS3680");
            this.Manager.Comment("reaching state \'S3680\'");
            string temp2817;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length251,WrongHeader)\'");
            temp2817 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3681\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2817 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3681)", TestManagerHelpers.Describe(temp2817)));
            this.Manager.Comment("reaching state \'S5746\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3682
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3682() {
            this.Manager.BeginTest("BVTsS3682");
            this.Manager.Comment("reaching state \'S3682\'");
            string temp2818;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length1,WrongHeader)\'");
            temp2818 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3683\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2818 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3683)", TestManagerHelpers.Describe(temp2818)));
            this.Manager.Comment("reaching state \'S5747\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3684
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3684() {
            this.Manager.BeginTest("BVTsS3684");
            this.Manager.Comment("reaching state \'S3684\'");
            string temp2819;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length500,NoHeader)\'");
            temp2819 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3685\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2819 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3685)", TestManagerHelpers.Describe(temp2819)));
            this.Manager.Comment("reaching state \'S5748\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3686
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3686() {
            this.Manager.BeginTest("BVTsS3686");
            this.Manager.Comment("reaching state \'S3686\'");
            string temp2820;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length0,CorrectHeader)\'");
            temp2820 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3687\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2820 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3687)", TestManagerHelpers.Describe(temp2820)));
            this.Manager.Comment("reaching state \'S5749\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3688
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3688() {
            this.Manager.BeginTest("BVTsS3688");
            this.Manager.Comment("reaching state \'S3688\'");
            string temp2821;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length500,WrongHeader)\'");
            temp2821 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3689\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2821 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3689)", TestManagerHelpers.Describe(temp2821)));
            this.Manager.Comment("reaching state \'S5750\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3690
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3690() {
            this.Manager.BeginTest("BVTsS3690");
            this.Manager.Comment("reaching state \'S3690\'");
            string temp2822;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length0,CorrectHeader)\'");
            temp2822 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3691\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2822 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3691)", TestManagerHelpers.Describe(temp2822)));
            this.Manager.Comment("reaching state \'S5751\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3692
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3692() {
            this.Manager.BeginTest("BVTsS3692");
            this.Manager.Comment("reaching state \'S3692\'");
            string temp2823;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length0,NoHeader)\'");
            temp2823 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3693\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2823 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3693)", TestManagerHelpers.Describe(temp2823)));
            this.Manager.Comment("reaching state \'S5752\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3694
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3694() {
            this.Manager.BeginTest("BVTsS3694");
            this.Manager.Comment("reaching state \'S3694\'");
            string temp2824;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length0,NoHeader)\'");
            temp2824 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3695\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2824 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3695)", TestManagerHelpers.Describe(temp2824)));
            this.Manager.Comment("reaching state \'S5753\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3696
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3696() {
            this.Manager.BeginTest("BVTsS3696");
            this.Manager.Comment("reaching state \'S3696\'");
            string temp2825;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length251,CorrectHeader)\'");
            temp2825 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3697\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2825 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3697)", TestManagerHelpers.Describe(temp2825)));
            this.Manager.Comment("reaching state \'S5754\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3698
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3698() {
            this.Manager.BeginTest("BVTsS3698");
            this.Manager.Comment("reaching state \'S3698\'");
            string temp2826;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length500,NoHeader)\'");
            temp2826 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3699\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2826 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3699)", TestManagerHelpers.Describe(temp2826)));
            this.Manager.Comment("reaching state \'S5755\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3700
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3700() {
            this.Manager.BeginTest("BVTsS3700");
            this.Manager.Comment("reaching state \'S3700\'");
            string temp2827;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length251,NoHeader)\'");
            temp2827 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3701\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2827 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3701)", TestManagerHelpers.Describe(temp2827)));
            this.Manager.Comment("reaching state \'S5756\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3702
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3702() {
            this.Manager.BeginTest("BVTsS3702");
            this.Manager.Comment("reaching state \'S3702\'");
            string temp2828;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length500,WrongHeader)\'");
            temp2828 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3703\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2828 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3703)", TestManagerHelpers.Describe(temp2828)));
            this.Manager.Comment("reaching state \'S5757\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3704
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3704() {
            this.Manager.BeginTest("BVTsS3704");
            this.Manager.Comment("reaching state \'S3704\'");
            string temp2829;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length251,CorrectHeader)\'");
            temp2829 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3705\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2829 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3705)", TestManagerHelpers.Describe(temp2829)));
            this.Manager.Comment("reaching state \'S5758\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3706
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3706() {
            this.Manager.BeginTest("BVTsS3706");
            this.Manager.Comment("reaching state \'S3706\'");
            string temp2830;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length500,WrongHeader)\'");
            temp2830 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3707\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2830 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3707)", TestManagerHelpers.Describe(temp2830)));
            this.Manager.Comment("reaching state \'S5759\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3708
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3708() {
            this.Manager.BeginTest("BVTsS3708");
            this.Manager.Comment("reaching state \'S3708\'");
            string temp2831;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length250,WrongHeader)\'");
            temp2831 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3709\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2831 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3709)", TestManagerHelpers.Describe(temp2831)));
            this.Manager.Comment("reaching state \'S5760\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3710
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3710() {
            this.Manager.BeginTest("BVTsS3710");
            this.Manager.Comment("reaching state \'S3710\'");
            string temp2832;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length500,CorrectHeader)\'");
            temp2832 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3711\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2832 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3711)", TestManagerHelpers.Describe(temp2832)));
            this.Manager.Comment("reaching state \'S5761\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3712
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3712() {
            this.Manager.BeginTest("BVTsS3712");
            this.Manager.Comment("reaching state \'S3712\'");
            string temp2833;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length250,NoHeader)\'");
            temp2833 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3713\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2833 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3713)", TestManagerHelpers.Describe(temp2833)));
            this.Manager.Comment("reaching state \'S5762\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3714
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3714() {
            this.Manager.BeginTest("BVTsS3714");
            this.Manager.Comment("reaching state \'S3714\'");
            string temp2834;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length251,CorrectHeader)\'");
            temp2834 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3715\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2834 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3715)", TestManagerHelpers.Describe(temp2834)));
            this.Manager.Comment("reaching state \'S5763\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3716
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3716() {
            this.Manager.BeginTest("BVTsS3716");
            this.Manager.Comment("reaching state \'S3716\'");
            string temp2835;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length1,CorrectHeader)\'");
            temp2835 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3717\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp2835 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S3717)", TestManagerHelpers.Describe(temp2835)));
            this.Manager.Comment("reaching state \'S5764\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3718
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3718() {
            this.Manager.BeginTest("BVTsS3718");
            this.Manager.Comment("reaching state \'S3718\'");
            string temp2836;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length500,NoHeader)\'");
            temp2836 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3719\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2836 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3719)", TestManagerHelpers.Describe(temp2836)));
            this.Manager.Comment("reaching state \'S5765\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3720
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3720() {
            this.Manager.BeginTest("BVTsS3720");
            this.Manager.Comment("reaching state \'S3720\'");
            string temp2837;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length250,WrongHeader)\'");
            temp2837 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3721\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2837 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3721)", TestManagerHelpers.Describe(temp2837)));
            this.Manager.Comment("reaching state \'S5766\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3722
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3722() {
            this.Manager.BeginTest("BVTsS3722");
            this.Manager.Comment("reaching state \'S3722\'");
            string temp2838;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length250,NoHeader)\'");
            temp2838 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3723\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2838 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3723)", TestManagerHelpers.Describe(temp2838)));
            this.Manager.Comment("reaching state \'S5767\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3724
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3724() {
            this.Manager.BeginTest("BVTsS3724");
            this.Manager.Comment("reaching state \'S3724\'");
            string temp2839;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length0,WrongHeader)\'");
            temp2839 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3725\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2839 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GamePublisherSearch, st" +
                        "ate S3725)", TestManagerHelpers.Describe(temp2839)));
            this.Manager.Comment("reaching state \'S5768\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3726
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3726() {
            this.Manager.BeginTest("BVTsS3726");
            this.Manager.Comment("reaching state \'S3726\'");
            string temp2840;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length500,NoHeader)\'");
            temp2840 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3727\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2840 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3727)", TestManagerHelpers.Describe(temp2840)));
            this.Manager.Comment("reaching state \'S5769\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3728
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3728() {
            this.Manager.BeginTest("BVTsS3728");
            this.Manager.Comment("reaching state \'S3728\'");
            string temp2841;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length500,CorrectHeader)\'");
            temp2841 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3729\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2841 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3729)", TestManagerHelpers.Describe(temp2841)));
            this.Manager.Comment("reaching state \'S5770\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3730
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3730() {
            this.Manager.BeginTest("BVTsS3730");
            this.Manager.Comment("reaching state \'S3730\'");
            string temp2842;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length500,NoHeader)\'");
            temp2842 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3731\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2842 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3731)", TestManagerHelpers.Describe(temp2842)));
            this.Manager.Comment("reaching state \'S5771\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3732
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3732() {
            this.Manager.BeginTest("BVTsS3732");
            this.Manager.Comment("reaching state \'S3732\'");
            string temp2843;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length0,CorrectHeader)" +
                    "\'");
            temp2843 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3733\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2843 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3733)", TestManagerHelpers.Describe(temp2843)));
            this.Manager.Comment("reaching state \'S5772\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3734
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3734() {
            this.Manager.BeginTest("BVTsS3734");
            this.Manager.Comment("reaching state \'S3734\'");
            string temp2844;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length250,CorrectHeade" +
                    "r)\'");
            temp2844 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3735\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2844 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3735)", TestManagerHelpers.Describe(temp2844)));
            this.Manager.Comment("reaching state \'S5773\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3736
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3736() {
            this.Manager.BeginTest("BVTsS3736");
            this.Manager.Comment("reaching state \'S3736\'");
            string temp2845;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length500,CorrectHeade" +
                    "r)\'");
            temp2845 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3737\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2845 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3737)", TestManagerHelpers.Describe(temp2845)));
            this.Manager.Comment("reaching state \'S5774\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3738
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3738() {
            this.Manager.BeginTest("BVTsS3738");
            this.Manager.Comment("reaching state \'S3738\'");
            string temp2846;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length250,CorrectHeader)\'");
            temp2846 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3739\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2846 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3739)", TestManagerHelpers.Describe(temp2846)));
            this.Manager.Comment("reaching state \'S5775\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3740
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3740() {
            this.Manager.BeginTest("BVTsS3740");
            this.Manager.Comment("reaching state \'S3740\'");
            string temp2847;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length0,CorrectHeader)\'");
            temp2847 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3741\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2847 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3741)", TestManagerHelpers.Describe(temp2847)));
            this.Manager.Comment("reaching state \'S5776\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3742
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3742() {
            this.Manager.BeginTest("BVTsS3742");
            this.Manager.Comment("reaching state \'S3742\'");
            string temp2848;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length250,WrongHeader)\'");
            temp2848 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3743\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2848 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3743)", TestManagerHelpers.Describe(temp2848)));
            this.Manager.Comment("reaching state \'S5777\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3744
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3744() {
            this.Manager.BeginTest("BVTsS3744");
            this.Manager.Comment("reaching state \'S3744\'");
            string temp2849;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length0,WrongHeader)\'");
            temp2849 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3745\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2849 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3745)", TestManagerHelpers.Describe(temp2849)));
            this.Manager.Comment("reaching state \'S5778\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3746
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3746() {
            this.Manager.BeginTest("BVTsS3746");
            this.Manager.Comment("reaching state \'S3746\'");
            string temp2850;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length250,NoHeader)\'");
            temp2850 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3747\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2850 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3747)", TestManagerHelpers.Describe(temp2850)));
            this.Manager.Comment("reaching state \'S5779\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3748
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3748() {
            this.Manager.BeginTest("BVTsS3748");
            this.Manager.Comment("reaching state \'S3748\'");
            string temp2851;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length0,NoHeader)\'");
            temp2851 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3749\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2851 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3749)", TestManagerHelpers.Describe(temp2851)));
            this.Manager.Comment("reaching state \'S5780\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3750
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3750() {
            this.Manager.BeginTest("BVTsS3750");
            this.Manager.Comment("reaching state \'S3750\'");
            string temp2852;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length250,CorrectHead" +
                    "er)\'");
            temp2852 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3751\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2852 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3751)", TestManagerHelpers.Describe(temp2852)));
            this.Manager.Comment("reaching state \'S5781\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3752
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3752() {
            this.Manager.BeginTest("BVTsS3752");
            this.Manager.Comment("reaching state \'S3752\'");
            string temp2853;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length0,CorrectHeader" +
                    ")\'");
            temp2853 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3753\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2853 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3753)", TestManagerHelpers.Describe(temp2853)));
            this.Manager.Comment("reaching state \'S5782\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3754
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3754() {
            this.Manager.BeginTest("BVTsS3754");
            this.Manager.Comment("reaching state \'S3754\'");
            string temp2854;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length250,NoHeader)\'");
            temp2854 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3755\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2854 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3755)", TestManagerHelpers.Describe(temp2854)));
            this.Manager.Comment("reaching state \'S5783\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3756
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3756() {
            this.Manager.BeginTest("BVTsS3756");
            this.Manager.Comment("reaching state \'S3756\'");
            string temp2855;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length0,NoHeader)\'");
            temp2855 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3757\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2855 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3757)", TestManagerHelpers.Describe(temp2855)));
            this.Manager.Comment("reaching state \'S5784\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3758
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3758() {
            this.Manager.BeginTest("BVTsS3758");
            this.Manager.Comment("reaching state \'S3758\'");
            string temp2856;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length0,NoHeader)\'");
            temp2856 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3759\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2856 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3759)", TestManagerHelpers.Describe(temp2856)));
            this.Manager.Comment("reaching state \'S5785\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3760
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3760() {
            this.Manager.BeginTest("BVTsS3760");
            this.Manager.Comment("reaching state \'S3760\'");
            string temp2857;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length500,NoHeader)\'");
            temp2857 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3761\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2857 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3761)", TestManagerHelpers.Describe(temp2857)));
            this.Manager.Comment("reaching state \'S5786\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3762
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3762() {
            this.Manager.BeginTest("BVTsS3762");
            this.Manager.Comment("reaching state \'S3762\'");
            string temp2858;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length251,CorrectHeade" +
                    "r)\'");
            temp2858 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3763\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2858 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3763)", TestManagerHelpers.Describe(temp2858)));
            this.Manager.Comment("reaching state \'S5787\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3764
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3764() {
            this.Manager.BeginTest("BVTsS3764");
            this.Manager.Comment("reaching state \'S3764\'");
            string temp2859;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length1,CorrectHeader)" +
                    "\'");
            temp2859 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3765\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2859 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3765)", TestManagerHelpers.Describe(temp2859)));
            this.Manager.Comment("reaching state \'S5788\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3766
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3766() {
            this.Manager.BeginTest("BVTsS3766");
            this.Manager.Comment("reaching state \'S3766\'");
            string temp2860;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length500,CorrectHeader)\'");
            temp2860 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3767\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2860 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3767)", TestManagerHelpers.Describe(temp2860)));
            this.Manager.Comment("reaching state \'S5789\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3768
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3768() {
            this.Manager.BeginTest("BVTsS3768");
            this.Manager.Comment("reaching state \'S3768\'");
            string temp2861;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length500,WrongHeader)\'");
            temp2861 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3769\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2861 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3769)", TestManagerHelpers.Describe(temp2861)));
            this.Manager.Comment("reaching state \'S5790\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3770
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3770() {
            this.Manager.BeginTest("BVTsS3770");
            this.Manager.Comment("reaching state \'S3770\'");
            string temp2862;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length250,WrongHeader)" +
                    "\'");
            temp2862 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3771\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2862 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3771)", TestManagerHelpers.Describe(temp2862)));
            this.Manager.Comment("reaching state \'S5791\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3772
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3772() {
            this.Manager.BeginTest("BVTsS3772");
            this.Manager.Comment("reaching state \'S3772\'");
            string temp2863;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length250,NoHeader)\'");
            temp2863 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3773\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2863 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3773)", TestManagerHelpers.Describe(temp2863)));
            this.Manager.Comment("reaching state \'S5792\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3774
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3774() {
            this.Manager.BeginTest("BVTsS3774");
            this.Manager.Comment("reaching state \'S3774\'");
            string temp2864;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length0,NoHeader)\'");
            temp2864 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3775\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2864 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3775)", TestManagerHelpers.Describe(temp2864)));
            this.Manager.Comment("reaching state \'S5793\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3776
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3776() {
            this.Manager.BeginTest("BVTsS3776");
            this.Manager.Comment("reaching state \'S3776\'");
            string temp2865;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length500,NoHeader)\'");
            temp2865 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3777\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2865 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3777)", TestManagerHelpers.Describe(temp2865)));
            this.Manager.Comment("reaching state \'S5794\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3778
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3778() {
            this.Manager.BeginTest("BVTsS3778");
            this.Manager.Comment("reaching state \'S3778\'");
            string temp2866;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length250,CorrectHeade" +
                    "r)\'");
            temp2866 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3779\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2866 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3779)", TestManagerHelpers.Describe(temp2866)));
            this.Manager.Comment("reaching state \'S5795\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3780
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3780() {
            this.Manager.BeginTest("BVTsS3780");
            this.Manager.Comment("reaching state \'S3780\'");
            string temp2867;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length250,CorrectHea" +
                    "der)\'");
            temp2867 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3781\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2867 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3781)", TestManagerHelpers.Describe(temp2867)));
            this.Manager.Comment("reaching state \'S5796\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3782
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3782() {
            this.Manager.BeginTest("BVTsS3782");
            this.Manager.Comment("reaching state \'S3782\'");
            string temp2868;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length0,CorrectHeade" +
                    "r)\'");
            temp2868 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3783\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2868 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3783)", TestManagerHelpers.Describe(temp2868)));
            this.Manager.Comment("reaching state \'S5797\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3784
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3784() {
            this.Manager.BeginTest("BVTsS3784");
            this.Manager.Comment("reaching state \'S3784\'");
            string temp2869;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length250,WrongHeade" +
                    "r)\'");
            temp2869 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3785\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2869 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3785)", TestManagerHelpers.Describe(temp2869)));
            this.Manager.Comment("reaching state \'S5798\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3786
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3786() {
            this.Manager.BeginTest("BVTsS3786");
            this.Manager.Comment("reaching state \'S3786\'");
            string temp2870;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length250,WrongHeader)\'");
            temp2870 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3787\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2870 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3787)", TestManagerHelpers.Describe(temp2870)));
            this.Manager.Comment("reaching state \'S5799\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3788
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3788() {
            this.Manager.BeginTest("BVTsS3788");
            this.Manager.Comment("reaching state \'S3788\'");
            string temp2871;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length250,WrongHeader" +
                    ")\'");
            temp2871 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3789\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2871 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3789)", TestManagerHelpers.Describe(temp2871)));
            this.Manager.Comment("reaching state \'S5800\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3790
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3790() {
            this.Manager.BeginTest("BVTsS3790");
            this.Manager.Comment("reaching state \'S3790\'");
            string temp2872;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length250,NoHeader)\'");
            temp2872 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3791\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2872 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3791)", TestManagerHelpers.Describe(temp2872)));
            this.Manager.Comment("reaching state \'S5801\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3792
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3792() {
            this.Manager.BeginTest("BVTsS3792");
            this.Manager.Comment("reaching state \'S3792\'");
            string temp2873;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length0,NoHeader)\'");
            temp2873 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3793\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2873 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3793)", TestManagerHelpers.Describe(temp2873)));
            this.Manager.Comment("reaching state \'S5802\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3794
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3794() {
            this.Manager.BeginTest("BVTsS3794");
            this.Manager.Comment("reaching state \'S3794\'");
            string temp2874;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length0,CorrectHeader)\'");
            temp2874 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3795\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2874 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3795)", TestManagerHelpers.Describe(temp2874)));
            this.Manager.Comment("reaching state \'S5803\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3796
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3796() {
            this.Manager.BeginTest("BVTsS3796");
            this.Manager.Comment("reaching state \'S3796\'");
            string temp2875;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length0,WrongHeader)\'");
            temp2875 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3797\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2875 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3797)", TestManagerHelpers.Describe(temp2875)));
            this.Manager.Comment("reaching state \'S5804\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3798
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3798() {
            this.Manager.BeginTest("BVTsS3798");
            this.Manager.Comment("reaching state \'S3798\'");
            string temp2876;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length0,WrongHeader)\'" +
                    "");
            temp2876 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3799\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2876 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3799)", TestManagerHelpers.Describe(temp2876)));
            this.Manager.Comment("reaching state \'S5805\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3800
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3800() {
            this.Manager.BeginTest("BVTsS3800");
            this.Manager.Comment("reaching state \'S3800\'");
            string temp2877;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length500,NoHeader)\'");
            temp2877 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3801\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2877 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3801)", TestManagerHelpers.Describe(temp2877)));
            this.Manager.Comment("reaching state \'S5806\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3802
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3802() {
            this.Manager.BeginTest("BVTsS3802");
            this.Manager.Comment("reaching state \'S3802\'");
            string temp2878;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length500,CorrectHead" +
                    "er)\'");
            temp2878 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3803\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2878 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3803)", TestManagerHelpers.Describe(temp2878)));
            this.Manager.Comment("reaching state \'S5807\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3804
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3804() {
            this.Manager.BeginTest("BVTsS3804");
            this.Manager.Comment("reaching state \'S3804\'");
            string temp2879;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length251,CorrectHead" +
                    "er)\'");
            temp2879 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3805\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2879 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3805)", TestManagerHelpers.Describe(temp2879)));
            this.Manager.Comment("reaching state \'S5808\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3806
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3806() {
            this.Manager.BeginTest("BVTsS3806");
            this.Manager.Comment("reaching state \'S3806\'");
            string temp2880;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length250,CorrectHeader)\'");
            temp2880 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3807\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2880 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3807)", TestManagerHelpers.Describe(temp2880)));
            this.Manager.Comment("reaching state \'S5809\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3808
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3808() {
            this.Manager.BeginTest("BVTsS3808");
            this.Manager.Comment("reaching state \'S3808\'");
            string temp2881;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length0,CorrectHeader)" +
                    "\'");
            temp2881 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3809\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2881 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3809)", TestManagerHelpers.Describe(temp2881)));
            this.Manager.Comment("reaching state \'S5810\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3810
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3810() {
            this.Manager.BeginTest("BVTsS3810");
            this.Manager.Comment("reaching state \'S3810\'");
            string temp2882;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length0,WrongHeader)\'");
            temp2882 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3811\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2882 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3811)", TestManagerHelpers.Describe(temp2882)));
            this.Manager.Comment("reaching state \'S5811\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3812
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3812() {
            this.Manager.BeginTest("BVTsS3812");
            this.Manager.Comment("reaching state \'S3812\'");
            string temp2883;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length250,WrongHeader)" +
                    "\'");
            temp2883 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3813\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2883 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3813)", TestManagerHelpers.Describe(temp2883)));
            this.Manager.Comment("reaching state \'S5812\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3814
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3814() {
            this.Manager.BeginTest("BVTsS3814");
            this.Manager.Comment("reaching state \'S3814\'");
            string temp2884;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length250,NoHeader)\'");
            temp2884 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3815\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2884 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3815)", TestManagerHelpers.Describe(temp2884)));
            this.Manager.Comment("reaching state \'S5813\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3816
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3816() {
            this.Manager.BeginTest("BVTsS3816");
            this.Manager.Comment("reaching state \'S3816\'");
            string temp2885;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length500,CorrectHeade" +
                    "r)\'");
            temp2885 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3817\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2885 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3817)", TestManagerHelpers.Describe(temp2885)));
            this.Manager.Comment("reaching state \'S5814\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3818
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3818() {
            this.Manager.BeginTest("BVTsS3818");
            this.Manager.Comment("reaching state \'S3818\'");
            string temp2886;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length0,NoHeader)\'");
            temp2886 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3819\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2886 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3819)", TestManagerHelpers.Describe(temp2886)));
            this.Manager.Comment("reaching state \'S5815\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3820
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3820() {
            this.Manager.BeginTest("BVTsS3820");
            this.Manager.Comment("reaching state \'S3820\'");
            string temp2887;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length500,NoHeader)\'" +
                    "");
            temp2887 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3821\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2887 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3821)", TestManagerHelpers.Describe(temp2887)));
            this.Manager.Comment("reaching state \'S5816\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3822
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3822() {
            this.Manager.BeginTest("BVTsS3822");
            this.Manager.Comment("reaching state \'S3822\'");
            string temp2888;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length500,CorrectHea" +
                    "der)\'");
            temp2888 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3823\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2888 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3823)", TestManagerHelpers.Describe(temp2888)));
            this.Manager.Comment("reaching state \'S5817\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3824
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3824() {
            this.Manager.BeginTest("BVTsS3824");
            this.Manager.Comment("reaching state \'S3824\'");
            string temp2889;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length0,WrongHeader)" +
                    "\'");
            temp2889 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3825\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2889 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3825)", TestManagerHelpers.Describe(temp2889)));
            this.Manager.Comment("reaching state \'S5818\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3826
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3826() {
            this.Manager.BeginTest("BVTsS3826");
            this.Manager.Comment("reaching state \'S3826\'");
            string temp2890;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length251,WrongHeader)\'");
            temp2890 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3827\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2890 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3827)", TestManagerHelpers.Describe(temp2890)));
            this.Manager.Comment("reaching state \'S5819\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3828
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3828() {
            this.Manager.BeginTest("BVTsS3828");
            this.Manager.Comment("reaching state \'S3828\'");
            string temp2891;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length251,WrongHeader)" +
                    "\'");
            temp2891 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3829\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2891 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3829)", TestManagerHelpers.Describe(temp2891)));
            this.Manager.Comment("reaching state \'S5820\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3830
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3830() {
            this.Manager.BeginTest("BVTsS3830");
            this.Manager.Comment("reaching state \'S3830\'");
            string temp2892;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length251,WrongHeade" +
                    "r)\'");
            temp2892 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3831\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2892 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3831)", TestManagerHelpers.Describe(temp2892)));
            this.Manager.Comment("reaching state \'S5821\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3832
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3832() {
            this.Manager.BeginTest("BVTsS3832");
            this.Manager.Comment("reaching state \'S3832\'");
            string temp2893;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length251,NoHeader)\'");
            temp2893 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3833\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2893 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3833)", TestManagerHelpers.Describe(temp2893)));
            this.Manager.Comment("reaching state \'S5822\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3834
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3834() {
            this.Manager.BeginTest("BVTsS3834");
            this.Manager.Comment("reaching state \'S3834\'");
            string temp2894;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length1,NoHeader)\'");
            temp2894 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3835\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2894 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3835)", TestManagerHelpers.Describe(temp2894)));
            this.Manager.Comment("reaching state \'S5823\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3836
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3836() {
            this.Manager.BeginTest("BVTsS3836");
            this.Manager.Comment("reaching state \'S3836\'");
            string temp2895;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length1,NoHeader)\'");
            temp2895 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3837\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2895 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3837)", TestManagerHelpers.Describe(temp2895)));
            this.Manager.Comment("reaching state \'S5824\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3838
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3838() {
            this.Manager.BeginTest("BVTsS3838");
            this.Manager.Comment("reaching state \'S3838\'");
            string temp2896;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length1,CorrectHeader)\'");
            temp2896 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3839\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2896 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3839)", TestManagerHelpers.Describe(temp2896)));
            this.Manager.Comment("reaching state \'S5825\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3840
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3840() {
            this.Manager.BeginTest("BVTsS3840");
            this.Manager.Comment("reaching state \'S3840\'");
            string temp2897;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length500,WrongHeader)" +
                    "\'");
            temp2897 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3841\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2897 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3841)", TestManagerHelpers.Describe(temp2897)));
            this.Manager.Comment("reaching state \'S5826\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3842
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3842() {
            this.Manager.BeginTest("BVTsS3842");
            this.Manager.Comment("reaching state \'S3842\'");
            string temp2898;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length251,CorrectHeader)\'");
            temp2898 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3843\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2898 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3843)", TestManagerHelpers.Describe(temp2898)));
            this.Manager.Comment("reaching state \'S5827\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3844
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3844() {
            this.Manager.BeginTest("BVTsS3844");
            this.Manager.Comment("reaching state \'S3844\'");
            string temp2899;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length1,WrongHeader)\'");
            temp2899 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3845\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2899 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3845)", TestManagerHelpers.Describe(temp2899)));
            this.Manager.Comment("reaching state \'S5828\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3846
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3846() {
            this.Manager.BeginTest("BVTsS3846");
            this.Manager.Comment("reaching state \'S3846\'");
            string temp2900;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length1,WrongHeader)\'");
            temp2900 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3847\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2900 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3847)", TestManagerHelpers.Describe(temp2900)));
            this.Manager.Comment("reaching state \'S5829\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3848
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3848() {
            this.Manager.BeginTest("BVTsS3848");
            this.Manager.Comment("reaching state \'S3848\'");
            string temp2901;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length250,NoHeader)\'" +
                    "");
            temp2901 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3849\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2901 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3849)", TestManagerHelpers.Describe(temp2901)));
            this.Manager.Comment("reaching state \'S5830\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3850
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3850() {
            this.Manager.BeginTest("BVTsS3850");
            this.Manager.Comment("reaching state \'S3850\'");
            string temp2902;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length251,NoHeader)\'" +
                    "");
            temp2902 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3851\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2902 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3851)", TestManagerHelpers.Describe(temp2902)));
            this.Manager.Comment("reaching state \'S5831\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3852
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3852() {
            this.Manager.BeginTest("BVTsS3852");
            this.Manager.Comment("reaching state \'S3852\'");
            string temp2903;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length1,WrongHeader)" +
                    "\'");
            temp2903 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3853\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2903 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3853)", TestManagerHelpers.Describe(temp2903)));
            this.Manager.Comment("reaching state \'S5832\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3854
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3854() {
            this.Manager.BeginTest("BVTsS3854");
            this.Manager.Comment("reaching state \'S3854\'");
            string temp2904;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length500,WrongHeade" +
                    "r)\'");
            temp2904 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3855\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2904 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3855)", TestManagerHelpers.Describe(temp2904)));
            this.Manager.Comment("reaching state \'S5833\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3856
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3856() {
            this.Manager.BeginTest("BVTsS3856");
            this.Manager.Comment("reaching state \'S3856\'");
            string temp2905;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length251,CorrectHea" +
                    "der)\'");
            temp2905 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3857\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2905 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3857)", TestManagerHelpers.Describe(temp2905)));
            this.Manager.Comment("reaching state \'S5834\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3858
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3858() {
            this.Manager.BeginTest("BVTsS3858");
            this.Manager.Comment("reaching state \'S3858\'");
            string temp2906;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length251,NoHeader)\'");
            temp2906 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3859\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2906 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3859)", TestManagerHelpers.Describe(temp2906)));
            this.Manager.Comment("reaching state \'S5835\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3860
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3860() {
            this.Manager.BeginTest("BVTsS3860");
            this.Manager.Comment("reaching state \'S3860\'");
            string temp2907;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length1,NoHeader)\'");
            temp2907 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3861\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2907 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3861)", TestManagerHelpers.Describe(temp2907)));
            this.Manager.Comment("reaching state \'S5836\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3862
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3862() {
            this.Manager.BeginTest("BVTsS3862");
            this.Manager.Comment("reaching state \'S3862\'");
            string temp2908;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length1,CorrectHeade" +
                    "r)\'");
            temp2908 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3863\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2908 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3863)", TestManagerHelpers.Describe(temp2908)));
            this.Manager.Comment("reaching state \'S5837\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3864
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3864() {
            this.Manager.BeginTest("BVTsS3864");
            this.Manager.Comment("reaching state \'S3864\'");
            string temp2909;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length1,NoHeader)\'");
            temp2909 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3865\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2909 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3865)", TestManagerHelpers.Describe(temp2909)));
            this.Manager.Comment("reaching state \'S5838\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3866
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3866() {
            this.Manager.BeginTest("BVTsS3866");
            this.Manager.Comment("reaching state \'S3866\'");
            string temp2910;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length1,WrongHeader)\'" +
                    "");
            temp2910 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3867\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2910 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3867)", TestManagerHelpers.Describe(temp2910)));
            this.Manager.Comment("reaching state \'S5839\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3868
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3868() {
            this.Manager.BeginTest("BVTsS3868");
            this.Manager.Comment("reaching state \'S3868\'");
            string temp2911;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length1,NoHeader)\'");
            temp2911 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3869\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2911 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3869)", TestManagerHelpers.Describe(temp2911)));
            this.Manager.Comment("reaching state \'S5840\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3870
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3870() {
            this.Manager.BeginTest("BVTsS3870");
            this.Manager.Comment("reaching state \'S3870\'");
            string temp2912;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length1,WrongHeader)\'");
            temp2912 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3871\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2912 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3871)", TestManagerHelpers.Describe(temp2912)));
            this.Manager.Comment("reaching state \'S5841\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3872
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3872() {
            this.Manager.BeginTest("BVTsS3872");
            this.Manager.Comment("reaching state \'S3872\'");
            string temp2913;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length1,CorrectHeader" +
                    ")\'");
            temp2913 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3873\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2913 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3873)", TestManagerHelpers.Describe(temp2913)));
            this.Manager.Comment("reaching state \'S5842\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3874
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3874() {
            this.Manager.BeginTest("BVTsS3874");
            this.Manager.Comment("reaching state \'S3874\'");
            string temp2914;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length1,CorrectHeader)\'");
            temp2914 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3875\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2914 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3875)", TestManagerHelpers.Describe(temp2914)));
            this.Manager.Comment("reaching state \'S5843\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3876
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3876() {
            this.Manager.BeginTest("BVTsS3876");
            this.Manager.Comment("reaching state \'S3876\'");
            string temp2915;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length500,WrongHeader" +
                    ")\'");
            temp2915 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3877\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2915 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3877)", TestManagerHelpers.Describe(temp2915)));
            this.Manager.Comment("reaching state \'S5844\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3878
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3878() {
            this.Manager.BeginTest("BVTsS3878");
            this.Manager.Comment("reaching state \'S3878\'");
            string temp2916;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length500,WrongHeader)\'");
            temp2916 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3879\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2916 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3879)", TestManagerHelpers.Describe(temp2916)));
            this.Manager.Comment("reaching state \'S5845\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3880
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3880() {
            this.Manager.BeginTest("BVTsS3880");
            this.Manager.Comment("reaching state \'S3880\'");
            string temp2917;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length251,CorrectHeader)\'");
            temp2917 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3881\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2917 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3881)", TestManagerHelpers.Describe(temp2917)));
            this.Manager.Comment("reaching state \'S5846\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3882
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3882() {
            this.Manager.BeginTest("BVTsS3882");
            this.Manager.Comment("reaching state \'S3882\'");
            string temp2918;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length251,WrongHeader" +
                    ")\'");
            temp2918 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3883\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2918 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3883)", TestManagerHelpers.Describe(temp2918)));
            this.Manager.Comment("reaching state \'S5847\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3884
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3884() {
            this.Manager.BeginTest("BVTsS3884");
            this.Manager.Comment("reaching state \'S3884\'");
            string temp2919;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length251,NoHeader)\'");
            temp2919 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3885\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2919 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3885)", TestManagerHelpers.Describe(temp2919)));
            this.Manager.Comment("reaching state \'S5848\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3886
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3886() {
            this.Manager.BeginTest("BVTsS3886");
            this.Manager.Comment("reaching state \'S3886\'");
            string temp2920;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length0,WrongHeader)\'");
            temp2920 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3887\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2920 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3887)", TestManagerHelpers.Describe(temp2920)));
            this.Manager.Comment("reaching state \'S5849\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3888
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3888() {
            this.Manager.BeginTest("BVTsS3888");
            this.Manager.Comment("reaching state \'S3888\'");
            string temp2921;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length500,WrongHeader)" +
                    "\'");
            temp2921 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3889\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2921 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3889)", TestManagerHelpers.Describe(temp2921)));
            this.Manager.Comment("reaching state \'S5850\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3890
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3890() {
            this.Manager.BeginTest("BVTsS3890");
            this.Manager.Comment("reaching state \'S3890\'");
            string temp2922;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length251,CorrectHeade" +
                    "r)\'");
            temp2922 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3891\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2922 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3891)", TestManagerHelpers.Describe(temp2922)));
            this.Manager.Comment("reaching state \'S5851\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3892
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3892() {
            this.Manager.BeginTest("BVTsS3892");
            this.Manager.Comment("reaching state \'S3892\'");
            string temp2923;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length251,WrongHeader)\'");
            temp2923 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3893\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2923 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3893)", TestManagerHelpers.Describe(temp2923)));
            this.Manager.Comment("reaching state \'S5852\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3894
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3894() {
            this.Manager.BeginTest("BVTsS3894");
            this.Manager.Comment("reaching state \'S3894\'");
            string temp2924;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length251,NoHeader)\'");
            temp2924 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3895\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2924 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3895)", TestManagerHelpers.Describe(temp2924)));
            this.Manager.Comment("reaching state \'S5853\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3896
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3896() {
            this.Manager.BeginTest("BVTsS3896");
            this.Manager.Comment("reaching state \'S3896\'");
            string temp2925;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length1,CorrectHeader)" +
                    "\'");
            temp2925 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3897\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp2925 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S3897)", TestManagerHelpers.Describe(temp2925)));
            this.Manager.Comment("reaching state \'S5854\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3898
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3898() {
            this.Manager.BeginTest("BVTsS3898");
            this.Manager.Comment("reaching state \'S3898\'");
            string temp2926;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length1,WrongHeader)\'");
            temp2926 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3899\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2926 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3899)", TestManagerHelpers.Describe(temp2926)));
            this.Manager.Comment("reaching state \'S5855\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3900
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3900() {
            this.Manager.BeginTest("BVTsS3900");
            this.Manager.Comment("reaching state \'S3900\'");
            string temp2927;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length1,NoHeader)\'");
            temp2927 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3901\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2927 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3901)", TestManagerHelpers.Describe(temp2927)));
            this.Manager.Comment("reaching state \'S5856\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3902
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3902() {
            this.Manager.BeginTest("BVTsS3902");
            this.Manager.Comment("reaching state \'S3902\'");
            string temp2928;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length251,WrongHeader)" +
                    "\'");
            temp2928 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.WrongHeader);
            this.Manager.Comment("reaching state \'S3903\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2928 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3903)", TestManagerHelpers.Describe(temp2928)));
            this.Manager.Comment("reaching state \'S5857\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S3904
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void BVTsS3904() {
            this.Manager.BeginTest("BVTsS3904");
            this.Manager.Comment("reaching state \'S3904\'");
            string temp2929;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length251,NoHeader)\'");
            temp2929 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.NoHeader);
            this.Manager.Comment("reaching state \'S3905\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"WebSGErrorException\"\'");
            this.Manager.Assert((temp2929 == "WebSGErrorException"), String.Format("expected \'\"WebSGErrorException\"\', actual \'{0}\' (return of GameTitleSearch, state " +
                        "S3905)", TestManagerHelpers.Describe(temp2929)));
            this.Manager.Comment("reaching state \'S5858\'");
            this.Manager.EndTest();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\LiveTools\functional\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\InternalEventData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Marketplace.Test.Common.Service
{
    public class InternalEventArguments : EventArgs
    {
        private IAsyncResult result = null;

        public IAsyncResult Result
        {
            get { return result; }
        }

        public InternalEventArguments(IAsyncResult asyncResult)
        {
            result = asyncResult;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\CatalogUtilities.cs ===
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Globalization;
using System.Text;
using System.Threading;

namespace Marketplace.Test.Common.Service
{
    public enum ClientType
    {
        Xbox360 = 2,
        PC = 4
    }

    public enum UserType
    {
        Gold = 2,
        Silver = 3,
        Family = 4,
        Elite = 5
    }

    public enum PaymentType
    {
        Points = 1,
        Token = 2,
        CreditCard = 3
    }

    public class CatalogUtilities
    {
        private const string QUERY_FOR_TITLEID = "SELECT COUNT(*) FROM Game WHERE liveTitleId=0x{0}";
        private const string QUERY_FOR_MEDIA_ID = "SELECT COUNT(*) FROM Media WHERE mediaId=\'{0}\'";
        private const string QUERY_FOR_MEDIA_INSTANCE_ID = "SELECT COUNT(*) FROM MediaInstance WHERE mediaInstanceId=\'{0}\'";
        private const string QUERY_FOR_CONTENT_ID = "SELECT COUNT(*) FROM GameContentInstance WHERE liveContentId=0x{0}";

        private const string MEDIA_ID_BASE = "66acd000-77fe-1000-9115-D80{0}{1}";
        private const string MEDIA_INSTANCE_ID_BASE = "{0}-{1}-40{2}-80{3}-{4}";
        private const string OFFER_ID_BASE = "{0}-0000-4000-8000-0000{1}";
        private const string OFFER_INSTANCE_ID_BASE = "{0}-{1}{2}-400{3}-8000-0000{4}";
        private const string CONTENT_MEDIA_ID_BASE = "00000000-0000-40{0}-80{1}-{2}{3}";
        private const string IMAGE_ID_BASE = "{0}-{1}-4001-8000-{2}{3}";
        private const string FILE_ID_BASE = "{0}-{1}-{2}-{3}-0000{4}";
        private const string RANDOM_HEX_BASE = "0123456789ABCDEF";

        private Dictionary<string, string> settings = new Dictionary<string, string>();
        public Dictionary<string, string> Settings
        {
            get { return settings; }
        }

        public CatalogUtilities() 
        {
            //Load configuration settings for the test cases
            Configuration config = ConfigurationManager.OpenExeConfiguration(
                System.Reflection.Assembly.GetExecutingAssembly().Location);

            foreach (string setting in config.AppSettings.Settings.AllKeys)
            {
                settings.Add(setting, config.AppSettings.Settings[setting].Value);
            }
        }


        Random random = new Random();
        public string GenerateRandomHexValue(int length)
        {
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < length; i++)
            {
                builder.Append(
                    RANDOM_HEX_BASE[random.Next(RANDOM_HEX_BASE.Length - 1)]);
            }

            return builder.ToString();
        }

        public bool LocateExistingTitleId(string serverName, string databaseName, string titleId)
        {
            string queryResult = ExecuteQuery(
               serverName,
               databaseName,
               String.Format(QUERY_FOR_TITLEID, titleId));

            return (Convert.ToInt16(queryResult) > 0);
        }

        public bool LocateExistingMediaId(string serverName, string databaseName, string mediaId)
        {
            string queryResult = ExecuteQuery(
                serverName,
                databaseName,
                String.Format(QUERY_FOR_MEDIA_INSTANCE_ID, mediaId));

            return (Convert.ToInt16(queryResult) > 0);
        }


        public bool LocateExistingMediaInstanceId(string serverName, string databaseName, string mediaInstanceId)
        {
            string queryResult = ExecuteQuery(
                serverName,
                databaseName,
                String.Format(QUERY_FOR_MEDIA_INSTANCE_ID, mediaInstanceId));

            return (Convert.ToInt16(queryResult) > 0);
        }

        public bool LocateExistingContentId(string serverName, string databaseName, string contentId)
        {
            string queryResult = ExecuteQuery(
                serverName,
                databaseName,
                String.Format(QUERY_FOR_CONTENT_ID, contentId));

            return (Convert.ToInt16(queryResult) > 0);
        }

        private string ExecuteQuery(string serverName, string databaseName, string query)
        {
            int attempt = 0;
            string queryResult = String.Empty;

            while (attempt++ < 3)
            {
                try
                {
                    // build the connection string
                    SqlConnectionStringBuilder sqlConnectionStringBuilder = new SqlConnectionStringBuilder();
                    sqlConnectionStringBuilder.ApplicationName = "TestDataCreator";
                    sqlConnectionStringBuilder.DataSource = serverName;
                    sqlConnectionStringBuilder.InitialCatalog = databaseName;
                    sqlConnectionStringBuilder.IntegratedSecurity = true;
                    sqlConnectionStringBuilder.ConnectTimeout = 30;

                    using (SqlConnection connection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
                    {
                        connection.Open();

                        SqlCommand command = connection.CreateCommand();
                        command.CommandText = query;
                        command.CommandTimeout = 30;

                        SqlDataReader reader = command.ExecuteReader();

                        if (reader.HasRows)
                        {
                            reader.Read();
                            return reader[0].ToString();
                        }
                    }
                }
                catch
                {
                    Thread.Sleep(1000);
                }
            }
                        
            return String.Empty;
        }

        public string CreateMediaId(string titleId, ClientType clientType)
        {
            return String.Format(
                MEDIA_ID_BASE,
                (int)clientType,
                titleId);
        }

        public string CreateMediaInstanceId()
        {
            return CreateMediaInstanceId(
                GenerateRandomHexValue(28));
        }

        public string CreateMediaInstanceId(string contentId)
        {
            return String.Format(
                MEDIA_INSTANCE_ID_BASE,
                contentId.Substring(0, 8),
                contentId.Substring(8, 4),
                contentId.Substring(12, 2),
                contentId.Substring(14, 2),
                contentId.Substring(16, 12));
        }

        public string CreateOfferId(string titleId, string uodbOfferId)
        {
            return String.Format(
                OFFER_ID_BASE,
                uodbOfferId,
                titleId);
        }

        public string CreateOfferInstanceId(string titleId, string uodbOfferId, string hexCountryCode, UserType userType, PaymentType paymentType)
        {
            string countryCodePrepend = String.Empty;
            for (int i = 0; i < 3 - hexCountryCode.Length; i++)
            {
                countryCodePrepend += "0";
            }

            return String.Format(
                OFFER_INSTANCE_ID_BASE,
                uodbOfferId,            
                (int)userType,
                countryCodePrepend + hexCountryCode,
                (int)paymentType,
                titleId);            
        }

        public string CreateContentMediaId(string titleId, string uodbOfferId)
        {
            return String.Format(
                CONTENT_MEDIA_ID_BASE,
                uodbOfferId.Substring(0, 2),
                uodbOfferId.Substring(2, 2),
                uodbOfferId.Substring(4, 4),
                titleId);
        }

        public string CreateImageId(string titleId)
        {
            return CreateImageId(titleId, "00000000");
        }

        public string CreateImageId(string titleId, string offerId)
        {
            string imageId = GenerateRandomHexValue(8);
            return String.Format(
                IMAGE_ID_BASE,
                titleId,
                offerId.Substring(0,4),
                offerId.Substring(4,4),
                imageId);
        }

        public string CreateFileId(string titleId, string uodbOfferId)
        {
            string randomHex = GenerateRandomHexValue(12);
            return String.Format(
                FILE_ID_BASE,
                uodbOfferId,
                randomHex.Substring(0,4),
                randomHex.Substring(4,4),
                randomHex.Substring(8,4),
                titleId);
        }

        public string CreateContentId()
        {
            return GenerateRandomHexValue(40);
        }
       

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\ConnectionManager.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Data.SqlClient;
using System.Net;
using System.Text;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Diagnostics;
using xonline.common.config;

namespace Marketplace.Test.Common.Service
{
    /// <summary>
    /// This is a base class to manage the sql connections needed for testing.
    /// Instead of each test opening their own connection to the database, this
    /// will maintain a single connection for all tests to use.  It's abstract
    /// so we can have multiple derived classes that connect to different databases.
    /// </summary>
    public abstract class ConnectionManager
    {
        protected SqlConnection connection;
        public SqlCommand command;
        public SqlDataReader reader;

        private static CMRawCatalogDB catalog;
        public static CMRawCatalogDB Catalog
        {
            get
            {
                if (null == catalog)
                {
                    catalog = new CMRawCatalogDB();
                }

                return catalog;
            }
        }
        
        public ConnectionManager() 
        {
            connection = null;
            reader = null;

            //Config.NpdbServer = "amazonblob2";
        }

        ~ConnectionManager()
        {

        }

        protected abstract void Connect();

        protected void CreateCommand()
        {
            if (null != connection)
            {
                command = connection.CreateCommand();
                command.CommandTimeout = 300;
            }
            else
            {
                Debug.Assert(false, "ConnectionManager error: Couldn't create a command because of a null connection.");
            }
        }

        public bool IsClosed
        {
            get
            {
                if (null == reader ||
                   reader.IsClosed)
                {
                    return true;
                }

                return false;
            }
        }

        public void ExecuteNonQuery(string commandText)
        {
            if (null != reader && !reader.IsClosed)
                reader.Close();

            command.CommandText = commandText;
            command.ExecuteNonQuery();
        }

        public List<string[]> ExecuteQueryGetMultiple(string commandText)
        {
            command.CommandText = commandText;

            if (null != reader && !reader.IsClosed)
                reader.Close();

            reader = command.ExecuteReader();

            int columns = reader.FieldCount;

            //so far I haven't found an easy way to get a count
            //of the number of rows returned, so I'm using a containter
            //that can grow easily.
            List<string[]> queryResults = new List<string[]>();
            while (reader.Read())
            {
                string[] row = new string[columns];
                for (int i = 0; i < columns; ++i)
                {
                    row[i] = reader[i].ToString();
                }

                queryResults.Add(row);
            }

            reader.Close();

            return queryResults;
        }

        public string ExecuteQueryGetSingle(string commandText)
        {
            command.CommandText = commandText;

            if (null != reader && !reader.IsClosed)
                reader.Close();

            reader = command.ExecuteReader();

            string queryResult = null;

            if (reader.HasRows)
            {
                reader.Read();
                queryResult = reader[0].ToString();
            }

            return queryResult;
        }

        public int ExecuteQueryGetSingleInt(string commandText)
        {
            command.CommandText = commandText;

            if (null != reader && !reader.IsClosed)
                reader.Close();

            reader = command.ExecuteReader();

            string queryResult = null;

            if (reader.HasRows)
            {
                reader.Read();
                queryResult = reader[0].ToString();
            }

            return Convert.ToInt32(queryResult);
        }

        public void CloseConnection()
        {
            if (null != reader && !reader.IsClosed)
                reader.Close();

            connection.Close();
        }
    }


    public class CMRawCatalogDB : ConnectionManager
    {
        public CMRawCatalogDB()
        {
            Connect();
            CreateCommand();
        }

        protected override void Connect()
        {
            connection = new SqlConnection(ConfigUtil.FECatalogDBXboxConnectionString);
            connection.Open();
        }

    }

    public class CMNPDB : ConnectionManager
    {
        public CMNPDB()
        {
            Connect();
            CreateCommand();
        }

        protected override void Connect()
        {
            IInterfaceInfo npdbInterface = Config.GetSingleInterface(Interface.npdb);
            connection = new SqlConnection(npdbInterface.SqlConnectionString);
            connection.Open();
        }
    }
} //namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\AsyncResult.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace Marketplace.Test.Common.Service
{
    public class TestAsyncResult : IAsyncResult
    {
        private bool isCompleted = false;
        private object asyncState = null;
        private object customState = null;
        private Guid resultInstanceId = Guid.Empty;
        private AutoResetEvent waitHandle = new AutoResetEvent(false);

        public TestAsyncResult(object state)
        {
            asyncState = state;
            resultInstanceId = Guid.NewGuid();
        }

        #region IAsyncResult Members

        public Guid ResultInstanceId
        {
            get { return resultInstanceId; }
        }

        public object AsyncState
        {
            get { return asyncState; }
        }

        public object CustomState
        {
            get { return customState; }
            set { customState = value; }
        }

        public System.Threading.WaitHandle AsyncWaitHandle
        {
            get { return waitHandle; }
        }

        public bool CompletedSynchronously
        {
            get { return false; }
        }

        public bool IsCompleted
        {
            get { return isCompleted; }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\EventLogUtilities.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;

namespace Marketplace.Test.Common.Service
{
    public partial class SystemUtilities
    {
        #region Fields
        
        #endregion

        #region Properties

        #endregion

        #region Events

        public delegate void EventLogEntryWrittenDelegate(object sender, EventLogEntryWrittenEventArgs eventArgs);

        public event EventLogEntryWrittenDelegate EventLogEntryWritten; 

        #endregion

        #region Event Arguments

        public class EventLogEntryWrittenEventArgs
        {            
            private EventLogData eventData = null;
            private EventLogEntry eventEntry = null;

            public EventLogEntryWrittenEventArgs(EventLogData data, EventLogEntry entry)
            {
                eventData = data;
                eventEntry = entry;
            }
        }

        #endregion

        #region Methods

        public List<EventLogEntry> GetMostRecentEventLogEntries(string logName, TimeSpan history)
        {
            return GetMostRecentEventLogEntries(logName, "localhost", history);
        }

        public List<EventLogEntry> GetMostRecentEventLogEntries(string logName, string machineName, TimeSpan history)
        {
            EventLog eventLog = new EventLog(logName, machineName);
            DateTime historyCutoff = DateTime.Now.Subtract(history);

            List<EventLogEntry> results = new List<EventLogEntry>();
            for (int i = eventLog.Entries.Count; i >= 0; i--)
            {
                if (eventLog.Entries[i].TimeWritten >= historyCutoff)
                {
                    break;
                }
                
                results.Add(eventLog.Entries[i]);
            }

            return results;
        }

        public EventLogEntry WatchForEventToBeWritten(string logName, string machineName, int durationSeconds)
        {
            IAsyncResult result = BeginWatchForEventToBeWritten(logName, machineName, durationSeconds);
            return EndWatchForEventToBeWritten(result);
        }

        public IAsyncResult BeginWatchForEventToBeWritten(string logName, string machineName, int durationSeconds)
        {
            EventLogEntryWrittenDelegate eventLogWritten = new EventLogEntryWrittenDelegate(EventLogWrittenCallback);
            EventLogEntryWritten += eventLogWritten;

            EventLogData data = new EventLogData(logName, machineName, durationSeconds);

            TestAsyncResult result = new TestAsyncResult(data);
            result.CustomState = eventLogWritten;
            internalEventCoordinators.Add(result, new System.Threading.ManualResetEvent(false));

            //stuff
            ThreadPool.QueueUserWorkItem(new WaitCallback(EventMonitorWorker), result);

            return result;
        }

        private void EventMonitorWorker(object state)
        {
            TestAsyncResult result = (TestAsyncResult)state;
            EventLogData data = (EventLogData)result.AsyncState;
            Delegate eventDelegate = (Delegate)result.CustomState;

            EventLog log = new EventLog(data.LogName, data.MachineName);

            DateTime terminationTime = DateTime.Now.AddSeconds(data.DurationSeconds);
            int initialEventCount = log.Entries.Count;

            while (DateTime.Now < terminationTime)
            {

                if (log.Entries.Count == initialEventCount)
                {
                    if (data.Source != String.Empty &&
                        data.Source == log.Entries[log.Entries.Count - 1].Source)
                    {
                        if (null != eventDelegate)
                        {
                            eventDelegate.Method.Invoke(
                                this,
                                new object[] {
                                    data,
                                    log.Entries[log.Entries.Count-1] });
                        }
                    }
                }
            
                Thread.Sleep(1000);
            }
        }

        public EventLogEntry EndWatchForEventToBeWritten(IAsyncResult result)
        {
            return null;
        }


        private void EventLogWrittenCallback(object sender, EventLogEntryWrittenEventArgs eventArgs)
        {

        }

        public void WatchForEventToBeWritten(string logName, string machineName, string source, EventLogEntryType entryType)
        {

        }

        #endregion

        #region Helpers

        public class EventLogData
        {
            public string LogName = String.Empty;
            public string MachineName = String.Empty;
            public string Source = String.Empty;
            public int DurationSeconds = 0;
            
            public EventLogData(string logName, string machineName, int durationSeconds)
            {
                LogName = logName;
                MachineName = machineName;
                DurationSeconds = durationSeconds;
            }

            public EventLogData(string logName, string machineName, string source, int durationSeconds)
            {
                LogName = logName;
                MachineName = machineName;
                DurationSeconds = durationSeconds;
                Source = source;
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\PerformanceCounterUtilities.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;

namespace Marketplace.Test.Common.Service
{
    public partial class SystemUtilities
    {
        public SystemUtilities() { }

        #region Fields

        private Dictionary<IAsyncResult, ManualResetEvent> internalEventCoordinators = new Dictionary<IAsyncResult, ManualResetEvent>();

        #endregion 

        #region Events

        /// <summary>
        /// Delegate for the PerfCounterReachedZero event.
        /// </summary>
        public delegate void PerfCounterReachedZeroDelegate(object sender, PerfCounterReachedZeroEventArgs eventArgs);

        /// <summary>
        /// Delegate for the PerfCounterReachedTarget event.
        /// </summary>
        public delegate void PerfCounterTargetReachedDelegate(object sender, PerfCounterTargetReachedEventArgs eventArgs);

        /// <summary>
        /// PerfcounterTargetReached event fires when there are performance counters being actively monitored and
        /// a specified value was reached for at least one of those counters.
        /// </summary>
        public event PerfCounterTargetReachedDelegate PerfCounterTargetReached;

        /// <summary>
        /// PerfcounterTargetReached event fires when there are performance counters being actively monitored and
        /// a value of zero was reached for at least one of those counters.
        /// </summary>
        public event PerfCounterReachedZeroDelegate PerfCounterReachedZero;

        #endregion

        #region Event Arguments

        /// <summary>
        /// Basic event arguments for the performance counter-related events
        /// </summary>
        public class BasePerfCounterEventArgs : InternalEventArguments
        {
            internal bool GoalAchieved = false;

            /// <summary>
            /// The details for the performance counter that caused the event to be invoked.
            /// </summary>
            public PerformanceCounterData CounterData = null;

            
            /// <summary>
            /// Constructor for the basic event arguments
            /// </summary>
            /// <param name="goalAchieved">Whether or not the event-specific goal was reached</param>
            /// <param name="performanceCounterData">The details for the performance counter that caused the event to be invoked</param>
            public BasePerfCounterEventArgs(
                bool goalAchieved,
                PerformanceCounterData performanceCounterData,
                IAsyncResult result)
                : base(result)
            {
                GoalAchieved = goalAchieved;
                CounterData = performanceCounterData;
            }
        }

        /// <summary>
        /// Event arguments for the PerfCounterReachedZero event
        /// </summary>
        public class PerfCounterReachedZeroEventArgs : BasePerfCounterEventArgs
        {
            /// <summary>
            /// Whether or not the related performance counter reached zero in the time available.
            /// </summary>
            public bool PerformanceCounterReachedZero
            {
                get { return base.GoalAchieved; }
            }

            /// <summary>
            /// Constructor for the PerfCounterReachedZero event arguments
            /// </summary>
            /// <param name="perfCounterReachedZero">Whether or not the related performance counter reached zero in the time available</param>
            /// <param name="performanceCounterData">The details for the performance counter that caused the event to be invoked</param>            
            public PerfCounterReachedZeroEventArgs(bool perfCounterReachedZero, PerformanceCounterData performanceCounterData, IAsyncResult result) 
                : base(perfCounterReachedZero, performanceCounterData, result) { }
        }


        /// <summary>
        /// Event arguments for the PerfCounterTargetReached event
        /// </summary>
        public class PerfCounterTargetReachedEventArgs : BasePerfCounterEventArgs
        {
            /// <summary>
            /// The value of the performance counter taht caused the event to be invoked.
            /// </summary>
            public double PerformanceCounterValue = 0.0;

            /// <summary>
            /// Whether or not the related performance counter target was reached in the time available.
            /// </summary>
            public bool PerformanceCounterTargetReached
            {
                get { return base.GoalAchieved; }
            }

            /// <summary>
            /// Constructor for the PerfCounterReachedZero event arguments
            /// </summary>
            /// <param name="perfCounterReachedZero">Whether or not the related performance counter reached zero in the time available</param>
            /// <param name="performanceCounterData">The details for the performance counter that caused the event to be invoked</param>
            /// <param name="performanceCounterValue">The value of the performance counter that caused the event to be invoked</param>
            public PerfCounterTargetReachedEventArgs(
                bool perfCounterTargetReached, 
                double performanceCounterValue, 
                PerformanceCounterData performanceCounterData,
                IAsyncResult result)
                : base(perfCounterTargetReached,performanceCounterData, result) 
            {
                PerformanceCounterValue = performanceCounterValue;
            }
        }

        #endregion

        #region Methods

        #region GetCurrentCounterValue

        /// <summary>
        /// Retrieve the current value for the specified performance counter
        /// </summary>
        /// <param name="category">The category the performance counter belongs to.</param>
        /// <param name="counter">The name of the performance counter</param>
        /// <param name="instance">The instance of the performance counter to reference (e.g. - _Total)</param>
        /// <param name="machine">The target machine where the performance counter is located.</param>
        /// <returns>The current value of the performance counter.</returns>
        public double GetCurrentCounterValue(string category, string counter, string instance, string machine)
        {
            System.Diagnostics.PerformanceCounter perfCounter = new System.Diagnostics.PerformanceCounter(
                category,
                counter,
                instance,
                machine);

            return perfCounter.NextValue();
        }

        #endregion

        #region WaitForCounterToReachZero

        /// <summary>
        /// Synchronously wait for the specified performance counter to reach zero.
        /// </summary>
        /// <param name="category">The category the performance counter belongs to.</param>
        /// <param name="counter">The name of the performance counter</param>
        /// <param name="instance">The instance of the performance counter to reference (e.g. - _Total)</param>
        /// <param name="machine">The target machine where the performance counter is located.</param>
        /// <param name="duration">The amount of time to wait before timing out.</param>
        /// <returns>True if the counter reached zero, otherwise false.</returns>
        public bool WaitForCounterToReachZero(string category, string counter, string instance, string machine, int duration)
        {
            IAsyncResult result = BeginWaitForCounterToReachZero(category, counter, instance, machine, duration);
            
            return EndWaitForCounterToReachZero(result);
        }

        /// <summary>
        /// Begin to asynchronously wait for the specified performance counter to reach zero.
        /// </summary>
        /// <param name="category">The category the performance counter belongs to.</param>
        /// <param name="counter">The name of the performance counter</param>
        /// <param name="instance">The instance of the performance counter to reference (e.g. - _Total)</param>
        /// <param name="machine">The target machine where the performance counter is located.</param>
        /// <param name="duration">The amount of time to wait before timing out.</param>
        /// <returns>True if the counter reached zero, otherwise false.</returns>
        public IAsyncResult BeginWaitForCounterToReachZero(string category, string counter, string instance, string machine, int duration)
        {
            PerfCounterReachedZeroDelegate eventDelegate =
                new PerfCounterReachedZeroDelegate(PerformanceCounterUtilities_PerfCounterReachedZero);

            PerfCounterReachedZero += eventDelegate;

            PerformanceCounterData data = new PerformanceCounterData(
                    category,
                    counter,
                    instance,
                    machine,                    
                    duration,
                    0,
                    true);

            TestAsyncResult result = new TestAsyncResult(data);
            result.CustomState = eventDelegate;
            internalEventCoordinators.Add(result, new ManualResetEvent(false));

            ThreadPool.QueueUserWorkItem(new WaitCallback(PerfMonitorWorker), result);
            
            return result;
        }

        /// <summary>
        /// Complete the operation to asynchronously wait for a given performance counter to reach a value of zero.
        /// </summary>
        /// <param name="result">The associated asynchronous result object.</param>
        /// <returns>True if the counter reached zero in the time available, otherwise false.</returns>
        public bool EndWaitForCounterToReachZero(IAsyncResult result)
        {
            TestAsyncResult testResult = (TestAsyncResult)result;
            PerformanceCounterData perfData = (PerformanceCounterData)result.AsyncState;
            
            if (!result.AsyncWaitHandle.WaitOne(perfData.Duration))
            {
                internalEventCoordinators.Remove(testResult);
                return false;
            }

            return true;
        }

        void InternalPerfCounterReachedZero(object sender, PerfCounterReachedZeroEventArgs eventArgs)
        {
            List<Delegate> delegates = new List<Delegate>(PerfCounterReachedZero.GetInvocationList());

            AttemptToInvokeEvent(sender, eventArgs, delegates);            
        }

        private void AttemptToInvokeEvent(object sender, EventArgs eventArgs, List<Delegate> delegates)
        {
            //When events are invoked, if one of the delegates throws an exception it prevents all other
            //delegates yet to be invoked from executing.  In this case we would rather remove the offending
            //delegate from the invocation list and continue processing the remaining delegates.
            for (int i = 0; i < delegates.Count; i++)
            {
                try
                {
                    delegates[i].Method.Invoke(sender, new object[] { eventArgs });
                }
                catch
                {
                    delegates.RemoveAt(i--);
                }
            }
        }

        void PerformanceCounterUtilities_PerfCounterReachedZero(object sender, PerfCounterReachedZeroEventArgs eventArgs)
        {
            if (eventArgs.PerformanceCounterReachedZero)
            {
                if (internalEventCoordinators.ContainsKey(eventArgs.Result))
                {
                    internalEventCoordinators[eventArgs.Result].Set();
                    internalEventCoordinators.Remove(eventArgs.Result);
                }
            }
        }

        #endregion

        #region WaitForCounterToReachTarget

        /// <summary>
        /// Synchronously wait for a performance counter to reach a specified target.
        /// </summary>
        /// <param name="category">The category the performanc counter belongs to.</param>
        /// <param name="counter">The name of the performance counter.</param>
        /// <param name="instance">The instance of the performanc counter to reference (e.g. - "_Total").</param>
        /// <param name="machine">The target machine where the performance counter is located.</param>
        /// <param name="duration">The amount of time to wait before timing out.</param>
        /// <param name="desiredValue">The desired target value for the performance counter.</param>
        /// <param name="exactMatch">Whether or not an exact match is required before the operation completes.</param>
        /// <returns>True if the target value was reached, otherwise false.</returns>
        public bool WaitForCounterToReachTarget(string category, string counter, string instance, string machine, int duration, double targetValue, bool exactMatch)
        {
            IAsyncResult result = BeginWaitForCounterToReachTarget(category, counter, instance, machine, duration, targetValue, exactMatch);
            return EndWaitForCounterToReachTarget(result);
        }

        /// <summary>
        /// Begin the asynchronous operation to wait for a performance counter to reach a specified target.
        /// </summary>
        /// <param name="category">The category the performanc counter belongs to.</param>
        /// <param name="counter">The name of the performance counter.</param>
        /// <param name="instance">The instance of the performanc counter to reference (e.g. - "_Total").</param>
        /// <param name="machine">The target machine where the performance counter is located.</param>
        /// <param name="duration">The amount of time to wait before timing out.</param>
        /// <param name="desiredValue">The desired target value for the performance counter.</param>
        /// <param name="exactMatch">Whether or not an exact match is required before the operation completes.</param>
        /// <returns>The associated asynchronous result object.</returns>
        public IAsyncResult BeginWaitForCounterToReachTarget(string category, string counter, string instance, string machine, int duration, double targetValue, bool exactMatch)
        {
            PerfCounterTargetReachedDelegate eventDelegate =
                new PerfCounterTargetReachedDelegate(PerformanceCounterUtilities_PerfCounterTargetReached);
            PerfCounterTargetReached+= eventDelegate;

            PerfCounterTargetReachedDelegate internalDelegate =
                new PerfCounterTargetReachedDelegate(InternalPerfCounterTargetReached);
            
            PerformanceCounterData data = new PerformanceCounterData(
                    category,
                    counter,
                    instance,
                    machine,
                    duration,
                    targetValue,
                    exactMatch);

            TestAsyncResult result = new TestAsyncResult(data);

            result.CustomState = eventDelegate;
            internalEventCoordinators.Add(result, new ManualResetEvent(false));

            ThreadPool.QueueUserWorkItem(new WaitCallback(PerfMonitorWorker), data);
            
            return result;
        }

        /// <summary>
        /// Complete the asynchronous operation to wait for a performance counter to reach a specified target.
        /// </summary>
        /// <param name="result">The operation's result object.</param>
        /// <returns>True if the target value was reached in the time available, otherwise false.</returns>
        public bool EndWaitForCounterToReachTarget(IAsyncResult result)
        {
            PerformanceCounterData perfData = (PerformanceCounterData)result.AsyncState;

            if (!result.AsyncWaitHandle.WaitOne(perfData.Duration))
            {
                internalEventCoordinators.Remove(result);
                return false;
            }

            return true;
        }

        private void PerformanceCounterUtilities_PerfCounterTargetReached(object sender, PerfCounterTargetReachedEventArgs eventArgs)
        {
            if (eventArgs.PerformanceCounterTargetReached)
            {
                if (internalEventCoordinators.ContainsKey(eventArgs.Result))
                {
                    internalEventCoordinators[eventArgs.Result].Set();
                    internalEventCoordinators.Remove(eventArgs.Result);
                }
            }
        }
        
        void InternalPerfCounterTargetReached(object sender, PerfCounterTargetReachedEventArgs eventArgs)
        {
            List<Delegate> delegates = new List<Delegate>(PerfCounterReachedZero.GetInvocationList());
                
            AttemptToInvokeEvent(sender, eventArgs, delegates);
        }
                
        #endregion

        #region Common Event Helpers

        private void PerfMonitorWorker(object state)
        {
            try
            {
                TestAsyncResult result = (TestAsyncResult)state;
                PerformanceCounterData data = (PerformanceCounterData)result.AsyncState;
                Delegate eventDelegate = (Delegate)result.CustomState;

                System.Diagnostics.PerformanceCounter perfCounter = data.PerfCounter;
                double currentValue = perfCounter.NextValue();

                DateTime terminationTime = DateTime.Now.AddSeconds(data.Duration);
                while (terminationTime > DateTime.Now)
                {
                    currentValue = perfCounter.NextValue();

                    if (!data.ExactMatch && currentValue >= data.TargetValue ||
                        data.ExactMatch && currentValue == data.TargetValue)
                    {
                        if (null != eventDelegate)
                        {
                            eventDelegate.Method.Invoke(
                                this,
                                new object[] { 
                                    true,
                                    currentValue,
                                    data,
                                    result});

                            return;
                        }
                    }

                    Thread.Sleep(500);
                }

                if (null != eventDelegate)
                {
                    eventDelegate.Method.Invoke(
                        this,
                        new object[] { 
                            false,
                            0,
                            data,
                            result});
                }
            }
            catch
            {
                //expose via logging once implemented
            }
        }

        #endregion

        #endregion

        #region Helper Classes

        /// <summary>
        /// Performance Counter-Specific Data used in tracking performance counters
        /// and in providing details back to the caller when events are invoked.
        /// </summary>
        public class PerformanceCounterData
        {
            /// <summary>
            /// The category the performance counter belongs to
            /// </summary>
            public string Category = String.Empty;

            /// <summary>
            /// The name of the performance counter
            /// </summary>
            public string Counter = String.Empty;

            /// <summary>
            /// The instance that the performance counter belongs to
            /// </summary>
            public string Instance = String.Empty;

            /// <summary>
            /// The machine where the performance counter exists
            /// </summary>
            public string Machine = String.Empty;

            /// <summary>
            /// The target value that the performance counter is being monitored for.
            /// </summary>
            public double TargetValue = -1;

            /// <summary>
            /// The amount of time in seconds that the performance counter will be monitored
            /// </summary>
            public int Duration = -1;

            /// <summary>
            /// Whether or not an exact performance counter value match is required for the event to fire
            /// </summary>
            public bool ExactMatch = false;

            /// <summary>
            /// The performance counter object which is used to track the performance counter value over time
            /// </summary>
            public PerformanceCounter PerfCounter = null;

            /// <summary>
            /// Constructor for the Performance Counter Data object
            /// </summary>
            /// <param name="category">the category the performance counter belongs to</param>
            /// <param name="counter">The name of the performance counter</param>
            /// <param name="instance">The instance that the performance counter belongs to</param>
            /// <param name="targetMachine">The machine where the performance counter exists</param>
            /// <param name="duration">The amount of time in seconds that the performance counter will be monitored</param>
            /// <param name="targetValue">The target value that the performance counter is being monitored for.</param>
            /// <param name="exactMatch">Whether or not an exact performance counter value match is required for the event to fire</param>
            public PerformanceCounterData(
                string category,
                string counter,
                string instance,
                string targetMachine,
                int duration,
                double targetValue,
                bool exactMatch)
            {
                Category = category;
                Counter = counter;
                Instance = instance;
                Machine = targetMachine;
                TargetValue = targetValue;
                Duration = duration;
                ExactMatch = exactMatch;

                PerfCounter = new PerformanceCounter(
                    category,
                    counter,
                    instance,
                    targetMachine);
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\CatalogWatcher\CDCTests.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Data.SqlClient;
using System.Net;
using System.Text;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Diagnostics;
using xonline.common.config;

namespace xonline.server.marketplace.test
{
    [TestGroup, Owner("wirosas"), TestFrequency("Daily"), EnvRequirement("Watcher")]
    public class CDCTests
    {
        [TestGroupSetup]
        public void Setup()
        {

        }

        [TestGroupTearDown]
        public void Shutdown() { }

        [TestCase, TestCasePriority(1)]
        class CDC_Standard_BVT_Media : WatcherTestsBase
        {
            public CDC_Standard_BVT_Media() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                //Before we start, clear the CDC Media table and destination ToDoProduct table
                Catalog.ExecuteNonQuery(SQLDisableTransferJob());
                WaitSeconds(10);
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMedia());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMediaUserRatingAggregate());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCUsageAggregateFromReporting());
                Catalog.ExecuteNonQuery(SQLDeleteFromToDoProduct());
                WaitSeconds(10);
                Catalog.ExecuteNonQuery(SQLEnableTransferJob());

                //Get the top 10 mediaIds from the Media table
                List<string[]> mediaIds = Catalog.ExecuteQueryGetMultiple(QuerySelectTopMediaIdsFromMedia());

                //get count of rows for our mediaIds in the CDC Media before we update.  Should be 0.
                int cdcBeforeUpdate = Catalog.ExecuteQueryGetSingleInt(GetCountMediasFromCDCMedia(mediaIds));
                
                //Get count in the dest table before update/transfer job
                int destTableCountBefore = Catalog.ExecuteQueryGetSingleInt(GetCountUniqueMediasFromToDoProducts(mediaIds));

                //Update the modified date on those top Medias
                Global.RO.Info("Update rows in Media...");
                Catalog.ExecuteNonQuery(UpdateMediaModifiedDate(mediaIds));

                //Give CDC time to catch the changes and move them to the CDC table
                Global.RO.Info("Give CDC time to pick up the changes (10 seconds)...");
                WaitSeconds(10);

                //get count of rows for our mediaIds in the CDC Media after we update. 
                //Exact number of rows TBD, if even possible.
                int cdcAfterUpdate = Catalog.ExecuteQueryGetSingleInt(GetCountMediasFromCDCMedia(mediaIds));
                Global.RO.Info(string.Format("Selected MediaIds in CDC before the update: {0}", cdcBeforeUpdate));
                Global.RO.Info(string.Format("Selected MediaIds in CDC after the update: {0}", cdcAfterUpdate));
                Global.RO.Info(string.Format("CDC Table Difference: {0}", cdcAfterUpdate - cdcBeforeUpdate));

                //Compare before vs. after count.
                if (cdcBeforeUpdate >= cdcAfterUpdate)
                {
                    Global.RO.Info("CDC failed to catch changes!");
                    ResultCode = TEST_RESULTS.FAILED;
                }

                
                //Give Transfer job time to wake up and move the changes to the table
                Global.RO.Info("Give the transfer job time to run (62 seconds)...");
                WaitSeconds(62);

                //Check Destination table for records
                int destTableCountAfter = Catalog.ExecuteQueryGetSingleInt(SQLCountMediasFromToDoProducts(mediaIds));
                int destTableUniqueMediaId = Catalog.ExecuteQueryGetSingleInt(GetCountUniqueMediasFromToDoProducts(mediaIds));

                Global.RO.Info(string.Format("Dest Table Before: {0}", destTableCountBefore));
                Global.RO.Info(string.Format("Dest Table After: {0}", destTableCountAfter));
                Global.RO.Info(string.Format("Dest Table Difference: {0}", destTableCountAfter - destTableCountBefore));
                Global.RO.Info(string.Format("Unique MediaIds in Dest: {0}", destTableUniqueMediaId));

                //The transfer amount between cdc tables is twice that of the difference between dest tables.
                //CDC adds two rows for every update (a 'before' and 'after' row), and just one row for an insert.
                //The dest table copies just the 'after' row.
                if ((cdcAfterUpdate <= cdcBeforeUpdate) && (destTableCountAfter <= destTableCountBefore))
                {
                    Global.RO.Info("Transfer Job didn't transfer the CDC rows properly.");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("Transfer job completed successfully.");
                }

                Catalog.CloseConnection();
            }           
        }


        [TestCase, TestCasePriority(1)]
        class CDC_Standard_BVT_MediaUserRatingAggregate : WatcherTestsBase
        {
            public CDC_Standard_BVT_MediaUserRatingAggregate() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                //Before we start, clear the CDC Media table and destination ToDoProduct table
                Catalog.ExecuteNonQuery(SQLDisableTransferJob());
                WaitSeconds(30);
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMedia());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMediaUserRatingAggregate());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCUsageAggregateFromReporting());
                Catalog.ExecuteNonQuery(SQLDeleteFromToDoProduct());
                Catalog.ExecuteNonQuery(SQLEnableTransferJob());

                //Get the top 10 mediaIds from the Media table
                List<string[]> mediaIds = Catalog.ExecuteQueryGetMultiple(QuerySelectTopMediaIdsFromMedia());

                //get count of rows for our mediaIds in the CDC Media before we update.  Should be 0.
                int cdcBeforeUpdate = Catalog.ExecuteQueryGetSingleInt(GetTotalCountMediasFromCDCMediaUserRatingAggregate(mediaIds));

                //Get the count in the dest table before the update/transfer job
                int destTableCountBefore = Catalog.ExecuteQueryGetSingleInt(GetTotalCountMediasFromToDoProducts(mediaIds));

                //Update the modified date on those top Medias
                Global.RO.Info("Insert/Update rows in MediaUserRatingAggregate...");
                Catalog.ExecuteNonQuery(UpdateMediasInMediaUserRatingAggregate(mediaIds));


                //Give CDC time to catch the changes
                Global.RO.Info("Give CDC time to run (10 seconds)...");
                WaitSeconds(10);

                //get count of rows for our mediaIds in the CDC Media after we update. Exact number of rows TBD, if even possible.
                int cdcAfterUpdate = Catalog.ExecuteQueryGetSingleInt(GetTotalCountMediasFromCDCMediaUserRatingAggregate(mediaIds));

                Global.RO.Info(string.Format("Selected MediaIds in CDC before the update: {0}", cdcBeforeUpdate));
                Global.RO.Info(string.Format("Selected MediaIds in CDC after the update: {0}", cdcAfterUpdate));
                Global.RO.Info(string.Format("CDC Table Difference: {0}", cdcAfterUpdate - cdcBeforeUpdate));

                //Compare before vs. after count.
                if (cdcBeforeUpdate >= cdcAfterUpdate)
                {
                    Global.RO.Info("CDC failed to catch changes!");
                    ResultCode = TEST_RESULTS.FAILED;
                }


                //Give Transfer job time to wake up and move the changes to the table
                Global.RO.Info("Give the transfer job time to run (62 seconds)...");
                WaitSeconds(62);

                //Check Destination table for records
                int destTableCountAfter = Catalog.ExecuteQueryGetSingleInt(GetTotalCountMediasFromCDCMediaUserRatingAggregate(mediaIds));
                int destTableUniqueMediaId = Catalog.ExecuteQueryGetSingleInt(GetCountMediasFromCDCMediaUserRatingAggregate(mediaIds));

                Global.RO.Info(string.Format("Dest Table Before: {0}", destTableCountBefore));
                Global.RO.Info(string.Format("Dest Table After: {0}", destTableCountAfter));
                Global.RO.Info(string.Format("Dest Table Difference: {0}", destTableCountAfter - destTableCountBefore));
                Global.RO.Info(string.Format("Unique MediaIds in Dest: {0}", destTableUniqueMediaId));

                if ((cdcAfterUpdate <= cdcBeforeUpdate) && (destTableCountAfter <= destTableCountBefore))
                {
                    Global.RO.Info("Transfer Job didn't transfer the CDC rows properly.");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("Transfer job completed successfully.");
                }

                Catalog.CloseConnection();
            }

            #region SqlStrings

            private string UpdateMediasInMediaUserRatingAggregate(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("IF EXISTS(SELECT 1 FROM dbo.MediaUserRatingAggregate WHERE mediaId='{0}')\n", mediaId[0]);
                    sb.AppendFormat("UPDATE dbo.MediaUserRatingAggregate SET modifiedDate=GETDATE() WHERE mediaId = '{0}'\n", mediaId[0]);
                    sb.AppendFormat("ELSE\n");
                    sb.AppendFormat("INSERT INTO dbo.MediaUserRatingAggregate VALUES ('{0}', 'US', 5.0, 100, GETDATE(), GETDATE())\n", mediaId[0]);
                    sb.Append("\n");
                }

                return sb.ToString();
            }

            private string GetCountMediasFromCDCMediaUserRatingAggregate(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT COUNT(DISTINCT(mediaId)) FROM cdc.dbo_MediaUserRatingAggregate_CT WHERE ");
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
                }
                sb.Remove(sb.Length - 3, 3); //remove the last OR

                return sb.ToString();
            }

            private string GetTotalCountMediasFromCDCMediaUserRatingAggregate(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT COUNT(mediaId) FROM cdc.dbo_MediaUserRatingAggregate_CT WHERE ");
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
                }
                sb.Remove(sb.Length - 3, 3); //remove the last OR

                return sb.ToString();
            }

            private string GetCountMediasFromToDoProducts(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT COUNT(DISTINCT(mediaId)) FROM dbo.CatalogWatcherToDoProduct WHERE ");
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
                }
                sb.Remove(sb.Length - 3, 3); //remove the last OR

                return sb.ToString();
            }

            private string GetTotalCountMediasFromToDoProducts(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT COUNT(mediaId) FROM dbo.CatalogWatcherToDoProduct WHERE ");
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
                }
                sb.Remove(sb.Length - 3, 3); //remove the last OR

                return sb.ToString();
            }

            #endregion
        }


        [TestCase, TestCasePriority(1)]
        class CDC_Standard_BVT_UsageAggregateFromReporting : WatcherTestsBase
        {
            public CDC_Standard_BVT_UsageAggregateFromReporting() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                //Before we start, clear the CDC Media table and destination ToDoProduct table
                Catalog.ExecuteNonQuery(SQLDisableTransferJob());
                WaitSeconds(30);
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMedia());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMediaUserRatingAggregate());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCUsageAggregateFromReporting());
                Catalog.ExecuteNonQuery(SQLDeleteFromToDoProduct());
                Catalog.ExecuteNonQuery(SQLEnableTransferJob());

                //Get the top 10 mediaIds from the Media table
                List<string[]> mediaIds = Catalog.ExecuteQueryGetMultiple(QuerySelectTopMediaIdsFromMedia());

                //get count of rows for our mediaIds in the CDC UsageAggregateFromReporting before we update.  Should be 0.
                int cdcBeforeUpdate = Catalog.ExecuteQueryGetSingleInt(GetCountMediasFromCDUsageAggregateFromReporting(mediaIds));

                //Get dest table count before update/transfer job
                int destTableCountBefore = Catalog.ExecuteQueryGetSingleInt(GetCountMediasFromCDUsageAggregateFromReporting(mediaIds));

                //Update the modified date on those top Medias
                Global.RO.Info("Make changes to UsageAggregateFromReporting...");
                Catalog.ExecuteNonQuery(UpdateRowIdsInUsageAggregateFromReporting(mediaIds));

                //Give CDC time to pick up the changes and move them to the CDC table
                Global.RO.Info("Give CDC time to pick up the changes");
                WaitSeconds(10);

                //get count of rows for our mediaIds in the CDC Media after we update. Exact number of rows TBD, if even possible.
                int cdcAfterUpdate = Catalog.ExecuteQueryGetSingleInt(GetCountMediasFromCDUsageAggregateFromReporting(mediaIds));

                Global.RO.Info(string.Format("Selected MediaIds in CDC before the update: {0}", cdcBeforeUpdate));
                Global.RO.Info(string.Format("Selected MediaIds in CDC after the update: {0}", cdcAfterUpdate));
                Global.RO.Info(string.Format("CDC Table Difference: {0}", cdcAfterUpdate - cdcBeforeUpdate));

                //Compare before vs. after count.
                if (cdcBeforeUpdate >= cdcAfterUpdate)
                {
                    Global.RO.Info("CDC failed to catch changes!");
                    ResultCode = TEST_RESULTS.FAILED;
                }

                //Give Transfer job time to wake up and move the changes to the table
                Global.RO.Info("Give Transfer job time to run (62 seconds)...");
                WaitSeconds(62);

                //Check Destination table for records
                int destTableCountAfter = Catalog.ExecuteQueryGetSingleInt(GetCountMediasFromCDUsageAggregateFromReporting(mediaIds));
                int destTableUniqueMediaId = Catalog.ExecuteQueryGetSingleInt(GetTotalCountMediasFromToDoProducts(mediaIds));

                Global.RO.Info(string.Format("Dest Table Before: {0}", destTableCountBefore));
                Global.RO.Info(string.Format("Dest Table After: {0}", destTableCountAfter));
                Global.RO.Info(string.Format("Dest Table Difference: {0}", destTableCountAfter - destTableCountBefore));
                Global.RO.Info(string.Format("Unique MediaIds in Dest: {0}", destTableUniqueMediaId));

                if ((cdcAfterUpdate <= cdcBeforeUpdate) && (destTableCountAfter <= destTableCountBefore))
                {
                    Global.RO.Info("Transfer Job didn't transfer the CDC rows properly.");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("Transfer job competed successfully");
                }

                Catalog.CloseConnection();
            }

            #region SqlStrings

            private string UpdateRowIdsInUsageAggregateFromReporting(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("IF EXISTS(SELECT 1 FROM dbo.UsageAggregateFromReporting WHERE rowId='{0}')\n", mediaId[0]);
                    sb.AppendFormat("UPDATE dbo.UsageAggregateFromReporting SET modifiedDate=GETDATE() WHERE rowId = '{0}'\n", mediaId[0]);
                    sb.AppendFormat("ELSE\n");
                    sb.AppendFormat("INSERT INTO dbo.UsageAggregateFromReporting VALUES ('{0}', 22, '{0}', '{0}', 'US', 100, GETDATE(), GETDATE())\n", mediaId[0]);
                    sb.Append("\n");
                }

                return sb.ToString();
            }

            private string GetCountMediasFromCDUsageAggregateFromReporting(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT COUNT(DISTINCT(rowId)) FROM cdc.dbo_UsageAggregateFromReporting_CT WHERE ");
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("rowId='{0}' OR ", mediaId[0]);
                }
                sb.Remove(sb.Length - 3, 3); //remove the last OR

                return sb.ToString();
            }

            private string GetCountMediasFromToDoProducts(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT COUNT(DISTINCT(mediaId)) FROM dbo.CatalogWatcherToDoProduct WHERE ");
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
                }
                sb.Remove(sb.Length - 3, 3); //remove the last OR

                return sb.ToString();
            }

            private string GetTotalCountMediasFromToDoProducts(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("SELECT COUNT(mediaId) FROM dbo.CatalogWatcherToDoProduct WHERE ");
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
                }
                sb.Remove(sb.Length - 3, 3); //remove the last OR

                return sb.ToString();
            }

            #endregion
        }


        [TestCase, TestCasePriority(1)]
        class CDC_CDC_Enabled : WatcherTestsBase
        {
            public CDC_CDC_Enabled() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                Global.RO.Info("Querying for CDC Status on RawCatalogDB...");

                string cdcEnabled = Catalog.ExecuteQueryGetSingle("SELECT is_cdc_enabled FROM sys.databases WHERE name='RawCatalogDB'");

                Global.RO.Info(string.Format("CDC Enabled Value: {0}", cdcEnabled));

                if (cdcEnabled != "True")
                {
                    Global.RO.Info("CDC is not enabled on RawCatalogDB!");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("CDC is enabled.");
                }

                Catalog.CloseConnection();
            }
        }

        class CDC_CDC_Tables_Exist : WatcherTestsBase
        {
            public CDC_CDC_Tables_Exist() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                Global.RO.Info("Verifying CDC Tables exist in RawCatalogDB...");
                string tablesExist = Catalog.ExecuteQueryGetSingle(QueryCDCTablesExist());

                //if CDC tables exist
                if(tablesExist != "1")
                {
                    Global.RO.Info("One or more CDC tables do not exist in RawCatalogDB!");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("Expected CDC tables exist");
                }

                Catalog.CloseConnection();
            }
            #region SqlStrings
            public string QueryCDCTablesExist()
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("IF (EXISTS(SELECT 1 FROM sysobjects WHERE name='dbo_media_CT') AND ");
                sb.Append("EXISTS(SELECT 1 FROM sysobjects WHERE name='dbo_MediaUserRatingAggregate_CT') AND ");
                sb.Append("EXISTS(SELECT 1 FROM sysobjects WHERE name='dbo_UsageAggregateFromReporting_CT'))");
                sb.Append("SELECT 1 ");
                sb.Append("ELSE ");
                sb.Append("SELECT 0");

                return sb.ToString();
            } 
            #endregion
        }


        [TestCase, TestCasePriority(1)]
        class CDC_ToDoTransferProduct_Job_Exists : WatcherTestsBase
        {
            public CDC_ToDoTransferProduct_Job_Exists() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                Global.RO.Info("Verifying CatalogWatcherToDoTransferProduct job exists in RawCatalogDB...");
                string jobExists = Catalog.ExecuteQueryGetSingle("IF (EXISTS(SELECT 1 FROM sysobjects WHERE name='CatalogWatcherToDoTransferProduct')) SELECT 1 ELSE SELECT 0");

                //if job exists
                if (jobExists != "1")
                {
                    Global.RO.Info("CatalogWatcherToDoTransferProduct job does not exist in RawCatalogDB!");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("CatalogWatcherToDoTransferProduct job exists");
                }

                Catalog.CloseConnection();
            }
        }


        [TestCase, TestCasePriority(1)]
        class CDC_ToDoProducts_Table_Exists : WatcherTestsBase
        {
            public CDC_ToDoProducts_Table_Exists() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                Global.RO.Info("Verifying CatalogWatcherToDoProduct table exists in RawCatalogDB...");
                string tableExists = Catalog.ExecuteQueryGetSingle("IF (EXISTS(SELECT 1 FROM sysobjects WHERE name='CatalogWatcherToDoProduct')) SELECT 1 ELSE SELECT 0");

                //Assert ToDoProduct table exists
                if (tableExists != "1")
                {
                    Global.RO.Info("CatalogWatcherToDoProduct table does not exist in RawCatalogDB!");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("CatalogWatcherToDoProduct table exists");
                }

                Catalog.CloseConnection();
            }
        }


        [TestCase, TestCasePriority(2)]
        class CDC_Job_With_Empty_CDCMedia_Table : WatcherTestsBase
        {
            public CDC_Job_With_Empty_CDCMedia_Table() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                //First, update some records so we have something in the CatalogWatcherToDoProducts table
                Global.RO.Info("Update Media table...");
                List<string[]> mediaIds = Catalog.ExecuteQueryGetMultiple(QuerySelectTopMediaIdsFromMedia());
                Catalog.ExecuteNonQuery(UpdateMediaModifiedDate(mediaIds));

                //Wait for CDC & Transfer job, 10 + 62 = 72
                Global.RO.Info("Give CDC & Transfer job time to run (72 seconds)...");
                WaitSeconds(72);

                //Empty the CDC table
                Global.RO.Info("Empty the CDC tables");
                Catalog.ExecuteNonQuery(SQLDisableTransferJob());
                WaitSeconds(30);
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMedia());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMediaUserRatingAggregate());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCUsageAggregateFromReporting());
                Catalog.ExecuteNonQuery((SQLEnableTransferJob()));

                //Wait for next Transfer Job
                Global.RO.Info("Give CDC & Transfer job time to run (72 seconds)...");
                WaitSeconds(72);

                //Since CDC is empty, CatalogWatcherToDoProduct should be empty after the Transfer job
                int countRowsInToDoProducts = Catalog.ExecuteQueryGetSingleInt(GetCountFromToDoProduct());

                if (0 != countRowsInToDoProducts)
                {
                    Global.RO.Info("CatalogWatcherToDoProducts is not empty and it should be!");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("CatalogWatcherToDoProducts table is empty like expected, success!");
                }

                Catalog.CloseConnection();
            }

        }


        [TestCase, TestCasePriority(2)]
        class CDC_Job_With_Empty_CDCMediaUserRatingAggregate_Table : WatcherTestsBase
        {
            public CDC_Job_With_Empty_CDCMediaUserRatingAggregate_Table() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                //First, update some records so we have something in the ToDoProducts table
                List<string[]> mediaIds = Catalog.ExecuteQueryGetMultiple(QuerySelectTopMediaIdsFromMedia());

                Global.RO.Info("Insert/Update data in MediaUserRatingAggregate...");
                Catalog.ExecuteNonQuery(UpdateMediasInMediaUserRatingAggregate(mediaIds));

                //Wait for CDC & Transfer job, 10 + 62 = 72
                Global.RO.Info("Give CDC & Transfer job time to run (72 seconds)...");
                WaitSeconds(72);

                //Empty the CDC table
                Global.RO.Info("Empty out the CDC tables...");
                Catalog.ExecuteNonQuery(SQLDisableTransferJob());
                WaitSeconds(30);
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMedia());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMediaUserRatingAggregate());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCUsageAggregateFromReporting());
                Catalog.ExecuteNonQuery(SQLEnableTransferJob());

                //Wait for next Transfer Job
                Global.RO.Info("Wait for next transfer job (72 seconds)...");
                WaitSeconds(72);

                //Since CDC is empty, ToDoProduct should be empty after the Transfer job
                int countRowsInToDoProducts = Catalog.ExecuteQueryGetSingleInt(GetCountFromToDoProduct());

                if (0 != countRowsInToDoProducts)
                {
                    Global.RO.Info("CatalogWatcherToDoProducts is not empty and it should be!");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("CatalogWatcherToDoProducts table is empty, success!");
                }

                Catalog.CloseConnection();
            }

            #region SqlStrings
            private string UpdateMediasInMediaUserRatingAggregate(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("IF EXISTS(SELECT 1 FROM dbo.MediaUserRatingAggregate WHERE mediaId='{0}')\n", mediaId[0]);
                    sb.AppendFormat("UPDATE dbo.MediaUserRatingAggregate SET modifiedDate=GETDATE() WHERE mediaId = '{0}'\n", mediaId[0]);
                    sb.AppendFormat("ELSE\n");
                    sb.AppendFormat("INSERT INTO dbo.MediaUserRatingAggregate VALUES ('{0}', 'US', 5.0, 100, GETDATE(), GETDATE())\n", mediaId[0]);
                    sb.Append("\n");
                }

                return sb.ToString();
            }
                       
            #endregion
        }


        [TestCase, TestCasePriority(2)]
        class CDC_Job_With_Empty_CDCUsageAggregateFromReporting_Table : WatcherTestsBase
        {
            public CDC_Job_With_Empty_CDCUsageAggregateFromReporting_Table() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                //First, update some records so we have something in the ToDoProducts table
                Global.RO.Info("Update Rows in UsageAggregateFromReporting...");
                List<string[]> mediaIds = Catalog.ExecuteQueryGetMultiple(QuerySelectTopMediaIdsFromMedia());
                Catalog.ExecuteNonQuery(UpdateRowIds(mediaIds));

                //Wait for CDC & Transfer job, 10 + 62 = 72
                Global.RO.Info("Give CDC & Transfer job time to run (72 seconds)...");
                WaitSeconds(72);

                //Empty the CDC table
                Catalog.ExecuteNonQuery(SQLDisableTransferJob());
                WaitSeconds(30);
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMedia());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMediaUserRatingAggregate());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCUsageAggregateFromReporting());
                Catalog.ExecuteNonQuery(SQLEnableTransferJob());

                //Wait for next Transfer Job
                Global.RO.Info("Give CDC & Transfer job time to run (72 seconds)...");
                WaitSeconds(72);

                //Since CDC is empty, ToDoProduct should be empty after the Transfer job
                int countRowsInToDoProducts = Catalog.ExecuteQueryGetSingleInt(GetCountFromToDoProduct());

                if (0 != countRowsInToDoProducts)
                {
                    Global.RO.Info("CatalogWatcherToDoProducts is not empty and it should be!");
                    ResultCode = TEST_RESULTS.FAILED;
                }
                else
                {
                    Global.RO.Info("Table is empty, success!");
                }

                Catalog.CloseConnection();

                return;
            }

            #region SqlStrings
            private string UpdateRowIds(List<string[]> mediaIds)
            {
                StringBuilder sb = new StringBuilder();
                foreach (string[] mediaId in mediaIds)
                {
                    sb.AppendFormat("IF EXISTS(SELECT 1 FROM dbo.UsageAggregateFromReporting WHERE rowId='{0}')\n", mediaId[0]);
                    sb.AppendFormat("UPDATE dbo.UsageAggregateFromReporting SET modifiedDate=GETDATE() WHERE rowId = '{0}'\n", mediaId[0]);
                    sb.AppendFormat("ELSE\n");
                    sb.AppendFormat("INSERT INTO dbo.UsageAggregateFromReporting VALUES ('{0}', 22, '{0}', '{0}', 'US', 100, GETDATE(), GETDATE())\n", mediaId[0]);
                    sb.Append("\n");
                }

                return sb.ToString();
            }

            #endregion
        }


        [TestCase, TestCasePriority(2)]
        class CDC_Job_With_CDC_Disabled : WatcherTestsBase
        {
            public CDC_Job_With_CDC_Disabled() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                //Disable CDC on the entire database
                Global.RO.Info("Disabling CDC...");
                Catalog.ExecuteNonQuery(DisableCDC());

                //Give CDC time to disable
                WaitSeconds(5); 

                //Execute the Transfer Job
                Global.RO.Info("Executing the Transfer Job...");
                try
                {
                    Catalog.ExecuteNonQuery(SQLExecuteTransferJob());
                }
                catch (SqlException)
                {
                    //Good, we were expecting an exception!
                    Global.RO.Info("Exception found, as expected.");

                    //Since we're done, enable CDC again
                    Global.RO.Info("Enabling CDC before exit");
                    Catalog.ExecuteNonQuery(EnableCDC());

                    return;
                }

                Global.RO.Info("Exception not found: SQL was expected to throw an exception.  It did not.");
                ResultCode = TEST_RESULTS.FAILED;

                //Test failed, so enable CDC
                Global.RO.Info("Enabling CDC before exit");
                Catalog.ExecuteNonQuery(EnableCDC());

                Catalog.CloseConnection();
            }

            #region SqlStrings
            private string DisableCDC()
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("declare @rc int\n");
                sb.Append("exec @rc = sys.sp_cdc_disable_db\n");
                sb.Append("select @rc\n");

                return sb.ToString();
            }

            private string EnableCDC()
            {
                string enableCDCScript = File.ReadAllText("Suites\\EnableCDC.sql");

                return enableCDCScript;
            } 
            #endregion
        }

        [TestCase, TestCasePriority(3)]
        class CDC_Stress_Test : WatcherTestsBase
        {
            public CDC_Stress_Test() : base() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                Global.RO.Info("Deleting data from all CDC tables & Destination table...");
                Catalog.ExecuteNonQuery(SQLDisableTransferJob());
                WaitSeconds(30);
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMedia());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMediaUserRatingAggregate());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCUsageAggregateFromReporting());
                Catalog.ExecuteNonQuery(SQLDeleteFromToDoProduct());
                Catalog.ExecuteNonQuery(SQLEnableTransferJob());

                //Update all the cdc-enabled rows until we hit close to numRecordsToUpdate
                int runs = 4;
                for (int i = 1; i <= runs; ++i)
                {
                    Global.RO.Info("Update all cdc-enabled rows in Media: Run {0}", i);
                    Catalog.ExecuteNonQuery(UpdateRowsInMedia());
                }

                //Give CDC 60 seconds to catch up
                Global.RO.Info("Wait 60 seconds for CDC");
                WaitSeconds(60);

                int rowsInCDCMedia = Catalog.ExecuteQueryGetSingleInt(GetCountMediasFromCDCMedia());

                int rowInToDoProducts = 0;
                
                //Wait for the transer job.  May take a while to complete, so wait up to 5 minutes.
                int maxWaits = 5;
                while (rowInToDoProducts == 0 && maxWaits > 0)
                {
                    Global.RO.Info("Wait 60 seconds for TransferJob");
                    WaitSeconds(60);

                    rowInToDoProducts = Catalog.ExecuteQueryGetSingleInt(GetCountFromToDoProduct());

                    --maxWaits;
                }
                Global.RO.Info("Rows in CDC_Media: {0}", rowsInCDCMedia);
                Global.RO.Info("Rows in CatalogWatcherToDoProducts: {0}", rowInToDoProducts);

                Catalog.CloseConnection();
            }

            #region SqlStrings
            private string CountRowsInMedia()
            {
                return "SELECT COUNT(1) FROM Media m JOIN MediaType mt ON mt.mediaTypeId = m.mediaTypeId WHERE mt.CatalogWatcherEnabled = 1";
            }

            private string GetCountMediasFromCDCMedia()
            {
                return "SELECT COUNT(1) FROM cdc.dbo_Media_CT";
            }


            private string UpdateRowsInMedia()
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("UPDATE Media SET modifiedDate=GETDATE()");
                sb.AppendLine("WHERE mediaTypeId IN");
                sb.AppendLine("( ");
                sb.AppendLine("1,  --Game ");
                sb.AppendLine("5,  --Game Trial ");
                sb.AppendLine("18, --Game Content ");
                sb.AppendLine("19, --Game Demo ");
                sb.AppendLine("20, --Theme ");
                sb.AppendLine("21, --Xbox Original Game ");
                sb.AppendLine("22, --Gamer Tile ");
                sb.AppendLine("23, --Arcade Game ");
                sb.AppendLine("24, --Game Consumable ");
                sb.AppendLine("30, --Game Video ");
                sb.AppendLine("34, --Game Trailer ");
                sb.AppendLine("37, --XNA Indie Game ");
                sb.AppendLine("45, --Server Backed Game ");
                sb.AppendLine("46, --Marketplace ");
                sb.AppendLine("47  --AvatarItem ");
                sb.AppendLine(") ");

                return sb.ToString();
            } 
            #endregion
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Marketplace.Test.Common.Service")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("Marketplace.Test.Common.Service")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("573542a4-138c-4cca-8232-5a7af2f72551")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Marketplace.Test.Common.Service\CatalogWatcher\WatcherTestsBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Data.SqlClient;

using Com.FastSearch.Esp.Search;
using Com.FastSearch.Esp.Search.Query;
using Com.FastSearch.Esp.Search.Result;
using Com.FastSearch.Esp.Search.View;
using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Config;

namespace Marketplace.Test.Common.Service
{
    /// <summary>
    /// Base test class for the Watcher test cases
    /// </summary>
    public class WatcherTestsBase : TestBase
    {
        #region Fields

        public const string PERF_DETECTOR_INSTANCE = "mediadocumentproducer_media_esp_0";
        public const string PERF_DETECTOR = "XBL Catalog Watcher: Detector Perf Counters";
        public const string PERF_DETECTOR_AVG_EXECUTION_TIME = "Catalog Watcher: Avg. execution time";
        public const string PERF_DETECTOR_NUMBER_OF_ITEMS_DETECTED = "Catalog Watcher: Number of items detected";

        public const string PERF_EXTRACTOR_INSTANCE = "mediadocumentproducer_media_esp_0";
        public const string PERF_EXTRACTOR = "XBL Catalog Watcher: Extractor Perf Counters";
        public const string PERF_EXTRACTOR_AVG_EXECUTION_TIME = "Catalog Watcher: Avg. execution time";
        public const string PERF_EXTRACTOR_AVERAGE_BATCH_SIZE = "Catalog Watcher: Average batch size (all time)";
        public const string PERF_EXTRACTOR_API_REQUESTS_TOTAL = "Catalog Watcher: Extractor API requests total";
        public const string PERF_EXTRACTOR_API_REQUESTS_PER_SECOND = "Catalog Watcher: Extractor API requests/sec";
        public const string PERF_EXTRACTOR_TOTAL_FAILURES = "Catalog Watcher: Extractor API total failures";
        public const string PERF_EXTRACTOR_FAILURES_PER_SECOND = "Catalog Watcher: Extractor failures/sec";

        public const string PERF_PUBLISHER_INSTANCE = "mediadocumentpublisher_media_esp_0";
        public const string PERF_PUBLISHER = "XBL Catalog Watcher: Publisher performance counters";
        public const string PERF_PUBLISHER_AVG_FLUSH_DOCUMENTS_TIME = "FlushDocuments: avg. Flush Documents time";
        public const string PERF_PUBLISHER_NUMBER_OF_DOCUMENT_ERRORS = "FlushDocuments: number of document errors";
        public const string PERF_PUBLISHER_NUMBER_OF_DOCUMENT_WARNINGS = "FlushDocuments: number of document warnings";
        public const string PERF_PUBLISHER_AVERAGE_PUBLISH_TIME = "PublishDocument: avg. publish time";
        public const string PERF_PUBLISHER_NUMBER_OF_DOCUMENTS_PUBLISHED = "PublishDocument: number of document published";
        public const string PERF_PUBLISHER_NUMBER_OF_DOCUMENTS_PUBLISHED_PER_SECOND = "PublishDocument: number of documents published per second";

        public const string PERF_WATCHER_INSTANCE = "catalogwatcher_media_esp_0";
        public const string PERF_QUEUE = "XBL Catalog Watcher: Queue Perf Counters";
        public const string PERF_QUEUE_AVERAGE_WAIT_TIME = "Catalog Watcher: Avg. wait time";
        public const string PERF_QUEUE_DEQUEUE_WAIT_TIME = "Catalog Watcher: Queue Operations: dequeue wait time";
        public const string PERF_QUEUE_ENQUEUE_WAIT_TIME = "Catalog Watcher: Queue Operations: enqueue wait time";
        public const string PERF_QUEUE_CURRENT_QUEUE_LENGTH = "Catalog Watcher: Current Queue Length";
        

        private static CMRawCatalogDB catalog = null;
        private static CMNPDB npdb = null;
        public string xblobMachineName = String.Empty;
        private string watcherPort = String.Empty; 
        public  static string fastEspInstallation = String.Empty;
        private static string fastEspIngestionPort = String.Empty;
        private static string fastEspSearchPort = String.Empty;
        private static string fastEspCatalog = String.Empty;
        private static ISearchView searchView = null;

        private string randomCharacterBase = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        private Random random = new Random();

        #endregion

        #region Properties

        public CMRawCatalogDB Catalog
        {
            get 
            {
                if (null == catalog ||
                    catalog.IsClosed)
                {
                    catalog = new CMRawCatalogDB();                    
                }
                
                return catalog;
            }
        }

        public CMNPDB NPDB
        {
            get
            {
                if (null == npdb ||
                    npdb.IsClosed)
                {
                    npdb = new CMNPDB();
                }

                return npdb;
            }
        }

        #endregion

        #region Constructor and Initialization

        /// <summary>
        /// Constructor for the Watcher tests base class
        /// </summary>
        public WatcherTestsBase()
        {
            //Load configuration settings for the test cases
            Configuration config = ConfigurationManager.OpenExeConfiguration(
                System.Reflection.Assembly.GetExecutingAssembly().Location);

            Global.RO.Info("Loading configuration from: " + System.Reflection.Assembly.GetExecutingAssembly().Location);
            xblobMachineName = config.AppSettings.Settings["XblobMachineName"].Value;
            watcherPort = config.AppSettings.Settings["WatcherPort"].Value;
            fastEspInstallation = config.AppSettings.Settings["FastEspInstallation"].Value;
            fastEspIngestionPort = config.AppSettings.Settings["FastEspIngestionPort"].Value;
            fastEspSearchPort = config.AppSettings.Settings["FastEspSearchPort"].Value;
            fastEspCatalog = config.AppSettings.Settings["FastEspCatalog"].Value;            
        }

        #endregion

        #region Cron and Command Methods

        protected override void Execute() { }

        /// <summary>
        /// Ping the health check page for the watcher to ensure the process is kept alive
        /// </summary>
        public void PingWatcherHealthCheck()
        {
            //ping the watcher health check
            WebClient client = new WebClient();
            Stream stream = client.OpenRead(
                String.Format("http://{0}:{1}/cron/health.ashx",
                    xblobMachineName, watcherPort));
            StreamReader reader = new StreamReader(stream);
            string response = reader.ReadToEnd();
            reader.Close();
        }

        /// <summary>
        /// Monitor the specified settings for changes after the number of seconds specified
        /// </summary>
        /// <param name="settingsToMonitor">Settings to monitor</param>
        /// <param name="secondsToMonitor">Seconds to wait before gathering changes</param>
        /// <returns>List of values for the specified settings once the number of seconds specified has gone by.</returns>
        public List<string> MonitorForChanges(List<string> settingsToMonitor, int secondsToMonitor, int changeDirection)
        {
            Global.RO.Info(String.Format("Monitoring for changes for {0} seconds.", secondsToMonitor));

            DateTime monitorDeadline = DateTime.Now;
            monitorDeadline = monitorDeadline.AddSeconds(secondsToMonitor);
            string currentSettingValue = String.Empty;

            List<string> finalSettingValues = new List<string>( new string[] { String.Empty, String.Empty} );
            
            while (DateTime.Now < monitorDeadline)
            {
                PingWatcherHealthCheck();

                for (int i = 0; i < settingsToMonitor.Count; i++)
                {
                    currentSettingValue = RetrieveWatcherSetting(settingsToMonitor[i]);

                    if (changeDirection > 0 &&
                        currentSettingValue.CompareTo(finalSettingValues[i]) < 0)
                    {
                        Global.RO.Error(
                            String.Format("The current value for {0} is less than the previous value where incrementing values are expected.", settingsToMonitor[i]));
                        Global.RO.Error(
                            String.Format("Current value: {0}  <  Previous Value: {1}", currentSettingValue, finalSettingValues[i]));

                        ResultCode = TEST_RESULTS.FAILED;
                        return null;
                    }
                    else if (changeDirection < 0 &&
                    currentSettingValue.CompareTo(finalSettingValues[i]) > 0)
                    {
                        Global.RO.Error(
                            String.Format("The current value for {0} is greater than the previous value where decrementing values are expected.", settingsToMonitor[i]));
                        Global.RO.Error(
                            String.Format("Current value: {0}  >  Previous Value: {1}", currentSettingValue, finalSettingValues[i]));

                        ResultCode = TEST_RESULTS.FAILED;
                        return null;
                    }
                    else
                    {
                        finalSettingValues[i] = currentSettingValue;
                    }
                }

                Thread.Sleep(1000);
            }           

            return finalSettingValues;
        }

        /// <summary>
        /// Do general preparation of the Watcher prior to test case execution.  Sets default, initial values for those settings specified.
        /// </summary>
        /// <param name="enabled">Specifies whether or not the Watcher should be enabled.</param>
        /// <param name="intervalSeconds">Specifies the value to be used for the interval seconds setting.</param>
        /// <param name="timeoutSeconds">Specifies the value to be used for the timeout seconds setting.</param>
        /// <param name="scheduledTime">Specifies the value for the next schedule time the Watcher will run.</param>
        /// <param name="actualTime">Specifies the value for the next actual time the Watcher will run.</param>
        public void PrepareWatcherForTest(bool enabled, int intervalSeconds, int timeoutSeconds, string scheduledTime, string actualTime)
        {
            Global.RO.Info("Preparing the Watcher for the test.");
            PingWatcherHealthCheck();

            //disable the watcher to get it into a clean state
            Global.RO.Info("Disabling the Watcher.");
            UpdateWatcherSetting("setenabled", enabled);

            //wait a minute for the watcher to enter a disabled state
            Global.RO.Info("Sleeping for 35 seconds to allow the Watcher to shut down.");
            Thread.Sleep(new TimeSpan(0, 0, 35));

            //set the interval seconds for the watcher
            Global.RO.Info(String.Format("Set the next interval seconds to {0}.", intervalSeconds));
            UpdateWatcherSetting("setintervalseconds", intervalSeconds);

            //set the timeout seconds for the watcher
            Global.RO.Info(String.Format("Set the timeout seconds to {0}.", timeoutSeconds));
            UpdateWatcherSetting("settimeoutseconds", timeoutSeconds);

            //reset the next scheduled time for the watcher
            Global.RO.Info("Resetting the next schedule date.");
            UpdateWatcherSetting("setnextscheduled", scheduledTime);

            //reset the next actual time for the watcher
            Global.RO.Info("Resetting the next actual date.");
            UpdateWatcherSetting("setnextactual", actualTime);
        }

        /// <summary>
        /// Retrieves the value for the setting specified.
        /// </summary>
        /// <param name="settingName">The name of the setting to retrieve.</param>
        /// <returns>The value of the setting specified.</returns>
        public string RetrieveWatcherSetting(string settingName)
        {
            //disable the watcher to get it into a clean state
            WebClient client = new WebClient();
            Stream stream = client.OpenRead(
                String.Format("http://{0}:{1}/cron/command.ashx?assembly={2}&classname={3}&op={4}&value={5}",
                    xblobMachineName, watcherPort, "TestWatcher.dll", "xonline.server.marketplace.test.TestWatcher",
                    "getsettingvalue", settingName));
            StreamReader reader = new StreamReader(stream);
            string response = reader.ReadToEnd();
            reader.Close();

            return response;
        }
        
        /// <summary>
        /// Updates the specified setting with the specified value.
        /// </summary>
        /// <param name="settingName">The name of the setting to update.</param>
        /// <param name="value">The value to use when updating the specified setting.</param>
        /// <returns>The response from the Watcher after updating the setting.</returns>
        public string UpdateWatcherSetting(string settingName, bool value)
        {
            return UpdateWatcherSetting(settingName, value, "TestWatcher.dll", "xonline.server.marketplace.test.TestWatcher");
        }

        /// <summary>
        /// Updates the specified setting with the specified value.
        /// </summary>
        /// <param name="settingName">The name of the setting to update.</param>
        /// <param name="value">The value to use when updating the specified setting.</param>
        /// <param name="assemblyName">The name of the assembly to reference.</param>
        /// <param name="className">The name of the class to reference.</param>
        /// <returns>The response from the Watcher after updating the setting.</returns>
        public string UpdateWatcherSetting(string settingName, bool value, string assemblyName, string className)
        {
            WebClient client = new WebClient();
            Stream stream = client.OpenRead(
                String.Format("http://{0}:{1}/cron/command.ashx?assembly={2}&classname={3}&op={4}&value={5}",
                    xblobMachineName, watcherPort, assemblyName, className,
                    settingName, value));
            StreamReader reader = new StreamReader(stream);
            string response = reader.ReadToEnd();
            reader.Close();

            return response;
        }

        /// <summary>
        /// Updates the specified setting with the specified value.
        /// </summary>
        /// <param name="settingName">The name of the setting to update.</param>
        /// <param name="value">The value to use when updating the specified setting.</param>
        /// <returns>The response from the Watcher after updating the setting.</returns>
        public string UpdateWatcherSetting(string settingName, int value)
        {
            return UpdateWatcherSetting(settingName, value, "TestWatcher.dll", "xonline.server.marketplace.test.TestWatcher");
        }

        /// <summary>
        /// Updates the specified setting with the specified value.
        /// </summary>
        /// <param name="settingName">The name of the setting to update.</param>
        /// <param name="value">The value to use when updating the specified setting.</param>
        /// <param name="assemblyName">The name of the assembly to reference.</param>
        /// <param name="className">The name of the class to reference.</param>
        /// <returns>The response from the Watcher after updating the setting.</returns>
        public string UpdateWatcherSetting(string settingName, int value, string assemblyName, string className)
        {
            WebClient client = new WebClient();
            Stream stream = client.OpenRead(
                String.Format("http://{0}:{1}/cron/command.ashx?assembly={2}&classname={3}&op={4}&value={5}",
                    xblobMachineName, watcherPort, assemblyName, className,
                    settingName, value));
            StreamReader reader = new StreamReader(stream);
            string response = reader.ReadToEnd();
            reader.Close();

            return response;
        }


        /// <summary>
        /// Updates the specified setting with the specified value.
        /// </summary>
        /// <param name="settingName">The name of the setting to update.</param>
        /// <param name="value">The value to use when updating the specified setting.</param>
        /// <returns>The response from the Watcher after updating the setting.</returns>
        public string UpdateWatcherSetting(string settingName, string value)
        {
            return UpdateWatcherSetting(settingName, value, "TestWatcher.dll", "xonline.server.marketplace.test.TestWatcher");
        }

        /// <summary>
        /// Updates the specified setting with the specified value.
        /// </summary>
        /// <param name="settingName">The name of the setting to update.</param>
        /// <param name="value">The value to use when updating the specified setting.</param>
        /// <param name="assemblyName">The name of the assembly to reference.</param>
        /// <param name="className">The name of the class to reference.</param>
        /// <returns>The response from the Watcher after updating the setting.</returns>
        public string UpdateWatcherSetting(string settingName, string value, string assemblyName, string className)
        {
            WebClient client = new WebClient();
            Stream stream = client.OpenRead(
                String.Format("http://{0}:{1}/cron/command.ashx?assembly={2}&classname={3}&op={4}&value={5}",
                    xblobMachineName, watcherPort, assemblyName, className,
                    settingName, value));
            StreamReader reader = new StreamReader(stream);
            string response = reader.ReadToEnd();
            reader.Close();

            return response;
        }

        /// <summary>
        /// Clean up the CDC tables to remove any interfering entries that could disrupt test cases
        /// </summary>
        /// <returns>True if successful, False if unsuccessful.</returns>
        public bool CleanCDCTables()
        {
            try
            {
                Catalog.ExecuteNonQuery(SQLDisableTransferJob());
                WaitSeconds(10);
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMedia());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCMediaUserRatingAggregate());
                Catalog.ExecuteNonQuery(SQLDeleteFromCDCUsageAggregateFromReporting());
                Catalog.ExecuteNonQuery(SQLDeleteFromToDoProduct());
                WaitSeconds(10);
                Catalog.ExecuteNonQuery(SQLEnableTransferJob());
            }
            catch
            {
                return false;
            }

            return true;
        }
        
        #endregion

        #region CDC Related Methods

        /// <summary>
        /// Query string to delete items from the CDC Media table
        /// </summary>
        /// <returns>Query string</returns>
        public string SQLDeleteFromCDCMedia()
        {
            return "DELETE FROM cdc.dbo_Media_CT";
        }

        /// <summary>
        /// Query string to delete items from the MediaUserRatingAggregate table
        /// </summary>
        /// <returns>Query string</returns>
        public string SQLDeleteFromCDCMediaUserRatingAggregate()
        {
            return "DELETE FROM cdc.dbo_MediaUserRatingAggregate_CT";
        }

        /// <summary>
        /// Query string to delete items from the UsageAggregateFromReporting table
        /// </summary>
        /// <returns>Query string</returns>
        public string SQLDeleteFromCDCUsageAggregateFromReporting()
        {
            return "DELETE FROM cdc.dbo_UsageAggregateFromReporting_CT";
        }

        /// <summary>
        /// Query string to delete items from the WatcherToDoProduct table
        /// </summary>
        /// <returns>Query string</returns>
        public string SQLDeleteFromToDoProduct()
        {
            return "DELETE FROM dbo.CatalogWatcherToDoProduct";
        }

        /// <summary>
        /// Query string to invoke the CatalogWatchertoDoTransferProduct job
        /// </summary>
        /// <returns>Query string</returns>
        public string SQLExecuteTransferJob()
        {
            return "EXEC dbo.CatalogWatcherToDoTransferProduct";
        }

        /// <summary>
        /// Construct the query for the top 30 media in the Media table.
        /// </summary>
        /// <returns>The query string used to return the top 30 media.</returns>
        public string QuerySelectTopMediaIdsFromMedia()
        {
            return QuerySelectTopMediaIdsFromMedia(30);
        }

        /// <summary>
        /// Construct the query for the top media in the Media table.  The number of
        /// media to be returned is specified by the count parameter.
        /// </summary>
        /// <param name="count">The number of media to request in the query</param>
        /// <returns>The query string used to return the number of media specified.</returns>
        public string QuerySelectTopMediaIdsFromMedia(int count)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(String.Format("SELECT TOP({0}) m.mediaId FROM Media m", count));
            sb.AppendLine("JOIN MediaType mt ON mt.mediaTypeId = m.mediaTypeId");
            sb.AppendLine("WHERE mt.mediaTypeId IN");
            sb.AppendLine("(");
            sb.AppendLine("1,  --Game ");
            sb.AppendLine("5,  --Game Trial ");
            sb.AppendLine("18, --Game Content ");
            sb.AppendLine("19, --Game Demo ");
            sb.AppendLine("20, --Theme ");
            sb.AppendLine("21, --Xbox Original Game ");
            sb.AppendLine("22, --Gamer Tile ");
            sb.AppendLine("23, --Arcade Game ");
            sb.AppendLine("24, --Game Consumable ");
            sb.AppendLine("30, --Game Video ");
            sb.AppendLine("34, --Game Trailer ");
            sb.AppendLine("37, --XNA Indie Game ");
            sb.AppendLine("45, --Server Backed Game ");
            sb.AppendLine("46, --Marketplace ");
            sb.AppendLine("47  --AvatarItem ");
            sb.AppendLine(")");
            sb.AppendLine("ORDER BY m.mediaId");

            return sb.ToString();
        }

        /// <summary>
        /// Construct the query for the top media in the Media table.  The number of
        /// media to be returned is specified by the count parameter.
        /// </summary>
        /// <param name="count">The number of media to request in the query</param>
        /// <returns>The query string used to return the number of media specified.</returns>
        public string QuerySelectTopTitlesFromMediaLocale(int count)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(String.Format("SELECT DISTINCT TOP({0}) ml.mediaid, ml.title FROM MediaLocale ml", count));
            sb.AppendLine("JOIN Media m ON m.mediaId = ml.mediaId");
            sb.AppendLine("JOIN MediaType mt ON mt.mediaTypeId = m.mediaTypeId");
            sb.AppendLine("WHERE mt.mediaTypeId IN");
            sb.AppendLine("(");
            sb.AppendLine("1,  --Game ");
            sb.AppendLine("5,  --Game Trial ");
            sb.AppendLine("18, --Game Content ");
            sb.AppendLine("19, --Game Demo ");
            sb.AppendLine("20, --Theme ");
            sb.AppendLine("21, --Xbox Original Game ");
            sb.AppendLine("22, --Gamer Tile ");
            sb.AppendLine("23, --Arcade Game ");
            sb.AppendLine("24, --Game Consumable ");
            sb.AppendLine("30, --Game Video ");
            sb.AppendLine("34, --Game Trailer ");
            sb.AppendLine("37, --XNA Indie Game ");
            sb.AppendLine("45, --Server Backed Game ");
            sb.AppendLine("46, --Marketplace ");
            sb.AppendLine("47  --AvatarItem ");
            sb.AppendLine(")");
            sb.AppendLine("ORDER BY ml.title");

            return sb.ToString();
        }

        /// <summary>
        /// Query string to enable the CDC transfer job
        /// </summary>
        /// <returns>Query string</returns>
        public string SQLEnableTransferJob()
        {
            return "EXEC msdb.dbo.sp_update_job @job_name='TransferCDCDataSQLJob',@enabled=1";
        }

        /// <summary>
        /// Query string to disable the CDC transfer job
        /// </summary>
        /// <returns>Query string</returns>
        public string SQLDisableTransferJob()
        {
            return "EXEC msdb.dbo.sp_update_job @job_name='TransferCDCDataSQLJob',@enabled=0";
        }

        /// <summary>
        /// Query string to update the modified date column on the mediaIds specified
        /// </summary>
        /// <param name="mediaIds">The mediaiIds to update</param>
        /// <returns>Query string</returns>
        public string UpdateMediaModifiedDate(List<string[]> mediaIds)
        {
            StringBuilder sb = new StringBuilder();
            foreach (string[] mediaId in mediaIds)
            {
                sb.AppendFormat("UPDATE Media SET modifiedDate=GETDATE() WHERE mediaId = '{0}'", mediaId[0]);
                sb.Append("\n");
            }

            return sb.ToString();
        }

        
        /// <summary>
        /// Query string to update the modified date column on the mediaIds specified
        /// </summary>
        /// <param name="mediaIds">The mediaiIds to update</param>
        /// <returns>Query string</returns>
        public string UpdateMediaModifiedDateByTitle(List<string[]> titles)
        {
            return UpdateMediaModifiedDateByTitle(titles, String.Empty);
        }

        /// <summary>
        /// Query string to update the modified date column on the mediaIds specified
        /// </summary>
        /// <param name="mediaIds">The mediaiIds to update</param>
        /// <returns>Query string</returns>
        public string UpdateMediaModifiedDateByTitle(List<string[]> titles, string uniqueTitleModifier)
        {
            StringBuilder sb = new StringBuilder();
            foreach (string[] title in titles)
            {
                sb.AppendLine("UPDATE Media SET modifiedDate=GETDATE() WHERE mediaId IN");
                sb.AppendFormat("(SELECT DISTINCT mediaId FROM MediaLocale WHERE title = \'{0}{1}\')", uniqueTitleModifier, title[1]);
                sb.Append("\n");
            }

            return sb.ToString();
        }

        /// <summary>
        /// Query string to update the modified date column on the mediaIds specified
        /// </summary>
        /// <param name="mediaIds">The mediaiIds to update</param>
        /// <returns>Query string</returns>
        public string UpdateTitleByTitle(List<string[]> titles, string uniqueTitleModifier)
        {
            StringBuilder sb = new StringBuilder();
            foreach (string[] title in titles)
            {
                sb.AppendFormat("UPDATE MediaLocale SET title='{0}' + title WHERE mediaId IN ", uniqueTitleModifier);
                sb.AppendFormat("(SELECT DISTINCT mediaId FROM MediaLocale WHERE title = \'{0}\')", title[1]);
                sb.Append("\n");
            }

            return sb.ToString();
        }

        /// <summary>
        /// Remove any lingering testcase modifiers that may have been left behind by previous test passes
        /// </summary>
        /// <returns>Query string</returns>
        public string RemoveTestcaseTitleModifiers()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("UPDATE MediaLocale SET title = SUBSTRING(title, charindex('*TEST*', title)+7,len(title)+1) ");
            sb.AppendLine("WHERE title LIKE '%*TEST*%'");
            
            return sb.ToString();
        }

        /// <summary>
        /// Query string to get the number of times the specified mediaids occur in the CDC Media table
        /// </summary>
        /// <param name="mediaIds">The mediaIds to filter on.</param>
        /// <returns>Query string</returns>
        public string GetCountMediasFromCDCMedia(List<string[]> mediaIds)
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("SELECT COUNT(DISTINCT(mediaId)) FROM cdc.dbo_Media_CT WHERE ");
            foreach (string[] mediaId in mediaIds)
            {
                sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
            }
            sb.Remove(sb.Length - 3, 3); //remove the last OR

            return sb.ToString();
        }

        /// <summary>
        /// Query string to get the number of unique mediaids occur in the CatalogWatcherTodoProduct table
        /// </summary>
        /// <param name="mediaIds">The mediaIds to filter on.</param>
        /// <returns>Query string</returns>
        public string GetCountUniqueMediasFromToDoProducts(List<string[]> mediaIds)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SELECT COUNT(DISTINCT(mediaId)) FROM dbo.CatalogWatcherToDoProduct WHERE ");
            foreach (string[] mediaId in mediaIds)
            {
                sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
            }
            sb.Remove(sb.Length - 3, 3); //remove the last OR

            return sb.ToString();
        }

        /// <summary>
        /// Query string to get the number of times the specified mediaids occur in the CatalogWatcherToDoProduct table
        /// </summary>
        /// <param name="mediaIds">The mediaIds to filter on.</param>
        /// <returns>Query string</returns>
        public string SQLCountMediasFromToDoProducts(List<string[]> mediaIds)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SELECT COUNT(mediaId) FROM dbo.CatalogWatcherToDoProduct WHERE ");
            foreach (string[] mediaId in mediaIds)
            {
                sb.AppendFormat("mediaId='{0}' OR ", mediaId[0]);
            }
            sb.Remove(sb.Length - 3, 3); //remove the last OR

            return sb.ToString();
        }

        /// <summary>
        /// Query string to get the number of rows in the CatalogWatcherToDoProduct table
        /// </summary>
        /// <returns>Query string</returns>
        public string GetCountFromToDoProduct()
        {
            return "SELECT COUNT(1) FROM dbo.CatalogWatcherToDoProduct";
        }

        #endregion

        #region FAST Related Methods

        /// <summary>
        /// Attempt to force FAST to flush and reindex the catalog collection.  Wait for reindexing to completed.
        /// </summary>
        public void WaitForIndexingToComplete()
        {
            WaitForIndexingToComplete(fastEspInstallation, fastEspIngestionPort, fastEspCatalog);
        }

        /// <summary>
        /// Attempt to force FAST to flush and reindex the catalog collection.  Wait for reindexing to completed.
        /// </summary>
        /// <param name="fastInstallation">The FAST installation to target.</param>
        /// <param name="fastPort">The port to use when communicating to FAST.</param>
        /// <param name="fastCatalog">The catalog collection to attempt to reindex.</param>
        public void WaitForIndexingToComplete(string fastInstallation, string fastPort, string fastCatalog)
        {
            IDocumentFeeder _documentFeeder = null;
            _documentFeeder = Factory.CreateDocumentFeeder(fastInstallation + ":" + fastPort, fastCatalog);

            // Force the flush to wait until it is completely indexed and searchable
            ISubsystem indexing = _documentFeeder.GetSystemConfig().GetSubsystem("indexing");
            if (indexing != null)
            {
                indexing.CompletedCallbackEnabled = true;
            }

            _documentFeeder.WaitForCompletion();

            // Turn off waiting for the indexing to be finished
            indexing = _documentFeeder.GetSystemConfig().GetSubsystem("indexing");
            if (indexing != null)
            {
                indexing.CompletedCallbackEnabled = false;
            }

            if (_documentFeeder != null)
            {
                _documentFeeder.Dispose();
            }
        }

        /// <summary>
        /// Execute a FAST search with the specified search term.
        /// </summary>
        /// <param name="searchTerm">The search term to use when carrying out the search.</param>
        /// <returns>The results of the FAST search.</returns>
        public static List<string> ExecuteFASTSearch(string searchTerm)
        {
            IQuery query = new Query(searchTerm);

            if (null == searchView)
            {
                NameValueCollection configuration = new NameValueCollection();
                configuration.Add("Com.FastSearch.Esp.Search.Http.QRServers", fastEspInstallation + ":" + fastEspSearchPort);

                ISearchFactory searchFactory = SearchFactory.NewInstance(configuration);

                searchView = searchFactory.GetSearchView(fastEspCatalog.ToLower());
            }

            List<string> resultsList = new List<string>();
            IQueryResult fastResult = searchView.Search(query);
            for(int i = 0; i < fastResult.DocCount; i++)
            {
                IDocumentSummary document = fastResult.GetDocument(i+1);
                IDocumentSummaryField xmlField = document.GetSummaryField("xml");
                resultsList.Add(xmlField.StringValue);
            }

            return resultsList;
        }


        /// <summary>
        /// Retrieve the current value for the specified performance counter from the Xblob machine set in the test config
        /// </summary>
        /// <param name="category">The category that the performance counter belongs to.</param>
        /// <param name="counter">The name of the performance counter.</param>
        /// <param name="instance">The performance counter instance that the counter belongs to.</param>
        /// <returns>The current value for the specified performance counter.</returns>
        public double GetCurrentCounterValue(string category, string counter, string instance)
        {
            System.Diagnostics.PerformanceCounter perfCounter = new System.Diagnostics.PerformanceCounter(
                category,
                counter,
                instance,
                xblobMachineName);

            return perfCounter.NextValue();
        }

        /// <summary>
        /// Monitor the specified performance counter for the desired value to be hit.  
        /// The PerfTargetReached event is invoked once the desired value has been achieved.
        /// </summary>
        /// <param name="category">The category that the performance counter belongs to.</param>
        /// <param name="counter">The name of the performance counter.</param>
        /// <param name="instance">The performance counter instance that the counter belongs to.</param>
        /// <param name="desiredMinValue">The minimum value to watch for before PerfTargetReached is invoked.</param>
        /// <param name="duration">The amount of time to wait for the performance counter to reach the target value before timing out.</param>
        public void MonitorPerformanceCounter(string category, string counter, string instance, double desiredMinValue, int duration)
        {
            PerfMonitorData data = new PerfMonitorData(category, counter, instance, xblobMachineName, desiredMinValue, duration);
            Thread perfMonitor = new Thread(new ParameterizedThreadStart(PerfMonitorWorker));
            perfMonitor.Start(data);            
        }

        private void PerfMonitorWorker(object state)
        {
            try
            {
                PerfMonitorData data = (PerfMonitorData)state;

                System.Diagnostics.PerformanceCounter perfCounter = data.PerfCounter;
                perfCounter.NextValue();

                Global.RO.Info("Monitoring Performance Counter:");
                Global.RO.Info(String.Format("\tCategory: {0}", data.Category));
                Global.RO.Info(String.Format("\tCounter: {0}", data.Counter));
                Global.RO.Info(String.Format("\tInstance: {0}", data.Instance));
                Global.RO.Info(String.Format("\tDesired Value: {0}", data.DesiredMinValue));

                DateTime terminationTime = DateTime.Now.AddSeconds(data.Duration);
                while (terminationTime > DateTime.Now)
                {
                    if (perfCounter.NextValue() >= data.DesiredMinValue &&
                        PerfCounterTargetReached.GetInvocationList().Length > 0)
                    {
                        PerfCounterTargetReached.Invoke(true, data.Category, data.Counter, data.Instance, data.DesiredMinValue);
                        return;
                    }

                    Thread.Sleep(500);
                }

                if (PerfCounterTargetReached.GetInvocationList().Length > 0)
                {
                    PerfCounterTargetReached.Invoke(false, data.Category, data.Counter, data.Instance, data.DesiredMinValue);
                }
            }
            catch (Exception ex)
            {
                Global.RO.Error(ex.ToString());
                ResultCode = TEST_RESULTS.FAILED;
            }
        }

        internal delegate void PerfCounterTargetReachedDelegate(
            bool desiredValueWasAchieved,
            string performanceCounterCategory,
            string performanceCounter,
            string performanceCounterInstance,
            double performanceCounterValue);

        internal event PerfCounterTargetReachedDelegate PerfCounterTargetReached;

        #endregion

        #region End to End Tests

        /// <summary>
        /// Prepare the environment for the end to end tests
        /// </summary>
        public void PrepareForEndToEndTest()
        {
            NPDB.ExecuteNonQuery(
                UpdateWatcherInterval(
                    60,
                    "CatalogWatcher",
                    "CatalogWatcherPlugin.dll",
                    "xonline.server.cron.plugins.CatalogWatcherPlugin.CatalogWatcherCronWrapper"));

            //Clean up the CDC tables to start from a clean state.
            Global.RO.Info("Cleaning the CDC tables...");
            CleanCDCTables();

            //Remove any old modified title strings to start from an clean state.
            Global.RO.Info("Cleaning any previously modified media titles...");
            Catalog.ExecuteNonQuery(
                RemoveTestcaseTitleModifiers());

            //Pinging the Cron health check to ensure that the Watcher job will be running.
            PingWatcherHealthCheck();
        }
        
        private string UpdateWatcherInterval(int seconds, string watcherName, string watcherAssembly, string watcherClass)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendFormat("UPDATE t_cron_jobs SET i_exec_interval_secs = {0} ", seconds);
            stringBuilder.AppendFormat("WHERE vc_name=\'{0}\' ", watcherName);
            stringBuilder.AppendFormat("AND vc_assembly=\'{0}\' ", watcherAssembly);
            stringBuilder.AppendFormat("AND vc_class=\'{0}\'\n", watcherClass);            
            return stringBuilder.ToString();
        }

        /// <summary>
        /// Get the query string to rename the GetProductMedia stored procedure
        /// </summary>
        /// <param name="currentName">The current name of the sproc</param>
        /// <param name="newName">The new name for the sproc</param>
        /// <returns>The query string.</returns>
        public string RenameGetProductMedia(string currentName, string newName)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendFormat("EXEC sp_rename @objName = '{0}', @newname = '{1}', @objtype = 'OBJECT'\n", currentName, newName);
            return stringBuilder.ToString();            
        }

        /// <summary>
        /// Modify media and associated title information to invoke CDC and the Watcher processes
        /// </summary>
        /// <param name="numberToModify">Number of products to modify</param>
        /// <param name="uniqueTitleModifier">A unique string that is prepended to the title metadata for vaildation</param>
        /// <returns>A dictionary of affected mediaIds and related title metadata.</returns>
        public Dictionary<string, string> ModifyMediaAndTitles(int numberToModify, string uniqueTitleModifier)
        {
            Dictionary<string, string> modifiedMedia = new Dictionary<string, string>();
            //Get the first mediaIds from the Media table
            List<string[]> titles = Catalog.ExecuteQueryGetMultiple(
                QuerySelectTopTitlesFromMediaLocale(numberToModify));

            if (titles.Count < numberToModify)
            {
                Global.RO.Warn(
                    String.Format("Only {0} titles were found where {1} were requested for this testcase!", titles.Count, numberToModify));
            }

            foreach (string[] title in titles)
            {
                try
                {
                    Global.RO.Info(
                        String.Format("Updating Title: {0}", title[1]));

                    title[1] = title[1].Replace("'", "''");
                    modifiedMedia.Add(title[0], uniqueTitleModifier + title[1]);
                }
                catch { }
            }

            //Update the title on those top titles
            Global.RO.Info("Update Titles with prepended value of " + uniqueTitleModifier + "in MediaLocale...");
            Catalog.ExecuteNonQuery(
                UpdateTitleByTitle(titles, uniqueTitleModifier));

            //Update the modified date on those top titles
            Global.RO.Info("Update modified date of titles just updated in Media table...");
            Catalog.ExecuteNonQuery(
                UpdateMediaModifiedDateByTitle(titles, uniqueTitleModifier));

            //Give CDC time to catch the changes and move them to the CDC table
            Global.RO.Info("Give CDC time to pick up the changes (10 seconds)...");
            WaitSeconds(10);

            return modifiedMedia;
        }

        /// <summary>
        /// Wait for modified records to be picked up and published.
        /// </summary>
        /// <param name="modifiedMedia">The affected products and related title metadata.</param>
        /// <param name="uniqueTitleModifier">The unique string that was prepended to the affected title metadata</param>
        /// <param name="retryAttempts">Number of times to check FAST for the updated records (at 60 second intervals).</param>
        public void WatchFASTForUpdatedDocuments(Dictionary<string, string> modifiedMedia, string uniqueTitleModifier, int retryAttempts)
        {
            int attempt = 0;
            Global.RO.Info("Waiting for the Watcher to wake up and publish the documents.");
            while (attempt++ < retryAttempts)
            {
                Global.RO.Info(String.Format("Waiting 60 seconds before checking (attempt {0}/{1})...", attempt, retryAttempts));
                Thread.Sleep(60000);

                //Execute FQL query and verify that the document made it
                int nonErrorCount = 0;
                List<string> results = null;
                foreach (string mediaId in modifiedMedia.Keys)
                {
                    results = ExecuteFASTSearch(String.Format("xml:AND(title:(\"{0}\"),mediaid:(\"{1}\"))", uniqueTitleModifier, mediaId));
                    
                    if (results.Count < 1 &&
                        attempt >= retryAttempts)
                    {
                        Global.RO.Error(
                            String.Format("Expected {0} result(s) querying FAST but received {1} for: {2}, {3}",
                            1,
                            results.Count,
                            mediaId,
                            modifiedMedia[mediaId]));
                        
                        ResultCode = TEST_RESULTS.FAILED;
                    }
                    else if (results.Count > 1)
                    {
                        Global.RO.Warn(
                            String.Format("Expected {0} result(s) querying FAST but received {1} for: {2}, {3}",
                            1,
                            results.Count,
                            mediaId,
                            modifiedMedia[mediaId]));

                        Global.RO.Warn("More results were returned than expected!  If this is not acceptable please update this test cases to " +
                            "result in a FAILURE rather than Passed.");

                        nonErrorCount++;
                    }
                    else if (results.Count == 1 &&
                             results.Contains(modifiedMedia[mediaId]))
                    {
                        nonErrorCount++;
                    }
                }

                if (nonErrorCount == modifiedMedia.Count)
                {
                    Global.RO.Info("All documents have been published.");
                    return;
                }
            }
        }

        #endregion

        /// <summary>
        /// Used to halt execution for a number of seconds.  Useful to wait for the SQL Server
        /// to run the necessary stored procs or jobs as scheduled before continuing execution.
        /// </summary>
        /// <param name="seconds">Time to wait, in seconds</param>
        internal void WaitSeconds(int seconds)
        {
            Thread.Sleep(seconds * 1000);
        }

        
        internal string GenerateRandomModifier(int length)
        {            
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < length; i++)
            {
                stringBuilder.Append(
                    randomCharacterBase[random.Next(0, randomCharacterBase.Length - 1)]);
            }

            stringBuilder.Append(" *TEST* ");
            return stringBuilder.ToString();
        }

        private class PerfMonitorData
        {
            public string Category = String.Empty;
            public string Counter = String.Empty;
            public string Instance = String.Empty;
            public string Machine = String.Empty;
            public double DesiredMinValue = -1;
            public int Duration = -1;
            public PerformanceCounter PerfCounter = null;

            public PerfMonitorData(string category, string counter, string instance, string targetMachine, double desiredMinValue, int duration)
            {
                Category = category;
                Counter = counter;
                Instance = instance;
                Machine = targetMachine;
                DesiredMinValue = desiredMinValue;
                Duration = duration;

                PerfCounter = new PerformanceCounter(
                    category,
                    counter,
                    instance,
                    targetMachine);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\msi\TestData.Xml\wix\dataFragment\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\msi\TestData.Xml\wix\xsdFragment\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\MusicNot\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\msi\TestData.Xml\wix\dataFragment-compile\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc

GUID_WXS=0a975990-3ce3-4121-bb10-162c9a9122b4

$(TARGETNAME).wxs: ..\dataFragment\$(TARGETNAME).wxs
    copy $** $@
    rep -find:"<Fragment>" -replace:"<Fragment Id=\"FragmentXmlData\">" \
        -find:"<DirectoryRef Id=\"TARGETDIR\">" -replace:"<DirectoryRef Id=\"DirectoryTestDataXml\">" \
        -find:"Component Id=\"component0\"" -replace:"Component Id=\"ComponentXmlData\"" \
        -find:"Directory Id=\"directory" -replace:"Directory Id=\"DirectoryXmlData" \
        -find:"File Id=\"file" -replace:"File Id=\"FileXmlData" \
        -find:PUT-GUID-HERE -replace:$(GUID_WXS) \
        $@
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\msi\TestData.Xml\wix\msi\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc

$(TARGETNAME).wxs:..\wxs\$(TARGETNAME).wxs
!IF "$(LINKONLY)"=="1"
    copy $** $@
    for /f %i in ('uuidgen -c') do rep -find:'PRODUCT_GUID' -replace:'%i' $@
    for /f %i in ('uuidgen -c') do rep -find:'PACKAGE_GUID' -replace:'%i' $@
!ENDIF
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\msi\TestData.Xml\wix\xsdFragment-compile\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc

GUID_WXS=0fb83139-f1f4-4b49-bb1f-87ec69f1246a

$(TARGETNAME).wxs: ..\xsdFragment\$(TARGETNAME).wxs
    copy $** $@
    rep -find:"<Fragment>" -replace:"<Fragment Id=\"FragmentXmlXsd\">" \
        -find:"<DirectoryRef Id=\"TARGETDIR\">" -replace:"<DirectoryRef Id=\"DirectoryTestDataXml\">" \
        -find:"Component Id=\"component0\"" -replace:"Component Id=\"ComponentXmlXsd\"" \
        -find:"Directory Id=\"directory" -replace:"Directory Id=\"DirectoryXmlXsd" \
        -find:"File Id=\"file" -replace:"File Id=\"FileXmlXsd" \
        -find:PUT-GUID-HERE -replace:$(GUID_WXS) \
        $@
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\BulkItemProperties.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public partial class BulkItemProperties : Form
    {
        public delegate void BulkPropertiesSetDelegate(ContentBase bulkProperties, int bulkItemCount, int initialCountValue);
        public event BulkPropertiesSetDelegate BulkPropertiesSet;
        
        private int bulkItemCount = 0;
        public int BulkItemCount
        {
            get { return bulkItemCount; }
            set { bulkItemCount = value; }
        }

        private ContentBase bulkContentProperties = new ContentBase();
        public ContentBase BulkContentProperties
        {
            get { return bulkContentProperties; }
        }

        public BulkItemProperties()
        {
            InitializeComponent();

            bulkContentProperties.Title = "Test Content Title %BULK%";
            bulkContentProperties.Description = "Test Content Description %BULK%.";
            propertyGrid1.SelectedObject = bulkContentProperties;
        }

        private void BulkItemProperties_Load(object sender, EventArgs e)
        {

        }
        
        private void button2_Click(object sender, EventArgs e)
        {
            int initialCountValue = 0;
            if(!Int32.TryParse(textBox1.Text, out initialCountValue))
            {
                MessageBox.Show("The value specified for the User Defined Initial Count is not a valid Int32 value.");
                return;
            }
            

            if (null != BulkPropertiesSet)
            {
                BulkPropertiesSet.Invoke(bulkContentProperties, bulkItemCount, initialCountValue);
            }

            this.Close();
            this.Dispose();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\DataMultiplier.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator.Common
{
    public partial class DataMultiplier : Form
    {
        public delegate void MultiplierSetDelegate(int multiplierValue, int countValue);
        public event MultiplierSetDelegate MultiplierSet;

        public DataMultiplier()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            int multiplier = 0;
            int countValue = 0;
            if (!Int32.TryParse(textBox1.Text, out multiplier) ||
                !Int32.TryParse(textBox2.Text, out countValue))
            {
                MessageBox.Show(
                    "Value specified is not a number!",
                    "Invalid Value Specified",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
            else if (multiplier <= 0 ||
                    countValue < 0)
            {
                MessageBox.Show(
                    "Value specified must be greater than 0!",
                    "Invalid Value Specified",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
            else if (null != MultiplierSet)
            {
                MultiplierSet.Invoke(multiplier, countValue);
            }

            this.Close();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\MusicNot\MusicNot.cs ===
using System.Xml.Serialization;
using System.Web.Services;
using System.ComponentModel;
using System.Web.Services.Protocols;
using System;
using System.Diagnostics;

namespace MusicNotService
{
    [WebService(Namespace="http://ws.musicnet.com")]
    [SoapDocumentService(RoutingStyle=SoapServiceRoutingStyle.RequestElement)]
    public class MusicNot
    {
        [WebMethod]
        public void UpgradeSubscriptionOffer(string authToken, string retailerId, string customerId, string orderId, string offerSKU, bool immediate, MusicNotService.CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }

        [WebMethod]
        public void CancelSubscriptionOffer(string authToken, string retailerId, string customerId, string orderId, bool immediate, MusicNotService.CustomProperty[] extraParameters)
        {
            Debug.WriteLine(string.Format("CancelSubscriptionOffer(authToken={0}, retailerId={1}, customerId={2}, orderId={3}, ...)",
                authToken,
                retailerId,
                customerId,
                orderId)
            );
        }

        [WebMethod]
        public void AddSubscriptionOffer(string authToken,  string retailerId,  string customerId,  string orderId,  string offerSKU, MusicNotService.CustomProperty[] extraParameters)
        {
            Debug.WriteLine(string.Format("AddSubscriptionOffer(authToken={0}, retailerId={1}, customerId={2}, orderId={3}, offerSKU={4}, ...)",
                authToken,
                retailerId,
                customerId,
                orderId,
                offerSKU)
            );
        }

        /// <remarks/>
        [WebMethod]
        public void EndTrialSubscriptionOffer(string authToken,  string retailerId,  string customerId,  string orderId,  CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }

        /// <remarks/>
        [WebMethod]
        public void DowngradeSubscriptionOffer(string authToken,  string retailerId,  string customerId,  string orderId,  string offerSKU, bool immediate,  CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }

        /// <remarks/>
        [WebMethod]
        public void ResumeAccount(string authToken,  string retailerId,  string customerId,  string orderId,  CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }

        /// <remarks/>
        [WebMethod]
        public void CreateAccount(string authToken, string retailerId, string customerId, string orderId, string postalCode, MusicNotService.CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }

        /// <remarks/>
        [WebMethod]
        public void AddTrialSubscriptionOffer(string authToken,  string retailerId,  string customerId,  string orderId,  string offerSKU,  string offerSKUToRollover, int noOfTrialDays,  CustomProperty[] extraParameters)
        {
            Debug.WriteLine(string.Format("AddTrialSubscriptionOffer(authToken={0}, retailerId={1}, customerId={2}, orderId={3}, offerSKU={4}, offerSKUToRollover={5}, noOfTrialDays={6}, ...)",
                authToken,
                retailerId,
                customerId,
                orderId,
                offerSKU,
                offerSKUToRollover,
                noOfTrialDays.ToString())
            );
        }

        /// <remarks/>
        [WebMethod]
        public Purchase PurchaseAssets(string authToken,  string retailerId,  string customerId,  string orderId,  PurchaseItem[] items,  string isoCountryCode, bool allowPartialPurchases,  CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }

        /// <remarks/>
        [WebMethod]
        public void CloseAccount(string authToken,  string retailerId,  string customerId,  string orderId,  CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }

        /// <remarks/>
        [WebMethod]
        public void UpdateAccount(string authToken,  string retailerId,  string customerId,  System.Nullable<AccountUpdateType> updateType,  string updateValue,  string orderId,  CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }

        /// <remarks/>
        [WebMethod]
        public void SuspendAccount(string authToken,  string retailerId,  string customerId,  string orderId,  CustomProperty[] extraParameters)
        {
            throw new Exception("Not implemented!");
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class CustomProperty {

        private string nameField;

        private string valueField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class Error {

        private int codeField;

        private bool codeFieldSpecified;

        private string descriptionField;

        /// <remarks/>
        public int code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool codeSpecified {
            get {
                return this.codeFieldSpecified;
            }
            set {
                this.codeFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class PurchaseItemResponse {

        private string assetCodeField;

        private Error errorField;

        private string mnetIdField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string assetCode {
            get {
                return this.assetCodeField;
            }
            set {
                this.assetCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Error error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string mnetId {
            get {
                return this.mnetIdField;
            }
            set {
                this.mnetIdField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class Purchase {

        private PurchaseItemResponse[] itemsWithErrorsField;

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public PurchaseItemResponse[] itemsWithErrors {
            get {
                return this.itemsWithErrorsField;
            }
            set {
                this.itemsWithErrorsField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class ItemPrice {

        private string amountField;

        private Currency currencyField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }

        /// <remarks/>
        public Currency currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum Currency {

        /// <remarks/>
        None,

        /// <remarks/>
        USD,

        /// <remarks/>
        CAD,

        /// <remarks/>
        GBP,

        /// <remarks/>
        EUR,

        /// <remarks/>
        JPY,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class PurchaseItem {

        private string assetCodeField;

        private string mnetIdField;

        private System.Nullable<PurchaseType> purchaseTypeField;

        private bool purchaseTypeFieldSpecified;

        private ItemPrice soldForPriceField;

        private ItemPrice suggestedRetailPriceField;

        private System.Nullable<PurchaseItemType> typeField;

        private bool typeFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string assetCode {
            get {
                return this.assetCodeField;
            }
            set {
                this.assetCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string mnetId {
            get {
                return this.mnetIdField;
            }
            set {
                this.mnetIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<PurchaseType> purchaseType {
            get {
                return this.purchaseTypeField;
            }
            set {
                this.purchaseTypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool purchaseTypeSpecified {
            get {
                return this.purchaseTypeFieldSpecified;
            }
            set {
                this.purchaseTypeFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ItemPrice soldForPrice {
            get {
                return this.soldForPriceField;
            }
            set {
                this.soldForPriceField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ItemPrice suggestedRetailPrice {
            get {
                return this.suggestedRetailPriceField;
            }
            set {
                this.suggestedRetailPriceField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<PurchaseItemType> type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum PurchaseType {

        /// <remarks/>
        Standard,

        /// <remarks/>
        SubscriptionFree,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum PurchaseItemType {

        /// <remarks/>
        Track,

        /// <remarks/>
        Album,

        /// <remarks/>
        Video,

        /// <remarks/>
        Undefined,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum AccountUpdateType {

        /// <remarks/>
        PostalCode,
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\DataMultiplier.Designer.cs ===
﻿namespace Marketplace.Test.TestDataCreator.Common
{
    partial class DataMultiplier
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.button1 = new System.Windows.Forms.Button();
            this.label1 = new System.Windows.Forms.Label();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(16, 109);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(291, 23);
            this.button1.TabIndex = 0;
            this.button1.Text = "OK";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(13, 13);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(223, 13);
            this.label1.TabIndex = 1;
            this.label1.Text = "Enter the total number of items you would like:";
            // 
            // textBox1
            // 
            this.textBox1.Location = new System.Drawing.Point(16, 29);
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(291, 20);
            this.textBox1.TabIndex = 2;
            this.textBox1.Text = "5";
            // 
            // textBox2
            // 
            this.textBox2.Location = new System.Drawing.Point(16, 77);
            this.textBox2.Name = "textBox2";
            this.textBox2.Size = new System.Drawing.Size(291, 20);
            this.textBox2.TabIndex = 4;
            this.textBox2.Text = "0";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(13, 61);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(297, 13);
            this.label2.TabIndex = 3;
            this.label2.Text = "Specify the value to start at if count wildcards are being used:";
            // 
            // DataMultiplier
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(319, 144);
            this.Controls.Add(this.textBox2);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.textBox1);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.button1);
            this.Name = "DataMultiplier";
            this.Text = "Test Data Multiplier";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox textBox1;
        private System.Windows.Forms.TextBox textBox2;
        private System.Windows.Forms.Label label2;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator.Common
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            WizardStateMachine stateMachine = new WizardStateMachine();
            WizardStateForm wizardForm = stateMachine.Start();

            Category.AvailableCategories.Add("Action & Adventure", 3002);
            Category.AvailableCategories.Add("Family", 3005);
            Category.AvailableCategories.Add("Shooter", 3011);
            Category.AvailableCategories.Add("Strategy & Simulation", 3012);
            Category.AvailableCategories.Add("Other", 3001);
            Category.AvailableCategories.Add("Xbox LIVE Games", 3027);

            PublisherBit.AvailablePublisherBits.Add(String.Empty, 0);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 1", 12001);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 2", 12002);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 3", 12003);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 4", 12004);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 5", 12005);

            Rating.AvailableRatings.Add("Early Childhood", 0);
            Rating.AvailableRatings.Add("Everyone", 10);
            Rating.AvailableRatings.Add("10+", 20);
            Rating.AvailableRatings.Add("RP E10+", 25);
            Rating.AvailableRatings.Add("Teen", 30);
            Rating.AvailableRatings.Add("Mature", 40);

            RatingDescriptor.AvailableRatingDescriptors.Add("Alcohol Reference", 0);
            RatingDescriptor.AvailableRatingDescriptors.Add("Animated Blood", 1);
            RatingDescriptor.AvailableRatingDescriptors.Add("Cartoon Violence", 4);
            RatingDescriptor.AvailableRatingDescriptors.Add("Informational", 10);
            RatingDescriptor.AvailableRatingDescriptors.Add("Real Gambling", 18);

            Application.Run(wizardForm);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\BulkItemProperties.Designer.cs ===
﻿namespace Marketplace.Test.TestDataCreator
{
    partial class BulkItemProperties
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.propertyGrid1 = new System.Windows.Forms.PropertyGrid();
            this.button2 = new System.Windows.Forms.Button();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // propertyGrid1
            // 
            this.propertyGrid1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.propertyGrid1.Location = new System.Drawing.Point(13, 13);
            this.propertyGrid1.Name = "propertyGrid1";
            this.propertyGrid1.Size = new System.Drawing.Size(641, 306);
            this.propertyGrid1.TabIndex = 0;
            // 
            // button2
            // 
            this.button2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.button2.Location = new System.Drawing.Point(13, 332);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(641, 23);
            this.button2.TabIndex = 2;
            this.button2.Text = "OK";
            this.button2.UseVisualStyleBackColor = true;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // label1
            // 
            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(12, 364);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(400, 13);
            this.label1.TabIndex = 3;
            this.label1.Text = "See the usage and help documentation for information on available string wildcard" +
                "s.";
            // 
            // label2
            // 
            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(12, 377);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(395, 13);
            this.label2.TabIndex = 4;
            this.label2.Text = "The Title and Description properties contain an example for the %BULK% wildcard.";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(471, 364);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(130, 13);
            this.label3.TabIndex = 5;
            this.label3.Text = "User Defined Initial Count:";
            // 
            // textBox1
            // 
            this.textBox1.Location = new System.Drawing.Point(604, 361);
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(50, 20);
            this.textBox1.TabIndex = 6;
            this.textBox1.Text = "1";
            // 
            // BulkItemProperties
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(666, 398);
            this.Controls.Add(this.textBox1);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.button2);
            this.Controls.Add(this.propertyGrid1);
            this.Name = "BulkItemProperties";
            this.Text = "Bulk Item Properties";
            this.Load += new System.EventHandler(this.BulkItemProperties_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.PropertyGrid propertyGrid1;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox textBox1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\WizardBasicPropertiesState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardBasicPropertiesState : WizardState
    {
        public WizardBasicPropertiesState()
        {
            WizardStateDescription = "Add or modify the basic settings and parameters for the type of content you have chosen:";
        }

        public override void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            base.DrawStateControls(wizard, hasPrevious, hasNext);

            PropertyGrid propertyGrid = new PropertyGrid();
            propertyGrid.Location = new System.Drawing.Point(24, 115);
            propertyGrid.Name = "propertyGrid";
            propertyGrid.Size = new System.Drawing.Size(438, 252);
            propertyGrid.TabIndex = 2;

            wizard.Controls.Add(propertyGrid);
            propertyGrid.SelectedObject = CurrentContent;
        }

        public override void PreviousButton_Click(object sender, EventArgs e)
        {
            if (null != ParentContent)
            {
                StateMachine.MoveNext(this, typeof(WizardRelatedContentSelection), ParentContent, ParentContent);
            }
            else
            {
                base.PreviousButton_Click(sender, e);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\TestDataCreator.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.CSharp;
using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public partial class TestDataCreator : Form
    {
        #region Fields

        private ContentBase parentContent = null;
        private Dictionary<TreeNode, ContentBase> testContent = new Dictionary<TreeNode, ContentBase>();
        private Dictionary<ProductType, int> productTypeCounts = new Dictionary<ProductType, int>();
        private StatusUpdatedDelegate statusUpdatedCallback;
        private delegate void UpdateStatusDelegate(string currentStatus, string error, int total, int step);
        
        #endregion

        #region Constructor
        
        public TestDataCreator()
        {
            InitializeComponent();
            
            statusUpdatedCallback = new StatusUpdatedDelegate(outputModule_StatusUpdated);
            propertyGrid1.PropertyValueChanged += new PropertyValueChangedEventHandler(propertyGrid1_PropertyValueChanged);
        }

        #endregion

        #region Control Methods

        void propertyGrid1_PropertyValueChanged(object s, PropertyValueChangedEventArgs e)
        {
            if (e.ChangedItem.Label == "ProductType")
            {
                productTypeCounts[(ProductType)e.OldValue] -= 1;
                UpdateProductTypeCount(testContent[dataTree.SelectedNode].ProductType, 1);
                dataTree.SelectedNode.Text = e.ChangedItem.Value.ToString();

                if (testContent[dataTree.SelectedNode].ProductType == ProductType.Bundle)
                {
                    BundleContent bundleContent = new BundleContent(testContent[dataTree.SelectedNode]);
                    if (null != dataTree.SelectedNode.Parent)
                    {
                        ContentBase parentContent = testContent[dataTree.SelectedNode.Parent];
                        parentContent.RelatedContent[dataTree.SelectedNode.Index] = bundleContent;
                    }

                    testContent[dataTree.SelectedNode] = bundleContent;
                }
                else if ((ProductType)e.OldValue == ProductType.Bundle)
                {
                    ContentBase newContent = new ContentBase(testContent[dataTree.SelectedNode]);
                    if (null != dataTree.SelectedNode.Parent)
                    {
                        ContentBase parentContent = testContent[dataTree.SelectedNode.Parent];
                        parentContent.RelatedContent[dataTree.SelectedNode.Index] = newContent;
                    }

                    testContent[dataTree.SelectedNode] = newContent;                    
                }

                propertyGrid1.SelectedObject = testContent[dataTree.SelectedNode];
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            TreeNode newNode = null;
            TreeNode selectedNode = dataTree.SelectedNode;
            if (null != selectedNode &&
                selectedNode.Level > 0 &&
                selectedNode.Parent.Text != "Bundle")
            {
                selectedNode = selectedNode.Parent;
            }

            //if adding the parent content
            if (dataTree.Nodes.Count == 0)
            {
                parentContent = new ContentBase();
                newNode = dataTree.Nodes.Add(parentContent.ProductType.ToString());
                testContent.Add(newNode, parentContent);
                UpdateProductTypeCount(parentContent.ProductType, 1);
            }

            //if adding just one child content
            else if (numericUpDown1.Value == 1)
            {
                ContentBase newContent = new ContentBase();
                newNode = selectedNode.Nodes.Add(newContent.ProductType.ToString());
                testContent.Add(newNode, newContent);
                testContent[selectedNode].RelatedContent.Add(newContent);
                UpdateProductTypeCount(newContent.ProductType, 1);

                dataTree.ExpandAll();                                
            }
                
            //if adding more than one child content
            else
            {
                BulkItemProperties bulkItemProperties = new BulkItemProperties();
                bulkItemProperties.BulkPropertiesSet += new BulkItemProperties.BulkPropertiesSetDelegate(bulkItemProperties_BulkPropertiesSet);
                bulkItemProperties.BulkItemCount = (int)numericUpDown1.Value;
                bulkItemProperties.Show();
            }

            dataTree.SelectedNode = newNode;
        }

        private void treeView1_AfterSelect_1(object sender, TreeViewEventArgs e)
        {
            //update the propertyGrid with the details of the selected content
            if (null != dataTree.SelectedNode)
            {
                ContentBase currentContent = testContent[dataTree.SelectedNode];
                propertyGrid1.SelectedObject = currentContent;
            }
        }
                        
        void bulkItemProperties_BulkPropertiesSet(ContentBase bulkProperties, int bulkItemCount, int userDefinedValue)
        {
            ContentBase newContent = null;
            TreeNode newNode = null;

            for (int i = 0; i < bulkItemCount; i++)
            {
                newContent = new ContentBase(bulkProperties);
                
                //add the bulk content to the first parent node if no nodes are selected
                if (null == dataTree.SelectedNode)
                {
                    newNode = dataTree.Nodes[0].Nodes.Add(newContent.ProductType.ToString());
                    testContent[dataTree.Nodes[0]].RelatedContent.Add(newContent);
                }

                //add the bulk content to the selected parent node if one is selected
                else
                {
                    newNode = dataTree.SelectedNode.Nodes.Add(newContent.ProductType.ToString());
                    testContent[dataTree.SelectedNode].RelatedContent.Add(newContent);
                }

                testContent.Add(newNode, newContent);

                UpdateProductTypeCount(newContent.ProductType, 1);
                PostProcessContent(newContent, i + 1, userDefinedValue++);
            }

            dataTree.ExpandAll();
        }

        private void PostProcessContent(ContentBase content, int currentBulkItemIndex, int userDefinedValue)
        {
            //process bulk content wildcards
            content.Description = content.Description.Replace(
                "%BULK%", 
                currentBulkItemIndex.ToString());
            content.Title = content.Title.Replace(
                "%BULK%", 
                currentBulkItemIndex.ToString());
            
            content.Description = content.Description.Replace(
                "%PRODUCT_TYPE_COUNT%", 
                productTypeCounts[content.ProductType].ToString());
            content.Title = content.Title.Replace(
                "%PRODUCT_TYPE_COUNT%",
                productTypeCounts[content.ProductType].ToString());
            
            content.Description = content.Description.Replace(
                "%USER_DEFINED_COUNT%",
                 userDefinedValue.ToString());
            content.Title = content.Title.Replace(
                "%USER_DEFINED_COUNT%",
                 userDefinedValue.ToString());

            //process bulk content wildcards for all related content
            foreach (ContentBase relatedContent in content.RelatedContent)
            {
                PostProcessContent(relatedContent, currentBulkItemIndex++, userDefinedValue++);
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //if no node is selected, return without removing anything
            TreeNode selectedNode = dataTree.SelectedNode;
            if (null == selectedNode)
            {
                return;
            } 

            //if a parent node is being removed, remove all of the related content as well
            if (selectedNode.Level == 0)
            {
                while (selectedNode.Nodes.Count > 0)
                {
                    UpdateProductTypeCount(
                        testContent[selectedNode.Nodes[0]].ProductType,
                        -1);

                    testContent.Remove(selectedNode.Nodes[0]);
                    selectedNode.Nodes.RemoveAt(0);
                }
            }

            //remove selected related content
            else if(selectedNode.Level > 0 &&
                    selectedNode.Index + 1 <= testContent[selectedNode.Parent].RelatedContent.Count)
            {
                testContent[selectedNode.Parent].RelatedContent.RemoveAt(selectedNode.Index);
            }

            UpdateProductTypeCount(
                    testContent[selectedNode].ProductType,
                    -1);

            testContent.Remove(selectedNode);
            dataTree.Nodes.Remove(selectedNode);
            dataTree.SelectedNode = null;
            propertyGrid1.SelectedObject = null;
        }

        private void TestDataCreator_Load(object sender, EventArgs e)
        {
            this.FormClosed += new FormClosedEventHandler(TestDataCreator_FormClosed);
        }

        void TestDataCreator_FormClosed(object sender, FormClosedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Environment.Exit(0);
        }

        private void GenerationWorker(object state)
        {
            string fileName = (string)state;

            //load the specified output module
            Configuration config = ConfigurationManager.OpenExeConfiguration(Application.ExecutablePath);
            System.Reflection.Assembly assembly = System.Reflection.Assembly.LoadFrom(config.AppSettings.Settings["DataInterfaceModule"].Value);
            string currentInterfaceModule = config.AppSettings.Settings["DataInterfaceModuleNamespace"].Value + "." +
                config.AppSettings.Settings["DataInterfaceModuleClassName"].Value;

            IOutputModule outputModule = (IOutputModule)assembly.CreateInstance(currentInterfaceModule);
            outputModule.StatusUpdated += statusUpdatedCallback;
            outputModule.SaveLocation = fileName;

            //bundle up all test content to pass to the output module
            List<ContentBase> content = new List<ContentBase>();
            foreach (TreeNode node in dataTree.Nodes)
            {
                content.Add(testContent[node]);
            }

            outputModule.GenerateTestContent(content);            
        }

        void outputModule_StatusUpdated(string currentStatus, string error, int total, int step)
        {
            UpdateStatusDelegate updateStatus = new UpdateStatusDelegate(UpdateStatus);
            this.Invoke(updateStatus, new object[] { currentStatus, error, total, step });
        }

        private void UpdateStatus(string currentStatus, string error, int total, int step)
        {
            toolStripStatusLabel1.Text = currentStatus;

            //if this is a new progress bar, set the values appropriately
            if (toolStripProgressBar1.Maximum < total)
            {
                toolStripProgressBar1.Maximum = total;
                toolStripProgressBar1.Step = 1;
                toolStripProgressBar1.PerformStep();
            }
                            
            else
            {
                toolStripProgressBar1.PerformStep();
            }

            //display the error if one has occurred
            if (null != error)
            {
                MessageBox.Show(
                    currentStatus + Environment.NewLine + error,
                    "An Error Occurred!",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void addItemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            button1_Click(sender, e);
        }   

        private void removeItemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (DialogResult.Yes ==
                MessageBox.Show("Are you sure you want to remove the selected item?",
                "Removal Confirmation",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question))
            {
                button2_Click(sender, e);
            }
        }

        private void multiplySelectedItemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (null != dataTree.SelectedNode)
            {
                DataMultiplier multiplier = new DataMultiplier();
                multiplier.MultiplierSet += new DataMultiplier.MultiplierSetDelegate(multiplier_MultiplierSet);
                multiplier.Show();
            }
        }

        void multiplier_MultiplierSet(int multiplierValue, int userDefinedValue)
        {
            int level = dataTree.SelectedNode.Level;
            ContentBase originalBase = new ContentBase(testContent[dataTree.SelectedNode]);

            //Process wildcards on any of the configured content
            PostProcessContent(testContent[dataTree.SelectedNode], 0, userDefinedValue++);            
            foreach (ContentBase relatedContent in testContent[dataTree.SelectedNode].RelatedContent)
            {
                PostProcessContent(relatedContent, 0, userDefinedValue++);
            }

            //Multiply the selected content its related content X number of times
            for (int i = 0; i < multiplierValue-1; i++)
            {
                ContentBase newContent = null;

                if (originalBase.ProductType == ProductType.Bundle)
                {
                    newContent = new BundleContent(originalBase);
                }
                else
                {
                    newContent = new ContentBase(originalBase);
                }

                TreeNode newNode = null;
                
                if (level == 0)
                {
                    newNode = dataTree.Nodes.Add(newContent.ProductType.ToString());
                    testContent.Add(newNode, newContent);
                    
                    for (int j = 0; j < newContent.RelatedContent.Count; j++)
                    {
                        ContentBase relatedContent = newContent.RelatedContent[j];
                        TreeNode relatedNode = newNode.Nodes.Add(relatedContent.ProductType.ToString());
                        testContent.Add(relatedNode, relatedContent);
                        
                        UpdateProductTypeCount(relatedContent.ProductType, 1);
                        PostProcessContent(relatedContent, j + 1, userDefinedValue++);

                        //if working with a bundle, there is a third level of nested content
                        for (int k = 0; k < relatedContent.RelatedContent.Count; k++)
                        {
                            ContentBase childContent = relatedContent.RelatedContent[k];
                            TreeNode childNode = relatedNode.Nodes.Add(childContent.ProductType.ToString());
                            testContent.Add(childNode, childContent);

                            UpdateProductTypeCount(childContent.ProductType, 1);
                            PostProcessContent(childContent, k + 1, userDefinedValue++);
                        }
                    }
                }
                else
                {
                    ContentBase selectedContent = testContent[dataTree.SelectedNode];
                    newNode = dataTree.SelectedNode.Parent.Nodes.Add(newContent.ProductType.ToString());
                    testContent[dataTree.SelectedNode.Parent].RelatedContent.Add(newContent);
                    testContent.Add(newNode, newContent);

                    //if working with a bundle, there is a third level of nested content
                    for (int k = 0; k < selectedContent.RelatedContent.Count; k++)
                    {
                        ContentBase childContent = selectedContent.RelatedContent[k];
                        TreeNode childNode = newNode.Nodes.Add(childContent.ProductType.ToString());
                        testContent.Add(childNode, childContent);

                        UpdateProductTypeCount(childContent.ProductType, 1);
                        PostProcessContent(childContent, k + 1, userDefinedValue++);
                    }
                }                
                
                dataTree.ExpandAll();
                UpdateProductTypeCount(newContent.ProductType, 1);
                PostProcessContent(newContent, i + 1, userDefinedValue++);
            }
        }

        private void generateTestDataToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStripProgressBar1.Value = 0;
            toolStripProgressBar1.Maximum = 0;
            toolStripProgressBar1.Minimum = 0;

            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.* ";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                statusUpdatedCallback("Beginning test data generation...", null, toolStripProgressBar1.Maximum, toolStripProgressBar1.Step);

                Thread generationThread = new Thread(new ParameterizedThreadStart(GenerationWorker));
                generationThread.Start(dialog.FileName);
            }
        }

        private void clearAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (DialogResult.Yes ==
                MessageBox.Show("Are you sure you want to remove all of the items below?",
                "Removal Confirmation",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question))
            {
                testContent.Clear();
                dataTree.Nodes.Clear();
                propertyGrid1.SelectedObject = null;
            }
        }

        private void saveConfigurationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            StringBuilder stringBuilder = new StringBuilder();

            List<ContentBase> content = new List<ContentBase>();
            foreach (TreeNode node in dataTree.Nodes)
            {
                    content.Add(testContent[node]);             
            }

            MemoryStream memoryStream = new MemoryStream();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(memoryStream, Encoding.UTF8);
            XmlSerializer serializer = new XmlSerializer(
                content.GetType(),
                new Type[] { typeof(BundleContent) });

            serializer.Serialize(xmlTextWriter, content);
            memoryStream = (MemoryStream)xmlTextWriter.BaseStream;
            stringBuilder.Append(Encoding.UTF8.GetString(memoryStream.ToArray()));
            
            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.* ";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                StreamWriter writer = new StreamWriter(dialog.FileName);
                writer.Write(stringBuilder.ToString());
                writer.Close();
            }
        }

        private void loadConfigurationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.* ";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                dataTree.Nodes.Clear();
                testContent.Clear();

                StreamReader reader = new StreamReader(dialog.FileName);
                string serialized = reader.ReadToEnd();
                reader.Close();

                MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(serialized));
                XmlSerializer serializer = new XmlSerializer(
                    typeof(List<ContentBase>),
                    new Type[] { typeof(BundleContent) } );

                List<ContentBase> content = (List<ContentBase>)serializer.Deserialize(stream);
                TreeNode node = null;
                TreeNode childNode = null;

                foreach (ContentBase parentContent in content)
                {
                    StripXboxLiveGamesCategory(parentContent);
                    node = dataTree.Nodes.Add(parentContent.ProductType.ToString());
                    testContent.Add(node, parentContent);
                    UpdateProductTypeCount(parentContent.ProductType, 1);

                    foreach (ContentBase childContent in parentContent.RelatedContent)
                    {
                        StripXboxLiveGamesCategory(childContent);
                        childNode = node.Nodes.Add(childContent.ProductType.ToString());
                        testContent.Add(childNode, childContent);
                        UpdateProductTypeCount(childContent.ProductType, 1);
                    }
                }

                dataTree.ExpandAll();
            }
        }

        private void addToolStripMenuItem_Click(object sender, EventArgs e)
        {
            button1_Click(sender, e);
        }

        private void removeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            button2_Click(sender, e);
        }

        private void expandToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dataTree.ExpandAll();
        }

        private void collapseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dataTree.CollapseAll();
        }

        #endregion

        #region Helper Methods

        private void StripXboxLiveGamesCategory(ContentBase content)
        {
            //because there is always an Xbox LIVE Games category when a new instance
            //of ContentBase, remove it from the newly created instance.  If it had been
            //saved there will be two at instantiation and one will be left after this process.
            for (int i = 0; i < content.Categories.Count; i++)
            {
                if (content.Categories[i].Name == "Xbox LIVE Games")
                {
                    content.Categories.Remove(content.Categories[i]);
                    break;
                }
            }
        }

        private void UpdateProductTypeCount(ProductType productType, int modification)
        {
            if (!productTypeCounts.ContainsKey(productType))
            {
                productTypeCounts.Add(productType, 1);
            }
            else
            {
                productTypeCounts[productType] += modification;
            }

            if (productTypeCounts[productType] < 0)
            {
                productTypeCounts[productType] = 0;
            }
        }

        #endregion

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\WizardStateForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator
{
    public partial class WizardStateForm : Form
    {
        public WizardStateForm()
        {
            InitializeComponent();
        }

        private void CreationWizard_Load(object sender, EventArgs e)
        {
         
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\WizardContentSelectionState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardContentSelectionState : WizardState
    {
        private ComboBox productTypeCombo = new ComboBox();

        public WizardContentSelectionState() 
        {
            WizardStateDescription = Environment.NewLine + 
             "          Welcome to the Marketplace Test Data Creation wizard!" + Environment.NewLine + Environment.NewLine +
             "          To begin the process with the wizard, please select the type of content you" + Environment.NewLine + "          would like to create." + Environment.NewLine + Environment.NewLine +
             "          You may also choose to use the direct data creation tool by selecting the " + Environment.NewLine + "          advanced option below:";
        }

        public override void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            base.DrawStateControls(wizard, hasPrevious, hasNext);

            productTypeCombo = new System.Windows.Forms.ComboBox();
            productTypeCombo.FormattingEnabled = true;
            productTypeCombo.Location = new System.Drawing.Point(148, 230);
            productTypeCombo.Name = "productTypeCombo";
            productTypeCombo.Size = new System.Drawing.Size(179, 21);
            productTypeCombo.TabIndex = 3;
            productTypeCombo.SelectedValueChanged += new EventHandler(productTypeCombo_SelectedValueChanged);

            foreach (string contentType in Enum.GetNames(typeof(ProductType)))
            {
                productTypeCombo.Items.Add(contentType);
            }
            
            productTypeCombo.SelectedText = CurrentContent.ProductType.ToString();
            wizard.Controls.Add(productTypeCombo);

            Button advancedButton = new Button();
            advancedButton.Location = new System.Drawing.Point(165, 280);
            advancedButton.Name = "advancedButton";
            advancedButton.Size = new System.Drawing.Size(150, 50);
            advancedButton.TabIndex = 5;
            advancedButton.Text = "Advanced";
            advancedButton.UseVisualStyleBackColor = true;
            advancedButton.Click += new System.EventHandler(AdvancedButton_Click);
            wizard.Controls.Add(advancedButton);
        }

        private void AdvancedButton_Click(object sender, EventArgs e)
        {
            TestDataCreator advancedTool = new TestDataCreator();
            advancedTool.Show();
            advancedTool.BringToFront();
            StateMachine.Wizard.Hide();
        }

        void productTypeCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            CurrentContent = new ContentBase();
            CurrentContent.ProductType = (ProductType)Enum.Parse(typeof(ProductType), productTypeCombo.Text);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\WizardGenerationState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardGenerationState : WizardState
    {
        private StatusUpdatedDelegate statusUpdatedCallback;
        private Label generatingLabel = null;
        private ProgressBar progressBar = null;
        private WizardStateForm wizardForm = null;
        private TextBox saveLocationText = null;
        private IOutputModule outputModule = null;
        private delegate void UpdateStatusDelegate(string currentStatus, string error, int total, int step);

        public WizardGenerationState()
        {
            WizardStateDescription = "";
            statusUpdatedCallback = new StatusUpdatedDelegate(StatusUpdated);
        }

        void StatusUpdated(string currentStatus, string error, int total, int step)
        {
            UpdateStatusDelegate updateStatus = new UpdateStatusDelegate(UpdateStatus);
            wizardForm.Invoke(updateStatus, new object[] { currentStatus, error, total, step });
        }

        private void UpdateStatus(string currentStatus, string error, int total, int step)
        {
            generatingLabel.Text = currentStatus;

            if (progressBar.Maximum < total)
            {
                progressBar.Maximum = total;
                progressBar.Step = 1;
                progressBar.PerformStep();
            }
            else
            {
                progressBar.PerformStep();
            }

            if (null != error)
            {
                MessageBox.Show(
                    currentStatus + Environment.NewLine + error,
                    "An Error Occurred!",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }


        public override void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            base.DrawStateControls(wizard, hasPrevious, hasNext);
            wizardForm = wizard;

            generatingLabel = new Label();
            generatingLabel.Location = new System.Drawing.Point(0, 150);
            generatingLabel.Size = new System.Drawing.Size(wizard.Width, 20);
            generatingLabel.Text = "Ready to begin generating content based on the configuration specified...";
            generatingLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            wizard.Controls.Add(generatingLabel);

            progressBar = new ProgressBar();
            progressBar.Location = new System.Drawing.Point(100, 180);
            progressBar.Size = new System.Drawing.Size(290, 20);
            progressBar.Maximum = 0;
            wizard.Controls.Add(progressBar);

            Label saveLocationLabel = new Label();
            saveLocationLabel.Location = new System.Drawing.Point(100, 220);
            saveLocationLabel.AutoSize = true;
            saveLocationLabel.Text = "Generated Content Save Location:";
            wizard.Controls.Add(saveLocationLabel);

            saveLocationText = new TextBox();
            saveLocationText.Location = new System.Drawing.Point(100, 240);
            saveLocationText.Size = new System.Drawing.Size(290, 20);
            wizard.Controls.Add(saveLocationText);


            Button generateButton = new Button();
            generateButton.Location = new System.Drawing.Point(165, 280);
            generateButton.Name = "generateButton";
            generateButton.Size = new System.Drawing.Size(150, 50);
            generateButton.TabIndex = 5;
            generateButton.Text = "Generate";
            generateButton.UseVisualStyleBackColor = true;
            generateButton.Click += new EventHandler(generateButton_Click);
            wizard.Controls.Add(generateButton);
        }

        void generateButton_Click(object sender, EventArgs e)
        {
            outputModule.SaveLocation = saveLocationText.Text;
            
            Thread generationThread = new Thread(new ParameterizedThreadStart(GenerationWorker));
            generationThread.Start(outputModule);        
        }

        public override void StateSpecificExecute()
        {
            Configuration config = ConfigurationManager.OpenExeConfiguration(Application.ExecutablePath);
            System.Reflection.Assembly assembly = System.Reflection.Assembly.LoadFrom(config.AppSettings.Settings["DataInterfaceModule"].Value);
            string currentInterfaceModule = config.AppSettings.Settings["DataInterfaceModuleNamespace"].Value + "." +
                config.AppSettings.Settings["DataInterfaceModuleClassName"].Value;

            outputModule = (IOutputModule)assembly.CreateInstance(currentInterfaceModule);
            outputModule.StatusUpdated += statusUpdatedCallback;

            saveLocationText.Text = outputModule.SaveLocation;
        }

        private void GenerationWorker(object state)
        {
            IOutputModule outputModule = (IOutputModule)state;            
            List<ContentBase> content = new List<ContentBase>();

            if (null != ParentContent)
            {
                content.Add(ParentContent);
            }
            else
            {
                content.Add(CurrentContent);
            }

            outputModule.GenerateTestContent(content);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\WizardRelatedContentSelectionState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardRelatedContentSelection : WizardState
    {
        RadioButton moreContentRadio = null;
        RadioButton finishedRadio = null;
        ComboBox additionalContentCombo = null;
        TreeView contentReviewTree = null;

        public WizardRelatedContentSelection()
        {
            WizardStateDescription = "Please review your current test content configuration.  You may edit your configuration" + Environment.NewLine +
                "by right clicking a node in the tree below:";       
        }

        private void RemoveTreeNode(object sender, EventArgs e)
        {
            if (null != contentReviewTree &&
                null != contentReviewTree.SelectedNode &&
                contentReviewTree.SelectedNode.Level > 0)
            {
                ParentContent.RelatedContent.RemoveAt(contentReviewTree.SelectedNode.Index);
                contentReviewTree.Nodes.Remove(contentReviewTree.SelectedNode);
            }
        }

        private void EditTreeNode(object sender, EventArgs e)
        {
            if (null != contentReviewTree &&
                null != contentReviewTree.SelectedNode)
            {
                ContentBase desiredCurrent = null;
                ContentBase desiredParent = null;

                if (contentReviewTree.SelectedNode.Level == 0)
                {
                    desiredCurrent = ParentContent;
                    desiredParent = ParentContent;
                }
                else
                {
                    desiredParent = ParentContent; 
                    desiredCurrent = desiredParent.RelatedContent[contentReviewTree.SelectedNode.Index];
                }

                StateMachine.MoveNext(this, typeof(WizardBasicPropertiesState), desiredCurrent, desiredParent);
            }
        }

        public override void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            base.DrawStateControls(wizard, hasPrevious, hasNext);

            ContextMenu contentMenu = new ContextMenu();
            contentMenu.MenuItems.Add(
                new MenuItem("Edit", new EventHandler(EditTreeNode)));
            contentMenu.MenuItems.Add(
                new MenuItem("Remove", new EventHandler(RemoveTreeNode)));

            contentReviewTree = new TreeView();
            contentReviewTree.Location = new System.Drawing.Point(120, 135);
            contentReviewTree.Name = "contentReviewTree";
            contentReviewTree.Size = new System.Drawing.Size(255, 85);
            contentReviewTree.TabIndex = 8;
            contentReviewTree.ContextMenu = contentMenu;
            contentReviewTree.MouseDown += new MouseEventHandler(contentReviewTree_MouseDown);
            wizard.Controls.Add(contentReviewTree);

            if (null != ParentContent)
            {
                contentReviewTree.Nodes.Add(ParentContent.ProductType.ToString());
                foreach (ContentBase childContent in ParentContent.RelatedContent)
                {
                    contentReviewTree.Nodes[0].Nodes.Add(childContent.ProductType.ToString());
                }
            }
            else if (null != CurrentContent)
            {
                contentReviewTree.Nodes.Add(CurrentContent.ProductType.ToString());
            }

            contentReviewTree.ExpandAll();


            Label secondInformationLabel = new Label();
            secondInformationLabel.Location = new System.Drawing.Point(30, 230);
            secondInformationLabel.AutoSize = true;
            secondInformationLabel.Name = "secondInformationLabel";
            secondInformationLabel.Text = "You have the option of relating additional content to the content that was just" + Environment.NewLine +
                "configured.  For example, you may have created an Arcade game and can associate a" + Environment.NewLine +
                "Demo, Downloadable Content, or different types of content with it.";
            wizard.Controls.Add(secondInformationLabel);

            moreContentRadio = new RadioButton();
            moreContentRadio.AutoSize = true;
            moreContentRadio.Checked = true;
            moreContentRadio.Location = new System.Drawing.Point(85, 280);
            moreContentRadio.Name = "moreContentRadio";
            moreContentRadio.Size = new System.Drawing.Size(85, 17);
            moreContentRadio.TabIndex = 6;
            moreContentRadio.TabStop = true;
            moreContentRadio.Text = "Yes, I would like to add related data such as Downloadable Content," + Environment.NewLine +
                "Themes, Avatar Items, etc.";
            moreContentRadio.UseVisualStyleBackColor = true;
            wizard.Controls.Add(moreContentRadio);

            additionalContentCombo = new ComboBox();
            additionalContentCombo.FormattingEnabled = true;
            additionalContentCombo.Location = new System.Drawing.Point(151, 310);
            additionalContentCombo.Name = "additionalContentCombo";
            additionalContentCombo.Size = new System.Drawing.Size(179, 21);
            additionalContentCombo.TabIndex = 3;

            foreach (string contentType in Enum.GetNames(typeof(ProductType)))
            {
                additionalContentCombo.Items.Add(contentType);
            }

            additionalContentCombo.SelectedIndex = 0;
            wizard.Controls.Add(additionalContentCombo);

            RadioButton finishedRadio = new RadioButton();
            finishedRadio.AutoSize = true;
            finishedRadio.Location = new System.Drawing.Point(85, 340);
            finishedRadio.Name = "radioButton2";
            finishedRadio.Size = new System.Drawing.Size(85, 17);
            finishedRadio.TabIndex = 7;
            finishedRadio.Text = "No, I am finished creating test content at this time.";
            finishedRadio.UseVisualStyleBackColor = true;
            wizard.Controls.Add(finishedRadio);            
        }

        void contentReviewTree_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                contentReviewTree.SelectedNode = contentReviewTree.GetNodeAt(e.X, e.Y);
            }
        }

        public override void NextButton_Click(object sender, EventArgs e)
        {
            if (moreContentRadio.Checked)
            {
                ContentBase newContent = new ContentBase();
                newContent.ProductType = (ProductType)Enum.Parse(typeof(ProductType), additionalContentCombo.Text);
                
                if (null == ParentContent)
                {
                    ParentContent = CurrentContent;

                    StateMachine.MoveNext(this, typeof(WizardBasicPropertiesState), newContent, ParentContent);
                    ParentContent.RelatedContent.Add(newContent);
                    CurrentContent = newContent;
                }
                else
                {
                    ParentContent.RelatedContent.Add(newContent);

                    StateMachine.MoveNext(this, typeof(WizardBasicPropertiesState), newContent, ParentContent);
                }
            }
            else
            {
                base.NextButton_Click(sender, e);
            }            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\TestDataCreator.Designer.cs ===
﻿namespace Marketplace.Test.TestDataCreator
{
    partial class TestDataCreator
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.numericUpDown1 = new System.Windows.Forms.NumericUpDown();
            this.dataTree = new System.Windows.Forms.TreeView();
            this.contextMenuStrip1 = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.addToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.removeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.expandToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.collapseToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.button2 = new System.Windows.Forms.Button();
            this.button1 = new System.Windows.Forms.Button();
            this.mainMenu = new System.Windows.Forms.MenuStrip();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.propertyGrid1 = new System.Windows.Forms.PropertyGrid();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.loadConfigurationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.saveConfigurationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.actionToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addItemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.removeItemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.clearAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.multiplySelectedItemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.generateTestDataToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            this.groupBox1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.numericUpDown1)).BeginInit();
            this.contextMenuStrip1.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.menuStrip1.SuspendLayout();
            this.statusStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // splitContainer1
            // 
            this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer1.Location = new System.Drawing.Point(5, 25);
            this.splitContainer1.Name = "splitContainer1";
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.Controls.Add(this.groupBox1);
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.groupBox2);
            this.splitContainer1.Size = new System.Drawing.Size(700, 458);
            this.splitContainer1.SplitterDistance = 261;
            this.splitContainer1.TabIndex = 3;
            // 
            // groupBox1
            // 
            this.groupBox1.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Center;
            this.groupBox1.Controls.Add(this.numericUpDown1);
            this.groupBox1.Controls.Add(this.dataTree);
            this.groupBox1.Controls.Add(this.button2);
            this.groupBox1.Controls.Add(this.button1);
            this.groupBox1.Controls.Add(this.mainMenu);
            this.groupBox1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox1.Location = new System.Drawing.Point(0, 0);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(261, 458);
            this.groupBox1.TabIndex = 2;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Test Content Setup";
            // 
            // numericUpDown1
            // 
            this.numericUpDown1.Location = new System.Drawing.Point(107, 20);
            this.numericUpDown1.Minimum = new decimal(new int[] {
            1,
            0,
            0,
            0});
            this.numericUpDown1.Name = "numericUpDown1";
            this.numericUpDown1.Size = new System.Drawing.Size(53, 20);
            this.numericUpDown1.TabIndex = 4;
            this.numericUpDown1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.numericUpDown1.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            // 
            // dataTree
            // 
            this.dataTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.dataTree.ContextMenuStrip = this.contextMenuStrip1;
            this.dataTree.HideSelection = false;
            this.dataTree.Location = new System.Drawing.Point(7, 46);
            this.dataTree.Name = "dataTree";
            this.dataTree.Size = new System.Drawing.Size(248, 391);
            this.dataTree.TabIndex = 3;
            this.dataTree.AfterSelect += new System.Windows.Forms.TreeViewEventHandler(this.treeView1_AfterSelect_1);
            // 
            // contextMenuStrip1
            // 
            this.contextMenuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.addToolStripMenuItem,
            this.removeToolStripMenuItem,
            this.expandToolStripMenuItem,
            this.collapseToolStripMenuItem});
            this.contextMenuStrip1.Name = "contextMenuStrip1";
            this.contextMenuStrip1.Size = new System.Drawing.Size(120, 92);
            // 
            // addToolStripMenuItem
            // 
            this.addToolStripMenuItem.Name = "addToolStripMenuItem";
            this.addToolStripMenuItem.Size = new System.Drawing.Size(119, 22);
            this.addToolStripMenuItem.Text = "Add";
            this.addToolStripMenuItem.Click += new System.EventHandler(this.addToolStripMenuItem_Click);
            // 
            // removeToolStripMenuItem
            // 
            this.removeToolStripMenuItem.Name = "removeToolStripMenuItem";
            this.removeToolStripMenuItem.Size = new System.Drawing.Size(119, 22);
            this.removeToolStripMenuItem.Text = "Remove";
            this.removeToolStripMenuItem.Click += new System.EventHandler(this.removeToolStripMenuItem_Click);
            // 
            // expandToolStripMenuItem
            // 
            this.expandToolStripMenuItem.Name = "expandToolStripMenuItem";
            this.expandToolStripMenuItem.Size = new System.Drawing.Size(119, 22);
            this.expandToolStripMenuItem.Text = "Expand";
            this.expandToolStripMenuItem.Click += new System.EventHandler(this.expandToolStripMenuItem_Click);
            // 
            // collapseToolStripMenuItem
            // 
            this.collapseToolStripMenuItem.Name = "collapseToolStripMenuItem";
            this.collapseToolStripMenuItem.Size = new System.Drawing.Size(119, 22);
            this.collapseToolStripMenuItem.Text = "Collapse";
            this.collapseToolStripMenuItem.Click += new System.EventHandler(this.collapseToolStripMenuItem_Click);
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(166, 17);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(89, 23);
            this.button2.TabIndex = 1;
            this.button2.Text = "Remove Item";
            this.button2.UseVisualStyleBackColor = true;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(7, 17);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(94, 23);
            this.button1.TabIndex = 0;
            this.button1.Text = "Add New Item";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // mainMenu
            // 
            this.mainMenu.Location = new System.Drawing.Point(3, 16);
            this.mainMenu.Name = "mainMenu";
            this.mainMenu.Size = new System.Drawing.Size(255, 24);
            this.mainMenu.TabIndex = 5;
            this.mainMenu.Text = "mainMenu";
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.propertyGrid1);
            this.groupBox2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox2.Location = new System.Drawing.Point(0, 0);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(435, 458);
            this.groupBox2.TabIndex = 3;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Test Content Details";
            // 
            // propertyGrid1
            // 
            this.propertyGrid1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.propertyGrid1.Location = new System.Drawing.Point(6, 19);
            this.propertyGrid1.Name = "propertyGrid1";
            this.propertyGrid1.Size = new System.Drawing.Size(426, 418);
            this.propertyGrid1.TabIndex = 0;
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.actionToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(711, 24);
            this.menuStrip1.TabIndex = 4;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.loadConfigurationToolStripMenuItem,
            this.saveConfigurationToolStripMenuItem,
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // loadConfigurationToolStripMenuItem
            // 
            this.loadConfigurationToolStripMenuItem.Name = "loadConfigurationToolStripMenuItem";
            this.loadConfigurationToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.loadConfigurationToolStripMenuItem.Size = new System.Drawing.Size(223, 22);
            this.loadConfigurationToolStripMenuItem.Text = "&Open Configuration";
            this.loadConfigurationToolStripMenuItem.Click += new System.EventHandler(this.loadConfigurationToolStripMenuItem_Click);
            // 
            // saveConfigurationToolStripMenuItem
            // 
            this.saveConfigurationToolStripMenuItem.Name = "saveConfigurationToolStripMenuItem";
            this.saveConfigurationToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S)));
            this.saveConfigurationToolStripMenuItem.Size = new System.Drawing.Size(223, 22);
            this.saveConfigurationToolStripMenuItem.Text = "&Save Configuration";
            this.saveConfigurationToolStripMenuItem.Click += new System.EventHandler(this.saveConfigurationToolStripMenuItem_Click);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(223, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // actionToolStripMenuItem
            // 
            this.actionToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.addItemToolStripMenuItem,
            this.removeItemToolStripMenuItem,
            this.clearAllToolStripMenuItem,
            this.multiplySelectedItemToolStripMenuItem,
            this.toolStripSeparator1,
            this.generateTestDataToolStripMenuItem});
            this.actionToolStripMenuItem.Name = "actionToolStripMenuItem";
            this.actionToolStripMenuItem.Size = new System.Drawing.Size(54, 20);
            this.actionToolStripMenuItem.Text = "&Action";
            // 
            // addItemToolStripMenuItem
            // 
            this.addItemToolStripMenuItem.Name = "addItemToolStripMenuItem";
            this.addItemToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.addItemToolStripMenuItem.Text = "&Add Item";
            this.addItemToolStripMenuItem.Click += new System.EventHandler(this.addItemToolStripMenuItem_Click);
            // 
            // removeItemToolStripMenuItem
            // 
            this.removeItemToolStripMenuItem.Name = "removeItemToolStripMenuItem";
            this.removeItemToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.removeItemToolStripMenuItem.Text = "&Remove Item";
            this.removeItemToolStripMenuItem.Click += new System.EventHandler(this.removeItemToolStripMenuItem_Click);
            // 
            // clearAllToolStripMenuItem
            // 
            this.clearAllToolStripMenuItem.Name = "clearAllToolStripMenuItem";
            this.clearAllToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.clearAllToolStripMenuItem.Text = "&Clear All";
            this.clearAllToolStripMenuItem.Click += new System.EventHandler(this.clearAllToolStripMenuItem_Click);
            // 
            // multiplySelectedItemToolStripMenuItem
            // 
            this.multiplySelectedItemToolStripMenuItem.Name = "multiplySelectedItemToolStripMenuItem";
            this.multiplySelectedItemToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.multiplySelectedItemToolStripMenuItem.Text = "&Multiply Selected Item";
            this.multiplySelectedItemToolStripMenuItem.Click += new System.EventHandler(this.multiplySelectedItemToolStripMenuItem_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(189, 6);
            // 
            // generateTestDataToolStripMenuItem
            // 
            this.generateTestDataToolStripMenuItem.Name = "generateTestDataToolStripMenuItem";
            this.generateTestDataToolStripMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F5;
            this.generateTestDataToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.generateTestDataToolStripMenuItem.Text = "&Generate Test Data";
            this.generateTestDataToolStripMenuItem.Click += new System.EventHandler(this.generateTestDataToolStripMenuItem_Click);
            // 
            // statusStrip1
            // 
            this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel1,
            this.toolStripProgressBar1});
            this.statusStrip1.Location = new System.Drawing.Point(0, 465);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(711, 22);
            this.statusStrip1.TabIndex = 5;
            this.statusStrip1.Text = "statusStrip1";
            // 
            // toolStripStatusLabel1
            // 
            this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
            this.toolStripStatusLabel1.Size = new System.Drawing.Size(544, 17);
            this.toolStripStatusLabel1.Spring = true;
            this.toolStripStatusLabel1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
            this.toolStripProgressBar1.Name = "toolStripProgressBar1";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(150, 16);
            // 
            // TestDataCreator
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(711, 487);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.splitContainer1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.mainMenu;
            this.Name = "TestDataCreator";
            this.Text = "Test Data Creator";
            this.Load += new System.EventHandler(this.TestDataCreator_Load);
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel2.ResumeLayout(false);
            this.splitContainer1.ResumeLayout(false);
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.numericUpDown1)).EndInit();
            this.contextMenuStrip1.ResumeLayout(false);
            this.groupBox2.ResumeLayout(false);
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.statusStrip1.ResumeLayout(false);
            this.statusStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.NumericUpDown numericUpDown1;
        private System.Windows.Forms.TreeView dataTree;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.PropertyGrid propertyGrid1;
        private System.Windows.Forms.MenuStrip mainMenu;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel1;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripMenuItem actionToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem addItemToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem removeItemToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem multiplySelectedItemToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem clearAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripMenuItem generateTestDataToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem loadConfigurationToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem saveConfigurationToolStripMenuItem;
        private System.Windows.Forms.ContextMenuStrip contextMenuStrip1;
        private System.Windows.Forms.ToolStripMenuItem addToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem removeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem expandToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem collapseToolStripMenuItem;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\WizardState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardState
    {
        #region Fields
        
        private Button previousButton = null;
        private Button nextButton = null;
        private static ContentBase parentContent = null;
        private static ContentBase currentContent = null;
        private static WizardStateMachine stateMachine = null;
        private string wizardStateDescription = String.Empty;
        
        #endregion

        #region Properties

        public ContentBase ParentContent
        {
            get { return parentContent; }
            set { parentContent = value; }
        }

        public ContentBase CurrentContent
        {
            get { return currentContent; }
            set { currentContent = value; }
        }

        public WizardStateMachine StateMachine
        {
            get { return stateMachine; }
            set { stateMachine = value; }
        }

        public string WizardStateDescription
        {
            get { return wizardStateDescription; }
            set { wizardStateDescription = value; }
        }

        public Button PreviousButton
        {
            get { return previousButton; }
        }

        public Button NextButton
        {
            get { return nextButton; }
        }

        #endregion

        #region Constructor and Initialization

        public WizardState() { }            

        public virtual void Initialize(ContentBase current, ContentBase parent)
        {
            parentContent = parent;
            currentContent = current;
        }

        #endregion

        public virtual void StateSpecificExecute() { }

        public virtual void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            wizard.Controls.Clear();

            DrawBanner(wizard);
            DrawDescription(wizard);

            if (hasPrevious)
            {
                DrawPrevious(wizard);
            }

            if (hasNext)
            {
                DrawNext(wizard);
            }
            else
            {
                DrawFinish(wizard);
            }
        }

        private void DrawBanner(WizardStateForm wizard)
        {
            PictureBox bannerImage = new PictureBox();
            ((System.ComponentModel.ISupportInitialize)(bannerImage)).BeginInit();
            wizard.SuspendLayout();
            bannerImage.Image = global::Marketplace.Test.TestDataCreator.Common.Properties.Resources.marketplaceCropped;
            bannerImage.Location = new System.Drawing.Point(-63, -1);
            bannerImage.Name = "pictureBox1";
            bannerImage.Size = new System.Drawing.Size(553, 87);
            bannerImage.TabIndex = 1;
            bannerImage.TabStop = false;
            wizard.Controls.Add(bannerImage);
            ((System.ComponentModel.ISupportInitialize)(bannerImage)).EndInit();
            wizard.ResumeLayout(false);
            wizard.PerformLayout();
        }

        private void DrawPrevious(WizardStateForm wizard)
        {
            previousButton = new Button();
            previousButton.Location = new System.Drawing.Point(306, 374);
            previousButton.Name = "button2";
            previousButton.Size = new System.Drawing.Size(75, 23);
            previousButton.TabIndex = 5;
            previousButton.Text = "Previous";
            previousButton.UseVisualStyleBackColor = true;
            previousButton.Click += new System.EventHandler(PreviousButton_Click);
            wizard.Controls.Add(previousButton);
        }

        private void DrawNext(WizardStateForm wizard)
        {
            DrawForward(wizard, "Next");
        }

        private void DrawFinish(WizardStateForm wizard)
        {
            DrawForward(wizard, "Finish");
        }

        private void DrawForward(WizardStateForm wizard, string buttonText)
        {
            nextButton = new Button();
            nextButton.Location = new System.Drawing.Point(387, 374);
            nextButton.Name = "nextButton";
            nextButton.Size = new System.Drawing.Size(75, 23);
            nextButton.TabIndex = 2;
            nextButton.Text = buttonText;
            nextButton.UseVisualStyleBackColor = true;
            nextButton.Click += new System.EventHandler(NextButton_Click);
            wizard.Controls.Add(nextButton);
        }
                
        private void DrawDescription(WizardStateForm wizard)
        {
            Label descriptionLabel = new Label();
            descriptionLabel.AutoSize = true;
            //descriptionLabel.Location = new System.Drawing.Point(50, 150);
            descriptionLabel.Location = new System.Drawing.Point(30, 99);
            descriptionLabel.Name = "descriptionLabel";
            descriptionLabel.Size = new System.Drawing.Size(35, 13);
            descriptionLabel.TabIndex = 0;
            descriptionLabel.Text = wizardStateDescription;
            wizard.Controls.Add(descriptionLabel);
        }


        public virtual void NextButton_Click(object sender, EventArgs e)
        {
            stateMachine.MoveNext(this);
        }

        public virtual void PreviousButton_Click(object sender, EventArgs e)
        {
            stateMachine.MovePrevious(this);
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\WizardStateForm.Designer.cs ===
﻿namespace Marketplace.Test.TestDataCreator
{
    public partial class WizardStateForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // WizardStateForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(488, 409);
            this.Name = "WizardStateForm";
            this.Text = "Test Data Creator Wizard";
            this.Load += new System.EventHandler(this.CreationWizard_Load);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.ComboBox comboBox1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\ContentBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{  
    public class ContentBase
    {
        #region Fields

        private Locale locale = Locale.en_US;
        private ProductType productType = ProductType.Arcade;
        private string title = String.Empty;
        private string description = String.Empty;
        private List<Offer> offers = new List<Offer>();
        private List<GameCapabilities> gameCapabilities = new List<GameCapabilities>();
        private List<Category> categories = new List<Category>();
        PublisherBit publisherBit = new PublisherBit();
        private List<Rating> ratings = new List<Rating>();
        private List<RatingDescriptor> ratingDescriptors = new List<RatingDescriptor>();

        public List<ContentBase> RelatedContent = new List<ContentBase>();
        public SerializableDictionary<GameCapability, string> basicGameCapabilities = new SerializableDictionary<GameCapability, string>();
        public bool IsChild = false;
        public string usedMediaId = String.Empty;
        public string usedMediaInstanceId = String.Empty;

        #endregion

        #region Properties

        [CategoryAttribute("Extended Details"),
         Description("Specifies the applicable categories for the current content.")]
        public virtual List<Category> Categories
        {
            get { return categories; }
        }

        [CategoryAttribute("Extended Details"),
         Description("Specifies the applicable ratings for the current content.")]
        public virtual List<Rating> Ratings
        {
            get { return ratings; }
        }

        [CategoryAttribute("Extended Details"),
         Description("Specifies the applicable rating descriptors for the current content.")]
        public virtual List<RatingDescriptor> RatingDescriptors
        {
            get { return ratingDescriptors; }
        }

        [Browsable(true)]
        [CategoryAttribute("Extended Details"),
         Description("Specifies the publisher bit for the current content")]
        [TypeConverter(typeof(PublisherBitNameConverter))]
        public virtual string GamePublisherBit
        {
            get { return publisherBit.Name; }
            set 
            {
                publisherBit.Name = value;
                publisherBit.publisherBitId = PublisherBit.AvailablePublisherBits[value];
            }
        }

        [CategoryAttribute("Basic Details"),
         Description("Specifies the locale for the current content")]
        public Locale Locale
        {
            get { return locale; }
            set { locale = value; }
        }

        [CategoryAttribute("Basic Details"),
        Description("Specifies the full title used for the current content")]
        public string Title
        {
            get { return title; }
            set { title = value; }
        }

        [CategoryAttribute("Basic Details"),
         Description("Specifies the full description used for the current content")]
        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        [CategoryAttribute("Basic Details"),
         Description("Specifies the product type of the current content")]
        public ProductType ProductType
        {
            get { return productType; }
            set 
            { 
                productType = value;

                if (productType == ProductType.Arcade ||
                    productType == ProductType.Bundle ||
                    productType == ProductType.Game_On_Demand ||
                    productType == ProductType.Indie_Game ||
                    productType == ProductType.Xbox_Original ||
                    productType == ProductType.Marketplace)
                {
                    IsChild = false;
                }
                else
                {
                    IsChild = true;
                }
            }
        }

        [CategoryAttribute("Offer Details"),
         Description("Specifies the tiers and prices for offers on the current content.")]
        public List<Offer> Offers
        {
            get { return offers; }
        }

        [CategoryAttribute("Extended Details"),
         Description("Specifies the applicable game capabilities for the current content.")]
        public virtual List<GameCapabilities> GameCapabilities
        {
            get { return gameCapabilities; }
        }

        #endregion

        #region Constructor

        public ContentBase() 
        {
            title = "Unique Title";
            description = "Unique Description";
            categories.Add(new Category("Xbox LIVE Games", 3027));

            InitializeBasicGameCapabilities();
        }

        public ContentBase(ContentBase contentBase)
        {
            description = (string)contentBase.Description.Clone();
            title = contentBase.Title;
            locale = contentBase.Locale;
            productType = contentBase.ProductType;
            IsChild = contentBase.IsChild;
            publisherBit = contentBase.publisherBit;

            foreach (Offer offer in contentBase.Offers)
            {
                offers.Add(new Offer(offer));
            }

            foreach (GameCapabilities gameCapability in contentBase.GameCapabilities)
            {
                gameCapabilities.Add(new GameCapabilities(gameCapability));
            }

            foreach (ContentBase relatedContentData in contentBase.RelatedContent)
            {
                RelatedContent.Add(relatedContentData);
            }

            foreach (Category category in contentBase.Categories)
            {
                categories.Add(category);
            }

            foreach (Rating rating in contentBase.Ratings)
            {
                ratings.Add(rating);
            }

            foreach (RatingDescriptor descriptor in contentBase.RatingDescriptors)
            {
                ratingDescriptors.Add(descriptor);
            }

            InitializeBasicGameCapabilities();
        }

        #endregion

        #region Methods

        private void InitializeBasicGameCapabilities()
        {
            basicGameCapabilities.Add(GameCapability.OfflineCoopHardDriveRequired, "false");
            basicGameCapabilities.Add(GameCapability.OfflineCoopHardDriveStorageAmount, "100");
            basicGameCapabilities.Add(GameCapability.OfflineCoopPlayersMax, "4");
            basicGameCapabilities.Add(GameCapability.OfflineCoopPlayersMin, "0");
            basicGameCapabilities.Add(GameCapability.OfflineCustomSoundtracks, "false");
            basicGameCapabilities.Add(GameCapability.OfflineDolbyDigital, "false");
            basicGameCapabilities.Add(GameCapability.OfflineHardDriveRequired, "true");
            basicGameCapabilities.Add(GameCapability.OfflinePeripheralArcadeStick, "false");
            basicGameCapabilities.Add(GameCapability.OfflinePeripheralCamera, "false");
            basicGameCapabilities.Add(GameCapability.OfflinePeripheralDancePad, "false");
            basicGameCapabilities.Add(GameCapability.OfflinePeripheralFlightStick, "false");
            basicGameCapabilities.Add(GameCapability.OfflinePeripheralForceFeedbackWheel, "false");
            basicGameCapabilities.Add(GameCapability.OfflinePeripheralGamePad, "false");
            basicGameCapabilities.Add(GameCapability.OfflinePeripheralWheel, "false");
            basicGameCapabilities.Add(GameCapability.OfflinePlayersMax, "4");
            basicGameCapabilities.Add(GameCapability.OfflinePlayersMin, "1");
            basicGameCapabilities.Add(GameCapability.OfflineSaveStorageAmount, "10");
            basicGameCapabilities.Add(GameCapability.OfflineSystemLinkMax, "4");
            basicGameCapabilities.Add(GameCapability.OfflineSystemLinkMin, "1");
            basicGameCapabilities.Add(GameCapability.OfflineVoiceCommands, "false");
            basicGameCapabilities.Add(GameCapability.OnlineContentDownload, "true");
            basicGameCapabilities.Add(GameCapability.OnlineCoopHardDriveRequired, "true");
            basicGameCapabilities.Add(GameCapability.OnlineCoopHardDriveStorageAmount, "10");
            basicGameCapabilities.Add(GameCapability.OnlineCoopPlayersMax, "4");
            basicGameCapabilities.Add(GameCapability.OnlineCoopPlayersMin, "0");
            basicGameCapabilities.Add(GameCapability.OnlineHardDriveRequired, "true");
            basicGameCapabilities.Add(GameCapability.OnlineLeaderboards, "true");
            basicGameCapabilities.Add(GameCapability.OnlineMultiplayerHardDriveRequired, "true");
            basicGameCapabilities.Add(GameCapability.OnlineMultiplayerMax, "8");
            basicGameCapabilities.Add(GameCapability.OnlineMultiplayerMin, "0");
            basicGameCapabilities.Add(GameCapability.OnlineOnly, "false");
            basicGameCapabilities.Add(GameCapability.OnlinePlayStorageAmount, "10");
            basicGameCapabilities.Add(GameCapability.OnlineSpectatorMode, "false");
            basicGameCapabilities.Add(GameCapability.OnlineVoice, "false");            
        }

        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\BundleContent.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    /// <summary>
    /// Content class for bundles.
    /// </summary>
    public class BundleContent : ContentBase
    {
        /// <summary>
        /// Default constructor for the bundle content object
        /// </summary>
        public BundleContent() : base() { }

        /// <summary>
        /// Copy constructor for the bundle content object which takes a basic content object
        /// </summary>
        /// <param name="content">Basic content object to copy</param>
        public BundleContent(ContentBase content) : base(content) { }

        /// <summary>
        /// The categories associated with the bundle.
        /// This property is blocked from browsing through a propertyGrid
        /// </summary>
        [Browsable(false)]        
        public override List<Category> Categories
        {
            get { return base.Categories; }
        }

        /// <summary>
        /// The ratings associated with the bundle.
        /// This property is blocked from browsing through a propertyGrid
        /// </summary>
        [Browsable(false)]
        public override List<Rating> Ratings
        {
            get { return base.Ratings; }
        }

        /// <summary>
        /// The rating descriptors associated with the bundle.
        /// This property is blocked from browsing through a propertyGrid
        /// </summary>
        [Browsable(false)]
        public override List<RatingDescriptor> RatingDescriptors
        {
            get { return base.RatingDescriptors; }
        }

        /// <summary>
        /// The game publisher bit associated with the bundle.
        /// This property is blocked from browsing through a propertyGrid
        /// </summary>
        [Browsable(false)]
        public override string GamePublisherBit
        {
            get { return base.GamePublisherBit; }
        }

        /// <summary>
        /// The game capabilities associated with the bundle.
        /// This property is blocked from browsing through a propertyGrid
        /// </summary>
        [Browsable(false)]
        public override List<GameCapabilities> GameCapabilities
        {
            get { return base.GameCapabilities; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\Events.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    #region Delegates

    public delegate void GenerationCompleteDelegate(object sender, GenerationCompleteEventArguments eventArguments);

    public delegate void GenerationFailureDelegate(object sender, GenerationFailureEventArguments eventArguments);

    public delegate void GenerationSuccessDelegate(object sender, GenerationSuccessEventArguments eventArguments);

    public delegate void StatusUpdatedDelegate(string currentStatus, string error, int total, int step);

    #endregion

    #region Event Arguments

    public class GenerationCompleteEventArguments
    {
        List<ContentBase> testContent = null;
        public List<ContentBase> TestContent
        {
            get { return testContent; }
        }

        int successCount = 0;
        public int SuccessCount
        {
            get { return successCount; }
        }

        int failureCount = 0;
        public int FailureCount
        {
            get { return failureCount; }
        }

        public GenerationCompleteEventArguments(List<ContentBase> content, int success, int failure)
        {
            testContent = content;
            successCount = success;
            failureCount = failure;
        }
    }

    public class GenerationFailureEventArguments
    {
        private string error = String.Empty;
        public string Error
        {
            get
            {
                return error;
            }
        }

        private ContentBase testContent = null;
        public ContentBase TestContent
        {
            get
            {
                return testContent;
            }
        }

        public GenerationFailureEventArguments(string generationError, ContentBase content)
        {
            error = generationError;
            testContent = content;
        }
    }

    public class GenerationSuccessEventArguments
    {
        private ContentBase testContent = null;

        public ContentBase TestContent
        {
            get
            {
                return testContent;
            }
        }

        public GenerationSuccessEventArguments(ContentBase content)
        {
            testContent = content;
        }
    }

    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\WizardStateMachine.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class WizardStateMachine
    {
        private static WizardStateForm wizard = new WizardStateForm();
        private static WizardState currentState = null;
        private static Type startState = null;
        private static Dictionary<Type, Type> forwardTransitions = new Dictionary<Type, Type>();
        private static Dictionary<Type, Type> backTransitions = new Dictionary<Type, Type>();

        public WizardStateForm Wizard
        {
            get { return wizard; }
        }

        public WizardState CurrentState
        {
            get { return currentState; }
            set { currentState = value; } 
        }

        public WizardStateMachine() { }

        public WizardStateForm Start()
        {
            startState = typeof(WizardContentSelectionState);

            forwardTransitions.Add(typeof(WizardContentSelectionState), typeof(WizardBasicPropertiesState));
            forwardTransitions.Add(typeof(WizardBasicPropertiesState), typeof(WizardRelatedContentSelection));
            forwardTransitions.Add(typeof(WizardRelatedContentSelection), typeof(WizardGenerationState));
            forwardTransitions.Add(typeof(WizardGenerationState), null);

            backTransitions.Add(typeof(WizardGenerationState), typeof(WizardRelatedContentSelection));
            backTransitions.Add(typeof(WizardRelatedContentSelection), typeof(WizardBasicPropertiesState));
            backTransitions.Add(typeof(WizardBasicPropertiesState), typeof(WizardContentSelectionState));
            backTransitions.Add(typeof(WizardContentSelectionState), null);

            WizardState wizardStart = (WizardState)Activator.CreateInstance(startState);
            wizardStart.Initialize(new ContentBase(), null);
            wizardStart.DrawStateControls(
                wizard, 
                false, 
                null != forwardTransitions[startState]);
            wizardStart.StateSpecificExecute();
            wizardStart.StateMachine = this;

            return wizard;            
        }

        public void End()
        {            
            startState = null;
            forwardTransitions.Clear();
            backTransitions.Clear();
        }

        public void MoveNext(WizardState currentState)
        {
            if (null == forwardTransitions[currentState.GetType()])
            {
                Environment.Exit(0);
            }

            WizardState nextState = (WizardState)Activator.CreateInstance(
                forwardTransitions[currentState.GetType()]);
            nextState.Initialize(currentState.CurrentContent, currentState.ParentContent);

            nextState.DrawStateControls(
                wizard, 
                null != backTransitions[nextState.GetType()], 
                null != forwardTransitions[nextState.GetType()]);

            nextState.StateSpecificExecute();
        }

        public void MoveNext(WizardState currentState, Type desiredState, ContentBase desiredCurrentContent, ContentBase desiredParentContent)
        {
            WizardState nextState = (WizardState)Activator.CreateInstance(desiredState);
            nextState.Initialize(desiredCurrentContent, desiredParentContent);

            nextState.DrawStateControls(
                wizard,
                null != backTransitions[nextState.GetType()],
                null != forwardTransitions[nextState.GetType()]);
        }


        public void MovePrevious(WizardState currentState)
        {
            WizardState nextState = (WizardState)Activator.CreateInstance(
                backTransitions[currentState.GetType()]);
            nextState.Initialize(currentState.CurrentContent, currentState.ParentContent);

            nextState.DrawStateControls(
                wizard,
                null != backTransitions[nextState.GetType()],
                null != forwardTransitions[nextState.GetType()]);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\Enumerations.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public enum ProductType
    {
        Arcade,
        Avatar_Content,
        Bundle,
        Consumable,
        Downloadable_Content,
        Full_Game_Demo,
        Game_On_Demand,
        Game_Trailer,
        Game_Video,
        Gamer_Pic,
        Indie_Game,
        Marketplace,
        Subscription,
        Theme,
        Trial_Game,
        Xbox_Original
    };

    public enum PaymentMethod
    {
        Points = 1,
        Token = 2,
        Credit_Card = 3
    }

    public enum CurrencyCode
    {
        AED,ALL,AMD,ARS,AUD,AZN,BGN,BHD,BND,BOB,BRL,BYR,BZD,CAD,CHF,CLP,CNY,COP,CRC,CZK,DKK,
        DOP,DZD,EEK,EGP,EUR,GBP,GEL,GTQ,HKD,HNL,HRK,HUF,IDR,ILS,INR,IQD,IRR,ISK,JMD,JOD,JPY,
        KES,KGS,KHR,KRW,KWD,KZT,LBP,LTL,LVL,LYD,MAD,MKD,MNT,MOP,MPT,MTK,MVR,MXN,MYR,NIO,NOK,
        NZD,OMR,PAB,PEN,PHP,PKR,PLN,PYG,QAR,RON,RUB,SAR,SEK,SGD,SVC,SYP,THB,TRY,TTD,TWD,UAH,
        USD,UYU,UZS,VEF,VND,YER,ZAR,ZWD
    }

    public enum CountryCode
    {
        AE,AL,AM,AR,AT,AU,AZ,BE,BG,BH,BN,BO,BR,BY,BZ,CA,CB,CH,CL,CN,CO,CR,CZ,DE,DK,DO,DZ,EC,EE,
        EG,ES,FI,FO,FR,GB,GE,GR,GT,HK,HN,HR,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KR,KW,KZ,
        LB,LI,LT,LV,LY,MA,MC,MK,MN,MO,MV,MX,MY,NI,NL,NO,NZ,OM,PA,PE,PH,PK,PL,PR,PT,PY,QA,RO,RU,
        SA,SE,SG,SI,SK,SP,SV,SY,TH,TN,TR,TT,TW,UA,US,UY,UZ,VE,VN,YE,ZA,ZW
    }

    public enum VisibilityLevel
    {
        Default = 1,
        No_Enumerate_In_PartnerNet = 2,
        Never_Enumerate = 3
    }

    public enum VisibilityStatus
    {
        Unpublished = 1,
        Staging = 2,
        Live = 3,
        Withdrawn = 4,
        Deleted = 5
    }

    public enum RelatedContentType
    {
        Arcade,
        Bundle,
        Demo,
        Downloadable_Content,
        Game_On_Demand,
        Game_Video,
        Indie_Game,
        Picture_Pack,
        Subscription,
        Theme,
        Xbox_Original
    }

    public enum OfferTier
    {
        Silver = 3,
        Gold = 2,
        Family = 4,
        Elite = 5
    };

    public enum Locale
    {
        da_DK,
        de_AT,
        de_CH,
        de_DE,
        en_AU,
        en_CA,
        en_GB,
        en_HK,
        en_IE,
        en_IN,
        en_NZ,
        en_SG,
        en_US,
        es_ES,
        es_MX,
        fi_FI,
        fr_BE,
        fr_CA,
        fr_CH,
        fr_FR,
        it_IT,
        ja_JP,
        ko_KR,
        nb_NO,
        nl_BE,
        nl_NL,
        pl_PL,
        pt_PT,
        ru_RU,
        sv_SE,
        zh_CN,
        zh_HK,
        zh_TW
    }
    

    public enum GameCapability
    {
        OfflinePlayersMin,
        OfflinePlayersMax,
        OfflineCoopPlayersMin,
        OfflineCoopPlayersMax,
        OfflineCoopHardDriveRequired,
        OfflineCoopHardDriveStorageAmount,
        OfflineSaveStorageAmount,
        OfflineSystemLinkMin,
        OfflineSystemLinkMax,
        OfflineVoiceCommands,
        OfflinePeripheralWheel,
        OfflinePeripheralGamePad,
        OfflinePeripheralArcadeStick,
        OfflinePeripheralFlightStick,
        OfflinePeripheralDancePad,
        OfflinePeripheralForceFeedbackWheel,
        OfflinePeripheralCamera,
        OfflineCustomSoundtracks,
        OfflineDolbyDigital,
        OnlineMultiplayerMin,
        OnlineMultiplayerMax,
        OnlineMultiplayerHardDriveRequired,
        OnlineCoopPlayersMin,
        OnlineCoopPlayersMax,
        OnlineCoopHardDriveRequired,
        OnlineCoopHardDriveStorageAmount,
        OnlineHardDriveRequired,
        OnlinePlayStorageAmount,
        OnlineContentDownload,
        OnlineLeaderboards,
        OnlineSpectatorMode,
        OnlineVoice,
        OnlineOnly,
        OfflineHardDriveRequired
    }

    internal enum PCGameCapability
    {
        PCProcessorType1,
        PCProcessorSpeed1,
        PCProcessorType2,
        PCProcessorSpeed2,
        PCSystemMemoryAmount,
        PCHardDriveStorageAmount,
        PCVideoMemoryAmount,
        PCVideoCardType1,
        PCVideoCardType2,
        PCSoundCardType,
        PCWindowsOSType,
        PCNetworkRequirements,
        PCExtendedRequirements
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\GameCapabilities.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class GameCapabilities
    {
        private GameCapability gameCapabilitiy;
        private int capabilityValue;

        public GameCapability GameCapability
        {
            get { return gameCapabilitiy; }
            set { gameCapabilitiy = value; }
        }

        public int Value
        {
            get { return capabilityValue; }
            set { capabilityValue = value; }
        }

        public GameCapabilities() { }

        public GameCapabilities(GameCapabilities gameCapabilities)
        {
            gameCapabilitiy = gameCapabilities.GameCapability;
            capabilityValue = gameCapabilities.Value;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\Interfaces.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public interface IOutputModule
    {
        event GenerationSuccessDelegate GenerationSuccess;

        event GenerationFailureDelegate GenerationFailure;

        event GenerationCompleteDelegate GenerationComplete;

        event StatusUpdatedDelegate StatusUpdated;

        string Name
        {
            get;
        }

        string SaveLocation
        {
            get;
            set;
        }

        SerializableDictionary<string, string> Settings
        {
            get;
        }
    
        void GenerateTestContent(List<ContentBase> content);

        bool CheckDependencyStatus();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\Category.cs ===
﻿using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class Category
    {
        #region Fields

        public int CategoryId;
        private string categoryName;
        public static SerializableDictionary<string, int> AvailableCategories = new SerializableDictionary<string, int>();

        #endregion

        #region Properties

        [Browsable(true)]
        [CategoryAttribute("Category Details")]
        [TypeConverter(typeof(CategoryNameConverter))]
        public string Name
        {
            get { return categoryName; }
            set { categoryName = value; }
        }

        #endregion

        #region Constructor and Initialization

        public Category()
        {
            if (AvailableCategories.Count > 0)
            {
                categoryName = AvailableCategories.Keys.First();
                CategoryId = AvailableCategories[categoryName];
            }
        }

        public Category(string name, int id)
        {
            categoryName = name;
            CategoryId = id;
        }

        #endregion

        private class CategoryNameConverter : StringConverter
        {
            public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
            {
                //true means show a combobox
                return true;
            }

            public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
            {
                //true will limit to list. false will show the list, but allow free-form entry
                return true;
            }

            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
            {
                return new StandardValuesCollection(AvailableCategories.Keys);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\Rating.cs ===
﻿using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class Rating
    {
        #region Fields

        public int RatingId;
        private string ratingName;
        public static SerializableDictionary<string, int> AvailableRatings = new SerializableDictionary<string, int>();

        #endregion

        #region Properties

        [Browsable(true)]
        [CategoryAttribute("Rating Details")]
        [TypeConverter(typeof(RatingNameConverter))]
        public string Name
        {
            get { return ratingName; }
            set { ratingName = value; }
        }

        #endregion

        #region Constructor and Initialization

        public Rating()
        {
            if (AvailableRatings.Count > 0)
            {
                ratingName = AvailableRatings.Keys.First();
                RatingId = AvailableRatings[ratingName];
            }
        }

        public Rating(string name, int id)
        {
            ratingName = name;
            RatingId = id;
        }

        #endregion

        private class RatingNameConverter : StringConverter
        {
            public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
            {
                //true means show a combobox
                return true;
            }

            public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
            {
                //true will limit to list. false will show the list, but allow free-form entry
                return true;
            }

            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
            {
                return new StandardValuesCollection(AvailableRatings.Keys);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\PublisherBit.cs ===
﻿using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class PublisherBit
    {
        #region Fields

        public int publisherBitId;
        private string publisherBitName;
        public static SerializableDictionary<string, int> AvailablePublisherBits = new SerializableDictionary<string, int>();

        #endregion

        #region Properties

        [Browsable(true)]
        [CategoryAttribute("PublisherBit Details")]
        [TypeConverter(typeof(PublisherBitNameConverter))]
        public string Name
        {
            get { return publisherBitName; }
            set { publisherBitName = value; }
        }

        #endregion

        #region Constructor and Initialization

        public PublisherBit()
        {
            
        }

        public PublisherBit(string name, int id)
        {
            publisherBitName = name;
            publisherBitId = id;
        }

        #endregion

    }

    internal class PublisherBitNameConverter : StringConverter
    {
        public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
        {
            //true means show a combobox
            return true;
        }

        public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
        {
            //true will limit to list. false will show the list, but allow free-form entry
            return true;
        }

        public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
        {
            return new StandardValuesCollection(PublisherBit.AvailablePublisherBits.Keys);
        }        
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\Offer.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class Offer
    {
        #region Fields

        private DateTime startTime = DateTime.MinValue;
        private DateTime endTime = DateTime.MinValue;
        private List<Tier> tiers = new List<Tier>();
        private int store = 1;
        private CountryCode countryCode = CountryCode.US;
        private VisibilityStatus visibilityStatus = VisibilityStatus.Live;        

        
        #endregion

        #region Properties

        public VisibilityStatus Status
        {
            get { return visibilityStatus; }
            set { visibilityStatus = value; }
        }

        public CountryCode CountryCode
        {
            get { return countryCode; }
            set { countryCode = value; }
        }

        public DateTime StartDate
        {
            get { return startTime; }
            set { startTime = value; }                 
        }

        public DateTime EndDate
        {
            get { return endTime; }
            set { endTime = value; }
        }

        public List<Tier> Instances
        {
            get { return tiers; }
            set { tiers = value; }
        }

        public int Store
        {
            get { return store; }
            set { store = value; }
        }
        
        #endregion
        
        public Offer()
        {
            startTime = DateTime.Now.Subtract(new TimeSpan(365, 0, 0, 0));
            endTime = DateTime.Now.AddYears(1);
        }


        public Offer(Offer offer)
        {
            startTime = offer.StartDate;
            endTime = offer.EndDate;            
            store = offer.Store;
            countryCode = offer.CountryCode;
            
            foreach (Tier tier in offer.Instances)
            {
                tiers.Add(
                    new Tier(
                        tier.TierType,
                        tier.PointsPrice,
                        tier.CurrencyPrice,
                        tier.PaymentMethod,
                        tier.CurrencyCode,
                        tier.Visibility
                        ));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\Tier.cs ===
﻿using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class Tier
    {
        #region Fields

        public OfferTier tierName = OfferTier.Gold;
        private int tierPointsPrice = 800;
        private double tierCurrencyPrice = 10.00;
        private CurrencyCode tierCurrencyCode = CurrencyCode.USD;
        private PaymentMethod tierPaymentMethod = PaymentMethod.Points;
        private VisibilityLevel tierVisibilityLevel = VisibilityLevel.Default;
        public CurrencyCode PriceCurrencyCode = CurrencyCode.MPT;

        #endregion

        #region Properties

        public OfferTier TierType
        {
            get { return tierName; }
            set { tierName = value; }
        }

        public int PointsPrice
        {
            get { return tierPointsPrice; }
            set { tierPointsPrice = value; }
        }

        public double CurrencyPrice
        {
            get { return tierCurrencyPrice; }
            set { tierCurrencyPrice = value; }
        }
        
        public CurrencyCode CurrencyCode
        {
            get { return tierCurrencyCode; }
            set { tierCurrencyCode = value; }
        }

        public PaymentMethod PaymentMethod
        {
            get { return tierPaymentMethod; }
            set
            {
                tierPaymentMethod = value;

                if (tierPaymentMethod == PaymentMethod.Points)                 
                {
                    PriceCurrencyCode = CurrencyCode.MPT;
                    tierVisibilityLevel = VisibilityLevel.Default;
                }
                else if (tierPaymentMethod == PaymentMethod.Token)
                {
                    PriceCurrencyCode = CurrencyCode.MPT;
                    tierVisibilityLevel = VisibilityLevel.Never_Enumerate;
                }
                else
                {
                    PriceCurrencyCode = tierCurrencyCode;
                    tierVisibilityLevel = VisibilityLevel.Default;
                }
            }
        }
        
        public VisibilityLevel Visibility
        {
            get { return tierVisibilityLevel; }
            set { tierVisibilityLevel = value; }
        }

        #endregion

        #region Constructor and Initialization

        public Tier() { }

        public Tier(OfferTier name, int pointsPrice, double currencyPrice, PaymentMethod paymentMethod, CurrencyCode currencyCode, VisibilityLevel visibilityLevel)
        {
            tierName = name;
            tierPointsPrice = pointsPrice;
            tierCurrencyPrice = currencyPrice;
            tierPaymentMethod = paymentMethod;
            tierCurrencyCode = currencyCode;
            tierVisibilityLevel = visibilityLevel;
        }

        #endregion        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\SerializableDictionary.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.Serialization;

[XmlRoot("dictionary")]
public class SerializableDictionary<TKey, TValue>
    : Dictionary<TKey, TValue>, IXmlSerializable
{
    #region IXmlSerializable Members

    public System.Xml.Schema.XmlSchema GetSchema()
    {
        return null;
    }

    public void ReadXml(System.Xml.XmlReader reader)
    {
        XmlSerializer keySerializer = new XmlSerializer(typeof(TKey));
        XmlSerializer valueSerializer = new XmlSerializer(typeof(TValue));

        bool wasEmpty = reader.IsEmptyElement;
        reader.Read();

        if (wasEmpty)
        {
            return;
        }


        while (reader.NodeType != System.Xml.XmlNodeType.EndElement)
        {
            reader.ReadStartElement("item");
            reader.ReadStartElement("key");

            TKey key = (TKey)keySerializer.Deserialize(reader);
            reader.ReadEndElement();

            reader.ReadStartElement("value");            
            TValue value = (TValue)valueSerializer.Deserialize(reader);

            reader.ReadEndElement();
            
            this.Add(key, value);

            reader.ReadEndElement();
            reader.MoveToContent();
        }

        reader.ReadEndElement();
    }


    public void WriteXml(System.Xml.XmlWriter writer)
    {
        XmlSerializer keySerializer = new XmlSerializer(typeof(TKey));
        XmlSerializer valueSerializer = new XmlSerializer(typeof(TValue));

        foreach (TKey key in this.Keys)
        {
            writer.WriteStartElement("item");
            writer.WriteStartElement("key");

            keySerializer.Serialize(writer, key);

            writer.WriteEndElement();

            writer.WriteStartElement("value");

            TValue value = this[key];
            valueSerializer.Serialize(writer, value);

            writer.WriteEndElement();
            writer.WriteEndElement();
        }
    }

    #endregion

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\RatingDescriptor.cs ===
﻿using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class RatingDescriptor
    {
        #region Fields 

        public int DescriptorId;
        private string descriptorName;
        private double descriptorValue;
        public static SerializableDictionary<string, int> AvailableRatingDescriptors = new SerializableDictionary<string, int>();

        #endregion 

        #region Properties

        [CategoryAttribute("Basic Details"),
         Description("Specifies the value to use for the current rating descriptor")]
        public double Value
        {
            get { return descriptorValue; }
            set { descriptorValue = value; }
        }

        [Browsable(true)]
        [CategoryAttribute("Basic Details"),
         Description("Specifies the descriptor name for the current rating descriptor")]
        [TypeConverter(typeof(RatingDescriptorNameConverter))]
        public string DescriptorName
        {
            get { return descriptorName; }
            set { descriptorName = value; }
        }

        #endregion

        #region Constructor and Initialization

        public RatingDescriptor()
        {
            if (AvailableRatingDescriptors.Count > 0)
            {
                descriptorName = AvailableRatingDescriptors.Keys.First();
                DescriptorId = AvailableRatingDescriptors[descriptorName];
            }
            else
            {
                DescriptorId = 0;
                descriptorName = String.Empty;
            }

            descriptorValue = 0.50;
        }

        #endregion
    }

    public class RatingDescriptorNameConverter : StringConverter
    {
        public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
        {
            //true means show a combobox
            return true;
        }

        public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
        {
            //true will limit to list. false will show the list, but allow free-form entry
            return true;
        }

        public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
        {
            return new StandardValuesCollection(RatingDescriptor.AvailableRatingDescriptors.Keys);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.Common\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Marketplace.Test.TestDataCreator.Common")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("Marketplace.Test.TestDataCreator.Common")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("82775f51-e6a6-4b2e-b762-2a8e48155eb5")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.DBSchemaTool\DBSchemaModule.cs ===
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Schema;

using DBSchema;
using Marketplace.Test.TestDataCreator.Common;
using Marketplace.Test.Common.Service;

namespace Marketplace.Test.TestDataCreator.DBSchema
{
    public class DBSchemaModule : IOutputModule
    {
        #region Constants

        #region Media Constants

        private const string BUNDLE_RELATIONSHIP = "%BUNDLE_RELATIONSHIP%";
        private const string CATEGORY_ID = "%CATEGORY_ID%";
        private const string CONTENT_ID = "%CONTENT_ID%";
        private const string CONTENT_MEDIA_ID = "%CONTENT_MEDIA_ID%";
        private const string CONTENT_MEDIA_INSTANCE_ID = "%CONTENT_MEDIA_INSTANCE_ID%";
        private const string FILE_ID = "%FILE_ID%";
        private const string MEDIA_CATEGORY = "%MEDIA_CATEGORY%";
        private const string MEDIA_ID = "%MEDIA_ID%";
        private const string MEDIA_INSTANCE_ID = "%MEDIA_INSTANCE_ID%";
        private const string MEDIA_RATING = "%MEDIA_RATING%";
        private const string MEDIA_RATING_DESCRIPTOR = "%MEDIA_RATING_DESCRIPTOR%";
        private const string PARENT_MEDIA_ID = "%PARENT_MEDIA_ID%";
        private const string PUBLISHER_BIT = "%PUBLISHER_BIT%";
        private const string PUBLISHER_BIT_ID = "%PUBLISHER_BIT_ID%";
        private const string RATING_ID = "%RATING_ID%";
        private const string RATING_DESCRIPTOR_ID = "%RATING_DESCRIPTOR_ID%";
        private const string RATING_DESCRIPTOR_VALUE = "%RATING_DESCRIPTOR_VALUE%";
        private const string RELATED_MEDIA_ID = "%RELATED_MEDIA_ID%";
        private const string TITLE = "%TITLE%";
        private const string TITLE_ID = "%TITLE_ID%";
        private const string TITLE_ID_BASE_10 = "%TITLE_ID_BASE_10%";
        private const string UODB_OFFER_ID = "%UODB_OFFER_ID%";
        private const string USER_TYPE = "%USER_TYPE%";
        private const string VISIBILITY_STATUS = "%VISIBILITY_STATUS%";
        
        #endregion

        #region Offer Constants

        private const string OFFER_COUNTRY = "%OFFER_COUNTRY%";
        private const string OFFER_CURRENCY_CODE = "%OFFER_CURRENCY_CODE%";
        private const string OFFER_DETAILS_LEGACY = "%OFFER_DETAILS_LEGACY%";
        private const string OFFER_DETAILS_CURRENT = "%OFFER_DETAILS_CURRENT%";
        private const string OFFER_END = "%OFFER_END%";
        private const string OFFER_ID = "%OFFER_ID%";
        private const string OFFER_INSTANCE = "%OFFER_INSTANCE%";
        private const string OFFER_INSTANCE_ID = "%OFFER_INSTANCE_ID%";
        private const string OFFER_INSTANCE_MEDIA_INSTANCE = "%OFFER_INSTANCE_MEDIA_INSTANCE%";
        private const string OFFER_PAYMENT_TYPE = "%OFFER_PAYMENT_TYPE%";
        private const string OFFER_PRICE = "%OFFER_PRICE%";
        private const string OFFER_PRICE_CURRENCY_CODE = "%OFFER_PRICE_CURRENCY_CODE%";
        private const string OFFER_RETAIL_PRICE = "%OFFER_RETAIL_PRICE%";
        private const string OFFER_START = "%OFFER_START%";
        private const string OFFER_STORE = "%OFFER_STORE%";
        private const string OFFER_USER_TYPE = "%OFFER_USER_TYPE%";
        private const string OFFER_VISIBILITY = "%OFFER_VISIBILITY%";
        private const string PROVIDER_TERM = "%PROVIDER_TERM%";
        private const string PROVIDER_TERM_ID = "%PROVIDER_TERM_ID%";

        #endregion

        #region Global Constants

        private const string ARCADE_GAME = "%ARCADE_GAME%";        
        private const string AVATAR_CONTENT = "%AVATAR_CONTENT%";
        private const string BUNDLE = "%BUNDLE%";
        private const string CONSUMABLE = "%CONSUMABLE%";
        private const string DOWNLOADABLE_CONTENT = "%DOWNLOADABLE_CONTENT%";
        private const string FULL_GAME_DEMO = "%FULL_GAME_DEMO%";
        private const string GAME_ON_DEMAND = "%GAME_ON_DEMAND%";
        private const string GAMERPIC = "%GAMERPIC%";
        private const string GAME_TRAILER = "%GAME_TRAILER%";
        private const string GAME_VIDEO = "%GAME_VIDEO%";
        private const string INDIE_GAME = "%INDIE_GAME%";
        private const string MARKETPLACE = "%MARKETPLACE%";
        private const string THEME = "%THEME%";
        private const string TRIAL = "%TRIAL%";
        private const string XBOX_ORIGINAL_GAME = "%XBOX_ORIGINAL_GAME%";

        #endregion
                        
        #endregion 

        #region Fields

        private int successCount = 0;
        private int failureCount = 0;
        private int totalProgress = 100;
        private int progressStep = 5;
        private static CatalogUtilities catalogUtilities = new CatalogUtilities();
        private static DBSchemaConfig schemaConfig = null;
        private static DBSchemaSet schemaSet = null;
        private static DBSchemaTransaction schemaTransaction = null;
        private SerializableDictionary<string, string> settings = new SerializableDictionary<string, string>();
        private Dictionary<GameCapability, string> capabilityWildcards = new Dictionary<GameCapability, string>();

        #endregion

        #region Constructor and Initialization

        /// <summary>
        /// Constructor for the DBSchemaModule
        /// </summary>
        public DBSchemaModule()
        {
            //Load configuration settings for the test cases
            Configuration config = ConfigurationManager.OpenExeConfiguration(
                System.Reflection.Assembly.GetExecutingAssembly().Location);

            foreach (string setting in config.AppSettings.Settings.AllKeys)
            {
                settings.Add(setting, config.AppSettings.Settings[setting].Value);
            }

            InitializeCapabilityWildcards();
        }

        private void InitializeCapabilityWildcards()
        {
            capabilityWildcards.Clear();
            capabilityWildcards.Add(GameCapability.OfflineCoopHardDriveRequired, "%OFFLINE_COOP_HARD_DRIVE_REQUIRED%");
            capabilityWildcards.Add(GameCapability.OfflineCoopHardDriveStorageAmount, "%OFFLINE_COOP_HARD_DRIVE_STORAGE_AMOUNT%");
            capabilityWildcards.Add(GameCapability.OfflineCoopPlayersMax, "%OFFLINE_COOP_PLAYER_MAX%");
            capabilityWildcards.Add(GameCapability.OfflineCoopPlayersMin, "%OFFLINE_COOP_PLAYER_MIN%");
            capabilityWildcards.Add(GameCapability.OfflineCustomSoundtracks, "%OFFLINE_CUSTOM_SOUNDTRACKS%");
            capabilityWildcards.Add(GameCapability.OfflineDolbyDigital, "%OFFLINE_DOLBY_DIGITAL%");
            capabilityWildcards.Add(GameCapability.OfflineHardDriveRequired, "%OFFLINE_COOP_HARD_DRIVE_REQUIRED%");
            capabilityWildcards.Add(GameCapability.OfflinePeripheralArcadeStick, "%OFFLINE_PERIPHERAL_ARCADE_STICK%");
            capabilityWildcards.Add(GameCapability.OfflinePeripheralCamera, "%OFFLINE_PERIPHERAL_CAMERA%");
            capabilityWildcards.Add(GameCapability.OfflinePeripheralDancePad, "%OFFLINE_PERIPHERAL_DANCE_PAD%");
            capabilityWildcards.Add(GameCapability.OfflinePeripheralFlightStick, "%OFFLINE_PERIPHERAL_FLIGHT_STICK%");
            capabilityWildcards.Add(GameCapability.OfflinePeripheralForceFeedbackWheel, "%OFFLINE_PERIPHERAL_FORCE_FEEDBACK_WHEEL%");
            capabilityWildcards.Add(GameCapability.OfflinePeripheralGamePad, "%OFFLINE_PERIPHERAL_GAME_PAD%");
            capabilityWildcards.Add(GameCapability.OfflinePeripheralWheel, "%OFFLINE_PERIPHERAL_WHEEL%");
            capabilityWildcards.Add(GameCapability.OfflinePlayersMax, "%OFFLINE_PLAYER_MAX%");
            capabilityWildcards.Add(GameCapability.OfflinePlayersMin, "%OFFLINE_PLAYER_MIN%");
            capabilityWildcards.Add(GameCapability.OfflineSaveStorageAmount, "%OFFLINE_SAVE_STORAGE_AMOUNT%");
            capabilityWildcards.Add(GameCapability.OfflineSystemLinkMax, "%OFFLINE_SYSTEM_LINK_MAX%");
            capabilityWildcards.Add(GameCapability.OfflineSystemLinkMin, "%OFFLINE_SYSTEM_LINK_MIN%");
            capabilityWildcards.Add(GameCapability.OfflineVoiceCommands, "%OFFLINE_VOICE_COMMANDS%");
            capabilityWildcards.Add(GameCapability.OnlineContentDownload, "%ONLINE_CONTENT_DOWNLOAD%");
            capabilityWildcards.Add(GameCapability.OnlineCoopHardDriveRequired, "%ONLINE_COOP_HARD_DRIVE_REQUIRED%");
            capabilityWildcards.Add(GameCapability.OnlineCoopHardDriveStorageAmount, "%ONLINE_COOP_HARD_DRIVE_STORAGE_AMOUNT%");
            capabilityWildcards.Add(GameCapability.OnlineCoopPlayersMax, "%ONLINE_COOP_PLAYERS_MAX%");
            capabilityWildcards.Add(GameCapability.OnlineCoopPlayersMin, "%ONLINE_COOP_PLAYERS_MIN%");
            capabilityWildcards.Add(GameCapability.OnlineHardDriveRequired, "%ONLINE_HARD_DRIVE_REQUIRED%");
            capabilityWildcards.Add(GameCapability.OnlineLeaderboards, "%ONLINE_LEADERBOARDS%");
            capabilityWildcards.Add(GameCapability.OnlineMultiplayerHardDriveRequired, "%ONLINE_MULTIPLAYER_HARD_DRIVE_REQUIRED%");
            capabilityWildcards.Add(GameCapability.OnlineMultiplayerMax, "%ONLINE_MULTIPLAYER_MAX%");
            capabilityWildcards.Add(GameCapability.OnlineMultiplayerMin, "%ONLINE_MULTIPLAYER_MIN%");
            capabilityWildcards.Add(GameCapability.OnlineOnly, "%ONLINE_ONLY%");
            capabilityWildcards.Add(GameCapability.OnlinePlayStorageAmount, "%ONLINE_PLAY_STORAGE_AMOUNT%");
            capabilityWildcards.Add(GameCapability.OnlineSpectatorMode, "%ONLINE_SPECTATOR_MODE%");
            capabilityWildcards.Add(GameCapability.OnlineVoice, "%ONLINE_VOICE%");
        }

        #endregion 

        #region IOutputModule Members

        #region Events 

        /// <summary>
        /// Invoked when a piece of content is successfully generated.
        /// </summary>
        public event GenerationSuccessDelegate GenerationSuccess;

        /// <summary>
        /// Invoked when a piece of content is not successfully generated.
        /// </summary>
        public event GenerationFailureDelegate GenerationFailure;

        /// <summary>
        /// Invoked when all of the test content has been generated.
        /// </summary>
        public event GenerationCompleteDelegate GenerationComplete;

        /// <summary>
        /// Invoked when the status of test content generation is updated.
        /// </summary>
        public event StatusUpdatedDelegate StatusUpdated;

        #endregion

        #region Properties

        /// <summary>
        /// The name of this module.
        /// </summary>
        public string Name
        {
            get { return "DBSchemaToolModule"; }
        }

        /// <summary>
        /// The location where the generated test content is saved to
        /// </summary>
        public string SaveLocation
        {
            get { return settings["SaveLocation"]; }
            set { settings["SaveLocation"] = value; }
        }

        /// <summary>
        /// The array of settings that this module has loaded up.
        /// </summary>
        public SerializableDictionary<string, string> Settings
        {
            get { return settings; }
        }

        #endregion

        /// <summary>
        /// Generates the configured test content, saves it to the specified location, and props
        /// the resulting content to the configured destination.
        /// </summary>
        /// <param name="content">The configured test content.</param>
        /// <param name="saveFile">The location where the generated content is saved to.</param>
        public void GenerateTestContent(List<ContentBase> content)
        {
            successCount = 0;
            failureCount = 0;
            string finalMediaXml = String.Empty;
            string finalOfferXml = String.Empty;
            string childMediaXml = String.Empty;
            string childOfferXml = String.Empty;
            List<string> usedUODBOfferIds = new List<string>();
            List<string> usedMediaInstanceIDs = new List<string>();
            
            CalculateProgressReport(content);

            ValidationEventHandler validator = new ValidationEventHandler(Validator);
            if (!InitializeDBSchemaTool(validator))
            {
                return;
            }

            StreamReader reader = null;
            reader = new StreamReader(@".\ContentTemplates\ContentBase.xml");
            finalOfferXml = reader.ReadToEnd();
            reader.Close();

            //load the base XML to be used by DBSchema
            finalMediaXml = finalOfferXml;

            //loop through each of the parent media and generate the associated XML
            foreach (ContentBase parentContent in content)
            {
                ValueBag valueBag = new ValueBag(parentContent);
                HashSet<string> usedWildcards = new HashSet<string>();

                try
                {
                    //if not working with a bundle, it's safe to generate the parent content XML now
                    if (parentContent.ProductType != ProductType.Bundle)
                    {
                        CreateXml(ref valueBag);
                        finalMediaXml = finalMediaXml.Replace(valueBag.ChildWildcard, valueBag.MediaXml + valueBag.ChildWildcard);
                        finalOfferXml = finalOfferXml.Replace(OFFER_DETAILS_LEGACY, valueBag.OfferXml + OFFER_DETAILS_LEGACY);
                    }

                    //loop through each of the related media for the parent content and generate the associated content
                    foreach (ContentBase relatedContent in parentContent.RelatedContent)
                    {
                        GenerateRelatedContentXml(ref finalMediaXml, ref finalOfferXml, ref valueBag, usedWildcards, relatedContent);                        
                    }

                    //remove any stray wildcards so unwanted duplicates are not accidentally added to the resulting XML
                    foreach (string wildcard in usedWildcards)
                    {
                        finalMediaXml = finalMediaXml.Replace(wildcard, "");
                    }

                    //if working with a bundle, we should now have the used Media and MediaInstance IDs needed for the Bundle XML
                    if (parentContent.ProductType == ProductType.Bundle)
                    {
                        CreateXml(ref valueBag);
                        finalMediaXml = finalMediaXml.Replace(valueBag.ChildWildcard, valueBag.MediaXml + valueBag.ChildWildcard);
                        finalOfferXml = finalOfferXml.Replace(OFFER_DETAILS_CURRENT, valueBag.OfferXml + OFFER_DETAILS_CURRENT);
                    }
                    
                    InvokeGenerationSuccess(parentContent);
                }
                catch (Exception ex)
                {
                    InvokeGenerationFailure(ex.ToString(), parentContent);
                }
            }

            WriteGeneratedContent(
                CleanUpRemainingWildcards(ref finalMediaXml),
                SaveLocation);
            
            WriteGeneratedContent(
                CleanUpRemainingWildcards(ref finalOfferXml),
                SaveLocation.Replace(".xml", "Offers.xml"));

            PropContentToDatabase(finalMediaXml, validator);
            PropContentToDatabase(finalOfferXml, validator);

            InvokeGenerationComplete(content, successCount, failureCount);
            UpdateStatus("Test data has been generated and propping has been completed.");
        }

        private void GenerateRelatedContentXml(ref string finalMediaXml, ref string finalOfferXml, ref ValueBag valueBag, HashSet<string> usedWildcards, ContentBase relatedContent)
        {
            try
            {
                ValueBag relatedValueBag = new ValueBag(valueBag);
                relatedValueBag.Content = relatedContent;

                CreateXml(ref relatedValueBag);
                finalMediaXml = finalMediaXml.Replace(relatedValueBag.ChildWildcard, relatedValueBag.MediaXml + relatedValueBag.ChildWildcard);
                finalOfferXml = finalOfferXml.Replace(OFFER_DETAILS_CURRENT, relatedValueBag.OfferXml + OFFER_DETAILS_CURRENT);

                if (relatedValueBag.RemoveWildcardWhenDone)
                {
                    usedWildcards.Add(relatedValueBag.ChildWildcard);
                    foreach (string wildcard in relatedValueBag.ChildContentWildcards)
                    {
                        usedWildcards.Add(wildcard);
                    }
                }

                InvokeGenerationSuccess(relatedContent);

                foreach (ContentBase childContent in relatedContent.RelatedContent)
                {
                    GenerateRelatedContentXml(ref finalMediaXml, ref finalOfferXml, ref relatedValueBag, usedWildcards, childContent);
                }
            }
            catch (Exception ex)
            {
                InvokeGenerationFailure(ex.ToString(), relatedContent);
            }
        }

        private bool InitializeDBSchemaTool(ValidationEventHandler validator)
        {
            UpdateStatus("Loading configuration file to use when propping content...");
            if (null == schemaConfig)
            {
                schemaConfig = new DBSchemaConfig();
                schemaConfig.LoadConfig(
                    settings["SchemaConfigFile"],
                    validator);
            }

            UpdateStatus("Generating schema for destination database...");
            if (null == schemaSet)
            {
                schemaSet = new DBSchemaSet();

                try
                {
                    schemaSet.LoadSchema(
                        schemaConfig,
                        settings["DatabaseServer"],
                        settings["DatabaseName"],
                        null,
                        null);
                }
                catch (Exception ex)
                {
                    UpdateStatus("There was an error communicating with the destination database, please try again." + Environment.NewLine, ex.ToString());
                    schemaConfig = null;
                    schemaSet = null;
                    return false;
                }
            }

            return true;
        }
        

        private void CreateXml(ref ValueBag valueBag)
        {
            SetTitleId(valueBag);

            SetMediaInstanceId(valueBag);

            SetContentId(valueBag);

            SetContentMediaId(valueBag);

            SetContentMediaInstanceId(valueBag);

            SetProviderTermId(valueBag);

            valueBag.MediaId = catalogUtilities.CreateMediaId(valueBag.TitleId, ClientType.Xbox360);
            
            valueBag.FileId = catalogUtilities.CreateFileId(valueBag.TitleId, valueBag.UODBOfferId);

            //if not already set, set the parent mediaid to the current mediaid
            if ((null == valueBag.ParentMediaId ||
                String.Empty == valueBag.ParentMediaId) &&
                ProductType.Bundle != valueBag.Content.ProductType)
            {
                valueBag.ParentMediaId = valueBag.MediaId;
                valueBag.ParentMediaInstanceId = valueBag.MediaInstanceId;
            }
                        
            //if working with related content, update the media and mediainstance IDs
            if (valueBag.Content.IsChild)
            {
                valueBag.MediaId = valueBag.ContentMediaId;

                if (valueBag.Content.ProductType == ProductType.Trial_Game)
                {
                    valueBag.MediaInstanceId = valueBag.ParentMediaInstanceId;
                }
                else
                {
                    valueBag.MediaInstanceId = valueBag.ContentMediaInstanceId;
                }
            }

            valueBag.Content.usedMediaId = valueBag.MediaId;

            valueBag.Content.usedMediaInstanceId = valueBag.MediaInstanceId;

            valueBag.MediaXml = ConstructMediaContent(valueBag);

            valueBag.OfferXml = ConstructOfferContent(valueBag);
        }

        
        private string ConstructOfferContent(ValueBag valueBag)
        {
            if (valueBag.Content.Offers.Count == 0)
            {
                return String.Empty;
            }

            string currentOfferBase = String.Empty;
            string offerBase = String.Empty;
            string finalOfferContent = String.Empty;
            string currentOfferToken = String.Empty;
            string providerTermGameContentInstanceBase = String.Empty;
            StreamReader reader = null;

            reader = new StreamReader(@".\ContentTemplates\OfferDetails.xml");
            
            offerBase = reader.ReadToEnd();
            reader.Close();

            string offerInstanceBase= String.Empty;
            reader = new StreamReader(@".\ContentTemplates\OfferInstance.xml");
            offerInstanceBase = reader.ReadToEnd();
            reader.Close();

            string offerInstanceMediaInstanceBase = String.Empty;
            reader = new StreamReader(@".\ContentTemplates\OfferInstanceMediaInstance.xml");
            offerInstanceMediaInstanceBase = reader.ReadToEnd();
            reader.Close();

            string providerTermBase = String.Empty;
            reader = new StreamReader(@".\ContentTemplates\ProviderTerm.xml");
            providerTermBase = reader.ReadToEnd();
            reader.Close();

            string userTypeBase = String.Empty;
            reader = new StreamReader(@".\ContentTemplates\UserType.xml");
            userTypeBase = reader.ReadToEnd();
            reader.Close();

            CatalogUtilities utils = new CatalogUtilities();

            foreach (Offer offer in valueBag.Content.Offers)
            {
                currentOfferBase = offerBase;

                //Create a new UODB offer ID if necessary for this offer
                if (valueBag.UODBOfferId == String.Empty)
                {
                    SetUODBOfferId(valueBag);
                }
                                
                valueBag.OfferId = catalogUtilities.CreateOfferId(valueBag.TitleId, valueBag.UODBOfferId);

                foreach (Tier tier in offer.Instances)
                {
                    UpdateStatus("Generating a new offer instance...");
                    valueBag.OfferInstanceId = utils.CreateOfferInstanceId(
                        valueBag.TitleId,
                        valueBag.UODBOfferId,
                        GetCountryCode(offer.CountryCode).ToString("X"),
                        GetUserType(tier.TierType),
                        GetPaymentType(tier.PaymentMethod));

                    currentOfferBase = currentOfferBase.Replace(OFFER_INSTANCE, offerInstanceBase + Environment.NewLine + OFFER_INSTANCE);
                    currentOfferBase = currentOfferBase.Replace(PROVIDER_TERM, providerTermBase + Environment.NewLine + PROVIDER_TERM);
                    currentOfferBase = currentOfferBase.Replace(USER_TYPE, userTypeBase + Environment.NewLine + USER_TYPE);
                
                    //if working with a bundle, loop through related content and add offerinstance_mediainstance entries
                    if (valueBag.Content.ProductType == ProductType.Bundle)
                    {
                        foreach (ContentBase relatedContent in valueBag.Content.RelatedContent)
                        {
                            string offerInstanceMediaInstanceCopy = offerInstanceMediaInstanceBase;
                            offerInstanceMediaInstanceCopy = offerInstanceMediaInstanceCopy.Replace(MEDIA_INSTANCE_ID, relatedContent.usedMediaInstanceId);

                            currentOfferBase = currentOfferBase.Replace(
                                OFFER_INSTANCE_MEDIA_INSTANCE,
                                offerInstanceMediaInstanceCopy + Environment.NewLine + OFFER_INSTANCE_MEDIA_INSTANCE);

                            currentOfferBase = currentOfferBase.Replace(MEDIA_INSTANCE_ID, valueBag.MediaInstanceId);
                        }
                    }
                    else
                    {
                        currentOfferBase = currentOfferBase.Replace(OFFER_INSTANCE_MEDIA_INSTANCE, offerInstanceMediaInstanceBase);
                    }

                    currentOfferBase = currentOfferBase.Replace(OFFER_INSTANCE_ID, valueBag.OfferInstanceId);
                    currentOfferBase = currentOfferBase.Replace(OFFER_PRICE, Convert.ToString((int)tier.PointsPrice));
                    currentOfferBase = currentOfferBase.Replace(OFFER_RETAIL_PRICE, Convert.ToString((double)tier.CurrencyPrice));
                    currentOfferBase = currentOfferBase.Replace(OFFER_USER_TYPE, Convert.ToString((int)tier.TierType));
                    currentOfferBase = currentOfferBase.Replace(OFFER_CURRENCY_CODE, tier.CurrencyCode.ToString());
                    currentOfferBase = currentOfferBase.Replace(OFFER_START, offer.StartDate.ToString("s"));
                    currentOfferBase = currentOfferBase.Replace(OFFER_END, offer.EndDate.ToString("s"));
                    currentOfferBase = currentOfferBase.Replace(OFFER_COUNTRY, offer.CountryCode.ToString());
                    currentOfferBase = currentOfferBase.Replace(OFFER_VISIBILITY, Convert.ToString((int)tier.Visibility));
                    currentOfferBase = currentOfferBase.Replace(OFFER_PAYMENT_TYPE, Convert.ToString((int)tier.PaymentMethod));
                    currentOfferBase = currentOfferBase.Replace(OFFER_PRICE_CURRENCY_CODE, tier.PriceCurrencyCode.ToString());
                }

                if (valueBag.Content.IsChild)
                {
                    currentOfferBase = currentOfferBase.Replace(MEDIA_ID, valueBag.ContentMediaId);
                }
                else
                {
                    currentOfferBase = currentOfferBase.Replace(MEDIA_ID, valueBag.MediaId);
                }
                                
                currentOfferBase = currentOfferBase.Replace(MEDIA_INSTANCE_ID, valueBag.MediaInstanceId);
                currentOfferBase = currentOfferBase.Replace(OFFER_STORE, offer.Store.ToString());
                currentOfferBase = currentOfferBase.Replace(OFFER_ID, valueBag.OfferId);
                currentOfferBase = currentOfferBase.Replace(PROVIDER_TERM_ID, valueBag.ProviderTermId);
                currentOfferBase = currentOfferBase.Replace(VISIBILITY_STATUS, Convert.ToString((int)offer.Status));

                //allow new UODB Offer IDs to be created for any subsequent offers
                valueBag.UODBOfferId = String.Empty;

                //allow additional offers to be appended to the current offer base
                finalOfferContent += currentOfferBase;
            }

            finalOfferContent = finalOfferContent.Replace(OFFER_INSTANCE, "");
            finalOfferContent = finalOfferContent.Replace(PROVIDER_TERM, "");
            finalOfferContent = finalOfferContent.Replace(USER_TYPE, "");

            return finalOfferContent;
        }

        private string ConstructMediaContent(ValueBag valueBag)
        {
            UpdateStatus("Generating new media...");

            StreamReader reader = null;
            string baseXml = String.Empty;
            switch (valueBag.Content.ProductType)
            {
                case ProductType.Arcade:
                    reader = new StreamReader(@".\ContentTemplates\Arcade.xml");
                    valueBag.ChildWildcard = ARCADE_GAME;
                    IncludeChildContentWildcards(valueBag);                    
                    break;

                case ProductType.Full_Game_Demo:
                    reader = new StreamReader(@".\ContentTemplates\FullGameDemo.xml");
                    valueBag.ChildWildcard = FULL_GAME_DEMO;
                    valueBag.RemoveWildcardWhenDone = true;
                    break;

                case ProductType.Downloadable_Content:
                    reader = new StreamReader(@".\ContentTemplates\DownloadableContent.xml");
                    valueBag.ChildWildcard = DOWNLOADABLE_CONTENT;
                    valueBag.RemoveWildcardWhenDone = true;
                    break;

                case ProductType.Gamer_Pic:
                    reader = new StreamReader(@".\ContentTemplates\GamerPic.xml");
                    valueBag.ChildWildcard = GAMERPIC;
                    valueBag.RemoveWildcardWhenDone = true;
                    break;
                    
                case ProductType.Game_Trailer:
                    reader = new StreamReader(@".\ContentTemplates\GameTrailer.xml");
                    valueBag.ChildWildcard = GAME_TRAILER;
                    break;

                case ProductType.Game_Video:
                    reader = new StreamReader(@".\ContentTemplates\GameVideo.xml");
                    valueBag.ChildWildcard = GAME_VIDEO;
                    break;

                case ProductType.Indie_Game:
                    reader = new StreamReader(@".\ContentTemplates\IndieGame.xml");
                    valueBag.ChildWildcard = INDIE_GAME;
                    IncludeChildContentWildcards(valueBag);      
                    break;
                    
                case ProductType.Marketplace:
                    reader = new StreamReader(@".\ContentTemplates\Marketplace.xml");
                    valueBag.ChildWildcard = MARKETPLACE;
                    IncludeChildContentWildcards(valueBag);      
                    break;

                case ProductType.Theme:
                    reader = new StreamReader(@".\ContentTemplates\Theme.xml");
                    valueBag.ChildWildcard = THEME;
                    valueBag.RemoveWildcardWhenDone = true;
                    break;

                case ProductType.Avatar_Content:
                    reader = new StreamReader(@".\ContentTemplates\AvatarContent.xml");
                    valueBag.ChildWildcard = AVATAR_CONTENT;
                    valueBag.RemoveWildcardWhenDone = true;
                    break;

                case ProductType.Consumable:
                    reader = new StreamReader(@".\ContentTemplates\Consumable.xml");
                    valueBag.ChildWildcard = CONSUMABLE;
                    valueBag.RemoveWildcardWhenDone = true;
                    break;

                case ProductType.Trial_Game:
                    reader = new StreamReader(@".\ContentTemplates\Trial.xml");
                    valueBag.ChildWildcard = TRIAL;
                    valueBag.RemoveWildcardWhenDone = true;
                    break;

                case ProductType.Game_On_Demand:
                    reader = new StreamReader(@".\ContentTemplates\GameOnDemand.xml");
                    valueBag.ChildWildcard = GAME_ON_DEMAND;
                    IncludeChildContentWildcards(valueBag);      
                    break;

                case ProductType.Xbox_Original:
                    reader = new StreamReader(@".\ContentTemplates\XboxOriginal.xml");
                    valueBag.ChildWildcard = XBOX_ORIGINAL_GAME;
                    IncludeChildContentWildcards(valueBag);      
                    break;

                case ProductType.Bundle: 
                    reader = new StreamReader(@".\ContentTemplates\Bundle.xml");
                    valueBag.ChildWildcard = BUNDLE;
                    break;

                default: return String.Empty;
            }
            baseXml = reader.ReadToEnd();
            reader.Close();

            return CustomizeMediaXML(valueBag, baseXml);
        }

        private static void IncludeChildContentWildcards(ValueBag valueBag)
        {
            valueBag.ChildContentWildcards.Add(AVATAR_CONTENT);
            valueBag.ChildContentWildcards.Add(CONSUMABLE);
            valueBag.ChildContentWildcards.Add(DOWNLOADABLE_CONTENT);
            valueBag.ChildContentWildcards.Add(GAMERPIC);
            valueBag.ChildContentWildcards.Add(GAME_TRAILER);
            valueBag.ChildContentWildcards.Add(GAME_VIDEO);
            valueBag.ChildContentWildcards.Add(THEME);
        }

        private string CustomizeMediaXML(ValueBag valueBag, string xmlBase)
        {
            string titleIdBase10 = Convert.ToInt32(valueBag.TitleId, 16).ToString();
            Dictionary<string, string> currentWildcardValues = new Dictionary<string, string>();
            
            currentWildcardValues.Add(CONTENT_ID, valueBag.ContentId);
            currentWildcardValues.Add(CONTENT_MEDIA_ID, valueBag.ContentMediaId);
            currentWildcardValues.Add(CONTENT_MEDIA_INSTANCE_ID, valueBag.ContentMediaInstanceId);
            currentWildcardValues.Add(FILE_ID, valueBag.FileId);
            currentWildcardValues.Add(MEDIA_ID, valueBag.MediaId);
            currentWildcardValues.Add(MEDIA_INSTANCE_ID, valueBag.MediaInstanceId);
            currentWildcardValues.Add(OFFER_ID, valueBag.OfferId);
            currentWildcardValues.Add(OFFER_INSTANCE_ID, valueBag.OfferInstanceId);
            currentWildcardValues.Add(PARENT_MEDIA_ID, valueBag.ParentMediaId);
            currentWildcardValues.Add(TITLE, valueBag.Content.Title);
            currentWildcardValues.Add(TITLE_ID, valueBag.TitleId);
            currentWildcardValues.Add(TITLE_ID_BASE_10, titleIdBase10);
            currentWildcardValues.Add(UODB_OFFER_ID, valueBag.UODBOfferId);

            StreamReader reader = new StreamReader(@".\ContentTemplates\PublisherBit.xml");
            string publisherBitXML = reader.ReadToEnd();
            reader.Close();

            reader = new StreamReader(@".\ContentTemplates\Rating.xml");
            string ratingXML = reader.ReadToEnd();
            reader.Close();

            reader = new StreamReader(@".\ContentTemplates\RatingDescriptor.xml");
            string ratingDescriptorXML = reader.ReadToEnd();
            reader.Close();

            reader = new StreamReader(@".\ContentTemplates\Category.xml");
            string categoryXML = reader.ReadToEnd();
            reader.Close();

            foreach (Category category in valueBag.Content.Categories)
            {
                currentWildcardValues[CATEGORY_ID] = Category.AvailableCategories[category.Name].ToString();                
                CombineAndReplaceWildcards(ref xmlBase, categoryXML, MEDIA_CATEGORY, currentWildcardValues);
            }
            
            foreach (Rating rating in valueBag.Content.Ratings)
            {
                currentWildcardValues[RATING_ID] = Rating.AvailableRatings[rating.Name].ToString();                
                CombineAndReplaceWildcards(ref xmlBase, ratingXML, MEDIA_RATING, currentWildcardValues);
            }
            
            foreach (RatingDescriptor descriptor in valueBag.Content.RatingDescriptors)
            {
                currentWildcardValues[RATING_DESCRIPTOR_ID] = RatingDescriptor.AvailableRatingDescriptors[descriptor.DescriptorName].ToString();
                currentWildcardValues[RATING_DESCRIPTOR_VALUE] = descriptor.Value.ToString();     
                CombineAndReplaceWildcards(ref xmlBase, ratingDescriptorXML, MEDIA_RATING_DESCRIPTOR, currentWildcardValues);
            }

            if (null != valueBag.Content.GamePublisherBit &&
                String.Empty != valueBag.Content.GamePublisherBit)
            {
                currentWildcardValues.Add(PUBLISHER_BIT_ID, PublisherBit.AvailablePublisherBits[valueBag.Content.GamePublisherBit].ToString());            
                CombineAndReplaceWildcards(ref xmlBase, publisherBitXML, PUBLISHER_BIT, currentWildcardValues);
            }

            //set game capabilities the user specified first
            foreach (GameCapabilities capability in valueBag.Content.GameCapabilities)
            {
                xmlBase = xmlBase.Replace(
                    capabilityWildcards[capability.GameCapability],
                    capability.Value.ToString()); 
            }

            //set any other game capabilities that the user had not specified
            foreach (GameCapability capability in valueBag.Content.basicGameCapabilities.Keys)
            {
                xmlBase = xmlBase.Replace(
                    capabilityWildcards[capability],
                    valueBag.Content.basicGameCapabilities[capability].ToString()); 
            }

            if (valueBag.Content.ProductType == ProductType.Bundle)
            {
                reader = new StreamReader(@".\ContentTemplates\BundleRelationship.xml");
                string bundleRelationshipXML = reader.ReadToEnd();
                reader.Close();

                foreach (ContentBase relatedContent in valueBag.Content.RelatedContent)
                {
                    string bundleRelationshipCopy = bundleRelationshipXML;
                    bundleRelationshipCopy = bundleRelationshipCopy.Replace(RELATED_MEDIA_ID, relatedContent.usedMediaId);
                    xmlBase = xmlBase.Replace(BUNDLE_RELATIONSHIP, bundleRelationshipCopy + Environment.NewLine + BUNDLE_RELATIONSHIP);
                }
            }

            xmlBase = ReplaceWildcards(xmlBase, currentWildcardValues);
            
            return xmlBase;
        }

        private string ReplaceWildcards(string xmlBase, Dictionary<string, string> currentWildcardValues)
        {
            string intermediaWildcard = String.Empty;
            int startIndex = 0;
            int endIndex = 0;
            
            while ((startIndex = xmlBase.IndexOf('%', startIndex + 1)) > 0)
            {
                endIndex = xmlBase.IndexOf('%', startIndex + 1);
                if (endIndex < 0)
                {
                    break;
                }

                intermediaWildcard = xmlBase.Substring(startIndex, endIndex - startIndex + 1);

                if (currentWildcardValues.ContainsKey(intermediaWildcard))
                {
                    xmlBase = xmlBase.Replace(intermediaWildcard, currentWildcardValues[intermediaWildcard]);
                }
            }

            return xmlBase;
        }

        private void CombineAndReplaceWildcards(ref string xmlBase, string value, string currentWildcard, Dictionary<string, string> currentWildcardValues)
        {
            value = ReplaceWildcards(value, currentWildcardValues);

            xmlBase = xmlBase.Replace(currentWildcard, value + currentWildcard);            
        }

        public bool CheckDependencyStatus()
        {
            try
            {
                SqlConnectionStringBuilder sqlConnectionStringBuilder = new SqlConnectionStringBuilder();
                    sqlConnectionStringBuilder.ApplicationName = "TestDataCreator";
                    sqlConnectionStringBuilder.DataSource = settings["DatabaseServer"];
                    sqlConnectionStringBuilder.InitialCatalog = settings["DatabaseName"];
                    sqlConnectionStringBuilder.IntegratedSecurity = true;
                    sqlConnectionStringBuilder.ConnectTimeout = 30;

                    using (SqlConnection connection = new SqlConnection(sqlConnectionStringBuilder.ConnectionString))
                    {
                        connection.Open();
                    }
            }
            catch
            {
                return false;
            }

            return true;
        }

        #endregion

        #region Helper Functions

        private void SetProviderTermId(ValueBag valueBag)
        {
            UpdateStatus("Generating a unique providertermid...");
            valueBag.ProviderTermId = catalogUtilities.CreateMediaInstanceId();
            while (
                valueBag.UsedMediaInstanceIds.Contains(valueBag.ProviderTermId) ||
                catalogUtilities.LocateExistingMediaInstanceId(
                    settings["DatabaseServer"],
                    settings["DatabaseName"],
                    valueBag.ProviderTermId = catalogUtilities.CreateMediaInstanceId())) { }
            valueBag.UsedMediaInstanceIds.Add(valueBag.ProviderTermId);
        }

        private void SetContentMediaInstanceId(ValueBag valueBag)
        {
            UpdateStatus("Generating a unique content mediainstanceid...");
            valueBag.ContentMediaInstanceId = String.Empty;
            while (
                valueBag.UsedMediaInstanceIds.Contains(valueBag.ContentMediaInstanceId) ||
                catalogUtilities.LocateExistingMediaInstanceId(
                    settings["DatabaseServer"],
                    settings["DatabaseName"],
                    valueBag.ContentMediaInstanceId = catalogUtilities.CreateMediaInstanceId())) { }
            
            valueBag.UsedMediaInstanceIds.Add(valueBag.ContentMediaInstanceId);            
        }

        private void SetContentMediaId(ValueBag valueBag)
        {
            UpdateStatus("Generating a unique content mediaid...");
            valueBag.ContentMediaId = String.Empty;
            valueBag.UODBOfferId = catalogUtilities.GenerateRandomHexValue(8);
            while (
                valueBag.UsedUODBOfferIds.Contains(valueBag.UODBOfferId) ||
                catalogUtilities.LocateExistingMediaId(
                    settings["DatabaseServer"],
                    settings["DatabaseName"],
                    valueBag.ContentMediaId = catalogUtilities.CreateContentMediaId(valueBag.TitleId, valueBag.UODBOfferId)))
            {
                valueBag.UODBOfferId = catalogUtilities.GenerateRandomHexValue(8);
            }

            valueBag.UsedUODBOfferIds.Add(valueBag.UODBOfferId);
        }

        private void SetUODBOfferId(ValueBag valueBag)
        {
            UpdateStatus("Generating a unique UODB Offer Id...");
            valueBag.UODBOfferId = catalogUtilities.GenerateRandomHexValue(8);
            
            while (valueBag.UsedUODBOfferIds.Contains(valueBag.UODBOfferId))                
            {
                valueBag.UODBOfferId = catalogUtilities.GenerateRandomHexValue(8);
            }

            valueBag.UsedUODBOfferIds.Add(valueBag.UODBOfferId);
        }

        private void SetContentId(ValueBag valueBag)
        {
            UpdateStatus("Generating a unique contentid...");
            valueBag.ContentId = String.Empty;
            while (
                valueBag.UsedContentIds.Contains(valueBag.ContentId) ||
                catalogUtilities.LocateExistingContentId(
                    settings["DatabaseServer"],
                    settings["DatabaseName"],
                    valueBag.ContentId = catalogUtilities.CreateContentId())) { }
            valueBag.ContentId = Convert.ToBase64String(HexStringToByteArray(valueBag.ContentId));
        }

        private void SetMediaInstanceId(ValueBag valueBag)
        {
            UpdateStatus("Generating a unique mediainstanceid...");
            valueBag.MediaInstanceId = String.Empty;
            while (
                valueBag.UsedMediaInstanceIds.Contains(valueBag.MediaInstanceId) ||
                catalogUtilities.LocateExistingMediaInstanceId(
                    settings["DatabaseServer"],
                    settings["DatabaseName"],
                    valueBag.MediaInstanceId = catalogUtilities.CreateMediaInstanceId())) { }
            valueBag.UsedMediaInstanceIds.Add(valueBag.MediaInstanceId);
        }

        private void SetTitleId(ValueBag valueBag)
        {
            UpdateStatus("Generating a unique titleid...");
            if (null == valueBag.TitleId ||
               String.Empty == valueBag.TitleId)
            {
                while (catalogUtilities.LocateExistingTitleId(
                    settings["DatabaseServer"],
                    settings["DatabaseName"],
                    valueBag.TitleId = catalogUtilities.GenerateRandomHexValue(8))) { }
            }
        }

        private void InvokeGenerationSuccess(ContentBase content)
        {
            successCount++;

            if (null != GenerationSuccess)
            {
                GenerationSuccess.Invoke(
                    this,
                    new GenerationSuccessEventArguments(content));
            }
        }

        private void InvokeGenerationFailure(string error, ContentBase content)
        {
            failureCount++;

            if (null != GenerationFailure)
            {
                GenerationFailure.Invoke(
                    this,
                    new GenerationFailureEventArguments(error, content));
            }
        }

        private void InvokeGenerationComplete(List<ContentBase> content, int successCount, int failureCount)
        {
            if (null != GenerationComplete)
            {
                GenerationComplete.Invoke(
                    this,
                    new GenerationCompleteEventArguments(content, successCount, failureCount));
            }
        }

        private void PropContentToDatabase(string finalContent, ValidationEventHandler validator)
        {
            XmlDocument document = new XmlDocument();
            document.LoadXml(finalContent);

            UpdateStatus("Propping content to the destination database...");
            schemaTransaction = schemaSet.CreateTransaction(
                document.DocumentElement.CreateNavigator(),
                true,
                validator);

            schemaTransaction.Execute(null, null);
        }

        private void WriteGeneratedContent(string generatedContent, string saveFile)
        {
            XmlDocument mediaDocument = new XmlDocument();
            mediaDocument.LoadXml(generatedContent);

            XmlTextWriter xmlWriter = new XmlTextWriter(saveFile, Encoding.UTF8);
            xmlWriter.Formatting = Formatting.Indented;
            
            mediaDocument.WriteTo(xmlWriter);
            xmlWriter.Flush();
            xmlWriter.Close();
        }

        private string CleanUpRemainingWildcards(ref string data)
        {
            int startIndex = 0;
            int endIndex = 0;
                        
            while ((startIndex = data.IndexOf('%')) > 0)
            {
                endIndex = data.IndexOf('%', startIndex + 1);
                if (endIndex > startIndex)
                {
                    data = data.Remove(startIndex, endIndex - startIndex + 1);
                }
            }

            return data;
        }

        private void CalculateProgressReport(List<ContentBase> content)
        {            
            int initialCount = 4;
            int totalOfferUpdates = 0;
            int totalMediaUpdates = 0;

            foreach (ContentBase contentBase in content)
            {
                totalMediaUpdates++;
                totalMediaUpdates += contentBase.RelatedContent.Count;
                totalOfferUpdates += contentBase.Offers.Count;

                foreach (ContentBase related in contentBase.RelatedContent)
                {
                    totalOfferUpdates += related.Offers.Count;
                }
            }

            progressStep = totalMediaUpdates + totalOfferUpdates;
            totalMediaUpdates *= 7;
            totalProgress = (initialCount + totalMediaUpdates + totalOfferUpdates);
        }

        private void UpdateStatus(string currentStatus)
        {
            UpdateStatus(currentStatus, null);
        }

        private void UpdateStatus(string currentStatus, string error)
        {
            if (null != StatusUpdated)
            {
                StatusUpdated.Invoke(currentStatus, error, totalProgress, progressStep);
            }
        }

        private byte[] HexStringToByteArray(string s)
        {
            s = s.Trim().ToUpper();

            if (s[0] == '0' && s[1] == 'X')
                s = s.Substring(2);

            int numBytes = s.Length / 2;
            byte[] bytes = new byte[numBytes];

            for (int j = 0; j < numBytes; j++)
            {
                bytes[j] = Byte.Parse(s.Substring(j * 2, 2), NumberStyles.HexNumber);
            }

            return bytes;
        }

        private PaymentType GetPaymentType(PaymentMethod paymentMethod)
        {
            switch (paymentMethod)
            {
                case PaymentMethod.Credit_Card: return PaymentType.CreditCard;
                case PaymentMethod.Points: return PaymentType.Points;
                case PaymentMethod.Token: return PaymentType.Token;
            }

            return PaymentType.Points;
        }

        private UserType GetUserType(OfferTier offerTier)
        {
            switch (offerTier)
            {
                case OfferTier.Elite: return UserType.Elite;
                case OfferTier.Family: return UserType.Family;
                case OfferTier.Gold: return UserType.Gold;
                case OfferTier.Silver: return UserType.Silver;
            }

            return UserType.Gold;
        }

        private static int GetCountryCode(CountryCode countryCode)
        {
            switch (countryCode)
            {
                case CountryCode.AL: return 2;
                case CountryCode.DZ: return 27;
                case CountryCode.AR: return 4;
                case CountryCode.AM: return 3;
                case CountryCode.AU: return 6;
                case CountryCode.AT: return 5;
                case CountryCode.AZ: return 7;
                case CountryCode.BH: return 10;
                case CountryCode.BY: return 14;
                case CountryCode.BE: return 8;
                case CountryCode.BZ: return 15;
                case CountryCode.BO: return 12;
                case CountryCode.BR: return 13;
                case CountryCode.BN: return 11;
                case CountryCode.BG: return 9;
                case CountryCode.CA: return 16;
                case CountryCode.CL: return 19;
                case CountryCode.CN: return 20;
                case CountryCode.CO: return 21;
                case CountryCode.CR: return 22;
                case CountryCode.HR: return 41;
                case CountryCode.CZ: return 23;
                case CountryCode.DK: return 25;
                case CountryCode.DO: return 26;
                case CountryCode.EC: return 28;
                case CountryCode.EG: return 30;
                case CountryCode.SV: return 95;
                case CountryCode.EE: return 29;
                case CountryCode.FO: return 33;
                case CountryCode.FI: return 32;
                case CountryCode.FR: return 34;
                case CountryCode.GE: return 36;
                case CountryCode.DE: return 24;
                case CountryCode.GR: return 37;
                case CountryCode.GT: return 38;
                case CountryCode.HN: return 40;
                case CountryCode.HK: return 39;
                case CountryCode.HU: return 42;
                case CountryCode.IS: return 49;
                case CountryCode.IN: return 46;
                case CountryCode.ID: return 43;
                case CountryCode.IR: return 48;
                case CountryCode.IQ: return 47;
                case CountryCode.IE: return 44;
                case CountryCode.IL: return 45;
                case CountryCode.IT: return 50;
                case CountryCode.JM: return 51;
                case CountryCode.JP: return 53;
                case CountryCode.JO: return 52;
                case CountryCode.KZ: return 58;
                case CountryCode.KE: return 54;
                case CountryCode.KR: return 56;
                case CountryCode.KW: return 57;
                case CountryCode.KG: return 55;
                case CountryCode.LV: return 63;
                case CountryCode.LB: return 59;
                case CountryCode.LY: return 64;
                case CountryCode.LI: return 60;
                case CountryCode.LT: return 61;
                case CountryCode.MO: return 69;
                case CountryCode.MK: return 67;
                case CountryCode.MY: return 72;
                case CountryCode.MV: return 70;
                case CountryCode.MX: return 71;
                case CountryCode.MC: return 66;
                case CountryCode.MN: return 68;
                case CountryCode.MA: return 65;
                case CountryCode.NL: return 74;
                case CountryCode.NZ: return 76;
                case CountryCode.NI: return 73;
                case CountryCode.NO: return 75;
                case CountryCode.OM: return 77;
                case CountryCode.PK: return 81;
                case CountryCode.PA: return 78;
                case CountryCode.PY: return 85;
                case CountryCode.PE: return 79;
                case CountryCode.PH: return 80;
                case CountryCode.PL: return 82;
                case CountryCode.PT: return 84;
                case CountryCode.PR: return 83;
                case CountryCode.QA: return 86;
                case CountryCode.RO: return 87;
                case CountryCode.RU: return 88;
                case CountryCode.SA: return 89;
                case CountryCode.SG: return 91;
                case CountryCode.SK: return 93;
                case CountryCode.SI: return 92;
                case CountryCode.ZA: return 109;
                case CountryCode.ES: return 31;
                case CountryCode.SE: return 90;
                case CountryCode.CH: return 18;
                case CountryCode.SY: return 96;
                case CountryCode.TW: return 101;
                case CountryCode.TH: return 97;
                case CountryCode.TT: return 100;
                case CountryCode.TN: return 98;
                case CountryCode.TR: return 99;
                case CountryCode.UA: return 102;
                case CountryCode.AE: return 1;
                case CountryCode.GB: return 35;
                case CountryCode.US: return 103;
                case CountryCode.UY: return 104;
                case CountryCode.UZ: return 105;
                case CountryCode.VE: return 106;
                case CountryCode.VN: return 107;
                case CountryCode.YE: return 108;
                case CountryCode.ZW: return 110;
            }

            return 103;
        }

        private void Validator(object sender, System.Xml.Schema.ValidationEventArgs e)
        {

        }

        #endregion

        #region Helper Classes

        private class ValueBag
        {
            public bool RemoveWildcardWhenDone;
            public string ChildWildcard;
            public List<string> ChildContentWildcards;
            public ContentBase Content;
            public string ContentId;
            public string ContentMediaId;
            public string ContentMediaInstanceId;
            public string FileId;
            public string ParentMediaId;
            public string ParentMediaInstanceId;
            public string MediaId;
            public string MediaInstanceId;
            public string MediaXml;
            public string OfferXml;
            public string OfferId;
            public string OfferInstanceId;
            public string ProviderTermId;
            public string TitleId;
            public string UODBOfferId;
            public List<string> UsedMediaInstanceIds;
            public List<string> UsedUODBOfferIds;
            public List<string> UsedContentIds;

            public ValueBag(ContentBase content)
            {
                RemoveWildcardWhenDone = false;
                ChildWildcard = String.Empty;
                Content = content;
                ContentId = String.Empty;
                ContentMediaId = String.Empty;
                ContentMediaInstanceId = String.Empty;
                FileId = String.Empty;
                MediaId = String.Empty;
                MediaInstanceId = String.Empty;
                MediaXml = String.Empty;
                OfferId = String.Empty;
                OfferInstanceId = String.Empty;
                OfferXml = String.Empty;
                ParentMediaId = String.Empty;
                ParentMediaInstanceId = String.Empty;
                ProviderTermId = String.Empty;
                TitleId = String.Empty;
                UODBOfferId = String.Empty;
                UsedUODBOfferIds = new List<string>();
                UsedMediaInstanceIds = new List<string>();
                UsedContentIds = new List<string>();
                ChildContentWildcards = new List<string>();
            }

            public ValueBag(ValueBag valueBag)
            {
                RemoveWildcardWhenDone = valueBag.RemoveWildcardWhenDone;
                ChildWildcard = String.Empty;
                ChildContentWildcards = new List<string>();
                Content = valueBag.Content;
                ContentId = valueBag.ContentId;
                ContentMediaId = valueBag.ContentMediaId;
                ContentMediaInstanceId = valueBag.ContentMediaInstanceId;
                FileId = valueBag.FileId;
                MediaId = valueBag.MediaId;
                MediaInstanceId = valueBag.MediaInstanceId;
                MediaXml = String.Empty;
                OfferId = valueBag.OfferId;
                OfferInstanceId = valueBag.OfferInstanceId;
                OfferXml = String.Empty;
                ProviderTermId = valueBag.ProviderTermId;
                ParentMediaId = valueBag.ParentMediaId;
                ParentMediaInstanceId = valueBag.ParentMediaInstanceId;
                TitleId = valueBag.TitleId;
                UODBOfferId = valueBag.UODBOfferId;
                UsedMediaInstanceIds = new List<string>();
                UsedUODBOfferIds = new List<string>();
                UsedContentIds = new List<string>();

                foreach (string offerId in valueBag.UsedUODBOfferIds)
                {
                    UsedUODBOfferIds.Add(offerId);
                }

                foreach (string mediaInstanceId in valueBag.UsedMediaInstanceIds)
                {
                    UsedMediaInstanceIds.Add(mediaInstanceId);
                }

                foreach (string contentId in valueBag.UsedContentIds)
                {
                    UsedContentIds.Add(contentId);
                }
            }
        }


        #endregion 
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\BulkItemProperties.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public partial class BulkItemProperties : Form
    {
        public delegate void BulkPropertiesSetDelegate(ContentBase bulkProperties, int bulkItemCount, int initialCountValue);
        public event BulkPropertiesSetDelegate BulkPropertiesSet;
        
        private int bulkItemCount = 0;
        public int BulkItemCount
        {
            get { return bulkItemCount; }
            set { bulkItemCount = value; }
        }

        private ContentBase bulkContentProperties = new ContentBase();
        public ContentBase BulkContentProperties
        {
            get { return bulkContentProperties; }
        }

        public BulkItemProperties()
        {
            InitializeComponent();

            bulkContentProperties.Title = "Test Content Title %BULK%";
            bulkContentProperties.Description = "Test Content Description %BULK%.";
            propertyGrid1.SelectedObject = bulkContentProperties;
        }

        private void BulkItemProperties_Load(object sender, EventArgs e)
        {

        }
        
        private void button2_Click(object sender, EventArgs e)
        {
            int initialCountValue = 0;
            if(!Int32.TryParse(textBox1.Text, out initialCountValue))
            {
                MessageBox.Show("The value specified for the User Defined Initial Count is not a valid Int32 value.");
                return;
            }
            

            if (null != BulkPropertiesSet)
            {
                BulkPropertiesSet.Invoke(bulkContentProperties, bulkItemCount, initialCountValue);
            }

            this.Close();
            this.Dispose();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\BulkItemProperties.Designer.cs ===
﻿namespace Marketplace.Test.TestDataCreator
{
    partial class BulkItemProperties
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.propertyGrid1 = new System.Windows.Forms.PropertyGrid();
            this.button2 = new System.Windows.Forms.Button();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // propertyGrid1
            // 
            this.propertyGrid1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.propertyGrid1.Location = new System.Drawing.Point(13, 13);
            this.propertyGrid1.Name = "propertyGrid1";
            this.propertyGrid1.Size = new System.Drawing.Size(641, 306);
            this.propertyGrid1.TabIndex = 0;
            // 
            // button2
            // 
            this.button2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.button2.Location = new System.Drawing.Point(13, 332);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(641, 23);
            this.button2.TabIndex = 2;
            this.button2.Text = "OK";
            this.button2.UseVisualStyleBackColor = true;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // label1
            // 
            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(12, 364);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(400, 13);
            this.label1.TabIndex = 3;
            this.label1.Text = "See the usage and help documentation for information on available string wildcard" +
                "s.";
            // 
            // label2
            // 
            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(12, 377);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(395, 13);
            this.label2.TabIndex = 4;
            this.label2.Text = "The Title and Description properties contain an example for the %BULK% wildcard.";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(471, 364);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(130, 13);
            this.label3.TabIndex = 5;
            this.label3.Text = "User Defined Initial Count:";
            // 
            // textBox1
            // 
            this.textBox1.Location = new System.Drawing.Point(604, 361);
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(50, 20);
            this.textBox1.TabIndex = 6;
            this.textBox1.Text = "1";
            // 
            // BulkItemProperties
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(666, 398);
            this.Controls.Add(this.textBox1);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.button2);
            this.Controls.Add(this.propertyGrid1);
            this.Name = "BulkItemProperties";
            this.Text = "Bulk Item Properties";
            this.Load += new System.EventHandler(this.BulkItemProperties_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.PropertyGrid propertyGrid1;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox textBox1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\DataMultiplier.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator.Common
{
    public partial class DataMultiplier : Form
    {
        public delegate void MultiplierSetDelegate(int multiplierValue, int countValue);
        public event MultiplierSetDelegate MultiplierSet;

        public DataMultiplier()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            int multiplier = 0;
            int countValue = 0;
            if (!Int32.TryParse(textBox1.Text, out multiplier) ||
                !Int32.TryParse(textBox2.Text, out countValue))
            {
                MessageBox.Show(
                    "Value specified is not a number!",
                    "Invalid Value Specified",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
            else if (multiplier <= 0 ||
                    countValue < 0)
            {
                MessageBox.Show(
                    "Value specified must be greater than 0!",
                    "Invalid Value Specified",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
            else if (null != MultiplierSet)
            {
                MultiplierSet.Invoke(multiplier, countValue);
            }

            this.Close();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\DataMultiplier.Designer.cs ===
﻿namespace Marketplace.Test.TestDataCreator.Common
{
    partial class DataMultiplier
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.button1 = new System.Windows.Forms.Button();
            this.label1 = new System.Windows.Forms.Label();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(16, 109);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(291, 23);
            this.button1.TabIndex = 0;
            this.button1.Text = "OK";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(13, 13);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(223, 13);
            this.label1.TabIndex = 1;
            this.label1.Text = "Enter the total number of items you would like:";
            // 
            // textBox1
            // 
            this.textBox1.Location = new System.Drawing.Point(16, 29);
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(291, 20);
            this.textBox1.TabIndex = 2;
            this.textBox1.Text = "5";
            // 
            // textBox2
            // 
            this.textBox2.Location = new System.Drawing.Point(16, 77);
            this.textBox2.Name = "textBox2";
            this.textBox2.Size = new System.Drawing.Size(291, 20);
            this.textBox2.TabIndex = 4;
            this.textBox2.Text = "0";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(13, 61);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(297, 13);
            this.label2.TabIndex = 3;
            this.label2.Text = "Specify the value to start at if count wildcards are being used:";
            // 
            // DataMultiplier
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(319, 144);
            this.Controls.Add(this.textBox2);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.textBox1);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.button1);
            this.Name = "DataMultiplier";
            this.Text = "Test Data Multiplier";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox textBox1;
        private System.Windows.Forms.TextBox textBox2;
        private System.Windows.Forms.Label label2;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator.Common
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            WizardStateMachine stateMachine = new WizardStateMachine();
            WizardStateForm wizardForm = stateMachine.Start();

            Category.AvailableCategories.Add("Action & Adventure", 3002);
            Category.AvailableCategories.Add("Family", 3005);
            Category.AvailableCategories.Add("Shooter", 3011);
            Category.AvailableCategories.Add("Strategy & Simulation", 3012);
            Category.AvailableCategories.Add("Other", 3001);
            Category.AvailableCategories.Add("Xbox LIVE Games", 3027);

            PublisherBit.AvailablePublisherBits.Add(String.Empty, 0);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 1", 12001);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 2", 12002);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 3", 12003);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 4", 12004);
            PublisherBit.AvailablePublisherBits.Add("Game Publisher Bit 5", 12005);

            Rating.AvailableRatings.Add("Early Childhood", 0);
            Rating.AvailableRatings.Add("Everyone", 10);
            Rating.AvailableRatings.Add("10+", 20);
            Rating.AvailableRatings.Add("RP E10+", 25);
            Rating.AvailableRatings.Add("Teen", 30);
            Rating.AvailableRatings.Add("Mature", 40);

            RatingDescriptor.AvailableRatingDescriptors.Add("Alcohol Reference", 0);
            RatingDescriptor.AvailableRatingDescriptors.Add("Animated Blood", 1);
            RatingDescriptor.AvailableRatingDescriptors.Add("Cartoon Violence", 4);
            RatingDescriptor.AvailableRatingDescriptors.Add("Informational", 10);
            RatingDescriptor.AvailableRatingDescriptors.Add("Real Gambling", 18);

            Application.Run(wizardForm);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\WizardBasicPropertiesState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardBasicPropertiesState : WizardState
    {
        public WizardBasicPropertiesState()
        {
            WizardStateDescription = "Add or modify the basic settings and parameters for the type of content you have chosen:";
        }

        public override void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            base.DrawStateControls(wizard, hasPrevious, hasNext);

            PropertyGrid propertyGrid = new PropertyGrid();
            propertyGrid.Location = new System.Drawing.Point(24, 115);
            propertyGrid.Name = "propertyGrid";
            propertyGrid.Size = new System.Drawing.Size(438, 252);
            propertyGrid.TabIndex = 2;

            wizard.Controls.Add(propertyGrid);
            propertyGrid.SelectedObject = CurrentContent;
        }

        public override void PreviousButton_Click(object sender, EventArgs e)
        {
            if (null != ParentContent)
            {
                StateMachine.MoveNext(this, typeof(WizardRelatedContentSelection), ParentContent, ParentContent);
            }
            else
            {
                base.PreviousButton_Click(sender, e);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\WizardContentSelectionState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardContentSelectionState : WizardState
    {
        private ComboBox productTypeCombo = new ComboBox();

        public WizardContentSelectionState() 
        {
            WizardStateDescription = Environment.NewLine + 
             "          Welcome to the Marketplace Test Data Creation wizard!" + Environment.NewLine + Environment.NewLine +
             "          To begin the process with the wizard, please select the type of content you" + Environment.NewLine + "          would like to create." + Environment.NewLine + Environment.NewLine +
             "          You may also choose to use the direct data creation tool by selecting the " + Environment.NewLine + "          advanced option below:";
        }

        public override void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            base.DrawStateControls(wizard, hasPrevious, hasNext);

            productTypeCombo = new System.Windows.Forms.ComboBox();
            productTypeCombo.FormattingEnabled = true;
            productTypeCombo.Location = new System.Drawing.Point(148, 230);
            productTypeCombo.Name = "productTypeCombo";
            productTypeCombo.Size = new System.Drawing.Size(179, 21);
            productTypeCombo.TabIndex = 3;
            productTypeCombo.SelectedValueChanged += new EventHandler(productTypeCombo_SelectedValueChanged);

            foreach (string contentType in Enum.GetNames(typeof(ProductType)))
            {
                productTypeCombo.Items.Add(contentType);
            }
            
            productTypeCombo.SelectedText = CurrentContent.ProductType.ToString();
            wizard.Controls.Add(productTypeCombo);

            Button advancedButton = new Button();
            advancedButton.Location = new System.Drawing.Point(165, 280);
            advancedButton.Name = "advancedButton";
            advancedButton.Size = new System.Drawing.Size(150, 50);
            advancedButton.TabIndex = 5;
            advancedButton.Text = "Advanced";
            advancedButton.UseVisualStyleBackColor = true;
            advancedButton.Click += new System.EventHandler(AdvancedButton_Click);
            wizard.Controls.Add(advancedButton);
        }

        private void AdvancedButton_Click(object sender, EventArgs e)
        {
            TestDataCreator advancedTool = new TestDataCreator();
            advancedTool.Show();
            advancedTool.BringToFront();
            StateMachine.Wizard.Hide();
        }

        void productTypeCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            CurrentContent = new ContentBase();
            CurrentContent.ProductType = (ProductType)Enum.Parse(typeof(ProductType), productTypeCombo.Text);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\WizardRelatedContentSelectionState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardRelatedContentSelection : WizardState
    {
        RadioButton moreContentRadio = null;
        RadioButton finishedRadio = null;
        ComboBox additionalContentCombo = null;
        TreeView contentReviewTree = null;

        public WizardRelatedContentSelection()
        {
            WizardStateDescription = "Please review your current test content configuration.  You may edit your configuration" + Environment.NewLine +
                "by right clicking a node in the tree below:";       
        }

        private void RemoveTreeNode(object sender, EventArgs e)
        {
            if (null != contentReviewTree &&
                null != contentReviewTree.SelectedNode &&
                contentReviewTree.SelectedNode.Level > 0)
            {
                ParentContent.RelatedContent.RemoveAt(contentReviewTree.SelectedNode.Index);
                contentReviewTree.Nodes.Remove(contentReviewTree.SelectedNode);
            }
        }

        private void EditTreeNode(object sender, EventArgs e)
        {
            if (null != contentReviewTree &&
                null != contentReviewTree.SelectedNode)
            {
                ContentBase desiredCurrent = null;
                ContentBase desiredParent = null;

                if (contentReviewTree.SelectedNode.Level == 0)
                {
                    desiredCurrent = ParentContent;
                    desiredParent = ParentContent;
                }
                else
                {
                    desiredParent = ParentContent; 
                    desiredCurrent = desiredParent.RelatedContent[contentReviewTree.SelectedNode.Index];
                }

                StateMachine.MoveNext(this, typeof(WizardBasicPropertiesState), desiredCurrent, desiredParent);
            }
        }

        public override void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            base.DrawStateControls(wizard, hasPrevious, hasNext);

            ContextMenu contentMenu = new ContextMenu();
            contentMenu.MenuItems.Add(
                new MenuItem("Edit", new EventHandler(EditTreeNode)));
            contentMenu.MenuItems.Add(
                new MenuItem("Remove", new EventHandler(RemoveTreeNode)));

            contentReviewTree = new TreeView();
            contentReviewTree.Location = new System.Drawing.Point(120, 135);
            contentReviewTree.Name = "contentReviewTree";
            contentReviewTree.Size = new System.Drawing.Size(255, 85);
            contentReviewTree.TabIndex = 8;
            contentReviewTree.ContextMenu = contentMenu;
            contentReviewTree.MouseDown += new MouseEventHandler(contentReviewTree_MouseDown);
            wizard.Controls.Add(contentReviewTree);

            if (null != ParentContent)
            {
                contentReviewTree.Nodes.Add(ParentContent.ProductType.ToString());
                foreach (ContentBase childContent in ParentContent.RelatedContent)
                {
                    contentReviewTree.Nodes[0].Nodes.Add(childContent.ProductType.ToString());
                }
            }
            else if (null != CurrentContent)
            {
                contentReviewTree.Nodes.Add(CurrentContent.ProductType.ToString());
            }

            contentReviewTree.ExpandAll();


            Label secondInformationLabel = new Label();
            secondInformationLabel.Location = new System.Drawing.Point(30, 230);
            secondInformationLabel.AutoSize = true;
            secondInformationLabel.Name = "secondInformationLabel";
            secondInformationLabel.Text = "You have the option of relating additional content to the content that was just" + Environment.NewLine +
                "configured.  For example, you may have created an Arcade game and can associate a" + Environment.NewLine +
                "Demo, Downloadable Content, or different types of content with it.";
            wizard.Controls.Add(secondInformationLabel);

            moreContentRadio = new RadioButton();
            moreContentRadio.AutoSize = true;
            moreContentRadio.Checked = true;
            moreContentRadio.Location = new System.Drawing.Point(85, 280);
            moreContentRadio.Name = "moreContentRadio";
            moreContentRadio.Size = new System.Drawing.Size(85, 17);
            moreContentRadio.TabIndex = 6;
            moreContentRadio.TabStop = true;
            moreContentRadio.Text = "Yes, I would like to add related data such as Downloadable Content," + Environment.NewLine +
                "Themes, Avatar Items, etc.";
            moreContentRadio.UseVisualStyleBackColor = true;
            wizard.Controls.Add(moreContentRadio);

            additionalContentCombo = new ComboBox();
            additionalContentCombo.FormattingEnabled = true;
            additionalContentCombo.Location = new System.Drawing.Point(151, 310);
            additionalContentCombo.Name = "additionalContentCombo";
            additionalContentCombo.Size = new System.Drawing.Size(179, 21);
            additionalContentCombo.TabIndex = 3;

            foreach (string contentType in Enum.GetNames(typeof(ProductType)))
            {
                additionalContentCombo.Items.Add(contentType);
            }

            additionalContentCombo.SelectedIndex = 0;
            wizard.Controls.Add(additionalContentCombo);

            RadioButton finishedRadio = new RadioButton();
            finishedRadio.AutoSize = true;
            finishedRadio.Location = new System.Drawing.Point(85, 340);
            finishedRadio.Name = "radioButton2";
            finishedRadio.Size = new System.Drawing.Size(85, 17);
            finishedRadio.TabIndex = 7;
            finishedRadio.Text = "No, I am finished creating test content at this time.";
            finishedRadio.UseVisualStyleBackColor = true;
            wizard.Controls.Add(finishedRadio);            
        }

        void contentReviewTree_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                contentReviewTree.SelectedNode = contentReviewTree.GetNodeAt(e.X, e.Y);
            }
        }

        public override void NextButton_Click(object sender, EventArgs e)
        {
            if (moreContentRadio.Checked)
            {
                ContentBase newContent = new ContentBase();
                newContent.ProductType = (ProductType)Enum.Parse(typeof(ProductType), additionalContentCombo.Text);
                
                if (null == ParentContent)
                {
                    ParentContent = CurrentContent;

                    StateMachine.MoveNext(this, typeof(WizardBasicPropertiesState), newContent, ParentContent);
                    ParentContent.RelatedContent.Add(newContent);
                    CurrentContent = newContent;
                }
                else
                {
                    ParentContent.RelatedContent.Add(newContent);

                    StateMachine.MoveNext(this, typeof(WizardBasicPropertiesState), newContent, ParentContent);
                }
            }
            else
            {
                base.NextButton_Click(sender, e);
            }            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\WizardGenerationState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardGenerationState : WizardState
    {
        private StatusUpdatedDelegate statusUpdatedCallback;
        private Label generatingLabel = null;
        private ProgressBar progressBar = null;
        private WizardStateForm wizardForm = null;
        private TextBox saveLocationText = null;
        private IOutputModule outputModule = null;
        private delegate void UpdateStatusDelegate(string currentStatus, string error, int total, int step);

        public WizardGenerationState()
        {
            WizardStateDescription = "";
            statusUpdatedCallback = new StatusUpdatedDelegate(StatusUpdated);
        }

        void StatusUpdated(string currentStatus, string error, int total, int step)
        {
            UpdateStatusDelegate updateStatus = new UpdateStatusDelegate(UpdateStatus);
            wizardForm.Invoke(updateStatus, new object[] { currentStatus, error, total, step });
        }

        private void UpdateStatus(string currentStatus, string error, int total, int step)
        {
            generatingLabel.Text = currentStatus;

            if (progressBar.Maximum < total)
            {
                progressBar.Maximum = total;
                progressBar.Step = 1;
                progressBar.PerformStep();
            }
            else
            {
                progressBar.PerformStep();
            }

            if (null != error)
            {
                MessageBox.Show(
                    currentStatus + Environment.NewLine + error,
                    "An Error Occurred!",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }


        public override void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            base.DrawStateControls(wizard, hasPrevious, hasNext);
            wizardForm = wizard;

            generatingLabel = new Label();
            generatingLabel.Location = new System.Drawing.Point(0, 150);
            generatingLabel.Size = new System.Drawing.Size(wizard.Width, 20);
            generatingLabel.Text = "Ready to begin generating content based on the configuration specified...";
            generatingLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            wizard.Controls.Add(generatingLabel);

            progressBar = new ProgressBar();
            progressBar.Location = new System.Drawing.Point(100, 180);
            progressBar.Size = new System.Drawing.Size(290, 20);
            progressBar.Maximum = 0;
            wizard.Controls.Add(progressBar);

            Label saveLocationLabel = new Label();
            saveLocationLabel.Location = new System.Drawing.Point(100, 220);
            saveLocationLabel.AutoSize = true;
            saveLocationLabel.Text = "Generated Content Save Location:";
            wizard.Controls.Add(saveLocationLabel);

            saveLocationText = new TextBox();
            saveLocationText.Location = new System.Drawing.Point(100, 240);
            saveLocationText.Size = new System.Drawing.Size(290, 20);
            wizard.Controls.Add(saveLocationText);


            Button generateButton = new Button();
            generateButton.Location = new System.Drawing.Point(165, 280);
            generateButton.Name = "generateButton";
            generateButton.Size = new System.Drawing.Size(150, 50);
            generateButton.TabIndex = 5;
            generateButton.Text = "Generate";
            generateButton.UseVisualStyleBackColor = true;
            generateButton.Click += new EventHandler(generateButton_Click);
            wizard.Controls.Add(generateButton);
        }

        void generateButton_Click(object sender, EventArgs e)
        {
            outputModule.SaveLocation = saveLocationText.Text;
            
            Thread generationThread = new Thread(new ParameterizedThreadStart(GenerationWorker));
            generationThread.Start(outputModule);        
        }

        public override void StateSpecificExecute()
        {
            Configuration config = ConfigurationManager.OpenExeConfiguration(Application.ExecutablePath);
            System.Reflection.Assembly assembly = System.Reflection.Assembly.LoadFrom(config.AppSettings.Settings["DataInterfaceModule"].Value);
            string currentInterfaceModule = config.AppSettings.Settings["DataInterfaceModuleNamespace"].Value + "." +
                config.AppSettings.Settings["DataInterfaceModuleClassName"].Value;

            outputModule = (IOutputModule)assembly.CreateInstance(currentInterfaceModule);
            outputModule.StatusUpdated += statusUpdatedCallback;

            saveLocationText.Text = outputModule.SaveLocation;
        }

        private void GenerationWorker(object state)
        {
            IOutputModule outputModule = (IOutputModule)state;            
            List<ContentBase> content = new List<ContentBase>();

            if (null != ParentContent)
            {
                content.Add(ParentContent);
            }
            else
            {
                content.Add(CurrentContent);
            }

            outputModule.GenerateTestContent(content);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Marketplace.Test.TestDataCreator.DBSchemaTool\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Marketplace.Test.TestDataCreator.DBSchemaTool")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("Marketplace.Test.TestDataCreator.DBSchemaTool")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("b13aeda6-23ac-437d-8adf-0afa8652ca1d")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\WizardState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public class WizardState
    {
        #region Fields
        
        private Button previousButton = null;
        private Button nextButton = null;
        private static ContentBase parentContent = null;
        private static ContentBase currentContent = null;
        private static WizardStateMachine stateMachine = null;
        private string wizardStateDescription = String.Empty;
        
        #endregion

        #region Properties

        public ContentBase ParentContent
        {
            get { return parentContent; }
            set { parentContent = value; }
        }

        public ContentBase CurrentContent
        {
            get { return currentContent; }
            set { currentContent = value; }
        }

        public WizardStateMachine StateMachine
        {
            get { return stateMachine; }
            set { stateMachine = value; }
        }

        public string WizardStateDescription
        {
            get { return wizardStateDescription; }
            set { wizardStateDescription = value; }
        }

        public Button PreviousButton
        {
            get { return previousButton; }
        }

        public Button NextButton
        {
            get { return nextButton; }
        }

        #endregion

        #region Constructor and Initialization

        public WizardState() { }            

        public virtual void Initialize(ContentBase current, ContentBase parent)
        {
            parentContent = parent;
            currentContent = current;
        }

        #endregion

        public virtual void StateSpecificExecute() { }

        public virtual void DrawStateControls(WizardStateForm wizard, bool hasPrevious, bool hasNext)
        {
            wizard.Controls.Clear();

            DrawBanner(wizard);
            DrawDescription(wizard);

            if (hasPrevious)
            {
                DrawPrevious(wizard);
            }

            if (hasNext)
            {
                DrawNext(wizard);
            }
            else
            {
                DrawFinish(wizard);
            }
        }

        private void DrawBanner(WizardStateForm wizard)
        {
            PictureBox bannerImage = new PictureBox();
            ((System.ComponentModel.ISupportInitialize)(bannerImage)).BeginInit();
            wizard.SuspendLayout();
            bannerImage.Image = global::Marketplace.Test.TestDataCreator.Common.Properties.Resources.marketplaceCropped;
            bannerImage.Location = new System.Drawing.Point(-63, -1);
            bannerImage.Name = "pictureBox1";
            bannerImage.Size = new System.Drawing.Size(553, 87);
            bannerImage.TabIndex = 1;
            bannerImage.TabStop = false;
            wizard.Controls.Add(bannerImage);
            ((System.ComponentModel.ISupportInitialize)(bannerImage)).EndInit();
            wizard.ResumeLayout(false);
            wizard.PerformLayout();
        }

        private void DrawPrevious(WizardStateForm wizard)
        {
            previousButton = new Button();
            previousButton.Location = new System.Drawing.Point(306, 374);
            previousButton.Name = "button2";
            previousButton.Size = new System.Drawing.Size(75, 23);
            previousButton.TabIndex = 5;
            previousButton.Text = "Previous";
            previousButton.UseVisualStyleBackColor = true;
            previousButton.Click += new System.EventHandler(PreviousButton_Click);
            wizard.Controls.Add(previousButton);
        }

        private void DrawNext(WizardStateForm wizard)
        {
            DrawForward(wizard, "Next");
        }

        private void DrawFinish(WizardStateForm wizard)
        {
            DrawForward(wizard, "Finish");
        }

        private void DrawForward(WizardStateForm wizard, string buttonText)
        {
            nextButton = new Button();
            nextButton.Location = new System.Drawing.Point(387, 374);
            nextButton.Name = "nextButton";
            nextButton.Size = new System.Drawing.Size(75, 23);
            nextButton.TabIndex = 2;
            nextButton.Text = buttonText;
            nextButton.UseVisualStyleBackColor = true;
            nextButton.Click += new System.EventHandler(NextButton_Click);
            wizard.Controls.Add(nextButton);
        }
                
        private void DrawDescription(WizardStateForm wizard)
        {
            Label descriptionLabel = new Label();
            descriptionLabel.AutoSize = true;
            //descriptionLabel.Location = new System.Drawing.Point(50, 150);
            descriptionLabel.Location = new System.Drawing.Point(30, 99);
            descriptionLabel.Name = "descriptionLabel";
            descriptionLabel.Size = new System.Drawing.Size(35, 13);
            descriptionLabel.TabIndex = 0;
            descriptionLabel.Text = wizardStateDescription;
            wizard.Controls.Add(descriptionLabel);
        }


        public virtual void NextButton_Click(object sender, EventArgs e)
        {
            stateMachine.MoveNext(this);
        }

        public virtual void PreviousButton_Click(object sender, EventArgs e)
        {
            stateMachine.MovePrevious(this);
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Test Data Creator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("Test Data Creator")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("29843cde-7634-4d32-ae3e-a8fc0a0f1865")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\WizardStateForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator
{
    public partial class WizardStateForm : Form
    {
        public WizardStateForm()
        {
            InitializeComponent();
        }

        private void CreationWizard_Load(object sender, EventArgs e)
        {
         
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\WizardStateForm.Designer.cs ===
﻿namespace Marketplace.Test.TestDataCreator
{
    public partial class WizardStateForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // WizardStateForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(488, 409);
            this.Name = "WizardStateForm";
            this.Text = "Test Data Creator Wizard";
            this.Load += new System.EventHandler(this.CreationWizard_Load);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.ComboBox comboBox1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\WizardStateMachine.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Marketplace.Test.TestDataCreator.Common
{
    public class WizardStateMachine
    {
        private static WizardStateForm wizard = new WizardStateForm();
        private static WizardState currentState = null;
        private static Type startState = null;
        private static Dictionary<Type, Type> forwardTransitions = new Dictionary<Type, Type>();
        private static Dictionary<Type, Type> backTransitions = new Dictionary<Type, Type>();

        public WizardStateForm Wizard
        {
            get { return wizard; }
        }

        public WizardState CurrentState
        {
            get { return currentState; }
            set { currentState = value; } 
        }

        public WizardStateMachine() { }

        public WizardStateForm Start()
        {
            startState = typeof(WizardContentSelectionState);

            forwardTransitions.Add(typeof(WizardContentSelectionState), typeof(WizardBasicPropertiesState));
            forwardTransitions.Add(typeof(WizardBasicPropertiesState), typeof(WizardRelatedContentSelection));
            forwardTransitions.Add(typeof(WizardRelatedContentSelection), typeof(WizardGenerationState));
            forwardTransitions.Add(typeof(WizardGenerationState), null);

            backTransitions.Add(typeof(WizardGenerationState), typeof(WizardRelatedContentSelection));
            backTransitions.Add(typeof(WizardRelatedContentSelection), typeof(WizardBasicPropertiesState));
            backTransitions.Add(typeof(WizardBasicPropertiesState), typeof(WizardContentSelectionState));
            backTransitions.Add(typeof(WizardContentSelectionState), null);

            WizardState wizardStart = (WizardState)Activator.CreateInstance(startState);
            wizardStart.Initialize(new ContentBase(), null);
            wizardStart.DrawStateControls(
                wizard, 
                false, 
                null != forwardTransitions[startState]);
            wizardStart.StateSpecificExecute();
            wizardStart.StateMachine = this;

            return wizard;            
        }

        public void End()
        {            
            startState = null;
            forwardTransitions.Clear();
            backTransitions.Clear();
        }

        public void MoveNext(WizardState currentState)
        {
            if (null == forwardTransitions[currentState.GetType()])
            {
                Environment.Exit(0);
            }

            WizardState nextState = (WizardState)Activator.CreateInstance(
                forwardTransitions[currentState.GetType()]);
            nextState.Initialize(currentState.CurrentContent, currentState.ParentContent);

            nextState.DrawStateControls(
                wizard, 
                null != backTransitions[nextState.GetType()], 
                null != forwardTransitions[nextState.GetType()]);

            nextState.StateSpecificExecute();
        }

        public void MoveNext(WizardState currentState, Type desiredState, ContentBase desiredCurrentContent, ContentBase desiredParentContent)
        {
            WizardState nextState = (WizardState)Activator.CreateInstance(desiredState);
            nextState.Initialize(desiredCurrentContent, desiredParentContent);

            nextState.DrawStateControls(
                wizard,
                null != backTransitions[nextState.GetType()],
                null != forwardTransitions[nextState.GetType()]);
        }


        public void MovePrevious(WizardState currentState)
        {
            WizardState nextState = (WizardState)Activator.CreateInstance(
                backTransitions[currentState.GetType()]);
            nextState.Initialize(currentState.CurrentContent, currentState.ParentContent);

            nextState.DrawStateControls(
                wizard,
                null != backTransitions[nextState.GetType()],
                null != forwardTransitions[nextState.GetType()]);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Test Data Creator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("Test Data Creator")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("29843cde-7634-4d32-ae3e-a8fc0a0f1865")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Marketplace.Test.TestDataCreator.Common.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Marketplace.Test.TestDataCreator.Common.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Marketplace.Test.TestDataCreator.Common.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Bitmap marketplaceCropped {
            get {
                object obj = ResourceManager.GetObject("marketplaceCropped", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap marketplaceCropped1 {
            get {
                object obj = ResourceManager.GetObject("marketplaceCropped1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Marketplace.Test.TestDataCreator.Common.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\TestDataCreator.Designer.cs ===
﻿namespace Marketplace.Test.TestDataCreator
{
    partial class TestDataCreator
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.numericUpDown1 = new System.Windows.Forms.NumericUpDown();
            this.dataTree = new System.Windows.Forms.TreeView();
            this.contextMenuStrip1 = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.addToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.removeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.expandToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.collapseToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.button2 = new System.Windows.Forms.Button();
            this.button1 = new System.Windows.Forms.Button();
            this.mainMenu = new System.Windows.Forms.MenuStrip();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.propertyGrid1 = new System.Windows.Forms.PropertyGrid();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.loadConfigurationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.saveConfigurationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.actionToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addItemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.removeItemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.clearAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.multiplySelectedItemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.generateTestDataToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            this.groupBox1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.numericUpDown1)).BeginInit();
            this.contextMenuStrip1.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.menuStrip1.SuspendLayout();
            this.statusStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // splitContainer1
            // 
            this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer1.Location = new System.Drawing.Point(5, 25);
            this.splitContainer1.Name = "splitContainer1";
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.Controls.Add(this.groupBox1);
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.groupBox2);
            this.splitContainer1.Size = new System.Drawing.Size(700, 458);
            this.splitContainer1.SplitterDistance = 261;
            this.splitContainer1.TabIndex = 3;
            // 
            // groupBox1
            // 
            this.groupBox1.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Center;
            this.groupBox1.Controls.Add(this.numericUpDown1);
            this.groupBox1.Controls.Add(this.dataTree);
            this.groupBox1.Controls.Add(this.button2);
            this.groupBox1.Controls.Add(this.button1);
            this.groupBox1.Controls.Add(this.mainMenu);
            this.groupBox1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox1.Location = new System.Drawing.Point(0, 0);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(261, 458);
            this.groupBox1.TabIndex = 2;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Test Content Setup";
            // 
            // numericUpDown1
            // 
            this.numericUpDown1.Location = new System.Drawing.Point(107, 20);
            this.numericUpDown1.Minimum = new decimal(new int[] {
            1,
            0,
            0,
            0});
            this.numericUpDown1.Name = "numericUpDown1";
            this.numericUpDown1.Size = new System.Drawing.Size(53, 20);
            this.numericUpDown1.TabIndex = 4;
            this.numericUpDown1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.numericUpDown1.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            // 
            // dataTree
            // 
            this.dataTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.dataTree.ContextMenuStrip = this.contextMenuStrip1;
            this.dataTree.HideSelection = false;
            this.dataTree.Location = new System.Drawing.Point(7, 46);
            this.dataTree.Name = "dataTree";
            this.dataTree.Size = new System.Drawing.Size(248, 391);
            this.dataTree.TabIndex = 3;
            this.dataTree.AfterSelect += new System.Windows.Forms.TreeViewEventHandler(this.treeView1_AfterSelect_1);
            // 
            // contextMenuStrip1
            // 
            this.contextMenuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.addToolStripMenuItem,
            this.removeToolStripMenuItem,
            this.expandToolStripMenuItem,
            this.collapseToolStripMenuItem});
            this.contextMenuStrip1.Name = "contextMenuStrip1";
            this.contextMenuStrip1.Size = new System.Drawing.Size(120, 92);
            // 
            // addToolStripMenuItem
            // 
            this.addToolStripMenuItem.Name = "addToolStripMenuItem";
            this.addToolStripMenuItem.Size = new System.Drawing.Size(119, 22);
            this.addToolStripMenuItem.Text = "Add";
            this.addToolStripMenuItem.Click += new System.EventHandler(this.addToolStripMenuItem_Click);
            // 
            // removeToolStripMenuItem
            // 
            this.removeToolStripMenuItem.Name = "removeToolStripMenuItem";
            this.removeToolStripMenuItem.Size = new System.Drawing.Size(119, 22);
            this.removeToolStripMenuItem.Text = "Remove";
            this.removeToolStripMenuItem.Click += new System.EventHandler(this.removeToolStripMenuItem_Click);
            // 
            // expandToolStripMenuItem
            // 
            this.expandToolStripMenuItem.Name = "expandToolStripMenuItem";
            this.expandToolStripMenuItem.Size = new System.Drawing.Size(119, 22);
            this.expandToolStripMenuItem.Text = "Expand";
            this.expandToolStripMenuItem.Click += new System.EventHandler(this.expandToolStripMenuItem_Click);
            // 
            // collapseToolStripMenuItem
            // 
            this.collapseToolStripMenuItem.Name = "collapseToolStripMenuItem";
            this.collapseToolStripMenuItem.Size = new System.Drawing.Size(119, 22);
            this.collapseToolStripMenuItem.Text = "Collapse";
            this.collapseToolStripMenuItem.Click += new System.EventHandler(this.collapseToolStripMenuItem_Click);
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(166, 17);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(89, 23);
            this.button2.TabIndex = 1;
            this.button2.Text = "Remove Item";
            this.button2.UseVisualStyleBackColor = true;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(7, 17);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(94, 23);
            this.button1.TabIndex = 0;
            this.button1.Text = "Add New Item";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // mainMenu
            // 
            this.mainMenu.Location = new System.Drawing.Point(3, 16);
            this.mainMenu.Name = "mainMenu";
            this.mainMenu.Size = new System.Drawing.Size(255, 24);
            this.mainMenu.TabIndex = 5;
            this.mainMenu.Text = "mainMenu";
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.propertyGrid1);
            this.groupBox2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox2.Location = new System.Drawing.Point(0, 0);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(435, 458);
            this.groupBox2.TabIndex = 3;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Test Content Details";
            // 
            // propertyGrid1
            // 
            this.propertyGrid1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.propertyGrid1.Location = new System.Drawing.Point(6, 19);
            this.propertyGrid1.Name = "propertyGrid1";
            this.propertyGrid1.Size = new System.Drawing.Size(426, 418);
            this.propertyGrid1.TabIndex = 0;
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.actionToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(711, 24);
            this.menuStrip1.TabIndex = 4;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.loadConfigurationToolStripMenuItem,
            this.saveConfigurationToolStripMenuItem,
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // loadConfigurationToolStripMenuItem
            // 
            this.loadConfigurationToolStripMenuItem.Name = "loadConfigurationToolStripMenuItem";
            this.loadConfigurationToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.loadConfigurationToolStripMenuItem.Size = new System.Drawing.Size(223, 22);
            this.loadConfigurationToolStripMenuItem.Text = "&Open Configuration";
            this.loadConfigurationToolStripMenuItem.Click += new System.EventHandler(this.loadConfigurationToolStripMenuItem_Click);
            // 
            // saveConfigurationToolStripMenuItem
            // 
            this.saveConfigurationToolStripMenuItem.Name = "saveConfigurationToolStripMenuItem";
            this.saveConfigurationToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S)));
            this.saveConfigurationToolStripMenuItem.Size = new System.Drawing.Size(223, 22);
            this.saveConfigurationToolStripMenuItem.Text = "&Save Configuration";
            this.saveConfigurationToolStripMenuItem.Click += new System.EventHandler(this.saveConfigurationToolStripMenuItem_Click);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(223, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // actionToolStripMenuItem
            // 
            this.actionToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.addItemToolStripMenuItem,
            this.removeItemToolStripMenuItem,
            this.clearAllToolStripMenuItem,
            this.multiplySelectedItemToolStripMenuItem,
            this.toolStripSeparator1,
            this.generateTestDataToolStripMenuItem});
            this.actionToolStripMenuItem.Name = "actionToolStripMenuItem";
            this.actionToolStripMenuItem.Size = new System.Drawing.Size(54, 20);
            this.actionToolStripMenuItem.Text = "&Action";
            // 
            // addItemToolStripMenuItem
            // 
            this.addItemToolStripMenuItem.Name = "addItemToolStripMenuItem";
            this.addItemToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.addItemToolStripMenuItem.Text = "&Add Item";
            this.addItemToolStripMenuItem.Click += new System.EventHandler(this.addItemToolStripMenuItem_Click);
            // 
            // removeItemToolStripMenuItem
            // 
            this.removeItemToolStripMenuItem.Name = "removeItemToolStripMenuItem";
            this.removeItemToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.removeItemToolStripMenuItem.Text = "&Remove Item";
            this.removeItemToolStripMenuItem.Click += new System.EventHandler(this.removeItemToolStripMenuItem_Click);
            // 
            // clearAllToolStripMenuItem
            // 
            this.clearAllToolStripMenuItem.Name = "clearAllToolStripMenuItem";
            this.clearAllToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.clearAllToolStripMenuItem.Text = "&Clear All";
            this.clearAllToolStripMenuItem.Click += new System.EventHandler(this.clearAllToolStripMenuItem_Click);
            // 
            // multiplySelectedItemToolStripMenuItem
            // 
            this.multiplySelectedItemToolStripMenuItem.Name = "multiplySelectedItemToolStripMenuItem";
            this.multiplySelectedItemToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.multiplySelectedItemToolStripMenuItem.Text = "&Multiply Selected Item";
            this.multiplySelectedItemToolStripMenuItem.Click += new System.EventHandler(this.multiplySelectedItemToolStripMenuItem_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(189, 6);
            // 
            // generateTestDataToolStripMenuItem
            // 
            this.generateTestDataToolStripMenuItem.Name = "generateTestDataToolStripMenuItem";
            this.generateTestDataToolStripMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F5;
            this.generateTestDataToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.generateTestDataToolStripMenuItem.Text = "&Generate Test Data";
            this.generateTestDataToolStripMenuItem.Click += new System.EventHandler(this.generateTestDataToolStripMenuItem_Click);
            // 
            // statusStrip1
            // 
            this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel1,
            this.toolStripProgressBar1});
            this.statusStrip1.Location = new System.Drawing.Point(0, 465);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(711, 22);
            this.statusStrip1.TabIndex = 5;
            this.statusStrip1.Text = "statusStrip1";
            // 
            // toolStripStatusLabel1
            // 
            this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
            this.toolStripStatusLabel1.Size = new System.Drawing.Size(544, 17);
            this.toolStripStatusLabel1.Spring = true;
            this.toolStripStatusLabel1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
            this.toolStripProgressBar1.Name = "toolStripProgressBar1";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(150, 16);
            // 
            // TestDataCreator
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(711, 487);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.splitContainer1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.mainMenu;
            this.Name = "TestDataCreator";
            this.Text = "Test Data Creator";
            this.Load += new System.EventHandler(this.TestDataCreator_Load);
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel2.ResumeLayout(false);
            this.splitContainer1.ResumeLayout(false);
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.numericUpDown1)).EndInit();
            this.contextMenuStrip1.ResumeLayout(false);
            this.groupBox2.ResumeLayout(false);
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.statusStrip1.ResumeLayout(false);
            this.statusStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.NumericUpDown numericUpDown1;
        private System.Windows.Forms.TreeView dataTree;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.PropertyGrid propertyGrid1;
        private System.Windows.Forms.MenuStrip mainMenu;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel1;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripMenuItem actionToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem addItemToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem removeItemToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem multiplySelectedItemToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem clearAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripMenuItem generateTestDataToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem loadConfigurationToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem saveConfigurationToolStripMenuItem;
        private System.Windows.Forms.ContextMenuStrip contextMenuStrip1;
        private System.Windows.Forms.ToolStripMenuItem addToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem removeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem expandToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem collapseToolStripMenuItem;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\AppLogReplay\ReplayMethodInfo.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;

namespace AppLogReplay
{
    public class ReplayMethodInfo
    {
        #region Fields

        private bool usingCache = true;
        private bool continueExecuting = false;
        private bool replayCommands;
        private bool useRollingCache;
        private int cacheDuration;
        private int purgatoryExpiration;
        private double methodRate;
        private double cacheHitTarget;
        private double maxMillisecondResponseTime;
        private string methodName;
        private List<string> urlsToExecute;
        private Queue<MethodTimePair> replayQueue;
        private Queue<MethodTimePair> usedUrlsExecutionTimes;
        private HashSet<string> usedUrlsToExecute;
        private Dictionary<string, bool> quickUsedUrls = new Dictionary<string, bool>();
        private SortedDictionary<DateTime, List<string>> expiringUrls = new SortedDictionary<DateTime, List<string>>();
        private SortedDictionary<DateTime, List<string>> purgatoryUrls = new SortedDictionary<DateTime, List<string>>();
        private Dictionary<string, DateTime> reverseLookupExpirationTimes = new Dictionary<string, DateTime>();
        private DateTime startTime;
        private DateTime currentStartTime;
        private TimeSpan delta;
        private CacheHitPercentageChangedDelegate cacheRatioChangedCallback;
        private PurgatoryExpirationChangedDelegate purgatoryExpirationChangedCallback;
        private Random random = new Random();

        private Queue<MethodPair> expirationQueue = new Queue<MethodPair>();
        private Queue<MethodPair> purgatoryQueue = new Queue<MethodPair>();
        private class MethodPair
        {
            public DateTime ExpirationTime;
            public string Command;

            public MethodPair(DateTime time, string command)
            {
                this.ExpirationTime = time;
                this.Command = command;
            }
        }

        #endregion

        #region Properties

        /// <summary>
        /// Specifies whether or not the cache is in use on the service.
        /// When set to false all queries will remain in the cache miss pool.
        /// </summary>
        public bool UsingCache
        {
            get { return usingCache; }
            set { usingCache = value; }
        }

        /// <summary>
        /// The first time the method was executed
        /// </summary>
        public DateTime MethodStartTime
        {
            get { return startTime; }
        }

        /// <summary>
        /// The queue of commands to use in replay
        /// </summary>
        public Queue<MethodTimePair> ReplayQueue
        {
            get { return replayQueue; }
        }

        /// <summary>
        /// Whether or not to replay the commands or to use TPS targets
        /// </summary>
        public bool ReplayCommends
        {
            get { return replayCommands; }
            set { replayCommands = value; }
        }

        /// <summary>
        /// The duration (in minutes) that a command stays cached
        /// </summary>
        public int CacheDuration
        {
            get { return cacheDuration; }
            set { cacheDuration = value; }
        }

        /// <summary>
        /// The last time an url was executed
        /// </summary>
        public Queue<MethodTimePair> UsedUrlsExecutionTimes
        {
            get { return usedUrlsExecutionTimes; }
        }

        /// <summary>
        /// The name of the method
        /// </summary>
        public string Name
        {
            get { return methodName; }
            set { methodName = value; }
        }

        /// <summary>
        /// The rate the method should be called at (in seconds)
        /// </summary>
        public double Rate
        {
            get { return methodRate; }
            set { methodRate = value; }
        }

        /// <summary>
        /// The target cache hit rate for the method
        /// </summary>
        public double CacheHitTarget
        {
            get { return cacheHitTarget; }
            set { cacheHitTarget = value; }
        }

        /// <summary>
        /// The maximum recorded response time
        /// </summary>
        public double MaxMillisecondResponseTime
        {
            get { return maxMillisecondResponseTime; }
        }

        /// <summary>
        /// The queries to be used in tests
        /// </summary>
        public List<string> UrlsToExecute
        {
            get { return urlsToExecute; }
        }

        /// <summary>
        /// Specifies whether or not the cache is rolling or hourly aligned
        /// </summary>
        public bool UseRollingCache
        {
            get { return useRollingCache; }
            set { useRollingCache = value; }
        }

        #endregion
        
        #region Constructor and Initializators

        /// <summary>
        /// Constructor for MethodInfo
        /// </summary>
        /// <param name="name">Name of the method</param>
        /// <param name="rate">Rate of the method per second</param>
        public ReplayMethodInfo(string name, double rate)
        {
            replayCommands = false;
            methodName = name;
            methodRate = rate;
            maxMillisecondResponseTime = 0;
            purgatoryExpiration = 10;
            urlsToExecute = new List<string>();
            usedUrlsExecutionTimes = new Queue<MethodTimePair>();
            usedUrlsToExecute = new HashSet<string>();
            replayQueue = new Queue<MethodTimePair>();            
        }

        /// <summary>
        /// Constructor for MethodInfo
        /// </summary>
        /// <param name="name">Name of the method</param>
        /// <param name="rate">Rate of the method per second</param>
        /// <param name="useReplay">Use replay or use TPS targets</param>
        public ReplayMethodInfo(string name, double rate, bool useReplay)
        {
            useRollingCache = true;
            replayCommands = useReplay;
            methodName = name;
            methodRate = rate;
            maxMillisecondResponseTime = 0;
            purgatoryExpiration = 10;
            urlsToExecute = new List<string>();
            usedUrlsExecutionTimes = new Queue<MethodTimePair>();
            usedUrlsToExecute = new HashSet<string>();
            replayQueue = new Queue<MethodTimePair>();
            
        }

        #endregion
        
        #region Methods

        /// <summary>
        /// Determine whether or not execution is allowed (used when in app log replay mode).
        /// </summary>
        /// <returns>True if execution is allowed, otherwise false.</returns>
        public bool CheckForExecute()
        {
            delta = DateTime.Now.Subtract(currentStartTime);

            if (replayQueue.Peek().Time <= startTime.Add(delta))
                return true;

            return false;
        }

        /// <summary>
        /// Set the start time for this method based on the first available timestamp 
        /// from the log file (app log replay mode).
        /// </summary>
        public void SetExecutionStartTime()
        {
            if (replayQueue.Count > 0)
            {
                startTime = replayQueue.Peek().Time;
            }

            currentStartTime = DateTime.Now;
        }
        
        /// <summary>
        /// Resets the relative start time for this method if the first command is
        /// reached again (app log replay mode).
        /// </summary>
        public void ResetIfNeeded()
        {
            if (replayQueue.Peek().Time == startTime)
            {
                currentStartTime = DateTime.Now;
            }
        }

        /// <summary>
        /// Retrieves the callback for the CacheHitPercentageChanged event
        /// </summary>
        /// <returns>A CacheHitPercentageChangeDelegate for this method.</returns>
        public CacheHitPercentageChangedDelegate GetCacheHitPercentageChangedCallback()
        {
            if (null == cacheRatioChangedCallback)
            {
                cacheRatioChangedCallback = new CacheHitPercentageChangedDelegate(UpdateLocalCacheRatio);
            }

            return cacheRatioChangedCallback;
        }

        /// <summary>
        /// Retrieves the callback for the CacheHitPercentageChanged event
        /// </summary>
        /// <returns>A CacheHitPercentageChangeDelegate for this method.</returns>
        public PurgatoryExpirationChangedDelegate GetPurgatoryExpirationChangedCallback()
        {
            if (null == cacheRatioChangedCallback)
            {
                purgatoryExpirationChangedCallback = new PurgatoryExpirationChangedDelegate(UpdatePurgatoryExpiration);
            }

            return purgatoryExpirationChangedCallback;
        }

        /// <summary>
        /// Retrieve a URL to execute that will generate a cache hit
        /// </summary>
        /// <returns>The URL that will generate a cache hit</returns>
        private Queue<string> rotatingUsed = new Queue<string>();
        public string GetUrlToGenerateCacheHit(bool alreadyAttempted)
        {
            string urlToReturn = String.Empty;

            try
            {
                lock (rotatingUsed)
                {
                    if (rotatingUsed.Count > 0)
                    {
                        string hitListValue = rotatingUsed.Dequeue();
                        lock (quickUsedUrls)
                        {
                            if (quickUsedUrls.ContainsKey(hitListValue))
                            {
                                rotatingUsed.Enqueue(hitListValue);
                            }
                        }

                        return hitListValue;
                    }                   
                }
            }
            catch {  }

            if (!alreadyAttempted)
            {
                return GetUrlToGenerateCacheMiss(true);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve a URL to execute that will generate a cache miss
        /// </summary>
        /// <returns>The URL that will generate a cache miss</returns>
        public string GetUrlToGenerateCacheMiss(bool alreadyAttempted)
        {
            if(null == random)
                random = new Random();

            string urlToReturn = String.Empty;

            try
            {
                lock (urlsToExecute)
                {
                    if (urlsToExecute.Count > 0)
                    {
                        while(urlToReturn == String.Empty ||
                              null == urlToReturn)
                        {
                            urlToReturn = urlsToExecute[0];
                            urlsToExecute.RemoveAt(0);     
                       
                            if (!usingCache)
                            {
                                urlsToExecute.Add(urlToReturn);

                                return urlToReturn;
                            }

                        }
                    }
                    else if (!alreadyAttempted)
                    {
                        return GetUrlToGenerateCacheHit(true);
                    }
                    else
                    {
                        return null;
                    }
                }

                lock (quickUsedUrls)                    
                {
                    if (!quickUsedUrls.ContainsKey(urlToReturn))
                    {
                        quickUsedUrls.Add(urlToReturn, true);
                        rotatingUsed.Enqueue(urlToReturn);
                    }
                }

                DateTime cacheExpiration = DateTime.Now;
                cacheExpiration = cacheExpiration.AddMinutes(cacheDuration - ((int)Math.Floor(cacheDuration * .3)));
                
                if (!useRollingCache)
                {
                    cacheExpiration = cacheExpiration.Subtract(
                        new TimeSpan(0, cacheExpiration.Minute, cacheExpiration.Second));
                }

                expirationQueue.Enqueue(new MethodPair(cacheExpiration, urlToReturn));
                //lock (expiringUrls)
                //{
                //    if (!expiringUrls.ContainsKey(cacheExpiration))
                //    {
                //        expiringUrls.Add(cacheExpiration, new List<string>());                        
                //    }
                    
                //    expiringUrls[cacheExpiration].Add(urlToReturn);
                //}

                return urlToReturn;                
            }
            catch { }

            if (!alreadyAttempted)
            {
                return GetUrlToGenerateCacheHit(true);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Add a url to the pool of urls to execute
        /// </summary>
        /// <param name="url">The url being added to the pool</param>
        public void AddUrl(string url)
        {
            AddUrl(url, DateTime.Now);
        }
        
        /// <summary>
        /// Add a url to the pool of urls to execute
        /// </summary>
        /// <param name="url">The url being added to the pool</param>
        /// <param name="time">The time the url was originally executed</param>
        public void AddUrl(string url, DateTime time)
        {
            try
            {
                if (replayCommands)
                {
                    replayQueue.Enqueue(
                        new MethodTimePair(time, url));
                }
                else
                {
                    lock (urlsToExecute)
                    {
                        urlsToExecute.Add(url);
                    }

                    lock (usedUrlsToExecute)
                    {
                        if (usedUrlsToExecute.Contains(url))
                        {
                            usedUrlsToExecute.Remove(url);
                        }
                    }
                }
            }
            catch { }
        }

        /// <summary>
        /// Clear the current method's hit list
        /// </summary>
        public void ClearHitList()
        {
            try
            {
                lock (expiringUrls)
                {
                    expiringUrls.Clear();
                    purgatoryUrls.Clear();
                }

                lock (quickUsedUrls)
                {
                    quickUsedUrls.Clear();
                }
            }
            catch { }
        }

        /// <summary>
        /// Begin monitoring collection of used commands for expiration.
        /// Will also begin monitoring the collection of queries which are
        /// being prepared for use.
        /// </summary>
        public void StartMonitoringForExpiration()
        {
            lock (quickUsedUrls)
            {
                quickUsedUrls.Clear();
            }

            continueExecuting = true;
            Thread expirationTimer = new Thread(new ThreadStart(ExpirationMonitor));
            expirationTimer.Start();

            Thread purgatoryTimer = new Thread(new ThreadStart(PurgatoryMonitor));
            purgatoryTimer.Start();
        }

        /// <summary>
        /// Halt monitoring of collections for expiration or reuse.
        /// </summary>
        public void StopMonitoringForExpiration()
        {
            continueExecuting = false;
        }

        public void UpdateExpiringUrls(string command, DateTime expirationTime)
        {
            lock (expiringUrls)
            {
                if (!expiringUrls.ContainsKey(expirationTime))
                {
                    expiringUrls.Add(expirationTime, new List<string>());
                }

                if (reverseLookupExpirationTimes.ContainsKey(command))
                {
                    DateTime originalExpiration = reverseLookupExpirationTimes[command];
                    lock (expiringUrls)
                    {
                        for (int i = 0; i < expiringUrls[originalExpiration].Count; i++)
                        {
                            if (expiringUrls[originalExpiration][i] == command)
                            {
                                expiringUrls[originalExpiration].RemoveAt(i);
                            }
                        }
                    }

                    reverseLookupExpirationTimes[command] = expirationTime;
                }
                else
                {
                    reverseLookupExpirationTimes.Add(command, expirationTime);
                }

                expiringUrls[expirationTime].Add(command);
            }
        }

        private void PurgatoryMonitor()
        {
            List<DateTime> entriesToCheck = new List<DateTime>();
            List<DateTime> entriesToRemove = new List<DateTime>();

            while (continueExecuting)
            {
                entriesToRemove.Clear();
                entriesToCheck.Clear();
                
                //make a copy of the entries to check to avoid
                //locking the full ductionary for an extended period of time
                MethodPair methodPair = null;
                while (purgatoryQueue.Count > 0)
                {
                    methodPair = purgatoryQueue.Dequeue();

                    if (null != methodPair)
                    {
                        if (!purgatoryUrls.ContainsKey(methodPair.ExpirationTime))
                        {
                            purgatoryUrls.Add(methodPair.ExpirationTime, new List<string>());
                        }

                        purgatoryUrls[methodPair.ExpirationTime].Add(methodPair.Command);
                    }
                }

                while (entriesToCheck.Count == 0 &&
                        purgatoryUrls.Count > 0)
                {
                    try
                    {
                        entriesToCheck = new List<DateTime>(purgatoryUrls.Keys);
                    }
                    catch { }
                }
            
                //loop thruogh the possible entries to expire
                foreach (DateTime expirationTime in entriesToCheck)
                {                    
                    if (expirationTime > DateTime.Now)
                    {
                        break;
                    }
                    
                    //remove from expiration collection if the expiration time has been reached
                    if (purgatoryUrls.ContainsKey(expirationTime))
                    {
                        //lock (purgatoryUrls)
                        //{
                            foreach (string url in purgatoryUrls[expirationTime])
                            {
                                lock (urlsToExecute)
                                {
                                    urlsToExecute.Add(url);
                                }
                            }
                        //}
                    }

                    //entriesToRemove.Add(expirationTime);
                    purgatoryUrls.Remove(expirationTime);
                }

                //foreach (DateTime time in entriesToRemove)
                //{
                //    lock (purgatoryUrls)
                //    {
                //        if (purgatoryUrls.ContainsKey(time))
                //        {
                //            purgatoryUrls.Remove(time);
                //        }
                //    }
                //}

                Thread.Sleep(500);
            }
        }

        private void ExpirationMonitor()
        {
            List<DateTime> entriesToCheck = new List<DateTime>();
            List<DateTime> entriesToRemove = new List<DateTime>();
            
            while (continueExecuting)
            {
                entriesToRemove.Clear();
                entriesToCheck.Clear();

                try
                {
                    MethodPair methodPair = null;
                    while (expirationQueue.Count > 0)
                    {
                        methodPair = expirationQueue.Dequeue();

                        if (null != methodPair)
                        {
                            if (!expiringUrls.ContainsKey(methodPair.ExpirationTime))
                            {
                                expiringUrls.Add(methodPair.ExpirationTime, new List<string>());
                            }

                            expiringUrls[methodPair.ExpirationTime].Add(methodPair.Command);
                        }
                    }

                    //make a copy of the entries to check to avoid
                    //locking the full ductionary for an extended period of time
                    while (entriesToCheck.Count == 0 &&
                            expiringUrls.Count > 0)
                    {
                        try
                        {
                            entriesToCheck = new List<DateTime>(expiringUrls.Keys);
                        }
                        catch { }
                    }
                    
                    //loop thruogh the possible entries to expire
                    foreach (DateTime expirationTime in entriesToCheck)
                    {
                        if (expirationTime > DateTime.Now)
                        {
                            break;
                        }

                        lock (expiringUrls)
                        {
                            //remove from expiration collection if the expiration time has been reached
                            if (expiringUrls.ContainsKey(expirationTime))
                            {
                            
                                foreach (string url in expiringUrls[expirationTime])
                                {
                                    lock (quickUsedUrls)
                                    {
                                        if (!String.IsNullOrEmpty(url) &&
                                            quickUsedUrls.ContainsKey(url))
                                        {
                                            quickUsedUrls.Remove(url);
                                        }
                                    }

                                    //add the un-expired command to the purgatory collection where it will
                                    //wait for the specified amount of time before it is allowed to be re-used
                                    //this accounts for any slight differences in expiration times between 
                                    //the client and the service
                                    //lock (purgatoryUrls)
                                    //{
                                    //    int additionalMinutesToWait = (int)(cacheDuration * .4);
                                    //    DateTime key = DateTime.Now.Add(new TimeSpan(0, additionalMinutesToWait, 0));
                                    //    if (!purgatoryUrls.ContainsKey(key))
                                    //    {
                                    //        purgatoryUrls.Add(key, new List<string>());
                                    //    }

                                    //    purgatoryUrls[key].Add(url);
                                    //}
                                    int additionalMinutesToWait = (int)(cacheDuration * .4);
                                    DateTime key = DateTime.Now.Add(new TimeSpan(0, additionalMinutesToWait, 0));
                                    purgatoryQueue.Enqueue(new MethodPair(key, url));
                                    
                                    lock (reverseLookupExpirationTimes)
                                    {
                                        if (!String.IsNullOrEmpty(url) &&
                                            reverseLookupExpirationTimes.ContainsKey(url))
                                        {
                                            reverseLookupExpirationTimes.Remove(url);
                                        }
                                    }                                    
                                }
                            }
                        }

                        expiringUrls.Remove(expirationTime);
                        //entriesToRemove.Add(expirationTime);
                    }

                    foreach (DateTime time in entriesToRemove)
                    {
                        lock (expiringUrls)
                        {
                            if (expiringUrls.ContainsKey(time))
                            {
                                expiringUrls.Remove(time);
                            }
                        }
                    }
                }
                catch { }

                Thread.Sleep(500);
            }
        }

        #endregion

        #region Callbacks
        
        private void UpdateLocalCacheRatio(CacheHitPercentageChangedEventArgs eventArgs)
        {
            cacheHitTarget = eventArgs.CacheHitPercentage;
        }

        private void UpdatePurgatoryExpiration(PurgatoryExpirationChangedEventArgs eventArgs)
        {
            purgatoryExpiration = eventArgs.PurgatoryExpirationMinutes;
        }

        #endregion
    }

    public class MethodTimePair
    {
        private DateTime executionTime;
        private string executionUrl;

        public DateTime Time
        {
            get { return executionTime; }
        }

        public string Url
        {
            get { return executionUrl; }
        }

        public MethodTimePair(DateTime time, string url)
        {
            executionTime = time;
            executionUrl = url;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Marketplace.Test.TestDataCreator.Common.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Marketplace.Test.TestDataCreator.Common.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Bitmap marketplaceCropped {
            get {
                object obj = ResourceManager.GetObject("marketplaceCropped", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap marketplaceCropped1 {
            get {
                object obj = ResourceManager.GetObject("marketplaceCropped1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\AppLogReplay\AppLogReplay.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Xml;

namespace AppLogReplay
{
    /// <summary>
    /// The stress replay object
    /// </summary>    
    public class ReplayStress
    {
        #region Fields

        private bool useGzip = true;
        private bool useReplay = false;
        private bool useCacheLogic = true;
        private bool continueExecuting = false;
        private int purgatoryExpirationMinutes = 10;
        private int servicePortValue = 80;
        private int requestTimeoutMilliseconds = 5000;
        private double rampupSeconds = 5;
        private double currentRampup = 0.0;
        private double cacheHitPercentage = 0.0;
        private string serviceIPString = "127.0.0.1";
        private string serviceURLString = String.Empty;
        private string requestVerb = "POST";
        private List<HeaderPair> requestHeaders = new List<HeaderPair>();
        private Dictionary<string, Thread> persistentRateControllers = new Dictionary<string, Thread>();
        private Dictionary<string, double> targetRates = new Dictionary<string, double>();
        private Dictionary<string, double> remainderRates = new Dictionary<string, double>();
        private Dictionary<ReplayMethodInfo, DateTime> executedMethods = new Dictionary<ReplayMethodInfo, DateTime>();
        private Dictionary<string, ReplayMethodInfo> methods = new Dictionary<string, ReplayMethodInfo>();
        private Dictionary<string, StressCounter> stressCounters = new Dictionary<string, StressCounter>();

        private static CounterCreationDataCollection counters = new CounterCreationDataCollection();
        
        #endregion

        #region Properties

        public string RequestVerb
        {
            get { return requestVerb; }
            set 
            {
                string previousRequestVerb = requestVerb;
                requestVerb = value;

                for(int i = 0; i < requestHeaders.Count; i++)
                {
                    HeaderPair pair = requestHeaders[i];
                    if (pair.Name.ToUpper() == previousRequestVerb)
                    {
                        requestHeaders.RemoveAt(i);
                        requestHeaders.Insert(0, new HeaderPair(requestVerb, String.Format("{0} HTTP/1.1", serviceURLString)));
                        break;
                    }
                }

                
            }
        }

        public Dictionary<string, StressCounter> StressCounters
        {
            get { return stressCounters; }
            set { stressCounters = value; }
        }

        /// <summary>
        /// Gets and sets the url to use when contactive the service.
        /// </summary>
        public string ServiceURL
        {
            get { return serviceURLString; }
            set 
            { 
                serviceURLString = value;

                foreach (HeaderPair pair in requestHeaders)
                {
                    if (pair.Name.ToUpper() == requestVerb)
                    {
                        pair.Value = String.Format("{0} HTTP/1.1", serviceURLString);
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// The amount of time a command is held before being put back into the available pool of commands
        /// after it has expired out of the cache hit collection.  This additional wait time accounts for any
        /// difference between expiration times on the client and service and ensures the cache hit percentage
        /// is as accurate as possible.
        /// </summary>
        public int PurgatoryExpirationMinutes
        {
            get { return purgatoryExpirationMinutes; }
            set { 
                    purgatoryExpirationMinutes = value;
                    if (null != PurgatoryExpirationChanged)
                    {
                        //loop through invocation delegates since due to the way events are
                        //implemented the invocation will stop if there is an error or exception
                        //on one of the invocation targets resulting in any remaining targets not
                        //be executed
                        Delegate[] delegatesToInvoke = PurgatoryExpirationChanged.GetInvocationList();
                        for (int i = 0; i < delegatesToInvoke.Length; i++)
                        {
                            try
                            {
                                delegatesToInvoke[i].DynamicInvoke(
                                    new PurgatoryExpirationChangedEventArgs(purgatoryExpirationMinutes));
                            }
                            catch
                            {
                                //if an error occured remove the delegate from the invocation list
                                //not doing this right now.  Instead the error is ignored and invocation
                                //continues instead.
                                //CacheRatioChanged -= delegatesToInvoke[i];
                            }
                        }

                    }
                }
        }

        /// <summary>
        /// The amount of time to wait (in milliseconds) before an operation times out (e.g. Connection Open, Response Received, etc).
        /// </summary>
        public int RequestTimeout
        {
            get { return requestTimeoutMilliseconds; }
            set { requestTimeoutMilliseconds = value; }
        }

        /// <summary>
        /// The collection of headers to use when issuing a request
        /// </summary>
        public List<HeaderPair> RequestHeaders
        {
            get { return requestHeaders; }
            set { requestHeaders = value; }
        }

        /// <summary>
        /// Speficies whether or not to request Gzip compression. The default value is true.
        /// </summary>
        public bool UseGzip
        {
            get { return useGzip; }
            set 
            {
                //only modify the headers if the value has changed
                if (useGzip != value)
                {
                    useGzip = value;

                    //if adding gzip, add the header
                    if (useGzip)
                    {
                        requestHeaders.Add(new HeaderPair("accept-encoding", "gzip"));
                    }

                    //if removing gzip
                    else
                    {
                        //search for the header in the collection and remove it
                        for (int i = 0; i < requestHeaders.Count; i++)
                        {
                            HeaderPair header = requestHeaders[i];
                            if (header.Name.ToLower() == "accept-encoding")
                            {
                                requestHeaders.RemoveAt(i);
                                break;
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Specifies whether to use application log replay or not.
        /// Default is false and the TPS targets method will be used.
        /// </summary>
        public bool UseReplay
        {
            get { return useReplay; }
            set { useReplay = value; }
        }

        /// <summary>
        /// Specifies the IP address of the service that the API calls will be directed at
        /// </summary>
        public string ServiceIP
        {
            get { return serviceIPString; }
            set 
            {
                serviceIPString = value;

                foreach (HeaderPair header in requestHeaders)
                {
                    if (header.Name.ToLower() == "host:")
                    {
                        header.Value = value;
                    }
                }
            }
        }

        /// <summary>
        /// Specifies the port to use when sending commands to the specified service IP address
        /// </summary>
        public int ServicePort
        {
            get { return servicePortValue; }
            set { servicePortValue = value; }
        }

        /// <summary>
        /// The number of seconds to use to ramp up execution (defaults to 5);
        /// </summary>
        public double RampupSeconds
        {
            get { return rampupSeconds; }
            set { rampupSeconds = value; }
        }

        /// <summary>
        /// Collection of methods and associated information
        /// </summary>
        public Dictionary<string, ReplayMethodInfo> Methods
        {
            get { return methods; }
        }

        /// <summary>
        /// Specify whether or not to use cache hit logic. Default is true.
        /// </summary>
        public bool UseCacheLogic
        {
            get { return useCacheLogic; }
            set { useCacheLogic = value; }
        }

        /// <summary>
        /// Specifies the percentage of API calls that will result in a cache hit.
        /// </summary>
        public double CacheHitPercentage
        {
            get { return cacheHitPercentage; }
            set
            {
                cacheHitPercentage = value;

                if (null != CacheRatioChanged)
                {
                    //loop through invocation delegates since due to the way events are
                    //implemented the invocation will stop if there is an error or exception
                    //on one of the invocation targets resulting in any remaining targets not
                    //be executed
                    Delegate[] delegatesToInvoke = CacheRatioChanged.GetInvocationList();
                    for (int i = 0; i < delegatesToInvoke.Length; i++)
                    {
                        try
                        {
                            delegatesToInvoke[i].DynamicInvoke(
                                new CacheHitPercentageChangedEventArgs(cacheHitPercentage));
                        }
                        catch
                        {
                            //if an error occured remove the delegate from the invocation list
                            //not doing this right now.  Instead the error is ignored and invocation
                            //continues instead.
                            //CacheRatioChanged -= delegatesToInvoke[i];
                        }
                    }                    
                }
            }
        }

        #endregion

        #region Events

        /// <summary>
        /// Fires when the specified cache ratio changes
        /// </summary>
        public event CacheHitPercentageChangedDelegate CacheRatioChanged;

        /// <summary>
        /// Fires when the specified purgatory expiration value changes
        /// </summary>
        public event PurgatoryExpirationChangedDelegate PurgatoryExpirationChanged;

        #endregion 

        #region Constructor and Initialization

        /// <summary>
        /// The constructor for the replay stress main class
        /// </summary>
        public ReplayStress(string serviceIP, string serviceURL) 
        {
            requestHeaders = new List<HeaderPair>();
            requestHeaders.Add(new HeaderPair("POST", String.Format("{0} HTTP/1.1", serviceURL)));
            requestHeaders.Add(new HeaderPair("Content-type:", "application/x-www-form-urlencoded"));
            requestHeaders.Add(new HeaderPair("User-agent:", "zune/00.05.0187.00"));
            requestHeaders.Add(new HeaderPair("Connection:", "close"));
            requestHeaders.Add(new HeaderPair("Host:", serviceIPString));

            serviceIPString = serviceIP;
            serviceURLString = serviceURL;            
        }

        #endregion

        #region Methods

        /// <summary>
        /// Start executing test cases that have been loaded
        /// </summary>
        public void StartExecution()
        {
            PreparePerformanceCounters();
            
            continueExecuting = true;
            persistentRateControllers.Clear();
            currentRampup = 0;

            foreach (ReplayMethodInfo methodInfo in methods.Values)
            {
                CreatePerformanceCounters(methodInfo.Name);

                methodInfo.SetExecutionStartTime();
                targetRates[methodInfo.Name] = methodInfo.Rate;
                Thread persistentRateController = new Thread(new ParameterizedThreadStart(PersistentRateController));
                persistentRateControllers.Add(methodInfo.Name, persistentRateController);
                persistentRateController.Start(methodInfo);                
            }
            
            PerformanceCounterCategory.Create(
               "Catalog Stress Test",
               "Catalog Stress Performance Counters",
               PerformanceCounterCategoryType.SingleInstance,
               counters);

            foreach(string method in methods.Keys)
            {
                if (!stressCounters.ContainsKey(method))
                {
                    stressCounters.Add(
                        method,
                        new StressCounter(method));
                }
            }

            Thread rampupThread = new Thread(new ThreadStart(RampupWorker));
            rampupThread.Start();
        }

        private void PreparePerformanceCounters()
        {
            counters = new CounterCreationDataCollection();

            if (PerformanceCounterCategory.Exists("Catalog Stress Test"))
                PerformanceCounterCategory.Delete("Catalog Stress Test");

            CounterCreationData newCounter = new CounterCreationData();
            newCounter.CounterName = "Total Operations / sec";
            newCounter.CounterHelp = "API Average Counter";
            newCounter.CounterType = PerformanceCounterType.RateOfCountsPerSecond64;
            counters.Add(newCounter);
        }

        private static void CreatePerformanceCounters(string counterName)
        {
            CounterCreationData newCounter = new CounterCreationData();
            newCounter.CounterName = counterName;
            newCounter.CounterHelp = "Catalog Stress Performance Counter";
            newCounter.CounterType = PerformanceCounterType.NumberOfItems64;
            counters.Add(newCounter);

            // Add both counters to the collection.	
            newCounter = new CounterCreationData();
            newCounter.CounterName = counterName + " / sec";
            newCounter.CounterHelp = "Catalog Stress Performance Counter";
            newCounter.CounterType = PerformanceCounterType.RateOfCountsPerSecond64;
            counters.Add(newCounter);

            newCounter = new CounterCreationData();
            newCounter.CounterName = counterName + " hit / sec";
            newCounter.CounterHelp = "Catalog Stress Performance Counter Hits";
            newCounter.CounterType = PerformanceCounterType.RateOfCountsPerSecond64;
            counters.Add(newCounter);

            newCounter = new CounterCreationData();
            newCounter.CounterName = counterName + " miss / sec";
            newCounter.CounterHelp = "Catalog Stress Performance Counter Misses";
            newCounter.CounterType = PerformanceCounterType.RateOfCountsPerSecond64;
            counters.Add(newCounter);
        }

        /// <summary>
        /// Stop executing test cases
        /// </summary>
        public void StopExecution()
        {
            continueExecuting = false;
        }


        /// <summary>
        /// Load an application log and associated queries into the collection
        /// to be used in tests.
        /// </summary>
        /// <param name="applicationLogPath">Path to the application log file</param>
        public void LoadApplicationLog(string applicationLogPath)
        {
            string api = String.Empty;
            string fullAPI = String.Empty;
            string[] split = null;
            ReplayMethodInfo methodInfo = null;
            DateTime apiTime = DateTime.MinValue;
            StreamReader reader = new StreamReader(applicationLogPath);

            //read until the end of the file is reached
            while ((fullAPI = reader.ReadLine()) != null)
            {
                try
                {
                    split = fullAPI.Split("|".ToCharArray());
                    if (split.Length < 10)
                    {
                        continue;
                    }

                    api = split[2];
                    fullAPI = split[9];
                    methodInfo = null;
                    apiTime = DateTime.Parse(split[0]);

                    if (methods.ContainsKey(api))
                    {
                        methodInfo = methods[api];
                    }
                    else
                    {
                        methodInfo = new ReplayMethodInfo(api, 0);
                        methods.Add(api, methodInfo);
                    }

                    methodInfo.ReplayCommends = useReplay;
                    methodInfo.AddUrl(fullAPI, apiTime);
                }
                catch { }
            }

            reader.Close();

            foreach (ReplayMethodInfo method in methods.Values)
            {
                if (!targetRates.ContainsKey(method.Name))
                {
                    targetRates.Add(method.Name, Convert.ToDouble(method.Rate));
                    remainderRates.Add(method.Name, 0);
                }
                else
                {
                    targetRates[method.Name] = Convert.ToDouble(method.Rate);
                }                
            }
        }


        #endregion

        #region Callbacks
        
        private void RampupWorker()
        {
            //Increment the rampup step by 1 every second until rampup completes
            while (++currentRampup < rampupSeconds)
            {
                Thread.Sleep(1000);
            }
        }

        private void PersistentRateController(object state)
        {        
            ReplayMethodInfo methodInfo = (ReplayMethodInfo)state;
            CacheRatioChanged += methodInfo.GetCacheHitPercentageChangedCallback();
            PurgatoryExpirationChanged += methodInfo.GetPurgatoryExpirationChangedCallback();

            int hitOrMiss = 0;
            string command = String.Empty;
            double currentSecondRate = methodInfo.Rate * (currentRampup / rampupSeconds);
            DateTime lastSecond = DateTime.Now;

            //Begin monitoring for cache expiration for this method
            methodInfo.StartMonitoringForExpiration();

            //Continue executing until stress ahs been stopped
            while (continueExecuting)
            {
                //If log replay is being used
                if (methodInfo.ReplayCommends)
                {
                    ExecuteByReplay(methodInfo);
                }

                //If TPS targets are being used
                else
                {
                    ExecuteByTarget(methodInfo, ref lastSecond, ref command, ref hitOrMiss, ref currentSecondRate);
                }
            }

            //Stop monitoring for expiration
            methodInfo.StopMonitoringForExpiration();

            CacheRatioChanged -= methodInfo.GetCacheHitPercentageChangedCallback();
            PurgatoryExpirationChanged -= methodInfo.GetPurgatoryExpirationChangedCallback();
        }

        private void ExecuteByReplay(ReplayMethodInfo methodInfo)
        {
            //if it's time to issue another command to the service
            if (methodInfo.CheckForExecute())
            {
                string urlToExecute = methodInfo.ReplayQueue.Peek().Url;

                ThreadPool.QueueUserWorkItem(
                    new WaitCallback(ExecutionThread),
                    urlToExecute);

                methodInfo.ReplayQueue.Enqueue(
                    methodInfo.ReplayQueue.Dequeue());
            }

            //if it's not time to issue a command to the service, wait a short time and give up context
            else
            {
                Thread.Sleep(100);
            }

            //if the end of the log is reached, reset
            methodInfo.ResetIfNeeded();
        }

        private void ExecuteByTarget(ReplayMethodInfo methodInfo, ref DateTime lastSecond, ref string command, ref int hitOrMiss, ref double currentSecondRate)
        {
            //if there are still URLs to execute during this second
            if (currentSecondRate > 0)
            {
                bool hit = true;
                currentSecondRate--;
                hitOrMiss++;
                hitOrMiss %= 100;

                //if cache logic is being used AND
                //if this call is supposed to be a cache hit
                if (useCacheLogic == true &&
                    hitOrMiss < (methodInfo.CacheHitTarget - 1))
                {
                    command = methodInfo.GetUrlToGenerateCacheHit(false);
                }

                //if cache logic is not being used OR
                //if this call is supposed to be a cache miss
                else
                {
                    hit = false;
                    command = methodInfo.GetUrlToGenerateCacheMiss(false);
                }

                if (null == command)
                {
                    return;
                }

                QueueRequest request = new QueueRequest(methodInfo.Name, command);

                //add the command to the execution pool
                ThreadPool.QueueUserWorkItem(
                    new WaitCallback(ExecutionThread),
                    request);

                if (hit)
                {
                    stressCounters[methodInfo.Name].AverageHitCounter.Increment();
                }
                else
                {
                    stressCounters[methodInfo.Name].AverageMissCounter.Increment();
                }
                
                //if the target TPS is a rational number, store any remaining 'fractional'
                //TPS to be accounted for in a future second/time slice.
                if (currentSecondRate < 1)
                    remainderRates[methodInfo.Name] = currentSecondRate;
            }

            //give up context if the thread is done executing for the remainder of this second
            else
            {
                long millisecondsToSleep = lastSecond.AddSeconds(1).Ticks - DateTime.Now.Ticks;
                millisecondsToSleep /= TimeSpan.TicksPerMillisecond;

                if (millisecondsToSleep < 1)
                    millisecondsToSleep = 100;

                Thread.Sleep((int)millisecondsToSleep);
            }

            //refresh the target rate for the current second while taking rampup
            //and remaining partial TPS values into account
            if (lastSecond.AddSeconds(1) <= DateTime.Now)
            {
                currentSecondRate =
                    (targetRates[methodInfo.Name] + remainderRates[methodInfo.Name]) *
                        (currentRampup / rampupSeconds);

                remainderRates[methodInfo.Name] = 0;
                lastSecond = DateTime.Now;
            }
        }

        private void ExecutionThread(object state)
        {
            ExecuteOverSocket((QueueRequest)state);
        }

        private void ExecuteOverSocket(QueueRequest request)
        {
            try
            {
                IPAddress serviceIP = IPAddress.Parse(serviceIPString);
                int servicePort = servicePortValue;

                Socket clientSocket = new Socket(
                    AddressFamily.InterNetwork,
                    SocketType.Stream,
                    ProtocolType.Tcp);

                SocketState socketState = new SocketState();
                socketState.ClientSocket = clientSocket;
                socketState.Message = request.Command;
                socketState.MethodName = request.MethodName;
                
                IAsyncResult connectResult = clientSocket.BeginConnect(
                    serviceIP,
                    servicePort,
                    new AsyncCallback(SocketConnectCallback),
                    socketState);                
            }
            catch { }
        }

        private void SocketConnectCallback(IAsyncResult result)
        {
            if (result.AsyncWaitHandle.WaitOne(requestTimeoutMilliseconds, false))
            {
                try
                {
                    SocketState socketState = (SocketState)result.AsyncState;
                    socketState.ClientSocket.EndConnect(result);

                    byte[] methodBytes = Encoding.UTF8.GetBytes(socketState.Message);

                    string value = String.Empty;
                    string headers = String.Empty;
                    foreach (HeaderPair header in requestHeaders)
                    {
                        value = header.Value;
                        if (header.Name == "GET")
                        {
                            value = value.Insert(
                                value.LastIndexOf(' '),
                                socketState.Message);
                        }

                        headers += String.Format("{0} {1}\r\n", header.Name, value);
                    }
                    

                    byte[] byteData = null;

                    if (requestVerb == "POST")
                    {
                        headers += String.Format("Content-length: {0}\r\n", methodBytes.Length);
                        headers += "\r\n";
                        byteData = Encoding.UTF8.GetBytes(headers + socketState.Message);
                    }
                    else
                    {
                        headers += "\r\n";
                        byteData = Encoding.UTF8.GetBytes(headers);
                    }

                    IAsyncResult sendResult = socketState.ClientSocket.BeginSend(
                        byteData,
                        0,
                        byteData.Length,
                        SocketFlags.None,
                        new AsyncCallback(SocketSendCallback),
                        socketState);                    
                }
                catch { }
            }
        }

        private void SocketSendCallback(IAsyncResult result)
        {
            if (result.AsyncWaitHandle.WaitOne(5000, false))
            {
                try
                {
                    SocketState socketState = (SocketState)result.AsyncState;

                    int bytesSent = socketState.ClientSocket.EndSend(result);
                    
                    stressCounters[socketState.MethodName].AverageCounter.Increment();
                    stressCounters[socketState.MethodName].TotalCounter.Increment();

                    socketState.StartTime = DateTime.Now;
                    
                    IAsyncResult receiveResult = socketState.ClientSocket.BeginReceive(
                        socketState.ResponseBuffer,
                        0,
                        SocketState.BufferSize,
                        0,
                        new AsyncCallback(SocketReceiveCallback),
                        socketState);                    
                }
                catch { }
            }
        }

        private void SocketTimeoutCallback(object state, bool timedout)
        {
            if (timedout)
            {
                Socket clientSocket = (Socket)state;
                try
                {
                    clientSocket.Close();
                }
                catch { }
            }
        }


        private void SocketReceiveCallback(IAsyncResult ar)
        {
            if (ar.AsyncWaitHandle.WaitOne(5000, false))
            {
                // Retrieve the state object and the client socket from the asynchronous state object.
                SocketState socketState = (SocketState)ar.AsyncState;
                    
                try
                {                    
                    // Read data from the service.
                    if (socketState.ClientSocket.Connected)
                    {
                        socketState.StringBuilder = new StringBuilder();
                        int bytesRead = socketState.ClientSocket.EndReceive(ar);
                        if (bytesRead > 0)
                        {
                            socketState.StringBuilder.Append(
                                    Encoding.UTF8.GetString(socketState.ResponseBuffer));

                            while (socketState.ClientSocket.Connected &&
                                  ((bytesRead = socketState.ClientSocket.Receive(socketState.ResponseBuffer)) > 0))
                            {
                                socketState.StringBuilder.Append(
                                    Encoding.UTF8.GetString(socketState.ResponseBuffer,0, bytesRead));
                            }

                            string expiration = socketState.StringBuilder.ToString();
                            
                            if (expiration.IndexOf("Expires") >= 0)
                            {
                                expiration = expiration.Substring(
                                    expiration.IndexOf("Expires") + 9);
                                expiration = expiration.Substring(
                                    0,
                                    expiration.IndexOf("\r\n"));

                                DateTime expirationTime = DateTime.Parse(expiration);

                                methods[socketState.MethodName].UpdateExpiringUrls(
                                    socketState.Message,
                                    expirationTime);
                            }
                            else
                            {
                                //No expires response header was specified, so we assume there is
                                //no cache being used.
                                methods[socketState.MethodName].UpdateExpiringUrls(
                                    socketState.Message,
                                    DateTime.MinValue);
                            }                                                    
                        }
                        else
                        {
                            // All the data has arrived                            
                        }
                    }
                }
                catch { }
            }
        }

        #endregion                
    }

    /// <summary>
    /// Delegate for the CacheHitPercentageChanged event.
    /// </summary>
    /// <param name="eventArgs">The arguments passed to the event handler when it is invoked.</param>
    public delegate void CacheHitPercentageChangedDelegate(CacheHitPercentageChangedEventArgs eventArgs);

    /// <summary>
    /// Delegate for the PurgatoryExpirationChanged event.
    /// </summary>
    /// <param name="eventArgs">The arguments passed to the event handler when it is invoked.</param>
    public delegate void PurgatoryExpirationChangedDelegate(PurgatoryExpirationChangedEventArgs eventArgs);

    /// <summary>
    /// The event arguments passed to the CacheHitPercentageChanged event handler when it is invoked.
    /// </summary>
    public class CacheHitPercentageChangedEventArgs : EventArgs
    {
        #region Fields

        private double cacheHitPercentage;

        #endregion

        #region Properties

        /// <summary>
        /// The cache hit percentage to use.
        /// </summary>
        public double CacheHitPercentage
        {
            get { return cacheHitPercentage; }
        }

        #endregion

        #region Constructor and Initialization

        /// <summary>
        /// Constructor for the CacheHitPercentageChanged event arguements.
        /// </summary>
        /// <param name="newHitPercentage">The new value to use for cache hit percentage.</param>
        public CacheHitPercentageChangedEventArgs(double newHitPercentage)
        {
            cacheHitPercentage = newHitPercentage;
        }

        #endregion
    }

    /// <summary>
    /// The event arguments passed to the PurgatoryExpirationChanged event handler when it is invoked.
    /// </summary>
    public class PurgatoryExpirationChangedEventArgs : EventArgs
    {
        #region Fields

        private int puragtoryExpirationMinutes;

        #endregion

        #region Properties

        /// <summary>
        /// The cache hit percentage to use.
        /// </summary>
        public int PurgatoryExpirationMinutes
        {
            get { return puragtoryExpirationMinutes; }
        }

        #endregion

        #region Constructor and Initialization

        /// <summary>
        /// Constructor for the CacheHitPercentageChanged event arguements.
        /// </summary>
        /// <param name="newHitPercentage">The new value to use for cache hit percentage.</param>
        public PurgatoryExpirationChangedEventArgs(int minutes)
        {
            puragtoryExpirationMinutes = minutes;
        }

        #endregion
    }
    
    /// <summary>
    /// The state object to use in asynchronous operations while sending data over a socket
    /// </summary>
    public class SocketState
    {
        #region Fields

        public const int BufferSize = 1024;
        private string message = String.Empty;
        private string methodName = String.Empty;
        private byte[] buffer = new byte[BufferSize];
        private DateTime startTime;
        private Socket clientSocket = null;
        private StringBuilder sb = new StringBuilder();

        #endregion

        #region Properties

        /// <summary>
        /// The name of the method that is being executed
        /// </summary>
        public string MethodName
        {
            get { return methodName; }
            set { methodName = value; }
        }

        /// <summary>
        /// The client socket to send data over
        /// </summary>
        public Socket ClientSocket
        {
            get { return clientSocket; }
            set { clientSocket = value; }
        }

        /// <summary>
        /// The buffer used for storing responses to messages that are sent over the client socket.
        /// </summary>
        public byte[] ResponseBuffer
        {
            get { return buffer; }
            set { buffer = value; }
        }

        /// <summary>
        /// The string builder used to store the responses
        /// </summary>
        public StringBuilder StringBuilder
        {
            get { return sb; }
            set { sb = value; }
        }

        /// <summary>
        /// The message to send over the client socket.  
        /// This string will eventually be stored within the buffer.
        /// </summary>
        public string Message
        {
            get { return message; }
            set { message = value; }
        }

        /// <summary>
        /// The timestamp of when the message is sent over the client socket.
        /// </summary>
        public DateTime StartTime
        {
            get { return startTime; }
            set { startTime = value; }
        }

        #endregion
    }

    /// <summary>
    /// The header pair class which stores the name and value of a header
    /// </summary>
    public class HeaderPair
    {
        #region Fields
        
        string headerName;
        string headerValue;
    
        #endregion

        #region Properties

        /// <summary>
        /// The name of the header
        /// </summary>
        public string Name
        {
            get { return headerName; }
            set { headerName = value; }
        }

        /// <summary>
        /// The value of the header
        /// </summary>
        public string Value
        {
            get { return headerValue; }
            set { headerValue = value; }
        }

        #endregion

        #region Constructor and Initialization

        /// <summary>
        /// The constructor for the HeaderPair object
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        public HeaderPair(string name, string value)
        {
            headerName = name;
            headerValue = value;
        }

        #endregion
    }

    /// <summary>
    /// Defines the stress counter class used to track the number of times an operation occurs
    /// </summary>
    public class StressCounter
    {
        #region Fields

        PerformanceCounter totalCounter;
        PerformanceCounter averageCounter;
        PerformanceCounter averageHitCounter;
        PerformanceCounter averageMissCounter;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the counter representing the total number of times a specific operation has been executed
        /// </summary>
        public PerformanceCounter TotalCounter
        {
            get { return totalCounter; }
        }

        /// <summary>
        /// Gets the counter representing the average number of times a specific operation has been executed per second
        /// </summary>
        public PerformanceCounter AverageCounter
        {
            get { return averageCounter; }
        }

        /// <summary>
        /// Gets the counter representing the average number of times a specific operation has been executed per second
        /// </summary>
        public PerformanceCounter AverageHitCounter
        {
            get { return averageHitCounter; }
        }

        /// <summary>
        /// Gets the counter representing the average number of times a specific operation has been executed per second
        /// </summary>
        public PerformanceCounter AverageMissCounter
        {
            get { return averageMissCounter; }
        }

        #endregion

        #region Constructor and Initialization

        /// <summary>
        /// Constructs the Stress Counter
        /// </summary>
        /// <param name="counterName">The base of the name for the counters</param>
        public StressCounter(string counterName)
        {
            totalCounter = new PerformanceCounter(
                "Catalog Stress Test",
                counterName,
                false);

            averageCounter = new PerformanceCounter(
                "Catalog Stress Test",
                counterName + " / sec",
                false);

            averageHitCounter = new PerformanceCounter(
                            "Catalog Stress Test",
                            counterName + " hit / sec",
                            false);

            averageMissCounter = new PerformanceCounter(
                            "Catalog Stress Test",
                            counterName + " miss / sec",
                            false);

        }

        #endregion
    }

    public class QueueRequest
    {
        private string method = String.Empty;
        private string command = String.Empty;

        public string MethodName
        {
            get { return method; }
        }

        public string Command
        {
            get { return command; }
        }

        public QueueRequest(string methodName, string specificCommand) 
        {
            method = methodName;
            command = specificCommand;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\Test Data Creator\Test Data Creator\TestDataCreator.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.CSharp;
using Marketplace.Test.TestDataCreator.Common;

namespace Marketplace.Test.TestDataCreator
{
    public partial class TestDataCreator : Form
    {
        #region Fields

        private ContentBase parentContent = null;
        private Dictionary<TreeNode, ContentBase> testContent = new Dictionary<TreeNode, ContentBase>();
        private Dictionary<ProductType, int> productTypeCounts = new Dictionary<ProductType, int>();
        private StatusUpdatedDelegate statusUpdatedCallback;
        private delegate void UpdateStatusDelegate(string currentStatus, string error, int total, int step);
        
        #endregion

        #region Constructor
        
        public TestDataCreator()
        {
            InitializeComponent();
            
            statusUpdatedCallback = new StatusUpdatedDelegate(outputModule_StatusUpdated);
            propertyGrid1.PropertyValueChanged += new PropertyValueChangedEventHandler(propertyGrid1_PropertyValueChanged);
        }

        #endregion

        #region Control Methods

        void propertyGrid1_PropertyValueChanged(object s, PropertyValueChangedEventArgs e)
        {
            if (e.ChangedItem.Label == "ProductType")
            {
                productTypeCounts[(ProductType)e.OldValue] -= 1;
                UpdateProductTypeCount(testContent[dataTree.SelectedNode].ProductType, 1);
                dataTree.SelectedNode.Text = e.ChangedItem.Value.ToString();

                if (testContent[dataTree.SelectedNode].ProductType == ProductType.Bundle)
                {
                    BundleContent bundleContent = new BundleContent(testContent[dataTree.SelectedNode]);
                    if (null != dataTree.SelectedNode.Parent)
                    {
                        ContentBase parentContent = testContent[dataTree.SelectedNode.Parent];
                        parentContent.RelatedContent[dataTree.SelectedNode.Index] = bundleContent;
                    }

                    testContent[dataTree.SelectedNode] = bundleContent;
                }
                else if ((ProductType)e.OldValue == ProductType.Bundle)
                {
                    ContentBase newContent = new ContentBase(testContent[dataTree.SelectedNode]);
                    if (null != dataTree.SelectedNode.Parent)
                    {
                        ContentBase parentContent = testContent[dataTree.SelectedNode.Parent];
                        parentContent.RelatedContent[dataTree.SelectedNode.Index] = newContent;
                    }

                    testContent[dataTree.SelectedNode] = newContent;                    
                }

                propertyGrid1.SelectedObject = testContent[dataTree.SelectedNode];
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            TreeNode newNode = null;
            TreeNode selectedNode = dataTree.SelectedNode;
            if (null != selectedNode &&
                selectedNode.Level > 0 &&
                selectedNode.Parent.Text != "Bundle")
            {
                selectedNode = selectedNode.Parent;
            }

            //if adding the parent content
            if (dataTree.Nodes.Count == 0)
            {
                parentContent = new ContentBase();
                newNode = dataTree.Nodes.Add(parentContent.ProductType.ToString());
                testContent.Add(newNode, parentContent);
                UpdateProductTypeCount(parentContent.ProductType, 1);
            }

            //if adding just one child content
            else if (numericUpDown1.Value == 1)
            {
                ContentBase newContent = new ContentBase();
                newNode = selectedNode.Nodes.Add(newContent.ProductType.ToString());
                testContent.Add(newNode, newContent);
                testContent[selectedNode].RelatedContent.Add(newContent);
                UpdateProductTypeCount(newContent.ProductType, 1);

                dataTree.ExpandAll();                                
            }
                
            //if adding more than one child content
            else
            {
                BulkItemProperties bulkItemProperties = new BulkItemProperties();
                bulkItemProperties.BulkPropertiesSet += new BulkItemProperties.BulkPropertiesSetDelegate(bulkItemProperties_BulkPropertiesSet);
                bulkItemProperties.BulkItemCount = (int)numericUpDown1.Value;
                bulkItemProperties.Show();
            }

            dataTree.SelectedNode = newNode;
        }

        private void treeView1_AfterSelect_1(object sender, TreeViewEventArgs e)
        {
            //update the propertyGrid with the details of the selected content
            if (null != dataTree.SelectedNode)
            {
                ContentBase currentContent = testContent[dataTree.SelectedNode];
                propertyGrid1.SelectedObject = currentContent;
            }
        }
                        
        void bulkItemProperties_BulkPropertiesSet(ContentBase bulkProperties, int bulkItemCount, int userDefinedValue)
        {
            ContentBase newContent = null;
            TreeNode newNode = null;

            for (int i = 0; i < bulkItemCount; i++)
            {
                newContent = new ContentBase(bulkProperties);
                
                //add the bulk content to the first parent node if no nodes are selected
                if (null == dataTree.SelectedNode)
                {
                    newNode = dataTree.Nodes[0].Nodes.Add(newContent.ProductType.ToString());
                    testContent[dataTree.Nodes[0]].RelatedContent.Add(newContent);
                }

                //add the bulk content to the selected parent node if one is selected
                else
                {
                    newNode = dataTree.SelectedNode.Nodes.Add(newContent.ProductType.ToString());
                    testContent[dataTree.SelectedNode].RelatedContent.Add(newContent);
                }

                testContent.Add(newNode, newContent);

                UpdateProductTypeCount(newContent.ProductType, 1);
                PostProcessContent(newContent, i + 1, userDefinedValue++);
            }

            dataTree.ExpandAll();
        }

        private void PostProcessContent(ContentBase content, int currentBulkItemIndex, int userDefinedValue)
        {
            //process bulk content wildcards
            content.Description = content.Description.Replace(
                "%BULK%", 
                currentBulkItemIndex.ToString());
            content.Title = content.Title.Replace(
                "%BULK%", 
                currentBulkItemIndex.ToString());
            
            content.Description = content.Description.Replace(
                "%PRODUCT_TYPE_COUNT%", 
                productTypeCounts[content.ProductType].ToString());
            content.Title = content.Title.Replace(
                "%PRODUCT_TYPE_COUNT%",
                productTypeCounts[content.ProductType].ToString());
            
            content.Description = content.Description.Replace(
                "%USER_DEFINED_COUNT%",
                 userDefinedValue.ToString());
            content.Title = content.Title.Replace(
                "%USER_DEFINED_COUNT%",
                 userDefinedValue.ToString());

            //process bulk content wildcards for all related content
            foreach (ContentBase relatedContent in content.RelatedContent)
            {
                PostProcessContent(relatedContent, currentBulkItemIndex++, userDefinedValue++);
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //if no node is selected, return without removing anything
            TreeNode selectedNode = dataTree.SelectedNode;
            if (null == selectedNode)
            {
                return;
            } 

            //if a parent node is being removed, remove all of the related content as well
            if (selectedNode.Level == 0)
            {
                while (selectedNode.Nodes.Count > 0)
                {
                    UpdateProductTypeCount(
                        testContent[selectedNode.Nodes[0]].ProductType,
                        -1);

                    testContent.Remove(selectedNode.Nodes[0]);
                    selectedNode.Nodes.RemoveAt(0);
                }
            }

            //remove selected related content
            else if(selectedNode.Level > 0 &&
                    selectedNode.Index + 1 <= testContent[selectedNode.Parent].RelatedContent.Count)
            {
                testContent[selectedNode.Parent].RelatedContent.RemoveAt(selectedNode.Index);
            }

            UpdateProductTypeCount(
                    testContent[selectedNode].ProductType,
                    -1);

            testContent.Remove(selectedNode);
            dataTree.Nodes.Remove(selectedNode);
            dataTree.SelectedNode = null;
            propertyGrid1.SelectedObject = null;
        }

        private void TestDataCreator_Load(object sender, EventArgs e)
        {
            this.FormClosed += new FormClosedEventHandler(TestDataCreator_FormClosed);
        }

        void TestDataCreator_FormClosed(object sender, FormClosedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Environment.Exit(0);
        }

        private void GenerationWorker(object state)
        {
            string fileName = (string)state;

            //load the specified output module
            Configuration config = ConfigurationManager.OpenExeConfiguration(Application.ExecutablePath);
            System.Reflection.Assembly assembly = System.Reflection.Assembly.LoadFrom(config.AppSettings.Settings["DataInterfaceModule"].Value);
            string currentInterfaceModule = config.AppSettings.Settings["DataInterfaceModuleNamespace"].Value + "." +
                config.AppSettings.Settings["DataInterfaceModuleClassName"].Value;

            IOutputModule outputModule = (IOutputModule)assembly.CreateInstance(currentInterfaceModule);
            outputModule.StatusUpdated += statusUpdatedCallback;
            outputModule.SaveLocation = fileName;

            //bundle up all test content to pass to the output module
            List<ContentBase> content = new List<ContentBase>();
            foreach (TreeNode node in dataTree.Nodes)
            {
                content.Add(testContent[node]);
            }

            outputModule.GenerateTestContent(content);            
        }

        void outputModule_StatusUpdated(string currentStatus, string error, int total, int step)
        {
            UpdateStatusDelegate updateStatus = new UpdateStatusDelegate(UpdateStatus);
            this.Invoke(updateStatus, new object[] { currentStatus, error, total, step });
        }

        private void UpdateStatus(string currentStatus, string error, int total, int step)
        {
            toolStripStatusLabel1.Text = currentStatus;

            //if this is a new progress bar, set the values appropriately
            if (toolStripProgressBar1.Maximum < total)
            {
                toolStripProgressBar1.Maximum = total;
                toolStripProgressBar1.Step = 1;
                toolStripProgressBar1.PerformStep();
            }
                            
            else
            {
                toolStripProgressBar1.PerformStep();
            }

            //display the error if one has occurred
            if (null != error)
            {
                MessageBox.Show(
                    currentStatus + Environment.NewLine + error,
                    "An Error Occurred!",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
        }

        private void addItemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            button1_Click(sender, e);
        }   

        private void removeItemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (DialogResult.Yes ==
                MessageBox.Show("Are you sure you want to remove the selected item?",
                "Removal Confirmation",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question))
            {
                button2_Click(sender, e);
            }
        }

        private void multiplySelectedItemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (null != dataTree.SelectedNode)
            {
                DataMultiplier multiplier = new DataMultiplier();
                multiplier.MultiplierSet += new DataMultiplier.MultiplierSetDelegate(multiplier_MultiplierSet);
                multiplier.Show();
            }
        }

        void multiplier_MultiplierSet(int multiplierValue, int userDefinedValue)
        {
            int level = dataTree.SelectedNode.Level;
            ContentBase originalBase = new ContentBase(testContent[dataTree.SelectedNode]);

            //Process wildcards on any of the configured content
            PostProcessContent(testContent[dataTree.SelectedNode], 0, userDefinedValue++);            
            foreach (ContentBase relatedContent in testContent[dataTree.SelectedNode].RelatedContent)
            {
                PostProcessContent(relatedContent, 0, userDefinedValue++);
            }

            //Multiply the selected content its related content X number of times
            for (int i = 0; i < multiplierValue-1; i++)
            {
                ContentBase newContent = null;

                if (originalBase.ProductType == ProductType.Bundle)
                {
                    newContent = new BundleContent(originalBase);
                }
                else
                {
                    newContent = new ContentBase(originalBase);
                }

                TreeNode newNode = null;
                
                if (level == 0)
                {
                    newNode = dataTree.Nodes.Add(newContent.ProductType.ToString());
                    testContent.Add(newNode, newContent);
                    
                    for (int j = 0; j < newContent.RelatedContent.Count; j++)
                    {
                        ContentBase relatedContent = newContent.RelatedContent[j];
                        TreeNode relatedNode = newNode.Nodes.Add(relatedContent.ProductType.ToString());
                        testContent.Add(relatedNode, relatedContent);
                        
                        UpdateProductTypeCount(relatedContent.ProductType, 1);
                        PostProcessContent(relatedContent, j + 1, userDefinedValue++);

                        //if working with a bundle, there is a third level of nested content
                        for (int k = 0; k < relatedContent.RelatedContent.Count; k++)
                        {
                            ContentBase childContent = relatedContent.RelatedContent[k];
                            TreeNode childNode = relatedNode.Nodes.Add(childContent.ProductType.ToString());
                            testContent.Add(childNode, childContent);

                            UpdateProductTypeCount(childContent.ProductType, 1);
                            PostProcessContent(childContent, k + 1, userDefinedValue++);
                        }
                    }
                }
                else
                {
                    ContentBase selectedContent = testContent[dataTree.SelectedNode];
                    newNode = dataTree.SelectedNode.Parent.Nodes.Add(newContent.ProductType.ToString());
                    testContent[dataTree.SelectedNode.Parent].RelatedContent.Add(newContent);
                    testContent.Add(newNode, newContent);

                    //if working with a bundle, there is a third level of nested content
                    for (int k = 0; k < selectedContent.RelatedContent.Count; k++)
                    {
                        ContentBase childContent = selectedContent.RelatedContent[k];
                        TreeNode childNode = newNode.Nodes.Add(childContent.ProductType.ToString());
                        testContent.Add(childNode, childContent);

                        UpdateProductTypeCount(childContent.ProductType, 1);
                        PostProcessContent(childContent, k + 1, userDefinedValue++);
                    }
                }                
                
                dataTree.ExpandAll();
                UpdateProductTypeCount(newContent.ProductType, 1);
                PostProcessContent(newContent, i + 1, userDefinedValue++);
            }
        }

        private void generateTestDataToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStripProgressBar1.Value = 0;
            toolStripProgressBar1.Maximum = 0;
            toolStripProgressBar1.Minimum = 0;

            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.* ";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                statusUpdatedCallback("Beginning test data generation...", null, toolStripProgressBar1.Maximum, toolStripProgressBar1.Step);

                Thread generationThread = new Thread(new ParameterizedThreadStart(GenerationWorker));
                generationThread.Start(dialog.FileName);
            }
        }

        private void clearAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (DialogResult.Yes ==
                MessageBox.Show("Are you sure you want to remove all of the items below?",
                "Removal Confirmation",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question))
            {
                testContent.Clear();
                dataTree.Nodes.Clear();
                propertyGrid1.SelectedObject = null;
            }
        }

        private void saveConfigurationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            StringBuilder stringBuilder = new StringBuilder();

            List<ContentBase> content = new List<ContentBase>();
            foreach (TreeNode node in dataTree.Nodes)
            {
                    content.Add(testContent[node]);             
            }

            MemoryStream memoryStream = new MemoryStream();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(memoryStream, Encoding.UTF8);
            XmlSerializer serializer = new XmlSerializer(
                content.GetType(),
                new Type[] { typeof(BundleContent) });

            serializer.Serialize(xmlTextWriter, content);
            memoryStream = (MemoryStream)xmlTextWriter.BaseStream;
            stringBuilder.Append(Encoding.UTF8.GetString(memoryStream.ToArray()));
            
            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.* ";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                StreamWriter writer = new StreamWriter(dialog.FileName);
                writer.Write(stringBuilder.ToString());
                writer.Close();
            }
        }

        private void loadConfigurationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.* ";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                dataTree.Nodes.Clear();
                testContent.Clear();

                StreamReader reader = new StreamReader(dialog.FileName);
                string serialized = reader.ReadToEnd();
                reader.Close();

                MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(serialized));
                XmlSerializer serializer = new XmlSerializer(
                    typeof(List<ContentBase>),
                    new Type[] { typeof(BundleContent) } );

                List<ContentBase> content = (List<ContentBase>)serializer.Deserialize(stream);
                TreeNode node = null;
                TreeNode childNode = null;

                foreach (ContentBase parentContent in content)
                {
                    StripXboxLiveGamesCategory(parentContent);
                    node = dataTree.Nodes.Add(parentContent.ProductType.ToString());
                    testContent.Add(node, parentContent);
                    UpdateProductTypeCount(parentContent.ProductType, 1);

                    foreach (ContentBase childContent in parentContent.RelatedContent)
                    {
                        StripXboxLiveGamesCategory(childContent);
                        childNode = node.Nodes.Add(childContent.ProductType.ToString());
                        testContent.Add(childNode, childContent);
                        UpdateProductTypeCount(childContent.ProductType, 1);
                    }
                }

                dataTree.ExpandAll();
            }
        }

        private void addToolStripMenuItem_Click(object sender, EventArgs e)
        {
            button1_Click(sender, e);
        }

        private void removeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            button2_Click(sender, e);
        }

        private void expandToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dataTree.ExpandAll();
        }

        private void collapseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dataTree.CollapseAll();
        }

        #endregion

        #region Helper Methods

        private void StripXboxLiveGamesCategory(ContentBase content)
        {
            //because there is always an Xbox LIVE Games category when a new instance
            //of ContentBase, remove it from the newly created instance.  If it had been
            //saved there will be two at instantiation and one will be left after this process.
            for (int i = 0; i < content.Categories.Count; i++)
            {
                if (content.Categories[i].Name == "Xbox LIVE Games")
                {
                    content.Categories.Remove(content.Categories[i]);
                    break;
                }
            }
        }

        private void UpdateProductTypeCount(ProductType productType, int modification)
        {
            if (!productTypeCounts.ContainsKey(productType))
            {
                productTypeCounts.Add(productType, 1);
            }
            else
            {
                productTypeCounts[productType] += modification;
            }

            if (productTypeCounts[productType] < 0)
            {
                productTypeCounts[productType] = 0;
            }
        }

        #endregion

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\AppLogReplay\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("AppLogReplay")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("AppLogReplay")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("02481400-a71a-42ad-9836-56c0f801a19a")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\WebServiceQueryTest\QueryTestApp.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Collections;
using System.Configuration;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Web;
using System.Xml;

using AppLogReplay;

namespace WebServiceQueryTest
{
    public partial class QueryTestApp : Form
    {
        #region Fields

        private const int BUFFER_COUNT = 1000;        
        private static Random random = new Random();        
        private static string stressInstanceLogFile = "_" + DateTime.Now.Month + DateTime.Now.Day + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".csv";
        private static Dictionary<string, long> maxMillisecondReturnTime = new Dictionary<string,long>();
        private static Dictionary<HttpWebRequest, DateTime> requestLifetimes = new Dictionary<HttpWebRequest, DateTime>();
        private static Dictionary<string, List<string>> frontDoorTestcaseTable = new Dictionary<string, List<string>>();
        private static Dictionary<string, Dictionary<string, bool>> cacheHitTestcases = new Dictionary<string, Dictionary<string, bool>>();
        private static Dictionary<string, List<string>> cacheHitRandomList = new Dictionary<string, List<string>>();
        private Dictionary<string, double> targetRates = new Dictionary<string, double>();
        private Dictionary<string, double> remainderRates = new Dictionary<string, double>();
        private Dictionary<string, Thread> persistentRateControllers = new Dictionary<string, Thread>();
        private ReplayStress replay = new ReplayStress("127.0.0.1", "/Catalog/catalog.asmx/Query");

        #endregion

        #region Constructor and Initialization

        public QueryTestApp()
        {
            InitializeComponent();
        }

        public void Initialize(string serviceIP, string verb, string webServiceUrl, string rateFile, string querySampleFile, string rampup, string cacheRatio, bool run)
        {
            InitializeControls();   

            //initialize default values
            if (String.Empty == serviceIP)
            {
                serviceIP = "127.0.0.1";
            }
            else
            {
                replay.ServiceIP = serviceIP;
            }

            replay.RequestVerb = verb;

            replay.ServiceURL = webServiceUrl;

            frontDoorVIPTextBox.Text = serviceIP;

            rampupTextBox.Text = rampup != String.Empty ? rampup : rampupTextBox.Text;

            cacheRatioTextBox.Text = cacheRatio != String.Empty ? cacheRatio : cacheRatioTextBox.Text;

            //load a default application log if passed in
            if (String.Empty != querySampleFile &&
                File.Exists(querySampleFile))
            {
                replay.LoadApplicationLog(querySampleFile);
                UpdateDataGrid();
            }

            //load stress rates from file if specified
            if (String.Empty != rateFile &&
                File.Exists(rateFile))
            {
                XmlDocument doc = new XmlDocument();
                doc.Load(rateFile);
                XmlElement root = doc.DocumentElement;
                XmlNodeList nodes = root.SelectNodes("/StressRates/API");

                foreach (XmlNode node in nodes)
                {
                    string name = node["Name"].InnerText;
                    double rate = Convert.ToDouble(node["Rate"].InnerText);
                    int cacheDuration = Convert.ToInt16(node["CacheDuration"].InnerText);
                    bool rolling = Boolean.Parse(node["Rolling"].InnerText);

                    for (int i = 0; i < dataGridView1.RowCount; i++)
                    {
                        if (dataGridView1[0, i].Value != null &&
                            dataGridView1[0, i].Value.ToString() == name)
                        {
                            dataGridView1[1, i].Value = rate;
                            dataGridView1[2, i].Value = cacheDuration;
                            dataGridView1[3, i].Value = rolling == true ? "Rolling" : "Aligned";
                        }
                    }
                }            
            }
            
            if (run)
            {
                button1_Click(this, null);
            }
        }

        private void InitializeControls()
        {
            DataGridViewComboBoxColumn comboColumn = new DataGridViewComboBoxColumn();
            comboColumn.DataPropertyName = "cacheType";
            comboColumn.HeaderText = "Rolling / Aligned Cache";
            comboColumn.DataSource = new string[] { "Rolling", "Aligned" };
            comboColumn.ReadOnly = false;
            dataGridView1.Columns.Add("apiName", "API");
            dataGridView1.Columns.Add("tpsSetting", "TPS");
            dataGridView1.Columns.Add("cacheDuration", "Cache Duration (min)");
            dataGridView1.Columns.Add("cacheType", "Rolling / Aligned Cache");
            dataGridView1.Columns.Add("queryCount", "Available Queries");

            comboBox1.Items.Add("Aligned");
            comboBox1.Items.Add("Rolling");
        }

        #endregion

        private void button1_Click(object sender, EventArgs e)
        {
            if (button1.Text == "Go" ||
                button1.Text == "Start")
            {
                button1.Text = "Stop";
                replay.ServiceIP = frontDoorVIPTextBox.Text;
                replay.RampupSeconds = Convert.ToDouble(rampupTextBox.Text);

                string apiName = String.Empty;
                string tpsString = String.Empty;
                int cacheDuration = 60;

                //set API specific values before starting stress
                for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                {
                    apiName = dataGridView1["apiName", i].Value.ToString();
                    tpsString = dataGridView1["tpsSetting", i].Value.ToString();
                    cacheDuration = Convert.ToInt32(dataGridView1["cacheDuration", i].Value);
                    replay.Methods[apiName].Rate = Convert.ToDouble(tpsString);
                    replay.Methods[apiName].CacheHitTarget = Convert.ToDouble(cacheRatioTextBox.Text);
                    replay.Methods[apiName].CacheDuration = cacheDuration;
                    replay.Methods[apiName].UseRollingCache = 
                        Convert.ToString(dataGridView1["cacheType",i].Value) == "Rolling" ? true : false;

                    if (cacheRatioTextBox.Text == "0")
                    {
                        replay.Methods[apiName].UsingCache = false;
                    }                    
                }

                replay.StartExecution();
            }
            else
            {
                replay.StopExecution();
                button1.Text = "Start";
            }
        }
               
        
        private string DecompressGzipResponse(byte[] compressedData)
        {
            Stream compressedStream = new MemoryStream(compressedData);
            compressedStream = new GZipStream(compressedStream, CompressionMode.Decompress);

            StreamReader decompressionReader = new StreamReader(compressedStream, Encoding.Default);

            string decompressedData = String.Empty;
            decompressedData = decompressionReader.ReadToEnd();
            
            return decompressedData;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
                  
        }

        void dataGridView1_KeyDown(object sender, KeyEventArgs e)
        {
            //allow for some key inputs and processing when Enter is hit
            if (e.KeyCode == Keys.Enter)
            {
                int i = 0;
                for(; i < dataGridView1.RowCount; i++)
                    if(dataGridView1.Rows[i].Cells[0] == dataGridView1.SelectedRows[0].Cells[0])
                        break;

                if (i + 1 < dataGridView1.RowCount)
                    dataGridView1.Rows[i + 1].Selected = true;

                if (dataGridView1.Rows[i].Cells[3].Value.ToString().ToLower().StartsWith("a"))
                    dataGridView1.Rows[i].Cells[3].Value = "Aligned";
                else
                    dataGridView1.Rows[i].Cells[3].Value = "Rolling";
                        
                e.SuppressKeyPress = true;
            }
        }

        void dataGridView1_KeyPress(object sender, KeyPressEventArgs e)
        {
            //pass a key press through to the input value text box
            textBox1.Text = String.Empty;
            textBox1.Select();
            SendKeys.Send(Convert.ToString(e.KeyChar));             
        }

        void dataGridView1_SelectionChanged(object sender, EventArgs e)
        {
            //display the currently selected row's data for edit
            if (dataGridView1.SelectedRows.Count > 0)
            {
                textBox1.Text = dataGridView1.SelectedRows[0].Cells[1].Value.ToString();
                textBox5.Text = dataGridView1.SelectedRows[0].Cells[2].Value.ToString();
                comboBox1.Text = dataGridView1.SelectedRows[0].Cells[3].Value.ToString();            
            }
        }
        
        void textBox1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                dataGridView1.SelectedRows[0].Cells["tpsSetting"].Value = textBox1.Text;
                dataGridView1.Select();
                e.SuppressKeyPress = true;
            }
        }

    

        private void openTestFilesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Multiselect = true;

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                foreach (string file in dialog.FileNames)
                {
                    replay.LoadApplicationLog(file);                    
                }
            }

            UpdateDataGrid();            
        }


        private void UpdateDataGrid()
        {
            int availableRow = 0;
            List<string> sortedAPIList = new List<string>(replay.Methods.Keys);
            sortedAPIList.Sort();

            //set default values for each of the loaded APIs
            foreach (string availableAPI in sortedAPIList)
            {
                dataGridView1.Rows.Add(1);
                dataGridView1[0, availableRow].Value = availableAPI;
                dataGridView1[1, availableRow].Value = 0;
                dataGridView1[2, availableRow].Value = 60;
                dataGridView1[3, availableRow].Value = "Rolling";
                dataGridView1[4, availableRow].Value = replay.Methods[availableAPI].UrlsToExecute.Count;
                availableRow++;
            }

            dataGridView1.RowStateChanged += new DataGridViewRowStateChangedEventHandler(dataGridView1_RowStateChanged);
            dataGridView1.SelectionChanged += new EventHandler(dataGridView1_SelectionChanged);
            dataGridView1.KeyPress += new KeyPressEventHandler(dataGridView1_KeyPress);
            dataGridView1.KeyDown += new KeyEventHandler(dataGridView1_KeyDown);
            textBox1.KeyDown += new KeyEventHandler(textBox1_KeyDown);

            dataGridView1.Select();

            if (dataGridView1.SelectedRows.Count > 0)
            {
                textBox1.Text = dataGridView1.SelectedRows[0].Cells[1].Value.ToString();
                textBox5.Text = dataGridView1.SelectedRows[0].Cells[2].Value.ToString();
                comboBox1.Text = dataGridView1.SelectedRows[0].Cells[3].Value.ToString();
            }
        }

        void dataGridView1_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView1.SelectedRows.Count > 1)
            {
                textBox1.Text = dataGridView1.SelectedRows[0].Cells[1].Value.ToString();
                textBox5.Text = dataGridView1.SelectedRows[0].Cells[2].Value.ToString();
                comboBox1.Text = dataGridView1.SelectedRows[0].Cells[3].Value.ToString();
            }
        }

        private void clearTestFilesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dataGridView1.Rows.Clear();
            frontDoorTestcaseTable.Clear();
            targetRates.Clear();
            remainderRates.Clear();
            replay.Methods.Clear();

            dataGridView1.RowStateChanged -= new DataGridViewRowStateChangedEventHandler(dataGridView1_RowStateChanged);
            dataGridView1.SelectionChanged -= new EventHandler(dataGridView1_SelectionChanged);
            dataGridView1.KeyPress -= new KeyPressEventHandler(dataGridView1_KeyPress);
            dataGridView1.KeyDown -= new KeyEventHandler(dataGridView1_KeyDown);
            textBox1.KeyDown -= new KeyEventHandler(textBox1_KeyDown);
        }


        private void textBox3_TextChanged(object sender, EventArgs e)
        {
            replay.CacheHitPercentage = Convert.ToDouble(cacheRatioTextBox.Text);   
        }
        

        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton1.Checked)
            {
                replay.UseReplay = true;
            }
            else
            {
                replay.UseReplay = false;
            }
        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {
            dataGridView1.SelectedRows[0].Cells[2].Value = textBox5.Text;
        }
                
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            dataGridView1.SelectedRows[0].Cells[3].Value = comboBox1.Text;
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            dataGridView1.SelectedRows[0].Cells[1].Value = textBox1.Text;
        }

        private void catalogStressNetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frontDoorVIPTextBox.Text = "10.184.224.1";
        }

        private void catalogStressNet2ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frontDoorVIPTextBox.Text = "10.193.109.94";            
        }
    }  
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\WebServiceQueryTest\QueryTestApp.Designer.cs ===
﻿namespace WebServiceQueryTest
{
    partial class QueryTestApp
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.button1 = new System.Windows.Forms.Button();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.dataGridView1 = new System.Windows.Forms.DataGridView();
            this.rampupTextBox = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openTestFilesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.clearTestFilesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.frontDoorVIPAddressToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.frontDoorVIPTextBox = new System.Windows.Forms.ToolStripTextBox();
            this.useEnvironmentVIPToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.catalogStressNetToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.catalogStressNet2ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.label2 = new System.Windows.Forms.Label();
            this.cacheRatioTextBox = new System.Windows.Forms.TextBox();
            this.label3 = new System.Windows.Forms.Label();
            this.textBox4 = new System.Windows.Forms.TextBox();
            this.radioButton1 = new System.Windows.Forms.RadioButton();
            this.radioButton2 = new System.Windows.Forms.RadioButton();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.textBox5 = new System.Windows.Forms.TextBox();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.label4 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.label6 = new System.Windows.Forms.Label();
            ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).BeginInit();
            this.menuStrip1.SuspendLayout();
            this.groupBox1.SuspendLayout();
            this.SuspendLayout();
            // 
            // button1
            // 
            this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.button1.Location = new System.Drawing.Point(12, 28);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(621, 29);
            this.button1.TabIndex = 0;
            this.button1.Text = "Go";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // textBox1
            // 
            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBox1.Location = new System.Drawing.Point(282, 393);
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(115, 20);
            this.textBox1.TabIndex = 2;
            this.textBox1.Text = "1";
            this.textBox1.TextChanged += new System.EventHandler(this.textBox1_TextChanged);
            // 
            // dataGridView1
            // 
            this.dataGridView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.dataGridView1.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dataGridView1.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dataGridView1.EditMode = System.Windows.Forms.DataGridViewEditMode.EditProgrammatically;
            this.dataGridView1.Location = new System.Drawing.Point(12, 63);
            this.dataGridView1.MultiSelect = false;
            this.dataGridView1.Name = "dataGridView1";
            this.dataGridView1.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dataGridView1.Size = new System.Drawing.Size(621, 321);
            this.dataGridView1.TabIndex = 3;
            // 
            // rampupTextBox
            // 
            this.rampupTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.rampupTextBox.Location = new System.Drawing.Point(121, 440);
            this.rampupTextBox.Name = "rampupTextBox";
            this.rampupTextBox.Size = new System.Drawing.Size(64, 20);
            this.rampupTextBox.TabIndex = 5;
            this.rampupTextBox.Text = "5";
            // 
            // label1
            // 
            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(5, 443);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(108, 13);
            this.label1.TabIndex = 6;
            this.label1.Text = "Ramp Up in Seconds";
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.optionsToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(645, 24);
            this.menuStrip1.TabIndex = 7;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.openTestFilesToolStripMenuItem,
            this.clearTestFilesToolStripMenuItem,
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // openTestFilesToolStripMenuItem
            // 
            this.openTestFilesToolStripMenuItem.Name = "openTestFilesToolStripMenuItem";
            this.openTestFilesToolStripMenuItem.Size = new System.Drawing.Size(156, 22);
            this.openTestFilesToolStripMenuItem.Text = "&Open App Logs";
            this.openTestFilesToolStripMenuItem.Click += new System.EventHandler(this.openTestFilesToolStripMenuItem_Click);
            // 
            // clearTestFilesToolStripMenuItem
            // 
            this.clearTestFilesToolStripMenuItem.Name = "clearTestFilesToolStripMenuItem";
            this.clearTestFilesToolStripMenuItem.Size = new System.Drawing.Size(156, 22);
            this.clearTestFilesToolStripMenuItem.Text = "&Clear App Logs";
            this.clearTestFilesToolStripMenuItem.Click += new System.EventHandler(this.clearTestFilesToolStripMenuItem_Click);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(156, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.frontDoorVIPAddressToolStripMenuItem});
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // frontDoorVIPAddressToolStripMenuItem
            // 
            this.frontDoorVIPAddressToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.frontDoorVIPTextBox,
            this.useEnvironmentVIPToolStripMenuItem});
            this.frontDoorVIPAddressToolStripMenuItem.Name = "frontDoorVIPAddressToolStripMenuItem";
            this.frontDoorVIPAddressToolStripMenuItem.Size = new System.Drawing.Size(196, 22);
            this.frontDoorVIPAddressToolStripMenuItem.Text = "Front Door VIP Address";
            // 
            // frontDoorVIPTextBox
            // 
            this.frontDoorVIPTextBox.Name = "frontDoorVIPTextBox";
            this.frontDoorVIPTextBox.Size = new System.Drawing.Size(157, 23);
            this.frontDoorVIPTextBox.Text = "10.193.109.222";
            // 
            // useEnvironmentVIPToolStripMenuItem
            // 
            this.useEnvironmentVIPToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.catalogStressNetToolStripMenuItem,
            this.catalogStressNet2ToolStripMenuItem});
            this.useEnvironmentVIPToolStripMenuItem.Name = "useEnvironmentVIPToolStripMenuItem";
            this.useEnvironmentVIPToolStripMenuItem.Size = new System.Drawing.Size(217, 22);
            this.useEnvironmentVIPToolStripMenuItem.Text = "Use Environment VIP";
            // 
            // catalogStressNetToolStripMenuItem
            // 
            this.catalogStressNetToolStripMenuItem.Name = "catalogStressNetToolStripMenuItem";
            this.catalogStressNetToolStripMenuItem.Size = new System.Drawing.Size(181, 22);
            this.catalogStressNetToolStripMenuItem.Text = "Catalog - StressNet";
            this.catalogStressNetToolStripMenuItem.Click += new System.EventHandler(this.catalogStressNetToolStripMenuItem_Click);
            // 
            // catalogStressNet2ToolStripMenuItem
            // 
            this.catalogStressNet2ToolStripMenuItem.Name = "catalogStressNet2ToolStripMenuItem";
            this.catalogStressNet2ToolStripMenuItem.Size = new System.Drawing.Size(181, 22);
            this.catalogStressNet2ToolStripMenuItem.Text = "Catalog - StressNet2";
            this.catalogStressNet2ToolStripMenuItem.Click += new System.EventHandler(this.catalogStressNet2ToolStripMenuItem_Click);
            // 
            // label2
            // 
            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(50, 393);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(65, 13);
            this.label2.TabIndex = 9;
            this.label2.Text = "Cache Hit %";
            // 
            // cacheRatioTextBox
            // 
            this.cacheRatioTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.cacheRatioTextBox.Location = new System.Drawing.Point(121, 390);
            this.cacheRatioTextBox.Name = "cacheRatioTextBox";
            this.cacheRatioTextBox.Size = new System.Drawing.Size(26, 20);
            this.cacheRatioTextBox.TabIndex = 8;
            this.cacheRatioTextBox.Text = "95";
            this.cacheRatioTextBox.TextChanged += new System.EventHandler(this.textBox3_TextChanged);
            // 
            // label3
            // 
            this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(50, 419);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(63, 13);
            this.label3.TabIndex = 12;
            this.label3.Text = "Log Sample";
            // 
            // textBox4
            // 
            this.textBox4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBox4.Location = new System.Drawing.Point(121, 414);
            this.textBox4.Name = "textBox4";
            this.textBox4.Size = new System.Drawing.Size(64, 20);
            this.textBox4.TabIndex = 11;
            this.textBox4.Text = "100";
            // 
            // radioButton1
            // 
            this.radioButton1.AutoSize = true;
            this.radioButton1.Enabled = false;
            this.radioButton1.Location = new System.Drawing.Point(10, 19);
            this.radioButton1.Name = "radioButton1";
            this.radioButton1.Size = new System.Drawing.Size(58, 17);
            this.radioButton1.TabIndex = 14;
            this.radioButton1.Text = "Replay";
            this.radioButton1.UseVisualStyleBackColor = true;
            this.radioButton1.CheckedChanged += new System.EventHandler(this.radioButton1_CheckedChanged);
            // 
            // radioButton2
            // 
            this.radioButton2.AutoSize = true;
            this.radioButton2.Checked = true;
            this.radioButton2.Location = new System.Drawing.Point(10, 42);
            this.radioButton2.Name = "radioButton2";
            this.radioButton2.Size = new System.Drawing.Size(85, 17);
            this.radioButton2.TabIndex = 15;
            this.radioButton2.TabStop = true;
            this.radioButton2.Text = "TPS Targets";
            this.radioButton2.UseVisualStyleBackColor = true;
            // 
            // groupBox1
            // 
            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.groupBox1.Controls.Add(this.radioButton1);
            this.groupBox1.Controls.Add(this.radioButton2);
            this.groupBox1.Location = new System.Drawing.Point(518, 390);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(115, 68);
            this.groupBox1.TabIndex = 16;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Stress Type";
            // 
            // textBox5
            // 
            this.textBox5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBox5.Location = new System.Drawing.Point(282, 416);
            this.textBox5.Name = "textBox5";
            this.textBox5.Size = new System.Drawing.Size(115, 20);
            this.textBox5.TabIndex = 17;
            this.textBox5.TextChanged += new System.EventHandler(this.textBox5_TextChanged);
            // 
            // comboBox1
            // 
            this.comboBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.comboBox1.FormattingEnabled = true;
            this.comboBox1.Location = new System.Drawing.Point(282, 440);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(121, 21);
            this.comboBox1.TabIndex = 19;
            this.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);
            // 
            // label4
            // 
            this.label4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(198, 396);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(28, 13);
            this.label4.TabIndex = 20;
            this.label4.Text = "TPS";
            // 
            // label5
            // 
            this.label5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(198, 419);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(81, 13);
            this.label5.TabIndex = 21;
            this.label5.Text = "Cache Duration";
            // 
            // label6
            // 
            this.label6.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(198, 443);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(65, 13);
            this.label6.TabIndex = 22;
            this.label6.Text = "Cache Type";
            // 
            // QueryTestApp
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(645, 463);
            this.Controls.Add(this.label6);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.comboBox1);
            this.Controls.Add(this.textBox5);
            this.Controls.Add(this.groupBox1);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.textBox4);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.cacheRatioTextBox);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.rampupTextBox);
            this.Controls.Add(this.dataGridView1);
            this.Controls.Add(this.textBox1);
            this.Controls.Add(this.button1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "QueryTestApp";
            this.Text = "Application Log Stress ";
            this.Load += new System.EventHandler(this.Form1_Load);
            ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).EndInit();
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.TextBox textBox1;
        private System.Windows.Forms.DataGridView dataGridView1;
        private System.Windows.Forms.TextBox rampupTextBox;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openTestFilesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem clearTestFilesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem frontDoorVIPAddressToolStripMenuItem;
        private System.Windows.Forms.ToolStripTextBox frontDoorVIPTextBox;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox cacheRatioTextBox;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox textBox4;
        private System.Windows.Forms.RadioButton radioButton1;
        private System.Windows.Forms.RadioButton radioButton2;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.TextBox textBox5;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.ToolStripMenuItem useEnvironmentVIPToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem catalogStressNetToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem catalogStressNet2ToolStripMenuItem;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\WebServiceQueryTest\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebServiceQueryTest.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WebServiceQueryTest.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\WebServiceQueryTest\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Reflection;
using System.Windows.Forms;

using NamedArgParser;

namespace WebServiceQueryTest
{
    static class Program
    {
        private const string CATALOG_INTERFACE_QUERY = "SELECT vc_ip FROM t_site_virtual_interface_ips WHERE vc_environment='{0}' AND vc_virtual_interface='{1}'";
        private const string CONNECTION_STRING_BASE = "Data Source={0};Initial Catalog={1};Integrated Security=SSPI;Pooling=True;Max Pool Size=250";

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main(string[] args)
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            Configuration config = ConfigurationManager.OpenExeConfiguration(System.Reflection.Assembly.GetExecutingAssembly().Location);

            NamedArgsCollection argumentCollection = new NamedArgsCollection();
            
            // parse the command line arguments
            using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("WebServiceQueryTest.Resources.Usage.xml"))
            {
                argumentCollection.Parse(stream, args, new DisplayUsageCallback(DisplayUsage));
            }

            string webServiceUrl = config.AppSettings.Settings["WebServiceUrl"] != null ? config.AppSettings.Settings["WebServiceUrl"].Value : String.Empty;
            string requestVerb = config.AppSettings.Settings["RequestVerb"].Value;
            string rateFile = config.AppSettings.Settings["RateFile"].Value;
            string querySampleFile = config.AppSettings.Settings["QuerySampleFile"].Value;
            string rampUp = config.AppSettings.Settings["RampUp"].Value;
            string cacheRatio = config.AppSettings.Settings["CacheRatio"].Value;
            
            string npdbAddress = argumentCollection["npdb"] != null ? argumentCollection["npdb"] : String.Empty;
            string environment = argumentCollection["environment"] != null ? argumentCollection["environment"] : String.Empty;
            string interfaceName = argumentCollection["interface"] != null ? argumentCollection["interface"] : String.Empty;
            bool run = argumentCollection["run"] != null ? true : false;
            
            string serviceIP = String.Empty != npdbAddress ? serviceIP = FindServiceIP(npdbAddress, environment, interfaceName) : "127.0.0.1";
            
            QueryTestApp queryTestApp = new QueryTestApp();
            queryTestApp.Initialize(
                serviceIP,
                requestVerb,
                webServiceUrl,
                rateFile,
                querySampleFile,
                rampUp,
                cacheRatio,
                run);
            Application.Run(queryTestApp);
        }

        private static string FindServiceIP(string npdbAddress, string environment, string interfaceName)
        {
            string serviceIP = "127.0.0.1";
            string query = String.Format(CATALOG_INTERFACE_QUERY, environment, interfaceName);
            string connectionString = String.Format(CONNECTION_STRING_BASE, npdbAddress, "npdb");

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    using (SqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = query;

                        connection.Open();

                        using (SqlDataReader reader = command.ExecuteReader(CommandBehavior.CloseConnection))
                        {
                            reader.Read();
                            serviceIP = Convert.ToString(reader[0]);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine(ex.ToString());
            }

            return serviceIP;
        }

        /// <summary>
        /// Displays the program usage
        /// </summary>
        /// <param name="usage">The usage string to display</param>
        private static void DisplayUsage(string usage)
        {
            Console.WriteLine(usage);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\WebServiceQueryTest\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WebServiceQueryTest")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("WebServiceQueryTest")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("1b3e969b-f0e7-4552-900a-6a1858a785db")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\WebServiceStress\WebServiceQueryTest\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebServiceQueryTest.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\dev\XboxDotComDev\XboxDotComDev\Constants.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XboxDotComDev
{
    class Constants
    {
        internal static readonly String ConnectionString = "Data Source=(local);Initial Catalog=RawCatalogDB;Integrated Security=SSPI;Pooling=True;Max Pool Size=250";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\dev\XboxDotComDev\XboxDotComDev\DatabaseSetup.cs ===
﻿using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TeamSystem.Data.UnitTesting;

namespace XboxDotComDev
{
    [TestClass()]
    public class DatabaseSetup
    {

        [AssemblyInitialize()]
        public static void IntializeAssembly(TestContext ctx)
        {
            //   Setup the test database based on setting in the
            // configuration file
            DatabaseTestClass.TestService.DeployDatabaseProject();
            DatabaseTestClass.TestService.GenerateData();
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\dev\XboxDotComDev\XboxDotComDev\PopulateCatalogFromWorkVideo.cs ===
﻿using System;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace XboxDotComDev
{
    /// <summary>
    /// Summary description for UnitTest1
    /// </summary>
    [TestClass]
    public class PopulateCatalogFromWorkVideo
    {
        public PopulateCatalogFromWorkVideo()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        private Guid SingleRecordLoad_GameId = new Guid("00010153-001D-0001-0311-000000000000");
        private Guid SingleRecordLoad_VideoId = new Guid("364A2B87-CBD9-423e-8719-B61A68EC003D");
        private Guid SingleRecordLoad_VideoInstanceId = new Guid("EF5C998F-0884-4b29-95A7-3CF03A8DBB70");

        [TestMethod]
        [TestProperty("Data", "Video" )]
        [TestProperty("Stage", "PopulateCatalogFromWork" )]
        public void SingleRecordLoad()
        {
            String fileUrl = "http://ajaffray.com";

            CleanupVideoRecords(SingleRecordLoad_VideoId, SingleRecordLoad_VideoInstanceId);
            TruncateWorkGameFeedVideo();
            CreateWorkGameFeedVideo(SingleRecordLoad_GameId, SingleRecordLoad_VideoId, SingleRecordLoad_VideoInstanceId, "http://ajaffray.com");

            RunGameFeedPreviewVideoPopulate();

            VerifyRecordsAdded(SingleRecordLoad_GameId, SingleRecordLoad_VideoId, SingleRecordLoad_VideoInstanceId, fileUrl);
        }

        // Creates a row in the Work_GameFeedVideo table
        private void CreateWorkGameFeedVideo(Guid gameId, Guid videoId, Guid videoInstanceId, String url)
        {
            StringBuilder cmdString = new StringBuilder();
            cmdString.Append("insert Work_GameFeedVideo ( titleId ,consoleType ,lcid ,metadataProviderid ,fileUrl ,mediaRelationshipTypeId ,gameMediaId ,videoMediaId ,videoMediaInstanceId )");
            cmdString.Append("values (");
            cmdString.Append("1 ,'xbox 360' ,1033 ,81");
            cmdString.Append(String.Format(", '{0}'", url));
            cmdString.Append(",30 ");
            cmdString.Append(String.Format(", '{0}'", gameId));
            cmdString.Append(String.Format(", '{0}'", videoId));
            cmdString.Append(String.Format(", '{0}')", videoInstanceId));

            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = cmdString.ToString();
                command.Connection.Open();
                command.ExecuteNonQuery();
            }
        }

        // Truncate the Work_GameFeedVideo table
        private void TruncateWorkGameFeedVideo()
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = "truncate table Work_GameFeedVideo";
                command.Connection.Open();
                command.ExecuteNonQuery();
            }
        }

        // Populate the catalog from Work_GameFeedVideo
        private void RunGameFeedPreviewVideoPopulate()
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = "exec GameFeedPreviewVideoPopulate";
                command.Connection.Open();
                command.ExecuteNonQuery();
            }
        }

        public void CleanupVideoRecords( Guid videoId, Guid videoInstanceId )
        {
            String[] commands = new String[7];
            
            commands[0] = String.Format( "delete VideoFile where videoMediaInstanceId = '{0}'", videoInstanceId );
            commands[1] = String.Format( "delete VideoInstance where videoMediaInstanceId = '{0}'", videoInstanceId );
            commands[2] = String.Format( "delete PreviewMediaInstance where previewMediaInstanceId = '{0}'", videoInstanceId );
            commands[3] = String.Format( "delete MediaInstance where mediaInstanceId = '{0}'", videoInstanceId );
            commands[4] = String.Format( "delete Video where videoMediaId = '{0}'", videoId );
            commands[5] = String.Format( "delete MediaRelationship where relatedMediaId = '{0}'", videoId );
            commands[6] = String.Format( "delete Media where mediaId = '{0}'", videoId );

            foreach (String cmdString in commands)
            {
                using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
                {
                    SqlCommand command = new SqlCommand();
                    command.Connection = connection;
                    command.CommandText = cmdString;
                    command.Connection.Open();
                    command.ExecuteNonQuery();
                }
            }
        }

        public void VerifyRecordsAdded( Guid gameId, Guid videoId, Guid videoInstanceId, String expectedFileUrl)
        {
            VerifyMediaRecord( videoId );
            VerifyMediaRelationshipRecord(gameId, videoId);
            VerifyVideoRecord( videoId );
            VerifyMediaInstanceRecord(videoId, videoInstanceId);
            VerifyPreviewMediaInstanceRecord(videoInstanceId);
            VerifyVideoInstanceRecord(videoInstanceId);
            VerifyVideoFileRecord(videoInstanceId, expectedFileUrl);
        }

        public void VerifyMediaRecord( Guid videoId )
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = String.Format("select 1 from Media where mediaId = '{0}'",videoId.ToString());
                command.Connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    Assert.IsTrue(reader.Read(), String.Format("Found no Media records matching videoId = {0}", videoId));
                }
            }
        }

        public void VerifyMediaRelationshipRecord(Guid gameId, Guid videoId)
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = String.Format("select 1 from MediaRelationship where mediaId = '{0}' and relatedMediaId = '{1}' and mediaRelationshipTypeId = 21", gameId.ToString(), videoId.ToString());
                command.Connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    Assert.IsTrue(reader.Read(), String.Format("Found no MediaRelationship records matching mediaId = {0}, relatedMediaId = {1}, relationship = 21", gameId.ToString(), videoId.ToString()));
                }
            }
        }

        public void VerifyVideoRecord(Guid videoId)
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = String.Format("select 1 from Video where videoMediaId = '{0}'", videoId.ToString());
                command.Connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    Assert.IsTrue(reader.Read(), String.Format("Found no Video records matching mediaId = {0}", videoId.ToString()));
                }
            }
        }

        public void VerifyMediaInstanceRecord(Guid videoId, Guid videoInstanceId)
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = String.Format("select 1 from MediaInstance where mediaId = '{0}' and mediaInstanceId = '{1}'", videoId.ToString(), videoInstanceId.ToString());
                command.Connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    Assert.IsTrue(reader.Read(), String.Format("Found no MediaInstance records matching videoId = {0} and mediaInstanceId = {1}", videoId.ToString(), videoInstanceId.ToString()));
                }
            }
        }

        public void VerifyPreviewMediaInstanceRecord(Guid videoInstanceId)
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = String.Format("select 1 from PreviewMediaInstance where PreviewMediaInstanceId = '{0}'", videoInstanceId.ToString());
                command.Connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    Assert.IsTrue(reader.Read(), String.Format("Found no PreviewMediaInstance records matching videoInstanceId = {0}", videoInstanceId.ToString()));
                }
            }
        }

        public void VerifyVideoInstanceRecord(Guid videoInstanceId)
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = String.Format("select 1 from VideoInstance where videoMediaInstanceId = '{0}'", videoInstanceId.ToString());
                command.Connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    Assert.IsTrue(reader.Read(), String.Format("Found no VideoInstance records matching videoInstanceId = {0}", videoInstanceId.ToString()));
                }
            }
        }

        public void VerifyVideoFileRecord(Guid videoInstanceId, String expectedFileUrl)
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = String.Format("select fileUrl from VideoFile where videoMediaInstanceId = '{0}'", videoInstanceId.ToString());
                command.Connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    Assert.IsTrue(reader.Read(), String.Format("Found no VideoInstance records matching videoInstanceId = {0}", videoInstanceId.ToString()));
                    String fileUrl = reader.GetString(0);
                    Assert.AreEqual(expectedFileUrl, fileUrl);
                }
            }
        }

        public String GetVideoUrl(Guid videoInstanceId)
        {
            using (SqlConnection connection = new SqlConnection(Constants.ConnectionString))
            {
                SqlCommand command = new SqlCommand();
                command.Connection = connection;
                command.CommandText = String.Format("select fileUrl from VideoFile where videoMediaInstanceId = '{0}'", videoInstanceId.ToString());
                command.Connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        return reader.GetString(0);
                    }
                }
            }
            return null;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\dev\XboxDotComDev\XboxDotComDev\GameFeedProcessXmlTests.cs ===
﻿using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TeamSystem.Data.UnitTesting;
using Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions;

namespace XboxDotComDev
{
    [TestClass()]
    public class GameFeedProcessXmlTests : DatabaseTestClass
    {

        public GameFeedProcessXmlTests()
        {
            InitializeComponent();
        }

        [TestInitialize()]
        public void TestInitialize()
        {
            base.InitializeTest();
        }
        [TestCleanup()]
        public void TestCleanup()
        {
            base.CleanupTest();
        }

        [TestMethod()]
        public void GameFeedProcessXmlTest()
        {
            DatabaseTestActions testActions = this.GameFeedProcessXmlTestData;
            // Execute the pre-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PretestAction != null), "Executing pre-test script...");
            ExecutionResult[] pretestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PretestAction);
            // Execute the test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.TestAction != null), "Executing test script...");
            ExecutionResult[] testResults = TestService.Execute(this.ExecutionContext, this.PrivilegedContext, testActions.TestAction);
            // Execute the post-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PosttestAction != null), "Executing post-test script...");
            ExecutionResult[] posttestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PosttestAction);
        }

        #region Designer support code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction testInitializeAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction GameFeedProcessXmlTest_TestAction;
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GameFeedProcessXmlTests));
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition GameCababilitiesAdded;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition MediaRatingDescriptorsAdded;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition ImagesAdded;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition VideoPreviewsAdded;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction testCleanupAction;
            this.GameFeedProcessXmlTestData = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestActions();
            testInitializeAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            GameFeedProcessXmlTest_TestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            GameCababilitiesAdded = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            MediaRatingDescriptorsAdded = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            ImagesAdded = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            VideoPreviewsAdded = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            testCleanupAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            // 
            // GameFeedProcessXmlTestData
            // 
            this.GameFeedProcessXmlTestData.PosttestAction = null;
            this.GameFeedProcessXmlTestData.PretestAction = null;
            this.GameFeedProcessXmlTestData.TestAction = GameFeedProcessXmlTest_TestAction;
            // 
            // testInitializeAction
            // 
            resources.ApplyResources(testInitializeAction, "testInitializeAction");
            // 
            // GameFeedProcessXmlTest_TestAction
            // 
            GameFeedProcessXmlTest_TestAction.Conditions.Add(GameCababilitiesAdded);
            GameFeedProcessXmlTest_TestAction.Conditions.Add(MediaRatingDescriptorsAdded);
            GameFeedProcessXmlTest_TestAction.Conditions.Add(ImagesAdded);
            GameFeedProcessXmlTest_TestAction.Conditions.Add(VideoPreviewsAdded);
            resources.ApplyResources(GameFeedProcessXmlTest_TestAction, "GameFeedProcessXmlTest_TestAction");
            // 
            // GameCababilitiesAdded
            // 
            GameCababilitiesAdded.ColumnNumber = 1;
            GameCababilitiesAdded.Enabled = true;
            GameCababilitiesAdded.ExpectedValue = "1";
            GameCababilitiesAdded.Name = "GameCababilitiesAdded";
            GameCababilitiesAdded.NullExpected = false;
            GameCababilitiesAdded.ResultSet = 1;
            GameCababilitiesAdded.RowNumber = 1;
            // 
            // MediaRatingDescriptorsAdded
            // 
            MediaRatingDescriptorsAdded.ColumnNumber = 1;
            MediaRatingDescriptorsAdded.Enabled = true;
            MediaRatingDescriptorsAdded.ExpectedValue = "2";
            MediaRatingDescriptorsAdded.Name = "MediaRatingDescriptorsAdded";
            MediaRatingDescriptorsAdded.NullExpected = false;
            MediaRatingDescriptorsAdded.ResultSet = 2;
            MediaRatingDescriptorsAdded.RowNumber = 1;
            // 
            // ImagesAdded
            // 
            ImagesAdded.ColumnNumber = 1;
            ImagesAdded.Enabled = true;
            ImagesAdded.ExpectedValue = "5";
            ImagesAdded.Name = "ImagesAdded";
            ImagesAdded.NullExpected = false;
            ImagesAdded.ResultSet = 3;
            ImagesAdded.RowNumber = 1;
            // 
            // VideoPreviewsAdded
            // 
            VideoPreviewsAdded.ColumnNumber = 1;
            VideoPreviewsAdded.Enabled = true;
            VideoPreviewsAdded.ExpectedValue = "1";
            VideoPreviewsAdded.Name = "VideoPreviewsAdded";
            VideoPreviewsAdded.NullExpected = false;
            VideoPreviewsAdded.ResultSet = 4;
            VideoPreviewsAdded.RowNumber = 1;
            // 
            // testCleanupAction
            // 
            resources.ApplyResources(testCleanupAction, "testCleanupAction");
            // 
            // GameFeedProcessXmlTests
            // 
            this.TestCleanupAction = testCleanupAction;
            this.TestInitializeAction = testInitializeAction;
        }

        #endregion


        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        #endregion

        private DatabaseTestActions GameFeedProcessXmlTestData;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\dev\XboxDotComDev\XboxDotComDev\WorkingGameFeedInsertTests.cs ===
﻿using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TeamSystem.Data.UnitTesting;
using Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions;

namespace XboxDotComDev
{
    [TestClass()]
    public class WorkingGameFeedInsertTests : DatabaseTestClass
    {

        public WorkingGameFeedInsertTests()
        {
            InitializeComponent();
        }

        [TestInitialize()]
        public void TestInitialize()
        {
            base.InitializeTest();
        }
        [TestCleanup()]
        public void TestCleanup()
        {
            base.CleanupTest();
        }

        [TestMethod()]
        public void GameFeedInsertTest()
        {
            DatabaseTestActions testActions = this.GameFeedInsertTestData;
            // Execute the pre-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PretestAction != null), "Executing pre-test script...");
            ExecutionResult[] pretestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PretestAction);
            // Execute the test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.TestAction != null), "Executing test script...");
            ExecutionResult[] testResults = TestService.Execute(this.ExecutionContext, this.PrivilegedContext, testActions.TestAction);
            // Execute the post-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PosttestAction != null), "Executing post-test script...");
            ExecutionResult[] posttestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PosttestAction);
        }
        [TestMethod()]
        public void GameFeedWorkingRatingDescriptorInsert()
        {
            DatabaseTestActions testActions = this.GameFeedWorkingRatingDescriptorInsertData;
            // Execute the pre-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PretestAction != null), "Executing pre-test script...");
            ExecutionResult[] pretestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PretestAction);
            // Execute the test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.TestAction != null), "Executing test script...");
            ExecutionResult[] testResults = TestService.Execute(this.ExecutionContext, this.PrivilegedContext, testActions.TestAction);
            // Execute the post-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PosttestAction != null), "Executing post-test script...");
            ExecutionResult[] posttestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PosttestAction);
        }
        [TestMethod()]
        public void GameFeedWorkingVideoInsert()
        {
            DatabaseTestActions testActions = this.GameFeedWorkingVideoInsertData;
            // Execute the pre-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PretestAction != null), "Executing pre-test script...");
            ExecutionResult[] pretestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PretestAction);
            // Execute the test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.TestAction != null), "Executing test script...");
            ExecutionResult[] testResults = TestService.Execute(this.ExecutionContext, this.PrivilegedContext, testActions.TestAction);
            // Execute the post-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PosttestAction != null), "Executing post-test script...");
            ExecutionResult[] posttestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PosttestAction);
        }
        [TestMethod()]
        public void GameFeedWorkingImageInsert()
        {
            DatabaseTestActions testActions = this.GameFeedWorkingImageInsertData;
            // Execute the pre-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PretestAction != null), "Executing pre-test script...");
            ExecutionResult[] pretestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PretestAction);
            // Execute the test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.TestAction != null), "Executing test script...");
            ExecutionResult[] testResults = TestService.Execute(this.ExecutionContext, this.PrivilegedContext, testActions.TestAction);
            // Execute the post-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PosttestAction != null), "Executing post-test script...");
            ExecutionResult[] posttestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PosttestAction);
        }

        #region Designer support code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction GameFeedInsertTest_PretestAction;
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WorkingGameFeedInsertTests));
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction GameFeedInsertTest_TestAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.NotEmptyResultSetCondition notEmptyResultSetCondition1;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition countryCode;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlinePlayersMin;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlinePlayersMax;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineCoopPlayersMin;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineCoopPlayersMax;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineSystemLinkMin;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineSystemLinkMax;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineMaxHDTVModeId;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineHardDriveRequired;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineMemoryUnit;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlinePeripheralCamera;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineCustomSoundtracks;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition offlineDolbyDigital;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition onlineMultiplayerMin;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition onlineMultiplayerMax;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition onlineCoopPlayersMin;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition onlineCoopPlayersMax;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition onlineContentDownload;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition onlineLeaderboards;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition onlineVoice;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition sortTitle;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction GameFeedWorkingRatingDescriptorInsert_TestAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction GameFeedWorkingRatingDescriptorInsert_PretestAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition rowCount;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition ratingDescriptor1;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition ratingDescriptor2;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction GameFeedWorkingVideoInsert_TestAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction testInitializeAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition rowCountWork_GameFeedVideo;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition video1;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction GameFeedWorkingImageInsert_TestAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition rowCountWork_GameFeedImage;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition webBoxArt;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition consoleBoxArtscalarValueCondition1;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition consoleBackgroundImage;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition rowCountScreenshots;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition screenshot1;
            this.GameFeedInsertTestData = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestActions();
            this.GameFeedWorkingRatingDescriptorInsertData = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestActions();
            this.GameFeedWorkingVideoInsertData = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestActions();
            this.GameFeedWorkingImageInsertData = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestActions();
            GameFeedInsertTest_PretestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            GameFeedInsertTest_TestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            notEmptyResultSetCondition1 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.NotEmptyResultSetCondition();
            countryCode = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlinePlayersMin = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlinePlayersMax = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineCoopPlayersMin = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineCoopPlayersMax = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineSystemLinkMin = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineSystemLinkMax = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineMaxHDTVModeId = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineHardDriveRequired = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineMemoryUnit = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlinePeripheralCamera = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineCustomSoundtracks = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            offlineDolbyDigital = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            onlineMultiplayerMin = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            onlineMultiplayerMax = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            onlineCoopPlayersMin = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            onlineCoopPlayersMax = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            onlineContentDownload = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            onlineLeaderboards = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            onlineVoice = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            sortTitle = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            GameFeedWorkingRatingDescriptorInsert_TestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            GameFeedWorkingRatingDescriptorInsert_PretestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            rowCount = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            ratingDescriptor1 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            ratingDescriptor2 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            GameFeedWorkingVideoInsert_TestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            testInitializeAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            rowCountWork_GameFeedVideo = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            video1 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            GameFeedWorkingImageInsert_TestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            rowCountWork_GameFeedImage = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            webBoxArt = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            consoleBoxArtscalarValueCondition1 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            consoleBackgroundImage = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            rowCountScreenshots = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            screenshot1 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            // 
            // GameFeedInsertTestData
            // 
            this.GameFeedInsertTestData.PosttestAction = null;
            this.GameFeedInsertTestData.PretestAction = GameFeedInsertTest_PretestAction;
            this.GameFeedInsertTestData.TestAction = GameFeedInsertTest_TestAction;
            // 
            // GameFeedInsertTest_PretestAction
            // 
            resources.ApplyResources(GameFeedInsertTest_PretestAction, "GameFeedInsertTest_PretestAction");
            // 
            // GameFeedInsertTest_TestAction
            // 
            GameFeedInsertTest_TestAction.Conditions.Add(notEmptyResultSetCondition1);
            GameFeedInsertTest_TestAction.Conditions.Add(countryCode);
            GameFeedInsertTest_TestAction.Conditions.Add(offlinePlayersMin);
            GameFeedInsertTest_TestAction.Conditions.Add(offlinePlayersMax);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineCoopPlayersMin);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineCoopPlayersMax);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineSystemLinkMin);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineSystemLinkMax);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineMaxHDTVModeId);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineHardDriveRequired);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineMemoryUnit);
            GameFeedInsertTest_TestAction.Conditions.Add(offlinePeripheralCamera);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineCustomSoundtracks);
            GameFeedInsertTest_TestAction.Conditions.Add(offlineDolbyDigital);
            GameFeedInsertTest_TestAction.Conditions.Add(onlineMultiplayerMin);
            GameFeedInsertTest_TestAction.Conditions.Add(onlineMultiplayerMax);
            GameFeedInsertTest_TestAction.Conditions.Add(onlineCoopPlayersMin);
            GameFeedInsertTest_TestAction.Conditions.Add(onlineCoopPlayersMax);
            GameFeedInsertTest_TestAction.Conditions.Add(onlineContentDownload);
            GameFeedInsertTest_TestAction.Conditions.Add(onlineLeaderboards);
            GameFeedInsertTest_TestAction.Conditions.Add(onlineVoice);
            GameFeedInsertTest_TestAction.Conditions.Add(sortTitle);
            resources.ApplyResources(GameFeedInsertTest_TestAction, "GameFeedInsertTest_TestAction");
            // 
            // notEmptyResultSetCondition1
            // 
            notEmptyResultSetCondition1.Enabled = true;
            notEmptyResultSetCondition1.Name = "notEmptyResultSetCondition1";
            notEmptyResultSetCondition1.ResultSet = 1;
            // 
            // countryCode
            // 
            countryCode.ColumnNumber = 5;
            countryCode.Enabled = true;
            countryCode.ExpectedValue = "US";
            countryCode.Name = "countryCode";
            countryCode.NullExpected = false;
            countryCode.ResultSet = 1;
            countryCode.RowNumber = 1;
            // 
            // offlinePlayersMin
            // 
            offlinePlayersMin.ColumnNumber = 6;
            offlinePlayersMin.Enabled = true;
            offlinePlayersMin.ExpectedValue = "1";
            offlinePlayersMin.Name = "offlinePlayersMin";
            offlinePlayersMin.NullExpected = false;
            offlinePlayersMin.ResultSet = 1;
            offlinePlayersMin.RowNumber = 1;
            // 
            // offlinePlayersMax
            // 
            offlinePlayersMax.ColumnNumber = 7;
            offlinePlayersMax.Enabled = true;
            offlinePlayersMax.ExpectedValue = "2";
            offlinePlayersMax.Name = "offlinePlayersMax";
            offlinePlayersMax.NullExpected = false;
            offlinePlayersMax.ResultSet = 1;
            offlinePlayersMax.RowNumber = 1;
            // 
            // offlineCoopPlayersMin
            // 
            offlineCoopPlayersMin.ColumnNumber = 8;
            offlineCoopPlayersMin.Enabled = true;
            offlineCoopPlayersMin.ExpectedValue = "0";
            offlineCoopPlayersMin.Name = "offlineCoopPlayersMin";
            offlineCoopPlayersMin.NullExpected = false;
            offlineCoopPlayersMin.ResultSet = 1;
            offlineCoopPlayersMin.RowNumber = 1;
            // 
            // offlineCoopPlayersMax
            // 
            offlineCoopPlayersMax.ColumnNumber = 9;
            offlineCoopPlayersMax.Enabled = true;
            offlineCoopPlayersMax.ExpectedValue = "0";
            offlineCoopPlayersMax.Name = "offlineCoopPlayersMax";
            offlineCoopPlayersMax.NullExpected = false;
            offlineCoopPlayersMax.ResultSet = 1;
            offlineCoopPlayersMax.RowNumber = 1;
            // 
            // offlineSystemLinkMin
            // 
            offlineSystemLinkMin.ColumnNumber = 10;
            offlineSystemLinkMin.Enabled = true;
            offlineSystemLinkMin.ExpectedValue = "0";
            offlineSystemLinkMin.Name = "offlineSystemLinkMin";
            offlineSystemLinkMin.NullExpected = false;
            offlineSystemLinkMin.ResultSet = 1;
            offlineSystemLinkMin.RowNumber = 1;
            // 
            // offlineSystemLinkMax
            // 
            offlineSystemLinkMax.ColumnNumber = 11;
            offlineSystemLinkMax.Enabled = true;
            offlineSystemLinkMax.ExpectedValue = "0";
            offlineSystemLinkMax.Name = "offlineSystemLinkMax";
            offlineSystemLinkMax.NullExpected = false;
            offlineSystemLinkMax.ResultSet = 1;
            offlineSystemLinkMax.RowNumber = 1;
            // 
            // offlineMaxHDTVModeId
            // 
            offlineMaxHDTVModeId.ColumnNumber = 12;
            offlineMaxHDTVModeId.Enabled = false;
            offlineMaxHDTVModeId.ExpectedValue = "3";
            offlineMaxHDTVModeId.Name = "offlineMaxHDTVModeId";
            offlineMaxHDTVModeId.NullExpected = false;
            offlineMaxHDTVModeId.ResultSet = 1;
            offlineMaxHDTVModeId.RowNumber = 1;
            // 
            // offlineHardDriveRequired
            // 
            offlineHardDriveRequired.ColumnNumber = 13;
            offlineHardDriveRequired.Enabled = true;
            offlineHardDriveRequired.ExpectedValue = "false";
            offlineHardDriveRequired.Name = "offlineHardDriveRequired";
            offlineHardDriveRequired.NullExpected = false;
            offlineHardDriveRequired.ResultSet = 1;
            offlineHardDriveRequired.RowNumber = 1;
            // 
            // offlineMemoryUnit
            // 
            offlineMemoryUnit.ColumnNumber = 14;
            offlineMemoryUnit.Enabled = true;
            offlineMemoryUnit.ExpectedValue = "true";
            offlineMemoryUnit.Name = "offlineMemoryUnit";
            offlineMemoryUnit.NullExpected = false;
            offlineMemoryUnit.ResultSet = 1;
            offlineMemoryUnit.RowNumber = 1;
            // 
            // offlinePeripheralCamera
            // 
            offlinePeripheralCamera.ColumnNumber = 15;
            offlinePeripheralCamera.Enabled = true;
            offlinePeripheralCamera.ExpectedValue = "false";
            offlinePeripheralCamera.Name = "offlinePeripheralCamera";
            offlinePeripheralCamera.NullExpected = false;
            offlinePeripheralCamera.ResultSet = 1;
            offlinePeripheralCamera.RowNumber = 1;
            // 
            // offlineCustomSoundtracks
            // 
            offlineCustomSoundtracks.ColumnNumber = 16;
            offlineCustomSoundtracks.Enabled = true;
            offlineCustomSoundtracks.ExpectedValue = "true";
            offlineCustomSoundtracks.Name = "offlineCustomSoundtracks";
            offlineCustomSoundtracks.NullExpected = false;
            offlineCustomSoundtracks.ResultSet = 1;
            offlineCustomSoundtracks.RowNumber = 1;
            // 
            // offlineDolbyDigital
            // 
            offlineDolbyDigital.ColumnNumber = 17;
            offlineDolbyDigital.Enabled = true;
            offlineDolbyDigital.ExpectedValue = "true";
            offlineDolbyDigital.Name = "offlineDolbyDigital";
            offlineDolbyDigital.NullExpected = false;
            offlineDolbyDigital.ResultSet = 1;
            offlineDolbyDigital.RowNumber = 1;
            // 
            // onlineMultiplayerMin
            // 
            onlineMultiplayerMin.ColumnNumber = 18;
            onlineMultiplayerMin.Enabled = true;
            onlineMultiplayerMin.ExpectedValue = "0";
            onlineMultiplayerMin.Name = "onlineMultiplayerMin";
            onlineMultiplayerMin.NullExpected = false;
            onlineMultiplayerMin.ResultSet = 1;
            onlineMultiplayerMin.RowNumber = 1;
            // 
            // onlineMultiplayerMax
            // 
            onlineMultiplayerMax.ColumnNumber = 19;
            onlineMultiplayerMax.Enabled = true;
            onlineMultiplayerMax.ExpectedValue = "0";
            onlineMultiplayerMax.Name = "onlineMultiplayerMax";
            onlineMultiplayerMax.NullExpected = false;
            onlineMultiplayerMax.ResultSet = 1;
            onlineMultiplayerMax.RowNumber = 1;
            // 
            // onlineCoopPlayersMin
            // 
            onlineCoopPlayersMin.ColumnNumber = 20;
            onlineCoopPlayersMin.Enabled = true;
            onlineCoopPlayersMin.ExpectedValue = "0";
            onlineCoopPlayersMin.Name = "onlineCoopPlayersMin";
            onlineCoopPlayersMin.NullExpected = false;
            onlineCoopPlayersMin.ResultSet = 1;
            onlineCoopPlayersMin.RowNumber = 1;
            // 
            // onlineCoopPlayersMax
            // 
            onlineCoopPlayersMax.ColumnNumber = 21;
            onlineCoopPlayersMax.Enabled = true;
            onlineCoopPlayersMax.ExpectedValue = "0";
            onlineCoopPlayersMax.Name = "onlineCoopPlayersMax";
            onlineCoopPlayersMax.NullExpected = false;
            onlineCoopPlayersMax.ResultSet = 1;
            onlineCoopPlayersMax.RowNumber = 1;
            // 
            // onlineContentDownload
            // 
            onlineContentDownload.ColumnNumber = 22;
            onlineContentDownload.Enabled = true;
            onlineContentDownload.ExpectedValue = "false";
            onlineContentDownload.Name = "onlineContentDownload";
            onlineContentDownload.NullExpected = false;
            onlineContentDownload.ResultSet = 1;
            onlineContentDownload.RowNumber = 1;
            // 
            // onlineLeaderboards
            // 
            onlineLeaderboards.ColumnNumber = 23;
            onlineLeaderboards.Enabled = true;
            onlineLeaderboards.ExpectedValue = "true";
            onlineLeaderboards.Name = "onlineLeaderboards";
            onlineLeaderboards.NullExpected = false;
            onlineLeaderboards.ResultSet = 1;
            onlineLeaderboards.RowNumber = 1;
            // 
            // onlineVoice
            // 
            onlineVoice.ColumnNumber = 24;
            onlineVoice.Enabled = true;
            onlineVoice.ExpectedValue = "false";
            onlineVoice.Name = "onlineVoice";
            onlineVoice.NullExpected = false;
            onlineVoice.ResultSet = 1;
            onlineVoice.RowNumber = 1;
            // 
            // sortTitle
            // 
            sortTitle.ColumnNumber = 25;
            sortTitle.Enabled = true;
            sortTitle.ExpectedValue = "DEAD 0001 sorttitle";
            sortTitle.Name = "sortTitle";
            sortTitle.NullExpected = false;
            sortTitle.ResultSet = 1;
            sortTitle.RowNumber = 1;
            // 
            // GameFeedWorkingRatingDescriptorInsertData
            // 
            this.GameFeedWorkingRatingDescriptorInsertData.PosttestAction = null;
            this.GameFeedWorkingRatingDescriptorInsertData.PretestAction = GameFeedWorkingRatingDescriptorInsert_PretestAction;
            this.GameFeedWorkingRatingDescriptorInsertData.TestAction = GameFeedWorkingRatingDescriptorInsert_TestAction;
            // 
            // GameFeedWorkingRatingDescriptorInsert_TestAction
            // 
            GameFeedWorkingRatingDescriptorInsert_TestAction.Conditions.Add(rowCount);
            GameFeedWorkingRatingDescriptorInsert_TestAction.Conditions.Add(ratingDescriptor1);
            GameFeedWorkingRatingDescriptorInsert_TestAction.Conditions.Add(ratingDescriptor2);
            resources.ApplyResources(GameFeedWorkingRatingDescriptorInsert_TestAction, "GameFeedWorkingRatingDescriptorInsert_TestAction");
            // 
            // GameFeedWorkingRatingDescriptorInsert_PretestAction
            // 
            resources.ApplyResources(GameFeedWorkingRatingDescriptorInsert_PretestAction, "GameFeedWorkingRatingDescriptorInsert_PretestAction");
            // 
            // rowCount
            // 
            rowCount.ColumnNumber = 1;
            rowCount.Enabled = true;
            rowCount.ExpectedValue = "2";
            rowCount.Name = "rowCount";
            rowCount.NullExpected = false;
            rowCount.ResultSet = 1;
            rowCount.RowNumber = 1;
            // 
            // ratingDescriptor1
            // 
            ratingDescriptor1.ColumnNumber = 1;
            ratingDescriptor1.Enabled = true;
            ratingDescriptor1.ExpectedValue = "1";
            ratingDescriptor1.Name = "ratingDescriptor1";
            ratingDescriptor1.NullExpected = false;
            ratingDescriptor1.ResultSet = 2;
            ratingDescriptor1.RowNumber = 1;
            // 
            // ratingDescriptor2
            // 
            ratingDescriptor2.ColumnNumber = 1;
            ratingDescriptor2.Enabled = true;
            ratingDescriptor2.ExpectedValue = "1";
            ratingDescriptor2.Name = "ratingDescriptor2";
            ratingDescriptor2.NullExpected = false;
            ratingDescriptor2.ResultSet = 3;
            ratingDescriptor2.RowNumber = 1;
            // 
            // GameFeedWorkingVideoInsertData
            // 
            this.GameFeedWorkingVideoInsertData.PosttestAction = null;
            this.GameFeedWorkingVideoInsertData.PretestAction = null;
            this.GameFeedWorkingVideoInsertData.TestAction = GameFeedWorkingVideoInsert_TestAction;
            // 
            // GameFeedWorkingVideoInsert_TestAction
            // 
            GameFeedWorkingVideoInsert_TestAction.Conditions.Add(rowCountWork_GameFeedVideo);
            GameFeedWorkingVideoInsert_TestAction.Conditions.Add(video1);
            resources.ApplyResources(GameFeedWorkingVideoInsert_TestAction, "GameFeedWorkingVideoInsert_TestAction");
            // 
            // testInitializeAction
            // 
            resources.ApplyResources(testInitializeAction, "testInitializeAction");
            // 
            // rowCountWork_GameFeedVideo
            // 
            rowCountWork_GameFeedVideo.ColumnNumber = 1;
            rowCountWork_GameFeedVideo.Enabled = true;
            rowCountWork_GameFeedVideo.ExpectedValue = "1";
            rowCountWork_GameFeedVideo.Name = "rowCountWork_GameFeedVideo";
            rowCountWork_GameFeedVideo.NullExpected = false;
            rowCountWork_GameFeedVideo.ResultSet = 1;
            rowCountWork_GameFeedVideo.RowNumber = 1;
            // 
            // video1
            // 
            video1.ColumnNumber = 1;
            video1.Enabled = true;
            video1.ExpectedValue = "1";
            video1.Name = "video1";
            video1.NullExpected = false;
            video1.ResultSet = 2;
            video1.RowNumber = 1;
            // 
            // GameFeedWorkingImageInsertData
            // 
            this.GameFeedWorkingImageInsertData.PosttestAction = null;
            this.GameFeedWorkingImageInsertData.PretestAction = null;
            this.GameFeedWorkingImageInsertData.TestAction = GameFeedWorkingImageInsert_TestAction;
            // 
            // GameFeedWorkingImageInsert_TestAction
            // 
            GameFeedWorkingImageInsert_TestAction.Conditions.Add(rowCountWork_GameFeedImage);
            GameFeedWorkingImageInsert_TestAction.Conditions.Add(webBoxArt);
            GameFeedWorkingImageInsert_TestAction.Conditions.Add(consoleBoxArtscalarValueCondition1);
            GameFeedWorkingImageInsert_TestAction.Conditions.Add(consoleBackgroundImage);
            GameFeedWorkingImageInsert_TestAction.Conditions.Add(rowCountScreenshots);
            GameFeedWorkingImageInsert_TestAction.Conditions.Add(screenshot1);
            resources.ApplyResources(GameFeedWorkingImageInsert_TestAction, "GameFeedWorkingImageInsert_TestAction");
            // 
            // rowCountWork_GameFeedImage
            // 
            rowCountWork_GameFeedImage.ColumnNumber = 1;
            rowCountWork_GameFeedImage.Enabled = true;
            rowCountWork_GameFeedImage.ExpectedValue = "11";
            rowCountWork_GameFeedImage.Name = "rowCountWork_GameFeedImage";
            rowCountWork_GameFeedImage.NullExpected = false;
            rowCountWork_GameFeedImage.ResultSet = 1;
            rowCountWork_GameFeedImage.RowNumber = 1;
            // 
            // webBoxArt
            // 
            webBoxArt.ColumnNumber = 1;
            webBoxArt.Enabled = true;
            webBoxArt.ExpectedValue = "1";
            webBoxArt.Name = "webBoxArt";
            webBoxArt.NullExpected = false;
            webBoxArt.ResultSet = 2;
            webBoxArt.RowNumber = 1;
            // 
            // consoleBoxArtscalarValueCondition1
            // 
            consoleBoxArtscalarValueCondition1.ColumnNumber = 1;
            consoleBoxArtscalarValueCondition1.Enabled = true;
            consoleBoxArtscalarValueCondition1.ExpectedValue = "1";
            consoleBoxArtscalarValueCondition1.Name = "consoleBoxArtscalarValueCondition1";
            consoleBoxArtscalarValueCondition1.NullExpected = false;
            consoleBoxArtscalarValueCondition1.ResultSet = 3;
            consoleBoxArtscalarValueCondition1.RowNumber = 1;
            // 
            // consoleBackgroundImage
            // 
            consoleBackgroundImage.ColumnNumber = 1;
            consoleBackgroundImage.Enabled = true;
            consoleBackgroundImage.ExpectedValue = "1";
            consoleBackgroundImage.Name = "consoleBackgroundImage";
            consoleBackgroundImage.NullExpected = false;
            consoleBackgroundImage.ResultSet = 4;
            consoleBackgroundImage.RowNumber = 1;
            // 
            // rowCountScreenshots
            // 
            rowCountScreenshots.ColumnNumber = 1;
            rowCountScreenshots.Enabled = true;
            rowCountScreenshots.ExpectedValue = "8";
            rowCountScreenshots.Name = "rowCountScreenshots";
            rowCountScreenshots.NullExpected = false;
            rowCountScreenshots.ResultSet = 5;
            rowCountScreenshots.RowNumber = 1;
            // 
            // screenshot1
            // 
            screenshot1.ColumnNumber = 1;
            screenshot1.Enabled = true;
            screenshot1.ExpectedValue = "1";
            screenshot1.Name = "screenshot1";
            screenshot1.NullExpected = false;
            screenshot1.ResultSet = 6;
            screenshot1.RowNumber = 1;
            // 
            // WorkingGameFeedInsertTests
            // 
            this.TestInitializeAction = testInitializeAction;
        }

        #endregion


        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        #endregion

        private DatabaseTestActions GameFeedInsertTestData;
        private DatabaseTestActions GameFeedWorkingRatingDescriptorInsertData;
        private DatabaseTestActions GameFeedWorkingVideoInsertData;
        private DatabaseTestActions GameFeedWorkingImageInsertData;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\dev\XboxDotComDev\XboxDotComDev\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("XboxDotComDev")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MS")]
[assembly: AssemblyProduct("XboxDotComDev")]
[assembly: AssemblyCopyright("Copyright © MS 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("7c760023-8200-48d5-9140-c887a79fe77c")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\Helpers\ConfigHelper.cs ===
﻿using System;
using System.Configuration;

namespace XboxDotComFeedTest
{
    public class ConfigHelper
    {
        public ConfigHelper()
        {
            System.Reflection.Assembly thisAssembly = System.Reflection.Assembly.GetExecutingAssembly();
            
            config = ConfigurationManager.OpenExeConfiguration(thisAssembly.Location);
        }

        public string GetStringValue(string name)
        {
            string value = config.AppSettings.Settings[name].Value;
            value = Environment.ExpandEnvironmentVariables(value);

            if (value.Contains("%"))
            {
                string message = string.Format("Configuration variable is unresolved: ({0}='{1}')", name, value);
                throw new Exception(message);
            }

            return value;
        }

        public int GetIntValue(string name)
        {
            return int.Parse(GetStringValue(name));
        }

        public bool GetBoolValue(string name)
        {
            return bool.Parse(GetStringValue(name));
        }

        public Uri GetUriValue(string name)
        {
            return new Uri(GetStringValue(name));
        }

        private Configuration config;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\Helpers\GameFeedSQLJobParameters.cs ===
﻿using System.IO;
using System.Xml.Serialization;

namespace XboxDotComFeedTest
{
    [XmlRoot("Parameters", Namespace = "urn:schema-microsoft-ems-XboxDotComFeedParams")]
    public struct GameFeedSQLJobParameters
    {
        [XmlElement("FileNamePrefix", Namespace = "urn:schema-microsoft-ems-XboxDotComFeedParams")]
        public string FileNamePrefix;

        [XmlArray("Locales", Namespace = "urn:schema-microsoft-ems-XboxDotComFeedParams")]
        public string[] Locales;

        public static GameFeedSQLJobParameters SerializeFromFile(string filenameXML)
        {
            GameFeedSQLJobParameters result;

            using (TextReader reader = new StreamReader(filenameXML))
            {
                XmlSerializer serializer = new XmlSerializer(typeof(GameFeedSQLJobParameters));
                result = (GameFeedSQLJobParameters)serializer.Deserialize(reader);
            }

            return result;
        }

        public string SerializeToString()
        {
            using (StringWriter writer = new StringWriter())
            {
                XmlSerializer serializer = new XmlSerializer(typeof(GameFeedSQLJobParameters));
                serializer.Serialize(writer, this);
                return writer.GetStringBuilder().ToString();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\Test.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.XmlDiffPatch;

using DBSchema;

namespace XboxDotComFeedTest
{
    /// <summary>
    /// Summary description for UnitTest
    /// </summary>
    [TestClass]
    public class Test
    {
        private TestContext testContext;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContext;
            }
            set
            {
                this.testContext = value;
            }
        }

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        {
            System.Reflection.Assembly thisAssembly = System.Reflection.Assembly.GetExecutingAssembly();

            //
            // load configuration
            //
            {
                ConfigHelper config = new ConfigHelper();

                serverName = config.GetStringValue("ServerName");
                npdbServerName = config.GetStringValue("NpdbServerName");
                localHttpPortNumber = config.GetIntValue("LocalHTTPPortNumber");
                epixLocalStorage = config.GetStringValue("EpixLocalStorage");
            }

            //
            // open firewall
            //
            CMDHelper.OpenFirewall(localHttpPortNumber, "XboxDotComFeedTest");

            // load the schema for catalog
            DBSchemaConfig dbSchemaConfig = new DBSchemaConfig();
            dbSchemaConfig.LoadConfig(Path.Combine(testContext.TestDeploymentDir, @"config.xml"), null);

            dbSchemaSet = new DBSchemaSet();
            dbSchemaSet.LoadSchema(dbSchemaConfig, serverName, catalogDatabaseName, null, null);

            // load the search conditions
            DateTime dateTime = DateTime.UtcNow;

            string filenameExtract = Path.Combine(testContext.TestDeploymentDir, "0_Extract.txt");
            using (StreamReader streamReader = new StreamReader(filenameExtract))
            {
                string table = null;

                while (null != (table = streamReader.ReadLine()))
                {
                    SearchCondition searchCondition = new SearchCondition();
                    searchCondition.Append(table, SearchCondition.LogicalOperation.And, "modifiedDate", SearchCondition.Operation.GreaterThanOrEquals, dateTime.ToString("yyyy-MM-dd") + "T" + dateTime.ToString("HH:mm:ss"));

                    searchConditionCollection.Add(searchCondition);
                }
            }

            ClassCleanup();
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
            NPDBHelper.RestoreSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE);
            NPDBHelper.RestoreSetting(npdbServerName, NPDBHelper.EPIXFEED_URL);
            NPDBHelper.RestoreMultiSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALES);
        }

        private static string serverName;
        private static readonly string catalogDatabaseName = "RawCatalogDB";
        private static string npdbServerName;
        private static int localHttpPortNumber;
        private static string epixLocalStorage;

        private static DBSchemaSet dbSchemaSet;
        private static SearchConditionCollection searchConditionCollection = new SearchConditionCollection();

        private static XmlDiffReport xmlDiffReport = new XmlDiffReport();

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        private static void CompareXml(string fileExpected, string fileExtracted)
        {
            xmlDiffReport.Compare(fileExpected, fileExtracted);

            foreach (XmlDiffDetail xmlDiffDetail in xmlDiffReport.Details)
            {
                Console.WriteLine("XmlDiffDetail:");
                Console.WriteLine("  Difference: " + xmlDiffDetail.Difference);

                if (null != xmlDiffDetail.Source)
                {
                    Console.WriteLine("  Source:");
                    Console.WriteLine("    XPath: " + xmlDiffDetail.Source.XPath);
                    Console.WriteLine("    XPathLocation: " + xmlDiffDetail.Source.XPathLocation);
                    Console.WriteLine("    Value: " + xmlDiffDetail.Source.Value);
                }

                if (null != xmlDiffDetail.Destination)
                {
                    Console.WriteLine("  Destination:");
                    Console.WriteLine("    XPath: " + xmlDiffDetail.Destination.XPath);
                    Console.WriteLine("    XPathLocation: " + xmlDiffDetail.Destination.XPathLocation);
                    Console.WriteLine("    Value: " + xmlDiffDetail.Destination.Value);
                }
            }

            Assert.AreEqual(0, xmlDiffReport.Details.Count);
        }

        #region N11_InvalidLocalStorage
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_N11_InvalidLocalStorage()
        {
            EventLog eventLog = new EventLog();
            eventLog.MachineName = serverName;
            eventLog.Log = "Application";

            bool eventLogConnected = false;
            int eventLogCountStart = 0;

            try
            {
                eventLogCountStart = eventLog.Entries.Count;
                eventLogConnected = true;
            }
            catch (Exception)
            {
            }

            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, @":INVALID_PATH:");
            NPDBHelper.ChangeMultiSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALES, new string[] { "en-US" });

            try
            {
                CMDHelper.RunGameFeedSQLJob(this.testContext.TestDeploymentDir, serverName);

                Assert.Fail("Invalid local storage didn't fail the SQL job! ({0}='{1}')", NPDBHelper.EPIXFEED_LOCALSTORAGE, @":INVALID_PATH:");
            }
            catch (ApplicationException e)
            {
                StringAssert.Contains(e.Message, "Error creating VB Script file");

                if (true == eventLogConnected)
                {
                    int eventLogCountEnd = eventLog.Entries.Count;

                    Assert.IsTrue(4 <= (eventLogCountEnd - eventLogCountStart), "At least 4 events were not written to event log");

                    bool entrySqlServer1 = false;
                    bool entrySqlServer2 = false;
                    bool entrySqlServer3 = false;
                    bool entrySqlAgent = false;

                    for (int index = eventLogCountEnd; index > eventLogCountStart; index--)
                    {
                        EventLogEntry eventLogEntry = eventLog.Entries[index - 1];

                        if (("MSSQLSERVER" == eventLogEntry.Source) && (EventLogEntryType.Error == eventLogEntry.EntryType))
                        {
                            if ("Error: 59122 Severity: 16 State: 0 Game Feed -> Error creating Directory.Error creating VB Script file" == eventLogEntry.Message)
                            {
                                entrySqlServer1 = true;
                            }
                            else if ("Error: 59118 Severity: 16 State: 1 Game Feed -> Error executing GameFeedDownloadFeed.Game Feed -> Error creating Directory.Error creating VB Script file" == eventLogEntry.Message)
                            {
                                entrySqlServer2 = true;
                            }
                            else if ("Error: 59121 Severity: 16 State: 1 Game Feed -> Error Executing GameFeedProcessingFeed Procedure.Game Feed -> Error executing GameFeedDownloadFeed.Game Feed -> Error creating Directory.Error creating VB Script file" == eventLogEntry.Message)
                            {
                                entrySqlServer3 = true;
                            }
                        }

                        if (("SQLSERVERAGENT" == eventLogEntry.Source) && (EventLogEntryType.Warning == eventLogEntry.EntryType) && (true == eventLogEntry.Message.Contains("SQL Server Scheduled Job 'GameFeedSQLJob'")) && (true == eventLogEntry.Message.Contains("Message: The job failed.")))
                        {
                            entrySqlAgent = true;
                        }
                    }

                    Assert.IsTrue(entrySqlServer1, "MSSQLSERVER event 1 was not written to event log");
                    Assert.IsTrue(entrySqlServer2, "MSSQLSERVER event 2 was not written to event log");
                    Assert.IsTrue(entrySqlServer3, "MSSQLSERVER event 3 was not written to event log");
                    Assert.IsTrue(entrySqlAgent, "SQLSERVERAGENT event was not written to event log");
                }
            }
            finally
            {
                NPDBHelper.RestoreSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE);
                NPDBHelper.RestoreMultiSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALES);
            }
        }
        #endregion N11_InvalidLocalStorage

        #region N12_InvalidURL
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_N12_InvalidURL()
        {
            EventLog eventLog = new EventLog();
            eventLog.MachineName = serverName;
            eventLog.Log = "Application";

            bool eventLogConnected = false;
            int eventLogCountStart = 0;

            try
            {
                eventLogCountStart = eventLog.Entries.Count;
                eventLogConnected = true;
            }
            catch (Exception)
            {
            }

            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_URL, @"http://0blah/");
            NPDBHelper.ChangeMultiSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALES, new string[] { "en-US" });

            try
            {
                CMDHelper.RunGameFeedSQLJob(this.testContext.TestDeploymentDir, serverName);

                Assert.Fail("Invalid URL didn't fail the SQL job! ({0}='{1}')", NPDBHelper.EPIXFEED_URL, @"http://0blah/");
            }
            catch (ApplicationException e)
            {
                StringAssert.Contains(e.Message, "File not downloaded");

                if (true == eventLogConnected)
                {
                    int eventLogCountEnd = eventLog.Entries.Count;

                    Assert.IsTrue(4 <= (eventLogCountEnd - eventLogCountStart), "At least 4 events were not written to event log");

                    bool entrySqlServer1 = false;
                    bool entrySqlServer2 = false;
                    bool entrySqlServer3 = false;
                    bool entrySqlAgent = false;

                    for (int index = eventLogCountEnd; index > eventLogCountStart; index--)
                    {
                        EventLogEntry eventLogEntry = eventLog.Entries[index - 1];

                        if (("MSSQLSERVER" == eventLogEntry.Source) && (EventLogEntryType.Error == eventLogEntry.EntryType))
                        {
                            if ("Error: 59116 Severity: 16 State: 1 Game Feed -> RSS File not downloaded.http://0blah/en-US.xml" == eventLogEntry.Message)
                            {
                                entrySqlServer1 = true;
                            }
                            else if ("Error: 59118 Severity: 16 State: 1 Game Feed -> Error executing GameFeedDownloadFeed.Game Feed -> RSS File not downloaded.http://0blah/en-US.xml" == eventLogEntry.Message)
                            {
                                entrySqlServer2 = true;
                            }
                            else if ("Error: 59121 Severity: 16 State: 1 Game Feed -> Error Executing GameFeedProcessingFeed Procedure.Game Feed -> Error executing GameFeedDownloadFeed.Game Feed -> RSS File not downloaded.http://0blah/en-US.xml" == eventLogEntry.Message)
                            {
                                entrySqlServer3 = true;
                            }
                        }

                        if (("SQLSERVERAGENT" == eventLogEntry.Source) && (EventLogEntryType.Warning == eventLogEntry.EntryType) && (true == eventLogEntry.Message.Contains("SQL Server Scheduled Job 'GameFeedSQLJob'")) && (true == eventLogEntry.Message.Contains("Message: The job failed.")))
                        {
                            entrySqlAgent = true;
                        }
                    }

                    Assert.IsTrue(entrySqlServer1, "MSSQLSERVER event 1 was not written to event log");
                    Assert.IsTrue(entrySqlServer2, "MSSQLSERVER event 2 was not written to event log");
                    Assert.IsTrue(entrySqlServer3, "MSSQLSERVER event 3 was not written to event log");
                    Assert.IsTrue(entrySqlAgent, "SQLSERVERAGENT event was not written to event log");
                }
            }
            finally
            {
                NPDBHelper.RestoreSetting(npdbServerName, NPDBHelper.EPIXFEED_URL);
                NPDBHelper.RestoreMultiSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALES);
            }
        }
        #endregion N12_InvalidURL

        #region N30_EmptyXmlFile
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_N30_EmptyXmlFile()
        {
            EventLog eventLog = new EventLog();
            eventLog.MachineName = serverName;
            eventLog.Log = "Application";

            bool eventLogConnected = false;
            int eventLogCountStart = 0;

            try
            {
                eventLogCountStart = eventLog.Entries.Count;
                eventLogConnected = true;
            }
            catch (Exception)
            {
            }

            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, "N30_EmptyXmlFile");
            
            GameFeedSQLJobParameters jobParams = GameFeedSQLJobParameters.SerializeFromFile(Path.Combine(testCaseDir, "1a_Feed.xml"));

            // truncate the files
            foreach (string locale in jobParams.Locales)
            {
                File.WriteAllText(Path.Combine(testCaseDir, jobParams.FileNamePrefix + locale + ".xml"), "");
            }

            using (HTTPServer httpServer = new HTTPServer(testCaseDir, localHttpPortNumber))
            {
                httpServer.Start();

                try
                {
                    CMDHelper.ImportXboxDotComFeed(this.testContext.TestDeploymentDir, serverName, npdbServerName, localHttpPortNumber, jobParams);

                    Assert.Fail("Empty XML file didn't fail the SQL job!");
                }
                catch (ApplicationException e)
                {
                    StringAssert.Contains(e.Message, "File not downloaded");

                    if (true == eventLogConnected)
                    {
                        int eventLogCountEnd = eventLog.Entries.Count;

                        Assert.IsTrue(4 <= (eventLogCountEnd - eventLogCountStart), "At least 4 events were not written to event log");

                        bool entrySqlServer1 = false;
                        bool entrySqlServer2 = false;
                        bool entrySqlServer3 = false;
                        bool entrySqlAgent = false;

                        for (int index = eventLogCountEnd; index > eventLogCountStart; index--)
                        {
                            EventLogEntry eventLogEntry = eventLog.Entries[index - 1];

                            if (("MSSQLSERVER" == eventLogEntry.Source) && (EventLogEntryType.Error == eventLogEntry.EntryType))
                            {
                                if (true == eventLogEntry.Message.Contains("Error: 59116 Severity: 16 State: 1 Game Feed -> RSS File not downloaded."))
                                {
                                    entrySqlServer1 = true;
                                }
                                else if (true == eventLogEntry.Message.Contains("Error: 59118 Severity: 16 State: 1 Game Feed -> Error executing GameFeedDownloadFeed.Game Feed -> RSS File not downloaded."))
                                {
                                    entrySqlServer2 = true;
                                }
                                else if (true == eventLogEntry.Message.Contains("Error: 59121 Severity: 16 State: 1 Game Feed -> Error Executing GameFeedProcessingFeed Procedure.Game Feed -> Error executing GameFeedDownloadFeed.Game Feed -> RSS File not downloaded."))
                                {
                                    entrySqlServer3 = true;
                                }
                            }

                            if (("SQLSERVERAGENT" == eventLogEntry.Source) && (EventLogEntryType.Warning == eventLogEntry.EntryType) && (true == eventLogEntry.Message.Contains("SQL Server Scheduled Job 'GameFeedSQLJob'")) && (true == eventLogEntry.Message.Contains("Message: The job failed.")))
                            {
                                entrySqlAgent = true;
                            }
                        }

                        Assert.IsTrue(entrySqlServer1, "MSSQLSERVER event 1 was not written to event log");
                        Assert.IsTrue(entrySqlServer2, "MSSQLSERVER event 2 was not written to event log");
                        Assert.IsTrue(entrySqlServer3, "MSSQLSERVER event 3 was not written to event log");
                        Assert.IsTrue(entrySqlAgent, "SQLSERVERAGENT event was not written to event log");
                    }
                }

                HTTPServerStats stats = httpServer.Stop();
                Verify(stats, jobParams);
            }
        }
        #endregion N30_EmptyXmlFile

        #region N31_InvalidXmlFile
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_N31_InvalidXmlFile()
        {
            EventLog eventLog = new EventLog();
            eventLog.MachineName = serverName;
            eventLog.Log = "Application";

            bool eventLogConnected = false;
            int eventLogCountStart = 0;

            try
            {
                eventLogCountStart = eventLog.Entries.Count;
                eventLogConnected = true;
            }
            catch (Exception)
            {
            }

            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, "N31_InvalidXmlFile");

            GameFeedSQLJobParameters jobParams = GameFeedSQLJobParameters.SerializeFromFile(Path.Combine(testCaseDir, "1a_Feed.xml"));

            using (HTTPServer httpServer = new HTTPServer(testCaseDir, localHttpPortNumber))
            {
                httpServer.Start();

                try
                {
                    CMDHelper.ImportXboxDotComFeed(this.testContext.TestDeploymentDir, serverName, npdbServerName, localHttpPortNumber, jobParams);

                    Assert.Fail("Invalid XML file didn't fail the SQL job!");
                }
                catch (ApplicationException e)
                {
                    StringAssert.Contains(e.Message, "XML Validation: Invalid content");

                    if (true == eventLogConnected)
                    {
                        int eventLogCountEnd = eventLog.Entries.Count;

                        Assert.IsTrue(3 <= (eventLogCountEnd - eventLogCountStart), "At least 3 events were not written to event log");

                        bool entrySqlServer1 = false;
                        bool entrySqlServer2 = false;
                        bool entrySqlAgent = false;

                        for (int index = eventLogCountEnd; index > eventLogCountStart; index--)
                        {
                            EventLogEntry eventLogEntry = eventLog.Entries[index - 1];

                            if (("MSSQLSERVER" == eventLogEntry.Source) && (EventLogEntryType.Error == eventLogEntry.EntryType))
                            {
                                if ("Error: 59119 Severity: 16 State: 1 Game Feed -> Error executing GameFeedLoadFeedXml. XML Validation: Invalid content. Expected element(s): 'product'. Location: /*:products[1]" == eventLogEntry.Message)
                                {
                                    entrySqlServer1 = true;
                                }
                                else if ("Error: 59121 Severity: 16 State: 1 Game Feed -> Error Executing GameFeedProcessingFeed Procedure.Game Feed -> Error executing GameFeedLoadFeedXml. XML Validation: Invalid content. Expected element(s): 'product'. Location: /*:products[1]" == eventLogEntry.Message)
                                {
                                    entrySqlServer2 = true;
                                }
                            }

                            if (("SQLSERVERAGENT" == eventLogEntry.Source) && (EventLogEntryType.Warning == eventLogEntry.EntryType) && (true == eventLogEntry.Message.Contains("SQL Server Scheduled Job 'GameFeedSQLJob'")) && (true == eventLogEntry.Message.Contains("Message: The job failed.")))
                            {
                                entrySqlAgent = true;
                            }
                        }

                        Assert.IsTrue(entrySqlServer1, "MSSQLSERVER event 1 was not written to event log");
                        Assert.IsTrue(entrySqlServer2, "MSSQLSERVER event 2 was not written to event log");
                        Assert.IsTrue(entrySqlAgent, "SQLSERVERAGENT event was not written to event log");
                    }
                }

                HTTPServerStats stats = httpServer.Stop();
                Verify(stats, jobParams);
            }
        }
        #endregion N31_InvalidXmlFile

        #region P10_MinimalFeed
        /// <summary>
        /// liveTitleId = -126960 (0xFFFE1010)
        /// </summary>
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_P10_MinimalFeed()
        {
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseName = "P10_MinimalFeed";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            P_Run(testCaseDir, 1);
        }
        #endregion P10_MinimalFeed

        #region P20_GameCapabilities
        /// <summary>
        /// liveTitleId = -126944 (0xFFFE1020)
        /// </summary>
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_P20_GameCapabilities()
        {
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseName = "P20_GameCapabilities";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            P_Run(testCaseDir, 4);
        }
        #endregion P20_GameCapabilities

        #region P21_ReleaseDate
        /// <summary>
        /// liveTitleId = -126943 (0xFFFE1021)
        /// </summary>
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_P21_ReleaseDate()
        {
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseName = "P21_ReleaseDate";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            P_Run(testCaseDir, 1);
        }
        #endregion P21_ReleaseDate

        #region P22_ShortTitle
        /// <summary>
        /// liveTitleId = -126942 (0xFFFE1022)
        /// 
        /// Xbox.com's "products/product/details/shortTitle" is mapped to MediaLocale.titleSort column in the RawCatalogDB.
        /// @see LSG bug #6150
        /// 
        /// When the MediaLocale for a particular mediaId/lcid does not exist, it is not created.
        /// @see LSG bug #6193
        /// </summary>
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_P22_ShortTitle()
        {
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseName = "P22_ShortTitle";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            P_Run(testCaseDir, 1);
        }
        #endregion P22_ShortTitle

        #region P23_RatingDescriptors
        /// <summary>
        /// The mapping of ratingSystemId from UODB to Catalog is in this file:
        /// S:\EMS.Main\private\db\dml\catalog\raw\GameFeedWorkingRatingDescriptorInsert.sql
        /// 
        /// liveTitleId = -126941 (0xFFFE1023)
        /// </summary>
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_P23_RatingDescriptors()
        {
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseName = "P23_RatingDescriptors";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            P_Run(testCaseDir, 3);
        }
        #endregion P23_RatingDescriptors

        #region P24_Marketplace
        /// <summary>
        /// Marketplace media type
        /// 
        /// liveTitleId = -126940 (0xFFFE1024)
        /// </summary>
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_P24_Marketplace()
        {
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseName = "P24_Marketplace";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            P_Run(testCaseDir, 1);
        }
        #endregion P24_Marketplace

        #region P25_ConsoleType02Disabled
        [TestMethod, Owner("marthare")]
        public void XboxDotComFeedTest_P25_ConsoleType02Disabled()
        {
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            // disable EPIXFEED_CONSOLETYPE02_ENABLED setting so 360 console type is ignored
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_CONSOLETYPE02_ENABLED, "false");

            try
            {
                string testCaseName = "P25_ConsoleType02Disabled";
                string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

                P_Run(testCaseDir, 1);
            }
            finally
            {
                NPDBHelper.RestoreSetting(npdbServerName, NPDBHelper.EPIXFEED_CONSOLETYPE02_ENABLED);
            }
        }
        #endregion N12_InvalidURL

        #region P90_Comprehensive
        /// <summary>
        /// liveTitleId = -126832 (0xFFFE1090)
        /// liveTitleId = -126576 (0xFFFE1190)
        /// </summary>
        [TestMethod, Owner("steveke")]
        public void XboxDotComFeedTest_P90_Comprehensive()
        {
            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALSTORAGE, epixLocalStorage);

            string testCaseName = "P90_Comprehensive";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            P_Run(testCaseDir, 4);
        }
        #endregion P90_Comprehensive

        public int RowsAffected(TransactionResult transactionResult)
        {
            int rowsAffected = transactionResult.Result;

            if (null != transactionResult.Results)
            {
                foreach (TransactionResult transactionResultChild in transactionResult.Results)
                {
                    rowsAffected += this.RowsAffected(transactionResultChild);
                }
            }

            return rowsAffected;
        }

        public int RowsAffected(DBSchemaTransaction dbSchemaTransaction)
        {
            int rowsAffected = 0;

            foreach (TransactionResult transactionResult in dbSchemaTransaction.Results)
            {
                rowsAffected += this.RowsAffected(transactionResult);
            }

            return rowsAffected;
        }

        public void P_Run(string testCaseDir, int numberOfRounds)
        {
            //
            // Clean up before running the test 
            //
            DBSchemaTransaction dbSchemaTransactionDelete = dbSchemaSet.CreateTransaction(searchConditionCollection);
            dbSchemaTransactionDelete.Delete(null, null);

            bool checkForExtraRows = false;
            try
            {
                //
                // Set up
                //
                string filenameCatalogXML = Path.Combine(testCaseDir, "0_CatalogData.xml");
                DBSchemaTransaction dbSchemaTransactionExecute = dbSchemaSet.CreateTransaction(filenameCatalogXML, false, null);
                dbSchemaTransactionExecute.Execute(null, null);

                //
                // Run
                //
                for (int roundNumber = 1; roundNumber <= numberOfRounds; ++roundNumber)
                {
                    P_Run(testCaseDir, roundNumber.ToString(), (roundNumber == numberOfRounds));
                }

                // no exception was thrown
                checkForExtraRows = true;
            }
            finally
            {
                //
                // Clean up check
                //
                dbSchemaTransactionDelete.Delete(null, null);
                int rowsAffected = this.RowsAffected(dbSchemaTransactionDelete);

                if (checkForExtraRows)
                {
                    Assert.AreEqual(0, rowsAffected, "P_Run: " + rowsAffected + " extraneous rows were created during the test!");
                }
            }
        }

        private void P_Run(string testCaseDir, string filePrefix, bool isLastStep)
        {
            GameFeedSQLJobParameters jobParams = GameFeedSQLJobParameters.SerializeFromFile(Path.Combine(testCaseDir, filePrefix + "a_Feed.xml"));

            using (HTTPServer httpServer = new HTTPServer(testCaseDir, localHttpPortNumber))
            {
                httpServer.Start();

                CMDHelper.ImportXboxDotComFeed(this.testContext.TestDeploymentDir, serverName, npdbServerName, localHttpPortNumber, jobParams);

                HTTPServerStats stats = httpServer.Stop();
                Verify(stats, jobParams);
            }

            // check table
            string filenameExtractedXML = Path.Combine(testCaseDir, filePrefix + "b_Extracted.xml");

            DBSchemaTransaction dbSchemaTransaction = dbSchemaSet.CreateTransaction(searchConditionCollection);
            dbSchemaTransaction.Select(filenameExtractedXML, null, null);

            string filenameExpectedXML = Path.Combine(testCaseDir, filePrefix + "c_Expected.xml");

            // compare the expected and actual files
            CompareXml(filenameExpectedXML, filenameExtractedXML);

            if (isLastStep)
            {
                dbSchemaTransaction.Delete(null, null);
            }
        }

        public void Verify(HTTPServerStats stats, GameFeedSQLJobParameters jobParams)
        {
            Assert.AreEqual(0, stats.TotalErrorCount, "HTTPServerStat contains " + stats.TotalErrorCount + " errors.");
            Assert.AreEqual(jobParams.Locales.Length, stats.TotalSuccessCount, "HTTPServerStat contains the wrong total number of successful requests.");

            foreach (string locale in jobParams.Locales)
            {
                string url = jobParams.FileNamePrefix + locale + ".xml";
                Assert.AreEqual(1, stats.SuccessCount(url), "HTTPServerStat contains the wrong number of successful requests for '" + url + "'.");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\Helpers\NpdbHelper.cs ===
﻿using System.Text;

namespace XboxDotComFeedTest
{
    class NPDBHelper
    {
        /// <summary>
        /// This method changes a simple NPDB setting, saving the original value.
        /// 
        /// To check the setting values, run:
        /// 
        ///    use npdb;
        ///    exec p_config_get_setting N'epixfeed_localstorage';
        ///    exec p_config_get_setting N'epixfeed_url';
        ///    exec p_config_get_multisetting N'epixfeed_locales';
        ///    
        /// </summary>
        public static void ChangeSetting(string npdbServerName, string name, string value)
        {
            StringBuilder sb = new StringBuilder();
            
            sb.AppendFormat("IF NOT EXISTS (SELECT 1 FROM t_settings WHERE vc_setting=N'{0}_saved_by_test')\r\n", name);
            sb.Append("  BEGIN\r\n");
            sb.Append("    DECLARE @value AS nvarchar(max)\r\n");
            sb.AppendFormat("    SELECT @value=vc_value FROM t_settings WHERE vc_setting=N'{0}'\r\n", name);
            sb.AppendFormat("    INSERT INTO t_settings (vc_setting, vc_value) VALUES(N'{0}_saved_by_test', @value);\r\n", name);
            sb.Append("  END\r\n");

            if (value != null)
            {
                sb.AppendFormat("UPDATE t_settings SET vc_value=N'{0}' WHERE vc_setting=N'{1}';\r\n", value, name);
            }
            else
            {
                sb.AppendFormat("UPDATE t_settings SET vc_value=null WHERE vc_setting=N'{0}';\r\n", name);
            }

            SQLHelper.Execute(npdbServerName, DATABASE_NPDB, sb.ToString(), null);
        }

        /// <summary>
        /// This method restores the a simple NPDB setting to its original value.
        /// </summary>
        public static void RestoreSetting(string npdbServerName, string name)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendFormat("IF EXISTS (SELECT 1 FROM t_settings WHERE vc_setting=N'{0}_saved_by_test')\r\n", name);
            sb.Append("  BEGIN\r\n");
            sb.Append("    DECLARE @value AS nvarchar(max)\r\n");
            sb.AppendFormat("    SELECT @value=vc_value FROM t_settings WHERE vc_setting=N'{0}_saved_by_test'\r\n", name);
            sb.AppendFormat("    UPDATE t_settings SET vc_value=@value WHERE vc_setting=N'{0}';\r\n", name);
            sb.AppendFormat("    DELETE FROM t_settings WHERE vc_setting=N'{0}_saved_by_test';\r\n", name);
            sb.Append("END\r\n");

            SQLHelper.Execute(npdbServerName, DATABASE_NPDB, sb.ToString(), null);
        }

        /// <summary>
        /// This method changes a multi-value NPDB setting, saving the original value.
        /// </summary>
        public static void ChangeMultiSetting(string npdbServerName, string name, string[] values)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendFormat("IF NOT EXISTS (SELECT 1 FROM t_multisetting_names WHERE vc_multisetting=N'{0}_saved_by_test')\r\n", name);
            sb.AppendFormat("  INSERT INTO t_multisetting_names(vc_multisetting) VALUES(N'{0}_saved_by_test');\r\n", name);

            sb.AppendFormat("IF NOT EXISTS (SELECT 1 FROM t_multisetting_names WHERE vc_multisetting=N'{0}')\r\n", name);
            sb.Append("BEGIN\r\n");
            sb.AppendFormat("  INSERT INTO t_multisetting_names(vc_multisetting) VALUES(N'{0}');\r\n", name);
            sb.AppendFormat("  INSERT INTO t_multisetting_names(vc_multisetting) VALUES(N'{0}_created_by_test');\r\n", name);
            sb.Append("END\r\n");

            sb.AppendFormat("IF EXISTS (SELECT 1 FROM t_multisettings WHERE vc_multisetting=N'{0}_saved_by_test')\r\n", name);
            sb.AppendFormat("  DELETE t_multisettings WHERE vc_multisetting=N'{0}';\r\n", name);
            sb.Append("ELSE\r\n");
            sb.AppendFormat("  UPDATE t_multisettings SET vc_multisetting=N'{0}_saved_by_test' WHERE vc_multisetting=N'{0}';\r\n", name);

            if (values != null)
            {
                foreach (string value in values)
                {
                    sb.AppendFormat("INSERT INTO t_multisettings(vc_multisetting, vc_value) VALUES(N'{0}', '{1}');\r\n", name, value);
                }
            }

            SQLHelper.Execute(npdbServerName, DATABASE_NPDB, sb.ToString(), null);
        }

        /// <summary>
        /// This method restores the a simple NPDB setting to its original value.
        /// </summary>
        public static void RestoreMultiSetting(string npdbServerName, string name)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendFormat("IF EXISTS (SELECT 1 FROM t_multisetting_names WHERE vc_multisetting=N'{0}_saved_by_test')\r\n", name);
            sb.Append("BEGIN\r\n");
            sb.AppendFormat("  DELETE FROM t_multisettings WHERE vc_multisetting=N'{0}';\r\n", name);
            sb.AppendFormat("  UPDATE t_multisettings SET vc_multisetting=N'{0}' WHERE vc_multisetting=N'{0}_saved_by_test';\r\n", name);
            sb.Append("END\r\n");

            sb.AppendFormat("IF EXISTS (SELECT 1 FROM t_multisetting_names WHERE vc_multisetting=N'{0}_created_by_test')\r\n", name);
            sb.Append("BEGIN\r\n");
            sb.AppendFormat("  DELETE FROM t_multisetting_names WHERE vc_multisetting=N'{0}';\r\n", name);
            sb.AppendFormat("  DELETE FROM t_multisetting_names WHERE vc_multisetting=N'{0}_created_by_test';\r\n", name);
            sb.Append("END\r\n");

            sb.AppendFormat("DELETE t_multisetting_names WHERE vc_multisetting=N'{0}_saved_by_test';\r\n", name);

            SQLHelper.Execute(npdbServerName, DATABASE_NPDB, sb.ToString(), null);
        }

        public const string EPIXFEED_LOCALSTORAGE = "epixfeed_localstorage";
        public const string EPIXFEED_URL = "epixfeed_url";
        public const string EPIXFEED_LOCALES = "epixfeed_locales";
        public const string EPIXFEED_CONSOLETYPE02_ENABLED = "epixfeed_ConsoleType02_Enabled";

        private const string DATABASE_NPDB = "npdb";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\Helpers\CmdHelper.cs ===
﻿using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;

namespace XboxDotComFeedTest
{
    class CMDHelper
    {
        private static StringBuilder sbError;
        private static StringBuilder sbOutput;

        public static void OpenFirewall(int portNumber, string description)
        {
            string command = "netsh";
            string arguments = "firewall add portopening TCP " + portNumber.ToString();

            if (String.IsNullOrEmpty(description) == false)
            {
                arguments += " \"";
                arguments += description;
                arguments += "\"";
            }

            RunProcess(command, arguments, null);
        }

        public static void RunGameFeedSQLJob(string dependenciesDir, string serverName)
        {
            string command = Path.Combine(dependenciesDir, @"RunGameFeedSQLJob.cmd");

            RunProcess(command, serverName, null);
        }
        
        public static void ImportXboxDotComFeed(string dependenciesDir, string serverName, string npdbServerName, int localHttpPortNumber, GameFeedSQLJobParameters parameters)
        {
            UriBuilder httpURL = new UriBuilder();
            httpURL.Host = Environment.MachineName;
            httpURL.Port = localHttpPortNumber;
            httpURL.Path = parameters.FileNamePrefix;

            NPDBHelper.ChangeSetting(npdbServerName, NPDBHelper.EPIXFEED_URL, httpURL.ToString());
            NPDBHelper.ChangeMultiSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALES, parameters.Locales);

            try
            {
                RunGameFeedSQLJob(dependenciesDir, serverName);  
            }
            finally
            {
                NPDBHelper.RestoreSetting(npdbServerName, NPDBHelper.EPIXFEED_URL);
                NPDBHelper.RestoreMultiSetting(npdbServerName, NPDBHelper.EPIXFEED_LOCALES);
            }
        }

        private static void ErrorHandler(object sender, DataReceivedEventArgs e)
        {
            if (null != e.Data)
            {
                Trace.WriteLine(e.Data);
                sbError.AppendLine(e.Data);
            }
        }

        private static void OutputHandler(object sender, DataReceivedEventArgs e)
        {
            if (null != e.Data)
            {
                Trace.WriteLine(e.Data);
                sbOutput.AppendLine(e.Data);
            }
        }

        private static void RunProcess(string command, string arguments, Dictionary<string, string> environment)
        {
            ProcessStartInfo processInfo = new ProcessStartInfo();
            Process process = new Process();
            process.StartInfo = processInfo;

            // presets
            processInfo.CreateNoWindow = true;
            processInfo.UseShellExecute = false;
            processInfo.RedirectStandardOutput = true;
            processInfo.RedirectStandardError = true;

            processInfo.FileName = command;
            if (String.IsNullOrEmpty(arguments) == false)
            {
                processInfo.Arguments = arguments;
            }

            // environment
            if (environment != null)
            {
                foreach (string key in environment.Keys)
                {
                    processInfo.EnvironmentVariables.Add(key, environment[key]);
                }
            }


            sbError = new StringBuilder();
            sbOutput = new StringBuilder();
            process.ErrorDataReceived += new DataReceivedEventHandler(ErrorHandler);
            process.OutputDataReceived += new DataReceivedEventHandler(OutputHandler);

            process.Start();
            process.BeginOutputReadLine();
            process.WaitForExit();

            if (process.ExitCode != 0)
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendFormat("RunProcess failed ({0}): {1}", process.ExitCode.ToString(), command);

                if (string.IsNullOrEmpty(sbOutput.ToString()) == false)
                {
                    sb.Append("\r\n-------- STDOUT:\r\n");
                    sb.Append(sbOutput.ToString());
                }

                if (string.IsNullOrEmpty(sbError.ToString()) == false)
                {
                    sb.Append("\r\n-------- STDERR:\r\n");
                    sb.Append(sbError.ToString());
                }

                throw new ApplicationException(sb.ToString());
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\Helpers\HttpServer.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace XboxDotComFeedTest
{
    public class HTTPServer:
        IDisposable
    {
        private int portNumber;
        private string rootDirectory;
        
        private Thread listeningThread;
        private Socket listeningSocket;

        private HTTPServerStats stats = new HTTPServerStats();

        public HTTPServer(string rootDirectory, int portNumber)
        {
            // resolve the name to a canonical form
            FileInfo rootDirectoryInfo = new FileInfo(rootDirectory);
            this.rootDirectory = rootDirectoryInfo.FullName;

            this.portNumber = portNumber;

            listeningThread = new Thread(Listen);
            listeningSocket = new Socket(0, SocketType.Stream, ProtocolType.Tcp);
        }

        public void Start()
        {
            listeningThread.Start();
        }

        public HTTPServerStats Stop()
        {
            ((IDisposable)this).Dispose();

            HTTPServerStats stats = this.stats;
            this.stats = null;
            return stats;
        }

        private void Listen()
        {
            listeningSocket.Bind(new IPEndPoint(IPAddress.Any, portNumber));
            listeningSocket.Blocking = true;
            listeningSocket.Listen(0);

            while (true)
            {
                try
                {
                    HTTPProcessor httpProcessor = new HTTPProcessor(stats, rootDirectory, listeningSocket.Accept());
                    httpProcessor.Run();
                }
                catch (SocketException se)
                {
                    if (se.Message == "A blocking operation was interrupted by a call to WSACancelBlockingCall")
                    {
                        // Ignore, the other thread closed the socket.
                        return;
                    }

                    throw;
                }
            }
        }

        #region IDisposable Members

        void IDisposable.Dispose()
        {
            if (listeningSocket != null)
            {
                listeningSocket.Close();
                listeningSocket = null;
            }

            if (listeningThread != null)
            {
                listeningThread.Join();
                listeningThread = null;
            }
        }

        #endregion
    }

    public class HTTPServerStats
    {
        public int TotalErrorCount
        {
            get { return errorCount; }
        }

        public int TotalSuccessCount
        {
            get
            {
                lock (monitor)
                {
                    return successCounts.Count;
                }
            }
        }

        public int SuccessCount(string url)
        {
            lock (monitor)
            {
                int value = 0;
                successCounts.TryGetValue(url, out value);
                return value;
            }
        }

        public void IncrementErrorCount()
        {
            Interlocked.Increment(ref errorCount);
        }

        public void IncrementSuccessCount(string url)
        {
            lock (monitor)
            {
                int value = 0;
                successCounts.TryGetValue(url, out value);
                successCounts[url] = value + 1;
            }
        }

        private object monitor = new object();
        private int errorCount;
        private Dictionary<string, int> successCounts = new Dictionary<string,int>();
    }

    /**
     * Each HTTP processor object handles one client.  If Keep-Alive is enabled then this
     * object will be reused for subsequent requests until the client breaks keep-alive.
     * This usually happens when it times out.  Because this could easily lead to a DoS
     * attack, we keep track of the number of open processors and only allow 100 to be
     * persistent active at any one time.  Additionally, we do not allow more than 500
     * outstanding requests.
     */
    class HTTPProcessor
    {
        private HTTPServerStats stats;
        private string rootDirectory;
        private Socket socket;

        public HTTPProcessor(HTTPServerStats stats, string rootDirectory, Socket socket)
        {
            this.stats = stats;
            this.rootDirectory = rootDirectory;
            this.socket = socket;
        }

        public void Run()
        {
            Thread thread = new Thread(Process);
            thread.Start();
        }

        private void Process()
        {
            using (socket)
            {
                using (NetworkStream ns = new NetworkStream(socket, FileAccess.ReadWrite))
                {
                    using (StreamReader sr = new StreamReader(ns))
                    {
                        using (StreamWriter sw = new StreamWriter(ns))
                        {
                            string fileURL;

                            if (ParseRequest(sr, sw, out fileURL))
                            {
                                Dictionary<string, string> headers;

                                if (ReadHeaders(sr, sw, out headers))
                                {
                                    writeURL(ns, sw, fileURL);
                                }
                                else
                                {
                                    stats.IncrementErrorCount();
                                }
                            }
                            else
                            {
                                stats.IncrementErrorCount();
                            }
                        }
                    }

                    ns.Flush();
                }

                socket.Shutdown(SocketShutdown.Both);
            }
        }

        private bool ParseRequest(StreamReader sr, StreamWriter sw, out string fileURL)
        {
            fileURL = null;
            string request = null;
            request = sr.ReadLine();

            // If the request line is null, then the other end has hung up on us.  A well
            // behaved client will do this after 15-60 seconds of inactivity.
            if (request == null)
            {
                return false;
            }
            // HTTP request lines are of the form:
            // [METHOD] [Encoded URL] HTTP/1.?
            string[] tokens = request.Split(new char[] { ' ' });
            if (tokens.Length != 3)
            {
                WriteError(sw, HttpStatusCode.BadRequest, "Bad request");
                return false;
            }

            // We currently only handle GET requests
            string method = tokens[0];
            if (!method.Equals("GET"))
            {
                WriteError(sw, HttpStatusCode.NotImplemented, "Not implemented: " + method);
                return false;
            }
            
            fileURL = tokens[1];
            // Only accept valid urls
            if (!fileURL.StartsWith("/"))
            {
                WriteError(sw, HttpStatusCode.BadRequest, "Bad URL: " + fileURL);
                return false;
            }
            fileURL = fileURL.Substring(1);

            // Decode all encoded parts of the URL using the built in URI processing class
            int i = 0;
            while ((i = fileURL.IndexOf("%", i)) != -1)
            {
                fileURL = fileURL.Substring(0, i) + Uri.HexUnescape(fileURL, ref i) + fileURL.Substring(i);
            }

            // Lets just make sure we are using HTTP, thats about all I care about
            string protocol = tokens[2];
            if (!protocol.StartsWith("HTTP/"))
            {
                WriteError(sw, HttpStatusCode.BadRequest, "Bad protocol: " + protocol);
            }
            return true;
        }

        private bool ReadHeaders(StreamReader sr, StreamWriter sw, out Dictionary<string, string> headers)
        {
            headers = new Dictionary<string,string>();

            string line;
            string name = null;
            // The headers end with either a socket close (!) or an empty line
            while ((line = sr.ReadLine()) != null && line != "")
            {
                // If the value begins with a space or a hard tab then this
                // is an extension of the value of the previous header and
                // should be appended
                if (name != null && Char.IsWhiteSpace(line[0]))
                {
                    headers[name] += line;
                    continue;
                }
                // Headers consist of [NAME]: [VALUE] + possible extension lines
                int firstColon = line.IndexOf(":");
                if (firstColon != -1)
                {
                    name = line.Substring(0, firstColon);
                    String value = line.Substring(firstColon + 1).Trim();
                    headers[name] = value;
                }
                else
                {
                    WriteError(sw, HttpStatusCode.BadRequest, "Bad header: " + line);
                    return false;
                }
            }
            return line != null;
        }

        private void writeURL(NetworkStream ns, StreamWriter sw, string fileURL)
        {
            // Replace the forward slashes with back-slashes to make a file name
            string filePath = fileURL.Replace('/', '\\');

            // Construct a filename from the doc root and the filename
            FileInfo fileInfo = new FileInfo(Path.Combine(rootDirectory, filePath));
            
            if (fileInfo.FullName.StartsWith(rootDirectory) == false)
            {
                WriteError(sw, HttpStatusCode.Unauthorized, "Unauthorized");
                return;
            }

            if (File.Exists(fileInfo.FullName) == false)
            {
                WriteError(sw, HttpStatusCode.NotFound, "File not found");
                return;
            }

            long bytesRemaining = fileInfo.Length;
            using (FileStream fs = new FileStream(fileInfo.FullName, FileMode.Open, FileAccess.Read))
            {
                WriteResult(sw, HttpStatusCode.OK, "OK", fileInfo.Length);

                byte[] buffer = new byte[4096];
                while (bytesRemaining > 0)
                {
                    int bytesToRead = (int)Math.Min(bytesRemaining, buffer.Length);
                    
                    int bytesRead = fs.Read(buffer, 0, bytesToRead);
                    if (bytesRead == 0)
                    {
                        // end of file reached
                        stats.IncrementErrorCount();
                        return;
                    }

                    ns.Write(buffer, 0, bytesRead);
                    bytesRemaining -= bytesRead;
                }
            }

            stats.IncrementSuccessCount(fileURL);
        }

        private void WriteError(StreamWriter sw, HttpStatusCode status, string message)
        {
            stats.IncrementErrorCount();
            string output = "<h1>HTTP/1.0 " + (int)status + " " + message + "</h1>";
            WriteResult(sw, status, message, (long)output.Length);
            sw.Write(output);
            sw.Flush();
        }

        private void WriteResult(StreamWriter sw, HttpStatusCode status, string message, long length)
        {
            sw.Write("HTTP/1.0 " + (int)status + " " + message + "\r\n");
            sw.Write("Content-Length: " + length + "\r\n");
            sw.Write("Connection: close\r\n");
            sw.Write("\r\n");
            sw.Flush();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\XboxDotComFeed\functional\Helpers\SqlHelper.cs ===
﻿using System;
using System.Data.SqlClient;

namespace XboxDotComFeedTest
{
    class SQLHelper
    {
        /// <summary>
        /// 
        /// </summary>
        /// <returns>The number of rows affected.</returns>
        public static int Execute(string serverName, string databaseName, string sql, Action<SqlDataReader> readHandler)
        {
            SqlConnectionStringBuilder sqlConnectionBuilder = new SqlConnectionStringBuilder();

            sqlConnectionBuilder.ApplicationName = "XboxDotComFeedTest";
            sqlConnectionBuilder.DataSource = serverName;
            sqlConnectionBuilder.InitialCatalog = databaseName;

            sqlConnectionBuilder.IntegratedSecurity = true;

            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionBuilder.ConnectionString))
            {
                sqlConnection.Open();

                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = sql;

                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        if (readHandler != null)
                        {
                            readHandler(sqlDataReader);
                        }
                    }

                    return sqlDataReader.RecordsAffected;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ZuneVideoFeed\dev\DatabaseSetup.cs ===
﻿using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TeamSystem.Data.UnitTesting;

namespace VideoFeedTest
{
    [TestClass()]
    public class DatabaseSetup
    {

        [AssemblyInitialize()]
        public static void IntializeAssembly(TestContext ctx)
        {
            //   Setup the test database based on setting in the
            // configuration file
            DatabaseTestClass.TestService.DeployDatabaseProject();
            DatabaseTestClass.TestService.GenerateData();
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ZuneVideoFeed\functional\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ZuneVideoFeed\dev\VideoFeedDBTest.cs ===
﻿using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TeamSystem.Data.UnitTesting;
using Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions;

namespace VideoFeedTest
{
    [TestClass()]
    public class VideoFeedDBTest : DatabaseTestClass
    {

        public VideoFeedDBTest()
        {
            InitializeComponent();
        }

        [TestInitialize()]
        public void TestInitialize()
        {
            base.InitializeTest();
        }
        [TestCleanup()]
        public void TestCleanup()
        {
            base.CleanupTest();
        }

     
        [TestMethod()]
        public void VideoInsert()
        {
            DatabaseTestActions testActions = this.VideoInsertData;
            // Execute the pre-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PretestAction != null), "Executing pre-test script...");
            ExecutionResult[] pretestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PretestAction);
            // Execute the test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.TestAction != null), "Executing test script...");
            ExecutionResult[] testResults = TestService.Execute(this.ExecutionContext, this.PrivilegedContext, testActions.TestAction);
            // Execute the post-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PosttestAction != null), "Executing post-test script...");
            ExecutionResult[] posttestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PosttestAction);
        }
        [TestMethod()]
        public void VideoDelete()
        {
            DatabaseTestActions testActions = this.VideoDeleteData;
            // Execute the pre-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PretestAction != null), "Executing pre-test script...");
            ExecutionResult[] pretestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PretestAction);
            // Execute the test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.TestAction != null), "Executing test script...");
            ExecutionResult[] testResults = TestService.Execute(this.ExecutionContext, this.PrivilegedContext, testActions.TestAction);
            // Execute the post-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PosttestAction != null), "Executing post-test script...");
            ExecutionResult[] posttestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PosttestAction);
        }
        [TestMethod()]
        public void VideoUpdate()
        {
            DatabaseTestActions testActions = this.VideoUpdateData;
            // Execute the pre-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PretestAction != null), "Executing pre-test script...");
            ExecutionResult[] pretestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PretestAction);
            // Execute the test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.TestAction != null), "Executing test script...");
            ExecutionResult[] testResults = TestService.Execute(this.ExecutionContext, this.PrivilegedContext, testActions.TestAction);
            // Execute the post-test script
            // 
            System.Diagnostics.Trace.WriteLineIf((testActions.PosttestAction != null), "Executing post-test script...");
            ExecutionResult[] posttestResults = TestService.Execute(this.PrivilegedContext, this.PrivilegedContext, testActions.PosttestAction);
        }
        
        #region Designer support code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction testInitializeAction;
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VideoFeedDBTest));
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction VideoInsert_TestAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.NotEmptyResultSetCondition notEmptyResultSetCondition1;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction VideoDelete_TestAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.EmptyResultSetCondition emptyResultSetCondition1;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction VideoUpdate_TestAction;
            Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition scalarValueCondition1;
            this.VideoInsertData = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestActions();
            this.VideoDeleteData = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestActions();
            this.VideoUpdateData = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestActions();
            testInitializeAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            VideoInsert_TestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            notEmptyResultSetCondition1 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.NotEmptyResultSetCondition();
            VideoDelete_TestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            emptyResultSetCondition1 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.EmptyResultSetCondition();
            VideoUpdate_TestAction = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.DatabaseTestAction();
            scalarValueCondition1 = new Microsoft.VisualStudio.TeamSystem.Data.UnitTesting.Conditions.ScalarValueCondition();
            // 
            // testInitializeAction
            // 
            resources.ApplyResources(testInitializeAction, "testInitializeAction");
            // 
            // VideoInsert_TestAction
            // 
            VideoInsert_TestAction.Conditions.Add(notEmptyResultSetCondition1);
            resources.ApplyResources(VideoInsert_TestAction, "VideoInsert_TestAction");
            // 
            // notEmptyResultSetCondition1
            // 
            notEmptyResultSetCondition1.Enabled = true;
            notEmptyResultSetCondition1.Name = "notEmptyResultSetCondition1";
            notEmptyResultSetCondition1.ResultSet = 1;
            // 
            // VideoInsertData
            // 
            this.VideoInsertData.PosttestAction = null;
            this.VideoInsertData.PretestAction = null;
            this.VideoInsertData.TestAction = VideoInsert_TestAction;
            // 
            // VideoDeleteData
            // 
            this.VideoDeleteData.PosttestAction = null;
            this.VideoDeleteData.PretestAction = null;
            this.VideoDeleteData.TestAction = VideoDelete_TestAction;
            // 
            // VideoDelete_TestAction
            // 
            VideoDelete_TestAction.Conditions.Add(emptyResultSetCondition1);
            resources.ApplyResources(VideoDelete_TestAction, "VideoDelete_TestAction");
            // 
            // emptyResultSetCondition1
            // 
            emptyResultSetCondition1.Enabled = true;
            emptyResultSetCondition1.Name = "emptyResultSetCondition1";
            emptyResultSetCondition1.ResultSet = 1;
            // 
            // VideoUpdateData
            // 
            this.VideoUpdateData.PosttestAction = null;
            this.VideoUpdateData.PretestAction = null;
            this.VideoUpdateData.TestAction = VideoUpdate_TestAction;
            // 
            // VideoUpdate_TestAction
            // 
            VideoUpdate_TestAction.Conditions.Add(scalarValueCondition1);
            resources.ApplyResources(VideoUpdate_TestAction, "VideoUpdate_TestAction");
            // 
            // scalarValueCondition1
            // 
            scalarValueCondition1.ColumnNumber = 1;
            scalarValueCondition1.Enabled = true;
            scalarValueCondition1.ExpectedValue = "www.xbox.com";
            scalarValueCondition1.Name = "scalarValueCondition1";
            scalarValueCondition1.NullExpected = false;
            scalarValueCondition1.ResultSet = 1;
            scalarValueCondition1.RowNumber = 1;
            // 
            // VideoFeedDBTest
            // 
            this.TestInitializeAction = testInitializeAction;
        }

        #endregion


        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        #endregion

        private DatabaseTestActions VideoInsertData;
        private DatabaseTestActions VideoDeleteData;
        private DatabaseTestActions VideoUpdateData;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ZuneVideoFeed\functional\Helpers\ConfigHelper.cs ===
﻿using System;
using System.Configuration;

namespace ZuneVideoFeedTest
{
    public class ConfigHelper
    {
        public ConfigHelper()
        {
            System.Reflection.Assembly thisAssembly = System.Reflection.Assembly.GetExecutingAssembly();
            
            config = ConfigurationManager.OpenExeConfiguration(thisAssembly.Location);
        }

        public string GetStringValue(string name)
        {
            string value = config.AppSettings.Settings[name].Value;
            value = Environment.ExpandEnvironmentVariables(value);

            if (value.Contains("%"))
            {
                string message = string.Format("Configuration variable is unresolved: ({0}='{1}')", name, value);
                throw new Exception(message);
            }

            return value;
        }

        public int GetIntValue(string name)
        {
            return int.Parse(GetStringValue(name));
        }

        public bool GetBoolValue(string name)
        {
            return bool.Parse(GetStringValue(name));
        }

        private Configuration config;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ZuneVideoFeed\functional\Helpers\CmdHelper.cs ===
﻿using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;

namespace ZuneVideoFeedTest
{
    class CMDHelper
    {
        private static StringBuilder sbError;
        private static StringBuilder sbOutput;

        public static void OpenFirewall(int portNumber, string description)
        {
            string command = "netsh";
            string arguments = "firewall add portopening TCP " + portNumber.ToString();

            if (String.IsNullOrEmpty(description) == false)
            {
                arguments += " \"";
                arguments += description;
                arguments += "\"";
            }

            RunProcess(command, arguments, null);
        }

        public static void RunTransferVideoDataSQLJob(string dependenciesDir, string serverName)
        {
            string command = Path.Combine(dependenciesDir, @"RunTransferVideoDataSQLJob.cmd");

            RunProcess(command, serverName, null);
        }
        
        private static void ErrorHandler(object sender, DataReceivedEventArgs e)
        {
            if (null != e.Data)
            {
                Trace.WriteLine(e.Data);
                sbError.AppendLine(e.Data);
            }
        }

        private static void OutputHandler(object sender, DataReceivedEventArgs e)
        {
            if (null != e.Data)
            {
                Trace.WriteLine(e.Data);
                sbOutput.AppendLine(e.Data);
            }
        }

        private static void RunProcess(string command, string arguments, Dictionary<string, string> environment)
        {
            ProcessStartInfo processInfo = new ProcessStartInfo();
            Process process = new Process();
            process.StartInfo = processInfo;

            // presets
            processInfo.CreateNoWindow = true;
            processInfo.UseShellExecute = false;
            processInfo.RedirectStandardOutput = true;
            processInfo.RedirectStandardError = true;

            processInfo.FileName = command;
            if (String.IsNullOrEmpty(arguments) == false)
            {
                processInfo.Arguments = arguments;
            }

            // environment
            if (environment != null)
            {
                foreach (string key in environment.Keys)
                {
                    processInfo.EnvironmentVariables.Add(key, environment[key]);
                }
            }


            sbError = new StringBuilder();
            sbOutput = new StringBuilder();
            process.ErrorDataReceived += new DataReceivedEventHandler(ErrorHandler);
            process.OutputDataReceived += new DataReceivedEventHandler(OutputHandler);

            process.Start();
            process.BeginOutputReadLine();
            process.WaitForExit();

            if (process.ExitCode != 0)
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendFormat("RunProcess failed ({0}): {1}", process.ExitCode.ToString(), command);

                if (string.IsNullOrEmpty(sbOutput.ToString()) == false)
                {
                    sb.Append("\r\n-------- STDOUT:\r\n");
                    sb.Append(sbOutput.ToString());
                }

                if (string.IsNullOrEmpty(sbError.ToString()) == false)
                {
                    sb.Append("\r\n-------- STDERR:\r\n");
                    sb.Append(sbError.ToString());
                }

                throw new ApplicationException(sb.ToString());
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ZuneVideoFeed\functional\Test.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Threading;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.XmlDiffPatch;

using DBSchema;

/*
 * If the sql job fails with this error:
 * 
 * Error executing Video Insert.Actual Error is: Violation of UNIQUE KEY constraint 'UQ__External__125202FB2180FB33'. Cannot insert duplicate key in object 'dbo.ExternalFeedMapping'.
 * 
 * It is because Zune introduced some external feed mappings that we did not anticipate when designing the system and these tests.
 * 
 * Fixing this requires the following manual operation on the catalog:
 * 
 * delete ExternalFeedMapping where externalFeedSourceId = 2 and externalId <> catalogId
 * 
*/

namespace ZuneVideoFeedTest
{
    /// <summary>
    /// Summary description for UnitTest
    /// </summary>
    [TestClass]
    public class Test
    {
        private TestContext testContext;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContext;
            }
            set
            {
                this.testContext = value;
            }
        }

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        {
            System.Reflection.Assembly thisAssembly = System.Reflection.Assembly.GetExecutingAssembly();

            //
            // load configuration
            //
            {
                ConfigHelper config = new ConfigHelper();

                serverName = config.GetStringValue("ServerName");
            }

            // this will be our final clean-up search condition
            // to ensure we get back to our original state when done
            searchConditionCollectionCleanUp = new SearchConditionCollection();

            // load the search conditions for final clean-up
            DateTime dateTime = DateTime.UtcNow.AddMinutes(-1);
            string filenameExtract = Path.Combine(testContext.TestDeploymentDir, "0_Extract.txt");

            using (StreamReader streamReader = new StreamReader(filenameExtract))
            {
                string table = null;

                while (null != (table = streamReader.ReadLine()))
                {
                    SearchCondition searchCondition = new SearchCondition();
                    searchCondition.Append(table, SearchCondition.LogicalOperation.And, "modifiedDate", SearchCondition.Operation.GreaterThanOrEquals, dateTime.ToString("yyyy-MM-dd") + "T" + dateTime.ToString("HH:mm:ss"));

                    searchConditionCollectionCleanUp.Add(searchCondition);
                }
            }

            // Provision VideoCatalogDBXbox database
            string filenameVideoCatalogDBXboxSQL = Path.Combine(testContext.TestDeploymentDir, "ProvisionVideoCatalogDBXbox.sql");
            string sqlVideoCatalogDBXboxSQL = File.ReadAllText(filenameVideoCatalogDBXboxSQL, Encoding.ASCII);
            SQLHelper.Execute(serverName, catalogDatabaseName, sqlVideoCatalogDBXboxSQL, null);

            // add sku column to the OfferInstance table in VideoCatalogDbXbox
            // this was removed from our RawCatalogDB but it is still expected in VideoCatalogDbXbox
            // and the job will fail without it
            SQLHelper.Execute(serverName, "VideoCatalogDBXbox", "IF NOT EXISTS (SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'OfferInstance' AND COLUMN_NAME='sku' AND IS_NULLABLE='NO') BEGIN ALTER TABLE OfferInstance ADD sku [nvarchar](50) NOT NULL  DEFAULT('9AN-00001') END", null);

            // load the schemas for catalog and video
            DBSchemaConfig dbSchemaConfig = new DBSchemaConfig();
            dbSchemaConfig.LoadConfig(Path.Combine(testContext.TestDeploymentDir, @"config.xml"), null);

            dbSchemaSetSource = new DBSchemaSet();
            dbSchemaSetSource.LoadSchema(dbSchemaConfig, serverName, videoDatabaseName, null, null);

            dbSchemaSetDestination = new DBSchemaSet();
            dbSchemaSetDestination.LoadSchema(dbSchemaConfig, serverName, catalogDatabaseName, null, null);

            CMDHelper.RunTransferVideoDataSQLJob(testContext.TestDeploymentDir, serverName);

            // wait for modify date of the first transfer to be well and done in the past!
            // this will be our clean-up per test, to restore back to the point where we make
            // our initial feed mapping.
            Thread.Sleep(TimeSpan.FromSeconds(60));
            searchConditionCollection = new SearchConditionCollection();

            // load the search conditions
            dateTime = DateTime.UtcNow.AddMinutes(-1);

            using (StreamReader streamReader = new StreamReader(filenameExtract))
            {
                string table = null;

                while (null != (table = streamReader.ReadLine()))
                {
                    SearchCondition searchCondition = new SearchCondition();
                    searchCondition.Append(table, SearchCondition.LogicalOperation.And, "modifiedDate", SearchCondition.Operation.GreaterThanOrEquals, dateTime.ToString("yyyy-MM-dd") + "T" + dateTime.ToString("HH:mm:ss"));

                    searchConditionCollection.Add(searchCondition);
                }
            }
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
            // be sure to restore back to initial state
            dbSchemaSetSource.CreateTransaction(searchConditionCollectionCleanUp).Delete(null, null);
            dbSchemaSetDestination.CreateTransaction(searchConditionCollectionCleanUp).Delete(null, null);
        }

        private static string serverName;
        private static readonly string catalogDatabaseName = "RawCatalogDB";
        private static readonly string videoDatabaseName = "VideoCatalogDBXbox";

        private static DBSchemaSet dbSchemaSetSource;
        private static DBSchemaSet dbSchemaSetDestination;
        private static SearchConditionCollection searchConditionCollection = new SearchConditionCollection();
        private static SearchConditionCollection searchConditionCollectionCleanUp = new SearchConditionCollection();

        private static XmlDiffReport xmlDiffReport = new XmlDiffReport();

        private static void CompareXml(string fileExpected, string fileExtracted)
        {
            xmlDiffReport.Compare(fileExpected, fileExtracted);

            foreach (XmlDiffDetail xmlDiffDetail in xmlDiffReport.Details)
            {
                Console.WriteLine("XmlDiffDetail:");
                Console.WriteLine("  Difference: " + xmlDiffDetail.Difference);

                if (null != xmlDiffDetail.Source)
                {
                    Console.WriteLine("  Source:");
                    Console.WriteLine("    XPath: " + xmlDiffDetail.Source.XPath);
                    Console.WriteLine("    XPathLocation: " + xmlDiffDetail.Source.XPathLocation);
                    Console.WriteLine("    Value: " + xmlDiffDetail.Source.Value);
                }

                if (null != xmlDiffDetail.Destination)
                {
                    Console.WriteLine("  Destination:");
                    Console.WriteLine("    XPath: " + xmlDiffDetail.Destination.XPath);
                    Console.WriteLine("    XPathLocation: " + xmlDiffDetail.Destination.XPathLocation);
                    Console.WriteLine("    Value: " + xmlDiffDetail.Destination.Value);
                }
            }

            Assert.AreEqual(0, xmlDiffReport.Details.Count);
        }

        #region P10_RaiseError
        [TestMethod, Owner("steveke")]
        public void ZuneVideoFeedTest_P10_RaiseError()
        {
            EventLog eventLog = new EventLog();
            eventLog.MachineName = serverName;
            eventLog.Log = "Application";

            bool eventLogConnected = false;
            int eventLogCountStart = 0;

            try
            {
                eventLogCountStart = eventLog.Entries.Count;
                eventLogConnected = true;
            }
            catch (Exception)
            {
            }

            string testCaseName = "P10_RaiseError";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            try
            {
                string filenameCatalogXML = Path.Combine(testCaseDir, "0_CatalogData.xml");
                dbSchemaSetDestination.CreateTransaction(filenameCatalogXML, false, null).Execute(null, null);

                string filenameVideoDataXML = Path.Combine(testCaseDir, "1a_Prop.xml");
                dbSchemaSetSource.CreateTransaction(filenameVideoDataXML, false, null).Execute(null, null);

                CMDHelper.RunTransferVideoDataSQLJob(this.testContext.TestDeploymentDir, serverName);

                Assert.Fail("Transfer job did not fail");
            }
            catch (ApplicationException e)
            {
                StringAssert.Contains(e.Message, "Video Feed -> Error executing Video Insert.Actual Error is: Violation of UNIQUE KEY constraint 'CK_CategorySystem_NoDuplicates_Name'. Cannot insert duplicate key in object 'dbo.CategorySystem'. [SQLSTATE 42000] (Error 59107).  The step failed.");

                // check table
                string filenameExtractedXML = Path.Combine(testCaseDir, "1b_Extracted.xml");

                DBSchemaTransaction dbSchemaTransaction = dbSchemaSetDestination.CreateTransaction(searchConditionCollection);
                dbSchemaTransaction.Select(filenameExtractedXML, null, null);

                string filenameExpectedXML = Path.Combine(testCaseDir, "1c_Expected.xml");

                // compare the expected and actual files
                CompareXml(filenameExpectedXML, filenameExtractedXML);

                if (true == eventLogConnected)
                {
                    int eventLogCountEnd = eventLog.Entries.Count;

                    Assert.IsTrue(2 <= (eventLogCountEnd - eventLogCountStart), "At least 2 events were not written to event log");

                    bool entrySqlServer = false;
                    bool entrySqlAgent = false;

                    for (int index = eventLogCountEnd; index > eventLogCountStart; index--)
                    {
                        EventLogEntry eventLogEntry = eventLog.Entries[index - 1];

                        if (("MSSQLSERVER" == eventLogEntry.Source) && (EventLogEntryType.Error == eventLogEntry.EntryType) && ("Error: 59107 Severity: 16 State: 1 Video Feed -> Error executing Video Insert.Actual Error is: Violation of UNIQUE KEY constraint 'CK_CategorySystem_NoDuplicates_Name'. Cannot insert duplicate key in object 'dbo.CategorySystem'." == eventLogEntry.Message))
                        {
                            entrySqlServer = true;
                            continue;
                        }

                        if (("SQLSERVERAGENT" == eventLogEntry.Source) && (EventLogEntryType.Warning == eventLogEntry.EntryType) && (true == eventLogEntry.Message.Contains("SQL Server Scheduled Job 'TransferVideoDataSQLJob'")) && (true == eventLogEntry.Message.Contains("Message: The job failed.")))
                        {
                            entrySqlAgent = true;
                            continue;
                        }
                    }

                    Assert.IsTrue(entrySqlServer, "MSSQLSERVER event was not written to event log");
                    Assert.IsTrue(entrySqlAgent, "SQLSERVERAGENT event was not written to event log");
                }
            }
            finally
            {
                dbSchemaSetSource.CreateTransaction(searchConditionCollection).Delete(null, null);
                dbSchemaSetDestination.CreateTransaction(searchConditionCollection).Delete(null, null);
            }
        }
        #endregion P10_RaiseError

        #region P20_Insert
        [TestMethod, Owner("steveke")]
        public void ZuneVideoFeedTest_P20_Insert()
        {
            string testCaseName = "P20_Insert";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            try
            {
                string filenameVideoDataXML = Path.Combine(testCaseDir, "1a_Prop.xml");
                dbSchemaSetSource.CreateTransaction(filenameVideoDataXML, false, null).Execute(null, null);

                CMDHelper.RunTransferVideoDataSQLJob(this.testContext.TestDeploymentDir, serverName);

                // check table
                string filenameExtractedXML = Path.Combine(testCaseDir, "1b_Extracted.xml");
                DBSchemaTransaction dbSchemaTransaction = dbSchemaSetDestination.CreateTransaction(searchConditionCollection);
                dbSchemaTransaction.Select(filenameExtractedXML, null, null);

                string filenameExpectedXML = Path.Combine(testCaseDir, "1c_Expected.xml");

                // compare the expected and actual files
                CompareXml(filenameExpectedXML, filenameExtractedXML);
            }
            finally
            {
                dbSchemaSetSource.CreateTransaction(searchConditionCollection).Delete(null, null);
                dbSchemaSetDestination.CreateTransaction(searchConditionCollection).Delete(null, null);
            }
        }

        #endregion P20_Insert

        #region P30_Delete
        [TestMethod, Owner("steveke")]
        public void ZuneVideoFeedTest_P30_Delete()
        {
            string testCaseName = "P30_Delete";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            try
            {
                string filenameVideoDataXMLProp = Path.Combine(testCaseDir, "1a_Prop.xml");
                dbSchemaSetSource.CreateTransaction(filenameVideoDataXMLProp, false, null).Execute(null, null);

                CMDHelper.RunTransferVideoDataSQLJob(this.testContext.TestDeploymentDir, serverName);

                string filenameVideoDataXMLDelete = Path.Combine(testCaseDir, "2a_Delete.xml");
                dbSchemaSetSource.CreateTransaction(filenameVideoDataXMLDelete, false, null).Delete(null, null);

                CMDHelper.RunTransferVideoDataSQLJob(this.testContext.TestDeploymentDir, serverName);

                // check table
                string filenameExtractedXML = Path.Combine(testCaseDir, "2b_Extracted.xml");

                DBSchemaTransaction dbSchemaTransaction = dbSchemaSetDestination.CreateTransaction(searchConditionCollection);
                dbSchemaTransaction.Select(filenameExtractedXML, null, null);

                string filenameExpectedXML = Path.Combine(testCaseDir, "2c_Expected.xml");

                // compare the expected and actual files
                CompareXml(filenameExpectedXML, filenameExtractedXML);
            }
            finally
            {
                dbSchemaSetSource.CreateTransaction(searchConditionCollection).Delete(null, null);
                dbSchemaSetDestination.CreateTransaction(searchConditionCollection).Delete(null, null);
            }
        }

        #endregion P30_Delete

        #region P90_Comprehensive
        //[TestMethod, Owner("steveke")]
        public void ZuneVideoFeedTest_P90_Comprehensive()
        {
            string testCaseName = "P90_Comprehensive";
            string testCaseDir = Path.Combine(this.testContext.TestDeploymentDir, testCaseName);

            try
            {
                // round one
                {
                    string filenameCatalogXML = Path.Combine(testCaseDir, "0_CatalogData.xml");
                    dbSchemaSetDestination.CreateTransaction(filenameCatalogXML, false, null).Execute(null, null);

                    string filenameVideoDataXML = Path.Combine(testCaseDir, "1a_Prop.xml");
                    dbSchemaSetSource.CreateTransaction(filenameVideoDataXML, false, null).Execute(null, null);

                    CMDHelper.RunTransferVideoDataSQLJob(this.testContext.TestDeploymentDir, serverName);

                    string filenameExtractedXML = Path.Combine(testCaseDir, "1b_Extracted.xml");
                    dbSchemaSetDestination.CreateTransaction(searchConditionCollection).Select(filenameExtractedXML, null, null);

                    string filenameExpectedXML = Path.Combine(testCaseDir, "1c_Expected.xml");

                    // compare the expected and actual files
                    CompareXml(filenameExpectedXML, filenameExtractedXML);
                }

                // round two
                {
                    string filenameVideoDataXML = Path.Combine(testCaseDir, "2a_Delete.xml");
                    dbSchemaSetSource.CreateTransaction(filenameVideoDataXML, false, null).Delete(null, null);

                    CMDHelper.RunTransferVideoDataSQLJob(this.testContext.TestDeploymentDir, serverName);

                    string filenameExtractedXML = Path.Combine(testCaseDir, "2b_Extracted.xml");
                    dbSchemaSetDestination.CreateTransaction(searchConditionCollection).Select(filenameExtractedXML, null, null);

                    string filenameExpectedXML = Path.Combine(testCaseDir, "2c_Expected.xml");

                    // compare the expected and actual files
                    CompareXml(filenameExpectedXML, filenameExtractedXML);
                }
            }
            finally
            {
                dbSchemaSetSource.CreateTransaction(searchConditionCollection).Delete(null, null);
                dbSchemaSetDestination.CreateTransaction(searchConditionCollection).Delete(null, null);
            }
        }
        #endregion P90_Comprehensive
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ZuneVideoFeed\functional\Helpers\SqlHelper.cs ===
﻿using System;
using System.Data.SqlClient;

namespace ZuneVideoFeedTest
{
    class SQLHelper
    {
        /// <summary>
        /// 
        /// </summary>
        /// <returns>The number of rows affected.</returns>
        public static int Execute(string serverName, string databaseName, string sql, Action<SqlDataReader> readHandler)
        {
            SqlConnectionStringBuilder sqlConnectionBuilder = new SqlConnectionStringBuilder();

            sqlConnectionBuilder.ApplicationName = "ZuneVideoFeedFunctional";
            sqlConnectionBuilder.DataSource = serverName;
            sqlConnectionBuilder.InitialCatalog = databaseName;

            sqlConnectionBuilder.IntegratedSecurity = true;

            using (SqlConnection sqlConnection = new SqlConnection(sqlConnectionBuilder.ConnectionString))
            {
                sqlConnection.Open();

                SqlCommand sqlCommand = sqlConnection.CreateCommand();
                sqlCommand.CommandText = sql;
                sqlCommand.CommandTimeout = 60 * 5;

                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        if (readHandler != null)
                        {
                            readHandler(sqlDataReader);
                        }
                    }

                    return sqlDataReader.RecordsAffected;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\nat\natinfo\client\natclient.cpp ===
// natclient.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#define CMD_LINE_ADDR 'a'
#define CMD_LINE_PORT 'p'
#define MAX_SERVER_ADDR 16

#define PRIMARY_TEST_PORT		1000
#define SECONDARY_TEST_PORT		1001
#define MAX_DGRAM_SIZE			1024
#define PING_MSG_TYPE			1
#define SUMMARY_MSG_TYPE		2

#pragma pack(push, 1)
typedef struct
{
	DWORD dwMsgType;
	DWORD dwClientIP;
	WORD  wClientPort;
} NATPING_MSG, *PNATPING_MSG;

typedef struct
{
	DWORD dwMsgType;
	DWORD dwReceivedPacketFlag;
} NATSUMMARY_MSG, *PNATSUMMARY_MSG;

int main(int argc, char* argv[])
{
	SOCKADDR_IN SockServ11, SockServ12, SockServ21, SockServ22, RecvAddr, LocalAddr;
	NATPING_MSG OutgoingPing, *pIncomingPing = NULL;
    WSADATA WSAData;
	TIMEVAL time = {10, 0};
	FD_SET ReadableSockets;
	SOCKET ClientSock = INVALID_SOCKET;
	DWORD dwPrimaryServerAddr = 0, dwSecondaryServerAddr = 0, *pdwCurrentAddr = NULL, dwNonBlocking = TRUE;
    WORD wVersionRequested = MAKEWORD(1,1);
	BYTE bBuffer[MAX_DGRAM_SIZE], bPacketsReceived = 0;
	CHAR szPrimaryServerAddr[MAX_SERVER_ADDR] = "", szSecondaryServerAddr[MAX_SERVER_ADDR] = "";
	INT nCurrentParam = 0, nCurrentStrLen = 0, nNumReadable = 0, nBytes = 0, nFromLen = 0, nLastError = 0;

	memset(bBuffer, 0, sizeof(bBuffer));
	memset(&LocalAddr, 0, sizeof(LocalAddr));
	memset(&SockServ11, 0, sizeof(SockServ11));
	memset(&SockServ12, 0, sizeof(SockServ12));
	memset(&SockServ21, 0, sizeof(SockServ21));
	memset(&SockServ22, 0, sizeof(SockServ22));
	LocalAddr.sin_family = AF_INET;
	SockServ11.sin_family = AF_INET;
	SockServ12.sin_family = AF_INET;
	SockServ21.sin_family = AF_INET;
	SockServ22.sin_family = AF_INET;

	// Initialize the winsock layer
    if(WSAStartup(wVersionRequested, &WSAData) != 0)
    {
		printf("WSAStartup() failed\n");
        return FALSE;
    }

	// Parse command line
	for(nCurrentParam = 1;nCurrentParam < argc; ++nCurrentParam)
	{
		if((argv[nCurrentParam][0] == '-') || (argv[nCurrentParam][0] == '/'))
		{
			switch(argv[nCurrentParam][1])
			{
			case CMD_LINE_ADDR:
				switch(argv[nCurrentParam][2])
				{
				case '1':
					pdwCurren