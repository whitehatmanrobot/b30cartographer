, 0x58, 0x63, 0x69, 0x6E, 0x74, 
   0x74, 0x77, 0x78, 0x75, 0x77, 0x5F, 0x5D, 0x63, 0x59, 0x5F, 0x69, 0x79, 0x80, 0x92, 0x89, 0x90, 
   0x9F, 0x8E, 0x95, 0x9A, 0x9B, 0x9E, 0xA2, 0x9C, 0x9D, 0xA6, 0x93, 0x98, 0xA3, 0x90, 0x97, 0xA2, 
   0x8D, 0x8E, 0x99, 0x92, 0x90, 0x96, 0x91, 0x91, 0x94, 0x8D, 0x8C, 0x90, 0x8D, 0x8A, 0x92, 0x93, 
   0x93, 0x9D, 0x8F, 0x8B, 0x93, 0x46, 0x44, 0x46, 0x2E, 0x32, 0x34, 0x3A, 0x3E, 0x41, 0x3D, 0x3E, 
   0x3F, 0x36, 0x34, 0x39, 0x2E, 0x30, 0x32, 0x27, 0x27, 0x24, 0x1F, 0x1B, 0x1D, 0x17, 0x14, 0x13, 
   0x2D, 0x2D, 0x2B, 0x4C, 0x53, 0x50, 0x4C, 0x53, 0x55, 0x51, 0x53, 0x55, 0x51, 0x51, 0x53, 0x50, 
   0x4F, 0x51, 0x55, 0x52, 0x53, 0x5A, 0x56, 0x58, 0x5B, 0x57, 0x5B, 0x5E, 0x56, 0x59, 0x62, 0x58, 
   0x5A, 0x63, 0x59, 0x60, 0x5E, 0x57, 0x60, 0x62, 0x5E, 0x64, 0x70, 0x70, 0x74, 0x5B, 0x58, 0x5F, 
   0x2A, 0x23, 0x2B, 0x0D, 0x09, 0x0A, 0x0C, 0x0B, 0x06, 0x10, 0x0E, 0x0C, 0x1B, 0x1B, 0x20, 0x42, 
   0x4A, 0x55, 0x4F, 0x5F, 0x73, 0x55, 0x6B, 0x7E, 0x61, 0x74, 0x85, 0x61, 0x73, 0x83, 0x5D, 0x76, 
   0x87, 0x60, 0x7D, 0x92, 0x6B, 0x84, 0x97, 0x7B, 0x89, 0x93, 0x7C, 0x87, 0x94, 0x6D, 0x77, 0x87, 
   0x6C, 0x74, 0x81, 0x65, 0x71, 0x7D, 0x61, 0x72, 0x81, 0x63, 0x75, 0x87, 0x6F, 0x7B, 0x89, 0x74, 
   0x81, 0x8B, 0x74, 0x85, 0x8F, 0x78, 0x89, 0x94, 0x81, 0x8D, 0x99, 0x8B, 0x92, 0x9C, 0x8C, 0x90, 
   0x96, 0x92, 0x93, 0x92, 0xB3, 0xB8, 0xB4, 0xBE, 0xBF, 0xBD, 0xB4, 0xB1, 0xB0, 0x94, 0x90, 0x8E, 
   0x89, 0x88, 0x88, 0x75, 0x74, 0x78, 0x66, 0x68, 0x68, 0x73, 0x79, 0x78, 0x7B, 0x81, 0x80, 0x87, 
   0x87, 0x85, 0x6D, 0x6A, 0x69, 0x44, 0x42, 0x46, 0x20, 0x24, 0x29, 0x19, 0x22, 0x29, 0x20, 0x27, 
   0x2E, 0x32, 0x38, 0x40, 0x38, 0x42, 0x4D, 0x35, 0x3C, 0x4A, 0x6D, 0x77, 0x87, 0x8F, 0x98, 0xA7, 
   0x7E, 0x84, 0x92, 0x75, 0x79, 0x81, 0x72, 0x72, 0x77, 0x77, 0x78, 0x7C, 0x7D, 0x77, 0x7F, 0x7B, 
   0x72, 0x7E, 0x6E, 0x6B, 0x74, 0x7B, 0x7B, 0x81, 0x85, 0x84, 0x8C, 0x76, 0x75, 0x83, 0x70, 0x70, 
   0x82, 0x75, 0x76, 0x88, 0x74, 0x72, 0x85, 0x6E, 0x70, 0x86, 0x75, 0x7A, 0x89, 0x6B, 0x70, 0x77, 
   0x77, 0x78, 0x7B, 0x7A, 0x78, 0x7B, 0x6A, 0x69, 0x6E, 0x6D, 0x70, 0x74, 0x6D, 0x69, 0x72, 0x6B, 
   0x68, 0x70, 0x83, 0x81, 0x8A, 0x88, 0x88, 0x8D, 0x9A, 0x9A, 0x9F, 0xA8, 0xA4, 0xAF, 0xA5, 0xA0, 
   0xAD, 0x92, 0x8F, 0x9A, 0x86, 0x89, 0x92, 0x8D, 0x92, 0x9A, 0x89, 0x93, 0x98, 0x89, 0x96, 0x9C, 
   0x90, 0x9D, 0xA6, 0x99, 0xA5, 0xAB, 0xA3, 0xB0, 0xB6, 0xAD, 0xBC, 0xC6, 0xB4, 0xC2, 0xCE, 0xA0, 
   0xB4, 0xBD, 0x8C, 0xA1, 0xA8, 0x99, 0xA8, 0xB0, 0x65, 0x6D, 0x73, 0x73, 0x80, 0x82, 0x98, 0xA3, 
   0xA8, 0x9E, 0xA5, 0xB0, 0x98, 0xA1, 0xAC, 0x97, 0xA6, 0xAD, 0xAF, 0xBF, 0xC5, 0xB6, 0xC4, 0xCB, 
   0xB4, 0xBD, 0xC5, 0xB2, 0xB9, 0xBF, 0xB7, 0xBE, 0xC4, 0xAF, 0xB6, 0xBB, 0xAF, 0xB8, 0xBB, 0xB9, 
   0xC7, 0xC8, 0xC1, 0xD0, 0xCF, 0xCC, 0xD7, 0xD9, 0xCE, 0xD9, 0xDC, 0xC9, 0xD3, 0xD5, 0xC1, 0xCC, 
   0xCD, 0xB9, 0xC5, 0xC8, 0xBD, 0xCA, 0xCF, 0xB8, 0xC9, 0xCF, 0xA9, 0xBB, 0xC6, 0x9F, 0xB5, 0xC1, 
   0xB1, 0xC7, 0xD1, 0xC0, 0xD1, 0xD6, 0xB8, 0xC5, 0xC6, 0xAC, 0xB7, 0xB7, 0xB3, 0xBE, 0xBC, 0xB3, 
   0xBA, 0xBC, 0xB0, 0xB6, 0xBB, 0xAF, 0xB7, 0xBC, 0xAC, 0xB5, 0xB7, 0xB5, 0xBD, 0xBF, 0xBA, 0xC2, 
   0xC7, 0xB8, 0xC5, 0xCC, 0xB6, 0xC5, 0xCC, 0xB1, 0xC0, 0xC6, 0xB4, 0xC1, 0xC9, 0xA6, 0xB3, 0xBF, 
   0xA2, 0xB1, 0xC1, 0x90, 0xA1, 0xB2, 0x80, 0x94, 0xA5, 0x7B, 0x8D, 0xA0, 0x7A, 0x8B, 0x9F, 0x88, 
   0x9E, 0xAF, 0x91, 0xA2, 0xB1, 0x6D, 0x6E, 0x7C, 0x52, 0x4C, 0x50, 0x4F, 0x4E, 0x4A, 0x4C, 0x4B, 
   0x48, 0x4B, 0x47, 0x47, 0x4B, 0x4A, 0x49, 0x46, 0x46, 0x48, 0x49, 0x47, 0x4A, 0x48, 0x48, 0x4A, 
   0x42, 0x43, 0x44, 0x44, 0x47, 0x47, 0x46, 0x48, 0x47, 0x48, 0x4E, 0x47, 0x60, 0x6A, 0x64, 0x70, 
   0x73, 0x73, 0x79, 0x7E, 0x7E, 0x97, 0x9F, 0xA9, 0x96, 0x9A, 0xAB, 0x8C, 0x8B, 0x9B, 0x81, 0x80, 
   0x90, 0x7F, 0x83, 0x92, 0x80, 0x85, 0x94, 0x78, 0x7E, 0x8D, 0x77, 0x7B, 0x8D, 0x75, 0x77, 0x86, 
   0x75, 0x73, 0x80, 0x7A, 0x77, 0x84, 0x7A, 0x7C, 0x86, 0x87, 0x89, 0x90, 0x8D, 0x8B, 0x90, 0x8A, 
   0x87, 0x8A, 0x6C, 0x6D, 0x6E, 0x60, 0x66, 0x70, 0x51, 0x5C, 0x72, 0x48, 0x54, 0x68, 0x42, 0x4E, 
   0x57, 0x3F, 0x4B, 0x4E, 0x50, 0x54, 0x59, 0x72, 0x6C, 0x74, 0x7A, 0x6F, 0x79, 0x78, 0x6C, 0x75, 
   0x77, 0x6D, 0x72, 0x71, 0x66, 0x6D, 0x68, 0x70, 0x75, 0x66, 0x69, 0x73, 0x6B, 0x6D, 0x7B, 0x63, 
   0x66, 0x73, 0x64, 0x66, 0x71, 0x67, 0x6B, 0x6D, 0x61, 0x68, 0x64, 0x52, 0x5A, 0x57, 0x65, 0x6B, 
   0x6B, 0x67, 0x6A, 0x6F, 0x60, 0x5E, 0x61, 0x4E, 0x48, 0x4C, 0x4C, 0x49, 0x4B, 0x58, 0x58, 0x57, 
   0x6E, 0x6C, 0x71, 0x77, 0x78, 0x80, 0x7B, 0x7E, 0x83, 0x7C, 0x7D, 0x81, 0x81, 0x84, 0x88, 0x7D, 
   0x81, 0x86, 0x77, 0x79, 0x7F, 0x78, 0x78, 0x7E, 0x7C, 0x79, 0x7F, 0x7B, 0x76, 0x76, 0x79, 0x75, 
   0x75, 0x73, 0x75, 0x77, 0x65, 0x6B, 0x6F, 0x59, 0x5B, 0x63, 0x4D, 0x4F, 0x56, 0x50, 0x53, 0x57, 
   0x4C, 0x4E, 0x4E, 0x2D, 0x33, 0x34, 0x34, 0x37, 0x38, 0x5C, 0x5E, 0x60, 0x64, 0x67, 0x69, 0x74, 
   0x72, 0x76, 0x82, 0x7F, 0x83, 0x7F, 0x79, 0x7D, 0x69, 0x69, 0x6D, 0x77, 0x78, 0x82, 0x86, 0x8A, 
   0x94, 0x8F, 0x98, 0x9F, 0x9E, 0xA5, 0xAD, 0x9F, 0xA4, 0xAE, 0x97, 0x9D, 0xA5, 0x94, 0x99, 0x9E, 
   0x95, 0x95, 0x9B, 0x92, 0x93, 0x97, 0x90, 0x93, 0x95, 0x90, 0x8F, 0x95, 0x88, 0x87, 0x91, 0x7F, 
   0x81, 0x8D, 0x89, 0x89, 0x8F, 0x52, 0x4F, 0x53, 0x26, 0x29, 0x2A, 0x28, 0x2C, 0x2F, 0x3A, 0x3C, 
   0x3F, 0x3A, 0x39, 0x3C, 0x2C, 0x2F, 0x30, 0x22, 0x21, 0x22, 0x1E, 0x16, 0x1E, 0x16, 0x10, 0x16, 
   0x28, 0x26, 0x29, 0x3B, 0x40, 0x3F, 0x3D, 0x41, 0x42, 0x48, 0x4A, 0x4A, 0x4C, 0x4D, 0x4C, 0x4E, 
   0x4E, 0x4C, 0x53, 0x4F, 0x4E, 0x60, 0x59, 0x59, 0x5F, 0x5A, 0x5C, 0x5B, 0x57, 0x5A, 0x5E, 0x56, 
   0x5A, 0x60, 0x54, 0x5C, 0x5E, 0x56, 0x5F, 0x5E, 0x59, 0x5E, 0x6D, 0x66, 0x6B, 0x61, 0x59, 0x61, 
   0x4A, 0x45, 0x4E, 0x22, 0x1D, 0x22, 0x0F, 0x0E, 0x0C, 0x11, 0x14, 0x13, 0x17, 0x1D, 0x21, 0x3E, 
   0x4B, 0x53, 0x48, 0x5F, 0x6E, 0x4A, 0x63, 0x74, 0x5F, 0x73, 0x83, 0x6B, 0x79, 0x88, 0x62, 0x73, 
   0x84, 0x60, 0x78, 0x8E, 0x66, 0x7E, 0x93, 0x76, 0x86, 0x91, 0x7A, 0x88, 0x92, 0x70, 0x7C, 0x89, 
   0x69, 0x72, 0x7D, 0x6B, 0x76, 0x7E, 0x6C, 0x78, 0x87, 0x67, 0x73, 0x89, 0x6C, 0x76, 0x8A, 0x6F, 
   0x7D, 0x8A, 0x73, 0x7F, 0x8C, 0x7A, 0x86, 0x94, 0x79, 0x85, 0x95, 0x70, 0x7B, 0x8A, 0x6B, 0x76, 
   0x86, 0x76, 0x7F, 0x84, 0x8A, 0x93, 0x91, 0xA4, 0xA7, 0xA4, 0xA6, 0xA4, 0xA3, 0x91, 0x92, 0x92, 
   0x81, 0x85, 0x86, 0x89, 0x8B, 0x8D, 0x82, 0x85, 0x86, 0x7B, 0x80, 0x82, 0x70, 0x72, 0x75, 0x66, 
   0x61, 0x62, 0x4F, 0x49, 0x4B, 0x35, 0x35, 0x3C, 0x22, 0x23, 0x2F, 0x20, 0x29, 0x33, 0x24, 0x2E, 
   0x34, 0x2D, 0x32, 0x39, 0x32, 0x3A, 0x47, 0x3C, 0x48, 0x5A, 0x70, 0x7F, 0x95, 0x86, 0x92, 0xAA, 
   0x7E, 0x87, 0x9E, 0x80, 0x88, 0x98, 0x8C, 0x90, 0x95, 0x7F, 0x7F, 0x80, 0x83, 0x82, 0x81, 0x7D, 
   0x7C, 0x7D, 0x71, 0x71, 0x76, 0x71, 0x73, 0x77, 0x80, 0x81, 0x87, 0x6D, 0x6D, 0x78, 0x65, 0x67, 
   0x77, 0x6A, 0x6C, 0x7E, 0x6A, 0x6C, 0x7D, 0x6C, 0x6C, 0x80, 0x68, 0x6C, 0x79, 0x6A, 0x6E, 0x77, 
   0x78, 0x79, 0x82, 0x79, 0x78, 0x7E, 0x6F, 0x6E, 0x75, 0x6E, 0x6F, 0x79, 0x68, 0x6C, 0x74, 0x64, 
   0x67, 0x70, 0x74, 0x79, 0x83, 0x7E, 0x83, 0x8B, 0x8E, 0x8E, 0x94, 0xA8, 0xA2, 0xAB, 0xAB, 0xA6, 
   0xB1, 0x95, 0x95, 0xA0, 0x86, 0x8B, 0x93, 0x87, 0x90, 0x98, 0x87, 0x94, 0x98, 0x87, 0x91, 0x97, 
   0x8E, 0x97, 0xA0, 0x96, 0xA1, 0xA8, 0xA3, 0xB1, 0xB6, 0xAD, 0xBC, 0xC4, 0xB4, 0xC4, 0xCF, 0xAF, 
   0xC2, 0xCA, 0x9E, 0xAF, 0xB6, 0x9B, 0xA5, 0xAF, 0x61, 0x65, 0x6A, 0x6B, 0x78, 0x76, 0x94, 0xA2, 
   0xA2, 0x9D, 0xA4, 0xAC, 0x96, 0x9E, 0xA8, 0x9B, 0xA6, 0xAE, 0xA5, 0xB4, 0xB9, 0xB2, 0xC3, 0xC6, 
   0xB9, 0xC2, 0xC8, 0xB6, 0xBB, 0xBF, 0xBC, 0xC4, 0xC6, 0xB3, 0xBD, 0xBD, 0xB4, 0xBD, 0xBF, 0xBF, 
   0xCB, 0xCB, 0xC0, 0xCD, 0xCB, 0xCC, 0xD6, 0xD6, 0xD2, 0xDA, 0xDB, 0xD3, 0xDB, 0xDD, 0xD0, 0xD9, 
   0xDA, 0xCA, 0xD3, 0xD5, 0xCB, 0xD4, 0xD8, 0xC1, 0xCF, 0xD7, 0xB7, 0xC7, 0xD2, 0xAE, 0xC3, 0xCE, 
   0xB1, 0xCA, 0xD2, 0xC1, 0xD6, 0xDC, 0xBE, 0xCD, 0xD1, 0xAD, 0xB9, 0xBC, 0xB6, 0xBF, 0xC1, 0xB3, 
   0xBC, 0xC0, 0xAF, 0xB8, 0xBE, 0xB5, 0xBF, 0xC3, 0xB4, 0xC0, 0xC2, 0xB8, 0xC3, 0xC7, 0xBB, 0xC5, 
   0xCE, 0xB9, 0xC5, 0xD1, 0xB3, 0xC4, 0xCF, 0xAC, 0xBC, 0xC8, 0x9E, 0xAE, 0xBA, 0x9A, 0xAB, 0xB7, 
   0x9C, 0xAB, 0xB8, 0x8F, 0xA1, 0xB1, 0x86, 0x99, 0xA9, 0x89, 0x9B, 0xAD, 0x86, 0x9B, 0xAD, 0x87, 
   0x9B, 0xAC, 0x75, 0x80, 0x8D, 0x53, 0x51, 0x5A, 0x4C, 0x44, 0x48, 0x4B, 0x49, 0x47, 0x44, 0x42, 
   0x43, 0x42, 0x3F, 0x43, 0x3F, 0x40, 0x43, 0x3F, 0x40, 0x46, 0x3F, 0x3D, 0x44, 0x39, 0x38, 0x3A, 
   0x32, 0x34, 0x36, 0x32, 0x34, 0x39, 0x36, 0x34, 0x39, 0x2B, 0x2D, 0x2D, 0x36, 0x3F, 0x3B, 0x5C, 
   0x63, 0x63, 0x6B, 0x78, 0x76, 0x94, 0x9E, 0xA6, 0x97, 0x99, 0xA9, 0x86, 0x85, 0x94, 0x79, 0x7B, 
   0x89, 0x79, 0x80, 0x8F, 0x7D, 0x83, 0x91, 0x85, 0x8A, 0x99, 0x89, 0x90, 0xA1, 0x83, 0x85, 0x96, 
   0x7E, 0x7C, 0x8A, 0x80, 0x7D, 0x87, 0x7E, 0x7F, 0x86, 0x77, 0x7C, 0x7C, 0x65, 0x6A, 0x64, 0x5F, 
   0x62, 0x5D, 0x5C, 0x5F, 0x5D, 0x5D, 0x62, 0x67, 0x53, 0x5E, 0x6E, 0x46, 0x52, 0x63, 0x40, 0x49, 
   0x53, 0x56, 0x5A, 0x61, 0x72, 0x74, 0x76, 0x80, 0x7C, 0x7E, 0x7F, 0x76, 0x7A, 0x81, 0x77, 0x7E, 
   0x81, 0x75, 0x7C, 0x77, 0x6D, 0x75, 0x64, 0x6F, 0x77, 0x65, 0x6F, 0x79, 0x6C, 0x74, 0x80, 0x64, 
   0x6B, 0x76, 0x64, 0x67, 0x72, 0x66, 0x68, 0x6E, 0x5C, 0x5C, 0x61, 0x55, 0x57, 0x58, 0x68, 0x6C, 
   0x6E, 0x7B, 0x7E, 0x84, 0x90, 0x8C, 0x92, 0x88, 0x7D, 0x86, 0x63, 0x5B, 0x64, 0x53, 0x51, 0x56, 
   0x5D, 0x5B, 0x63, 0x69, 0x69, 0x6F, 0x71, 0x70, 0x74, 0x79, 0x78, 0x7C, 0x7F, 0x7F, 0x83, 0x7C, 
   0x7E, 0x82, 0x72, 0x74, 0x78, 0x75, 0x75, 0x79, 0x78, 0x75, 0x7A, 0x77, 0x70, 0x73, 0x77, 0x74, 
   0x77, 0x65, 0x68, 0x6B, 0x4E, 0x50, 0x56, 0x4A, 0x47, 0x4F, 0x5B, 0x58, 0x5F, 0x59, 0x5D, 0x60, 
   0x4B, 0x4F, 0x4D, 0x33, 0x38, 0x36, 0x4C, 0x4F, 0x4D, 0x6D, 0x6F, 0x6D, 0x7E, 0x7C, 0x7C, 0x89, 
   0x86, 0x86, 0x84, 0x86, 0x86, 0x84, 0x83, 0x81, 0x70, 0x72, 0x72, 0x6F, 0x70, 0x7A, 0x81, 0x83, 
   0x8E, 0x94, 0x9C, 0xA5, 0x94, 0x99, 0xA2, 0x8C, 0x94, 0x9C, 0x91, 0x94, 0x9B, 0x97, 0x94, 0x99, 
   0x96, 0x93, 0x98, 0x8B, 0x92, 0x98, 0x8A, 0x91, 0x97, 0x9E, 0x9E, 0xA2, 0xA2, 0xA1, 0xA4, 0x8E, 
   0x90, 0x98, 0x8C, 0x8E, 0x91, 0x5E, 0x5A, 0x66, 0x25, 0x25, 0x2A, 0x26, 0x29, 0x2C, 0x53, 0x56, 
   0x57, 0x4F, 0x4B, 0x4C, 0x28, 0x28, 0x28, 0x2D, 0x2D, 0x32, 0x4E, 0x45, 0x51, 0x51, 0x4A, 0x58, 
   0x4C, 0x48, 0x51, 0x46, 0x43, 0x4B, 0x2A, 0x2A, 0x2F, 0x27, 0x28, 0x2B, 0x30, 0x30, 0x30, 0x3B, 
   0x39, 0x38, 0x4F, 0x4C, 0x49, 0x60, 0x59, 0x57, 0x61, 0x59, 0x58, 0x59, 0x56, 0x58, 0x5B, 0x55, 
   0x58, 0x5D, 0x52, 0x5A, 0x5B, 0x54, 0x5D, 0x5C, 0x58, 0x5D, 0x66, 0x5D, 0x61, 0x58, 0x4F, 0x56, 
   0x4D, 0x4C, 0x52, 0x3C, 0x39, 0x40, 0x22, 0x1E, 0x24, 0x13, 0x1B, 0x1C, 0x16, 0x1E, 0x1E, 0x2C, 
   0x38, 0x39, 0x3D, 0x54, 0x5D, 0x42, 0x5C, 0x68, 0x4D, 0x63, 0x6C, 0x62, 0x74, 0x7F, 0x66, 0x77, 
   0x87, 0x61, 0x74, 0x87, 0x61, 0x75, 0x87, 0x68, 0x7C, 0x8B, 0x80, 0x94, 0x9D, 0x7E, 0x8C, 0x98, 
   0x6A, 0x75, 0x81, 0x69, 0x75, 0x7D, 0x71, 0x7B, 0x89, 0x71, 0x79, 0x8E, 0x72, 0x7B, 0x8F, 0x70, 
   0x7E, 0x8C, 0x71, 0x7E, 0x8B, 0x74, 0x82, 0x90, 0x79, 0x8A, 0x96, 0x74, 0x83, 0x90, 0x6F, 0x7F, 
   0x90, 0x6C, 0x7C, 0x89, 0x6D, 0x7F, 0x82, 0x95, 0xA3, 0xA2, 0xA9, 0xAB, 0xA9, 0x98, 0x96, 0x95, 
   0x81, 0x86, 0x86, 0xA1, 0xA6, 0xA6, 0x99, 0x9D, 0x9D, 0x7E, 0x80, 0x7F, 0x69, 0x64, 0x65, 0x64, 
   0x58, 0x59, 0x4F, 0x4A, 0x4B, 0x34, 0x3C, 0x43, 0x2D, 0x31, 0x3F, 0x2A, 0x32, 0x3F, 0x2F, 0x3A, 
   0x40, 0x3D, 0x42, 0x48, 0x3A, 0x40, 0x4C, 0x49, 0x56, 0x6A, 0x72, 0x80, 0x9A, 0x7B, 0x83, 0xA0, 
   0x75, 0x7E, 0x9C, 0x77, 0x84, 0x9C, 0x98, 0x9C, 0xAA, 0x8D, 0x87, 0x8F, 0x77, 0x73, 0x74, 0x73, 
   0x74, 0x74, 0x78, 0x78, 0x79, 0x72, 0x75, 0x78, 0x7E, 0x80, 0x88, 0x69, 0x68, 0x75, 0x66, 0x67, 
   0x7A, 0x69, 0x6D, 0x80, 0x74, 0x78, 0x86, 0x72, 0x73, 0x81, 0x5E, 0x62, 0x68, 0x6F, 0x73, 0x78, 
   0x80, 0x7F, 0x88, 0x7B, 0x7A, 0x7F, 0x72, 0x75, 0x77, 0x74, 0x79, 0x81, 0x70, 0x74, 0x7C, 0x68, 
   0x69, 0x71, 0x64, 0x69, 0x71, 0x6E, 0x77, 0x7D, 0x83, 0x88, 0x8C, 0xA2, 0xA1, 0xA6, 0xA5, 0xA1, 
   0xAB, 0xA0, 0x9E, 0xA9, 0x92, 0x96, 0x9F, 0x88, 0x93, 0x9A, 0x86, 0x92, 0x98, 0x8A, 0x90, 0x97, 
   0x8D, 0x93, 0x9B, 0x94, 0x9E, 0xA4, 0xA1, 0xAE, 0xB1, 0xAB, 0xB9, 0xBD, 0xAB, 0xBA, 0xC0, 0xAD, 
   0xBC, 0xC1, 0xAC, 0xB9, 0xBC, 0x9E, 0xA5, 0xAE, 0x60, 0x60, 0x67, 0x51, 0x5D, 0x5A, 0x84, 0x96, 
   0x92, 0x9B, 0xA6, 0xA9, 0x96, 0xA0, 0xA7, 0x9E, 0xA5, 0xAE, 0xA0, 0xAD, 0xAF, 0xAF, 0xBE, 0xBE, 
   0xBA, 0xC1, 0xC5, 0xAB, 0xAC, 0xB1, 0xAA, 0xB3, 0xB3, 0xAC, 0xBA, 0xB8, 0xBB, 0xC8, 0xC9, 0xC2, 
   0xCF, 0xD0, 0xBE, 0xCD, 0xCD, 0xC7, 0xD4, 0xD4, 0xCC, 0xD5, 0xD5, 0xCC, 0xD6, 0xD7, 0xCE, 0xD8, 
   0xD9, 0xCC, 0xD6, 0xD8, 0xC9, 0xD2, 0xD4, 0xBF, 0xCA, 0xCF, 0xC0, 0xCE, 0xD4, 0xB8, 0xCB, 0xD2, 
   0xAB, 0xC2, 0xC9, 0xB0, 0xC8, 0xCF, 0xBC, 0xCE, 0xD5, 0xB4, 0xC0, 0xC8, 0xB3, 0xBD, 0xC6, 0xAF, 
   0xBB, 0xC2, 0xB0, 0xBB, 0xC1, 0xB7, 0xC2, 0xC6, 0xBA, 0xC5, 0xC9, 0xB9, 0xC8, 0xCC, 0xBA, 0xC9, 
   0xD1, 0xB5, 0xC2, 0xCF, 0xA7, 0xB6, 0xC2, 0x9E, 0xAF, 0xBD, 0x8F, 0xA2, 0xB0, 0x8E, 0xA2, 0xAF, 
   0x92, 0xA5, 0xB3, 0x8D, 0xA2, 0xB1, 0x8B, 0x9F, 0xAC, 0x88, 0x9D, 0xAC, 0x82, 0x9A, 0xAE, 0x7D, 
   0x8D, 0xA0, 0x59, 0x5D, 0x65, 0x43, 0x43, 0x40, 0x45, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3B, 0x3F, 0x35, 0x3A, 0x3F, 0x32, 0x36, 0x3E, 0x31, 0x33, 0x3B, 0x38, 0x36, 0x3A, 
   0x39, 0x39, 0x3E, 0x4B, 0x4A, 0x51, 0x53, 0x4C, 0x56, 0x3E, 0x37, 0x40, 0x2B, 0x2B, 0x32, 0x2D, 
   0x36, 0x38, 0x5C, 0x6B, 0x67, 0x93, 0x9F, 0xA1, 0x96, 0x97, 0xA2, 0x81, 0x82, 0x8D, 0x7B, 0x7E, 
   0x88, 0x7B, 0x84, 0x8E, 0x7F, 0x86, 0x8F, 0x84, 0x89, 0x93, 0x94, 0x99, 0xA2, 0x98, 0x9A, 0xA3, 
   0x86, 0x85, 0x8F, 0x74, 0x72, 0x79, 0x50, 0x54, 0x54, 0x3C, 0x3F, 0x3B, 0x38, 0x3F, 0x39, 0x58, 
   0x61, 0x5C, 0x52, 0x5C, 0x59, 0x50, 0x56, 0x59, 0x5A, 0x60, 0x68, 0x4C, 0x55, 0x5E, 0x51, 0x58, 
   0x60, 0x68, 0x65, 0x6D, 0x6F, 0x6D, 0x71, 0x7B, 0x77, 0x78, 0x81, 0x79, 0x7B, 0x81, 0x7D, 0x80, 
   0x74, 0x6D, 0x73, 0x74, 0x69, 0x6D, 0x60, 0x65, 0x76, 0x65, 0x6C, 0x77, 0x67, 0x6A, 0x72, 0x65, 
   0x64, 0x6D, 0x73, 0x71, 0x79, 0x71, 0x6F, 0x76, 0x60, 0x5E, 0x66, 0x61, 0x62, 0x67, 0x74, 0x78, 
   0x7B, 0x8D, 0x91, 0x94, 0x97, 0x96, 0x98, 0x9E, 0x99, 0x9D, 0x79, 0x73, 0x7B, 0x53, 0x50, 0x56, 
   0x56, 0x53, 0x5D, 0x5A, 0x5B, 0x65, 0x65, 0x65, 0x68, 0x77, 0x75, 0x78, 0x84, 0x84, 0x89, 0x87, 
   0x87, 0x8C, 0x7B, 0x78, 0x7A, 0x7B, 0x76, 0x76, 0x7C, 0x78, 0x7D, 0x6F, 0x6B, 0x70, 0x5D, 0x5B, 
   0x62, 0x39, 0x3B, 0x44, 0x39, 0x38, 0x41, 0x53, 0x4E, 0x56, 0x64, 0x60, 0x63, 0x58, 0x5A, 0x5A, 
   0x44, 0x48, 0x46, 0x29, 0x2C, 0x2A, 0x48, 0x4C, 0x4A, 0x76, 0x78, 0x76, 0x8B, 0x86, 0x86, 0x89, 
   0x85, 0x85, 0x86, 0x86, 0x83, 0x85, 0x86, 0x7E, 0x7D, 0x7F, 0x79, 0x75, 0x76, 0x7A, 0x79, 0x79, 
   0x83, 0x92, 0x96, 0xA1, 0x94, 0x99, 0xA4, 0x91, 0x97, 0xA0, 0x9E, 0xA0, 0xA8, 0xA2, 0x9F, 0xA4, 
   0x96, 0x93, 0x99, 0x88, 0x8B, 0x96, 0x87, 0x8C, 0x97, 0x94, 0x97, 0x9E, 0x98, 0x9B, 0x9D, 0x93, 
   0x94, 0x9B, 0x8C, 0x8C, 0x91, 0x66, 0x62, 0x71, 0x2B, 0x2B, 0x35, 0x29, 0x2D, 0x31, 0x60, 0x62, 
   0x5D, 0x58, 0x55, 0x4F, 0x24, 0x22, 0x1D, 0x5C, 0x60, 0x60, 0x90, 0x91, 0x97, 0x9D, 0x99, 0xA3, 
   0x96, 0x8F, 0x99, 0x90, 0x8B, 0x91, 0x76, 0x6F, 0x78, 0x58, 0x52, 0x5A, 0x47, 0x3F, 0x46, 0x34, 
   0x2C, 0x33, 0x2B, 0x26, 0x2A, 0x34, 0x31, 0x33, 0x42, 0x40, 0x41, 0x55, 0x53, 0x53, 0x5E, 0x5C, 
   0x5B, 0x65, 0x5F, 0x62, 0x60, 0x5C, 0x60, 0x5B, 0x57, 0x58, 0x66, 0x60, 0x60, 0x51, 0x4E, 0x51, 
   0x45, 0x4A, 0x4D, 0x47, 0x4A, 0x4E, 0x3C, 0x3C, 0x44, 0x21, 0x27, 0x2A, 0x1C, 0x24, 0x21, 0x1E, 
   0x2A, 0x25, 0x2C, 0x3B, 0x41, 0x3E, 0x51, 0x5A, 0x44, 0x57, 0x5E, 0x51, 0x63, 0x6B, 0x5A, 0x72, 
   0x7D, 0x61, 0x74, 0x83, 0x64, 0x73, 0x82, 0x60, 0x74, 0x7E, 0x72, 0x88, 0x8C, 0x80, 0x90, 0x94, 
   0x70, 0x7C, 0x85, 0x6A, 0x74, 0x7D, 0x6F, 0x79, 0x83, 0x73, 0x7D, 0x8A, 0x77, 0x85, 0x8F, 0x74, 
   0x84, 0x8B, 0x73, 0x7F, 0x89, 0x71, 0x7F, 0x8B, 0x75, 0x88, 0x92, 0x75, 0x85, 0x8F, 0x71, 0x80, 
   0x8C, 0x74, 0x85, 0x92, 0x6C, 0x81, 0x89, 0x88, 0x99, 0x9E, 0xAD, 0xAF, 0xB1, 0x99, 0x93, 0x92, 
   0x7E, 0x81, 0x81, 0x97, 0x9E, 0x9E, 0x89, 0x8A, 0x8D, 0x75, 0x71, 0x6D, 0x62, 0x59, 0x58, 0x50, 
   0x4A, 0x4F, 0x44, 0x45, 0x4F, 0x3C, 0x47, 0x4F, 0x35, 0x41, 0x4A, 0x31, 0x3D, 0x46, 0x3E, 0x49, 
   0x4F, 0x4D, 0x55, 0x5B, 0x47, 0x4D, 0x5A, 0x67, 0x70, 0x83, 0x7A, 0x83, 0x9B, 0x83, 0x89, 0xA2, 
   0x82, 0x8D, 0xA7, 0x7D, 0x89, 0xA1, 0x87, 0x8B, 0x9D, 0x92, 0x93, 0xA1, 0x88, 0x85, 0x8E, 0x75, 
   0x70, 0x77, 0x79, 0x74, 0x7C, 0x73, 0x73, 0x7D, 0x6C, 0x70, 0x7D, 0x67, 0x69, 0x79, 0x68, 0x69, 
   0x7C, 0x6C, 0x6F, 0x81, 0x7C, 0x81, 0x8D, 0x77, 0x78, 0x7C, 0x6E, 0x71, 0x72, 0x83, 0x86, 0x86, 
   0x8E, 0x8E, 0x90, 0x7F, 0x7F, 0x80, 0x76, 0x79, 0x7A, 0x77, 0x7C, 0x80, 0x7A, 0x7E, 0x86, 0x6B, 
   0x6A, 0x74, 0x5E, 0x5D, 0x64, 0x5C, 0x63, 0x64, 0x71, 0x7C, 0x7C, 0x93, 0x98, 0x9B, 0xA8, 0xA4, 
   0xA9, 0xA4, 0xA0, 0xA8, 0x92, 0x94, 0x9D, 0x88, 0x8E, 0x98, 0x87, 0x8D, 0x97, 0x86, 0x8D, 0x95, 
   0x86, 0x8E, 0x94, 0x8D, 0x97, 0x9D, 0x97, 0xA5, 0xA9, 0xA4, 0xAF, 0xB3, 0xA7, 0xB1, 0xB6, 0xA3, 
   0xAD, 0xB0, 0x98, 0xA5, 0xA7, 0x99, 0xA6, 0xAE, 0x70, 0x73, 0x7B, 0x43, 0x4A, 0x49, 0x62, 0x70, 
   0x6D, 0x9A, 0xA9, 0xA9, 0x9A, 0xA5, 0xA9, 0x9E, 0xA6, 0xAD, 0xA4, 0xAB, 0xB0, 0xB6, 0xBF, 0xC0, 
   0xC9, 0xD1, 0xD4, 0xB8, 0xBB, 0xC3, 0xAB, 0xB0, 0xB8, 0xAE, 0xB8, 0xBE, 0xBB, 0xCA, 0xCF, 0xC3, 
   0xD4, 0xD9, 0xC4, 0xD3, 0xD6, 0xC6, 0xD2, 0xD3, 0xC6, 0xD0, 0xD0, 0xC6, 0xD1, 0xD0, 0xC8, 0xD3, 
   0xD2, 0xC6, 0xD0, 0xD2, 0xC5, 0xCD, 0xD1, 0xC3, 0xCE, 0xCE, 0xC1, 0xCC, 0xCF, 0xB6, 0xC4, 0xC9, 
   0xA8, 0xBA, 0xBF, 0xA9, 0xBD, 0xC3, 0xBA, 0xCD, 0xD3, 0xB9, 0xC8, 0xCE, 0xB2, 0xBB, 0xC4, 0xB1, 
   0xBA, 0xC1, 0xB3, 0xBD, 0xC2, 0xB4, 0xC1, 0xC5, 0xB6, 0xC5, 0xC9, 0xB9, 0xCA, 0xCF, 0xB7, 0xC8, 
   0xD0, 0xA4, 0xB3, 0xC0, 0x92, 0xA4, 0xB2, 0x8E, 0xA3, 0xAF, 0x8D, 0xA3, 0xB0, 0x8F, 0xA4, 0xB3, 
   0x8F, 0xA4, 0xB2, 0x8E, 0xA3, 0xAF, 0x8A, 0x9F, 0xA9, 0x82, 0x96, 0xA4, 0x7D, 0x8D, 0xA2, 0x66, 
   0x71, 0x80, 0x39, 0x3D, 0x3F, 0x38, 0x38, 0x33, 0x35, 0x37, 0x36, 0x2F, 0x35, 0x32, 0x31, 0x33, 
   0x31, 0x2F, 0x2F, 0x31, 0x2B, 0x2F, 0x33, 0x31, 0x34, 0x39, 0x3F, 0x40, 0x44, 0x56, 0x55, 0x53, 
   0x5D, 0x5D, 0x5A, 0x6C, 0x6B, 0x6A, 0x6D, 0x68, 0x6B, 0x67, 0x60, 0x65, 0x5B, 0x55, 0x5C, 0x34, 
   0x32, 0x36, 0x42, 0x4E, 0x48, 0x92, 0x9D, 0x99, 0x9A, 0x9C, 0xA1, 0x79, 0x7B, 0x84, 0x70, 0x76, 
   0x7C, 0x75, 0x81, 0x86, 0x79, 0x86, 0x88, 0x79, 0x80, 0x83, 0x74, 0x77, 0x79, 0x65, 0x6F, 0x70, 
   0x55, 0x61, 0x63, 0x3A, 0x3C, 0x3E, 0x17, 0x18, 0x17, 0x1F, 0x25, 0x22, 0x2E, 0x38, 0x35, 0x42, 
   0x4C, 0x48, 0x41, 0x4E, 0x4A, 0x3F, 0x4A, 0x48, 0x49, 0x50, 0x51, 0x49, 0x52, 0x55, 0x5E, 0x63, 
   0x68, 0x70, 0x6E, 0x75, 0x79, 0x71, 0x76, 0x76, 0x70, 0x72, 0x78, 0x71, 0x73, 0x71, 0x69, 0x6A, 
   0x6A, 0x67, 0x68, 0x85, 0x7D, 0x80, 0x61, 0x63, 0x77, 0x5E, 0x63, 0x6E, 0x66, 0x6A, 0x6F, 0x79, 
   0x79, 0x7D, 0x89, 0x88, 0x8B, 0x77, 0x76, 0x79, 0x66, 0x64, 0x6C, 0x71, 0x6D, 0x74, 0x90, 0x8E, 
   0x91, 0x9D, 0x9E, 0x9D, 0x96, 0x98, 0x94, 0x97, 0x96, 0x95, 0x7C, 0x78, 0x7D, 0x57, 0x53, 0x58, 
   0x59, 0x56, 0x5E, 0x5A, 0x5D, 0x66, 0x5F, 0x67, 0x6B, 0x6E, 0x70, 0x70, 0x7E, 0x7F, 0x7F, 0x8A, 
   0x8D, 0x91, 0x7B, 0x7B, 0x7E, 0x65, 0x61, 0x63, 0x58, 0x56, 0x58, 0x4D, 0x50, 0x52, 0x4D, 0x50, 
   0x57, 0x48, 0x4C, 0x57, 0x55, 0x58, 0x62, 0x63, 0x60, 0x66, 0x60, 0x5D, 0x60, 0x53, 0x53, 0x53, 
   0x3D, 0x3F, 0x3C, 0x20, 0x20, 0x1D, 0x2D, 0x31, 0x30, 0x72, 0x73, 0x71, 0x86, 0x80, 0x7F, 0x89, 
   0x83, 0x83, 0x89, 0x86, 0x83, 0x78, 0x79, 0x74, 0x71, 0x70, 0x6E, 0x71, 0x6F, 0x73, 0x81, 0x80, 
   0x87, 0x92, 0x95, 0x9D, 0x96, 0x9A, 0xA2, 0x93, 0x9A, 0xA2, 0x94, 0x99, 0xA1, 0x91, 0x93, 0x97, 
   0x93, 0x92, 0x98, 0x8E, 0x8E, 0x9A, 0x89, 0x8B, 0x97, 0x8A, 0x8F, 0x96, 0x8A, 0x8C, 0x92, 0x90, 
   0x8D, 0x96, 0x98, 0x94, 0x9D, 0x6F, 0x6B, 0x7C, 0x2C, 0x2F, 0x3B, 0x2A, 0x33, 0x35, 0x54, 0x58, 
   0x4F, 0x5D, 0x5E, 0x55, 0x2D, 0x2F, 0x29, 0x79, 0x83, 0x7F, 0x95, 0x9E, 0x9D, 0x97, 0x9C, 0xA1, 
   0x98, 0x96, 0x9D, 0x95, 0x96, 0x98, 0x90, 0x91, 0x95, 0x85, 0x85, 0x89, 0x89, 0x86, 0x8B, 0x8D, 
   0x84, 0x8D, 0x76, 0x6A, 0x76, 0x57, 0x4A, 0x58, 0x35, 0x2A, 0x38, 0x28, 0x28, 0x2D, 0x31, 0x34, 
   0x34, 0x4A, 0x4D, 0x4A, 0x51, 0x54, 0x4F, 0x62, 0x61, 0x5D, 0x6B, 0x69, 0x6A, 0x4B, 0x4E, 0x52, 
   0x41, 0x49, 0x4A, 0x3F, 0x46, 0x49, 0x3B, 0x42, 0x4A, 0x29, 0x2F, 0x36, 0x1B, 0x23, 0x25, 0x24, 
   0x2D, 0x2E, 0x2D, 0x35, 0x3A, 0x3B, 0x43, 0x49, 0x3C, 0x4A, 0x4F, 0x3F, 0x56, 0x5A, 0x49, 0x62, 
   0x68, 0x56, 0x70, 0x78, 0x68, 0x7C, 0x87, 0x60, 0x72, 0x7E, 0x51, 0x64, 0x69, 0x5A, 0x68, 0x6F, 
   0x6B, 0x77, 0x81, 0x6D, 0x79, 0x83, 0x6B, 0x76, 0x85, 0x67, 0x74, 0x87, 0x7B, 0x8B, 0x95, 0x81, 
   0x8E, 0x97, 0x82, 0x8D, 0x97, 0x77, 0x85, 0x90, 0x79, 0x8C, 0x96, 0x7D, 0x8D, 0x98, 0x77, 0x84, 
   0x8F, 0x73, 0x84, 0x8F, 0x74, 0x84, 0x8E, 0x89, 0x94, 0x9D, 0xB1, 0xB2, 0xB4, 0x94, 0x90, 0x8C, 
   0x87, 0x89, 0x86, 0x93, 0x94, 0x93, 0x76, 0x70, 0x74, 0x60, 0x5B, 0x56, 0x57, 0x51, 0x4D, 0x3F, 
   0x44, 0x49, 0x48, 0x52, 0x5E, 0x4B, 0x5C, 0x62, 0x3D, 0x4E, 0x51, 0x3C, 0x49, 0x4F, 0x49, 0x53, 
   0x59, 0x50, 0x5A, 0x61, 0x56, 0x5E, 0x6B, 0x85, 0x8B, 0x9D, 0x7E, 0x85, 0x9B, 0x7F, 0x88, 0x9B, 
   0x7F, 0x8B, 0x9D, 0x7A, 0x84, 0x99, 0x7F, 0x84, 0x96, 0x8B, 0x90, 0x9F, 0x90, 0x91, 0x9A, 0x87, 
   0x80, 0x88, 0x74, 0x6F, 0x74, 0x75, 0x74, 0x7B, 0x66, 0x68, 0x76, 0x61, 0x65, 0x76, 0x66, 0x6B, 
   0x7D, 0x70, 0x74, 0x83, 0x6B, 0x70, 0x7A, 0x5E, 0x60, 0x61, 0x63, 0x65, 0x68, 0x76, 0x78, 0x7B, 
   0x7F, 0x81, 0x81, 0x7B, 0x7D, 0x7E, 0x7F, 0x81, 0x85, 0x7D, 0x81, 0x84, 0x7D, 0x81, 0x87, 0x71, 
   0x6E, 0x77, 0x5C, 0x5A, 0x5F, 0x57, 0x5D, 0x5C, 0x60, 0x6B, 0x6B, 0x84, 0x8B, 0x8F, 0xA7, 0xA8, 
   0xAC, 0xA3, 0xA2, 0xA5, 0x94, 0x96, 0x9C, 0x8B, 0x8E, 0x97, 0x87, 0x8A, 0x95, 0x85, 0x8A, 0x94, 
   0x82, 0x87, 0x8F, 0x87, 0x8F, 0x96, 0x8E, 0x9B, 0xA0, 0x98, 0xA5, 0xA7, 0x9C, 0xA7, 0xA9, 0x9A, 
   0xA4, 0xA4, 0x8E, 0x9C, 0x9E, 0x96, 0xA6, 0xAD, 0x81, 0x86, 0x8F, 0x52, 0x53, 0x55, 0x4C, 0x55, 
   0x53, 0x81, 0x8E, 0x8E, 0x98, 0xA3, 0xA5, 0xA4, 0xAE, 0xB5, 0xAA, 0xB1, 0xB8, 0xAC, 0xB3, 0xB5, 
   0xB6, 0xBF, 0xC1, 0xC3, 0xCB, 0xD0, 0xB9, 0xBC, 0xC5, 0xB8, 0xC1, 0xC5, 0xBF, 0xD0, 0xD1, 0xC3, 
   0xD6, 0xDB, 0xC4, 0xD5, 0xDA, 0xC2, 0xCF, 0xD2, 0xC1, 0xCC, 0xCC, 0xC6, 0xD1, 0xCF, 0xC6, 0xD1, 
   0xD0, 0xBF, 0xCA, 0xCB, 0xB5, 0xBD, 0xC2, 0xB7, 0xC2, 0xC6, 0xB3, 0xBC, 0xBF, 0xAF, 0xB9, 0xBA, 
   0xB4, 0xC1, 0xC2, 0xB4, 0xC4, 0xC7, 0xBD, 0xCC, 0xD3, 0xBD, 0xCB, 0xD2, 0xB2, 0xBD, 0xC2, 0xB2, 
   0xBA, 0xBF, 0xB5, 0xBE, 0xC2, 0xB5, 0xC3, 0xC8, 0xB4, 0xC4, 0xCC, 0xB3, 0xC4, 0xCE, 0xAA, 0xBB, 
   0xC7, 0x97, 0xA8, 0xB4, 0x8C, 0x9E, 0xAC, 0x87, 0x9C, 0xA9, 0x8C, 0xA3, 0xB0, 0x8F, 0xA3, 0xB3, 
   0x8C, 0xA0, 0xAF, 0x88, 0x9C, 0xA9, 0x87, 0x9B, 0xA5, 0x84, 0x94, 0x9F, 0x75, 0x7D, 0x8A, 0x44, 
   0x47, 0x4E, 0x2A, 0x2B, 0x2D, 0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2E, 0x28, 0x2B, 0x2D, 0x23, 0x23, 
   0x22, 0x24, 0x25, 0x27, 0x36, 0x3C, 0x3F, 0x4A, 0x51, 0x51, 0x4D, 0x55, 0x52, 0x58, 0x5A, 0x56, 
   0x56, 0x54, 0x55, 0x5A, 0x58, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x61, 0x61, 0x65, 0x62, 0x65, 0x49, 
   0x45, 0x4A, 0x1B, 0x1E, 0x1C, 0x55, 0x5D, 0x56, 0x72, 0x76, 0x77, 0x5B, 0x62, 0x68, 0x4E, 0x58, 
   0x5B, 0x5A, 0x67, 0x69, 0x69, 0x76, 0x79, 0x63, 0x67, 0x70, 0x48, 0x45, 0x4D, 0x37, 0x3C, 0x41, 
   0x27, 0x30, 0x32, 0x20, 0x1F, 0x20, 0x19, 0x19, 0x18, 0x16, 0x1F, 0x1D, 0x18, 0x26, 0x22, 0x25, 
   0x31, 0x29, 0x2F, 0x3A, 0x2F, 0x33, 0x39, 0x33, 0x2C, 0x30, 0x2B, 0x39, 0x45, 0x40, 0x67, 0x75, 
   0x71, 0x77, 0x78, 0x78, 0x7B, 0x70, 0x74, 0x65, 0x5A, 0x5E, 0x5C, 0x51, 0x55, 0x5B, 0x50, 0x52, 
   0x77, 0x73, 0x72, 0x92, 0x8E, 0x91, 0x60, 0x61, 0x73, 0x6B, 0x6B, 0x76, 0x88, 0x87, 0x8B, 0x91, 
   0x8F, 0x8F, 0x88, 0x87, 0x86, 0x82, 0x82, 0x82, 0x93, 0x93, 0x96, 0x99, 0x98, 0x9D, 0x9B, 0x9C, 
   0x9F, 0x99, 0x98, 0x9C, 0x96, 0x95, 0x98, 0x97, 0x97, 0x9C, 0x72, 0x6C, 0x73, 0x59, 0x54, 0x59, 
   0x5A, 0x58, 0x5F, 0x55, 0x59, 0x5F, 0x5A, 0x67, 0x6C, 0x68, 0x71, 0x73, 0x68, 0x6E, 0x70, 0x59, 
   0x62, 0x67, 0x51, 0x57, 0x5D, 0x4E, 0x51, 0x55, 0x4D, 0x51, 0x54, 0x5D, 0x64, 0x66, 0x6B, 0x72, 
   0x79, 0x74, 0x7C, 0x85, 0x70, 0x79, 0x7F, 0x6A, 0x6C, 0x6F, 0x60, 0x5E, 0x60, 0x4F, 0x4D, 0x4E, 
   0x33, 0x38, 0x34, 0x15, 0x18, 0x13, 0x17, 0x1E, 0x1D, 0x71, 0x75, 0x73, 0x86, 0x84, 0x82, 0x85, 
   0x84, 0x82, 0x83, 0x83, 0x7D, 0x75, 0x77, 0x73, 0x6F, 0x6E, 0x71, 0x83, 0x80, 0x87, 0x95, 0x96, 
   0x98, 0x93, 0x96, 0x98, 0x92, 0x97, 0x9E, 0x92, 0x98, 0x9E, 0x8D, 0x93, 0x99, 0x8C, 0x8F, 0x91, 
   0x8D, 0x8D, 0x92, 0x90, 0x90, 0x9A, 0x8C, 0x8E, 0x99, 0x89, 0x8F, 0x96, 0x8B, 0x8E, 0x94, 0x8E, 
   0x8C, 0x93, 0x8E, 0x8B, 0x90, 0x70, 0x6E, 0x7A, 0x2B, 0x2C, 0x39, 0x26, 0x2C, 0x32, 0x44, 0x46, 
   0x44, 0x4E, 0x4D, 0x48, 0x37, 0x38, 0x35, 0x74, 0x7B, 0x77, 0x99, 0x9C, 0x9B, 0x95, 0x95, 0x99, 
   0x96, 0x94, 0x9A, 0x93, 0x93, 0x93, 0x99, 0x93, 0x99, 0x99, 0x95, 0x9B, 0x9B, 0x96, 0x9D, 0x9A, 
   0x95, 0x9C, 0x9D, 0x97, 0xA0, 0x9F, 0x97, 0xA1, 0x8C, 0x84, 0x8E, 0x5D, 0x5A, 0x63, 0x42, 0x43, 
   0x4D, 0x3D, 0x3B, 0x49, 0x39, 0x34, 0x43, 0x39, 0x33, 0x3B, 0x3F, 0x3C, 0x3C, 0x41, 0x42, 0x42, 
   0x42, 0x3F, 0x47, 0x3C, 0x3D, 0x45, 0x3D, 0x43, 0x48, 0x32, 0x39, 0x3F, 0x25, 0x2A, 0x31, 0x27, 
   0x2B, 0x31, 0x3E, 0x42, 0x46, 0x43, 0x47, 0x4D, 0x31, 0x38, 0x40, 0x2F, 0x3E, 0x47, 0x35, 0x47, 
   0x50, 0x40, 0x55, 0x5F, 0x50, 0x63, 0x6E, 0x5A, 0x6B, 0x76, 0x53, 0x65, 0x6E, 0x51, 0x61, 0x6C, 
   0x60, 0x6F, 0x7B, 0x66, 0x78, 0x7E, 0x62, 0x74, 0x7D, 0x59, 0x69, 0x7B, 0x67, 0x74, 0x85, 0x7C, 
   0x86, 0x96, 0x91, 0x9A, 0xA8, 0x80, 0x8D, 0x97, 0x71, 0x83, 0x8D, 0x73, 0x85, 0x91, 0x78, 0x83, 
   0x92, 0x6F, 0x82, 0x8C, 0x73, 0x82, 0x8C, 0x84, 0x90, 0x99, 0xA8, 0xAB, 0xAD, 0x95, 0x92, 0x8D, 
   0x94, 0x91, 0x90, 0x91, 0x8F, 0x8F, 0x60, 0x5C, 0x5F, 0x4C, 0x50, 0x4F, 0x46, 0x49, 0x4A, 0x3B, 
   0x44, 0x4B, 0x34, 0x41, 0x4C, 0x2F, 0x3F, 0x45, 0x37, 0x45, 0x48, 0x45, 0x4E, 0x54, 0x5C, 0x62, 
   0x6A, 0x51, 0x5A, 0x64, 0x6E, 0x76, 0x83, 0x85, 0x8A, 0x9C, 0x7E, 0x86, 0x9B, 0x7A, 0x86, 0x98, 
   0x79, 0x82, 0x93, 0x79, 0x7E, 0x90, 0x85, 0x87, 0x9C, 0x9C, 0x9E, 0xAE, 0x96, 0x9A, 0xA5, 0xA0, 
   0x9E, 0xA4, 0x97, 0x95, 0x96, 0x84, 0x81, 0x83, 0x6B, 0x68, 0x71, 0x63, 0x64, 0x78, 0x6A, 0x6F, 
   0x86, 0x6B, 0x6F, 0x81, 0x4D, 0x50, 0x59, 0x59, 0x5A, 0x5C, 0x76, 0x75, 0x7D, 0x84, 0x86, 0x8C, 
   0x7C, 0x81, 0x83, 0x6D, 0x75, 0x76, 0x73, 0x7A, 0x7F, 0x7A, 0x80, 0x83, 0x81, 0x7F, 0x88, 0x7D, 
   0x7A, 0x82, 0x68, 0x6A, 0x71, 0x5B, 0x61, 0x65, 0x58, 0x5D, 0x5E, 0x69, 0x70, 0x72, 0x9F, 0xA8, 
   0xAE, 0xA0, 0xA2, 0xA8, 0x90, 0x94, 0x9B, 0x90, 0x92, 0x99, 0x86, 0x89, 0x90, 0x87, 0x8C, 0x93, 
   0x8A, 0x8C, 0x93, 0x8A, 0x8C, 0x93, 0x88, 0x90, 0x94, 0x8F, 0x97, 0x99, 0x9B, 0xA0, 0xA3, 0x98, 
   0x9C, 0x9D, 0x92, 0x9B, 0x9D, 0x96, 0xA4, 0xAB, 0x86, 0x8D, 0x96, 0x64, 0x62, 0x67, 0x60, 0x65, 
   0x66, 0x66, 0x71, 0x6F, 0x86, 0x91, 0x90, 0x9C, 0xAA, 0xAD, 0xA0, 0xAB, 0xB2, 0xA7, 0xAD, 0xB4, 
   0xAC, 0xB7, 0xBC, 0xBB, 0xC6, 0xCB, 0xB9, 0xBE, 0xC3, 0xB8, 0xBE, 0xBF, 0xBE, 0xCB, 0xCB, 0xC3, 
   0xD2, 0xD6, 0xC2, 0xD3, 0xD9, 0xBE, 0xCC, 0xD1, 0xBA, 0xC6, 0xC7, 0xC1, 0xCD, 0xCC, 0xC8, 0xD3, 
   0xD3, 0xC6, 0xD0, 0xD2, 0xBF, 0xC7, 0xCB, 0xAE, 0xBC, 0xC0, 0xAD, 0xB7, 0xBA, 0xA9, 0xB2, 0xB0, 
   0xAA, 0xB3, 0xB0, 0xAD, 0xB8, 0xB6, 0xBB, 0xC8, 0xC8, 0xC0, 0xCD, 0xCF, 0xB6, 0xC1, 0xC5, 0xB2, 
   0xBB, 0xBF, 0xB3, 0xBD, 0xC1, 0xB6, 0xC3, 0xCA, 0xB6, 0xC8, 0xD2, 0xAA, 0xBB, 0xC8, 0x95, 0xA4, 
   0xB2, 0x90, 0x9F, 0xAB, 0x90, 0xA1, 0xAC, 0x8E, 0xA0, 0xAE, 0x90, 0xA2, 0xB1, 0x8B, 0x9E, 0xAB, 
   0x8C, 0x9C, 0xAC, 0x8A, 0x9E, 0xAB, 0x86, 0x9A, 0xA6, 0x80, 0x8C, 0x97, 0x59, 0x5C, 0x60, 0x30, 
   0x33, 0x35, 0x33, 0x39, 0x3E, 0x33, 0x38, 0x41, 0x34, 0x36, 0x3D, 0x3E, 0x3F, 0x44, 0x44, 0x44, 
   0x47, 0x47, 0x49, 0x4D, 0x43, 0x49, 0x4E, 0x42, 0x45, 0x49, 0x45, 0x4B, 0x4C, 0x4F, 0x51, 0x55, 
   0x4F, 0x4F, 0x52, 0x4D, 0x4D, 0x51, 0x4E, 0x51, 0x57, 0x4A, 0x50, 0x55, 0x50, 0x51, 0x51, 0x4E, 
   0x4B, 0x48, 0x28, 0x23, 0x27, 0x39, 0x3B, 0x3A, 0x53, 0x59, 0x5D, 0x5A, 0x65, 0x6C, 0x53, 0x61, 
   0x65, 0x5E, 0x68, 0x6C, 0x5E, 0x67, 0x6F, 0x5F, 0x63, 0x72, 0x5D, 0x5E, 0x6C, 0x51, 0x53, 0x5D, 
   0x38, 0x35, 0x3B, 0x26, 0x1D, 0x20, 0x20, 0x19, 0x1C, 0x12, 0x10, 0x11, 0x10, 0x13, 0x10, 0x0E, 
   0x17, 0x0F, 0x10, 0x1C, 0x15, 0x1C, 0x23, 0x23, 0x1B, 0x21, 0x21, 0x24, 0x31, 0x29, 0x59, 0x6C, 
   0x62, 0x7C, 0x7B, 0x76, 0x76, 0x67, 0x67, 0x5A, 0x4C, 0x50, 0x55, 0x48, 0x4E, 0x64, 0x5E, 0x62, 
   0x78, 0x75, 0x77, 0x81, 0x7D, 0x81, 0x6A, 0x69, 0x7B, 0x77, 0x74, 0x81, 0x7F, 0x7F, 0x88, 0x83, 
   0x85, 0x8B, 0x90, 0x91, 0x94, 0x94, 0x94, 0x94, 0x95, 0x95, 0x93, 0x98, 0x98, 0x97, 0x97, 0x98, 
   0x98, 0x93, 0x93, 0x94, 0x90, 0x93, 0x92, 0x79, 0x7C, 0x7D, 0x60, 0x5C, 0x61, 0x5D, 0x59, 0x5C, 
   0x57, 0x58, 0x5E, 0x49, 0x4F, 0x54, 0x45, 0x51, 0x55, 0x42, 0x4B, 0x55, 0x41, 0x4A, 0x54, 0x45, 
   0x4E, 0x55, 0x50, 0x56, 0x5C, 0x58, 0x5D, 0x65, 0x5B, 0x64, 0x6D, 0x6F, 0x78, 0x7E, 0x70, 0x77, 
   0x7C, 0x70, 0x78, 0x7D, 0x6D, 0x75, 0x78, 0x6A, 0x6C, 0x6C, 0x5F, 0x5D, 0x5C, 0x48, 0x46, 0x44, 
   0x27, 0x29, 0x23, 0x0F, 0x13, 0x0C, 0x12, 0x19, 0x18, 0x73, 0x7A, 0x78, 0x8A, 0x8B, 0x88, 0x82, 
   0x82, 0x7F, 0x7D, 0x82, 0x78, 0x7A, 0x80, 0x76, 0x71, 0x73, 0x74, 0x82, 0x84, 0x87, 0x95, 0x9A, 
   0x97, 0x91, 0x95, 0x96, 0x8C, 0x8F, 0x98, 0x90, 0x92, 0x9A, 0x90, 0x92, 0x96, 0x91, 0x91, 0x95, 
   0x8D, 0x8E, 0x95, 0x8B, 0x8F, 0x97, 0x8F, 0x96, 0x9E, 0x88, 0x91, 0x9A, 0x84, 0x8A, 0x92, 0x85, 
   0x83, 0x8B, 0x84, 0x82, 0x8A, 0x76, 0x72, 0x7C, 0x32, 0x2E, 0x3C, 0x3D, 0x42, 0x49, 0x62, 0x67, 
   0x69, 0x58, 0x58, 0x56, 0x3B, 0x3B, 0x39, 0x71, 0x76, 0x72, 0xA1, 0xA0, 0xA0, 0x9A, 0x98, 0x9C, 
   0x99, 0x96, 0x9A, 0x96, 0x96, 0x98, 0x9B, 0x96, 0x9A, 0xA5, 0xA2, 0xA6, 0xA2, 0xA0, 0xA6, 0x97, 
   0x95, 0x9C, 0x93, 0x91, 0x96, 0x90, 0x8D, 0x92, 0x90, 0x8B, 0x91, 0x8E, 0x87, 0x90, 0x95, 0x92, 
   0x98, 0x9B, 0x95, 0x9D, 0x98, 0x91, 0x9A, 0x95, 0x8A, 0x93, 0x8E, 0x83, 0x8E, 0x76, 0x6E, 0x7A, 
   0x55, 0x50, 0x5B, 0x37, 0x38, 0x43, 0x35, 0x39, 0x40, 0x2E, 0x34, 0x3B, 0x2C, 0x32, 0x39, 0x2B, 
   0x2F, 0x33, 0x44, 0x4B, 0x49, 0x4B, 0x53, 0x55, 0x33, 0x38, 0x3D, 0x30, 0x34, 0x3C, 0x31, 0x3D, 
   0x43, 0x38, 0x43, 0x4A, 0x3E, 0x4A, 0x52, 0x48, 0x59, 0x5E, 0x54, 0x67, 0x69, 0x49, 0x5C, 0x66, 
   0x50, 0x62, 0x6F, 0x5A, 0x6C, 0x73, 0x5A, 0x68, 0x72, 0x5B, 0x65, 0x74, 0x60, 0x6B, 0x7D, 0x61, 
   0x67, 0x7A, 0x69, 0x73, 0x80, 0x77, 0x83, 0x8D, 0x71, 0x7F, 0x8B, 0x74, 0x83, 0x91, 0x78, 0x84, 
   0x92, 0x74, 0x86, 0x94, 0x79, 0x89, 0x95, 0x83, 0x93, 0x9C, 0x9D, 0xA4, 0xA4, 0x99, 0x99, 0x94, 
   0x87, 0x87, 0x85, 0x5E, 0x60, 0x61, 0x43, 0x49, 0x4E, 0x32, 0x3F, 0x46, 0x2D, 0x36, 0x40, 0x35, 
   0x3C, 0x48, 0x2E, 0x36, 0x43, 0x2C, 0x37, 0x40, 0x44, 0x4A, 0x51, 0x59, 0x5D, 0x64, 0x5E, 0x61, 
   0x6B, 0x4D, 0x55, 0x61, 0x8D, 0x96, 0xA3, 0x85, 0x8D, 0x9E, 0x7C, 0x85, 0x9B, 0x79, 0x84, 0x9B, 
   0x87, 0x8E, 0xA0, 0x8A, 0x8D, 0xA2, 0x84, 0x84, 0x9C, 0x84, 0x85, 0x9B, 0x7F, 0x85, 0x98, 0x94, 
   0x96, 0xA5, 0x93, 0x93, 0x9F, 0x87, 0x85, 0x89, 0x7B, 0x77, 0x79, 0x66, 0x65, 0x76, 0x6A, 0x6B, 
   0x83, 0x60, 0x5F, 0x71, 0x4E, 0x4A, 0x52, 0x5E, 0x63, 0x61, 0x7F, 0x81, 0x87, 0x87, 0x8A, 0x91, 
   0x81, 0x88, 0x89, 0x7A, 0x82, 0x82, 0x7F, 0x84, 0x86, 0x7F, 0x81, 0x84, 0x85, 0x80, 0x8C, 0x7B, 
   0x79, 0x83, 0x66, 0x6B, 0x75, 0x5A, 0x61, 0x68, 0x57, 0x58, 0x58, 0x51, 0x57, 0x54, 0x73, 0x7F, 
   0x80, 0x8E, 0x93, 0x9B, 0x89, 0x8B, 0x94, 0x92, 0x94, 0x9C, 0x90, 0x93, 0x9B, 0x8D, 0x91, 0x95, 
   0x8F, 0x91, 0x94, 0x8A, 0x8F, 0x91, 0x86, 0x90, 0x93, 0x8C, 0x96, 0x97, 0x96, 0x9C, 0x9F, 0x94, 
   0x96, 0x98, 0x8D, 0x93, 0x95, 0x9E, 0xAA, 0xB0, 0x8B, 0x93, 0x9B, 0x71, 0x71, 0x76, 0x72, 0x78, 
   0x79, 0x6F, 0x7B, 0x7A, 0x7E, 0x8B, 0x89, 0x95, 0xA2, 0xA5, 0x9D, 0xAA, 0xAF, 0xA4, 0xAB, 0xB4, 
   0xA8, 0xB2, 0xBC, 0xAB, 0xB7, 0xBF, 0xB1, 0xBB, 0xC0, 0xB6, 0xC0, 0xC4, 0xB7, 0xC3, 0xC7, 0xBA, 
   0xC8, 0xCF, 0xBB, 0xCD, 0xD5, 0xBF, 0xCF, 0xD5, 0xBB, 0xC9, 0xCC, 0xB8, 0xC5, 0xC6, 0xBA, 0xC7, 
   0xC8, 0xC2, 0xCD, 0xCE, 0xBF, 0xC9, 0xCA, 0xB2, 0xC0, 0xC3, 0xB1, 0xBA, 0xBF, 0xA4, 0xAA, 0xAF, 
   0x9D, 0xA4, 0xA7, 0xA3, 0xAC, 0xAD, 0xB9, 0xC5, 0xC3, 0xC7, 0xD4, 0xD3, 0xC0, 0xCC, 0xD4, 0xB6, 
   0xC1, 0xC8, 0xB4, 0xC0, 0xC6, 0xB8, 0xC5, 0xCC, 0xBE, 0xCE, 0xD6, 0xA9, 0xBA, 0xC4, 0xA3, 0xB1, 
   0xBE, 0x99, 0xA6, 0xB4, 0x94, 0xA3, 0xAF, 0x9C, 0xAC, 0xBA, 0x93, 0xA3, 0xB3, 0x90, 0xA0, 0xAE, 
   0x8B, 0x98, 0xA8, 0x83, 0x93, 0xA0, 0x80, 0x8C, 0x9B, 0x71, 0x73, 0x81, 0x3F, 0x3D, 0x40, 0x48, 
   0x4C, 0x4B, 0x56, 0x5E, 0x60, 0x5A, 0x61, 0x63, 0x55, 0x5D, 0x5E, 0x4A, 0x50, 0x53, 0x49, 0x4C, 
   0x51, 0x53, 0x58, 0x5C, 0x5E, 0x61, 0x65, 0x5D, 0x59, 0x5E, 0x57, 0x50, 0x57, 0x5C, 0x5E, 0x5F, 
   0x58, 0x58, 0x5A, 0x4C, 0x4A, 0x50, 0x48, 0x48, 0x4E, 0x4D, 0x4E, 0x51, 0x51, 0x51, 0x50, 0x5B, 
   0x55, 0x54, 0x45, 0x3C, 0x45, 0x3C, 0x3A, 0x3E, 0x48, 0x4C, 0x55, 0x54, 0x5F, 0x67, 0x5D, 0x6A, 
   0x70, 0x5E, 0x63, 0x6C, 0x59, 0x63, 0x6C, 0x5C, 0x66, 0x6F, 0x5D, 0x67, 0x72, 0x5A, 0x61, 0x6D, 
   0x5D, 0x5C, 0x65, 0x4F, 0x43, 0x4D, 0x2D, 0x20, 0x29, 0x17, 0x0E, 0x14, 0x0A, 0x0B, 0x0C, 0x0A, 
   0x10, 0x10, 0x1F, 0x27, 0x2D, 0x26, 0x2D, 0x37, 0x1C, 0x21, 0x28, 0x15, 0x17, 0x17, 0x43, 0x52, 
   0x49, 0x72, 0x76, 0x6F, 0x69, 0x62, 0x61, 0x65, 0x5B, 0x5F, 0x73, 0x66, 0x6D, 0x6E, 0x66, 0x6D, 
   0x74, 0x6A, 0x72, 0x75, 0x6A, 0x72, 0x66, 0x69, 0x7D, 0x73, 0x75, 0x84, 0x78, 0x7B, 0x86, 0x86, 
   0x89, 0x90, 0x95, 0x96, 0x9B, 0x8C, 0x8E, 0x90, 0x6D, 0x73, 0x6F, 0x66, 0x6E, 0x6E, 0x65, 0x6E, 
   0x74, 0x50, 0x59, 0x57, 0x40, 0x4A, 0x42, 0x39, 0x3F, 0x3D, 0x53, 0x54, 0x56, 0x59, 0x5A, 0x5E, 
   0x57, 0x5D, 0x64, 0x50, 0x57, 0x5F, 0x47, 0x4F, 0x57, 0x45, 0x49, 0x58, 0x49, 0x4C, 0x5B, 0x52, 
   0x56, 0x61, 0x57, 0x5B, 0x67, 0x60, 0x64, 0x73, 0x6C, 0x73, 0x7E, 0x7E, 0x88, 0x8E, 0x70, 0x76, 
   0x79, 0x6F, 0x72, 0x72, 0x68, 0x69, 0x69, 0x63, 0x61, 0x61, 0x57, 0x54, 0x55, 0x3E, 0x3E, 0x3D, 
   0x27, 0x28, 0x21, 0x17, 0x1B, 0x15, 0x0C, 0x12, 0x12, 0x4C, 0x56, 0x53, 0x83, 0x89, 0x85, 0x83, 
   0x85, 0x82, 0x7A, 0x81, 0x77, 0x79, 0x7E, 0x77, 0x70, 0x73, 0x74, 0x7A, 0x80, 0x83, 0x8D, 0x95, 
   0x94, 0x91, 0x94, 0x9A, 0x8A, 0x8D, 0x99, 0x8C, 0x8E, 0x95, 0x8E, 0x90, 0x95, 0x92, 0x91, 0x9A, 
   0x8E, 0x8F, 0x99, 0x87, 0x8E, 0x96, 0x8A, 0x92, 0x9B, 0x93, 0x99, 0xA6, 0x98, 0x99, 0xA0, 0x8F, 
   0x88, 0x8F, 0x8A, 0x83, 0x8D, 0x7F, 0x79, 0x85, 0x3A, 0x35, 0x42, 0x4D, 0x58, 0x5F, 0x85, 0x93, 
   0x97, 0x68, 0x6C, 0x69, 0x44, 0x42, 0x3B, 0x6D, 0x71, 0x69, 0xA2, 0xA3, 0xA2, 0x9D, 0x9B, 0x9D, 
   0x9D, 0x98, 0x9C, 0x97, 0x98, 0x9C, 0x9C, 0x9B, 0x9F, 0xA5, 0xA4, 0xA7, 0x9C, 0x9B, 0x9E, 0x93, 
   0x92, 0x95, 0x91, 0x90, 0x94, 0x8F, 0x8F, 0x93, 0x91, 0x90, 0x97, 0x93, 0x92, 0x97, 0x90, 0x91, 
   0x92, 0x93, 0x92, 0x94, 0x96, 0x94, 0x98, 0x9B, 0x98, 0x9D, 0x9D, 0x97, 0x9F, 0x9A, 0x95, 0x9F, 
   0x8C, 0x8A, 0x95, 0x69, 0x6B, 0x75, 0x52, 0x4C, 0x5A, 0x39, 0x38, 0x47, 0x31, 0x33, 0x3F, 0x2B, 
   0x2D, 0x33, 0x30, 0x3A, 0x35, 0x38, 0x43, 0x3F, 0x2E, 0x34, 0x35, 0x36, 0x3A, 0x3F, 0x2F, 0x38, 
   0x3B, 0x2C, 0x37, 0x39, 0x31, 0x3C, 0x40, 0x32, 0x3D, 0x40, 0x3D, 0x4A, 0x4A, 0x42, 0x53, 0x58, 
   0x47, 0x5A, 0x62, 0x50, 0x62, 0x68, 0x53, 0x61, 0x69, 0x58, 0x60, 0x6C, 0x5B, 0x68, 0x70, 0x5D, 
   0x66, 0x72, 0x5C, 0x68, 0x71, 0x6D, 0x7B, 0x81, 0x77, 0x83, 0x8C, 0x76, 0x86, 0x91, 0x78, 0x86, 
   0x8F, 0x7E, 0x8C, 0x93, 0x7B, 0x84, 0x88, 0x79, 0x84, 0x86, 0x88, 0x92, 0x8E, 0x81, 0x87, 0x83, 
   0x54, 0x58, 0x5B, 0x36, 0x3C, 0x41, 0x2C, 0x38, 0x3E, 0x2B, 0x36, 0x42, 0x2D, 0x37, 0x44, 0x35, 
   0x3B, 0x48, 0x36, 0x3B, 0x48, 0x40, 0x4D, 0x55, 0x54, 0x5C, 0x62, 0x67, 0x6B, 0x74, 0x53, 0x57, 
   0x62, 0x50, 0x57, 0x63, 0x93, 0x9C, 0xA8, 0x83, 0x8B, 0x9D, 0x7B, 0x81, 0x9B, 0x7C, 0x83, 0x9C, 
   0x7D, 0x86, 0x99, 0x7F, 0x84, 0x99, 0x7F, 0x80, 0x9B, 0x79, 0x81, 0x9B, 0x78, 0x81, 0x9C, 0x75, 
   0x7C, 0x92, 0x71, 0x75, 0x89, 0x6F, 0x6F, 0x7A, 0x75, 0x73, 0x77, 0x74, 0x73, 0x7B, 0x85, 0x81, 
   0x8D, 0x73, 0x6C, 0x75, 0x52, 0x48, 0x4F, 0x62, 0x68, 0x63, 0x98, 0x9B, 0x9D, 0x8F, 0x90, 0x97, 
   0x83, 0x87, 0x8B, 0x87, 0x8C, 0x8E, 0x91, 0x92, 0x96, 0x97, 0x93, 0x99, 0x88, 0x83, 0x89, 0x7C, 
   0x7D, 0x86, 0x6B, 0x73, 0x7B, 0x5B, 0x63, 0x67, 0x59, 0x5C, 0x5C, 0x52, 0x58, 0x53, 0x5A, 0x65, 
   0x60, 0x8E, 0x94, 0x96, 0x92, 0x94, 0x9A, 0x8B, 0x8C, 0x95, 0x8B, 0x8F, 0x99, 0x8A, 0x8F, 0x96, 
   0x8C, 0x91, 0x95, 0x89, 0x8F, 0x91, 0x83, 0x8D, 0x8D, 0x85, 0x92, 0x93, 0x8E, 0x97, 0x9B, 0x8D, 
   0x92, 0x95, 0x91, 0x96, 0x98, 0xA1, 0xA9, 0xAE, 0x84, 0x8B, 0x92, 0x72, 0x78, 0x7B, 0x78, 0x82, 
   0x85, 0x75, 0x86, 0x86, 0x7D, 0x8C, 0x8A, 0x8F, 0x98, 0x9B, 0x9E, 0xA7, 0xAC, 0xA1, 0xAB, 0xB0, 
   0xA3, 0xAC, 0xB5, 0xA7, 0xB3, 0xBE, 0xA8, 0xBA, 0xC0, 0xB3, 0xC4, 0xCA, 0xB3, 0xC3, 0xCB, 0xB2, 
   0xC3, 0xCB, 0xBC, 0xD0, 0xD6, 0xBD, 0xCD, 0xD3, 0xBA, 0xC7, 0xCC, 0xB5, 0xC1, 0xC5, 0xB5, 0xC2, 
   0xC3, 0xBD, 0xC8, 0xC9, 0xBF, 0xC8, 0xC9, 0xBB, 0xC7, 0xCA, 0xBC, 0xC3, 0xC7, 0xAD, 0xB3, 0xB8, 
   0xAB, 0xB2, 0xB6, 0xB1, 0xBB, 0xBD, 0xBA, 0xC5, 0xC5, 0xC6, 0xD2, 0xD3, 0xC5, 0xD2, 0xDA, 0xBC, 
   0xCA, 0xD0, 0xB2, 0xC0, 0xC6, 0xB9, 0xC6, 0xCD, 0xBD, 0xCA, 0xD3, 0xB6, 0xC6, 0xD2, 0xB2, 0xC2, 
   0xCE, 0xA5, 0xB2, 0xC0, 0x9A, 0xA8, 0xB7, 0x96, 0xA6, 0xB4, 0x8F, 0x9F, 0xAE, 0x8B, 0x99, 0xA9, 
   0x7F, 0x8B, 0x9B, 0x77, 0x80, 0x8C, 0x75, 0x78, 0x83, 0x50, 0x4C, 0x54, 0x45, 0x44, 0x45, 0x4B, 
   0x51, 0x4F, 0x4B, 0x53, 0x52, 0x4F, 0x52, 0x52, 0x4B, 0x4C, 0x4F, 0x48, 0x48, 0x4F, 0x49, 0x4A, 
   0x53, 0x58, 0x5F, 0x62, 0x8B, 0x92, 0x8F, 0xA0, 0x9C, 0x9B, 0x9D, 0x96, 0x98, 0x8F, 0x8C, 0x91, 
   0x80, 0x7C, 0x82, 0x6D, 0x69, 0x6F, 0x66, 0x65, 0x69, 0x7B, 0x7C, 0x7D, 0x81, 0x82, 0x81, 0x82, 
   0x81, 0x82, 0x6F, 0x68, 0x71, 0x5E, 0x5B, 0x63, 0x5E, 0x5F, 0x6A, 0x5B, 0x64, 0x6A, 0x66, 0x70, 
   0x77, 0x60, 0x65, 0x70, 0x5A, 0x67, 0x6F, 0x59, 0x69, 0x6F, 0x59, 0x65, 0x71, 0x55, 0x60, 0x6F, 
   0x54, 0x5D, 0x6B, 0x63, 0x60, 0x6D, 0x58, 0x50, 0x5D, 0x2B, 0x20, 0x2B, 0x11, 0x10, 0x18, 0x1D, 
   0x25, 0x2E, 0x47, 0x4B, 0x55, 0x4B, 0x4B, 0x54, 0x42, 0x40, 0x47, 0x23, 0x1C, 0x22, 0x2D, 0x32, 
   0x2F, 0x59, 0x61, 0x5C, 0x62, 0x66, 0x64, 0x7D, 0x7A, 0x7C, 0x90, 0x87, 0x8C, 0x88, 0x7C, 0x84, 
   0x79, 0x6C, 0x74, 0x7A, 0x6E, 0x76, 0x5E, 0x68, 0x7F, 0x7D, 0x86, 0x93, 0x81, 0x8A, 0x91, 0x72, 
   0x75, 0x7A, 0x72, 0x74, 0x76, 0x69, 0x69, 0x6A, 0x44, 0x47, 0x43, 0x44, 0x4A, 0x4B, 0x49, 0x52, 
   0x5D, 0x31, 0x3C, 0x46, 0x1A, 0x26, 0x29, 0x23, 0x2D, 0x2B, 0x52, 0x56, 0x56, 0x58, 0x59, 0x5D, 
   0x5D, 0x60, 0x68, 0x61, 0x67, 0x6F, 0x6D, 0x74, 0x7F, 0x85, 0x88, 0x97, 0x7D, 0x7F, 0x8C, 0x6C, 
   0x6F, 0x7B, 0x77, 0x7D, 0x89, 0x83, 0x89, 0x94, 0x80, 0x88, 0x8B, 0x78, 0x81, 0x83, 0x6D, 0x73, 
   0x74, 0x6E, 0x6C, 0x6C, 0x69, 0x65, 0x66, 0x5D, 0x59, 0x5B, 0x4A, 0x46, 0x49, 0x36, 0x31, 0x35, 
   0x27, 0x29, 0x23, 0x17, 0x1E, 0x17, 0x0E, 0x16, 0x13, 0x16, 0x20, 0x1D, 0x4A, 0x52, 0x4F, 0x6F, 
   0x76, 0x74, 0x68, 0x74, 0x6E, 0x6E, 0x73, 0x70, 0x6E, 0x70, 0x70, 0x74, 0x7C, 0x7D, 0x8E, 0x97, 
   0x9B, 0x91, 0x92, 0x9D, 0x8A, 0x8B, 0x97, 0x84, 0x89, 0x91, 0x86, 0x8C, 0x92, 0x8F, 0x91, 0x9B, 
   0x91, 0x94, 0xA0, 0x8B, 0x90, 0x9A, 0x8B, 0x8E, 0x9A, 0x91, 0x93, 0x9F, 0x96, 0x94, 0x9B, 0x92, 
   0x8C, 0x94, 0x92, 0x8B, 0x95, 0x8D, 0x88, 0x94, 0x4A, 0x47, 0x54, 0x47, 0x51, 0x5A, 0x7D, 0x90, 
   0x9B, 0x6C, 0x73, 0x75, 0x49, 0x45, 0x3F, 0x51, 0x53, 0x4D, 0x8E, 0x93, 0x92, 0x97, 0x98, 0x98, 
   0x98, 0x98, 0x98, 0x9A, 0x9C, 0x9B, 0x96, 0x99, 0x9A, 0x96, 0x99, 0x99, 0x96, 0x96, 0x9A, 0x92, 
   0x92, 0x98, 0x8E, 0x92, 0x97, 0x8A, 0x91, 0x94, 0x8A, 0x8D, 0x94, 0x8E, 0x8F, 0x97, 0x8E, 0x90, 
   0x94, 0x92, 0x93, 0x94, 0x95, 0x95, 0x98, 0x96, 0x95, 0x98, 0x96, 0x92, 0x96, 0x96, 0x93, 0x97, 
   0x9B, 0x9B, 0x9F, 0x91, 0x90, 0x99, 0x84, 0x7D, 0x8D, 0x73, 0x6C, 0x81, 0x56, 0x52, 0x63, 0x33, 
   0x31, 0x3B, 0x25, 0x28, 0x2D, 0x23, 0x26, 0x29, 0x1F, 0x23, 0x25, 0x2B, 0x34, 0x34, 0x2A, 0x36, 
   0x35, 0x26, 0x35, 0x34, 0x24, 0x32, 0x32, 0x24, 0x2C, 0x2B, 0x2C, 0x33, 0x30, 0x29, 0x33, 0x32, 
   0x29, 0x36, 0x35, 0x2C, 0x3A, 0x39, 0x36, 0x42, 0x44, 0x48, 0x53, 0x55, 0x57, 0x62, 0x64, 0x54, 
   0x5E, 0x63, 0x4C, 0x59, 0x5B, 0x54, 0x62, 0x62, 0x57, 0x62, 0x67, 0x5E, 0x68, 0x72, 0x6B, 0x75, 
   0x7D, 0x6C, 0x74, 0x79, 0x50, 0x51, 0x52, 0x40, 0x44, 0x43, 0x41, 0x4A, 0x48, 0x3A, 0x44, 0x44, 
   0x2C, 0x31, 0x39, 0x28, 0x2D, 0x39, 0x29, 0x33, 0x3C, 0x2D, 0x34, 0x44, 0x2E, 0x36, 0x48, 0x2F, 
   0x37, 0x45, 0x34, 0x3E, 0x48, 0x55, 0x61, 0x69, 0x5C, 0x66, 0x6C, 0x5B, 0x5E, 0x68, 0x44, 0x47, 
   0x54, 0x5D, 0x63, 0x70, 0x8A, 0x91, 0xA0, 0x80, 0x87, 0x9A, 0x7D, 0x80, 0x9B, 0x7E, 0x80, 0x9A, 
   0x7B, 0x83, 0x97, 0x77, 0x80, 0x94, 0x74, 0x7B, 0x93, 0x77, 0x80, 0x9A, 0x7A, 0x82, 0x9D, 0x79, 
   0x7D, 0x97, 0x77, 0x7E, 0x91, 0x7E, 0x84, 0x8F, 0x7B, 0x7B, 0x81, 0x7A, 0x77, 0x7A, 0x94, 0x8E, 
   0x8E, 0x80, 0x76, 0x78, 0x59, 0x53, 0x56, 0x7E, 0x83, 0x7F, 0xA1, 0xA4, 0xA4, 0x89, 0x8A, 0x8F, 
   0x7D, 0x7F, 0x85, 0x7A, 0x7E, 0x82, 0x84, 0x86, 0x8A, 0x8D, 0x8D, 0x93, 0x82, 0x85, 0x86, 0x78, 
   0x7E, 0x82, 0x6B, 0x71, 0x78, 0x60, 0x67, 0x67, 0x58, 0x5D, 0x59, 0x50, 0x54, 0x50, 0x51, 0x55, 
   0x4F, 0x69, 0x6E, 0x67, 0x84, 0x8B, 0x8B, 0x84, 0x8A, 0x96, 0x82, 0x86, 0x98, 0x81, 0x86, 0x94, 
   0x80, 0x87, 0x8D, 0x83, 0x8A, 0x8B, 0x85, 0x89, 0x8A, 0x84, 0x8D, 0x8E, 0x88, 0x92, 0x98, 0x80, 
   0x8B, 0x8F, 0x85, 0x8E, 0x8E, 0x89, 0x8F, 0x91, 0x76, 0x7C, 0x7F, 0x75, 0x7F, 0x7D, 0x81, 0x8D, 
   0x8D, 0x7D, 0x8B, 0x8B, 0x7D, 0x8A, 0x89, 0x7E, 0x89, 0x8B, 0x8A, 0x96, 0x99, 0x97, 0xA6, 0xA5, 
   0x9E, 0xAC, 0xB1, 0xA5, 0xB4, 0xBE, 0xA8, 0xBA, 0xC5, 0xAF, 0xC2, 0xCA, 0xAB, 0xBD, 0xC3, 0xA6, 
   0xBB, 0xC0, 0xC0, 0xD2, 0xD7, 0xB8, 0xC8, 0xD0, 0xB0, 0xBD, 0xC8, 0xAB, 0xB8, 0xC0, 0xB2, 0xC0, 
   0xC3, 0xB8, 0xC5, 0xC5, 0xB9, 0xC3, 0xC4, 0xB3, 0xBE, 0xBE, 0xB6, 0xBE, 0xBE, 0xB8, 0xBF, 0xBF, 
   0xBD, 0xC4, 0xC3, 0xBF, 0xC8, 0xC7, 0xBA, 0xC6, 0xC5, 0xC3, 0xD0, 0xD1, 0xC9, 0xD5, 0xD9, 0xBD, 
   0xC9, 0xCC, 0xB8, 0xC6, 0xC9, 0xBA, 0xC9, 0xCD, 0xB9, 0xCA, 0xCF, 0xB9, 0xCB, 0xD2, 0xAF, 0xBD, 
   0xC5, 0xA2, 0xB0, 0xB9, 0x99, 0xAC, 0xB9, 0x90, 0xA5, 0xB5, 0x83, 0x98, 0xA6, 0x7A, 0x8C, 0x9A, 
   0x72, 0x7F, 0x8D, 0x71, 0x79, 0x82, 0x63, 0x68, 0x6E, 0x45, 0x44, 0x47, 0x4D, 0x4D, 0x4E, 0x4A, 
   0x50, 0x50, 0x48, 0x4E, 0x51, 0x4B, 0x4C, 0x52, 0x4A, 0x4C, 0x52, 0x52, 0x51, 0x59, 0x54, 0x54, 
   0x5B, 0x6E, 0x75, 0x76, 0x9C, 0xA1, 0x9D, 0xA0, 0x9A, 0x97, 0x97, 0x92, 0x91, 0x87, 0x85, 0x85, 
   0x81, 0x7F, 0x7E, 0x7F, 0x7D, 0x7B, 0x83, 0x84, 0x82, 0x84, 0x86, 0x87, 0x7E, 0x7F, 0x81, 0x82, 
   0x82, 0x81, 0x80, 0x7D, 0x7E, 0x77, 0x72, 0x78, 0x63, 0x61, 0x6C, 0x5A, 0x62, 0x69, 0x66, 0x6F, 
   0x75, 0x61, 0x68, 0x71, 0x59, 0x68, 0x6E, 0x57, 0x66, 0x6D, 0x5C, 0x66, 0x70, 0x5A, 0x65, 0x71, 
   0x58, 0x63, 0x6E, 0x60, 0x66, 0x70, 0x69, 0x6A, 0x75, 0x57, 0x53, 0x5F, 0x3E, 0x3C, 0x48, 0x30, 
   0x32, 0x3D, 0x3D, 0x40, 0x47, 0x2F, 0x37, 0x3A, 0x45, 0x48, 0x4D, 0x3D, 0x38, 0x43, 0x22, 0x1C, 
   0x22, 0x43, 0x49, 0x48, 0x64, 0x6C, 0x6A, 0x80, 0x80, 0x82, 0x90, 0x8C, 0x8F, 0x92, 0x8A, 0x8D, 
   0x8B, 0x81, 0x85, 0x83, 0x7B, 0x80, 0x7A, 0x85, 0x91, 0x8D, 0x96, 0x9C, 0x70, 0x78, 0x7B, 0x57, 
   0x57, 0x5A, 0x73, 0x72, 0x74, 0x75, 0x71, 0x72, 0x48, 0x47, 0x45, 0x46, 0x4A, 0x4A, 0x44, 0x53, 
   0x5C, 0x3B, 0x4F, 0x5E, 0x31, 0x43, 0x51, 0x28, 0x36, 0x39, 0x37, 0x3D, 0x3E, 0x4B, 0x51, 0x50, 
   0x55, 0x5B, 0x5B, 0x5F, 0x66, 0x67, 0x7C, 0x84, 0x88, 0xA2, 0xA7, 0xAC, 0x9C, 0xA0, 0xA4, 0x96, 
   0x99, 0x9F, 0xA3, 0xA9, 0xB0, 0x9C, 0xA4, 0xA8, 0x83, 0x8C, 0x8C, 0x7A, 0x7D, 0x7F, 0x6C, 0x70, 
   0x72, 0x66, 0x64, 0x65, 0x61, 0x5E, 0x5E, 0x46, 0x46, 0x46, 0x38, 0x36, 0x37, 0x35, 0x32, 0x34, 
   0x24, 0x29, 0x2A, 0x16, 0x20, 0x1E, 0x12, 0x1B, 0x18, 0x0E, 0x14, 0x12, 0x20, 0x23, 0x21, 0x4F, 
   0x55, 0x54, 0x50, 0x5D, 0x5C, 0x4A, 0x55, 0x52, 0x58, 0x5F, 0x5C, 0x5F, 0x6A, 0x68, 0x75, 0x7F, 
   0x82, 0x8B, 0x88, 0x93, 0x8C, 0x8A, 0x97, 0x81, 0x84, 0x8F, 0x84, 0x87, 0x8F, 0x92, 0x91, 0x9C, 
   0x97, 0x97, 0xA4, 0x91, 0x91, 0x9B, 0x90, 0x8C, 0x98, 0x92, 0x90, 0x9A, 0x92, 0x90, 0x96, 0x90, 
   0x8F, 0x97, 0x96, 0x92, 0x9B, 0x92, 0x91, 0x9B, 0x5B, 0x58, 0x63, 0x4A, 0x50, 0x5A, 0x78, 0x8B, 
   0x9A, 0x7F, 0x88, 0x91, 0x55, 0x50, 0x51, 0x2C, 0x2C, 0x2D, 0x63, 0x69, 0x6D, 0x76, 0x7A, 0x80, 
   0x75, 0x7B, 0x7F, 0x83, 0x87, 0x89, 0x8A, 0x92, 0x97, 0x8F, 0x97, 0x9A, 0x94, 0x99, 0x9B, 0x97, 
   0x99, 0x9C, 0x92, 0x98, 0x9A, 0x8F, 0x96, 0x99, 0x90, 0x91, 0x98, 0x91, 0x94, 0x9B, 0x93, 0x93, 
   0x9A, 0x94, 0x92, 0x97, 0x96, 0x93, 0x97, 0x94, 0x92, 0x95, 0x91, 0x8C, 0x92, 0x97, 0x91, 0x96, 
   0xA1, 0x9E, 0xA0, 0xA3, 0xA1, 0xA6, 0x8D, 0x8C, 0x96, 0x92, 0x91, 0x9B, 0x92, 0x8E, 0x9A, 0x65, 
   0x5E, 0x6C, 0x35, 0x30, 0x40, 0x21, 0x1E, 0x2D, 0x1E, 0x1B, 0x25, 0x1A, 0x1B, 0x1F, 0x1D, 0x21, 
   0x24, 0x25, 0x2A, 0x2A, 0x27, 0x2C, 0x28, 0x26, 0x2A, 0x27, 0x29, 0x2C, 0x2A, 0x25, 0x26, 0x28, 
   0x22, 0x24, 0x26, 0x20, 0x23, 0x26, 0x25, 0x2A, 0x2C, 0x2B, 0x32, 0x35, 0x30, 0x37, 0x3C, 0x2C, 
   0x35, 0x3B, 0x30, 0x3B, 0x3D, 0x39, 0x45, 0x44, 0x4E, 0x59, 0x5B, 0x63, 0x6A, 0x71, 0x67, 0x6E, 
   0x74, 0x6E, 0x74, 0x7F, 0x4C, 0x4D, 0x54, 0x2D, 0x2E, 0x32, 0x2B, 0x31, 0x36, 0x2C, 0x36, 0x3B, 
   0x29, 0x31, 0x3B, 0x2A, 0x30, 0x3F, 0x29, 0x34, 0x40, 0x2B, 0x35, 0x45, 0x2D, 0x35, 0x47, 0x2A, 
   0x33, 0x3E, 0x51, 0x5A, 0x5D, 0x6F, 0x75, 0x79, 0x62, 0x67, 0x6B, 0x52, 0x55, 0x5F, 0x45, 0x49, 
   0x56, 0x6C, 0x72, 0x82, 0x80, 0x86, 0x9A, 0x80, 0x87, 0x9D, 0x7F, 0x82, 0x9E, 0x7F, 0x7F, 0x99, 
   0x7D, 0x80, 0x96, 0x79, 0x7F, 0x92, 0x77, 0x7E, 0x93, 0x7A, 0x7E, 0x97, 0x7D, 0x80, 0x9A, 0x7F, 
   0x81, 0x9B, 0x7E, 0x83, 0x97, 0x85, 0x8B, 0x99, 0x86, 0x88, 0x93, 0x7B, 0x79, 0x7E, 0x87, 0x80, 
   0x81, 0x72, 0x6C, 0x6E, 0x69, 0x6B, 0x6D, 0x86, 0x8C, 0x8D, 0x92, 0x96, 0x9A, 0x86, 0x87, 0x8D, 
   0x7F, 0x81, 0x87, 0x7B, 0x7F, 0x83, 0x7D, 0x82, 0x82, 0x80, 0x87, 0x87, 0x6F, 0x76, 0x7B, 0x6F, 
   0x75, 0x78, 0x6D, 0x70, 0x76, 0x5E, 0x61, 0x61, 0x46, 0x4A, 0x46, 0x43, 0x47, 0x41, 0x4B, 0x50, 
   0x44, 0x53, 0x56, 0x4D, 0x69, 0x76, 0x70, 0x85, 0x90, 0x99, 0x7F, 0x87, 0x96, 0x7A, 0x7F, 0x8C, 
   0x77, 0x7A, 0x81, 0x7A, 0x7F, 0x80, 0x7D, 0x83, 0x83, 0x7A, 0x81, 0x82, 0x7A, 0x80, 0x85, 0x75, 
   0x7E, 0x82, 0x78, 0x83, 0x81, 0x79, 0x7F, 0x7D, 0x6D, 0x73, 0x70, 0x73, 0x7B, 0x76, 0x81, 0x89, 
   0x86, 0x80, 0x87, 0x87, 0x7F, 0x86, 0x85, 0x7C, 0x86, 0x89, 0x81, 0x8E, 0x90, 0x90, 0xA0, 0x9E, 
   0x9B, 0xAE, 0xAF, 0xA3, 0xB4, 0xBC, 0xA7, 0xB8, 0xC4, 0xAC, 0xC0, 0xC9, 0xA7, 0xB8, 0xBD, 0xA6, 
   0xB7, 0xBA, 0xB8, 0xC7, 0xCB, 0xAD, 0xBB, 0xC3, 0xA0, 0xAD, 0xB6, 0xAC, 0xB8, 0xBD, 0xB6, 0xC4, 
   0xC3, 0xAE, 0xBC, 0xBA, 0xAE, 0xBA, 0xBA, 0xAC, 0xB3, 0xB4, 0xB1, 0xB8, 0xB6, 0xBA, 0xC1, 0xBF, 
   0xC1, 0xC7, 0xC4, 0xC3, 0xCB, 0xC9, 0xC1, 0xCA, 0xCB, 0xC8, 0xD3, 0xD4, 0xCD, 0xD7, 0xDB, 0xC2, 
   0xC9, 0xCB, 0xBC, 0xC3, 0xC6, 0xB3, 0xBD, 0xBF, 0xA5, 0xB6, 0xB9, 0xB1, 0xC5, 0xC8, 0xAF, 0xBF, 
   0xC5, 0xA5, 0xB7, 0xBF, 0x95, 0xAA, 0xB7, 0x82, 0x98, 0xAA, 0x6F, 0x85, 0x92, 0x68, 0x7C, 0x86, 
   0x6B, 0x78, 0x81, 0x66, 0x6B, 0x71, 0x4B, 0x4E, 0x53, 0x49, 0x4B, 0x51, 0x53, 0x54, 0x5A, 0x53, 
   0x53, 0x59, 0x4F, 0x4F, 0x56, 0x53, 0x54, 0x59, 0x4E, 0x52, 0x5A, 0x56, 0x59, 0x61, 0x68, 0x68, 
   0x69, 0x8A, 0x8D, 0x88, 0x97, 0x9B, 0x97, 0x8F, 0x8C, 0x8C, 0x89, 0x88, 0x87, 0x89, 0x88, 0x87, 
   0x7B, 0x79, 0x7A, 0x75, 0x74, 0x74, 0x7F, 0x81, 0x7F, 0x81, 0x84, 0x84, 0x7C, 0x7C, 0x7D, 0x7B, 
   0x7A, 0x78, 0x79, 0x7A, 0x77, 0x7B, 0x78, 0x78, 0x60, 0x5F, 0x68, 0x57, 0x5D, 0x65, 0x60, 0x67, 
   0x6D, 0x5F, 0x63, 0x6B, 0x59, 0x62, 0x69, 0x5A, 0x65, 0x6C, 0x5E, 0x67, 0x6F, 0x5B, 0x64, 0x6C, 
   0x5C, 0x66, 0x6E, 0x5B, 0x64, 0x6D, 0x63, 0x69, 0x73, 0x61, 0x65, 0x70, 0x5F, 0x61, 0x6D, 0x3D, 
   0x3C, 0x49, 0x31, 0x30, 0x38, 0x23, 0x2A, 0x2E, 0x42, 0x47, 0x4C, 0x56, 0x57, 0x64, 0x40, 0x3E, 
   0x50, 0x52, 0x52, 0x5D, 0x6C, 0x6B, 0x6F, 0x7D, 0x7B, 0x7E, 0x87, 0x86, 0x89, 0x8E, 0x88, 0x8B, 
   0x8D, 0x88, 0x89, 0x85, 0x82, 0x83, 0x4A, 0x52, 0x4C, 0x5D, 0x64, 0x5F, 0x3B, 0x41, 0x3F, 0x47, 
   0x47, 0x46, 0x65, 0x63, 0x65, 0x6B, 0x68, 0x6B, 0x61, 0x5E, 0x60, 0x5C, 0x59, 0x5D, 0x53, 0x5D, 
   0x67, 0x49, 0x60, 0x6C, 0x39, 0x56, 0x65, 0x36, 0x50, 0x5C, 0x29, 0x35, 0x3D, 0x27, 0x2D, 0x2A, 
   0x41, 0x45, 0x40, 0x53, 0x58, 0x58, 0x6B, 0x71, 0x72, 0x8A, 0x90, 0x8E, 0x8D, 0x92, 0x90, 0x96, 
   0x9B, 0x9A, 0xA2, 0xA7, 0xA8, 0x99, 0x9F, 0xA0, 0x83, 0x8C, 0x8A, 0x7A, 0x7A, 0x7C, 0x71, 0x76, 
   0x77, 0x5C, 0x5F, 0x5E, 0x4C, 0x4F, 0x4D, 0x3A, 0x3D, 0x39, 0x42, 0x41, 0x3D, 0x39, 0x38, 0x33, 
   0x25, 0x2D, 0x2B, 0x18, 0x20, 0x1F, 0x17, 0x1B, 0x19, 0x18, 0x1A, 0x17, 0x1F, 0x21, 0x1F, 0x40, 
   0x45, 0x48, 0x45, 0x51, 0x55, 0x3C, 0x4C, 0x4B, 0x39, 0x49, 0x47, 0x28, 0x38, 0x37, 0x3A, 0x46, 
   0x44, 0x84, 0x83, 0x86, 0x93, 0x91, 0x96, 0x84, 0x86, 0x8C, 0x85, 0x86, 0x8E, 0x91, 0x90, 0x9C, 
   0x97, 0x99, 0xA2, 0x98, 0x98, 0x9F, 0x99, 0x96, 0x9E, 0x95, 0x93, 0x9E, 0x91, 0x90, 0x98, 0x8B, 
   0x8D, 0x93, 0x8B, 0x8C, 0x92, 0x86, 0x88, 0x90, 0x65, 0x62, 0x6C, 0x3F, 0x44, 0x4D, 0x60, 0x73, 
   0x80, 0x71, 0x7D, 0x86, 0x5E, 0x5B, 0x5D, 0x2F, 0x2E, 0x2F, 0x60, 0x62, 0x68, 0x8F, 0x8D, 0x95, 
   0x89, 0x86, 0x8F, 0x84, 0x7F, 0x86, 0x78, 0x7E, 0x88, 0x77, 0x7F, 0x86, 0x85, 0x89, 0x8C, 0x91, 
   0x90, 0x91, 0x90, 0x90, 0x92, 0x8E, 0x90, 0x93, 0x99, 0x9C, 0x9F, 0x9B, 0x9B, 0xA1, 0x98, 0x94, 
   0x9B, 0x98, 0x93, 0x98, 0x99, 0x95, 0x98, 0x99, 0x97, 0x97, 0x9B, 0x98, 0x9C, 0x9C, 0x97, 0x9D, 
   0xA4, 0x9F, 0xA4, 0xA4, 0xA1, 0xA7, 0x95, 0x96, 0x9B, 0x93, 0x95, 0x97, 0x93, 0x92, 0x95, 0x8F, 
   0x89, 0x91, 0x85, 0x7B, 0x88, 0x7B, 0x6F, 0x7E, 0x7A, 0x6D, 0x78, 0x5A, 0x4F, 0x59, 0x2F, 0x29, 
   0x31, 0x1B, 0x1A, 0x1E, 0x16, 0x18, 0x19, 0x23, 0x22, 0x23, 0x27, 0x27, 0x25, 0x27, 0x28, 0x27, 
   0x26, 0x27, 0x2A, 0x29, 0x2A, 0x2F, 0x2D, 0x2E, 0x32, 0x31, 0x30, 0x39, 0x2B, 0x2E, 0x3C, 0x2E, 
   0x31, 0x3F, 0x31, 0x36, 0x3E, 0x3C, 0x44, 0x45, 0x67, 0x6F, 0x70, 0x6E, 0x75, 0x78, 0x69, 0x71, 
   0x73, 0x6D, 0x74, 0x7E, 0x67, 0x69, 0x70, 0x45, 0x41, 0x49, 0x27, 0x26, 0x2F, 0x2B, 0x31, 0x38, 
   0x26, 0x30, 0x38, 0x26, 0x2F, 0x3C, 0x25, 0x2E, 0x3E, 0x24, 0x2F, 0x42, 0x2F, 0x36, 0x4B, 0x47, 
   0x4E, 0x5B, 0x6E, 0x77, 0x7B, 0x69, 0x6E, 0x73, 0x58, 0x5C, 0x60, 0x42, 0x4A, 0x52, 0x4E, 0x56, 
   0x64, 0x77, 0x7F, 0x94, 0x7C, 0x83, 0x9C, 0x80, 0x86, 0xA1, 0x7C, 0x82, 0x9F, 0x78, 0x7E, 0x9A, 
   0x78, 0x7C, 0x96, 0x7D, 0x80, 0x97, 0x83, 0x84, 0x9C, 0x77, 0x7A, 0x95, 0x77, 0x7C, 0x98, 0x81, 
   0x88, 0xA4, 0x7F, 0x83, 0x9A, 0x7A, 0x7D, 0x8E, 0x7D, 0x85, 0x94, 0x7C, 0x7F, 0x89, 0x72, 0x6D, 
   0x72, 0x68, 0x68, 0x6E, 0x72, 0x76, 0x7E, 0x7B, 0x7C, 0x7C, 0x84, 0x86, 0x86, 0x84, 0x87, 0x88, 
   0x81, 0x85, 0x87, 0x7F, 0x82, 0x85, 0x7E, 0x7F, 0x82, 0x75, 0x75, 0x76, 0x55, 0x5E, 0x5C, 0x63, 
   0x69, 0x69, 0x64, 0x64, 0x69, 0x4A, 0x4B, 0x4A, 0x34, 0x39, 0x33, 0x37, 0x3E, 0x39, 0x3C, 0x43, 
   0x3A, 0x43, 0x47, 0x3F, 0x43, 0x4E, 0x44, 0x6B, 0x78, 0x74, 0x84, 0x93, 0x92, 0x7A, 0x80, 0x82, 
   0x77, 0x77, 0x7B, 0x70, 0x76, 0x79, 0x6B, 0x78, 0x79, 0x6B, 0x78, 0x7A, 0x70, 0x77, 0x7C, 0x72, 
   0x77, 0x7B, 0x72, 0x7A, 0x77, 0x75, 0x7D, 0x77, 0x7D, 0x83, 0x7D, 0x82, 0x87, 0x7F, 0x7F, 0x83, 
   0x7C, 0x82, 0x85, 0x80, 0x84, 0x8A, 0x85, 0x82, 0x8A, 0x87, 0x7C, 0x86, 0x84, 0x80, 0x90, 0x8C, 
   0xA0, 0xB3, 0xB2, 0xA2, 0xB2, 0xB6, 0xA5, 0xB7, 0xBF, 0xA9, 0xBE, 0xC7, 0xA8, 0xB7, 0xBF, 0xB2, 
   0xC0, 0xC5, 0xB5, 0xC2, 0xCB, 0xB1, 0xBD, 0xC6, 0xAF, 0xB9, 0xBD, 0xBA, 0xC3, 0xC3, 0xBB, 0xC5, 
   0xC3, 0xB1, 0xBB, 0xBA, 0xAE, 0xB7, 0xB9, 0xB5, 0xB7, 0xB9, 0xB6, 0xB9, 0xB8, 0xB8, 0xBD, 0xBC, 
   0xBF, 0xC5, 0xC2, 0xC4, 0xCB, 0xC9, 0xCC, 0xD1, 0xD3, 0xD3, 0xDA, 0xDC, 0xD4, 0xDE, 0xE2, 0xCE, 
   0xD1, 0xD5, 0xBA, 0xB9, 0xBD, 0xB8, 0xBC, 0xC0, 0xB9, 0xC2, 0xC7, 0xBF, 0xCF, 0xD4, 0xAF, 0xC0, 
   0xC9, 0x97, 0xAC, 0xB9, 0x7F, 0x94, 0xA6, 0x72, 0x84, 0x98, 0x62, 0x72, 0x80, 0x64, 0x72, 0x7D, 
   0x69, 0x72, 0x7A, 0x56, 0x56, 0x5A, 0x49, 0x49, 0x4D, 0x50, 0x56, 0x5B, 0x56, 0x59, 0x61, 0x5C, 
   0x59, 0x61, 0x61, 0x5F, 0x64, 0x77, 0x7B, 0x7B, 0x92, 0x92, 0x99, 0xA8, 0xAB, 0xB1, 0xA2, 0x9F, 
   0x9F, 0x88, 0x84, 0x7D, 0x81, 0x82, 0x7F, 0x81, 0x83, 0x84, 0x84, 0x87, 0x82, 0x88, 0x87, 0x85, 
   0x83, 0x82, 0x84, 0x7D, 0x7E, 0x81, 0x7E, 0x82, 0x83, 0x7D, 0x80, 0x82, 0x7D, 0x7B, 0x7D, 0x7C, 
   0x79, 0x77, 0x7E, 0x7D, 0x7B, 0x81, 0x7F, 0x7E, 0x63, 0x60, 0x6A, 0x55, 0x56, 0x60, 0x5B, 0x62, 
   0x65, 0x5E, 0x65, 0x6C, 0x58, 0x5F, 0x6A, 0x57, 0x61, 0x6B, 0x57, 0x63, 0x6C, 0x5A, 0x64, 0x6C, 
   0x59, 0x62, 0x6A, 0x56, 0x60, 0x68, 0x59, 0x64, 0x6C, 0x57, 0x60, 0x6A, 0x55, 0x5A, 0x65, 0x44, 
   0x43, 0x52, 0x2E, 0x29, 0x36, 0x20, 0x21, 0x27, 0x38, 0x3E, 0x45, 0x57, 0x60, 0x72, 0x76, 0x81, 
   0x9F, 0x79, 0x7B, 0x93, 0x70, 0x69, 0x73, 0x75, 0x72, 0x76, 0x84, 0x82, 0x85, 0x8E, 0x83, 0x87, 
   0x8C, 0x83, 0x86, 0x82, 0x7D, 0x7F, 0x03, 0x09, 0x05, 0x13, 0x1C, 0x1D, 0x35, 0x3E, 0x41, 0x4E, 
   0x50, 0x53, 0x4F, 0x50, 0x53, 0x57, 0x54, 0x58, 0x6D, 0x6D, 0x6F, 0x79, 0x76, 0x7B, 0x5E, 0x60, 
   0x6A, 0x56, 0x60, 0x6D, 0x41, 0x57, 0x6B, 0x3E, 0x5B, 0x70, 0x3F, 0x50, 0x61, 0x31, 0x38, 0x3C, 
   0x1B, 0x20, 0x20, 0x23, 0x28, 0x2C, 0x3A, 0x3D, 0x42, 0x72, 0x7A, 0x79, 0x77, 0x85, 0x7E, 0x81, 
   0x8E, 0x87, 0x9B, 0xA2, 0x9E, 0x9E, 0xA0, 0x9F, 0x8B, 0x8D, 0x8C, 0x7D, 0x7B, 0x7D, 0x6A, 0x6E, 
   0x6C, 0x4E, 0x56, 0x53, 0x39, 0x3F, 0x3B, 0x39, 0x39, 0x37, 0x48, 0x47, 0x46, 0x34, 0x33, 0x32, 
   0x27, 0x25, 0x28, 0x1A, 0x19, 0x1F, 0x11, 0x0F, 0x16, 0x16, 0x15, 0x19, 0x1B, 0x1D, 0x23, 0x2D, 
   0x32, 0x3E, 0x31, 0x38, 0x48, 0x38, 0x3F, 0x4C, 0x42, 0x4F, 0x5D, 0x4A, 0x56, 0x64, 0x6F, 0x74, 
   0x7F, 0x85, 0x85, 0x8B, 0x8D, 0x8D, 0x92, 0x84, 0x87, 0x8D, 0x8A, 0x8D, 0x96, 0x95, 0x97, 0x9F, 
   0x96, 0x9B, 0xA1, 0x98, 0x9E, 0xA1, 0x99, 0x9B, 0xA0, 0x94, 0x97, 0x9F, 0x8E, 0x8F, 0x98, 0x84, 
   0x87, 0x8F, 0x83, 0x84, 0x8A, 0x87, 0x88, 0x90, 0x6E, 0x6A, 0x74, 0x3A, 0x3F, 0x46, 0x64, 0x76, 
   0x81, 0x7C, 0x88, 0x91, 0x63, 0x62, 0x61, 0x38, 0x37, 0x37, 0x5B, 0x5F, 0x60, 0x96, 0x9B, 0x9D, 
   0x99, 0x9C, 0x9E, 0x97, 0x98, 0x98, 0x95, 0x95, 0x97, 0x8F, 0x91, 0x96, 0x85, 0x89, 0x8C, 0x80, 
   0x82, 0x84, 0x7B, 0x7B, 0x81, 0x74, 0x79, 0x7E, 0x76, 0x7C, 0x7F, 0x81, 0x80, 0x88, 0x8F, 0x8B, 
   0x90, 0x92, 0x8C, 0x91, 0x97, 0x92, 0x99, 0x99, 0x98, 0x9F, 0x96, 0x99, 0x9C, 0x97, 0x9A, 0x9C, 
   0x9B, 0x9B, 0x9F, 0x9C, 0x9C, 0x9E, 0x96, 0x96, 0x98, 0x8E, 0x8E, 0x93, 0x8E, 0x8D, 0x93, 0x90, 
   0x90, 0x93, 0x92, 0x93, 0x95, 0x99, 0x99, 0x9B, 0xA4, 0xA1, 0xA2, 0x9D, 0x99, 0x9A, 0x94, 0x90, 
   0x96, 0x78, 0x73, 0x7E, 0x4C, 0x43, 0x51, 0x2B, 0x23, 0x2F, 0x1E, 0x1A, 0x21, 0x1C, 0x1F, 0x21, 
   0x21, 0x27, 0x29, 0x28, 0x2E, 0x30, 0x2D, 0x33, 0x35, 0x34, 0x37, 0x3C, 0x3D, 0x3E, 0x49, 0x3F, 
   0x40, 0x4B, 0x45, 0x46, 0x4C, 0x58, 0x5B, 0x5C, 0x6D, 0x72, 0x72, 0x6A, 0x71, 0x72, 0x69, 0x71, 
   0x74, 0x68, 0x6E, 0x76, 0x6C, 0x72, 0x7A, 0x73, 0x72, 0x7D, 0x3F, 0x3C, 0x48, 0x23, 0x28, 0x2F, 
   0x1A, 0x28, 0x2D, 0x1E, 0x28, 0x33, 0x2D, 0x36, 0x43, 0x42, 0x4E, 0x5C, 0x55, 0x5D, 0x6E, 0x5A, 
   0x63, 0x6E, 0x58, 0x66, 0x6D, 0x50, 0x5B, 0x62, 0x48, 0x50, 0x55, 0x3B, 0x49, 0x50, 0x5B, 0x69, 
   0x7A, 0x80, 0x88, 0xA2, 0x81, 0x89, 0xA5, 0x7C, 0x82, 0x9F, 0x78, 0x7F, 0x9D, 0x73, 0x7D, 0x99, 
   0x71, 0x7A, 0x92, 0x73, 0x7B, 0x8F, 0x73, 0x79, 0x8C, 0x6E, 0x73, 0x8A, 0x71, 0x77, 0x8F, 0x7A, 
   0x83, 0x9C, 0x7C, 0x81, 0x97, 0x77, 0x7F, 0x94, 0x78, 0x81, 0x92, 0x77, 0x7B, 0x85, 0x60, 0x61, 
   0x64, 0x6C, 0x6C, 0x71, 0x83, 0x80, 0x8A, 0x86, 0x84, 0x89, 0x80, 0x83, 0x87, 0x80, 0x87, 0x89, 
   0x81, 0x86, 0x88, 0x7F, 0x82, 0x84, 0x88, 0x88, 0x88, 0x6A, 0x6A, 0x6A, 0x5C, 0x5C, 0x5D, 0x63, 
   0x62, 0x62, 0x60, 0x5C, 0x5E, 0x35, 0x34, 0x2E, 0x29, 0x2B, 0x20, 0x2F, 0x32, 0x2B, 0x31, 0x35, 
   0x30, 0x33, 0x35, 0x31, 0x2C, 0x32, 0x2A, 0x32, 0x3E, 0x35, 0x5E, 0x71, 0x67, 0x81, 0x8B, 0x85, 
   0x75, 0x75, 0x78, 0x75, 0x75, 0x7C, 0x74, 0x78, 0x7F, 0x6D, 0x74, 0x76, 0x70, 0x79, 0x78, 0x71, 
   0x7A, 0x75, 0x74, 0x7D, 0x76, 0x7A, 0x86, 0x7F, 0x8D, 0x9A, 0x92, 0x8C, 0x93, 0x89, 0x7C, 0x82, 
   0x77, 0x7B, 0x82, 0x79, 0x74, 0x80, 0x77, 0x6C, 0x78, 0x72, 0x54, 0x5F, 0x5C, 0x4C, 0x5B, 0x5A, 
   0x80, 0x8F, 0x8D, 0x98, 0xA3, 0xA4, 0xA0, 0xAD, 0xB4, 0xA5, 0xB8, 0xC1, 0x9E, 0xB0, 0xB9, 0xAC, 
   0xBB, 0xC1, 0xB8, 0xC6, 0xCF, 0xAF, 0xBC, 0xC2, 0xAF, 0xBA, 0xBD, 0xBF, 0xC7, 0xC6, 0xC4, 0xC8, 
   0xC7, 0xBC, 0xBF, 0xBF, 0xB9, 0xBC, 0xBC, 0xB4, 0xB7, 0xB7, 0xB5, 0xB9, 0xB6, 0xBC, 0xBF, 0xBE, 
   0xC1, 0xC6, 0xC4, 0xC6, 0xCE, 0xCB, 0xC8, 0xD0, 0xD2, 0xD1, 0xD9, 0xDB, 0xD8, 0xDD, 0xE2, 0xCA, 
   0xCE, 0xD3, 0xAA, 0xAA, 0xB0, 0xAF, 0xB6, 0xBB, 0xBB, 0xC4, 0xCA, 0xAF, 0xB8, 0xC1, 0x91, 0xA1, 
   0xAD, 0x7E, 0x94, 0xA2, 0x71, 0x88, 0x99, 0x65, 0x77, 0x8B, 0x5C, 0x6B, 0x78, 0x61, 0x69, 0x74, 
   0x58, 0x58, 0x61, 0x4C, 0x4D, 0x51, 0x4A, 0x51, 0x52, 0x59, 0x61, 0x61, 0x69, 0x6D, 0x6B, 0x61, 
   0x60, 0x5F, 0x5D, 0x61, 0x60, 0x68, 0x75, 0x72, 0x70, 0x75, 0x73, 0x6E, 0x75, 0x75, 0x6E, 0x6F, 
   0x6F, 0x6D, 0x6B, 0x69, 0x75, 0x7A, 0x77, 0x7A, 0x82, 0x80, 0x7B, 0x82, 0x7E, 0x84, 0x85, 0x84, 
   0x86, 0x84, 0x87, 0x81, 0x81, 0x86, 0x7F, 0x7F, 0x85, 0x7A, 0x7C, 0x7F, 0x7C, 0x7C, 0x7B, 0x81, 
   0x7E, 0x7B, 0x87, 0x85, 0x84, 0x82, 0x7F, 0x81, 0x73, 0x70, 0x78, 0x66, 0x64, 0x6C, 0x5F, 0x63, 
   0x68, 0x5F, 0x64, 0x6D, 0x57, 0x5C, 0x67, 0x51, 0x5C, 0x69, 0x50, 0x5E, 0x68, 0x56, 0x5F, 0x67, 
   0x59, 0x60, 0x67, 0x58, 0x60, 0x68, 0x57, 0x60, 0x69, 0x57, 0x5F, 0x69, 0x57, 0x5C, 0x67, 0x59, 
   0x5A, 0x65, 0x4F, 0x48, 0x56, 0x25, 0x21, 0x2E, 0x3C, 0x45, 0x55, 0x5C, 0x71, 0x8C, 0x6C, 0x82, 
   0xA4, 0x68, 0x79, 0x94, 0x71, 0x77, 0x89, 0x80, 0x7D, 0x89, 0x84, 0x81, 0x86, 0x89, 0x83, 0x86, 
   0x8F, 0x82, 0x88, 0x8B, 0x80, 0x88, 0x0C, 0x0D, 0x11, 0x29, 0x2F, 0x36, 0x40, 0x47, 0x4E, 0x53, 
   0x53, 0x5C, 0x54, 0x52, 0x59, 0x56, 0x4C, 0x50, 0x56, 0x58, 0x58, 0x6A, 0x71, 0x75, 0x70, 0x79, 
   0x80, 0x7A, 0x84, 0x8E, 0x57, 0x69, 0x79, 0x3A, 0x54, 0x68, 0x3C, 0x53, 0x66, 0x3C, 0x4E, 0x58, 
   0x22, 0x2E, 0x31, 0x17, 0x1B, 0x1A, 0x24, 0x21, 0x22, 0x49, 0x4B, 0x47, 0x60, 0x67, 0x5E, 0x73, 
   0x7C, 0x72, 0x84, 0x8A, 0x83, 0x94, 0x98, 0x94, 0x96, 0x9A, 0x98, 0x8A, 0x8C, 0x8A, 0x6D, 0x6D, 
   0x6B, 0x4D, 0x4F, 0x4C, 0x43, 0x43, 0x42, 0x4B, 0x4A, 0x4C, 0x57, 0x5A, 0x60, 0x52, 0x57, 0x61, 
   0x54, 0x55, 0x65, 0x53, 0x56, 0x69, 0x5E, 0x5F, 0x73, 0x6A, 0x6D, 0x7C, 0x72, 0x77, 0x83, 0x7F, 
   0x81, 0x91, 0x76, 0x7C, 0x8D, 0x6C, 0x75, 0x84, 0x7B, 0x86, 0x95, 0x89, 0x8F, 0x9E, 0x93, 0x93, 
   0x9F, 0x92, 0x90, 0x9B, 0x88, 0x89, 0x94, 0x84, 0x87, 0x93, 0x92, 0x94, 0x9F, 0x9C, 0x9E, 0xA5, 
   0x9C, 0xA0, 0xA4, 0xA3, 0xA6, 0xAC, 0x9A, 0x98, 0xA0, 0x94, 0x94, 0x99, 0x91, 0x90, 0x9C, 0x88, 
   0x88, 0x93, 0x8A, 0x89, 0x92, 0x8B, 0x8A, 0x96, 0x79, 0x75, 0x81, 0x4E, 0x52, 0x5D, 0x78, 0x8A, 
   0x94, 0x7F, 0x8C, 0x97, 0x68, 0x67, 0x69, 0x45, 0x41, 0x41, 0x4C, 0x4D, 0x50, 0x83, 0x86, 0x8A, 
   0x8D, 0x8E, 0x93, 0x90, 0x8F, 0x93, 0x95, 0x95, 0x96, 0x98, 0x9B, 0x9E, 0x99, 0x9E, 0xA0, 0x95, 
   0x9B, 0x9C, 0x96, 0x98, 0x9D, 0x92, 0x92, 0x9A, 0x8E, 0x90, 0x97, 0x8A, 0x8B, 0x95, 0x88, 0x85, 
   0x8F, 0x87, 0x82, 0x8D, 0x85, 0x82, 0x8D, 0x7E, 0x80, 0x8A, 0x79, 0x7F, 0x85, 0x85, 0x88, 0x8D, 
   0x8E, 0x8C, 0x91, 0x90, 0x8F, 0x91, 0x93, 0x93, 0x96, 0x98, 0x97, 0x9D, 0x95, 0x93, 0x9A, 0x97, 
   0x94, 0x9B, 0x9A, 0x97, 0x9B, 0x9B, 0x98, 0x99, 0x99, 0x97, 0x96, 0x97, 0x99, 0x99, 0x93, 0x98, 
   0x9D, 0x8E, 0x91, 0x9A, 0x94, 0x93, 0x9F, 0x8D, 0x8A, 0x97, 0x62, 0x5D, 0x6D, 0x36, 0x31, 0x40, 
   0x2B, 0x2B, 0x33, 0x2B, 0x2E, 0x33, 0x30, 0x36, 0x39, 0x38, 0x41, 0x41, 0x42, 0x4A, 0x4C, 0x46, 
   0x4E, 0x4E, 0x55, 0x5B, 0x5A, 0x67, 0x6F, 0x6C, 0x6B, 0x73, 0x73, 0x69, 0x72, 0x76, 0x63, 0x6D, 
   0x74, 0x5E, 0x66, 0x70, 0x5D, 0x69, 0x73, 0x67, 0x70, 0x7D, 0x43, 0x49, 0x56, 0x1C, 0x27, 0x2E, 
   0x19, 0x25, 0x2C, 0x1D, 0x27, 0x32, 0x31, 0x3C, 0x44, 0x44, 0x54, 0x5A, 0x5A, 0x66, 0x6F, 0x58, 
   0x62, 0x67, 0x4E, 0x5B, 0x5D, 0x42, 0x4B, 0x4F, 0x33, 0x3C, 0x40, 0x43, 0x53, 0x5C, 0x78, 0x86, 
   0x98, 0x7D, 0x85, 0xA0, 0x76, 0x7C, 0x9B, 0x79, 0x7E, 0x9D, 0x79, 0x7F, 0x9D, 0x74, 0x7A, 0x97, 
   0x6F, 0x72, 0x8E, 0x72, 0x75, 0x8D, 0x6C, 0x6C, 0x85, 0x72, 0x70, 0x8B, 0x76, 0x72, 0x8E, 0x78, 
   0x75, 0x8E, 0x7A, 0x7A, 0x93, 0x74, 0x79, 0x92, 0x77, 0x79, 0x8C, 0x6E, 0x71, 0x79, 0x62, 0x69, 
   0x68, 0x80, 0x83, 0x81, 0x8F, 0x8D, 0x8F, 0x85, 0x8A, 0x90, 0x82, 0x87, 0x8D, 0x85, 0x88, 0x8D, 
   0x8D, 0x8B, 0x90, 0x81, 0x7E, 0x82, 0x65, 0x66, 0x69, 0x4C, 0x51, 0x53, 0x4E, 0x4E, 0x4B, 0x45, 
   0x45, 0x41, 0x38, 0x38, 0x34, 0x27, 0x27, 0x24, 0x29, 0x28, 0x26, 0x2B, 0x2A, 0x2C, 0x34, 0x32, 
   0x34, 0x38, 0x34, 0x35, 0x38, 0x36, 0x32, 0x37, 0x39, 0x34, 0x3E, 0x48, 0x42, 0x70, 0x77, 0x71, 
   0x74, 0x74, 0x75, 0x69, 0x6B, 0x70, 0x5A, 0x5F, 0x5E, 0x49, 0x4F, 0x49, 0x4B, 0x58, 0x4C, 0x5A, 
   0x67, 0x58, 0x54, 0x5C, 0x53, 0x3F, 0x4B, 0x45, 0x32, 0x3F, 0x3A, 0x25, 0x2C, 0x29, 0x1A, 0x1F, 
   0x1A, 0x19, 0x20, 0x1B, 0x1A, 0x24, 0x22, 0x24, 0x2F, 0x2F, 0x2A, 0x35, 0x37, 0x41, 0x4C, 0x4D, 
   0x6E, 0x7A, 0x7A, 0x90, 0x99, 0x9A, 0x9C, 0xAA, 0xAE, 0xA0, 0xB4, 0xBA, 0xA0, 0xB1, 0xB9, 0xA2, 
   0xB2, 0xB9, 0xA7, 0xB3, 0xB8, 0xA3, 0xAF, 0xB2, 0xA3, 0xAE, 0xB0, 0xB9, 0xC3, 0xC2, 0xBE, 0xC6, 
   0xC4, 0xBB, 0xBF, 0xBC, 0xBF, 0xC1, 0xBD, 0xC0, 0xC8, 0xC7, 0xBE, 0xC4, 0xC1, 0xBA, 0xBE, 0xBD, 
   0xBD, 0xC3, 0xC1, 0xC6, 0xD0, 0xCE, 0xC8, 0xD4, 0xD7, 0xCC, 0xDA, 0xDC, 0xD1, 0xDA, 0xDF, 0xC9, 
   0xD2, 0xD7, 0xC0, 0xC7, 0xCC, 0xBD, 0xC7, 0xCE, 0xA9, 0xB3, 0xBC, 0x8E, 0x98, 0xA4, 0x7F, 0x8F, 
   0x9D, 0x70, 0x86, 0x96, 0x69, 0x7E, 0x90, 0x60, 0x6F, 0x81, 0x51, 0x5B, 0x66, 0x50, 0x56, 0x5E, 
   0x50, 0x4F, 0x56, 0x4E, 0x51, 0x57, 0x4E, 0x55, 0x58, 0x50, 0x55, 0x54, 0x52, 0x53, 0x51, 0x51, 
   0x51, 0x4E, 0x4F, 0x53, 0x51, 0x52, 0x5C, 0x5A, 0x6D, 0x70, 0x6A, 0x88, 0x89, 0x84, 0x73, 0x6E, 
   0x70, 0x67, 0x66, 0x69, 0x79, 0x7E, 0x7A, 0x81, 0x84, 0x80, 0x80, 0x81, 0x85, 0x84, 0x87, 0x89, 
   0x87, 0x86, 0x89, 0x87, 0x84, 0x89, 0x86, 0x84, 0x8A, 0x81, 0x80, 0x83, 0x81, 0x80, 0x7E, 0x83, 
   0x81, 0x7C, 0x87, 0x7F, 0x7F, 0x6E, 0x66, 0x6B, 0x6D, 0x6A, 0x70, 0x6A, 0x69, 0x6D, 0x65, 0x68, 
   0x6F, 0x66, 0x6B, 0x76, 0x59, 0x5F, 0x67, 0x55, 0x60, 0x69, 0x54, 0x61, 0x68, 0x58, 0x60, 0x66, 
   0x58, 0x60, 0x66, 0x5A, 0x62, 0x6B, 0x58, 0x61, 0x6D, 0x54, 0x5C, 0x69, 0x57, 0x5F, 0x69, 0x62, 
   0x6A, 0x70, 0x77, 0x74, 0x7E, 0x5A, 0x55, 0x69, 0x5D, 0x66, 0x82, 0x71, 0x87, 0xAC, 0x6F, 0x85, 
   0xAB, 0x6D, 0x82, 0xA3, 0x74, 0x80, 0x9B, 0x87, 0x87, 0x9A, 0x86, 0x82, 0x8A, 0x86, 0x82, 0x85, 
   0x8B, 0x82, 0x89, 0x92, 0x88, 0x8E, 0x20, 0x1D, 0x24, 0x35, 0x35, 0x3D, 0x41, 0x43, 0x4C, 0x51, 
   0x52, 0x5D, 0x54, 0x53, 0x5C, 0x4D, 0x45, 0x49, 0x4D, 0x50, 0x52, 0x5D, 0x62, 0x67, 0x6A, 0x6C, 
   0x73, 0x70, 0x76, 0x7A, 0x61, 0x71, 0x79, 0x46, 0x5E, 0x6A, 0x3D, 0x56, 0x68, 0x43, 0x59, 0x67, 
   0x36, 0x45, 0x4C, 0x24, 0x2B, 0x2C, 0x42, 0x41, 0x3D, 0x51, 0x50, 0x46, 0x5F, 0x5E, 0x50, 0x73, 
   0x73, 0x65, 0x7C, 0x7E, 0x72, 0x7E, 0x81, 0x77, 0x8A, 0x8F, 0x85, 0x85, 0x8E, 0x87, 0x63, 0x63, 
   0x60, 0x4E, 0x4E, 0x4D, 0x69, 0x67, 0x6B, 0x73, 0x70, 0x78, 0x78, 0x7B, 0x86, 0x86, 0x8C, 0x99, 
   0x8B, 0x92, 0xA1, 0x8A, 0x91, 0xA1, 0x8E, 0x94, 0xA4, 0x98, 0x9F, 0xAD, 0x9B, 0xA4, 0xB0, 0x96, 
   0x9D, 0xAB, 0x80, 0x8A, 0x9A, 0x7B, 0x84, 0x96, 0x90, 0x98, 0xA6, 0xA2, 0xA7, 0xB0, 0xA0, 0xA0, 
   0xA7, 0x9B, 0x9C, 0xA4, 0x93, 0x97, 0xA2, 0x84, 0x8B, 0x97, 0x8D, 0x93, 0x9F, 0x90, 0x94, 0x9E, 
   0x94, 0x99, 0xA0, 0x9D, 0x9F, 0xA9, 0x97, 0x96, 0x9D, 0x92, 0x91, 0x96, 0x94, 0x91, 0x9D, 0x91, 
   0x8F, 0x98, 0x8E, 0x87, 0x91, 0x88, 0x84, 0x90, 0x81, 0x7E, 0x8A, 0x6C, 0x71, 0x7E, 0x7A, 0x8B, 
   0x96, 0x76, 0x83, 0x8D, 0x63, 0x62, 0x64, 0x4A, 0x44, 0x44, 0x4E, 0x4E, 0x50, 0x7B, 0x7F, 0x84, 
   0x83, 0x83, 0x8B, 0x8A, 0x89, 0x91, 0x91, 0x91, 0x99, 0x91, 0x93, 0x98, 0x96, 0x9B, 0x9D, 0x94, 
   0x9D, 0x9C, 0x96, 0x9D, 0x9E, 0xA2, 0xA3, 0xA9, 0xA4, 0xA6, 0xAD, 0xA2, 0xA5, 0xAA, 0xA2, 0xA1, 
   0xAA, 0xA0, 0x9E, 0xA8, 0x9A, 0x9A, 0xA1, 0x91, 0x96, 0x9A, 0x89, 0x8F, 0x92, 0x84, 0x84, 0x88, 
   0x7F, 0x7A, 0x7F, 0x80, 0x7C, 0x86, 0x8C, 0x8B, 0x96, 0x93, 0x93, 0x9A, 0x95, 0x94, 0x97, 0x9B, 
   0x97, 0x98, 0x9C, 0x9A, 0x9A, 0x9A, 0x9B, 0x99, 0x98, 0x98, 0x95, 0x98, 0x9B, 0x99, 0x95, 0x9A, 
   0x9C, 0x96, 0x98, 0x9E, 0x9B, 0x9A, 0x9F, 0x9D, 0xA0, 0xA5, 0x97, 0x96, 0xA1, 0x87, 0x7F, 0x8E, 
   0x69, 0x5F, 0x6D, 0x4F, 0x48, 0x55, 0x3C, 0x3C, 0x47, 0x35, 0x3C, 0x41, 0x3C, 0x44, 0x45, 0x4A, 
   0x54, 0x50, 0x58, 0x62, 0x5D, 0x61, 0x6D, 0x6A, 0x5E, 0x6B, 0x6A, 0x5D, 0x6B, 0x6E, 0x58, 0x64, 
   0x6D, 0x56, 0x5F, 0x66, 0x57, 0x64, 0x6B, 0x60, 0x6B, 0x75, 0x48, 0x50, 0x59, 0x1F, 0x25, 0x28, 
   0x1C, 0x22, 0x27, 0x1E, 0x23, 0x2D, 0x36, 0x3D, 0x47, 0x54, 0x5F, 0x66, 0x62, 0x6C, 0x75, 0x55, 
   0x5F, 0x65, 0x49, 0x54, 0x5A, 0x3E, 0x45, 0x4C, 0x37, 0x3F, 0x46, 0x5B, 0x66, 0x73, 0x7A, 0x80, 
   0x97, 0x74, 0x79, 0x95, 0x76, 0x7A, 0x98, 0x7A, 0x80, 0x9C, 0x7A, 0x81, 0x9C, 0x78, 0x7D, 0x96, 
   0x78, 0x7C, 0x93, 0x76, 0x7B, 0x90, 0x62, 0x65, 0x7C, 0x6D, 0x6D, 0x86, 0x71, 0x6E, 0x86, 0x73, 
   0x6F, 0x83, 0x71, 0x71, 0x83, 0x6D, 0x6F, 0x83, 0x75, 0x75, 0x82, 0x6C, 0x6F, 0x74, 0x6D, 0x74, 
   0x74, 0x85, 0x8A, 0x88, 0x8A, 0x8C, 0x8E, 0x87, 0x87, 0x8C, 0x81, 0x83, 0x87, 0x85, 0x88, 0x8A, 
   0x97, 0x95, 0x96, 0x79, 0x74, 0x74, 0x46, 0x42, 0x42, 0x2C, 0x2B, 0x2B, 0x27, 0x24, 0x22, 0x25, 
   0x22, 0x24, 0x33, 0x2F, 0x31, 0x49, 0x45, 0x44, 0x58, 0x54, 0x51, 0x50, 0x4B, 0x4A, 0x53, 0x4C, 
   0x4E, 0x5A, 0x51, 0x53, 0x63, 0x5B, 0x5A, 0x69, 0x61, 0x5D, 0x60, 0x5E, 0x5A, 0x6D, 0x6D, 0x67, 
   0x70, 0x6C, 0x6B, 0x4B, 0x49, 0x4B, 0x1D, 0x1B, 0x19, 0x0F, 0x0C, 0x08, 0x0B, 0x0D, 0x04, 0x0E, 
   0x16, 0x0A, 0x0A, 0x11, 0x0E, 0x05, 0x0E, 0x10, 0x0A, 0x14, 0x12, 0x13, 0x1A, 0x17, 0x13, 0x18, 
   0x15, 0x1D, 0x24, 0x22, 0x31, 0x38, 0x3A, 0x3F, 0x48, 0x49, 0x57, 0x62, 0x64, 0x66, 0x6E, 0x71, 
   0x6C, 0x78, 0x78, 0x7E, 0x89, 0x8A, 0x96, 0xA6, 0xA7, 0x9D, 0xB0, 0xB2, 0x9D, 0xAB, 0xB1, 0x9C, 
   0xA7, 0xAF, 0xA0, 0xA8, 0xAE, 0x9F, 0xA8, 0xAE, 0x98, 0xA1, 0xA8, 0x9D, 0xA7, 0xAA, 0xA8, 0xB3, 
   0xB1, 0xAF, 0xB8, 0xB5, 0xBC, 0xC5, 0xC1, 0xCA, 0xD3, 0xD0, 0xC7, 0xCF, 0xCB, 0xC2, 0xC9, 0xC7, 
   0xC5, 0xCD, 0xCA, 0xC9, 0xD4, 0xD4, 0xC9, 0xD7, 0xDB, 0xC8, 0xD8, 0xDB, 0xC8, 0xD5, 0xDA, 0xC7, 
   0xD4, 0xD9, 0xC6, 0xD1, 0xD7, 0xBE, 0xC6, 0xCE, 0x9C, 0xA6, 0xB2, 0x7C, 0x8A, 0x97, 0x73, 0x86, 
   0x95, 0x6B, 0x80, 0x90, 0x66, 0x76, 0x89, 0x5F, 0x67, 0x78, 0x53, 0x57, 0x61, 0x4F, 0x55, 0x5A, 
   0x50, 0x54, 0x56, 0x50, 0x52, 0x56, 0x53, 0x56, 0x5C, 0x55, 0x55, 0x59, 0x4D, 0x4B, 0x4E, 0x4F, 
   0x4C, 0x4E, 0x5C, 0x5A, 0x5A, 0x66, 0x65, 0x64, 0x79, 0x7B, 0x72, 0xA1, 0xA2, 0x9E, 0x8F, 0x8C, 
   0x93, 0x7A, 0x7D, 0x85, 0x79, 0x81, 0x7F, 0x80, 0x83, 0x7D, 0x82, 0x83, 0x85, 0x83, 0x87, 0x89, 
   0x85, 0x87, 0x88, 0x88, 0x87, 0x8A, 0x8D, 0x8B, 0x8F, 0x8B, 0x8A, 0x89, 0x85, 0x84, 0x80, 0x84, 
   0x7F, 0x7C, 0x85, 0x79, 0x79, 0x64, 0x59, 0x5F, 0x76, 0x76, 0x7C, 0x8B, 0x8C, 0x8E, 0x6F, 0x6F, 
   0x77, 0x63, 0x66, 0x72, 0x5E, 0x62, 0x69, 0x5A, 0x62, 0x67, 0x5D, 0x64, 0x69, 0x5C, 0x5F, 0x63, 
   0x58, 0x61, 0x65, 0x5B, 0x64, 0x6C, 0x60, 0x6A, 0x75, 0x6A, 0x74, 0x81, 0x6C, 0x74, 0x81, 0x73, 
   0x7E, 0x88, 0x96, 0x99, 0xA6, 0x7E, 0x7D, 0x95, 0x70, 0x7A, 0x9E, 0x73, 0x85, 0xAF, 0x6E, 0x83, 
   0xA9, 0x7B, 0x8C, 0xAB, 0x90, 0x98, 0xAC, 0xAC, 0xA8, 0xB6, 0xAD, 0x9F, 0xA8, 0x91, 0x84, 0x8C, 
   0x88, 0x81, 0x8C, 0x8B, 0x89, 0x8C, 0x2F, 0x2F, 0x33, 0x36, 0x38, 0x3F, 0x3E, 0x44, 0x49, 0x4A, 
   0x50, 0x56, 0x48, 0x4B, 0x52, 0x4F, 0x48, 0x4F, 0x5E, 0x5C, 0x63, 0x72, 0x6B, 0x76, 0x82, 0x7C, 
   0x84, 0x64, 0x69, 0x6C, 0x60, 0x6B, 0x73, 0x56, 0x63, 0x71, 0x3D, 0x4E, 0x65, 0x47, 0x5B, 0x6D, 
   0x45, 0x54, 0x5D, 0x39, 0x3F, 0x3F, 0x56, 0x55, 0x4A, 0x6B, 0x67, 0x58, 0x74, 0x6F, 0x5D, 0x6B, 
   0x69, 0x58, 0x5D, 0x5F, 0x52, 0x4F, 0x53, 0x48, 0x4D, 0x51, 0x46, 0x49, 0x4E, 0x42, 0x3F, 0x3C, 
   0x36, 0x4B, 0x4C, 0x4D, 0x8C, 0x90, 0x98, 0x97, 0x99, 0xA4, 0x93, 0x96, 0xA1, 0xA0, 0xA2, 0xAC, 
   0x96, 0x9E, 0xA7, 0x99, 0xA1, 0xA9, 0x9E, 0xA3, 0xAC, 0x9F, 0xA6, 0xAE, 0x9D, 0xA6, 0xB1, 0x99, 
   0xA0, 0xB0, 0x92, 0x9B, 0xAC, 0x92, 0x97, 0xA8, 0x98, 0x9E, 0xA9, 0x9F, 0xA7, 0xAD, 0x9B, 0xA4, 
   0xAB, 0x98, 0xA0, 0xAB, 0x9C, 0xA5, 0xB2, 0x9B, 0xA8, 0xB2, 0x8A, 0x96, 0xA2, 0x76, 0x7E, 0x8C, 
   0x84, 0x8B, 0x96, 0x9B, 0x9E, 0xA9, 0x9C, 0x9C, 0xA3, 0x95, 0x95, 0x9A, 0x93, 0x90, 0x9A, 0x94, 
   0x90, 0x94, 0x90, 0x86, 0x8A, 0x83, 0x7D, 0x86, 0x7C, 0x79, 0x85, 0x79, 0x7E, 0x8C, 0x76, 0x84, 
   0x91, 0x74, 0x7E, 0x8B, 0x69, 0x65, 0x6A, 0x4F, 0x46, 0x48, 0x4B, 0x4B, 0x4E, 0x6F, 0x76, 0x7A, 
   0x80, 0x83, 0x8B, 0x89, 0x8C, 0x93, 0x89, 0x90, 0x95, 0x90, 0x92, 0x96, 0x96, 0x9A, 0x9D, 0x94, 
   0x9C, 0x9F, 0x94, 0x9C, 0x9D, 0x95, 0x9A, 0x9B, 0x99, 0x9C, 0xA2, 0x9C, 0x9F, 0xA1, 0x9D, 0x9D, 
   0xA1, 0x9F, 0x9D, 0xA4, 0x9D, 0x9D, 0xA3, 0x99, 0x9B, 0x9F, 0x99, 0x9C, 0x9C, 0x9A, 0x9A, 0x99, 
   0x96, 0x95, 0x96, 0x92, 0x91, 0x95, 0x92, 0x92, 0x97, 0x8B, 0x8A, 0x91, 0x7B, 0x79, 0x80, 0x80, 
   0x7E, 0x82, 0x81, 0x83, 0x86, 0x7C, 0x80, 0x83, 0x80, 0x82, 0x81, 0x93, 0x94, 0x93, 0x99, 0x9A, 
   0x9C, 0x9D, 0x9F, 0xA2, 0x9C, 0x9D, 0xA0, 0x94, 0x98, 0x9E, 0x8F, 0x91, 0x98, 0x91, 0x90, 0x95, 
   0x95, 0x8F, 0x96, 0x8D, 0x87, 0x8D, 0x73, 0x6F, 0x76, 0x59, 0x58, 0x60, 0x49, 0x4A, 0x50, 0x41, 
   0x46, 0x47, 0x3F, 0x48, 0x46, 0x49, 0x54, 0x53, 0x50, 0x5C, 0x5C, 0x4E, 0x5A, 0x5C, 0x4E, 0x57, 
   0x5F, 0x55, 0x5E, 0x65, 0x55, 0x60, 0x68, 0x5C, 0x68, 0x71, 0x56, 0x5E, 0x64, 0x31, 0x32, 0x34, 
   0x1F, 0x1E, 0x22, 0x37, 0x3B, 0x44, 0x49, 0x50, 0x56, 0x4F, 0x58, 0x5D, 0x50, 0x5C, 0x63, 0x49, 
   0x56, 0x5C, 0x3C, 0x48, 0x51, 0x31, 0x3B, 0x47, 0x4E, 0x57, 0x63, 0x88, 0x8D, 0x9D, 0x80, 0x81, 
   0x99, 0x7A, 0x7B, 0x97, 0x7C, 0x7F, 0x9B, 0x7C, 0x85, 0x9F, 0x7B, 0x84, 0x9E, 0x7E, 0x85, 0x9B, 
   0x7C, 0x82, 0x96, 0x79, 0x7F, 0x95, 0x57, 0x5B, 0x73, 0x5A, 0x5D, 0x76, 0x5F, 0x61, 0x76, 0x68, 
   0x6A, 0x7A, 0x6B, 0x72, 0x7F, 0x5C, 0x5F, 0x6E, 0x5D, 0x62, 0x69, 0x6A, 0x70, 0x73, 0x7C, 0x7E, 
   0x82, 0x8C, 0x8F, 0x90, 0x87, 0x8B, 0x90, 0x87, 0x85, 0x8E, 0x7D, 0x7F, 0x86, 0x7F, 0x85, 0x88, 
   0x86, 0x89, 0x89, 0x50, 0x4D, 0x4D, 0x22, 0x1E, 0x1E, 0x20, 0x1F, 0x1F, 0x31, 0x32, 0x31, 0x4A, 
   0x47, 0x48, 0x5D, 0x59, 0x55, 0x6F, 0x69, 0x62, 0x72, 0x6C, 0x64, 0x6A, 0x66, 0x5F, 0x66, 0x61, 
   0x5F, 0x67, 0x61, 0x5F, 0x6C, 0x66, 0x63, 0x75, 0x6B, 0x64, 0x72, 0x6B, 0x62, 0x70, 0x6D, 0x63, 
   0x71, 0x6D, 0x67, 0x69, 0x60, 0x62, 0x48, 0x3C, 0x3E, 0x27, 0x1F, 0x1F, 0x1F, 0x17, 0x12, 0x17, 
   0x18, 0x12, 0x14, 0x1B, 0x19, 0x15, 0x1A, 0x1B, 0x12, 0x17, 0x15, 0x12, 0x18, 0x17, 0x11, 0x19, 
   0x18, 0x46, 0x4D, 0x4E, 0x64, 0x6A, 0x6F, 0x69, 0x72, 0x75, 0x6D, 0x7B, 0x7C, 0x69, 0x76, 0x79, 
   0x67, 0x76, 0x78, 0x66, 0x74, 0x76, 0x85, 0x94, 0x94, 0x99, 0xA7, 0xA8, 0x9B, 0xA5, 0xA9, 0x94, 
   0x9B, 0xA5, 0x95, 0xA2, 0xA6, 0x99, 0xA4, 0xAB, 0x9B, 0xA5, 0xAC, 0x9A, 0xA5, 0xA7, 0x96, 0xA2, 
   0x9E, 0x9C, 0xA8, 0xA4, 0xA9, 0xB3, 0xB3, 0xB6, 0xBC, 0xB9, 0xBE, 0xC7, 0xC2, 0xBE, 0xC7, 0xC4, 
   0xBF, 0xCA, 0xC6, 0xC1, 0xCE, 0xCE, 0xC3, 0xD2, 0xD6, 0xC5, 0xD4, 0xD8, 0xC4, 0xD3, 0xD8, 0xC4, 
   0xD3, 0xD8, 0xC5, 0xD2, 0xD8, 0xBC, 0xC3, 0xCC, 0x98, 0xA2, 0xAF, 0x81, 0x90, 0x9F, 0x72, 0x82, 
   0x91, 0x65, 0x76, 0x83, 0x5D, 0x6C, 0x7B, 0x57, 0x5E, 0x6E, 0x51, 0x57, 0x5E, 0x4D, 0x53, 0x58, 
   0x50, 0x53, 0x57, 0x50, 0x52, 0x56, 0x56, 0x5A, 0x60, 0x7F, 0x83, 0x87, 0x8D, 0x8D, 0x91, 0x8B, 
   0x88, 0x8A, 0x91, 0x8D, 0x8D, 0x9E, 0x9A, 0x98, 0xA2, 0xA0, 0x9F, 0xA8, 0xA8, 0xAB, 0x98, 0x96, 
   0x9D, 0x89, 0x8A, 0x90, 0x7D, 0x83, 0x83, 0x7D, 0x7E, 0x7B, 0x85, 0x84, 0x83, 0x83, 0x85, 0x8A, 
   0x84, 0x86, 0x87, 0x85, 0x87, 0x88, 0x89, 0x8B, 0x8C, 0x88, 0x8A, 0x86, 0x89, 0x88, 0x82, 0x8B, 
   0x82, 0x82, 0x83, 0x77, 0x78, 0x5F, 0x55, 0x58, 0x70, 0x74, 0x78, 0x82, 0x85, 0x88, 0x71, 0x6D, 
   0x74, 0x5F, 0x5C, 0x69, 0x5D, 0x5D, 0x68, 0x59, 0x61, 0x6A, 0x60, 0x63, 0x69, 0x5B, 0x5C, 0x5F, 
   0x60, 0x69, 0x6B, 0x7C, 0x84, 0x87, 0x82, 0x8A, 0x90, 0x88, 0x92, 0x9A, 0x87, 0x8D, 0x9B, 0x7F, 
   0x89, 0x9B, 0x87, 0x8D, 0xA0, 0x78, 0x7D, 0x97, 0x73, 0x81, 0xA5, 0x74, 0x87, 0xAE, 0x71, 0x87, 
   0xAA, 0x8C, 0x9B, 0xB1, 0xC9, 0xCB, 0xD1, 0xD5, 0xC9, 0xCE, 0xBE, 0xA9, 0xB5, 0x90, 0x84, 0x98, 
   0x7D, 0x7E, 0x96, 0x7A, 0x81, 0x8E, 0x35, 0x36, 0x39, 0x39, 0x3C, 0x40, 0x3A, 0x42, 0x48, 0x3C, 
   0x44, 0x4B, 0x39, 0x40, 0x47, 0x51, 0x51, 0x55, 0x66, 0x62, 0x69, 0x72, 0x67, 0x72, 0x85, 0x80, 
   0x87, 0x7E, 0x83, 0x86, 0x6E, 0x74, 0x79, 0x5F, 0x69, 0x72, 0x3E, 0x4F, 0x63, 0x4D, 0x5D, 0x72, 
   0x52, 0x60, 0x69, 0x3D, 0x42, 0x3F, 0x49, 0x45, 0x3A, 0x56, 0x52, 0x41, 0x50, 0x4E, 0x3D, 0x49, 
   0x48, 0x41, 0x52, 0x54, 0x55, 0x51, 0x55, 0x59, 0x3B, 0x41, 0x43, 0x1D, 0x1D, 0x18, 0x1E, 0x1E, 
   0x18, 0x58, 0x5C, 0x5E, 0x96, 0x9A, 0xA0, 0x99, 0x9B, 0xA2, 0x95, 0x98, 0x9F, 0xA0, 0xA6, 0xB1, 
   0x9D, 0xA6, 0xB3, 0x9E, 0xA9, 0xB4, 0x9F, 0xA8, 0xB3, 0x9E, 0xA6, 0xAE, 0x9F, 0xA6, 0xAF, 0xA0, 
   0xA6, 0xB6, 0x9E, 0xA5, 0xB5, 0x9E, 0xA2, 0xB1, 0x97, 0x9F, 0xAC, 0x99, 0xA4, 0xAF, 0x96, 0xA3, 
   0xAA, 0x96, 0xA2, 0xAB, 0x98, 0xA5, 0xB0, 0xA1, 0xAB, 0xB8, 0x9B, 0xA2, 0xB1, 0x73, 0x7D, 0x8B, 
   0x7C, 0x86, 0x93, 0x9E, 0xA3, 0xAF, 0x9B, 0x9E, 0xA9, 0x97, 0x9A, 0xA5, 0x96, 0x94, 0x99, 0x95, 
   0x90, 0x90, 0x8C, 0x87, 0x89, 0x81, 0x7C, 0x82, 0x73, 0x70, 0x7A, 0x6E, 0x79, 0x84, 0x74, 0x86, 
   0x91, 0x72, 0x80, 0x8C, 0x7B, 0x78, 0x7B, 0x58, 0x53, 0x55, 0x49, 0x48, 0x4F, 0x72, 0x70, 0x79, 
   0x87, 0x84, 0x8D, 0x8C, 0x8E, 0x93, 0x8A, 0x90, 0x93, 0x92, 0x93, 0x98, 0x98, 0x97, 0x9D, 0x97, 
   0x98, 0x9E, 0x95, 0x98, 0x9E, 0x8D, 0x92, 0x9A, 0x8A, 0x91, 0x9C, 0x95, 0x99, 0x9F, 0x99, 0x9C, 
   0xA1, 0x9A, 0x9A, 0xA3, 0x9B, 0x9A, 0xA1, 0x9D, 0x9B, 0xA1, 0x9D, 0x98, 0xA0, 0x9C, 0x98, 0x9E, 
   0x96, 0x97, 0x9D, 0x96, 0x99, 0x9D, 0x98, 0x99, 0x9C, 0x99, 0x99, 0x9D, 0x8B, 0x8A, 0x91, 0x8E, 
   0x8B, 0x93, 0x8C, 0x89, 0x91, 0x80, 0x7E, 0x84, 0x82, 0x7C, 0x83, 0x92, 0x8F, 0x96, 0x97, 0x98, 
   0x9F, 0x96, 0x99, 0x9E, 0x93, 0x95, 0x98, 0x8E, 0x90, 0x98, 0x88, 0x88, 0x90, 0x83, 0x80, 0x85, 
   0x8C, 0x86, 0x89, 0x92, 0x8E, 0x90, 0x8C, 0x8B, 0x8D, 0x85, 0x87, 0x8D, 0x79, 0x75, 0x7E, 0x59, 
   0x57, 0x65, 0x43, 0x46, 0x50, 0x3B, 0x43, 0x45, 0x3F, 0x49, 0x47, 0x43, 0x4F, 0x4C, 0x46, 0x52, 
   0x54, 0x46, 0x56, 0x56, 0x43, 0x57, 0x58, 0x4A, 0x5A, 0x5E, 0x59, 0x64, 0x68, 0x4E, 0x4F, 0x52, 
   0x39, 0x3C, 0x3E, 0x45, 0x4C, 0x4F, 0x43, 0x4A, 0x49, 0x42, 0x4A, 0x47, 0x3F, 0x4C, 0x49, 0x3E, 
   0x49, 0x4A, 0x2D, 0x38, 0x43, 0x28, 0x35, 0x42, 0x6E, 0x79, 0x82, 0x99, 0x9E, 0xAE, 0x7E, 0x7D, 
   0x94, 0x7C, 0x7F, 0x98, 0x7D, 0x84, 0xA1, 0x80, 0x85, 0xA6, 0x80, 0x85, 0xA0, 0x81, 0x87, 0x9F, 
   0x7E, 0x85, 0x9D, 0x7A, 0x7E, 0x9B, 0x67, 0x6B, 0x89, 0x5F, 0x63, 0x7D, 0x63, 0x63, 0x7A, 0x6D, 
   0x6E, 0x81, 0x62, 0x66, 0x77, 0x54, 0x57, 0x65, 0x5E, 0x64, 0x69, 0x6A, 0x70, 0x73, 0x83, 0x85, 
   0x8B, 0x8B, 0x8D, 0x93, 0x83, 0x87, 0x8C, 0x85, 0x86, 0x8E, 0x83, 0x84, 0x8A, 0x7C, 0x7E, 0x82, 
   0x69, 0x6A, 0x6E, 0x35, 0x30, 0x33, 0x26, 0x21, 0x22, 0x44, 0x46, 0x41, 0x54, 0x5A, 0x58, 0x5C, 
   0x5D, 0x5A, 0x64, 0x5F, 0x5A, 0x6B, 0x64, 0x5F, 0x69, 0x65, 0x5E, 0x69, 0x65, 0x5F, 0x67, 0x62, 
   0x5E, 0x65, 0x61, 0x61, 0x67, 0x63, 0x5E, 0x6B, 0x64, 0x5C, 0x6C, 0x66, 0x5E, 0x6C, 0x6A, 0x64, 
   0x6C, 0x6C, 0x6A, 0x71, 0x70, 0x6F, 0x72, 0x6A, 0x69, 0x5E, 0x55, 0x58, 0x3D, 0x37, 0x3A, 0x29, 
   0x25, 0x26, 0x2C, 0x26, 0x26, 0x2F, 0x2B, 0x2A, 0x18, 0x1C, 0x19, 0x0C, 0x13, 0x11, 0x0C, 0x16, 
   0x12, 0x57, 0x65, 0x64, 0x7B, 0x84, 0x8B, 0x77, 0x82, 0x86, 0x71, 0x81, 0x81, 0x74, 0x7F, 0x80, 
   0x6B, 0x78, 0x80, 0x62, 0x6C, 0x74, 0x75, 0x80, 0x7F, 0x90, 0x98, 0x99, 0x95, 0x9A, 0xA2, 0x88, 
   0x8F, 0x97, 0x86, 0x97, 0x99, 0x95, 0xA1, 0xA6, 0x9E, 0xA8, 0xAC, 0x9C, 0xA8, 0xA9, 0x95, 0xA0, 
   0x9F, 0x9A, 0xA1, 0xA2, 0xA0, 0xA7, 0xAB, 0xA0, 0xA2, 0xA5, 0xA0, 0xA6, 0xA5, 0xAB, 0xB5, 0xB1, 
   0xB7, 0xC2, 0xBE, 0xB6, 0xC2, 0xC0, 0xBA, 0xC4, 0xC6, 0xBC, 0xC7, 0xCB, 0xBC, 0xCC, 0xCD, 0xC1, 
   0xD1, 0xD4, 0xBC, 0xCC, 0xD1, 0xAF, 0xBD, 0xC4, 0x9A, 0xA8, 0xB3, 0x8C, 0x9A, 0xAA, 0x76, 0x82, 
   0x90, 0x60, 0x69, 0x70, 0x4D, 0x56, 0x5C, 0x4D, 0x54, 0x59, 0x4F, 0x55, 0x52, 0x4B, 0x51, 0x51, 
   0x52, 0x55, 0x55, 0x52, 0x57, 0x57, 0x74, 0x7C, 0x7C, 0x9E, 0xA5, 0xA6, 0x9B, 0x9E, 0xA0, 0x95, 
   0x96, 0x97, 0x94, 0x95, 0x95, 0x9E, 0x9F, 0x9E, 0xA2, 0xA0, 0xA2, 0xA5, 0xA6, 0xAA, 0x8F, 0x90, 
   0x94, 0x84, 0x88, 0x89, 0x80, 0x87, 0x85, 0x80, 0x82, 0x83, 0x83, 0x84, 0x89, 0x83, 0x85, 0x84, 
   0x80, 0x82, 0x7F, 0x84, 0x84, 0x80, 0x83, 0x83, 0x81, 0x82, 0x84, 0x7E, 0x89, 0x8A, 0x82, 0x93, 
   0x8C, 0x8B, 0x8D, 0x7B, 0x7F, 0x5F, 0x52, 0x56, 0x63, 0x65, 0x6B, 0x72, 0x7B, 0x7E, 0x84, 0x86, 
   0x8A, 0x6B, 0x68, 0x72, 0x60, 0x60, 0x68, 0x5F, 0x65, 0x6C, 0x60, 0x66, 0x6B, 0x5F, 0x64, 0x66, 
   0x86, 0x8B, 0x8B, 0x98, 0x9B, 0x9C, 0x81, 0x87, 0x8E, 0x8A, 0x92, 0x9C, 0x88, 0x8B, 0x9C, 0x7A, 
   0x7E, 0x93, 0x76, 0x7E, 0x90, 0x73, 0x7C, 0x97, 0x79, 0x8C, 0xB0, 0x76, 0x8C, 0xB2, 0x78, 0x8A, 
   0xAE, 0x81, 0x8F, 0xA8, 0xBE, 0xC7, 0xCC, 0xD5, 0xCC, 0xD3, 0xAC, 0x9B, 0xB1, 0x83, 0x81, 0x9B, 
   0x79, 0x7F, 0x9D, 0x78, 0x7D, 0x90, 0x38, 0x3C, 0x43, 0x3A, 0x3D, 0x42, 0x39, 0x40, 0x44, 0x38, 
   0x3F, 0x44, 0x37, 0x3D, 0x42, 0x59, 0x5A, 0x5C, 0x66, 0x65, 0x69, 0x66, 0x62, 0x69, 0x71, 0x6E, 
   0x73, 0x7F, 0x82, 0x85, 0x64, 0x66, 0x69, 0x64, 0x6C, 0x74, 0x53, 0x61, 0x73, 0x3B, 0x4A, 0x5D, 
   0x4F, 0x5B, 0x63, 0x33, 0x37, 0x34, 0x2E, 0x2D, 0x23, 0x2D, 0x2D, 0x21, 0x2F, 0x2F, 0x2A, 0x53, 
   0x56, 0x59, 0x66, 0x6C, 0x70, 0x61, 0x69, 0x6C, 0x5E, 0x67, 0x6C, 0x29, 0x27, 0x2A, 0x1A, 0x1C, 
   0x1E, 0x70, 0x76, 0x80, 0x9B, 0x9F, 0xA8, 0x9A, 0x98, 0xA1, 0x8F, 0x91, 0x98, 0x9F, 0xAB, 0xB3, 
   0xA6, 0xAD, 0xBB, 0xA3, 0xAD, 0xB9, 0xA0, 0xA9, 0xB5, 0x9D, 0xA6, 0xAF, 0xA0, 0xA6, 0xAE, 0xA1, 
   0xA8, 0xB4, 0xA1, 0xA8, 0xB4, 0x9E, 0xA6, 0xB2, 0xA4, 0xAD, 0xB9, 0xA1, 0xAC, 0xB7, 0x97, 0xA2, 
   0xAB, 0x95, 0xA0, 0xAA, 0x94, 0x9D, 0xAC, 0x94, 0x9C, 0xAA, 0x93, 0x99, 0xA6, 0x70, 0x79, 0x84, 
   0x73, 0x7B, 0x84, 0x92, 0x98, 0x9F, 0x93, 0x98, 0xA0, 0x94, 0x9A, 0xA0, 0x98, 0x98, 0xA0, 0x94, 
   0x92, 0x99, 0x88, 0x85, 0x89, 0x80, 0x7B, 0x7E, 0x6D, 0x6D, 0x71, 0x65, 0x73, 0x79, 0x6D, 0x83, 
   0x8B, 0x70, 0x82, 0x8E, 0x7F, 0x80, 0x83, 0x58, 0x56, 0x56, 0x47, 0x47, 0x4A, 0x78, 0x75, 0x7B, 
   0x8E, 0x8A, 0x92, 0x8E, 0x8E, 0x92, 0x93, 0x91, 0x99, 0x96, 0x91, 0x9B, 0x98, 0x93, 0x9C, 0x98, 
   0x94, 0x9B, 0x99, 0x9A, 0xA0, 0x93, 0x98, 0x9F, 0x8F, 0x95, 0xA0, 0x90, 0x98, 0x9E, 0x99, 0x9C, 
   0xA3, 0x99, 0x99, 0xA4, 0x96, 0x97, 0x9E, 0x99, 0x9A, 0xA0, 0xA0, 0x9A, 0xA4, 0x9C, 0x96, 0x9F, 
   0x94, 0x93, 0x9D, 0x9B, 0x9B, 0xA0, 0x9C, 0x9C, 0x9C, 0x9E, 0x9C, 0x9C, 0x9E, 0x9B, 0xA0, 0xA0, 
   0x9B, 0xA4, 0x9E, 0x99, 0xA1, 0x9C, 0x97, 0x9E, 0x9C, 0x98, 0xA0, 0x9D, 0x9B, 0xA3, 0xA0, 0x9E, 
   0xA7, 0x97, 0x98, 0x9F, 0x93, 0x96, 0x9B, 0x93, 0x96, 0x9D, 0x8D, 0x8D, 0x96, 0x85, 0x80, 0x89, 
   0x7B, 0x75, 0x7D, 0x74, 0x6F, 0x76, 0x73, 0x71, 0x78, 0x77, 0x7A, 0x81, 0x79, 0x75, 0x7E, 0x63, 
   0x5E, 0x70, 0x57, 0x56, 0x66, 0x49, 0x4E, 0x56, 0x33, 0x39, 0x3E, 0x37, 0x3E, 0x40, 0x40, 0x48, 
   0x4A, 0x41, 0x4B, 0x4F, 0x3E, 0x4C, 0x50, 0x41, 0x4E, 0x53, 0x42, 0x50, 0x54, 0x4A, 0x51, 0x54, 
   0x43, 0x44, 0x46, 0x39, 0x39, 0x3B, 0x30, 0x33, 0x32, 0x34, 0x39, 0x36, 0x2D, 0x37, 0x36, 0x30, 
   0x35, 0x3A, 0x26, 0x2D, 0x39, 0x3A, 0x44, 0x50, 0x8F, 0x96, 0x9A, 0x95, 0x97, 0x9F, 0x80, 0x81, 
   0x92, 0x7F, 0x87, 0x9B, 0x7A, 0x86, 0x9F, 0x7C, 0x82, 0x9F, 0x7F, 0x84, 0x9E, 0x80, 0x86, 0x9F, 
   0x7E, 0x85, 0xA1, 0x81, 0x87, 0xA4, 0x7E, 0x83, 0xA0, 0x78, 0x7C, 0x9A, 0x72, 0x70, 0x8C, 0x6F, 
   0x6E, 0x88, 0x60, 0x5F, 0x70, 0x5F, 0x63, 0x69, 0x70, 0x77, 0x7A, 0x80, 0x85, 0x8A, 0x8D, 0x8E, 
   0x96, 0x82, 0x81, 0x89, 0x7C, 0x7D, 0x81, 0x80, 0x85, 0x8B, 0x7F, 0x84, 0x8A, 0x72, 0x70, 0x77, 
   0x4A, 0x44, 0x4C, 0x33, 0x30, 0x33, 0x38, 0x3B, 0x39, 0x4E, 0x51, 0x4E, 0x57, 0x53, 0x53, 0x5B, 
   0x57, 0x54, 0x61, 0x5A, 0x56, 0x61, 0x5B, 0x55, 0x5D, 0x5B, 0x55, 0x60, 0x5F, 0x5A, 0x61, 0x5D, 
   0x5A, 0x60, 0x5D, 0x58, 0x61, 0x5F, 0x56, 0x63, 0x64, 0x57, 0x64, 0x63, 0x5B, 0x63, 0x62, 0x60, 
   0x61, 0x60, 0x62, 0x63, 0x61, 0x61, 0x6D, 0x65, 0x64, 0x70, 0x65, 0x68, 0x6E, 0x65, 0x6A, 0x6A, 
   0x62, 0x65, 0x4C, 0x43, 0x42, 0x36, 0x2F, 0x2E, 0x17, 0x1A, 0x19, 0x0A, 0x12, 0x10, 0x0D, 0x1C, 
   0x17, 0x5A, 0x6D, 0x6E, 0x76, 0x82, 0x8B, 0x76, 0x82, 0x88, 0x6F, 0x7E, 0x80, 0x6D, 0x7C, 0x7D, 
   0x6F, 0x7D, 0x82, 0x68, 0x70, 0x77, 0x6A, 0x74, 0x75, 0x8B, 0x96, 0x97, 0x94, 0x9A, 0x9F, 0x8C, 
   0x90, 0x95, 0x8D, 0x9C, 0xA1, 0x94, 0xA1, 0xA6, 0x97, 0xA1, 0xA7, 0x8F, 0x99, 0x9E, 0x8B, 0x95, 
   0x99, 0x96, 0x9D, 0x9F, 0x9F, 0xA3, 0xA6, 0x9D, 0x9B, 0xA0, 0x9D, 0x9F, 0xA0, 0xA2, 0xA6, 0xA4, 
   0xA2, 0xA8, 0xA5, 0xAB, 0xB2, 0xAF, 0xAA, 0xB1, 0xB2, 0xAA, 0xB2, 0xB2, 0xAA, 0xB1, 0xB2, 0xA6, 
   0xAF, 0xB7, 0x9D, 0xA8, 0xB6, 0x9B, 0xA7, 0xB4, 0x8D, 0x98, 0x9E, 0x69, 0x72, 0x72, 0x58, 0x5F, 
   0x5E, 0x4B, 0x50, 0x4D, 0x4D, 0x4F, 0x4C, 0x4F, 0x4F, 0x4D, 0x4C, 0x52, 0x4C, 0x4A, 0x52, 0x51, 
   0x4E, 0x56, 0x57, 0x69, 0x72, 0x72, 0x8C, 0x91, 0x91, 0x8B, 0x8A, 0x8A, 0x81, 0x82, 0x81, 0x81, 
   0x87, 0x84, 0x8B, 0x8D, 0x8C, 0x98, 0x93, 0x94, 0x94, 0x8F, 0x8F, 0x8D, 0x8B, 0x8D, 0x82, 0x7F, 
   0x83, 0x82, 0x83, 0x86, 0x7F, 0x82, 0x87, 0x84, 0x84, 0x8A, 0x81, 0x81, 0x89, 0x7F, 0x83, 0x80, 
   0x7C, 0x7F, 0x7C, 0x7D, 0x7E, 0x79, 0x7F, 0x7E, 0x7B, 0x82, 0x85, 0x80, 0x87, 0x8A, 0x83, 0x9D, 
   0x96, 0x9A, 0x7D, 0x6E, 0x78, 0x54, 0x4A, 0x51, 0x5F, 0x60, 0x69, 0x6D, 0x77, 0x79, 0x86, 0x8D, 
   0x8F, 0x8A, 0x89, 0x94, 0x6B, 0x6C, 0x73, 0x57, 0x58, 0x5E, 0x54, 0x5B, 0x5E, 0x6A, 0x72, 0x74, 
   0x87, 0x8B, 0x8F, 0x7D, 0x81, 0x8B, 0x7A, 0x81, 0x8F, 0x92, 0x97, 0xAA, 0x78, 0x78, 0x8F, 0x76, 
   0x76, 0x8F, 0x71, 0x74, 0x88, 0x60, 0x6C, 0x80, 0x74, 0x89, 0xAA, 0x7B, 0x92, 0xB8, 0x7C, 0x92, 
   0xB4, 0x7D, 0x8F, 0xAE, 0x8E, 0x9D, 0xB0, 0xA5, 0xA6, 0xBC, 0x93, 0x8E, 0xAF, 0x80, 0x85, 0xA2, 
   0x7D, 0x88, 0x9A, 0x82, 0x83, 0x95, 0x34, 0x3B, 0x41, 0x38, 0x37, 0x3E, 0x33, 0x35, 0x37, 0x29, 
   0x2F, 0x33, 0x3C, 0x3E, 0x45, 0x62, 0x5F, 0x65, 0x63, 0x65, 0x69, 0x5A, 0x5A, 0x5E, 0x5F, 0x5E, 
   0x61, 0x62, 0x67, 0x68, 0x7C, 0x83, 0x84, 0x83, 0x8D, 0x92, 0x52, 0x62, 0x6F, 0x33, 0x44, 0x53, 
   0x42, 0x52, 0x5B, 0x1D, 0x26, 0x27, 0x0D, 0x0E, 0x0B, 0x08, 0x0B, 0x0B, 0x29, 0x2F, 0x35, 0x5E, 
   0x66, 0x6C, 0x73, 0x7E, 0x7F, 0x66, 0x71, 0x71, 0x57, 0x61, 0x65, 0x27, 0x25, 0x29, 0x33, 0x38, 
   0x3D, 0x86, 0x90, 0x9A, 0xA1, 0xA7, 0xAF, 0x9F, 0x9D, 0xA7, 0x9C, 0x9B, 0xA4, 0xA4, 0xAC, 0xB2, 
   0xAC, 0xAF, 0xBB, 0xA6, 0xAC, 0xB5, 0xA4, 0xA9, 0xB4, 0xA4, 0xA9, 0xB2, 0xA4, 0xA9, 0xB3, 0xA0, 
   0xA5, 0xAF, 0x9D, 0xA6, 0xAB, 0x9B, 0xA4, 0xA9, 0x9C, 0xA3, 0xA7, 0x98, 0xA0, 0xA5, 0x95, 0x9F, 
   0xA7, 0x95, 0xA1, 0xAD, 0x93, 0x9E, 0xAB, 0x8F, 0x99, 0xA6, 0x87, 0x91, 0x9B, 0x5F, 0x66, 0x6F, 
   0x59, 0x5D, 0x65, 0x8A, 0x90, 0x95, 0x83, 0x89, 0x8B, 0x88, 0x8C, 0x8E, 0x93, 0x95, 0x9B, 0x92, 
   0x95, 0x9C, 0x90, 0x8C, 0x94, 0x88, 0x7E, 0x86, 0x74, 0x73, 0x79, 0x69, 0x73, 0x78, 0x6A, 0x7F, 
   0x83, 0x6F, 0x83, 0x8E, 0x88, 0x8E, 0x90, 0x6F, 0x6C, 0x6C, 0x45, 0x45, 0x43, 0x61, 0x62, 0x60, 
   0x8E, 0x8D, 0x8F, 0x9A, 0x96, 0x9A, 0x93, 0x91, 0x99, 0x95, 0x90, 0x9A, 0x95, 0x90, 0x99, 0x98, 
   0x94, 0x9B, 0x98, 0x97, 0x9D, 0x96, 0x98, 0x9F, 0x90, 0x95, 0x9D, 0x8D, 0x96, 0x9C, 0x95, 0x98, 
   0xA0, 0x97, 0x97, 0xA0, 0x93, 0x96, 0x9C, 0x96, 0x99, 0x9E, 0xAD, 0xA9, 0xB3, 0xA4, 0x9E, 0xA7, 
   0x9B, 0x9A, 0xA1, 0x9B, 0x98, 0x9D, 0x9B, 0x96, 0x9A, 0x9B, 0x95, 0x99, 0x9C, 0x98, 0x9D, 0x9C, 
   0x99, 0xA0, 0x9E, 0x9A, 0xA0, 0x9D, 0x9C, 0x9F, 0x99, 0x9A, 0x9F, 0x9A, 0x9A, 0xA1, 0x9A, 0x97, 
   0xA0, 0x95, 0x94, 0x9D, 0x90, 0x94, 0x9B, 0x91, 0x94, 0x9C, 0x94, 0x94, 0x9D, 0x98, 0x96, 0x9F, 
   0x9D, 0x9B, 0xA4, 0x9A, 0x98, 0xA2, 0x87, 0x86, 0x8F, 0x7F, 0x7D, 0x89, 0x84, 0x81, 0x8D, 0x74, 
   0x70, 0x7E, 0x60, 0x5C, 0x6D, 0x51, 0x50, 0x60, 0x40, 0x41, 0x4F, 0x2C, 0x2D, 0x38, 0x2E, 0x2F, 
   0x34, 0x39, 0x3F, 0x41, 0x37, 0x3F, 0x43, 0x39, 0x41, 0x45, 0x3D, 0x45, 0x48, 0x41, 0x4A, 0x4C, 
   0x42, 0x41, 0x43, 0x30, 0x33, 0x32, 0x25, 0x2B, 0x2A, 0x24, 0x2E, 0x2C, 0x20, 0x2B, 0x2D, 0x27, 
   0x2D, 0x33, 0x21, 0x2A, 0x35, 0x60, 0x6B, 0x73, 0x9D, 0xA3, 0xA6, 0x90, 0x96, 0x9D, 0x90, 0x9A, 
   0xA7, 0x88, 0x94, 0xA5, 0x80, 0x8B, 0xA0, 0x80, 0x86, 0xA0, 0x7F, 0x82, 0xA1, 0x7B, 0x80, 0x9E, 
   0x79, 0x80, 0x9A, 0x77, 0x7F, 0x95, 0x82, 0x8B, 0x9E, 0x86, 0x8E, 0xA1, 0x80, 0x82, 0x94, 0x73, 
   0x74, 0x83, 0x5E, 0x62, 0x6A, 0x65, 0x68, 0x68, 0x83, 0x81, 0x83, 0x8A, 0x88, 0x92, 0x86, 0x88, 
   0x91, 0x7E, 0x7F, 0x83, 0x7C, 0x7A, 0x7C, 0x7B, 0x80, 0x81, 0x83, 0x85, 0x8A, 0x60, 0x5C, 0x62, 
   0x38, 0x35, 0x37, 0x39, 0x3C, 0x38, 0x40, 0x45, 0x3F, 0x48, 0x4A, 0x46, 0x4C, 0x4A, 0x47, 0x4A, 
   0x4B, 0x49, 0x4C, 0x4E, 0x49, 0x4F, 0x50, 0x47, 0x50, 0x51, 0x46, 0x54, 0x54, 0x4F, 0x55, 0x52, 
   0x50, 0x57, 0x53, 0x4C, 0x5D, 0x5C, 0x52, 0x5D, 0x5F, 0x55, 0x60, 0x60, 0x5C, 0x65, 0x62, 0x63, 
   0x6A, 0x64, 0x66, 0x6A, 0x65, 0x64, 0x6A, 0x67, 0x62, 0x6C, 0x64, 0x62, 0x70, 0x67, 0x66, 0x7C, 
   0x73, 0x6F, 0x7D, 0x75, 0x70, 0x50, 0x49, 0x47, 0x19, 0x19, 0x1A, 0x11, 0x16, 0x14, 0x10, 0x1F, 
   0x1E, 0x54, 0x67, 0x71, 0x71, 0x7F, 0x8A, 0x79, 0x85, 0x8D, 0x77, 0x84, 0x86, 0x73, 0x81, 0x84, 
   0x6D, 0x7F, 0x80, 0x6E, 0x7D, 0x81, 0x6E, 0x7D, 0x81, 0x79, 0x87, 0x88, 0x8E, 0x97, 0x95, 0x95, 
   0x9A, 0x9C, 0x94, 0x9F, 0xA5, 0x93, 0x9F, 0xA7, 0x92, 0x9A, 0xA5, 0x93, 0x99, 0xA5, 0x93, 0x9E, 
   0xA7, 0x96, 0xA1, 0xA8, 0x9F, 0xA4, 0xA8, 0xA0, 0xA4, 0xA5, 0xA1, 0xA5, 0xA3, 0x9E, 0xA4, 0xA1, 
   0x9B, 0xA1, 0x9F, 0xA2, 0xA9, 0xA9, 0xA4, 0xAC, 0xAF, 0xAA, 0xB1, 0xB8, 0xA4, 0xAE, 0xB9, 0x93, 
   0xA3, 0xAC, 0x6F, 0x84, 0x88, 0x4F, 0x60, 0x5D, 0x40, 0x49, 0x43, 0x3C, 0x3F, 0x3A, 0x46, 0x47, 
   0x44, 0x4C, 0x4F, 0x4D, 0x65, 0x65, 0x65, 0x55, 0x52, 0x55, 0x45, 0x4B, 0x4A, 0x46, 0x4B, 0x4D, 
   0x5E, 0x63, 0x64, 0x95, 0x9A, 0x9B, 0x8C, 0x8D, 0x8F, 0x7E, 0x7D, 0x7C, 0x81, 0x84, 0x80, 0x8A, 
   0x8E, 0x89, 0x91, 0x91, 0x8D, 0x9A, 0x94, 0x92, 0x98, 0x90, 0x8D, 0x87, 0x84, 0x83, 0x7F, 0x7C, 
   0x7D, 0x81, 0x7F, 0x81, 0x85, 0x84, 0x87, 0x89, 0x87, 0x89, 0x87, 0x86, 0x87, 0x87, 0x8A, 0x88, 
   0x8A, 0x8C, 0x8B, 0x85, 0x85, 0x84, 0x83, 0x82, 0x81, 0x83, 0x86, 0x82, 0x88, 0x8A, 0x86, 0x90, 
   0x88, 0x90, 0x62, 0x58, 0x64, 0x52, 0x4B, 0x55, 0x63, 0x62, 0x6B, 0x6B, 0x71, 0x72, 0x7F, 0x84, 
   0x84, 0x8B, 0x8B, 0x92, 0x8D, 0x8C, 0x93, 0x8E, 0x89, 0x92, 0x90, 0x90, 0x97, 0xA7, 0xA4, 0xAD, 
   0x8A, 0x83, 0x95, 0x71, 0x72, 0x8B, 0x73, 0x7B, 0x95, 0x73, 0x79, 0x96, 0x70, 0x75, 0x91, 0x7D, 
   0x7C, 0x9B, 0x50, 0x4A, 0x60, 0x3C, 0x48, 0x4C, 0x76, 0x88, 0x9E, 0x80, 0x94, 0xB6, 0x88, 0x9C, 
   0xB9, 0x8B, 0x9A, 0xB2, 0x93, 0x9D, 0xAE, 0xB5, 0xBA, 0xCC, 0xA4, 0xA5, 0xC2, 0x89, 0x8B, 0xAD, 
   0x82, 0x8A, 0x9C, 0x8E, 0x8B, 0x99, 0x37, 0x3A, 0x40, 0x32, 0x2D, 0x35, 0x33, 0x33, 0x36, 0x2F, 
   0x33, 0x39, 0x44, 0x47, 0x50, 0x5D, 0x5C, 0x67, 0x5A, 0x59, 0x60, 0x5E, 0x5C, 0x61, 0x68, 0x66, 
   0x6A, 0x69, 0x6C, 0x6C, 0x83, 0x89, 0x87, 0x84, 0x8C, 0x8B, 0x57, 0x61, 0x68, 0x41, 0x4D, 0x5C, 
   0x49, 0x55, 0x61, 0x2B, 0x30, 0x35, 0x0B, 0x0A, 0x0E, 0x14, 0x16, 0x19, 0x40, 0x47, 0x4B, 0x6B, 
   0x74, 0x78, 0x8A, 0x92, 0x92, 0x66, 0x6D, 0x6C, 0x50, 0x55, 0x5A, 0x2D, 0x2E, 0x32, 0x61, 0x68, 
   0x6B, 0x82, 0x8C, 0x93, 0x99, 0xA3, 0xA6, 0x9D, 0xA1, 0xAA, 0x9B, 0x9C, 0xA8, 0xA0, 0xA3, 0xAB, 
   0x9D, 0xA0, 0xA9, 0x99, 0xA0, 0xA4, 0x9F, 0xA6, 0xAC, 0xA2, 0xA7, 0xAE, 0xA4, 0xA8, 0xB2, 0xA2, 
   0xA8, 0xB3, 0x9E, 0xA6, 0xAD, 0x9C, 0xA1, 0xA7, 0x98, 0x9C, 0x9F, 0x92, 0x99, 0x9B, 0x8E, 0x98, 
   0x9E, 0x93, 0xA0, 0xAA, 0x95, 0xA2, 0xAD, 0x8E, 0x9B, 0xA6, 0x87, 0x92, 0x9C, 0x63, 0x68, 0x73, 
   0x4F, 0x51, 0x5B, 0x91, 0x94, 0x9C, 0x8C, 0x8E, 0x96, 0x86, 0x85, 0x8D, 0x8F, 0x8F, 0x95, 0x93, 
   0x97, 0x9C, 0x94, 0x8F, 0x96, 0x8E, 0x85, 0x8D, 0x7A, 0x76, 0x7F, 0x6C, 0x6D, 0x77, 0x6E, 0x7A, 
   0x83, 0x73, 0x85, 0x8F, 0x83, 0x8B, 0x8D, 0x7B, 0x77, 0x77, 0x4B, 0x48, 0x46, 0x47, 0x4B, 0x46, 
   0x7B, 0x80, 0x7E, 0x9B, 0x9A, 0x9B, 0x96, 0x97, 0x9C, 0x96, 0x94, 0x9C, 0x94, 0x92, 0x9B, 0x93, 
   0x91, 0x99, 0x94, 0x94, 0x9C, 0x94, 0x96, 0x9E, 0x90, 0x94, 0x9D, 0x90, 0x94, 0x9A, 0x93, 0x94, 
   0x9D, 0x94, 0x94, 0x9C, 0x90, 0x8F, 0x97, 0x8A, 0x89, 0x8F, 0x99, 0x94, 0x9D, 0xA2, 0x9F, 0xA7, 
   0x9B, 0x9C, 0xA2, 0x99, 0x98, 0x9D, 0x9B, 0x96, 0x9B, 0x99, 0x94, 0x99, 0x99, 0x97, 0x9C, 0x97, 
   0x98, 0x9E, 0x97, 0x97, 0x9A, 0x98, 0x98, 0x9B, 0x98, 0x99, 0x9C, 0x9B, 0x99, 0x9F, 0x98, 0x96, 
   0x9F, 0x96, 0x95, 0x9E, 0x92, 0x94, 0x9D, 0x91, 0x94, 0x9D, 0x92, 0x95, 0x9D, 0x95, 0x97, 0x9D, 
   0x98, 0x9A, 0x9E, 0x9A, 0x9B, 0xA2, 0x96, 0x94, 0x9F, 0x99, 0x95, 0xA3, 0x9C, 0x9A, 0xA6, 0x9D, 
   0x9A, 0xA3, 0x9F, 0x9B, 0xA7, 0x8A, 0x87, 0x96, 0x76, 0x76, 0x84, 0x65, 0x61, 0x70, 0x3A, 0x35, 
   0x3D, 0x2E, 0x2F, 0x32, 0x31, 0x36, 0x38, 0x34, 0x3D, 0x3E, 0x39, 0x41, 0x41, 0x45, 0x4D, 0x4D, 
   0x4A, 0x4B, 0x4A, 0x29, 0x30, 0x2E, 0x20, 0x26, 0x24, 0x1C, 0x27, 0x23, 0x19, 0x25, 0x23, 0x21, 
   0x29, 0x2C, 0x21, 0x2D, 0x34, 0x6B, 0x76, 0x7E, 0x86, 0x8C, 0x99, 0x76, 0x7E, 0x93, 0x7B, 0x83, 
   0x99, 0x81, 0x89, 0xA2, 0x7E, 0x86, 0xA1, 0x7D, 0x83, 0xA1, 0x7D, 0x81, 0xA2, 0x7E, 0x81, 0x9F, 
   0x78, 0x7E, 0x97, 0x73, 0x79, 0x93, 0x7B, 0x82, 0x98, 0x7F, 0x87, 0x96, 0x7F, 0x84, 0x8E, 0x70, 
   0x72, 0x7A, 0x5E, 0x66, 0x6D, 0x75, 0x79, 0x7B, 0x8A, 0x85, 0x89, 0x92, 0x8D, 0x97, 0x86, 0x88, 
   0x90, 0x79, 0x7E, 0x7F, 0x78, 0x76, 0x78, 0x7B, 0x7A, 0x7B, 0x6D, 0x6B, 0x6D, 0x3D, 0x3E, 0x3F, 
   0x2E, 0x34, 0x33, 0x38, 0x3C, 0x39, 0x3F, 0x3F, 0x3B, 0x3F, 0x3F, 0x3B, 0x41, 0x43, 0x3E, 0x3E, 
   0x45, 0x43, 0x40, 0x47, 0x45, 0x44, 0x47, 0x40, 0x46, 0x47, 0x3E, 0x4C, 0x4F, 0x49, 0x4F, 0x50, 
   0x4D, 0x56, 0x53, 0x4C, 0x5A, 0x5A, 0x50, 0x5A, 0x5C, 0x53, 0x59, 0x5A, 0x53, 0x60, 0x5F, 0x5A, 
   0x68, 0x64, 0x5E, 0x67, 0x64, 0x5D, 0x68, 0x65, 0x61, 0x6A, 0x65, 0x62, 0x70, 0x68, 0x64, 0x76, 
   0x6F, 0x69, 0x7B, 0x78, 0x73, 0x58, 0x57, 0x56, 0x1B, 0x1A, 0x1C, 0x10, 0x12, 0x0D, 0x1D, 0x2B, 
   0x29, 0x62, 0x75, 0x7E, 0x75, 0x82, 0x8B, 0x7E, 0x88, 0x8D, 0x79, 0x81, 0x84, 0x78, 0x7E, 0x83, 
   0x6E, 0x7B, 0x7E, 0x6D, 0x7B, 0x7E, 0x6E, 0x7C, 0x81, 0x71, 0x7B, 0x80, 0x7D, 0x84, 0x85, 0x94, 
   0x9B, 0x9A, 0x99, 0xA4, 0xAA, 0x94, 0x9D, 0xA6, 0x9A, 0xA1, 0xAD, 0x96, 0x9E, 0xAD, 0x9E, 0xA8, 
   0xB5, 0x9D, 0xA8, 0xB0, 0x9B, 0xA4, 0xAA, 0x9D, 0xA5, 0xA9, 0x9C, 0xA3, 0xA6, 0x9B, 0xA2, 0xA2, 
   0x9E, 0xA4, 0xA5, 0xA3, 0xAB, 0xAC, 0xA9, 0xB2, 0xB5, 0xAB, 0xB4, 0xBA, 0x97, 0xA0, 0xA7, 0x67, 
   0x72, 0x77, 0x37, 0x41, 0x42, 0x3C, 0x3F, 0x3F, 0x4C, 0x4A, 0x4A, 0x56, 0x54, 0x53, 0x5F, 0x5E, 
   0x5B, 0x5F, 0x5E, 0x59, 0x5A, 0x58, 0x57, 0x4F, 0x4E, 0x53, 0x3F, 0x45, 0x48, 0x51, 0x58, 0x5B, 
   0x77, 0x7C, 0x7D, 0x98, 0x9F, 0x9E, 0x8B, 0x8F, 0x8E, 0x77, 0x76, 0x75, 0x77, 0x76, 0x75, 0x82, 
   0x83, 0x7F, 0x85, 0x86, 0x80, 0x8B, 0x8A, 0x82, 0x89, 0x85, 0x85, 0x7C, 0x7B, 0x7C, 0x7D, 0x7C, 
   0x7B, 0x80, 0x80, 0x80, 0x84, 0x84, 0x85, 0x8A, 0x86, 0x86, 0x8B, 0x89, 0x86, 0x8A, 0x8B, 0x89, 
   0x86, 0x85, 0x87, 0x83, 0x80, 0x82, 0x7F, 0x7B, 0x7D, 0x81, 0x81, 0x7E, 0x8B, 0x89, 0x89, 0x8D, 
   0x82, 0x8D, 0x5E, 0x55, 0x5F, 0x5A, 0x55, 0x5E, 0x62, 0x5F, 0x68, 0x67, 0x6B, 0x6C, 0x71, 0x74, 
   0x74, 0x96, 0x96, 0x98, 0xAF, 0xAE, 0xB2, 0xA8, 0xA5, 0xB3, 0x93, 0x96, 0xA5, 0x96, 0x95, 0xA7, 
   0x7D, 0x7B, 0x92, 0x6E, 0x73, 0x90, 0x6D, 0x76, 0x96, 0x79, 0x7F, 0xA0, 0x81, 0x8A, 0xA9, 0x78, 
   0x78, 0x96, 0x2F, 0x24, 0x36, 0x33, 0x3A, 0x37, 0x7F, 0x8D, 0x95, 0x85, 0x95, 0xAB, 0x92, 0xA6, 
   0xBD, 0xBB, 0xCA, 0xD6, 0xCE, 0xD4, 0xD8, 0xDD, 0xDD, 0xE4, 0xC9, 0xC4, 0xD6, 0xA9, 0xA2, 0xBC, 
   0x97, 0x96, 0xA9, 0x9F, 0x9A, 0xA4, 0x40, 0x42, 0x45, 0x34, 0x33, 0x3B, 0x36, 0x37, 0x3E, 0x43, 
   0x47, 0x4D, 0x4A, 0x51, 0x56, 0x52, 0x56, 0x5B, 0x56, 0x56, 0x58, 0x60, 0x5C, 0x5E, 0x69, 0x65, 
   0x6B, 0x6A, 0x6A, 0x6D, 0x6A, 0x70, 0x6E, 0x69, 0x70, 0x6C, 0x57, 0x5E, 0x60, 0x52, 0x5D, 0x69, 
   0x55, 0x5F, 0x6D, 0x34, 0x3B, 0x40, 0x12, 0x12, 0x11, 0x29, 0x2C, 0x2C, 0x50, 0x56, 0x5B, 0x71, 
   0x75, 0x7A, 0x70, 0x73, 0x72, 0x52, 0x52, 0x50, 0x46, 0x45, 0x4A, 0x3E, 0x47, 0x4B, 0x70, 0x7A, 
   0x7D, 0x65, 0x6F, 0x77, 0x74, 0x81, 0x87, 0x89, 0x96, 0x9F, 0x91, 0x9B, 0xA4, 0x98, 0x9D, 0xA3, 
   0x99, 0x9E, 0xA7, 0x91, 0x9A, 0x9C, 0x96, 0x9F, 0xA3, 0x9D, 0xA5, 0xA8, 0xA2, 0xA7, 0xB0, 0xA2, 
   0xA8, 0xB7, 0x9E, 0xA7, 0xB2, 0x9B, 0xA3, 0xAE, 0x96, 0x9C, 0xA4, 0x90, 0x96, 0x9E, 0x8D, 0x94, 
   0x9E, 0x94, 0x9E, 0xAA, 0x91, 0x9C, 0xA9, 0x89, 0x95, 0x9F, 0x82, 0x8D, 0x95, 0x62, 0x68, 0x71, 
   0x59, 0x5C, 0x66, 0x98, 0x9A, 0xA5, 0x91, 0x93, 0x9E, 0x8C, 0x8B, 0x97, 0x8F, 0x8E, 0x97, 0x91, 
   0x92, 0x9A, 0x94, 0x91, 0x97, 0x8F, 0x8C, 0x91, 0x7F, 0x7D, 0x85, 0x6C, 0x6C, 0x77, 0x70, 0x78, 
   0x84, 0x7B, 0x8B, 0x94, 0x82, 0x8B, 0x8C, 0x82, 0x7F, 0x7E, 0x52, 0x4F, 0x4E, 0x40, 0x46, 0x43, 
   0x67, 0x6E, 0x6C, 0x92, 0x96, 0x94, 0x98, 0x97, 0x9D, 0x95, 0x91, 0x9B, 0x97, 0x93, 0x9E, 0x99, 
   0x95, 0x9E, 0x97, 0x95, 0x9D, 0x95, 0x95, 0x9B, 0x94, 0x94, 0x9B, 0x96, 0x94, 0x9B, 0x93, 0x92, 
   0x9C, 0x90, 0x90, 0x98, 0x92, 0x8E, 0x96, 0x94, 0x8D, 0x95, 0x98, 0x93, 0x9C, 0x9A, 0x97, 0xA1, 
   0x96, 0x95, 0x9D, 0x96, 0x96, 0x9C, 0x99, 0x95, 0x9A, 0x96, 0x93, 0x97, 0x98, 0x98, 0x9E, 0x94, 
   0x97, 0x9E, 0x90, 0x92, 0x98, 0x91, 0x92, 0x96, 0x98, 0x94, 0x99, 0x9B, 0x96, 0x9D, 0x98, 0x96, 
   0x9D, 0x96, 0x95, 0x9E, 0x95, 0x94, 0x9E, 0x93, 0x94, 0x9D, 0x94, 0x96, 0x9E, 0x94, 0x97, 0x9D, 
   0x92, 0x94, 0x9A, 0x92, 0x92, 0x9A, 0x95, 0x92, 0x9C, 0x9B, 0x96, 0xA2, 0x99, 0x97, 0xA2, 0x9E, 
   0x9E, 0xA1, 0xA2, 0xA1, 0xA5, 0x9F, 0x9F, 0xA6, 0xA3, 0xA3, 0xAC, 0xA5, 0xA1, 0xAC, 0x76, 0x70, 
   0x7A, 0x4B, 0x44, 0x4F, 0x39, 0x36, 0x3E, 0x38, 0x39, 0x3E, 0x37, 0x3C, 0x3D, 0x38, 0x3F, 0x3F, 
   0x4D, 0x4B, 0x4B, 0x2E, 0x2F, 0x2F, 0x20, 0x23, 0x24, 0x1B, 0x20, 0x1F, 0x1A, 0x22, 0x20, 0x22, 
   0x29, 0x2C, 0x29, 0x30, 0x3A, 0x60, 0x68, 0x76, 0x71, 0x75, 0x8E, 0x6C, 0x72, 0x90, 0x72, 0x79, 
   0x97, 0x79, 0x80, 0x9F, 0x78, 0x80, 0xA0, 0x79, 0x80, 0x9D, 0x7F, 0x84, 0x9B, 0x86, 0x87, 0x98, 
   0x80, 0x82, 0x95, 0x7A, 0x7B, 0x97, 0x78, 0x7A, 0x94, 0x77, 0x7E, 0x8D, 0x7A, 0x7F, 0x86, 0x71, 
   0x72, 0x77, 0x6B, 0x6C, 0x76, 0x76, 0x78, 0x7F, 0x81, 0x83, 0x88, 0x82, 0x83, 0x8B, 0x7C, 0x7F, 
   0x84, 0x77, 0x79, 0x7A, 0x75, 0x73, 0x77, 0x6C, 0x67, 0x6E, 0x3D, 0x3E, 0x40, 0x25, 0x2C, 0x2C, 
   0x27, 0x2D, 0x2D, 0x27, 0x29, 0x2A, 0x2E, 0x2D, 0x2D, 0x33, 0x33, 0x31, 0x3B, 0x3C, 0x37, 0x3C, 
   0x41, 0x41, 0x43, 0x46, 0x48, 0x46, 0x43, 0x43, 0x49, 0x45, 0x42, 0x46, 0x47, 0x42, 0x49, 0x4B, 
   0x48, 0x4E, 0x4E, 0x4D, 0x51, 0x52, 0x4E, 0x54, 0x55, 0x51, 0x53, 0x53, 0x51, 0x59, 0x59, 0x57, 
   0x60, 0x61, 0x5D, 0x5E, 0x61, 0x5A, 0x61, 0x62, 0x5C, 0x66, 0x62, 0x5F, 0x6E, 0x6A, 0x65, 0x74, 
   0x72, 0x6B, 0x6F, 0x6E, 0x6A, 0x46, 0x48, 0x48, 0x18, 0x17, 0x17, 0x15, 0x14, 0x0E, 0x2C, 0x36, 
   0x32, 0x66, 0x77, 0x7E, 0x6E, 0x7A, 0x7F, 0x77, 0x7F, 0x81, 0x78, 0x7D, 0x7E, 0x77, 0x7A, 0x80, 
   0x71, 0x78, 0x7E, 0x6F, 0x78, 0x7C, 0x71, 0x7C, 0x81, 0x74, 0x7E, 0x86, 0x6D, 0x73, 0x7C, 0x7B, 
   0x83, 0x83, 0x8B, 0x9B, 0xA1, 0x9D, 0xA7, 0xB1, 0x9E, 0xA7, 0xB3, 0x96, 0xA1, 0xAD, 0x98, 0xA2, 
   0xAB, 0x96, 0x9E, 0xA4, 0x9C, 0xA5, 0xA9, 0x9D, 0xA5, 0xB1, 0x9C, 0xA2, 0xAD, 0x9B, 0xA1, 0xA8, 
   0x9C, 0xA1, 0xA5, 0x8B, 0x90, 0x93, 0x7E, 0x84, 0x85, 0x74, 0x79, 0x7A, 0x64, 0x64, 0x68, 0x42, 
   0x47, 0x48, 0x45, 0x47, 0x48, 0x54, 0x52, 0x54, 0x5B, 0x57, 0x5A, 0x5B, 0x5C, 0x5D, 0x5B, 0x60, 
   0x5E, 0x57, 0x58, 0x55, 0x4D, 0x4E, 0x4D, 0x48, 0x4B, 0x4F, 0x46, 0x49, 0x4A, 0x6F, 0x75, 0x74, 
   0x84, 0x88, 0x84, 0x8E, 0x94, 0x92, 0x89, 0x8C, 0x8C, 0x85, 0x7F, 0x7F, 0x84, 0x7D, 0x7C, 0x7F, 
   0x7D, 0x7A, 0x7D, 0x7D, 0x79, 0x81, 0x7F, 0x7A, 0x81, 0x7F, 0x83, 0x81, 0x83, 0x85, 0x87, 0x89, 
   0x87, 0x8C, 0x8E, 0x8D, 0x8B, 0x8C, 0x8D, 0x8A, 0x86, 0x89, 0x88, 0x84, 0x86, 0x86, 0x85, 0x85, 
   0x86, 0x83, 0x86, 0x86, 0x81, 0x85, 0x86, 0x80, 0x84, 0x89, 0x87, 0x87, 0x9A, 0x97, 0x99, 0x7E, 
   0x71, 0x7F, 0x51, 0x4B, 0x54, 0x5B, 0x59, 0x64, 0x60, 0x5F, 0x6A, 0x64, 0x69, 0x6F, 0x6F, 0x74, 
   0x77, 0xA1, 0x9F, 0xA5, 0xA6, 0xA5, 0xB0, 0x83, 0x85, 0x9B, 0x70, 0x79, 0x92, 0x74, 0x7F, 0x96, 
   0x6E, 0x79, 0x8F, 0x6C, 0x7A, 0x96, 0x72, 0x79, 0x9A, 0x7D, 0x83, 0xA3, 0x85, 0x8E, 0xAD, 0x69, 
   0x66, 0x80, 0x25, 0x19, 0x25, 0x22, 0x26, 0x22, 0x66, 0x73, 0x71, 0x80, 0x91, 0x99, 0x81, 0x96, 
   0xAA, 0xAD, 0xBF, 0xCA, 0xC8, 0xCE, 0xD1, 0xCA, 0xC8, 0xCF, 0xCB, 0xC4, 0xCE, 0xBB, 0xAF, 0xBD, 
   0xA2, 0x98, 0xA6, 0x9D, 0x96, 0xA3, 0x32, 0x35, 0x39, 0x2D, 0x31, 0x36, 0x31, 0x32, 0x3C, 0x42, 
   0x43, 0x4A, 0x44, 0x4B, 0x4D, 0x4C, 0x50, 0x52, 0x56, 0x58, 0x59, 0x61, 0x5F, 0x61, 0x6C, 0x6A, 
   0x6E, 0x6B, 0x68, 0x6D, 0x69, 0x6A, 0x6D, 0x6D, 0x6E, 0x70, 0x61, 0x61, 0x63, 0x5B, 0x64, 0x69, 
   0x69, 0x73, 0x7B, 0x3F, 0x43, 0x47, 0x18, 0x1B, 0x16, 0x37, 0x3D, 0x3B, 0x5D, 0x63, 0x69, 0x6D, 
   0x6F, 0x76, 0x5D, 0x5C, 0x5C, 0x4B, 0x48, 0x47, 0x3D, 0x3B, 0x40, 0x3F, 0x4B, 0x4E, 0x60, 0x6D, 
   0x6E, 0x4A, 0x55, 0x5C, 0x45, 0x52, 0x59, 0x56, 0x66, 0x70, 0x6A, 0x7B, 0x81, 0x76, 0x80, 0x84, 
   0x79, 0x82, 0x8B, 0x77, 0x84, 0x89, 0x81, 0x8E, 0x93, 0x98, 0xA3, 0xA7, 0xA1, 0xA9, 0xB0, 0xA1, 
   0xAA, 0xB6, 0xA0, 0xAC, 0xB7, 0x9B, 0xA8, 0xB4, 0x95, 0x9F, 0xAA, 0x90, 0x97, 0xA2, 0x91, 0x96, 
   0xA1, 0x92, 0x99, 0xA5, 0x8B, 0x93, 0xA2, 0x82, 0x8C, 0x97, 0x77, 0x81, 0x88, 0x5D, 0x65, 0x6D, 
   0x72, 0x78, 0x80, 0x97, 0x9C, 0xA5, 0x93, 0x97, 0xA2, 0x91, 0x93, 0x9F, 0x8F, 0x90, 0x9A, 0x8F, 
   0x8E, 0x97, 0x8F, 0x8C, 0x97, 0x8E, 0x8C, 0x96, 0x86, 0x84, 0x8D, 0x70, 0x72, 0x7B, 0x70, 0x79, 
   0x81, 0x7C, 0x8C, 0x96, 0x81, 0x8B, 0x8B, 0x89, 0x87, 0x83, 0x59, 0x56, 0x54, 0x35, 0x39, 0x38, 
   0x52, 0x56, 0x58, 0x7E, 0x84, 0x85, 0x99, 0x95, 0x9D, 0x92, 0x8C, 0x99, 0x95, 0x8F, 0x9C, 0x9B, 
   0x96, 0xA0, 0x9B, 0x98, 0x9F, 0x99, 0x96, 0x9A, 0x9F, 0x9C, 0xA1, 0x9A, 0x96, 0x9E, 0x91, 0x8F, 
   0x99, 0x93, 0x92, 0x9A, 0x95, 0x8F, 0x98, 0x8F, 0x89, 0x90, 0x96, 0x91, 0x99, 0x94, 0x91, 0x9A, 
   0x93, 0x91, 0x98, 0x93, 0x91, 0x9A, 0x95, 0x90, 0x9A, 0x8E, 0x89, 0x93, 0x94, 0x94, 0x9C, 0x92, 
   0x93, 0x9A, 0x8F, 0x91, 0x97, 0x90, 0x8F, 0x96, 0x97, 0x92, 0x99, 0x9D, 0x96, 0x9C, 0x9C, 0x97, 
   0x9D, 0x9B, 0x97, 0x9F, 0x98, 0x95, 0x9F, 0x92, 0x93, 0x9C, 0x95, 0x97, 0xA0, 0x95, 0x96, 0x9F, 
   0x98, 0x96, 0x9F, 0x95, 0x92, 0x9B, 0x97, 0x92, 0x9B, 0x99, 0x93, 0x9D, 0x93, 0x8F, 0x98, 0x97, 
   0x97, 0x99, 0x9A, 0x9D, 0x9B, 0x97, 0x9B, 0x9C, 0x9B, 0x9D, 0xA1, 0xA3, 0xA2, 0xA7, 0xA0, 0x9C, 
   0xA6, 0x87, 0x82, 0x8F, 0x6E, 0x65, 0x72, 0x5D, 0x52, 0x5B, 0x45, 0x40, 0x46, 0x30, 0x30, 0x34, 
   0x32, 0x2F, 0x33, 0x2D, 0x2C, 0x30, 0x1F, 0x22, 0x28, 0x19, 0x1C, 0x1F, 0x17, 0x1D, 0x1F, 0x22, 
   0x29, 0x31, 0x2B, 0x33, 0x3F, 0x62, 0x6C, 0x7D, 0x68, 0x72, 0x8B, 0x6B, 0x71, 0x8E, 0x70, 0x79, 
   0x98, 0x79, 0x82, 0x9E, 0x7E, 0x84, 0x9D, 0x82, 0x84, 0x96, 0x8D, 0x8C, 0x93, 0x92, 0x8C, 0x92, 
   0x86, 0x83, 0x93, 0x81, 0x7F, 0x9A, 0x7D, 0x7A, 0x96, 0x76, 0x7A, 0x8B, 0x75, 0x7B, 0x81, 0x7B, 
   0x7D, 0x80, 0x7D, 0x78, 0x80, 0x7A, 0x78, 0x80, 0x7C, 0x83, 0x88, 0x76, 0x7D, 0x81, 0x77, 0x7A, 
   0x7D, 0x79, 0x78, 0x7A, 0x6D, 0x69, 0x6D, 0x3D, 0x37, 0x3D, 0x21, 0x23, 0x24, 0x27, 0x29, 0x28, 
   0x2C, 0x29, 0x29, 0x2D, 0x29, 0x2A, 0x31, 0x2D, 0x2D, 0x39, 0x34, 0x33, 0x3C, 0x39, 0x38, 0x40, 
   0x42, 0x43, 0x42, 0x42, 0x46, 0x41, 0x3A, 0x3F, 0x46, 0x3D, 0x3F, 0x40, 0x38, 0x37, 0x3F, 0x3B, 
   0x38, 0x44, 0x45, 0x41, 0x48, 0x4A, 0x44, 0x4C, 0x4D, 0x48, 0x4D, 0x4E, 0x4C, 0x49, 0x4B, 0x4A, 
   0x49, 0x4E, 0x4A, 0x4A, 0x51, 0x49, 0x49, 0x4F, 0x44, 0x4D, 0x4E, 0x46, 0x54, 0x56, 0x4D, 0x46, 
   0x47, 0x3E, 0x34, 0x30, 0x2B, 0x20, 0x1D, 0x1B, 0x17, 0x15, 0x12, 0x18, 0x17, 0x13, 0x1A, 0x22, 
   0x20, 0x5B, 0x6B, 0x6D, 0x66, 0x73, 0x76, 0x70, 0x78, 0x79, 0x74, 0x79, 0x7A, 0x70, 0x77, 0x7B, 
   0x6E, 0x77, 0x7B, 0x70, 0x78, 0x78, 0x74, 0x80, 0x80, 0x78, 0x85, 0x8E, 0x6A, 0x72, 0x7E, 0x66, 
   0x70, 0x71, 0x84, 0x95, 0x99, 0x90, 0x9D, 0xA4, 0x97, 0xA3, 0xAA, 0x98, 0xA5, 0xAC, 0x93, 0x9F, 
   0xA5, 0x8E, 0x98, 0x9D, 0x9A, 0xA4, 0xA8, 0x9A, 0xA6, 0xAF, 0xA2, 0xAC, 0xB5, 0x9B, 0xA4, 0xAB, 
   0x89, 0x90, 0x96, 0x6C, 0x6F, 0x74, 0x56, 0x57, 0x5B, 0x4F, 0x4F, 0x52, 0x50, 0x4E, 0x50, 0x4E, 
   0x50, 0x4F, 0x52, 0x54, 0x52, 0x56, 0x57, 0x56, 0x60, 0x5F, 0x5F, 0x60, 0x61, 0x60, 0x55, 0x59, 
   0x57, 0x4E, 0x51, 0x50, 0x4B, 0x4C, 0x4E, 0x43, 0x45, 0x4A, 0x54, 0x59, 0x5B, 0x87, 0x8D, 0x8D, 
   0x96, 0x9B, 0x99, 0x9D, 0xA0, 0xA0, 0x9A, 0x9C, 0x9E, 0x90, 0x90, 0x8F, 0x8C, 0x87, 0x85, 0x86, 
   0x7E, 0x7C, 0x7F, 0x7A, 0x79, 0x7D, 0x7D, 0x7C, 0x80, 0x7E, 0x7F, 0x82, 0x83, 0x85, 0x85, 0x86, 
   0x86, 0x84, 0x86, 0x86, 0x84, 0x87, 0x87, 0x85, 0x85, 0x86, 0x83, 0x83, 0x85, 0x84, 0x84, 0x84, 
   0x88, 0x87, 0x89, 0x85, 0x82, 0x83, 0x83, 0x7E, 0x81, 0x89, 0x88, 0x8A, 0xA9, 0xA6, 0xA9, 0x79, 
   0x70, 0x7D, 0x46, 0x42, 0x4D, 0x55, 0x52, 0x5F, 0x61, 0x5E, 0x6A, 0x67, 0x6D, 0x75, 0x8A, 0x8D, 
   0x97, 0x9C, 0x99, 0xA8, 0x80, 0x85, 0x99, 0x73, 0x7C, 0x98, 0x6C, 0x77, 0x94, 0x6B, 0x77, 0x8F, 
   0x6C, 0x79, 0x8E, 0x6E, 0x79, 0x95, 0x74, 0x7C, 0x9B, 0x7E, 0x85, 0xA2, 0x80, 0x85, 0xA0, 0x4E, 
   0x47, 0x5E, 0x27, 0x1B, 0x26, 0x10, 0x11, 0x12, 0x36, 0x40, 0x3C, 0x70, 0x84, 0x81, 0x83, 0x93, 
   0xA2, 0x98, 0xA4, 0xB3, 0xCD, 0xD3, 0xD9, 0xC9, 0xC8, 0xCF, 0xC8, 0xC1, 0xC8, 0xC3, 0xB7, 0xBF, 
   0xAD, 0xA0, 0xAE, 0x97, 0x92, 0xA3, 0x3A, 0x3E, 0x44, 0x3B, 0x3B, 0x3F, 0x37, 0x33, 0x3D, 0x43, 
   0x42, 0x48, 0x4A, 0x4C, 0x51, 0x4D, 0x4E, 0x57, 0x56, 0x59, 0x63, 0x68, 0x6A, 0x6E, 0x6B, 0x6B, 
   0x6E, 0x6D, 0x69, 0x6E, 0x6C, 0x6A, 0x72, 0x73, 0x6F, 0x77, 0x7F, 0x7C, 0x7E, 0x7A, 0x83, 0x7F, 
   0x79, 0x85, 0x84, 0x3A, 0x3E, 0x40, 0x1D, 0x22, 0x22, 0x3D, 0x47, 0x47, 0x57, 0x61, 0x63, 0x5B, 
   0x5F, 0x63, 0x4A, 0x47, 0x4B, 0x44, 0x42, 0x44, 0x32, 0x33, 0x38, 0x43, 0x49, 0x50, 0x63, 0x6D, 
   0x6D, 0x69, 0x72, 0x78, 0x6D, 0x75, 0x7F, 0x6B, 0x76, 0x84, 0x6A, 0x76, 0x83, 0x70, 0x78, 0x86, 
   0x73, 0x80, 0x8A, 0x7C, 0x8A, 0x95, 0x75, 0x82, 0x8D, 0x7D, 0x8A, 0x90, 0x94, 0x9F, 0xA4, 0xA5, 
   0xB2, 0xB8, 0xA5, 0xB2, 0xB9, 0x9F, 0xAD, 0xB5, 0x95, 0xA2, 0xAC, 0x92, 0x9B, 0xA4, 0x9A, 0xA0, 
   0xA8, 0x92, 0x99, 0xA1, 0x87, 0x93, 0x9F, 0x85, 0x8D, 0x9B, 0x70, 0x76, 0x82, 0x5E, 0x68, 0x72, 
   0x8B, 0x96, 0x9F, 0x99, 0x9F, 0xAA, 0x9A, 0x9F, 0xAA, 0x91, 0x96, 0x9F, 0x8C, 0x8E, 0x99, 0x89, 
   0x83, 0x90, 0x8B, 0x86, 0x90, 0x8F, 0x8C, 0x94, 0x90, 0x8A, 0x92, 0x76, 0x76, 0x7F, 0x6C, 0x75, 
   0x7D, 0x7C, 0x8E, 0x9B, 0x82, 0x91, 0x8F, 0x92, 0x93, 0x8C, 0x66, 0x65, 0x61, 0x33, 0x35, 0x35, 
   0x48, 0x47, 0x4E, 0x6E, 0x72, 0x78, 0x93, 0x91, 0x98, 0x9A, 0x96, 0xA1, 0x92, 0x8F, 0x9B, 0x96, 
   0x93, 0x9E, 0x99, 0x97, 0x9F, 0x95, 0x94, 0x9A, 0x97, 0x95, 0x9B, 0x99, 0x99, 0xA1, 0x95, 0x93, 
   0x9E, 0x9A, 0x98, 0xA0, 0x9E, 0x9A, 0xA4, 0x95, 0x93, 0x9A, 0x94, 0x92, 0x99, 0x92, 0x8E, 0x99, 
   0x96, 0x90, 0x9B, 0x98, 0x93, 0x9D, 0x9A, 0x94, 0x9F, 0x9D, 0x98, 0xA3, 0x9D, 0x9A, 0xA4, 0x8B, 
   0x88, 0x92, 0x91, 0x8D, 0x97, 0x91, 0x8D, 0x95, 0x94, 0x91, 0x97, 0x9E, 0x97, 0x9B, 0xA2, 0x98, 
   0x9E, 0x9F, 0x97, 0x9F, 0x9A, 0x97, 0x9F, 0x95, 0x96, 0x9F, 0x95, 0x96, 0x9E, 0x9A, 0x99, 0x9F, 
   0xA2, 0xA0, 0xA3, 0xA2, 0x9F, 0xA2, 0xA2, 0x9E, 0xA3, 0x9C, 0x97, 0x9E, 0x92, 0x8D, 0x94, 0x94, 
   0x95, 0x97, 0x96, 0x9C, 0x99, 0x96, 0x9A, 0x9B, 0x9A, 0x9B, 0x9D, 0x98, 0x99, 0x9A, 0x92, 0x93, 
   0x9B, 0x7E, 0x7B, 0x81, 0x71, 0x6D, 0x73, 0x83, 0x7B, 0x80, 0x74, 0x70, 0x76, 0x59, 0x54, 0x5B, 
   0x41, 0x3E, 0x48, 0x2D, 0x2A, 0x35, 0x1B, 0x1D, 0x24, 0x10, 0x0D, 0x14, 0x0E, 0x10, 0x16, 0x20, 
   0x24, 0x2F, 0x35, 0x3C, 0x46, 0x64, 0x71, 0x7E, 0x66, 0x72, 0x87, 0x6A, 0x6F, 0x89, 0x74, 0x7D, 
   0x9A, 0x83, 0x89, 0x9E, 0x88, 0x88, 0x93, 0x8A, 0x88, 0x8E, 0x90, 0x8D, 0x8C, 0x97, 0x91, 0x8E, 
   0x8E, 0x8A, 0x8E, 0x87, 0x85, 0x94, 0x85, 0x83, 0x97, 0x79, 0x7D, 0x8B, 0x7A, 0x7F, 0x86, 0x7E, 
   0x7F, 0x83, 0x7D, 0x7B, 0x7F, 0x83, 0x82, 0x85, 0x86, 0x86, 0x8A, 0x6F, 0x72, 0x74, 0x6F, 0x73, 
   0x75, 0x81, 0x80, 0x82, 0x61, 0x57, 0x5C, 0x18, 0x19, 0x1D, 0x1F, 0x1C, 0x21, 0x27, 0x22, 0x26, 
   0x2B, 0x28, 0x2A, 0x36, 0x33, 0x33, 0x3D, 0x36, 0x39, 0x3A, 0x30, 0x37, 0x38, 0x2D, 0x33, 0x36, 
   0x32, 0x36, 0x40, 0x3D, 0x41, 0x50, 0x4B, 0x50, 0x5C, 0x58, 0x5A, 0x54, 0x4F, 0x50, 0x3D, 0x36, 
   0x35, 0x3A, 0x36, 0x32, 0x42, 0x40, 0x39, 0x46, 0x45, 0x3D, 0x47, 0x47, 0x41, 0x43, 0x45, 0x3F, 
   0x40, 0x44, 0x3D, 0x42, 0x45, 0x3D, 0x4C, 0x4A, 0x43, 0x4B, 0x46, 0x43, 0x3A, 0x39, 0x36, 0x27, 
   0x28, 0x24, 0x1A, 0x17, 0x16, 0x16, 0x14, 0x15, 0x15, 0x16, 0x13, 0x18, 0x17, 0x16, 0x19, 0x23, 
   0x21, 0x62, 0x73, 0x71, 0x70, 0x7C, 0x7E, 0x73, 0x7C, 0x7D, 0x6F, 0x76, 0x79, 0x6D, 0x71, 0x76, 
   0x6D, 0x76, 0x77, 0x73, 0x7B, 0x76, 0x77, 0x7E, 0x7C, 0x7D, 0x80, 0x89, 0x79, 0x78, 0x85, 0x6B, 
   0x71, 0x75, 0x70, 0x7D, 0x7A, 0x7B, 0x89, 0x86, 0x8F, 0x9B, 0x9B, 0x97, 0xA4, 0xA7, 0x9C, 0xAD, 
   0xB2, 0xA0, 0xB0, 0xB8, 0x9C, 0xA7, 0xB0, 0x87, 0x91, 0x98, 0x77, 0x80, 0x87, 0x6B, 0x72, 0x79, 
   0x61, 0x64, 0x6B, 0x63, 0x61, 0x66, 0x6A, 0x61, 0x66, 0x57, 0x4F, 0x53, 0x53, 0x4F, 0x50, 0x54, 
   0x53, 0x4E, 0x58, 0x58, 0x52, 0x66, 0x69, 0x63, 0x62, 0x65, 0x62, 0x5B, 0x5D, 0x5B, 0x53, 0x56, 
   0x53, 0x4E, 0x53, 0x50, 0x48, 0x4D, 0x4D, 0x45, 0x48, 0x4C, 0x77, 0x82, 0x80, 0x8E, 0x94, 0x94, 
   0x8D, 0x91, 0x8F, 0x8B, 0x90, 0x8E, 0x8C, 0x91, 0x90, 0x8E, 0x90, 0x91, 0x8B, 0x8A, 0x8B, 0x84, 
   0x80, 0x81, 0x80, 0x7C, 0x7D, 0x82, 0x82, 0x81, 0x8B, 0x84, 0x87, 0x97, 0x92, 0x99, 0x8B, 0x87, 
   0x8F, 0x7C, 0x7C, 0x81, 0x7F, 0x83, 0x83, 0x84, 0x87, 0x86, 0x7C, 0x81, 0x80, 0x7D, 0x82, 0x80, 
   0x7E, 0x82, 0x81, 0x81, 0x83, 0x81, 0x84, 0x84, 0x85, 0x8A, 0x8C, 0x8F, 0x98, 0x99, 0x9C, 0x69, 
   0x63, 0x6E, 0x51, 0x4E, 0x5A, 0x66, 0x61, 0x6B, 0x73, 0x6E, 0x74, 0x83, 0x87, 0x8D, 0xA7, 0xA6, 
   0xB1, 0x8C, 0x88, 0x9D, 0x70, 0x78, 0x93, 0x69, 0x76, 0x95, 0x6B, 0x79, 0x94, 0x6A, 0x7A, 0x8D, 
   0x6C, 0x7C, 0x90, 0x6E, 0x7A, 0x99, 0x72, 0x7B, 0x9B, 0x76, 0x81, 0x9A, 0x76, 0x7B, 0x91, 0x56, 
   0x4F, 0x63, 0x40, 0x34, 0x44, 0x1C, 0x18, 0x21, 0x16, 0x1B, 0x1A, 0x4A, 0x5B, 0x54, 0x7A, 0x8A, 
   0x8E, 0x8A, 0x99, 0xA4, 0xC5, 0xCE, 0xD5, 0xCE, 0xD0, 0xD4, 0xC8, 0xC4, 0xC7, 0xC4, 0xBB, 0xBD, 
   0xB2, 0xA9, 0xAF, 0x8E, 0x8F, 0x99, 0x39, 0x3D, 0x40, 0x39, 0x36, 0x3B, 0x47, 0x40, 0x47, 0x4C, 
   0x49, 0x50, 0x55, 0x52, 0x57, 0x54, 0x53, 0x58, 0x56, 0x5C, 0x62, 0x62, 0x64, 0x6A, 0x62, 0x61, 
   0x65, 0x69, 0x67, 0x6C, 0x6F, 0x6D, 0x74, 0x6D, 0x6F, 0x71, 0x7C, 0x80, 0x7B, 0x9F, 0xA3, 0x9D, 
   0x97, 0x9C, 0x95, 0x3A, 0x40, 0x3F, 0x26, 0x2B, 0x33, 0x48, 0x4A, 0x4E, 0x69, 0x68, 0x6F, 0x6D, 
   0x66, 0x6A, 0x48, 0x44, 0x49, 0x34, 0x33, 0x3A, 0x2C, 0x2D, 0x36, 0x5F, 0x61, 0x6C, 0x84, 0x88, 
   0x8D, 0x84, 0x89, 0x8E, 0x83, 0x8B, 0x94, 0x7F, 0x88, 0x98, 0x7D, 0x86, 0x98, 0x7F, 0x8A, 0x98, 
   0x81, 0x8E, 0x9C, 0x81, 0x8C, 0x9A, 0x6A, 0x76, 0x81, 0x53, 0x61, 0x6D, 0x41, 0x52, 0x5B, 0x4F, 
   0x61, 0x62, 0x5B, 0x6B, 0x6D, 0x63, 0x75, 0x78, 0x6E, 0x7D, 0x81, 0x73, 0x83, 0x88, 0x74, 0x86, 
   0x8E, 0x73, 0x85, 0x8E, 0x6B, 0x77, 0x80, 0x6A, 0x73, 0x79, 0x60, 0x69, 0x6F, 0x7F, 0x82, 0x8D, 
   0x9A, 0x9B, 0xA6, 0x96, 0x9B, 0xA2, 0x96, 0x98, 0x9E, 0x93, 0x93, 0x9A, 0x91, 0x8F, 0x99, 0x8C, 
   0x8A, 0x92, 0x8C, 0x89, 0x8C, 0x8E, 0x8B, 0x8C, 0x8B, 0x88, 0x8D, 0x7B, 0x7B, 0x82, 0x70, 0x76, 
   0x7C, 0x79, 0x89, 0x90, 0x7C, 0x94, 0x8F, 0x88, 0x8C, 0x86, 0x6D, 0x6C, 0x6B, 0x39, 0x35, 0x38, 
   0x4B, 0x4A, 0x4F, 0x6A, 0x6A, 0x72, 0x89, 0x89, 0x8D, 0x99, 0x9B, 0xA2, 0x98, 0x9C, 0xA5, 0x95, 
   0x96, 0x9F, 0x96, 0x94, 0x9B, 0x95, 0x93, 0x9A, 0x96, 0x95, 0x9C, 0x97, 0x96, 0x9F, 0x92, 0x96, 
   0x9C, 0x97, 0x9B, 0x9F, 0xA2, 0xA0, 0xA6, 0xA6, 0xA1, 0xAA, 0x99, 0x94, 0xA1, 0x95, 0x91, 0x9F, 
   0x99, 0x92, 0x9C, 0x9A, 0x97, 0xA2, 0x97, 0x97, 0xA3, 0x9C, 0x9C, 0xA4, 0x93, 0x92, 0x98, 0x87, 
   0x86, 0x8E, 0x93, 0x91, 0x99, 0x8F, 0x8E, 0x96, 0x8F, 0x8F, 0x98, 0x9D, 0x98, 0xA1, 0x9F, 0x99, 
   0xA4, 0x99, 0x97, 0xA3, 0x98, 0x97, 0xA4, 0x98, 0x94, 0xA4, 0x93, 0x8E, 0x99, 0x93, 0x90, 0x98, 
   0x95, 0x95, 0x99, 0x96, 0x98, 0x9A, 0x9C, 0x9A, 0xA0, 0x99, 0x94, 0x9D, 0x96, 0x92, 0x99, 0x93, 
   0x91, 0x95, 0x94, 0x95, 0x97, 0x98, 0x98, 0x9C, 0x96, 0x96, 0x9C, 0x8D, 0x91, 0x93, 0x7F, 0x84, 
   0x83, 0x75, 0x76, 0x7A, 0x92, 0x92, 0x91, 0xAD, 0xA8, 0xA9, 0xA4, 0xA0, 0xA7, 0x8A, 0x87, 0x95, 
   0x71, 0x6F, 0x7E, 0x64, 0x64, 0x72, 0x56, 0x52, 0x62, 0x41, 0x3C, 0x4A, 0x39, 0x35, 0x40, 0x35, 
   0x34, 0x3E, 0x3F, 0x47, 0x50, 0x5E, 0x64, 0x71, 0x5F, 0x66, 0x78, 0x67, 0x6D, 0x85, 0x72, 0x79, 
   0x90, 0x81, 0x81, 0x8B, 0x89, 0x88, 0x87, 0x8C, 0x8D, 0x8D, 0x93, 0x90, 0x90, 0x94, 0x8C, 0x87, 
   0x8B, 0x88, 0x81, 0x88, 0x87, 0x82, 0x8A, 0x89, 0x8B, 0x7E, 0x82, 0x88, 0x7E, 0x80, 0x84, 0x82, 
   0x81, 0x7E, 0x83, 0x81, 0x7E, 0x8A, 0x87, 0x86, 0x91, 0x90, 0x90, 0x76, 0x75, 0x77, 0x71, 0x76, 
   0x77, 0x82, 0x88, 0x87, 0x76, 0x6F, 0x70, 0x68, 0x67, 0x66, 0x75, 0x71, 0x72, 0x5F, 0x55, 0x5B, 
   0x56, 0x4A, 0x51, 0x5B, 0x53, 0x55, 0x6B, 0x62, 0x63, 0x6E, 0x61, 0x65, 0x62, 0x5B, 0x5B, 0x6A, 
   0x65, 0x66, 0x76, 0x6F, 0x6D, 0x78, 0x6E, 0x69, 0x72, 0x6A, 0x65, 0x86, 0x7D, 0x78, 0x7B, 0x70, 
   0x6B, 0x5E, 0x53, 0x52, 0x46, 0x3C, 0x38, 0x3D, 0x3B, 0x34, 0x43, 0x42, 0x3D, 0x4E, 0x4B, 0x46, 
   0x4C, 0x4B, 0x46, 0x49, 0x49, 0x44, 0x4B, 0x4B, 0x49, 0x50, 0x4A, 0x4C, 0x49, 0x3F, 0x40, 0x25, 
   0x22, 0x1D, 0x19, 0x1D, 0x1A, 0x15, 0x1A, 0x17, 0x1A, 0x19, 0x18, 0x18, 0x14, 0x11, 0x22, 0x26, 
   0x20, 0x4B, 0x58, 0x55, 0x4C, 0x59, 0x59, 0x52, 0x5D, 0x5D, 0x57, 0x61, 0x65, 0x5E, 0x68, 0x6B, 
   0x67, 0x73, 0x71, 0x73, 0x7A, 0x78, 0x73, 0x77, 0x76, 0x79, 0x7D, 0x7D, 0x7D, 0x7D, 0x83, 0x6B, 
   0x6E, 0x72, 0x60, 0x65, 0x66, 0x59, 0x60, 0x5E, 0x54, 0x5B, 0x59, 0x54, 0x5E, 0x5B, 0x5A, 0x68, 
   0x64, 0x65, 0x72, 0x6F, 0x69, 0x73, 0x72, 0x60, 0x66, 0x6B, 0x5E, 0x60, 0x66, 0x64, 0x63, 0x69, 
   0x67, 0x68, 0x6E, 0x70, 0x75, 0x78, 0x67, 0x67, 0x69, 0x59, 0x55, 0x55, 0x58, 0x55, 0x54, 0x57, 
   0x57, 0x50, 0x5E, 0x5F, 0x56, 0x60, 0x60, 0x5B, 0x56, 0x56, 0x53, 0x51, 0x50, 0x54, 0x50, 0x53, 
   0x53, 0x52, 0x52, 0x53, 0x48, 0x48, 0x4A, 0x50, 0x5A, 0x58, 0x8E, 0x9D, 0x99, 0x8F, 0x95, 0x95, 
   0x8A, 0x86, 0x86, 0x7E, 0x79, 0x76, 0x7F, 0x7D, 0x7B, 0x87, 0x81, 0x81, 0x87, 0x83, 0x86, 0x8B, 
   0x8F, 0x91, 0x8E, 0x8F, 0x90, 0x8D, 0x8C, 0x8B, 0x8B, 0x89, 0x8E, 0x8F, 0x8D, 0x8F, 0x93, 0x94, 
   0x95, 0x95, 0x9B, 0x9F, 0x9A, 0x9E, 0xA1, 0x91, 0x91, 0x93, 0x8B, 0x89, 0x8B, 0x88, 0x8A, 0x87, 
   0x84, 0x83, 0x7F, 0x85, 0x85, 0x83, 0x8A, 0x88, 0x88, 0x91, 0x8E, 0x94, 0x8C, 0x83, 0x8D, 0x57, 
   0x4E, 0x53, 0x5D, 0x57, 0x61, 0x64, 0x65, 0x6B, 0x76, 0x7B, 0x81, 0xA0, 0xA2, 0xAC, 0x99, 0x99, 
   0xAB, 0x77, 0x79, 0x96, 0x6F, 0x76, 0x98, 0x6D, 0x77, 0x95, 0x6E, 0x7A, 0x90, 0x70, 0x7D, 0x94, 
   0x73, 0x7F, 0x98, 0x75, 0x7C, 0x9B, 0x71, 0x7C, 0x98, 0x6C, 0x7D, 0x95, 0x6C, 0x77, 0x90, 0x68, 
   0x69, 0x82, 0x58, 0x57, 0x6C, 0x4B, 0x4D, 0x59, 0x4A, 0x4A, 0x53, 0x5C, 0x5C, 0x64, 0x68, 0x74, 
   0x7E, 0x7B, 0x8F, 0x9F, 0xAD, 0xBC, 0xC9, 0xC7, 0xCD, 0xD3, 0xC9, 0xC5, 0xCA, 0xCC, 0xBF, 0xC4, 
   0xB9, 0xAA, 0xB2, 0x93, 0x8D, 0x96, 0x3B, 0x42, 0x44, 0x3D, 0x40, 0x47, 0x48, 0x47, 0x4E, 0x4F, 
   0x4D, 0x55, 0x59, 0x55, 0x5F, 0x5D, 0x5C, 0x64, 0x65, 0x6B, 0x6D, 0x63, 0x63, 0x65, 0x63, 0x61, 
   0x65, 0x69, 0x67, 0x6D, 0x6D, 0x6A, 0x6F, 0x69, 0x67, 0x67, 0x78, 0x7A, 0x73, 0x90, 0x94, 0x8D, 
   0x4D, 0x54, 0x52, 0x1E, 0x26, 0x2C, 0x31, 0x31, 0x3C, 0x5B, 0x59, 0x5E, 0x69, 0x66, 0x6C, 0x6D, 
   0x64, 0x63, 0x50, 0x4B, 0x4B, 0x33, 0x33, 0x38, 0x67, 0x6C, 0x75, 0x7E, 0x85, 0x91, 0x74, 0x7B, 
   0x82, 0x72, 0x7A, 0x80, 0x7E, 0x88, 0x92, 0x86, 0x91, 0xA1, 0x88, 0x93, 0xA4, 0x8C, 0x97, 0xA7, 
   0x8A, 0x97, 0xA5, 0x7B, 0x87, 0x96, 0x6B, 0x7A, 0x88, 0x68, 0x79, 0x88, 0x44, 0x57, 0x62, 0x0B, 
   0x1C, 0x1C, 0x1D, 0x29, 0x28, 0x29, 0x30, 0x2E, 0x2D, 0x37, 0x33, 0x2C, 0x3B, 0x37, 0x2D, 0x3E, 
   0x3E, 0x2E, 0x3E, 0x3E, 0x33, 0x3D, 0x3B, 0x30, 0x39, 0x37, 0x65, 0x6A, 0x6D, 0x98, 0x94, 0x9C, 
   0x99, 0x96, 0x9E, 0x94, 0x96, 0x9B, 0x90, 0x8F, 0x93, 0x8C, 0x8D, 0x92, 0x8D, 0x8E, 0x99, 0x93, 
   0x90, 0x9D, 0x95, 0x90, 0x9A, 0x90, 0x8C, 0x94, 0x8D, 0x8B, 0x92, 0x87, 0x87, 0x8C, 0x75, 0x78, 
   0x7A, 0x68, 0x6C, 0x70, 0x89, 0x95, 0x94, 0x75, 0x74, 0x74, 0x69, 0x66, 0x67, 0x3F, 0x3C, 0x3F, 
   0x55, 0x55, 0x5A, 0x76, 0x76, 0x7D, 0x8D, 0x8C, 0x93, 0xA4, 0xA6, 0xAD, 0xA8, 0xAC, 0xB3, 0x9D, 
   0x9E, 0xA7, 0x94, 0x92, 0x9C, 0x93, 0x91, 0x99, 0x92, 0x92, 0x98, 0x8F, 0x92, 0x99, 0x91, 0x92, 
   0x9A, 0x95, 0x95, 0x9C, 0x96, 0x96, 0x9E, 0x97, 0x98, 0x9F, 0x97, 0x94, 0x9D, 0x93, 0x8F, 0x97, 
   0x90, 0x8E, 0x93, 0x94, 0x94, 0x9C, 0x96, 0x96, 0x9F, 0x91, 0x91, 0x9A, 0x85, 0x83, 0x8B, 0x95, 
   0x93, 0x98, 0x98, 0x96, 0x9F, 0x86, 0x88, 0x92, 0x8A, 0x8C, 0x94, 0x94, 0x92, 0x9A, 0x9C, 0x98, 
   0xA0, 0x9B, 0x96, 0xA2, 0x97, 0x94, 0xA3, 0x91, 0x8F, 0xA0, 0x90, 0x8E, 0x9C, 0x8E, 0x8A, 0x95, 
   0x90, 0x8D, 0x95, 0x94, 0x92, 0x97, 0x94, 0x94, 0x9C, 0x8E, 0x8F, 0x97, 0x8E, 0x90, 0x94, 0x90, 
   0x92, 0x96, 0x91, 0x92, 0x97, 0x95, 0x96, 0x9D, 0x92, 0x94, 0x9B, 0x7E, 0x81, 0x87, 0x75, 0x78, 
   0x7E, 0x9F, 0x9A, 0xA1, 0xA0, 0x9C, 0xA2, 0xA0, 0x9B, 0xA0, 0x9F, 0x9C, 0xA3, 0xA2, 0xA1, 0xAB, 
   0x99, 0x97, 0xA9, 0x89, 0x8B, 0xA2, 0x87, 0x8D, 0xA6, 0x84, 0x8A, 0x9E, 0x86, 0x8A, 0x98, 0x7E, 
   0x7C, 0x86, 0x62, 0x62, 0x6E, 0x59, 0x59, 0x6D, 0x60, 0x66, 0x7C, 0x69, 0x71, 0x88, 0x6D, 0x74, 
   0x8E, 0x76, 0x7B, 0x87, 0x88, 0x88, 0x86, 0x92, 0x90, 0x8C, 0x8F, 0x8F, 0x8B, 0x89, 0x89, 0x84, 
   0x81, 0x84, 0x7E, 0x74, 0x77, 0x72, 0x7A, 0x79, 0x7A, 0x88, 0x8C, 0x91, 0x7B, 0x7C, 0x81, 0x7F, 
   0x7D, 0x7C, 0x81, 0x7F, 0x7D, 0x81, 0x81, 0x7F, 0x89, 0x8A, 0x88, 0x7E, 0x7E, 0x7D, 0x71, 0x74, 
   0x72, 0x74, 0x75, 0x71, 0x71, 0x6A, 0x66, 0x70, 0x6B, 0x66, 0x88, 0x87, 0x82, 0x7F, 0x7C, 0x7A, 
   0x79, 0x72, 0x6F, 0x78, 0x74, 0x6C, 0x7C, 0x79, 0x6F, 0x8E, 0x85, 0x7D, 0x88, 0x86, 0x7D, 0x82, 
   0x80, 0x7A, 0x7C, 0x77, 0x6F, 0x77, 0x70, 0x67, 0x77, 0x70, 0x6A, 0x78, 0x71, 0x6B, 0x79, 0x72, 
   0x6A, 0x7E, 0x74, 0x6E, 0x74, 0x6E, 0x68, 0x69, 0x68, 0x63, 0x62, 0x5E, 0x5C, 0x66, 0x5F, 0x5E, 
   0x5F, 0x5B, 0x5B, 0x51, 0x50, 0x4E, 0x46, 0x48, 0x46, 0x5B, 0x5D, 0x5E, 0x5F, 0x54, 0x5A, 0x2F, 
   0x25, 0x27, 0x18, 0x17, 0x1A, 0x17, 0x16, 0x19, 0x19, 0x17, 0x1A, 0x1B, 0x1B, 0x19, 0x2E, 0x33, 
   0x2C, 0x48, 0x52, 0x50, 0x4D, 0x56, 0x55, 0x52, 0x57, 0x55, 0x54, 0x59, 0x59, 0x4E, 0x55, 0x56, 
   0x4B, 0x54, 0x52, 0x55, 0x59, 0x58, 0x58, 0x59, 0x5A, 0x5C, 0x5E, 0x5E, 0x64, 0x62, 0x67, 0x56, 
   0x57, 0x5B, 0x4E, 0x51, 0x58, 0x4B, 0x4D, 0x53, 0x4A, 0x49, 0x4D, 0x4D, 0x48, 0x4A, 0x51, 0x49, 
   0x4C, 0x55, 0x51, 0x57, 0x53, 0x54, 0x5A, 0x5A, 0x5B, 0x5F, 0x61, 0x65, 0x6B, 0x64, 0x6B, 0x70, 
   0x69, 0x72, 0x75, 0x66, 0x72, 0x72, 0x55, 0x5A, 0x58, 0x5E, 0x5B, 0x5B, 0x5B, 0x59, 0x58, 0x56, 
   0x58, 0x51, 0x53, 0x51, 0x49, 0x4E, 0x49, 0x45, 0x53, 0x4E, 0x4B, 0x55, 0x51, 0x51, 0x50, 0x4D, 
   0x4C, 0x49, 0x46, 0x47, 0x3D, 0x40, 0x40, 0x52, 0x60, 0x5B, 0x6D, 0x7E, 0x79, 0x7D, 0x87, 0x84, 
   0x9D, 0x9F, 0x9B, 0xA2, 0xA0, 0x9D, 0x8F, 0x8B, 0x87, 0x84, 0x7F, 0x7A, 0x82, 0x7F, 0x7C, 0x8C, 
   0x8D, 0x8D, 0x94, 0x95, 0x97, 0x90, 0x91, 0x8F, 0x8F, 0x91, 0x8D, 0x85, 0x89, 0x85, 0x88, 0x8B, 
   0x8A, 0x8F, 0x93, 0x93, 0x91, 0x96, 0x95, 0x91, 0x96, 0x94, 0x95, 0x97, 0x96, 0x94, 0x91, 0x8F, 
   0x92, 0x8B, 0x8B, 0x94, 0x8A, 0x8E, 0x8B, 0x87, 0x88, 0x9F, 0x9F, 0xA3, 0x87, 0x7D, 0x87, 0x4F, 
   0x47, 0x51, 0x60, 0x5D, 0x65, 0x6D, 0x72, 0x73, 0x91, 0x99, 0x9A, 0x98, 0x9C, 0xA7, 0x81, 0x81, 
   0x97, 0x7C, 0x7B, 0x99, 0x77, 0x79, 0x9A, 0x72, 0x78, 0x94, 0x6D, 0x78, 0x8F, 0x6B, 0x7B, 0x92, 
   0x6F, 0x7E, 0x97, 0x73, 0x7C, 0x9A, 0x6C, 0x77, 0x94, 0x5F, 0x70, 0x87, 0x5F, 0x6F, 0x87, 0x61, 
   0x70, 0x89, 0x57, 0x68, 0x7D, 0x58, 0x66, 0x7A, 0x57, 0x60, 0x73, 0x59, 0x5E, 0x6B, 0x62, 0x68, 
   0x74, 0x68, 0x7D, 0x87, 0xAB, 0xC3, 0xC5, 0xCE, 0xD0, 0xCF, 0xCE, 0xC3, 0xC5, 0xC1, 0xB4, 0xBB, 
   0xAA, 0x9C, 0xAB, 0x95, 0x90, 0x9A, 0x40, 0x46, 0x49, 0x43, 0x47, 0x4E, 0x4C, 0x4C, 0x56, 0x55, 
   0x55, 0x5E, 0x5F, 0x5F, 0x67, 0x65, 0x66, 0x6D, 0x6B, 0x6D, 0x71, 0x6D, 0x6A, 0x6D, 0x6A, 0x69, 
   0x6B, 0x69, 0x68, 0x6B, 0x68, 0x67, 0x68, 0x6D, 0x6C, 0x6C, 0x85, 0x88, 0x86, 0x6B, 0x72, 0x6E, 
   0x27, 0x2C, 0x2F, 0x2E, 0x31, 0x39, 0x4E, 0x4D, 0x54, 0x75, 0x75, 0x79, 0x70, 0x6F, 0x77, 0x63, 
   0x60, 0x61, 0x42, 0x43, 0x42, 0x42, 0x49, 0x4C, 0x99, 0xA6, 0xAD, 0x95, 0x9F, 0xAA, 0x8C, 0x96, 
   0x9D, 0x90, 0x9A, 0xA1, 0x93, 0x9E, 0xAA, 0x97, 0xA2, 0xB1, 0x99, 0xA4, 0xB4, 0x9F, 0xA8, 0xB7, 
   0x9B, 0xA6, 0xB4, 0x89, 0x93, 0xA3, 0x7A, 0x87, 0x96, 0x6D, 0x7B, 0x8B, 0x62, 0x72, 0x7D, 0x22, 
   0x30, 0x32, 0x0E, 0x14, 0x16, 0x12, 0x12, 0x15, 0x0B, 0x0F, 0x10, 0x05, 0x0C, 0x0E, 0x06, 0x0E, 
   0x10, 0x0B, 0x12, 0x13, 0x0C, 0x11, 0x0F, 0x26, 0x30, 0x2E, 0x85, 0x91, 0x93, 0xA5, 0xA7, 0xAE, 
   0x9C, 0x9D, 0xA5, 0x97, 0x9A, 0xA1, 0x94, 0x94, 0x9B, 0x8D, 0x91, 0x97, 0x8A, 0x90, 0x95, 0x8D, 
   0x8F, 0x95, 0x99, 0x95, 0x9C, 0x8C, 0x89, 0x93, 0x89, 0x89, 0x93, 0x8B, 0x8A, 0x91, 0x85, 0x82, 
   0x84, 0x5C, 0x59, 0x59, 0x6E, 0x76, 0x75, 0x76, 0x75, 0x77, 0x6F, 0x6C, 0x6D, 0x47, 0x47, 0x49, 
   0x59, 0x5C, 0x61, 0x7A, 0x7A, 0x80, 0x8E, 0x8C, 0x95, 0xAC, 0xAD, 0xB4, 0xAE, 0xB2, 0xB8, 0xA6, 
   0xA8, 0xAF, 0x98, 0x96, 0xA0, 0x93, 0x92, 0x99, 0x91, 0x90, 0x94, 0x91, 0x92, 0x9A, 0x95, 0x93, 
   0x9B, 0x96, 0x93, 0x9C, 0x95, 0x93, 0x9C, 0x94, 0x95, 0x9B, 0x97, 0x95, 0x9A, 0x90, 0x8E, 0x93, 
   0x8B, 0x8C, 0x90, 0x90, 0x92, 0x98, 0x95, 0x95, 0x9D, 0x8F, 0x8D, 0x97, 0x8B, 0x87, 0x91, 0x9E, 
   0x9B, 0xA1, 0xA2, 0x9E, 0xA7, 0x98, 0x93, 0x9F, 0x91, 0x8D, 0x97, 0x92, 0x8F, 0x99, 0x94, 0x90, 
   0x9A, 0x94, 0x8F, 0x9B, 0x95, 0x96, 0xA3, 0x96, 0x94, 0xA7, 0x92, 0x90, 0xA1, 0x8B, 0x8D, 0x9B, 
   0x8C, 0x8D, 0x98, 0x8F, 0x8F, 0x97, 0x8F, 0x8D, 0x97, 0x90, 0x8E, 0x98, 0x8F, 0x91, 0x96, 0x90, 
   0x91, 0x98, 0x8E, 0x8D, 0x96, 0x8D, 0x8B, 0x94, 0x86, 0x84, 0x8C, 0x7A, 0x77, 0x7F, 0x92, 0x8D, 
   0x95, 0x9F, 0x9B, 0xA3, 0xA1, 0x9C, 0xA5, 0x9F, 0x96, 0x9F, 0x9E, 0x96, 0x9E, 0x9F, 0x9B, 0xA3, 
   0x9D, 0x9C, 0xAD, 0x86, 0x8B, 0xA3, 0x7D, 0x87, 0x9E, 0x7D, 0x89, 0x9D, 0x87, 0x8F, 0x9C, 0x8F, 
   0x91, 0x96, 0x86, 0x85, 0x8C, 0x72, 0x71, 0x83, 0x61, 0x67, 0x7E, 0x69, 0x70, 0x88, 0x71, 0x76, 
   0x8D, 0x78, 0x7D, 0x89, 0x8D, 0x8F, 0x8F, 0x93, 0x92, 0x8F, 0x8A, 0x8D, 0x89, 0x76, 0x7F, 0x7C, 
   0x75, 0x81, 0x7E, 0x78, 0x80, 0x7E, 0x72, 0x73, 0x76, 0x98, 0x99, 0xA0, 0x84, 0x84, 0x8A, 0x78, 
   0x75, 0x78, 0x81, 0x7C, 0x7E, 0x7B, 0x79, 0x7B, 0x7C, 0x7B, 0x7E, 0x72, 0x73, 0x72, 0x65, 0x66, 
   0x62, 0x65, 0x63, 0x5F, 0x67, 0x64, 0x5E, 0x72, 0x6A, 0x61, 0x79, 0x79, 0x73, 0x83, 0x82, 0x7C, 
   0x7C, 0x77, 0x6E, 0x78, 0x75, 0x6B, 0x78, 0x78, 0x6E, 0x81, 0x7B, 0x70, 0x7C, 0x75, 0x70, 0x6B, 
   0x68, 0x62, 0x64, 0x64, 0x5C, 0x69, 0x68, 0x60, 0x70, 0x6E, 0x68, 0x72, 0x6D, 0x67, 0x6F, 0x68, 
   0x62, 0x6F, 0x68, 0x65, 0x72, 0x6E, 0x6A, 0x7C, 0x78, 0x72, 0x83, 0x7E, 0x75, 0x91, 0x85, 0x7D, 
   0x79, 0x6C, 0x67, 0x58, 0x52, 0x4F, 0x45, 0x45, 0x42, 0x62, 0x63, 0x63, 0x65, 0x60, 0x67, 0x2E, 
   0x25, 0x29, 0x18, 0x13, 0x15, 0x12, 0x15, 0x16, 0x12, 0x15, 0x18, 0x18, 0x1C, 0x1B, 0x35, 0x3A, 
   0x33, 0x5B, 0x60, 0x5D, 0x60, 0x63, 0x60, 0x62, 0x60, 0x5C, 0x5A, 0x56, 0x54, 0x4E, 0x51, 0x51, 
   0x43, 0x4A, 0x49, 0x43, 0x45, 0x47, 0x48, 0x48, 0x4A, 0x4A, 0x4B, 0x4C, 0x51, 0x50, 0x54, 0x4F, 
   0x4E, 0x52, 0x4F, 0x54, 0x55, 0x62, 0x63, 0x65, 0x6E, 0x6A, 0x6E, 0x6E, 0x6A, 0x6F, 0x73, 0x72, 
   0x73, 0x7A, 0x7B, 0x79, 0x73, 0x76, 0x72, 0x62, 0x5F, 0x63, 0x55, 0x57, 0x5E, 0x56, 0x5C, 0x62, 
   0x59, 0x62, 0x64, 0x4B, 0x55, 0x51, 0x4F, 0x54, 0x51, 0x5C, 0x58, 0x5A, 0x57, 0x51, 0x55, 0x54, 
   0x53, 0x50, 0x59, 0x53, 0x4E, 0x58, 0x51, 0x4C, 0x57, 0x52, 0x4C, 0x53, 0x4F, 0x49, 0x48, 0x48, 
   0x42, 0x40, 0x43, 0x41, 0x42, 0x49, 0x47, 0x5F, 0x69, 0x62, 0x6D, 0x77, 0x70, 0x7D, 0x85, 0x7F, 
   0x87, 0x8B, 0x84, 0x8F, 0x8D, 0x8A, 0x91, 0x8B, 0x88, 0x86, 0x80, 0x7B, 0x7F, 0x7B, 0x75, 0x84, 
   0x80, 0x7D, 0x87, 0x84, 0x88, 0x87, 0x87, 0x84, 0x90, 0x8C, 0x83, 0x90, 0x90, 0x89, 0x91, 0x91, 
   0x8F, 0x93, 0x90, 0x8F, 0x8E, 0x8E, 0x8B, 0x8B, 0x91, 0x8C, 0x9B, 0xA2, 0x9F, 0x9F, 0xA3, 0xA0, 
   0x9B, 0x9D, 0x9E, 0xA1, 0x9C, 0x9F, 0x98, 0x93, 0x94, 0xB2, 0xAD, 0xB1, 0x8B, 0x7A, 0x88, 0x5B, 
   0x51, 0x5E, 0x61, 0x61, 0x68, 0x83, 0x88, 0x8A, 0x99, 0x9E, 0xA6, 0x85, 0x88, 0x9B, 0x7D, 0x7E, 
   0x97, 0x81, 0x7E, 0x99, 0x7D, 0x7B, 0x97, 0x75, 0x78, 0x91, 0x6F, 0x78, 0x90, 0x6C, 0x7B, 0x94, 
   0x6E, 0x7F, 0x96, 0x70, 0x7C, 0x96, 0x69, 0x75, 0x93, 0x59, 0x67, 0x82, 0x59, 0x68, 0x86, 0x63, 
   0x72, 0x93, 0x5E, 0x70, 0x8D, 0x5F, 0x71, 0x90, 0x64, 0x71, 0x8F, 0x61, 0x68, 0x7F, 0x56, 0x5B, 
   0x6D, 0x5F, 0x73, 0x7F, 0xB7, 0xD0, 0xD0, 0xD2, 0xD6, 0xD5, 0xCC, 0xC1, 0xC4, 0xB8, 0xAB, 0xB4, 
   0x96, 0x8E, 0x9F, 0x90, 0x8F, 0x9D, 0x48, 0x4A, 0x51, 0x54, 0x56, 0x5C, 0x61, 0x5E, 0x67, 0x65, 
   0x63, 0x6B, 0x66, 0x66, 0x6B, 0x67, 0x6A, 0x6E, 0x6E, 0x6E, 0x74, 0x6F, 0x6B, 0x72, 0x6A, 0x6B, 
   0x6E, 0x67, 0x6A, 0x6C, 0x65, 0x69, 0x67, 0x7C, 0x82, 0x81, 0x8A, 0x93, 0x94, 0x41, 0x4D, 0x4C, 
   0x21, 0x29, 0x2D, 0x42, 0x44, 0x4B, 0x66, 0x62, 0x68, 0x92, 0x91, 0x97, 0x85, 0x85, 0x8F, 0x5F, 
   0x5E, 0x64, 0x27, 0x2B, 0x2C, 0x3D, 0x47, 0x4B, 0x93, 0xA1, 0xA9, 0x9C, 0xA9, 0xB1, 0x9A, 0xA5, 
   0xAA, 0x9E, 0xA8, 0xAF, 0x9D, 0xA7, 0xB3, 0x9D, 0xA8, 0xB5, 0x9D, 0xA7, 0xB3, 0xA0, 0xA7, 0xB4, 
   0x98, 0xA5, 0xB1, 0x8C, 0x98, 0xA5, 0x85, 0x92, 0x9F, 0x7D, 0x89, 0x96, 0x71, 0x7E, 0x89, 0x4D, 
   0x5C, 0x63, 0x36, 0x41, 0x48, 0x36, 0x3B, 0x44, 0x2F, 0x37, 0x3E, 0x27, 0x2F, 0x36, 0x22, 0x27, 
   0x2F, 0x1D, 0x23, 0x28, 0x17, 0x1D, 0x1D, 0x2D, 0x3A, 0x3A, 0x77, 0x86, 0x89, 0x97, 0x9E, 0xA4, 
   0x9F, 0x9F, 0xA9, 0x9D, 0x9D, 0xA6, 0x94, 0x96, 0x9F, 0x8F, 0x93, 0x9A, 0x8B, 0x90, 0x95, 0x88, 
   0x8B, 0x90, 0x8F, 0x8D, 0x93, 0x85, 0x83, 0x8C, 0x87, 0x86, 0x92, 0x8B, 0x88, 0x92, 0x90, 0x88, 
   0x90, 0x68, 0x64, 0x65, 0x27, 0x2E, 0x2B, 0x56, 0x5B, 0x57, 0x72, 0x70, 0x6D, 0x48, 0x49, 0x49, 
   0x58, 0x5D, 0x63, 0x7B, 0x7B, 0x82, 0x92, 0x93, 0x98, 0x9E, 0x9F, 0xA4, 0x99, 0x9C, 0xA1, 0x9B, 
   0x9E, 0xA3, 0x98, 0x99, 0x9E, 0x95, 0x94, 0x99, 0x95, 0x91, 0x97, 0x96, 0x92, 0x9B, 0x96, 0x92, 
   0x9A, 0x94, 0x8F, 0x97, 0x95, 0x91, 0x98, 0x96, 0x92, 0x98, 0x9A, 0x96, 0x9B, 0x94, 0x90, 0x97, 
   0x92, 0x8F, 0x98, 0x90, 0x93, 0x99, 0x95, 0x96, 0x9D, 0x93, 0x90, 0x9B, 0x89, 0x83, 0x90, 0x8D, 
   0x8B, 0x96, 0x8C, 0x8C, 0x96, 0x97, 0x93, 0x9F, 0x95, 0x90, 0x9D, 0x8E, 0x8D, 0x9A, 0x89, 0x85, 
   0x92, 0x84, 0x7E, 0x8C, 0x89, 0x8A, 0x98, 0x97, 0x97, 0xA6, 0x96, 0x97, 0xA4, 0x8F, 0x90, 0x9E, 
   0x8E, 0x8D, 0x99, 0x8C, 0x87, 0x92, 0x8E, 0x87, 0x94, 0x93, 0x8D, 0x9A, 0x94, 0x91, 0x97, 0x93, 
   0x90, 0x98, 0x91, 0x8D, 0x98, 0x8A, 0x85, 0x8F, 0x83, 0x7E, 0x84, 0x90, 0x88, 0x8E, 0xA9, 0x9E, 
   0xA5, 0xA5, 0x9F, 0xA7, 0xA6, 0xA2, 0xAB, 0x9E, 0x99, 0xA2, 0x9B, 0x95, 0x9D, 0x9D, 0x98, 0xA1, 
   0x9E, 0x98, 0xA5, 0x8F, 0x8F, 0x9F, 0x8A, 0x8E, 0x9C, 0x87, 0x8D, 0x9B, 0x8A, 0x8E, 0x9B, 0x8D, 
   0x91, 0x94, 0x90, 0x90, 0x93, 0x91, 0x8E, 0x9D, 0x69, 0x6A, 0x7D, 0x6A, 0x70, 0x83, 0x79, 0x7F, 
   0x8C, 0x86, 0x8D, 0x91, 0x8E, 0x97, 0x96, 0x9A, 0xA2, 0xA1, 0x85, 0x8F, 0x8D, 0x65, 0x74, 0x73, 
   0x73, 0x86, 0x85, 0x82, 0x8E, 0x8F, 0x91, 0x92, 0x97, 0xA4, 0xA5, 0xAD, 0x9C, 0x9B, 0xA2, 0x8C, 
   0x89, 0x8D, 0x8F, 0x88, 0x8D, 0x7A, 0x75, 0x7C, 0x7A, 0x78, 0x7E, 0x6E, 0x6E, 0x6E, 0x63, 0x62, 
   0x5E, 0x66, 0x62, 0x5E, 0x65, 0x64, 0x5F, 0x6D, 0x69, 0x61, 0x6E, 0x71, 0x6C, 0x75, 0x77, 0x72, 
   0x77, 0x75, 0x6D, 0x79, 0x77, 0x70, 0x7D, 0x7F, 0x79, 0x7B, 0x7B, 0x75, 0x73, 0x6D, 0x6E, 0x67, 
   0x62, 0x60, 0x65, 0x62, 0x5E, 0x69, 0x65, 0x63, 0x71, 0x6E, 0x6B, 0x73, 0x70, 0x6C, 0x79, 0x75, 
   0x70, 0x88, 0x84, 0x81, 0x89, 0x85, 0x80, 0x8B, 0x83, 0x79, 0x8C, 0x87, 0x78, 0x98, 0x8E, 0x7F, 
   0x94, 0x84, 0x7C, 0x81, 0x75, 0x73, 0x66, 0x61, 0x5F, 0x6E, 0x6D, 0x6A, 0x6E, 0x64, 0x6A, 0x2B, 
   0x1B, 0x1F, 0x18, 0x0F, 0x0F, 0x12, 0x15, 0x13, 0x0F, 0x14, 0x14, 0x17, 0x1F, 0x1C, 0x2A, 0x32, 
   0x2B, 0x44, 0x4A, 0x45, 0x54, 0x59, 0x56, 0x64, 0x64, 0x60, 0x5D, 0x5B, 0x59, 0x54, 0x56, 0x56, 
   0x4D, 0x53, 0x52, 0x51, 0x53, 0x56, 0x51, 0x53, 0x56, 0x4F, 0x51, 0x53, 0x51, 0x50, 0x55, 0x4F, 
   0x4F, 0x53, 0x56, 0x57, 0x58, 0x5C, 0x5D, 0x5F, 0x5C, 0x5E, 0x62, 0x5C, 0x5F, 0x63, 0x5E, 0x61, 
   0x63, 0x61, 0x64, 0x63, 0x66, 0x67, 0x65, 0x66, 0x62, 0x66, 0x60, 0x60, 0x67, 0x5A, 0x5C, 0x64, 
   0x52, 0x52, 0x56, 0x44, 0x46, 0x43, 0x4D, 0x50, 0x4D, 0x5C, 0x59, 0x5A, 0x5E, 0x59, 0x59, 0x5B, 
   0x5B, 0x57, 0x57, 0x54, 0x50, 0x50, 0x4C, 0x4A, 0x4D, 0x4A, 0x48, 0x4F, 0x4D, 0x4B, 0x49, 0x4A, 
   0x47, 0x41, 0x46, 0x43, 0x4C, 0x53, 0x4F, 0x62, 0x65, 0x5F, 0x77, 0x78, 0x71, 0x86, 0x8A, 0x82, 
   0x88, 0x8C, 0x83, 0x94, 0x91, 0x8B, 0x94, 0x8B, 0x88, 0x86, 0x7F, 0x7D, 0x81, 0x7E, 0x76, 0x83, 
   0x7D, 0x77, 0x7F, 0x79, 0x7D, 0x78, 0x72, 0x72, 0x7A, 0x76, 0x71, 0x85, 0x85, 0x7C, 0x8C, 0x8D, 
   0x88, 0x8E, 0x8D, 0x8E, 0x8D, 0x8C, 0x8A, 0x8E, 0x8F, 0x8A, 0x92, 0x96, 0x94, 0x8C, 0x93, 0x92, 
   0x90, 0x94, 0x95, 0x9C, 0x9C, 0x9E, 0x91, 0x8C, 0x8E, 0x8F, 0x88, 0x8F, 0x77, 0x68, 0x77, 0x72, 
   0x6D, 0x76, 0x7E, 0x81, 0x85, 0x94, 0x96, 0x9E, 0x88, 0x8B, 0x9A, 0x7D, 0x80, 0x95, 0x84, 0x88, 
   0x9B, 0x8C, 0x8B, 0x9E, 0x7E, 0x7B, 0x92, 0x73, 0x78, 0x90, 0x6F, 0x77, 0x90, 0x6E, 0x7B, 0x95, 
   0x78, 0x88, 0x9C, 0x7F, 0x8D, 0xA5, 0x76, 0x84, 0xA1, 0x6C, 0x7C, 0x9B, 0x6A, 0x7B, 0x9C, 0x6B, 
   0x7C, 0x9E, 0x65, 0x76, 0x97, 0x67, 0x7C, 0x9B, 0x74, 0x8A, 0xA6, 0x76, 0x87, 0xA1, 0x60, 0x6A, 
   0x81, 0x58, 0x68, 0x78, 0xA0, 0xB3, 0xB4, 0xC6, 0xC9, 0xC9, 0xC1, 0xB4, 0xBB, 0xA4, 0x99, 0xA3, 
   0x8A, 0x87, 0x94, 0x8F, 0x8F, 0x9F, 0x54, 0x56, 0x5D, 0x61, 0x64, 0x6B, 0x6B, 0x69, 0x6F, 0x6C, 
   0x69, 0x6F, 0x6B, 0x68, 0x6F, 0x6C, 0x6D, 0x72, 0x6D, 0x6C, 0x70, 0x6E, 0x6B, 0x71, 0x68, 0x6B, 
   0x70, 0x66, 0x6A, 0x6D, 0x68, 0x6B, 0x68, 0x8B, 0x91, 0x8E, 0x7E, 0x85, 0x85, 0x2A, 0x34, 0x36, 
   0x33, 0x3A, 0x43, 0x5A, 0x5F, 0x6B, 0x80, 0x7E, 0x8A, 0x93, 0x94, 0x9E, 0x8D, 0x8D, 0x96, 0x51, 
   0x54, 0x59, 0x22, 0x2A, 0x2A, 0x61, 0x6B, 0x73, 0x96, 0xA0, 0xAD, 0x90, 0x9F, 0xA4, 0x91, 0x9E, 
   0xA1, 0x97, 0xA2, 0xA8, 0x9D, 0xA7, 0xB2, 0x9B, 0xA8, 0xB0, 0x99, 0xA6, 0xAC, 0x97, 0xA1, 0xAC, 
   0x8C, 0x9A, 0xA6, 0x86, 0x93, 0x9E, 0x7C, 0x87, 0x92, 0x7E, 0x88, 0x90, 0x7E, 0x8B, 0x92, 0x6E, 
   0x7D, 0x87, 0x58, 0x66, 0x70, 0x4C, 0x55, 0x5F, 0x47, 0x52, 0x5A, 0x46, 0x52, 0x5A, 0x47, 0x52, 
   0x59, 0x41, 0x49, 0x4E, 0x31, 0x34, 0x36, 0x2E, 0x34, 0x35, 0x60, 0x69, 0x6B, 0x85, 0x8A, 0x8E, 
   0xA2, 0x9E, 0xA6, 0xA1, 0x9D, 0xA7, 0x92, 0x96, 0x9F, 0x91, 0x95, 0x9C, 0x8F, 0x92, 0x9C, 0x8B, 
   0x8E, 0x97, 0x8B, 0x89, 0x91, 0x90, 0x8D, 0x96, 0x8D, 0x8B, 0x96, 0x87, 0x84, 0x8E, 0x8E, 0x86, 
   0x8F, 0x83, 0x7E, 0x83, 0x21, 0x22, 0x24, 0x26, 0x2C, 0x29, 0x66, 0x64, 0x60, 0x5B, 0x5C, 0x5B, 
   0x58, 0x5E, 0x62, 0x75, 0x77, 0x7F, 0x85, 0x88, 0x8B, 0x8E, 0x8F, 0x94, 0x8C, 0x8E, 0x92, 0x94, 
   0x98, 0x9A, 0x97, 0x9A, 0x9B, 0x95, 0x95, 0x98, 0x92, 0x8E, 0x95, 0x98, 0x91, 0x9B, 0x9E, 0x96, 
   0x9F, 0x97, 0x8F, 0x97, 0x91, 0x8C, 0x92, 0x91, 0x8E, 0x93, 0x98, 0x94, 0x9B, 0x96, 0x8E, 0x98, 
   0x93, 0x8C, 0x99, 0x8D, 0x8F, 0x97, 0x90, 0x91, 0x98, 0x8F, 0x8A, 0x94, 0x82, 0x7B, 0x8A, 0x71, 
   0x70, 0x80, 0x6E, 0x73, 0x81, 0x78, 0x7D, 0x8A, 0x82, 0x84, 0x91, 0x8A, 0x8C, 0x98, 0x86, 0x83, 
   0x91, 0x7C, 0x76, 0x89, 0x71, 0x6E, 0x83, 0x87, 0x86, 0x97, 0x97, 0x97, 0xA4, 0x8E, 0x8D, 0x9A, 
   0x9C, 0x99, 0xA4, 0x9F, 0x99, 0xA3, 0x9B, 0x94, 0x9F, 0x98, 0x94, 0x9D, 0x95, 0x93, 0x97, 0x94, 
   0x92, 0x98, 0x90, 0x8E, 0x96, 0x8B, 0x89, 0x91, 0x8B, 0x86, 0x8D, 0x98, 0x91, 0x97, 0xA7, 0x9C, 
   0xA4, 0x9F, 0x98, 0x9F, 0x99, 0x97, 0x9D, 0x98, 0x96, 0x9D, 0x96, 0x94, 0x9D, 0x9B, 0x96, 0xA0, 
   0xA0, 0x97, 0xA1, 0x9E, 0x99, 0xA0, 0x9F, 0x9E, 0xA3, 0x96, 0x93, 0x9D, 0x85, 0x83, 0x90, 0x89, 
   0x8D, 0x90, 0x93, 0x92, 0x95, 0x96, 0x8D, 0x98, 0x72, 0x69, 0x74, 0x6D, 0x6E, 0x75, 0x7A, 0x81, 
   0x83, 0x87, 0x8C, 0x89, 0x7B, 0x81, 0x7A, 0x76, 0x82, 0x7D, 0x5D, 0x6B, 0x69, 0x6B, 0x7C, 0x7C, 
   0x80, 0x95, 0x95, 0x89, 0x97, 0x99, 0x9B, 0x9D, 0xA4, 0x99, 0x9C, 0xA3, 0x9C, 0x9D, 0xA3, 0xA6, 
   0xA4, 0xA9, 0x9A, 0x95, 0x97, 0x7A, 0x7A, 0x80, 0x79, 0x77, 0x7D, 0x67, 0x65, 0x63, 0x62, 0x5F, 
   0x59, 0x6B, 0x64, 0x60, 0x67, 0x63, 0x5E, 0x69, 0x68, 0x64, 0x6F, 0x70, 0x6E, 0x74, 0x73, 0x70, 
   0x7A, 0x76, 0x6F, 0x7E, 0x7C, 0x75, 0x82, 0x83, 0x7C, 0x82, 0x82, 0x7D, 0x77, 0x77, 0x74, 0x7D, 
   0x7A, 0x74, 0x88, 0x84, 0x7E, 0x8B, 0x85, 0x83, 0x8A, 0x83, 0x83, 0x7C, 0x79, 0x77, 0x75, 0x75, 
   0x71, 0x7D, 0x80, 0x78, 0x85, 0x8A, 0x81, 0x8C, 0x8B, 0x81, 0x8E, 0x8B, 0x80, 0x91, 0x8A, 0x80, 
   0x8D, 0x87, 0x80, 0x8B, 0x85, 0x82, 0x7F, 0x7C, 0x78, 0x7A, 0x78, 0x74, 0x88, 0x7B, 0x7D, 0x64, 
   0x4E, 0x52, 0x26, 0x15, 0x1A, 0x12, 0x0A, 0x0D, 0x0D, 0x0C, 0x0E, 0x16, 0x1E, 0x1B, 0x25, 0x2E, 
   0x28, 0x35, 0x3A, 0x34, 0x41, 0x48, 0x45, 0x59, 0x5E, 0x5B, 0x5D, 0x60, 0x5E, 0x56, 0x58, 0x59, 
   0x51, 0x57, 0x56, 0x54, 0x55, 0x59, 0x51, 0x54, 0x58, 0x4C, 0x51, 0x54, 0x4C, 0x4C, 0x53, 0x4C, 
   0x4E, 0x52, 0x52, 0x50, 0x52, 0x4E, 0x4D, 0x50, 0x47, 0x4B, 0x4E, 0x4A, 0x4D, 0x53, 0x55, 0x55, 
   0x5D, 0x5A, 0x59, 0x61, 0x62, 0x60, 0x69, 0x6C, 0x6B, 0x6E, 0x6D, 0x70, 0x77, 0x68, 0x6A, 0x72, 
   0x62, 0x63, 0x67, 0x64, 0x64, 0x65, 0x4E, 0x4F, 0x4F, 0x5F, 0x5D, 0x5F, 0x77, 0x77, 0x76, 0x6E, 
   0x72, 0x71, 0x53, 0x55, 0x56, 0x4C, 0x4C, 0x50, 0x4E, 0x49, 0x4D, 0x4B, 0x46, 0x44, 0x4B, 0x49, 
   0x47, 0x45, 0x46, 0x45, 0x5F, 0x61, 0x5D, 0x69, 0x69, 0x65, 0x70, 0x70, 0x6A, 0x90, 0x92, 0x89, 
   0x93, 0x92, 0x89, 0x9A, 0x95, 0x8E, 0xA5, 0x9B, 0x9A, 0x86, 0x80, 0x81, 0x81, 0x7F, 0x78, 0x82, 
   0x7C, 0x76, 0x77, 0x71, 0x70, 0x6B, 0x63, 0x64, 0x71, 0x69, 0x6E, 0x81, 0x7D, 0x76, 0x84, 0x85, 
   0x7E, 0x89, 0x8A, 0x8B, 0x87, 0x87, 0x85, 0x8D, 0x8D, 0x87, 0x91, 0x93, 0x91, 0x8E, 0x91, 0x90, 
   0x95, 0x8F, 0x8F, 0x97, 0x92, 0x93, 0x7F, 0x7A, 0x7E, 0x6C, 0x6B, 0x73, 0x6B, 0x66, 0x72, 0x84, 
   0x81, 0x86, 0x93, 0x93, 0x97, 0x97, 0x96, 0xA0, 0x88, 0x8A, 0x97, 0x86, 0x8D, 0x98, 0x8C, 0x94, 
   0x9F, 0x92, 0x95, 0xA3, 0x82, 0x83, 0x98, 0x73, 0x7B, 0x93, 0x70, 0x78, 0x91, 0x73, 0x7E, 0x98, 
   0x84, 0x93, 0xA7, 0x8B, 0x98, 0xAD, 0x75, 0x86, 0xA0, 0x69, 0x7B, 0x9A, 0x68, 0x7A, 0x9B, 0x5E, 
   0x71, 0x92, 0x5A, 0x6E, 0x91, 0x65, 0x80, 0x9D, 0x70, 0x8F, 0xA5, 0x71, 0x8A, 0xA6, 0x6E, 0x7D, 
   0x99, 0x5A, 0x6F, 0x82, 0x98, 0xAD, 0xAF, 0xC3, 0xC3, 0xC2, 0xB3, 0xA3, 0xAE, 0x8F, 0x88, 0x98, 
   0x80, 0x82, 0x94, 0x83, 0x8E, 0xA0, 0x52, 0x5A, 0x5D, 0x54, 0x5B, 0x62, 0x66, 0x66, 0x6D, 0x6A, 
   0x69, 0x70, 0x71, 0x6D, 0x75, 0x70, 0x6E, 0x76, 0x6C, 0x6A, 0x6E, 0x6A, 0x6A, 0x6E, 0x6A, 0x6C, 
   0x71, 0x6F, 0x6F, 0x75, 0x76, 0x78, 0x7A, 0x98, 0x9B, 0x9B, 0x4E, 0x51, 0x52, 0x39, 0x3B, 0x45, 
   0x58, 0x5C, 0x6B, 0x79, 0x7F, 0x90, 0x98, 0x9F, 0xAF, 0x92, 0x9B, 0xA6, 0x60, 0x63, 0x67, 0x25, 
   0x2A, 0x2A, 0x21, 0x2C, 0x2A, 0x79, 0x86, 0x8F, 0x9A, 0xA3, 0xB2, 0x8E, 0x9B, 0xA2, 0x90, 0x9C, 
   0xA0, 0x95, 0x9F, 0xA7, 0x97, 0xA2, 0xAE, 0x97, 0xA4, 0xAC, 0x97, 0xA5, 0xAA, 0x93, 0x9E, 0xA8, 
   0x8C, 0x98, 0xA5, 0x8A, 0x95, 0xA2, 0x76, 0x80, 0x8D, 0x70, 0x78, 0x7F, 0x6C, 0x77, 0x7A, 0x68, 
   0x76, 0x7C, 0x67, 0x75, 0x7B, 0x5D, 0x63, 0x6D, 0x50, 0x58, 0x5F, 0x47, 0x50, 0x58, 0x40, 0x4B, 
   0x52, 0x3C, 0x43, 0x4A, 0x2E, 0x2E, 0x32, 0x2B, 0x2C, 0x2D, 0x56, 0x5A, 0x5B, 0x7F, 0x82, 0x84, 
   0x9F, 0x9D, 0xA3, 0xAA, 0xA8, 0xB1, 0x8F, 0x96, 0x9E, 0x8B, 0x92, 0x98, 0x8D, 0x91, 0x99, 0x8D, 
   0x91, 0x98, 0x8B, 0x8A, 0x8F, 0x8B, 0x88, 0x8F, 0x8B, 0x87, 0x90, 0x87, 0x83, 0x8E, 0x84, 0x81, 
   0x8B, 0x89, 0x85, 0x91, 0x43, 0x40, 0x4E, 0x11, 0x1A, 0x23, 0x2C, 0x2D, 0x30, 0x44, 0x48, 0x44, 
   0x51, 0x57, 0x58, 0x6D, 0x6F, 0x79, 0x75, 0x78, 0x7E, 0x7C, 0x7D, 0x84, 0x7F, 0x80, 0x86, 0x8C, 
   0x8F, 0x93, 0x94, 0x98, 0x9C, 0x9A, 0x99, 0x9F, 0x93, 0x8E, 0x96, 0x97, 0x93, 0x98, 0xA0, 0x9B, 
   0xA1, 0x94, 0x8F, 0x96, 0x88, 0x86, 0x8D, 0x88, 0x87, 0x8D, 0x8B, 0x8A, 0x90, 0x8A, 0x87, 0x8F, 
   0x89, 0x86, 0x91, 0x8A, 0x89, 0x92, 0x8A, 0x88, 0x91, 0x87, 0x82, 0x8C, 0x7A, 0x74, 0x82, 0x66, 
   0x65, 0x76, 0x5F, 0x60, 0x71, 0x64, 0x67, 0x76, 0x68, 0x6C, 0x79, 0x6E, 0x6E, 0x7D, 0x71, 0x6E, 
   0x80, 0x6E, 0x6B, 0x82, 0x63, 0x62, 0x7C, 0x76, 0x6E, 0x87, 0x81, 0x79, 0x8D, 0x71, 0x6A, 0x7E, 
   0x7B, 0x78, 0x88, 0x93, 0x92, 0x9E, 0x9F, 0x9E, 0xA9, 0xAA, 0xA8, 0xB0, 0x9C, 0x9C, 0xA2, 0x94, 
   0x98, 0x9C, 0x92, 0x96, 0x9C, 0x8E, 0x91, 0x99, 0x8F, 0x90, 0x99, 0x95, 0x91, 0x9A, 0x99, 0x92, 
   0x9B, 0x93, 0x8F, 0x98, 0x91, 0x8D, 0x96, 0x96, 0x8E, 0x97, 0x96, 0x90, 0x9A, 0x9B, 0x96, 0xA0, 
   0x9E, 0x98, 0xA1, 0x9E, 0x9A, 0xA0, 0xA1, 0x9E, 0xA1, 0x9B, 0x96, 0x9D, 0x7F, 0x7A, 0x86, 0x84, 
   0x87, 0x8A, 0x99, 0x99, 0x9B, 0xA5, 0x9F, 0xA5, 0x78, 0x6D, 0x6F, 0x77, 0x74, 0x70, 0x7E, 0x80, 
   0x7D, 0x76, 0x75, 0x73, 0x34, 0x32, 0x2D, 0x17, 0x1D, 0x18, 0x2F, 0x39, 0x34, 0x66, 0x75, 0x73, 
   0x7D, 0x90, 0x8F, 0x89, 0x94, 0x98, 0x96, 0x99, 0xA1, 0x92, 0x96, 0x9D, 0x99, 0x9D, 0xA1, 0xA9, 
   0xA9, 0xAC, 0xAA, 0xA8, 0xA8, 0x96, 0x9B, 0x9F, 0x7B, 0x7A, 0x7E, 0x5D, 0x5A, 0x54, 0x62, 0x60, 
   0x58, 0x6E, 0x67, 0x63, 0x6A, 0x64, 0x60, 0x6D, 0x6B, 0x68, 0x77, 0x73, 0x70, 0x79, 0x74, 0x70, 
   0x7C, 0x77, 0x70, 0x84, 0x80, 0x75, 0x86, 0x82, 0x78, 0x83, 0x7D, 0x78, 0x7E, 0x7D, 0x76, 0x88, 
   0x87, 0x7B, 0x94, 0x94, 0x89, 0x98, 0x96, 0x92, 0x9C, 0x96, 0x95, 0x90, 0x89, 0x85, 0x8C, 0x87, 
   0x82, 0x8D, 0x8B, 0x84, 0x8D, 0x8F, 0x88, 0x8F, 0x8C, 0x85, 0x92, 0x85, 0x81, 0x91, 0x86, 0x82, 
   0x92, 0x8B, 0x86, 0x88, 0x86, 0x81, 0x7A, 0x7A, 0x75, 0x80, 0x7C, 0x76, 0x8F, 0x8A, 0x85, 0xA8, 
   0x9B, 0x9A, 0x75, 0x61, 0x69, 0x2C, 0x1B, 0x23, 0x0C, 0x07, 0x0A, 0x1A, 0x21, 0x21, 0x25, 0x2A, 
   0x27, 0x2C, 0x2E, 0x2B, 0x2F, 0x36, 0x34, 0x4A, 0x4E, 0x4D, 0x54, 0x59, 0x57, 0x53, 0x54, 0x54, 
   0x4E, 0x51, 0x50, 0x50, 0x50, 0x54, 0x4D, 0x4E, 0x55, 0x46, 0x49, 0x4E, 0x46, 0x45, 0x4C, 0x4C, 
   0x4B, 0x4F, 0x4C, 0x4F, 0x4C, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x53, 0x57, 0x5B, 0x60, 0x5D, 0x62, 
   0x68, 0x5A, 0x5E, 0x65, 0x68, 0x68, 0x70, 0x6A, 0x6C, 0x6F, 0x68, 0x6F, 0x75, 0x6A, 0x73, 0x79, 
   0x72, 0x78, 0x7E, 0x69, 0x6C, 0x71, 0x59, 0x58, 0x5D, 0x5A, 0x56, 0x5A, 0x5A, 0x5C, 0x57, 0x5C, 
   0x62, 0x5E, 0x6D, 0x75, 0x73, 0x7D, 0x84, 0x85, 0x67, 0x60, 0x68, 0x55, 0x4B, 0x4D, 0x52, 0x4E, 
   0x50, 0x4E, 0x4D, 0x4E, 0x66, 0x64, 0x62, 0x69, 0x68, 0x66, 0x66, 0x68, 0x62, 0x98, 0x99, 0x8F, 
   0xA8, 0xA5, 0x9C, 0xA3, 0x9F, 0x98, 0xA9, 0xA5, 0xA5, 0x9B, 0x99, 0x98, 0x86, 0x85, 0x82, 0x86, 
   0x82, 0x81, 0x84, 0x80, 0x7D, 0x88, 0x84, 0x85, 0x90, 0x85, 0x8D, 0x90, 0x86, 0x86, 0x8F, 0x87, 
   0x83, 0x90, 0x8B, 0x88, 0x8F, 0x8D, 0x89, 0x94, 0x94, 0x8F, 0x93, 0x95, 0x92, 0x93, 0x93, 0x8D, 
   0x9A, 0x91, 0x8F, 0x8F, 0x84, 0x88, 0x67, 0x63, 0x67, 0x69, 0x6F, 0x75, 0x7A, 0x79, 0x81, 0x8F, 
   0x8C, 0x8E, 0xA5, 0xA3, 0xA3, 0xA7, 0xA5, 0xAB, 0x93, 0x95, 0x9D, 0x8F, 0x95, 0x9B, 0x8A, 0x93, 
   0xA0, 0x7C, 0x82, 0x99, 0x79, 0x7D, 0x97, 0x76, 0x7D, 0x98, 0x74, 0x7D, 0x97, 0x75, 0x82, 0x9B, 
   0x80, 0x90, 0xA4, 0x83, 0x90, 0xA5, 0x7C, 0x8B, 0xA3, 0x72, 0x82, 0x9E, 0x6B, 0x76, 0x99, 0x5F, 
   0x6C, 0x8F, 0x6C, 0x7D, 0xA3, 0x72, 0x8B, 0xAC, 0x6C, 0x87, 0xA5, 0x6E, 0x86, 0xA6, 0x6C, 0x85, 
   0xA5, 0x60, 0x7E, 0x98, 0x81, 0x9C, 0xA5, 0xB6, 0xBD, 0xC0, 0xA5, 0x9E, 0xAF, 0x87, 0x8A, 0xA2, 
   0x88, 0x90, 0xA6, 0x87, 0x90, 0x9E, 0x53, 0x5C, 0x5B, 0x5A, 0x61, 0x68, 0x6B, 0x6B, 0x77, 0x6B, 
   0x6D, 0x76, 0x73, 0x71, 0x78, 0x74, 0x72, 0x79, 0x71, 0x6E, 0x74, 0x71, 0x70, 0x74, 0x72, 0x72, 
   0x73, 0x77, 0x7A, 0x7E, 0x92, 0x99, 0xA1, 0x6D, 0x76, 0x7C, 0x40, 0x48, 0x50, 0x75, 0x78, 0x89, 
   0x89, 0x8F, 0x9D, 0x8B, 0x94, 0xA1, 0x89, 0x97, 0xA4, 0x58, 0x64, 0x6D, 0x1D, 0x1D, 0x20, 0x17, 
   0x17, 0x18, 0x45, 0x4C, 0x4B, 0x93, 0x9E, 0xA7, 0x98, 0xA0, 0xAC, 0x96, 0x9C, 0xA4, 0x96, 0x9C, 
   0xA3, 0x9B, 0xA0, 0xAB, 0x9C, 0xA1, 0xB1, 0x97, 0xA0, 0xAA, 0x9A, 0xA4, 0xAB, 0x9A, 0x9F, 0xAC, 
   0x86, 0x90, 0x9D, 0x6F, 0x7A, 0x88, 0x58, 0x63, 0x71, 0x51, 0x5D, 0x62, 0x4A, 0x57, 0x56, 0x42, 
   0x52, 0x51, 0x44, 0x54, 0x53, 0x48, 0x53, 0x57, 0x41, 0x4A, 0x4D, 0x36, 0x3F, 0x43, 0x32, 0x3F, 
   0x44, 0x28, 0x34, 0x38, 0x24, 0x2B, 0x2B, 0x25, 0x29, 0x2A, 0x4C, 0x4F, 0x52, 0x7E, 0x7F, 0x82, 
   0x98, 0x98, 0xA0, 0xA2, 0xA0, 0xAC, 0x8E, 0x91, 0x9C, 0x87, 0x8A, 0x93, 0x86, 0x89, 0x91, 0x89, 
   0x8C, 0x93, 0x91, 0x8F, 0x97, 0x8D, 0x88, 0x92, 0x8A, 0x84, 0x90, 0x8C, 0x87, 0x95, 0x8D, 0x8B, 
   0x97, 0x8C, 0x8E, 0x9E, 0x53, 0x55, 0x6C, 0x2D, 0x3D, 0x54, 0x22, 0x2B, 0x38, 0x17, 0x20, 0x1C, 
   0x33, 0x3A, 0x36, 0x67, 0x66, 0x71, 0x6C, 0x6D, 0x78, 0x70, 0x70, 0x78, 0x76, 0x76, 0x7C, 0x7D, 
   0x7E, 0x86, 0x7F, 0x81, 0x8B, 0x8D, 0x8B, 0x96, 0x8F, 0x89, 0x91, 0x8D, 0x8B, 0x8B, 0x88, 0x8A, 
   0x8E, 0x8B, 0x8D, 0x93, 0x8F, 0x8C, 0x96, 0x8E, 0x8B, 0x93, 0x85, 0x87, 0x8C, 0x7F, 0x85, 0x88, 
   0x7F, 0x83, 0x87, 0x84, 0x81, 0x89, 0x8D, 0x87, 0x91, 0x82, 0x7F, 0x88, 0x73, 0x72, 0x7C, 0x68, 
   0x64, 0x72, 0x5C, 0x55, 0x65, 0x58, 0x55, 0x63, 0x58, 0x57, 0x66, 0x62, 0x5B, 0x6F, 0x61, 0x59, 
   0x71, 0x5D, 0x58, 0x73, 0x61, 0x5D, 0x79, 0x69, 0x60, 0x7A, 0x84, 0x78, 0x90, 0x8D, 0x81, 0x9C, 
   0x70, 0x68, 0x82, 0x6D, 0x6C, 0x83, 0x6D, 0x6E, 0x86, 0x7F, 0x81, 0x97, 0x8E, 0x8D, 0x9B, 0x8A, 
   0x8C, 0x95, 0x8B, 0x90, 0x99, 0x88, 0x8E, 0x98, 0x93, 0x96, 0xA1, 0x99, 0x98, 0xA1, 0x96, 0x93, 
   0x98, 0x95, 0x8E, 0x9C, 0x99, 0x91, 0x9D, 0x9B, 0x90, 0x9D, 0x98, 0x92, 0x9D, 0x99, 0x96, 0xA0, 
   0x9A, 0x95, 0x9F, 0x99, 0x92, 0x9F, 0x9A, 0x92, 0x9F, 0x96, 0x8F, 0x9C, 0x6F, 0x6A, 0x7B, 0x79, 
   0x7B, 0x84, 0x97, 0x98, 0x9F, 0x7E, 0x7E, 0x85, 0x4B, 0x47, 0x48, 0x50, 0x4F, 0x4A, 0x4D, 0x4E, 
   0x4A, 0x29, 0x27, 0x28, 0x0B, 0x0B, 0x0F, 0x08, 0x0F, 0x0F, 0x23, 0x2D, 0x27, 0x51, 0x5E, 0x59, 
   0x6D, 0x7C, 0x7C, 0x82, 0x8B, 0x90, 0x93, 0x95, 0xA0, 0x93, 0x9A, 0xA0, 0x97, 0x9D, 0xA0, 0xA5, 
   0xA7, 0xA7, 0xB0, 0xAB, 0xAB, 0x83, 0x85, 0x8B, 0x50, 0x4B, 0x52, 0x57, 0x51, 0x4D, 0x5F, 0x5E, 
   0x58, 0x67, 0x62, 0x60, 0x6A, 0x63, 0x63, 0x6B, 0x6E, 0x69, 0x74, 0x74, 0x6C, 0x72, 0x73, 0x6B, 
   0x74, 0x78, 0x70, 0x76, 0x79, 0x6E, 0x79, 0x75, 0x6C, 0x7B, 0x74, 0x71, 0x7C, 0x7B, 0x77, 0x90, 
   0x8F, 0x83, 0x98, 0x98, 0x8D, 0x99, 0x96, 0x91, 0x9B, 0x94, 0x90, 0x96, 0x8E, 0x88, 0x94, 0x8D, 
   0x87, 0x96, 0x90, 0x89, 0x95, 0x91, 0x86, 0x91, 0x8C, 0x82, 0x8F, 0x85, 0x7F, 0x8A, 0x88, 0x82, 
   0x8B, 0x8B, 0x84, 0x82, 0x7E, 0x79, 0x81, 0x7E, 0x79, 0xA3, 0x9E, 0x97, 0x8C, 0x87, 0x7C, 0x9D, 
   0x96, 0x8E, 0x9B, 0x8E, 0x8F, 0x65, 0x50, 0x52, 0x40, 0x35, 0x39, 0x2F, 0x34, 0x39, 0x2A, 0x2E, 
   0x2F, 0x26, 0x27, 0x25, 0x24, 0x2A, 0x28, 0x38, 0x3D, 0x3B, 0x4F, 0x54, 0x50, 0x57, 0x54, 0x55, 
   0x55, 0x54, 0x54, 0x56, 0x53, 0x59, 0x4F, 0x4E, 0x55, 0x4E, 0x4E, 0x55, 0x53, 0x50, 0x58, 0x54, 
   0x51, 0x57, 0x52, 0x52, 0x59, 0x51, 0x55, 0x5A, 0x53, 0x5A, 0x5C, 0x59, 0x5E, 0x60, 0x5D, 0x5F, 
   0x61, 0x5E, 0x5C, 0x61, 0x5E, 0x5C, 0x63, 0x5E, 0x65, 0x67, 0x65, 0x70, 0x73, 0x68, 0x71, 0x77, 
   0x6A, 0x6F, 0x77, 0x67, 0x6A, 0x73, 0x69, 0x66, 0x6F, 0x52, 0x4A, 0x53, 0x3A, 0x36, 0x39, 0x23, 
   0x24, 0x22, 0x28, 0x33, 0x2B, 0x6E, 0x7B, 0x72, 0x7E, 0x7A, 0x7B, 0x6E, 0x65, 0x66, 0x66, 0x61, 
   0x65, 0x65, 0x5F, 0x61, 0x68, 0x61, 0x60, 0x5D, 0x5A, 0x5A, 0x58, 0x5C, 0x58, 0x77, 0x7E, 0x74, 
   0x94, 0x9B, 0x90, 0x96, 0x9B, 0x93, 0x90, 0x94, 0x93, 0x8B, 0x8E, 0x8B, 0x8D, 0x8C, 0x8B, 0x8C, 
   0x8A, 0x8F, 0x88, 0x87, 0x84, 0x8D, 0x91, 0x8F, 0x99, 0x9D, 0x9E, 0xA1, 0xA2, 0xA4, 0x8F, 0x8B, 
   0x8B, 0x8E, 0x88, 0x80, 0x90, 0x8D, 0x84, 0x95, 0x94, 0x8E, 0x98, 0x93, 0x8F, 0x99, 0x94, 0x8C, 
   0x9D, 0x95, 0x94, 0x82, 0x77, 0x7D, 0x5F, 0x60, 0x64, 0x85, 0x92, 0x94, 0x96, 0x99, 0x9E, 0x9E, 
   0xA1, 0xA1, 0xAB, 0xA8, 0xA6, 0xAE, 0xAB, 0xAF, 0xA3, 0xA3, 0xA9, 0x97, 0x9B, 0xA6, 0x89, 0x8D, 
   0xA8, 0x74, 0x7A, 0x9D, 0x73, 0x7A, 0x99, 0x76, 0x7E, 0x9A, 0x75, 0x7F, 0x99, 0x76, 0x86, 0x9E, 
   0x79, 0x8A, 0x9E, 0x83, 0x8E, 0xA3, 0x80, 0x8D, 0xA2, 0x7A, 0x88, 0xA0, 0x6F, 0x79, 0x97, 0x65, 
   0x6E, 0x8E, 0x5E, 0x6D, 0x91, 0x61, 0x76, 0x9D, 0x67, 0x7D, 0xA1, 0x62, 0x7C, 0x9C, 0x5A, 0x7A, 
   0x98, 0x53, 0x6E, 0x8D, 0x5B, 0x73, 0x84, 0x8B, 0x9D, 0xA4, 0x89, 0x92, 0xA4, 0x6E, 0x76, 0x8D, 
   0x74, 0x7A, 0x88, 0x8B, 0x8E, 0x90, 0x5C, 0x61, 0x65, 0x6E, 0x70, 0x79, 0x6F, 0x71, 0x7D, 0x6F, 
   0x70, 0x7F, 0x72, 0x73, 0x81, 0x76, 0x71, 0x7E, 0x73, 0x6E, 0x77, 0x74, 0x71, 0x78, 0x78, 0x75, 
   0x7A, 0x7E, 0x81, 0x86, 0x7D, 0x84, 0x82, 0x43, 0x4A, 0x4D, 0x6B, 0x72, 0x86, 0x86, 0x90, 0xA1, 
   0x84, 0x8B, 0x96, 0x9B, 0x99, 0xA3, 0x6E, 0x6E, 0x72, 0x21, 0x29, 0x28, 0x22, 0x28, 0x2A, 0x2A, 
   0x2E, 0x31, 0x5B, 0x67, 0x69, 0x94, 0xA2, 0xA8, 0x98, 0x9F, 0xA7, 0x98, 0x9A, 0xA5, 0x97, 0x9B, 
   0xA3, 0x99, 0xA3, 0xA9, 0x90, 0x9C, 0xA5, 0x8C, 0x94, 0xA1, 0x90, 0x98, 0xA4, 0x87, 0x95, 0x9E, 
   0x72, 0x80, 0x87, 0x65, 0x6A, 0x75, 0x50, 0x58, 0x63, 0x42, 0x4B, 0x56, 0x41, 0x45, 0x4E, 0x40, 
   0x42, 0x45, 0x36, 0x3B, 0x3E, 0x38, 0x3C, 0x42, 0x32, 0x38, 0x3E, 0x2E, 0x35, 0x3D, 0x2D, 0x33, 
   0x3B, 0x1E, 0x24, 0x2B, 0x1D, 0x22, 0x28, 0x16, 0x1C, 0x23, 0x27, 0x31, 0x31, 0x59, 0x63, 0x60, 
   0x85, 0x8A, 0x92, 0x89, 0x90, 0x95, 0x80, 0x86, 0x8B, 0x80, 0x85, 0x8C, 0x83, 0x86, 0x8B, 0x89, 
   0x89, 0x91, 0x95, 0x94, 0x9F, 0x95, 0x95, 0x9B, 0x95, 0x91, 0x95, 0x91, 0x8A, 0x95, 0x90, 0x8E, 
   0x9B, 0x8B, 0x8F, 0x98, 0x4D, 0x5A, 0x72, 0x2F, 0x45, 0x62, 0x31, 0x3E, 0x5C, 0x1A, 0x1F, 0x30, 
   0x18, 0x20, 0x21, 0x49, 0x4E, 0x56, 0x63, 0x65, 0x66, 0x66, 0x67, 0x6E, 0x6D, 0x6A, 0x72, 0x71, 
   0x6F, 0x74, 0x68, 0x6C, 0x70, 0x6C, 0x71, 0x76, 0x6A, 0x6C, 0x6F, 0x6A, 0x6D, 0x6D, 0x6C, 0x71, 
   0x74, 0x7A, 0x80, 0x85, 0x88, 0x8F, 0x94, 0x87, 0x8D, 0x92, 0x7F, 0x83, 0x86, 0x7D, 0x7E, 0x7F, 
   0x7F, 0x7E, 0x7F, 0x77, 0x77, 0x7A, 0x6B, 0x6B, 0x72, 0x53, 0x55, 0x5E, 0x49, 0x4A, 0x57, 0x44, 
   0x45, 0x54, 0x42, 0x43, 0x51, 0x41, 0x44, 0x4F, 0x3F, 0x41, 0x4F, 0x49, 0x48, 0x5A, 0x51, 0x50, 
   0x60, 0x68, 0x64, 0x77, 0x6D, 0x68, 0x7A, 0x63, 0x5F, 0x74, 0x5C, 0x5C, 0x75, 0x7F, 0x7E, 0x95, 
   0x7B, 0x77, 0x8C, 0x72, 0x6D, 0x88, 0x6D, 0x68, 0x86, 0x6B, 0x66, 0x7F, 0x74, 0x6D, 0x83, 0x6F, 
   0x6A, 0x7C, 0x69, 0x68, 0x7B, 0x66, 0x67, 0x7B, 0x81, 0x82, 0x90, 0x9C, 0x9A, 0xA3, 0x98, 0x96, 
   0x9D, 0x94, 0x94, 0x9B, 0x97, 0x95, 0x9A, 0x9B, 0x93, 0xA0, 0x9D, 0x94, 0xA1, 0x9C, 0x98, 0xA0, 
   0x97, 0x95, 0x9D, 0x95, 0x94, 0x9C, 0x9B, 0x94, 0xA3, 0x90, 0x8D, 0x9E, 0x7E, 0x85, 0x92, 0x84, 
   0x8D, 0x97, 0x8D, 0x91, 0x97, 0x6E, 0x6F, 0x73, 0x51, 0x50, 0x57, 0x42, 0x40, 0x4A, 0x34, 0x34, 
   0x41, 0x20, 0x1F, 0x29, 0x1E, 0x1D, 0x24, 0x1B, 0x1D, 0x23, 0x23, 0x2A, 0x2D, 0x36, 0x3D, 0x41, 
   0x4A, 0x4E, 0x50, 0x5F, 0x63, 0x61, 0x84, 0x8C, 0x8B, 0x91, 0x9C, 0x9C, 0x9D, 0xA2, 0xA4, 0xA9, 
   0xA6, 0xAA, 0x90, 0x8C, 0x8C, 0x45, 0x48, 0x47, 0x43, 0x46, 0x44, 0x64, 0x68, 0x65, 0x60, 0x64, 
   0x5F, 0x65, 0x64, 0x61, 0x6A, 0x6A, 0x65, 0x6A, 0x6B, 0x6C, 0x6D, 0x6F, 0x6C, 0x67, 0x68, 0x64, 
   0x6B, 0x6B, 0x67, 0x76, 0x75, 0x73, 0x79, 0x79, 0x72, 0x75, 0x75, 0x6D, 0x81, 0x80, 0x7F, 0x91, 
   0x92, 0x8E, 0x95, 0x96, 0x94, 0x98, 0x95, 0x91, 0x95, 0x93, 0x90, 0x99, 0x90, 0x91, 0x97, 0x8E, 
   0x8C, 0x93, 0x8E, 0x86, 0x8F, 0x89, 0x82, 0x87, 0x82, 0x7C, 0x7A, 0x80, 0x78, 0x7D, 0x82, 0x79, 
   0x8A, 0x8C, 0x83, 0x9D, 0x9A, 0x92, 0xA7, 0xA2, 0x9B, 0xA2, 0x9B, 0x94, 0x7C, 0x75, 0x68, 0x7C, 
   0x75, 0x68, 0x93, 0x87, 0x83, 0x87, 0x77, 0x74, 0x79, 0x69, 0x68, 0x5B, 0x4D, 0x53, 0x2F, 0x29, 
   0x2E, 0x25, 0x28, 0x25, 0x25, 0x22, 0x20, 0x2B, 0x2F, 0x2E, 0x4C, 0x51, 0x4C, 0x51, 0x57, 0x54, 
   0x4F, 0x51, 0x53, 0x51, 0x4E, 0x52, 0x56, 0x52, 0x58, 0x55, 0x53, 0x5C, 0x58, 0x5B, 0x61, 0x5F, 
   0x61, 0x69, 0x5E, 0x61, 0x65, 0x59, 0x5C, 0x60, 0x58, 0x5B, 0x62, 0x56, 0x5D, 0x61, 0x5C, 0x61, 
   0x61, 0x64, 0x61, 0x64, 0x5F, 0x5C, 0x5F, 0x63, 0x61, 0x66, 0x67, 0x6B, 0x71, 0x60, 0x69, 0x72, 
   0x5E, 0x66, 0x70, 0x6B, 0x70, 0x76, 0x71, 0x70, 0x79, 0x61, 0x60, 0x6C, 0x53, 0x50, 0x59, 0x40, 
   0x39, 0x42, 0x34, 0x33, 0x36, 0x58, 0x62, 0x5B, 0x78, 0x7E, 0x79, 0x82, 0x82, 0x83, 0x74, 0x72, 
   0x75, 0x6F, 0x69, 0x6A, 0x6B, 0x64, 0x66, 0x5E, 0x5A, 0x60, 0x5F, 0x5E, 0x5C, 0x5F, 0x64, 0x5D, 
   0x7E, 0x83, 0x79, 0x94, 0x96, 0x90, 0x8E, 0x8F, 0x89, 0x8A, 0x8C, 0x86, 0x8A, 0x8D, 0x89, 0x90, 
   0x8F, 0x8A, 0x91, 0x8E, 0x85, 0x81, 0x7F, 0x77, 0x84, 0x87, 0x81, 0x94, 0x98, 0x96, 0x91, 0x94, 
   0x96, 0x9E, 0x9B, 0x9B, 0xA0, 0x9C, 0x97, 0xAA, 0xA4, 0x9F, 0xB5, 0xAD, 0xA4, 0xA2, 0x97, 0x95, 
   0x83, 0x7E, 0x81, 0x70, 0x69, 0x71, 0x7C, 0x78, 0x81, 0x89, 0x91, 0x98, 0x8C, 0x97, 0x9A, 0xA9, 
   0xB0, 0xAF, 0xA8, 0xA7, 0xAE, 0xAD, 0xAB, 0xB4, 0x9E, 0xA1, 0xAF, 0x80, 0x8D, 0xA3, 0x7C, 0x85, 
   0xA3, 0x76, 0x7F, 0xA1, 0x7B, 0x83, 0xA5, 0x73, 0x84, 0x9C, 0x71, 0x82, 0x9B, 0x71, 0x83, 0x9E, 
   0x73, 0x81, 0x9A, 0x7B, 0x85, 0x9E, 0x76, 0x80, 0x98, 0x78, 0x85, 0x9C, 0x70, 0x77, 0x94, 0x5E, 
   0x6C, 0x89, 0x66, 0x79, 0x9B, 0x69, 0x7A, 0xA1, 0x62, 0x75, 0x9A, 0x5B, 0x6E, 0x95, 0x5C, 0x6E, 
   0x93, 0x5C, 0x6A, 0x8F, 0x45, 0x4F, 0x6C, 0x50, 0x5E, 0x70, 0x60, 0x6E, 0x7C, 0x67, 0x6B, 0x74, 
   0x7A, 0x79, 0x80, 0x8E, 0x8C, 0x8F, 0x6E, 0x71, 0x75, 0x7B, 0x7D, 0x86, 0x72, 0x73, 0x7C, 0x75, 
   0x75, 0x80, 0x79, 0x76, 0x85, 0x7B, 0x78, 0x86, 0x74, 0x73, 0x79, 0x73, 0x74, 0x75, 0x86, 0x89, 
   0x8C, 0x86, 0x8D, 0x92, 0x5D, 0x61, 0x63, 0x38, 0x3A, 0x40, 0x67, 0x6E, 0x7E, 0x8C, 0x93, 0xA2, 
   0x95, 0x96, 0x9C, 0x87, 0x84, 0x88, 0x41, 0x3E, 0x3E, 0x27, 0x28, 0x27, 0x2E, 0x2E, 0x2E, 0x33, 
   0x36, 0x34, 0x6B, 0x78, 0x75, 0x94, 0xA2, 0xA7, 0x95, 0x9C, 0xA4, 0x94, 0x98, 0xA0, 0x94, 0x9A, 
   0xA0, 0x92, 0x9E, 0xA3, 0x8E, 0x9B, 0xA2, 0x8C, 0x95, 0x9F, 0x83, 0x8C, 0x96, 0x69, 0x77, 0x7E, 
   0x60, 0x6E, 0x75, 0x7A, 0x7A, 0x83, 0x7F, 0x7C, 0x86, 0x7B, 0x7A, 0x85, 0x6D, 0x6A, 0x77, 0x5D, 
   0x58, 0x67, 0x5A, 0x5A, 0x69, 0x60, 0x64, 0x74, 0x62, 0x65, 0x75, 0x5A, 0x5C, 0x6B, 0x5C, 0x5C, 
   0x6B, 0x50, 0x4E, 0x5B, 0x49, 0x47, 0x53, 0x41, 0x3F, 0x4D, 0x36, 0x38, 0x3F, 0x40, 0x46, 0x4A, 
   0x70, 0x75, 0x7E, 0x7D, 0x83, 0x89, 0x79, 0x7D, 0x86, 0x7D, 0x82, 0x8B, 0x81, 0x85, 0x8B, 0x84, 
   0x86, 0x8E, 0x8F, 0x91, 0x9A, 0x93, 0x94, 0x9B, 0x96, 0x91, 0x97, 0x91, 0x8A, 0x95, 0x8E, 0x8D, 
   0x99, 0x88, 0x8C, 0x97, 0x57, 0x62, 0x76, 0x54, 0x65, 0x7F, 0x5C, 0x67, 0x88, 0x46, 0x50, 0x6A, 
   0x1E, 0x29, 0x30, 0x36, 0x3B, 0x40, 0x56, 0x5A, 0x5D, 0x5D, 0x60, 0x64, 0x65, 0x64, 0x69, 0x63, 
   0x61, 0x66, 0x57, 0x58, 0x5C, 0x56, 0x58, 0x5C, 0x53, 0x52, 0x57, 0x53, 0x54, 0x57, 0x56, 0x5A, 
   0x5D, 0x5A, 0x61, 0x62, 0x63, 0x6C, 0x6B, 0x78, 0x82, 0x7F, 0x71, 0x79, 0x79, 0x62, 0x69, 0x6C, 
   0x56, 0x5C, 0x61, 0x4D, 0x56, 0x5C, 0x4B, 0x56, 0x5C, 0x47, 0x51, 0x5A, 0x48, 0x4F, 0x5B, 0x4C, 
   0x4E, 0x5D, 0x52, 0x52, 0x5F, 0x57, 0x5A, 0x62, 0x4F, 0x55, 0x5F, 0x47, 0x46, 0x56, 0x40, 0x3F, 
   0x4A, 0x67, 0x69, 0x73, 0x77, 0x78, 0x83, 0x6B, 0x6E, 0x7F, 0x67, 0x6A, 0x80, 0x7C, 0x7D, 0x90, 
   0x8C, 0x89, 0x99, 0x7C, 0x77, 0x8B, 0x75, 0x72, 0x8B, 0x73, 0x70, 0x88, 0x75, 0x6E, 0x81, 0x74, 
   0x6C, 0x80, 0x71, 0x6A, 0x81, 0x69, 0x64, 0x7D, 0x6B, 0x67, 0x7D, 0x8D, 0x89, 0x9C, 0x91, 0x8D, 
   0x9E, 0x93, 0x95, 0x9C, 0x9B, 0x99, 0xA2, 0x9A, 0x94, 0xA0, 0x9A, 0x92, 0x9D, 0x94, 0x8D, 0x9A, 
   0x92, 0x8B, 0x9A, 0x97, 0x95, 0x9C, 0x94, 0x91, 0x9A, 0x82, 0x82, 0x90, 0x88, 0x8D, 0x99, 0x90, 
   0x94, 0x9E, 0x83, 0x88, 0x8C, 0x79, 0x7E, 0x7E, 0x86, 0x8D, 0x8F, 0x8F, 0x99, 0xA0, 0x9A, 0xA2, 
   0xAC, 0x8A, 0x8E, 0x99, 0x7D, 0x7D, 0x89, 0x84, 0x84, 0x90, 0x95, 0x95, 0xA4, 0x95, 0x96, 0xA5, 
   0x8A, 0x8A, 0x93, 0x6C, 0x69, 0x6A, 0x6B, 0x6A, 0x68, 0x80, 0x83, 0x84, 0x9B, 0x9F, 0xA3, 0x88, 
   0x8A, 0x93, 0x41, 0x3F, 0x43, 0x24, 0x2B, 0x22, 0x48, 0x51, 0x4D, 0x5B, 0x61, 0x62, 0x5E, 0x63, 
   0x60, 0x64, 0x67, 0x67, 0x6B, 0x71, 0x74, 0x6F, 0x70, 0x79, 0x6E, 0x70, 0x75, 0x6C, 0x6D, 0x74, 
   0x75, 0x75, 0x79, 0x7F, 0x7D, 0x7F, 0x79, 0x77, 0x71, 0x80, 0x7D, 0x73, 0x9C, 0x96, 0x95, 0x99, 
   0x96, 0x96, 0x9D, 0x9A, 0x9E, 0x99, 0x94, 0x93, 0x96, 0x95, 0x8F, 0x9F, 0x9A, 0x97, 0x94, 0x8E, 
   0x8A, 0x8D, 0x88, 0x82, 0x8B, 0x83, 0x80, 0x82, 0x7A, 0x79, 0x75, 0x75, 0x71, 0x7D, 0x7D, 0x76, 
   0x8F, 0x8E, 0x85, 0x99, 0x95, 0x8A, 0x81, 0x7D, 0x72, 0x73, 0x71, 0x67, 0x75, 0x72, 0x64, 0x7F, 
   0x7A, 0x6C, 0x9B, 0x91, 0x8A, 0xA0, 0x97, 0x8F, 0x9D, 0x91, 0x87, 0x86, 0x74, 0x72, 0x43, 0x34, 
   0x3D, 0x34, 0x34, 0x3D, 0x24, 0x22, 0x2A, 0x1F, 0x1F, 0x23, 0x40, 0x43, 0x40, 0x50, 0x55, 0x53, 
   0x53, 0x55, 0x58, 0x5A, 0x5A, 0x5D, 0x5E, 0x5F, 0x63, 0x5B, 0x5D, 0x64, 0x5E, 0x60, 0x64, 0x68, 
   0x69, 0x6E, 0x62, 0x67, 0x6D, 0x5E, 0x60, 0x66, 0x5F, 0x5E, 0x68, 0x59, 0x5F, 0x65, 0x5B, 0x63, 
   0x67, 0x63, 0x64, 0x6A, 0x62, 0x62, 0x65, 0x69, 0x6A, 0x6F, 0x69, 0x74, 0x79, 0x63, 0x71, 0x78, 
   0x66, 0x6F, 0x76, 0x68, 0x6B, 0x6F, 0x66, 0x66, 0x6C, 0x5E, 0x5F, 0x68, 0x5E, 0x5C, 0x66, 0x5B, 
   0x57, 0x5F, 0x53, 0x52, 0x59, 0x4D, 0x57, 0x55, 0x5B, 0x69, 0x62, 0x7C, 0x87, 0x85, 0x7A, 0x7F, 
   0x7D, 0x7C, 0x76, 0x71, 0x73, 0x68, 0x63, 0x65, 0x60, 0x5D, 0x63, 0x5E, 0x5B, 0x61, 0x5E, 0x5B, 
   0x75, 0x77, 0x72, 0x81, 0x83, 0x7C, 0x85, 0x84, 0x7E, 0x88, 0x87, 0x85, 0x86, 0x85, 0x85, 0x8A, 
   0x85, 0x81, 0x89, 0x83, 0x7C, 0x88, 0x82, 0x7B, 0x83, 0x7F, 0x7D, 0x79, 0x78, 0x74, 0x81, 0x83, 
   0x7D, 0x8C, 0x8F, 0x87, 0x97, 0x99, 0x8F, 0xA2, 0x9F, 0x96, 0x95, 0x8A, 0x83, 0x64, 0x5C, 0x5D, 
   0x60, 0x60, 0x64, 0x7B, 0x7D, 0x82, 0x82, 0x85, 0x8B, 0x89, 0x8F, 0x97, 0xAD, 0xB2, 0xB9, 0x9D, 
   0xA3, 0xA7, 0x9E, 0x9E, 0xA5, 0x9D, 0xA0, 0xAB, 0x83, 0x8C, 0x9D, 0x76, 0x83, 0x9A, 0x78, 0x83, 
   0xA0, 0x75, 0x7F, 0xA1, 0x75, 0x83, 0xA4, 0x6A, 0x7C, 0x97, 0x6D, 0x7E, 0x9C, 0x70, 0x82, 0xA2, 
   0x78, 0x85, 0xA3, 0x79, 0x80, 0x9B, 0x6A, 0x71, 0x8A, 0x79, 0x81, 0x98, 0x83, 0x84, 0x9D, 0x6D, 
   0x73, 0x90, 0x67, 0x73, 0x93, 0x62, 0x70, 0x8E, 0x62, 0x71, 0x93, 0x67, 0x75, 0x9E, 0x66, 0x74, 
   0x9E, 0x65, 0x70, 0x97, 0x47, 0x4C, 0x66, 0x34, 0x35, 0x40, 0x57, 0x5B, 0x61, 0x71, 0x73, 0x77, 
   0x86, 0x84, 0x87, 0x90, 0x91, 0x94, 0x69, 0x6A, 0x6E, 0x6D, 0x6E, 0x76, 0x6F, 0x6E, 0x78, 0x76, 
   0x74, 0x80, 0x7A, 0x74, 0x82, 0x7C, 0x79, 0x85, 0x73, 0x72, 0x77, 0x75, 0x75, 0x73, 0x8D, 0x90, 
   0x8C, 0x79, 0x80, 0x7D, 0x3F, 0x46, 0x43, 0x3D, 0x43, 0x43, 0x67, 0x6F, 0x79, 0x8D, 0x95, 0xA0, 
   0x8E, 0x93, 0x95, 0x78, 0x7A, 0x7C, 0x54, 0x51, 0x55, 0x40, 0x3C, 0x41, 0x2F, 0x2B, 0x30, 0x2E, 
   0x30, 0x2D, 0x6D, 0x7A, 0x76, 0x93, 0xA0, 0xA6, 0x92, 0x98, 0xA1, 0x91, 0x96, 0x9E, 0x90, 0x96, 
   0x9E, 0x8E, 0x99, 0xA0, 0x91, 0x9C, 0xA4, 0x8C, 0x93, 0x9E, 0x70, 0x79, 0x84, 0x5D, 0x68, 0x72, 
   0x74, 0x7E, 0x8A, 0x84, 0x87, 0x91, 0x84, 0x86, 0x8E, 0x8C, 0x8D, 0x96, 0x8F, 0x8B, 0x98, 0x84, 
   0x80, 0x90, 0x85, 0x85, 0x96, 0x8F, 0x92, 0xA1, 0x99, 0x99, 0xA7, 0x9A, 0x98, 0xA3, 0x9A, 0x98, 
   0xA2, 0x9A, 0x98, 0xA1, 0x9E, 0x9A, 0xA5, 0x98, 0x92, 0xA0, 0x7F, 0x7A, 0x88, 0x54, 0x52, 0x5D, 
   0x59, 0x5A, 0x64, 0x72, 0x76, 0x7B, 0x77, 0x7B, 0x86, 0x7D, 0x83, 0x8D, 0x81, 0x85, 0x8A, 0x81, 
   0x83, 0x88, 0x89, 0x8A, 0x95, 0x8C, 0x8D, 0x99, 0x8D, 0x8A, 0x95, 0x87, 0x84, 0x92, 0x85, 0x89, 
   0x95, 0x83, 0x91, 0xA1, 0x65, 0x7A, 0x8E, 0x6D, 0x82, 0x97, 0x64, 0x78, 0x93, 0x54, 0x67, 0x81, 
   0x2D, 0x39, 0x46, 0x2A, 0x2F, 0x34, 0x4B, 0x4F, 0x54, 0x53, 0x57, 0x57, 0x61, 0x61, 0x60, 0x5C, 
   0x5A, 0x5C, 0x4B, 0x4C, 0x4D, 0x48, 0x49, 0x4A, 0x3D, 0x3C, 0x40, 0x3B, 0x3D, 0x42, 0x3E, 0x40, 
   0x48, 0x47, 0x4C, 0x53, 0x50, 0x57, 0x5A, 0x5C, 0x63, 0x65, 0x5A, 0x61, 0x69, 0x52, 0x5B, 0x64, 
   0x4E, 0x5B, 0x61, 0x4E, 0x5A, 0x61, 0x50, 0x5B, 0x64, 0x56, 0x5F, 0x6A, 0x5B, 0x61, 0x70, 0x63, 
   0x65, 0x76, 0x67, 0x69, 0x79, 0x6D, 0x74, 0x80, 0x74, 0x7D, 0x8A, 0x6B, 0x6C, 0x7E, 0x37, 0x35, 
   0x3F, 0x4A, 0x4C, 0x51, 0x6C, 0x6F, 0x76, 0x65, 0x69, 0x76, 0x6C, 0x6D, 0x80, 0x81, 0x7C, 0x90, 
   0xA5, 0x9F, 0xAE, 0xA4, 0x9E, 0xAE, 0x84, 0x7F, 0x94, 0x70, 0x6A, 0x82, 0x6F, 0x69, 0x7F, 0x6B, 
   0x66, 0x7F, 0x6B, 0x66, 0x7F, 0x68, 0x63, 0x7B, 0x63, 0x60, 0x7B, 0x63, 0x62, 0x7F, 0x64, 0x62, 
   0x7F, 0x76, 0x79, 0x86, 0x95, 0x95, 0xA3, 0x94, 0x91, 0xA0, 0x95, 0x91, 0x9D, 0x8D, 0x87, 0x97, 
   0x84, 0x7E, 0x90, 0x94, 0x91, 0x9B, 0x83, 0x82, 0x8B, 0x79, 0x7B, 0x87, 0x8A, 0x8D, 0x96, 0x94, 
   0x96, 0x9E, 0x72, 0x79, 0x7B, 0x6C, 0x75, 0x76, 0x7B, 0x84, 0x89, 0x86, 0x93, 0x98, 0x8D, 0x9B, 
   0xA0, 0x98, 0xA1, 0xA9, 0x95, 0x9B, 0xA2, 0x95, 0x9E, 0xA5, 0xAB, 0xB4, 0xC0, 0xA9, 0xAF, 0xBB, 
   0x9D, 0x9F, 0xA8, 0x91, 0x8E, 0x95, 0x84, 0x7D, 0x86, 0x75, 0x6F, 0x79, 0x78, 0x74, 0x7C, 0x65, 
   0x5F, 0x69, 0x2B, 0x25, 0x2B, 0x1A, 0x1B, 0x12, 0x4D, 0x59, 0x52, 0x5D, 0x69, 0x6E, 0x65, 0x6D, 
   0x73, 0x62, 0x6B, 0x73, 0x69, 0x75, 0x7C, 0x6A, 0x73, 0x7D, 0x6F, 0x7A, 0x80, 0x6D, 0x76, 0x7F, 
   0x76, 0x7E, 0x83, 0x8E, 0x91, 0x95, 0x97, 0x96, 0x91, 0xA5, 0xA0, 0x98, 0xAC, 0xA5, 0x9F, 0xA4, 
   0xA1, 0x9E, 0xAE, 0xA9, 0xAA, 0x9D, 0x96, 0x92, 0x96, 0x92, 0x8A, 0x95, 0x93, 0x8C, 0x8E, 0x8D, 
   0x85, 0x8C, 0x8A, 0x82, 0x87, 0x80, 0x7F, 0x7B, 0x73, 0x72, 0x76, 0x75, 0x6E, 0x8A, 0x88, 0x7C, 
   0x9E, 0x9B, 0x90, 0x8C, 0x87, 0x7D, 0x78, 0x74, 0x6D, 0x70, 0x6D, 0x68, 0x76, 0x74, 0x6B, 0x8A, 
   0x83, 0x7B, 0x94, 0x8C, 0x87, 0x96, 0x90, 0x89, 0x9D, 0x98, 0x88, 0x9D, 0x8D, 0x84, 0x5D, 0x4D, 
   0x53, 0x54, 0x52, 0x5E, 0x48, 0x44, 0x4E, 0x20, 0x1D, 0x21, 0x37, 0x3B, 0x3A, 0x52, 0x59, 0x58, 
   0x53, 0x57, 0x59, 0x57, 0x58, 0x5B, 0x5B, 0x5E, 0x61, 0x5D, 0x61, 0x65, 0x5D, 0x60, 0x62, 0x60, 
   0x61, 0x63, 0x5F, 0x62, 0x6C, 0x5E, 0x62, 0x68, 0x5D, 0x5F, 0x65, 0x57, 0x5C, 0x62, 0x5A, 0x5F, 
   0x66, 0x5B, 0x5B, 0x62, 0x59, 0x5F, 0x61, 0x60, 0x65, 0x6D, 0x60, 0x6D, 0x75, 0x61, 0x71, 0x7A, 
   0x66, 0x70, 0x78, 0x66, 0x6A, 0x70, 0x61, 0x64, 0x69, 0x5A, 0x5E, 0x64, 0x5A, 0x5D, 0x5F, 0x54, 
   0x56, 0x57, 0x52, 0x51, 0x57, 0x4F, 0x54, 0x55, 0x49, 0x57, 0x51, 0x55, 0x62, 0x5E, 0x6F, 0x75, 
   0x71, 0x7E, 0x7A, 0x73, 0x6D, 0x63, 0x5B, 0x66, 0x61, 0x5C, 0x63, 0x60, 0x5A, 0x64, 0x60, 0x5A, 
   0x78, 0x79, 0x72, 0x86, 0x87, 0x7E, 0x8A, 0x86, 0x7F, 0x86, 0x84, 0x81, 0x81, 0x80, 0x7C, 0x87, 
   0x82, 0x7A, 0x81, 0x7F, 0x75, 0x80, 0x7F, 0x77, 0x94, 0x94, 0x95, 0xA5, 0x9F, 0x9E, 0x99, 0x93, 
   0x8D, 0x6F, 0x6D, 0x68, 0x5F, 0x5F, 0x5B, 0x61, 0x60, 0x5D, 0x5E, 0x5A, 0x5C, 0x67, 0x64, 0x69, 
   0x7C, 0x7E, 0x85, 0x7E, 0x83, 0x8A, 0x7F, 0x86, 0x8C, 0x88, 0x8A, 0x92, 0x97, 0x97, 0x9F, 0x8E, 
   0x93, 0x98, 0xA0, 0xA1, 0xA7, 0x8E, 0x8E, 0x9F, 0x79, 0x80, 0x98, 0x78, 0x83, 0x9E, 0x74, 0x83, 
   0x9F, 0x74, 0x7E, 0xA0, 0x6F, 0x7A, 0x9D, 0x65, 0x74, 0x93, 0x69, 0x79, 0x98, 0x6A, 0x7B, 0x9A, 
   0x70, 0x7E, 0x99, 0x6C, 0x75, 0x8F, 0x63, 0x6C, 0x85, 0x75, 0x7C, 0x93, 0x7C, 0x7F, 0x96, 0x74, 
   0x77, 0x91, 0x64, 0x69, 0x86, 0x53, 0x5F, 0x74, 0x5E, 0x6D, 0x86, 0x71, 0x84, 0xA4, 0x73, 0x83, 
   0xA6, 0x5D, 0x6A, 0x8F, 0x4E, 0x55, 0x71, 0x3C, 0x3F, 0x51, 0x58, 0x5F, 0x6A, 0x69, 0x70, 0x76, 
   0x7D, 0x7F, 0x82, 0x8C, 0x8F, 0x93, 0x5F, 0x5F, 0x63, 0x5C, 0x5F, 0x66, 0x67, 0x67, 0x6F, 0x71, 
   0x71, 0x79, 0x74, 0x72, 0x7A, 0x74, 0x71, 0x78, 0x73, 0x70, 0x74, 0x7E, 0x80, 0x7F, 0x88, 0x8D, 
   0x87, 0x45, 0x4C, 0x47, 0x15, 0x1D, 0x1B, 0x27, 0x30, 0x31, 0x59, 0x62, 0x6D, 0x7B, 0x85, 0x93, 
   0x85, 0x90, 0x96, 0x89, 0x8F, 0x98, 0x7F, 0x80, 0x8B, 0x6B, 0x6A, 0x76, 0x4A, 0x47, 0x52, 0x31, 
   0x36, 0x34, 0x77, 0x83, 0x80, 0x94, 0x9E, 0xA5, 0x8E, 0x93, 0x9C, 0x91, 0x95, 0x9E, 0x8E, 0x96, 
   0x9F, 0x8D, 0x97, 0xA0, 0x91, 0x9B, 0xA5, 0x8F, 0x97, 0xA2, 0x62, 0x69, 0x75, 0x72, 0x7B, 0x87, 
   0x8D, 0x92, 0xA1, 0x87, 0x8D, 0x99, 0x83, 0x8D, 0x96, 0x8B, 0x92, 0x9A, 0x93, 0x92, 0x9C, 0x94, 
   0x90, 0x9C, 0x92, 0x91, 0x9C, 0x99, 0x97, 0xA1, 0x9F, 0x9A, 0xA3, 0x9E, 0x99, 0xA0, 0x9A, 0x99, 
   0x9F, 0x98, 0x99, 0xA0, 0x99, 0x99, 0xA1, 0x9B, 0x98, 0xA4, 0x97, 0x90, 0x9E, 0x79, 0x72, 0x7F, 
   0x54, 0x4F, 0x58, 0x6D, 0x71, 0x75, 0x78, 0x80, 0x87, 0x7F, 0x88, 0x8F, 0x83, 0x87, 0x8D, 0x80, 
   0x83, 0x88, 0x7C, 0x82, 0x88, 0x82, 0x89, 0x91, 0x80, 0x86, 0x8E, 0x76, 0x7D, 0x8A, 0x75, 0x84, 
   0x95, 0x71, 0x8B, 0x9C, 0x61, 0x82, 0x96, 0x63, 0x80, 0x97, 0x52, 0x6A, 0x85, 0x3D, 0x52, 0x6B, 
   0x2B, 0x38, 0x44, 0x22, 0x29, 0x2D, 0x37, 0x3C, 0x48, 0x40, 0x43, 0x48, 0x48, 0x4B, 0x4E, 0x49, 
   0x4B, 0x51, 0x42, 0x47, 0x4D, 0x41, 0x47, 0x4D, 0x3D, 0x42, 0x49, 0x3C, 0x41, 0x49, 0x48, 0x4B, 
   0x56, 0x54, 0x58, 0x63, 0x53, 0x59, 0x60, 0x53, 0x5A, 0x5D, 0x57, 0x5D, 0x65, 0x58, 0x5F, 0x6B, 
   0x55, 0x5E, 0x6B, 0x5C, 0x64, 0x71, 0x65, 0x6D, 0x79, 0x7B, 0x82, 0x8D, 0x84, 0x8C, 0x98, 0x8E, 
   0x95, 0x9F, 0x91, 0x96, 0xA1, 0x91, 0x99, 0xA3, 0x95, 0xA1, 0xAC, 0x92, 0x96, 0xA7, 0x48, 0x49, 
   0x56, 0x32, 0x36, 0x3D, 0x51, 0x56, 0x61, 0x5A, 0x5B, 0x68, 0x6B, 0x65, 0x78, 0x7A, 0x70, 0x89, 
   0x85, 0x7E, 0x91, 0x96, 0x93, 0xA4, 0x92, 0x8E, 0xA2, 0x7A, 0x74, 0x8B, 0x71, 0x66, 0x81, 0x6E, 
   0x65, 0x82, 0x6B, 0x62, 0x7D, 0x68, 0x5E, 0x76, 0x62, 0x5C, 0x78, 0x60, 0x5D, 0x7F, 0x61, 0x5D, 
   0x80, 0x61, 0x61, 0x77, 0x82, 0x82, 0x92, 0x93, 0x90, 0x9F, 0x94, 0x91, 0x9E, 0x94, 0x90, 0x9C, 
   0x8E, 0x89, 0x97, 0x90, 0x8C, 0x97, 0x7A, 0x7A, 0x86, 0x7A, 0x7D, 0x89, 0x87, 0x88, 0x91, 0x91, 
   0x91, 0x97, 0x5C, 0x62, 0x66, 0x80, 0x8B, 0x8F, 0x93, 0x9C, 0xA4, 0x8B, 0x95, 0x9B, 0x8F, 0x9B, 
   0xA0, 0x93, 0x9B, 0xA0, 0x91, 0x97, 0x9A, 0x90, 0x9B, 0x9B, 0x9A, 0xA5, 0xA9, 0xA1, 0xA8, 0xB1, 
   0x9D, 0xA0, 0xA9, 0x93, 0x94, 0x9C, 0x96, 0x95, 0x9F, 0x8E, 0x8E, 0x98, 0x8F, 0x8E, 0x96, 0x87, 
   0x82, 0x8D, 0x61, 0x5A, 0x64, 0x2B, 0x24, 0x27, 0x30, 0x37, 0x31, 0x57, 0x65, 0x68, 0x69, 0x73, 
   0x80, 0x60, 0x6B, 0x79, 0x63, 0x6C, 0x79, 0x61, 0x6A, 0x77, 0x68, 0x75, 0x7E, 0x69, 0x77, 0x7F, 
   0x70, 0x7E, 0x82, 0x8F, 0x9B, 0x9C, 0xA2, 0xAA, 0xA5, 0xA8, 0xAA, 0xA6, 0xB1, 0xAD, 0xAB, 0xAF, 
   0xAE, 0xA7, 0xA8, 0xA3, 0x9E, 0x9A, 0x90, 0x88, 0x96, 0x8F, 0x86, 0x8D, 0x8C, 0x83, 0x8A, 0x8C, 
   0x80, 0x86, 0x87, 0x80, 0x7D, 0x7A, 0x77, 0x72, 0x6D, 0x69, 0x70, 0x72, 0x66, 0x85, 0x85, 0x75, 
   0x88, 0x86, 0x7B, 0x77, 0x72, 0x6D, 0x74, 0x71, 0x70, 0x6E, 0x69, 0x67, 0x77, 0x74, 0x6B, 0x91, 
   0x8C, 0x81, 0x96, 0x90, 0x88, 0x95, 0x8E, 0x84, 0x96, 0x8E, 0x7F, 0x98, 0x8A, 0x80, 0x78, 0x6B, 
   0x6D, 0x5E, 0x57, 0x60, 0x5C, 0x53, 0x5C, 0x25, 0x1F, 0x22, 0x26, 0x29, 0x28, 0x47, 0x4F, 0x4F, 
   0x50, 0x56, 0x57, 0x53, 0x55, 0x58, 0x5B, 0x5B, 0x5F, 0x5E, 0x60, 0x63, 0x5E, 0x61, 0x62, 0x5F, 
   0x61, 0x61, 0x59, 0x5B, 0x66, 0x59, 0x5F, 0x63, 0x5B, 0x60, 0x62, 0x59, 0x5D, 0x5F, 0x5A, 0x5A, 
   0x5E, 0x59, 0x55, 0x5C, 0x55, 0x5A, 0x5E, 0x5D, 0x61, 0x67, 0x60, 0x67, 0x6E, 0x5D, 0x65, 0x6D, 
   0x5B, 0x62, 0x69, 0x5D, 0x64, 0x67, 0x62, 0x65, 0x68, 0x5D, 0x5F, 0x63, 0x56, 0x5A, 0x5C, 0x4E, 
   0x51, 0x54, 0x4F, 0x4D, 0x51, 0x4C, 0x4C, 0x4B, 0x40, 0x46, 0x44, 0x3E, 0x43, 0x3E, 0x5C, 0x60, 
   0x56, 0x72, 0x74, 0x6C, 0x6A, 0x68, 0x64, 0x6A, 0x67, 0x67, 0x64, 0x66, 0x62, 0x6A, 0x6E, 0x67, 
   0x84, 0x87, 0x81, 0x93, 0x92, 0x8C, 0x90, 0x88, 0x83, 0x89, 0x81, 0x7F, 0x83, 0x79, 0x75, 0x86, 
   0x7B, 0x74, 0x8D, 0x89, 0x83, 0x9B, 0x9B, 0x97, 0xA1, 0xA4, 0xA2, 0xA3, 0x9B, 0x97, 0x8C, 0x82, 
   0x7D, 0x50, 0x4B, 0x4C, 0x4D, 0x4E, 0x51, 0x64, 0x65, 0x69, 0x70, 0x6E, 0x76, 0x7D, 0x7D, 0x84, 
   0x82, 0x7F, 0x8A, 0x75, 0x74, 0x80, 0x7A, 0x7E, 0x88, 0x81, 0x84, 0x8D, 0x88, 0x87, 0x8E, 0x8B, 
   0x93, 0x93, 0xA2, 0xA6, 0xAC, 0x83, 0x83, 0x9A, 0x76, 0x7B, 0x99, 0x77, 0x81, 0x9F, 0x75, 0x87, 
   0xA4, 0x6F, 0x7B, 0x9C, 0x65, 0x72, 0x95, 0x63, 0x73, 0x94, 0x68, 0x78, 0x96, 0x6A, 0x74, 0x91, 
   0x6A, 0x73, 0x8C, 0x73, 0x81, 0x99, 0x6F, 0x7D, 0x95, 0x70, 0x7B, 0x90, 0x73, 0x7A, 0x90, 0x78, 
   0x7B, 0x92, 0x67, 0x67, 0x84, 0x5A, 0x60, 0x7C, 0x5B, 0x69, 0x84, 0x66, 0x7B, 0x9A, 0x6E, 0x7F, 
   0x9F, 0x68, 0x73, 0x97, 0x5C, 0x68, 0x8D, 0x54, 0x63, 0x84, 0x5E, 0x6B, 0x84, 0x65, 0x6B, 0x7C, 
   0x74, 0x75, 0x7D, 0x82, 0x86, 0x8F, 0x5E, 0x5E, 0x62, 0x5C, 0x5D, 0x64, 0x64, 0x65, 0x69, 0x6E, 
   0x6D, 0x74, 0x72, 0x73, 0x7B, 0x78, 0x77, 0x7D, 0x81, 0x87, 0x85, 0x8D, 0x99, 0x94, 0x63, 0x70, 
   0x6D, 0x1B, 0x26, 0x26, 0x1F, 0x26, 0x29, 0x34, 0x3B, 0x42, 0x5C, 0x67, 0x73, 0x80, 0x89, 0x96, 
   0x91, 0x98, 0x9F, 0x96, 0x9C, 0xA6, 0xA0, 0xA9, 0xAF, 0xA1, 0xA8, 0xB1, 0x7A, 0x7E, 0x88, 0x31, 
   0x3A, 0x39, 0x61, 0x6D, 0x68, 0x96, 0x9E, 0xA3, 0x93, 0x98, 0xA1, 0x91, 0x97, 0x9D, 0x8D, 0x97, 
   0x9E, 0x8A, 0x95, 0x9D, 0x8F, 0x98, 0xA1, 0x84, 0x8C, 0x95, 0x58, 0x60, 0x69, 0x7F, 0x86, 0x92, 
   0x88, 0x91, 0x9D, 0x88, 0x91, 0x9D, 0x88, 0x91, 0x9D, 0x8A, 0x93, 0x9D, 0x8D, 0x93, 0x9B, 0x92, 
   0x94, 0x9C, 0x96, 0x98, 0x9F, 0x95, 0x98, 0x9E, 0x9C, 0x9A, 0xA0, 0x9D, 0x9A, 0xA0, 0x99, 0x98, 
   0x9E, 0x9A, 0x98, 0x9F, 0x9D, 0x98, 0xA1, 0x9C, 0x96, 0x9F, 0x95, 0x8E, 0x98, 0x8C, 0x83, 0x8F, 
   0x64, 0x61, 0x6A, 0x5F, 0x67, 0x6A, 0x71, 0x7B, 0x81, 0x83, 0x8B, 0x91, 0x8D, 0x8F, 0x96, 0x81, 
   0x82, 0x88, 0x66, 0x6C, 0x72, 0x68, 0x70, 0x77, 0x78, 0x82, 0x85, 0x84, 0x8F, 0x99, 0x78, 0x8A, 
   0x9B, 0x56, 0x6D, 0x80, 0x58, 0x75, 0x8D, 0x5E, 0x7A, 0x94, 0x48, 0x5D, 0x74, 0x34, 0x44, 0x56, 
   0x22, 0x2E, 0x3A, 0x13, 0x1F, 0x25, 0x2F, 0x35, 0x43, 0x35, 0x38, 0x42, 0x33, 0x36, 0x3F, 0x38, 
   0x3D, 0x48, 0x3E, 0x45, 0x50, 0x45, 0x4D, 0x57, 0x4D, 0x55, 0x60, 0x53, 0x59, 0x61, 0x5B, 0x5F, 
   0x6B, 0x64, 0x6A, 0x73, 0x5E, 0x65, 0x6A, 0x58, 0x5F, 0x64, 0x5F, 0x64, 0x6D, 0x6F, 0x72, 0x81, 
   0x84, 0x89, 0x9A, 0x9E, 0xA7, 0xB6, 0x9E, 0xAA, 0xB6, 0x9B, 0xA9, 0xB3, 0x9D, 0xA9, 0xB2, 0xA0, 
   0xAB, 0xB2, 0xA6, 0xB0, 0xB9, 0xA7, 0xB3, 0xBE, 0xA0, 0xAE, 0xB9, 0xA4, 0xAD, 0xBD, 0x82, 0x85, 
   0x97, 0x42, 0x44, 0x51, 0x3C, 0x3E, 0x4D, 0x4D, 0x4D, 0x5A, 0x61, 0x5A, 0x6C, 0x6E, 0x64, 0x7F, 
   0x6E, 0x69, 0x82, 0x78, 0x7A, 0x8D, 0x87, 0x88, 0x9B, 0x81, 0x7F, 0x94, 0x74, 0x6A, 0x83, 0x70, 
   0x64, 0x81, 0x6F, 0x63, 0x7E, 0x6E, 0x60, 0x7C, 0x6B, 0x5F, 0x7C, 0x66, 0x5C, 0x7C, 0x68, 0x5E, 
   0x7E, 0x64, 0x5E, 0x79, 0x7F, 0x7C, 0x8A, 0x96, 0x92, 0x9D, 0x9A, 0x96, 0xA0, 0xA4, 0xA0, 0xA6, 
   0x9C, 0x97, 0x9F, 0x85, 0x82, 0x88, 0x79, 0x7A, 0x84, 0x81, 0x82, 0x8E, 0x8E, 0x8E, 0x98, 0x86, 
   0x86, 0x8E, 0x54, 0x5A, 0x5F, 0x81, 0x8D, 0x92, 0x94, 0xA0, 0xA8, 0x8E, 0x99, 0xA1, 0x90, 0x9C, 
   0xA3, 0x95, 0x9D, 0xA4, 0x8F, 0x94, 0x99, 0x8E, 0x95, 0x97, 0x8E, 0x96, 0x9B, 0x96, 0x9B, 0xA4, 
   0x98, 0x9D, 0xA6, 0x8F, 0x95, 0x9C, 0x8F, 0x97, 0x9D, 0x89, 0x91, 0x97, 0x81, 0x8B, 0x91, 0x82, 
   0x89, 0x93, 0x85, 0x8C, 0x96, 0x6D, 0x68, 0x78, 0x24, 0x25, 0x28, 0x48, 0x53, 0x4F, 0x68, 0x71, 
   0x77, 0x6D, 0x73, 0x7F, 0x6C, 0x6E, 0x83, 0x5F, 0x64, 0x76, 0x64, 0x6B, 0x7B, 0x66, 0x6F, 0x7C, 
   0x70, 0x7C, 0x80, 0x92, 0x9D, 0x9C, 0x93, 0x9B, 0x96, 0x83, 0x88, 0x84, 0x91, 0x93, 0x8E, 0xB2, 
   0xB3, 0xA8, 0xB8, 0xB0, 0xA8, 0xA5, 0x9A, 0x94, 0x9A, 0x91, 0x8F, 0x8D, 0x8B, 0x8B, 0x88, 0x88, 
   0x82, 0x7D, 0x7F, 0x7C, 0x76, 0x75, 0x73, 0x72, 0x6F, 0x6A, 0x73, 0x75, 0x69, 0x86, 0x84, 0x77, 
   0x7E, 0x7B, 0x75, 0x76, 0x74, 0x72, 0x73, 0x72, 0x71, 0x6F, 0x69, 0x67, 0x7A, 0x78, 0x6B, 0x8B, 
   0x89, 0x7A, 0x91, 0x8D, 0x82, 0x94, 0x8C, 0x80, 0x8F, 0x86, 0x79, 0x8E, 0x84, 0x7D, 0x7D, 0x79, 
   0x7A, 0x63, 0x5E, 0x66, 0x5F, 0x58, 0x62, 0x2A, 0x25, 0x2C, 0x1B, 0x1C, 0x1D, 0x46, 0x50, 0x50, 
   0x5B, 0x63, 0x63, 0x55, 0x57, 0x5A, 0x5C, 0x5B, 0x60, 0x5C, 0x5D, 0x60, 0x5A, 0x5D, 0x61, 0x5A, 
   0x5F, 0x60, 0x57, 0x5B, 0x63, 0x58, 0x5C, 0x5F, 0x57, 0x5A, 0x5C, 0x54, 0x59, 0x58, 0x57, 0x57, 
   0x58, 0x59, 0x54, 0x5A, 0x55, 0x53, 0x57, 0x56, 0x58, 0x5B, 0x58, 0x5A, 0x5F, 0x57, 0x59, 0x61, 
   0x5A, 0x5F, 0x66, 0x55, 0x5B, 0x5D, 0x4E, 0x52, 0x54, 0x58, 0x58, 0x5E, 0x53, 0x55, 0x5A, 0x4F, 
   0x4F, 0x56, 0x49, 0x47, 0x4D, 0x43, 0x42, 0x45, 0x3F, 0x40, 0x46, 0x3D, 0x3E, 0x3F, 0x51, 0x55, 
   0x4D, 0x88, 0x8E, 0x88, 0x96, 0x99, 0x99, 0x6E, 0x70, 0x71, 0x5C, 0x64, 0x60, 0x71, 0x7B, 0x70, 
   0x96, 0x9D, 0x94, 0xA7, 0xAA, 0xA3, 0x95, 0x96, 0x8F, 0x96, 0x92, 0x90, 0xAF, 0xA4, 0xA3, 0xBD, 
   0xB1, 0xB1, 0x9D, 0x97, 0x96, 0x7C, 0x7B, 0x76, 0x80, 0x83, 0x7C, 0x8B, 0x86, 0x7D, 0x73, 0x6A, 
   0x68, 0x4F, 0x4C, 0x50, 0x5A, 0x5E, 0x64, 0x66, 0x6A, 0x73, 0x72, 0x74, 0x7D, 0x7D, 0x81, 0x84, 
   0x82, 0x7E, 0x88, 0x7A, 0x75, 0x81, 0x7C, 0x7D, 0x89, 0x84, 0x85, 0x91, 0x8B, 0x8B, 0x93, 0xA5, 
   0xAC, 0xAD, 0xA3, 0xA7, 0xB2, 0x81, 0x88, 0xA2, 0x76, 0x81, 0xA0, 0x75, 0x82, 0xA0, 0x71, 0x82, 
   0xA0, 0x66, 0x77, 0x98, 0x61, 0x72, 0x94, 0x63, 0x73, 0x93, 0x64, 0x76, 0x94, 0x65, 0x72, 0x91, 
   0x71, 0x7E, 0x99, 0x7A, 0x88, 0xA2, 0x74, 0x7B, 0x96, 0x69, 0x6E, 0x85, 0x6C, 0x73, 0x8A, 0x7B, 
   0x7D, 0x94, 0x71, 0x70, 0x8D, 0x64, 0x66, 0x89, 0x67, 0x72, 0x8E, 0x69, 0x7B, 0x96, 0x6F, 0x81, 
   0xA1, 0x6C, 0x7C, 0xA0, 0x65, 0x79, 0xA1, 0x65, 0x7F, 0xA4, 0x65, 0x77, 0x97, 0x64, 0x6B, 0x84, 
   0x60, 0x63, 0x72, 0x6F, 0x78, 0x7F, 0x5D, 0x5B, 0x61, 0x63, 0x61, 0x67, 0x67, 0x68, 0x6D, 0x6D, 
   0x6D, 0x76, 0x74, 0x76, 0x7E, 0x7F, 0x83, 0x86, 0x65, 0x70, 0x6C, 0x3F, 0x4E, 0x49, 0x1C, 0x2D, 
   0x2B, 0x26, 0x32, 0x35, 0x33, 0x39, 0x3E, 0x3F, 0x43, 0x4E, 0x72, 0x7B, 0x86, 0x93, 0x9D, 0xA2, 
   0x9B, 0xA2, 0xA5, 0x98, 0xA1, 0xA4, 0xA5, 0xAF, 0xB1, 0x9B, 0xA6, 0xAB, 0x7E, 0x88, 0x90, 0x33, 
   0x3D, 0x3D, 0x4B, 0x55, 0x4E, 0x8C, 0x95, 0x94, 0x8F, 0x97, 0x9B, 0x8F, 0x95, 0x9B, 0x88, 0x93, 
   0x9A, 0x88, 0x94, 0x9B, 0x88, 0x92, 0x99, 0x70, 0x79, 0x80, 0x6B, 0x73, 0x7B, 0x83, 0x88, 0x95, 
   0x88, 0x8F, 0x9E, 0x8A, 0x91, 0xA0, 0x8A, 0x90, 0x9F, 0x8B, 0x8F, 0x9D, 0x8F, 0x90, 0x9C, 0x97, 
   0x97, 0xA0, 0x9D, 0x9D, 0xA5, 0x9C, 0x9B, 0xA3, 0x9F, 0x9A, 0xA3, 0x9E, 0x99, 0xA2, 0x95, 0x95, 
   0x9D, 0x94, 0x97, 0x9C, 0x9B, 0x99, 0x9F, 0xA0, 0x9B, 0x9D, 0x9F, 0x9A, 0x9F, 0xA0, 0x9D, 0xA7, 
   0x7D, 0x7E, 0x87, 0x41, 0x46, 0x4D, 0x44, 0x4C, 0x51, 0x56, 0x60, 0x64, 0x62, 0x6A, 0x6F, 0x5C, 
   0x64, 0x6A, 0x62, 0x69, 0x77, 0x88, 0x8F, 0x9B, 0xA3, 0xAB, 0xAD, 0xA0, 0xAA, 0xAB, 0x98, 0xA6, 
   0xAE, 0x5D, 0x6E, 0x82, 0x49, 0x5E, 0x77, 0x4F, 0x67, 0x7D, 0x38, 0x49, 0x57, 0x2B, 0x34, 0x3F, 
   0x1B, 0x25, 0x32, 0x14, 0x1E, 0x2D, 0x39, 0x40, 0x49, 0x4E, 0x4E, 0x5B, 0x51, 0x51, 0x5E, 0x50, 
   0x53, 0x5F, 0x51, 0x55, 0x60, 0x4E, 0x52, 0x5E, 0x4A, 0x4F, 0x59, 0x57, 0x59, 0x63, 0x5D, 0x61, 
   0x6C, 0x61, 0x67, 0x72, 0x71, 0x78, 0x83, 0x82, 0x89, 0x95, 0x91, 0x95, 0xA4, 0xA6, 0xAA, 0xB8, 
   0xB2, 0xBA, 0xC5, 0xB8, 0xC4, 0xCE, 0xB0, 0xBF, 0xC9, 0xAD, 0xBD, 0xC6, 0xA9, 0xB8, 0xC2, 0xA9, 
   0xB5, 0xC0, 0xAA, 0xB8, 0xC6, 0xA8, 0xB7, 0xC7, 0xA5, 0xB6, 0xC3, 0xA9, 0xBA, 0xC9, 0xAA, 0xB0, 
   0xC6, 0x83, 0x80, 0x93, 0x4B, 0x45, 0x55, 0x3C, 0x3D, 0x4C, 0x50, 0x4D, 0x5F, 0x5F, 0x56, 0x6E, 
   0x67, 0x64, 0x7B, 0x6E, 0x6F, 0x83, 0x7A, 0x7B, 0x8E, 0x84, 0x84, 0x99, 0x7C, 0x75, 0x8A, 0x72, 
   0x69, 0x7E, 0x72, 0x68, 0x80, 0x6C, 0x63, 0x7D, 0x65, 0x5D, 0x78, 0x62, 0x5A, 0x76, 0x5F, 0x59, 
   0x76, 0x67, 0x5F, 0x7B, 0x7F, 0x7B, 0x8B, 0x90, 0x8E, 0x97, 0x97, 0x96, 0x9D, 0x9F, 0x9D, 0xA5, 
   0x95, 0x93, 0x9B, 0x84, 0x85, 0x88, 0x82, 0x85, 0x8C, 0x89, 0x8B, 0x94, 0x80, 0x84, 0x8A, 0x67, 
   0x6B, 0x71, 0x5D, 0x64, 0x66, 0x71, 0x7F, 0x81, 0x82, 0x91, 0x98, 0x8E, 0x9C, 0xA7, 0x97, 0xA4, 
   0xB1, 0x9D, 0xA6, 0xB3, 0x92, 0x99, 0xA1, 0x8F, 0x98, 0x9E, 0x93, 0x9D, 0xA3, 0x99, 0xA1, 0xA7, 
   0x98, 0x9E, 0xA3, 0x93, 0x9A, 0xA0, 0x8F, 0x97, 0x9F, 0x83, 0x8C, 0x91, 0x7C, 0x87, 0x89, 0x7A, 
   0x85, 0x89, 0x85, 0x96, 0x9C, 0x8C, 0x93, 0xA3, 0x4A, 0x4D, 0x57, 0x4D, 0x57, 0x52, 0x84, 0x8D, 
   0x88, 0x80, 0x82, 0x86, 0x81, 0x83, 0x91, 0x76, 0x7C, 0x8A, 0x67, 0x6E, 0x7A, 0x6C, 0x6F, 0x7D, 
   0x74, 0x78, 0x7E, 0x80, 0x84, 0x84, 0x80, 0x82, 0x7D, 0x83, 0x83, 0x7E, 0x96, 0x94, 0x91, 0x9E, 
   0x9C, 0x94, 0xA5, 0x9D, 0x98, 0x97, 0x92, 0x8E, 0x90, 0x8D, 0x8B, 0x84, 0x87, 0x84, 0x7D, 0x7B, 
   0x76, 0x72, 0x72, 0x6E, 0x73, 0x71, 0x6C, 0x78, 0x73, 0x6C, 0x7B, 0x79, 0x71, 0x83, 0x7E, 0x77, 
   0x7D, 0x7B, 0x75, 0x77, 0x77, 0x72, 0x76, 0x76, 0x73, 0x6F, 0x6E, 0x6C, 0x7A, 0x79, 0x70, 0x85, 
   0x83, 0x78, 0x8A, 0x85, 0x7F, 0x92, 0x8D, 0x85, 0x94, 0x8D, 0x82, 0x90, 0x83, 0x7D, 0x82, 0x77, 
   0x76, 0x6F, 0x66, 0x6A, 0x5B, 0x57, 0x61, 0x2F, 0x2D, 0x38, 0x16, 0x15, 0x17, 0x3F, 0x49, 0x48, 
   0x5F, 0x68, 0x67, 0x54, 0x57, 0x5B, 0x55, 0x56, 0x5D, 0x52, 0x55, 0x5B, 0x53, 0x54, 0x5C, 0x53, 
   0x53, 0x5A, 0x54, 0x55, 0x5B, 0x51, 0x55, 0x5A, 0x4B, 0x4F, 0x56, 0x4C, 0x53, 0x57, 0x52, 0x55, 
   0x58, 0x59, 0x55, 0x5B, 0x59, 0x5A, 0x5D, 0x59, 0x5F, 0x61, 0x5E, 0x64, 0x67, 0x5D, 0x61, 0x6A, 
   0x55, 0x59, 0x62, 0x4C, 0x51, 0x56, 0x57, 0x5A, 0x5F, 0x5B, 0x5A, 0x62, 0x4D, 0x4B, 0x51, 0x49, 
   0x48, 0x4D, 0x4D, 0x4D, 0x54, 0x4B, 0x4B, 0x53, 0x52, 0x4F, 0x58, 0x4E, 0x4D, 0x54, 0x4A, 0x4E, 
   0x4E, 0x5B, 0x60, 0x60, 0x51, 0x51, 0x50, 0x35, 0x34, 0x33, 0x3D, 0x42, 0x42, 0x6F, 0x73, 0x6C, 
   0x83, 0x8A, 0x7F, 0x64, 0x6D, 0x64, 0x6E, 0x7E, 0x75, 0x9A, 0xA3, 0x9C, 0x8E, 0x8E, 0x8A, 0x53, 
   0x54, 0x55, 0x34, 0x34, 0x35, 0x48, 0x4D, 0x45, 0x70, 0x79, 0x6C, 0x7E, 0x81, 0x72, 0x71, 0x6B, 
   0x67, 0x46, 0x41, 0x3F, 0x46, 0x4B, 0x47, 0x4F, 0x59, 0x5E, 0x69, 0x74, 0x75, 0x79, 0x7B, 0x7F, 
   0x7E, 0x81, 0x88, 0x7C, 0x7D, 0x86, 0x7B, 0x80, 0x88, 0x80, 0x85, 0x8D, 0x87, 0x88, 0x90, 0xA2, 
   0xA6, 0xA9, 0x8D, 0x90, 0xA1, 0x73, 0x7D, 0x9A, 0x71, 0x7E, 0x9E, 0x6D, 0x7C, 0x9A, 0x70, 0x80, 
   0xA0, 0x73, 0x89, 0xAB, 0x69, 0x80, 0x9F, 0x6B, 0x81, 0x9D, 0x71, 0x80, 0x9C, 0x70, 0x7B, 0x98, 
   0x76, 0x81, 0x9B, 0x74, 0x7E, 0x98, 0x6C, 0x75, 0x90, 0x66, 0x6C, 0x84, 0x74, 0x7D, 0x93, 0x7B, 
   0x7E, 0x95, 0x74, 0x73, 0x8D, 0x6B, 0x6E, 0x87, 0x66, 0x71, 0x85, 0x61, 0x6F, 0x86, 0x65, 0x73, 
   0x8D, 0x60, 0x6F, 0x89, 0x69, 0x7C, 0x9A, 0x6C, 0x83, 0x9F, 0x6D, 0x7D, 0x98, 0x6B, 0x76, 0x90, 
   0x59, 0x60, 0x74, 0x5C, 0x6A, 0x6D, 0x5D, 0x5B, 0x61, 0x66, 0x63, 0x6A, 0x6A, 0x6C, 0x71, 0x72, 
   0x76, 0x7B, 0x6D, 0x70, 0x72, 0x34, 0x3A, 0x3A, 0x16, 0x1C, 0x1F, 0x1A, 0x23, 0x29, 0x23, 0x2F, 
   0x36, 0x38, 0x40, 0x49, 0x3D, 0x42, 0x4D, 0x53, 0x59, 0x67, 0x6F, 0x76, 0x85, 0x7D, 0x88, 0x8D, 
   0x8E, 0x99, 0x9D, 0x8E, 0x98, 0x9B, 0x97, 0x9E, 0xA3, 0x96, 0x9F, 0xA5, 0x9A, 0xA4, 0xAC, 0x6F, 
   0x78, 0x79, 0x56, 0x5F, 0x56, 0x77, 0x7F, 0x78, 0x8A, 0x93, 0x92, 0x91, 0x98, 0x9C, 0x8D, 0x98, 
   0xA1, 0x88, 0x94, 0x9F, 0x7D, 0x86, 0x92, 0x6F, 0x76, 0x7F, 0x7B, 0x81, 0x8B, 0x82, 0x87, 0x95, 
   0x81, 0x87, 0x9A, 0x80, 0x8B, 0x9C, 0x82, 0x8E, 0x9D, 0x8B, 0x92, 0xA0, 0x8F, 0x91, 0x9E, 0x96, 
   0x99, 0xA2, 0x9D, 0x9F, 0xA9, 0xA3, 0xA3, 0xAE, 0xA2, 0x9E, 0xA9, 0x9E, 0x99, 0xA6, 0x96, 0x96, 
   0xA1, 0x93, 0x94, 0x9C, 0x9C, 0x97, 0x9E, 0xA3, 0x9D, 0x9F, 0xA1, 0x9E, 0xA2, 0x98, 0x97, 0xA1, 
   0x8E, 0x8E, 0x99, 0x56, 0x55, 0x5F, 0x22, 0x25, 0x2C, 0x41, 0x4C, 0x53, 0x73, 0x85, 0x8E, 0x76, 
   0x8B, 0x94, 0x7F, 0x92, 0x9E, 0x90, 0xA1, 0xA9, 0xA4, 0xB2, 0xAF, 0xA7, 0xB3, 0xAF, 0x8A, 0x99, 
   0x9E, 0x4B, 0x5D, 0x6D, 0x3D, 0x4F, 0x66, 0x42, 0x55, 0x6A, 0x39, 0x45, 0x54, 0x35, 0x3C, 0x48, 
   0x3C, 0x46, 0x54, 0x49, 0x54, 0x62, 0x54, 0x60, 0x68, 0x60, 0x63, 0x74, 0x71, 0x73, 0x83, 0x95, 
   0x98, 0xA5, 0xAC, 0xB0, 0xBC, 0xA6, 0xA9, 0xB5, 0x88, 0x8D, 0x96, 0x8F, 0x8F, 0x9C, 0x9B, 0x9E, 
   0xAA, 0x9B, 0xA1, 0xAE, 0xAA, 0xB4, 0xC2, 0xB6, 0xBF, 0xCD, 0xB3, 0xBB, 0xC5, 0xB3, 0xBC, 0xC4, 
   0xAB, 0xB7, 0xC1, 0xA9, 0xB4, 0xBE, 0xA8, 0xB4, 0xBE, 0xAC, 0xB7, 0xC2, 0xA9, 0xB6, 0xC0, 0xA7, 
   0xB2, 0xBC, 0xA5, 0xB4, 0xBF, 0xA7, 0xB7, 0xC4, 0xA0, 0xB1, 0xBA, 0x9C, 0xB0, 0xBB, 0x9A, 0xA7, 
   0xB9, 0x93, 0x93, 0xA5, 0x73, 0x6F, 0x7C, 0x3D, 0x41, 0x50, 0x48, 0x48, 0x59, 0x59, 0x52, 0x66, 
   0x60, 0x5C, 0x70, 0x65, 0x64, 0x76, 0x79, 0x79, 0x8C, 0x80, 0x80, 0x95, 0x73, 0x74, 0x86, 0x72, 
   0x6F, 0x80, 0x82, 0x7E, 0x8F, 0x84, 0x7F, 0x93, 0x78, 0x6F, 0x87, 0x65, 0x58, 0x74, 0x5B, 0x53, 
   0x70, 0x63, 0x5E, 0x79, 0x72, 0x70, 0x83, 0x7E, 0x7F, 0x89, 0x8A, 0x8D, 0x93, 0x99, 0x9C, 0xA6, 
   0x81, 0x84, 0x91, 0x84, 0x86, 0x8D, 0x81, 0x83, 0x8A, 0x72, 0x73, 0x7A, 0x46, 0x4A, 0x4D, 0x37, 
   0x3C, 0x3F, 0x4C, 0x53, 0x56, 0x6D, 0x7A, 0x7C, 0x88, 0x98, 0x9E, 0x99, 0xA8, 0xB3, 0xA6, 0xB3, 
   0xC1, 0x9A, 0xA2, 0xAD, 0x8E, 0x93, 0x9A, 0x8C, 0x92, 0x98, 0x87, 0x8D, 0x92, 0x8A, 0x8C, 0x91, 
   0x8F, 0x90, 0x94, 0x95, 0x98, 0x9F, 0x8F, 0x94, 0x9B, 0x82, 0x88, 0x8C, 0x7D, 0x86, 0x87, 0x77, 
   0x7F, 0x82, 0x75, 0x82, 0x8A, 0x6B, 0x76, 0x80, 0x54, 0x5A, 0x62, 0x3F, 0x49, 0x48, 0x60, 0x69, 
   0x62, 0x73, 0x74, 0x72, 0x6F, 0x72, 0x73, 0x6F, 0x74, 0x75, 0x76, 0x7A, 0x7E, 0x82, 0x82, 0x8A, 
   0x7A, 0x7A, 0x7D, 0x7A, 0x7A, 0x78, 0x74, 0x77, 0x71, 0x82, 0x86, 0x7E, 0x94, 0x92, 0x86, 0x92, 
   0x90, 0x85, 0x98, 0x92, 0x8C, 0x92, 0x91, 0x8B, 0x89, 0x8B, 0x86, 0x7C, 0x80, 0x7D, 0x73, 0x6F, 
   0x6C, 0x72, 0x6F, 0x68, 0x76, 0x73, 0x6D, 0x83, 0x7D, 0x77, 0x83, 0x7F, 0x79, 0x7F, 0x7C, 0x76, 
   0x7D, 0x7C, 0x74, 0x7B, 0x79, 0x71, 0x7A, 0x78, 0x72, 0x71, 0x71, 0x6C, 0x7A, 0x7C, 0x73, 0x86, 
   0x84, 0x7B, 0x8A, 0x86, 0x80, 0x88, 0x87, 0x7E, 0x86, 0x88, 0x7B, 0x8D, 0x84, 0x7A, 0x86, 0x7A, 
   0x73, 0x75, 0x6F, 0x6C, 0x5E, 0x5F, 0x67, 0x34, 0x37, 0x42, 0x0F, 0x15, 0x17, 0x28, 0x32, 0x31, 
   0x44, 0x4D, 0x4D, 0x4C, 0x51, 0x57, 0x50, 0x53, 0x59, 0x4F, 0x53, 0x57, 0x50, 0x50, 0x57, 0x51, 
   0x4E, 0x55, 0x52, 0x4F, 0x52, 0x4D, 0x50, 0x56, 0x4B, 0x50, 0x5A, 0x4E, 0x53, 0x5B, 0x57, 0x58, 
   0x5D, 0x59, 0x58, 0x5E, 0x5A, 0x61, 0x62, 0x5E, 0x64, 0x64, 0x60, 0x66, 0x66, 0x5D, 0x63, 0x67, 
   0x64, 0x68, 0x6C, 0x66, 0x67, 0x6A, 0x68, 0x66, 0x6B, 0x6E, 0x6C, 0x73, 0x6E, 0x6B, 0x71, 0x66, 
   0x64, 0x67, 0x64, 0x65, 0x6C, 0x69, 0x6B, 0x70, 0x67, 0x63, 0x67, 0x63, 0x60, 0x63, 0x59, 0x5A, 
   0x5F, 0x58, 0x59, 0x5F, 0x59, 0x53, 0x55, 0x42, 0x3F, 0x40, 0x36, 0x33, 0x3B, 0x32, 0x2E, 0x33, 
   0x31, 0x2F, 0x31, 0x25, 0x28, 0x29, 0x1A, 0x26, 0x23, 0x32, 0x3E, 0x39, 0x4B, 0x51, 0x4D, 0x3F, 
   0x44, 0x47, 0x32, 0x34, 0x39, 0x46, 0x4C, 0x48, 0x5A, 0x63, 0x5A, 0x6C, 0x71, 0x66, 0x6B, 0x66, 
   0x67, 0x43, 0x3E, 0x3E, 0x38, 0x3E, 0x39, 0x46, 0x51, 0x56, 0x65, 0x72, 0x74, 0x75, 0x77, 0x7E, 
   0x76, 0x7B, 0x86, 0x72, 0x78, 0x82, 0x77, 0x7F, 0x86, 0x81, 0x86, 0x8C, 0x81, 0x84, 0x87, 0x9A, 
   0xA0, 0xA1, 0x91, 0x94, 0xA7, 0x78, 0x80, 0x9E, 0x71, 0x7A, 0x9B, 0x66, 0x76, 0x94, 0x6D, 0x7E, 
   0xA0, 0x75, 0x8A, 0xAD, 0x6A, 0x7D, 0x9C, 0x6E, 0x81, 0x9C, 0x77, 0x84, 0x9D, 0x75, 0x85, 0x9C, 
   0x72, 0x82, 0x99, 0x66, 0x6F, 0x87, 0x61, 0x6B, 0x86, 0x66, 0x73, 0x8C, 0x79, 0x88, 0x9B, 0x7F, 
   0x83, 0x9A, 0x75, 0x72, 0x8C, 0x77, 0x7A, 0x8E, 0x74, 0x7D, 0x93, 0x6D, 0x7A, 0x97, 0x67, 0x72, 
   0x8D, 0x59, 0x65, 0x7F, 0x64, 0x78, 0x95, 0x5F, 0x76, 0x92, 0x63, 0x76, 0x95, 0x6C, 0x7F, 0xA1, 
   0x68, 0x76, 0x96, 0x57, 0x64, 0x72, 0x56, 0x5C, 0x5F, 0x62, 0x65, 0x6A, 0x6C, 0x6F, 0x73, 0x63, 
   0x66, 0x68, 0x3F, 0x43, 0x46, 0x24, 0x24, 0x2F, 0x42, 0x44, 0x59, 0x46, 0x50, 0x6A, 0x43, 0x4F, 
   0x68, 0x45, 0x52, 0x6A, 0x48, 0x54, 0x6E, 0x57, 0x63, 0x7C, 0x72, 0x80, 0x8E, 0x74, 0x81, 0x86, 
   0x8D, 0x96, 0x99, 0xA9, 0xB1, 0xB2, 0xA3, 0xAA, 0xB3, 0x8D, 0x99, 0xA3, 0xA8, 0xB2, 0xB8, 0x8C, 
   0x92, 0x91, 0x62, 0x66, 0x5D, 0x6D, 0x70, 0x67, 0x84, 0x8B, 0x88, 0x8B, 0x97, 0x90, 0x8E, 0x9A, 
   0x9D, 0x87, 0x94, 0x9F, 0x74, 0x82, 0x8D, 0x6C, 0x74, 0x7D, 0x7E, 0x80, 0x88, 0x82, 0x87, 0x91, 
   0x80, 0x89, 0x97, 0x82, 0x88, 0x9C, 0x83, 0x8A, 0x9E, 0x88, 0x91, 0xA1, 0x8A, 0x91, 0xA0, 0x99, 
   0x99, 0xA6, 0xA7, 0xA6, 0xAF, 0xA9, 0xAB, 0xB2, 0xA9, 0xA8, 0xAE, 0xA8, 0xA5, 0xAD, 0x9D, 0x9B, 
   0xA3, 0x8C, 0x8C, 0x95, 0x9A, 0x97, 0x9F, 0xA2, 0x9E, 0xA2, 0xA4, 0xA0, 0xA4, 0x9F, 0x9C, 0xA4, 
   0x97, 0x95, 0x9E, 0x67, 0x63, 0x69, 0x30, 0x31, 0x34, 0x37, 0x40, 0x48, 0x6D, 0x82, 0x8E, 0x75, 
   0x92, 0x9B, 0x82, 0x9B, 0x9F, 0x8A, 0xA5, 0xA8, 0x98, 0xAD, 0xB3, 0x8D, 0x9B, 0xA4, 0x54, 0x64, 
   0x71, 0x34, 0x45, 0x59, 0x45, 0x52, 0x67, 0x50, 0x59, 0x6B, 0x54, 0x5E, 0x6C, 0x62, 0x6F, 0x7B, 
   0x68, 0x76, 0x81, 0x70, 0x7C, 0x89, 0x7C, 0x86, 0x95, 0x82, 0x89, 0x99, 0x91, 0x96, 0xA2, 0xAC, 
   0xB2, 0xB9, 0xB6, 0xBC, 0xC2, 0xAF, 0xB7, 0xBD, 0xAD, 0xB6, 0xBB, 0xBB, 0xC4, 0xCF, 0xB8, 0xBF, 
   0xC4, 0xB0, 0xB7, 0xBA, 0xAE, 0xBA, 0xC1, 0xAF, 0xBC, 0xC7, 0xAD, 0xB8, 0xC2, 0xAC, 0xB6, 0xBF, 
   0xA7, 0xB4, 0xBD, 0xA6, 0xAF, 0xBA, 0xA8, 0xB2, 0xBD, 0xAE, 0xBA, 0xC6, 0xAA, 0xB6, 0xC3, 0xA5, 
   0xAF, 0xBC, 0xA2, 0xAF, 0xBD, 0xA1, 0xB4, 0xC4, 0xA3, 0xB5, 0xC5, 0xA8, 0xB8, 0xC8, 0xA1, 0xB2, 
   0xC0, 0x9C, 0xA4, 0xB2, 0x94, 0x92, 0xA0, 0x56, 0x53, 0x67, 0x44, 0x44, 0x53, 0x51, 0x52, 0x60, 
   0x5A, 0x58, 0x6B, 0x64, 0x64, 0x76, 0x77, 0x79, 0x8C, 0x78, 0x7C, 0x8F, 0x75, 0x79, 0x8D, 0x78, 
   0x7A, 0x8C, 0x8E, 0x8C, 0x9C, 0x8B, 0x87, 0x95, 0x8B, 0x84, 0x96, 0x83, 0x76, 0x8E, 0x73, 0x6C, 
   0x7E, 0x71, 0x6C, 0x7E, 0x7C, 0x78, 0x86, 0x84, 0x80, 0x8A, 0x92, 0x8E, 0x98, 0x8F, 0x8F, 0x9A, 
   0x77, 0x7A, 0x83, 0x6F, 0x70, 0x77, 0x61, 0x61, 0x69, 0x5F, 0x5D, 0x67, 0x61, 0x5D, 0x6A, 0x5F, 
   0x5C, 0x68, 0x41, 0x43, 0x4C, 0x61, 0x69, 0x6D, 0x81, 0x91, 0x92, 0x93, 0xA5, 0xA9, 0x99, 0xA4, 
   0xAA, 0x8F, 0x96, 0x9C, 0x8C, 0x91, 0x95, 0x88, 0x8C, 0x93, 0x84, 0x87, 0x90, 0x88, 0x8E, 0x95, 
   0x8F, 0x97, 0x9D, 0x89, 0x8E, 0x96, 0x82, 0x87, 0x8D, 0x80, 0x86, 0x89, 0x7E, 0x86, 0x88, 0x84, 
   0x8B, 0x8F, 0x84, 0x8E, 0x97, 0x62, 0x6B, 0x6E, 0x4F, 0x58, 0x58, 0x42, 0x46, 0x47, 0x46, 0x4C, 
   0x47, 0x6C, 0x6D, 0x68, 0x80, 0x7E, 0x7A, 0x81, 0x80, 0x7C, 0x7B, 0x7D, 0x77, 0x77, 0x76, 0x75, 
   0x79, 0x75, 0x72, 0x7B, 0x77, 0x71, 0x74, 0x75, 0x72, 0x7C, 0x84, 0x7E, 0x97, 0x94, 0x8E, 0x98, 
   0x94, 0x8E, 0x98, 0x93, 0x8D, 0x8E, 0x8B, 0x83, 0x83, 0x81, 0x79, 0x76, 0x75, 0x71, 0x71, 0x6E, 
   0x6B, 0x79, 0x75, 0x6E, 0x84, 0x83, 0x7F, 0x89, 0x87, 0x81, 0x82, 0x81, 0x7B, 0x79, 0x7E, 0x7A, 
   0x7B, 0x7B, 0x74, 0x7C, 0x76, 0x6E, 0x7A, 0x76, 0x6E, 0x76, 0x76, 0x6D, 0x7D, 0x7D, 0x72, 0x89, 
   0x86, 0x7A, 0x8A, 0x86, 0x7A, 0x83, 0x82, 0x73, 0x80, 0x80, 0x70, 0x83, 0x7D, 0x6F, 0x80, 0x7B, 
   0x6D, 0x7D, 0x79, 0x78, 0x70, 0x68, 0x72, 0x42, 0x3D, 0x4A, 0x15, 0x16, 0x19, 0x28, 0x33, 0x31, 
   0x45, 0x4E, 0x51, 0x51, 0x56, 0x5D, 0x5D, 0x60, 0x62, 0x61, 0x63, 0x60, 0x64, 0x65, 0x63, 0x64, 
   0x65, 0x67, 0x63, 0x65, 0x66, 0x68, 0x6A, 0x6E, 0x63, 0x63, 0x6A, 0x59, 0x56, 0x5D, 0x5B, 0x56, 
   0x5B, 0x5C, 0x59, 0x5F, 0x5F, 0x5F, 0x65, 0x59, 0x5E, 0x63, 0x60, 0x62, 0x66, 0x60, 0x63, 0x66, 
   0x5E, 0x64, 0x65, 0x5E, 0x62, 0x65, 0x52, 0x51, 0x58, 0x53, 0x53, 0x56, 0x59, 0x59, 0x58, 0x5B, 
   0x5C, 0x5E, 0x54, 0x59, 0x5D, 0x58, 0x5B, 0x5F, 0x65, 0x62, 0x66, 0x5D, 0x5C, 0x5F, 0x51, 0x53, 
   0x55, 0x4E, 0x50, 0x52, 0x51, 0x4E, 0x50, 0x50, 0x4C, 0x4F, 0x48, 0x48, 0x4B, 0x3F, 0x40, 0x43, 
   0x39, 0x37, 0x3B, 0x32, 0x30, 0x36, 0x2F, 0x33, 0x36, 0x47, 0x50, 0x51, 0x54, 0x59, 0x5A, 0x54, 
   0x54, 0x58, 0x50, 0x4F, 0x54, 0x4D, 0x53, 0x4F, 0x55, 0x5A, 0x57, 0x63, 0x68, 0x63, 0x56, 0x57, 
   0x58, 0x3C, 0x39, 0x3A, 0x3D, 0x3E, 0x3B, 0x42, 0x4B, 0x4B, 0x56, 0x63, 0x63, 0x64, 0x6F, 0x73, 
   0x6E, 0x73, 0x7C, 0x74, 0x77, 0x83, 0x73, 0x7A, 0x83, 0x7A, 0x83, 0x89, 0x84, 0x8A, 0x8F, 0x9F, 
   0xA3, 0xAA, 0x88, 0x8D, 0x9F, 0x72, 0x7D, 0x9B, 0x6A, 0x75, 0x95, 0x5E, 0x6E, 0x89, 0x62, 0x74, 
   0x94, 0x5F, 0x74, 0x95, 0x5B, 0x70, 0x8F, 0x67, 0x79, 0x98, 0x69, 0x7A, 0x96, 0x68, 0x7C, 0x9A, 
   0x67, 0x74, 0x97, 0x61, 0x69, 0x85, 0x60, 0x6A, 0x87, 0x60, 0x70, 0x8F, 0x73, 0x83, 0x9B, 0x85, 
   0x8D, 0xA2, 0x80, 0x80, 0x98, 0x7D, 0x7E, 0x95, 0x76, 0x7C, 0x96, 0x71, 0x7B, 0x98, 0x68, 0x78, 
   0x95, 0x65, 0x76, 0x92, 0x6E, 0x7E, 0x9D, 0x66, 0x7C, 0x98, 0x64, 0x76, 0x94, 0x62, 0x73, 0x98, 
   0x65, 0x76, 0x9A, 0x59, 0x68, 0x8B, 0x55, 0x58, 0x59, 0x5D, 0x60, 0x61, 0x64, 0x67, 0x68, 0x38, 
   0x3A, 0x3E, 0x1E, 0x22, 0x2C, 0x3D, 0x45, 0x58, 0x61, 0x70, 0x88, 0x5F, 0x6F, 0x8D, 0x5D, 0x6C, 
   0x8F, 0x58, 0x6A, 0x8D, 0x57, 0x6B, 0x8E, 0x5C, 0x70, 0x91, 0x60, 0x71, 0x86, 0x6C, 0x78, 0x7F, 
   0x74, 0x7E, 0x80, 0x8D, 0x98, 0x9C, 0x8D, 0x98, 0xA2, 0x78, 0x88, 0x95, 0x7E, 0x8C, 0x93, 0x62, 
   0x6A, 0x68, 0x60, 0x61, 0x5A, 0x63, 0x63, 0x5B, 0x64, 0x6B, 0x64, 0x69, 0x6F, 0x67, 0x7A, 0x86, 
   0x86, 0x80, 0x90, 0x96, 0x70, 0x83, 0x8A, 0x67, 0x74, 0x7C, 0x7B, 0x80, 0x88, 0x83, 0x88, 0x94, 
   0x80, 0x8B, 0x9B, 0x81, 0x89, 0x9D, 0x81, 0x89, 0x9D, 0x82, 0x8C, 0x9E, 0x82, 0x8B, 0x9C, 0x95, 
   0x96, 0xA4, 0xA5, 0xA4, 0xAD, 0xA8, 0xAB, 0xB2, 0xA8, 0xA8, 0xB1, 0xA9, 0xA6, 0xB2, 0x9C, 0x9C, 
   0xA5, 0x88, 0x88, 0x91, 0x94, 0x93, 0x9B, 0x9A, 0x97, 0x9D, 0x9E, 0x9C, 0xA2, 0xA0, 0x9F, 0xA5, 
   0x99, 0x99, 0xA1, 0x74, 0x72, 0x76, 0x41, 0x43, 0x46, 0x25, 0x2E, 0x37, 0x4B, 0x60, 0x72, 0x73, 
   0x8E, 0x98, 0x87, 0x99, 0x9C, 0x84, 0x9C, 0xA4, 0x76, 0x8F, 0xA0, 0x55, 0x6A, 0x7D, 0x2F, 0x43, 
   0x53, 0x38, 0x4B, 0x5A, 0x61, 0x71, 0x80, 0x6F, 0x7B, 0x89, 0x73, 0x80, 0x8E, 0x80, 0x8F, 0x9E, 
   0x7E, 0x8D, 0x9F, 0x83, 0x92, 0xA6, 0x8A, 0x94, 0xA7, 0x8D, 0x97, 0xA6, 0x9D, 0xA6, 0xAF, 0xAC, 
   0xB6, 0xBA, 0xAB, 0xB3, 0xB7, 0xA8, 0xAF, 0xB6, 0xAF, 0xB7, 0xC0, 0xAF, 0xBB, 0xC3, 0xAC, 0xB6, 
   0xBD, 0xAD, 0xB7, 0xC1, 0xAA, 0xB4, 0xC1, 0xA5, 0xB1, 0xBE, 0xA9, 0xB4, 0xBF, 0xA9, 0xB3, 0xBE, 
   0xA7, 0xB4, 0xC0, 0xA3, 0xAF, 0xBB, 0xA6, 0xB1, 0xBD, 0xB0, 0xBD, 0xC8, 0xA3, 0xB1, 0xBD, 0x9C, 
   0xA8, 0xB4, 0x9D, 0xAA, 0xB7, 0xA1, 0xB3, 0xC0, 0xA1, 0xB4, 0xC2, 0xA6, 0xB5, 0xC5, 0xA7, 0xB5, 
   0xC4, 0xA4, 0xB0, 0xBF, 0x9F, 0xA1, 0xB0, 0x69, 0x63, 0x76, 0x49, 0x45, 0x53, 0x50, 0x4F, 0x60, 
   0x59, 0x56, 0x6C, 0x62, 0x5E, 0x73, 0x67, 0x65, 0x79, 0x6B, 0x6C, 0x7E, 0x78, 0x7D, 0x8E, 0x84, 
   0x8A, 0x9A, 0x8E, 0x8F, 0x9F, 0x89, 0x89, 0x93, 0x8C, 0x8C, 0x95, 0x92, 0x8E, 0x9B, 0x84, 0x83, 
   0x8B, 0x87, 0x83, 0x8B, 0x7D, 0x7D, 0x84, 0x7A, 0x7B, 0x82, 0x79, 0x79, 0x84, 0x62, 0x63, 0x70, 
   0x50, 0x50, 0x5D, 0x4D, 0x4B, 0x55, 0x59, 0x57, 0x60, 0x69, 0x67, 0x72, 0x73, 0x6F, 0x7D, 0x7C, 
   0x74, 0x83, 0x62, 0x5C, 0x69, 0x52, 0x53, 0x5C, 0x63, 0x6F, 0x73, 0x82, 0x93, 0x96, 0x93, 0x9F, 
   0xA5, 0x8D, 0x99, 0x9E, 0x8B, 0x93, 0x9A, 0x86, 0x8A, 0x94, 0x84, 0x8B, 0x92, 0x8C, 0x94, 0x9B, 
   0x8F, 0x98, 0x9D, 0x80, 0x88, 0x8D, 0x7E, 0x87, 0x8C, 0x7E, 0x87, 0x89, 0x7D, 0x86, 0x88, 0x8B, 
   0x92, 0x99, 0x8C, 0x93, 0x9D, 0x6B, 0x6F, 0x76, 0x50, 0x53, 0x59, 0x46, 0x46, 0x49, 0x46, 0x48, 
   0x45, 0x62, 0x61, 0x5D, 0x76, 0x73, 0x6D, 0x7A, 0x79, 0x71, 0x7C, 0x7C, 0x73, 0x71, 0x71, 0x6D, 
   0x6E, 0x6D, 0x68, 0x73, 0x73, 0x6C, 0x74, 0x77, 0x73, 0x7D, 0x84, 0x7F, 0x95, 0x96, 0x8F, 0x94, 
   0x90, 0x8C, 0x92, 0x8A, 0x87, 0x83, 0x7F, 0x7B, 0x72, 0x73, 0x6D, 0x6E, 0x6F, 0x6B, 0x6F, 0x6D, 
   0x6A, 0x7C, 0x7A, 0x74, 0x86, 0x85, 0x7F, 0x7F, 0x7A, 0x74, 0x78, 0x73, 0x6F, 0x74, 0x77, 0x73, 
   0x76, 0x77, 0x71, 0x76, 0x74, 0x6A, 0x77, 0x75, 0x6B, 0x74, 0x73, 0x69, 0x78, 0x77, 0x6D, 0x83, 
   0x81, 0x78, 0x81, 0x7E, 0x75, 0x81, 0x7B, 0x73, 0x78, 0x75, 0x6C, 0x7A, 0x75, 0x6E, 0x80, 0x7B, 
   0x71, 0x7A, 0x78, 0x74, 0x73, 0x6D, 0x73, 0x53, 0x4C, 0x5A, 0x1C, 0x1A, 0x21, 0x23, 0x2D, 0x2A, 
   0x51, 0x5A, 0x5A, 0x5A, 0x5F, 0x64, 0x65, 0x67, 0x6C, 0x67, 0x69, 0x6B, 0x64, 0x68, 0x6B, 0x66, 
   0x6B, 0x70, 0x68, 0x6C, 0x73, 0x71, 0x75, 0x7B, 0x74, 0x74, 0x7A, 0x70, 0x6C, 0x72, 0x71, 0x6C, 
   0x72, 0x6C, 0x6A, 0x6F, 0x66, 0x68, 0x6C, 0x5F, 0x66, 0x6E, 0x68, 0x70, 0x76, 0x6E, 0x70, 0x77, 
   0x7F, 0x7E, 0x84, 0x89, 0x89, 0x90, 0x71, 0x6D, 0x78, 0x65, 0x5F, 0x68, 0x66, 0x5F, 0x66, 0x63, 
   0x5F, 0x64, 0x5F, 0x5F, 0x64, 0x5E, 0x5C, 0x63, 0x60, 0x5B, 0x63, 0x58, 0x56, 0x5B, 0x4E, 0x52, 
   0x54, 0x4B, 0x50, 0x52, 0x49, 0x4C, 0x4E, 0x49, 0x49, 0x4C, 0x44, 0x41, 0x45, 0x3F, 0x3C, 0x41, 
   0x37, 0x38, 0x3D, 0x3A, 0x3A, 0x40, 0x4D, 0x4D, 0x53, 0x5C, 0x5E, 0x63, 0x5B, 0x5C, 0x5F, 0x5C, 
   0x5B, 0x5F, 0x5C, 0x5B, 0x61, 0x53, 0x55, 0x56, 0x52, 0x53, 0x53, 0x57, 0x56, 0x55, 0x4E, 0x4C, 
   0x4E, 0x36, 0x33, 0x36, 0x32, 0x36, 0x36, 0x3D, 0x44, 0x45, 0x4B, 0x4F, 0x4E, 0x4F, 0x59, 0x5E, 
   0x68, 0x73, 0x77, 0x75, 0x7E, 0x84, 0x70, 0x7A, 0x7F, 0x75, 0x83, 0x83, 0x88, 0x94, 0x98, 0x9D, 
   0x9E, 0xAE, 0x7C, 0x7E, 0x96, 0x6D, 0x78, 0x96, 0x5F, 0x6D, 0x87, 0x5D, 0x6E, 0x82, 0x65, 0x6F, 
   0x8D, 0x5A, 0x68, 0x8D, 0x57, 0x6C, 0x8E, 0x5E, 0x72, 0x93, 0x65, 0x76, 0x97, 0x65, 0x77, 0x9B, 
   0x67, 0x78, 0x99, 0x7C, 0x8B, 0xA6, 0x70, 0x7D, 0x9C, 0x62, 0x71, 0x8F, 0x75, 0x84, 0x9A, 0x85, 
   0x8D, 0xA4, 0x7C, 0x7C, 0x96, 0x74, 0x73, 0x8E, 0x73, 0x78, 0x97, 0x6E, 0x7A, 0x98, 0x67, 0x76, 
   0x96, 0x68, 0x7F, 0x9D, 0x67, 0x7D, 0x9C, 0x67, 0x7B, 0x9B, 0x66, 0x78, 0x98, 0x66, 0x79, 0x9C, 
   0x71, 0x84, 0xA7, 0x62, 0x71, 0xA3, 0x51, 0x52, 0x54, 0x4F, 0x55, 0x58, 0x40, 0x48, 0x4D, 0x26, 
   0x2D, 0x39, 0x35, 0x3D, 0x4D, 0x3C, 0x4A, 0x5E, 0x43, 0x50, 0x68, 0x43, 0x4E, 0x6C, 0x47, 0x58, 
   0x7A, 0x4F, 0x66, 0x8A, 0x4E, 0x68, 0x8B, 0x52, 0x6A, 0x8D, 0x50, 0x61, 0x7E, 0x4A, 0x56, 0x66, 
   0x55, 0x62, 0x67, 0x74, 0x82, 0x88, 0x91, 0x9D, 0xA2, 0x72, 0x7E, 0x86, 0x55, 0x5D, 0x62, 0x48, 
   0x4E, 0x4B, 0x44, 0x48, 0x43, 0x4C, 0x4D, 0x4A, 0x4A, 0x4D, 0x4C, 0x3B, 0x41, 0x37, 0x66, 0x6F, 
   0x6B, 0x7E, 0x8A, 0x8D, 0x69, 0x79, 0x7E, 0x65, 0x71, 0x78, 0x79, 0x80, 0x8A, 0x7E, 0x88, 0x96, 
   0x83, 0x8B, 0x9C, 0x85, 0x89, 0x9C, 0x81, 0x86, 0x9A, 0x7B, 0x85, 0x99, 0x7E, 0x8A, 0x9B, 0x8F, 
   0x94, 0xA2, 0x9D, 0x9F, 0xA7, 0xA1, 0xA4, 0xAB, 0xA2, 0xA3, 0xAE, 0xA2, 0xA1, 0xB0, 0x9D, 0x9F, 
   0xA8, 0x96, 0x97, 0xA0, 0x8F, 0x8E, 0x99, 0x93, 0x91, 0x99, 0x98, 0x96, 0x9D, 0x9D, 0x9C, 0xA2, 
   0x95, 0x96, 0x9C, 0x7F, 0x7F, 0x82, 0x58, 0x59, 0x5D, 0x30, 0x35, 0x40, 0x35, 0x48, 0x5A, 0x71, 
   0x8A, 0x95, 0x94, 0xA6, 0xAB, 0x7E, 0x91, 0xA0, 0x53, 0x6A, 0x7F, 0x2D, 0x41, 0x58, 0x37, 0x48, 
   0x5B, 0x59, 0x68, 0x77, 0x7E, 0x8E, 0x9C, 0x7E, 0x8F, 0x9D, 0x83, 0x95, 0xA4, 0x84, 0x96, 0xA8, 
   0x7F, 0x90, 0xA7, 0x86, 0x94, 0xAE, 0x82, 0x8E, 0xA6, 0x8D, 0x99, 0xAA, 0xA5, 0xB2, 0xBD, 0xAC, 
   0xB8, 0xC1, 0xAF, 0xBC, 0xC1, 0xAE, 0xBA, 0xC0, 0xB0, 0xBB, 0xC5, 0xAE, 0xBC, 0xC6, 0xAB, 0xB8, 
   0xC5, 0xAA, 0xB6, 0xC6, 0xA2, 0xAE, 0xBC, 0xA7, 0xB2, 0xBD, 0xAD, 0xB9, 0xC1, 0xAE, 0xBA, 0xC2, 
   0xAB, 0xB6, 0xC2, 0xA7, 0xB2, 0xBD, 0xAB, 0xB5, 0xC0, 0xAE, 0xBA, 0xC3, 0xA9, 0xB6, 0xBE, 0xA7, 
   0xB4, 0xBC, 0xAA, 0xB7, 0xC0, 0xA8, 0xB9, 0xC4, 0xA3, 0xB6, 0xC3, 0xA3, 0xB5, 0xC2, 0xA6, 0xB2, 
   0xC1, 0xA3, 0xB0, 0xBE, 0x98, 0x9C, 0xAA, 0x63, 0x5D, 0x6C, 0x45, 0x41, 0x4C, 0x50, 0x51, 0x5D, 
   0x56, 0x55, 0x66, 0x5C, 0x58, 0x69, 0x65, 0x60, 0x71, 0x69, 0x66, 0x74, 0x66, 0x69, 0x70, 0x70, 
   0x77, 0x7C, 0x7B, 0x7F, 0x86, 0x70, 0x74, 0x77, 0x6C, 0x72, 0x73, 0x69, 0x6E, 0x72, 0x5C, 0x60, 
   0x64, 0x5C, 0x5A, 0x5F, 0x4F, 0x52, 0x58, 0x4A, 0x4F, 0x57, 0x4D, 0x4F, 0x5A, 0x4B, 0x4C, 0x58, 
   0x47, 0x48, 0x52, 0x4D, 0x4C, 0x56, 0x5C, 0x5C, 0x65, 0x69, 0x6A, 0x75, 0x73, 0x70, 0x7E, 0x74, 
   0x6B, 0x7D, 0x71, 0x68, 0x79, 0x67, 0x64, 0x73, 0x46, 0x49, 0x55, 0x4E, 0x55, 0x5B, 0x7C, 0x86, 
   0x89, 0x8C, 0x9B, 0xA2, 0x89, 0x95, 0xA1, 0x80, 0x89, 0x91, 0x82, 0x8B, 0x92, 0x8A, 0x94, 0x9A, 
   0x86, 0x8D, 0x91, 0x7A, 0x82, 0x82, 0x77, 0x80, 0x81, 0x7A, 0x84, 0x83, 0x7E, 0x8A, 0x88, 0x7C, 
   0x88, 0x8C, 0x76, 0x7D, 0x83, 0x6D, 0x70, 0x76, 0x56, 0x56, 0x5C, 0x4F, 0x4C, 0x4E, 0x52, 0x4F, 
   0x4E, 0x6F, 0x6A, 0x67, 0x88, 0x84, 0x7B, 0x7F, 0x7B, 0x71, 0x7B, 0x76, 0x6E, 0x73, 0x6C, 0x68, 
   0x6D, 0x68, 0x63, 0x6F, 0x6E, 0x68, 0x75, 0x77, 0x73, 0x86, 0x8A, 0x88, 0x96, 0x94, 0x8C, 0x8F, 
   0x89, 0x85, 0x87, 0x81, 0x80, 0x75, 0x75, 0x74, 0x6D, 0x72, 0x6F, 0x6D, 0x6E, 0x6C, 0x6B, 0x68, 
   0x66, 0x82, 0x81, 0x7A, 0x84, 0x81, 0x7A, 0x7E, 0x76, 0x72, 0x7A, 0x70, 0x70, 0x73, 0x73, 0x71, 
   0x76, 0x78, 0x6F, 0x75, 0x76, 0x6A, 0x76, 0x74, 0x6D, 0x73, 0x6E, 0x67, 0x74, 0x6E, 0x68, 0x7E, 
   0x7B, 0x74, 0x82, 0x80, 0x78, 0x85, 0x81, 0x79, 0x82, 0x7F, 0x77, 0x91, 0x8B, 0x86, 0x87, 0x82, 
   0x7C, 0x77, 0x76, 0x72, 0x6F, 0x6B, 0x71, 0x57, 0x51, 0x62, 0x1E, 0x1E, 0x2C, 0x17, 0x24, 0x22, 
   0x43, 0x4D, 0x4D, 0x4D, 0x4F, 0x54, 0x55, 0x53, 0x59, 0x59, 0x58, 0x5C, 0x5A, 0x5E, 0x60, 0x5D, 
   0x62, 0x65, 0x58, 0x5D, 0x64, 0x5F, 0x65, 0x67, 0x73, 0x75, 0x75, 0x7D, 0x7C, 0x7C, 0x82, 0x7D, 
   0x80, 0x80, 0x7B, 0x7E, 0x76, 0x75, 0x76, 0x74, 0x77, 0x7F, 0x87, 0x8E, 0x93, 0x8F, 0x92, 0x98, 
   0x95, 0x93, 0x99, 0x9A, 0x98, 0x9E, 0x93, 0x90, 0x99, 0x9A, 0x95, 0x9B, 0xA0, 0x9B, 0x9D, 0x8D, 
   0x89, 0x8E, 0x79, 0x75, 0x7D, 0x6D, 0x66, 0x6F, 0x57, 0x4D, 0x57, 0x51, 0x49, 0x51, 0x46, 0x43, 
   0x4B, 0x44, 0x45, 0x4C, 0x43, 0x46, 0x4C, 0x45, 0x43, 0x49, 0x3D, 0x36, 0x3B, 0x42, 0x3A, 0x3F, 
   0x49, 0x46, 0x49, 0x54, 0x56, 0x5A, 0x62, 0x65, 0x68, 0x61, 0x63, 0x67, 0x62, 0x63, 0x65, 0x6A, 
   0x6A, 0x6B, 0x73, 0x6F, 0x73, 0x68, 0x61, 0x64, 0x5F, 0x5D, 0x5B, 0x5F, 0x61, 0x5B, 0x5C, 0x59, 
   0x57, 0x4D, 0x48, 0x4A, 0x39, 0x3A, 0x3D, 0x41, 0x44, 0x46, 0x44, 0x47, 0x46, 0x32, 0x40, 0x42, 
   0x40, 0x4B, 0x4C, 0x61, 0x68, 0x6E, 0x6D, 0x76, 0x7B, 0x80, 0x8B, 0x8A, 0x9C, 0xA5, 0xA9, 0x8E, 
   0x94, 0xA6, 0x70, 0x75, 0x91, 0x60, 0x68, 0x88, 0x59, 0x63, 0x7C, 0x61, 0x6C, 0x80, 0x66, 0x6C, 
   0x8A, 0x61, 0x6A, 0x8E, 0x61, 0x6E, 0x90, 0x65, 0x74, 0x91, 0x65, 0x77, 0x96, 0x63, 0x71, 0x96, 
   0x61, 0x6C, 0x8B, 0x7A, 0x88, 0xA4, 0x6F, 0x7B, 0x9D, 0x6B, 0x79, 0x97, 0x7A, 0x86, 0x9E, 0x84, 
   0x88, 0x9F, 0x7E, 0x7F, 0x98, 0x6F, 0x74, 0x91, 0x72, 0x7B, 0x9E, 0x6F, 0x7A, 0x9B, 0x6C, 0x7B, 
   0x9C, 0x69, 0x85, 0xA2, 0x69, 0x81, 0x9F, 0x6C, 0x7F, 0xA2, 0x6B, 0x7C, 0x9D, 0x6F, 0x80, 0xA3, 
   0x70, 0x84, 0xA8, 0x62, 0x71, 0x9F, 0x4F, 0x50, 0x58, 0x44, 0x4E, 0x59, 0x3C, 0x47, 0x59, 0x42, 
   0x48, 0x5D, 0x4A, 0x4C, 0x5B, 0x49, 0x52, 0x62, 0x52, 0x5D, 0x7B, 0x58, 0x62, 0x87, 0x5F, 0x71, 
   0x93, 0x72, 0x8C, 0xAD, 0x60, 0x7A, 0x9C, 0x41, 0x57, 0x76, 0x43, 0x51, 0x6F, 0x39, 0x45, 0x5B, 
   0x37, 0x43, 0x4E, 0x56, 0x64, 0x6A, 0x74, 0x7D, 0x7F, 0x41, 0x4A, 0x49, 0x1E, 0x26, 0x27, 0x2B, 
   0x33, 0x33, 0x2D, 0x36, 0x35, 0x3A, 0x3F, 0x3F, 0x48, 0x4B, 0x4F, 0x44, 0x49, 0x40, 0x64, 0x69, 
   0x64, 0x64, 0x68, 0x69, 0x56, 0x5D, 0x61, 0x69, 0x6F, 0x77, 0x78, 0x7F, 0x8A, 0x78, 0x85, 0x94, 
   0x87, 0x8B, 0x9D, 0x8C, 0x8C, 0x9F, 0x86, 0x88, 0x9C, 0x7F, 0x88, 0x9C, 0x80, 0x8B, 0x9D, 0x8C, 
   0x93, 0x9F, 0x9A, 0x9B, 0xA3, 0x94, 0x95, 0x9D, 0x94, 0x96, 0xA1, 0x9D, 0x9F, 0xAE, 0x9E, 0xA0, 
   0xAA, 0xA0, 0xA0, 0xA9, 0x98, 0x95, 0xA0, 0x97, 0x93, 0x9D, 0x9A, 0x95, 0x9D, 0x9B, 0x98, 0x9D, 
   0x99, 0x99, 0x9D, 0x97, 0x96, 0x99, 0x6F, 0x6D, 0x72, 0x42, 0x44, 0x4E, 0x29, 0x34, 0x43, 0x69, 
   0x7C, 0x87, 0x72, 0x8A, 0x98, 0x5D, 0x74, 0x86, 0x47, 0x5C, 0x6C, 0x35, 0x48, 0x5A, 0x5C, 0x6F, 
   0x82, 0x6F, 0x7F, 0x90, 0x7F, 0x8E, 0x9F, 0x82, 0x92, 0xA3, 0x86, 0x96, 0xA9, 0x81, 0x90, 0xA6, 
   0x80, 0x8F, 0xA8, 0x81, 0x92, 0xAE, 0x86, 0x93, 0xAC, 0x98, 0xA6, 0xB8, 0xB2, 0xC0, 0xCC, 0xB1, 
   0xBE, 0xC7, 0xB0, 0xBE, 0xC1, 0xB1, 0xBC, 0xBF, 0xAD, 0xB7, 0xBF, 0xB1, 0xBD, 0xCB, 0xAA, 0xB9, 
   0xC9, 0xA9, 0xB7, 0xC7, 0xA0, 0xAC, 0xB9, 0x9E, 0xA9, 0xB1, 0xAC, 0xB9, 0xC0, 0xAC, 0xB8, 0xC2, 
   0xA7, 0xB2, 0xBC, 0xA7, 0xB2, 0xBC, 0xA9, 0xB5, 0xBF, 0xAD, 0xB7, 0xBF, 0xA7, 0xB2, 0xBA, 0xA5, 
   0xB1, 0xB7, 0xA4, 0xB4, 0xBD, 0xA5, 0xB5, 0xC2, 0xA0, 0xB2, 0xBF, 0xA0, 0xB3, 0xBF, 0xA7, 0xB1, 
   0xBD, 0xAA, 0xB3, 0xBD, 0x96, 0x9A, 0xA4, 0x57, 0x50, 0x59, 0x49, 0x43, 0x47, 0x4B, 0x4B, 0x4F, 
   0x4C, 0x4C, 0x51, 0x57, 0x56, 0x5C, 0x62, 0x5F, 0x69, 0x55, 0x55, 0x5B, 0x1F, 0x20, 0x25, 0x16, 
   0x19, 0x1F, 0x26, 0x28, 0x33, 0x2E, 0x2D, 0x37, 0x30, 0x31, 0x37, 0x33, 0x34, 0x3D, 0x38, 0x36, 
   0x3E, 0x39, 0x3A, 0x43, 0x3F, 0x43, 0x4D, 0x42, 0x46, 0x52, 0x4B, 0x4B, 0x58, 0x4D, 0x4D, 0x5A, 
   0x4F, 0x51, 0x5A, 0x53, 0x55, 0x5E, 0x5A, 0x5B, 0x65, 0x6A, 0x69, 0x76, 0x6F, 0x6B, 0x7B, 0x6F, 
   0x67, 0x7A, 0x73, 0x6A, 0x7F, 0x72, 0x69, 0x7E, 0x69, 0x60, 0x73, 0x57, 0x50, 0x5C, 0x59, 0x5B, 
   0x5F, 0x71, 0x7E, 0x84, 0x7A, 0x89, 0x93, 0x7D, 0x8A, 0x8F, 0x7D, 0x86, 0x8D, 0x79, 0x81, 0x89, 
   0x71, 0x79, 0x7D, 0x72, 0x7A, 0x78, 0x6D, 0x74, 0x72, 0x6C, 0x73, 0x71, 0x68, 0x71, 0x70, 0x5F, 
   0x6A, 0x6C, 0x5F, 0x67, 0x67, 0x5E, 0x64, 0x63, 0x58, 0x58, 0x5B, 0x54, 0x52, 0x51, 0x57, 0x56, 
   0x51, 0x64, 0x63, 0x5E, 0x76, 0x79, 0x6E, 0x7D, 0x79, 0x71, 0x78, 0x70, 0x6B, 0x6B, 0x62, 0x5E, 
   0x6C, 0x65, 0x62, 0x6F, 0x6B, 0x69, 0x73, 0x73, 0x72, 0x8B, 0x8E, 0x8E, 0x8F, 0x8F, 0x8C, 0x81, 
   0x7E, 0x7C, 0x76, 0x72, 0x72, 0x65, 0x63, 0x64, 0x65, 0x63, 0x63, 0x67, 0x66, 0x64, 0x7F, 0x7D, 
   0x7A, 0x8A, 0x87, 0x82, 0x83, 0x80, 0x78, 0x88, 0x82, 0x7A, 0x7F, 0x7A, 0x76, 0x73, 0x72, 0x70, 
   0x74, 0x74, 0x6E, 0x75, 0x74, 0x6C, 0x73, 0x70, 0x6A, 0x6F, 0x68, 0x62, 0x74, 0x6B, 0x66, 0x7D, 
   0x79, 0x72, 0x81, 0x7F, 0x78, 0x80, 0x80, 0x78, 0x81, 0x7E, 0x73, 0x8D, 0x86, 0x7D, 0x86, 0x7F, 
   0x76, 0x7A, 0x75, 0x6D, 0x6F, 0x6B, 0x6A, 0x5B, 0x54, 0x5F, 0x28, 0x25, 0x2F, 0x1B, 0x21, 0x24, 
   0x59, 0x5B, 0x60, 0x54, 0x4F, 0x57, 0x59, 0x52, 0x5B, 0x5A, 0x56, 0x5D, 0x55, 0x57, 0x5B, 0x56, 
   0x5A, 0x5E, 0x59, 0x5D, 0x60, 0x5C, 0x62, 0x60, 0x64, 0x6A, 0x67, 0x76, 0x7A, 0x79, 0x89, 0x8B, 
   0x8D, 0x84, 0x81, 0x84, 0x7E, 0x7B, 0x7E, 0x76, 0x78, 0x7B, 0x86, 0x8B, 0x8D, 0x94, 0x9A, 0x9E, 
   0x95, 0x9A, 0x9C, 0x92, 0x90, 0x94, 0x98, 0x94, 0x9A, 0xA6, 0xA3, 0xA4, 0x9F, 0x9B, 0x9C, 0x96, 
   0x93, 0x95, 0x97, 0x91, 0x95, 0x8F, 0x88, 0x89, 0x77, 0x6D, 0x72, 0x6E, 0x64, 0x6E, 0x5E, 0x58, 
   0x64, 0x52, 0x4F, 0x5B, 0x49, 0x48, 0x53, 0x50, 0x4F, 0x58, 0x71, 0x6D, 0x74, 0x7F, 0x79, 0x80, 
   0x79, 0x71, 0x77, 0x71, 0x6B, 0x70, 0x68, 0x65, 0x68, 0x62, 0x60, 0x64, 0x65, 0x67, 0x6C, 0x6C, 
   0x72, 0x73, 0x7B, 0x7D, 0x80, 0x77, 0x72, 0x76, 0x6F, 0x6D, 0x6C, 0x66, 0x6B, 0x68, 0x69, 0x69, 
   0x67, 0x66, 0x62, 0x63, 0x58, 0x56, 0x59, 0x4D, 0x4E, 0x4D, 0x42, 0x49, 0x44, 0x2C, 0x37, 0x3A, 
   0x2D, 0x35, 0x39, 0x48, 0x52, 0x59, 0x5A, 0x67, 0x6D, 0x7E, 0x88, 0x88, 0xA0, 0xA5, 0xAB, 0x79, 
   0x7C, 0x92, 0x65, 0x6E, 0x8A, 0x57, 0x64, 0x84, 0x5D, 0x67, 0x86, 0x5F, 0x6B, 0x85, 0x69, 0x72, 
   0x91, 0x67, 0x73, 0x93, 0x66, 0x6E, 0x8D, 0x61, 0x6B, 0x87, 0x62, 0x72, 0x91, 0x65, 0x6F, 0x96, 
   0x62, 0x68, 0x87, 0x6D, 0x75, 0x91, 0x6C, 0x75, 0x94, 0x72, 0x81, 0x9E, 0x7A, 0x8A, 0xA0, 0x83, 
   0x87, 0x9E, 0x7F, 0x82, 0x97, 0x77, 0x7E, 0x96, 0x73, 0x7D, 0x9E, 0x70, 0x7C, 0x9E, 0x69, 0x79, 
   0x9E, 0x6A, 0x85, 0xA6, 0x6E, 0x84, 0xA9, 0x68, 0x7C, 0xA7, 0x68, 0x78, 0xA2, 0x67, 0x73, 0x9F, 
   0x5B, 0x6E, 0x9A, 0x5B, 0x6A, 0x96, 0x55, 0x53, 0x6C, 0x51, 0x58, 0x72, 0x56, 0x5A, 0x76, 0x6C, 
   0x68, 0x83, 0x69, 0x66, 0x7D, 0x4E, 0x56, 0x6A, 0x4E, 0x59, 0x73, 0x52, 0x5D, 0x7B, 0x50, 0x63, 
   0x80, 0x51, 0x69, 0x8A, 0x4D, 0x64, 0x84, 0x3B, 0x4D, 0x68, 0x4B, 0x56, 0x70, 0x5E, 0x64, 0x7B, 
   0x49, 0x4B, 0x5D, 0x26, 0x26, 0x32, 0x17, 0x19, 0x1E, 0x12, 0x1B, 0x1A, 0x23, 0x2B, 0x2A, 0x32, 
   0x37, 0x3A, 0x3B, 0x3D, 0x3E, 0x47, 0x47, 0x46, 0x4D, 0x4F, 0x50, 0x54, 0x54, 0x50, 0x5D, 0x5F, 
   0x5D, 0x4D, 0x4E, 0x4F, 0x53, 0x57, 0x5C, 0x6E, 0x73, 0x7C, 0x78, 0x7C, 0x8B, 0x77, 0x82, 0x92, 
   0x7E, 0x87, 0x97, 0x87, 0x8C, 0x9C, 0x85, 0x8A, 0x9D, 0x81, 0x89, 0x9C, 0x84, 0x8C, 0x9B, 0x92, 
   0x92, 0x9E, 0xA3, 0x9E, 0xA9, 0x9E, 0x9C, 0xA5, 0x94, 0x97, 0xA0, 0x9C, 0xA0, 0xAA, 0xA1, 0xA4, 
   0xAB, 0xA4, 0xA4, 0xAC, 0xA2, 0x9E, 0xAA, 0x9F, 0x9A, 0xA3, 0x9D, 0x96, 0x9E, 0x9C, 0x98, 0x9C, 
   0x9B, 0x99, 0x9F, 0x98, 0x95, 0x9B, 0x7E, 0x7A, 0x81, 0x55, 0x52, 0x5C, 0x26, 0x28, 0x32, 0x32, 
   0x3F, 0x48, 0x41, 0x5B, 0x6E, 0x46, 0x5A, 0x70, 0x42, 0x4F, 0x5B, 0x58, 0x66, 0x72, 0x6A, 0x79, 
   0x8C, 0x6E, 0x7C, 0x94, 0x71, 0x81, 0x98, 0x76, 0x89, 0x9F, 0x85, 0x96, 0xAD, 0x83, 0x93, 0xAC, 
   0x7E, 0x8C, 0xA8, 0x80, 0x90, 0xAC, 0x92, 0xA1, 0xBD, 0x9F, 0xB0, 0xC5, 0xA6, 0xB7, 0xC5, 0xA6, 
   0xB6, 0xBE, 0xA5, 0xB1, 0xB7, 0xA0, 0xA7, 0xAF, 0xAB, 0xB1, 0xBD, 0xA7, 0xB3, 0xC0, 0xA1, 0xAF, 
   0xBC, 0xA5, 0xB3, 0xBF, 0xA7, 0xB4, 0xBE, 0xA6, 0xB2, 0xBD, 0xAB, 0xB6, 0xC5, 0xA9, 0xB5, 0xC4, 
   0xA8, 0xB4, 0xBF, 0xA9, 0xB6, 0xC0, 0xA8, 0xB5, 0xBF, 0xA5, 0xB2, 0xBB, 0x9F, 0xAB, 0xB5, 0x9A, 
   0xA7, 0xB1, 0xA1, 0xB0, 0xBB, 0xA1, 0xAF, 0xBD, 0x9D, 0xAE, 0xBA, 0x96, 0xA5, 0xB2, 0xA5, 0xAD, 
   0xB8, 0xAD, 0xB1, 0xB9, 0x86, 0x8B, 0x91, 0x3D, 0x3B, 0x41, 0x38, 0x32, 0x36, 0x4C, 0x47, 0x49, 
   0x5A, 0x58, 0x58, 0x5A, 0x59, 0x5B, 0x54, 0x51, 0x59, 0x51, 0x4E, 0x53, 0x23, 0x1D, 0x1D, 0x23, 
   0x1D, 0x1C, 0x2A, 0x28, 0x2C, 0x35, 0x33, 0x3B, 0x3C, 0x3E, 0x44, 0x3B, 0x3F, 0x48, 0x3B, 0x3C, 
   0x46, 0x3B, 0x3D, 0x47, 0x3B, 0x41, 0x4C, 0x41, 0x46, 0x53, 0x43, 0x46, 0x52, 0x45, 0x49, 0x53, 
   0x4F, 0x53, 0x5E, 0x58, 0x58, 0x64, 0x62, 0x60, 0x6B, 0x6C, 0x67, 0x73, 0x70, 0x69, 0x78, 0x72, 
   0x6B, 0x7C, 0x75, 0x6E, 0x7F, 0x71, 0x67, 0x7B, 0x7B, 0x70, 0x82, 0x84, 0x78, 0x8A, 0x64, 0x5E, 
   0x6D, 0x55, 0x59, 0x61, 0x6B, 0x78, 0x7D, 0x73, 0x80, 0x87, 0x79, 0x80, 0x88, 0x6A, 0x71, 0x7A, 
   0x61, 0x69, 0x73, 0x6A, 0x72, 0x77, 0x58, 0x5F, 0x60, 0x54, 0x59, 0x5C, 0x4A, 0x4E, 0x52, 0x3B, 
   0x3F, 0x42, 0x42, 0x43, 0x3F, 0x4F, 0x51, 0x49, 0x58, 0x54, 0x50, 0x58, 0x54, 0x50, 0x5A, 0x55, 
   0x4F, 0x56, 0x55, 0x51, 0x60, 0x62, 0x5C, 0x73, 0x6D, 0x67, 0x67, 0x64, 0x60, 0x60, 0x5F, 0x5C, 
   0x64, 0x64, 0x60, 0x67, 0x67, 0x65, 0x67, 0x69, 0x65, 0x7D, 0x80, 0x80, 0x7F, 0x7E, 0x81, 0x6D, 
   0x6D, 0x6E, 0x6C, 0x6C, 0x6B, 0x66, 0x64, 0x64, 0x7A, 0x75, 0x74, 0x96, 0x8F, 0x8A, 0x9F, 0x97, 
   0x91, 0x8E, 0x87, 0x82, 0x83, 0x7D, 0x76, 0x86, 0x81, 0x7D, 0x7B, 0x78, 0x76, 0x79, 0x78, 0x73, 
   0x75, 0x72, 0x6B, 0x71, 0x6E, 0x67, 0x72, 0x71, 0x6A, 0x79, 0x73, 0x6D, 0x7F, 0x78, 0x72, 0x89, 
   0x82, 0x7D, 0x82, 0x7D, 0x77, 0x76, 0x74, 0x6D, 0x79, 0x76, 0x70, 0x7D, 0x78, 0x72, 0x7A, 0x74, 
   0x6B, 0x76, 0x70, 0x66, 0x7D, 0x79, 0x70, 0x7A, 0x6F, 0x72, 0x38, 0x2F, 0x39, 0x25, 0x2A, 0x2A, 
   0x6F, 0x71, 0x70, 0x72, 0x6C, 0x6F, 0x70, 0x69, 0x6D, 0x68, 0x65, 0x69, 0x65, 0x62, 0x68, 0x6E, 
   0x69, 0x72, 0x70, 0x6A, 0x6F, 0x65, 0x61, 0x65, 0x59, 0x5B, 0x5E, 0x5A, 0x62, 0x66, 0x6A, 0x73, 
   0x79, 0x74, 0x7C, 0x82, 0x77, 0x7C, 0x82, 0x81, 0x83, 0x88, 0x7F, 0x82, 0x86, 0x84, 0x8B, 0x91, 
   0x8C, 0x93, 0x97, 0x95, 0x92, 0x98, 0x99, 0x90, 0x98, 0x96, 0x8D, 0x93, 0x90, 0x88, 0x8E, 0x92, 
   0x8E, 0x90, 0x97, 0x91, 0x91, 0x97, 0x90, 0x91, 0x98, 0x93, 0x95, 0x9F, 0x9D, 0x9C, 0xA3, 0xA2, 
   0xA2, 0x9F, 0x9C, 0x9E, 0x97, 0x94, 0x96, 0x9B, 0x99, 0x9B, 0xA6, 0xA5, 0xA7, 0xA1, 0x9C, 0xA0, 
   0x9E, 0x94, 0x99, 0x8E, 0x83, 0x8A, 0x7C, 0x73, 0x77, 0x75, 0x70, 0x77, 0x6A, 0x6A, 0x73, 0x60, 
   0x64, 0x6C, 0x67, 0x69, 0x71, 0x6D, 0x6B, 0x71, 0x6D, 0x68, 0x6B, 0x67, 0x6C, 0x6C, 0x67, 0x68, 
   0x67, 0x6E, 0x6A, 0x6B, 0x77, 0x74, 0x78, 0x6C, 0x69, 0x6C, 0x53, 0x55, 0x58, 0x3A, 0x3C, 0x44, 
   0x30, 0x39, 0x3F, 0x40, 0x49, 0x51, 0x44, 0x4C, 0x54, 0x51, 0x5D, 0x63, 0x79, 0x85, 0x93, 0x6E, 
   0x74, 0x91, 0x5B, 0x67, 0x85, 0x5D, 0x74, 0x95, 0x67, 0x7B, 0x9D, 0x64, 0x78, 0x99, 0x66, 0x76, 
   0x97, 0x64, 0x74, 0x92, 0x66, 0x73, 0x8D, 0x68, 0x76, 0x92, 0x67, 0x74, 0x95, 0x66, 0x6D, 0x93, 
   0x67, 0x6E, 0x8F, 0x64, 0x6E, 0x8C, 0x68, 0x6F, 0x8E, 0x75, 0x7F, 0x9A, 0x8B, 0x98, 0xAD, 0xA0, 
   0xA7, 0xBC, 0xA1, 0xA0, 0xB3, 0x77, 0x75, 0x89, 0x6A, 0x6F, 0x8B, 0x71, 0x82, 0xA0, 0x70, 0x82, 
   0xA6, 0x6A, 0x81, 0xA4, 0x6E, 0x83, 0xAB, 0x63, 0x7C, 0xA9, 0x65, 0x78, 0xA5, 0x60, 0x6E, 0x9F, 
   0x59, 0x69, 0x9A, 0x5E, 0x69, 0x90, 0x55, 0x56, 0x6F, 0x6D, 0x73, 0x86, 0x88, 0x86, 0x92, 0x9F, 
   0x9B, 0xA5, 0x8C, 0x8A, 0x9A, 0x68, 0x6B, 0x80, 0x6C, 0x6F, 0x88, 0x67, 0x6A, 0x86, 0x58, 0x61, 
   0x80, 0x53, 0x63, 0x84, 0x53, 0x66, 0x89, 0x66, 0x77, 0x98, 0x7B, 0x88, 0xA3, 0x8A, 0x90, 0xA6, 
   0x7B, 0x7F, 0x8E, 0x2E, 0x31, 0x3A, 0x1A, 0x1E, 0x23, 0x1D, 0x23, 0x26, 0x37, 0x36, 0x3A, 0x49, 
   0x45, 0x48, 0x55, 0x52, 0x53, 0x59, 0x55, 0x55, 0x50, 0x50, 0x4E, 0x43, 0x43, 0x42, 0x49, 0x4A, 
   0x4B, 0x4C, 0x4E, 0x50, 0x5E, 0x62, 0x67, 0x76, 0x7A, 0x84, 0x7D, 0x81, 0x90, 0x7B, 0x87, 0x97, 
   0x7D, 0x89, 0x96, 0x80, 0x8A, 0x99, 0x81, 0x8A, 0x9B, 0x80, 0x8B, 0x9B, 0x85, 0x8D, 0x98, 0x8B, 
   0x8E, 0x96, 0x95, 0x91, 0x9C, 0x9A, 0x96, 0xA2, 0x93, 0x96, 0x9D, 0x97, 0x9C, 0xA2, 0xA1, 0xA4, 
   0xA9, 0xA5, 0xA2, 0xAB, 0xA5, 0x9F, 0xAB, 0xA3, 0x9E, 0xA7, 0xA0, 0x9C, 0xA1, 0x9F, 0x9B, 0x9F, 
   0x9A, 0x99, 0xA0, 0x98, 0x96, 0x9E, 0x8A, 0x87, 0x8E, 0x63, 0x60, 0x69, 0x35, 0x36, 0x3D, 0x1A, 
   0x20, 0x26, 0x39, 0x4D, 0x5E, 0x36, 0x41, 0x58, 0x53, 0x5B, 0x69, 0x74, 0x7F, 0x8F, 0x7A, 0x85, 
   0x99, 0x81, 0x8C, 0xA0, 0x82, 0x90, 0xA3, 0x7D, 0x91, 0xA3, 0x81, 0x94, 0xA6, 0x84, 0x92, 0xA5, 
   0x7F, 0x8A, 0xA0, 0x88, 0x91, 0xAA, 0x9D, 0xA9, 0xC1, 0xA4, 0xB1, 0xC7, 0xA1, 0xB0, 0xC1, 0xA2, 
   0xB2, 0xBF, 0xA7, 0xB5, 0xC1, 0xA7, 0xB3, 0xC0, 0xA9, 0xB3, 0xC0, 0xA6, 0xB1, 0xBB, 0xA2, 0xAE, 
   0xB9, 0xA8, 0xB5, 0xBF, 0xAC, 0xB8, 0xC2, 0xAB, 0xB7, 0xC3, 0xAB, 0xB7, 0xC5, 0xAC, 0xB7, 0xC3, 
   0xA6, 0xB3, 0xBB, 0xA0, 0xAF, 0xB7, 0xA4, 0xB2, 0xBA, 0x9C, 0xA7, 0xB1, 0x93, 0x9E, 0xA8, 0x9E, 
   0xAB, 0xB5, 0xA3, 0xAF, 0xB8, 0xA1, 0xAD, 0xB7, 0x9B, 0xA8, 0xB3, 0x9D, 0xA5, 0xB1, 0xA3, 0xAA, 
   0xB5, 0x9D, 0xA2, 0xAB, 0x6B, 0x6F, 0x76, 0x3B, 0x40, 0x43, 0x3F, 0x41, 0x42, 0x4C, 0x4A, 0x4C, 
   0x40, 0x40, 0x41, 0x3A, 0x3D, 0x40, 0x36, 0x38, 0x3F, 0x2A, 0x2B, 0x2D, 0x16, 0x12, 0x12, 0x1E, 
   0x18, 0x14, 0x2F, 0x2F, 0x31, 0x38, 0x38, 0x41, 0x3B, 0x3B, 0x45, 0x39, 0x3B, 0x46, 0x3C, 0x3B, 
   0x47, 0x38, 0x3B, 0x45, 0x3A, 0x40, 0x4B, 0x3C, 0x43, 0x4D, 0x40, 0x48, 0x50, 0x42, 0x4C, 0x51, 
   0x4D, 0x50, 0x5A, 0x5D, 0x57, 0x66, 0x67, 0x61, 0x71, 0x6C, 0x68, 0x78, 0x6F, 0x6C, 0x7C, 0x74, 
   0x6E, 0x7F, 0x6E, 0x65, 0x79, 0x68, 0x61, 0x75, 0x70, 0x6A, 0x7C, 0x80, 0x7B, 0x8D, 0x7E, 0x77, 
   0x8A, 0x67, 0x61, 0x6F, 0x6C, 0x72, 0x78, 0x66, 0x74, 0x79, 0x61, 0x68, 0x6C, 0x58, 0x5C, 0x5D, 
   0x4A, 0x50, 0x53, 0x3F, 0x48, 0x4B, 0x49, 0x55, 0x55, 0x6B, 0x75, 0x7C, 0x71, 0x75, 0x82, 0x4D, 
   0x50, 0x5A, 0x43, 0x44, 0x48, 0x45, 0x49, 0x46, 0x54, 0x52, 0x4F, 0x57, 0x52, 0x4F, 0x59, 0x52, 
   0x4A, 0x56, 0x53, 0x4B, 0x54, 0x54, 0x4B, 0x5D, 0x5A, 0x52, 0x5E, 0x5D, 0x5A, 0x57, 0x5A, 0x55, 
   0x60, 0x62, 0x5E, 0x68, 0x67, 0x62, 0x74, 0x76, 0x6E, 0xA8, 0xAB, 0xA9, 0x91, 0x8D, 0x90, 0x6B, 
   0x67, 0x67, 0x6E, 0x6C, 0x68, 0x8F, 0x90, 0x8C, 0xC4, 0xC3, 0xC1, 0xC0, 0xB9, 0xB6, 0x91, 0x87, 
   0x82, 0x83, 0x7E, 0x77, 0x80, 0x78, 0x73, 0x7C, 0x74, 0x72, 0x77, 0x73, 0x72, 0x7A, 0x79, 0x73, 
   0x79, 0x76, 0x6E, 0x72, 0x6F, 0x68, 0x76, 0x75, 0x70, 0x7D, 0x7E, 0x78, 0x83, 0x83, 0x7B, 0x93, 
   0x8E, 0x87, 0x90, 0x88, 0x80, 0x8B, 0x83, 0x7A, 0x86, 0x80, 0x79, 0x81, 0x7B, 0x74, 0x83, 0x7A, 
   0x73, 0x76, 0x6C, 0x68, 0x79, 0x72, 0x6C, 0x7A, 0x6F, 0x70, 0x49, 0x3E, 0x49, 0x39, 0x3E, 0x45, 
   0x59, 0x5D, 0x60, 0x57, 0x56, 0x55, 0x62, 0x61, 0x5E, 0x7D, 0x7D, 0x7B, 0x81, 0x7F, 0x7E, 0x85, 
   0x7D, 0x80, 0x7D, 0x78, 0x7C, 0x69, 0x63, 0x6A, 0x5D, 0x59, 0x61, 0x5D, 0x5E, 0x65, 0x64, 0x69, 
   0x6D, 0x6C, 0x6F, 0x74, 0x72, 0x72, 0x77, 0x72, 0x73, 0x77, 0x73, 0x74, 0x79, 0x7D, 0x7E, 0x87, 
   0x82, 0x84, 0x8C, 0x87, 0x87, 0x8E, 0x93, 0x8D, 0x94, 0x94, 0x8C, 0x91, 0x93, 0x8F, 0x95, 0x97, 
   0x96, 0x99, 0x9E, 0x9A, 0x9C, 0xA2, 0x9B, 0x9C, 0x9B, 0x99, 0x97, 0x97, 0x98, 0x95, 0x95, 0x95, 
   0x91, 0x96, 0x93, 0x90, 0x95, 0x92, 0x8F, 0x92, 0x91, 0x8E, 0x8E, 0x8D, 0x8C, 0x8F, 0x8C, 0x8B, 
   0x94, 0x8E, 0x8F, 0x99, 0x92, 0x96, 0x95, 0x91, 0x91, 0x8E, 0x89, 0x8C, 0x7E, 0x76, 0x84, 0x7E, 
   0x77, 0x85, 0x75, 0x70, 0x7A, 0x67, 0x64, 0x67, 0x69, 0x67, 0x66, 0x64, 0x67, 0x68, 0x6B, 0x64, 
   0x64, 0x78, 0x70, 0x6F, 0x7E, 0x7B, 0x7B, 0x75, 0x71, 0x72, 0x6A, 0x66, 0x70, 0x50, 0x4A, 0x51, 
   0x3A, 0x3A, 0x42, 0x41, 0x43, 0x4E, 0x42, 0x45, 0x53, 0x40, 0x47, 0x59, 0x58, 0x64, 0x7E, 0x61, 
   0x6E, 0x90, 0x5C, 0x6A, 0x8E, 0x5D, 0x6F, 0x94, 0x64, 0x75, 0x98, 0x61, 0x76, 0x97, 0x5F, 0x74, 
   0x96, 0x60, 0x73, 0x94, 0x62, 0x71, 0x8F, 0x68, 0x75, 0x93, 0x65, 0x73, 0x94, 0x66, 0x71, 0x92, 
   0x6A, 0x71, 0x93, 0x67, 0x6F, 0x8A, 0x65, 0x6D, 0x84, 0x77, 0x81, 0x96, 0x8B, 0x98, 0xA9, 0x95, 
   0x9D, 0xB1, 0xA7, 0xA5, 0xBB, 0x86, 0x7F, 0x90, 0x7F, 0x7C, 0x8F, 0x74, 0x7A, 0x93, 0x69, 0x73, 
   0x93, 0x64, 0x73, 0x94, 0x66, 0x78, 0x9C, 0x68, 0x7D, 0xA3, 0x65, 0x77, 0x9D, 0x5F, 0x6F, 0x98, 
   0x5D, 0x69, 0x90, 0x61, 0x6A, 0x85, 0x68, 0x6A, 0x76, 0x98, 0x9A, 0x9D, 0xBC, 0xB8, 0xB5, 0xB6, 
   0xB5, 0xB0, 0x97, 0x94, 0x92, 0x93, 0x90, 0x97, 0x94, 0x94, 0xAA, 0x79, 0x7E, 0x98, 0x72, 0x7B, 
   0x91, 0x82, 0x8D, 0xA4, 0x90, 0x9C, 0xBB, 0x8C, 0x9B, 0xBA, 0x84, 0x90, 0xAF, 0x8A, 0x8E, 0xAB, 
   0x7E, 0x7F, 0x96, 0x51, 0x54, 0x5F, 0x36, 0x3E, 0x41, 0x2C, 0x32, 0x35, 0x45, 0x40, 0x43, 0x5C, 
   0x55, 0x58, 0x59, 0x57, 0x59, 0x54, 0x54, 0x55, 0x4C, 0x50, 0x4F, 0x4F, 0x53, 0x55, 0x62, 0x64, 
   0x65, 0x51, 0x55, 0x57, 0x5C, 0x61, 0x65, 0x78, 0x7D, 0x87, 0x7E, 0x81, 0x91, 0x7D, 0x88, 0x98, 
   0x7F, 0x89, 0x94, 0x81, 0x8B, 0x98, 0x82, 0x8C, 0x9C, 0x81, 0x8C, 0x9B, 0x85, 0x8D, 0x98, 0x8A, 
   0x8E, 0x97, 0x90, 0x91, 0x9C, 0x95, 0x93, 0x9D, 0x92, 0x93, 0x97, 0x8A, 0x90, 0x91, 0x98, 0x9D, 
   0x9F, 0xA4, 0xA2, 0xAA, 0xA4, 0x9E, 0xA9, 0xA3, 0x9F, 0xA7, 0xA1, 0x9F, 0xA5, 0x9F, 0x9D, 0xA2, 
   0x9C, 0x9A, 0xA1, 0x98, 0x97, 0x9D, 0x8D, 0x8C, 0x91, 0x6B, 0x6A, 0x72, 0x51, 0x51, 0x58, 0x27, 
   0x29, 0x2D, 0x1D, 0x2A, 0x34, 0x33, 0x3B, 0x4E, 0x5F, 0x67, 0x77, 0x72, 0x82, 0x94, 0x7C, 0x8A, 
   0xA0, 0x81, 0x8E, 0xA4, 0x7F, 0x8F, 0xA2, 0x7D, 0x8E, 0x9E, 0x7B, 0x89, 0x97, 0x7C, 0x88, 0x97, 
   0x85, 0x90, 0xA3, 0x96, 0xA2, 0xB8, 0x9A, 0xA3, 0xB4, 0xA2, 0xAE, 0xBF, 0xA9, 0xB7, 0xC6, 0xA7, 
   0xB5, 0xC2, 0xA6, 0xB2, 0xC0, 0xAB, 0xB7, 0xC6, 0xAB, 0xB9, 0xC7, 0xAE, 0xB9, 0xC5, 0xAA, 0xB5, 
   0xC0, 0xA8, 0xB0, 0xBD, 0xA4, 0xAE, 0xBC, 0xA7, 0xB3, 0xC0, 0xAA, 0xB6, 0xBF, 0xA8, 0xB4, 0xBC, 
   0xA4, 0xB0, 0xB4, 0x9C, 0xA9, 0xB0, 0x99, 0xA5, 0xAE, 0x98, 0xA2, 0xAC, 0x9A, 0xA3, 0xAD, 0xA0, 
   0xAB, 0xB4, 0xA3, 0xAB, 0xB4, 0xA3, 0xAE, 0xB5, 0xA1, 0xAF, 0xB9, 0xA3, 0xAA, 0xB4, 0x9A, 0xA1, 
   0xAA, 0x93, 0x97, 0xA1, 0x60, 0x60, 0x68, 0x36, 0x3B, 0x3F, 0x2A, 0x2E, 0x32, 0x28, 0x27, 0x2F, 
   0x2A, 0x2A, 0x31, 0x33, 0x37, 0x3C, 0x31, 0x34, 0x3B, 0x22, 0x24, 0x28, 0x1E, 0x18, 0x1D, 0x20, 
   0x15, 0x19, 0x31, 0x2D, 0x32, 0x32, 0x32, 0x3C, 0x33, 0x31, 0x3C, 0x32, 0x32, 0x3C, 0x34, 0x36, 
   0x3E, 0x36, 0x39, 0x43, 0x3B, 0x40, 0x49, 0x3D, 0x44, 0x4A, 0x45, 0x4E, 0x50, 0x49, 0x53, 0x54, 
   0x52, 0x58, 0x5E, 0x57, 0x57, 0x63, 0x5B, 0x59, 0x65, 0x63, 0x65, 0x6D, 0x6E, 0x70, 0x79, 0x76, 
   0x76, 0x81, 0x77, 0x75, 0x83, 0x6F, 0x6C, 0x7B, 0x75, 0x73, 0x83, 0x7B, 0x7C, 0x8B, 0x82, 0x80, 
   0x90, 0x81, 0x7C, 0x89, 0x73, 0x74, 0x7A, 0x59, 0x63, 0x64, 0x4A, 0x52, 0x53, 0x41, 0x45, 0x45, 
   0x2D, 0x31, 0x34, 0x33, 0x3A, 0x3E, 0x6E, 0x7A, 0x7A, 0x7D, 0x8A, 0x8F, 0x78, 0x81, 0x8D, 0x56, 
   0x59, 0x62, 0x41, 0x45, 0x4A, 0x3F, 0x49, 0x48, 0x47, 0x4C, 0x4A, 0x4E, 0x4F, 0x4F, 0x51, 0x4D, 
   0x4B, 0x48, 0x45, 0x41, 0x41, 0x3F, 0x3D, 0x3C, 0x3A, 0x35, 0x47, 0x48, 0x44, 0x57, 0x58, 0x51, 
   0x65, 0x63, 0x5E, 0x6F, 0x6D, 0x66, 0x8A, 0x89, 0x81, 0xBD, 0xBE, 0xB6, 0xA4, 0xA3, 0x9F, 0x94, 
   0x8F, 0x8A, 0x97, 0x93, 0x8D, 0xA7, 0xA7, 0xA1, 0xAD, 0xAE, 0xA9, 0x94, 0x8E, 0x89, 0x85, 0x7E, 
   0x78, 0x87, 0x82, 0x7C, 0x89, 0x81, 0x7C, 0x7E, 0x75, 0x71, 0x79, 0x73, 0x6E, 0x7C, 0x77, 0x71, 
   0x75, 0x71, 0x6B, 0x74, 0x72, 0x6D, 0x75, 0x74, 0x70, 0x77, 0x79, 0x74, 0x7C, 0x7C, 0x76, 0x85, 
   0x82, 0x7A, 0x8F, 0x88, 0x7D, 0x91, 0x88, 0x79, 0x8E, 0x84, 0x78, 0x8B, 0x83, 0x79, 0x8E, 0x80, 
   0x7B, 0x85, 0x78, 0x75, 0x7E, 0x77, 0x6E, 0x7C, 0x71, 0x6F, 0x61, 0x55, 0x5D, 0x43, 0x42, 0x49, 
   0x56, 0x57, 0x5B, 0x5B, 0x59, 0x59, 0x5D, 0x5C, 0x5A, 0x68, 0x6A, 0x69, 0x7C, 0x7E, 0x7F, 0x90, 
   0x8B, 0x8E, 0x8D, 0x87, 0x89, 0x85, 0x7C, 0x83, 0x7A, 0x6F, 0x79, 0x6E, 0x69, 0x71, 0x69, 0x6C, 
   0x6F, 0x6F, 0x70, 0x73, 0x7B, 0x78, 0x7B, 0x77, 0x75, 0x77, 0x71, 0x71, 0x76, 0x72, 0x70, 0x77, 
   0x73, 0x72, 0x78, 0x7D, 0x80, 0x83, 0x8E, 0x8E, 0x91, 0x93, 0x90, 0x92, 0x8C, 0x8B, 0x91, 0x91, 
   0x93, 0x98, 0x99, 0x97, 0x9A, 0x9E, 0x99, 0x97, 0x9C, 0x98, 0x95, 0x9A, 0x96, 0x96, 0x95, 0x92, 
   0x93, 0x93, 0x93, 0x92, 0x92, 0x8F, 0x91, 0x92, 0x8E, 0x91, 0x8F, 0x8D, 0x8E, 0x91, 0x8F, 0x8F, 
   0x96, 0x95, 0x96, 0x9D, 0x99, 0x9B, 0xA0, 0x9C, 0x98, 0xA5, 0x9E, 0x9F, 0x9F, 0x93, 0x9E, 0x95, 
   0x8A, 0x93, 0x86, 0x7E, 0x84, 0x6E, 0x67, 0x69, 0x5F, 0x5C, 0x5F, 0x63, 0x61, 0x65, 0x6F, 0x65, 
   0x66, 0x76, 0x6C, 0x68, 0x74, 0x70, 0x6B, 0x78, 0x74, 0x73, 0x7D, 0x78, 0x7D, 0x7A, 0x6F, 0x70, 
   0x5E, 0x52, 0x59, 0x40, 0x3B, 0x48, 0x45, 0x4B, 0x5B, 0x4E, 0x56, 0x6E, 0x53, 0x5D, 0x7D, 0x54, 
   0x64, 0x87, 0x58, 0x67, 0x8E, 0x5E, 0x6A, 0x8F, 0x5E, 0x69, 0x8D, 0x5D, 0x6F, 0x91, 0x5D, 0x72, 
   0x93, 0x61, 0x74, 0x96, 0x66, 0x74, 0x96, 0x68, 0x75, 0x97, 0x60, 0x6E, 0x91, 0x63, 0x70, 0x90, 
   0x68, 0x71, 0x8F, 0x69, 0x70, 0x84, 0x71, 0x7B, 0x88, 0x81, 0x8F, 0x9E, 0x88, 0x97, 0xA6, 0x92, 
   0x9A, 0xAC, 0x9F, 0x9F, 0xB2, 0x9C, 0x96, 0xA5, 0x97, 0x8F, 0xA1, 0x80, 0x76, 0x90, 0x67, 0x67, 
   0x84, 0x5F, 0x65, 0x82, 0x60, 0x6A, 0x89, 0x5F, 0x6D, 0x8D, 0x62, 0x6F, 0x90, 0x62, 0x73, 0x92, 
   0x5E, 0x66, 0x83, 0x51, 0x58, 0x6A, 0xB0, 0xAB, 0xAA, 0xC3, 0xB9, 0xB6, 0xC1, 0xBA, 0xB7, 0x92, 
   0x90, 0x8E, 0x89, 0x89, 0x88, 0x97, 0x98, 0x9C, 0x7F, 0x83, 0x93, 0x6F, 0x77, 0x90, 0x6D, 0x75, 
   0x8C, 0x71, 0x79, 0x90, 0x7C, 0x83, 0xA3, 0x78, 0x84, 0xA3, 0x80, 0x8C, 0xAB, 0x92, 0x9D, 0xBC, 
   0x86, 0x8D, 0xA8, 0x60, 0x66, 0x71, 0x53, 0x5C, 0x5E, 0x4A, 0x4D, 0x4E, 0x49, 0x46, 0x46, 0x5B, 
   0x57, 0x59, 0x59, 0x57, 0x58, 0x52, 0x53, 0x54, 0x4C, 0x4E, 0x53, 0x4D, 0x4F, 0x51, 0x69, 0x66, 
   0x68, 0x50, 0x50, 0x53, 0x54, 0x58, 0x59, 0x70, 0x7A, 0x82, 0x7C, 0x84, 0x91, 0x80, 0x8B, 0x9A, 
   0x81, 0x8A, 0x97, 0x82, 0x8B, 0x9A, 0x83, 0x8E, 0x9D, 0x81, 0x8B, 0x9B, 0x86, 0x8A, 0x9B, 0x8D, 
   0x8D, 0x9D, 0x8F, 0x8F, 0x9C, 0x93, 0x91, 0x9A, 0x93, 0x90, 0x93, 0x8D, 0x8F, 0x90, 0x8C, 0x94, 
   0x94, 0x99, 0xA0, 0xA5, 0x9E, 0x9E, 0xA6, 0x9D, 0x9D, 0xA2, 0x99, 0x98, 0x9F, 0x9B, 0x99, 0xA1, 
   0xA0, 0x9A, 0xA4, 0x9F, 0x9A, 0xA0, 0x96, 0x95, 0x98, 0x73, 0x71, 0x76, 0x5B, 0x5B, 0x61, 0x35, 
   0x39, 0x3E, 0x16, 0x1E, 0x24, 0x4C, 0x53, 0x5F, 0x6C, 0x75, 0x85, 0x73, 0x81, 0x95, 0x7C, 0x8A, 
   0xA0, 0x81, 0x8E, 0xA4, 0x7E, 0x8D, 0x9D, 0x7D, 0x88, 0x96, 0x72, 0x7B, 0x82, 0x78, 0x83, 0x89, 
   0x9D, 0xA8, 0xB6, 0xA7, 0xB1, 0xC6, 0xA1, 0xAF, 0xC0, 0xA3, 0xB6, 0xC5, 0xA9, 0xBD, 0xC9, 0xAF, 
   0xBE, 0xC9, 0xA8, 0xB3, 0xBE, 0xAC, 0xB6, 0xC3, 0xAC, 0xB9, 0xCA, 0xAC, 0xB9, 0xC6, 0xA6, 0xB3, 
   0xBD, 0x9E, 0xA4, 0xB4, 0x9B, 0xA6, 0xB8, 0xA2, 0xAF, 0xBD, 0xA9, 0xB1, 0xB8, 0x9F, 0xAC, 0xB2, 
   0x9D, 0xAA, 0xB0, 0x9F, 0xAA, 0xB3, 0xA1, 0xAB, 0xB9, 0xA1, 0xAE, 0xBC, 0xA3, 0xAF, 0xBA, 0xA4, 
   0xAE, 0xB6, 0xA5, 0xAE, 0xB4, 0xA8, 0xB2, 0xB9, 0xA4, 0xB1, 0xBB, 0x9C, 0xA6, 0xB0, 0x8C, 0x96, 
   0x9F, 0x8C, 0x8D, 0x98, 0x4C, 0x47, 0x50, 0x20, 0x21, 0x26, 0x20, 0x21, 0x27, 0x2D, 0x2E, 0x33, 
   0x41, 0x41, 0x45, 0x4E, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x49, 0x48, 0x4A, 0x45, 0x43, 0x47, 0x46, 
   0x3D, 0x43, 0x45, 0x41, 0x46, 0x3D, 0x3B, 0x40, 0x38, 0x33, 0x38, 0x31, 0x2D, 0x33, 0x2E, 0x2A, 
   0x30, 0x26, 0x27, 0x2D, 0x2A, 0x2B, 0x32, 0x2E, 0x30, 0x34, 0x34, 0x38, 0x39, 0x37, 0x3B, 0x3C, 
   0x3E, 0x46, 0x4A, 0x3F, 0x48, 0x50, 0x43, 0x4A, 0x50, 0x4D, 0x53, 0x56, 0x55, 0x5B, 0x5D, 0x5B, 
   0x60, 0x66, 0x5F, 0x61, 0x6A, 0x60, 0x5E, 0x69, 0x63, 0x61, 0x6B, 0x64, 0x63, 0x6D, 0x67, 0x69, 
   0x70, 0x6B, 0x6F, 0x72, 0x5F, 0x61, 0x63, 0x50, 0x54, 0x55, 0x49, 0x51, 0x51, 0x4C, 0x55, 0x54, 
   0x53, 0x5B, 0x5E, 0x56, 0x5C, 0x60, 0x76, 0x7F, 0x7F, 0x81, 0x8C, 0x8F, 0x7B, 0x81, 0x8C, 0x5D, 
   0x59, 0x65, 0x3C, 0x39, 0x40, 0x35, 0x36, 0x3A, 0x40, 0x45, 0x48, 0x48, 0x4C, 0x51, 0x4B, 0x4B, 
   0x4F, 0x48, 0x47, 0x48, 0x47, 0x45, 0x49, 0x32, 0x2E, 0x32, 0x25, 0x27, 0x27, 0x4B, 0x4B, 0x46, 
   0x6D, 0x6E, 0x66, 0x6D, 0x6F, 0x65, 0x78, 0x76, 0x6E, 0x7F, 0x7C, 0x73, 0x76, 0x77, 0x70, 0x7D, 
   0x7A, 0x75, 0x81, 0x7D, 0x78, 0x80, 0x81, 0x7B, 0x83, 0x83, 0x7B, 0x87, 0x80, 0x77, 0x88, 0x84, 
   0x7B, 0x8C, 0x87, 0x82, 0x97, 0x8E, 0x8A, 0x8C, 0x82, 0x7F, 0x85, 0x7C, 0x7A, 0x81, 0x77, 0x75, 
   0x76, 0x6F, 0x6C, 0x72, 0x70, 0x6B, 0x74, 0x72, 0x6C, 0x76, 0x75, 0x71, 0x7E, 0x7A, 0x77, 0x82, 
   0x7E, 0x7A, 0x8B, 0x86, 0x7E, 0x8E, 0x88, 0x7C, 0x8A, 0x82, 0x78, 0x8D, 0x84, 0x7F, 0x8C, 0x81, 
   0x81, 0x8C, 0x81, 0x7B, 0x85, 0x7D, 0x77, 0x7F, 0x74, 0x75, 0x6D, 0x63, 0x69, 0x49, 0x42, 0x49, 
   0x4F, 0x4E, 0x53, 0x57, 0x58, 0x57, 0x5E, 0x5C, 0x5A, 0x67, 0x68, 0x68, 0x7A, 0x7E, 0x7E, 0x90, 
   0x8E, 0x8D, 0x92, 0x8E, 0x90, 0x95, 0x8F, 0x92, 0x96, 0x8C, 0x90, 0x8B, 0x86, 0x8A, 0x80, 0x80, 
   0x84, 0x7E, 0x7D, 0x80, 0x78, 0x76, 0x77, 0x73, 0x72, 0x74, 0x69, 0x6D, 0x73, 0x6B, 0x70, 0x77, 
   0x73, 0x74, 0x79, 0x7E, 0x7D, 0x7F, 0x84, 0x84, 0x85, 0x91, 0x91, 0x92, 0x90, 0x91, 0x93, 0x92, 
   0x93, 0x97, 0x98, 0x95, 0x98, 0x9B, 0x97, 0x97, 0x99, 0x95, 0x92, 0x97, 0x91, 0x91, 0x95, 0x8F, 
   0x90, 0x94, 0x90, 0x92, 0x94, 0x8E, 0x94, 0x95, 0x8E, 0x95, 0x97, 0x93, 0x97, 0x99, 0x95, 0x96, 
   0x9C, 0x99, 0x9A, 0xA7, 0xA1, 0xA1, 0xAD, 0xA5, 0xA1, 0xAB, 0xA0, 0x9E, 0xA3, 0x99, 0x9B, 0xA1, 
   0x99, 0x99, 0xA6, 0x9D, 0x9F, 0x9B, 0x90, 0x93, 0x82, 0x77, 0x82, 0x71, 0x6A, 0x6E, 0x6C, 0x65, 
   0x67, 0x6C, 0x65, 0x64, 0x6D, 0x69, 0x68, 0x7A, 0x74, 0x79, 0x85, 0x7C, 0x83, 0x87, 0x7D, 0x7A, 
   0x80, 0x70, 0x75, 0x43, 0x3A, 0x46, 0x38, 0x3E, 0x4B, 0x47, 0x53, 0x68, 0x4F, 0x5B, 0x7C, 0x51, 
   0x5F, 0x80, 0x5A, 0x64, 0x89, 0x5D, 0x66, 0x88, 0x59, 0x64, 0x8A, 0x5D, 0x6D, 0x91, 0x62, 0x76, 
   0x98, 0x62, 0x71, 0x96, 0x68, 0x74, 0x98, 0x69, 0x78, 0x98, 0x63, 0x6F, 0x91, 0x5E, 0x69, 0x8C, 
   0x5D, 0x69, 0x88, 0x67, 0x71, 0x83, 0x7A, 0x82, 0x91, 0x86, 0x8F, 0xA0, 0x89, 0x8F, 0xA1, 0x96, 
   0x97, 0xA7, 0xA1, 0xA1, 0xAE, 0xA5, 0xA4, 0xAF, 0xA6, 0xA2, 0xB1, 0x98, 0x90, 0xA4, 0x82, 0x7F, 
   0x95, 0x83, 0x80, 0x96, 0x8B, 0x8A, 0xA1, 0x80, 0x7F, 0x9C, 0x78, 0x7B, 0x97, 0x6A, 0x73, 0x88, 
   0x5D, 0x62, 0x73, 0x52, 0x50, 0x5C, 0xD6, 0xC8, 0xC2, 0xBE, 0xAE, 0xAE, 0xB3, 0xAC, 0xAC, 0xB0, 
   0xAC, 0xAD, 0xAD, 0xAA, 0xB1, 0x93, 0x97, 0xA1, 0x84, 0x8C, 0x9A, 0x84, 0x8A, 0xA1, 0x7A, 0x7C, 
   0x96, 0x6F, 0x70, 0x8A, 0x64, 0x66, 0x8A, 0x5D, 0x65, 0x89, 0x75, 0x82, 0x9F, 0xB5, 0xC5, 0xDC, 
   0xB2, 0xC0, 0xD5, 0x6E, 0x78, 0x87, 0x64, 0x6C, 0x6E, 0x6B, 0x6D, 0x6D, 0x4F, 0x4E, 0x4C, 0x50, 
   0x51, 0x51, 0x52, 0x54, 0x53, 0x50, 0x50, 0x4F, 0x48, 0x49, 0x4B, 0x43, 0x41, 0x43, 0x6B, 0x69, 
   0x69, 0x52, 0x4F, 0x52, 0x4B, 0x4A, 0x4A, 0x61, 0x6C, 0x73, 0x76, 0x85, 0x8E, 0x82, 0x8B, 0x9A, 
   0x84, 0x8B, 0x9C, 0x85, 0x8C, 0x9D, 0x83, 0x8D, 0x9D, 0x81, 0x8B, 0x9B, 0x86, 0x8B, 0x9C, 0x8B, 
   0x8C, 0x9E, 0x8D, 0x8D, 0x9D, 0x94, 0x90, 0x9B, 0x92, 0x90, 0x94, 0x8E, 0x8E, 0x8F, 0x85, 0x8C, 
   0x8B, 0x8E, 0x97, 0x9A, 0x9C, 0x9F, 0xA7, 0x9D, 0x9C, 0xA3, 0x9A, 0x98, 0xA2, 0x95, 0x94, 0x9D, 
   0x9F, 0x99, 0xA4, 0xA5, 0x9C, 0xA3, 0xA2, 0x9C, 0xA0, 0x82, 0x7C, 0x83, 0x63, 0x62, 0x69, 0x43, 
   0x4B, 0x53, 0x2C, 0x33, 0x3E, 0x5C, 0x65, 0x71, 0x66, 0x74, 0x86, 0x6E, 0x7C, 0x93, 0x71, 0x81, 
   0x95, 0x76, 0x87, 0x9A, 0x7A, 0x89, 0x99, 0x7C, 0x86, 0x94, 0x79, 0x80, 0x8A, 0x8D, 0x97, 0xA0, 
   0xAA, 0xB6, 0xC6, 0xAE, 0xB9, 0xCE, 0xB2, 0xC0, 0xD1, 0xB0, 0xC2, 0xCF, 0xB3, 0xC6, 0xCF, 0xB3, 
   0xC2, 0xCA, 0xAD, 0xB8, 0xC1, 0xAC, 0xB4, 0xBF, 0xAB, 0xB3, 0xC0, 0xA3, 0xB1, 0xBE, 0x9B, 0xAA, 
   0xB5, 0x97, 0xA2, 0xB0, 0x98, 0xA6, 0xB6, 0xA1, 0xAE, 0xBA, 0xAF, 0xB6, 0xBE, 0xA1, 0xAB, 0xB3, 
   0x9F, 0xAC, 0xB4, 0xA4, 0xB0, 0xBB, 0xA8, 0xB6, 0xC3, 0xA4, 0xB4, 0xC0, 0xA2, 0xB2, 0xBB, 0xA4, 
   0xB1, 0xB7, 0xAA, 0xB4, 0xB9, 0xAA, 0xB4, 0xBA, 0xA4, 0xB1, 0xB7, 0x98, 0xA2, 0xAD, 0x8D, 0x97, 
   0xA2, 0x7B, 0x80, 0x8B, 0x36, 0x34, 0x40, 0x20, 0x20, 0x2B, 0x31, 0x31, 0x3A, 0x42, 0x43, 0x45, 
   0x4B, 0x4E, 0x4F, 0x4C, 0x52, 0x52, 0x48, 0x4D, 0x4E, 0x44, 0x46, 0x4A, 0x46, 0x4A, 0x4E, 0x43, 
   0x46, 0x4A, 0x3E, 0x43, 0x47, 0x3D, 0x40, 0x43, 0x3E, 0x3F, 0x41, 0x41, 0x41, 0x44, 0x38, 0x34, 
   0x38, 0x35, 0x32, 0x35, 0x31, 0x30, 0x34, 0x2C, 0x2D, 0x30, 0x28, 0x29, 0x2B, 0x21, 0x23, 0x24, 
   0x25, 0x28, 0x2C, 0x2A, 0x30, 0x35, 0x2D, 0x36, 0x38, 0x2A, 0x2F, 0x30, 0x33, 0x39, 0x3A, 0x41, 
   0x47, 0x4A, 0x42, 0x41, 0x48, 0x42, 0x45, 0x48, 0x48, 0x4D, 0x4F, 0x50, 0x51, 0x53, 0x50, 0x54, 
   0x54, 0x4E, 0x54, 0x52, 0x4A, 0x4F, 0x4E, 0x4B, 0x4F, 0x50, 0x4D, 0x52, 0x54, 0x4D, 0x57, 0x56, 
   0x54, 0x5E, 0x5F, 0x51, 0x59, 0x5B, 0x64, 0x6F, 0x6D, 0x84, 0x8E, 0x91, 0x81, 0x83, 0x8F, 0x6C, 
   0x67, 0x74, 0x3C, 0x3B, 0x45, 0x37, 0x3A, 0x42, 0x43, 0x49, 0x50, 0x49, 0x52, 0x5A, 0x4A, 0x52, 
   0x5A, 0x4E, 0x53, 0x59, 0x54, 0x54, 0x5E, 0x4B, 0x4C, 0x55, 0x44, 0x47, 0x4E, 0x41, 0x44, 0x48, 
   0x44, 0x49, 0x47, 0x4C, 0x51, 0x4A, 0x5B, 0x5B, 0x54, 0x5E, 0x5D, 0x58, 0x5F, 0x61, 0x59, 0x69, 
   0x67, 0x5F, 0x6F, 0x6D, 0x65, 0x71, 0x72, 0x68, 0x76, 0x77, 0x6F, 0x78, 0x77, 0x6F, 0x7F, 0x7E, 
   0x76, 0x84, 0x80, 0x7A, 0x95, 0x8E, 0x8A, 0x94, 0x8D, 0x88, 0x8F, 0x8B, 0x87, 0x83, 0x7C, 0x79, 
   0x7C, 0x75, 0x74, 0x78, 0x76, 0x73, 0x79, 0x78, 0x73, 0x7D, 0x79, 0x75, 0x7F, 0x7A, 0x76, 0x82, 
   0x7B, 0x77, 0x84, 0x7B, 0x76, 0x8C, 0x84, 0x7D, 0x8B, 0x83, 0x7B, 0x97, 0x8F, 0x89, 0xAA, 0x9F, 
   0xA1, 0x8F, 0x85, 0x82, 0x81, 0x7A, 0x79, 0x72, 0x69, 0x6E, 0x65, 0x5E, 0x66, 0x4E, 0x48, 0x53, 
   0x41, 0x45, 0x4D, 0x41, 0x4B, 0x4D, 0x5A, 0x5D, 0x5A, 0x79, 0x78, 0x75, 0x93, 0x93, 0x8F, 0x94, 
   0x92, 0x90, 0x96, 0x97, 0x95, 0x93, 0x94, 0x92, 0x89, 0x86, 0x84, 0x8C, 0x87, 0x86, 0x99, 0x94, 
   0x94, 0x95, 0x8E, 0x8F, 0x82, 0x7E, 0x7F, 0x74, 0x6F, 0x76, 0x5B, 0x5C, 0x64, 0x54, 0x5A, 0x62, 
   0x60, 0x66, 0x6D, 0x69, 0x6D, 0x72, 0x70, 0x71, 0x76, 0x7B, 0x7D, 0x82, 0x83, 0x88, 0x8C, 0x92, 
   0x92, 0x97, 0x98, 0x92, 0x95, 0x97, 0x94, 0x92, 0x95, 0x93, 0x90, 0x97, 0x90, 0x90, 0x97, 0x8D, 
   0x8F, 0x96, 0x8E, 0x90, 0x93, 0x8C, 0x92, 0x94, 0x8D, 0x94, 0x96, 0x93, 0x96, 0x9E, 0x98, 0x98, 
   0xA0, 0x9A, 0x99, 0xAA, 0xA3, 0xA1, 0xA9, 0xA2, 0x9A, 0xA1, 0x98, 0x92, 0x99, 0x91, 0x8E, 0x99, 
   0x93, 0x90, 0x9B, 0x95, 0x94, 0x9E, 0x96, 0x98, 0x99, 0x8C, 0x96, 0x83, 0x7B, 0x7D, 0x78, 0x70, 
   0x71, 0x72, 0x69, 0x6C, 0x73, 0x6B, 0x71, 0x78, 0x70, 0x7D, 0x80, 0x77, 0x85, 0x82, 0x7C, 0x7B, 
   0x7A, 0x6C, 0x74, 0x4A, 0x42, 0x4C, 0x39, 0x3E, 0x46, 0x47, 0x4F, 0x60, 0x50, 0x57, 0x74, 0x53, 
   0x5E, 0x79, 0x5B, 0x63, 0x83, 0x5F, 0x66, 0x85, 0x5F, 0x66, 0x8A, 0x5D, 0x69, 0x8E, 0x58, 0x66, 
   0x8A, 0x53, 0x5B, 0x84, 0x56, 0x5C, 0x83, 0x5C, 0x68, 0x86, 0x59, 0x65, 0x83, 0x4B, 0x55, 0x78, 
   0x52, 0x62, 0x7E, 0x67, 0x75, 0x8B, 0x8B, 0x93, 0xA8, 0x94, 0x9A, 0xAA, 0x93, 0x96, 0xA6, 0x99, 
   0x9A, 0xA7, 0x9C, 0x9D, 0xA9, 0xA3, 0xA4, 0xAF, 0xA5, 0xA4, 0xAF, 0xA8, 0xA3, 0xAE, 0xA0, 0x9D, 
   0xA7, 0xA7, 0xA4, 0xAF, 0xB3, 0xAE, 0xBF, 0xB1, 0xAA, 0xBE, 0xA4, 0x9D, 0xB2, 0x78, 0x71, 0x81, 
   0x5B, 0x57, 0x60, 0x57, 0x54, 0x5F, 0xB2, 0xA8, 0xA5, 0x93, 0x8C, 0x8F, 0x8E, 0x8A, 0x8D, 0xA9, 
   0xA6, 0xAB, 0xBA, 0xB6, 0xBD, 0x99, 0x9B, 0xA4, 0x87, 0x8C, 0x9E, 0x89, 0x8B, 0xA6, 0x7A, 0x7F, 
   0x9A, 0x71, 0x75, 0x8D, 0x6B, 0x70, 0x8C, 0x64, 0x6B, 0x88, 0x6C, 0x78, 0x91, 0x99, 0xAB, 0xC7, 
   0x8F, 0xA4, 0xBE, 0x55, 0x67, 0x73, 0x63, 0x6C, 0x6E, 0x75, 0x78, 0x76, 0x53, 0x55, 0x51, 0x3D, 
   0x43, 0x3E, 0x49, 0x4C, 0x46, 0x49, 0x49, 0x44, 0x3F, 0x40, 0x3D, 0x3C, 0x3D, 0x3F, 0x66, 0x6E, 
   0x6E, 0x66, 0x6A, 0x6E, 0x43, 0x43, 0x45, 0x58, 0x5E, 0x68, 0x77, 0x82, 0x90, 0x80, 0x86, 0x96, 
   0x84, 0x8C, 0x9B, 0x88, 0x8E, 0x9D, 0x84, 0x8D, 0x9C, 0x81, 0x8D, 0x9B, 0x87, 0x8D, 0x9C, 0x89, 
   0x8B, 0x9B, 0x8E, 0x8F, 0x9F, 0x94, 0x94, 0xA1, 0x93, 0x93, 0x97, 0x8F, 0x8E, 0x90, 0x89, 0x8C, 
   0x8D, 0x8E, 0x94, 0x97, 0x9F, 0x9D, 0xA6, 0xA0, 0x9B, 0xA5, 0x9D, 0x9C, 0xA8, 0x94, 0x95, 0x9E, 
   0x93, 0x8E, 0x96, 0xA5, 0x9C, 0xA3, 0x9D, 0x96, 0x9C, 0x86, 0x80, 0x8A, 0x69, 0x66, 0x6D, 0x52, 
   0x57, 0x5E, 0x36, 0x3D, 0x49, 0x46, 0x52, 0x60, 0x53, 0x66, 0x75, 0x65, 0x73, 0x86, 0x6E, 0x7B, 
   0x8D, 0x76, 0x87, 0x97, 0x83, 0x93, 0x9F, 0x95, 0x9D, 0xAA, 0x9B, 0xA0, 0xAC, 0xA3, 0xAC, 0xB9, 
   0xA8, 0xB4, 0xC6, 0xA6, 0xB2, 0xC6, 0xA8, 0xB9, 0xC7, 0xB2, 0xBF, 0xC9, 0xB9, 0xC5, 0xCA, 0xB3, 
   0xBD, 0xC3, 0xAC, 0xB5, 0xBD, 0xA6, 0xAF, 0xB8, 0x9E, 0xA6, 0xB0, 0x90, 0x9D, 0xAA, 0x8E, 0x9B, 
   0xA5, 0x9B, 0xA5, 0xAD, 0x9C, 0xA9, 0xB0, 0xA1, 0xAC, 0xB3, 0xAC, 0xB5, 0xBD, 0xAE, 0xBA, 0xC4, 
   0xA5, 0xB1, 0xBB, 0xA2, 0xAD, 0xB9, 0xA2, 0xAF, 0xBA, 0xA3, 0xB2, 0xBD, 0xA7, 0xB7, 0xC0, 0xA7, 
   0xB5, 0xBB, 0xAB, 0xB7, 0xBB, 0xAC, 0xB7, 0xBC, 0xA6, 0xB2, 0xB7, 0x90, 0x9C, 0xA4, 0x77, 0x83, 
   0x90, 0x4D, 0x53, 0x5F, 0x36, 0x3A, 0x48, 0x41, 0x44, 0x57, 0x45, 0x47, 0x57, 0x4A, 0x4A, 0x52, 
   0x47, 0x4B, 0x52, 0x41, 0x47, 0x4F, 0x42, 0x47, 0x50, 0x47, 0x47, 0x4F, 0x45, 0x46, 0x4D, 0x3D, 
   0x3F, 0x46, 0x30, 0x35, 0x3A, 0x35, 0x38, 0x3D, 0x38, 0x39, 0x3E, 0x3A, 0x3A, 0x3F, 0x3C, 0x39, 
   0x3D, 0x36, 0x37, 0x3B, 0x35, 0x35, 0x3B, 0x3A, 0x39, 0x41, 0x39, 0x36, 0x3E, 0x36, 0x33, 0x39, 
   0x30, 0x30, 0x35, 0x2F, 0x33, 0x38, 0x2F, 0x31, 0x35, 0x20, 0x23, 0x22, 0x36, 0x3B, 0x38, 0x4B, 
   0x4F, 0x4E, 0x48, 0x47, 0x4A, 0x44, 0x48, 0x4A, 0x48, 0x4E, 0x4E, 0x4F, 0x51, 0x4F, 0x4D, 0x52, 
   0x4F, 0x4B, 0x51, 0x4E, 0x48, 0x4E, 0x4C, 0x4B, 0x4E, 0x50, 0x4E, 0x4F, 0x53, 0x4B, 0x50, 0x51, 
   0x4D, 0x52, 0x53, 0x49, 0x4E, 0x50, 0x43, 0x4F, 0x4D, 0x6F, 0x7A, 0x7C, 0x72, 0x76, 0x7E, 0x6A, 
   0x6B, 0x74, 0x57, 0x5F, 0x6C, 0x4A, 0x54, 0x62, 0x46, 0x53, 0x60, 0x4E, 0x5F, 0x6B, 0x51, 0x62, 
   0x6E, 0x56, 0x63, 0x6E, 0x57, 0x5C, 0x68, 0x52, 0x58, 0x5D, 0x58, 0x5F, 0x68, 0x4C, 0x51, 0x5F, 
   0x40, 0x47, 0x53, 0x3A, 0x40, 0x48, 0x37, 0x38, 0x3A, 0x3A, 0x3E, 0x3E, 0x3F, 0x43, 0x3C, 0x46, 
   0x47, 0x40, 0x50, 0x53, 0x49, 0x5F, 0x64, 0x58, 0x63, 0x66, 0x5B, 0x69, 0x69, 0x61, 0x73, 0x6F, 
   0x67, 0x79, 0x76, 0x6D, 0x7F, 0x7D, 0x73, 0x88, 0x87, 0x7E, 0x9B, 0x9C, 0x94, 0x89, 0x85, 0x80, 
   0x7F, 0x78, 0x74, 0x80, 0x7E, 0x7A, 0x8C, 0x88, 0x85, 0x9F, 0x98, 0x94, 0x9E, 0x97, 0x90, 0x98, 
   0x90, 0x87, 0x98, 0x8C, 0x83, 0x8D, 0x83, 0x7A, 0x8B, 0x86, 0x78, 0xA5, 0xA0, 0x95, 0xC2, 0xB6, 
   0xBA, 0x8B, 0x7F, 0x80, 0x8C, 0x86, 0x7D, 0x85, 0x7F, 0x78, 0x6A, 0x62, 0x68, 0x57, 0x52, 0x5F, 
   0x42, 0x49, 0x53, 0x2C, 0x3B, 0x3D, 0x51, 0x5C, 0x57, 0x6D, 0x75, 0x6B, 0x7C, 0x83, 0x79, 0x77, 
   0x7F, 0x79, 0x82, 0x8A, 0x85, 0x9A, 0xA1, 0x9D, 0x9C, 0x9C, 0x99, 0x89, 0x87, 0x82, 0x89, 0x85, 
   0x80, 0x89, 0x85, 0x82, 0x87, 0x86, 0x88, 0x93, 0x8E, 0x93, 0x8A, 0x81, 0x8A, 0x6F, 0x6B, 0x73, 
   0x5C, 0x5F, 0x64, 0x61, 0x64, 0x66, 0x7D, 0x7C, 0x7E, 0x91, 0x91, 0x95, 0x84, 0x8A, 0x8F, 0x8D, 
   0x8E, 0x90, 0x97, 0x8F, 0x8E, 0x9D, 0x96, 0x90, 0x9D, 0x98, 0x92, 0x97, 0x8E, 0x8B, 0x94, 0x8C, 
   0x8A, 0x93, 0x8E, 0x8D, 0x96, 0x8F, 0x92, 0x9A, 0x93, 0x96, 0x9F, 0x9A, 0x9B, 0xA2, 0x9A, 0x9B, 
   0xA1, 0x96, 0x99, 0x99, 0x94, 0x92, 0x9A, 0x98, 0x90, 0x9A, 0x94, 0x90, 0x98, 0x90, 0x92, 0x92, 
   0x8B, 0x8A, 0x94, 0x8C, 0x8C, 0x9D, 0x94, 0x94, 0x98, 0x93, 0x94, 0x99, 0x94, 0x8F, 0x97, 0x8C, 
   0x8B, 0x8F, 0x81, 0x87, 0x78, 0x6E, 0x7A, 0x74, 0x6C, 0x7D, 0x79, 0x70, 0x7D, 0x80, 0x7C, 0x7F, 
   0x6C, 0x5F, 0x69, 0x43, 0x3B, 0x43, 0x39, 0x3D, 0x40, 0x4D, 0x53, 0x5E, 0x56, 0x5A, 0x70, 0x55, 
   0x5F, 0x75, 0x5F, 0x68, 0x83, 0x63, 0x6A, 0x85, 0x61, 0x69, 0x8A, 0x5A, 0x66, 0x89, 0x57, 0x64, 
   0x87, 0x5A, 0x63, 0x8A, 0x5D, 0x63, 0x8C, 0x58, 0x60, 0x85, 0x4B, 0x58, 0x77, 0x46, 0x53, 0x72, 
   0x5F, 0x75, 0x8C, 0x86, 0x9B, 0xAF, 0x8D, 0x96, 0xA9, 0x90, 0x94, 0xA7, 0x97, 0x9C, 0xAE, 0x9C, 
   0xA0, 0xAF, 0x95, 0x9A, 0xA9, 0x9E, 0xA2, 0xB1, 0x9F, 0xA2, 0xAF, 0xA2, 0xA0, 0xAB, 0xA1, 0x9E, 
   0xA4, 0x9F, 0xA2, 0xA9, 0xA2, 0xA5, 0xAF, 0xA8, 0xAA, 0xB3, 0xB2, 0xAB, 0xB7, 0x8B, 0x7A, 0x86, 
   0x5F, 0x55, 0x58, 0x59, 0x53, 0x5B, 0x75, 0x73, 0x77, 0x73, 0x73, 0x76, 0x82, 0x7F, 0x81, 0x94, 
   0x8E, 0x92, 0xA8, 0x9F, 0xA4, 0x9C, 0x98, 0x9F, 0x8A, 0x89, 0x9C, 0x84, 0x83, 0x9F, 0x80, 0x83, 
   0x9D, 0x80, 0x85, 0x9C, 0x7E, 0x82, 0x99, 0x7F, 0x82, 0x99, 0x77, 0x76, 0x92, 0x70, 0x78, 0x94, 
   0x52, 0x63, 0x76, 0x44, 0x53, 0x5A, 0x55, 0x5F, 0x62, 0x66, 0x6D, 0x6C, 0x53, 0x57, 0x55, 0x3D, 
   0x3F, 0x3E, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x3B, 0x35, 0x38, 0x37, 0x2B, 0x2D, 0x2F, 0x5A, 0x62, 
   0x62, 0x7A, 0x82, 0x85, 0x56, 0x5C, 0x5D, 0x5A, 0x5D, 0x67, 0x79, 0x7E, 0x8D, 0x81, 0x85, 0x95, 
   0x82, 0x89, 0x96, 0x85, 0x89, 0x98, 0x84, 0x8C, 0x9C, 0x84, 0x8F, 0x9F, 0x85, 0x8D, 0x9D, 0x89, 
   0x8D, 0x9A, 0x92, 0x91, 0xA0, 0x9C, 0x96, 0xA4, 0x97, 0x92, 0x98, 0x91, 0x8B, 0x90, 0x8B, 0x8A, 
   0x8D, 0x8C, 0x92, 0x95, 0x96, 0x96, 0x9E, 0x9F, 0x9C, 0xA4, 0x9E, 0x9F, 0xA8, 0x99, 0x9B, 0xA4, 
   0x8D, 0x88, 0x95, 0x95, 0x90, 0x98, 0x91, 0x90, 0x95, 0x7C, 0x7D, 0x83, 0x6A, 0x69, 0x6E, 0x60, 
   0x5E, 0x64, 0x42, 0x45, 0x50, 0x37, 0x41, 0x4E, 0x4D, 0x5D, 0x66, 0x61, 0x70, 0x77, 0x70, 0x7A, 
   0x87, 0x7C, 0x88, 0x97, 0x8E, 0x9A, 0xA4, 0x9C, 0xA2, 0xAE, 0xA4, 0xA8, 0xB5, 0xA5, 0xAE, 0xBB, 
   0xA1, 0xAD, 0xBD, 0x9D, 0xA8, 0xB7, 0x9A, 0xA6, 0xAF, 0xA4, 0xAD, 0xB2, 0xA9, 0xAF, 0xB1, 0xAB, 
   0xB2, 0xB6, 0xA5, 0xAE, 0xB5, 0x9D, 0xA7, 0xB1, 0x94, 0x9D, 0xA7, 0x8D, 0x93, 0x9C, 0x94, 0x9B, 
   0xA2, 0xA1, 0xA9, 0xAD, 0xA5, 0xAF, 0xB0, 0xA7, 0xB1, 0xB3, 0xA8, 0xB2, 0xB7, 0xAE, 0xBB, 0xC2, 
   0xAA, 0xB5, 0xBD, 0xAA, 0xB2, 0xBC, 0xAA, 0xB1, 0xBC, 0xA7, 0xB0, 0xBC, 0xAD, 0xBA, 0xC4, 0xAD, 
   0xBA, 0xC4, 0xAC, 0xB7, 0xC1, 0xAA, 0xB5, 0xBF, 0xA2, 0xAA, 0xB4, 0x82, 0x8D, 0x99, 0x60, 0x6A, 
   0x7B, 0x50, 0x55, 0x66, 0x64, 0x6A, 0x7F, 0x63, 0x68, 0x7F, 0x5C, 0x5E, 0x70, 0x59, 0x5B, 0x67, 
   0x50, 0x55, 0x62, 0x4D, 0x53, 0x64, 0x4A, 0x52, 0x60, 0x4C, 0x52, 0x5A, 0x4B, 0x4A, 0x54, 0x52, 
   0x4C, 0x57, 0x4F, 0x4B, 0x55, 0x4C, 0x4D, 0x56, 0x5B, 0x5B, 0x62, 0x59, 0x58, 0x5F, 0x4D, 0x53, 
   0x59, 0x5F, 0x64, 0x6B, 0x60, 0x64, 0x70, 0x5E, 0x60, 0x6F, 0x56, 0x55, 0x63, 0x4D, 0x49, 0x55, 
   0x4C, 0x49, 0x54, 0x48, 0x44, 0x4F, 0x3E, 0x3C, 0x43, 0x29, 0x2F, 0x30, 0x3B, 0x3F, 0x3F, 0x46, 
   0x47, 0x49, 0x49, 0x4A, 0x4D, 0x48, 0x49, 0x4C, 0x48, 0x48, 0x4C, 0x4B, 0x4B, 0x4E, 0x48, 0x4A, 
   0x4B, 0x3F, 0x44, 0x43, 0x49, 0x4D, 0x4E, 0x50, 0x52, 0x54, 0x50, 0x4F, 0x53, 0x4C, 0x4C, 0x4E, 
   0x4A, 0x4B, 0x4A, 0x45, 0x47, 0x47, 0x2D, 0x36, 0x34, 0x40, 0x4B, 0x4D, 0x69, 0x6E, 0x76, 0x6D, 
   0x70, 0x7A, 0x62, 0x69, 0x76, 0x58, 0x5F, 0x6D, 0x4E, 0x56, 0x64, 0x48, 0x54, 0x5F, 0x4E, 0x5C, 
   0x65, 0x59, 0x63, 0x6C, 0x5C, 0x62, 0x6B, 0x60, 0x66, 0x6D, 0x59, 0x62, 0x68, 0x68, 0x72, 0x79, 
   0x66, 0x72, 0x7C, 0x52, 0x5C, 0x67, 0x4B, 0x4E, 0x5A, 0x40, 0x46, 0x4E, 0x36, 0x39, 0x3E, 0x23, 
   0x26, 0x28, 0x19, 0x1C, 0x1B, 0x2A, 0x2E, 0x2A, 0x3E, 0x41, 0x3B, 0x51, 0x52, 0x4B, 0x60, 0x5D, 
   0x58, 0x63, 0x62, 0x5A, 0x65, 0x65, 0x5D, 0x6D, 0x6E, 0x67, 0x75, 0x7A, 0x73, 0x8B, 0x8A, 0x83, 
   0x88, 0x85, 0x7F, 0x7B, 0x79, 0x75, 0x81, 0x7B, 0x79, 0x85, 0x7E, 0x79, 0x8A, 0x86, 0x7E, 0x8B, 
   0x89, 0x7F, 0x8D, 0x89, 0x82, 0x8E, 0x8E, 0x86, 0x91, 0x8E, 0x86, 0xA4, 0xA1, 0x93, 0xC0, 0xB9, 
   0xB1, 0x93, 0x87, 0x85, 0x87, 0x7E, 0x76, 0x93, 0x8A, 0x7D, 0x7B, 0x70, 0x6D, 0x5E, 0x5C, 0x66, 
   0x4A, 0x4D, 0x56, 0x21, 0x25, 0x28, 0x3B, 0x3A, 0x36, 0x6D, 0x69, 0x60, 0x7C, 0x79, 0x6D, 0x7A, 
   0x76, 0x6D, 0x71, 0x77, 0x78, 0x7B, 0x7F, 0x7B, 0x7F, 0x7E, 0x79, 0x78, 0x77, 0x74, 0x78, 0x76, 
   0x75, 0x77, 0x73, 0x73, 0x74, 0x76, 0x74, 0x7B, 0x78, 0x78, 0x83, 0x81, 0x82, 0x90, 0x90, 0x8F, 
   0x9A, 0x99, 0x97, 0x92, 0x8C, 0x88, 0x8A, 0x82, 0x81, 0x94, 0x8D, 0x90, 0x8D, 0x86, 0x8D, 0x90, 
   0x8B, 0x8F, 0x97, 0x8D, 0x8F, 0x94, 0x89, 0x8A, 0x8D, 0x85, 0x88, 0x8E, 0x8A, 0x8D, 0x91, 0x8D, 
   0x8F, 0x94, 0x8E, 0x8C, 0x98, 0x8D, 0x8D, 0x9C, 0x8F, 0x90, 0x9B, 0x94, 0x93, 0x9D, 0x97, 0x98, 
   0x97, 0x8E, 0x95, 0x93, 0x8F, 0x91, 0x97, 0x94, 0x8E, 0x9D, 0x96, 0x95, 0x9B, 0x93, 0x95, 0x9B, 
   0x94, 0x93, 0x9E, 0x96, 0x95, 0x9F, 0x96, 0x94, 0x9C, 0x95, 0x91, 0x9C, 0x93, 0x8D, 0x93, 0x82, 
   0x84, 0x7B, 0x6B, 0x76, 0x6F, 0x67, 0x77, 0x70, 0x6B, 0x7A, 0x78, 0x71, 0x79, 0x79, 0x74, 0x7A, 
   0x62, 0x58, 0x62, 0x37, 0x32, 0x36, 0x3C, 0x40, 0x40, 0x4A, 0x4F, 0x57, 0x52, 0x57, 0x68, 0x61, 
   0x6B, 0x81, 0x6D, 0x77, 0x94, 0x67, 0x71, 0x8F, 0x5C, 0x68, 0x8A, 0x55, 0x63, 0x87, 0x55, 0x66, 
   0x88, 0x57, 0x68, 0x88, 0x55, 0x60, 0x83, 0x52, 0x59, 0x7D, 0x55, 0x61, 0x82, 0x5B, 0x6C, 0x86, 
   0x64, 0x7D, 0x93, 0x79, 0x92, 0xA3, 0x82, 0x91, 0x9F, 0x8A, 0x8F, 0xA3, 0x8F, 0x91, 0xA7, 0x90, 
   0x94, 0xA5, 0x93, 0x9B, 0xAB, 0x9B, 0xA5, 0xB6, 0xA0, 0xA7, 0xBA, 0xA0, 0xA3, 0xB6, 0xA0, 0x9C, 
   0xAC, 0x9E, 0x9C, 0xA9, 0x9B, 0x9C, 0xA5, 0xA2, 0xA1, 0xA8, 0xA3, 0x9B, 0xA5, 0x7A, 0x6A, 0x76, 
   0x59, 0x4F, 0x56, 0x54, 0x51, 0x55, 0xBF, 0xBC, 0xBE, 0xC1, 0xBC, 0xBC, 0xD6, 0xD3, 0xD0, 0xD7, 
   0xD2, 0xD0, 0xB2, 0xAA, 0xAC, 0x9F, 0x9B, 0x9F, 0x9B, 0x9A, 0xA3, 0x9A, 0x99, 0xA9, 0x95, 0x93, 
   0xA5, 0x96, 0x97, 0xA7, 0x8E, 0x92, 0xA0, 0x93, 0x91, 0xA3, 0x8C, 0x87, 0x9A, 0x82, 0x83, 0x93, 
   0x4C, 0x56, 0x5F, 0x3C, 0x45, 0x49, 0x4D, 0x55, 0x5C, 0x5D, 0x67, 0x6B, 0x55, 0x5B, 0x5C, 0x3E, 
   0x3C, 0x3F, 0x3C, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x30, 0x34, 0x34, 0x35, 0x35, 0x37, 0x57, 0x59, 
   0x59, 0x77, 0x75, 0x78, 0x5F, 0x63, 0x63, 0x59, 0x5D, 0x65, 0x77, 0x7F, 0x8A, 0x7F, 0x88, 0x96, 
   0x82, 0x8A, 0x95, 0x85, 0x88, 0x97, 0x86, 0x8C, 0x9D, 0x85, 0x90, 0xA0, 0x85, 0x8F, 0x9F, 0x88, 
   0x8C, 0x9A, 0x90, 0x91, 0x9E, 0x9E, 0x99, 0xA7, 0x9F, 0x9A, 0xA0, 0x97, 0x90, 0x99, 0x8B, 0x8A, 
   0x91, 0x87, 0x8D, 0x90, 0x94, 0x97, 0x9C, 0xA2, 0xA3, 0xA9, 0xA1, 0xA2, 0xAC, 0x9D, 0x9D, 0xA6, 
   0x95, 0x91, 0x9A, 0x83, 0x83, 0x88, 0x87, 0x8B, 0x8F, 0x84, 0x85, 0x8C, 0x6B, 0x6B, 0x71, 0x66, 
   0x64, 0x69, 0x53, 0x50, 0x57, 0x3A, 0x3F, 0x48, 0x50, 0x5D, 0x62, 0x62, 0x70, 0x73, 0x6D, 0x79, 
   0x81, 0x78, 0x82, 0x8F, 0x87, 0x90, 0x98, 0x9B, 0xA0, 0xAB, 0x9F, 0xA4, 0xAF, 0xA2, 0xAC, 0xB7, 
   0xA0, 0xAC, 0xB8, 0x98, 0xA2, 0xAB, 0x9A, 0xA2, 0xA8, 0xA0, 0xA5, 0xA9, 0xA1, 0xA6, 0xA8, 0xA5, 
   0xAA, 0xAD, 0xA5, 0xAD, 0xB2, 0x9D, 0xA4, 0xAE, 0x98, 0x9D, 0xA9, 0x9A, 0x9B, 0xA3, 0x9B, 0x9F, 
   0xA9, 0xA3, 0xAB, 0xB2, 0xA2, 0xAC, 0xAF, 0xA5, 0xAE, 0xB1, 0xA6, 0xB1, 0xB5, 0xA1, 0xAD, 0xB2, 
   0xA2, 0xAD, 0xB5, 0xAE, 0xB5, 0xBE, 0xAE, 0xB3, 0xBE, 0xA7, 0xB0, 0xBB, 0xA8, 0xB4, 0xBF, 0xAC, 
   0xBB, 0xC5, 0xAF, 0xBD, 0xC9, 0xB2, 0xBF, 0xCD, 0xA9, 0xB0, 0xBF, 0x8C, 0x97, 0xA7, 0x75, 0x7E, 
   0x91, 0x61, 0x64, 0x7A, 0x5D, 0x64, 0x7C, 0x56, 0x5D, 0x78, 0x59, 0x5E, 0x75, 0x5A, 0x5E, 0x70, 
   0x56, 0x5B, 0x6F, 0x59, 0x5F, 0x75, 0x5C, 0x62, 0x76, 0x5D, 0x63, 0x71, 0x6A, 0x6E, 0x7A, 0x78, 
   0x76, 0x82, 0x5D, 0x57, 0x63, 0x51, 0x4F, 0x58, 0x5A, 0x57, 0x5F, 0x62, 0x5F, 0x66, 0x58, 0x60, 
   0x65, 0x66, 0x69, 0x6E, 0x63, 0x69, 0x71, 0x62, 0x69, 0x72, 0x67, 0x6B, 0x74, 0x65, 0x65, 0x6C, 
   0x69, 0x66, 0x6D, 0x64, 0x60, 0x68, 0x56, 0x53, 0x5A, 0x4E, 0x52, 0x56, 0x46, 0x49, 0x4B, 0x43, 
   0x44, 0x49, 0x45, 0x4B, 0x4F, 0x46, 0x4C, 0x4E, 0x47, 0x49, 0x4B, 0x46, 0x47, 0x4C, 0x44, 0x43, 
   0x47, 0x58, 0x57, 0x59, 0x74, 0x76, 0x77, 0x69, 0x6A, 0x6D, 0x5A, 0x59, 0x5E, 0x56, 0x54, 0x59, 
   0x4B, 0x4B, 0x4E, 0x3D, 0x42, 0x44, 0x31, 0x38, 0x37, 0x4C, 0x52, 0x53, 0x87, 0x88, 0x8C, 0x94, 
   0x91, 0x97, 0x90, 0x8E, 0x98, 0x78, 0x76, 0x82, 0x65, 0x65, 0x71, 0x58, 0x5A, 0x64, 0x55, 0x59, 
   0x63, 0x54, 0x58, 0x64, 0x51, 0x56, 0x5F, 0x55, 0x55, 0x60, 0x52, 0x59, 0x5F, 0x50, 0x5B, 0x5F, 
   0x5E, 0x6C, 0x72, 0x5D, 0x6B, 0x74, 0x5A, 0x62, 0x6D, 0x56, 0x5D, 0x66, 0x5C, 0x62, 0x6A, 0x57, 
   0x5E, 0x64, 0x43, 0x41, 0x46, 0x30, 0x2F, 0x31, 0x28, 0x2C, 0x2A, 0x40, 0x41, 0x3D, 0x54, 0x57, 
   0x52, 0x59, 0x5A, 0x53, 0x59, 0x5B, 0x53, 0x5D, 0x60, 0x57, 0x5E, 0x66, 0x5D, 0x73, 0x76, 0x6D, 
   0x7A, 0x7B, 0x71, 0x7D, 0x7E, 0x75, 0x7F, 0x7D, 0x74, 0x7F, 0x7D, 0x73, 0x8A, 0x89, 0x7E, 0x89, 
   0x86, 0x7C, 0x8C, 0x87, 0x80, 0x8C, 0x87, 0x82, 0x89, 0x84, 0x81, 0x8B, 0x89, 0x7E, 0xA9, 0xA2, 
   0x99, 0xA6, 0x9B, 0x97, 0x98, 0x8E, 0x87, 0x9E, 0x94, 0x89, 0x7C, 0x70, 0x6C, 0x5E, 0x5C, 0x62, 
   0x55, 0x53, 0x5A, 0x30, 0x2B, 0x2F, 0x23, 0x1F, 0x1F, 0x24, 0x25, 0x20, 0x3F, 0x47, 0x3D, 0x53, 
   0x61, 0x55, 0x67, 0x6C, 0x6A, 0x6C, 0x6C, 0x6B, 0x71, 0x6E, 0x6D, 0x70, 0x70, 0x6F, 0x75, 0x72, 
   0x71, 0x7B, 0x75, 0x75, 0x75, 0x76, 0x76, 0x79, 0x78, 0x77, 0x7C, 0x7A, 0x79, 0x7F, 0x7F, 0x7C, 
   0x8D, 0x90, 0x8A, 0x97, 0x9A, 0x93, 0x9B, 0x97, 0x94, 0xA6, 0x9F, 0xA1, 0x8E, 0x87, 0x8F, 0x8B, 
   0x88, 0x8B, 0x9A, 0x93, 0x94, 0x9C, 0x94, 0x95, 0xA2, 0x9B, 0x9C, 0x9D, 0x99, 0x98, 0x9A, 0x98, 
   0x95, 0x96, 0x92, 0x90, 0x96, 0x8B, 0x8C, 0x9A, 0x8E, 0x8F, 0x96, 0x90, 0x8F, 0x99, 0x93, 0x93, 
   0x9A, 0x91, 0x94, 0x9D, 0x94, 0x95, 0x9F, 0x98, 0x91, 0xA0, 0x96, 0x91, 0x9F, 0x96, 0x94, 0xA3, 
   0x9E, 0x99, 0x9E, 0x98, 0x96, 0x9A, 0x92, 0x93, 0x97, 0x8D, 0x8E, 0x8B, 0x81, 0x81, 0x77, 0x6A, 
   0x71, 0x72, 0x67, 0x73, 0x6F, 0x69, 0x75, 0x71, 0x68, 0x74, 0x77, 0x68, 0x6E, 0x6E, 0x68, 0x6F, 
   0x54, 0x4A, 0x52, 0x33, 0x2E, 0x30, 0x3D, 0x42, 0x42, 0x4D, 0x53, 0x59, 0x5B, 0x64, 0x73, 0x68, 
   0x77, 0x92, 0x61, 0x71, 0x93, 0x5D, 0x6E, 0x8F, 0x60, 0x6F, 0x92, 0x66, 0x73, 0x97, 0x5B, 0x67, 
   0x85, 0x59, 0x64, 0x7C, 0x61, 0x68, 0x80, 0x5E, 0x62, 0x7A, 0x5C, 0x63, 0x82, 0x58, 0x66, 0x81, 
   0x66, 0x7D, 0x95, 0x78, 0x8E, 0xA0, 0x7F, 0x8F, 0x9E, 0x84, 0x90, 0xA0, 0x85, 0x8F, 0x9F, 0x8F, 
   0x97, 0xA5, 0x95, 0x9D, 0xAD, 0xA2, 0xAA, 0xBD, 0xA9, 0xAF, 0xC5, 0xAA, 0xAC, 0xC5, 0xA5, 0xA0, 
   0xB8, 0xA0, 0x9A, 0xAC, 0x9D, 0x97, 0xA4, 0x9A, 0x94, 0x9C, 0x79, 0x73, 0x7B, 0x57, 0x53, 0x5A, 
   0x4A, 0x4A, 0x4F, 0x4C, 0x4B, 0x4F, 0xD7, 0xD8, 0xD7, 0xD8, 0xD9, 0xD5, 0xDE, 0xE1, 0xD9, 0xD8, 
   0xDC, 0xD4, 0xD4, 0xD6, 0xD2, 0xCC, 0xCC, 0xC9, 0xB2, 0xB5, 0xB2, 0xB7, 0xBA, 0xBB, 0xB7, 0xB6, 
   0xB9, 0xAE, 0xB0, 0xB3, 0xB1, 0xB7, 0xB6, 0xC2, 0xC6, 0xC5, 0xBC, 0xC1, 0xBD, 0xA4, 0xA9, 0xAC, 
   0x4F, 0x55, 0x5B, 0x31, 0x39, 0x3B, 0x42, 0x4A, 0x4F, 0x4F, 0x5C, 0x5E, 0x60, 0x68, 0x68, 0x46, 
   0x43, 0x45, 0x34, 0x31, 0x30, 0x34, 0x36, 0x33, 0x2C, 0x2F, 0x2E, 0x30, 0x31, 0x32, 0x50, 0x53, 
   0x54, 0x72, 0x6F, 0x72, 0x69, 0x69, 0x6A, 0x61, 0x61, 0x6B, 0x6F, 0x7C, 0x88, 0x78, 0x8A, 0x97, 
   0x86, 0x8F, 0x99, 0x88, 0x8C, 0x99, 0x87, 0x8D, 0x9A, 0x82, 0x90, 0x9B, 0x82, 0x8F, 0x9B, 0x85, 
   0x8A, 0x96, 0x89, 0x8C, 0x99, 0x9A, 0x9B, 0xA8, 0xA0, 0x9D, 0xA5, 0x98, 0x94, 0xA0, 0x8E, 0x8F, 
   0x99, 0x88, 0x8D, 0x91, 0x8A, 0x8F, 0x92, 0x9D, 0xA2, 0xA7, 0xA1, 0xA4, 0xAC, 0x9F, 0x9E, 0xA5, 
   0x9B, 0x95, 0x9D, 0x87, 0x87, 0x8B, 0x87, 0x8A, 0x8C, 0x8B, 0x88, 0x8E, 0x6C, 0x69, 0x71, 0x62, 
   0x62, 0x69, 0x5D, 0x5A, 0x5D, 0x3B, 0x3F, 0x42, 0x49, 0x59, 0x5E, 0x61, 0x6B, 0x72, 0x6E, 0x7B, 
   0x80, 0x7D, 0x84, 0x8F, 0x93, 0x98, 0xA0, 0x9F, 0xA2, 0xAC, 0xA0, 0xA5, 0xAF, 0xA2, 0xAD, 0xB5, 
   0x9F, 0xAB, 0xB4, 0x9F, 0xA6, 0xAA, 0xA2, 0xAB, 0xB0, 0xA4, 0xA9, 0xAF, 0xA3, 0xA6, 0xAB, 0xA4, 
   0xA6, 0xA9, 0xA1, 0xA5, 0xA9, 0x9B, 0xA0, 0xA7, 0x9A, 0x9F, 0xAA, 0x9C, 0xA0, 0xA9, 0xA2, 0xA9, 
   0xB4, 0xA3, 0xAC, 0xB4, 0xA3, 0xAB, 0xB0, 0xA8, 0xAE, 0xB4, 0xB4, 0xBD, 0xC4, 0xB0, 0xBC, 0xC3, 
   0xAB, 0xB6, 0xC1, 0xAC, 0xB4, 0xBF, 0xAD, 0xB6, 0xC1, 0xAB, 0xB9, 0xC3, 0xAC, 0xBC, 0xC4, 0xAB, 
   0xBC, 0xC4, 0xAB, 0xBC, 0xC7, 0xA8, 0xB8, 0xC5, 0x9D, 0xA4, 0xB4, 0x8B, 0x96, 0xA4, 0x75, 0x81, 
   0x8F, 0x68, 0x6A, 0x81, 0x5D, 0x65, 0x7C, 0x5A, 0x5F, 0x7A, 0x57, 0x5B, 0x76, 0x54, 0x59, 0x6D, 
   0x57, 0x5E, 0x71, 0x5E, 0x65, 0x79, 0x60, 0x69, 0x7D, 0x64, 0x6E, 0x80, 0x71, 0x7D, 0x87, 0x90, 
   0x98, 0xA0, 0x8F, 0x8C, 0x95, 0x7B, 0x74, 0x7C, 0x64, 0x5D, 0x63, 0x5D, 0x57, 0x5C, 0x59, 0x5B, 
   0x5F, 0x5C, 0x5C, 0x61, 0x5B, 0x5E, 0x65, 0x5C, 0x60, 0x68, 0x5C, 0x61, 0x67, 0x5E, 0x60, 0x64, 
   0x62, 0x63, 0x68, 0x5F, 0x5F, 0x67, 0x62, 0x5F, 0x67, 0x62, 0x61, 0x66, 0x51, 0x50, 0x52, 0x3C, 
   0x3D, 0x3F, 0x3D, 0x43, 0x44, 0x40, 0x46, 0x46, 0x44, 0x48, 0x49, 0x4A, 0x4E, 0x51, 0x53, 0x52, 
   0x55, 0x63, 0x60, 0x63, 0x5E, 0x5D, 0x5F, 0x5C, 0x5C, 0x60, 0x59, 0x57, 0x5D, 0x51, 0x4E, 0x54, 
   0x44, 0x46, 0x4A, 0x36, 0x3D, 0x3E, 0x41, 0x45, 0x46, 0x86, 0x87, 0x89, 0x9B, 0x9A, 0x9C, 0x9C, 
   0x95, 0x99, 0xA1, 0x9D, 0x9F, 0x9C, 0x98, 0x9E, 0x98, 0x94, 0x9C, 0x8D, 0x89, 0x90, 0x7C, 0x76, 
   0x81, 0x6B, 0x67, 0x74, 0x5E, 0x5F, 0x6A, 0x5B, 0x55, 0x60, 0x4A, 0x4D, 0x58, 0x51, 0x58, 0x62, 
   0x4B, 0x56, 0x5F, 0x52, 0x60, 0x69, 0x5A, 0x64, 0x70, 0x55, 0x5C, 0x68, 0x5A, 0x64, 0x6D, 0x5F, 
   0x6B, 0x74, 0x5A, 0x58, 0x63, 0x47, 0x47, 0x4F, 0x34, 0x37, 0x3C, 0x39, 0x35, 0x38, 0x45, 0x45, 
   0x46, 0x53, 0x55, 0x53, 0x5B, 0x5D, 0x5A, 0x57, 0x59, 0x55, 0x50, 0x57, 0x51, 0x5F, 0x62, 0x5A, 
   0x66, 0x68, 0x5F, 0x75, 0x79, 0x71, 0x7D, 0x80, 0x78, 0x76, 0x7A, 0x72, 0x7B, 0x7C, 0x73, 0x86, 
   0x83, 0x7B, 0x8C, 0x87, 0x81, 0x8F, 0x87, 0x81, 0x8E, 0x87, 0x82, 0x88, 0x86, 0x7B, 0x8C, 0x86, 
   0x7D, 0x97, 0x8F, 0x85, 0x9C, 0x95, 0x8B, 0x9D, 0x95, 0x8E, 0x66, 0x5E, 0x5B, 0x45, 0x43, 0x49, 
   0x49, 0x49, 0x4F, 0x39, 0x39, 0x3D, 0x32, 0x31, 0x35, 0x2C, 0x2A, 0x2C, 0x25, 0x25, 0x23, 0x2C, 
   0x30, 0x29, 0x48, 0x4C, 0x48, 0x58, 0x5B, 0x58, 0x5F, 0x62, 0x60, 0x65, 0x68, 0x67, 0x64, 0x60, 
   0x5E, 0x6A, 0x63, 0x62, 0x6F, 0x74, 0x71, 0x7A, 0x7B, 0x7C, 0x7C, 0x7A, 0x7C, 0x7C, 0x77, 0x78, 
   0x7C, 0x7B, 0x78, 0x7D, 0x83, 0x7D, 0x86, 0x8A, 0x88, 0x9E, 0x9C, 0xA0, 0x9A, 0x98, 0xA2, 0x8E, 
   0x8C, 0x92, 0x90, 0x8B, 0x90, 0x95, 0x91, 0x96, 0x9E, 0x9A, 0x9F, 0x9A, 0x94, 0x96, 0x97, 0x94, 
   0x91, 0x98, 0x94, 0x92, 0x9B, 0x91, 0x95, 0xA0, 0x94, 0x9A, 0x9A, 0x96, 0x96, 0x99, 0x94, 0x92, 
   0x9D, 0x95, 0x91, 0x9D, 0x95, 0x90, 0x9D, 0x96, 0x8D, 0xA1, 0x96, 0x92, 0xA3, 0x98, 0x9A, 0xA3, 
   0x9B, 0x9C, 0x99, 0x8E, 0x94, 0x95, 0x88, 0x91, 0x8B, 0x7B, 0x82, 0x73, 0x69, 0x6D, 0x6C, 0x64, 
   0x6B, 0x77, 0x6E, 0x75, 0x77, 0x6F, 0x74, 0x78, 0x6E, 0x73, 0x7A, 0x6D, 0x6E, 0x72, 0x6B, 0x72, 
   0x52, 0x48, 0x4D, 0x33, 0x30, 0x30, 0x3F, 0x44, 0x45, 0x4E, 0x57, 0x5D, 0x5E, 0x6B, 0x7A, 0x67, 
   0x79, 0x98, 0x5E, 0x6B, 0x8E, 0x5B, 0x69, 0x8C, 0x5C, 0x69, 0x89, 0x57, 0x61, 0x80, 0x51, 0x5B, 
   0x70, 0x62, 0x6B, 0x77, 0x86, 0x89, 0x96, 0x76, 0x70, 0x82, 0x5D, 0x5A, 0x77, 0x55, 0x5C, 0x79, 
   0x61, 0x76, 0x89, 0x74, 0x86, 0x97, 0x7C, 0x8C, 0x9E, 0x7F, 0x93, 0xA1, 0x84, 0x95, 0xA4, 0x8E, 
   0x9A, 0xAD, 0x9C, 0xA4, 0xBA, 0xA4, 0xAE, 0xC3, 0xA5, 0xAE, 0xC2, 0xA2, 0xAA, 0xC0, 0x9F, 0xA0, 
   0xB7, 0x9D, 0x99, 0xAC, 0x94, 0x8D, 0x99, 0x6F, 0x66, 0x70, 0x50, 0x4A, 0x51, 0x49, 0x4B, 0x4D, 
   0x4A, 0x49, 0x4A, 0x43, 0x41, 0x42, 0xB0, 0xBC, 0xCC, 0xB5, 0xC5, 0xCF, 0xB2, 0xC2, 0xC2, 0xBC, 
   0xC6, 0xBF, 0xC5, 0xCD, 0xC6, 0xC0, 0xC3, 0xBD, 0xB6, 0xB8, 0xB5, 0xB8, 0xBC, 0xB8, 0xC4, 0xC7, 
   0xC0, 0xBF, 0xC4, 0xBB, 0xBE, 0xC7, 0xBF, 0xC6, 0xCF, 0xC8, 0xB8, 0xC1, 0xB6, 0x8A, 0x92, 0x8F, 
   0x3A, 0x41, 0x44, 0x28, 0x2F, 0x2F, 0x3B, 0x3E, 0x41, 0x43, 0x50, 0x4D, 0x6B, 0x75, 0x75, 0x5D, 
   0x5F, 0x5E, 0x35, 0x36, 0x32, 0x2F, 0x30, 0x2A, 0x29, 0x29, 0x27, 0x23, 0x26, 0x29, 0x45, 0x4D, 
   0x4B, 0x69, 0x6B, 0x6E, 0x6D, 0x6D, 0x6D, 0x69, 0x68, 0x6D, 0x6C, 0x78, 0x85, 0x77, 0x8A, 0x96, 
   0x84, 0x90, 0x99, 0x88, 0x8F, 0x9A, 0x88, 0x90, 0x9A, 0x84, 0x92, 0x98, 0x8B, 0x97, 0x9D, 0x89, 
   0x8E, 0x97, 0x86, 0x8B, 0x96, 0x91, 0x94, 0x9E, 0x9B, 0x98, 0xA0, 0x96, 0x95, 0x9E, 0x93, 0x94, 
   0x9D, 0x8F, 0x92, 0x96, 0x87, 0x8D, 0x93, 0x95, 0x9C, 0xA4, 0xA1, 0xA4, 0xAC, 0x9F, 0x9D, 0xA6, 
   0x9D, 0x9B, 0xA4, 0x99, 0x9B, 0xA1, 0x91, 0x91, 0x97, 0x89, 0x86, 0x8B, 0x72, 0x6F, 0x76, 0x5F, 
   0x62, 0x68, 0x5E, 0x5D, 0x60, 0x49, 0x4C, 0x50, 0x4E, 0x58, 0x60, 0x6D, 0x72, 0x7D, 0x7A, 0x81, 
   0x88, 0x84, 0x8D, 0x94, 0x96, 0x9E, 0xA6, 0xA3, 0xA8, 0xB3, 0xA6, 0xAA, 0xB7, 0xA2, 0xAA, 0xB5, 
   0xA0, 0xA8, 0xB1, 0xA8, 0xAB, 0xB1, 0xAB, 0xB1, 0xB8, 0xA8, 0xAC, 0xB3, 0xA2, 0xA5, 0xAA, 0xA2, 
   0xA4, 0xA8, 0xA3, 0xA6, 0xAA, 0x9F, 0xA2, 0xAA, 0x9C, 0xA1, 0xA9, 0x9B, 0xA3, 0xAA, 0x9D, 0xA5, 
   0xAF, 0xA1, 0xA9, 0xB0, 0xAB, 0xB2, 0xB5, 0xAB, 0xB0, 0xB7, 0xAF, 0xB6, 0xC1, 0xAD, 0xB9, 0xC2, 
   0xAA, 0xB3, 0xBF, 0xAB, 0xB4, 0xC0, 0xB0, 0xBC, 0xC9, 0xAD, 0xBF, 0xCB, 0xA6, 0xB9, 0xC4, 0xA7, 
   0xB8, 0xC4, 0xA3, 0xB4, 0xC2, 0x9F, 0xAE, 0xBA, 0x94, 0x9F, 0xA6, 0x6B, 0x77, 0x7D, 0x5F, 0x69, 
   0x75, 0x66, 0x6B, 0x80, 0x5F, 0x66, 0x7B, 0x58, 0x61, 0x77, 0x55, 0x5C, 0x70, 0x4F, 0x59, 0x69, 
   0x4B, 0x57, 0x68, 0x50, 0x5D, 0x70, 0x52, 0x60, 0x73, 0x54, 0x5F, 0x72, 0x54, 0x5F, 0x6F, 0x72, 
   0x81, 0x8E, 0x9B, 0xA3, 0xAC, 0x9D, 0x9A, 0xA2, 0x7C, 0x76, 0x7F, 0x62, 0x62, 0x69, 0x5B, 0x5E, 
   0x65, 0x58, 0x5B, 0x61, 0x5D, 0x5E, 0x66, 0x61, 0x60, 0x6A, 0x5E, 0x61, 0x66, 0x5F, 0x64, 0x68, 
   0x64, 0x69, 0x70, 0x5C, 0x5F, 0x6A, 0x5B, 0x5B, 0x62, 0x61, 0x60, 0x63, 0x5E, 0x5D, 0x5F, 0x4C, 
   0x4B, 0x4B, 0x44, 0x40, 0x43, 0x4E, 0x4D, 0x51, 0x59, 0x5E, 0x61, 0x64, 0x6A, 0x6F, 0x6E, 0x71, 
   0x74, 0x77, 0x75, 0x77, 0x5E, 0x58, 0x5B, 0x54, 0x50, 0x51, 0x55, 0x4E, 0x51, 0x50, 0x4A, 0x4E, 
   0x45, 0x45, 0x47, 0x35, 0x3A, 0x3B, 0x62, 0x68, 0x66, 0xA5, 0xA8, 0xA7, 0xA0, 0x9C, 0xA0, 0x9C, 
   0x94, 0x9A, 0xA0, 0x9B, 0x9C, 0x9E, 0x9A, 0x9D, 0xA0, 0x99, 0x9D, 0xA0, 0x99, 0x9E, 0x97, 0x90, 
   0x96, 0x84, 0x7D, 0x86, 0x73, 0x70, 0x7A, 0x69, 0x63, 0x72, 0x5E, 0x5D, 0x6B, 0x4C, 0x4E, 0x5A, 
   0x3E, 0x47, 0x50, 0x4F, 0x5C, 0x66, 0x62, 0x6B, 0x78, 0x63, 0x6B, 0x76, 0x58, 0x65, 0x6C, 0x5D, 
   0x69, 0x73, 0x62, 0x64, 0x73, 0x5D, 0x5E, 0x6B, 0x54, 0x56, 0x5F, 0x47, 0x44, 0x4E, 0x41, 0x42, 
   0x47, 0x50, 0x51, 0x52, 0x4B, 0x4D, 0x4D, 0x32, 0x34, 0x33, 0x33, 0x38, 0x35, 0x4D, 0x51, 0x4D, 
   0x5A, 0x59, 0x54, 0x64, 0x63, 0x5E, 0x6E, 0x71, 0x6F, 0x71, 0x75, 0x75, 0x7A, 0x77, 0x73, 0x7B, 
   0x78, 0x72, 0x82, 0x81, 0x79, 0x88, 0x84, 0x7B, 0x8B, 0x88, 0x80, 0x8D, 0x89, 0x80, 0x92, 0x8A, 
   0x7F, 0x93, 0x8C, 0x80, 0x92, 0x8A, 0x83, 0x7A, 0x71, 0x6E, 0x3D, 0x37, 0x36, 0x2C, 0x2E, 0x31, 
   0x30, 0x36, 0x3A, 0x39, 0x3D, 0x40, 0x3A, 0x3D, 0x40, 0x38, 0x39, 0x3C, 0x39, 0x34, 0x37, 0x32, 
   0x31, 0x31, 0x33, 0x35, 0x38, 0x3B, 0x42, 0x42, 0x44, 0x4E, 0x4B, 0x4D, 0x53, 0x52, 0x36, 0x36, 
   0x37, 0x29, 0x2B, 0x2A, 0x54, 0x60, 0x5C, 0x81, 0x86, 0x88, 0x7C, 0x7F, 0x81, 0x7A, 0x7B, 0x7D, 
   0x7B, 0x7C, 0x7D, 0x7C, 0x7B, 0x7C, 0x76, 0x77, 0x7A, 0x7F, 0x7F, 0x84, 0x89, 0x8A, 0x8D, 0x88, 
   0x88, 0x88, 0x84, 0x82, 0x81, 0x8E, 0x90, 0x90, 0x93, 0x93, 0x95, 0x8B, 0x87, 0x89, 0x8B, 0x89, 
   0x87, 0x8D, 0x8B, 0x89, 0x98, 0x8F, 0x91, 0x9F, 0x96, 0x98, 0x96, 0x94, 0x94, 0x91, 0x8F, 0x8D, 
   0x98, 0x94, 0x8F, 0x99, 0x94, 0x92, 0xA0, 0x9F, 0x9A, 0xAA, 0xA6, 0xA2, 0xAE, 0xA4, 0xA5, 0xA0, 
   0x93, 0x97, 0x9A, 0x8C, 0x95, 0x99, 0x8B, 0x94, 0x87, 0x78, 0x80, 0x79, 0x70, 0x73, 0x77, 0x6E, 
   0x70, 0x7E, 0x77, 0x79, 0x7F, 0x79, 0x7E, 0x86, 0x7F, 0x86, 0x87, 0x7F, 0x87, 0x7D, 0x76, 0x7C, 
   0x5B, 0x4F, 0x4E, 0x3B, 0x33, 0x34, 0x37, 0x3B, 0x3B, 0x47, 0x52, 0x55, 0x57, 0x67, 0x75, 0x64, 
   0x77, 0x97, 0x5F, 0x67, 0x8A, 0x5A, 0x62, 0x82, 0x54, 0x5D, 0x79, 0x4A, 0x53, 0x69, 0x47, 0x50, 
   0x5B, 0x75, 0x81, 0x84, 0xA4, 0xA2, 0xAC, 0x8E, 0x81, 0x95, 0x6F, 0x67, 0x84, 0x5C, 0x5F, 0x7D, 
   0x5C, 0x69, 0x7E, 0x69, 0x76, 0x8A, 0x75, 0x85, 0x99, 0x7D, 0x8F, 0xA3, 0x84, 0x95, 0xAA, 0x88, 
   0x96, 0xAE, 0x93, 0x9E, 0xB7, 0x99, 0xA2, 0xBB, 0x99, 0xA3, 0xBA, 0x98, 0xA3, 0xBA, 0x93, 0x99, 
   0xB2, 0x92, 0x92, 0xA6, 0x88, 0x7F, 0x8A, 0x60, 0x55, 0x5E, 0x45, 0x41, 0x44, 0x42, 0x44, 0x43, 
   0x39, 0x38, 0x39, 0x3F, 0x3D, 0x3C, 0x7E, 0x93, 0xAF, 0x87, 0x9E, 0xBB, 0x8D, 0xA2, 0xB9, 0xA5, 
   0xAF, 0xBC, 0xB9, 0xC1, 0xC2, 0xC5, 0xCA, 0xC6, 0xCB, 0xCB, 0xCA, 0xD2, 0xD2, 0xCD, 0xCF, 0xD2, 
   0xCA, 0xC5, 0xCE, 0xC5, 0xC0, 0xCD, 0xC6, 0xC2, 0xCA, 0xC3, 0xB8, 0xBE, 0xB6, 0x8E, 0x94, 0x96, 
   0x47, 0x4A, 0x53, 0x3D, 0x3B, 0x40, 0x4B, 0x47, 0x47, 0x39, 0x3F, 0x3C, 0x5F, 0x63, 0x63, 0x6A, 
   0x6C, 0x67, 0x47, 0x49, 0x44, 0x2D, 0x2E, 0x28, 0x26, 0x26, 0x20, 0x1D, 0x1E, 0x1F, 0x32, 0x3A, 
   0x35, 0x62, 0x62, 0x61, 0x68, 0x68, 0x64, 0x68, 0x69, 0x67, 0x6D, 0x74, 0x7F, 0x76, 0x86, 0x91, 
   0x83, 0x8E, 0x99, 0x8C, 0x91, 0x9D, 0x8E, 0x93, 0x9D, 0x93, 0x9A, 0xA1, 0x9B, 0xA1, 0xA7, 0x9A, 
   0x99, 0xA2, 0x8C, 0x8E, 0x99, 0x8C, 0x8F, 0x99, 0x93, 0x91, 0x9A, 0x91, 0x90, 0x99, 0x92, 0x92, 
   0x99, 0x95, 0x94, 0x98, 0x8A, 0x8D, 0x95, 0x8C, 0x94, 0x9F, 0x98, 0x9E, 0xA7, 0x9C, 0x9E, 0xA7, 
   0x9E, 0xA2, 0xAC, 0x9C, 0xA0, 0xA7, 0x97, 0x95, 0x9D, 0x8B, 0x88, 0x8F, 0x79, 0x76, 0x7D, 0x63, 
   0x64, 0x6A, 0x5E, 0x62, 0x66, 0x55, 0x57, 0x5E, 0x53, 0x55, 0x5F, 0x6B, 0x6F, 0x79, 0x78, 0x7E, 
   0x86, 0x7E, 0x88, 0x90, 0x94, 0x9F, 0xAA, 0x9F, 0xA8, 0xB6, 0xA2, 0xA7, 0xB4, 0x9D, 0xA2, 0xAD, 
   0x9F, 0xA4, 0xAD, 0xA7, 0xA8, 0xB3, 0xAA, 0xAD, 0xB1, 0xA6, 0xA8, 0xB1, 0xA4, 0xA5, 0xB0, 0xAB, 
   0xAD, 0xB7, 0xAB, 0xAC, 0xB7, 0xA3, 0xA5, 0xAE, 0x9E, 0xA4, 0xA9, 0x9D, 0xA5, 0xAC, 0x9E, 0xA5, 
   0xAE, 0xA0, 0xA7, 0xAD, 0xA7, 0xAF, 0xB3, 0xA9, 0xB1, 0xBA, 0xAA, 0xB3, 0xBF, 0xA8, 0xB4, 0xC0, 
   0xA7, 0xAE, 0xBA, 0xAC, 0xB4, 0xC1, 0xB5, 0xC0, 0xCD, 0xB3, 0xC2, 0xD0, 0xA7, 0xB7, 0xC8, 0xA3, 
   0xB1, 0xC5, 0x9D, 0xA9, 0xBB, 0x8D, 0x98, 0xA2, 0x66, 0x6E, 0x73, 0x37, 0x40, 0x46, 0x55, 0x5D, 
   0x6E, 0x64, 0x6A, 0x80, 0x5C, 0x61, 0x77, 0x57, 0x61, 0x74, 0x52, 0x5A, 0x6A, 0x4D, 0x57, 0x66, 
   0x46, 0x54, 0x66, 0x4A, 0x59, 0x6E, 0x4E, 0x5F, 0x73, 0x4B, 0x57, 0x6D, 0x51, 0x5A, 0x6E, 0x5D, 
   0x69, 0x7B, 0x8F, 0x99, 0xA1, 0xAC, 0xAA, 0xB1, 0x86, 0x83, 0x8B, 0x65, 0x69, 0x6F, 0x5D, 0x63, 
   0x69, 0x56, 0x5D, 0x62, 0x58, 0x5C, 0x63, 0x5B, 0x5C, 0x64, 0x5B, 0x5E, 0x63, 0x5E, 0x64, 0x69, 
   0x63, 0x66, 0x6F, 0x5F, 0x5F, 0x6E, 0x58, 0x56, 0x61, 0x57, 0x55, 0x5D, 0x5B, 0x5B, 0x62, 0x5B, 
   0x5A, 0x5D, 0x5A, 0x55, 0x5B, 0x65, 0x60, 0x69, 0x6A, 0x6B, 0x72, 0x69, 0x6D, 0x73, 0x63, 0x66, 
   0x6A, 0x6A, 0x69, 0x6B, 0x68, 0x63, 0x64, 0x5E, 0x5A, 0x5A, 0x50, 0x4A, 0x4B, 0x41, 0x3C, 0x41, 
   0x36, 0x39, 0x3E, 0x2A, 0x31, 0x33, 0x5F, 0x69, 0x69, 0x96, 0x9B, 0x9C, 0x9C, 0x95, 0x99, 0xA0, 
   0x96, 0x9A, 0xA1, 0x99, 0x9C, 0xA4, 0x9E, 0xA1, 0xA3, 0x9A, 0x9F, 0xA1, 0x9A, 0x9E, 0xA2, 0x9F, 
   0xA2, 0x9E, 0x98, 0x9E, 0x98, 0x94, 0x9C, 0x92, 0x8C, 0x9C, 0x73, 0x6D, 0x7F, 0x5F, 0x5A, 0x69, 
   0x54, 0x53, 0x5E, 0x50, 0x52, 0x5B, 0x4D, 0x51, 0x57, 0x4F, 0x54, 0x56, 0x50, 0x5C, 0x67, 0x59, 
   0x64, 0x6E, 0x66, 0x6D, 0x7C, 0x63, 0x69, 0x78, 0x60, 0x65, 0x74, 0x50, 0x52, 0x60, 0x48, 0x49, 
   0x50, 0x41, 0x41, 0x45, 0x30, 0x30, 0x33, 0x17, 0x13, 0x13, 0x0E, 0x0E, 0x0D, 0x28, 0x2C, 0x2A, 
   0x3D, 0x3E, 0x3A, 0x44, 0x44, 0x3F, 0x56, 0x57, 0x53, 0x67, 0x65, 0x66, 0x74, 0x72, 0x6C, 0x75, 
   0x75, 0x6D, 0x79, 0x77, 0x73, 0x7E, 0x7F, 0x77, 0x83, 0x86, 0x7B, 0x8B, 0x8B, 0x7D, 0x8F, 0x89, 
   0x7B, 0x92, 0x89, 0x7F, 0x8F, 0x82, 0x7F, 0x5D, 0x50, 0x53, 0x30, 0x2C, 0x32, 0x2D, 0x30, 0x36, 
   0x30, 0x37, 0x3C, 0x46, 0x47, 0x4D, 0x48, 0x49, 0x4F, 0x41, 0x42, 0x49, 0x41, 0x3A, 0x42, 0x3A, 
   0x38, 0x3F, 0x38, 0x37, 0x3F, 0x36, 0x3C, 0x3E, 0x39, 0x41, 0x3F, 0x3C, 0x3F, 0x3F, 0x27, 0x27, 
   0x29, 0x0A, 0x10, 0x10, 0x52, 0x61, 0x5F, 0x7C, 0x83, 0x84, 0x7B, 0x81, 0x85, 0x7B, 0x80, 0x86, 
   0x7B, 0x7B, 0x84, 0x7C, 0x78, 0x80, 0x76, 0x74, 0x7B, 0x71, 0x72, 0x78, 0x6C, 0x6F, 0x72, 0x60, 
   0x64, 0x65, 0x60, 0x60, 0x60, 0x6D, 0x6E, 0x6E, 0x76, 0x75, 0x76, 0x75, 0x75, 0x74, 0x72, 0x78, 
   0x78, 0x71, 0x76, 0x77, 0x73, 0x70, 0x72, 0x73, 0x6E, 0x71, 0x6D, 0x6F, 0x70, 0x73, 0x77, 0x78, 
   0x7D, 0x7E, 0x80, 0x85, 0x85, 0x85, 0x8D, 0x8D, 0x8B, 0x95, 0x92, 0x8F, 0x9A, 0x97, 0x95, 0x8F, 
   0x8D, 0x8D, 0x92, 0x8E, 0x92, 0x90, 0x86, 0x8C, 0x80, 0x75, 0x79, 0x79, 0x70, 0x74, 0x74, 0x68, 
   0x6B, 0x71, 0x68, 0x6B, 0x75, 0x71, 0x73, 0x80, 0x78, 0x7E, 0x83, 0x7A, 0x83, 0x76, 0x6C, 0x70, 
   0x65, 0x56, 0x54, 0x47, 0x39, 0x3D, 0x2F, 0x2D, 0x2E, 0x3D, 0x45, 0x45, 0x54, 0x63, 0x6B, 0x65, 
   0x76, 0x91, 0x54, 0x60, 0x7F, 0x4E, 0x5A, 0x75, 0x4E, 0x58, 0x6E, 0x44, 0x4C, 0x5B, 0x53, 0x5C, 
   0x62, 0x9E, 0xA7, 0xAA, 0xAC, 0xA6, 0xB0, 0x85, 0x78, 0x8E, 0x69, 0x62, 0x80, 0x60, 0x63, 0x83, 
   0x5C, 0x63, 0x7E, 0x60, 0x6A, 0x7E, 0x6A, 0x78, 0x89, 0x76, 0x82, 0x98, 0x7F, 0x8B, 0xA2, 0x84, 
   0x91, 0xAA, 0x89, 0x96, 0xAC, 0x92, 0x9B, 0xB2, 0x93, 0x9C, 0xB4, 0x94, 0x9F, 0xB6, 0x90, 0x97, 
   0xB2, 0x8C, 0x8B, 0xA5, 0x7A, 0x6D, 0x7A, 0x4E, 0x43, 0x4B, 0x35, 0x35, 0x35, 0x38, 0x3C, 0x3B, 
   0x2F, 0x33, 0x37, 0x37, 0x3C, 0x3E, 0x7E, 0x8D, 0xA7, 0x88, 0x97, 0xB6, 0x95, 0xA7, 0xC6, 0xAA, 
   0xB6, 0xD0, 0xB6, 0xB8, 0xCD, 0xAC, 0xAD, 0xC1, 0xAF, 0xB5, 0xBE, 0xC5, 0xC7, 0xC2, 0xD9, 0xD8, 
   0xD3, 0xCF, 0xD6, 0xCE, 0xC6, 0xD2, 0xC6, 0xCD, 0xD6, 0xCB, 0xC8, 0xCD, 0xC6, 0xA6, 0xA6, 0xAD, 
   0x71, 0x6F, 0x7F, 0x7A, 0x74, 0x80, 0xA8, 0x9F, 0x9F, 0x66, 0x62, 0x60, 0x4B, 0x49, 0x48, 0x62, 
   0x64, 0x5F, 0x55, 0x5C, 0x59, 0x3D, 0x41, 0x41, 0x21, 0x22, 0x21, 0x1F, 0x1E, 0x1E, 0x21, 0x27, 
   0x23, 0x59, 0x57, 0x52, 0x66, 0x65, 0x5D, 0x63, 0x62, 0x5E, 0x65, 0x66, 0x6C, 0x79, 0x85, 0x8F, 
   0x85, 0x8D, 0x99, 0x90, 0x93, 0x9D, 0x93, 0x96, 0x9E, 0x9B, 0xA0, 0xA7, 0xA5, 0xA6, 0xAE, 0xA2, 
   0x9F, 0xA9, 0x91, 0x91, 0x9B, 0x89, 0x8D, 0x97, 0x92, 0x91, 0x9A, 0x91, 0x90, 0x99, 0x8F, 0x8F, 
   0x96, 0x90, 0x8E, 0x92, 0x89, 0x8A, 0x91, 0x84, 0x8C, 0x95, 0x90, 0x99, 0xA1, 0x9A, 0x9F, 0xA8, 
   0x9E, 0xA1, 0xAC, 0x9D, 0xA0, 0xA7, 0x9C, 0x99, 0xA2, 0x94, 0x8F, 0x98, 0x82, 0x7E, 0x87, 0x68, 
   0x66, 0x6E, 0x5D, 0x61, 0x68, 0x56, 0x58, 0x62, 0x53, 0x51, 0x5C, 0x64, 0x6C, 0x72, 0x74, 0x7C, 
   0x7F, 0x81, 0x8A, 0x94, 0x95, 0xA1, 0xAF, 0x99, 0xA3, 0xB1, 0x9C, 0xA1, 0xAB, 0x9C, 0xA0, 0xA5, 
   0xA1, 0xA6, 0xAA, 0xA8, 0xAA, 0xB2, 0xA8, 0xAA, 0xAF, 0xA6, 0xA8, 0xAE, 0xA4, 0xA6, 0xB0, 0xAC, 
   0xAD, 0xB9, 0xAB, 0xAE, 0xB8, 0xA2, 0xA6, 0xAF, 0xA1, 0xA5, 0xAD, 0x9F, 0xA3, 0xAB, 0x9F, 0xA3, 
   0xAA, 0xA0, 0xA4, 0xA7, 0xA1, 0xAA, 0xAE, 0xA5, 0xB1, 0xBA, 0xAB, 0xB7, 0xC5, 0xA8, 0xB6, 0xC3, 
   0xA9, 0xB5, 0xC0, 0xAC, 0xB7, 0xC0, 0xAE, 0xBA, 0xC2, 0xAF, 0xBC, 0xC6, 0xA8, 0xB6, 0xC5, 0xA4, 
   0xB0, 0xC3, 0x9C, 0xA4, 0xB4, 0x71, 0x75, 0x7E, 0x2D, 0x31, 0x37, 0x2D, 0x37, 0x41, 0x58, 0x64, 
   0x79, 0x63, 0x6C, 0x85, 0x5E, 0x67, 0x7E, 0x59, 0x64, 0x76, 0x50, 0x5B, 0x6A, 0x50, 0x5C, 0x6B, 
   0x52, 0x61, 0x75, 0x54, 0x61, 0x79, 0x51, 0x60, 0x77, 0x4E, 0x5A, 0x73, 0x49, 0x56, 0x6C, 0x58, 
   0x64, 0x77, 0x94, 0x99, 0xA2, 0xC4, 0xC0, 0xC4, 0x9F, 0x9C, 0xA1, 0x6C, 0x6E, 0x74, 0x56, 0x5A, 
   0x5D, 0x58, 0x59, 0x61, 0x55, 0x5A, 0x5F, 0x5D, 0x62, 0x69, 0x5E, 0x62, 0x6C, 0x5B, 0x5F, 0x68, 
   0x5F, 0x63, 0x6E, 0x61, 0x62, 0x73, 0x5D, 0x5A, 0x66, 0x5A, 0x56, 0x5F, 0x56, 0x54, 0x5D, 0x57, 
   0x5A, 0x5E, 0x62, 0x61, 0x65, 0x68, 0x63, 0x69, 0x6B, 0x68, 0x6B, 0x68, 0x67, 0x6B, 0x66, 0x66, 
   0x69, 0x5E, 0x5F, 0x5F, 0x63, 0x64, 0x63, 0x67, 0x6A, 0x6B, 0x64, 0x64, 0x66, 0x43, 0x41, 0x4A, 
   0x26, 0x29, 0x32, 0x1C, 0x23, 0x28, 0x42, 0x4C, 0x56, 0x7A, 0x81, 0x8B, 0x98, 0x94, 0x98, 0xA4, 
   0x9A, 0x9B, 0xA0, 0x98, 0x99, 0xA1, 0x9A, 0x9D, 0xA2, 0x9B, 0x9F, 0xA1, 0x9A, 0x9E, 0x9F, 0x9B, 
   0x9E, 0xA0, 0x9B, 0x9E, 0xA6, 0xA2, 0xA6, 0xA5, 0x9E, 0xA6, 0x9B, 0x93, 0x9E, 0x8D, 0x86, 0x95, 
   0x69, 0x62, 0x73, 0x55, 0x52, 0x5F, 0x4E, 0x51, 0x59, 0x54, 0x5C, 0x62, 0x66, 0x6F, 0x7B, 0x6E, 
   0x78, 0x84, 0x6E, 0x79, 0x87, 0x67, 0x76, 0x7F, 0x6E, 0x7A, 0x82, 0x5C, 0x62, 0x6B, 0x5A, 0x5B, 
   0x63, 0x49, 0x46, 0x50, 0x28, 0x27, 0x2F, 0x0D, 0x0C, 0x0F, 0x11, 0x16, 0x17, 0x29, 0x32, 0x34, 
   0x2A, 0x30, 0x34, 0x29, 0x2F, 0x32, 0x32, 0x38, 0x3E, 0x4B, 0x51, 0x57, 0x5C, 0x62, 0x5E, 0x6C, 
   0x70, 0x66, 0x75, 0x71, 0x6E, 0x79, 0x77, 0x6E, 0x7A, 0x7D, 0x74, 0x84, 0x87, 0x7C, 0x91, 0x91, 
   0x82, 0x9C, 0x93, 0x89, 0x8F, 0x7D, 0x7D, 0x4B, 0x3A, 0x42, 0x33, 0x2F, 0x38, 0x36, 0x36, 0x3F, 
   0x38, 0x3A, 0x42, 0x53, 0x50, 0x5A, 0x49, 0x49, 0x52, 0x45, 0x47, 0x50, 0x46, 0x42, 0x4C, 0x3F, 
   0x40, 0x49, 0x42, 0x41, 0x47, 0x3F, 0x40, 0x42, 0x40, 0x41, 0x40, 0x42, 0x41, 0x41, 0x40, 0x40, 
   0x42, 0x30, 0x36, 0x37, 0x5C, 0x69, 0x67, 0x72, 0x79, 0x7E, 0x7F, 0x87, 0x8D, 0x8C, 0x8E, 0x99, 
   0x7B, 0x78, 0x85, 0x6C, 0x6C, 0x79, 0x6D, 0x71, 0x79, 0x74, 0x75, 0x7C, 0x72, 0x73, 0x79, 0x66, 
   0x67, 0x6E, 0x5C, 0x5A, 0x60, 0x61, 0x60, 0x65, 0x6C, 0x6C, 0x6F, 0x6C, 0x6F, 0x74, 0x6A, 0x72, 
   0x77, 0x6B, 0x71, 0x77, 0x6E, 0x6F, 0x77, 0x71, 0x71, 0x79, 0x70, 0x73, 0x7A, 0x73, 0x77, 0x7E, 
   0x75, 0x76, 0x7D, 0x7D, 0x7B, 0x7F, 0x79, 0x71, 0x74, 0x4F, 0x45, 0x46, 0x54, 0x51, 0x50, 0x5F, 
   0x60, 0x5F, 0x7A, 0x75, 0x77, 0x7B, 0x6A, 0x6F, 0x6D, 0x5F, 0x64, 0x73, 0x69, 0x6C, 0x79, 0x6A, 
   0x6E, 0x72, 0x64, 0x65, 0x68, 0x5E, 0x5D, 0x76, 0x69, 0x6A, 0x7E, 0x71, 0x75, 0x6D, 0x5F, 0x64, 
   0x65, 0x55, 0x57, 0x55, 0x47, 0x4B, 0x37, 0x30, 0x33, 0x3B, 0x3F, 0x3E, 0x46, 0x51, 0x51, 0x4E, 
   0x5B, 0x6C, 0x46, 0x55, 0x6D, 0x43, 0x50, 0x64, 0x48, 0x52, 0x63, 0x4B, 0x52, 0x5B, 0x6B, 0x75, 
   0x77, 0xA4, 0xA8, 0xAA, 0xA3, 0x9F, 0xA7, 0x82, 0x7C, 0x8B, 0x69, 0x66, 0x7F, 0x65, 0x69, 0x88, 
   0x61, 0x6A, 0x85, 0x5C, 0x66, 0x7B, 0x61, 0x6C, 0x7D, 0x74, 0x7F, 0x91, 0x7B, 0x85, 0x98, 0x80, 
   0x8C, 0xA0, 0x85, 0x91, 0xA5, 0x8B, 0x96, 0xAC, 0x8C, 0x98, 0xAF, 0x91, 0x9D, 0xB4, 0x99, 0xA0, 
   0xBA, 0x9E, 0x9C, 0xB8, 0x60, 0x51, 0x62, 0x2E, 0x29, 0x31, 0x26, 0x29, 0x2B, 0x2F, 0x34, 0x38, 
   0x34, 0x3D, 0x42, 0x3E, 0x43, 0x48, 0x82, 0x92, 0xA9, 0x7A, 0x8A, 0xA2, 0x82, 0x93, 0xAD, 0xB9, 
   0xC4, 0xD6, 0xEE, 0xEF, 0xF8, 0xDA, 0xD7, 0xE9, 0xA0, 0xA7, 0xBD, 0xB4, 0xB9, 0xC4, 0xD4, 0xD6, 
   0xD7, 0xD0, 0xD3, 0xCE, 0xC6, 0xCB, 0xC2, 0xBB, 0xC1, 0xB7, 0xAD, 0xB4, 0xB2, 0x8B, 0x90, 0x9C, 
   0x6E, 0x74, 0x86, 0x7F, 0x86, 0x90, 0xC5, 0xC0, 0xBD, 0xA2, 0x9A, 0x95, 0x54, 0x4E, 0x50, 0x52, 
   0x54, 0x53, 0x4F, 0x57, 0x56, 0x48, 0x4C, 0x4E, 0x40, 0x3D, 0x44, 0x14, 0x17, 0x19, 0x10, 0x14, 
   0x14, 0x45, 0x45, 0x3E, 0x66, 0x65, 0x5E, 0x66, 0x62, 0x5E, 0x59, 0x59, 0x5A, 0x75, 0x78, 0x83, 
   0x87, 0x8B, 0x94, 0x99, 0x9B, 0xA1, 0xA0, 0xA5, 0xA7, 0x9D, 0xA3, 0xA6, 0xA4, 0xA8, 0xAE, 0xAA, 
   0xAC, 0xB1, 0x97, 0x9B, 0xA0, 0x8F, 0x90, 0x99, 0x95, 0x93, 0x9C, 0x93, 0x92, 0x9B, 0x84, 0x85, 
   0x8B, 0x8B, 0x89, 0x8C, 0x87, 0x88, 0x8C, 0x86, 0x8B, 0x91, 0x95, 0x9B, 0xA0, 0x9B, 0x9F, 0xA7, 
   0x9D, 0x9F, 0xA8, 0xA1, 0xA1, 0xA6, 0x9F, 0x9E, 0xA5, 0x98, 0x95, 0x9D, 0x84, 0x80, 0x8A, 0x67, 
   0x67, 0x70, 0x62, 0x63, 0x6C, 0x5D, 0x5A, 0x66, 0x4D, 0x50, 0x5A, 0x57, 0x62, 0x66, 0x73, 0x79, 
   0x79, 0x91, 0x96, 0x9D, 0x92, 0x9C, 0xAA, 0x8E, 0x95, 0xA4, 0x9D, 0x9E, 0xA6, 0xA5, 0xA4, 0xA4, 
   0xA6, 0xA7, 0xA5, 0xA7, 0xA9, 0xAB, 0xA7, 0xAA, 0xAC, 0xA5, 0xA8, 0xAA, 0xA6, 0xA9, 0xAF, 0xA7, 
   0xAA, 0xB4, 0xA3, 0xA8, 0xB0, 0x9F, 0xA6, 0xAB, 0xA4, 0xAA, 0xB1, 0xA2, 0xA5, 0xAC, 0xA2, 0xA1, 
   0xA7, 0xA4, 0xA2, 0xA5, 0xA4, 0xA9, 0xAD, 0xA6, 0xB1, 0xBD, 0xAC, 0xB9, 0xC8, 0xA8, 0xBB, 0xC8, 
   0xA5, 0xB7, 0xC4, 0xA7, 0xB5, 0xC1, 0xA5, 0xB1, 0xBC, 0xA4, 0xB1, 0xBC, 0xA4, 0xB2, 0xBE, 0x92, 
   0xA0, 0xAC, 0x76, 0x7F, 0x8A, 0x43, 0x45, 0x4D, 0x0E, 0x12, 0x1A, 0x43, 0x50, 0x5E, 0x64, 0x78, 
   0x8E, 0x5B, 0x6C, 0x86, 0x58, 0x66, 0x81, 0x54, 0x64, 0x7A, 0x51, 0x62, 0x74, 0x4D, 0x5E, 0x6F, 
   0x53, 0x60, 0x77, 0x63, 0x6D, 0x85, 0x65, 0x6E, 0x86, 0x57, 0x60, 0x79, 0x4D, 0x61, 0x79, 0x7D, 
   0x8B, 0x9E, 0xAF, 0xB0, 0xBA, 0x9A, 0x96, 0x97, 0x93, 0x8F, 0x91, 0x95, 0x91, 0x97, 0x6A, 0x66, 
   0x69, 0x56, 0x52, 0x59, 0x51, 0x53, 0x57, 0x5D, 0x62, 0x6A, 0x5D, 0x62, 0x6E, 0x56, 0x5A, 0x65, 
   0x59, 0x5C, 0x69, 0x62, 0x67, 0x76, 0x5D, 0x5E, 0x67, 0x59, 0x57, 0x5D, 0x56, 0x53, 0x5A, 0x52, 
   0x56, 0x56, 0x5C, 0x62, 0x60, 0x71, 0x6F, 0x6E, 0x74, 0x6F, 0x6E, 0x68, 0x65, 0x67, 0x62, 0x62, 
   0x64, 0x64, 0x64, 0x66, 0x62, 0x65, 0x67, 0x66, 0x6B, 0x6F, 0x6A, 0x6C, 0x72, 0x66, 0x66, 0x6F, 
   0x54, 0x56, 0x5E, 0x34, 0x37, 0x3E, 0x4C, 0x52, 0x60, 0x77, 0x7F, 0x8E, 0x8A, 0x8A, 0x94, 0x9F, 
   0x9B, 0x9D, 0xA3, 0x9B, 0x9B, 0x9D, 0x97, 0x99, 0xA1, 0x9B, 0x9F, 0xA1, 0x9A, 0x9E, 0xA1, 0x9C, 
   0x9D, 0x9D, 0x96, 0x97, 0x9B, 0x94, 0x97, 0x98, 0x92, 0x99, 0x97, 0x92, 0x9B, 0x95, 0x91, 0x9E, 
   0x88, 0x82, 0x93, 0x81, 0x7A, 0x88, 0x72, 0x6F, 0x79, 0x6A, 0x6C, 0x79, 0x54, 0x58, 0x63, 0x47, 
   0x50, 0x5A, 0x51, 0x5E, 0x66, 0x57, 0x65, 0x69, 0x54, 0x60, 0x62, 0x50, 0x5A, 0x5D, 0x5D, 0x65, 
   0x6A, 0x5B, 0x5E, 0x68, 0x47, 0x4A, 0x55, 0x28, 0x28, 0x2F, 0x22, 0x27, 0x2B, 0x38, 0x41, 0x4A, 
   0x53, 0x5D, 0x6A, 0x74, 0x7C, 0x8A, 0x71, 0x7A, 0x8A, 0x6B, 0x76, 0x8A, 0x5F, 0x65, 0x6E, 0x64, 
   0x68, 0x64, 0x6E, 0x6F, 0x6C, 0x79, 0x77, 0x71, 0x82, 0x7D, 0x77, 0x86, 0x83, 0x7A, 0x95, 0x92, 
   0x85, 0xA5, 0x9C, 0x96, 0x78, 0x6C, 0x70, 0x3F, 0x34, 0x3C, 0x39, 0x36, 0x3B, 0x3F, 0x3D, 0x44, 
   0x48, 0x46, 0x4E, 0x55, 0x50, 0x58, 0x4C, 0x4C, 0x54, 0x48, 0x4C, 0x53, 0x47, 0x48, 0x50, 0x40, 
   0x45, 0x4C, 0x42, 0x42, 0x47, 0x41, 0x41, 0x42, 0x43, 0x42, 0x41, 0x44, 0x42, 0x43, 0x44, 0x45, 
   0x48, 0x47, 0x4D, 0x4F, 0x60, 0x6B, 0x6C, 0x82, 0x8F, 0x94, 0x8F, 0x94, 0x9A, 0x89, 0x88, 0x8E, 
   0x85, 0x85, 0x8D, 0x84, 0x89, 0x93, 0x85, 0x8A, 0x91, 0x8A, 0x8B, 0x92, 0x85, 0x85, 0x8B, 0x81, 
   0x7E, 0x84, 0x72, 0x69, 0x70, 0x63, 0x62, 0x65, 0x66, 0x69, 0x6F, 0x62, 0x63, 0x70, 0x60, 0x65, 
   0x71, 0x66, 0x6C, 0x75, 0x71, 0x75, 0x7D, 0x75, 0x76, 0x7F, 0x76, 0x79, 0x82, 0x76, 0x78, 0x81, 
   0x77, 0x77, 0x80, 0x7C, 0x79, 0x85, 0x55, 0x4E, 0x59, 0x2F, 0x2C, 0x2F, 0x45, 0x44, 0x43, 0x60, 
   0x57, 0x5B, 0x7D, 0x6D, 0x74, 0x7C, 0x67, 0x70, 0x77, 0x65, 0x69, 0x7F, 0x72, 0x71, 0x8D, 0x7C, 
   0x79, 0x8D, 0x7A, 0x7A, 0x79, 0x68, 0x6B, 0x78, 0x66, 0x68, 0x77, 0x68, 0x68, 0x6C, 0x60, 0x61, 
   0x61, 0x55, 0x57, 0x57, 0x4B, 0x4E, 0x46, 0x3E, 0x40, 0x34, 0x32, 0x33, 0x38, 0x3F, 0x3A, 0x4A, 
   0x52, 0x59, 0x51, 0x5D, 0x6C, 0x47, 0x4F, 0x5D, 0x4C, 0x52, 0x5B, 0x5D, 0x61, 0x65, 0x69, 0x71, 
   0x70, 0x7F, 0x7F, 0x81, 0x89, 0x8A, 0x8D, 0x74, 0x72, 0x7A, 0x66, 0x65, 0x77, 0x61, 0x66, 0x7F, 
   0x5F, 0x6A, 0x84, 0x5B, 0x66, 0x7D, 0x5F, 0x69, 0x7D, 0x72, 0x7C, 0x90, 0x7A, 0x86, 0x98, 0x7D, 
   0x89, 0x9D, 0x82, 0x8D, 0xA1, 0x87, 0x91, 0xA6, 0x8C, 0x93, 0xAA, 0x93, 0x9A, 0xAF, 0x9B, 0xA4, 
   0xBB, 0xA0, 0x9F, 0xBB, 0x43, 0x36, 0x47, 0x1D, 0x21, 0x22, 0x29, 0x2F, 0x30, 0x35, 0x3A, 0x3F, 
   0x3A, 0x43, 0x46, 0x41, 0x47, 0x4A, 0x89, 0x95, 0xA6, 0x90, 0x9B, 0xAB, 0x86, 0x90, 0xA1, 0x98, 
   0xA1, 0xB0, 0xCC, 0xD2, 0xDA, 0xEF, 0xEF, 0xF5, 0xD1, 0xD8, 0xE3, 0xAF, 0xB9, 0xCB, 0xB0, 0xBC, 
   0xCF, 0xAD, 0xB6, 0xC5, 0xA6, 0xAB, 0xB4, 0x9E, 0xA6, 0xB0, 0x8D, 0x97, 0xA7, 0x82, 0x89, 0x9F, 
   0x75, 0x7F, 0x96, 0x78, 0x86, 0x92, 0xBE, 0xBF, 0xBF, 0xC3, 0xBE, 0xBA, 0x7A, 0x75, 0x7A, 0x56, 
   0x59, 0x60, 0x50, 0x58, 0x58, 0x4C, 0x52, 0x4C, 0x53, 0x4F, 0x52, 0x30, 0x36, 0x3A, 0x13, 0x13, 
   0x18, 0x37, 0x38, 0x36, 0x63, 0x62, 0x5E, 0x6F, 0x6B, 0x69, 0x51, 0x56, 0x56, 0x6E, 0x6E, 0x79, 
   0x81, 0x80, 0x89, 0x8A, 0x8A, 0x90, 0x8C, 0x8F, 0x92, 0x92, 0x97, 0x9A, 0x9B, 0x9D, 0xA2, 0xA3, 
   0xA8, 0xAC, 0x97, 0x9C, 0xA0, 0x96, 0x94, 0x9B, 0x97, 0x95, 0x9C, 0x96, 0x94, 0x9D, 0x8A, 0x89, 
   0x91, 0x89, 0x8A, 0x8C, 0x83, 0x85, 0x8A, 0x7E, 0x82, 0x86, 0x88, 0x8F, 0x91, 0x91, 0x96, 0x9C, 
   0x9A, 0x9B, 0xA2, 0xA0, 0xA0, 0xA3, 0xA0, 0x9F, 0xA4, 0x9B, 0x98, 0xA0, 0x8B, 0x86, 0x90, 0x6C, 
   0x6E, 0x78, 0x66, 0x67, 0x70, 0x61, 0x5E, 0x6A, 0x49, 0x4D, 0x57, 0x4B, 0x53, 0x57, 0x6F, 0x77, 
   0x76, 0x9A, 0x9D, 0xA4, 0x96, 0x9C, 0xA8, 0x90, 0x94, 0x9E, 0xA3, 0xA1, 0xA4, 0xA5, 0xA3, 0x9E, 
   0xA5, 0xA4, 0xA1, 0xA3, 0xA5, 0xA7, 0xA1, 0xA6, 0xA7, 0xA3, 0xA7, 0xAB, 0xA7, 0xAA, 0xB4, 0xA6, 
   0xA9, 0xB7, 0xA4, 0xA8, 0xB2, 0xA1, 0xA7, 0xAB, 0x9F, 0xA5, 0xA9, 0xA0, 0xA4, 0xA9, 0xA6, 0xA5, 
   0xA9, 0xAA, 0xA6, 0xA8, 0xA8, 0xA9, 0xAE, 0xA7, 0xAF, 0xBA, 0xAA, 0xB8, 0xC4, 0xA6, 0xB9, 0xC4, 
   0xA2, 0xB2, 0xC0, 0xA0, 0xAC, 0xBC, 0x9E, 0xA6, 0xB8, 0x9E, 0xA6, 0xB8, 0xA4, 0xAE, 0xBD, 0x8D, 
   0x96, 0xA2, 0x6A, 0x70, 0x79, 0x3C, 0x3F, 0x46, 0x1A, 0x1F, 0x27, 0x69, 0x77, 0x85, 0x67, 0x7A, 
   0x90, 0x58, 0x6A, 0x85, 0x51, 0x61, 0x7E, 0x4D, 0x5B, 0x74, 0x4D, 0x5B, 0x72, 0x4D, 0x59, 0x70, 
   0x52, 0x5D, 0x75, 0x59, 0x66, 0x7D, 0x5F, 0x6C, 0x80, 0x5A, 0x67, 0x7E, 0x4E, 0x63, 0x7A, 0x84, 
   0x8F, 0x9F, 0xA7, 0xA4, 0xAE, 0x8F, 0x8A, 0x8C, 0x8B, 0x88, 0x8A, 0x97, 0x93, 0x98, 0x96, 0x8F, 
   0x92, 0x74, 0x71, 0x76, 0x4F, 0x50, 0x55, 0x54, 0x57, 0x60, 0x58, 0x5A, 0x66, 0x57, 0x58, 0x65, 
   0x57, 0x58, 0x65, 0x5E, 0x61, 0x70, 0x5C, 0x5F, 0x69, 0x59, 0x57, 0x60, 0x5B, 0x56, 0x60, 0x56, 
   0x55, 0x5A, 0x59, 0x5D, 0x60, 0x65, 0x65, 0x66, 0x6A, 0x68, 0x68, 0x66, 0x65, 0x67, 0x63, 0x66, 
   0x67, 0x6A, 0x6C, 0x6D, 0x6A, 0x6C, 0x6F, 0x68, 0x6A, 0x6F, 0x69, 0x68, 0x70, 0x6B, 0x6C, 0x71, 
   0x65, 0x69, 0x6D, 0x4A, 0x49, 0x51, 0x4F, 0x52, 0x5D, 0x7A, 0x7C, 0x8D, 0x88, 0x84, 0x95, 0x95, 
   0x91, 0x99, 0x9A, 0x95, 0x97, 0x9D, 0x98, 0x9B, 0xA0, 0x97, 0x9C, 0xA3, 0x9B, 0x9D, 0xA5, 0x9F, 
   0x9F, 0xA7, 0x9E, 0x9F, 0xA7, 0xA0, 0xA3, 0xA5, 0x98, 0x9F, 0x97, 0x8F, 0x96, 0x8B, 0x84, 0x8D, 
   0x8C, 0x86, 0x90, 0x9F, 0x99, 0xA0, 0x98, 0x92, 0x9B, 0x84, 0x7C, 0x8C, 0x74, 0x6B, 0x7D, 0x4E, 
   0x50, 0x5D, 0x5B, 0x66, 0x6E, 0x66, 0x6F, 0x79, 0x5B, 0x60, 0x6B, 0x5C, 0x62, 0x69, 0x5C, 0x63, 
   0x6A, 0x5F, 0x60, 0x6E, 0x5A, 0x5E, 0x6C, 0x4C, 0x4F, 0x5A, 0x40, 0x46, 0x4D, 0x64, 0x6A, 0x74, 
   0x7E, 0x83, 0x93, 0x89, 0x90, 0x9E, 0x83, 0x90, 0x9D, 0x79, 0x84, 0x99, 0x6A, 0x6F, 0x80, 0x62, 
   0x67, 0x6F, 0x62, 0x65, 0x67, 0x76, 0x78, 0x6E, 0x8C, 0x8C, 0x7F, 0x7E, 0x7B, 0x71, 0x7B, 0x76, 
   0x71, 0x78, 0x6F, 0x72, 0x47, 0x41, 0x47, 0x35, 0x35, 0x3A, 0x3B, 0x3E, 0x42, 0x42, 0x41, 0x49, 
   0x4A, 0x46, 0x4F, 0x4D, 0x47, 0x51, 0x48, 0x48, 0x51, 0x45, 0x4A, 0x52, 0x47, 0x4B, 0x53, 0x43, 
   0x47, 0x4F, 0x41, 0x43, 0x49, 0x44, 0x43, 0x46, 0x45, 0x43, 0x43, 0x43, 0x43, 0x45, 0x42, 0x45, 
   0x49, 0x42, 0x47, 0x4C, 0x60, 0x66, 0x6A, 0x79, 0x85, 0x87, 0x78, 0x7D, 0x7E, 0x72, 0x75, 0x77, 
   0x7F, 0x84, 0x89, 0x86, 0x89, 0x91, 0x80, 0x85, 0x89, 0x8A, 0x92, 0x93, 0x8A, 0x90, 0x94, 0x81, 
   0x83, 0x89, 0x77, 0x74, 0x79, 0x63, 0x62, 0x66, 0x68, 0x68, 0x6E, 0x67, 0x66, 0x71, 0x61, 0x65, 
   0x6F, 0x5C, 0x64, 0x6B, 0x66, 0x6D, 0x74, 0x67, 0x6E, 0x75, 0x6E, 0x76, 0x7E, 0x71, 0x78, 0x7F, 
   0x79, 0x7F, 0x87, 0x8A, 0x88, 0x97, 0x43, 0x3B, 0x49, 0x33, 0x34, 0x35, 0x5B, 0x60, 0x5C, 0x8C, 
   0x86, 0x85, 0xAA, 0x9B, 0x9E, 0xA6, 0x92, 0x97, 0x8F, 0x7B, 0x7D, 0x92, 0x83, 0x82, 0x9B, 0x88, 
   0x87, 0x93, 0x7F, 0x80, 0x7E, 0x6A, 0x6C, 0x78, 0x64, 0x66, 0x73, 0x66, 0x65, 0x77, 0x68, 0x65, 
   0x69, 0x59, 0x5A, 0x5D, 0x4E, 0x51, 0x4F, 0x44, 0x47, 0x35, 0x2F, 0x32, 0x2C, 0x2F, 0x2A, 0x44, 
   0x4B, 0x4E, 0x46, 0x4C, 0x54, 0x46, 0x46, 0x50, 0x5C, 0x5B, 0x63, 0x66, 0x67, 0x6A, 0x62, 0x68, 
   0x69, 0x58, 0x59, 0x5C, 0x54, 0x58, 0x5C, 0x5D, 0x5D, 0x67, 0x63, 0x5E, 0x70, 0x59, 0x5A, 0x71, 
   0x59, 0x62, 0x7A, 0x5E, 0x68, 0x7F, 0x5F, 0x68, 0x7E, 0x6E, 0x7A, 0x8E, 0x76, 0x84, 0x97, 0x77, 
   0x84, 0x98, 0x80, 0x8C, 0x9E, 0x8C, 0x96, 0xA8, 0x95, 0x9A, 0xAD, 0x98, 0x99, 0xAC, 0x99, 0x9B, 
   0xAE, 0x8D, 0x83, 0x9E, 0x29, 0x1B, 0x29, 0x23, 0x26, 0x25, 0x31, 0x36, 0x36, 0x37, 0x3B, 0x3F, 
   0x37, 0x3F, 0x42, 0x37, 0x43, 0x45, 0x89, 0x91, 0x9E, 0x88, 0x91, 0x9E, 0x8F, 0x96, 0xA2, 0xA0, 
   0xA7, 0xB3, 0xA5, 0xB0, 0xBC, 0xBE, 0xC6, 0xD4, 0xB5, 0xC5, 0xD6, 0xA2, 0xAF, 0xC7, 0x9C, 0xAD, 
   0xC7, 0x9E, 0xAC, 0xC3, 0xA5, 0xAF, 0xC4, 0x98, 0xAA, 0xC3, 0x9A, 0xAB, 0xC8, 0xC3, 0xCA, 0xE0, 
   0xB3, 0xBC, 0xD5, 0x85, 0x96, 0xB1, 0x9F, 0xA8, 0xB2, 0xBB, 0xBC, 0xBD, 0x82, 0x83, 0x8D, 0x67, 
   0x6C, 0x7A, 0x53, 0x5A, 0x62, 0x3F, 0x47, 0x44, 0x3D, 0x3E, 0x3D, 0x3E, 0x41, 0x46, 0x24, 0x22, 
   0x29, 0x2B, 0x2A, 0x2D, 0x51, 0x50, 0x4F, 0x58, 0x57, 0x56, 0x3E, 0x48, 0x46, 0x69, 0x6C, 0x72, 
   0x7E, 0x81, 0x88, 0x81, 0x84, 0x8B, 0x85, 0x8C, 0x8F, 0x8D, 0x94, 0x96, 0x91, 0x96, 0x99, 0x97, 
   0x9D, 0xA1, 0x97, 0x9E, 0xA1, 0x9B, 0x9A, 0x9C, 0x99, 0x97, 0x9C, 0x99, 0x96, 0x9F, 0x9D, 0x9B, 
   0xA3, 0x93, 0x94, 0x98, 0x83, 0x84, 0x89, 0x77, 0x7B, 0x80, 0x76, 0x7E, 0x80, 0x82, 0x89, 0x90, 
   0x94, 0x98, 0xA0, 0x9D, 0x9E, 0xA2, 0x9B, 0x9D, 0xA2, 0x98, 0x98, 0xA1, 0x92, 0x8D, 0x99, 0x74, 
   0x76, 0x7F, 0x65, 0x68, 0x70, 0x60, 0x61, 0x6A, 0x50, 0x52, 0x5C, 0x4E, 0x53, 0x58, 0x6D, 0x76, 
   0x77, 0x8D, 0x90, 0x9A, 0x93, 0x97, 0xA1, 0x96, 0x99, 0x9E, 0xA0, 0x9F, 0x9D, 0xA3, 0xA3, 0x9F, 
   0xA1, 0xA3, 0xA3, 0xA2, 0xA3, 0xAD, 0x9D, 0xA3, 0xAD, 0xA1, 0xA6, 0xB0, 0xA2, 0xA6, 0xB0, 0xA2, 
   0xA6, 0xB0, 0xA8, 0xAD, 0xB5, 0xAB, 0xAF, 0xB6, 0x9F, 0xA3, 0xA8, 0xA1, 0xA2, 0xA2, 0xA8, 0xA6, 
   0xA9, 0xA7, 0xA1, 0xA4, 0xA5, 0xA3, 0xA6, 0xA4, 0xA5, 0xAB, 0xA8, 0xAE, 0xB4, 0xA7, 0xB4, 0xB9, 
   0xA4, 0xB1, 0xBA, 0xA3, 0xAC, 0xB8, 0xA4, 0xAA, 0xB9, 0xAD, 0xB4, 0xC2, 0x9D, 0xA5, 0xB0, 0x74, 
   0x7A, 0x82, 0x4F, 0x52, 0x58, 0x30, 0x34, 0x3B, 0x42, 0x4C, 0x54, 0x8E, 0x99, 0xA9, 0x67, 0x75, 
   0x8D, 0x4F, 0x60, 0x7A, 0x4F, 0x5F, 0x79, 0x4D, 0x5C, 0x75, 0x4D, 0x5E, 0x77, 0x53, 0x5D, 0x77, 
   0x55, 0x5F, 0x79, 0x58, 0x67, 0x7E, 0x5B, 0x69, 0x7E, 0x59, 0x65, 0x7E, 0x56, 0x66, 0x7D, 0x95, 
   0x9C, 0xA8, 0x9D, 0x99, 0xA1, 0x90, 0x8A, 0x90, 0x89, 0x86, 0x89, 0x8C, 0x88, 0x8C, 0x94, 0x8E, 
   0x91, 0x96, 0x91, 0x94, 0x73, 0x6D, 0x76, 0x58, 0x54, 0x5F, 0x52, 0x50, 0x5A, 0x57, 0x58, 0x62, 
   0x58, 0x5B, 0x67, 0x5D, 0x61, 0x6B, 0x5B, 0x60, 0x67, 0x5A, 0x5B, 0x62, 0x6B, 0x67, 0x70, 0x62, 
   0x60, 0x67, 0x57, 0x5C, 0x60, 0x5F, 0x60, 0x62, 0x65, 0x64, 0x63, 0x61, 0x62, 0x62, 0x6A, 0x6D, 
   0x6D, 0x7D, 0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x75, 0x74, 0x76, 0x6F, 0x6C, 0x71, 0x6E, 0x6B, 0x6D, 
   0x6F, 0x6E, 0x6F, 0x49, 0x46, 0x4A, 0x54, 0x54, 0x5A, 0x7D, 0x7D, 0x89, 0x85, 0x7F, 0x8F, 0x8B, 
   0x86, 0x93, 0x8A, 0x85, 0x8C, 0x90, 0x8B, 0x92, 0xA0, 0x95, 0x9B, 0xAA, 0x9F, 0xA1, 0xAB, 0xA1, 
   0xA1, 0xAB, 0xA1, 0xA4, 0xAA, 0xA3, 0xA8, 0xA9, 0x9F, 0xA3, 0xA7, 0x9D, 0xA4, 0xA6, 0x9F, 0xA4, 
   0x9F, 0x9B, 0x9B, 0x9F, 0x9D, 0x9B, 0x99, 0x94, 0x98, 0x96, 0x8E, 0x98, 0xA1, 0x94, 0xA1, 0x66, 
   0x62, 0x71, 0x42, 0x47, 0x54, 0x54, 0x5C, 0x68, 0x63, 0x6A, 0x74, 0x63, 0x69, 0x71, 0x66, 0x6B, 
   0x75, 0x65, 0x6A, 0x79, 0x59, 0x61, 0x72, 0x4F, 0x54, 0x61, 0x47, 0x4D, 0x55, 0x51, 0x59, 0x60, 
   0x59, 0x60, 0x6B, 0x6B, 0x76, 0x7E, 0x7F, 0x8C, 0x90, 0x8C, 0x93, 0x9E, 0x79, 0x7D, 0x8E, 0x69, 
   0x6E, 0x80, 0x5F, 0x64, 0x6F, 0x4C, 0x53, 0x4D, 0x47, 0x4F, 0x43, 0x36, 0x3D, 0x36, 0x49, 0x4B, 
   0x4E, 0x5A, 0x57, 0x5F, 0x52, 0x4F, 0x57, 0x43, 0x43, 0x49, 0x43, 0x44, 0x4A, 0x45, 0x44, 0x4E, 
   0x4E, 0x48, 0x53, 0x52, 0x4B, 0x56, 0x49, 0x48, 0x53, 0x42, 0x46, 0x50, 0x44, 0x48, 0x52, 0x44, 
   0x47, 0x51, 0x44, 0x45, 0x4D, 0x47, 0x46, 0x4A, 0x45, 0x42, 0x45, 0x42, 0x41, 0x47, 0x4A, 0x4C, 
   0x54, 0x51, 0x51, 0x59, 0x51, 0x4E, 0x56, 0x53, 0x58, 0x59, 0x6B, 0x71, 0x70, 0x85, 0x8A, 0x8D, 
   0x7E, 0x80, 0x89, 0x6F, 0x6C, 0x77, 0x76, 0x79, 0x7D, 0x78, 0x82, 0x83, 0x76, 0x7F, 0x86, 0x76, 
   0x7F, 0x86, 0x7A, 0x7D, 0x84, 0x6A, 0x6A, 0x71, 0x62, 0x5F, 0x66, 0x64, 0x62, 0x68, 0x69, 0x6A, 
   0x70, 0x69, 0x6C, 0x73, 0x68, 0x6E, 0x74, 0x65, 0x6C, 0x73, 0x65, 0x6D, 0x73, 0x6D, 0x75, 0x7B, 
   0x76, 0x7D, 0x83, 0x78, 0x76, 0x82, 0x35, 0x2D, 0x38, 0x21, 0x22, 0x25, 0x3A, 0x41, 0x3C, 0x73, 
   0x75, 0x6F, 0x9A, 0x99, 0x94, 0xAB, 0x9E, 0x9C, 0xA2, 0x90, 0x91, 0x9F, 0x90, 0x94, 0xAC, 0x97, 
   0x9F, 0xA1, 0x8A, 0x91, 0x88, 0x72, 0x77, 0x7B, 0x66, 0x6A, 0x71, 0x63, 0x68, 0x7B, 0x6B, 0x6A, 
   0x72, 0x5F, 0x5F, 0x61, 0x4F, 0x52, 0x58, 0x49, 0x4C, 0x42, 0x36, 0x39, 0x24, 0x21, 0x20, 0x3C, 
   0x43, 0x43, 0x42, 0x47, 0x49, 0x50, 0x4E, 0x56, 0x61, 0x5D, 0x65, 0x57, 0x59, 0x5D, 0x49, 0x4D, 
   0x51, 0x52, 0x56, 0x5A, 0x6A, 0x73, 0x77, 0x8B, 0x8D, 0x9A, 0x83, 0x7B, 0x90, 0x64, 0x5F, 0x78, 
   0x5C, 0x60, 0x7A, 0x60, 0x68, 0x7F, 0x62, 0x6A, 0x7D, 0x68, 0x72, 0x83, 0x70, 0x7C, 0x8B, 0x77, 
   0x81, 0x92, 0x7B, 0x88, 0x95, 0x87, 0x93, 0xA1, 0x9A, 0xA2, 0xB1, 0xA4, 0xA6, 0xB5, 0xA9, 0xA8, 
   0xBA, 0x87, 0x73, 0x90, 0x26, 0x17, 0x24, 0x2E, 0x2E, 0x2F, 0x32, 0x38, 0x39, 0x35, 0x3A, 0x3E, 
   0x37, 0x3E, 0x42, 0x3B, 0x44, 0x49, 0x88, 0x8D, 0x96, 0x79, 0x83, 0x90, 0x82, 0x8A, 0x95, 0xA9, 
   0xAC, 0xB2, 0xB8, 0xBB, 0xC0, 0xB7, 0xBC, 0xC9, 0x90, 0xA1, 0xB7, 0x95, 0x9E, 0xB4, 0x9B, 0xA3, 
   0xB9, 0xB1, 0xBB, 0xCC, 0xD3, 0xDA, 0xE1, 0xBF, 0xCB, 0xD2, 0xB5, 0xC5, 0xD3, 0xC4, 0xCF, 0xE0, 
   0xB2, 0xBF, 0xDA, 0x85, 0x95, 0xB2, 0x90, 0x98, 0xA2, 0xBD, 0xBD, 0xBD, 0x90, 0x90, 0x98, 0x7F, 
   0x81, 0x92, 0x6A, 0x68, 0x7B, 0x42, 0x44, 0x4A, 0x3A, 0x3B, 0x38, 0x3C, 0x3E, 0x42, 0x2F, 0x2F, 
   0x35, 0x2B, 0x27, 0x2C, 0x3F, 0x3E, 0x3F, 0x46, 0x46, 0x44, 0x35, 0x3B, 0x39, 0x60, 0x64, 0x65, 
   0x81, 0x87, 0x8B, 0x82, 0x89, 0x8C, 0x89, 0x90, 0x93, 0x92, 0x98, 0x98, 0x95, 0x97, 0x96, 0x97, 
   0x98, 0x9B, 0x99, 0x9D, 0x9F, 0x9C, 0x9E, 0x9D, 0x96, 0x98, 0x9A, 0x98, 0x97, 0x9E, 0xA1, 0x9F, 
   0xA7, 0x9D, 0x9C, 0xA2, 0x91, 0x8E, 0x96, 0x83, 0x82, 0x8A, 0x78, 0x7F, 0x84, 0x7A, 0x82, 0x8D, 
   0x91, 0x96, 0xA1, 0x98, 0x9E, 0xA4, 0x95, 0x9C, 0xA4, 0x93, 0x99, 0xA6, 0x95, 0x95, 0xA2, 0x81, 
   0x7E, 0x88, 0x63, 0x63, 0x6A, 0x5E, 0x62, 0x69, 0x55, 0x58, 0x5F, 0x56, 0x5D, 0x63, 0x74, 0x7B, 
   0x80, 0x8E, 0x93, 0x9B, 0x91, 0x95, 0x9E, 0x91, 0x94, 0x98, 0x9B, 0x9B, 0x9B, 0xA0, 0xA3, 0xA4, 
   0x9C, 0xA2, 0xA8, 0x9F, 0xA3, 0xAF, 0x9A, 0xA3, 0xAC, 0x9E, 0xA6, 0xB1, 0x9D, 0xA4, 0xAC, 0x9F, 
   0xA6, 0xAB, 0xA5, 0xAA, 0xAF, 0xA7, 0xAB, 0xAF, 0xA1, 0xA4, 0xA6, 0xA2, 0xA3, 0xA6, 0xA8, 0xAB, 
   0xB2, 0xA1, 0xA2, 0xAB, 0xA0, 0xA3, 0xAA, 0xA3, 0xA5, 0xAE, 0xA1, 0xA5, 0xAC, 0xA5, 0xAD, 0xB5, 
   0xAB, 0xB4, 0xC0, 0xA8, 0xB0, 0xBA, 0xA9, 0xB2, 0xBB, 0xAF, 0xBA, 0xC1, 0x89, 0x93, 0x98, 0x55, 
   0x5C, 0x5E, 0x36, 0x3B, 0x3D, 0x23, 0x2E, 0x32, 0x60, 0x72, 0x7B, 0x77, 0x83, 0x96, 0x59, 0x66, 
   0x7F, 0x4D, 0x5F, 0x77, 0x4A, 0x5D, 0x72, 0x4B, 0x5F, 0x75, 0x50, 0x62, 0x7A, 0x56, 0x60, 0x7A, 
   0x5C, 0x65, 0x80, 0x56, 0x66, 0x7E, 0x5C, 0x69, 0x81, 0x5A, 0x63, 0x7F, 0x66, 0x75, 0x8A, 0xB1, 
   0xB9, 0xC1, 0x9B, 0x98, 0xA0, 0x90, 0x8A, 0x92, 0x8D, 0x89, 0x8C, 0x91, 0x8B, 0x8E, 0x91, 0x88, 
   0x8C, 0x9C, 0x98, 0x99, 0xAF, 0xA5, 0xB1, 0x82, 0x79, 0x86, 0x56, 0x51, 0x58, 0x52, 0x52, 0x59, 
   0x59, 0x5B, 0x65, 0x5F, 0x62, 0x68, 0x5A, 0x5D, 0x62, 0x55, 0x58, 0x5D, 0x64, 0x63, 0x6C, 0x5D, 
   0x5F, 0x65, 0x5A, 0x60, 0x64, 0x60, 0x61, 0x65, 0x61, 0x60, 0x5F, 0x65, 0x68, 0x66, 0x81, 0x84, 
   0x80, 0x94, 0x91, 0x8E, 0x8A, 0x87, 0x84, 0x87, 0x86, 0x83, 0x7E, 0x7D, 0x7C, 0x72, 0x6D, 0x6E, 
   0x66, 0x63, 0x64, 0x45, 0x45, 0x45, 0x55, 0x56, 0x59, 0x96, 0x93, 0x9B, 0x91, 0x86, 0x92, 0x8F, 
   0x82, 0x92, 0x82, 0x7B, 0x88, 0x89, 0x84, 0x8D, 0xA1, 0x94, 0x9B, 0xAE, 0xA0, 0xA1, 0xB2, 0xA7, 
   0xA7, 0xB0, 0xA5, 0xAA, 0xA9, 0xA1, 0xAA, 0xAB, 0xA8, 0xA8, 0xAA, 0xA3, 0xA9, 0xA6, 0x9C, 0xA2, 
   0xA5, 0x9F, 0x9D, 0xA8, 0xA7, 0xA3, 0xA1, 0x9D, 0xA1, 0x96, 0x8F, 0x97, 0x8E, 0x86, 0x90, 0x7F, 
   0x77, 0x86, 0x69, 0x67, 0x75, 0x63, 0x68, 0x77, 0x5A, 0x64, 0x71, 0x6C, 0x74, 0x7C, 0x78, 0x7E, 
   0x87, 0x6E, 0x75, 0x81, 0x6B, 0x71, 0x82, 0x67, 0x68, 0x77, 0x52, 0x53, 0x5C, 0x4B, 0x51, 0x58, 
   0x3F, 0x49, 0x52, 0x4E, 0x5C, 0x64, 0x71, 0x80, 0x83, 0x90, 0x98, 0x9D, 0x8E, 0x8D, 0x9B, 0x6F, 
   0x74, 0x86, 0x6C, 0x75, 0x83, 0x43, 0x49, 0x4F, 0x12, 0x13, 0x14, 0x14, 0x19, 0x16, 0x3D, 0x48, 
   0x47, 0x65, 0x68, 0x71, 0x6D, 0x6A, 0x7B, 0x62, 0x5D, 0x6E, 0x5C, 0x57, 0x64, 0x4F, 0x4E, 0x57, 
   0x51, 0x4B, 0x54, 0x56, 0x4F, 0x58, 0x4A, 0x4A, 0x52, 0x42, 0x47, 0x4F, 0x44, 0x49, 0x51, 0x45, 
   0x48, 0x50, 0x43, 0x41, 0x4A, 0x47, 0x42, 0x49, 0x4B, 0x46, 0x4C, 0x54, 0x52, 0x5A, 0x6B, 0x6B, 
   0x76, 0x76, 0x70, 0x7B, 0x64, 0x59, 0x65, 0x64, 0x64, 0x6C, 0x7A, 0x7E, 0x82, 0x7D, 0x80, 0x85, 
   0x7A, 0x79, 0x84, 0x79, 0x78, 0x86, 0x7E, 0x80, 0x89, 0x75, 0x78, 0x80, 0x77, 0x7C, 0x87, 0x79, 
   0x7E, 0x85, 0x74, 0x76, 0x7B, 0x6A, 0x6C, 0x72, 0x5D, 0x5C, 0x65, 0x5C, 0x57, 0x60, 0x66, 0x62, 
   0x6A, 0x65, 0x63, 0x6B, 0x5E, 0x60, 0x68, 0x5D, 0x61, 0x68, 0x5D, 0x64, 0x6A, 0x65, 0x6C, 0x72, 
   0x69, 0x6F, 0x75, 0x68, 0x68, 0x6F, 0x4C, 0x46, 0x51, 0x2E, 0x2A, 0x36, 0x27, 0x27, 0x29, 0x37, 
   0x38, 0x31, 0x61, 0x65, 0x5A, 0x93, 0x8B, 0x86, 0x9E, 0x93, 0x8E, 0xA4, 0x9C, 0x98, 0xB8, 0xA9, 
   0xA9, 0xB1, 0x9B, 0x9F, 0x97, 0x80, 0x86, 0x83, 0x6D, 0x72, 0x71, 0x62, 0x65, 0x6B, 0x63, 0x65, 
   0x6B, 0x5E, 0x5D, 0x5E, 0x4E, 0x53, 0x56, 0x47, 0x49, 0x4C, 0x3B, 0x3F, 0x22, 0x19, 0x1A, 0x24, 
   0x2C, 0x27, 0x3E, 0x46, 0x44, 0x58, 0x58, 0x5F, 0x59, 0x55, 0x5E, 0x46, 0x4B, 0x52, 0x4B, 0x4E, 
   0x56, 0x72, 0x7A, 0x80, 0x8F, 0x9C, 0xA0, 0xA7, 0xAE, 0xB9, 0x9D, 0x95, 0xA9, 0x73, 0x69, 0x85, 
   0x63, 0x61, 0x7F, 0x5F, 0x62, 0x7D, 0x5D, 0x61, 0x75, 0x62, 0x67, 0x75, 0x6A, 0x71, 0x7A, 0x72, 
   0x79, 0x85, 0x75, 0x82, 0x8A, 0x7D, 0x8C, 0x95, 0x8D, 0x9A, 0xA5, 0x9E, 0xA6, 0xB1, 0xB0, 0xB1, 
   0xC3, 0x77, 0x62, 0x80, 0x27, 0x1E, 0x2B, 0x33, 0x33, 0x37, 0x32, 0x39, 0x3E, 0x38, 0x3F, 0x44, 
   0x3E, 0x44, 0x4C, 0x46, 0x49, 0x50, 0x93, 0x90, 0x95, 0x85, 0x86, 0x8D, 0x96, 0x97, 0x97, 0xAE, 
   0xAC, 0xA8, 0xC8, 0xC9, 0xC6, 0xD5, 0xD7, 0xDC, 0x9B, 0xA6, 0xBD, 0x92, 0x98, 0xAF, 0x8F, 0x91, 
   0xA8, 0xA1, 0xA5, 0xBD, 0xB8, 0xBE, 0xCA, 0xCC, 0xD5, 0xD4, 0xC6, 0xD0, 0xD6, 0x9B, 0xAA, 0xC3, 
   0x8A, 0x9E, 0xC4, 0x7E, 0x8E, 0xAF, 0x93, 0x9B, 0xA5, 0xCA, 0xC9, 0xC4, 0xA6, 0xA1, 0xA4, 0x8D, 
   0x8A, 0x96, 0x78, 0x74, 0x86, 0x4F, 0x4D, 0x56, 0x33, 0x34, 0x36, 0x34, 0x38, 0x3B, 0x31, 0x34, 
   0x37, 0x2B, 0x2C, 0x30, 0x32, 0x31, 0x33, 0x3D, 0x3A, 0x38, 0x34, 0x34, 0x30, 0x48, 0x48, 0x44, 
   0x7C, 0x7D, 0x83, 0x7D, 0x81, 0x88, 0x85, 0x8D, 0x8E, 0x93, 0x97, 0x97, 0x98, 0x99, 0x9A, 0x99, 
   0x99, 0x9B, 0x9D, 0x9F, 0xA0, 0x99, 0x9F, 0x9F, 0x92, 0x98, 0x9A, 0x98, 0x9A, 0x9F, 0xA1, 0x9F, 
   0xA5, 0xA3, 0x9E, 0xA2, 0x9F, 0x9B, 0x9F, 0x92, 0x8E, 0x94, 0x84, 0x81, 0x89, 0x89, 0x86, 0x8E, 
   0x91, 0x94, 0x9D, 0x93, 0x9A, 0xA6, 0x93, 0x9A, 0xA9, 0x93, 0x99, 0xA9, 0x97, 0x96, 0xA1, 0x89, 
   0x85, 0x8E, 0x65, 0x64, 0x6D, 0x5D, 0x60, 0x67, 0x57, 0x5D, 0x62, 0x5A, 0x64, 0x68, 0x75, 0x78, 
   0x7F, 0x89, 0x8F, 0x93, 0x92, 0x9A, 0x9C, 0x8C, 0x91, 0x97, 0x94, 0x97, 0x9D, 0x9F, 0xA0, 0xA6, 
   0xA1, 0xA0, 0xAA, 0xA1, 0xA0, 0xAA, 0x9C, 0xA4, 0xAC, 0xA2, 0xA7, 0xB4, 0xA3, 0xA8, 0xB4, 0xA2, 
   0xA8, 0xB1, 0x9F, 0xA4, 0xAE, 0xA1, 0xA5, 0xAE, 0x9F, 0xA3, 0xA8, 0x97, 0x9F, 0xA2, 0xA1, 0xAA, 
   0xB0, 0xA1, 0xA7, 0xB0, 0xA4, 0xA9, 0xAD, 0xA5, 0xAB, 0xAF, 0x9E, 0xA7, 0xAD, 0xA4, 0xB1, 0xB7, 
   0xAE, 0xBC, 0xC5, 0xA7, 0xB2, 0xBF, 0x98, 0xA1, 0xAF, 0x8A, 0x90, 0x9B, 0x7C, 0x7F, 0x85, 0x43, 
   0x45, 0x49, 0x21, 0x27, 0x2D, 0x2B, 0x36, 0x41, 0x5E, 0x6B, 0x7C, 0x5E, 0x6A, 0x81, 0x58, 0x65, 
   0x80, 0x51, 0x61, 0x7C, 0x50, 0x5B, 0x75, 0x50, 0x5B, 0x78, 0x56, 0x62, 0x79, 0x5C, 0x65, 0x7C, 
   0x59, 0x62, 0x7C, 0x4E, 0x5A, 0x71, 0x5F, 0x6A, 0x81, 0x69, 0x72, 0x89, 0x7F, 0x86, 0x96, 0xBA, 
   0xB9, 0xC3, 0x9D, 0x96, 0xA0, 0x8E, 0x88, 0x90, 0x8B, 0x86, 0x8E, 0x93, 0x8E, 0x94, 0x91, 0x8F, 
   0x91, 0x99, 0x98, 0x98, 0xA3, 0x9D, 0xA4, 0x9E, 0x96, 0xA2, 0x7F, 0x7C, 0x87, 0x58, 0x59, 0x64, 
   0x58, 0x5A, 0x65, 0x66, 0x68, 0x70, 0x5B, 0x5F, 0x66, 0x55, 0x58, 0x5C, 0x56, 0x56, 0x5B, 0x55, 
   0x57, 0x5E, 0x5A, 0x5E, 0x63, 0x5F, 0x60, 0x5E, 0x5D, 0x5C, 0x57, 0x63, 0x66, 0x63, 0x76, 0x78, 
   0x71, 0x82, 0x7F, 0x7A, 0x7E, 0x7E, 0x7C, 0x7C, 0x80, 0x80, 0x78, 0x7B, 0x7B, 0x72, 0x73, 0x74, 
   0x80, 0x7F, 0x80, 0x64, 0x63, 0x64, 0x4C, 0x4B, 0x4C, 0x9C, 0x9A, 0x9C, 0x9D, 0x91, 0x98, 0x9A, 
   0x8F, 0x9C, 0x8D, 0x83, 0x94, 0x82, 0x7A, 0x8A, 0x94, 0x86, 0x93, 0xA8, 0x99, 0xA0, 0xB1, 0xA6, 
   0xA8, 0xB1, 0xA6, 0xA9, 0xA9, 0xA2, 0xA7, 0xA8, 0xA6, 0xA4, 0xA5, 0xA3, 0xA5, 0xA6, 0x9D, 0xA1, 
   0x99, 0x90, 0x93, 0x98, 0x95, 0x9A, 0x9D, 0x9C, 0xA6, 0x8A, 0x8B, 0x96, 0x6B, 0x65, 0x76, 0x7D, 
   0x76, 0x86, 0x86, 0x81, 0x8E, 0x7C, 0x78, 0x89, 0x68, 0x65, 0x74, 0x6C, 0x73, 0x7A, 0x7F, 0x89, 
   0x92, 0x76, 0x7C, 0x84, 0x6D, 0x76, 0x82, 0x75, 0x7D, 0x8A, 0x64, 0x64, 0x6F, 0x56, 0x5B, 0x65, 
   0x49, 0x51, 0x5C, 0x41, 0x4B, 0x55, 0x62, 0x6F, 0x70, 0x86, 0x91, 0x92, 0x92, 0x95, 0x9E, 0x7D, 
   0x82, 0x94, 0x65, 0x6D, 0x80, 0x5C, 0x59, 0x6B, 0x24, 0x1C, 0x26, 0x12, 0x18, 0x15, 0x41, 0x4D, 
   0x49, 0x66, 0x6F, 0x75, 0x73, 0x77, 0x84, 0x68, 0x6C, 0x7A, 0x6F, 0x6F, 0x7C, 0x71, 0x72, 0x7A, 
   0x7D, 0x77, 0x81, 0x5E, 0x4E, 0x60, 0x44, 0x39, 0x45, 0x41, 0x40, 0x4A, 0x42, 0x46, 0x51, 0x48, 
   0x49, 0x51, 0x47, 0x4E, 0x53, 0x58, 0x54, 0x59, 0x58, 0x54, 0x5A, 0x59, 0x5A, 0x5E, 0x64, 0x64, 
   0x6A, 0x61, 0x5B, 0x61, 0x63, 0x64, 0x6C, 0x69, 0x68, 0x76, 0x69, 0x67, 0x75, 0x6D, 0x6E, 0x7A, 
   0x78, 0x7D, 0x8B, 0x80, 0x84, 0x90, 0x77, 0x7C, 0x83, 0x81, 0x83, 0x8B, 0x81, 0x81, 0x8B, 0x74, 
   0x73, 0x7C, 0x69, 0x69, 0x72, 0x63, 0x69, 0x72, 0x69, 0x6A, 0x72, 0x5F, 0x58, 0x61, 0x5F, 0x56, 
   0x60, 0x60, 0x5D, 0x66, 0x63, 0x61, 0x6A, 0x63, 0x62, 0x6B, 0x66, 0x63, 0x6C, 0x65, 0x65, 0x6C, 
   0x60, 0x66, 0x6A, 0x63, 0x65, 0x66, 0x77, 0x7B, 0x80, 0x60, 0x5F, 0x71, 0x3D, 0x34, 0x47, 0x2D, 
   0x28, 0x30, 0x28, 0x28, 0x25, 0x54, 0x51, 0x48, 0x7D, 0x79, 0x75, 0x7F, 0x7F, 0x7B, 0x8E, 0x87, 
   0x84, 0xA9, 0x9C, 0x9B, 0xA6, 0x91, 0x93, 0x8B, 0x70, 0x74, 0x74, 0x63, 0x67, 0x66, 0x5D, 0x5C, 
   0x5F, 0x56, 0x56, 0x57, 0x4D, 0x50, 0x4B, 0x43, 0x46, 0x45, 0x3B, 0x3E, 0x32, 0x28, 0x2A, 0x2E, 
   0x30, 0x30, 0x4C, 0x50, 0x50, 0x59, 0x5C, 0x5F, 0x54, 0x53, 0x5A, 0x63, 0x69, 0x70, 0x81, 0x89, 
   0x91, 0x85, 0x8B, 0x92, 0x85, 0x90, 0x95, 0x9A, 0xA6, 0xA9, 0xAB, 0xA9, 0xB3, 0x89, 0x7C, 0x92, 
   0x6C, 0x63, 0x80, 0x5A, 0x5B, 0x78, 0x5C, 0x5F, 0x77, 0x5C, 0x60, 0x71, 0x5E, 0x5F, 0x68, 0x67, 
   0x66, 0x6D, 0x73, 0x76, 0x7E, 0x79, 0x7E, 0x85, 0x7D, 0x83, 0x8C, 0x81, 0x87, 0x92, 0x97, 0x99, 
   0xAB, 0x57, 0x46, 0x60, 0x27, 0x21, 0x30, 0x2B, 0x33, 0x36, 0x3A, 0x44, 0x43, 0x44, 0x49, 0x4D, 
   0x49, 0x4D, 0x54, 0x51, 0x53, 0x5A, 0x94, 0x92, 0x91, 0x92, 0x92, 0x93, 0x9C, 0x9A, 0x99, 0xA0, 
   0x9B, 0x99, 0xBC, 0xBA, 0xBA, 0xCA, 0xCA, 0xD0, 0x98, 0xA1, 0xB8, 0x84, 0x8C, 0xA8, 0x79, 0x84, 
   0x9F, 0x7D, 0x86, 0xA1, 0x96, 0xA1, 0xB1, 0xC5, 0xD0, 0xD1, 0xC9, 0xD2, 0xD7, 0x93, 0xA0, 0xB5, 
   0x83, 0x92, 0xB3, 0x84, 0x8D, 0xAD, 0x93, 0x96, 0xA3, 0xC3, 0xBE, 0xBB, 0xAF, 0xAA, 0xAB, 0x88, 
   0x8B, 0x95, 0x76, 0x75, 0x84, 0x52, 0x4A, 0x57, 0x38, 0x33, 0x3B, 0x35, 0x35, 0x3D, 0x33, 0x33, 
   0x39, 0x31, 0x31, 0x34, 0x2D, 0x2D, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 0x2D, 0x2E, 0x2A, 0x26, 0x28, 
   0x58, 0x5C, 0x5D, 0x73, 0x7A, 0x7E, 0x7D, 0x84, 0x83, 0x93, 0x94, 0x94, 0xA5, 0xA0, 0xA4, 0x9E, 
   0x9D, 0x9F, 0x9D, 0xA0, 0xA1, 0x9D, 0xA0, 0xA2, 0x97, 0x9B, 0x9F, 0x97, 0x99, 0x9F, 0xA7, 0xA5, 
   0xAB, 0xA2, 0x9D, 0xA4, 0xA1, 0x9F, 0xA2, 0x9D, 0x9B, 0x9F, 0x98, 0x95, 0x9A, 0x9E, 0x98, 0x9F, 
   0x93, 0x95, 0x9E, 0x95, 0x9B, 0xA8, 0x9A, 0x9F, 0xAD, 0x94, 0x99, 0xA5, 0x8B, 0x8A, 0x94, 0x89, 
   0x84, 0x8D, 0x6A, 0x66, 0x70, 0x61, 0x62, 0x69, 0x5D, 0x60, 0x64, 0x5C, 0x60, 0x64, 0x70, 0x71, 
   0x78, 0x87, 0x88, 0x8E, 0x8B, 0x8F, 0x91, 0x90, 0x92, 0x96, 0x99, 0x99, 0x9E, 0x9A, 0x9C, 0x9F, 
   0x9F, 0xA4, 0xAA, 0xA1, 0xA6, 0xAC, 0xA2, 0xA3, 0xAF, 0xA0, 0xA6, 0xB0, 0xA1, 0xA6, 0xAE, 0xA4, 
   0xA7, 0xAE, 0xA2, 0xA9, 0xB1, 0xAF, 0xB7, 0xBF, 0xA6, 0xAB, 0xB3, 0x97, 0xA0, 0x9E, 0x9B, 0xA6, 
   0xA6, 0xA5, 0xAC, 0xAE, 0xA5, 0xA9, 0xAA, 0xA4, 0xA8, 0xAD, 0x9E, 0xA4, 0xAC, 0x9D, 0xA6, 0xAA, 
   0x9D, 0xA8, 0xAA, 0x99, 0xA3, 0xAA, 0x8C, 0x98, 0xA2, 0x94, 0x9A, 0xA5, 0x7B, 0x7C, 0x85, 0x2B, 
   0x2D, 0x34, 0x1D, 0x23, 0x2C, 0x48, 0x51, 0x60, 0x5B, 0x65, 0x79, 0x5A, 0x65, 0x7F, 0x57, 0x64, 
   0x7E, 0x54, 0x61, 0x7A, 0x51, 0x5A, 0x74, 0x54, 0x5F, 0x7B, 0x6A, 0x77, 0x8D, 0x69, 0x71, 0x88, 
   0x5E, 0x62, 0x7E, 0x5B, 0x63, 0x7B, 0x6F, 0x76, 0x8B, 0x75, 0x7A, 0x8C, 0x8B, 0x8F, 0x9D, 0xA4, 
   0xA4, 0xAC, 0x93, 0x8F, 0x95, 0x8F, 0x8D, 0x91, 0x8E, 0x8C, 0x91, 0x90, 0x8E, 0x94, 0x8F, 0x91, 
   0x94, 0x96, 0x98, 0x99, 0x95, 0x97, 0x9B, 0x95, 0x96, 0xA0, 0x9A, 0x9A, 0xA6, 0x75, 0x73, 0x7F, 
   0x53, 0x50, 0x5A, 0x62, 0x61, 0x69, 0x64, 0x62, 0x6A, 0x5D, 0x5A, 0x5D, 0x5A, 0x58, 0x5C, 0x54, 
   0x53, 0x5B, 0x56, 0x59, 0x5C, 0x60, 0x61, 0x60, 0x63, 0x5F, 0x5F, 0x69, 0x66, 0x67, 0x6F, 0x71, 
   0x6E, 0x73, 0x73, 0x71, 0x74, 0x74, 0x76, 0x72, 0x74, 0x75, 0x70, 0x74, 0x73, 0x6D, 0x73, 0x6F, 
   0x6E, 0x6D, 0x6C, 0x60, 0x5C, 0x5F, 0x4A, 0x46, 0x4D, 0x8E, 0x8E, 0x93, 0x9F, 0x93, 0x9A, 0x9A, 
   0x92, 0x99, 0x93, 0x89, 0x96, 0x81, 0x77, 0x86, 0x8B, 0x81, 0x90, 0x95, 0x8B, 0x97, 0x9A, 0x92, 
   0x9A, 0xA1, 0x99, 0xA0, 0xA6, 0xA0, 0xA8, 0xA4, 0x9E, 0x9E, 0xA2, 0x9E, 0xA2, 0xA3, 0x9B, 0xA2, 
   0x93, 0x8C, 0x91, 0x8F, 0x8A, 0x90, 0x9D, 0x95, 0xA0, 0x8E, 0x87, 0x94, 0x6E, 0x67, 0x75, 0x7A, 
   0x75, 0x7E, 0x85, 0x82, 0x8A, 0x80, 0x7D, 0x89, 0x73, 0x70, 0x7B, 0x66, 0x6D, 0x74, 0x7D, 0x8C, 
   0x95, 0x81, 0x8D, 0x96, 0x73, 0x80, 0x8F, 0x7A, 0x83, 0x96, 0x6E, 0x6F, 0x81, 0x5F, 0x65, 0x73, 
   0x62, 0x69, 0x77, 0x52, 0x59, 0x65, 0x53, 0x5D, 0x62, 0x73, 0x7F, 0x85, 0x8D, 0x95, 0x9A, 0x9B, 
   0x9C, 0xA9, 0x87, 0x85, 0x9E, 0x92, 0x95, 0xAA, 0x5F, 0x5C, 0x6D, 0x16, 0x18, 0x1D, 0x48, 0x54, 
   0x4D, 0x68, 0x6F, 0x70, 0x6E, 0x72, 0x7B, 0x6E, 0x72, 0x7D, 0x6C, 0x6F, 0x7B, 0x73, 0x7B, 0x80, 
   0x9A, 0x9F, 0xA2, 0x8B, 0x82, 0x94, 0x64, 0x59, 0x6B, 0x45, 0x3D, 0x4B, 0x3C, 0x38, 0x42, 0x48, 
   0x45, 0x4D, 0x51, 0x51, 0x59, 0x4B, 0x47, 0x4F, 0x43, 0x41, 0x49, 0x43, 0x42, 0x47, 0x39, 0x36, 
   0x3C, 0x21, 0x1C, 0x1D, 0x3B, 0x45, 0x47, 0x59, 0x61, 0x68, 0x65, 0x6A, 0x74, 0x71, 0x79, 0x81, 
   0x65, 0x6F, 0x7A, 0x63, 0x6C, 0x75, 0x70, 0x79, 0x7D, 0x7C, 0x81, 0x88, 0x6D, 0x6F, 0x78, 0x6B, 
   0x69, 0x70, 0x71, 0x71, 0x76, 0x87, 0x8E, 0x93, 0x90, 0x8D, 0x96, 0x79, 0x72, 0x80, 0x64, 0x5F, 
   0x6D, 0x5F, 0x5D, 0x67, 0x65, 0x63, 0x6B, 0x67, 0x66, 0x6C, 0x66, 0x67, 0x6D, 0x67, 0x66, 0x6C, 
   0x63, 0x60, 0x69, 0x60, 0x5F, 0x62, 0x80, 0x88, 0x8C, 0x97, 0x9A, 0xAE, 0x5C, 0x56, 0x6F, 0x36, 
   0x32, 0x3F, 0x2D, 0x2A, 0x2F, 0x18, 0x18, 0x16, 0x31, 0x38, 0x32, 0x84, 0x88, 0x82, 0x94, 0x8F, 
   0x8A, 0x9B, 0x94, 0x93, 0xA9, 0x9A, 0x9F, 0x94, 0x79, 0x80, 0x76, 0x62, 0x65, 0x69, 0x54, 0x59, 
   0x5B, 0x4C, 0x50, 0x52, 0x45, 0x49, 0x43, 0x3A, 0x3E, 0x38, 0x34, 0x36, 0x39, 0x36, 0x39, 0x3D, 
   0x40, 0x43, 0x4C, 0x53, 0x55, 0x4B, 0x4E, 0x52, 0x4E, 0x4C, 0x54, 0x72, 0x75, 0x7E, 0x87, 0x8E, 
   0x98, 0x82, 0x8A, 0x92, 0x86, 0x8F, 0x96, 0x92, 0x97, 0x9E, 0x9B, 0x9E, 0xA5, 0xA7, 0xA2, 0xAF, 
   0x8C, 0x82, 0x99, 0x68, 0x64, 0x7F, 0x5B, 0x61, 0x7A, 0x5E, 0x65, 0x7B, 0x5D, 0x5F, 0x6C, 0x61, 
   0x62, 0x69, 0x70, 0x75, 0x7A, 0x72, 0x74, 0x76, 0x78, 0x77, 0x7B, 0x7F, 0x7F, 0x85, 0x91, 0x92, 
   0xA0, 0x54, 0x45, 0x5A, 0x36, 0x2E, 0x3A, 0x42, 0x46, 0x48, 0x4B, 0x4F, 0x50, 0x51, 0x52, 0x57, 
   0x56, 0x55, 0x5C, 0x59, 0x59, 0x60, 0x87, 0x88, 0x8D, 0x8C, 0x8F, 0x91, 0x93, 0x92, 0x94, 0x9C, 
   0x96, 0x9A, 0x9C, 0x9B, 0xA2, 0x9A, 0x9E, 0xB0, 0x78, 0x83, 0xA1, 0x74, 0x7C, 0xA0, 0x74, 0x80, 
   0xA2, 0x76, 0x7F, 0x9B, 0x90, 0x9C, 0xAD, 0xB7, 0xC6, 0xCB, 0xB3, 0xBD, 0xC2, 0x87, 0x91, 0x9D, 
   0x8E, 0x99, 0xAC, 0x85, 0x8B, 0xA5, 0x94, 0x97, 0xA3, 0xC9, 0xC5, 0xC2, 0xB2, 0xAF, 0xAF, 0x7E, 
   0x86, 0x8B, 0x7A, 0x7B, 0x85, 0x57, 0x4E, 0x59, 0x3B, 0x36, 0x3F, 0x36, 0x34, 0x3A, 0x34, 0x32, 
   0x34, 0x33, 0x33, 0x33, 0x25, 0x28, 0x2B, 0x1F, 0x22, 0x28, 0x26, 0x24, 0x29, 0x18, 0x15, 0x17, 
   0x2A, 0x31, 0x35, 0x4A, 0x57, 0x5B, 0x61, 0x6E, 0x6F, 0x88, 0x8D, 0x90, 0xAA, 0xA7, 0xAD, 0xA5, 
   0xA5, 0xA8, 0x99, 0x9B, 0x9E, 0x9B, 0x9C, 0x9F, 0x9A, 0x9B, 0xA0, 0x97, 0x98, 0x9E, 0xA4, 0xA4, 
   0xAA, 0xA7, 0xA4, 0xAA, 0xA5, 0xA6, 0xA9, 0xA5, 0xA4, 0xA8, 0x9B, 0x9A, 0x9E, 0x92, 0x90, 0x96, 
   0x8E, 0x93, 0x9A, 0x9E, 0xA2, 0xAD, 0x99, 0x9B, 0xA7, 0x95, 0x98, 0xA2, 0x94, 0x93, 0x9E, 0x8D, 
   0x84, 0x8E, 0x71, 0x68, 0x71, 0x67, 0x67, 0x6C, 0x63, 0x64, 0x67, 0x69, 0x6C, 0x70, 0x78, 0x7D, 
   0x83, 0x85, 0x8B, 0x91, 0x89, 0x93, 0x94, 0x8A, 0x91, 0x92, 0x93, 0x97, 0x98, 0x92, 0x9A, 0x9C, 
   0x97, 0xA3, 0xA9, 0x99, 0xA5, 0xAC, 0x97, 0x9F, 0xA6, 0x99, 0xA2, 0xA6, 0x97, 0xA0, 0xA5, 0x96, 
   0x9F, 0xA4, 0x94, 0x9E, 0xA2, 0x96, 0xA1, 0xA4, 0x97, 0xA1, 0xA3, 0x93, 0x9C, 0x97, 0x92, 0x9C, 
   0x98, 0x95, 0x9B, 0x9B, 0x95, 0x99, 0x99, 0x97, 0x9A, 0xA1, 0x9C, 0x9F, 0xA7, 0x94, 0x97, 0x9B, 
   0x8A, 0x8D, 0x92, 0x8C, 0x91, 0x97, 0xA0, 0xA8, 0xB2, 0x97, 0x9B, 0xA5, 0x64, 0x61, 0x6C, 0x57, 
   0x54, 0x5C, 0x68, 0x6A, 0x73, 0x5A, 0x63, 0x72, 0x48, 0x56, 0x6C, 0x57, 0x66, 0x7E, 0x55, 0x65, 
   0x7C, 0x50, 0x61, 0x78, 0x51, 0x60, 0x79, 0x56, 0x62, 0x7C, 0x75, 0x81, 0x96, 0x68, 0x72, 0x8B, 
   0x52, 0x5A, 0x75, 0x53, 0x5B, 0x74, 0x61, 0x68, 0x7B, 0x73, 0x76, 0x84, 0xA9, 0xAA, 0xB3, 0xAC, 
   0xAB, 0xB0, 0x90, 0x8E, 0x90, 0x90, 0x91, 0x92, 0x90, 0x90, 0x95, 0x8D, 0x8A, 0x91, 0x8E, 0x8C, 
   0x93, 0x91, 0x90, 0x98, 0x90, 0x94, 0x9C, 0x90, 0x95, 0x9F, 0x97, 0x99, 0xA5, 0x94, 0x94, 0xA0, 
   0x5F, 0x5F, 0x68, 0x58, 0x59, 0x61, 0x65, 0x62, 0x68, 0x60, 0x5F, 0x61, 0x60, 0x60, 0x64, 0x59, 
   0x5A, 0x61, 0x55, 0x57, 0x59, 0x5F, 0x5E, 0x62, 0x63, 0x5D, 0x61, 0x6A, 0x68, 0x66, 0x70, 0x77, 
   0x75, 0x69, 0x6D, 0x6D, 0x66, 0x63, 0x66, 0x63, 0x5F, 0x63, 0x68, 0x68, 0x68, 0x6F, 0x75, 0x70, 
   0x71, 0x6F, 0x6E, 0x6F, 0x69, 0x6C, 0x4A, 0x49, 0x4F, 0x83, 0x86, 0x8B, 0x9B, 0x92, 0x96, 0x96, 
   0x8E, 0x93, 0x96, 0x8E, 0x95, 0x88, 0x7E, 0x88, 0x84, 0x7F, 0x8B, 0x83, 0x80, 0x8E, 0x82, 0x7C, 
   0x8C, 0x8C, 0x87, 0x93, 0x9B, 0x93, 0x9C, 0xA6, 0x9E, 0x9E, 0x9E, 0x94, 0x9D, 0x95, 0x8B, 0x94, 
   0x98, 0x92, 0x96, 0x9D, 0x95, 0x9A, 0x90, 0x82, 0x8D, 0x65, 0x58, 0x67, 0x53, 0x4E, 0x61, 0x6F, 
   0x6D, 0x79, 0x80, 0x7F, 0x8C, 0x73, 0x70, 0x7E, 0x6F, 0x6B, 0x79, 0x77, 0x7B, 0x87, 0x78, 0x84, 
   0x8D, 0x87, 0x96, 0x9E, 0x86, 0x95, 0xA0, 0x80, 0x8B, 0x99, 0x79, 0x80, 0x8D, 0x63, 0x6D, 0x76, 
   0x58, 0x5D, 0x67, 0x4E, 0x52, 0x5E, 0x47, 0x4E, 0x59, 0x63, 0x6C, 0x78, 0x83, 0x8D, 0x93, 0xA0, 
   0xA1, 0xA8, 0x99, 0x98, 0xAB, 0x82, 0x8D, 0xA0, 0x80, 0x87, 0xA1, 0x2F, 0x32, 0x44, 0x44, 0x52, 
   0x53, 0x66, 0x6E, 0x72, 0x67, 0x6D, 0x75, 0x6E, 0x73, 0x7C, 0x6D, 0x71, 0x7B, 0x6D, 0x73, 0x7C, 
   0x97, 0x9D, 0xA1, 0xAA, 0xAA, 0xB8, 0xAE, 0xAA, 0xB9, 0xA5, 0x9B, 0xA7, 0x87, 0x7D, 0x87, 0x60, 
   0x58, 0x65, 0x28, 0x25, 0x2C, 0x28, 0x27, 0x2A, 0x26, 0x25, 0x2A, 0x24, 0x21, 0x24, 0x25, 0x22, 
   0x26, 0x1E, 0x1C, 0x1B, 0x3D, 0x48, 0x46, 0x5F, 0x67, 0x6D, 0x5D, 0x65, 0x6C, 0x61, 0x68, 0x6E, 
   0x60, 0x68, 0x6F, 0x6E, 0x78, 0x7C, 0x78, 0x7F, 0x81, 0x6E, 0x70, 0x76, 0x62, 0x61, 0x6E, 0x64, 
   0x62, 0x6B, 0x6E, 0x73, 0x77, 0x88, 0x92, 0x93, 0x8C, 0x88, 0x8E, 0x7B, 0x76, 0x7F, 0x6D, 0x6A, 
   0x71, 0x67, 0x63, 0x69, 0x60, 0x5B, 0x64, 0x62, 0x5F, 0x6A, 0x5F, 0x62, 0x6C, 0x5D, 0x5F, 0x68, 
   0x68, 0x68, 0x6F, 0x6C, 0x6B, 0x70, 0x70, 0x74, 0x7A, 0x85, 0x8A, 0x9A, 0x6D, 0x6E, 0x83, 0x4F, 
   0x4C, 0x5E, 0x37, 0x31, 0x41, 0x24, 0x22, 0x2C, 0x17, 0x1C, 0x1A, 0x3A, 0x43, 0x3B, 0x82, 0x81, 
   0x78, 0x9C, 0x94, 0x91, 0xA4, 0x9A, 0x9E, 0xA3, 0x90, 0x98, 0x8B, 0x71, 0x77, 0x6C, 0x56, 0x5F, 
   0x52, 0x44, 0x4C, 0x44, 0x3C, 0x41, 0x3D, 0x35, 0x39, 0x32, 0x2F, 0x33, 0x2A, 0x30, 0x36, 0x39, 
   0x3F, 0x45, 0x4F, 0x57, 0x5B, 0x6A, 0x6A, 0x72, 0x85, 0x84, 0x8F, 0x8F, 0x8F, 0x9B, 0x8B, 0x92, 
   0x9D, 0x8C, 0x94, 0x9F, 0x92, 0x94, 0xA0, 0x93, 0x8F, 0x9C, 0x94, 0x91, 0x9A, 0xB0, 0xAE, 0xB4, 
   0x8F, 0x88, 0x98, 0x86, 0x7F, 0x93, 0x73, 0x75, 0x8F, 0x5C, 0x62, 0x80, 0x59, 0x5D, 0x73, 0x55, 
   0x59, 0x63, 0x6D, 0x77, 0x79, 0x7E, 0x83, 0x82, 0x80, 0x7D, 0x82, 0x81, 0x7F, 0x87, 0x88, 0x82, 
   0x8F, 0x4B, 0x3D, 0x4C, 0x40, 0x3D, 0x44, 0x49, 0x49, 0x4B, 0x4D, 0x4A, 0x4F, 0x56, 0x52, 0x59, 
   0x5E, 0x5A, 0x61, 0x60, 0x63, 0x6A, 0x77, 0x7D, 0x8D, 0x7F, 0x86, 0x8E, 0x8F, 0x92, 0x94, 0x9F, 
   0x9C, 0x9D, 0x98, 0x98, 0xA1, 0x84, 0x8C, 0xA2, 0x78, 0x80, 0x9F, 0x77, 0x79, 0x9E, 0x75, 0x7C, 
   0x9F, 0x79, 0x7E, 0x9B, 0x7F, 0x87, 0x9D, 0x95, 0xA1, 0xB0, 0xAF, 0xB9, 0xC3, 0xB3, 0xBC, 0xC2, 
   0xAD, 0xB6, 0xBF, 0x94, 0x9A, 0xAC, 0x8F, 0x96, 0x9E, 0xC7, 0xCA, 0xC5, 0xAE, 0xB1, 0xAF, 0x7A, 
   0x82, 0x86, 0x70, 0x75, 0x79, 0x4B, 0x4A, 0x4F, 0x32, 0x31, 0x36, 0x38, 0x31, 0x37, 0x40, 0x3E, 
   0x41, 0x4C, 0x4C, 0x51, 0x53, 0x55, 0x60, 0x4E, 0x50, 0x60, 0x51, 0x50, 0x5C, 0x52, 0x52, 0x58, 
   0x50, 0x52, 0x5C, 0x4D, 0x53, 0x5C, 0x54, 0x5C, 0x63, 0x7F, 0x86, 0x8C, 0x9B, 0x9E, 0xA4, 0x9E, 
   0x9E, 0xA1, 0x9A, 0x99, 0x9C, 0x98, 0x99, 0x9D, 0x99, 0x9D, 0xA1, 0x98, 0x9C, 0xA2, 0x9F, 0xA0, 
   0xA7, 0xA1, 0xA0, 0xA5, 0xA2, 0xA2, 0xA6, 0xA6, 0xA6, 0xAB, 0x9B, 0x9C, 0xA3, 0x74, 0x74, 0x7B, 
   0x7F, 0x86, 0x8B, 0x93, 0x98, 0x9F, 0x91, 0x93, 0x9D, 0x94, 0x97, 0xA4, 0x9C, 0x9D, 0xA9, 0x95, 
   0x92, 0x9C, 0x7C, 0x77, 0x7F, 0x6C, 0x6B, 0x71, 0x65, 0x65, 0x69, 0x63, 0x68, 0x6C, 0x6B, 0x6F, 
   0x75, 0x6C, 0x6E, 0x72, 0x6C, 0x76, 0x74, 0x77, 0x81, 0x80, 0x6E, 0x75, 0x77, 0x67, 0x75, 0x7A, 
   0x75, 0x87, 0x94, 0x6C, 0x7C, 0x8C, 0x50, 0x5D, 0x61, 0x4B, 0x52, 0x55, 0x48, 0x50, 0x55, 0x37, 
   0x41, 0x47, 0x30, 0x34, 0x38, 0x3B, 0x3E, 0x3D, 0x3F, 0x49, 0x44, 0x45, 0x4F, 0x4D, 0x65, 0x70, 
   0x6D, 0x7F, 0x87, 0x86, 0x89, 0x8F, 0x90, 0x9E, 0xA2, 0xA9, 0x9A, 0x9D, 0xA4, 0x84, 0x86, 0x8A, 
   0x80, 0x7F, 0x87, 0x9B, 0x9C, 0xA4, 0xA5, 0xA8, 0xAF, 0x81, 0x80, 0x87, 0x88, 0x82, 0x87, 0x8C, 
   0x86, 0x88, 0x77, 0x77, 0x7E, 0x51, 0x5A, 0x69, 0x44, 0x52, 0x66, 0x53, 0x63, 0x7A, 0x55, 0x64, 
   0x7C, 0x54, 0x65, 0x7D, 0x54, 0x63, 0x7F, 0x55, 0x62, 0x7B, 0x5E, 0x6D, 0x81, 0x5A, 0x69, 0x80, 
   0x49, 0x55, 0x6E, 0x43, 0x4F, 0x64, 0x58, 0x62, 0x74, 0x89, 0x8D, 0x9A, 0xBF, 0xBD, 0xC5, 0x9F, 
   0x9B, 0x9F, 0x90, 0x8D, 0x91, 0x93, 0x93, 0x99, 0x95, 0x93, 0x9C, 0x90, 0x8B, 0x94, 0x90, 0x8A, 
   0x93, 0x8D, 0x8A, 0x96, 0x90, 0x90, 0x9D, 0x94, 0x98, 0xA4, 0x96, 0x9A, 0xA6, 0x9D, 0x9F, 0xA9, 
   0x99, 0x98, 0xA0, 0x6C, 0x69, 0x71, 0x5D, 0x60, 0x65, 0x5B, 0x60, 0x65, 0x58, 0x5D, 0x64, 0x57, 
   0x5A, 0x60, 0x51, 0x50, 0x55, 0x54, 0x50, 0x54, 0x54, 0x51, 0x52, 0x58, 0x5A, 0x57, 0x5C, 0x61, 
   0x60, 0x5F, 0x61, 0x5E, 0x66, 0x66, 0x63, 0x6C, 0x69, 0x6B, 0x74, 0x71, 0x72, 0x74, 0x76, 0x75, 
   0x76, 0x74, 0x76, 0x71, 0x6B, 0x6F, 0x3A, 0x3C, 0x3F, 0x68, 0x70, 0x70, 0x99, 0x93, 0x97, 0x95, 
   0x8C, 0x94, 0x95, 0x8D, 0x93, 0x93, 0x8A, 0x90, 0x88, 0x87, 0x90, 0x81, 0x80, 0x8F, 0x7F, 0x78, 
   0x88, 0x86, 0x80, 0x8A, 0x96, 0x8B, 0x8F, 0xA3, 0x9B, 0x9E, 0xA3, 0x99, 0x9F, 0xA3, 0x96, 0x9B, 
   0x9C, 0x92, 0x95, 0xA2, 0x96, 0x9F, 0x80, 0x72, 0x81, 0x57, 0x50, 0x61, 0x59, 0x55, 0x67, 0x66, 
   0x67, 0x76, 0x6E, 0x6F, 0x80, 0x65, 0x62, 0x74, 0x6D, 0x69, 0x7B, 0x72, 0x73, 0x84, 0x6F, 0x77, 
   0x83, 0x72, 0x7D, 0x87, 0x78, 0x83, 0x8B, 0x7B, 0x84, 0x8C, 0x6F, 0x77, 0x80, 0x65, 0x6F, 0x77, 
   0x60, 0x66, 0x6F, 0x5B, 0x60, 0x6F, 0x50, 0x5C, 0x69, 0x5C, 0x67, 0x73, 0x7D, 0x86, 0x8F, 0x96, 
   0x9D, 0xA0, 0xA1, 0xA6, 0xAF, 0x8C, 0x93, 0xA4, 0x85, 0x8E, 0xA6, 0x48, 0x50, 0x63, 0x3A, 0x44, 
   0x4A, 0x5E, 0x68, 0x6D, 0x5B, 0x63, 0x66, 0x66, 0x6D, 0x6D, 0x7F, 0x89, 0x8D, 0x90, 0x9B, 0x9F, 
   0xA4, 0xAC, 0xB1, 0xA9, 0xAF, 0xBB, 0xA5, 0xAC, 0xB8, 0xAC, 0xAE, 0xBC, 0x9F, 0x9F, 0xAD, 0x7D, 
   0x7F, 0x90, 0x54, 0x57, 0x63, 0x4B, 0x4D, 0x58, 0x44, 0x42, 0x4E, 0x39, 0x32, 0x3A, 0x25, 0x22, 
   0x27, 0x18, 0x18, 0x16, 0x3C, 0x46, 0x42, 0x58, 0x62, 0x6A, 0x55, 0x5F, 0x67, 0x5A, 0x61, 0x6A, 
   0x5F, 0x66, 0x6D, 0x69, 0x74, 0x77, 0x6B, 0x72, 0x74, 0x6A, 0x6B, 0x6D, 0x65, 0x67, 0x6C, 0x65, 
   0x69, 0x6E, 0x75, 0x78, 0x7F, 0x86, 0x8C, 0x92, 0x79, 0x79, 0x7F, 0x78, 0x77, 0x7C, 0x72, 0x71, 
   0x77, 0x6A, 0x68, 0x70, 0x60, 0x5E, 0x66, 0x6B, 0x69, 0x71, 0x72, 0x71, 0x78, 0x70, 0x6F, 0x77, 
   0x75, 0x72, 0x7D, 0x71, 0x6C, 0x76, 0x73, 0x73, 0x78, 0x7F, 0x85, 0x8D, 0x7C, 0x81, 0x91, 0x75, 
   0x72, 0x88, 0x5B, 0x52, 0x69, 0x3C, 0x3B, 0x48, 0x3C, 0x3B, 0x40, 0x26, 0x28, 0x28, 0x52, 0x51, 
   0x4D, 0x83, 0x7E, 0x79, 0x94, 0x8C, 0x8A, 0x99, 0x89, 0x8B, 0x8C, 0x77, 0x7C, 0x83, 0x6E, 0x75, 
   0x5C, 0x4C, 0x51, 0x55, 0x4F, 0x54, 0x4E, 0x49, 0x50, 0x3D, 0x3B, 0x44, 0x4B, 0x53, 0x5C, 0x76, 
   0x80, 0x88, 0xA2, 0xA6, 0xAC, 0xAD, 0xAA, 0xB3, 0xB2, 0xB1, 0xBC, 0xA5, 0xA5, 0xB0, 0x8B, 0x90, 
   0x9B, 0x89, 0x8E, 0x98, 0x90, 0x8E, 0x98, 0x91, 0x8D, 0x9B, 0x8E, 0x8F, 0x9A, 0xA3, 0xAA, 0xAC, 
   0xA1, 0x9D, 0xA8, 0x8A, 0x82, 0x92, 0x7E, 0x7D, 0x94, 0x5F, 0x67, 0x87, 0x56, 0x5E, 0x79, 0x3B, 
   0x3F, 0x50, 0x45, 0x4D, 0x52, 0x5E, 0x65, 0x66, 0x68, 0x69, 0x70, 0x70, 0x71, 0x7B, 0x68, 0x61, 
   0x6D, 0x44, 0x39, 0x43, 0x42, 0x44, 0x47, 0x49, 0x49, 0x4D, 0x4D, 0x4B, 0x52, 0x4E, 0x4C, 0x55, 
   0x51, 0x4F, 0x57, 0x54, 0x5A, 0x60, 0x78, 0x81, 0x95, 0x7B, 0x82, 0x93, 0x8B, 0x8F, 0x98, 0x9E, 
   0x9D, 0xA0, 0x9C, 0x9A, 0x9F, 0x97, 0x96, 0xA2, 0x8B, 0x8B, 0x9B, 0x7E, 0x7B, 0x95, 0x77, 0x7B, 
   0x99, 0x75, 0x79, 0x99, 0x73, 0x79, 0x9A, 0x71, 0x7B, 0x96, 0x85, 0x8E, 0xA0, 0xB0, 0xB8, 0xBF, 
   0xC6, 0xCD, 0xD1, 0xB5, 0xBC, 0xC5, 0x97, 0x9B, 0xA3, 0xB9, 0xBF, 0xC0, 0x91, 0x98, 0x9B, 0x6B, 
   0x72, 0x79, 0x49, 0x50, 0x52, 0x28, 0x2B, 0x2D, 0x2D, 0x2D, 0x30, 0x60, 0x5A, 0x5D, 0x81, 0x84, 
   0x84, 0x87, 0x8B, 0x8E, 0x94, 0x9A, 0xA2, 0x8F, 0x93, 0xA0, 0x86, 0x88, 0x93, 0x8F, 0x97, 0x9D, 
   0x99, 0x9D, 0xA5, 0x97, 0x98, 0x9D, 0x6B, 0x6A, 0x70, 0x68, 0x6C, 0x70, 0x8D, 0x94, 0x96, 0x94, 
   0x95, 0x99, 0x96, 0x94, 0x99, 0x91, 0x93, 0x98, 0x91, 0x97, 0x9C, 0x93, 0x99, 0xA0, 0x9A, 0x9C, 
   0xA3, 0x9C, 0x9B, 0xA1, 0xA5, 0xA2, 0xA7, 0xA8, 0xA6, 0xAC, 0x9F, 0xA1, 0xA8, 0x6B, 0x6A, 0x74, 
   0x71, 0x77, 0x80, 0x8F, 0x94, 0x9D, 0x9A, 0x9C, 0xA6, 0x9E, 0xA0, 0xAD, 0x9A, 0x9D, 0xA8, 0x93, 
   0x96, 0x9E, 0x7D, 0x7F, 0x85, 0x70, 0x70, 0x76, 0x60, 0x60, 0x67, 0x4A, 0x50, 0x55, 0x49, 0x4A, 
   0x4F, 0x46, 0x41, 0x48, 0x37, 0x38, 0x3B, 0x38, 0x3B, 0x3D, 0x33, 0x35, 0x37, 0x36, 0x3F, 0x40, 
   0x47, 0x52, 0x59, 0x43, 0x4A, 0x54, 0x32, 0x39, 0x40, 0x35, 0x39, 0x3F, 0x3C, 0x40, 0x45, 0x37, 
   0x3B, 0x40, 0x2E, 0x2F, 0x34, 0x29, 0x2B, 0x2B, 0x22, 0x2A, 0x22, 0x26, 0x2F, 0x2D, 0x4D, 0x58, 
   0x56, 0x75, 0x7E, 0x7E, 0x7F, 0x88, 0x89, 0x8C, 0x94, 0x9B, 0x93, 0x9A, 0xA2, 0x9B, 0x9E, 0xA3, 
   0xB4, 0xB5, 0xBA, 0xC2, 0xC4, 0xCA, 0x99, 0x9C, 0xA1, 0x90, 0x92, 0x94, 0x98, 0x98, 0x99, 0x7C, 
   0x80, 0x7F, 0x63, 0x68, 0x71, 0x4C, 0x55, 0x67, 0x41, 0x4F, 0x63, 0x4E, 0x5B, 0x72, 0x59, 0x65, 
   0x7D, 0x5F, 0x6B, 0x84, 0x63, 0x6C, 0x87, 0x53, 0x5D, 0x76, 0x5F, 0x6D, 0x82, 0x5F, 0x6A, 0x7F, 
   0x4B, 0x53, 0x69, 0x41, 0x4B, 0x5E, 0x62, 0x6D, 0x7D, 0xAB, 0xB3, 0xBC, 0xA9, 0xA8, 0xAD, 0x8C, 
   0x87, 0x8C, 0x8F, 0x8B, 0x93, 0x92, 0x92, 0x9C, 0x92, 0x91, 0x9E, 0x8F, 0x8B, 0x95, 0x91, 0x8E, 
   0x95, 0x8D, 0x8F, 0x99, 0x90, 0x90, 0x9A, 0x96, 0x98, 0xA1, 0x98, 0x9C, 0xA4, 0x96, 0x9B, 0xA1, 
   0xA3, 0xA2, 0xA6, 0x97, 0x92, 0x97, 0x6D, 0x6F, 0x74, 0x62, 0x62, 0x6B, 0x60, 0x60, 0x68, 0x5B, 
   0x5A, 0x61, 0x5A, 0x58, 0x60, 0x5B, 0x58, 0x5C, 0x5D, 0x5C, 0x5B, 0x52, 0x54, 0x55, 0x53, 0x53, 
   0x55, 0x5C, 0x5A, 0x57, 0x60, 0x63, 0x5D, 0x63, 0x68, 0x64, 0x68, 0x6A, 0x68, 0x6A, 0x6C, 0x6C, 
   0x6D, 0x6A, 0x6E, 0x65, 0x60, 0x64, 0x35, 0x35, 0x38, 0x58, 0x60, 0x5F, 0x94, 0x90, 0x93, 0x95, 
   0x8E, 0x96, 0x95, 0x8F, 0x95, 0x93, 0x8C, 0x94, 0x8C, 0x89, 0x92, 0x83, 0x7E, 0x8C, 0x84, 0x7B, 
   0x88, 0x8F, 0x84, 0x8D, 0x96, 0x87, 0x8B, 0xA0, 0x97, 0x9B, 0xA2, 0x99, 0x9B, 0xA2, 0x97, 0x96, 
   0xA1, 0x98, 0x9B, 0x9A, 0x8F, 0x9C, 0x71, 0x66, 0x7A, 0x5D, 0x59, 0x6B, 0x5F, 0x5A, 0x67, 0x5E, 
   0x5F, 0x6B, 0x5D, 0x5C, 0x6D, 0x61, 0x5C, 0x6F, 0x66, 0x60, 0x75, 0x6F, 0x6E, 0x80, 0x7B, 0x7F, 
   0x8C, 0x6C, 0x71, 0x80, 0x68, 0x6F, 0x79, 0x69, 0x6F, 0x7B, 0x66, 0x70, 0x7E, 0x66, 0x73, 0x7F, 
   0x6E, 0x76, 0x84, 0x70, 0x76, 0x86, 0x6D, 0x79, 0x87, 0x68, 0x74, 0x81, 0x7B, 0x84, 0x8E, 0x8E, 
   0x97, 0x9A, 0xA2, 0xAC, 0xB3, 0x9D, 0xA8, 0xB4, 0x78, 0x84, 0x90, 0x51, 0x5B, 0x65, 0x33, 0x35, 
   0x3B, 0x3B, 0x42, 0x46, 0x2D, 0x36, 0x35, 0x37, 0x45, 0x44, 0x5D, 0x6E, 0x75, 0x75, 0x89, 0x8B, 
   0x77, 0x84, 0x8D, 0x77, 0x81, 0x91, 0x7B, 0x8A, 0x96, 0x83, 0x92, 0xA2, 0x7A, 0x85, 0x95, 0x7A, 
   0x84, 0x94, 0x70, 0x73, 0x8B, 0x5A, 0x60, 0x75, 0x70, 0x6F, 0x85, 0x78, 0x70, 0x80, 0x3C, 0x35, 
   0x3F, 0x12, 0x12, 0x12, 0x35, 0x41, 0x3D, 0x4F, 0x59, 0x5F, 0x53, 0x5B, 0x63, 0x5A, 0x5D, 0x68, 
   0x62, 0x64, 0x6F, 0x67, 0x6B, 0x74, 0x65, 0x67, 0x70, 0x63, 0x62, 0x69, 0x63, 0x68, 0x6F, 0x75, 
   0x7A, 0x82, 0x7F, 0x7E, 0x88, 0x73, 0x74, 0x7C, 0x74, 0x77, 0x7D, 0x92, 0x97, 0x98, 0x91, 0x91, 
   0x93, 0x85, 0x82, 0x88, 0x86, 0x85, 0x8E, 0x7A, 0x76, 0x80, 0x73, 0x70, 0x77, 0x72, 0x71, 0x78, 
   0x72, 0x76, 0x7E, 0x76, 0x77, 0x7E, 0x87, 0x87, 0x8B, 0x87, 0x8C, 0x93, 0x80, 0x87, 0x95, 0x85, 
   0x87, 0x98, 0x83, 0x81, 0x94, 0x6B, 0x6E, 0x7C, 0x59, 0x5A, 0x62, 0x50, 0x4A, 0x54, 0x3A, 0x34, 
   0x3C, 0x3E, 0x3E, 0x3E, 0x67, 0x66, 0x60, 0x76, 0x6C, 0x67, 0x74, 0x6C, 0x69, 0x93, 0x83, 0x83, 
   0x76, 0x68, 0x6B, 0x78, 0x73, 0x79, 0x77, 0x74, 0x7E, 0x7C, 0x78, 0x85, 0x8D, 0x91, 0x9F, 0x88, 
   0x94, 0x9F, 0xAC, 0xB1, 0xB6, 0xB1, 0xAE, 0xB7, 0xA2, 0x9F, 0xA9, 0x96, 0x95, 0x9E, 0x8D, 0x91, 
   0x9A, 0x8F, 0x93, 0x9B, 0x91, 0x91, 0x98, 0x8C, 0x8F, 0x9A, 0x82, 0x8C, 0x97, 0x8D, 0x9A, 0x9F, 
   0xA7, 0xA6, 0xAF, 0x8D, 0x81, 0x8F, 0x73, 0x6E, 0x83, 0x5B, 0x64, 0x82, 0x5A, 0x66, 0x84, 0x47, 
   0x4A, 0x62, 0x28, 0x27, 0x31, 0x3E, 0x41, 0x43, 0x51, 0x52, 0x55, 0x56, 0x55, 0x5D, 0x47, 0x46, 
   0x4D, 0x46, 0x41, 0x47, 0x47, 0x48, 0x4B, 0x4A, 0x49, 0x4F, 0x57, 0x5B, 0x63, 0x6B, 0x6F, 0x77, 
   0x78, 0x7B, 0x83, 0x8A, 0x90, 0x96, 0x7E, 0x87, 0x96, 0x80, 0x86, 0x9A, 0x85, 0x88, 0x99, 0x8E, 
   0x90, 0x9C, 0x91, 0x92, 0x99, 0xA8, 0xA3, 0xA7, 0x9D, 0x9A, 0x9D, 0x8C, 0x87, 0x94, 0x76, 0x7A, 
   0x8D, 0x6A, 0x70, 0x8C, 0x6A, 0x6E, 0x92, 0x6A, 0x73, 0x95, 0x79, 0x81, 0x9B, 0x82, 0x88, 0x99, 
   0x9E, 0xA2, 0xAF, 0xB6, 0xBC, 0xC7, 0xA2, 0xA4, 0xB1, 0x8F, 0x91, 0x9B, 0x7A, 0x80, 0x87, 0x68, 
   0x6D, 0x77, 0x34, 0x39, 0x3A, 0x1F, 0x20, 0x21, 0x43, 0x40, 0x44, 0x8B, 0x89, 0x8D, 0xA4, 0xAA, 
   0xAD, 0x8B, 0x90, 0x96, 0x84, 0x8A, 0x95, 0x81, 0x88, 0x95, 0x82, 0x86, 0x93, 0x86, 0x91, 0x9A, 
   0x95, 0xA1, 0xA5, 0xAB, 0xB0, 0xB0, 0x7E, 0x7E, 0x7F, 0x41, 0x45, 0x45, 0x7A, 0x83, 0x81, 0x9F, 
   0xA4, 0xA9, 0x98, 0x99, 0x9F, 0x94, 0x94, 0x9A, 0x91, 0x95, 0x9B, 0x8E, 0x94, 0x9B, 0x8B, 0x8F, 
   0x96, 0x98, 0x97, 0x9F, 0xA7, 0xA6, 0xAC, 0xA8, 0xA7, 0xAC, 0xAA, 0xAA, 0xAF, 0x84, 0x7E, 0x89, 
   0x7C, 0x7D, 0x87, 0xA0, 0xA4, 0xAD, 0xA2, 0xA3, 0xAC, 0xA2, 0xA3, 0xAC, 0xA1, 0x9F, 0xA9, 0x9F, 
   0x9B, 0xA3, 0x8A, 0x89, 0x90, 0x78, 0x78, 0x81, 0x5E, 0x60, 0x68, 0x45, 0x4C, 0x52, 0x48, 0x4E, 
   0x4F, 0x53, 0x4C, 0x4F, 0x4A, 0x45, 0x46, 0x41, 0x3C, 0x3F, 0x39, 0x35, 0x39, 0x3D, 0x3C, 0x40, 
   0x42, 0x43, 0x4B, 0x43, 0x45, 0x4D, 0x46, 0x4B, 0x51, 0x3C, 0x43, 0x4B, 0x3B, 0x41, 0x45, 0x3C, 
   0x3F, 0x44, 0x35, 0x38, 0x42, 0x29, 0x2F, 0x35, 0x28, 0x2D, 0x28, 0x2A, 0x30, 0x2C, 0x31, 0x38, 
   0x37, 0x50, 0x58, 0x58, 0x69, 0x74, 0x73, 0x77, 0x83, 0x86, 0x8B, 0x93, 0x9A, 0x97, 0x9C, 0x9F, 
   0x9B, 0x9E, 0xA2, 0x97, 0x9A, 0xA3, 0x8D, 0x95, 0x9D, 0x96, 0x9E, 0xA3, 0x8F, 0x95, 0x9A, 0x74, 
   0x7C, 0x86, 0x5E, 0x68, 0x7A, 0x52, 0x5F, 0x73, 0x46, 0x58, 0x6A, 0x4A, 0x5B, 0x6F, 0x5A, 0x6A, 
   0x81, 0x5B, 0x6A, 0x83, 0x51, 0x5D, 0x74, 0x46, 0x52, 0x67, 0x5E, 0x6D, 0x81, 0x5B, 0x66, 0x7D, 
   0x50, 0x57, 0x6C, 0x45, 0x4D, 0x5F, 0x6D, 0x76, 0x85, 0xA1, 0xA7, 0xAD, 0x8F, 0x8F, 0x94, 0x93, 
   0x8F, 0x95, 0x97, 0x94, 0x9C, 0x94, 0x95, 0x9F, 0x93, 0x93, 0x9F, 0x93, 0x91, 0x9B, 0x9A, 0x9A, 
   0x9F, 0x91, 0x90, 0x99, 0x91, 0x90, 0x98, 0x97, 0x98, 0x9F, 0x95, 0x99, 0xA0, 0x92, 0x97, 0x9E, 
   0x8D, 0x90, 0x96, 0x93, 0x95, 0x9A, 0x90, 0x8E, 0x95, 0x7E, 0x77, 0x81, 0x6B, 0x64, 0x6D, 0x63, 
   0x5F, 0x67, 0x63, 0x62, 0x6D, 0x60, 0x62, 0x67, 0x6C, 0x70, 0x6F, 0x68, 0x6B, 0x6D, 0x60, 0x61, 
   0x63, 0x50, 0x4D, 0x4F, 0x4E, 0x53, 0x51, 0x53, 0x5B, 0x59, 0x5C, 0x5F, 0x61, 0x5E, 0x5E, 0x5F, 
   0x63, 0x60, 0x63, 0x66, 0x64, 0x69, 0x3F, 0x3C, 0x41, 0x5B, 0x60, 0x62, 0x8F, 0x8D, 0x8F, 0x95, 
   0x92, 0x96, 0x95, 0x90, 0x98, 0x92, 0x8D, 0x96, 0x8D, 0x87, 0x91, 0x89, 0x81, 0x8B, 0x94, 0x8B, 
   0x94, 0x9B, 0x8F, 0x97, 0x97, 0x89, 0x91, 0x9F, 0x94, 0x99, 0x9E, 0x97, 0x9A, 0x9F, 0x96, 0x98, 
   0xA3, 0x9A, 0x9F, 0x97, 0x8D, 0x9D, 0x70, 0x65, 0x79, 0x63, 0x5D, 0x6E, 0x5F, 0x5A, 0x6C, 0x5E, 
   0x5F, 0x71, 0x6A, 0x6A, 0x7B, 0x78, 0x71, 0x84, 0x6C, 0x61, 0x78, 0x70, 0x69, 0x7C, 0x6C, 0x67, 
   0x77, 0x67, 0x67, 0x75, 0x72, 0x78, 0x81, 0x69, 0x6F, 0x7C, 0x5C, 0x67, 0x78, 0x61, 0x6C, 0x7C, 
   0x6D, 0x76, 0x86, 0x6B, 0x73, 0x85, 0x6F, 0x7D, 0x8C, 0x6E, 0x7C, 0x8B, 0x70, 0x7D, 0x8D, 0x80, 
   0x8A, 0x95, 0x86, 0x8D, 0x98, 0x8A, 0x91, 0x9D, 0x6D, 0x79, 0x7F, 0x54, 0x5F, 0x68, 0x2B, 0x2E, 
   0x3A, 0x0C, 0x11, 0x19, 0x20, 0x2D, 0x33, 0x4D, 0x5E, 0x68, 0x65, 0x79, 0x89, 0x69, 0x7C, 0x8C, 
   0x80, 0x8E, 0xA1, 0x8C, 0x96, 0xAA, 0x8A, 0x97, 0xA4, 0x83, 0x90, 0x9F, 0x7F, 0x8A, 0x98, 0x89, 
   0x8E, 0xA0, 0x64, 0x64, 0x7A, 0x57, 0x5E, 0x72, 0x63, 0x67, 0x7B, 0x72, 0x6C, 0x7E, 0x44, 0x3A, 
   0x49, 0x0E, 0x0A, 0x0E, 0x31, 0x3D, 0x3D, 0x4B, 0x58, 0x5A, 0x57, 0x5F, 0x63, 0x5C, 0x60, 0x69, 
   0x5D, 0x60, 0x6B, 0x60, 0x63, 0x70, 0x65, 0x67, 0x76, 0x65, 0x66, 0x72, 0x68, 0x6C, 0x75, 0x7A, 
   0x7E, 0x88, 0x78, 0x79, 0x83, 0x66, 0x6B, 0x73, 0x78, 0x7E, 0x83, 0x98, 0x99, 0x9E, 0x94, 0x91, 
   0x97, 0x93, 0x92, 0x9A, 0x93, 0x92, 0x9D, 0x7E, 0x7B, 0x85, 0x82, 0x81, 0x86, 0x88, 0x88, 0x8D, 
   0x88, 0x88, 0x92, 0x8E, 0x91, 0x98, 0x9B, 0x9D, 0xA2, 0x89, 0x8B, 0x97, 0x7E, 0x84, 0x94, 0x7B, 
   0x82, 0x8E, 0x7B, 0x83, 0x91, 0x7A, 0x81, 0x8E, 0x70, 0x71, 0x78, 0x6E, 0x6E, 0x79, 0x67, 0x63, 
   0x70, 0x3F, 0x39, 0x42, 0x39, 0x38, 0x37, 0x4B, 0x4C, 0x45, 0x5D, 0x57, 0x51, 0x68, 0x64, 0x62, 
   0x76, 0x78, 0x77, 0x87, 0x8A, 0x8E, 0x8D, 0x8E, 0x96, 0x9A, 0x95, 0xA3, 0x89, 0x87, 0x97, 0x76, 
   0x7E, 0x8D, 0x8C, 0x94, 0x9B, 0xA5, 0xA6, 0xAF, 0x9F, 0x9B, 0xA7, 0x8E, 0x8E, 0x99, 0x8B, 0x8F, 
   0x99, 0x8D, 0x91, 0x99, 0x8B, 0x8F, 0x95, 0x87, 0x8C, 0x94, 0x84, 0x8B, 0x96, 0x85, 0x8C, 0x94, 
   0xA4, 0xA5, 0xAC, 0xA4, 0x9C, 0xA6, 0x85, 0x78, 0x8B, 0x61, 0x5F, 0x79, 0x5B, 0x68, 0x86, 0x5A, 
   0x60, 0x7E, 0x36, 0x2F, 0x40, 0x2E, 0x29, 0x2E, 0x36, 0x35, 0x35, 0x3E, 0x3C, 0x3F, 0x42, 0x44, 
   0x49, 0x49, 0x4B, 0x50, 0x47, 0x4C, 0x51, 0x4F, 0x53, 0x5D, 0x7F, 0x87, 0x90, 0xA1, 0xA6, 0xAD, 
   0xA5, 0xA8, 0xAF, 0xAA, 0xAD, 0xB4, 0x83, 0x8F, 0x92, 0x86, 0x90, 0x99, 0x82, 0x88, 0x98, 0x7F, 
   0x86, 0x9A, 0x76, 0x81, 0x90, 0x7C, 0x7F, 0x8A, 0x84, 0x89, 0x8F, 0x93, 0x90, 0x98, 0x8A, 0x89, 
   0x91, 0x79, 0x7A, 0x8D, 0x70, 0x73, 0x92, 0x72, 0x78, 0x9A, 0x76, 0x7E, 0x9D, 0x75, 0x7A, 0x97, 
   0x7B, 0x7F, 0x9A, 0x89, 0x91, 0xA7, 0x86, 0x89, 0x9C, 0x73, 0x72, 0x7F, 0x76, 0x75, 0x7E, 0x65, 
   0x66, 0x6D, 0x38, 0x39, 0x34, 0x38, 0x36, 0x34, 0x6C, 0x6D, 0x70, 0xA7, 0xAD, 0xB0, 0xA9, 0xB0, 
   0xB7, 0x9A, 0x9B, 0xA9, 0x92, 0x98, 0xA9, 0x88, 0x92, 0xA2, 0x7F, 0x85, 0x94, 0x76, 0x81, 0x8E, 
   0x7C, 0x89, 0x92, 0x94, 0x9E, 0xA0, 0x93, 0x98, 0x99, 0x42, 0x47, 0x45, 0x59, 0x60, 0x5D, 0xA0, 
   0xA4, 0xA8, 0x9B, 0x9B, 0xA2, 0x9A, 0x97, 0x9D, 0x93, 0x96, 0x9D, 0x8F, 0x95, 0x9C, 0x9A, 0x9E, 
   0xA6, 0xA6, 0xA8, 0xAF, 0x9F, 0xA2, 0xA8, 0xA7, 0xA7, 0xAC, 0xB2, 0xAD, 0xB3, 0xA5, 0x9A, 0xA4, 
   0x91, 0x8E, 0x95, 0xA3, 0xA7, 0xAB, 0xA2, 0xA3, 0xA8, 0xA5, 0xA2, 0xAC, 0xA9, 0xA3, 0xAC, 0xA8, 
   0x9E, 0xA6, 0x8E, 0x87, 0x90, 0x68, 0x6A, 0x73, 0x61, 0x62, 0x6D, 0x50, 0x55, 0x5A, 0x4A, 0x51, 
   0x4F, 0x50, 0x51, 0x55, 0x58, 0x56, 0x59, 0x56, 0x50, 0x58, 0x4E, 0x48, 0x4F, 0x45, 0x41, 0x49, 
   0x3F, 0x3E, 0x47, 0x40, 0x43, 0x4A, 0x42, 0x4E, 0x4E, 0x44, 0x4C, 0x53, 0x3E, 0x44, 0x4B, 0x3F, 
   0x42, 0x4A, 0x3A, 0x38, 0x4A, 0x2D, 0x2B, 0x39, 0x24, 0x27, 0x24, 0x29, 0x2C, 0x29, 0x24, 0x28, 
   0x28, 0x23, 0x27, 0x29, 0x29, 0x33, 0x2E, 0x45, 0x53, 0x4F, 0x80, 0x8A, 0x8B, 0x89, 0x8F, 0x8F, 
   0x73, 0x77, 0x7C, 0x69, 0x6E, 0x7B, 0x76, 0x80, 0x8C, 0x89, 0x95, 0x9B, 0x8B, 0x91, 0x99, 0x73, 
   0x78, 0x89, 0x62, 0x68, 0x7E, 0x5D, 0x66, 0x79, 0x57, 0x65, 0x74, 0x54, 0x63, 0x75, 0x55, 0x67, 
   0x80, 0x4A, 0x5E, 0x79, 0x41, 0x51, 0x6A, 0x42, 0x4F, 0x62, 0x55, 0x66, 0x79, 0x53, 0x64, 0x7C, 
   0x4E, 0x5C, 0x72, 0x48, 0x55, 0x67, 0x78, 0x81, 0x8F, 0x93, 0x93, 0x96, 0x8D, 0x8A, 0x8F, 0x97, 
   0x91, 0x96, 0x96, 0x91, 0x96, 0x93, 0x91, 0x97, 0x94, 0x92, 0x9A, 0x9D, 0x9C, 0xA3, 0xA3, 0xA3, 
   0xA7, 0x8F, 0x8F, 0x9B, 0x8D, 0x90, 0x9B, 0x94, 0x97, 0xA2, 0x97, 0x9A, 0xA4, 0x93, 0x95, 0x9F, 
   0x90, 0x94, 0x9F, 0x8C, 0x91, 0x9B, 0x9A, 0x9A, 0xA1, 0x9E, 0x98, 0x9D, 0x74, 0x6E, 0x72, 0x5A, 
   0x56, 0x5F, 0x5B, 0x5E, 0x69, 0x5E, 0x64, 0x6B, 0x68, 0x6F, 0x73, 0x6C, 0x74, 0x78, 0x71, 0x76, 
   0x7D, 0x56, 0x55, 0x5F, 0x3E, 0x43, 0x48, 0x47, 0x4D, 0x4B, 0x59, 0x58, 0x59, 0x61, 0x5E, 0x60, 
   0x5F, 0x5F, 0x61, 0x6B, 0x6B, 0x71, 0x58, 0x54, 0x58, 0x60, 0x62, 0x63, 0x8B, 0x8A, 0x8C, 0x8B, 
   0x8B, 0x8E, 0x87, 0x84, 0x89, 0x8B, 0x89, 0x8E, 0x9B, 0x94, 0x99, 0x9C, 0x93, 0x97, 0x9F, 0x98, 
   0x99, 0x9D, 0x93, 0x97, 0x98, 0x8F, 0x98, 0x9E, 0x96, 0x96, 0xA1, 0x9C, 0x9F, 0xAD, 0xA2, 0xA9, 
   0xA6, 0x99, 0xA4, 0xA0, 0x93, 0xA4, 0x7B, 0x6F, 0x81, 0x6A, 0x5F, 0x6E, 0x5E, 0x56, 0x6A, 0x69, 
   0x67, 0x7B, 0x8A, 0x89, 0x96, 0x97, 0x8F, 0x9F, 0x76, 0x6B, 0x83, 0x68, 0x5E, 0x77, 0x65, 0x5D, 
   0x75, 0x84, 0x86, 0x94, 0xB8, 0xBB, 0xC2, 0xB6, 0xB2, 0xBE, 0x79, 0x77, 0x8A, 0x5A, 0x5C, 0x6F, 
   0x69, 0x71, 0x86, 0x7F, 0x85, 0x9C, 0x6B, 0x70, 0x81, 0x52, 0x5C, 0x6B, 0x66, 0x76, 0x90, 0x77, 
   0x88, 0x9C, 0x81, 0x8B, 0x96, 0x7A, 0x82, 0x8E, 0x56, 0x60, 0x68, 0x40, 0x45, 0x52, 0x2D, 0x36, 
   0x47, 0x45, 0x51, 0x60, 0x77, 0x87, 0x97, 0x81, 0x8E, 0xA0, 0x83, 0x8D, 0x9C, 0x8A, 0x9C, 0xAB, 
   0x8F, 0xA1, 0xB1, 0x8E, 0x99, 0xAD, 0x8A, 0x90, 0xA4, 0x8A, 0x90, 0xA4, 0x8B, 0x92, 0xA2, 0x77, 
   0x77, 0x90, 0x5D, 0x58, 0x6F, 0x60, 0x5E, 0x75, 0x60, 0x61, 0x78, 0x6A, 0x67, 0x7A, 0x62, 0x5C, 
   0x6D, 0x17, 0x12, 0x19, 0x29, 0x30, 0x34, 0x44, 0x52, 0x53, 0x55, 0x5E, 0x61, 0x5E, 0x63, 0x6C, 
   0x5E, 0x63, 0x6C, 0x5C, 0x61, 0x6C, 0x57, 0x5A, 0x69, 0x65, 0x6B, 0x77, 0x76, 0x7C, 0x88, 0x8B, 
   0x8B, 0x97, 0x73, 0x70, 0x7C, 0x64, 0x68, 0x71, 0x68, 0x6E, 0x74, 0x77, 0x7B, 0x7E, 0x88, 0x87, 
   0x8C, 0x88, 0x84, 0x8D, 0x7D, 0x78, 0x85, 0x79, 0x76, 0x81, 0x7E, 0x82, 0x86, 0x80, 0x83, 0x87, 
   0x88, 0x87, 0x8E, 0x92, 0x94, 0x9D, 0x9B, 0x9B, 0xA3, 0x92, 0x91, 0x9D, 0x83, 0x85, 0x96, 0x7A, 
   0x7F, 0x8E, 0x74, 0x7E, 0x8C, 0x76, 0x7E, 0x87, 0x70, 0x70, 0x78, 0x75, 0x78, 0x80, 0x77, 0x78, 
   0x83, 0x5D, 0x55, 0x5F, 0x40, 0x36, 0x3C, 0x1F, 0x1A, 0x1A, 0x30, 0x2B, 0x29, 0x53, 0x4E, 0x4F, 
   0x5D, 0x64, 0x65, 0x77, 0x7C, 0x7E, 0x99, 0x98, 0x9E, 0xA9, 0xA3, 0xAF, 0x93, 0x8E, 0x9F, 0x81, 
   0x84, 0x94, 0x89, 0x91, 0x9B, 0x9C, 0xA1, 0xAC, 0x98, 0x98, 0xA5, 0x85, 0x8B, 0x97, 0x82, 0x8A, 
   0x96, 0x87, 0x8B, 0x95, 0x85, 0x88, 0x90, 0x87, 0x8A, 0x92, 0x81, 0x87, 0x93, 0x84, 0x89, 0x95, 
   0x9B, 0x9B, 0xA0, 0xA8, 0xA3, 0xA9, 0xA7, 0x99, 0xAB, 0x78, 0x6F, 0x87, 0x5E, 0x67, 0x85, 0x62, 
   0x6C, 0x8F, 0x4A, 0x44, 0x5D, 0x27, 0x20, 0x2C, 0x30, 0x2F, 0x34, 0x37, 0x39, 0x40, 0x46, 0x44, 
   0x4C, 0x48, 0x4C, 0x51, 0x51, 0x62, 0x6B, 0x70, 0x80, 0x8C, 0x91, 0x98, 0xA2, 0xA0, 0x9D, 0xA5, 
   0xA1, 0x9C, 0xA8, 0x9F, 0xA3, 0xAA, 0x7D, 0x85, 0x81, 0x84, 0x8B, 0x8F, 0x82, 0x8A, 0x94, 0x81, 
   0x8A, 0x99, 0x83, 0x89, 0x9A, 0x89, 0x8C, 0x9C, 0x9C, 0x9E, 0xA7, 0xA4, 0xA0, 0xA8, 0x9D, 0x94, 
   0x99, 0x9E, 0x98, 0x9B, 0x9D, 0x9B, 0xA1, 0x85, 0x87, 0x98, 0x7A, 0x7E, 0x96, 0x77, 0x78, 0x91, 
   0x76, 0x76, 0x92, 0x82, 0x85, 0x9B, 0x97, 0x9A, 0xA7, 0x7D, 0x83, 0x89, 0x7D, 0x7D, 0x85, 0x52, 
   0x53, 0x5C, 0x35, 0x39, 0x3A, 0x55, 0x57, 0x51, 0x84, 0x8A, 0x88, 0xA2, 0xA0, 0xA9, 0x97, 0x98, 
   0xA4, 0x96, 0x9D, 0xA6, 0x9B, 0xA3, 0xA9, 0xA5, 0xA8, 0xB3, 0xA0, 0xA1, 0xAE, 0x8D, 0x90, 0x9A, 
   0x7C, 0x84, 0x90, 0x86, 0x8D, 0x94, 0x8F, 0x96, 0x96, 0x59, 0x60, 0x5E, 0x26, 0x2F, 0x2B, 0x8C, 
   0x8E, 0x8C, 0xA0, 0x97, 0x9E, 0x9E, 0x98, 0x9C, 0x9B, 0x9D, 0x9E, 0x97, 0x9D, 0x9C, 0xA9, 0xAE, 
   0xAF, 0xA7, 0xAD, 0xB0, 0x9C, 0x9B, 0xA3, 0xAC, 0xA7, 0xAC, 0xB2, 0xAD, 0xAD, 0xB1, 0xAC, 0xAC, 
   0x9C, 0x96, 0x99, 0xA6, 0xA2, 0xA2, 0xA7, 0xA3, 0xA3, 0xA4, 0x9E, 0xA4, 0x93, 0x8E, 0x96, 0x76, 
   0x75, 0x7D, 0x6E, 0x6D, 0x76, 0x6E, 0x6F, 0x79, 0x5F, 0x62, 0x6C, 0x53, 0x56, 0x60, 0x4E, 0x52, 
   0x5C, 0x4C, 0x4F, 0x58, 0x5D, 0x61, 0x66, 0x67, 0x63, 0x6C, 0x61, 0x5C, 0x65, 0x5E, 0x5B, 0x63, 
   0x49, 0x44, 0x4D, 0x3A, 0x39, 0x41, 0x3E, 0x42, 0x47, 0x42, 0x43, 0x4C, 0x45, 0x44, 0x4D, 0x47, 
   0x46, 0x50, 0x45, 0x46, 0x53, 0x46, 0x47, 0x51, 0x3A, 0x39, 0x38, 0x2A, 0x24, 0x25, 0x24, 0x1F, 
   0x21, 0x1D, 0x22, 0x21, 0x1E, 0x23, 0x1C, 0x20, 0x27, 0x23, 0x2D, 0x39, 0x36, 0x44, 0x48, 0x4A, 
   0x6B, 0x6D, 0x72, 0x82, 0x83, 0x8B, 0x73, 0x78, 0x80, 0x6C, 0x74, 0x7B, 0x80, 0x85, 0x8E, 0x77, 
   0x7B, 0x8C, 0x6A, 0x70, 0x83, 0x64, 0x6C, 0x7D, 0x62, 0x6B, 0x7D, 0x5B, 0x69, 0x7D, 0x52, 0x66, 
   0x7B, 0x4A, 0x5F, 0x75, 0x48, 0x54, 0x71, 0x4A, 0x4C, 0x69, 0x57, 0x62, 0x7A, 0x5C, 0x63, 0x7E, 
   0x56, 0x5E, 0x7B, 0x5B, 0x66, 0x7C, 0x8C, 0x90, 0x9B, 0x91, 0x8F, 0x93, 0x92, 0x8A, 0x93, 0x96, 
   0x8B, 0x94, 0x94, 0x90, 0x99, 0x8F, 0x8C, 0x92, 0x90, 0x88, 0x8F, 0x95, 0x90, 0x98, 0x8A, 0x88, 
   0x8C, 0x90, 0x8A, 0x97, 0x91, 0x90, 0x9C, 0x8A, 0x8E, 0x99, 0x8C, 0x90, 0x9B, 0x8F, 0x92, 0x9C, 
   0x9B, 0x9A, 0xA2, 0x94, 0x92, 0x9A, 0x91, 0x91, 0x98, 0x9D, 0x93, 0x9C, 0x9B, 0x90, 0x99, 0x74, 
   0x6C, 0x75, 0x58, 0x5C, 0x63, 0x5B, 0x5E, 0x66, 0x63, 0x65, 0x6E, 0x6B, 0x6D, 0x77, 0x77, 0x73, 
   0x86, 0x75, 0x6F, 0x7E, 0x71, 0x6D, 0x77, 0x51, 0x50, 0x5B, 0x4B, 0x4A, 0x4A, 0x5D, 0x5F, 0x5C, 
   0x65, 0x67, 0x62, 0x6A, 0x6C, 0x6B, 0x62, 0x67, 0x6E, 0x61, 0x60, 0x68, 0x82, 0x80, 0x89, 0x66, 
   0x62, 0x6D, 0x62, 0x65, 0x6C, 0x86, 0x87, 0x8A, 0x9A, 0x94, 0x98, 0x9A, 0x93, 0x99, 0x9D, 0x93, 
   0x97, 0x9D, 0x92, 0x95, 0x9A, 0x90, 0x95, 0x9B, 0x97, 0x98, 0xAA, 0xA5, 0xA7, 0x9D, 0x94, 0x9F, 
   0x85, 0x80, 0x8D, 0x95, 0x90, 0x9F, 0x73, 0x66, 0x7C, 0x5F, 0x54, 0x69, 0x51, 0x48, 0x5B, 0x62, 
   0x5D, 0x70, 0x74, 0x76, 0x87, 0x73, 0x70, 0x84, 0x6D, 0x68, 0x7E, 0x71, 0x65, 0x80, 0x74, 0x6A, 
   0x85, 0x82, 0x7F, 0x95, 0x9C, 0x9F, 0xA9, 0xA7, 0xA7, 0xAE, 0x84, 0x7F, 0x8F, 0x6C, 0x6C, 0x82, 
   0x6C, 0x6C, 0x83, 0x66, 0x6F, 0x81, 0x3E, 0x44, 0x50, 0x24, 0x2B, 0x33, 0x4E, 0x5D, 0x6C, 0x61, 
   0x72, 0x87, 0x5D, 0x6E, 0x78, 0x51, 0x5C, 0x67, 0x4E, 0x55, 0x62, 0x67, 0x71, 0x7D, 0x86, 0x94, 
   0xA3, 0x93, 0xA3, 0xB2, 0x8C, 0x9A, 0xA8, 0x84, 0x91, 0x9C, 0x8D, 0x98, 0xA3, 0x98, 0xA0, 0xAE, 
   0x95, 0x9F, 0xA9, 0xA2, 0xA0, 0xAC, 0x95, 0x96, 0xA2, 0x96, 0x98, 0xA8, 0x8F, 0x87, 0xA2, 0x6E, 
   0x66, 0x86, 0x61, 0x5D, 0x78, 0x5E, 0x5D, 0x75, 0x5E, 0x5A, 0x73, 0x68, 0x6B, 0x81, 0x7D, 0x7C, 
   0x90, 0x2C, 0x22, 0x2F, 0x2A, 0x2D, 0x2A, 0x4C, 0x58, 0x58, 0x51, 0x5C, 0x60, 0x5F, 0x61, 0x68, 
   0x6A, 0x6E, 0x75, 0x73, 0x75, 0x83, 0x73, 0x72, 0x81, 0x84, 0x89, 0x96, 0x83, 0x83, 0x93, 0x66, 
   0x63, 0x74, 0x58, 0x5A, 0x66, 0x66, 0x66, 0x6E, 0x6C, 0x6E, 0x71, 0x75, 0x7A, 0x7E, 0x8C, 0x8E, 
   0x94, 0x88, 0x87, 0x8E, 0x81, 0x7C, 0x86, 0x7E, 0x78, 0x84, 0x85, 0x86, 0x8D, 0x86, 0x8A, 0x8C, 
   0x91, 0x94, 0x98, 0x96, 0x9B, 0xA5, 0x98, 0x9A, 0xA7, 0x90, 0x93, 0xA2, 0x81, 0x85, 0x91, 0x7F, 
   0x84, 0x92, 0x7D, 0x84, 0x93, 0x7F, 0x85, 0x92, 0x75, 0x72, 0x7F, 0x6B, 0x6A, 0x74, 0x65, 0x60, 
   0x69, 0x58, 0x55, 0x5A, 0x52, 0x4E, 0x55, 0x3C, 0x34, 0x3F, 0x13, 0x0E, 0x13, 0x61, 0x69, 0x6A, 
   0x76, 0x79, 0x79, 0x8B, 0x8D, 0x91, 0xA5, 0xA5, 0xAC, 0xAD, 0xA8, 0xB0, 0x96, 0x94, 0x9A, 0x87, 
   0x8E, 0x98, 0x85, 0x89, 0x9B, 0x85, 0x8D, 0x9F, 0x80, 0x8A, 0x9C, 0x73, 0x81, 0x90, 0x7C, 0x8C, 
   0x97, 0x82, 0x8D, 0x96, 0x89, 0x8D, 0x99, 0x86, 0x8A, 0x9C, 0x8A, 0x91, 0x9E, 0xA3, 0xA6, 0xB0, 
   0xB0, 0xA9, 0xB2, 0xA3, 0x9E, 0xA6, 0xB6, 0xB1, 0xBC, 0x9C, 0x92, 0xA4, 0x6E, 0x70, 0x8A, 0x63, 
   0x72, 0x8F, 0x66, 0x64, 0x80, 0x34, 0x30, 0x3F, 0x2C, 0x30, 0x35, 0x37, 0x3C, 0x3C, 0x3D, 0x45, 
   0x43, 0x57, 0x60, 0x63, 0x83, 0x90, 0x97, 0x8D, 0x95, 0xA1, 0x94, 0x94, 0xA2, 0x97, 0x95, 0xA3, 
   0x99, 0x9B, 0xA9, 0x9D, 0xA3, 0xB1, 0x6A, 0x6E, 0x6D, 0x7E, 0x80, 0x83, 0x6F, 0x76, 0x81, 0x84, 
   0x88, 0x9B, 0x99, 0x99, 0xAF, 0x85, 0x8A, 0x9B, 0xA5, 0xA9, 0xB5, 0xB0, 0xAD, 0xBA, 0xA1, 0x9F, 
   0xAA, 0xA8, 0xA4, 0xAA, 0xB0, 0xAA, 0xB1, 0x97, 0x94, 0xA6, 0x80, 0x81, 0x9A, 0x84, 0x86, 0x9D, 
   0x8C, 0x92, 0xA7, 0x8F, 0x97, 0xA4, 0x99, 0x9E, 0xA0, 0x8A, 0x8B, 0x8A, 0x86, 0x84, 0x87, 0x44, 
   0x43, 0x4A, 0x3C, 0x3C, 0x3E, 0x60, 0x60, 0x5E, 0x8D, 0x91, 0x92, 0x9B, 0x98, 0x9D, 0x94, 0x99, 
   0xA0, 0x92, 0x9C, 0xA1, 0x97, 0x9F, 0xA4, 0x9C, 0xA2, 0xAA, 0x9F, 0xA4, 0xAD, 0xAD, 0xB1, 0xB9, 
   0xB3, 0xB2, 0xB9, 0x98, 0x9B, 0x9F, 0x7C, 0x84, 0x85, 0x50, 0x57, 0x5A, 0x0D, 0x13, 0x12, 0x4E, 
   0x50, 0x4A, 0xA1, 0x9D, 0x9C, 0xAB, 0xA8, 0xAA, 0xA9, 0xA9, 0xA9, 0x90, 0x93, 0x93, 0x94, 0x9A, 
   0x99, 0x9E, 0xA3, 0xA4, 0xA4, 0xA5, 0xA6, 0xAF, 0xAD, 0xAE, 0xB1, 0xAE, 0xAF, 0xAA, 0xA7, 0xA9, 
   0x9F, 0x9B, 0xA0, 0xA3, 0x9F, 0xA4, 0xA1, 0x9D, 0xA1, 0x93, 0x90, 0x94, 0x74, 0x74, 0x7D, 0x6B, 
   0x6D, 0x77, 0x77, 0x74, 0x7E, 0x86, 0x83, 0x8D, 0x71, 0x73, 0x80, 0x52, 0x55, 0x63, 0x50, 0x56, 
   0x61, 0x4D, 0x52, 0x59, 0x57, 0x5A, 0x5D, 0x67, 0x66, 0x6B, 0x68, 0x67, 0x6B, 0x69, 0x68, 0x6C, 
   0x6A, 0x66, 0x6D, 0x51, 0x52, 0x57, 0x46, 0x48, 0x4E, 0x4C, 0x4E, 0x55, 0x50, 0x4E, 0x57, 0x4C, 
   0x4A, 0x53, 0x49, 0x4B, 0x56, 0x4D, 0x4F, 0x58, 0x55, 0x53, 0x56, 0x50, 0x4A, 0x4F, 0x32, 0x30, 
   0x33, 0x1E, 0x1F, 0x20, 0x1E, 0x21, 0x1D, 0x11, 0x1A, 0x17, 0x0E, 0x16, 0x15, 0x4B, 0x4A, 0x4F, 
   0x95, 0x91, 0x97, 0xAD, 0xA9, 0xAE, 0xA6, 0xA2, 0xA7, 0x8E, 0x8C, 0x93, 0x97, 0x97, 0xA2, 0x86, 
   0x88, 0x96, 0x69, 0x6F, 0x81, 0x60, 0x6E, 0x81, 0x5D, 0x6E, 0x83, 0x5C, 0x6B, 0x82, 0x63, 0x6F, 
   0x81, 0x7F, 0x8B, 0x99, 0x6A, 0x71, 0x83, 0x56, 0x5B, 0x73, 0x59, 0x68, 0x7E, 0x57, 0x5E, 0x75, 
   0x57, 0x5F, 0x76, 0x6A, 0x74, 0x8A, 0x87, 0x8E, 0x9D, 0x8C, 0x8F, 0x99, 0x97, 0x90, 0x99, 0x8E, 
   0x8C, 0x8F, 0x83, 0x88, 0x90, 0x8C, 0x8D, 0x97, 0x94, 0x8E, 0x96, 0x92, 0x8F, 0x95, 0x8B, 0x8D, 
   0x93, 0x9B, 0x98, 0xA0, 0x93, 0x91, 0x9B, 0x8E, 0x8E, 0x9A, 0x8C, 0x8D, 0x99, 0x91, 0x90, 0x9C, 
   0x9C, 0x9A, 0xA4, 0x93, 0x90, 0x9B, 0x93, 0x90, 0x9D, 0x94, 0x8D, 0x9A, 0x99, 0x95, 0x9F, 0x96, 
   0x93, 0x9A, 0x74, 0x77, 0x7F, 0x76, 0x75, 0x82, 0x6B, 0x6A, 0x75, 0x58, 0x5A, 0x62, 0x63, 0x64, 
   0x71, 0x84, 0x84, 0x8D, 0x82, 0x83, 0x8C, 0x68, 0x6A, 0x79, 0x59, 0x59, 0x65, 0x59, 0x58, 0x5F, 
   0x68, 0x62, 0x63, 0x77, 0x71, 0x72, 0x5C, 0x60, 0x64, 0x4D, 0x4F, 0x52, 0x5D, 0x5C, 0x62, 0x55, 
   0x57, 0x61, 0x62, 0x66, 0x6D, 0x85, 0x85, 0x89, 0x94, 0x93, 0x95, 0x9B, 0x9A, 0x9C, 0x9A, 0x96, 
   0x98, 0x99, 0x93, 0x94, 0x9C, 0x97, 0x9A, 0x9D, 0x96, 0x98, 0x91, 0x8C, 0x93, 0x6F, 0x63, 0x71, 
   0x6E, 0x62, 0x73, 0x72, 0x6C, 0x7C, 0x77, 0x6F, 0x83, 0x89, 0x7D, 0x93, 0x88, 0x7C, 0x89, 0x85, 
   0x7A, 0x90, 0x6C, 0x66, 0x80, 0x63, 0x5F, 0x76, 0x79, 0x7A, 0x8B, 0x70, 0x69, 0x7D, 0x6B, 0x68, 
   0x7E, 0x74, 0x78, 0x8D, 0x7D, 0x85, 0x95, 0x86, 0x8C, 0x97, 0x8B, 0x8D, 0x98, 0x7F, 0x7B, 0x8F, 
   0x61, 0x58, 0x6C, 0x4C, 0x4D, 0x5B, 0x3C, 0x3C, 0x49, 0x21, 0x22, 0x30, 0x19, 0x25, 0x30, 0x2A, 
   0x38, 0x47, 0x38, 0x47, 0x58, 0x54, 0x64, 0x70, 0x76, 0x83, 0x8E, 0x90, 0x9D, 0xAA, 0x86, 0x97, 
   0xA7, 0x7F, 0x92, 0xA1, 0x80, 0x91, 0xA0, 0x81, 0x90, 0x9D, 0x82, 0x8F, 0x9D, 0x7C, 0x84, 0x93, 
   0x81, 0x8C, 0x94, 0x9D, 0x9E, 0xA5, 0x9A, 0x9F, 0xA6, 0x9A, 0x9D, 0xAA, 0x83, 0x7D, 0x96, 0x6A, 
   0x64, 0x82, 0x63, 0x60, 0x7E, 0x5C, 0x5D, 0x78, 0x59, 0x58, 0x73, 0x67, 0x6D, 0x83, 0x7D, 0x7F, 
   0x93, 0x3E, 0x37, 0x46, 0x23, 0x2A, 0x28, 0x4C, 0x5E, 0x5C, 0x54, 0x63, 0x6B, 0x5A, 0x61, 0x6B, 
   0x68, 0x71, 0x74, 0x83, 0x88, 0x8A, 0x8C, 0x89, 0x93, 0x89, 0x88, 0x96, 0x6C, 0x69, 0x7A, 0x64, 
   0x60, 0x70, 0x6B, 0x69, 0x74, 0x8F, 0x88, 0x90, 0x92, 0x88, 0x91, 0x80, 0x7B, 0x86, 0x7E, 0x7B, 
   0x88, 0x7E, 0x7C, 0x86, 0x7E, 0x7A, 0x83, 0x89, 0x84, 0x8F, 0x9D, 0xA0, 0xA8, 0x99, 0x9E, 0xA3, 
   0x9D, 0xA0, 0xA7, 0x96, 0x9A, 0xA6, 0x92, 0x9A, 0xA9, 0x95, 0xA0, 0xAE, 0x8D, 0x94, 0xA1, 0x84, 
   0x87, 0x94, 0x7F, 0x87, 0x93, 0x77, 0x7E, 0x8A, 0x6F, 0x72, 0x7F, 0x66, 0x67, 0x73, 0x5E, 0x5B, 
   0x65, 0x50, 0x51, 0x57, 0x4D, 0x50, 0x56, 0x46, 0x44, 0x4C, 0x32, 0x32, 0x32, 0x60, 0x6B, 0x6B, 
   0x84, 0x8B, 0x8D, 0x9B, 0x9C, 0xA5, 0x8E, 0x8C, 0x99, 0x84, 0x86, 0x90, 0x89, 0x90, 0x96, 0x8A, 
   0x94, 0x9B, 0x83, 0x88, 0x95, 0x76, 0x82, 0x90, 0x75, 0x87, 0x95, 0x7C, 0x8E, 0x9C, 0x86, 0x96, 
   0xA2, 0x87, 0x8E, 0x96, 0x9C, 0x9D, 0xA8, 0x9C, 0x9F, 0xAE, 0x96, 0x97, 0xA3, 0xA1, 0x9F, 0xA9, 
   0xA2, 0x9C, 0xA4, 0x9A, 0x98, 0x9F, 0xA4, 0xA4, 0xAB, 0xAA, 0xA4, 0xB0, 0x7D, 0x7D, 0x93, 0x69, 
   0x77, 0x94, 0x70, 0x77, 0x96, 0x46, 0x46, 0x5C, 0x30, 0x2E, 0x38, 0x3A, 0x3E, 0x3F, 0x4E, 0x57, 
   0x55, 0x73, 0x7A, 0x7C, 0x89, 0x90, 0x98, 0x94, 0x94, 0xA0, 0x9A, 0x95, 0xA1, 0x9C, 0x98, 0xA1, 
   0x9D, 0x9D, 0xA5, 0xA0, 0xA3, 0xAD, 0x55, 0x57, 0x58, 0x6B, 0x6B, 0x6E, 0x6E, 0x72, 0x79, 0x7D, 
   0x7F, 0x91, 0x8D, 0x8E, 0xA4, 0x7D, 0x7F, 0x93, 0xA2, 0xA5, 0xB2, 0xA6, 0xA6, 0xB6, 0x81, 0x85, 
   0x98, 0x90, 0x91, 0xA0, 0xA4, 0xA1, 0xAC, 0xA3, 0xA2, 0xB1, 0x90, 0x94, 0xA7, 0x8C, 0x92, 0xA2, 
   0x9B, 0xA4, 0xAF, 0x98, 0x9F, 0xA6, 0x7C, 0x80, 0x85, 0x88, 0x85, 0x89, 0x75, 0x73, 0x77, 0x46, 
   0x44, 0x49, 0x50, 0x4C, 0x4C, 0x7A, 0x78, 0x74, 0xA8, 0xA6, 0xA6, 0x9E, 0x99, 0xA3, 0x86, 0x8D, 
   0x96, 0x83, 0x8E, 0x96, 0x8F, 0x95, 0x9D, 0x93, 0x99, 0xA0, 0x97, 0x9F, 0xA5, 0xA5, 0xAC, 0xB0, 
   0xB7, 0xB7, 0xBD, 0x9F, 0xA1, 0xA4, 0x73, 0x79, 0x7C, 0x51, 0x57, 0x5F, 0x17, 0x1C, 0x20, 0x1D, 
   0x24, 0x1E, 0x69, 0x70, 0x6A, 0x9F, 0xA0, 0x9E, 0x76, 0x75, 0x76, 0x39, 0x3D, 0x40, 0x56, 0x5E, 
   0x61, 0x8F, 0x95, 0x98, 0x9B, 0x9C, 0x9E, 0x9E, 0x9C, 0xA0, 0x9C, 0x9B, 0x9F, 0x9A, 0x9A, 0x9E, 
   0x9B, 0x99, 0xA2, 0x9A, 0x97, 0xA2, 0x93, 0x91, 0x9A, 0x88, 0x87, 0x8E, 0x84, 0x84, 0x8F, 0x7E, 
   0x7F, 0x89, 0x75, 0x72, 0x79, 0x7A, 0x79, 0x83, 0x75, 0x7B, 0x88, 0x5C, 0x61, 0x6E, 0x55, 0x59, 
   0x64, 0x54, 0x59, 0x60, 0x5C, 0x5B, 0x5D, 0x60, 0x62, 0x63, 0x6A, 0x6D, 0x6D, 0x6B, 0x6B, 0x6B, 
   0x6D, 0x6C, 0x71, 0x78, 0x79, 0x7E, 0x62, 0x5F, 0x67, 0x50, 0x4E, 0x56, 0x56, 0x53, 0x5A, 0x57, 
   0x54, 0x5C, 0x53, 0x52, 0x5C, 0x52, 0x51, 0x5B, 0x5F, 0x5C, 0x64, 0x5E, 0x5A, 0x64, 0x42, 0x41, 
   0x47, 0x1E, 0x1C, 0x1F, 0x16, 0x1A, 0x17, 0x0D, 0x16, 0x16, 0x49, 0x4F, 0x51, 0x90, 0x8D, 0x95, 
   0xA0, 0x9B, 0xA4, 0x9F, 0x9B, 0xA3, 0xA6, 0xA2, 0xA9, 0xA0, 0x9E, 0xA6, 0x91, 0x95, 0xA0, 0x7A, 
   0x80, 0x90, 0x6B, 0x74, 0x86, 0x64, 0x73, 0x86, 0x61, 0x72, 0x85, 0x59, 0x6A, 0x7A, 0x59, 0x6A, 
   0x74, 0x80, 0x90, 0x98, 0x77, 0x81, 0x91, 0x66, 0x6B, 0x85, 0x58, 0x65, 0x7F, 0x5C, 0x62, 0x79, 
   0x68, 0x6E, 0x81, 0x7F, 0x88, 0x9A, 0x8C, 0x92, 0xA3, 0x8E, 0x92, 0x9F, 0x9C, 0x97, 0x9C, 0x9B, 
   0x98, 0x96, 0x9B, 0x9F, 0xA2, 0x9D, 0x9D, 0xA7, 0x98, 0x94, 0x9A, 0x94, 0x91, 0x94, 0x96, 0x96, 
   0x9C, 0x96, 0x99, 0x9F, 0x91, 0x93, 0x9B, 0x8F, 0x90, 0x9B, 0x8E, 0x90, 0x9B, 0x95, 0x96, 0xA2, 
   0x9E, 0x9F, 0xAA, 0x9B, 0x9B, 0xA6, 0x9E, 0x9A, 0xA4, 0x94, 0x93, 0x99, 0x91, 0x95, 0x99, 0x9A, 
   0x9C, 0xA3, 0x92, 0x94, 0x9D, 0x7E, 0x80, 0x8A, 0x7C, 0x7D, 0x88, 0x6D, 0x6D, 0x7A, 0x65, 0x67, 
   0x74, 0x86, 0x8A, 0x8F, 0x88, 0x8B, 0x8F, 0x7B, 0x7E, 0x89, 0x71, 0x75, 0x82, 0x62, 0x66, 0x70, 
   0x64, 0x63, 0x66, 0x6B, 0x69, 0x6A, 0x4A, 0x50, 0x50, 0x3E, 0x44, 0x41, 0x2E, 0x31, 0x34, 0x40, 
   0x47, 0x4F, 0x5D, 0x61, 0x6C, 0x6C, 0x6F, 0x78, 0x82, 0x87, 0x8C, 0x83, 0x88, 0x8D, 0x85, 0x87, 
   0x8C, 0x8C, 0x8C, 0x91, 0x8F, 0x8E, 0x96, 0x8D, 0x87, 0x93, 0x76, 0x6E, 0x7F, 0x6B, 0x5F, 0x6F, 
   0x6D, 0x63, 0x70, 0x7C, 0x77, 0x7F, 0x9A, 0x95, 0x99, 0xA9, 0xA4, 0xAA, 0xAB, 0xA5, 0xAA, 0xA9, 
   0xA1, 0xAF, 0x7B, 0x74, 0x88, 0x6D, 0x66, 0x78, 0x8E, 0x8D, 0x99, 0x77, 0x77, 0x82, 0x77, 0x7B, 
   0x8A, 0x81, 0x8B, 0x9E, 0x7F, 0x8B, 0x9F, 0x75, 0x83, 0x8F, 0x6F, 0x7B, 0x86, 0x6B, 0x6F, 0x83, 
   0x5E, 0x5D, 0x73, 0x48, 0x4E, 0x5D, 0x33, 0x39, 0x46, 0x2D, 0x33, 0x42, 0x31, 0x3C, 0x4A, 0x52, 
   0x5D, 0x6C, 0x6B, 0x78, 0x8A, 0x7C, 0x8D, 0x9C, 0x92, 0x9F, 0xAB, 0x8E, 0x99, 0xA6, 0x84, 0x92, 
   0xA1, 0x81, 0x91, 0xA0, 0x85, 0x93, 0xA0, 0x81, 0x8D, 0x9B, 0x7D, 0x88, 0x97, 0x83, 0x8B, 0x9C, 
   0x92, 0x9D, 0xA5, 0x9D, 0xA0, 0xA6, 0x9F, 0xA5, 0xAD, 0x92, 0x96, 0xA5, 0x6F, 0x6F, 0x89, 0x61, 
   0x64, 0x80, 0x5B, 0x57, 0x77, 0x5B, 0x59, 0x73, 0x5F, 0x5D, 0x75, 0x63, 0x67, 0x7A, 0x74, 0x75, 
   0x86, 0x51, 0x49, 0x59, 0x23, 0x27, 0x2A, 0x5E, 0x68, 0x6B, 0x6D, 0x79, 0x7D, 0x76, 0x7F, 0x82, 
   0x7E, 0x87, 0x8A, 0x87, 0x8B, 0x91, 0x8E, 0x89, 0x92, 0x80, 0x7E, 0x86, 0x74, 0x71, 0x7B, 0x7F, 
   0x80, 0x8A, 0x83, 0x88, 0x91, 0x8C, 0x8C, 0x93, 0x97, 0x8F, 0x97, 0x87, 0x80, 0x8A, 0x7F, 0x7A, 
   0x86, 0x78, 0x75, 0x80, 0x80, 0x80, 0x86, 0x9A, 0x9B, 0xA2, 0x92, 0x9A, 0xA0, 0x8F, 0x96, 0x9C, 
   0x93, 0x98, 0x9F, 0x8E, 0x95, 0xA0, 0x8C, 0x95, 0xA1, 0x97, 0xA1, 0xAD, 0x98, 0x9E, 0xAD, 0x80, 
   0x88, 0x96, 0x7C, 0x89, 0x94, 0x76, 0x7D, 0x8B, 0x6E, 0x72, 0x7F, 0x65, 0x69, 0x75, 0x54, 0x57, 
   0x62, 0x44, 0x4A, 0x52, 0x42, 0x46, 0x4C, 0x3C, 0x3E, 0x41, 0x43, 0x4B, 0x48, 0x7B, 0x85, 0x86, 
   0x9B, 0xA1, 0xA4, 0xA9, 0xAA, 0xB3, 0x91, 0x93, 0xA0, 0x8C, 0x91, 0x9C, 0x8B, 0x93, 0x9A, 0x88, 
   0x92, 0x99, 0x7F, 0x8A, 0x93, 0x7A, 0x89, 0x94, 0x82, 0x8E, 0x9D, 0x83, 0x8C, 0x9D, 0x80, 0x8A, 
   0x9A, 0x7D, 0x87, 0x93, 0x87, 0x91, 0x9A, 0x91, 0x9A, 0xA2, 0x97, 0x9B, 0xA3, 0x96, 0x95, 0x9D, 
   0x96, 0x93, 0x9B, 0x95, 0x96, 0x9C, 0x99, 0x9A, 0xA0, 0xA3, 0x9D, 0xA7, 0x85, 0x7E, 0x96, 0x69, 
   0x71, 0x90, 0x65, 0x75, 0x95, 0x57, 0x5E, 0x79, 0x34, 0x35, 0x40, 0x45, 0x4F, 0x4E, 0x7C, 0x85, 
   0x86, 0x86, 0x8B, 0x90, 0x83, 0x86, 0x8C, 0x95, 0x92, 0x96, 0x9C, 0x95, 0x98, 0x9D, 0x96, 0x9C, 
   0x9C, 0x98, 0xA1, 0x9F, 0x9D, 0xA5, 0x4A, 0x4F, 0x54, 0x5D, 0x5F, 0x61, 0x67, 0x6A, 0x6C, 0x6A, 
   0x6F, 0x77, 0x6E, 0x70, 0x83, 0x7C, 0x7A, 0x92, 0xAB, 0xAA, 0xB8, 0xA3, 0xA4, 0xB4, 0x87, 0x8A, 
   0xA2, 0x92, 0x94, 0xA9, 0xB3, 0xB2, 0xC0, 0xB5, 0xB6, 0xBF, 0xB1, 0xB3, 0xBD, 0xA6, 0xAA, 0xAF, 
   0xAC, 0xB1, 0xB0, 0x93, 0x93, 0x94, 0x7A, 0x79, 0x7E, 0x85, 0x7E, 0x84, 0x60, 0x5D, 0x63, 0x49, 
   0x47, 0x4C, 0x66, 0x63, 0x64, 0x89, 0x8B, 0x89, 0xA9, 0xAB, 0xAD, 0xA1, 0x9C, 0xA6, 0x84, 0x8C, 
   0x93, 0x80, 0x8B, 0x94, 0x8A, 0x90, 0x9A, 0x8C, 0x94, 0x9C, 0x91, 0x9B, 0xA2, 0x9D, 0xA5, 0xAC, 
   0xAD, 0xB0, 0xB8, 0xB0, 0xB3, 0xB8, 0x83, 0x8A, 0x8E, 0x5D, 0x67, 0x71, 0x32, 0x39, 0x40, 0x25, 
   0x2B, 0x28, 0x34, 0x3A, 0x35, 0x43, 0x45, 0x44, 0x33, 0x34, 0x38, 0x26, 0x2D, 0x35, 0x2C, 0x38, 
   0x40, 0x68, 0x6F, 0x77, 0x77, 0x77, 0x82, 0x77, 0x78, 0x84, 0x7E, 0x83, 0x8B, 0x84, 0x8A, 0x90, 
   0x86, 0x8A, 0x93, 0x89, 0x8B, 0x98, 0x8C, 0x8E, 0x9A, 0x86, 0x89, 0x94, 0x88, 0x85, 0x92, 0x83, 
   0x81, 0x8B, 0x93, 0x92, 0x97, 0x8E, 0x92, 0x98, 0x80, 0x8A, 0x93, 0x6B, 0x6F, 0x7A, 0x60, 0x5E, 
   0x66, 0x5A, 0x5C, 0x64, 0x5F, 0x5D, 0x61, 0x5B, 0x5E, 0x60, 0x60, 0x66, 0x65, 0x68, 0x69, 0x69, 
   0x63, 0x64, 0x6A, 0x6C, 0x6C, 0x73, 0x68, 0x65, 0x6D, 0x57, 0x54, 0x5C, 0x55, 0x53, 0x5B, 0x50, 
   0x4E, 0x57, 0x4F, 0x4D, 0x57, 0x49, 0x48, 0x52, 0x48, 0x47, 0x53, 0x50, 0x52, 0x5F, 0x46, 0x46, 
   0x4E, 0x1A, 0x19, 0x1C, 0x0B, 0x11, 0x0F, 0x2D, 0x35, 0x36, 0x83, 0x83, 0x87, 0x9B, 0x9A, 0xA1, 
   0x9C, 0x99, 0xA1, 0xA1, 0x9E, 0xA6, 0xAD, 0xA9, 0xB0, 0x98, 0x98, 0x9D, 0x7E, 0x87, 0x8D, 0x7A, 
   0x84, 0x92, 0x73, 0x7D, 0x8E, 0x64, 0x71, 0x83, 0x60, 0x70, 0x85, 0x56, 0x63, 0x7B, 0x42, 0x4F, 
   0x5F, 0x5C, 0x6C, 0x76, 0x7B, 0x89, 0x96, 0x7D, 0x83, 0x95, 0x7A, 0x82, 0x95, 0x7D, 0x7F, 0x8E, 
   0x88, 0x8A, 0x94, 0x8B, 0x8E, 0x9A, 0x8A, 0x8E, 0x97, 0x90, 0x91, 0x96, 0xA1, 0x9F, 0x9C, 0xA3, 
   0x9F, 0x9B, 0x9E, 0x9B, 0x9B, 0x9A, 0x99, 0x9D, 0x93, 0x92, 0x95, 0x94, 0x93, 0x96, 0x95, 0x98, 
   0x9B, 0x92, 0x95, 0x9E, 0x8E, 0x91, 0x9B, 0x8F, 0x93, 0x9D, 0x8E, 0x93, 0x9E, 0x9B, 0x9F, 0xA9, 
   0xA3, 0xA6, 0xAF, 0xA9, 0xAB, 0xB3, 0xA1, 0xA2, 0xA9, 0x95, 0x99, 0x9D, 0x94, 0x98, 0x9A, 0xA0, 
   0xA0, 0xA4, 0xA5, 0xA0, 0xA5, 0x63, 0x61, 0x62, 0x73, 0x72, 0x73, 0x87, 0x84, 0x8B, 0x72, 0x75, 
   0x7E, 0x7B, 0x83, 0x8A, 0x7E, 0x83, 0x8A, 0x7E, 0x81, 0x8B, 0x7A, 0x7F, 0x85, 0x79, 0x7E, 0x80, 
   0x7C, 0x7F, 0x7D, 0x72, 0x72, 0x70, 0x43, 0x45, 0x45, 0x3E, 0x40, 0x41, 0x38, 0x3B, 0x44, 0x4C, 
   0x52, 0x5F, 0x5C, 0x62, 0x72, 0x5D, 0x64, 0x72, 0x63, 0x6B, 0x76, 0x68, 0x6D, 0x78, 0x69, 0x69, 
   0x75, 0x68, 0x67, 0x72, 0x64, 0x63, 0x72, 0x63, 0x61, 0x71, 0x5C, 0x55, 0x6A, 0x65, 0x5C, 0x6E, 
   0x68, 0x65, 0x71, 0x7B, 0x79, 0x80, 0x98, 0x92, 0x93, 0xA2, 0x9E, 0xA2, 0xA1, 0x9A, 0xA3, 0x9E, 
   0x9C, 0xA7, 0x91, 0x92, 0x9D, 0x8C, 0x8B, 0x96, 0x93, 0x90, 0x9B, 0x83, 0x85, 0x92, 0x80, 0x86, 
   0x9A, 0x70, 0x7B, 0x99, 0x5C, 0x69, 0x80, 0x63, 0x70, 0x7F, 0x68, 0x77, 0x84, 0x68, 0x71, 0x84, 
   0x60, 0x67, 0x7B, 0x49, 0x52, 0x64, 0x41, 0x4A, 0x55, 0x5E, 0x68, 0x71, 0x86, 0x8F, 0x9F, 0x99, 
   0x9F, 0xAE, 0x84, 0x8E, 0x9E, 0x7A, 0x8B, 0x9A, 0x89, 0x96, 0xA2, 0x8F, 0x99, 0xA5, 0x80, 0x8D, 
   0x99, 0x80, 0x8D, 0x99, 0x86, 0x92, 0x9D, 0x82, 0x8D, 0x9A, 0x85, 0x90, 0x9E, 0x8A, 0x96, 0xA5, 
   0x8F, 0x9E, 0xA6, 0x96, 0x9D, 0xA6, 0x90, 0x96, 0xA4, 0x79, 0x7A, 0x90, 0x68, 0x66, 0x84, 0x61, 
   0x64, 0x7F, 0x5C, 0x59, 0x76, 0x5F, 0x5D, 0x74, 0x63, 0x61, 0x77, 0x63, 0x64, 0x78, 0x70, 0x70, 
   0x81, 0x64, 0x5E, 0x71, 0x20, 0x20, 0x2D, 0x3D, 0x43, 0x49, 0x44, 0x4F, 0x51, 0x4D, 0x59, 0x5B, 
   0x73, 0x81, 0x85, 0x88, 0x93, 0x9A, 0x7F, 0x83, 0x8B, 0x8B, 0x8E, 0x96, 0x90, 0x8E, 0x98, 0x8D, 
   0x8D, 0x97, 0x8A, 0x8D, 0x95, 0x8F, 0x91, 0x98, 0xAC, 0xA8, 0xB0, 0x99, 0x95, 0xA1, 0x8E, 0x8D, 
   0x9A, 0x8D, 0x91, 0x9A, 0x8F, 0x97, 0x9C, 0x90, 0x98, 0xA1, 0x87, 0x93, 0x9E, 0x87, 0x92, 0x9B, 
   0x89, 0x94, 0x9C, 0x87, 0x92, 0x9E, 0x84, 0x8F, 0x9A, 0x84, 0x90, 0x9B, 0x83, 0x8D, 0x9C, 0x8B, 
   0x94, 0xA1, 0x87, 0x90, 0x9B, 0x75, 0x7E, 0x8B, 0x6D, 0x70, 0x7D, 0x63, 0x65, 0x72, 0x49, 0x4F, 
   0x5A, 0x40, 0x46, 0x4F, 0x3C, 0x3E, 0x43, 0x39, 0x3D, 0x3B, 0x61, 0x6E, 0x67, 0x9E, 0xA8, 0xA9, 
   0x9C, 0xA0, 0xA5, 0x9B, 0x9F, 0xA6, 0x89, 0x91, 0x9A, 0x8F, 0x95, 0x9F, 0x93, 0x96, 0xA0, 0x90, 
   0x96, 0x9E, 0x8C, 0x97, 0x9F, 0x8B, 0x98, 0xA2, 0x8F, 0x98, 0xA7, 0x8F, 0x93, 0xA7, 0x83, 0x8A, 
   0x9F, 0x79, 0x86, 0x96, 0x8C, 0x99, 0xA3, 0x9E, 0xA5, 0xAB, 0xA3, 0xA2, 0xAA, 0x97, 0x92, 0x9B, 
   0x8D, 0x89, 0x91, 0x93, 0x93, 0x99, 0x96, 0x95, 0x9B, 0xA0, 0x9C, 0xA2, 0x8C, 0x84, 0x97, 0x6D, 
   0x71, 0x8B, 0x65, 0x78, 0x93, 0x5A, 0x69, 0x84, 0x4C, 0x55, 0x5F, 0x75, 0x7F, 0x7F, 0x9C, 0xA2, 
   0xA5, 0x93, 0x96, 0x9B, 0x85, 0x84, 0x8B, 0x90, 0x8C, 0x90, 0x97, 0x91, 0x96, 0x9B, 0x97, 0x9E, 
   0x9C, 0x9B, 0xA6, 0xA0, 0x9E, 0xA5, 0x44, 0x4A, 0x51, 0x51, 0x55, 0x58, 0x65, 0x6B, 0x68, 0x72, 
   0x78, 0x77, 0x73, 0x72, 0x80, 0x6E, 0x6F, 0x84, 0x8A, 0x8D, 0x99, 0x9E, 0xA0, 0xAD, 0x96, 0x99, 
   0xB0, 0x98, 0x9B, 0xAE, 0xAF, 0xAD, 0xB9, 0x9D, 0x9C, 0xA2, 0xAC, 0xAD, 0xB1, 0xB3, 0xB3, 0xB3, 
   0x9E, 0xA0, 0x99, 0x85, 0x83, 0x7E, 0x8A, 0x8B, 0x88, 0x7C, 0x78, 0x78, 0x4A, 0x47, 0x4C, 0x57, 
   0x57, 0x5C, 0x76, 0x77, 0x78, 0x7E, 0x85, 0x81, 0x92, 0x9C, 0x96, 0xAD, 0xAB, 0xAF, 0x98, 0x9F, 
   0xA2, 0x8E, 0x98, 0x9D, 0x8E, 0x94, 0x9D, 0x8D, 0x96, 0x9E, 0x90, 0x9B, 0xA1, 0x9B, 0xA3, 0xA9, 
   0xA3, 0xAA, 0xB0, 0xA2, 0xA6, 0xAA, 0x86, 0x8D, 0x8F, 0x63, 0x6E, 0x75, 0x44, 0x4C, 0x52, 0x2E, 
   0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x29, 0x2B, 0x30, 0x28, 0x2D, 0x36, 0x2B, 0x35, 0x40, 0x2B, 0x37, 
   0x41, 0x62, 0x69, 0x73, 0x74, 0x77, 0x85, 0x74, 0x77, 0x87, 0x76, 0x7C, 0x88, 0x7B, 0x83, 0x8B, 
   0x83, 0x8A, 0x94, 0x8B, 0x91, 0x9E, 0x8E, 0x93, 0xA0, 0x87, 0x8C, 0x9B, 0x88, 0x87, 0x96, 0x9B, 
   0x9A, 0xA3, 0xBE, 0xBE, 0xC1, 0xA6, 0xA9, 0xAC, 0x8E, 0x93, 0x9A, 0x7A, 0x7A, 0x83, 0x64, 0x60, 
   0x67, 0x5E, 0x5C, 0x65, 0x60, 0x5F, 0x65, 0x5A, 0x5E, 0x62, 0x5E, 0x62, 0x64, 0x6D, 0x70, 0x73, 
   0x6E, 0x71, 0x78, 0x62, 0x63, 0x6B, 0x5D, 0x5E, 0x65, 0x58, 0x58, 0x60, 0x51, 0x52, 0x5C, 0x57, 
   0x5A, 0x66, 0x5C, 0x5F, 0x69, 0x50, 0x53, 0x5F, 0x47, 0x4D, 0x5B, 0x53, 0x5A, 0x69, 0x44, 0x45, 
   0x4D, 0x0F, 0x10, 0x13, 0x19, 0x21, 0x1F, 0x68, 0x6C, 0x6F, 0x92, 0x90, 0x94, 0x91, 0x93, 0x9A, 
   0x90, 0x90, 0x97, 0x9C, 0x9B, 0xA3, 0xA5, 0xA3, 0xAB, 0x8A, 0x89, 0x8F, 0x81, 0x86, 0x8D, 0x86, 
   0x8C, 0x98, 0x87, 0x8D, 0x9A, 0x77, 0x80, 0x8E, 0x6B, 0x77, 0x89, 0x6F, 0x76, 0x8C, 0x5E, 0x64, 
   0x75, 0x72, 0x7B, 0x86, 0x8D, 0x97, 0xA1, 0x8F, 0x96, 0x9D, 0x8C, 0x93, 0x99, 0x87, 0x84, 0x8A, 
   0x83, 0x7E, 0x83, 0x83, 0x80, 0x87, 0x84, 0x85, 0x8A, 0x87, 0x89, 0x87, 0x88, 0x85, 0x83, 0x8F, 
   0x89, 0x8B, 0xA5, 0x9F, 0xA1, 0xA5, 0xA2, 0xA4, 0x9E, 0x9A, 0xA0, 0x92, 0x90, 0x96, 0x8B, 0x92, 
   0x97, 0x93, 0x92, 0x9D, 0x92, 0x92, 0x9E, 0x95, 0x98, 0xA4, 0x93, 0x97, 0xA2, 0x9C, 0x9F, 0xA8, 
   0xA2, 0xA3, 0xAB, 0xA0, 0xA1, 0xA7, 0x95, 0x98, 0x9F, 0x97, 0x9B, 0xA2, 0xA2, 0xA2, 0xA8, 0x88, 
   0x88, 0x88, 0x4F, 0x4C, 0x4A, 0x23, 0x25, 0x25, 0x30, 0x33, 0x33, 0x5B, 0x5E, 0x5E, 0x81, 0x88, 
   0x8A, 0x94, 0x9E, 0xA3, 0x86, 0x8E, 0x96, 0x7D, 0x82, 0x89, 0x6F, 0x74, 0x7B, 0x7B, 0x7F, 0x7F, 
   0x89, 0x8C, 0x8A, 0x8B, 0x8B, 0x8C, 0x4A, 0x45, 0x4A, 0x38, 0x37, 0x3C, 0x4C, 0x4F, 0x5A, 0x59, 
   0x5E, 0x6A, 0x65, 0x69, 0x78, 0x74, 0x7A, 0x88, 0x7F, 0x85, 0x92, 0x69, 0x68, 0x78, 0x64, 0x5E, 
   0x6D, 0x67, 0x61, 0x6E, 0x67, 0x61, 0x70, 0x63, 0x62, 0x6D, 0x68, 0x68, 0x76, 0x7E, 0x7C, 0x8A, 
   0x7F, 0x7E, 0x8A, 0x7A, 0x7B, 0x84, 0x94, 0x90, 0x96, 0xA4, 0x9C, 0xA6, 0x9B, 0x94, 0x9F, 0x90, 
   0x90, 0x9B, 0x8E, 0x90, 0x9A, 0x8F, 0x90, 0x99, 0x87, 0x88, 0x95, 0x84, 0x91, 0xA5, 0x91, 0xA3, 
   0xC2, 0x6B, 0x7D, 0xA3, 0x4A, 0x5B, 0x75, 0x5D, 0x6A, 0x7B, 0x6D, 0x7B, 0x8A, 0x6C, 0x76, 0x88, 
   0x64, 0x6F, 0x80, 0x5C, 0x67, 0x77, 0x65, 0x70, 0x7C, 0x83, 0x8F, 0x98, 0xB0, 0xB7, 0xC4, 0xB0, 
   0xB3, 0xC0, 0x88, 0x91, 0xA0, 0x7A, 0x8A, 0x98, 0x8B, 0x97, 0xA2, 0x8E, 0x96, 0xA4, 0x7E, 0x88, 
   0x96, 0x82, 0x8B, 0x99, 0x87, 0x8F, 0x9D, 0x89, 0x90, 0xA0, 0x81, 0x88, 0x9A, 0x78, 0x83, 0x93, 
   0x7E, 0x8E, 0x98, 0x8D, 0x98, 0xA6, 0x87, 0x90, 0xA5, 0x73, 0x73, 0x8F, 0x63, 0x60, 0x80, 0x5A, 
   0x59, 0x74, 0x63, 0x60, 0x7B, 0x66, 0x65, 0x7B, 0x66, 0x63, 0x7C, 0x68, 0x66, 0x7F, 0x6A, 0x67, 
   0x7F, 0x65, 0x61, 0x7B, 0x31, 0x2E, 0x46, 0x1F, 0x20, 0x2D, 0x22, 0x29, 0x32, 0x25, 0x30, 0x38, 
   0x3B, 0x4A, 0x4E, 0x65, 0x74, 0x76, 0x8B, 0x96, 0x9B, 0x9C, 0xA3, 0xAC, 0xA2, 0xA3, 0xAD, 0x9D, 
   0x9D, 0xA6, 0x8D, 0x8F, 0x97, 0x8B, 0x91, 0x96, 0xA5, 0xA7, 0xAE, 0xA5, 0xA6, 0xB2, 0xA0, 0xA2, 
   0xAF, 0x97, 0x9B, 0xA5, 0x90, 0x97, 0xA0, 0x90, 0x94, 0xA3, 0x8F, 0x95, 0xA4, 0x8F, 0x95, 0xA1, 
   0x8C, 0x94, 0x9E, 0x86, 0x91, 0x9F, 0x88, 0x93, 0xA0, 0x89, 0x94, 0xA0, 0x8B, 0x97, 0xA5, 0x9A, 
   0xA3, 0xB0, 0x86, 0x8A, 0x96, 0x6E, 0x77, 0x83, 0x6D, 0x71, 0x7E, 0x64, 0x63, 0x71, 0x49, 0x4C, 
   0x57, 0x41, 0x44, 0x4C, 0x34, 0x39, 0x3B, 0x4F, 0x58, 0x53, 0x8B, 0x93, 0x8F, 0x91, 0x99, 0x9D, 
   0x82, 0x8C, 0x94, 0x84, 0x8C, 0x97, 0x87, 0x8F, 0x9B, 0x89, 0x92, 0x9F, 0x8F, 0x94, 0xA1, 0x92, 
   0x92, 0x9C, 0x8B, 0x92, 0x9A, 0x8B, 0x97, 0x9D, 0x8C, 0x97, 0xA1, 0x89, 0x92, 0xA2, 0x80, 0x8B, 
   0x9F, 0x7B, 0x89, 0x9A, 0x8C, 0x97, 0xA4, 0xA1, 0xA4, 0xAF, 0xAB, 0xA8, 0xB3, 0xA3, 0x9F, 0xA9, 
   0x9B, 0x99, 0xA2, 0x93, 0x8F, 0x97, 0x98, 0x94, 0x9C, 0x9C, 0x9B, 0xA1, 0x8E, 0x8B, 0x98, 0x70, 
   0x72, 0x87, 0x71, 0x82, 0x9A, 0x65, 0x77, 0x90, 0x74, 0x80, 0x8C, 0x9A, 0xA2, 0xA5, 0x9E, 0xA2, 
   0xA5, 0x98, 0x99, 0xA0, 0x8E, 0x8D, 0x95, 0x89, 0x86, 0x8E, 0x90, 0x8F, 0x97, 0x94, 0x96, 0x9F, 
   0x96, 0x99, 0xA6, 0x9B, 0x9B, 0xA4, 0x49, 0x4C, 0x54, 0x48, 0x4C, 0x51, 0x46, 0x4E, 0x4F, 0x5F, 
   0x63, 0x64, 0x74, 0x73, 0x7B, 0x67, 0x6B, 0x7B, 0x6B, 0x74, 0x80, 0xA4, 0xA8, 0xB4, 0xA9, 0xAF, 
   0xBF, 0x99, 0x9B, 0xAA, 0xA7, 0xA3, 0xB2, 0x98, 0x97, 0x9F, 0xBE, 0xC0, 0xC0, 0xB3, 0xB3, 0xB1, 
   0x82, 0x85, 0x80, 0x84, 0x87, 0x82, 0x78, 0x81, 0x77, 0x4E, 0x54, 0x4E, 0x51, 0x52, 0x52, 0x70, 
   0x71, 0x74, 0x7C, 0x7D, 0x7E, 0x7B, 0x7A, 0x7B, 0x8D, 0x91, 0x90, 0xA0, 0x9F, 0xA1, 0x9A, 0x9D, 
   0x9D, 0x94, 0x99, 0x9E, 0x91, 0x97, 0xA0, 0x8E, 0x99, 0x9F, 0x96, 0xA0, 0xA3, 0xA2, 0xA9, 0xAE, 
   0x9F, 0xA8, 0xAB, 0x98, 0x9F, 0xA3, 0x8A, 0x90, 0x93, 0x68, 0x6D, 0x74, 0x4F, 0x57, 0x5A, 0x29, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 0x2B, 0x2E, 0x32, 0x28, 0x2F, 0x36, 0x2A, 0x31, 0x3A, 0x2B, 0x32, 
   0x38, 0x5D, 0x63, 0x6A, 0x76, 0x7B, 0x88, 0x74, 0x78, 0x87, 0x77, 0x7C, 0x88, 0x76, 0x7B, 0x87, 
   0x7E, 0x82, 0x91, 0x8D, 0x91, 0xA0, 0x92, 0x96, 0xA3, 0x89, 0x8D, 0x9D, 0x8A, 0x8C, 0x9A, 0xAC, 
   0xAE, 0xB7, 0xBC, 0xBA, 0xBF, 0xA2, 0x9F, 0xA3, 0x9C, 0x99, 0x9E, 0x9B, 0x95, 0x9D, 0x71, 0x6B, 
   0x74, 0x62, 0x5C, 0x65, 0x65, 0x68, 0x6D, 0x5C, 0x5F, 0x65, 0x60, 0x62, 0x68, 0x6B, 0x71, 0x74, 
   0x6B, 0x70, 0x76, 0x66, 0x67, 0x6E, 0x5B, 0x5B, 0x63, 0x54, 0x55, 0x5F, 0x4A, 0x4D, 0x5B, 0x4F, 
   0x52, 0x62, 0x5B, 0x5E, 0x6C, 0x63, 0x67, 0x74, 0x63, 0x6C, 0x7C, 0x6A, 0x72, 0x82, 0x36, 0x3A, 
   0x42, 0x0E, 0x10, 0x12, 0x4A, 0x50, 0x4E, 0x97, 0x97, 0x9C, 0xA1, 0x9F, 0xA4, 0x9B, 0x9A, 0xA1, 
   0x9D, 0x98, 0xA1, 0xB0, 0xAB, 0xB5, 0xB4, 0xB2, 0xBD, 0x8D, 0x90, 0x9A, 0x7F, 0x84, 0x8F, 0x75, 
   0x7F, 0x89, 0x85, 0x8C, 0x98, 0x94, 0x98, 0xA1, 0x9B, 0x9E, 0xA4, 0xA4, 0xA6, 0xAF, 0x89, 0x90, 
   0x97, 0x81, 0x8B, 0x91, 0x89, 0x8E, 0x98, 0x83, 0x88, 0x8F, 0x85, 0x8C, 0x8E, 0x91, 0x8D, 0x91, 
   0x8D, 0x86, 0x8D, 0x8E, 0x88, 0x91, 0x8C, 0x8C, 0x92, 0x8C, 0x8D, 0x90, 0x86, 0x83, 0x86, 0x7C, 
   0x76, 0x7C, 0x90, 0x8B, 0x8D, 0xA5, 0xA0, 0xA3, 0xC5, 0xBD, 0xC4, 0xAD, 0xA6, 0xAD, 0x87, 0x88, 
   0x93, 0x8C, 0x89, 0x94, 0x8F, 0x8D, 0x98, 0x90, 0x90, 0x9C, 0x93, 0x93, 0x9F, 0x9A, 0x99, 0xA5, 
   0x9D, 0x9B, 0xA5, 0x98, 0x97, 0x9F, 0x8E, 0x96, 0x9B, 0x8F, 0x95, 0x9B, 0x7D, 0x7E, 0x82, 0x4F, 
   0x50, 0x52, 0x35, 0x32, 0x35, 0x40, 0x3F, 0x48, 0x40, 0x42, 0x4D, 0x3B, 0x42, 0x48, 0x4C, 0x52, 
   0x52, 0x7D, 0x85, 0x84, 0x98, 0xA1, 0xA0, 0x88, 0x8D, 0x8F, 0x72, 0x76, 0x7E, 0x81, 0x84, 0x8A, 
   0x90, 0x93, 0x97, 0x97, 0x96, 0x9D, 0x58, 0x54, 0x5B, 0x31, 0x32, 0x37, 0x5A, 0x5C, 0x66, 0x62, 
   0x67, 0x70, 0x66, 0x67, 0x72, 0x6A, 0x70, 0x79, 0x80, 0x86, 0x92, 0x6F, 0x6D, 0x7D, 0x66, 0x60, 
   0x6E, 0x68, 0x62, 0x6C, 0x6D, 0x67, 0x71, 0x74, 0x73, 0x7A, 0x85, 0x87, 0x8F, 0x97, 0x94, 0x9F, 
   0x8B, 0x89, 0x93, 0x7A, 0x7E, 0x84, 0x9A, 0x9B, 0xA1, 0xAC, 0xA9, 0xB0, 0xA0, 0x9F, 0xA4, 0x93, 
   0x92, 0x9A, 0x92, 0x8F, 0x99, 0x89, 0x8A, 0x98, 0x88, 0x92, 0xA5, 0x88, 0xA7, 0xBF, 0x95, 0xB9, 
   0xD7, 0x7B, 0x97, 0xB6, 0x56, 0x6C, 0x86, 0x59, 0x69, 0x7A, 0x65, 0x77, 0x84, 0x65, 0x73, 0x82, 
   0x5C, 0x6D, 0x7C, 0x66, 0x77, 0x83, 0x6C, 0x7C, 0x87, 0x6C, 0x7C, 0x86, 0xAB, 0xB7, 0xBD, 0xA8, 
   0xAD, 0xB7, 0x84, 0x8F, 0x9E, 0x7B, 0x8C, 0x97, 0x87, 0x90, 0x9C, 0x8B, 0x91, 0x9F, 0x83, 0x89, 
   0x98, 0x88, 0x8E, 0x9C, 0x8D, 0x91, 0x9F, 0x86, 0x89, 0x9A, 0x7F, 0x82, 0x98, 0x8F, 0x97, 0xA6, 
   0x8B, 0x96, 0xA2, 0x88, 0x91, 0xA2, 0x7F, 0x87, 0x9E, 0x6D, 0x6E, 0x88, 0x60, 0x5E, 0x7D, 0x68, 
   0x6A, 0x86, 0x78, 0x75, 0x92, 0x69, 0x66, 0x81, 0x64, 0x60, 0x7E, 0x64, 0x5F, 0x7E, 0x5F, 0x5C, 
   0x78, 0x6B, 0x69, 0x85, 0x70, 0x6C, 0x8B, 0x47, 0x3F, 0x58, 0x2A, 0x29, 0x37, 0x2B, 0x31, 0x39, 
   0x32, 0x3B, 0x44, 0x3A, 0x42, 0x4C, 0x4B, 0x54, 0x5B, 0x50, 0x57, 0x5D, 0x57, 0x5F, 0x63, 0x56, 
   0x5E, 0x64, 0x58, 0x61, 0x67, 0x74, 0x7F, 0x83, 0x9D, 0xA3, 0xA6, 0x99, 0x9E, 0xA3, 0x90, 0x97, 
   0x9F, 0x8A, 0x94, 0x9C, 0x89, 0x95, 0x9C, 0x8E, 0x94, 0xA0, 0x95, 0x9B, 0xA8, 0x95, 0x9A, 0xA5, 
   0x8A, 0x91, 0x9D, 0x85, 0x92, 0x9E, 0x90, 0x9C, 0xA7, 0xA3, 0xA9, 0xB5, 0x95, 0x9F, 0xAB, 0x88, 
   0x95, 0xA1, 0x75, 0x7B, 0x8A, 0x6C, 0x72, 0x82, 0x6D, 0x72, 0x7E, 0x5C, 0x5D, 0x69, 0x47, 0x49, 
   0x52, 0x3E, 0x41, 0x47, 0x30, 0x3A, 0x39, 0x6B, 0x79, 0x73, 0x99, 0x9E, 0x9D, 0x84, 0x8A, 0x91, 
   0x7E, 0x88, 0x92, 0x83, 0x8B, 0x96, 0x8C, 0x8F, 0x9B, 0x80, 0x85, 0x94, 0x7E, 0x85, 0x95, 0x81, 
   0x83, 0x92, 0x82, 0x8B, 0x95, 0x85, 0x90, 0x96, 0x85, 0x8F, 0x96, 0x7F, 0x88, 0x95, 0x79, 0x85, 
   0x97, 0x7B, 0x8A, 0x9A, 0x84, 0x90, 0x9F, 0x87, 0x8F, 0x9F, 0x8B, 0x92, 0x9F, 0x99, 0x9E, 0xA9, 
   0xB5, 0xBA, 0xC2, 0xA8, 0xA4, 0xAE, 0x97, 0x92, 0x9C, 0x92, 0x91, 0x9B, 0x92, 0x8E, 0x9C, 0x72, 
   0x6E, 0x84, 0x6B, 0x79, 0x93, 0x66, 0x76, 0x8F, 0x72, 0x7E, 0x8C, 0x85, 0x90, 0x93, 0x92, 0x96, 
   0x9D, 0x95, 0x96, 0xA1, 0x8F, 0x91, 0x9A, 0x89, 0x8C, 0x91, 0x8D, 0x92, 0x96, 0x93, 0x98, 0x9F, 
   0x92, 0x96, 0xA2, 0x98, 0x99, 0xA0, 0x79, 0x75, 0x7F, 0x4D, 0x51, 0x57, 0x42, 0x4D, 0x53, 0x44, 
   0x4F, 0x55, 0x5A, 0x65, 0x68, 0x65, 0x6E, 0x77, 0x69, 0x70, 0x7C, 0x8B, 0x92, 0x9E, 0xAD, 0xAE, 
   0xBA, 0xA0, 0x9D, 0xAB, 0x92, 0x8E, 0x9E, 0x9C, 0x9F, 0xA4, 0xB2, 0xB6, 0xB1, 0x84, 0x84, 0x81, 
   0x6F, 0x70, 0x6E, 0x6E, 0x71, 0x71, 0x4F, 0x53, 0x55, 0x57, 0x5C, 0x60, 0x72, 0x71, 0x73, 0x79, 
   0x79, 0x78, 0x78, 0x79, 0x77, 0x7A, 0x77, 0x77, 0x8C, 0x8E, 0x8F, 0xA6, 0xA6, 0xA5, 0x9E, 0x9E, 
   0x9E, 0x97, 0x98, 0x9F, 0x8F, 0x95, 0xA1, 0x8E, 0x97, 0xA2, 0xA2, 0xA8, 0xB0, 0xB7, 0xBB, 0xC5, 
   0xAE, 0xB4, 0xB8, 0x99, 0xA4, 0xAA, 0x82, 0x8D, 0x95, 0x68, 0x71, 0x7B, 0x50, 0x59, 0x5E, 0x30, 
   0x36, 0x37, 0x28, 0x27, 0x2A, 0x27, 0x2B, 0x28, 0x26, 0x2E, 0x2E, 0x2B, 0x2E, 0x31, 0x2D, 0x2C, 
   0x2E, 0x4E, 0x51, 0x55, 0x76, 0x7B, 0x88, 0x74, 0x79, 0x86, 0x7A, 0x7E, 0x88, 0x89, 0x8C, 0x9A, 
   0x8D, 0x8E, 0xA0, 0x91, 0x92, 0xA2, 0x95, 0x97, 0xA4, 0x91, 0x93, 0xA2, 0x95, 0x95, 0xA5, 0xA0, 
   0xA1, 0xAE, 0xA7, 0xA3, 0xAD, 0xAA, 0xA3, 0xA9, 0xAA, 0xA3, 0xA8, 0xBA, 0xAF, 0xB7, 0xAA, 0xA1, 
   0xAB, 0x85, 0x7E, 0x86, 0x65, 0x6A, 0x6D, 0x5F, 0x63, 0x68, 0x63, 0x65, 0x6A, 0x61, 0x69, 0x6D, 
   0x66, 0x6C, 0x72, 0x6D, 0x6F, 0x73, 0x6B, 0x69, 0x71, 0x70, 0x6D, 0x79, 0x6D, 0x6D, 0x7F, 0x6B, 
   0x6C, 0x7F, 0x6A, 0x69, 0x7A, 0x6E, 0x6F, 0x80, 0x62, 0x6A, 0x7C, 0x54, 0x5C, 0x6C, 0x16, 0x1A, 
   0x22, 0x2E, 0x32, 0x33, 0x7C, 0x7E, 0x7C, 0xA4, 0xA4, 0xA7, 0xA7, 0xA7, 0xAB, 0xA7, 0xA7, 0xAC, 
   0xAA, 0xAA, 0xAF, 0xB8, 0xB5, 0xBF, 0xB1, 0xB0, 0xBD, 0x92, 0x94, 0x9C, 0x86, 0x86, 0x8C, 0x75, 
   0x76, 0x7F, 0x74, 0x75, 0x84, 0x72, 0x74, 0x82, 0x77, 0x7D, 0x83, 0x7B, 0x7E, 0x86, 0x74, 0x78, 
   0x80, 0x72, 0x79, 0x7F, 0x77, 0x7C, 0x82, 0x6B, 0x6E, 0x76, 0x66, 0x6C, 0x70, 0x77, 0x78, 0x7B, 
   0x83, 0x84, 0x8A, 0x8A, 0x8B, 0x90, 0x81, 0x86, 0x88, 0x86, 0x87, 0x8A, 0x80, 0x84, 0x8A, 0x7A, 
   0x7E, 0x7F, 0x7D, 0x7D, 0x7B, 0x81, 0x83, 0x84, 0x8F, 0x92, 0x93, 0xA8, 0xA7, 0xA8, 0xA6, 0xA2, 
   0xAE, 0x90, 0x94, 0x9B, 0x97, 0x99, 0xA0, 0xA7, 0xA6, 0xB0, 0x9F, 0x9C, 0xA7, 0x94, 0x93, 0x9F, 
   0x8C, 0x8D, 0x98, 0x7D, 0x7F, 0x88, 0x77, 0x71, 0x78, 0x5D, 0x59, 0x5B, 0x52, 0x4C, 0x4F, 0x55, 
   0x50, 0x59, 0x51, 0x4A, 0x57, 0x4D, 0x4B, 0x54, 0x4F, 0x4F, 0x56, 0x52, 0x51, 0x5A, 0x46, 0x48, 
   0x4C, 0x38, 0x41, 0x45, 0x5B, 0x66, 0x69, 0x90, 0x94, 0x96, 0xA1, 0x9C, 0xA5, 0xA6, 0x9F, 0xA5, 
   0xAB, 0xA5, 0xA9, 0xA6, 0x9D, 0xA5, 0x89, 0x84, 0x8A, 0x52, 0x52, 0x5B, 0x54, 0x53, 0x62, 0x5A, 
   0x5E, 0x6C, 0x62, 0x61, 0x6C, 0x5A, 0x5E, 0x67, 0x68, 0x73, 0x7E, 0x6A, 0x6E, 0x7E, 0x65, 0x65, 
   0x71, 0x6F, 0x6F, 0x77, 0x8A, 0x89, 0x8F, 0x8D, 0x8B, 0x92, 0x92, 0x8B, 0x95, 0x91, 0x87, 0x96, 
   0x94, 0x91, 0x9D, 0x97, 0x97, 0x9F, 0x9B, 0x9A, 0xA5, 0x98, 0x9D, 0xA5, 0x9C, 0x99, 0xA0, 0x92, 
   0x8E, 0x96, 0x93, 0x92, 0xA0, 0x92, 0x9B, 0xB5, 0x92, 0xA5, 0xC7, 0x94, 0xB7, 0xD8, 0x8D, 0xB1, 
   0xCD, 0x71, 0x8D, 0xAB, 0x52, 0x66, 0x85, 0x46, 0x54, 0x6A, 0x52, 0x64, 0x6D, 0x60, 0x6E, 0x77, 
   0x68, 0x75, 0x7F, 0x76, 0x81, 0x8A, 0x75, 0x7E, 0x89, 0x64, 0x6E, 0x77, 0x9F, 0xA8, 0xAC, 0x9F, 
   0xA6, 0xB0, 0x7B, 0x8A, 0x97, 0x7D, 0x8F, 0x9A, 0x85, 0x91, 0x9C, 0x80, 0x8B, 0x95, 0x7E, 0x89, 
   0x95, 0x95, 0xA0, 0xAA, 0x89, 0x92, 0x9D, 0x77, 0x80, 0x8E, 0x76, 0x7F, 0x92, 0x82, 0x8F, 0x9C, 
   0x82, 0x8E, 0x99, 0x8B, 0x91, 0xA1, 0x83, 0x87, 0x9A, 0x72, 0x71, 0x88, 0x5F, 0x5F, 0x7B, 0x63, 
   0x68, 0x84, 0x6F, 0x72, 0x8E, 0x66, 0x68, 0x81, 0x68, 0x6A, 0x88, 0x64, 0x66, 0x84, 0x67, 0x69, 
   0x84, 0x69, 0x6F, 0x89, 0x81, 0x83, 0x9E, 0x8B, 0x81, 0x9B, 0x44, 0x3F, 0x50, 0x35, 0x37, 0x44, 
   0x3E, 0x43, 0x50, 0x3E, 0x47, 0x53, 0x3B, 0x44, 0x51, 0x3E, 0x46, 0x54, 0x46, 0x4D, 0x59, 0x4E, 
   0x55, 0x5F, 0x89, 0x8E, 0x94, 0xB3, 0xB6, 0xB9, 0xAB, 0xA8, 0xAD, 0x98, 0x9A, 0xA2, 0x8B, 0x94, 
   0x9E, 0x89, 0x94, 0x9E, 0x88, 0x93, 0x9E, 0x8C, 0x93, 0xA1, 0x95, 0x99, 0xA5, 0x97, 0x9B, 0xA8, 
   0x8B, 0x91, 0xA2, 0x89, 0x94, 0xA2, 0x92, 0xA1, 0xAF, 0xA7, 0xB3, 0xC0, 0x94, 0x9D, 0xA9, 0x82, 
   0x8A, 0x96, 0x73, 0x76, 0x84, 0x73, 0x78, 0x83, 0x69, 0x6B, 0x76, 0x56, 0x59, 0x65, 0x41, 0x48, 
   0x4D, 0x39, 0x3D, 0x41, 0x35, 0x3E, 0x3C, 0x70, 0x82, 0x7A, 0x91, 0x97, 0x9A, 0x8C, 0x90, 0x99, 
   0x8B, 0x90, 0x9A, 0x91, 0x96, 0x9C, 0x9B, 0x9C, 0xA1, 0x95, 0x95, 0xA0, 0x89, 0x8C, 0x9C, 0x81, 
   0x8A, 0x99, 0x82, 0x8B, 0x9B, 0x86, 0x91, 0x9B, 0x88, 0x91, 0x9A, 0x85, 0x8E, 0x9D, 0x7D, 0x88, 
   0x9B, 0x7C, 0x88, 0x9B, 0x85, 0x8C, 0x9F, 0x8A, 0x8E, 0xA4, 0x8C, 0x93, 0xA4, 0x86, 0x8E, 0x9A, 
   0x94, 0x9B, 0xA4, 0xAB, 0xA7, 0xB2, 0xA2, 0x9E, 0xAB, 0x96, 0x94, 0x9D, 0x99, 0x8F, 0x9A, 0x77, 
   0x6C, 0x82, 0x64, 0x6F, 0x8E, 0x5B, 0x69, 0x86, 0x60, 0x6C, 0x81, 0x71, 0x82, 0x8B, 0x88, 0x91, 
   0x97, 0x93, 0x96, 0x9F, 0x91, 0x95, 0xA0, 0x8E, 0x91, 0x9B, 0x8D, 0x91, 0x97, 0x92, 0x95, 0x9A, 
   0x93, 0x95, 0x9B, 0x95, 0x97, 0x9B, 0x95, 0x96, 0xA2, 0x79, 0x7C, 0x87, 0x63, 0x68, 0x6F, 0x4A, 
   0x50, 0x57, 0x46, 0x47, 0x54, 0x47, 0x47, 0x54, 0x43, 0x43, 0x4E, 0x67, 0x6C, 0x75, 0x97, 0x95, 
   0x9C, 0xAC, 0xAA, 0xAC, 0x99, 0x99, 0x9B, 0xAE, 0xB2, 0xB4, 0x93, 0x9A, 0x9E, 0x6B, 0x6F, 0x72, 
   0x6B, 0x6C, 0x6A, 0x43, 0x45, 0x47, 0x43, 0x48, 0x4A, 0x5E, 0x5D, 0x60, 0x6D, 0x69, 0x6C, 0x76, 
   0x70, 0x75, 0x75, 0x70, 0x74, 0x75, 0x73, 0x75, 0x88, 0x8C, 0x8E, 0xA7, 0xB0, 0xB2, 0xA5, 0xAB, 
   0xB3, 0x96, 0x9B, 0xA3, 0x92, 0x93, 0x9F, 0x9C, 0xA2, 0xAF, 0xB5, 0xB8, 0xC0, 0xBD, 0xC1, 0xC6, 
   0xAF, 0xB8, 0xBE, 0x9C, 0xA8, 0xB1, 0x7E, 0x8B, 0x95, 0x68, 0x76, 0x7D, 0x55, 0x62, 0x64, 0x31, 
   0x33, 0x34, 0x25, 0x20, 0x22, 0x24, 0x28, 0x25, 0x24, 0x29, 0x26, 0x2B, 0x2A, 0x2A, 0x28, 0x2A, 
   0x2A, 0x3B, 0x41, 0x41, 0x6E, 0x71, 0x79, 0x78, 0x79, 0x87, 0x7C, 0x7F, 0x8C, 0x8B, 0x8C, 0x98, 
   0x8E, 0x89, 0x96, 0x95, 0x8F, 0x9B, 0x95, 0x91, 0x9A, 0x96, 0x92, 0x9C, 0x9A, 0x96, 0xA1, 0xA0, 
   0x9D, 0xA7, 0xAF, 0xA7, 0xB0, 0xB3, 0xA8, 0xAE, 0xAE, 0xA5, 0xA8, 0xB6, 0xAF, 0xB0, 0xC3, 0xBE, 
   0xBE, 0xC3, 0xBD, 0xC0, 0x9F, 0x9B, 0x9C, 0x7D, 0x7D, 0x7D, 0x6E, 0x73, 0x77, 0x61, 0x66, 0x6D, 
   0x67, 0x6A, 0x72, 0x72, 0x70, 0x78, 0x74, 0x75, 0x7C, 0x6D, 0x6E, 0x7B, 0x64, 0x6B, 0x7C, 0x66, 
   0x6C, 0x7B, 0x68, 0x6A, 0x7D, 0x60, 0x66, 0x7D, 0x55, 0x5F, 0x6E, 0x39, 0x3B, 0x43, 0x17, 0x15, 
   0x19, 0x53, 0x55, 0x5D, 0x8E, 0x8D, 0x91, 0xA2, 0x9F, 0xA3, 0xAA, 0xA8, 0xB1, 0xAD, 0xA8, 0xB1, 
   0xAE, 0xAC, 0xB3, 0xB9, 0xB5, 0xBB, 0xB3, 0xAE, 0xB7, 0x96, 0x95, 0x9C, 0x85, 0x8D, 0x90, 0x75, 
   0x7F, 0x87, 0x73, 0x79, 0x8A, 0x78, 0x80, 0x8E, 0x7A, 0x83, 0x8D, 0x70, 0x77, 0x86, 0x60, 0x69, 
   0x79, 0x58, 0x5D, 0x6D, 0x59, 0x5C, 0x6A, 0x56, 0x5B, 0x6B, 0x56, 0x5C, 0x69, 0x54, 0x5D, 0x63, 
   0x5D, 0x65, 0x69, 0x5E, 0x65, 0x69, 0x56, 0x5B, 0x61, 0x4E, 0x53, 0x59, 0x4A, 0x54, 0x57, 0x56, 
   0x5F, 0x61, 0x5F, 0x64, 0x67, 0x60, 0x67, 0x69, 0x61, 0x6B, 0x6B, 0x6D, 0x74, 0x74, 0x78, 0x7D, 
   0x7E, 0x83, 0x82, 0x86, 0x8F, 0x93, 0x92, 0xA7, 0xA9, 0xA7, 0xA3, 0xA4, 0xA5, 0x8F, 0x93, 0x97, 
   0x7B, 0x80, 0x84, 0x6D, 0x6F, 0x73, 0x65, 0x62, 0x69, 0x5E, 0x5A, 0x62, 0x5B, 0x56, 0x5E, 0x57, 
   0x53, 0x5A, 0x57, 0x53, 0x5A, 0x55, 0x50, 0x57, 0x54, 0x50, 0x58, 0x51, 0x50, 0x55, 0x51, 0x4F, 
   0x53, 0x51, 0x4D, 0x55, 0x45, 0x46, 0x48, 0x57, 0x5D, 0x5A, 0x8D, 0x93, 0x94, 0xA6, 0xA8, 0xAC, 
   0xA8, 0xA6, 0xA9, 0xA5, 0x9D, 0xA0, 0x9E, 0xA0, 0xA2, 0x8A, 0x89, 0x93, 0x63, 0x63, 0x73, 0x5B, 
   0x5B, 0x6A, 0x5C, 0x5E, 0x6C, 0x5E, 0x5D, 0x6E, 0x65, 0x6B, 0x76, 0x6A, 0x6F, 0x7D, 0x6F, 0x70, 
   0x7C, 0x83, 0x83, 0x8F, 0x8F, 0x90, 0x9D, 0x90, 0x90, 0x97, 0x97, 0x90, 0x99, 0x93, 0x89, 0x96, 
   0x8F, 0x87, 0x96, 0x9A, 0x94, 0x9F, 0x9D, 0x9A, 0xA7, 0x95, 0x99, 0xAA, 0x8C, 0x93, 0xA1, 0x9A, 
   0xA5, 0xB3, 0xAA, 0xBA, 0xCE, 0x9C, 0xB4, 0xD1, 0x93, 0xB1, 0xD2, 0x8E, 0xB1, 0xCF, 0x8D, 0xAF, 
   0xC9, 0x7D, 0x96, 0xB2, 0x5A, 0x70, 0x8A, 0x41, 0x52, 0x69, 0x35, 0x45, 0x52, 0x61, 0x72, 0x76, 
   0x7C, 0x89, 0x92, 0x7F, 0x86, 0x93, 0x74, 0x7B, 0x8A, 0x65, 0x6E, 0x82, 0x74, 0x82, 0x92, 0x6B, 
   0x7E, 0x88, 0x7A, 0x88, 0x9B, 0x87, 0x92, 0xA6, 0x89, 0x91, 0x9E, 0x7F, 0x87, 0x93, 0x7B, 0x87, 
   0x90, 0x7F, 0x8D, 0x95, 0x78, 0x81, 0x8E, 0x87, 0x8F, 0x9E, 0x8A, 0x95, 0xA5, 0x85, 0x93, 0x9E, 
   0x89, 0x95, 0x9D, 0x8C, 0x94, 0x9F, 0x7C, 0x83, 0x97, 0x6F, 0x73, 0x91, 0x6E, 0x6F, 0x8F, 0x6F, 
   0x6E, 0x8A, 0x6E, 0x6E, 0x8A, 0x6F, 0x70, 0x8A, 0x6E, 0x71, 0x8B, 0x67, 0x6D, 0x87, 0x6E, 0x75, 
   0x8F, 0x6D, 0x74, 0x90, 0x7A, 0x86, 0x9B, 0x95, 0x98, 0xA9, 0x54, 0x4F, 0x66, 0x3F, 0x41, 0x55, 
   0x40, 0x49, 0x57, 0x42, 0x52, 0x60, 0x4F, 0x54, 0x63, 0x4F, 0x58, 0x66, 0x52, 0x58, 0x6B, 0x73, 
   0x78, 0x86, 0xA8, 0xAD, 0xB3, 0x9F, 0xA1, 0xA4, 0x93, 0x94, 0x9A, 0x90, 0x96, 0x9E, 0x8F, 0x96, 
   0x9E, 0x8E, 0x95, 0x9B, 0x8F, 0x95, 0x9D, 0x8E, 0x95, 0x9E, 0x8E, 0x95, 0xA0, 0x8E, 0x95, 0xA1, 
   0x8C, 0x93, 0xA0, 0x8E, 0x98, 0xA7, 0x92, 0x9E, 0xAD, 0x94, 0x9F, 0xAD, 0x8E, 0x99, 0xA6, 0x86, 
   0x8D, 0x9D, 0x80, 0x7F, 0x8E, 0x79, 0x7C, 0x81, 0x66, 0x63, 0x6A, 0x4F, 0x52, 0x55, 0x47, 0x48, 
   0x4B, 0x38, 0x39, 0x3B, 0x3C, 0x48, 0x44, 0x7A, 0x8B, 0x88, 0x93, 0x9B, 0xA0, 0x8F, 0x94, 0x9A, 
   0x89, 0x96, 0x96, 0x96, 0x9E, 0x9D, 0xA5, 0xA5, 0xA9, 0x9C, 0x98, 0xA2, 0x8C, 0x8B, 0x95, 0x7A, 
   0x81, 0x88, 0x7E, 0x84, 0x8E, 0x8E, 0x99, 0xA0, 0x94, 0xA1, 0xAA, 0x95, 0xA0, 0xAC, 0x83, 0x8A, 
   0x9B, 0x7F, 0x8A, 0x99, 0x80, 0x8D, 0x9B, 0x88, 0x92, 0xA0, 0x91, 0x94, 0x9E, 0x93, 0x98, 0xA0, 
   0x91, 0x97, 0xA3, 0x9C, 0x9F, 0xAC, 0xA3, 0xA2, 0xAB, 0x98, 0x98, 0x9E, 0x9F, 0x9C, 0xA2, 0x89, 
   0x80, 0x93, 0x65, 0x69, 0x8A, 0x52, 0x68, 0x84, 0x54, 0x66, 0x86, 0x6B, 0x79, 0x8B, 0x83, 0x8B, 
   0x8D, 0x8F, 0x8F, 0x94, 0x94, 0x92, 0x9D, 0x95, 0x8F, 0x9B, 0x94, 0x8E, 0x95, 0x92, 0x90, 0x94, 
   0x94, 0x92, 0x95, 0x95, 0x92, 0x97, 0x92, 0x90, 0x9A, 0x86, 0x86, 0x90, 0x7F, 0x80, 0x86, 0x58, 
   0x5A, 0x5D, 0x35, 0x37, 0x3D, 0x31, 0x36, 0x3B, 0x3F, 0x44, 0x4B, 0x3F, 0x46, 0x4A, 0x7F, 0x7F, 
   0x7D, 0xC5, 0xC4, 0xBA, 0xC8, 0xCA, 0xBE, 0xB3, 0xB9, 0xB5, 0x7E, 0x83, 0x8C, 0x6E, 0x71, 0x76, 
   0x64, 0x64, 0x61, 0x4F, 0x4F, 0x4D, 0x5F, 0x5F, 0x61, 0x6F, 0x6B, 0x6F, 0x6B, 0x66, 0x6A, 0x67, 
   0x64, 0x69, 0x6A, 0x68, 0x6D, 0x75, 0x72, 0x75, 0x9F, 0x9B, 0x9F, 0x9F, 0xA7, 0xAB, 0xA4, 0xAC, 
   0xB8, 0xA4, 0xA9, 0xB4, 0xA8, 0xA9, 0xB2, 0xA8, 0xAD, 0xB3, 0xAA, 0xAB, 0xAE, 0xB0, 0xB2, 0xB4, 
   0xB0, 0xB5, 0xB9, 0x99, 0xA1, 0xAA, 0x75, 0x81, 0x8C, 0x69, 0x77, 0x80, 0x56, 0x64, 0x6A, 0x2F, 
   0x33, 0x36, 0x25, 0x20, 0x23, 0x22, 0x21, 0x20, 0x21, 0x22, 0x1E, 0x26, 0x23, 0x20, 0x23, 0x26, 
   0x23, 0x2B, 0x35, 0x33, 0x5F, 0x6A, 0x70, 0x73, 0x7C, 0x87, 0x85, 0x8A, 0x95, 0x92, 0x92, 0x9F, 
   0x89, 0x85, 0x92, 0x89, 0x86, 0x90, 0x8D, 0x8A, 0x93, 0x8E, 0x8B, 0x91, 0x8E, 0x89, 0x93, 0x93, 
   0x8F, 0x98, 0xAD, 0xA6, 0xAD, 0xBA, 0xB1, 0xB4, 0xB0, 0xA9, 0xAA, 0xB2, 0xAC, 0xAB, 0xB2, 0xAD, 
   0xAD, 0xBC, 0xB2, 0xB1, 0xAF, 0xAB, 0xAF, 0x81, 0x81, 0x8C, 0x68, 0x6D, 0x7A, 0x66, 0x6C, 0x7A, 
   0x65, 0x66, 0x74, 0x5A, 0x5B, 0x6A, 0x61, 0x65, 0x71, 0x69, 0x6C, 0x79, 0x6C, 0x6F, 0x80, 0x75, 
   0x76, 0x86, 0x7B, 0x7D, 0x8D, 0x7F, 0x82, 0x96, 0x5B, 0x5B, 0x6D, 0x18, 0x1A, 0x23, 0x20, 0x22, 
   0x25, 0x71, 0x73, 0x7A, 0x9A, 0x98, 0x9D, 0xA7, 0xA3, 0xA7, 0xAD, 0xA9, 0xB3, 0xB3, 0xAF, 0xB7, 
   0xB4, 0xB0, 0xB7, 0xB8, 0xB5, 0xBB, 0xB1, 0xAE, 0xB6, 0x98, 0x98, 0xA1, 0x86, 0x8C, 0x94, 0x7C, 
   0x84, 0x8F, 0x7F, 0x85, 0x96, 0x7E, 0x86, 0x95, 0x7B, 0x83, 0x91, 0x67, 0x6D, 0x7D, 0x5E, 0x65, 
   0x75, 0x61, 0x63, 0x75, 0x5E, 0x5E, 0x6E, 0x56, 0x5B, 0x6B, 0x50, 0x56, 0x66, 0x49, 0x4F, 0x5B, 
   0x40, 0x46, 0x52, 0x3C, 0x44, 0x50, 0x3C, 0x45, 0x4F, 0x37, 0x3E, 0x45, 0x29, 0x32, 0x39, 0x35, 
   0x41, 0x46, 0x3E, 0x46, 0x4A, 0x3B, 0x42, 0x43, 0x39, 0x3E, 0x3D, 0x46, 0x48, 0x46, 0x4C, 0x4F, 
   0x4D, 0x47, 0x4E, 0x49, 0x46, 0x4D, 0x48, 0x4E, 0x52, 0x50, 0x65, 0x67, 0x68, 0x74, 0x73, 0x79, 
   0x65, 0x63, 0x6A, 0x64, 0x61, 0x68, 0x61, 0x5B, 0x64, 0x5E, 0x59, 0x62, 0x5D, 0x59, 0x62, 0x5B, 
   0x55, 0x5F, 0x59, 0x52, 0x5C, 0x5B, 0x54, 0x5E, 0x59, 0x54, 0x5C, 0x57, 0x53, 0x59, 0x54, 0x51, 
   0x59, 0x57, 0x53, 0x5B, 0x59, 0x52, 0x56, 0x56, 0x52, 0x55, 0x5C, 0x5E, 0x61, 0x80, 0x86, 0x88, 
   0xAD, 0xAD, 0xB0, 0xBD, 0xB4, 0xB8, 0xAB, 0xA7, 0xAA, 0x9F, 0x9B, 0xA5, 0x7E, 0x7F, 0x8F, 0x5E, 
   0x63, 0x73, 0x57, 0x61, 0x6F, 0x6D, 0x6F, 0x7F, 0x6D, 0x6F, 0x78, 0x6F, 0x70, 0x7C, 0x6E, 0x6F, 
   0x7B, 0x79, 0x84, 0x91, 0x81, 0x94, 0xA9, 0x92, 0x9E, 0xAE, 0x9A, 0x9E, 0xAE, 0x94, 0x94, 0xA6, 
   0x92, 0x93, 0xA4, 0x9A, 0x9D, 0xAC, 0xA1, 0xAA, 0xBB, 0xA9, 0xB9, 0xCE, 0xA5, 0xBD, 0xD1, 0xB0, 
   0xC8, 0xDC, 0xB4, 0xCC, 0xE3, 0xA5, 0xC1, 0xDD, 0x99, 0xB6, 0xD5, 0x93, 0xB3, 0xCC, 0xA3, 0xC1, 
   0xD8, 0xA3, 0xBC, 0xD6, 0x79, 0x92, 0xAD, 0x61, 0x77, 0x91, 0x3E, 0x50, 0x62, 0x3E, 0x49, 0x51, 
   0x5C, 0x66, 0x6B, 0x6D, 0x78, 0x7F, 0x6B, 0x75, 0x84, 0x5E, 0x67, 0x7D, 0x5E, 0x6A, 0x7B, 0x7E, 
   0x8D, 0x99, 0x9C, 0xA9, 0xB7, 0x9B, 0xA6, 0xB4, 0x92, 0x98, 0xA5, 0x89, 0x8C, 0x9B, 0x7D, 0x85, 
   0x94, 0x84, 0x94, 0x9D, 0x86, 0x94, 0x9D, 0x86, 0x90, 0x9D, 0x81, 0x8E, 0x9C, 0x88, 0x93, 0xA1, 
   0x8C, 0x96, 0xA1, 0x89, 0x90, 0x9F, 0x70, 0x73, 0x8C, 0x6A, 0x6C, 0x89, 0x77, 0x7C, 0x96, 0x73, 
   0x7A, 0x91, 0x6F, 0x74, 0x8D, 0x71, 0x75, 0x8B, 0x6F, 0x74, 0x8B, 0x69, 0x72, 0x89, 0x6E, 0x7A, 
   0x92, 0x6A, 0x73, 0x8C, 0x7E, 0x85, 0x98, 0x80, 0x7F, 0x8E, 0x4A, 0x48, 0x5D, 0x43, 0x45, 0x5C, 
   0x43, 0x48, 0x5B, 0x44, 0x4F, 0x5C, 0x49, 0x51, 0x5E, 0x4F, 0x59, 0x69, 0x68, 0x70, 0x80, 0x8D, 
   0x93, 0x9F, 0x97, 0x9D, 0xA2, 0x89, 0x8D, 0x91, 0x8E, 0x93, 0x97, 0x8E, 0x96, 0x9C, 0x8E, 0x94, 
   0x9D, 0x91, 0x95, 0x9F, 0x90, 0x95, 0x9E, 0x8F, 0x94, 0x9F, 0x8C, 0x91, 0x9C, 0x8D, 0x92, 0x9E, 
   0x8E, 0x94, 0xA1, 0x8F, 0x9A, 0xA5, 0x91, 0xA0, 0xAA, 0x92, 0x9F, 0xAA, 0x8C, 0x99, 0xA5, 0x81, 
   0x89, 0x9A, 0x76, 0x77, 0x87, 0x6A, 0x6C, 0x75, 0x5A, 0x5D, 0x62, 0x46, 0x4D, 0x52, 0x3F, 0x41, 
   0x48, 0x35, 0x39, 0x40, 0x50, 0x5D, 0x60, 0x86, 0x94, 0x97, 0xA4, 0xAA, 0xB3, 0x98, 0x99, 0xA0, 
   0x91, 0x9A, 0xA2, 0x93, 0x9A, 0xA3, 0x8F, 0x93, 0x9C, 0x8A, 0x8C, 0x96, 0x83, 0x85, 0x90, 0x7A, 
   0x80, 0x8A, 0x8A, 0x92, 0x9A, 0x8F, 0x9A, 0xA2, 0x87, 0x94, 0x9D, 0x88, 0x93, 0x9D, 0x84, 0x8D, 
   0x99, 0x82, 0x8D, 0x9A, 0x89, 0x93, 0xA0, 0x94, 0x98, 0xA4, 0x98, 0x97, 0xA0, 0x97, 0x98, 0xA0, 
   0x97, 0x9B, 0xA7, 0x9C, 0x9E, 0xAD, 0xA1, 0xA1, 0xAD, 0xA1, 0xA3, 0xAC, 0xAC, 0xAF, 0xB5, 0xA5, 
   0x9B, 0xAA, 0x6B, 0x68, 0x84, 0x5A, 0x69, 0x83, 0x5B, 0x6B, 0x85, 0x67, 0x71, 0x83, 0x76, 0x7B, 
   0x82, 0x84, 0x87, 0x8B, 0x8F, 0x91, 0x98, 0x90, 0x8D, 0x97, 0x8F, 0x8A, 0x94, 0x8E, 0x8E, 0x93, 
   0x92, 0x90, 0x91, 0x94, 0x91, 0x93, 0x87, 0x84, 0x86, 0x7C, 0x7A, 0x7D, 0x65, 0x67, 0x66, 0x3B, 
   0x3F, 0x3B, 0x30, 0x33, 0x31, 0x5E, 0x60, 0x5E, 0x77, 0x7B, 0x79, 0x4B, 0x52, 0x50, 0x47, 0x49, 
   0x46, 0x5F, 0x60, 0x59, 0x79, 0x7F, 0x72, 0x7A, 0x83, 0x80, 0x64, 0x6B, 0x75, 0x5D, 0x63, 0x66, 
   0x57, 0x5A, 0x57, 0x61, 0x63, 0x62, 0x6E, 0x6F, 0x71, 0x6F, 0x6C, 0x6F, 0x68, 0x66, 0x68, 0x66, 
   0x68, 0x68, 0x66, 0x69, 0x69, 0x77, 0x76, 0x78, 0x9E, 0x9B, 0x9E, 0x98, 0x9D, 0xA4, 0x96, 0x9E, 
   0xA9, 0xA1, 0xA7, 0xB0, 0xA8, 0xAA, 0xB3, 0xA5, 0xA8, 0xB1, 0xAB, 0xAB, 0xB0, 0xAB, 0xAE, 0xAF, 
   0xAC, 0xAF, 0xAF, 0x9E, 0xA5, 0xAA, 0x85, 0x91, 0x9B, 0x6F, 0x7D, 0x89, 0x53, 0x60, 0x69, 0x2C, 
   0x30, 0x36, 0x29, 0x25, 0x28, 0x26, 0x24, 0x21, 0x1E, 0x1F, 0x1A, 0x17, 0x17, 0x16, 0x17, 0x1D, 
   0x1D, 0x1A, 0x23, 0x23, 0x49, 0x52, 0x55, 0x7D, 0x88, 0x90, 0x96, 0x9D, 0xA8, 0xA0, 0x9E, 0xAC, 
   0x91, 0x8F, 0x9F, 0x8B, 0x8B, 0x98, 0x8D, 0x8A, 0x94, 0x85, 0x81, 0x88, 0x7D, 0x77, 0x7F, 0x7E, 
   0x78, 0x81, 0x89, 0x81, 0x8A, 0x9C, 0x93, 0x9C, 0x99, 0x93, 0x99, 0x9F, 0x98, 0x9B, 0xAA, 0xA4, 
   0xA5, 0xA7, 0xA4, 0xAA, 0x9D, 0xA4, 0xB1, 0x88, 0x91, 0xA6, 0x77, 0x81, 0x99, 0x8F, 0x9A, 0xB0, 
   0xA1, 0xA6, 0xBA, 0x7B, 0x82, 0x94, 0x75, 0x7A, 0x8E, 0x70, 0x78, 0x8E, 0x68, 0x6D, 0x86, 0x67, 
   0x68, 0x80, 0x6F, 0x73, 0x87, 0x82, 0x85, 0x97, 0x53, 0x50, 0x61, 0x0B, 0x0A, 0x12, 0x32, 0x37, 
   0x3B, 0x80, 0x82, 0x89, 0x9D, 0x9A, 0xA1, 0xA5, 0xA0, 0xA6, 0xB1, 0xAC, 0xB5, 0xB1, 0xAD, 0xB6, 
   0xB0, 0xAD, 0xB5, 0xB2, 0xAF, 0xB6, 0xB4, 0xB2, 0xB9, 0xA3, 0xA0, 0xAD, 0x8C, 0x8F, 0x9D, 0x83, 
   0x8B, 0x9A, 0x86, 0x8D, 0x9D, 0x7C, 0x83, 0x93, 0x70, 0x75, 0x88, 0x64, 0x6B, 0x7B, 0x62, 0x69, 
   0x79, 0x61, 0x65, 0x78, 0x5C, 0x61, 0x72, 0x52, 0x5B, 0x6B, 0x4C, 0x52, 0x62, 0x4A, 0x4E, 0x5B, 
   0x44, 0x49, 0x55, 0x3F, 0x46, 0x52, 0x3A, 0x3F, 0x4B, 0x37, 0x39, 0x42, 0x2B, 0x32, 0x3A, 0x2B, 
   0x36, 0x3C, 0x28, 0x2E, 0x33, 0x21, 0x2A, 0x2C, 0x24, 0x30, 0x2F, 0x32, 0x3B, 0x38, 0x36, 0x3F, 
   0x3C, 0x30, 0x39, 0x39, 0x35, 0x3B, 0x3E, 0x43, 0x47, 0x4C, 0x55, 0x56, 0x5F, 0x68, 0x63, 0x6F, 
   0x66, 0x60, 0x6B, 0x65, 0x5E, 0x68, 0x65, 0x59, 0x62, 0x61, 0x5A, 0x63, 0x60, 0x5C, 0x64, 0x62, 
   0x5C, 0x64, 0x5E, 0x58, 0x60, 0x5B, 0x58, 0x60, 0x5B, 0x5A, 0x61, 0x5E, 0x5C, 0x62, 0x5E, 0x5C, 
   0x63, 0x61, 0x5C, 0x64, 0x66, 0x5F, 0x64, 0x67, 0x64, 0x64, 0x63, 0x66, 0x66, 0x6D, 0x74, 0x76, 
   0x8F, 0x93, 0x94, 0xB0, 0xAD, 0xAE, 0xAE, 0xAE, 0xAE, 0xB9, 0xB6, 0xBD, 0xAF, 0xAC, 0xBB, 0x78, 
   0x78, 0x89, 0x5E, 0x61, 0x6E, 0x6C, 0x6D, 0x7D, 0x70, 0x73, 0x80, 0x78, 0x78, 0x88, 0x73, 0x79, 
   0x87, 0x6B, 0x82, 0x90, 0x8A, 0xB0, 0xC6, 0xA0, 0xC4, 0xD7, 0xA5, 0xC3, 0xD8, 0xA5, 0xBF, 0xD5, 
   0x9B, 0xB5, 0xCC, 0x99, 0xB6, 0xC9, 0x9B, 0xBB, 0xCE, 0xA3, 0xC6, 0xD9, 0xB9, 0xD9, 0xE7, 0xB5, 
   0xD1, 0xE0, 0xB3, 0xCC, 0xE0, 0xAB, 0xC4, 0xDC, 0x9F, 0xBA, 0xD4, 0xA4, 0xC2, 0xD9, 0xB8, 0xD6, 
   0xEA, 0xB4, 0xCE, 0xE4, 0x87, 0xA1, 0xBC, 0x68, 0x83, 0xA1, 0x5F, 0x76, 0x8E, 0x36, 0x3E, 0x4B, 
   0x39, 0x3F, 0x42, 0x51, 0x5D, 0x61, 0x6E, 0x7A, 0x87, 0x6F, 0x78, 0x89, 0x7C, 0x86, 0x93, 0x87, 
   0x90, 0xA0, 0x91, 0x9B, 0xA9, 0xA6, 0xB3, 0xBC, 0xA1, 0xA8, 0xB1, 0x97, 0x99, 0xA6, 0x83, 0x88, 
   0x96, 0x81, 0x8C, 0x96, 0x85, 0x8E, 0x99, 0x85, 0x8A, 0x9A, 0x87, 0x8E, 0x9D, 0x87, 0x96, 0xA2, 
   0x93, 0xA0, 0xA8, 0x91, 0x94, 0xA4, 0x6A, 0x68, 0x82, 0x61, 0x63, 0x7C, 0x78, 0x80, 0x92, 0x7E, 
   0x86, 0x99, 0x78, 0x80, 0x92, 0x6B, 0x73, 0x88, 0x6D, 0x73, 0x8D, 0x67, 0x74, 0x88, 0x6C, 0x7E, 
   0x8F, 0x68, 0x73, 0x89, 0x71, 0x72, 0x8A, 0x58, 0x53, 0x64, 0x46, 0x47, 0x5B, 0x46, 0x48, 0x5C, 
   0x48, 0x4C, 0x5D, 0x4A, 0x50, 0x5F, 0x4C, 0x56, 0x65, 0x64, 0x6A, 0x78, 0x88, 0x8B, 0x94, 0x99, 
   0x9A, 0xA0, 0x97, 0x98, 0x9C, 0x88, 0x8B, 0x8F, 0x8E, 0x93, 0x9A, 0x90, 0x95, 0x9F, 0x91, 0x95, 
   0xA1, 0x90, 0x96, 0xA2, 0x8E, 0x95, 0xA1, 0x8C, 0x94, 0x9F, 0x8B, 0x93, 0x9E, 0x8B, 0x95, 0xA0, 
   0x8E, 0x98, 0xA3, 0x8C, 0x98, 0xA4, 0x8D, 0x9B, 0xA6, 0x8C, 0x98, 0xA3, 0x86, 0x93, 0x9F, 0x7A, 
   0x83, 0x92, 0x6D, 0x6F, 0x7E, 0x5D, 0x61, 0x6B, 0x55, 0x59, 0x5E, 0x47, 0x4C, 0x51, 0x42, 0x43, 
   0x4A, 0x37, 0x3F, 0x45, 0x57, 0x66, 0x6A, 0x83, 0x92, 0x97, 0xB4, 0xBB, 0xC5, 0x95, 0x92, 0x9E, 
   0x86, 0x8F, 0x99, 0x84, 0x8F, 0x99, 0x7A, 0x84, 0x91, 0x80, 0x89, 0x97, 0x85, 0x8C, 0x98, 0x84, 
   0x8E, 0x96, 0x93, 0x98, 0xA1, 0x8A, 0x93, 0x9D, 0x80, 0x8C, 0x95, 0x81, 0x8F, 0x95, 0x88, 0x92, 
   0x98, 0x88, 0x90, 0x98, 0x91, 0x97, 0xA0, 0x9B, 0x9B, 0xA4, 0x9A, 0x98, 0xA0, 0x97, 0x97, 0xA0, 
   0x95, 0x97, 0xA3, 0x95, 0x98, 0xA6, 0x92, 0x94, 0xA0, 0x98, 0x9C, 0xA6, 0xAB, 0xB3, 0xB9, 0xB0, 
   0xA6, 0xB2, 0x77, 0x6B, 0x81, 0x54, 0x5B, 0x73, 0x5F, 0x6B, 0x7E, 0x6A, 0x71, 0x80, 0x73, 0x74, 
   0x83, 0x7A, 0x7C, 0x88, 0x81, 0x85, 0x8F, 0x87, 0x86, 0x91, 0x88, 0x86, 0x91, 0x87, 0x89, 0x8D, 
   0x8E, 0x8B, 0x89, 0x93, 0x8F, 0x90, 0x7B, 0x78, 0x78, 0x6E, 0x6B, 0x6D, 0x50, 0x50, 0x4E, 0x2D, 
   0x2F, 0x2A, 0x2D, 0x2F, 0x2C, 0x76, 0x78, 0x70, 0x87, 0x8B, 0x83, 0x60, 0x64, 0x60, 0x3D, 0x3E, 
   0x3D, 0x1E, 0x1E, 0x1D, 0x29, 0x2B, 0x2A, 0x36, 0x37, 0x3C, 0x3F, 0x3F, 0x47, 0x51, 0x52, 0x54, 
   0x5C, 0x5C, 0x5D, 0x64, 0x64, 0x65, 0x65, 0x67, 0x68, 0x65, 0x62, 0x64, 0x68, 0x65, 0x64, 0x68, 
   0x67, 0x65, 0x68, 0x68, 0x67, 0x84, 0x82, 0x83, 0xA7, 0xA4, 0xA6, 0xA6, 0xA9, 0xB0, 0x9E, 0xA7, 
   0xB0, 0x9B, 0xA3, 0xA8, 0x9B, 0xA0, 0xA6, 0xA5, 0xA7, 0xB1, 0xA7, 0xAB, 0xB0, 0xA2, 0xA8, 0xA9, 
   0xA6, 0xAB, 0xAA, 0xA1, 0xA9, 0xAC, 0x93, 0x9F, 0xA8, 0x7A, 0x88, 0x93, 0x58, 0x63, 0x6C, 0x28, 
   0x2A, 0x2E, 0x2A, 0x28, 0x2A, 0x32, 0x34, 0x33, 0x32, 0x33, 0x30, 0x29, 0x28, 0x27, 0x14, 0x16, 
   0x16, 0x12, 0x16, 0x16, 0x36, 0x3B, 0x3E, 0x8C, 0x96, 0x9D, 0xAC, 0xB4, 0xBE, 0xB3, 0xB0, 0xBF, 
   0xA5, 0xA5, 0xB5, 0x94, 0x95, 0xA4, 0x91, 0x8F, 0x9A, 0x98, 0x93, 0x9B, 0x99, 0x91, 0x99, 0x93, 
   0x8D, 0x95, 0x96, 0x8D, 0x98, 0x9E, 0x96, 0xA2, 0x97, 0x91, 0x9A, 0xA2, 0x99, 0xA0, 0xAA, 0xA5, 
   0xA6, 0xA3, 0xA7, 0xB4, 0xA0, 0xAD, 0xBD, 0xA8, 0xB1, 0xC7, 0x9A, 0xA5, 0xBE, 0x95, 0xA4, 0xBC, 
   0x9D, 0xA7, 0xBC, 0x97, 0xA4, 0xB5, 0x91, 0x9C, 0xB6, 0x7C, 0x8B, 0xAB, 0x79, 0x83, 0xA4, 0x85, 
   0x88, 0xA4, 0x83, 0x85, 0x9C, 0x80, 0x84, 0x94, 0x35, 0x36, 0x40, 0x0E, 0x0F, 0x15, 0x4C, 0x54, 
   0x57, 0x89, 0x89, 0x92, 0x98, 0x94, 0x9C, 0x9E, 0x99, 0xA1, 0xAA, 0xA4, 0xAC, 0xAE, 0xAC, 0xB5, 
   0xB2, 0xB0, 0xB9, 0xB4, 0xB3, 0xBA, 0xBF, 0xBC, 0xC4, 0xB7, 0xB3, 0xC1, 0x8F, 0x90, 0xA1, 0x82, 
   0x8C, 0x9B, 0x80, 0x8C, 0x9C, 0x74, 0x7F, 0x8F, 0x6A, 0x73, 0x86, 0x64, 0x6D, 0x7D, 0x5E, 0x66, 
   0x76, 0x5A, 0x5F, 0x72, 0x57, 0x5D, 0x6F, 0x4D, 0x56, 0x64, 0x46, 0x4D, 0x5A, 0x42, 0x45, 0x54, 
   0x3E, 0x42, 0x53, 0x38, 0x41, 0x51, 0x33, 0x3B, 0x48, 0x33, 0x38, 0x41, 0x2B, 0x33, 0x39, 0x2B, 
   0x31, 0x37, 0x2B, 0x2E, 0x34, 0x2A, 0x33, 0x36, 0x2E, 0x3C, 0x3D, 0x36, 0x40, 0x40, 0x37, 0x3F, 
   0x3F, 0x4E, 0x50, 0x57, 0x57, 0x57, 0x5F, 0x5A, 0x58, 0x61, 0x5A, 0x58, 0x63, 0x5C, 0x57, 0x60, 
   0x5D, 0x57, 0x5F, 0x5D, 0x59, 0x5F, 0x5E, 0x57, 0x61, 0x5A, 0x57, 0x61, 0x59, 0x55, 0x60, 0x5C, 
   0x54, 0x5D, 0x62, 0x56, 0x60, 0x5E, 0x55, 0x5F, 0x5B, 0x55, 0x61, 0x5B, 0x57, 0x62, 0x5E, 0x5A, 
   0x63, 0x63, 0x5C, 0x68, 0x70, 0x69, 0x73, 0x79, 0x77, 0x7A, 0x75, 0x7A, 0x7A, 0x74, 0x79, 0x7B, 
   0x85, 0x86, 0x89, 0x98, 0x9C, 0x9C, 0xA7, 0xAE, 0xAB, 0xC0, 0xC5, 0xC7, 0xB8, 0xB7, 0xC2, 0x8A, 
   0x89, 0x99, 0x71, 0x70, 0x7E, 0x67, 0x6B, 0x7A, 0x69, 0x72, 0x83, 0x71, 0x77, 0x8B, 0x68, 0x6E, 
   0x7F, 0x4F, 0x64, 0x6F, 0x98, 0xC1, 0xD2, 0xA9, 0xD8, 0xEC, 0x9D, 0xC7, 0xDE, 0xA1, 0xC5, 0xDF, 
   0x96, 0xBA, 0xD5, 0x90, 0xB5, 0xCD, 0xA2, 0xC7, 0xDB, 0xAA, 0xCE, 0xDF, 0xBD, 0xDF, 0xEF, 0xB9, 
   0xD6, 0xE7, 0xB7, 0xCF, 0xE2, 0xB5, 0xCD, 0xE2, 0xB6, 0xD0, 0xE7, 0xB3, 0xD0, 0xE4, 0xB5, 0xD2, 
   0xE3, 0xC3, 0xDD, 0xEC, 0xA3, 0xBA, 0xD2, 0x71, 0x8D, 0xAB, 0x6D, 0x89, 0xA6, 0x45, 0x50, 0x65, 
   0x33, 0x34, 0x3B, 0x41, 0x4B, 0x4C, 0x71, 0x7B, 0x81, 0x81, 0x89, 0x91, 0x8B, 0x93, 0x9B, 0x8B, 
   0x8F, 0xA4, 0x78, 0x7F, 0x91, 0x8C, 0x99, 0xA2, 0x9D, 0xA5, 0xAD, 0xA4, 0xA5, 0xB1, 0x98, 0x99, 
   0xA3, 0x8B, 0x90, 0x9A, 0x7D, 0x81, 0x91, 0x7A, 0x7D, 0x91, 0x7E, 0x87, 0x95, 0x82, 0x95, 0x9B, 
   0x91, 0x9F, 0xA5, 0x88, 0x89, 0x9A, 0x63, 0x62, 0x7C, 0x5F, 0x63, 0x7A, 0x72, 0x7C, 0x8C, 0x6E, 
   0x75, 0x88, 0x6E, 0x71, 0x85, 0x69, 0x71, 0x85, 0x72, 0x79, 0x90, 0x72, 0x7C, 0x91, 0x79, 0x83, 
   0x98, 0x7B, 0x80, 0x99, 0x83, 0x82, 0x9A, 0x48, 0x43, 0x55, 0x41, 0x43, 0x56, 0x46, 0x47, 0x57, 
   0x47, 0x4A, 0x59, 0x48, 0x4C, 0x5D, 0x81, 0x8A, 0x99, 0x9F, 0x9E, 0xA9, 0x9F, 0x98, 0xA0, 0xAE, 
   0xA8, 0xAF, 0xA3, 0x9F, 0xA5, 0x8D, 0x90, 0x96, 0x8E, 0x94, 0x9B, 0x90, 0x93, 0x9D, 0x90, 0x96, 
   0xA1, 0x8E, 0x97, 0xA3, 0x8B, 0x94, 0xA0, 0x8A, 0x94, 0xA0, 0x8B, 0x96, 0xA1, 0x8C, 0x98, 0xA3, 
   0x8D, 0x99, 0xA4, 0x8B, 0x97, 0xA5, 0x8B, 0x97, 0xA5, 0x89, 0x91, 0x9D, 0x83, 0x8A, 0x96, 0x75, 
   0x7B, 0x88, 0x68, 0x69, 0x76, 0x56, 0x59, 0x65, 0x4D, 0x52, 0x5B, 0x4B, 0x4A, 0x54, 0x40, 0x40, 
   0x47, 0x3D, 0x43, 0x46, 0x66, 0x6F, 0x71, 0x91, 0x96, 0x9C, 0xAE, 0xAC, 0xB8, 0x91, 0x87, 0x96, 
   0x95, 0x98, 0xA1, 0x94, 0x99, 0xA3, 0x8E, 0x94, 0xA1, 0x83, 0x8D, 0x9B, 0x87, 0x91, 0x9B, 0x89, 
   0x94, 0x9A, 0x92, 0x94, 0x9E, 0x89, 0x8E, 0x99, 0x86, 0x8D, 0x96, 0x89, 0x92, 0x99, 0x8F, 0x96, 
   0x9B, 0x94, 0x98, 0x9E, 0x9C, 0x9E, 0xA7, 0x98, 0x99, 0xA4, 0x92, 0x95, 0x9E, 0x92, 0x95, 0x9E, 
   0x93, 0x95, 0x9F, 0x96, 0x97, 0xA3, 0x92, 0x95, 0x9E, 0x96, 0x9D, 0xA4, 0xA7, 0xB1, 0xB6, 0xBC, 
   0xB5, 0xBD, 0x8D, 0x7D, 0x90, 0x55, 0x50, 0x68, 0x64, 0x69, 0x7A, 0x71, 0x76, 0x82, 0x86, 0x89, 
   0x97, 0x92, 0x95, 0xA3, 0x7E, 0x81, 0x8C, 0x79, 0x7B, 0x84, 0x80, 0x82, 0x88, 0x83, 0x86, 0x86, 
   0x8C, 0x88, 0x84, 0x90, 0x8D, 0x8C, 0x6A, 0x69, 0x67, 0x4F, 0x4F, 0x4E, 0x45, 0x46, 0x45, 0x3B, 
   0x3C, 0x3C, 0x56, 0x57, 0x53, 0x7C, 0x7A, 0x74, 0x7D, 0x7D, 0x76, 0x68, 0x6A, 0x64, 0x42, 0x45, 
   0x3D, 0x1C, 0x1D, 0x17, 0x2A, 0x29, 0x28, 0x3D, 0x3A, 0x3F, 0x4F, 0x4A, 0x4E, 0x62, 0x5C, 0x5E, 
   0x62, 0x5E, 0x61, 0x62, 0x60, 0x61, 0x5F, 0x60, 0x64, 0x66, 0x63, 0x67, 0x69, 0x66, 0x67, 0x6A, 
   0x67, 0x66, 0x85, 0x81, 0x82, 0xB4, 0xB0, 0xB3, 0xC5, 0xC5, 0xCA, 0xAF, 0xB7, 0xBA, 0x8B, 0x97, 
   0xA0, 0x92, 0x9B, 0xA0, 0xA4, 0xAC, 0xAE, 0xAE, 0xB5, 0xB7, 0xA7, 0xAF, 0xAE, 0x9B, 0xA2, 0xA3, 
   0x99, 0xA1, 0xA3, 0x95, 0x9D, 0xA2, 0x8F, 0x9A, 0xA1, 0x82, 0x8F, 0x97, 0x53, 0x5B, 0x61, 0x34, 
   0x36, 0x33, 0x43, 0x43, 0x3F, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x48, 0x52, 0x50, 0x4E, 0x42, 0x42, 
   0x43, 0x24, 0x24, 0x23, 0x2F, 0x31, 0x33, 0x76, 0x7E, 0x80, 0x98, 0x9E, 0xA1, 0x9B, 0x9C, 0xA4, 
   0xA5, 0xA7, 0xB1, 0xAA, 0xAE, 0xB8, 0xAD, 0xAD, 0xB6, 0xB2, 0xAE, 0xB6, 0xB5, 0xAD, 0xB5, 0xB1, 
   0xAA, 0xB3, 0xB5, 0xAC, 0xB4, 0xB7, 0xAE, 0xB6, 0xB2, 0xAD, 0xB1, 0xB5, 0xAF, 0xB3, 0xB1, 0xAD, 
   0xB1, 0x99, 0xA0, 0xAF, 0xA4, 0xAE, 0xBF, 0xAF, 0xB5, 0xC6, 0xA2, 0xAA, 0xBE, 0xA4, 0xB0, 0xC6, 
   0xC0, 0xCA, 0xDF, 0xD1, 0xDC, 0xED, 0xBC, 0xCC, 0xE5, 0x9C, 0xB0, 0xD0, 0x98, 0xA6, 0xC1, 0xAD, 
   0xAF, 0xC5, 0x9F, 0x9C, 0xAF, 0x70, 0x6E, 0x7B, 0x1B, 0x1C, 0x22, 0x30, 0x30, 0x36, 0x6D, 0x74, 
   0x77, 0x8B, 0x8B, 0x93, 0x94, 0x91, 0x9A, 0x9D, 0x9A, 0xA1, 0xA2, 0x9F, 0xA5, 0xAC, 0xAB, 0xB2, 
   0xB5, 0xB1, 0xBB, 0xB3, 0xB4, 0xBC, 0xB5, 0xB7, 0xBF, 0xAF, 0xB0, 0xBC, 0x80, 0x83, 0x94, 0x7A, 
   0x83, 0x92, 0x7B, 0x88, 0x97, 0x6E, 0x7A, 0x89, 0x66, 0x70, 0x81, 0x5C, 0x66, 0x76, 0x58, 0x5E, 
   0x6E, 0x54, 0x5A, 0x6B, 0x4D, 0x54, 0x65, 0x46, 0x4F, 0x5B, 0x42, 0x48, 0x53, 0x40, 0x42, 0x50, 
   0x3F, 0x42, 0x52, 0x39, 0x3F, 0x4F, 0x34, 0x3A, 0x47, 0x29, 0x2D, 0x35, 0x28, 0x2A, 0x30, 0x26, 
   0x2B, 0x30, 0x2A, 0x2E, 0x33, 0x32, 0x37, 0x3C, 0x2D, 0x36, 0x39, 0x38, 0x40, 0x42, 0x52, 0x5B, 
   0x5D, 0x7F, 0x7A, 0x84, 0x84, 0x7C, 0x89, 0x88, 0x7F, 0x8E, 0x8E, 0x85, 0x93, 0x92, 0x8A, 0x95, 
   0x94, 0x8B, 0x96, 0x97, 0x8F, 0x99, 0x95, 0x8E, 0x95, 0x8B, 0x86, 0x90, 0x89, 0x83, 0x8D, 0x8D, 
   0x84, 0x8D, 0x95, 0x8C, 0x92, 0x92, 0x8A, 0x93, 0x90, 0x88, 0x92, 0x8E, 0x85, 0x92, 0x89, 0x84, 
   0x91, 0x93, 0x8E, 0x99, 0x9D, 0x94, 0xA1, 0x8C, 0x84, 0x93, 0x6D, 0x6E, 0x75, 0x61, 0x67, 0x6A, 
   0x7A, 0x7F, 0x85, 0x8D, 0x95, 0x9A, 0xA4, 0xAC, 0xAD, 0xAA, 0xB0, 0xB2, 0x95, 0x94, 0x9F, 0x7C, 
   0x7E, 0x8C, 0x7B, 0x7D, 0x8E, 0x6D, 0x6F, 0x7F, 0x64, 0x6D, 0x7E, 0x66, 0x72, 0x84, 0x54, 0x56, 
   0x66, 0x28, 0x33, 0x3E, 0x79, 0xA4, 0xB5, 0x9B, 0xCC, 0xE3, 0x94, 0xBF, 0xD8, 0x98, 0xBA, 0xD5, 
   0x8A, 0xAA, 0xC5, 0x91, 0xB3, 0xCD, 0xA1, 0xC3, 0xDB, 0x9E, 0xBD, 0xD2, 0xAB, 0xC9, 0xDD, 0xBE, 
   0xD8, 0xEB, 0xC5, 0xDA, 0xEE, 0xBF, 0xD5, 0xE8, 0xBF, 0xD9, 0xEB, 0xBA, 0xD6, 0xE5, 0xBF, 0xDC, 
   0xEA, 0xD1, 0xEE, 0xF8, 0xBC, 0xD2, 0xE6, 0x83, 0x9C, 0xB9, 0x6D, 0x8E, 0xAB, 0x5B, 0x6C, 0x87, 
   0x2C, 0x2B, 0x34, 0x24, 0x2B, 0x2B, 0x43, 0x4B, 0x4A, 0x78, 0x7F, 0x81, 0x8D, 0x92, 0x99, 0x90, 
   0x93, 0xA5, 0x77, 0x7E, 0x90, 0x76, 0x80, 0x8F, 0x8A, 0x94, 0xA3, 0x9E, 0xA3, 0xB0, 0xA1, 0xA3, 
   0xAB, 0x91, 0x95, 0xA1, 0x80, 0x83, 0x95, 0x7A, 0x81, 0x90, 0x7F, 0x8C, 0x94, 0x8B, 0x94, 0x9D, 
   0x8E, 0x94, 0xA0, 0x79, 0x7C, 0x92, 0x62, 0x67, 0x81, 0x71, 0x79, 0x8F, 0x76, 0x7F, 0x93, 0x5D, 
   0x64, 0x7B, 0x61, 0x66, 0x78, 0x74, 0x82, 0x92, 0x83, 0x8E, 0xA3, 0x7E, 0x85, 0x9A, 0x7C, 0x83, 
   0x99, 0x87, 0x8A, 0xA5, 0x80, 0x7F, 0x98, 0x49, 0x46, 0x58, 0x45, 0x49, 0x56, 0x49, 0x49, 0x59, 
   0x46, 0x46, 0x59, 0x4F, 0x54, 0x61, 0x9A, 0xA1, 0xA9, 0xA0, 0x9B, 0xA2, 0x97, 0x8E, 0x95, 0x9F, 
   0x99, 0xA1, 0x95, 0x95, 0x9D, 0x90, 0x95, 0x9D, 0x8F, 0x98, 0xA2, 0x8E, 0x95, 0x9F, 0x8E, 0x95, 
   0xA0, 0x8E, 0x95, 0xA1, 0x8C, 0x94, 0xA0, 0x8E, 0x98, 0xA4, 0x90, 0x99, 0xA5, 0x8F, 0x9A, 0xA7, 
   0x8C, 0x98, 0xA5, 0x8A, 0x95, 0xA3, 0x8A, 0x94, 0xA1, 0x9E, 0xA3, 0xAE, 0x8B, 0x8F, 0x9C, 0x6E, 
   0x71, 0x7E, 0x63, 0x63, 0x70, 0x51, 0x53, 0x62, 0x4A, 0x4E, 0x5C, 0x4A, 0x46, 0x56, 0x39, 0x3F, 
   0x47, 0x52, 0x5C, 0x5C, 0x91, 0x99, 0x9B, 0xA5, 0xA7, 0xB0, 0xAA, 0xA7, 0xB4, 0x91, 0x8C, 0x96, 
   0x94, 0x95, 0x9E, 0x8E, 0x8F, 0x9A, 0x88, 0x8C, 0x98, 0x83, 0x8A, 0x95, 0x87, 0x8E, 0x97, 0x8C, 
   0x94, 0x9B, 0x8C, 0x92, 0x9B, 0x8A, 0x8D, 0x98, 0x8D, 0x8E, 0x98, 0x8E, 0x91, 0x98, 0x8E, 0x92, 
   0x97, 0x9D, 0xA1, 0xA6, 0x9F, 0xA1, 0xAA, 0x90, 0x94, 0xA0, 0x8D, 0x93, 0x9E, 0x96, 0x9A, 0xA4, 
   0x99, 0x9A, 0xA2, 0x9A, 0x9A, 0xA2, 0x9C, 0x9D, 0xA3, 0x9E, 0xA3, 0xA8, 0x9F, 0xA6, 0xAB, 0xB7, 
   0xB4, 0xBB, 0xAE, 0xA1, 0xB0, 0x67, 0x5A, 0x70, 0x5F, 0x5C, 0x6E, 0x69, 0x6D, 0x7B, 0x7E, 0x85, 
   0x8E, 0x8E, 0x93, 0x99, 0x91, 0x93, 0x9A, 0x97, 0x9A, 0x9F, 0x8C, 0x8D, 0x90, 0x83, 0x83, 0x83, 
   0x8A, 0x83, 0x83, 0x93, 0x8F, 0x90, 0x45, 0x49, 0x46, 0x32, 0x37, 0x32, 0x2F, 0x33, 0x30, 0x39, 
   0x3D, 0x3F, 0x63, 0x64, 0x63, 0x75, 0x70, 0x69, 0x75, 0x72, 0x6A, 0x6D, 0x6C, 0x65, 0x5B, 0x5C, 
   0x52, 0x38, 0x39, 0x30, 0x27, 0x29, 0x26, 0x38, 0x3B, 0x3B, 0x50, 0x4F, 0x4F, 0x5A, 0x58, 0x59, 
   0x59, 0x59, 0x59, 0x5B, 0x5B, 0x5C, 0x5C, 0x5C, 0x61, 0x61, 0x61, 0x63, 0x5C, 0x5E, 0x5C, 0x78, 
   0x78, 0x75, 0xA2, 0x9E, 0x9D, 0xB3, 0xB1, 0xB3, 0xA6, 0xAA, 0xAF, 0x8E, 0x97, 0x9D, 0x85, 0x92, 
   0x9D, 0x8E, 0x96, 0x9E, 0x8F, 0x9B, 0xA0, 0x8F, 0x9B, 0xA1, 0x90, 0x9E, 0xA1, 0x95, 0x9F, 0xA4, 
   0x90, 0x9A, 0x9B, 0x8D, 0x95, 0x97, 0x83, 0x8D, 0x90, 0x5F, 0x6B, 0x6F, 0x36, 0x3D, 0x40, 0x44, 
   0x46, 0x41, 0x55, 0x56, 0x4E, 0x59, 0x58, 0x51, 0x62, 0x60, 0x59, 0x66, 0x64, 0x61, 0x67, 0x69, 
   0x69, 0x74, 0x72, 0x70, 0x76, 0x74, 0x6F, 0x61, 0x63, 0x5E, 0x5D, 0x5F, 0x5E, 0x70, 0x73, 0x74, 
   0x86, 0x88, 0x8B, 0x9E, 0x9F, 0xA5, 0xAB, 0xAC, 0xB3, 0xA2, 0x9F, 0xA8, 0xA4, 0x9D, 0xA7, 0xAB, 
   0xA4, 0xAD, 0xB3, 0xA9, 0xB1, 0xB4, 0xA9, 0xAF, 0xB5, 0xAF, 0xB3, 0xB9, 0xB3, 0xB9, 0xB0, 0xAD, 
   0xB5, 0xA8, 0xA9, 0xBA, 0xB1, 0xB7, 0xC9, 0xB1, 0xB9, 0xCB, 0xAE, 0xB8, 0xCB, 0xB3, 0xC0, 0xD1, 
   0xB1, 0xBF, 0xCD, 0xB3, 0xC3, 0xCF, 0xB9, 0xC5, 0xD3, 0xB1, 0xBF, 0xD6, 0xB0, 0xBB, 0xD0, 0xB9, 
   0xC0, 0xD2, 0xA7, 0xAB, 0xB9, 0x47, 0x45, 0x4D, 0x1C, 0x1A, 0x20, 0x5D, 0x5B, 0x61, 0x7D, 0x7C, 
   0x82, 0x86, 0x84, 0x8C, 0x8D, 0x8C, 0x96, 0x97, 0x96, 0x9C, 0x9F, 0xA0, 0xA4, 0xA7, 0xA8, 0xAE, 
   0xB1, 0xAF, 0xB9, 0xB1, 0xB1, 0xBD, 0xAD, 0xAF, 0xB7, 0xA2, 0xA4, 0xAC, 0x79, 0x7E, 0x8A, 0x77, 
   0x82, 0x90, 0x79, 0x84, 0x94, 0x68, 0x6D, 0x7B, 0x5C, 0x63, 0x6E, 0x57, 0x5C, 0x6B, 0x57, 0x59, 
   0x6A, 0x4D, 0x53, 0x64, 0x46, 0x4F, 0x5D, 0x42, 0x47, 0x54, 0x3F, 0x44, 0x4F, 0x3D, 0x40, 0x4A, 
   0x38, 0x3A, 0x45, 0x2E, 0x2E, 0x3C, 0x2D, 0x2A, 0x39, 0x2E, 0x2B, 0x38, 0x2E, 0x33, 0x3A, 0x36, 
   0x3C, 0x43, 0x37, 0x3A, 0x41, 0x3E, 0x40, 0x46, 0x40, 0x42, 0x45, 0x64, 0x61, 0x65, 0x89, 0x85, 
   0x89, 0x90, 0x8B, 0x8F, 0x95, 0x90, 0x97, 0x95, 0x8F, 0x97, 0x98, 0x92, 0x97, 0x9E, 0x9A, 0x9D, 
   0xA1, 0x9C, 0xA3, 0xA5, 0x9D, 0xA5, 0xA4, 0x9F, 0xA1, 0x9F, 0x99, 0x9F, 0x9F, 0x98, 0xA0, 0xA1, 
   0x9C, 0x9D, 0xA0, 0x9A, 0x9B, 0x99, 0x93, 0x97, 0xA1, 0x98, 0x9E, 0xA3, 0x9A, 0xA0, 0xA0, 0x99, 
   0xA4, 0xA5, 0xA2, 0xAD, 0x96, 0x92, 0xA2, 0x7C, 0x77, 0x8D, 0x4D, 0x4D, 0x5C, 0x3D, 0x46, 0x50, 
   0x6C, 0x75, 0x83, 0x7A, 0x86, 0x95, 0x99, 0xA1, 0xAA, 0xA3, 0xA9, 0xB1, 0x8F, 0x8D, 0x9B, 0x81, 
   0x82, 0x92, 0x80, 0x81, 0x96, 0x6E, 0x71, 0x7F, 0x6D, 0x70, 0x7F, 0x74, 0x77, 0x87, 0x57, 0x56, 
   0x67, 0x1E, 0x23, 0x2D, 0x55, 0x7D, 0x8D, 0x7E, 0xB0, 0xC7, 0x8C, 0xB8, 0xD3, 0x98, 0xBE, 0xD9, 
   0x9E, 0xC1, 0xDC, 0xA3, 0xC9, 0xE7, 0x9C, 0xC2, 0xDE, 0xAC, 0xCF, 0xE3, 0xC2, 0xDD, 0xEF, 0xC2, 
   0xD9, 0xEC, 0xBC, 0xD3, 0xE5, 0xB4, 0xCF, 0xE1, 0xB1, 0xD0, 0xE2, 0xAC, 0xCD, 0xE0, 0xB2, 0xD4, 
   0xE6, 0xC2, 0xE0, 0xEE, 0xAD, 0xC6, 0xDB, 0x91, 0xAA, 0xC4, 0x7D, 0x9D, 0xB9, 0x6B, 0x7C, 0x9A, 
   0x32, 0x2E, 0x38, 0x1D, 0x20, 0x22, 0x2A, 0x32, 0x2E, 0x49, 0x52, 0x4D, 0x7D, 0x83, 0x87, 0x87, 
   0x89, 0x98, 0x80, 0x83, 0x96, 0x75, 0x7A, 0x8B, 0x85, 0x90, 0x9F, 0x9E, 0xAA, 0xB3, 0xAE, 0xB5, 
   0xBC, 0x9F, 0xA4, 0xB5, 0x88, 0x8C, 0x9F, 0x83, 0x87, 0x95, 0x86, 0x8C, 0x96, 0x89, 0x8D, 0x9B, 
   0x91, 0x94, 0xA7, 0x6F, 0x71, 0x8C, 0x6F, 0x74, 0x8C, 0x78, 0x81, 0x94, 0x76, 0x7F, 0x92, 0x72, 
   0x79, 0x90, 0x77, 0x82, 0x91, 0x82, 0x91, 0x9F, 0x85, 0x8E, 0xA1, 0x7F, 0x85, 0x97, 0x79, 0x82, 
   0x94, 0x81, 0x86, 0x9E, 0x5B, 0x59, 0x71, 0x44, 0x44, 0x53, 0x41, 0x47, 0x55, 0x43, 0x46, 0x58, 
   0x58, 0x57, 0x68, 0x92, 0x93, 0x97, 0xA7, 0xAA, 0xAC, 0x97, 0x94, 0x9A, 0x94, 0x93, 0x96, 0x90, 
   0x93, 0x99, 0x90, 0x96, 0xA1, 0x93, 0x9C, 0xA8, 0x90, 0x99, 0xA5, 0x8E, 0x97, 0xA3, 0x8E, 0x98, 
   0xA3, 0x8C, 0x96, 0xA0, 0x8D, 0x97, 0xA2, 0x91, 0x9C, 0xA8, 0x91, 0x9C, 0xAA, 0x91, 0x9C, 0xAB, 
   0x8E, 0x99, 0xA9, 0x8D, 0x96, 0xA3, 0x8C, 0x93, 0x9F, 0x83, 0x8A, 0x98, 0x78, 0x80, 0x90, 0x6A, 
   0x71, 0x7F, 0x61, 0x62, 0x6E, 0x54, 0x56, 0x62, 0x56, 0x5A, 0x65, 0x43, 0x44, 0x50, 0x38, 0x43, 
   0x49, 0x63, 0x74, 0x72, 0x8A, 0x95, 0x96, 0x91, 0x93, 0x9C, 0x8A, 0x90, 0x9C, 0x94, 0x8D, 0x98, 
   0x91, 0x92, 0x9A, 0x86, 0x89, 0x92, 0x7D, 0x84, 0x8D, 0x7C, 0x87, 0x92, 0x7F, 0x89, 0x95, 0x83, 
   0x8C, 0x9A, 0x85, 0x8B, 0x95, 0x86, 0x8B, 0x94, 0x89, 0x8E, 0x97, 0x8A, 0x8F, 0x98, 0x81, 0x87, 
   0x8F, 0x95, 0x99, 0xA1, 0x9A, 0x9B, 0xA4, 0x8F, 0x8F, 0x9D, 0x95, 0x9B, 0xA6, 0xA1, 0xA4, 0xAD, 
   0x9F, 0x9C, 0xA4, 0x9C, 0x9A, 0x9F, 0x99, 0x9B, 0x9E, 0x9B, 0x9D, 0xA2, 0x99, 0x9B, 0xA0, 0x99, 
   0x9B, 0x9E, 0xAA, 0xA8, 0xB0, 0x8B, 0x7A, 0x8B, 0x57, 0x4B, 0x61, 0x57, 0x5B, 0x6E, 0x79, 0x85, 
   0x8E, 0x91, 0x94, 0x99, 0x91, 0x90, 0x92, 0x98, 0x98, 0x9D, 0x97, 0x93, 0x9C, 0x84, 0x7D, 0x86, 
   0x75, 0x6C, 0x72, 0x85, 0x7B, 0x83, 0x31, 0x36, 0x33, 0x32, 0x38, 0x36, 0x32, 0x35, 0x34, 0x48, 
   0x4A, 0x4B, 0x64, 0x68, 0x65, 0x67, 0x68, 0x5F, 0x6D, 0x70, 0x60, 0x73, 0x72, 0x66, 0x72, 0x6D, 
   0x67, 0x56, 0x53, 0x50, 0x31, 0x34, 0x32, 0x32, 0x38, 0x37, 0x43, 0x45, 0x46, 0x52, 0x53, 0x53, 
   0x56, 0x5A, 0x56, 0x5B, 0x59, 0x5C, 0x5F, 0x5B, 0x5F, 0x6A, 0x69, 0x69, 0x8E, 0x8F, 0x8C, 0xAE, 
   0xAD, 0xAA, 0xB4, 0xAF, 0xAF, 0xA8, 0xA6, 0xA7, 0x9A, 0x9F, 0xA1, 0x8C, 0x92, 0x9C, 0x90, 0x98, 
   0xA4, 0x91, 0x97, 0xA1, 0x83, 0x8E, 0x9A, 0x7F, 0x8A, 0x99, 0x82, 0x90, 0x9D, 0x8B, 0x97, 0x9F, 
   0x8C, 0x96, 0x93, 0x81, 0x8A, 0x87, 0x65, 0x70, 0x70, 0x38, 0x42, 0x44, 0x36, 0x3C, 0x3E, 0x4A, 
   0x4B, 0x4A, 0x4D, 0x4F, 0x4C, 0x52, 0x54, 0x4F, 0x5B, 0x5A, 0x51, 0x61, 0x5D, 0x57, 0x61, 0x60, 
   0x5C, 0x72, 0x6E, 0x69, 0x78, 0x77, 0x70, 0x77, 0x76, 0x71, 0x63, 0x61, 0x60, 0x4D, 0x4E, 0x4D, 
   0x68, 0x69, 0x6B, 0x86, 0x87, 0x8E, 0xA3, 0xA2, 0xAC, 0xA9, 0xA4, 0xB0, 0xAE, 0xA7, 0xB3, 0xAE, 
   0xA7, 0xB1, 0xB1, 0xA5, 0xAF, 0xB2, 0xA6, 0xAF, 0xB5, 0xAB, 0xB3, 0xB4, 0xAD, 0xB4, 0xB0, 0xAD, 
   0xB3, 0xAB, 0xAE, 0xBA, 0xBE, 0xC7, 0xD7, 0xB8, 0xC4, 0xD7, 0xB7, 0xC2, 0xD2, 0xC6, 0xD1, 0xDB, 
   0xD4, 0xDE, 0xE4, 0xC7, 0xD0, 0xD5, 0xC0, 0xC4, 0xCD, 0xAE, 0xB5, 0xC6, 0x99, 0xA5, 0xB8, 0x8E, 
   0x9D, 0xB0, 0x77, 0x80, 0x8C, 0x20, 0x1F, 0x25, 0x3B, 0x38, 0x3D, 0x6A, 0x68, 0x6F, 0x79, 0x77, 
   0x7D, 0x7F, 0x7D, 0x86, 0x86, 0x85, 0x92, 0x90, 0x8F, 0x95, 0x99, 0x9A, 0x9E, 0xA1, 0xA1, 0xA9, 
   0xA9, 0xA7, 0xB3, 0xAA, 0xAC, 0xB8, 0xAC, 0xAD, 0xB6, 0xB2, 0xB1, 0xB8, 0x8A, 0x8C, 0x97, 0x72, 
   0x7D, 0x89, 0x68, 0x76, 0x82, 0x62, 0x69, 0x75, 0x5A, 0x5F, 0x6A, 0x4E, 0x51, 0x60, 0x4E, 0x4D, 
   0x5D, 0x49, 0x4A, 0x58, 0x49, 0x4B, 0x58, 0x40, 0x41, 0x4F, 0x44, 0x44, 0x51, 0x4C, 0x4C, 0x58, 
   0x5C, 0x5B, 0x69, 0x68, 0x67, 0x77, 0x69, 0x69, 0x78, 0x7B, 0x7D, 0x89, 0x91, 0x90, 0x9A, 0x9D, 
   0x9A, 0xA2, 0x91, 0x8B, 0x93, 0x8C, 0x89, 0x8F, 0x8E, 0x8D, 0x91, 0x97, 0x92, 0x95, 0x9C, 0x93, 
   0x95, 0x95, 0x94, 0x96, 0x92, 0x95, 0x98, 0x95, 0x96, 0x98, 0x97, 0x94, 0x95, 0x95, 0x95, 0x95, 
   0x99, 0x97, 0x99, 0x9E, 0x9A, 0x9F, 0xA0, 0x99, 0x9D, 0x9B, 0x93, 0x9B, 0x9A, 0x93, 0x9A, 0x9A, 
   0x95, 0x98, 0x9B, 0x97, 0x98, 0x9A, 0x95, 0x9B, 0x9C, 0x96, 0x9E, 0xA3, 0x9D, 0xA1, 0xA7, 0xA1, 
   0xA9, 0x98, 0x95, 0xA7, 0x7F, 0x81, 0x9A, 0x83, 0x86, 0x9F, 0x77, 0x79, 0x8F, 0x6C, 0x71, 0x84, 
   0x76, 0x7C, 0x90, 0x79, 0x83, 0x97, 0x7C, 0x84, 0x95, 0x82, 0x89, 0x98, 0x85, 0x85, 0x96, 0x7D, 
   0x7F, 0x90, 0x7B, 0x7E, 0x90, 0x74, 0x7C, 0x86, 0x6A, 0x6D, 0x7B, 0x6F, 0x6B, 0x7F, 0x3F, 0x3D, 
   0x4F, 0x0D, 0x17, 0x20, 0x32, 0x4E, 0x5E, 0x56, 0x7F, 0x96, 0x81, 0xAA, 0xC7, 0x8F, 0xB5, 0xD5, 
   0x96, 0xBC, 0xDC, 0x99, 0xC2, 0xE2, 0xA1, 0xC8, 0xE4, 0xAB, 0xCE, 0xE2, 0xAB, 0xC8, 0xE0, 0x9A, 
   0xB7, 0xCF, 0x92, 0xAF, 0xC7, 0x93, 0xB2, 0xCB, 0x91, 0xB3, 0xCB, 0x8D, 0xB1, 0xC9, 0x9D, 0xC1, 
   0xD8, 0xB3, 0xD2, 0xE4, 0xA2, 0xBD, 0xD4, 0x8B, 0xA5, 0xBE, 0x84, 0xA5, 0xBE, 0x72, 0x82, 0xA0, 
   0x47, 0x41, 0x4D, 0x32, 0x32, 0x38, 0x2D, 0x35, 0x33, 0x32, 0x3C, 0x36, 0x55, 0x5C, 0x5D, 0x79, 
   0x7D, 0x89, 0x81, 0x82, 0x96, 0x7A, 0x7C, 0x8D, 0x8E, 0x98, 0xA4, 0xA3, 0xAD, 0xB4, 0xA8, 0xAE, 
   0xB6, 0x9D, 0xA0, 0xB2, 0x8D, 0x91, 0xA2, 0x8D, 0x91, 0x9E, 0x87, 0x8B, 0x9A, 0x83, 0x8D, 0x9C, 
   0x7C, 0x7E, 0x96, 0x65, 0x61, 0x7E, 0x6A, 0x6B, 0x82, 0x74, 0x7C, 0x8E, 0x7A, 0x85, 0x96, 0x7E, 
   0x87, 0x9A, 0x73, 0x7A, 0x8C, 0x7D, 0x88, 0x93, 0x90, 0x93, 0xA1, 0x80, 0x7F, 0x93, 0x6C, 0x71, 
   0x86, 0x8C, 0x8C, 0xA2, 0x5B, 0x50, 0x63, 0x36, 0x35, 0x45, 0x3C, 0x41, 0x53, 0x4C, 0x51, 0x61, 
   0x83, 0x84, 0x8B, 0xB0, 0xB0, 0xAF, 0x9A, 0x97, 0x9C, 0x97, 0x95, 0x9D, 0x95, 0x95, 0x9C, 0x91, 
   0x97, 0xA0, 0x92, 0x9C, 0xA7, 0x95, 0x9E, 0xAA, 0x92, 0x9A, 0xA5, 0x92, 0x9A, 0xA6, 0x91, 0x9B, 
   0xA4, 0x8D, 0x99, 0xA3, 0x8D, 0x9A, 0xA5, 0x91, 0x9E, 0xA9, 0x8D, 0x9A, 0xA8, 0x90, 0x9E, 0xAC, 
   0x93, 0xA0, 0xAE, 0x95, 0x9D, 0xAC, 0x8E, 0x93, 0xA3, 0x7B, 0x82, 0x93, 0x70, 0x79, 0x8D, 0x65, 
   0x6E, 0x7D, 0x5D, 0x5F, 0x68, 0x55, 0x58, 0x5F, 0x59, 0x5F, 0x63, 0x3E, 0x43, 0x4A, 0x45, 0x51, 
   0x53, 0x85, 0x94, 0x92, 0xB4, 0xB9, 0xBA, 0xB7, 0xB2, 0xBB, 0xA5, 0xA3, 0xAF, 0x99, 0x93, 0xA1, 
   0x95, 0x98, 0xA0, 0x9B, 0xA0, 0xA5, 0x96, 0x9B, 0xA3, 0x8F, 0x94, 0xA0, 0x84, 0x88, 0x97, 0x86, 
   0x8A, 0x99, 0x86, 0x8D, 0x97, 0x87, 0x90, 0x96, 0x86, 0x91, 0x98, 0x86, 0x91, 0x9A, 0x99, 0xA1, 
   0xAB, 0xBC, 0xBF, 0xC9, 0xA6, 0xA4, 0xAE, 0x8C, 0x8D, 0x9A, 0x8C, 0x91, 0x9C, 0x96, 0x98, 0xA0, 
   0x9E, 0x9A, 0xA1, 0x99, 0x96, 0x9D, 0x94, 0x96, 0x9C, 0x97, 0x99, 0xA0, 0x9A, 0x9B, 0xA0, 0x97, 
   0x9C, 0x9F, 0x9E, 0xA3, 0xA6, 0xA7, 0x9B, 0xA6, 0x6E, 0x5F, 0x77, 0x53, 0x54, 0x6A, 0x7B, 0x86, 
   0x94, 0x98, 0x99, 0xA2, 0x92, 0x8F, 0x93, 0x98, 0x95, 0x9C, 0x99, 0x93, 0xA1, 0x9A, 0x91, 0x9E, 
   0x95, 0x8C, 0x92, 0x82, 0x74, 0x7D, 0x37, 0x39, 0x36, 0x32, 0x34, 0x32, 0x37, 0x3B, 0x36, 0x54, 
   0x58, 0x56, 0x61, 0x64, 0x5F, 0x63, 0x63, 0x5D, 0x6C, 0x6C, 0x60, 0x74, 0x72, 0x65, 0x72, 0x6E, 
   0x65, 0x58, 0x59, 0x52, 0x35, 0x3A, 0x35, 0x28, 0x2C, 0x2D, 0x3C, 0x40, 0x43, 0x51, 0x54, 0x54, 
   0x59, 0x59, 0x57, 0x68, 0x65, 0x65, 0x78, 0x73, 0x79, 0x91, 0x91, 0x95, 0xAD, 0xAE, 0xB0, 0x9D, 
   0xA0, 0xA4, 0x8D, 0x94, 0x9C, 0x8E, 0x96, 0x9F, 0x8A, 0x95, 0x9D, 0x91, 0x9A, 0xA4, 0x95, 0x9A, 
   0xA7, 0x8A, 0x91, 0xA1, 0x7B, 0x85, 0x96, 0x7F, 0x89, 0x99, 0x85, 0x90, 0x9A, 0x83, 0x8E, 0x91, 
   0x82, 0x88, 0x85, 0x6D, 0x78, 0x73, 0x59, 0x64, 0x63, 0x4C, 0x53, 0x55, 0x51, 0x55, 0x55, 0x50, 
   0x54, 0x54, 0x4C, 0x50, 0x53, 0x4F, 0x52, 0x55, 0x56, 0x54, 0x54, 0x5C, 0x5B, 0x59, 0x5F, 0x60, 
   0x5E, 0x68, 0x68, 0x65, 0x71, 0x71, 0x6A, 0x7F, 0x7E, 0x77, 0x8B, 0x88, 0x85, 0x74, 0x6E, 0x6C, 
   0x47, 0x45, 0x45, 0x74, 0x7A, 0x83, 0xAA, 0xA7, 0xB4, 0xA9, 0xA2, 0xAC, 0xA8, 0xA2, 0xAC, 0xAC, 
   0xA4, 0xAE, 0xAD, 0xA4, 0xAD, 0xAE, 0xA4, 0xAB, 0xB1, 0xA6, 0xAC, 0xB1, 0xA8, 0xAC, 0xB2, 0xAA, 
   0xAD, 0xB1, 0xAE, 0xB5, 0xA6, 0xB1, 0xC1, 0xB0, 0xBB, 0xCF, 0xAB, 0xB4, 0xC5, 0xAB, 0xB5, 0xC4, 
   0xBC, 0xC5, 0xD3, 0xAC, 0xB4, 0xC0, 0xA2, 0xA5, 0xB4, 0xA2, 0xA6, 0xB7, 0x98, 0xA1, 0xB8, 0x82, 
   0x8D, 0xA0, 0x52, 0x56, 0x5D, 0x30, 0x2A, 0x35, 0x56, 0x54, 0x57, 0x6C, 0x6A, 0x70, 0x73, 0x75, 
   0x79, 0x77, 0x79, 0x82, 0x82, 0x80, 0x8D, 0x8C, 0x89, 0x8F, 0x97, 0x96, 0x9A, 0x9F, 0x9D, 0xA8, 
   0x9E, 0xA0, 0xAF, 0x9C, 0xA3, 0xAE, 0xA4, 0xA8, 0xB1, 0xB7, 0xB4, 0xBD, 0xA4, 0x9C, 0xAB, 0x74, 
   0x73, 0x80, 0x5F, 0x68, 0x6F, 0x5B, 0x62, 0x6C, 0x51, 0x55, 0x64, 0x54, 0x54, 0x62, 0x5F, 0x5E, 
   0x67, 0x69, 0x67, 0x6E, 0x72, 0x70, 0x7B, 0x71, 0x6E, 0x79, 0x86, 0x80, 0x8A, 0x93, 0x8D, 0x95, 
   0x9C, 0x97, 0x9F, 0x9B, 0x98, 0xA1, 0x9A, 0x97, 0x9F, 0x98, 0x96, 0x9B, 0x9B, 0x96, 0x9A, 0x9C, 
   0x98, 0x9B, 0x99, 0x98, 0x9B, 0x96, 0x99, 0x9B, 0x94, 0x98, 0x9A, 0x95, 0x96, 0x98, 0x99, 0x94, 
   0x98, 0x95, 0x94, 0x96, 0x92, 0x97, 0x98, 0x95, 0x96, 0x98, 0x96, 0x93, 0x96, 0x97, 0x94, 0x97, 
   0x98, 0x95, 0x98, 0x9A, 0x97, 0x99, 0x9B, 0x96, 0x99, 0x97, 0x93, 0x9A, 0x97, 0x93, 0x9A, 0x9B, 
   0x98, 0x9B, 0x9A, 0x96, 0x9A, 0x99, 0x95, 0x9D, 0x9B, 0x97, 0xA0, 0xA4, 0xA0, 0xA5, 0xA1, 0x9D, 
   0xAA, 0x84, 0x83, 0x9E, 0x77, 0x80, 0xA0, 0x7E, 0x84, 0x9E, 0x7D, 0x80, 0x93, 0x7C, 0x80, 0x91, 
   0x7C, 0x81, 0x94, 0x7E, 0x86, 0x9A, 0x82, 0x8A, 0x9D, 0x82, 0x87, 0x9A, 0x7F, 0x80, 0x92, 0x7F, 
   0x7E, 0x8F, 0x81, 0x83, 0x92, 0x81, 0x84, 0x8E, 0x63, 0x66, 0x78, 0x59, 0x59, 0x6D, 0x2A, 0x2D, 
   0x3B, 0x0B, 0x15, 0x1B, 0x29, 0x3C, 0x4B, 0x57, 0x78, 0x94, 0x7F, 0xA7, 0xC7, 0x87, 0xB0, 0xD4, 
   0x84, 0xAE, 0xD3, 0x86, 0xB1, 0xD3, 0x94, 0xBA, 0xD8, 0x92, 0xB4, 0xD0, 0x86, 0xA4, 0xC5, 0x70, 
   0x92, 0xAE, 0x6F, 0x91, 0xAC, 0x76, 0x96, 0xB4, 0x81, 0x9F, 0xBF, 0x7D, 0xA0, 0xBE, 0x84, 0xA9, 
   0xC5, 0x99, 0xB8, 0xD0, 0x92, 0xAE, 0xC7, 0x7D, 0x9A, 0xB1, 0x7A, 0x9B, 0xB2, 0x72, 0x81, 0x9B, 
   0x50, 0x4C, 0x59, 0x48, 0x47, 0x4D, 0x39, 0x3B, 0x3E, 0x36, 0x3C, 0x3F, 0x41, 0x48, 0x4B, 0x65, 
   0x6E, 0x75, 0x7A, 0x7D, 0x8D, 0x77, 0x78, 0x8B, 0x76, 0x82, 0x8F, 0x85, 0x95, 0x9C, 0xA1, 0xAC, 
   0xB5, 0xA9, 0xAB, 0xB9, 0x96, 0x94, 0xA3, 0x8D, 0x8E, 0x9A, 0x92, 0x98, 0xA4, 0x96, 0x9B, 0xA9, 
   0x77, 0x76, 0x8D, 0x6E, 0x67, 0x84, 0x6E, 0x73, 0x88, 0x7F, 0x86, 0x9A, 0x77, 0x80, 0x95, 0x73, 
   0x7D, 0x8F, 0x6A, 0x71, 0x8A, 0x79, 0x84, 0x93, 0x86, 0x8D, 0x9C, 0x74, 0x76, 0x8D, 0x75, 0x7B, 
   0x90, 0xA7, 0xA8, 0xB9, 0x66, 0x54, 0x69, 0x41, 0x40, 0x52, 0x49, 0x4B, 0x59, 0x72, 0x73, 0x7E, 
   0xA1, 0xA1, 0xA4, 0xA1, 0xA0, 0xA1, 0x91, 0x8F, 0x97, 0x95, 0x96, 0x9D, 0x96, 0x98, 0x9F, 0x94, 
   0x9D, 0xA6, 0x95, 0x9F, 0xAA, 0x94, 0x9E, 0xA8, 0x91, 0x9B, 0xA6, 0x8E, 0x98, 0xA6, 0x93, 0x9A, 
   0xA7, 0x91, 0x9C, 0xA6, 0x90, 0x9B, 0xA9, 0x8F, 0x9A, 0xA8, 0x8A, 0x99, 0xA4, 0x92, 0x9F, 0xA8, 
   0x95, 0xA0, 0xA9, 0x93, 0x9C, 0xA8, 0x8F, 0x94, 0xA4, 0x79, 0x80, 0x8F, 0x73, 0x79, 0x8B, 0x65, 
   0x6C, 0x7C, 0x62, 0x62, 0x6B, 0x5A, 0x5D, 0x66, 0x50, 0x52, 0x5C, 0x37, 0x3C, 0x42, 0x4C, 0x57, 
   0x58, 0x7A, 0x88, 0x87, 0x9D, 0xA6, 0xA8, 0xA4, 0xA5, 0xAD, 0x98, 0x95, 0xA4, 0x89, 0x89, 0x97, 
   0x84, 0x8D, 0x95, 0x90, 0x98, 0x9C, 0x98, 0x9E, 0xA2, 0x9F, 0x9E, 0xA7, 0x92, 0x93, 0x9F, 0x8E, 
   0x94, 0xA1, 0x8C, 0x93, 0x9C, 0x90, 0x97, 0x9B, 0x9B, 0xA0, 0xA8, 0xAA, 0xAC, 0xB5, 0xB2, 0xB4, 
   0xBC, 0xAE, 0xB0, 0xBB, 0x93, 0x95, 0xA1, 0x85, 0x8B, 0x98, 0x86, 0x8C, 0x96, 0x94, 0x99, 0x9E, 
   0x9B, 0x9D, 0xA1, 0x92, 0x94, 0x9A, 0x8F, 0x96, 0x9C, 0x92, 0x9A, 0x9F, 0x91, 0x98, 0x9C, 0x92, 
   0x92, 0x99, 0x9A, 0x9D, 0xA0, 0xAD, 0xAE, 0xB3, 0x93, 0x83, 0x9A, 0x62, 0x5A, 0x71, 0x76, 0x7B, 
   0x86, 0x8C, 0x8F, 0x95, 0x90, 0x8D, 0x90, 0x97, 0x92, 0x99, 0x97, 0x94, 0x9E, 0x99, 0x96, 0x9F, 
   0xA7, 0xA1, 0xA7, 0x9C, 0x94, 0x9D, 0x40, 0x41, 0x42, 0x2E, 0x2D, 0x2D, 0x45, 0x46, 0x3F, 0x61, 
   0x63, 0x5B, 0x63, 0x64, 0x5F, 0x67, 0x69, 0x63, 0x74, 0x75, 0x6B, 0x74, 0x73, 0x68, 0x73, 0x71, 
   0x64, 0x65, 0x64, 0x5A, 0x45, 0x43, 0x3E, 0x22, 0x24, 0x25, 0x3F, 0x45, 0x46, 0x58, 0x58, 0x5D, 
   0x70, 0x69, 0x6E, 0x93, 0x8E, 0x8E, 0x9E, 0x9B, 0x9E, 0x95, 0x99, 0x9C, 0x8C, 0x94, 0x9B, 0x7B, 
   0x87, 0x92, 0x7C, 0x8B, 0x98, 0x93, 0xA1, 0xAC, 0x99, 0xA8, 0xB0, 0x94, 0xA2, 0xA8, 0x84, 0x90, 
   0x9C, 0x7D, 0x8A, 0x99, 0x7E, 0x8E, 0x99, 0x7D, 0x8E, 0x94, 0x83, 0x91, 0x92, 0x79, 0x82, 0x82, 
   0x64, 0x69, 0x66, 0x4E, 0x55, 0x4E, 0x69, 0x6F, 0x69, 0x65, 0x69, 0x63, 0x64, 0x66, 0x61, 0x5B, 
   0x60, 0x60, 0x5E, 0x63, 0x67, 0x66, 0x66, 0x66, 0x68, 0x67, 0x64, 0x6C, 0x6D, 0x69, 0x7C, 0x7F, 
   0x7D, 0x82, 0x83, 0x83, 0x81, 0x80, 0x7F, 0x91, 0x8F, 0x8C, 0x9C, 0x99, 0x98, 0xAA, 0xA1, 0xA3, 
   0x6F, 0x66, 0x68, 0x6C, 0x6E, 0x76, 0xA2, 0xA2, 0xAC, 0xA6, 0xA1, 0xAA, 0xA7, 0xA1, 0xAA, 0xA9, 
   0xA2, 0xAB, 0xAB, 0xA3, 0xAC, 0xAD, 0xA3, 0xAB, 0xAE, 0xA4, 0xAB, 0xAE, 0xA6, 0xAA, 0xAA, 0xA3, 
   0xA6, 0xAC, 0xA8, 0xAF, 0x99, 0xA3, 0xB2, 0x9B, 0xA5, 0xB8, 0x9D, 0xA2, 0xB1, 0x9D, 0xA3, 0xAE, 
   0xA2, 0xA9, 0xB6, 0x9B, 0xA4, 0xB3, 0x98, 0x99, 0xB0, 0x94, 0x98, 0xAD, 0x90, 0x93, 0xAE, 0x73, 
   0x77, 0x8E, 0x48, 0x4B, 0x52, 0x4D, 0x4B, 0x53, 0x5C, 0x5C, 0x61, 0x67, 0x65, 0x6C, 0x6D, 0x71, 
   0x74, 0x72, 0x76, 0x7A, 0x7E, 0x7D, 0x83, 0x83, 0x81, 0x84, 0x8A, 0x8C, 0x90, 0x93, 0x97, 0xA1, 
   0x8F, 0x98, 0xA4, 0x8E, 0x99, 0xA4, 0x97, 0x9C, 0xA6, 0xA5, 0xA2, 0xAB, 0xA3, 0x9A, 0xA8, 0x7B, 
   0x76, 0x85, 0x59, 0x5D, 0x68, 0x4C, 0x53, 0x5E, 0x4E, 0x53, 0x5F, 0x80, 0x7D, 0x86, 0x97, 0x8E, 
   0x94, 0x93, 0x8B, 0x90, 0x93, 0x8E, 0x97, 0x91, 0x8E, 0x96, 0x98, 0x93, 0x9A, 0x99, 0x96, 0x9A, 
   0x97, 0x96, 0x9A, 0x94, 0x94, 0x98, 0x93, 0x91, 0x95, 0x96, 0x93, 0x94, 0x9C, 0x93, 0x98, 0x98, 
   0x94, 0x98, 0x94, 0x94, 0x97, 0x93, 0x96, 0x99, 0x93, 0x96, 0x99, 0x93, 0x95, 0x98, 0x96, 0x94, 
   0x98, 0x96, 0x92, 0x98, 0x93, 0x95, 0x9A, 0x97, 0x95, 0x9A, 0x98, 0x94, 0x9A, 0x98, 0x94, 0x9A, 
   0x97, 0x93, 0x99, 0x9B, 0x96, 0x9C, 0xA1, 0x97, 0x9D, 0x9A, 0x93, 0x99, 0x9C, 0x96, 0x9B, 0xA0, 
   0x9A, 0x9F, 0x99, 0x95, 0x9B, 0x98, 0x95, 0x9D, 0x9E, 0x9B, 0xA1, 0x9C, 0x9D, 0xA3, 0x87, 0x8E, 
   0xA0, 0x72, 0x7C, 0x9B, 0x71, 0x7F, 0xA1, 0x70, 0x77, 0x93, 0x74, 0x76, 0x88, 0x7A, 0x7B, 0x8A, 
   0x7D, 0x80, 0x90, 0x7F, 0x88, 0x98, 0x7D, 0x84, 0x96, 0x7D, 0x7F, 0x91, 0x7D, 0x7C, 0x8F, 0x85, 
   0x86, 0x97, 0x88, 0x88, 0x9A, 0x83, 0x82, 0x92, 0x66, 0x68, 0x78, 0x49, 0x4B, 0x58, 0x16, 0x19, 
   0x23, 0x0D, 0x15, 0x1C, 0x34, 0x43, 0x55, 0x67, 0x89, 0xA7, 0x88, 0xB2, 0xD1, 0x83, 0xAC, 0xCF, 
   0x82, 0xAA, 0xD1, 0x7E, 0xA7, 0xCE, 0x76, 0x9D, 0xC2, 0x6E, 0x92, 0xB7, 0x70, 0x93, 0xB7, 0x77, 
   0x9B, 0xBA, 0x88, 0xA8, 0xC5, 0x8A, 0xA6, 0xC4, 0x7A, 0x96, 0xB7, 0x6E, 0x94, 0xB6, 0x81, 0xAC, 
   0xCC, 0x9E, 0xC3, 0xDD, 0x8F, 0xB2, 0xCC, 0x73, 0x93, 0xB0, 0x74, 0x95, 0xB1, 0x70, 0x7E, 0x95, 
   0x5C, 0x59, 0x60, 0x5B, 0x57, 0x5A, 0x58, 0x57, 0x57, 0x56, 0x5A, 0x5D, 0x54, 0x59, 0x5C, 0x6E, 
   0x76, 0x7E, 0x78, 0x7D, 0x8C, 0x6F, 0x71, 0x82, 0x6E, 0x73, 0x82, 0x7F, 0x8A, 0x95, 0x9A, 0xA7, 
   0xAF, 0xB6, 0xBB, 0xC7, 0x9F, 0x9A, 0xAC, 0x88, 0x85, 0x95, 0x98, 0x9E, 0xA7, 0x9C, 0xA3, 0xAF, 
   0x80, 0x87, 0x97, 0x89, 0x8D, 0xA0, 0x90, 0x98, 0xA8, 0x90, 0x92, 0xA3, 0x68, 0x6A, 0x7C, 0x60, 
   0x65, 0x77, 0x6A, 0x77, 0x8D, 0x8A, 0x94, 0xA3, 0x89, 0x92, 0x9F, 0x77, 0x80, 0x90, 0x8B, 0x91, 
   0xA2, 0x96, 0x92, 0xA4, 0x57, 0x48, 0x5A, 0x46, 0x48, 0x55, 0x4F, 0x53, 0x5C, 0x81, 0x83, 0x8A, 
   0x9D, 0x9E, 0xA1, 0x99, 0x99, 0x9D, 0x93, 0x94, 0x9C, 0x97, 0x9B, 0xA1, 0x94, 0x99, 0xA0, 0x96, 
   0x9C, 0xA6, 0x95, 0x9D, 0xA8, 0x93, 0x9D, 0xA7, 0x8D, 0x97, 0xA2, 0x89, 0x94, 0xA0, 0x94, 0x99, 
   0xA6, 0x9B, 0xA0, 0xAA, 0x97, 0x9D, 0xA9, 0x94, 0x9C, 0xA9, 0x93, 0x9D, 0xAA, 0x93, 0x9C, 0xA8, 
   0x94, 0x9C, 0xA7, 0x92, 0x9A, 0xA6, 0x8A, 0x8F, 0x9D, 0x7D, 0x82, 0x91, 0x74, 0x79, 0x89, 0x5D, 
   0x66, 0x74, 0x61, 0x63, 0x6B, 0x59, 0x59, 0x60, 0x41, 0x45, 0x4F, 0x39, 0x42, 0x49, 0x68, 0x73, 
   0x77, 0x7B, 0x87, 0x8C, 0x81, 0x90, 0x98, 0x85, 0x91, 0x9E, 0x89, 0x8D, 0x9C, 0x8B, 0x8D, 0x96, 
   0x82, 0x8D, 0x91, 0x81, 0x8C, 0x92, 0x7D, 0x88, 0x91, 0x90, 0x94, 0x9E, 0xA1, 0xA1, 0xAB, 0x9E, 
   0x9D, 0xA7, 0x9B, 0x9C, 0xA2, 0xAD, 0xAB, 0xAF, 0xBC, 0xB9, 0xC1, 0xB3, 0xAE, 0xB8, 0x9B, 0x99, 
   0xA3, 0x96, 0x97, 0xA6, 0x92, 0x93, 0xA2, 0x96, 0x9A, 0xA6, 0x95, 0x9B, 0xA7, 0x93, 0x99, 0xA3, 
   0x93, 0x98, 0xA1, 0x93, 0x96, 0x9E, 0x9B, 0x9E, 0xA5, 0x98, 0x9C, 0xA4, 0x91, 0x96, 0x9D, 0xA0, 
   0x9F, 0xA9, 0xA5, 0xA4, 0xA8, 0xB5, 0xB3, 0xB5, 0xAD, 0x9E, 0xAF, 0x74, 0x68, 0x7F, 0x86, 0x85, 
   0x8E, 0x93, 0x92, 0x96, 0x90, 0x8D, 0x92, 0x93, 0x8F, 0x96, 0x95, 0x92, 0x9A, 0x91, 0x90, 0x98, 
   0x91, 0x90, 0x97, 0x8F, 0x8D, 0x95, 0x4B, 0x4C, 0x4C, 0x3D, 0x3C, 0x3C, 0x51, 0x52, 0x48, 0x5C, 
   0x5E, 0x51, 0x5F, 0x60, 0x59, 0x68, 0x6A, 0x62, 0x6A, 0x6C, 0x63, 0x6C, 0x6D, 0x64, 0x71, 0x72, 
   0x65, 0x70, 0x6B, 0x62, 0x5E, 0x5A, 0x57, 0x2A, 0x2C, 0x2D, 0x44, 0x47, 0x48, 0x6B, 0x69, 0x6C, 
   0x8A, 0x87, 0x88, 0xA1, 0xA0, 0x9D, 0x98, 0x9C, 0x9C, 0x88, 0x92, 0x95, 0x86, 0x91, 0x99, 0x81, 
   0x8E, 0x99, 0x81, 0x90, 0x9B, 0x93, 0x9F, 0xA7, 0xA0, 0xAF, 0xB1, 0x7D, 0x8B, 0x9B, 0x6B, 0x7C, 
   0x8B, 0x71, 0x84, 0x91, 0x7B, 0x91, 0x98, 0x83, 0x9A, 0x9C, 0x7F, 0x90, 0x92, 0x57, 0x5E, 0x62, 
   0x26, 0x2C, 0x2D, 0x36, 0x3D, 0x37, 0x75, 0x79, 0x70, 0x68, 0x68, 0x5E, 0x65, 0x63, 0x59, 0x65, 
   0x66, 0x61, 0x76, 0x77, 0x74, 0x88, 0x88, 0x80, 0x8C, 0x8B, 0x84, 0x8C, 0x8D, 0x87, 0xAA, 0xAA, 
   0xA6, 0xB0, 0xAF, 0xAD, 0xAB, 0xA8, 0xA6, 0xAA, 0xA9, 0xAA, 0xA2, 0xA5, 0xAD, 0xAB, 0xAA, 0xB4, 
   0xA5, 0x9C, 0xA3, 0x79, 0x75, 0x7B, 0x9D, 0x9B, 0xA2, 0xA6, 0xA4, 0xAA, 0xA8, 0xA4, 0xAB, 0xAD, 
   0xA8, 0xB0, 0xAF, 0xA7, 0xAF, 0xB2, 0xA8, 0xB0, 0xAD, 0xA3, 0xAA, 0xAC, 0xA4, 0xA8, 0xB0, 0xA9, 
   0xAD, 0xAF, 0xA7, 0xAF, 0x9B, 0x9D, 0xA9, 0x9B, 0xA1, 0xAD, 0x9A, 0x9E, 0xA7, 0x9E, 0xA1, 0xAA, 
   0xA3, 0xA5, 0xB2, 0x9B, 0x9D, 0xAE, 0x94, 0x94, 0xAC, 0x97, 0x9A, 0xB0, 0x98, 0x98, 0xB3, 0x67, 
   0x67, 0x7C, 0x43, 0x47, 0x4F, 0x4F, 0x51, 0x58, 0x5C, 0x5B, 0x63, 0x5F, 0x5F, 0x69, 0x62, 0x67, 
   0x6A, 0x67, 0x6C, 0x6D, 0x70, 0x6F, 0x71, 0x71, 0x70, 0x70, 0x78, 0x7E, 0x81, 0x81, 0x8B, 0x93, 
   0x82, 0x8F, 0x96, 0x87, 0x94, 0x9D, 0x90, 0x96, 0xA0, 0x99, 0x9B, 0xA1, 0x9D, 0x98, 0xA4, 0x7D, 
   0x7A, 0x8A, 0x51, 0x55, 0x5F, 0x4D, 0x54, 0x59, 0x5C, 0x5F, 0x67, 0x8E, 0x89, 0x91, 0x97, 0x8D, 
   0x93, 0x93, 0x88, 0x8E, 0x94, 0x8C, 0x95, 0x95, 0x92, 0x99, 0x97, 0x94, 0x99, 0x98, 0x96, 0x98, 
   0x95, 0x96, 0x98, 0x95, 0x96, 0x99, 0x96, 0x94, 0x98, 0x98, 0x95, 0x97, 0x99, 0x94, 0x98, 0x96, 
   0x95, 0x99, 0x92, 0x94, 0x97, 0x93, 0x94, 0x97, 0x96, 0x95, 0x98, 0x98, 0x95, 0x99, 0x97, 0x94, 
   0x98, 0x96, 0x93, 0x99, 0x94, 0x94, 0x9A, 0x97, 0x94, 0x9B, 0x9E, 0x9B, 0xA1, 0x9B, 0x98, 0x9E, 
   0x99, 0x94, 0x9B, 0xA1, 0x9D, 0xA4, 0xA5, 0x9A, 0xA3, 0x9F, 0x97, 0x9E, 0xA2, 0x9C, 0xA0, 0x9E, 
   0x98, 0x9B, 0x9B, 0x95, 0x9C, 0xA0, 0x9A, 0xA5, 0xA7, 0xA2, 0xAD, 0x8E, 0x8F, 0x9F, 0x74, 0x7F, 
   0x9A, 0x75, 0x7F, 0x9E, 0x74, 0x7C, 0x9A, 0x72, 0x78, 0x92, 0x77, 0x78, 0x8B, 0x7B, 0x7B, 0x89, 
   0x7C, 0x7E, 0x8C, 0x81, 0x87, 0x96, 0x78, 0x7D, 0x8F, 0x7A, 0x7C, 0x8E, 0x79, 0x7B, 0x8C, 0x7A, 
   0x7C, 0x8D, 0x7D, 0x81, 0x90, 0x6E, 0x71, 0x80, 0x5F, 0x63, 0x70, 0x3B, 0x40, 0x4A, 0x1B, 0x20, 
   0x2E, 0x35, 0x41, 0x53, 0x60, 0x75, 0x90, 0x7F, 0xA3, 0xC1, 0x84, 0xAE, 0xCC, 0x86, 0xAD, 0xCD, 
   0x83, 0xA8, 0xCC, 0x7E, 0xA4, 0xCA, 0x6F, 0x94, 0xBC, 0x74, 0x98, 0xC0, 0x93, 0xB4, 0xD8, 0x9A, 
   0xBD, 0xDC, 0xA1, 0xC2, 0xE0, 0x98, 0xB5, 0xD4, 0x7E, 0x9D, 0xBF, 0x75, 0xA1, 0xC1, 0x7C, 0xB0, 
   0xCF, 0x83, 0xB1, 0xD0, 0x87, 0xAD, 0xCC, 0x76, 0x98, 0xB8, 0x78, 0x9C, 0xB8, 0x73, 0x84, 0x97, 
   0x5A, 0x58, 0x5B, 0x5D, 0x58, 0x5A, 0x4B, 0x4D, 0x4D, 0x4C, 0x53, 0x51, 0x4D, 0x50, 0x4D, 0x4E, 
   0x55, 0x55, 0x75, 0x7C, 0x84, 0x7F, 0x82, 0x92, 0x7D, 0x7E, 0x8E, 0x86, 0x89, 0x99, 0x89, 0x92, 
   0x9D, 0xC2, 0xC7, 0xD1, 0xAB, 0xA4, 0xB8, 0x89, 0x81, 0x9A, 0x88, 0x89, 0x9B, 0x7A, 0x82, 0x94, 
   0x87, 0x94, 0xA1, 0x99, 0xA4, 0xAE, 0x96, 0x9C, 0xAE, 0x7D, 0x79, 0x92, 0x64, 0x64, 0x7C, 0x6F, 
   0x78, 0x89, 0x8B, 0x97, 0xA7, 0x91, 0x9A, 0xAA, 0x8C, 0x97, 0xA4, 0x93, 0x9D, 0xAA, 0xA8, 0xA7, 
   0xB8, 0x6D, 0x64, 0x74, 0x47, 0x42, 0x4A, 0x5A, 0x5E, 0x63, 0x77, 0x7B, 0x82, 0x90, 0x94, 0x9C, 
   0x93, 0x97, 0x9B, 0x95, 0x99, 0x9C, 0x92, 0x94, 0x9C, 0x94, 0x97, 0xA1, 0x92, 0x98, 0xA0, 0x95, 
   0x9C, 0xA6, 0x93, 0x99, 0xA4, 0x93, 0x9B, 0xA5, 0x91, 0x99, 0xA4, 0x8C, 0x97, 0xA3, 0x95, 0x9B, 
   0xA6, 0x9B, 0xA2, 0xAA, 0x96, 0x9E, 0xA7, 0x96, 0x9F, 0xA9, 0x96, 0xA1, 0xAF, 0x95, 0x9D, 0xAD, 
   0x91, 0x9A, 0xA7, 0x90, 0x97, 0xA3, 0x86, 0x8B, 0x99, 0x7B, 0x82, 0x92, 0x6A, 0x6A, 0x7B, 0x53, 
   0x56, 0x64, 0x55, 0x56, 0x5F, 0x4D, 0x50, 0x56, 0x3A, 0x40, 0x47, 0x5B, 0x65, 0x6D, 0x81, 0x8C, 
   0x95, 0x7F, 0x88, 0x93, 0x7C, 0x84, 0x93, 0x7B, 0x83, 0x94, 0x7F, 0x87, 0x97, 0x8E, 0x8D, 0x99, 
   0x97, 0x9C, 0xA3, 0x91, 0x95, 0x9E, 0x88, 0x8E, 0x9C, 0x8F, 0x95, 0x9E, 0x9B, 0x9E, 0xA2, 0xAD, 
   0xAB, 0xB2, 0xB3, 0xB3, 0xB5, 0xAE, 0xAE, 0xB1, 0xA6, 0xA8, 0xB1, 0x91, 0x93, 0x9F, 0x8A, 0x8C, 
   0x99, 0x8E, 0x94, 0xA0, 0x92, 0x96, 0xA1, 0x94, 0x99, 0xA3, 0x95, 0x9B, 0xA5, 0x94, 0x98, 0xA6, 
   0x8F, 0x93, 0x9F, 0xA9, 0xAE, 0xB6, 0xB9, 0xBC, 0xC2, 0xB7, 0xB7, 0xBF, 0xAD, 0xAE, 0xB7, 0xB3, 
   0xB1, 0xBC, 0xAA, 0xA5, 0xAD, 0xAC, 0xAB, 0xAD, 0xA8, 0x9F, 0xAC, 0x85, 0x7B, 0x8D, 0x8D, 0x8A, 
   0x90, 0x96, 0x93, 0x97, 0x9A, 0x97, 0x9D, 0x9D, 0x99, 0xA0, 0x95, 0x92, 0x99, 0x8D, 0x8C, 0x94, 
   0x88, 0x8A, 0x94, 0x88, 0x86, 0x92, 0x36, 0x36, 0x38, 0x4E, 0x4E, 0x4E, 0x55, 0x56, 0x4F, 0x57, 
   0x59, 0x4D, 0x58, 0x59, 0x50, 0x63, 0x64, 0x59, 0x66, 0x66, 0x5D, 0x69, 0x69, 0x62, 0x6C, 0x6E, 
   0x63, 0x6C, 0x6C, 0x64, 0x68, 0x65, 0x5F, 0x3D, 0x3D, 0x3B, 0x53, 0x59, 0x56, 0x8C, 0x8F, 0x8A, 
   0xA0, 0xA1, 0x9C, 0x90, 0x98, 0x96, 0x85, 0x8F, 0x95, 0x8E, 0x9B, 0xA4, 0x7C, 0x8B, 0x96, 0x76, 
   0x88, 0x93, 0x7B, 0x8D, 0x97, 0x84, 0x93, 0x9A, 0x87, 0x94, 0x9B, 0x6C, 0x79, 0x8C, 0x57, 0x69, 
   0x78, 0x67, 0x7B, 0x84, 0x74, 0x87, 0x8D, 0x7E, 0x8F, 0x94, 0x5B, 0x64, 0x6A, 0x1D, 0x1E, 0x23, 
   0x0B, 0x0E, 0x0F, 0x35, 0x3A, 0x34, 0x87, 0x8A, 0x80, 0x95, 0x95, 0x89, 0x96, 0x94, 0x85, 0x8B, 
   0x89, 0x7C, 0x8E, 0x8E, 0x84, 0xA3, 0xA3, 0x98, 0xAF, 0xAE, 0xA3, 0xA5, 0xA6, 0x99, 0xA9, 0xA9, 
   0x9B, 0xAD, 0xA9, 0xA1, 0xA4, 0xA0, 0x9C, 0xA5, 0xA3, 0xA9, 0x9A, 0xA0, 0xB1, 0x9C, 0xA4, 0xB7, 
   0xAA, 0xAA, 0xB6, 0x90, 0x8F, 0x92, 0xA5, 0xA3, 0xAA, 0xA9, 0xA6, 0xAC, 0xA6, 0xA2, 0xA9, 0xA8, 
   0xA3, 0xAB, 0xAA, 0xA3, 0xAA, 0xAC, 0xA4, 0xAB, 0xA9, 0x9F, 0xA7, 0xA6, 0x9E, 0xA4, 0xAB, 0xA5, 
   0xA9, 0xAA, 0xA1, 0xA8, 0xA2, 0x9D, 0xA1, 0x9E, 0x9E, 0xA0, 0x9F, 0xA0, 0xA3, 0xA0, 0xA0, 0xA9, 
   0x96, 0x95, 0xA3, 0x9A, 0x96, 0xA3, 0x9C, 0x9B, 0xAA, 0x9B, 0x9D, 0xAF, 0x92, 0x94, 0xA8, 0x51, 
   0x54, 0x60, 0x3A, 0x41, 0x47, 0x49, 0x4D, 0x56, 0x55, 0x53, 0x5B, 0x52, 0x54, 0x59, 0x52, 0x58, 
   0x5A, 0x54, 0x59, 0x5D, 0x5C, 0x5C, 0x61, 0x61, 0x62, 0x67, 0x62, 0x69, 0x6E, 0x67, 0x72, 0x79, 
   0x6F, 0x7D, 0x83, 0x77, 0x84, 0x8B, 0x83, 0x8B, 0x95, 0x91, 0x96, 0x9C, 0x89, 0x8D, 0x96, 0x6F, 
   0x71, 0x7F, 0x48, 0x4C, 0x55, 0x4F, 0x52, 0x57, 0x69, 0x68, 0x6E, 0x8C, 0x89, 0x8E, 0x8D, 0x8A, 
   0x8E, 0x93, 0x91, 0x95, 0x97, 0x93, 0x99, 0x95, 0x94, 0x9A, 0x95, 0x94, 0x98, 0x98, 0x95, 0x99, 
   0x97, 0x95, 0x99, 0x97, 0x96, 0x9C, 0x97, 0x95, 0x9C, 0x97, 0x96, 0x9A, 0x98, 0x96, 0x99, 0x96, 
   0x98, 0x9B, 0x93, 0x96, 0x99, 0x96, 0x96, 0x9A, 0x9A, 0x97, 0x9B, 0x9A, 0x96, 0x9A, 0x99, 0x96, 
   0x9A, 0x96, 0x96, 0x99, 0x95, 0x96, 0x9A, 0x97, 0x95, 0x99, 0x9A, 0x9A, 0x9D, 0x97, 0x98, 0x9C, 
   0x98, 0x96, 0x9A, 0x9B, 0x9A, 0x9E, 0xA0, 0x97, 0xA0, 0xA0, 0x9B, 0xA0, 0xA5, 0x9F, 0xA3, 0xA1, 
   0x99, 0x9F, 0x9E, 0x94, 0x9D, 0x9E, 0x96, 0xA1, 0xA1, 0x99, 0xA8, 0x7F, 0x7C, 0x97, 0x70, 0x77, 
   0x96, 0x75, 0x78, 0x94, 0x76, 0x7A, 0x90, 0x7D, 0x82, 0x99, 0x79, 0x7E, 0x91, 0x7B, 0x7F, 0x8C, 
   0x7E, 0x81, 0x8D, 0x87, 0x88, 0x98, 0x88, 0x8A, 0x9B, 0x8A, 0x8D, 0x9E, 0x87, 0x8B, 0x9C, 0x84, 
   0x84, 0x96, 0x7E, 0x7F, 0x8A, 0x78, 0x7A, 0x89, 0x5D, 0x64, 0x70, 0x4E, 0x5A, 0x67, 0x5E, 0x6C, 
   0x81, 0x69, 0x7D, 0x99, 0x8A, 0xA6, 0xC9, 0x89, 0xAC, 0xCD, 0x93, 0xBC, 0xDC, 0x96, 0xBA, 0xDB, 
   0x93, 0xB6, 0xD8, 0x85, 0xAC, 0xCE, 0x79, 0x9F, 0xC4, 0x7F, 0xA3, 0xC8, 0x84, 0xA1, 0xC4, 0x7C, 
   0xA3, 0xC3, 0x7E, 0xAB, 0xCC, 0x74, 0xA3, 0xC5, 0x79, 0xA7, 0xCA, 0x8A, 0xBB, 0xDA, 0x82, 0xB6, 
   0xD5, 0x7A, 0xAD, 0xD1, 0x7B, 0xA5, 0xC8, 0x75, 0x99, 0xBA, 0x7D, 0xA4, 0xBC, 0x7A, 0x8A, 0x9C, 
   0x4C, 0x4B, 0x51, 0x4F, 0x4D, 0x4F, 0x34, 0x39, 0x3E, 0x36, 0x40, 0x43, 0x3C, 0x43, 0x44, 0x33, 
   0x3C, 0x3C, 0x57, 0x61, 0x65, 0x89, 0x89, 0x96, 0x94, 0x93, 0xA4, 0x86, 0x88, 0x9B, 0x72, 0x77, 
   0x87, 0x99, 0xA0, 0xA9, 0xAF, 0xB1, 0xC1, 0x8F, 0x8D, 0xA6, 0x79, 0x79, 0x91, 0x83, 0x88, 0x9E, 
   0x91, 0x9C, 0xA8, 0x9B, 0xA0, 0xAC, 0x80, 0x83, 0x98, 0x62, 0x62, 0x81, 0x6C, 0x73, 0x8E, 0x85, 
   0x91, 0xA1, 0x92, 0x9A, 0xA7, 0x96, 0x9B, 0xAB, 0xA8, 0xAB, 0xB9, 0xAF, 0xAD, 0xBA, 0x8F, 0x89, 
   0x97, 0x50, 0x4C, 0x57, 0x50, 0x56, 0x58, 0x83, 0x8B, 0x8B, 0xA6, 0xAA, 0xAF, 0x9D, 0x9C, 0xA4, 
   0x94, 0x95, 0x9B, 0x93, 0x97, 0x9B, 0x8E, 0x92, 0x9A, 0x92, 0x97, 0xA2, 0x95, 0x9C, 0xA6, 0x98, 
   0xA1, 0xA9, 0x91, 0x9A, 0xA4, 0x97, 0x9E, 0xA9, 0x95, 0x99, 0xA6, 0x90, 0x9A, 0xA6, 0x93, 0x9C, 
   0xA9, 0x96, 0x9E, 0xAD, 0x97, 0xA1, 0xAC, 0x96, 0xA1, 0xAC, 0x95, 0xA3, 0xB0, 0x93, 0x9F, 0xAA, 
   0x8D, 0x99, 0xA0, 0x8D, 0x95, 0xA0, 0x86, 0x8A, 0x9B, 0x7B, 0x80, 0x91, 0x68, 0x65, 0x76, 0x5A, 
   0x59, 0x67, 0x54, 0x52, 0x5C, 0x41, 0x45, 0x4A, 0x33, 0x3E, 0x3D, 0x71, 0x79, 0x82, 0x81, 0x88, 
   0x97, 0x7A, 0x81, 0x8F, 0x79, 0x7E, 0x8C, 0x7E, 0x83, 0x93, 0x82, 0x8B, 0x9B, 0x8B, 0x8D, 0x9F, 
   0x98, 0x9C, 0xA7, 0x98, 0x96, 0xA2, 0x93, 0x95, 0xA4, 0x91, 0x96, 0x9F, 0x93, 0x9A, 0x9D, 0xA0, 
   0xA3, 0xA8, 0xA3, 0xA3, 0xA5, 0x9C, 0x9D, 0xA3, 0x94, 0x9B, 0xA6, 0x94, 0x99, 0xA5, 0x97, 0x9C, 
   0xA8, 0x98, 0x9C, 0xA6, 0x9C, 0x9C, 0xA3, 0x9B, 0x9E, 0xA5, 0x96, 0x9A, 0xA2, 0x96, 0x9C, 0xA8, 
   0x93, 0x9B, 0xA7, 0xB4, 0xBB, 0xC1, 0xC4, 0xC3, 0xC7, 0xB9, 0xB6, 0xBD, 0xAD, 0xAC, 0xB5, 0xA4, 
   0xA3, 0xAB, 0x99, 0x95, 0x9D, 0xA0, 0x9E, 0xA6, 0xA6, 0xA2, 0xAE, 0xA2, 0x9D, 0xA7, 0x9E, 0x97, 
   0x9A, 0x9B, 0x95, 0x98, 0x9D, 0x98, 0xA0, 0x98, 0x94, 0x9B, 0x8B, 0x89, 0x8F, 0x84, 0x86, 0x8D, 
   0x84, 0x8A, 0x95, 0x8A, 0x8E, 0x9A, 0x25, 0x23, 0x2E, 0x37, 0x35, 0x37, 0x4C, 0x4C, 0x47, 0x51, 
   0x52, 0x4A, 0x50, 0x51, 0x47, 0x58, 0x58, 0x4C, 0x61, 0x60, 0x56, 0x62, 0x61, 0x5B, 0x65, 0x67, 
   0x5F, 0x78, 0x78, 0x6D, 0x7A, 0x7B, 0x70, 0x59, 0x5C, 0x55, 0x68, 0x69, 0x66, 0x93, 0x97, 0x92, 
   0x88, 0x92, 0x8F, 0x73, 0x7D, 0x85, 0x6B, 0x78, 0x7F, 0x73, 0x80, 0x87, 0x8D, 0x99, 0xA3, 0x95, 
   0xA3, 0xAC, 0x79, 0x8B, 0x91, 0x6A, 0x7A, 0x82, 0x74, 0x84, 0x8F, 0x77, 0x88, 0x91, 0x71, 0x83, 
   0x88, 0x5E, 0x6F, 0x74, 0x5F, 0x6E, 0x74, 0x45, 0x50, 0x56, 0x2B, 0x2E, 0x32, 0x21, 0x1E, 0x1F, 
   0x0F, 0x0D, 0x0D, 0x33, 0x35, 0x2E, 0x87, 0x89, 0x7F, 0x9F, 0xA1, 0x94, 0xB4, 0xB3, 0xA4, 0xB6, 
   0xB4, 0xA5, 0xA9, 0xA6, 0x9B, 0xA8, 0xA6, 0x9A, 0xA6, 0xA3, 0x96, 0xA4, 0xA3, 0x95, 0xA7, 0xA4, 
   0x97, 0xA8, 0xA2, 0x9B, 0x9F, 0x9E, 0x9C, 0xA1, 0xA2, 0xA8, 0xA2, 0xA7, 0xB7, 0x9F, 0xA7, 0xBC, 
   0xA0, 0xA7, 0xB3, 0x97, 0x9F, 0xA0, 0xA2, 0xA5, 0xAD, 0xAC, 0xA8, 0xB2, 0xA4, 0xA0, 0xA6, 0xA1, 
   0x9E, 0xA4, 0xA2, 0x9D, 0xA4, 0xA1, 0x9A, 0xA1, 0x9D, 0x96, 0x9D, 0x9A, 0x93, 0x9A, 0x9A, 0x94, 
   0x9B, 0x9C, 0x97, 0x9E, 0x9E, 0x96, 0x9A, 0x9E, 0x98, 0x97, 0xA3, 0x9F, 0xA1, 0x9E, 0x9B, 0xA6, 
   0x97, 0x97, 0xA4, 0xA9, 0xAA, 0xAF, 0xA3, 0xA4, 0xAC, 0x9E, 0x9E, 0xAC, 0x85, 0x84, 0x91, 0x3D, 
   0x41, 0x46, 0x3B, 0x42, 0x48, 0x45, 0x49, 0x53, 0x48, 0x49, 0x51, 0x48, 0x4A, 0x4B, 0x42, 0x47, 
   0x4A, 0x40, 0x45, 0x4C, 0x41, 0x46, 0x50, 0x47, 0x4B, 0x59, 0x42, 0x47, 0x54, 0x4A, 0x53, 0x5F, 
   0x5A, 0x65, 0x6D, 0x74, 0x7C, 0x81, 0x87, 0x8C, 0x94, 0x87, 0x8B, 0x92, 0x7D, 0x82, 0x89, 0x6B, 
   0x6E, 0x7A, 0x50, 0x52, 0x5E, 0x57, 0x55, 0x60, 0x7E, 0x79, 0x7E, 0x90, 0x8E, 0x8E, 0x91, 0x95, 
   0x92, 0x91, 0x96, 0x96, 0x92, 0x93, 0x98, 0x93, 0x93, 0x99, 0x95, 0x93, 0x99, 0x98, 0x94, 0x98, 
   0x97, 0x93, 0x9A, 0x95, 0x94, 0x9D, 0x93, 0x95, 0x9D, 0x93, 0x97, 0x9D, 0x98, 0x97, 0x9D, 0x9A, 
   0x98, 0x9E, 0x98, 0x97, 0x9D, 0x99, 0x97, 0x9D, 0x9C, 0x9A, 0xA0, 0x98, 0x96, 0x9C, 0x95, 0x94, 
   0x9A, 0x98, 0x96, 0x9A, 0x9B, 0x97, 0x9B, 0x9A, 0x96, 0x9A, 0x96, 0x96, 0x9A, 0x95, 0x96, 0x99, 
   0x97, 0x95, 0x99, 0x98, 0x97, 0x9B, 0x9D, 0x98, 0x9D, 0x9A, 0x94, 0x9D, 0xA0, 0x9A, 0xA4, 0x9D, 
   0x95, 0xA0, 0x96, 0x8C, 0x96, 0x97, 0x90, 0x99, 0x93, 0x8D, 0x9C, 0x7A, 0x78, 0x93, 0x72, 0x78, 
   0x93, 0x72, 0x77, 0x8C, 0x6E, 0x76, 0x87, 0x7E, 0x88, 0x9C, 0x7C, 0x84, 0x96, 0x7B, 0x83, 0x92, 
   0x7F, 0x85, 0x94, 0x81, 0x81, 0x93, 0x7E, 0x80, 0x93, 0x81, 0x87, 0x99, 0x87, 0x8D, 0x9D, 0x8B, 
   0x8B, 0x9B, 0x78, 0x75, 0x84, 0x6A, 0x69, 0x7B, 0x5C, 0x60, 0x71, 0x60, 0x6B, 0x7F, 0x68, 0x75, 
   0x90, 0x65, 0x7D, 0x9C, 0x85, 0xAB, 0xCD, 0x7D, 0xA2, 0xC6, 0x81, 0xAC, 0xCE, 0x88, 0xB0, 0xD3, 
   0x91, 0xB8, 0xDB, 0x8D, 0xB5, 0xD8, 0x8A, 0xB2, 0xD6, 0x85, 0xAC, 0xD1, 0x7C, 0xA5, 0xC9, 0x73, 
   0x9D, 0xC2, 0x6E, 0x9B, 0xC2, 0x60, 0x8D, 0xB6, 0x5D, 0x8A, 0xB3, 0x6F, 0x9C, 0xC0, 0x81, 0xAF, 
   0xD1, 0x78, 0xA8, 0xCD, 0x64, 0x91, 0xB8, 0x68, 0x92, 0xB2, 0x80, 0xA4, 0xBC, 0x6D, 0x75, 0x89, 
   0x3C, 0x3D, 0x47, 0x32, 0x38, 0x3D, 0x21, 0x2B, 0x31, 0x30, 0x3B, 0x3F, 0x37, 0x3C, 0x3D, 0x34, 
   0x3B, 0x39, 0x43, 0x4B, 0x4B, 0x70, 0x74, 0x7E, 0x7F, 0x81, 0x93, 0x76, 0x76, 0x8C, 0x7F, 0x7F, 
   0x92, 0x8B, 0x92, 0x98, 0xA5, 0xAE, 0xB5, 0xAF, 0xB4, 0xC3, 0xAD, 0xB0, 0xC0, 0xB6, 0xB5, 0xC3, 
   0x9B, 0x9C, 0xAC, 0x97, 0x97, 0xA8, 0x87, 0x8C, 0xA0, 0x7E, 0x86, 0x9C, 0x8D, 0x97, 0xAA, 0x99, 
   0xA0, 0xAE, 0x97, 0x9E, 0xAB, 0xA3, 0xA2, 0xB1, 0xAC, 0xA5, 0xAF, 0x7F, 0x76, 0x7E, 0x50, 0x4D, 
   0x54, 0x43, 0x47, 0x4D, 0x63, 0x6C, 0x6D, 0xA9, 0xAF, 0xAE, 0x9F, 0xA0, 0xA5, 0x8C, 0x8B, 0x92, 
   0x90, 0x8F, 0x9A, 0x8C, 0x8D, 0x99, 0x89, 0x8E, 0x95, 0x92, 0x96, 0x9F, 0x9D, 0xA4, 0xAF, 0xA0, 
   0xA9, 0xB2, 0x9C, 0xA7, 0xB0, 0xA9, 0xB4, 0xBE, 0x9E, 0xA3, 0xAF, 0x93, 0x9A, 0xA5, 0x92, 0x9A, 
   0xA5, 0x93, 0x9C, 0xA8, 0x96, 0x9F, 0xAB, 0x97, 0xA0, 0xAC, 0x96, 0xA0, 0xAC, 0x93, 0x9A, 0xA5, 
   0x8F, 0x96, 0x9E, 0x8F, 0x95, 0xA1, 0x8A, 0x8D, 0x9C, 0x7F, 0x7E, 0x8F, 0x6B, 0x68, 0x78, 0x57, 
   0x5A, 0x63, 0x47, 0x45, 0x4D, 0x2A, 0x2A, 0x2B, 0x4A, 0x58, 0x54, 0x81, 0x87, 0x92, 0x7C, 0x7F, 
   0x91, 0x7A, 0x84, 0x91, 0x81, 0x8B, 0x96, 0x86, 0x8F, 0x9D, 0x85, 0x90, 0x9E, 0x83, 0x8D, 0xA1, 
   0x84, 0x90, 0x9E, 0x8E, 0x92, 0xA0, 0x88, 0x8F, 0x9D, 0x80, 0x87, 0x91, 0x89, 0x90, 0x96, 0x94, 
   0x99, 0xA1, 0x92, 0x96, 0xA1, 0x8A, 0x8E, 0x98, 0x89, 0x90, 0x99, 0x90, 0x97, 0x9C, 0x95, 0x99, 
   0xA2, 0x94, 0x98, 0xA3, 0x99, 0x9C, 0xA2, 0xA0, 0xA4, 0xAA, 0xB0, 0xAE, 0xB6, 0xAA, 0xA9, 0xB4, 
   0x9A, 0x9D, 0xA8, 0xA9, 0xAE, 0xB5, 0xB7, 0xB6, 0xBC, 0xA7, 0xA6, 0xAB, 0xA0, 0xA2, 0xA7, 0x9F, 
   0xA0, 0xA6, 0x9E, 0x9B, 0xA5, 0x9C, 0x9A, 0xA6, 0xB1, 0xAC, 0xB8, 0xB1, 0xAB, 0xB2, 0x9F, 0x9A, 
   0x9E, 0x96, 0x91, 0x97, 0x92, 0x8E, 0x96, 0x8F, 0x8B, 0x93, 0x87, 0x84, 0x8A, 0x7D, 0x7E, 0x85, 
   0x7A, 0x7E, 0x88, 0x6C, 0x71, 0x78, 0x3A, 0x40, 0x4A, 0x30, 0x32, 0x33, 0x43, 0x40, 0x3F, 0x48, 
   0x48, 0x42, 0x4A, 0x4B, 0x41, 0x50, 0x51, 0x49, 0x57, 0x56, 0x50, 0x5C, 0x5B, 0x55, 0x5E, 0x5D, 
   0x55, 0x6A, 0x66, 0x5C, 0x77, 0x77, 0x6D, 0x67, 0x6B, 0x65, 0x5D, 0x5C, 0x5B, 0x66, 0x6A, 0x6C, 
   0x62, 0x6E, 0x74, 0x72, 0x7A, 0x84, 0x7E, 0x88, 0x8F, 0x7A, 0x86, 0x8E, 0x75, 0x7D, 0x88, 0x73, 
   0x7B, 0x85, 0x5C, 0x67, 0x6E, 0x4F, 0x58, 0x60, 0x5B, 0x65, 0x6E, 0x68, 0x75, 0x74, 0x57, 0x61, 
   0x61, 0x3B, 0x44, 0x47, 0x30, 0x3B, 0x3F, 0x29, 0x32, 0x35, 0x2B, 0x30, 0x33, 0x2F, 0x30, 0x33, 
   0x17, 0x15, 0x18, 0x31, 0x33, 0x2F, 0x82, 0x85, 0x7B, 0xAB, 0xAB, 0x9D, 0xC5, 0xC3, 0xB2, 0xB8, 
   0xB5, 0xA5, 0xA9, 0xA6, 0x99, 0xA3, 0xA0, 0x94, 0x9E, 0x98, 0x90, 0x9E, 0x99, 0x93, 0xA1, 0x9D, 
   0x97, 0xA2, 0xA0, 0xA0, 0x97, 0x9D, 0xA2, 0x94, 0x9E, 0xA9, 0x9A, 0xA4, 0xB6, 0x99, 0xA4, 0xB9, 
   0x9B, 0xA1, 0xA6, 0x9D, 0x9F, 0x98, 0x94, 0x93, 0x97, 0x99, 0x97, 0xA1, 0x97, 0x95, 0x9C, 0x98, 
   0x96, 0x9C, 0x9B, 0x96, 0x9D, 0x9C, 0x95, 0x9C, 0x93, 0x8C, 0x93, 0x90, 0x89, 0x90, 0x91, 0x8C, 
   0x93, 0x91, 0x8F, 0x90, 0x97, 0x93, 0x93, 0x95, 0x93, 0x93, 0x95, 0x95, 0x98, 0x91, 0x8E, 0x9C, 
   0x92, 0x93, 0xA3, 0x93, 0x95, 0xA2, 0x92, 0x95, 0x9D, 0x9B, 0x9B, 0xA6, 0x69, 0x65, 0x71, 0x2A, 
   0x2B, 0x2F, 0x36, 0x3B, 0x41, 0x3E, 0x44, 0x4C, 0x44, 0x49, 0x55, 0x51, 0x57, 0x5F, 0x59, 0x5B, 
   0x65, 0x51, 0x50, 0x5D, 0x45, 0x46, 0x53, 0x3C, 0x42, 0x50, 0x3C, 0x45, 0x54, 0x36, 0x40, 0x4F, 
   0x58, 0x60, 0x6B, 0x78, 0x7C, 0x82, 0x80, 0x81, 0x8A, 0x80, 0x7D, 0x85, 0x73, 0x72, 0x7A, 0x6A, 
   0x65, 0x6F, 0x66, 0x5F, 0x6B, 0x6B, 0x66, 0x70, 0x8B, 0x88, 0x8C, 0x96, 0x96, 0x96, 0x93, 0x97, 
   0x97, 0x93, 0x96, 0x98, 0x93, 0x92, 0x97, 0x95, 0x92, 0x98, 0x99, 0x95, 0x99, 0x98, 0x95, 0x98, 
   0x94, 0x93, 0x99, 0x92, 0x95, 0x9D, 0x91, 0x95, 0x9D, 0x92, 0x96, 0x9C, 0x95, 0x97, 0x9D, 0x99, 
   0x98, 0x9E, 0x9A, 0x98, 0x9E, 0x98, 0x96, 0x9C, 0x98, 0x96, 0x9C, 0x98, 0x96, 0x9C, 0x9A, 0x96, 
   0x9C, 0x9C, 0x96, 0x9D, 0x9E, 0x94, 0x9D, 0x9F, 0x96, 0x9E, 0x9A, 0x96, 0x9D, 0x9A, 0x97, 0x9E, 
   0x9A, 0x94, 0x9C, 0x98, 0x94, 0x9A, 0x9A, 0x93, 0x9A, 0x97, 0x91, 0x9A, 0x9F, 0x9A, 0xA3, 0x9E, 
   0x99, 0xA0, 0x99, 0x95, 0x9B, 0x9F, 0x99, 0xA5, 0x8E, 0x8B, 0x9D, 0x71, 0x75, 0x8B, 0x71, 0x75, 
   0x89, 0x75, 0x78, 0x86, 0x6B, 0x75, 0x84, 0x7E, 0x89, 0x9D, 0x7F, 0x86, 0x9C, 0x7C, 0x84, 0x96, 
   0x7E, 0x86, 0x98, 0x80, 0x84, 0x97, 0x7C, 0x7F, 0x92, 0x82, 0x86, 0x98, 0x8A, 0x8D, 0x9F, 0x8E, 
   0x8F, 0xA0, 0x76, 0x74, 0x86, 0x5B, 0x5B, 0x70, 0x5A, 0x5D, 0x6C, 0x64, 0x6E, 0x82, 0x64, 0x72, 
   0x8C, 0x6A, 0x85, 0xA3, 0x7E, 0xA6, 0xC9, 0x7C, 0xA2, 0xC1, 0x74, 0x9F, 0xBE, 0x7C, 0xA4, 0xC6, 
   0x85, 0xAC, 0xCF, 0x85, 0xAD, 0xD0, 0x91, 0xB8, 0xDA, 0x8A, 0xB1, 0xD4, 0x83, 0xAE, 0xD5, 0x86, 
   0xAE, 0xD4, 0x79, 0x9E, 0xC6, 0x75, 0x9B, 0xC4, 0x70, 0x99, 0xC3, 0x78, 0xA4, 0xCA, 0x86, 0xB3, 
   0xD5, 0x7C, 0xAA, 0xCC, 0x74, 0xA2, 0xC5, 0x70, 0x9A, 0xBC, 0x7C, 0x9D, 0xBB, 0x3F, 0x47, 0x5C, 
   0x18, 0x1D, 0x28, 0x18, 0x22, 0x27, 0x12, 0x1B, 0x1F, 0x18, 0x1C, 0x20, 0x22, 0x1F, 0x25, 0x24, 
   0x26, 0x26, 0x24, 0x29, 0x2A, 0x44, 0x4C, 0x55, 0x70, 0x74, 0x87, 0x73, 0x73, 0x88, 0x80, 0x81, 
   0x92, 0x88, 0x8B, 0x96, 0x8E, 0x94, 0xA0, 0x99, 0xA0, 0xAE, 0xAA, 0xB3, 0xBC, 0xC0, 0xC1, 0xCD, 
   0x96, 0x9A, 0xAB, 0x93, 0x97, 0xA9, 0x9F, 0xA9, 0xB8, 0x95, 0x9E, 0xAF, 0x97, 0xA1, 0xB2, 0xA9, 
   0xAC, 0xB9, 0xA1, 0xA2, 0xAE, 0x70, 0x6D, 0x79, 0x4D, 0x4A, 0x53, 0x46, 0x46, 0x4C, 0x51, 0x55, 
   0x58, 0x61, 0x67, 0x68, 0x8E, 0x95, 0x96, 0xAA, 0xAB, 0xAD, 0x95, 0x92, 0x9A, 0x7F, 0x7C, 0x86, 
   0x85, 0x84, 0x92, 0x7C, 0x7E, 0x89, 0x7B, 0x7F, 0x86, 0x8D, 0x8F, 0x9A, 0x98, 0x9F, 0xAB, 0x9C, 
   0xA0, 0xAA, 0x96, 0xA0, 0xA8, 0xA1, 0xAF, 0xB9, 0x99, 0xA1, 0xAD, 0x9A, 0xA0, 0xAA, 0x96, 0x9B, 
   0xA3, 0x92, 0x9C, 0xA5, 0x95, 0x9E, 0xAA, 0x95, 0x9C, 0xA9, 0x92, 0x9A, 0xA6, 0x90, 0x94, 0xA0, 
   0x8D, 0x8F, 0x9B, 0x8C, 0x91, 0x9C, 0x8F, 0x92, 0x9D, 0x86, 0x85, 0x94, 0x6B, 0x69, 0x74, 0x57, 
   0x58, 0x5E, 0x38, 0x34, 0x39, 0x2C, 0x2E, 0x2B, 0x66, 0x71, 0x71, 0x79, 0x81, 0x8E, 0x7A, 0x82, 
   0x93, 0x7C, 0x85, 0x92, 0x83, 0x8C, 0x98, 0x82, 0x89, 0x98, 0x7F, 0x86, 0x93, 0x78, 0x84, 0x94, 
   0x7D, 0x89, 0x98, 0x84, 0x89, 0x99, 0x79, 0x80, 0x90, 0x7C, 0x82, 0x92, 0x80, 0x87, 0x94, 0x86, 
   0x8F, 0x99, 0x8D, 0x95, 0x9F, 0x93, 0x98, 0xA3, 0x96, 0x9B, 0xA4, 0x98, 0x9D, 0xA1, 0x9A, 0x9E, 
   0xA6, 0x90, 0x97, 0xA1, 0xA1, 0xAA, 0xAF, 0xC4, 0xCA, 0xD1, 0xCF, 0xC9, 0xD4, 0xC0, 0xB6, 0xC3, 
   0xAC, 0xA8, 0xB4, 0x9D, 0x9E, 0xAA, 0xA4, 0xA2, 0xAA, 0xA1, 0x9F, 0xA4, 0x9D, 0x9A, 0x9F, 0xA1, 
   0x9C, 0xA3, 0xA8, 0xA5, 0xAF, 0xAC, 0xA9, 0xB4, 0xC4, 0xBF, 0xC8, 0xB5, 0xAD, 0xB7, 0x9B, 0x97, 
   0x9F, 0x94, 0x92, 0x99, 0x91, 0x8E, 0x96, 0x86, 0x82, 0x8A, 0x6A, 0x66, 0x6D, 0x4B, 0x49, 0x50, 
   0x3E, 0x3E, 0x45, 0x2E, 0x2D, 0x33, 0x48, 0x53, 0x57, 0x36, 0x3A, 0x3A, 0x3C, 0x3A, 0x39, 0x3F, 
   0x43, 0x3C, 0x43, 0x48, 0x3F, 0x48, 0x49, 0x44, 0x4D, 0x4F, 0x4B, 0x58, 0x57, 0x50, 0x5B, 0x5A, 
   0x51, 0x5F, 0x5D, 0x52, 0x66, 0x62, 0x59, 0x72, 0x6F, 0x69, 0x5F, 0x60, 0x5D, 0x4A, 0x4F, 0x54, 
   0x58, 0x63, 0x6C, 0x7C, 0x84, 0x8A, 0x7B, 0x81, 0x87, 0x59, 0x63, 0x6D, 0x56, 0x60, 0x66, 0x65, 
   0x70, 0x75, 0x5C, 0x64, 0x67, 0x4A, 0x50, 0x53, 0x45, 0x49, 0x4D, 0x38, 0x3B, 0x38, 0x2B, 0x2C, 
   0x2D, 0x26, 0x27, 0x2B, 0x24, 0x28, 0x2B, 0x23, 0x27, 0x28, 0x27, 0x2A, 0x2B, 0x2D, 0x31, 0x34, 
   0x1D, 0x1F, 0x24, 0x29, 0x2B, 0x28, 0x78, 0x7B, 0x72, 0xB2, 0xB1, 0xA2, 0xCA, 0xC7, 0xB3, 0xBA, 
   0xB7, 0xA5, 0x9E, 0x9B, 0x8C, 0x96, 0x94, 0x89, 0x9A, 0x92, 0x8D, 0x9C, 0x96, 0x8F, 0x9B, 0x99, 
   0x94, 0x9C, 0x9E, 0xA4, 0x98, 0x9E, 0xAE, 0x97, 0x9F, 0xB3, 0x97, 0xA2, 0xB5, 0x95, 0x9F, 0xAE, 
   0x9E, 0x9F, 0x9F, 0x9E, 0x9A, 0x8F, 0x7D, 0x7A, 0x79, 0x7B, 0x7D, 0x85, 0x85, 0x89, 0x8F, 0x8B, 
   0x8C, 0x92, 0x8B, 0x8A, 0x91, 0x8F, 0x8C, 0x92, 0x8D, 0x88, 0x8C, 0x8C, 0x86, 0x8A, 0x8E, 0x88, 
   0x8D, 0x94, 0x90, 0x93, 0x96, 0x92, 0x99, 0x8A, 0x8C, 0x94, 0x8A, 0x8D, 0x96, 0x96, 0x96, 0xA2, 
   0x95, 0x98, 0xA4, 0x90, 0x95, 0x9F, 0x91, 0x94, 0x9C, 0x8C, 0x8B, 0x96, 0x44, 0x42, 0x4F, 0x20, 
   0x1C, 0x24, 0x33, 0x35, 0x3B, 0x4C, 0x58, 0x60, 0x71, 0x7F, 0x8D, 0x8E, 0x99, 0xA4, 0xA2, 0xA3, 
   0xB1, 0x9C, 0x99, 0xA5, 0x88, 0x88, 0x94, 0x61, 0x68, 0x75, 0x5C, 0x66, 0x73, 0x49, 0x50, 0x5C, 
   0x52, 0x54, 0x5E, 0x6E, 0x6D, 0x75, 0x73, 0x70, 0x7B, 0x6F, 0x6D, 0x75, 0x68, 0x66, 0x6F, 0x63, 
   0x60, 0x69, 0x66, 0x60, 0x69, 0x70, 0x6B, 0x72, 0x88, 0x88, 0x8B, 0x95, 0x97, 0x99, 0x91, 0x96, 
   0x98, 0x95, 0x94, 0x98, 0x97, 0x91, 0x99, 0x98, 0x93, 0x9A, 0x9B, 0x98, 0x9C, 0x98, 0x98, 0x9A, 
   0x95, 0x97, 0x9A, 0x92, 0x97, 0x9C, 0x91, 0x96, 0x9C, 0x92, 0x95, 0x9C, 0x94, 0x97, 0x9B, 0x95, 
   0x95, 0x9A, 0x96, 0x95, 0x9B, 0x96, 0x94, 0x9A, 0x96, 0x93, 0x99, 0x98, 0x94, 0x9B, 0x99, 0x93, 
   0x9B, 0x9B, 0x93, 0x9D, 0x9C, 0x93, 0x9C, 0xA8, 0x9D, 0xA6, 0xA8, 0x9F, 0xA7, 0xA1, 0x98, 0xA0, 
   0x9B, 0x93, 0x9C, 0x96, 0x90, 0x9A, 0x99, 0x8E, 0x9A, 0x97, 0x8F, 0x99, 0x99, 0x94, 0x9A, 0x9D, 
   0x97, 0x9C, 0xA4, 0x9E, 0xA7, 0x92, 0x90, 0xA2, 0x78, 0x78, 0x91, 0x63, 0x68, 0x7B, 0x6D, 0x73, 
   0x7F, 0x7D, 0x80, 0x8A, 0x79, 0x81, 0x90, 0x7D, 0x87, 0x9B, 0x81, 0x87, 0x9D, 0x78, 0x7F, 0x92, 
   0x7D, 0x84, 0x98, 0x7F, 0x83, 0x9A, 0x7D, 0x7D, 0x92, 0x82, 0x83, 0x96, 0x8A, 0x8A, 0x9D, 0x8D, 
   0x90, 0xA1, 0x77, 0x77, 0x88, 0x4C, 0x4E, 0x5F, 0x58, 0x61, 0x6F, 0x66, 0x75, 0x8A, 0x65, 0x77, 
   0x92, 0x6C, 0x88, 0xA8, 0x6F, 0x93, 0xB7, 0x6F, 0x90, 0xAE, 0x6B, 0x94, 0xB3, 0x84, 0xAA, 0xCB, 
   0x96, 0xB9, 0xDB, 0x84, 0xAA, 0xCB, 0x98, 0xBE, 0xDE, 0x9A, 0xC0, 0xE0, 0x7D, 0xA2, 0xC9, 0x78, 
   0x9F, 0xC4, 0x72, 0x9B, 0xC0, 0x80, 0xAD, 0xD2, 0x8A, 0xB7, 0xDC, 0x86, 0xB3, 0xD7, 0x86, 0xAE, 
   0xD1, 0x80, 0xAB, 0xCB, 0x7D, 0xA7, 0xC8, 0x70, 0x98, 0xBF, 0x66, 0x89, 0xAF, 0x34, 0x3C, 0x53, 
   0x29, 0x30, 0x3A, 0x34, 0x3B, 0x41, 0x35, 0x39, 0x3D, 0x38, 0x3A, 0x3F, 0x49, 0x46, 0x4F, 0x3B, 
   0x39, 0x40, 0x2B, 0x2E, 0x34, 0x37, 0x40, 0x48, 0x63, 0x69, 0x78, 0x70, 0x73, 0x87, 0x77, 0x7B, 
   0x8C, 0x7F, 0x83, 0x90, 0x7F, 0x83, 0x94, 0x7C, 0x83, 0x98, 0x7D, 0x89, 0x98, 0x8D, 0x94, 0xA5, 
   0x82, 0x8A, 0x9B, 0x84, 0x8B, 0x9B, 0x83, 0x8C, 0x9A, 0x93, 0x9A, 0xAA, 0xA3, 0xA8, 0xB8, 0xAC, 
   0xAC, 0xB9, 0x70, 0x6C, 0x75, 0x48, 0x48, 0x51, 0x42, 0x44, 0x4C, 0x51, 0x56, 0x5C, 0x66, 0x6E, 
   0x71, 0x8E, 0x95, 0x94, 0xA2, 0xAB, 0xAC, 0x9C, 0x9F, 0xA2, 0x9B, 0x99, 0xA3, 0x92, 0x8F, 0x9C, 
   0x92, 0x8E, 0x9A, 0x8D, 0x8F, 0x97, 0x8D, 0x94, 0x9C, 0x90, 0x95, 0xA1, 0x93, 0x9A, 0xA5, 0x99, 
   0x9C, 0xA6, 0x93, 0x9B, 0xA3, 0x8B, 0x99, 0xA4, 0x92, 0x9E, 0xAB, 0x9D, 0xA4, 0xB0, 0x9B, 0x9F, 
   0xAA, 0x92, 0x9C, 0xA6, 0x90, 0x98, 0xA5, 0x93, 0x99, 0xA7, 0x93, 0x99, 0xA7, 0x94, 0x97, 0xA1, 
   0x92, 0x93, 0x9D, 0x8F, 0x94, 0x9C, 0x96, 0x99, 0xA1, 0x99, 0x93, 0xA0, 0x61, 0x59, 0x61, 0x40, 
   0x3E, 0x41, 0x31, 0x2D, 0x31, 0x45, 0x4E, 0x4B, 0x7B, 0x86, 0x8D, 0x77, 0x84, 0x90, 0x79, 0x84, 
   0x92, 0x7F, 0x87, 0x95, 0x81, 0x88, 0x97, 0x7F, 0x83, 0x93, 0x7E, 0x83, 0x8F, 0x7B, 0x83, 0x90, 
   0x7E, 0x8B, 0x99, 0x8B, 0x94, 0xA2, 0x7E, 0x84, 0x94, 0x7B, 0x80, 0x91, 0x7C, 0x84, 0x96, 0x7D, 
   0x88, 0x93, 0x89, 0x95, 0x9B, 0x99, 0xA0, 0xA8, 0x9C, 0xA0, 0xAA, 0x9A, 0x9C, 0xA4, 0xA5, 0xA8, 
   0xAE, 0xB6, 0xBB, 0xC2, 0xB8, 0xBE, 0xC3, 0xC6, 0xC9, 0xD2, 0xBF, 0xBB, 0xC6, 0xAA, 0xA3, 0xAF, 
   0xA5, 0xA5, 0xB1, 0xA7, 0xA7, 0xB4, 0xAE, 0xA9, 0xB2, 0xB8, 0xB3, 0xB8, 0xBE, 0xB7, 0xBC, 0xBF, 
   0xB6, 0xBC, 0xB4, 0xAD, 0xB6, 0xAC, 0xA8, 0xB1, 0xA5, 0xA1, 0xAA, 0x9B, 0x93, 0xA1, 0x92, 0x8D, 
   0x98, 0x8A, 0x87, 0x8F, 0x6D, 0x6A, 0x73, 0x4A, 0x46, 0x50, 0x35, 0x33, 0x39, 0x42, 0x42, 0x46, 
   0x50, 0x50, 0x56, 0x52, 0x50, 0x5A, 0x4D, 0x58, 0x5A, 0x4B, 0x50, 0x52, 0x42, 0x44, 0x43, 0x36, 
   0x3D, 0x38, 0x42, 0x45, 0x41, 0x46, 0x44, 0x43, 0x42, 0x47, 0x43, 0x4E, 0x51, 0x48, 0x54, 0x53, 
   0x49, 0x55, 0x54, 0x49, 0x5C, 0x5A, 0x4E, 0x6C, 0x6C, 0x5F, 0x60, 0x63, 0x5A, 0x4B, 0x50, 0x52, 
   0x4C, 0x57, 0x5E, 0x60, 0x68, 0x6C, 0x5E, 0x63, 0x69, 0x53, 0x5D, 0x69, 0x50, 0x5C, 0x5D, 0x44, 
   0x4F, 0x52, 0x37, 0x3B, 0x3D, 0x2E, 0x34, 0x35, 0x26, 0x2C, 0x30, 0x25, 0x26, 0x25, 0x31, 0x31, 
   0x38, 0x31, 0x32, 0x3B, 0x30, 0x31, 0x38, 0x2D, 0x2C, 0x32, 0x29, 0x2A, 0x2D, 0x26, 0x2A, 0x2A, 
   0x20, 0x20, 0x21, 0x1A, 0x18, 0x16, 0x5C, 0x5B, 0x55, 0xA5, 0xA2, 0x94, 0xBA, 0xB7, 0xA3, 0xB8, 
   0xB9, 0xA7, 0xA8, 0xA3, 0x96, 0x94, 0x91, 0x85, 0x98, 0x92, 0x8C, 0xA1, 0x9B, 0x92, 0x9D, 0x9B, 
   0x95, 0x96, 0x9C, 0xA5, 0x96, 0x9E, 0xB0, 0x96, 0x9D, 0xAF, 0x96, 0x9E, 0xAB, 0x9A, 0x9F, 0xA4, 
   0xA2, 0x9E, 0x9B, 0xA3, 0xA0, 0x93, 0x7A, 0x7A, 0x75, 0x69, 0x6E, 0x71, 0x7F, 0x87, 0x8A, 0x81, 
   0x86, 0x8A, 0x7F, 0x82, 0x87, 0x7F, 0x83, 0x86, 0x7F, 0x81, 0x81, 0x7F, 0x7E, 0x7E, 0x81, 0x80, 
   0x81, 0x88, 0x88, 0x8E, 0x84, 0x87, 0x93, 0x79, 0x7F, 0x8E, 0x89, 0x8E, 0x99, 0xA4, 0xA5, 0xAC, 
   0x9D, 0xA1, 0xA7, 0x8B, 0x92, 0x99, 0x96, 0x9C, 0xA4, 0x74, 0x77, 0x81, 0x21, 0x24, 0x2F, 0x18, 
   0x12, 0x1C, 0x34, 0x36, 0x3D, 0x6B, 0x7C, 0x89, 0x86, 0x9A, 0xAA, 0x8E, 0x9C, 0xA8, 0xA0, 0xA4, 
   0xB1, 0xA6, 0xA6, 0xB0, 0x95, 0x97, 0xA1, 0x6D, 0x74, 0x81, 0x64, 0x6D, 0x7B, 0x55, 0x5B, 0x68, 
   0x43, 0x4A, 0x54, 0x5D, 0x60, 0x69, 0x6A, 0x67, 0x71, 0x66, 0x64, 0x6D, 0x67, 0x62, 0x6C, 0x63, 
   0x5E, 0x68, 0x64, 0x5E, 0x67, 0x6C, 0x6A, 0x70, 0x82, 0x81, 0x84, 0x94, 0x93, 0x97, 0x90, 0x95, 
   0x96, 0x93, 0x93, 0x97, 0x97, 0x92, 0x9B, 0x96, 0x94, 0x9B, 0x96, 0x96, 0x99, 0x94, 0x95, 0x97, 
   0x94, 0x97, 0x98, 0x95, 0x98, 0x9A, 0x94, 0x97, 0x9C, 0x93, 0x96, 0x9D, 0x97, 0x97, 0x9B, 0x97, 
   0x97, 0x9C, 0x95, 0x94, 0x9B, 0x96, 0x94, 0x99, 0x96, 0x93, 0x97, 0x97, 0x94, 0x9A, 0x99, 0x94, 
   0x9D, 0x98, 0x94, 0x9B, 0x98, 0x94, 0x99, 0xA2, 0x9B, 0xA0, 0xAB, 0xA3, 0xA8, 0xA1, 0x99, 0x9F, 
   0x96, 0x92, 0x99, 0x94, 0x91, 0x99, 0x95, 0x8D, 0x99, 0x94, 0x8E, 0x99, 0x96, 0x91, 0x97, 0x9B, 
   0x95, 0x9C, 0x93, 0x91, 0xA1, 0x7A, 0x7D, 0x97, 0x6A, 0x6D, 0x89, 0x65, 0x68, 0x7D, 0x70, 0x76, 
   0x81, 0x80, 0x83, 0x91, 0x79, 0x7D, 0x92, 0x78, 0x81, 0x96, 0x7E, 0x85, 0x9A, 0x71, 0x76, 0x88, 
   0x7B, 0x7D, 0x8E, 0x81, 0x81, 0x95, 0x7A, 0x76, 0x8D, 0x7C, 0x7B, 0x8F, 0x85, 0x82, 0x96, 0x85, 
   0x86, 0x9A, 0x76, 0x77, 0x89, 0x4D, 0x51, 0x62, 0x63, 0x6F, 0x87, 0x6B, 0x7C, 0x99, 0x63, 0x7A, 
   0x9B, 0x61, 0x81, 0xA6, 0x6C, 0x8F, 0xB2, 0x72, 0x90, 0xAF, 0x81, 0xA7, 0xC5, 0xA3, 0xC5, 0xE5, 
   0xA2, 0xBF, 0xE1, 0x8A, 0xAB, 0xCC, 0x8C, 0xAE, 0xD0, 0x87, 0xAA, 0xCB, 0x72, 0x97, 0xBB, 0x80, 
   0xAA, 0xCB, 0x91, 0xBA, 0xDE, 0x94, 0xC0, 0xE2, 0x8E, 0xB8, 0xDC, 0x82, 0xAE, 0xD5, 0x85, 0xAF, 
   0xD5, 0x96, 0xC2, 0xE4, 0x88, 0xB2, 0xD4, 0x74, 0xA0, 0xC8, 0x71, 0x98, 0xC2, 0x48, 0x53, 0x6E, 
   0x3A, 0x40, 0x48, 0x44, 0x49, 0x4D, 0x4C, 0x4B, 0x4F, 0x4B, 0x4D, 0x4F, 0x67, 0x66, 0x69, 0x62, 
   0x5D, 0x61, 0x57, 0x5A, 0x5F, 0x52, 0x5A, 0x61, 0x5E, 0x64, 0x70, 0x6F, 0x71, 0x84, 0x73, 0x76, 
   0x88, 0x81, 0x82, 0x90, 0x82, 0x83, 0x95, 0x78, 0x7C, 0x95, 0x71, 0x7A, 0x94, 0x7A, 0x86, 0x9B, 
   0x94, 0x9E, 0xAD, 0x8E, 0x95, 0xA3, 0x93, 0x9A, 0xA6, 0xAE, 0xB3, 0xBC, 0xBF, 0xBE, 0xC7, 0x85, 
   0x7C, 0x86, 0x3E, 0x3C, 0x43, 0x3C, 0x42, 0x49, 0x4D, 0x4F, 0x59, 0x5E, 0x64, 0x6D, 0x80, 0x8A, 
   0x8E, 0x9A, 0x9E, 0xA2, 0x93, 0x9C, 0xA0, 0x93, 0x96, 0x9C, 0x94, 0x96, 0x9E, 0x98, 0x9D, 0xA8, 
   0x9F, 0x9E, 0xA7, 0x98, 0x9A, 0xA1, 0x91, 0x9C, 0xA7, 0x95, 0x9E, 0xA7, 0x92, 0x97, 0x9F, 0x95, 
   0x9A, 0xA2, 0x93, 0x9C, 0xA5, 0x8F, 0x99, 0xA4, 0x92, 0x9D, 0xAB, 0x97, 0xA1, 0xAF, 0x99, 0x9F, 
   0xAB, 0x97, 0x9F, 0xAA, 0x98, 0x9C, 0xA8, 0x95, 0x9A, 0xA6, 0x92, 0x9A, 0xA8, 0x94, 0x98, 0xA4, 
   0x93, 0x93, 0x9B, 0x96, 0x98, 0x9C, 0xAE, 0xAD, 0xB4, 0xC2, 0xB2, 0xBE, 0x50, 0x42, 0x48, 0x32, 
   0x2D, 0x2D, 0x30, 0x2E, 0x2E, 0x5C, 0x69, 0x66, 0x80, 0x8C, 0x96, 0x7B, 0x88, 0x92, 0x7F, 0x89, 
   0x94, 0x7D, 0x87, 0x94, 0x79, 0x84, 0x93, 0x7A, 0x81, 0x91, 0x7D, 0x83, 0x91, 0x7D, 0x85, 0x91, 
   0x79, 0x88, 0x95, 0x7D, 0x8C, 0x96, 0x94, 0x9D, 0xAA, 0x9B, 0xA1, 0xB0, 0x8D, 0x92, 0xA4, 0x89, 
   0x93, 0x9B, 0x8F, 0x98, 0x9D, 0x96, 0x9D, 0xA3, 0xA8, 0xA9, 0xB2, 0xB2, 0xB0, 0xB9, 0xB4, 0xB4, 
   0xB7, 0xB8, 0xB7, 0xBB, 0xAF, 0xAF, 0xB5, 0xA8, 0xAD, 0xB2, 0xA1, 0xA2, 0xA9, 0xA5, 0xA2, 0xAC, 
   0xA2, 0xA7, 0xAF, 0xAE, 0xB0, 0xB9, 0xC7, 0xC2, 0xCA, 0xC9, 0xC2, 0xC9, 0xC1, 0xBA, 0xBF, 0xBA, 
   0xB1, 0xB5, 0xA3, 0x9A, 0xA2, 0x9B, 0x96, 0xA0, 0x8D, 0x88, 0x92, 0x83, 0x7E, 0x89, 0x73, 0x6E, 
   0x77, 0x60, 0x5A, 0x62, 0x4E, 0x4A, 0x54, 0x49, 0x48, 0x52, 0x55, 0x55, 0x5B, 0x65, 0x64, 0x67, 
   0x68, 0x66, 0x6C, 0x65, 0x61, 0x6D, 0x4E, 0x58, 0x61, 0x4E, 0x52, 0x5B, 0x48, 0x4C, 0x50, 0x30, 
   0x32, 0x32, 0x3C, 0x3B, 0x3A, 0x47, 0x45, 0x46, 0x44, 0x43, 0x41, 0x48, 0x48, 0x41, 0x4F, 0x4D, 
   0x45, 0x51, 0x4F, 0x46, 0x55, 0x56, 0x4B, 0x5F, 0x64, 0x57, 0x60, 0x64, 0x5A, 0x55, 0x57, 0x56, 
   0x44, 0x4A, 0x4F, 0x45, 0x4B, 0x50, 0x46, 0x4F, 0x53, 0x41, 0x4A, 0x52, 0x3E, 0x47, 0x48, 0x2D, 
   0x33, 0x36, 0x25, 0x27, 0x2B, 0x28, 0x2C, 0x30, 0x43, 0x49, 0x4E, 0x5D, 0x5F, 0x61, 0x60, 0x63, 
   0x6D, 0x62, 0x66, 0x72, 0x6B, 0x6E, 0x78, 0x66, 0x68, 0x71, 0x60, 0x62, 0x6A, 0x51, 0x55, 0x5A, 
   0x32, 0x31, 0x33, 0x10, 0x0C, 0x0C, 0x48, 0x46, 0x42, 0xA2, 0x9D, 0x92, 0xB0, 0xAB, 0x9D, 0xBD, 
   0xBB, 0xAE, 0xBE, 0xB8, 0xAD, 0xA3, 0x9E, 0x94, 0x9C, 0x99, 0x92, 0xA3, 0x9D, 0x94, 0x9E, 0x9B, 
   0x98, 0x94, 0x9A, 0xA6, 0x91, 0x9B, 0xAC, 0x90, 0x99, 0xA9, 0x94, 0x9E, 0xA9, 0x98, 0x9D, 0xA0, 
   0xA3, 0xA0, 0x9A, 0xAA, 0xA7, 0x99, 0x76, 0x74, 0x6D, 0x52, 0x56, 0x57, 0x69, 0x6F, 0x71, 0x71, 
   0x76, 0x76, 0x63, 0x6A, 0x69, 0x5A, 0x5F, 0x60, 0x53, 0x59, 0x5A, 0x4B, 0x51, 0x52, 0x43, 0x49, 
   0x4A, 0x47, 0x4B, 0x53, 0x5C, 0x63, 0x6F, 0x52, 0x58, 0x65, 0x59, 0x5D, 0x66, 0x6C, 0x6F, 0x75, 
   0x6E, 0x74, 0x7A, 0x69, 0x73, 0x7D, 0x75, 0x7E, 0x86, 0x50, 0x4E, 0x57, 0x16, 0x12, 0x1A, 0x13, 
   0x11, 0x18, 0x36, 0x40, 0x47, 0x71, 0x87, 0x95, 0x85, 0x97, 0xAA, 0x8B, 0x99, 0xAB, 0x98, 0xA1, 
   0xB0, 0x96, 0x98, 0xA3, 0x80, 0x81, 0x8F, 0x79, 0x82, 0x94, 0x72, 0x7D, 0x91, 0x56, 0x5D, 0x70, 
   0x40, 0x49, 0x55, 0x53, 0x59, 0x5E, 0x64, 0x62, 0x67, 0x67, 0x62, 0x6A, 0x64, 0x5F, 0x69, 0x61, 
   0x5E, 0x68, 0x65, 0x60, 0x68, 0x6E, 0x6A, 0x70, 0x7A, 0x77, 0x7D, 0x8D, 0x89, 0x91, 0x91, 0x92, 
   0x95, 0x93, 0x93, 0x97, 0x94, 0x94, 0x9C, 0x97, 0x96, 0x9D, 0x96, 0x95, 0x9A, 0x94, 0x94, 0x97, 
   0x94, 0x97, 0x99, 0x95, 0x97, 0x9A, 0x96, 0x98, 0x9B, 0x95, 0x99, 0x9C, 0x99, 0x99, 0x9E, 0x9A, 
   0x99, 0x9F, 0x97, 0x96, 0x9D, 0x97, 0x96, 0x9B, 0x96, 0x93, 0x97, 0x99, 0x96, 0x9A, 0x9C, 0x98, 
   0x9F, 0x9A, 0x97, 0x9B, 0x98, 0x95, 0x97, 0x98, 0x94, 0x97, 0x99, 0x97, 0x9A, 0x96, 0x95, 0x9A, 
   0x95, 0x91, 0x98, 0x95, 0x8E, 0x97, 0x90, 0x8A, 0x94, 0x92, 0x8D, 0x98, 0x9A, 0x95, 0x9E, 0x90, 
   0x8D, 0x9A, 0x75, 0x77, 0x8F, 0x6D, 0x71, 0x8C, 0x72, 0x75, 0x8E, 0x6F, 0x72, 0x8A, 0x73, 0x78, 
   0x89, 0x7E, 0x80, 0x94, 0x79, 0x7C, 0x95, 0x7C, 0x83, 0x9B, 0x82, 0x88, 0xA0, 0x77, 0x78, 0x8F, 
   0x77, 0x74, 0x86, 0x7F, 0x7F, 0x90, 0x7A, 0x78, 0x8F, 0x77, 0x77, 0x8B, 0x76, 0x73, 0x86, 0x84, 
   0x83, 0x95, 0x8B, 0x8C, 0x9E, 0x4D, 0x52, 0x66, 0x5D, 0x6C, 0x8A, 0x64, 0x7C, 0xA1, 0x58, 0x75, 
   0x9D, 0x5E, 0x81, 0xA7, 0x81, 0xA7, 0xC5, 0x87, 0xA6, 0xC5, 0x92, 0xB3, 0xD2, 0x9A, 0xBA, 0xD9, 
   0x84, 0xA3, 0xC3, 0x7E, 0xA2, 0xC2, 0x7A, 0x9E, 0xC1, 0x7B, 0xA0, 0xC6, 0x86, 0xB3, 0xD5, 0x96, 
   0xC4, 0xE3, 0x9D, 0xC7, 0xE8, 0xA1, 0xCA, 0xEB, 0x90, 0xB6, 0xDA, 0x71, 0x9E, 0xC9, 0x78, 0xA8, 
   0xD1, 0x91, 0xC4, 0xE6, 0x8B, 0xBA, 0xDE, 0x7C, 0xAA, 0xD1, 0x80, 0xA9, 0xD5, 0x5B, 0x70, 0x90, 
   0x57, 0x58, 0x65, 0x66, 0x62, 0x65, 0x67, 0x63, 0x64, 0x61, 0x62, 0x65, 0x67, 0x69, 0x6C, 0x6F, 
   0x71, 0x72, 0x7C, 0x80, 0x82, 0x6C, 0x6F, 0x74, 0x6D, 0x6F, 0x7C, 0x81, 0x84, 0x98, 0x78, 0x75, 
   0x8B, 0x77, 0x73, 0x88, 0x7C, 0x7D, 0x90, 0x7A, 0x7D, 0x92, 0x77, 0x7D, 0x96, 0x76, 0x83, 0x9B, 
   0x7F, 0x8F, 0x9F, 0x98, 0xA4, 0xAF, 0xBE, 0xC3, 0xCC, 0xC1, 0xC0, 0xC3, 0x91, 0x8C, 0x92, 0x4B, 
   0x45, 0x4C, 0x48, 0x4A, 0x53, 0x53, 0x59, 0x61, 0x58, 0x5D, 0x69, 0x6D, 0x76, 0x7E, 0xA4, 0xAA, 
   0xB0, 0xA8, 0xA4, 0xAF, 0x92, 0x94, 0x9B, 0x92, 0x96, 0x9E, 0x93, 0x97, 0xA0, 0x9A, 0xA0, 0xAC, 
   0x9C, 0x9D, 0xA7, 0x92, 0x95, 0x9D, 0x91, 0x9D, 0xA9, 0x9A, 0xA4, 0xAE, 0x9C, 0x9E, 0xA4, 0x9E, 
   0xA1, 0xA7, 0x97, 0x9F, 0xA5, 0x94, 0x9C, 0xA7, 0x93, 0x9E, 0xAC, 0x95, 0x9E, 0xAC, 0x98, 0x9F, 
   0xAA, 0x9F, 0xA4, 0xB0, 0xA2, 0xA1, 0xAE, 0x98, 0x99, 0xA5, 0x8E, 0x98, 0xA3, 0x8E, 0x94, 0xA0, 
   0x97, 0x97, 0x9F, 0x9F, 0x9F, 0xA2, 0x93, 0x93, 0x96, 0x71, 0x66, 0x6E, 0x2F, 0x27, 0x2A, 0x2C, 
   0x2C, 0x28, 0x36, 0x36, 0x30, 0x6A, 0x75, 0x71, 0x7E, 0x89, 0x92, 0x80, 0x8B, 0x95, 0x80, 0x8B, 
   0x96, 0x79, 0x87, 0x94, 0x75, 0x86, 0x95, 0x78, 0x83, 0x94, 0x7A, 0x86, 0x95, 0x81, 0x8B, 0x98, 
   0x7F, 0x8C, 0x99, 0x85, 0x90, 0x99, 0xA0, 0xA6, 0xB1, 0xAC, 0xAC, 0xB9, 0x93, 0x93, 0xA1, 0x8A, 
   0x94, 0x99, 0x92, 0x9B, 0xA1, 0xA2, 0xA8, 0xAD, 0xCA, 0xC6, 0xCE, 0xC3, 0xB9, 0xC3, 0xA5, 0x9F, 
   0xA7, 0xA1, 0xA0, 0xA8, 0x9F, 0xA0, 0xA6, 0xA3, 0xA8, 0xA9, 0xA4, 0xA5, 0xAB, 0xA9, 0xA6, 0xAE, 
   0xAA, 0xAA, 0xAD, 0xB9, 0xBC, 0xBD, 0xC0, 0xBA, 0xC1, 0xA6, 0x9B, 0xA4, 0x94, 0x8E, 0x94, 0x9E, 
   0x97, 0x9E, 0x91, 0x88, 0x8E, 0x7C, 0x78, 0x7D, 0x70, 0x6C, 0x71, 0x61, 0x60, 0x64, 0x5A, 0x58, 
   0x5B, 0x7B, 0x71, 0x78, 0x66, 0x5E, 0x68, 0x5F, 0x5E, 0x66, 0x69, 0x65, 0x6D, 0x6F, 0x68, 0x70, 
   0x70, 0x6C, 0x73, 0x69, 0x66, 0x70, 0x52, 0x5B, 0x63, 0x4E, 0x53, 0x5A, 0x56, 0x59, 0x5D, 0x3C, 
   0x3F, 0x3F, 0x29, 0x2C, 0x2B, 0x3D, 0x3E, 0x3D, 0x43, 0x40, 0x40, 0x45, 0x43, 0x40, 0x47, 0x46, 
   0x43, 0x49, 0x4A, 0x45, 0x50, 0x51, 0x49, 0x59, 0x5B, 0x4E, 0x62, 0x60, 0x55, 0x5F, 0x5A, 0x55, 
   0x44, 0x45, 0x48, 0x34, 0x37, 0x3D, 0x31, 0x38, 0x3B, 0x2B, 0x31, 0x36, 0x27, 0x2B, 0x2E, 0x1F, 
   0x24, 0x28, 0x2E, 0x34, 0x39, 0x47, 0x4D, 0x52, 0x68, 0x6E, 0x74, 0x71, 0x75, 0x79, 0x68, 0x6E, 
   0x77, 0x6D, 0x76, 0x81, 0x71, 0x79, 0x82, 0x6B, 0x70, 0x7A, 0x6F, 0x74, 0x7F, 0x72, 0x77, 0x7F, 
   0x6E, 0x6F, 0x77, 0x42, 0x41, 0x45, 0x49, 0x4A, 0x46, 0x9A, 0x97, 0x90, 0xAA, 0xA5, 0x9E, 0xB5, 
   0xB3, 0xA9, 0xB8, 0xB4, 0xA7, 0xA6, 0xA4, 0x99, 0xA3, 0xA0, 0x95, 0xA3, 0x9C, 0x94, 0x9A, 0x99, 
   0x9A, 0x93, 0x9B, 0xAA, 0x90, 0x97, 0xAB, 0x87, 0x8E, 0xA2, 0x8F, 0x98, 0xA9, 0x97, 0x99, 0xA2, 
   0xA0, 0x9F, 0x9E, 0xA9, 0xA8, 0xA3, 0x6C, 0x68, 0x67, 0x32, 0x31, 0x32, 0x39, 0x3D, 0x3E, 0x32, 
   0x3A, 0x39, 0x30, 0x39, 0x37, 0x2D, 0x31, 0x33, 0x2F, 0x32, 0x38, 0x37, 0x3C, 0x43, 0x44, 0x47, 
   0x4D, 0x58, 0x55, 0x5E, 0x5B, 0x5B, 0x67, 0x55, 0x56, 0x61, 0x46, 0x46, 0x4F, 0x39, 0x39, 0x41, 
   0x3D, 0x3F, 0x48, 0x4D, 0x54, 0x5F, 0x49, 0x51, 0x56, 0x26, 0x24, 0x2A, 0x0D, 0x09, 0x11, 0x18, 
   0x1A, 0x23, 0x4F, 0x5E, 0x6A, 0x73, 0x8A, 0x99, 0x80, 0x91, 0xA5, 0x89, 0x9A, 0xAD, 0x9E, 0xAE, 
   0xBB, 0x98, 0x9F, 0xAA, 0x7E, 0x83, 0x94, 0x87, 0x95, 0xAD, 0x6C, 0x7B, 0x93, 0x51, 0x5C, 0x70, 
   0x3B, 0x44, 0x4F, 0x4D, 0x53, 0x57, 0x5E, 0x5A, 0x62, 0x5A, 0x53, 0x5B, 0x56, 0x52, 0x5C, 0x60, 
   0x5E, 0x68, 0x69, 0x65, 0x6C, 0x72, 0x6D, 0x74, 0x73, 0x6E, 0x77, 0x80, 0x7B, 0x87, 0x91, 0x91, 
   0x95, 0x93, 0x94, 0x97, 0x92, 0x95, 0x9C, 0x96, 0x94, 0x9C, 0x96, 0x94, 0x9B, 0x96, 0x95, 0x9A, 
   0x98, 0x98, 0x9C, 0x98, 0x99, 0x9C, 0x96, 0x98, 0x9A, 0x96, 0x99, 0x9A, 0x96, 0x95, 0x9B, 0x9A, 
   0x99, 0xA0, 0x95, 0x93, 0x9B, 0x95, 0x93, 0x99, 0x98, 0x96, 0x98, 0x9B, 0x98, 0x9B, 0x98, 0x95, 
   0x9B, 0x98, 0x95, 0x99, 0x97, 0x94, 0x98, 0x97, 0x96, 0x99, 0x96, 0x95, 0x9A, 0x94, 0x92, 0x99, 
   0x95, 0x90, 0x9C, 0x94, 0x8E, 0x9A, 0x94, 0x8E, 0x9A, 0xA0, 0x9A, 0xA5, 0x9A, 0x98, 0xA6, 0x7C, 
   0x7F, 0x96, 0x62, 0x67, 0x85, 0x5E, 0x63, 0x79, 0x79, 0x7D, 0x8F, 0x79, 0x7D, 0x94, 0x77, 0x7A, 
   0x92, 0x79, 0x7B, 0x95, 0x7A, 0x7F, 0x98, 0x7D, 0x84, 0x9D, 0x81, 0x85, 0x9F, 0x7D, 0x7F, 0x98, 
   0x76, 0x76, 0x8D, 0x82, 0x84, 0x98, 0x7D, 0x7E, 0x91, 0x88, 0x8B, 0x9B, 0x89, 0x87, 0x97, 0x95, 
   0x95, 0x9F, 0xA4, 0xA2, 0xAE, 0x50, 0x52, 0x61, 0x51, 0x63, 0x7D, 0x64, 0x85, 0xA8, 0x72, 0x98, 
   0xBD, 0x7F, 0xA2, 0xC6, 0x99, 0xBA, 0xDA, 0x98, 0xBA, 0xDA, 0x81, 0xA3, 0xC3, 0x7A, 0x9C, 0xBD, 
   0x78, 0xA2, 0xC4, 0x7A, 0xA8, 0xCD, 0x7D, 0xA8, 0xD1, 0x85, 0xB2, 0xDD, 0x90, 0xBC, 0xE7, 0x8F, 
   0xBF, 0xE6, 0x7B, 0xA9, 0xCF, 0x7C, 0xA8, 0xCC, 0x84, 0xAC, 0xD0, 0x8B, 0xB8, 0xE1, 0x95, 0xC5, 
   0xEA, 0x9D, 0xCD, 0xEC, 0x93, 0xC0, 0xE2, 0x82, 0xAD, 0xD4, 0x7C, 0xA8, 0xD5, 0x6E, 0x8E, 0xB5, 
   0x55, 0x56, 0x6C, 0x4F, 0x47, 0x4E, 0x4C, 0x4D, 0x4F, 0x52, 0x55, 0x55, 0x62, 0x63, 0x64, 0x71, 
   0x72, 0x75, 0x6B, 0x6F, 0x74, 0x69, 0x6E, 0x72, 0x7A, 0x7C, 0x87, 0x87, 0x8B, 0x9C, 0x81, 0x7D, 
   0x94, 0x78, 0x73, 0x8C, 0x6E, 0x74, 0x87, 0x77, 0x7B, 0x8E, 0x77, 0x7A, 0x93, 0x75, 0x7F, 0x99, 
   0x7F, 0x8B, 0x9B, 0x8C, 0x91, 0x9C, 0x8C, 0x89, 0x91, 0x61, 0x5B, 0x5F, 0x41, 0x3E, 0x45, 0x5C, 
   0x60, 0x68, 0x66, 0x6A, 0x74, 0x68, 0x6B, 0x7A, 0x7A, 0x7F, 0x87, 0xA9, 0xB0, 0xB4, 0xB2, 0xB5, 
   0xBC, 0xA5, 0xA1, 0xAA, 0x97, 0x96, 0xA2, 0x94, 0x97, 0xA0, 0x98, 0x9A, 0xA3, 0x97, 0x9C, 0xA7, 
   0x93, 0x98, 0xA3, 0x91, 0x97, 0xA2, 0x97, 0xA0, 0xAC, 0x9C, 0xA2, 0xAC, 0x9D, 0x9C, 0xA4, 0x95, 
   0x94, 0x9B, 0x96, 0x9B, 0xA3, 0x9A, 0x9F, 0xAA, 0x97, 0xA1, 0xAD, 0x98, 0xA1, 0xAD, 0x9D, 0xA2, 
   0xAE, 0x9B, 0xA0, 0xA9, 0x9A, 0x9B, 0xA3, 0x93, 0x92, 0x9F, 0x8C, 0x8F, 0x9B, 0x8E, 0x92, 0x9B, 
   0xA2, 0xA5, 0xAC, 0x91, 0x8E, 0x93, 0x4D, 0x4B, 0x50, 0x2D, 0x2B, 0x32, 0x28, 0x2A, 0x2E, 0x22, 
   0x2B, 0x27, 0x3B, 0x43, 0x3E, 0x75, 0x7D, 0x7F, 0x86, 0x90, 0x9B, 0x7D, 0x89, 0x95, 0x7B, 0x86, 
   0x92, 0x74, 0x82, 0x8F, 0x76, 0x87, 0x95, 0x79, 0x85, 0x95, 0x7B, 0x88, 0x97, 0x81, 0x8A, 0x95, 
   0x87, 0x8E, 0x98, 0x8C, 0x93, 0x9A, 0x9D, 0xA3, 0xAA, 0xAA, 0xA7, 0xB3, 0x9B, 0x95, 0xA2, 0x90, 
   0x97, 0x9D, 0x90, 0x96, 0x9E, 0x9D, 0xA5, 0xA8, 0xA6, 0xA6, 0xAA, 0xA6, 0xA1, 0xA7, 0xA8, 0xA5, 
   0xAE, 0xA2, 0x9E, 0xA8, 0x9D, 0x9A, 0x9F, 0xA1, 0xA3, 0xA2, 0xAF, 0xB2, 0xB7, 0xBE, 0xBA, 0xC3, 
   0xC5, 0xBA, 0xC0, 0x9E, 0x9C, 0x9A, 0x8C, 0x8C, 0x8E, 0x8F, 0x87, 0x8B, 0x86, 0x7F, 0x85, 0x72, 
   0x6D, 0x74, 0x4F, 0x4A, 0x4E, 0x3F, 0x3C, 0x3F, 0x53, 0x50, 0x53, 0x57, 0x58, 0x58, 0x5A, 0x5C, 
   0x5B, 0x70, 0x6A, 0x70, 0x71, 0x65, 0x6F, 0x69, 0x63, 0x6A, 0x70, 0x68, 0x71, 0x6E, 0x66, 0x70, 
   0x67, 0x68, 0x6E, 0x63, 0x5F, 0x68, 0x52, 0x5A, 0x60, 0x52, 0x56, 0x5E, 0x59, 0x5F, 0x64, 0x3D, 
   0x46, 0x47, 0x18, 0x1A, 0x1C, 0x2E, 0x2A, 0x2A, 0x34, 0x3B, 0x38, 0x38, 0x3B, 0x3A, 0x3C, 0x3B, 
   0x3A, 0x40, 0x45, 0x3F, 0x46, 0x47, 0x3F, 0x55, 0x52, 0x48, 0x63, 0x60, 0x56, 0x61, 0x5D, 0x54, 
   0x48, 0x47, 0x44, 0x25, 0x23, 0x29, 0x25, 0x21, 0x27, 0x23, 0x21, 0x23, 0x24, 0x25, 0x2B, 0x3C, 
   0x40, 0x46, 0x5B, 0x60, 0x66, 0x69, 0x6D, 0x74, 0x6C, 0x71, 0x78, 0x67, 0x6E, 0x71, 0x67, 0x6E, 
   0x76, 0x68, 0x72, 0x7C, 0x6C, 0x74, 0x7D, 0x73, 0x79, 0x83, 0x71, 0x75, 0x81, 0x68, 0x6E, 0x79, 
   0x6C, 0x75, 0x7E, 0x6F, 0x72, 0x7D, 0x6A, 0x6D, 0x70, 0x8C, 0x8C, 0x88, 0x9D, 0x9C, 0x95, 0xA0, 
   0x9E, 0x96, 0xA8, 0xA7, 0x9C, 0xA6, 0xA5, 0x98, 0xA3, 0x9D, 0x92, 0x9F, 0x9B, 0x94, 0x92, 0x98, 
   0x9C, 0x8D, 0x98, 0xAA, 0x86, 0x90, 0xA6, 0x83, 0x8D, 0xA3, 0x8C, 0x95, 0xA9, 0x9B, 0x9E, 0xAC, 
   0x95, 0x9A, 0xA1, 0x93, 0x98, 0x9F, 0x5D, 0x5A, 0x5D, 0x1A, 0x16, 0x14, 0x1F, 0x1E, 0x20, 0x20, 
   0x24, 0x28, 0x2A, 0x2D, 0x2F, 0x3B, 0x39, 0x40, 0x55, 0x53, 0x5E, 0x6A, 0x69, 0x75, 0x71, 0x6D, 
   0x78, 0x72, 0x6C, 0x76, 0x61, 0x60, 0x6B, 0x51, 0x4E, 0x5A, 0x4B, 0x4A, 0x53, 0x46, 0x46, 0x4D, 
   0x46, 0x44, 0x4A, 0x51, 0x52, 0x57, 0x32, 0x33, 0x34, 0x14, 0x12, 0x18, 0x1E, 0x1F, 0x2B, 0x4B, 
   0x54, 0x63, 0x70, 0x81, 0x92, 0x73, 0x89, 0x99, 0x7E, 0x92, 0xA3, 0x88, 0x98, 0xAB, 0xA0, 0xB1, 
   0xBD, 0x9B, 0xA3, 0xAF, 0x7C, 0x85, 0x9A, 0x67, 0x77, 0x95, 0x58, 0x67, 0x83, 0x46, 0x53, 0x67, 
   0x34, 0x40, 0x48, 0x54, 0x5C, 0x66, 0x82, 0x81, 0x93, 0x84, 0x7F, 0x8E, 0x84, 0x82, 0x8E, 0x7E, 
   0x7B, 0x89, 0x79, 0x74, 0x7F, 0x7A, 0x72, 0x7B, 0x68, 0x63, 0x6C, 0x7A, 0x77, 0x82, 0x91, 0x91, 
   0x96, 0x93, 0x95, 0x99, 0x94, 0x94, 0x9A, 0x97, 0x95, 0x9B, 0x99, 0x96, 0x9B, 0x96, 0x95, 0x9B, 
   0x96, 0x96, 0x9B, 0x95, 0x95, 0x99, 0x94, 0x96, 0x98, 0x95, 0x98, 0x99, 0x94, 0x94, 0x99, 0x97, 
   0x96, 0x9D, 0x96, 0x94, 0x9C, 0x96, 0x94, 0x9A, 0x96, 0x93, 0x96, 0x96, 0x93, 0x97, 0x95, 0x92, 
   0x98, 0x96, 0x93, 0x97, 0x96, 0x94, 0x98, 0x97, 0x96, 0x99, 0x99, 0x94, 0x99, 0x9A, 0x94, 0x9C, 
   0x96, 0x91, 0x9D, 0x95, 0x93, 0x9E, 0x93, 0x90, 0x9E, 0x98, 0x92, 0xA3, 0x7F, 0x80, 0x99, 0x61, 
   0x6C, 0x86, 0x3F, 0x48, 0x5B, 0x59, 0x5D, 0x68, 0x74, 0x7A, 0x89, 0x75, 0x7B, 0x92, 0x78, 0x7B, 
   0x94, 0x7B, 0x80, 0x98, 0x78, 0x81, 0x96, 0x7D, 0x84, 0x9A, 0x81, 0x85, 0x9C, 0x79, 0x7F, 0x97, 
   0x6F, 0x75, 0x89, 0x87, 0x8B, 0x9D, 0x7F, 0x7D, 0x91, 0x75, 0x74, 0x84, 0x82, 0x7C, 0x88, 0x8C, 
   0x8A, 0x90, 0x8E, 0x87, 0x90, 0x2C, 0x2F, 0x39, 0x48, 0x5E, 0x74, 0x68, 0x8F, 0xB1, 0x80, 0xAB, 
   0xCE, 0x8C, 0xB1, 0xD2, 0x90, 0xB1, 0xCD, 0x8B, 0xAF, 0xCD, 0x86, 0xAA, 0xCA, 0x7B, 0xA1, 0xC6, 
   0x77, 0xA4, 0xCB, 0x75, 0xA4, 0xCD, 0x6A, 0x93, 0xBF, 0x69, 0x93, 0xC0, 0x79, 0xA3, 0xD4, 0x76, 
   0xA5, 0xD3, 0x70, 0x9F, 0xCC, 0x7F, 0xAC, 0xD6, 0x8C, 0xB3, 0xDB, 0x93, 0xBE, 0xE6, 0x98, 0xC5, 
   0xE8, 0xA0, 0xCB, 0xEB, 0x90, 0xBA, 0xDD, 0x76, 0xA0, 0xC8, 0x6F, 0x9C, 0xC7, 0x7A, 0xA1, 0xC8, 
   0x56, 0x5E, 0x74, 0x4C, 0x46, 0x4E, 0x54, 0x53, 0x57, 0x5F, 0x62, 0x61, 0x5B, 0x5C, 0x58, 0x5D, 
   0x62, 0x5F, 0x6E, 0x72, 0x75, 0x75, 0x76, 0x7B, 0x83, 0x80, 0x89, 0x8E, 0x8F, 0x99, 0x8C, 0x8A, 
   0x98, 0x87, 0x86, 0x95, 0x80, 0x88, 0x91, 0xB5, 0xB6, 0xBE, 0x9F, 0x9B, 0xAB, 0x78, 0x7D, 0x8F, 
   0x85, 0x8A, 0x95, 0x5D, 0x5B, 0x63, 0x49, 0x45, 0x4C, 0x49, 0x48, 0x4C, 0x65, 0x67, 0x6E, 0x81, 
   0x82, 0x8E, 0x74, 0x7C, 0x82, 0x73, 0x7A, 0x86, 0x93, 0x96, 0x9C, 0xAB, 0xAC, 0xAE, 0xA5, 0xA6, 
   0xAA, 0x9F, 0x9F, 0xA4, 0x9B, 0x99, 0xA1, 0x9C, 0x9A, 0xA4, 0x9F, 0x9B, 0xA6, 0x99, 0x9C, 0xA6, 
   0x93, 0x9A, 0xA6, 0x93, 0x9E, 0xAA, 0x9E, 0xA3, 0xAF, 0xA5, 0xA2, 0xB0, 0x9E, 0x9A, 0xA9, 0x8F, 
   0x8C, 0x99, 0x93, 0x96, 0xA2, 0x98, 0x9C, 0xA9, 0x97, 0xA0, 0xAC, 0x9B, 0xA3, 0xAE, 0x9C, 0xA0, 
   0xAC, 0x9C, 0x9F, 0xA7, 0x99, 0x9C, 0xA3, 0x92, 0x94, 0x9F, 0x91, 0x94, 0x9C, 0x95, 0x97, 0x9F, 
   0x8F, 0x8E, 0x93, 0x5A, 0x4F, 0x54, 0x35, 0x2F, 0x33, 0x36, 0x35, 0x3A, 0x2A, 0x2B, 0x30, 0x25, 
   0x30, 0x30, 0x5A, 0x6B, 0x6B, 0x7B, 0x86, 0x8F, 0x80, 0x84, 0x94, 0x79, 0x80, 0x90, 0x7B, 0x81, 
   0x91, 0x77, 0x81, 0x8F, 0x7E, 0x88, 0x95, 0x8A, 0x8E, 0x9A, 0x8D, 0x8D, 0x9A, 0x87, 0x8A, 0x93, 
   0x87, 0x8A, 0x91, 0x8D, 0x93, 0x96, 0xAD, 0xB5, 0xB8, 0xC0, 0xC0, 0xCA, 0xA0, 0x99, 0xA6, 0x96, 
   0x99, 0xA2, 0x9C, 0x9D, 0xA4, 0xA1, 0xA7, 0xAA, 0xA5, 0xA7, 0xA8, 0xAD, 0xAA, 0xAD, 0xAF, 0xAD, 
   0xB3, 0xA8, 0xA4, 0xAA, 0x9E, 0x97, 0x9C, 0x99, 0x98, 0x9C, 0xAC, 0xAA, 0xAE, 0xAB, 0x9F, 0xA7, 
   0x5D, 0x4B, 0x54, 0x24, 0x1F, 0x1F, 0x49, 0x4C, 0x4A, 0x61, 0x5E, 0x5C, 0x40, 0x3C, 0x3C, 0x38, 
   0x38, 0x3A, 0x56, 0x56, 0x59, 0x56, 0x56, 0x5A, 0x63, 0x5F, 0x64, 0x66, 0x62, 0x64, 0x65, 0x65, 
   0x64, 0x6E, 0x6B, 0x6E, 0x73, 0x6D, 0x73, 0x6D, 0x67, 0x6C, 0x6E, 0x69, 0x71, 0x69, 0x66, 0x6E, 
   0x71, 0x71, 0x75, 0x7C, 0x72, 0x7B, 0x56, 0x5C, 0x64, 0x59, 0x5E, 0x66, 0x59, 0x5F, 0x65, 0x40, 
   0x4A, 0x4E, 0x13, 0x17, 0x19, 0x1D, 0x1C, 0x1A, 0x29, 0x2F, 0x29, 0x33, 0x35, 0x31, 0x34, 0x37, 
   0x33, 0x39, 0x3E, 0x37, 0x45, 0x44, 0x3C, 0x4D, 0x4B, 0x44, 0x57, 0x5A, 0x51, 0x5E, 0x5F, 0x54, 
   0x4D, 0x4D, 0x46, 0x25, 0x21, 0x25, 0x25, 0x20, 0x25, 0x27, 0x25, 0x25, 0x35, 0x37, 0x3D, 0x58, 
   0x5B, 0x61, 0x67, 0x6A, 0x71, 0x77, 0x79, 0x80, 0x6E, 0x73, 0x77, 0x66, 0x6C, 0x71, 0x6A, 0x70, 
   0x78, 0x6C, 0x71, 0x7C, 0x79, 0x7D, 0x86, 0x90, 0x92, 0x9D, 0x7E, 0x81, 0x90, 0x66, 0x6E, 0x7A, 
   0x6B, 0x73, 0x7F, 0x70, 0x76, 0x7F, 0x6F, 0x72, 0x77, 0x6D, 0x6D, 0x6F, 0x68, 0x67, 0x68, 0x72, 
   0x72, 0x6E, 0x8C, 0x8C, 0x85, 0x95, 0x94, 0x8A, 0x99, 0x96, 0x8B, 0x9A, 0x9A, 0x94, 0x8B, 0x91, 
   0x98, 0x8A, 0x97, 0xA8, 0x84, 0x94, 0xA8, 0x81, 0x90, 0xA4, 0x83, 0x91, 0xA4, 0x88, 0x93, 0xA0, 
   0x86, 0x91, 0x9B, 0x7C, 0x89, 0x97, 0x54, 0x5A, 0x64, 0x15, 0x15, 0x18, 0x17, 0x13, 0x17, 0x2E, 
   0x29, 0x30, 0x5A, 0x57, 0x5E, 0x71, 0x6D, 0x76, 0x7E, 0x7C, 0x87, 0x81, 0x80, 0x8C, 0x79, 0x78, 
   0x84, 0x74, 0x6E, 0x77, 0x6C, 0x6D, 0x73, 0x5C, 0x5A, 0x61, 0x4B, 0x4B, 0x51, 0x4A, 0x4D, 0x52, 
   0x3A, 0x38, 0x3D, 0x23, 0x24, 0x28, 0x13, 0x11, 0x14, 0x22, 0x23, 0x2D, 0x43, 0x4B, 0x5C, 0x65, 
   0x72, 0x85, 0x74, 0x82, 0x96, 0x7A, 0x8B, 0x9D, 0x7C, 0x90, 0xA4, 0x81, 0x91, 0xA5, 0x93, 0xA1, 
   0xB0, 0x8F, 0x98, 0xA7, 0x6E, 0x7E, 0x97, 0x62, 0x77, 0x9A, 0x5A, 0x67, 0x88, 0x47, 0x54, 0x69, 
   0x31, 0x3D, 0x48, 0x55, 0x60, 0x6F, 0x7C, 0x85, 0xA3, 0x7E, 0x83, 0x9E, 0x83, 0x87, 0x9F, 0x85, 
   0x85, 0x9D, 0x8A, 0x88, 0x9B, 0x89, 0x83, 0x8F, 0x73, 0x6C, 0x75, 0x79, 0x75, 0x7F, 0x8B, 0x8A, 
   0x90, 0x90, 0x93, 0x97, 0x94, 0x93, 0x99, 0x98, 0x95, 0x99, 0x98, 0x95, 0x99, 0x99, 0x96, 0x9B, 
   0x96, 0x94, 0x9A, 0x95, 0x94, 0x9A, 0x97, 0x96, 0x9A, 0x96, 0x98, 0x9A, 0x96, 0x95, 0x9A, 0x98, 
   0x97, 0x9E, 0x98, 0x97, 0x9E, 0x99, 0x97, 0x9C, 0x98, 0x95, 0x99, 0x96, 0x93, 0x98, 0x98, 0x95, 
   0x9B, 0x98, 0x96, 0x9A, 0x98, 0x97, 0x9A, 0x98, 0x96, 0x98, 0x9C, 0x95, 0x99, 0x9F, 0x98, 0x9E, 
   0x96, 0x93, 0x9A, 0x95, 0x95, 0x9E, 0x91, 0x91, 0xA1, 0x80, 0x7F, 0x98, 0x67, 0x6A, 0x88, 0x3F, 
   0x48, 0x5D, 0x36, 0x41, 0x46, 0x65, 0x6D, 0x74, 0x77, 0x7E, 0x91, 0x77, 0x7E, 0x96, 0x6F, 0x73, 
   0x8C, 0x78, 0x80, 0x94, 0x7A, 0x83, 0x95, 0x7D, 0x82, 0x98, 0x80, 0x83, 0x99, 0x77, 0x7D, 0x95, 
   0x6F, 0x73, 0x87, 0x81, 0x84, 0x95, 0x8B, 0x87, 0x9E, 0x7A, 0x76, 0x84, 0x87, 0x7F, 0x84, 0x9E, 
   0x97, 0x9B, 0x65, 0x5B, 0x65, 0x10, 0x14, 0x1C, 0x49, 0x60, 0x76, 0x6D, 0x8F, 0xB4, 0x83, 0xAB, 
   0xCE, 0x91, 0xB7, 0xD7, 0x97, 0xBE, 0xDA, 0x97, 0xBA, 0xD9, 0x94, 0xB8, 0xDA, 0x8B, 0xB2, 0xD7, 
   0x81, 0xAD, 0xD5, 0x71, 0x9F, 0xC8, 0x68, 0x92, 0xBD, 0x6C, 0x9B, 0xC6, 0x79, 0xA6, 0xD6, 0x81, 
   0xB1, 0xDF, 0x87, 0xB4, 0xE2, 0x8A, 0xB6, 0xE0, 0x89, 0xAF, 0xD9, 0x83, 0xAC, 0xD5, 0x87, 0xB1, 
   0xD5, 0x87, 0xAE, 0xD2, 0x7D, 0xA4, 0xCA, 0x70, 0x9B, 0xC5, 0x6B, 0x96, 0xC0, 0x6B, 0x89, 0xAE, 
   0x56, 0x5F, 0x73, 0x5B, 0x57, 0x58, 0x62, 0x60, 0x5C, 0x6A, 0x6A, 0x68, 0x5E, 0x5E, 0x5F, 0x68, 
   0x6E, 0x6B, 0x7E, 0x81, 0x7E, 0x89, 0x84, 0x85, 0x7E, 0x78, 0x7A, 0x80, 0x7C, 0x7E, 0x90, 0x8B, 
   0x8E, 0x86, 0x84, 0x85, 0x7A, 0x7B, 0x79, 0x8B, 0x88, 0x87, 0x6F, 0x6A, 0x6E, 0x55, 0x55, 0x5F, 
   0x66, 0x6E, 0x73, 0x59, 0x64, 0x6A, 0x60, 0x68, 0x71, 0x75, 0x7B, 0x83, 0x72, 0x76, 0x80, 0x65, 
   0x6A, 0x75, 0x67, 0x71, 0x75, 0x8D, 0x96, 0x99, 0xA5, 0xA6, 0xAF, 0xA2, 0x9F, 0xA5, 0x9F, 0x9F, 
   0xA1, 0x9A, 0x9A, 0x9E, 0x9C, 0x9B, 0x9D, 0x9E, 0x9C, 0xA6, 0x9B, 0x99, 0xA3, 0x95, 0x98, 0x9F, 
   0x94, 0x9B, 0xA6, 0x96, 0x9F, 0xAB, 0x9C, 0xA0, 0xAA, 0xA6, 0xA6, 0xB3, 0xA2, 0xA1, 0xB1, 0x94, 
   0x94, 0xA2, 0x98, 0x9C, 0xA8, 0x9C, 0xA0, 0xAD, 0x97, 0x9E, 0xAA, 0x9A, 0xA0, 0xAB, 0x9B, 0x9E, 
   0xA7, 0x9D, 0x9F, 0xA6, 0x9C, 0x9F, 0xA7, 0x94, 0x99, 0xA1, 0x97, 0x9B, 0xA1, 0x94, 0x93, 0x9D, 
   0x71, 0x69, 0x6E, 0x46, 0x3F, 0x41, 0x3C, 0x3C, 0x3C, 0x3A, 0x3D, 0x3C, 0x29, 0x2A, 0x29, 0x40, 
   0x48, 0x49, 0x71, 0x81, 0x84, 0x7D, 0x8B, 0x93, 0x7F, 0x85, 0x93, 0x7F, 0x86, 0x95, 0x85, 0x8D, 
   0x9C, 0x83, 0x8E, 0x99, 0x89, 0x94, 0x9C, 0x97, 0x98, 0xA1, 0x95, 0x90, 0x9C, 0x8C, 0x8F, 0x98, 
   0x8E, 0x90, 0x96, 0x94, 0x98, 0x9C, 0xB2, 0xBA, 0xBC, 0xC9, 0xCA, 0xD3, 0xA4, 0x9E, 0xA9, 0xA2, 
   0xA3, 0xAE, 0xAA, 0xAC, 0xB6, 0xAC, 0xAE, 0xBA, 0xAC, 0xAC, 0xB4, 0xB0, 0xAD, 0xB4, 0xB5, 0xB1, 
   0xB9, 0xAE, 0xA9, 0xB0, 0x9D, 0x98, 0x9D, 0x8B, 0x88, 0x8C, 0x80, 0x78, 0x76, 0x6E, 0x5C, 0x60, 
   0x24, 0x15, 0x1C, 0x11, 0x10, 0x10, 0x0E, 0x10, 0x0E, 0x10, 0x10, 0x0E, 0x33, 0x35, 0x33, 0x61, 
   0x61, 0x63, 0x67, 0x65, 0x6A, 0x61, 0x60, 0x66, 0x67, 0x62, 0x68, 0x6E, 0x67, 0x6C, 0x70, 0x69, 
   0x6E, 0x71, 0x6B, 0x70, 0x71, 0x6D, 0x71, 0x6E, 0x6B, 0x70, 0x6B, 0x68, 0x6F, 0x68, 0x66, 0x6C, 
   0x72, 0x6F, 0x72, 0x7C, 0x76, 0x79, 0x53, 0x5B, 0x62, 0x52, 0x5A, 0x5F, 0x52, 0x5C, 0x5E, 0x4A, 
   0x52, 0x54, 0x19, 0x1C, 0x1D, 0x16, 0x16, 0x11, 0x22, 0x23, 0x1D, 0x2D, 0x2E, 0x2B, 0x30, 0x33, 
   0x2F, 0x38, 0x38, 0x32, 0x43, 0x3E, 0x37, 0x44, 0x43, 0x3D, 0x4B, 0x4C, 0x44, 0x60, 0x5D, 0x52, 
   0x5E, 0x5B, 0x52, 0x2D, 0x2B, 0x2D, 0x21, 0x24, 0x28, 0x2A, 0x31, 0x30, 0x3B, 0x45, 0x4C, 0x53, 
   0x58, 0x5D, 0x5E, 0x60, 0x67, 0x69, 0x6B, 0x71, 0x66, 0x6F, 0x71, 0x68, 0x70, 0x70, 0x6A, 0x70, 
   0x75, 0x6B, 0x6E, 0x74, 0x7E, 0x7E, 0x84, 0x95, 0x94, 0x9D, 0x7E, 0x81, 0x8C, 0x69, 0x70, 0x7A, 
   0x71, 0x75, 0x7F, 0x6F, 0x74, 0x79, 0x6E, 0x6E, 0x74, 0x6F, 0x6E, 0x76, 0x64, 0x63, 0x69, 0x5A, 
   0x5B, 0x5C, 0x67, 0x6A, 0x68, 0x7B, 0x81, 0x79, 0x8A, 0x8D, 0x86, 0x8F, 0x91, 0x8F, 0x82, 0x8A, 
   0x92, 0x85, 0x96, 0xA5, 0x85, 0x93, 0xA5, 0x85, 0x91, 0xA1, 0x82, 0x92, 0x9C, 0x84, 0x90, 0x95, 
   0x7F, 0x88, 0x8D, 0x70, 0x7C, 0x8B, 0x53, 0x5C, 0x68, 0x23, 0x22, 0x29, 0x46, 0x41, 0x47, 0x78, 
   0x72, 0x78, 0x8A, 0x84, 0x8D, 0x7A, 0x77, 0x80, 0x76, 0x76, 0x7D, 0x74, 0x74, 0x7D, 0x6B, 0x6E, 
   0x79, 0x6E, 0x6F, 0x78, 0x78, 0x7E, 0x83, 0x7C, 0x7D, 0x7E, 0x64, 0x64, 0x64, 0x68, 0x69, 0x6A, 
   0x68, 0x63, 0x67, 0x40, 0x3E, 0x43, 0x1A, 0x20, 0x25, 0x37, 0x3E, 0x4B, 0x53, 0x5D, 0x70, 0x68, 
   0x75, 0x88, 0x78, 0x82, 0x97, 0x7F, 0x89, 0x9D, 0x7A, 0x8A, 0xA1, 0x7C, 0x8F, 0xA4, 0x92, 0xA2, 
   0xB2, 0x8C, 0x99, 0xAC, 0x6F, 0x88, 0xA7, 0x61, 0x7B, 0xA5, 0x5E, 0x6C, 0x90, 0x4D, 0x58, 0x72, 
   0x38, 0x3D, 0x51, 0x50, 0x5A, 0x6F, 0x73, 0x84, 0xAA, 0x6C, 0x7E, 0xA4, 0x6F, 0x7C, 0xA1, 0x77, 
   0x80, 0xA4, 0x7F, 0x85, 0x9E, 0x95, 0x92, 0x9F, 0x86, 0x7F, 0x85, 0x78, 0x71, 0x79, 0x7A, 0x78, 
   0x7E, 0x89, 0x8C, 0x93, 0x94, 0x93, 0x98, 0x97, 0x94, 0x96, 0x97, 0x94, 0x96, 0x97, 0x94, 0x98, 
   0x96, 0x93, 0x99, 0x97, 0x95, 0x9B, 0x9A, 0x99, 0x9E, 0x99, 0x99, 0x9D, 0x96, 0x96, 0x99, 0x97, 
   0x96, 0x9B, 0x97, 0x95, 0x9C, 0x98, 0x96, 0x9C, 0x99, 0x96, 0x9B, 0x9A, 0x96, 0x9D, 0x9E, 0x99, 
   0xA2, 0x9E, 0x9A, 0xA2, 0x9F, 0x99, 0x9F, 0x9C, 0x94, 0x9A, 0x9B, 0x93, 0x99, 0x99, 0x93, 0x99, 
   0x97, 0x92, 0x9A, 0x97, 0x94, 0x9E, 0x7C, 0x80, 0x96, 0x60, 0x66, 0x80, 0x48, 0x4B, 0x63, 0x25, 
   0x27, 0x34, 0x5F, 0x67, 0x6A, 0x71, 0x7A, 0x83, 0x7A, 0x82, 0x97, 0x7C, 0x84, 0x9F, 0x6F, 0x74, 
   0x8C, 0x74, 0x7C, 0x8E, 0x78, 0x82, 0x94, 0x7C, 0x80, 0x99, 0x7C, 0x7F, 0x97, 0x78, 0x7E, 0x93, 
   0x76, 0x79, 0x8A, 0x74, 0x78, 0x89, 0x81, 0x81, 0x95, 0x7C, 0x7D, 0x88, 0x8C, 0x86, 0x8B, 0x9D, 
   0x94, 0x9C, 0x49, 0x3D, 0x48, 0x0A, 0x0F, 0x14, 0x4B, 0x60, 0x70, 0x6A, 0x83, 0xA2, 0x65, 0x83, 
   0xA6, 0x75, 0x97, 0xB9, 0x86, 0xAF, 0xD1, 0x98, 0xBB, 0xE0, 0x91, 0xB8, 0xDC, 0x8B, 0xB0, 0xD8, 
   0x77, 0x9D, 0xC6, 0x67, 0x8F, 0xBA, 0x69, 0x92, 0xC1, 0x69, 0x9A, 0xC8, 0x6E, 0x9B, 0xCC, 0x73, 
   0xA2, 0xCE, 0x80, 0xAE, 0xD7, 0x85, 0xB3, 0xD9, 0x86, 0xAE, 0xD4, 0x8C, 0xB3, 0xDB, 0x8F, 0xB2, 
   0xD8, 0x76, 0x93, 0xB6, 0x6E, 0x8B, 0xB2, 0x6E, 0x94, 0xC0, 0x64, 0x88, 0xB3, 0x56, 0x66, 0x89, 
   0x4B, 0x51, 0x65, 0x53, 0x52, 0x55, 0x5A, 0x5D, 0x5A, 0x66, 0x66, 0x63, 0x68, 0x64, 0x63, 0x7A, 
   0x7E, 0x7A, 0x85, 0x87, 0x86, 0x81, 0x7F, 0x80, 0x7C, 0x78, 0x78, 0x75, 0x71, 0x6F, 0x6F, 0x6D, 
   0x67, 0x75, 0x71, 0x6B, 0x77, 0x71, 0x6B, 0x61, 0x5C, 0x58, 0x50, 0x4C, 0x4B, 0x56, 0x55, 0x58, 
   0x57, 0x5A, 0x5B, 0x51, 0x59, 0x60, 0x69, 0x74, 0x7E, 0x81, 0x8E, 0x95, 0x84, 0x8D, 0x93, 0x87, 
   0x8A, 0x8F, 0x98, 0x9C, 0x9F, 0xAE, 0xAF, 0xB4, 0xA0, 0xA1, 0xA9, 0x9A, 0x9A, 0xA1, 0x99, 0x9A, 
   0x9D, 0x96, 0x99, 0x9A, 0x98, 0x9B, 0x9E, 0x98, 0x9A, 0xA1, 0x91, 0x95, 0x9C, 0x92, 0x98, 0x9D, 
   0x9D, 0xA3, 0xAD, 0x9D, 0xA3, 0xAF, 0x9A, 0xA1, 0xA9, 0x9D, 0xA5, 0xAF, 0x97, 0x9C, 0xA6, 0x90, 
   0x95, 0x9E, 0x9A, 0xA1, 0xAB, 0x9C, 0xA1, 0xAC, 0x98, 0x9E, 0xAA, 0x9B, 0xA0, 0xAA, 0x98, 0x9B, 
   0xA4, 0x97, 0x9C, 0xA0, 0x9B, 0xA1, 0xA7, 0x9A, 0x9F, 0xA8, 0x9E, 0x9A, 0xA0, 0x7C, 0x76, 0x7E, 
   0x4F, 0x4A, 0x4E, 0x44, 0x42, 0x44, 0x3D, 0x3C, 0x3E, 0x47, 0x48, 0x46, 0x4F, 0x52, 0x4E, 0x79, 
   0x7E, 0x7F, 0x82, 0x8A, 0x90, 0x86, 0x91, 0x96, 0x89, 0x95, 0x9E, 0x8D, 0x98, 0xA3, 0x9E, 0xA3, 
   0xB0, 0x8F, 0x94, 0x9E, 0x8F, 0x96, 0x9E, 0x92, 0x95, 0x9D, 0x92, 0x93, 0x9E, 0x92, 0x98, 0xA4, 
   0x90, 0x94, 0x9B, 0x91, 0x93, 0x98, 0xA6, 0xAB, 0xAD, 0xC7, 0xC5, 0xCF, 0xB6, 0xB0, 0xBA, 0xB4, 
   0xB4, 0xBD, 0xB7, 0xB6, 0xC0, 0xB0, 0xAE, 0xBD, 0xA6, 0xA3, 0xAE, 0xA8, 0xA4, 0xAB, 0xA3, 0x9D, 
   0xA2, 0x8B, 0x83, 0x86, 0x69, 0x62, 0x62, 0x55, 0x4F, 0x4B, 0x5B, 0x51, 0x49, 0x5A, 0x49, 0x48, 
   0x1A, 0x11, 0x16, 0x14, 0x13, 0x11, 0x0E, 0x0F, 0x0C, 0x1B, 0x20, 0x1E, 0x51, 0x59, 0x57, 0x6C, 
   0x6C, 0x6E, 0x6A, 0x63, 0x6C, 0x67, 0x62, 0x6B, 0x69, 0x63, 0x69, 0x6F, 0x68, 0x6C, 0x72, 0x6A, 
   0x71, 0x73, 0x69, 0x6F, 0x70, 0x68, 0x6C, 0x6A, 0x66, 0x6D, 0x6B, 0x66, 0x6D, 0x69, 0x63, 0x67, 
   0x65, 0x63, 0x63, 0x6F, 0x6C, 0x6F, 0x60, 0x67, 0x6C, 0x5B, 0x60, 0x61, 0x4D, 0x55, 0x51, 0x44, 
   0x49, 0x45, 0x1D, 0x20, 0x19, 0x15, 0x13, 0x0A, 0x1A, 0x17, 0x11, 0x23, 0x24, 0x20, 0x27, 0x24, 
   0x20, 0x2D, 0x29, 0x24, 0x45, 0x40, 0x3D, 0x47, 0x42, 0x3F, 0x48, 0x47, 0x43, 0x60, 0x5E, 0x57, 
   0x6A, 0x65, 0x5E, 0x3A, 0x38, 0x38, 0x1C, 0x22, 0x24, 0x37, 0x3B, 0x3F, 0x43, 0x4A, 0x52, 0x4E, 
   0x52, 0x5A, 0x5A, 0x5B, 0x62, 0x61, 0x64, 0x6A, 0x61, 0x69, 0x6B, 0x64, 0x6B, 0x6A, 0x6B, 0x6D, 
   0x74, 0x73, 0x72, 0x7C, 0x77, 0x78, 0x7F, 0x7A, 0x7A, 0x82, 0x72, 0x76, 0x7D, 0x6E, 0x77, 0x7C, 
   0x76, 0x7A, 0x7F, 0x76, 0x77, 0x7E, 0x73, 0x72, 0x7A, 0x6E, 0x6F, 0x75, 0x6A, 0x6D, 0x6F, 0x73, 
   0x72, 0x75, 0x6C, 0x6C, 0x6E, 0x68, 0x6E, 0x6A, 0x7B, 0x80, 0x7B, 0x81, 0x87, 0x84, 0x7D, 0x88, 
   0x8C, 0x86, 0x95, 0xA0, 0x84, 0x90, 0x9B, 0x86, 0x8F, 0x98, 0x83, 0x8F, 0x93, 0x7B, 0x85, 0x87, 
   0x73, 0x7C, 0x80, 0x6B, 0x74, 0x7E, 0x49, 0x50, 0x59, 0x34, 0x34, 0x3A, 0x72, 0x6F, 0x75, 0x90, 
   0x8C, 0x93, 0x90, 0x8E, 0x96, 0x86, 0x88, 0x91, 0x84, 0x86, 0x8E, 0x86, 0x87, 0x8E, 0x81, 0x80, 
   0x8A, 0x7D, 0x80, 0x84, 0x86, 0x89, 0x8E, 0x84, 0x80, 0x84, 0x72, 0x6E, 0x6E, 0x81, 0x7F, 0x7C, 
   0x97, 0x90, 0x8F, 0x83, 0x7D, 0x7E, 0x42, 0x41, 0x46, 0x3E, 0x45, 0x53, 0x5C, 0x66, 0x79, 0x71, 
   0x7B, 0x8F, 0x7A, 0x84, 0x97, 0x7C, 0x87, 0x9C, 0x7B, 0x8B, 0xA4, 0x7F, 0x93, 0xAA, 0x8A, 0x9E, 
   0xAE, 0x80, 0x93, 0xAA, 0x6A, 0x88, 0xAA, 0x61, 0x7A, 0xA5, 0x5B, 0x6D, 0x93, 0x52, 0x5D, 0x7B, 
   0x3B, 0x40, 0x56, 0x4B, 0x55, 0x6B, 0x76, 0x88, 0xAE, 0x6E, 0x83, 0xAA, 0x6B, 0x81, 0xA6, 0x72, 
   0x85, 0xAD, 0x81, 0x8F, 0xAC, 0xA1, 0x9F, 0xAD, 0x92, 0x86, 0x8B, 0x7D, 0x76, 0x7D, 0x78, 0x75, 
   0x7D, 0x87, 0x88, 0x90, 0x91, 0x90, 0x97, 0x95, 0x93, 0x96, 0x94, 0x94, 0x95, 0x94, 0x93, 0x97, 
   0x94, 0x92, 0x98, 0x97, 0x95, 0x9C, 0x9B, 0x99, 0x9E, 0x9A, 0x98, 0x9C, 0x95, 0x95, 0x9A, 0x93, 
   0x95, 0x9B, 0x94, 0x94, 0x9B, 0x97, 0x94, 0x9B, 0x9B, 0x95, 0x9C, 0x9D, 0x95, 0x9D, 0x9F, 0x99, 
   0xA1, 0x9F, 0x99, 0xA3, 0x9E, 0x95, 0xA2, 0x9B, 0x91, 0x9C, 0x96, 0x91, 0x9B, 0x93, 0x90, 0x98, 
   0x97, 0x95, 0x9C, 0x92, 0x8E, 0x9D, 0x6B, 0x6A, 0x84, 0x4F, 0x52, 0x68, 0x2D, 0x30, 0x3C, 0x39, 
   0x3B, 0x43, 0x7B, 0x82, 0x89, 0x75, 0x7B, 0x8B, 0x74, 0x78, 0x91, 0x7A, 0x80, 0x9C, 0x76, 0x79, 
   0x93, 0x70, 0x75, 0x8A, 0x78, 0x7F, 0x94, 0x80, 0x85, 0x9C, 0x81, 0x84, 0x99, 0x79, 0x7C, 0x8F, 
   0x70, 0x75, 0x82, 0x70, 0x72, 0x7F, 0x7C, 0x76, 0x88, 0x7D, 0x7C, 0x87, 0x87, 0x84, 0x8D, 0x86, 
   0x7F, 0x89, 0x32, 0x2B, 0x35, 0x09, 0x11, 0x13, 0x3D, 0x4F, 0x59, 0x68, 0x81, 0x9E, 0x66, 0x83, 
   0xA5, 0x6E, 0x8E, 0xAE, 0x80, 0xA6, 0xCA, 0x86, 0xAE, 0xD4, 0x84, 0xAE, 0xD7, 0x7D, 0xA1, 0xCB, 
   0x6A, 0x8B, 0xB5, 0x68, 0x8F, 0xBC, 0x70, 0x9A, 0xCB, 0x70, 0x96, 0xC8, 0x68, 0x8E, 0xBF, 0x5E, 
   0x83, 0xAF, 0x6C, 0x94, 0xBD, 0x83, 0xB2, 0xD8, 0x95, 0xC3, 0xE6, 0x91, 0xB6, 0xD8, 0x7D, 0x99, 
   0xB6, 0x70, 0x86, 0xA1, 0x6B, 0x84, 0xA5, 0x6B, 0x8A, 0xB2, 0x64, 0x7F, 0xA9, 0x65, 0x70, 0x91, 
   0x5C, 0x5E, 0x70, 0x57, 0x53, 0x5A, 0x5F, 0x5D, 0x60, 0x5F, 0x5E, 0x5D, 0x5D, 0x5E, 0x5C, 0x69, 
   0x6E, 0x68, 0x74, 0x75, 0x73, 0x75, 0x74, 0x75, 0x77, 0x75, 0x76, 0x7E, 0x79, 0x78, 0x6F, 0x6A, 
   0x67, 0x68, 0x67, 0x5F, 0x70, 0x6D, 0x66, 0x6C, 0x68, 0x62, 0x67, 0x66, 0x5F, 0x62, 0x62, 0x62, 
   0x59, 0x57, 0x57, 0x47, 0x46, 0x4B, 0x3A, 0x3F, 0x48, 0x4F, 0x5D, 0x64, 0x6E, 0x83, 0x86, 0xA0, 
   0xAE, 0xB2, 0xCB, 0xCF, 0xD3, 0xAF, 0xAD, 0xB6, 0xA0, 0x9E, 0xA5, 0x99, 0x9B, 0xA1, 0x94, 0x97, 
   0x9B, 0x93, 0x95, 0x99, 0x8F, 0x95, 0x9D, 0x90, 0x96, 0x9F, 0x8C, 0x97, 0x9D, 0x92, 0x9C, 0xA1, 
   0xA1, 0xA8, 0xB0, 0xA2, 0xA7, 0xB0, 0x9B, 0xA4, 0xA9, 0x9A, 0xA6, 0xAA, 0x91, 0x99, 0xA0, 0x92, 
   0x9A, 0xA3, 0x99, 0xA0, 0xA8, 0x9C, 0xA2, 0xA9, 0x9A, 0x9F, 0xA8, 0x97, 0x9B, 0xA4, 0x92, 0x97, 
   0x9D, 0x93, 0x9A, 0x9C, 0x96, 0x9D, 0xA2, 0x85, 0x89, 0x90, 0x74, 0x6F, 0x74, 0x60, 0x5B, 0x60, 
   0x4F, 0x4C, 0x52, 0x48, 0x49, 0x4D, 0x4C, 0x4E, 0x4D, 0x63, 0x66, 0x62, 0x78, 0x7D, 0x7A, 0x92, 
   0x98, 0x9A, 0x8C, 0x92, 0x9A, 0x8C, 0x97, 0x9D, 0x92, 0xA1, 0xA2, 0xA0, 0xA9, 0xAC, 0xA9, 0xAC, 
   0xB2, 0x93, 0x94, 0x9D, 0x91, 0x93, 0x9C, 0x93, 0x95, 0x9D, 0x96, 0x98, 0xA3, 0x9A, 0x9E, 0xAD, 
   0x93, 0x96, 0xA0, 0x9E, 0x9D, 0xA5, 0xBB, 0xB9, 0xBF, 0xBF, 0xBC, 0xC4, 0xAB, 0xA7, 0xAF, 0xA6, 
   0xA9, 0xAE, 0xA2, 0xA1, 0xA6, 0x95, 0x8D, 0x96, 0x82, 0x79, 0x80, 0x6C, 0x66, 0x68, 0x53, 0x4E, 
   0x50, 0x49, 0x45, 0x46, 0x4E, 0x4C, 0x48, 0x55, 0x4F, 0x48, 0x65, 0x5A, 0x55, 0x48, 0x39, 0x3F, 
   0x11, 0x0C, 0x14, 0x10, 0x0F, 0x0F, 0x0B, 0x0F, 0x08, 0x18, 0x21, 0x20, 0x47, 0x50, 0x55, 0x5E, 
   0x5D, 0x61, 0x63, 0x5B, 0x61, 0x5E, 0x5C, 0x61, 0x65, 0x60, 0x67, 0x6B, 0x64, 0x69, 0x71, 0x65, 
   0x6D, 0x74, 0x65, 0x6E, 0x70, 0x67, 0x70, 0x6A, 0x69, 0x72, 0x6B, 0x69, 0x70, 0x6F, 0x66, 0x6C, 
   0x6F, 0x67, 0x6C, 0x72, 0x6D, 0x76, 0x74, 0x77, 0x79, 0x6A, 0x6D, 0x6F, 0x4D, 0x52, 0x51, 0x31, 
   0x32, 0x31, 0x1A, 0x1C, 0x1A, 0x16, 0x16, 0x15, 0x1B, 0x18, 0x1A, 0x24, 0x25, 0x29, 0x2F, 0x2E, 
   0x32, 0x3B, 0x3C, 0x3E, 0x58, 0x58, 0x57, 0x5C, 0x5A, 0x58, 0x52, 0x55, 0x55, 0x5C, 0x5F, 0x5B, 
   0x65, 0x61, 0x5A, 0x4C, 0x49, 0x44, 0x24, 0x2A, 0x2A, 0x3E, 0x42, 0x47, 0x4F, 0x55, 0x5D, 0x4F, 
   0x55, 0x5D, 0x55, 0x57, 0x61, 0x57, 0x5C, 0x64, 0x57, 0x5E, 0x61, 0x55, 0x62, 0x63, 0x62, 0x68, 
   0x70, 0x75, 0x79, 0x84, 0x7C, 0x81, 0x8A, 0x79, 0x7F, 0x86, 0x75, 0x7B, 0x80, 0x6B, 0x73, 0x78, 
   0x6F, 0x78, 0x7D, 0x6C, 0x6E, 0x75, 0x5E, 0x5C, 0x64, 0x5C, 0x5C, 0x60, 0x65, 0x68, 0x69, 0x75, 
   0x74, 0x77, 0x6A, 0x69, 0x6D, 0x45, 0x4B, 0x49, 0x66, 0x6A, 0x69, 0x7A, 0x80, 0x7F, 0x82, 0x8A, 
   0x8B, 0x7F, 0x8A, 0x8F, 0x7A, 0x85, 0x89, 0x77, 0x80, 0x86, 0x6F, 0x77, 0x7D, 0x66, 0x72, 0x77, 
   0x70, 0x7B, 0x81, 0x65, 0x6B, 0x72, 0x31, 0x36, 0x3D, 0x44, 0x4B, 0x4F, 0x98, 0x9A, 0x9D, 0xA8, 
   0xA7, 0xAA, 0xA2, 0xA4, 0xA6, 0x9C, 0x9C, 0xA1, 0x98, 0x96, 0x9D, 0x97, 0x92, 0x99, 0x96, 0x8C, 
   0x96, 0x8C, 0x89, 0x8F, 0x8B, 0x8B, 0x8E, 0x83, 0x7E, 0x81, 0x7B, 0x77, 0x77, 0x84, 0x81, 0x80, 
   0x95, 0x8D, 0x8C, 0x9C, 0x91, 0x91, 0x55, 0x53, 0x5B, 0x46, 0x4E, 0x5A, 0x5F, 0x6A, 0x7B, 0x6F, 
   0x7A, 0x8D, 0x76, 0x82, 0x96, 0x7A, 0x86, 0x9A, 0x7C, 0x89, 0xA1, 0x81, 0x8F, 0xA9, 0x8A, 0x9C, 
   0xAE, 0x7E, 0x92, 0xAB, 0x69, 0x88, 0xAC, 0x63, 0x7B, 0xA7, 0x5B, 0x70, 0x97, 0x51, 0x5E, 0x7D, 
   0x33, 0x3A, 0x51, 0x45, 0x51, 0x6A, 0x6A, 0x7D, 0xA2, 0x6F, 0x85, 0xA8, 0x6E, 0x83, 0xA4, 0x72, 
   0x86, 0xA8, 0x82, 0x92, 0xAF, 0x9F, 0xA0, 0xB3, 0x9A, 0x8F, 0x9A, 0x85, 0x7D, 0x84, 0x7D, 0x79, 
   0x7D, 0x85, 0x88, 0x8B, 0x8C, 0x8F, 0x90, 0x93, 0x91, 0x94, 0x95, 0x91, 0x97, 0x97, 0x93, 0x9A, 
   0x97, 0x92, 0x9A, 0x98, 0x94, 0x9A, 0x98, 0x95, 0x98, 0x97, 0x94, 0x97, 0x94, 0x94, 0x9B, 0x94, 
   0x97, 0x9E, 0x92, 0x94, 0x9B, 0x95, 0x91, 0x99, 0x98, 0x90, 0x98, 0x9B, 0x91, 0x99, 0x9C, 0x95, 
   0x9C, 0x99, 0x96, 0x9D, 0x99, 0x92, 0x9E, 0x94, 0x8D, 0x98, 0x92, 0x8D, 0x97, 0x93, 0x90, 0x98, 
   0x9F, 0x9C, 0xA6, 0x93, 0x8F, 0xA1, 0x64, 0x63, 0x7D, 0x3A, 0x3B, 0x4E, 0x20, 0x25, 0x2D, 0x54, 
   0x5B, 0x64, 0x77, 0x81, 0x8D, 0x74, 0x7B, 0x90, 0x70, 0x75, 0x8F, 0x77, 0x7E, 0x99, 0x77, 0x7C, 
   0x96, 0x71, 0x76, 0x8F, 0x78, 0x7D, 0x94, 0x81, 0x86, 0x9A, 0x83, 0x86, 0x97, 0x82, 0x81, 0x92, 
   0x79, 0x78, 0x84, 0x7C, 0x78, 0x82, 0x85, 0x7B, 0x88, 0x85, 0x80, 0x8B, 0x91, 0x8C, 0x98, 0x74, 
   0x6E, 0x78, 0x18, 0x18, 0x20, 0x02, 0x0F, 0x10, 0x1E, 0x2E, 0x36, 0x5D, 0x75, 0x90, 0x6D, 0x87, 
   0xA9, 0x64, 0x81, 0xA1, 0x6D, 0x8C, 0xB1, 0x70, 0x97, 0xBC, 0x77, 0xA1, 0xC9, 0x69, 0x90, 0xBA, 
   0x68, 0x8B, 0xB6, 0x73, 0x99, 0xC6, 0x76, 0x9F, 0xD0, 0x79, 0xA1, 0xD1, 0x73, 0x96, 0xC8, 0x6F, 
   0x91, 0xBF, 0x74, 0x9A, 0xC7, 0x85, 0xB3, 0xDB, 0x8D, 0xB9, 0xDB, 0x79, 0x99, 0xB8, 0x73, 0x8F, 
   0xA6, 0x73, 0x89, 0xA1, 0x67, 0x7D, 0x9B, 0x65, 0x7A, 0x9F, 0x68, 0x7A, 0xA0, 0x6C, 0x78, 0x93, 
   0x4F, 0x54, 0x61, 0x49, 0x49, 0x4E, 0x57, 0x57, 0x59, 0x56, 0x57, 0x5A, 0x5B, 0x5E, 0x5F, 0x64, 
   0x68, 0x64, 0x71, 0x73, 0x6D, 0x7A, 0x7C, 0x76, 0x7A, 0x79, 0x77, 0x7E, 0x7A, 0x79, 0x79, 0x75, 
   0x74, 0x5E, 0x60, 0x59, 0x6C, 0x6C, 0x68, 0x6D, 0x6B, 0x66, 0x68, 0x66, 0x64, 0x66, 0x61, 0x61, 
   0x62, 0x60, 0x61, 0x61, 0x64, 0x69, 0x4A, 0x4C, 0x54, 0x30, 0x37, 0x3E, 0x42, 0x55, 0x59, 0x6C, 
   0x85, 0x8B, 0xA3, 0xAF, 0xB7, 0xA7, 0xAE, 0xB4, 0xAC, 0xAC, 0xB0, 0xA6, 0xA7, 0xAC, 0x98, 0x9A, 
   0x9F, 0x8F, 0x8F, 0x95, 0x90, 0x93, 0x9A, 0x8D, 0x95, 0x9F, 0x8C, 0x99, 0xA1, 0x92, 0x9E, 0xA5, 
   0x98, 0xA4, 0xAA, 0x9C, 0xA4, 0xAB, 0x9A, 0xA1, 0xA5, 0xA1, 0xA8, 0xAD, 0x97, 0x9D, 0xA5, 0x99, 
   0x9F, 0xAB, 0x9A, 0x9F, 0xA8, 0x9A, 0xA0, 0xA5, 0x98, 0x9B, 0xA2, 0x92, 0x95, 0x9E, 0x92, 0x98, 
   0x9E, 0x99, 0x9C, 0x9F, 0x7E, 0x7D, 0x81, 0x58, 0x57, 0x5A, 0x55, 0x57, 0x59, 0x59, 0x5B, 0x5D, 
   0x4D, 0x4D, 0x50, 0x54, 0x56, 0x55, 0x74, 0x77, 0x71, 0x79, 0x78, 0x74, 0x81, 0x81, 0x81, 0x95, 
   0x9C, 0x9E, 0x8D, 0x97, 0x9E, 0x8D, 0x96, 0x9C, 0x8A, 0x96, 0x97, 0x97, 0x9F, 0x9E, 0xA7, 0xAB, 
   0xAD, 0xA4, 0xA5, 0xAC, 0xB7, 0xB6, 0xBD, 0xB8, 0xB5, 0xBD, 0xA3, 0xA2, 0xAD, 0xA2, 0x9F, 0xAC, 
   0x99, 0x9B, 0xA4, 0x9A, 0x9A, 0xA2, 0xA8, 0xA8, 0xAF, 0xA7, 0xA4, 0xA9, 0xA0, 0x9B, 0x9C, 0x8F, 
   0x8C, 0x8C, 0x7B, 0x75, 0x77, 0x5F, 0x54, 0x59, 0x46, 0x41, 0x43, 0x4D, 0x4E, 0x4E, 0x54, 0x50, 
   0x53, 0x4A, 0x47, 0x49, 0x52, 0x52, 0x53, 0x59, 0x52, 0x52, 0x53, 0x45, 0x46, 0x2A, 0x1A, 0x22, 
   0x10, 0x09, 0x11, 0x0F, 0x0E, 0x0F, 0x0D, 0x10, 0x0C, 0x1C, 0x25, 0x22, 0x40, 0x49, 0x49, 0x51, 
   0x53, 0x56, 0x5D, 0x58, 0x5E, 0x62, 0x5E, 0x62, 0x68, 0x62, 0x65, 0x6C, 0x68, 0x6A, 0x74, 0x6E, 
   0x71, 0x72, 0x68, 0x6E, 0x71, 0x68, 0x71, 0x6F, 0x6C, 0x71, 0x6E, 0x6B, 0x6E, 0x71, 0x6A, 0x6F, 
   0x72, 0x6B, 0x72, 0x7F, 0x78, 0x85, 0x6C, 0x70, 0x6E, 0x6F, 0x77, 0x73, 0x57, 0x5E, 0x5A, 0x3D, 
   0x3D, 0x3F, 0x4F, 0x51, 0x55, 0x5A, 0x5E, 0x62, 0x5A, 0x5B, 0x61, 0x53, 0x55, 0x5D, 0x48, 0x4A, 
   0x53, 0x4B, 0x4E, 0x52, 0x58, 0x5B, 0x59, 0x52, 0x57, 0x52, 0x4D, 0x56, 0x57, 0x55, 0x5C, 0x5D, 
   0x5E, 0x5D, 0x58, 0x55, 0x55, 0x4D, 0x37, 0x3A, 0x3B, 0x45, 0x49, 0x50, 0x46, 0x4C, 0x54, 0x4B, 
   0x51, 0x57, 0x4B, 0x4F, 0x58, 0x49, 0x51, 0x5B, 0x47, 0x4F, 0x57, 0x4A, 0x57, 0x5C, 0x5D, 0x65, 
   0x6C, 0x60, 0x66, 0x72, 0x6F, 0x7A, 0x84, 0x73, 0x80, 0x85, 0x70, 0x7A, 0x7C, 0x6A, 0x73, 0x76, 
   0x6C, 0x73, 0x78, 0x74, 0x7A, 0x80, 0x75, 0x79, 0x7F, 0x71, 0x75, 0x78, 0x6E, 0x71, 0x73, 0x8E, 
   0x8D, 0x91, 0x83, 0x81, 0x85, 0x38, 0x3A, 0x39, 0x47, 0x49, 0x4C, 0x68, 0x6B, 0x6F, 0x6C, 0x72, 
   0x77, 0x66, 0x70, 0x77, 0x62, 0x70, 0x76, 0x5D, 0x6C, 0x76, 0x56, 0x64, 0x6F, 0x59, 0x64, 0x6E, 
   0x5D, 0x63, 0x6B, 0x48, 0x4E, 0x52, 0x3A, 0x3E, 0x41, 0x77, 0x7B, 0x7F, 0x9A, 0x9A, 0x9C, 0x96, 
   0x97, 0x96, 0x97, 0x96, 0x95, 0x9D, 0x96, 0x95, 0x9D, 0x95, 0x96, 0xA5, 0x9F, 0xA3, 0xAF, 0xA6, 
   0xAC, 0xA8, 0xA5, 0xA7, 0x8E, 0x8D, 0x8C, 0x81, 0x7E, 0x7C, 0x87, 0x85, 0x80, 0x93, 0x92, 0x8C, 
   0xA8, 0xA0, 0x9C, 0xA6, 0x9C, 0x9A, 0x42, 0x41, 0x49, 0x3F, 0x47, 0x4E, 0x58, 0x62, 0x6D, 0x69, 
   0x76, 0x87, 0x70, 0x80, 0x96, 0x73, 0x82, 0x9B, 0x7C, 0x8C, 0xA4, 0x88, 0x95, 0xB0, 0x97, 0xA5, 
   0xBB, 0x86, 0x97, 0xB5, 0x6A, 0x87, 0xAE, 0x65, 0x7E, 0xA9, 0x61, 0x7B, 0xA0, 0x5A, 0x6E, 0x8A, 
   0x51, 0x5D, 0x76, 0x59, 0x65, 0x82, 0x5C, 0x6F, 0x94, 0x68, 0x7B, 0xA2, 0x6F, 0x83, 0xAA, 0x6F, 
   0x85, 0xAA, 0x6E, 0x85, 0xAA, 0x7E, 0x8D, 0xB0, 0x98, 0x9C, 0xB7, 0x98, 0x90, 0xA2, 0x8A, 0x80, 
   0x88, 0x87, 0x85, 0x8B, 0x8E, 0x8C, 0x90, 0x94, 0x8F, 0x92, 0x98, 0x91, 0x98, 0x98, 0x92, 0x9A, 
   0x98, 0x92, 0x9B, 0x94, 0x90, 0x98, 0x92, 0x90, 0x96, 0x92, 0x91, 0x96, 0x93, 0x94, 0x9A, 0x96, 
   0x97, 0x9D, 0x94, 0x94, 0x9A, 0x94, 0x91, 0x98, 0x95, 0x8E, 0x97, 0x99, 0x91, 0x9A, 0x9A, 0x93, 
   0x9B, 0x98, 0x95, 0x99, 0x99, 0x94, 0x99, 0x98, 0x91, 0x99, 0x97, 0x8F, 0x98, 0x92, 0x8E, 0x99, 
   0x8F, 0x8E, 0xA0, 0x71, 0x73, 0x87, 0x4B, 0x4E, 0x63, 0x27, 0x2A, 0x39, 0x33, 0x39, 0x44, 0x71, 
   0x79, 0x8A, 0x87, 0x90, 0xA4, 0x79, 0x80, 0x99, 0x6D, 0x76, 0x8E, 0x76, 0x81, 0x99, 0x76, 0x7D, 
   0x96, 0x75, 0x7A, 0x93, 0x77, 0x7C, 0x93, 0x83, 0x87, 0x9B, 0x82, 0x84, 0x95, 0x79, 0x78, 0x87, 
   0x75, 0x75, 0x7E, 0x7C, 0x7C, 0x7F, 0x95, 0x93, 0x9A, 0x8E, 0x8B, 0x95, 0x95, 0x8D, 0x9A, 0x54, 
   0x4C, 0x54, 0x10, 0x12, 0x14, 0x0E, 0x1C, 0x1A, 0x1F, 0x2C, 0x30, 0x4B, 0x5E, 0x71, 0x59, 0x74, 
   0x93, 0x5F, 0x83, 0xA7, 0x6B, 0x92, 0xBA, 0x85, 0xAF, 0xD4, 0x7E, 0xA2, 0xCA, 0x5F, 0x83, 0xAC, 
   0x68, 0x91, 0xBA, 0x71, 0x9A, 0xC7, 0x74, 0x9D, 0xCC, 0x76, 0xA1, 0xCE, 0x72, 0x99, 0xC4, 0x76, 
   0x9B, 0xC6, 0x79, 0x9E, 0xCA, 0x78, 0x9D, 0xC3, 0x73, 0x93, 0xB4, 0x74, 0x8D, 0xAC, 0x75, 0x8D, 
   0xA6, 0x76, 0x88, 0xA5, 0x70, 0x7B, 0xA0, 0x6D, 0x76, 0x9E, 0x70, 0x7C, 0x9E, 0x67, 0x71, 0x85, 
   0x46, 0x48, 0x53, 0x51, 0x50, 0x53, 0x5D, 0x60, 0x5E, 0x66, 0x66, 0x67, 0x6A, 0x69, 0x6A, 0x6F, 
   0x6E, 0x6B, 0x72, 0x74, 0x6C, 0x7C, 0x7D, 0x75, 0x7A, 0x76, 0x72, 0x77, 0x70, 0x70, 0x69, 0x66, 
   0x66, 0x6E, 0x6D, 0x66, 0x79, 0x75, 0x6E, 0x72, 0x6A, 0x66, 0x6B, 0x65, 0x67, 0x6C, 0x64, 0x65, 
   0x68, 0x65, 0x66, 0x5C, 0x5C, 0x5F, 0x53, 0x52, 0x55, 0x43, 0x40, 0x46, 0x22, 0x24, 0x2B, 0x2F, 
   0x3E, 0x46, 0x58, 0x6B, 0x77, 0x81, 0x95, 0x9B, 0x93, 0x9D, 0xA1, 0x9D, 0xA1, 0xA6, 0xA7, 0xA9, 
   0xB1, 0x99, 0x9A, 0xA2, 0x89, 0x8C, 0x95, 0x82, 0x8F, 0x9A, 0x8A, 0x98, 0xA3, 0x96, 0xA1, 0xAB, 
   0x93, 0x9F, 0xA7, 0x9A, 0xA5, 0xAB, 0xB0, 0xB5, 0xBB, 0xA5, 0xAB, 0xB2, 0x96, 0x9D, 0xA8, 0x94, 
   0x9D, 0xA8, 0x92, 0x9A, 0xA2, 0x93, 0x9C, 0xA1, 0x8F, 0x96, 0x9B, 0x94, 0x9C, 0xA2, 0xA0, 0xA6, 
   0xAE, 0x98, 0x99, 0xA0, 0x75, 0x74, 0x75, 0x6F, 0x6F, 0x6D, 0x7D, 0x7E, 0x7D, 0x68, 0x6B, 0x69, 
   0x59, 0x5B, 0x57, 0x72, 0x72, 0x6B, 0x84, 0x82, 0x7A, 0x7A, 0x73, 0x72, 0x6D, 0x65, 0x67, 0x7A, 
   0x7E, 0x7D, 0x83, 0x8E, 0x91, 0x8F, 0x9A, 0x9E, 0x9A, 0xA4, 0xA8, 0x98, 0x9E, 0xA0, 0x9D, 0xA2, 
   0xA3, 0x9B, 0x9E, 0xA2, 0xA8, 0xA6, 0xAC, 0xAB, 0xA6, 0xAE, 0xA8, 0xA4, 0xAF, 0x9E, 0xA2, 0xAB, 
   0x9E, 0xA3, 0xAE, 0x9C, 0x9F, 0xA8, 0x9A, 0x98, 0x9F, 0x99, 0x91, 0x94, 0x8C, 0x7D, 0x7F, 0x75, 
   0x69, 0x69, 0x60, 0x57, 0x55, 0x48, 0x42, 0x42, 0x4F, 0x4F, 0x4F, 0x62, 0x62, 0x64, 0x68, 0x62, 
   0x68, 0x64, 0x5D, 0x65, 0x6C, 0x66, 0x6D, 0x6D, 0x64, 0x6A, 0x49, 0x3F, 0x43, 0x21, 0x17, 0x1F, 
   0x10, 0x0C, 0x12, 0x0D, 0x0B, 0x0F, 0x0A, 0x0B, 0x0F, 0x1A, 0x1F, 0x1A, 0x40, 0x49, 0x41, 0x50, 
   0x57, 0x57, 0x5E, 0x58, 0x61, 0x67, 0x5F, 0x65, 0x69, 0x64, 0x67, 0x6C, 0x6A, 0x6B, 0x6A, 0x6B, 
   0x6D, 0x6B, 0x69, 0x6D, 0x71, 0x6B, 0x6F, 0x6D, 0x67, 0x6A, 0x6E, 0x69, 0x6A, 0x72, 0x6D, 0x70, 
   0x75, 0x72, 0x78, 0x84, 0x7D, 0x86, 0x71, 0x77, 0x76, 0x5F, 0x65, 0x60, 0x58, 0x5F, 0x5C, 0x54, 
   0x5A, 0x5A, 0x59, 0x5B, 0x5D, 0x5A, 0x5C, 0x5E, 0x68, 0x68, 0x6E, 0x6F, 0x6F, 0x78, 0x62, 0x64, 
   0x68, 0x76, 0x76, 0x77, 0x84, 0x85, 0x82, 0x5B, 0x5F, 0x5D, 0x40, 0x4B, 0x4F, 0x4D, 0x58, 0x5A, 
   0x58, 0x5B, 0x55, 0x55, 0x57, 0x4E, 0x41, 0x41, 0x44, 0x48, 0x4D, 0x54, 0x46, 0x4B, 0x53, 0x43, 
   0x48, 0x4D, 0x40, 0x47, 0x4D, 0x46, 0x4F, 0x58, 0x58, 0x60, 0x6C, 0x60, 0x66, 0x6F, 0x65, 0x69, 
   0x70, 0x5D, 0x63, 0x6D, 0x5E, 0x69, 0x74, 0x67, 0x72, 0x78, 0x71, 0x77, 0x79, 0x80, 0x83, 0x86, 
   0x8B, 0x91, 0x92, 0x95, 0x9C, 0x9C, 0x8F, 0x96, 0x96, 0x90, 0x96, 0x97, 0x9D, 0xA2, 0xA3, 0x96, 
   0x9A, 0x9B, 0x84, 0x85, 0x86, 0x3C, 0x3D, 0x3D, 0x32, 0x37, 0x3B, 0x51, 0x59, 0x5F, 0x55, 0x5F, 
   0x64, 0x53, 0x5D, 0x65, 0x50, 0x5D, 0x65, 0x4C, 0x5B, 0x68, 0x4C, 0x5B, 0x69, 0x51, 0x5B, 0x68, 
   0x45, 0x4C, 0x54, 0x3A, 0x41, 0x42, 0x5C, 0x61, 0x61, 0x89, 0x8A, 0x8D, 0x8E, 0x90, 0x93, 0x81, 
   0x86, 0x88, 0x7D, 0x7D, 0x7F, 0x84, 0x7D, 0x79, 0x82, 0x7C, 0x77, 0x84, 0x84, 0x7E, 0x8F, 0x8D, 
   0x85, 0x9C, 0x9C, 0x91, 0x93, 0x93, 0x8D, 0x8A, 0x85, 0x84, 0x8A, 0x85, 0x83, 0x85, 0x82, 0x7C, 
   0x7D, 0x79, 0x74, 0x52, 0x51, 0x4F, 0x1F, 0x20, 0x27, 0x34, 0x3A, 0x42, 0x4F, 0x55, 0x5F, 0x67, 
   0x72, 0x80, 0x75, 0x86, 0x97, 0x79, 0x87, 0x9D, 0x82, 0x8F, 0xA7, 0x83, 0x92, 0xAA, 0x90, 0x9E, 
   0xB5, 0x80, 0x90, 0xB0, 0x66, 0x81, 0xAA, 0x5F, 0x7B, 0xA6, 0x62, 0x7E, 0xA2, 0x65, 0x7A, 0x95, 
   0x5D, 0x67, 0x83, 0x5B, 0x66, 0x85, 0x5C, 0x6F, 0x91, 0x60, 0x75, 0x9F, 0x67, 0x7F, 0xAD, 0x6A, 
   0x88, 0xB7, 0x74, 0x92, 0xBF, 0x76, 0x92, 0xBD, 0x7B, 0x8F, 0xB6, 0x90, 0x94, 0xAD, 0x94, 0x8E, 
   0x99, 0x89, 0x84, 0x8E, 0x8F, 0x87, 0x8F, 0x95, 0x8E, 0x94, 0x9A, 0x94, 0x9B, 0x97, 0x92, 0x9A, 
   0x98, 0x94, 0x9D, 0x92, 0x91, 0x9A, 0x92, 0x92, 0x9A, 0x91, 0x93, 0x9A, 0x95, 0x95, 0x9A, 0x97, 
   0x96, 0x9C, 0x96, 0x95, 0x9B, 0x97, 0x93, 0x9A, 0x95, 0x91, 0x99, 0x98, 0x93, 0x9C, 0x9B, 0x95, 
   0x9E, 0x99, 0x97, 0x99, 0x97, 0x94, 0x95, 0x9B, 0x93, 0x9B, 0x9C, 0x94, 0x9F, 0x8D, 0x8B, 0x9E, 
   0x6F, 0x76, 0x91, 0x52, 0x5C, 0x72, 0x38, 0x3E, 0x48, 0x1F, 0x24, 0x2B, 0x3C, 0x43, 0x4E, 0x73, 
   0x7A, 0x90, 0x8A, 0x92, 0xA8, 0x7A, 0x80, 0x98, 0x6B, 0x75, 0x89, 0x73, 0x7E, 0x91, 0x75, 0x7C, 
   0x92, 0x73, 0x79, 0x91, 0x75, 0x79, 0x90, 0x83, 0x87, 0x9C, 0x82, 0x84, 0x97, 0x77, 0x76, 0x84, 
   0x76, 0x72, 0x7B, 0x80, 0x7D, 0x82, 0x86, 0x86, 0x8A, 0x82, 0x7E, 0x86, 0x77, 0x6B, 0x77, 0x39, 
   0x2F, 0x30, 0x21, 0x24, 0x22, 0x27, 0x33, 0x35, 0x2D, 0x3A, 0x3D, 0x3F, 0x52, 0x5D, 0x6D, 0x90, 
   0xAC, 0x7F, 0xAD, 0xD2, 0x7B, 0xAD, 0xD4, 0x7A, 0xAB, 0xD2, 0x63, 0x8B, 0xB5, 0x5E, 0x82, 0xAD, 
   0x6B, 0x95, 0xC1, 0x75, 0xA0, 0xCE, 0x76, 0x9E, 0xCC, 0x69, 0x8E, 0xB9, 0x69, 0x89, 0xB1, 0x7A, 
   0x93, 0xB7, 0x78, 0x93, 0xB5, 0x78, 0x93, 0xB0, 0x79, 0x8D, 0xAB, 0x71, 0x80, 0x9D, 0x6F, 0x7D, 
   0x98, 0x75, 0x80, 0x9E, 0x74, 0x7E, 0xA0, 0x72, 0x7D, 0x9D, 0x75, 0x80, 0x97, 0x81, 0x86, 0x8F, 
   0x7E, 0x7A, 0x7E, 0x68, 0x63, 0x62, 0x65, 0x67, 0x61, 0x73, 0x73, 0x70, 0x71, 0x6E, 0x6B, 0x76, 
   0x74, 0x6F, 0x75, 0x77, 0x70, 0x74, 0x73, 0x6E, 0x73, 0x6D, 0x6E, 0x6D, 0x68, 0x6C, 0x6F, 0x69, 
   0x6D, 0x76, 0x70, 0x6A, 0x88, 0x7D, 0x76, 0x79, 0x71, 0x6A, 0x6D, 0x68, 0x68, 0x70, 0x6D, 0x70, 
   0x76, 0x73, 0x73, 0x7F, 0x78, 0x76, 0x7F, 0x79, 0x7A, 0x7D, 0x76, 0x7E, 0x3B, 0x31, 0x3D, 0x0C, 
   0x0A, 0x11, 0x1C, 0x29, 0x2A, 0x4C, 0x61, 0x62, 0x6B, 0x7D, 0x7F, 0x84, 0x8F, 0x90, 0x99, 0xA2, 
   0xA3, 0x8A, 0x92, 0x96, 0x75, 0x81, 0x88, 0x72, 0x86, 0x8F, 0x7E, 0x8F, 0x9A, 0x91, 0x9B, 0xA6, 
   0x93, 0x99, 0xA2, 0x8A, 0x90, 0x97, 0xB0, 0xB5, 0xBD, 0xA4, 0xA9, 0xB3, 0x96, 0x9E, 0xAB, 0x94, 
   0x9D, 0xA9, 0x8F, 0x96, 0xA0, 0x92, 0x9A, 0xA1, 0x97, 0x9D, 0xA2, 0x91, 0x98, 0x9C, 0x82, 0x8B, 
   0x90, 0x6C, 0x71, 0x7B, 0x6B, 0x6F, 0x75, 0x7E, 0x83, 0x85, 0x62, 0x66, 0x64, 0x58, 0x5C, 0x56, 
   0x75, 0x76, 0x6D, 0x8A, 0x85, 0x7A, 0x88, 0x83, 0x79, 0x7A, 0x74, 0x73, 0x6A, 0x63, 0x65, 0x6B, 
   0x6A, 0x67, 0x77, 0x7F, 0x7E, 0x84, 0x91, 0x92, 0x9A, 0xA1, 0xA5, 0xA1, 0xA1, 0xA4, 0xAD, 0xAC, 
   0xAF, 0xA7, 0xAA, 0xAF, 0xB4, 0xB6, 0xBB, 0xC1, 0xBF, 0xC4, 0xB9, 0xB2, 0xBA, 0xB2, 0xAE, 0xB5, 
   0xAC, 0xAC, 0xB1, 0xA7, 0xA1, 0xA6, 0x9A, 0x8E, 0x92, 0x92, 0x81, 0x82, 0x81, 0x6C, 0x6F, 0x60, 
   0x52, 0x53, 0x48, 0x43, 0x40, 0x4C, 0x4C, 0x4B, 0x74, 0x70, 0x70, 0x7E, 0x75, 0x77, 0x84, 0x7E, 
   0x84, 0x75, 0x6E, 0x77, 0x73, 0x66, 0x6D, 0x6B, 0x5D, 0x62, 0x6A, 0x60, 0x67, 0x6B, 0x64, 0x71, 
   0x6D, 0x69, 0x74, 0x5A, 0x56, 0x61, 0x28, 0x22, 0x2D, 0x15, 0x13, 0x15, 0x30, 0x34, 0x31, 0x4B, 
   0x51, 0x50, 0x62, 0x5D, 0x60, 0x63, 0x5A, 0x62, 0x63, 0x60, 0x67, 0x67, 0x63, 0x6A, 0x68, 0x67, 
   0x70, 0x6A, 0x6A, 0x74, 0x6D, 0x6A, 0x75, 0x6F, 0x6C, 0x73, 0x70, 0x6C, 0x71, 0x75, 0x71, 0x75, 
   0x7D, 0x78, 0x7F, 0x83, 0x80, 0x84, 0x51, 0x50, 0x56, 0x45, 0x44, 0x4A, 0x4B, 0x4E, 0x52, 0x4F, 
   0x55, 0x5B, 0x5B, 0x5B, 0x63, 0x69, 0x66, 0x6F, 0x7B, 0x7D, 0x8C, 0x8F, 0x93, 0xA3, 0x98, 0x9F, 
   0xA9, 0xB2, 0xB2, 0xB6, 0xB3, 0xB2, 0xB2, 0x7A, 0x7B, 0x80, 0x44, 0x4C, 0x54, 0x50, 0x59, 0x59, 
   0x5D, 0x5E, 0x55, 0x59, 0x58, 0x4F, 0x3C, 0x3B, 0x3E, 0x40, 0x44, 0x4D, 0x4A, 0x4F, 0x57, 0x4A, 
   0x50, 0x53, 0x4A, 0x51, 0x55, 0x57, 0x5E, 0x66, 0x68, 0x70, 0x7B, 0x6F, 0x73, 0x7D, 0x74, 0x79, 
   0x80, 0x70, 0x76, 0x80, 0x60, 0x6A, 0x74, 0x6D, 0x73, 0x7A, 0x8F, 0x8F, 0x92, 0x92, 0x91, 0x93, 
   0x93, 0x96, 0x97, 0x93, 0x95, 0x97, 0x8F, 0x92, 0x93, 0x8E, 0x91, 0x92, 0x99, 0x9E, 0xA1, 0x80, 
   0x89, 0x8A, 0x72, 0x7A, 0x7B, 0x39, 0x3D, 0x3F, 0x1C, 0x22, 0x26, 0x3C, 0x44, 0x46, 0x49, 0x4F, 
   0x50, 0x45, 0x4B, 0x4E, 0x46, 0x4D, 0x51, 0x48, 0x4E, 0x59, 0x46, 0x4C, 0x5A, 0x3A, 0x43, 0x4E, 
   0x33, 0x3D, 0x44, 0x4B, 0x51, 0x53, 0x5F, 0x62, 0x63, 0x6C, 0x6D, 0x70, 0x78, 0x7B, 0x7C, 0x6A, 
   0x71, 0x72, 0x68, 0x6C, 0x6E, 0x74, 0x71, 0x70, 0x71, 0x6E, 0x6B, 0x6B, 0x69, 0x64, 0x68, 0x63, 
   0x5A, 0x67, 0x64, 0x59, 0x69, 0x67, 0x62, 0x56, 0x52, 0x52, 0x50, 0x4C, 0x4E, 0x53, 0x51, 0x51, 
   0x54, 0x51, 0x52, 0x30, 0x32, 0x32, 0x17, 0x1C, 0x26, 0x2F, 0x37, 0x42, 0x49, 0x4C, 0x59, 0x60, 
   0x68, 0x74, 0x73, 0x80, 0x8D, 0x80, 0x89, 0x99, 0x8A, 0x90, 0xA3, 0x8F, 0x98, 0xAD, 0x93, 0x9E, 
   0xB4, 0x79, 0x8E, 0xAF, 0x62, 0x83, 0xAC, 0x5D, 0x7F, 0xA8, 0x63, 0x81, 0xA3, 0x6D, 0x80, 0x9B, 
   0x5E, 0x64, 0x7F, 0x57, 0x5F, 0x7F, 0x57, 0x6A, 0x8E, 0x58, 0x6E, 0x98, 0x5B, 0x74, 0x9E, 0x66, 
   0x82, 0xAC, 0x6B, 0x86, 0xB2, 0x6F, 0x8A, 0xB9, 0x74, 0x8E, 0xBA, 0x85, 0x92, 0xB0, 0xA1, 0xA3, 
   0xB0, 0x8E, 0x8D, 0x95, 0x8E, 0x89, 0x90, 0x96, 0x90, 0x97, 0x97, 0x91, 0x99, 0x98, 0x92, 0x9B, 
   0x97, 0x92, 0x9B, 0x95, 0x93, 0x9B, 0x97, 0x97, 0x9D, 0x93, 0x95, 0x99, 0x95, 0x95, 0x98, 0x9A, 
   0x96, 0x9C, 0x98, 0x94, 0x9B, 0x97, 0x93, 0x9B, 0x95, 0x92, 0x9A, 0x97, 0x93, 0x9C, 0x9B, 0x96, 
   0x9F, 0x96, 0x95, 0x98, 0x94, 0x92, 0x97, 0x9E, 0x97, 0xA1, 0x9E, 0x96, 0xA7, 0x80, 0x80, 0x9C, 
   0x5D, 0x68, 0x89, 0x45, 0x52, 0x68, 0x35, 0x3B, 0x42, 0x27, 0x2D, 0x2F, 0x5B, 0x61, 0x68, 0x7E, 
   0x86, 0x97, 0x7F, 0x85, 0x99, 0x78, 0x7D, 0x97, 0x6C, 0x74, 0x89, 0x6D, 0x76, 0x87, 0x72, 0x78, 
   0x8B, 0x72, 0x78, 0x8C, 0x71, 0x76, 0x8D, 0x81, 0x86, 0x9D, 0x84, 0x87, 0x9D, 0x79, 0x78, 0x8A, 
   0x72, 0x6F, 0x79, 0x86, 0x86, 0x8D, 0x88, 0x89, 0x92, 0x78, 0x74, 0x7D, 0x4E, 0x48, 0x51, 0x27, 
   0x28, 0x23, 0x3B, 0x41, 0x3F, 0x43, 0x4C, 0x52, 0x3F, 0x4B, 0x4F, 0x40, 0x53, 0x5C, 0x69, 0x8D, 
   0xA7, 0x82, 0xAF, 0xD4, 0x80, 0xAC, 0xD4, 0x71, 0xA1, 0xCE, 0x63, 0x92, 0xC1, 0x78, 0xA2, 0xD0, 
   0x87, 0xAE, 0xDC, 0x8B, 0xB1, 0xE1, 0x7D, 0xA1, 0xCE, 0x72, 0x8F, 0xB5, 0x8F, 0x9F, 0xB9, 0xA3, 
   0xA7, 0xBF, 0x8C, 0x95, 0xB0, 0x7A, 0x8C, 0xA7, 0x77, 0x89, 0xA7, 0x79, 0x89, 0xA4, 0x81, 0x8F, 
   0xA5, 0x8E, 0x9B, 0xB4, 0x80, 0x91, 0xAB, 0x74, 0x85, 0x99, 0x6A, 0x75, 0x7E, 0x74, 0x76, 0x73, 
   0x83, 0x7F, 0x7A, 0x74, 0x6F, 0x6B, 0x6E, 0x6D, 0x69, 0x71, 0x72, 0x6E, 0x6B, 0x6C, 0x65, 0x7A, 
   0x7D, 0x75, 0x7F, 0x84, 0x7C, 0x7B, 0x7D, 0x78, 0x82, 0x81, 0x80, 0x89, 0x89, 0x8A, 0x82, 0x80, 
   0x80, 0x80, 0x79, 0x72, 0x7E, 0x73, 0x6C, 0x7D, 0x76, 0x70, 0x74, 0x72, 0x73, 0x6A, 0x6E, 0x6F, 
   0x6F, 0x72, 0x70, 0x79, 0x75, 0x72, 0x81, 0x7C, 0x7B, 0x9B, 0x94, 0x99, 0x69, 0x5D, 0x67, 0x1C, 
   0x15, 0x1A, 0x04, 0x06, 0x04, 0x10, 0x1C, 0x1B, 0x24, 0x30, 0x33, 0x45, 0x52, 0x57, 0x66, 0x74, 
   0x79, 0x61, 0x6E, 0x72, 0x5A, 0x67, 0x6B, 0x66, 0x75, 0x7B, 0x74, 0x86, 0x8F, 0x81, 0x90, 0x9A, 
   0x8D, 0x92, 0x9B, 0x86, 0x89, 0x90, 0xAA, 0xAF, 0xB9, 0xA4, 0xA7, 0xB4, 0x97, 0x9B, 0xA9, 0x94, 
   0x99, 0xA5, 0x95, 0x99, 0xA4, 0x94, 0x98, 0xA1, 0x97, 0x98, 0x9E, 0x85, 0x87, 0x89, 0x7A, 0x82, 
   0x87, 0x7E, 0x86, 0x91, 0x67, 0x69, 0x75, 0x53, 0x59, 0x60, 0x4E, 0x59, 0x55, 0x75, 0x7D, 0x73, 
   0x8A, 0x88, 0x7E, 0x92, 0x88, 0x7E, 0x8E, 0x84, 0x7B, 0x7F, 0x73, 0x72, 0x6D, 0x63, 0x63, 0x65, 
   0x5F, 0x59, 0x7B, 0x7C, 0x77, 0x8F, 0x94, 0x93, 0x9C, 0x9E, 0x9D, 0x9C, 0x97, 0x96, 0x92, 0x8B, 
   0x8C, 0x8A, 0x89, 0x8D, 0x9A, 0x9C, 0x9E, 0xB8, 0xB3, 0xB4, 0xB0, 0xA2, 0xA6, 0x86, 0x77, 0x78, 
   0x63, 0x5B, 0x58, 0x61, 0x5A, 0x53, 0x7D, 0x72, 0x6D, 0x82, 0x72, 0x70, 0x68, 0x56, 0x58, 0x4B, 
   0x44, 0x45, 0x51, 0x55, 0x53, 0x69, 0x67, 0x69, 0x83, 0x79, 0x7A, 0x8B, 0x7D, 0x80, 0x87, 0x7F, 
   0x83, 0x7A, 0x73, 0x79, 0x7D, 0x72, 0x76, 0x7C, 0x6E, 0x71, 0x76, 0x6B, 0x72, 0x70, 0x67, 0x73, 
   0x6F, 0x68, 0x73, 0x72, 0x6B, 0x7A, 0x5F, 0x55, 0x66, 0x2E, 0x25, 0x30, 0x1F, 0x1D, 0x21, 0x44, 
   0x49, 0x46, 0x5C, 0x5A, 0x5A, 0x5C, 0x53, 0x5A, 0x5D, 0x58, 0x62, 0x60, 0x5E, 0x63, 0x68, 0x66, 
   0x6F, 0x6A, 0x6A, 0x76, 0x6C, 0x6A, 0x78, 0x73, 0x6F, 0x7A, 0x72, 0x6E, 0x75, 0x76, 0x71, 0x75, 
   0x78, 0x73, 0x76, 0x72, 0x70, 0x78, 0x6E, 0x6C, 0x6F, 0x66, 0x67, 0x6B, 0x5B, 0x5F, 0x67, 0x60, 
   0x69, 0x76, 0x7B, 0x84, 0x94, 0x81, 0x85, 0x96, 0x90, 0x98, 0xA9, 0x98, 0xA3, 0xB2, 0xA6, 0xB1, 
   0xBD, 0xBD, 0xC0, 0xC6, 0xB4, 0xB4, 0xB6, 0x84, 0x86, 0x8B, 0x48, 0x4F, 0x57, 0x42, 0x49, 0x49, 
   0x3F, 0x3E, 0x36, 0x44, 0x41, 0x39, 0x33, 0x32, 0x34, 0x39, 0x3C, 0x45, 0x5D, 0x60, 0x69, 0x70, 
   0x75, 0x78, 0x74, 0x7A, 0x7A, 0x72, 0x75, 0x79, 0x69, 0x6F, 0x75, 0x70, 0x73, 0x7A, 0x77, 0x7C, 
   0x83, 0x6D, 0x76, 0x7E, 0x60, 0x68, 0x72, 0x6C, 0x6F, 0x79, 0x7F, 0x7F, 0x86, 0x89, 0x8C, 0x8D, 
   0xA5, 0xA4, 0xA6, 0x9F, 0x9E, 0x9E, 0x97, 0x99, 0x9A, 0x8B, 0x90, 0x92, 0x7A, 0x80, 0x85, 0x6D, 
   0x74, 0x77, 0x60, 0x63, 0x67, 0x3B, 0x3C, 0x40, 0x1B, 0x1B, 0x1E, 0x28, 0x29, 0x29, 0x3A, 0x3B, 
   0x3D, 0x3A, 0x3A, 0x41, 0x3F, 0x41, 0x48, 0x3C, 0x3E, 0x48, 0x30, 0x32, 0x3B, 0x28, 0x2C, 0x33, 
   0x4C, 0x53, 0x59, 0x5E, 0x66, 0x69, 0x5E, 0x62, 0x65, 0x6D, 0x6B, 0x6E, 0x72, 0x6F, 0x6F, 0x65, 
   0x66, 0x65, 0x64, 0x67, 0x67, 0x67, 0x67, 0x69, 0x5E, 0x5E, 0x5F, 0x52, 0x50, 0x50, 0x48, 0x42, 
   0x43, 0x42, 0x3E, 0x3B, 0x3E, 0x3F, 0x3B, 0x3E, 0x3F, 0x3E, 0x44, 0x45, 0x46, 0x47, 0x48, 0x4A, 
   0x4A, 0x49, 0x4B, 0x33, 0x35, 0x36, 0x1C, 0x21, 0x27, 0x2F, 0x35, 0x3E, 0x44, 0x48, 0x53, 0x56, 
   0x5C, 0x6A, 0x63, 0x6F, 0x7D, 0x75, 0x7F, 0x8E, 0x85, 0x8D, 0x9C, 0x9F, 0xA2, 0xB2, 0x98, 0xA1, 
   0xB4, 0x76, 0x8F, 0xAF, 0x62, 0x89, 0xB0, 0x5A, 0x83, 0xAA, 0x5F, 0x7F, 0xA0, 0x67, 0x7B, 0x93, 
   0x52, 0x5B, 0x6C, 0x52, 0x5B, 0x74, 0x57, 0x64, 0x8C, 0x5E, 0x6C, 0x97, 0x5B, 0x6C, 0x95, 0x62, 
   0x78, 0x9D, 0x65, 0x7C, 0xA2, 0x6A, 0x83, 0xAC, 0x6E, 0x88, 0xB1, 0x77, 0x88, 0xA9, 0x99, 0x9F, 
   0xAD, 0x97, 0x94, 0x99, 0x91, 0x8C, 0x8F, 0x97, 0x92, 0x95, 0x97, 0x92, 0x96, 0x98, 0x93, 0x99, 
   0x98, 0x93, 0x9B, 0x97, 0x92, 0x9A, 0x97, 0x95, 0x9B, 0x96, 0x95, 0x9A, 0x96, 0x94, 0x98, 0x9B, 
   0x96, 0x9B, 0x9A, 0x95, 0x9B, 0x96, 0x93, 0x9A, 0x94, 0x93, 0x9B, 0x94, 0x92, 0x9B, 0x97, 0x92, 
   0x9C, 0x98, 0x94, 0x99, 0x97, 0x91, 0x99, 0x9C, 0x92, 0x9D, 0x91, 0x88, 0x9D, 0x6B, 0x6E, 0x8F, 
   0x58, 0x64, 0x85, 0x3B, 0x48, 0x5B, 0x2A, 0x31, 0x36, 0x24, 0x2D, 0x2D, 0x5A, 0x61, 0x68, 0x74, 
   0x7C, 0x8B, 0x7F, 0x88, 0x98, 0x81, 0x86, 0xA1, 0x70, 0x76, 0x8F, 0x6F, 0x78, 0x8A, 0x72, 0x79, 
   0x8B, 0x73, 0x79, 0x8B, 0x73, 0x7A, 0x8D, 0x7E, 0x84, 0x98, 0x80, 0x84, 0x9A, 0x7A, 0x7E, 0x92, 
   0x6F, 0x72, 0x7F, 0x9B, 0x9F, 0xA9, 0xA3, 0xA2, 0xAD, 0x8C, 0x85, 0x90, 0x47, 0x45, 0x4D, 0x35, 
   0x38, 0x38, 0x47, 0x4F, 0x4C, 0x4A, 0x50, 0x55, 0x4F, 0x58, 0x5B, 0x50, 0x5E, 0x69, 0x61, 0x82, 
   0xA0, 0x72, 0x9B, 0xC5, 0x76, 0x9C, 0xCB, 0x75, 0xA5, 0xD6, 0x7B, 0xA8, 0xD8, 0x8F, 0xB5, 0xE2, 
   0x90, 0xB4, 0xE1, 0x87, 0xAE, 0xDA, 0x7B, 0x9B, 0xC2, 0x8E, 0xA1, 0xBD, 0xD2, 0xD8, 0xE1, 0xCF, 
   0xC6, 0xD3, 0x8F, 0x8F, 0xA6, 0x79, 0x87, 0xA4, 0x7B, 0x8D, 0xAE, 0x7D, 0x92, 0xAF, 0x83, 0x94, 
   0xAC, 0x84, 0x94, 0xAE, 0x7F, 0x90, 0xA7, 0x6F, 0x7E, 0x8E, 0x65, 0x6D, 0x70, 0x6D, 0x6D, 0x66, 
   0x79, 0x76, 0x70, 0x7E, 0x79, 0x75, 0x7D, 0x77, 0x75, 0x76, 0x73, 0x71, 0x78, 0x79, 0x75, 0x7B, 
   0x7E, 0x76, 0x7E, 0x7F, 0x78, 0x7C, 0x7A, 0x75, 0x77, 0x76, 0x71, 0x79, 0x7B, 0x75, 0x77, 0x76, 
   0x70, 0x7B, 0x74, 0x6A, 0x7D, 0x74, 0x6C, 0x7F, 0x7A, 0x72, 0x7B, 0x78, 0x74, 0x6A, 0x6C, 0x6C, 
   0x6A, 0x6E, 0x6B, 0x68, 0x6A, 0x68, 0x6B, 0x66, 0x66, 0x6B, 0x61, 0x64, 0x51, 0x49, 0x4D, 0x33, 
   0x2F, 0x31, 0x0D, 0x10, 0x0D, 0x0A, 0x12, 0x0D, 0x0B, 0x13, 0x12, 0x0F, 0x1C, 0x1E, 0x22, 0x32, 
   0x34, 0x46, 0x51, 0x51, 0x67, 0x6F, 0x6C, 0x73, 0x75, 0x78, 0x73, 0x7E, 0x85, 0x74, 0x83, 0x8B, 
   0x80, 0x88, 0x8F, 0x82, 0x8B, 0x91, 0x9F, 0xA7, 0xB2, 0xA0, 0xA1, 0xB0, 0x8F, 0x94, 0xA0, 0x90, 
   0x98, 0x9E, 0x94, 0x9A, 0xA0, 0x88, 0x8F, 0x96, 0x7F, 0x85, 0x8C, 0x80, 0x86, 0x8D, 0x77, 0x80, 
   0x8A, 0x66, 0x6E, 0x7B, 0x4E, 0x54, 0x5E, 0x4F, 0x55, 0x57, 0x6E, 0x73, 0x6C, 0x85, 0x85, 0x7B, 
   0x88, 0x84, 0x7B, 0x94, 0x8A, 0x83, 0x90, 0x80, 0x7B, 0x7B, 0x6B, 0x69, 0x66, 0x5B, 0x58, 0x74, 
   0x6E, 0x64, 0x84, 0x7D, 0x76, 0x88, 0x82, 0x7E, 0x89, 0x87, 0x82, 0x8B, 0x86, 0x80, 0x8C, 0x86, 
   0x83, 0x8D, 0x8A, 0x8B, 0x90, 0x8B, 0x8D, 0x89, 0x7B, 0x7D, 0x43, 0x2F, 0x33, 0x15, 0x0E, 0x10, 
   0x28, 0x29, 0x23, 0x4D, 0x4C, 0x42, 0x78, 0x71, 0x6C, 0x72, 0x65, 0x67, 0x4C, 0x41, 0x45, 0x53, 
   0x54, 0x56, 0x77, 0x79, 0x79, 0x85, 0x7E, 0x82, 0x80, 0x75, 0x78, 0x84, 0x78, 0x79, 0x7D, 0x72, 
   0x77, 0x78, 0x6F, 0x74, 0x7B, 0x76, 0x79, 0x81, 0x7A, 0x7F, 0x7F, 0x77, 0x7F, 0x74, 0x6D, 0x74, 
   0x6F, 0x6B, 0x6E, 0x81, 0x80, 0x8A, 0x7F, 0x7B, 0x8A, 0x67, 0x5C, 0x6C, 0x33, 0x2A, 0x36, 0x33, 
   0x35, 0x38, 0x56, 0x55, 0x59, 0x60, 0x55, 0x5F, 0x60, 0x58, 0x63, 0x61, 0x60, 0x65, 0x6B, 0x6C, 
   0x71, 0x66, 0x66, 0x70, 0x6B, 0x68, 0x74, 0x76, 0x6E, 0x79, 0x73, 0x6D, 0x74, 0x70, 0x6C, 0x71, 
   0x70, 0x6B, 0x71, 0x6E, 0x68, 0x70, 0x7A, 0x7C, 0x7B, 0x69, 0x6A, 0x70, 0x6B, 0x6F, 0x7D, 0x74, 
   0x85, 0x98, 0x84, 0x9B, 0xB6, 0x8E, 0x9D, 0xB4, 0x97, 0xA1, 0xAD, 0x99, 0xA0, 0xA8, 0xA6, 0xAA, 
   0xB1, 0xB3, 0xB3, 0xB6, 0xB1, 0xB2, 0xAF, 0x8F, 0x93, 0x90, 0x47, 0x4E, 0x54, 0x31, 0x38, 0x3C, 
   0x12, 0x11, 0x10, 0x18, 0x16, 0x14, 0x20, 0x21, 0x23, 0x39, 0x3B, 0x44, 0x65, 0x65, 0x70, 0x89, 
   0x8C, 0x8F, 0x96, 0x99, 0x97, 0x94, 0x94, 0x93, 0x7B, 0x80, 0x82, 0x7A, 0x7D, 0x81, 0x80, 0x86, 
   0x8C, 0x7B, 0x84, 0x8B, 0x78, 0x7D, 0x86, 0x70, 0x6C, 0x7A, 0x6A, 0x65, 0x6F, 0x88, 0x8C, 0x8D, 
   0x9E, 0xA0, 0x9F, 0x9F, 0x9E, 0x9B, 0x9B, 0x9A, 0x98, 0x83, 0x86, 0x87, 0x6F, 0x76, 0x78, 0x64, 
   0x6A, 0x6C, 0x55, 0x57, 0x5A, 0x43, 0x46, 0x4C, 0x33, 0x35, 0x35, 0x17, 0x1B, 0x17, 0x26, 0x2B, 
   0x27, 0x2D, 0x2E, 0x33, 0x34, 0x31, 0x37, 0x30, 0x2B, 0x32, 0x2A, 0x28, 0x2B, 0x49, 0x4A, 0x4D, 
   0x75, 0x7B, 0x7E, 0x5D, 0x63, 0x69, 0x54, 0x58, 0x5D, 0x57, 0x5A, 0x5B, 0x53, 0x54, 0x55, 0x48, 
   0x49, 0x49, 0x45, 0x46, 0x45, 0x3C, 0x3A, 0x3E, 0x30, 0x2E, 0x33, 0x29, 0x26, 0x2C, 0x29, 0x23, 
   0x2D, 0x2B, 0x2A, 0x30, 0x3D, 0x42, 0x46, 0x33, 0x37, 0x3A, 0x29, 0x2B, 0x2B, 0x2F, 0x2F, 0x2E, 
   0x37, 0x35, 0x37, 0x2A, 0x2A, 0x30, 0x1D, 0x22, 0x28, 0x2E, 0x37, 0x3C, 0x3F, 0x46, 0x4D, 0x4D, 
   0x54, 0x63, 0x57, 0x63, 0x75, 0x68, 0x74, 0x83, 0x77, 0x85, 0x8E, 0x92, 0x99, 0xA2, 0x8C, 0x96, 
   0xA6, 0x6F, 0x89, 0xA7, 0x61, 0x86, 0xAD, 0x5A, 0x82, 0xA9, 0x5D, 0x7F, 0x9F, 0x5E, 0x72, 0x8A, 
   0x47, 0x4E, 0x5D, 0x49, 0x53, 0x68, 0x4F, 0x5E, 0x86, 0x58, 0x69, 0x92, 0x60, 0x70, 0x97, 0x65, 
   0x74, 0x9B, 0x67, 0x76, 0x9A, 0x6B, 0x7C, 0x9F, 0x67, 0x78, 0x9E, 0x73, 0x82, 0xA4, 0x8C, 0x91, 
   0xA4, 0x98, 0x91, 0x99, 0x94, 0x8E, 0x94, 0x94, 0x93, 0x96, 0x96, 0x95, 0x97, 0x95, 0x93, 0x99, 
   0x94, 0x91, 0x98, 0x95, 0x92, 0x99, 0x97, 0x94, 0x99, 0x97, 0x94, 0x98, 0x97, 0x94, 0x97, 0x9C, 
   0x97, 0x9B, 0x9B, 0x96, 0x9A, 0x95, 0x92, 0x99, 0x94, 0x93, 0x9B, 0x95, 0x94, 0x9E, 0x9D, 0x98, 
   0xA3, 0x99, 0x99, 0x9C, 0x97, 0x91, 0x9A, 0xA2, 0x95, 0xA0, 0x8E, 0x83, 0x9A, 0x64, 0x66, 0x88, 
   0x58, 0x60, 0x7D, 0x2B, 0x31, 0x42, 0x14, 0x1E, 0x21, 0x31, 0x3C, 0x3E, 0x79, 0x7F, 0x8E, 0x76, 
   0x7D, 0x91, 0x78, 0x86, 0x96, 0x86, 0x8E, 0xA9, 0x72, 0x78, 0x93, 0x70, 0x79, 0x91, 0x72, 0x7A, 
   0x8E, 0x6F, 0x77, 0x87, 0x6E, 0x76, 0x86, 0x72, 0x77, 0x88, 0x7A, 0x7C, 0x8F, 0x7B, 0x7F, 0x95, 
   0x77, 0x7F, 0x8E, 0xAB, 0xB2, 0xBC, 0xB8, 0xB5, 0xC0, 0x82, 0x7B, 0x84, 0x46, 0x48, 0x51, 0x3E, 
   0x47, 0x4E, 0x42, 0x4B, 0x4F, 0x45, 0x48, 0x54, 0x51, 0x56, 0x5D, 0x52, 0x5E, 0x6B, 0x5B, 0x7E, 
   0x9C, 0x7F, 0xAA, 0xD0, 0x93, 0xBE, 0xE8, 0x88, 0xB5, 0xE5, 0x79, 0xA2, 0xD2, 0x84, 0xA7, 0xD4, 
   0x87, 0xA7, 0xD2, 0x84, 0xA5, 0xCE, 0x88, 0xA3, 0xC4, 0xAE, 0xBE, 0xD3, 0xC7, 0xCD, 0xD5, 0xAF, 
   0xA5, 0xB5, 0x7E, 0x7F, 0x98, 0x77, 0x87, 0xA2, 0x7C, 0x90, 0xAD, 0x82, 0x98, 0xB3, 0x86, 0x97, 
   0xAE, 0x80, 0x8B, 0xA7, 0x71, 0x7B, 0x91, 0x53, 0x5C, 0x67, 0x5D, 0x62, 0x62, 0x72, 0x72, 0x6A, 
   0x7A, 0x75, 0x6F, 0x7A, 0x75, 0x6F, 0x7C, 0x77, 0x72, 0x77, 0x77, 0x74, 0x7B, 0x80, 0x7D, 0x9A, 
   0x9E, 0x9A, 0x91, 0x8E, 0x8B, 0x87, 0x80, 0x7E, 0x78, 0x74, 0x75, 0x77, 0x78, 0x78, 0x7B, 0x7B, 
   0x7B, 0x7C, 0x78, 0x74, 0x79, 0x73, 0x71, 0x71, 0x6D, 0x6A, 0x71, 0x6A, 0x68, 0x68, 0x62, 0x66, 
   0x64, 0x62, 0x60, 0x61, 0x60, 0x5C, 0x6B, 0x61, 0x64, 0x59, 0x4B, 0x51, 0x3D, 0x38, 0x38, 0x2F, 
   0x2E, 0x2A, 0x13, 0x16, 0x0F, 0x09, 0x0B, 0x06, 0x0F, 0x10, 0x0D, 0x2F, 0x36, 0x2E, 0x59, 0x5E, 
   0x54, 0x86, 0x84, 0x78, 0x9B, 0x99, 0x8F, 0x93, 0x8D, 0x8E, 0x7B, 0x7D, 0x82, 0x6E, 0x76, 0x7D, 
   0x74, 0x7D, 0x83, 0x7B, 0x8A, 0x8F, 0x89, 0x97, 0xA3, 0x94, 0x96, 0xA6, 0x90, 0x92, 0x9C, 0x8D, 
   0x95, 0x96, 0x87, 0x8F, 0x8F, 0x81, 0x8B, 0x8F, 0x7A, 0x81, 0x8B, 0x6E, 0x77, 0x86, 0x59, 0x66, 
   0x78, 0x47, 0x53, 0x61, 0x50, 0x59, 0x5D, 0x6D, 0x71, 0x6B, 0x84, 0x81, 0x78, 0x8B, 0x84, 0x7B, 
   0x94, 0x8A, 0x83, 0x90, 0x84, 0x7F, 0x7C, 0x6C, 0x68, 0x6C, 0x60, 0x5D, 0x72, 0x6E, 0x67, 0x9A, 
   0x92, 0x85, 0x96, 0x87, 0x7F, 0x89, 0x7F, 0x78, 0x88, 0x86, 0x83, 0x8D, 0x8D, 0x89, 0x8A, 0x8D, 
   0x8A, 0x8F, 0x90, 0x91, 0x94, 0x8B, 0x8F, 0x87, 0x73, 0x7A, 0x4A, 0x33, 0x3F, 0x10, 0x08, 0x0E, 
   0x1D, 0x22, 0x1D, 0x3B, 0x40, 0x37, 0x58, 0x55, 0x52, 0x52, 0x47, 0x4C, 0x5E, 0x52, 0x57, 0x7F, 
   0x7D, 0x7B, 0x86, 0x7E, 0x7F, 0x7F, 0x79, 0x7C, 0x7B, 0x74, 0x75, 0x7C, 0x73, 0x75, 0x7A, 0x70, 
   0x75, 0x71, 0x6C, 0x70, 0x72, 0x6E, 0x71, 0x7A, 0x76, 0x7D, 0x78, 0x72, 0x7B, 0x6C, 0x68, 0x6E, 
   0x71, 0x72, 0x71, 0xA1, 0xA7, 0xAB, 0x9F, 0x9F, 0xA9, 0x9A, 0x90, 0x9F, 0x77, 0x6A, 0x7A, 0x32, 
   0x2C, 0x34, 0x4E, 0x4C, 0x50, 0x60, 0x5B, 0x5E, 0x60, 0x5D, 0x61, 0x63, 0x62, 0x65, 0x69, 0x68, 
   0x6C, 0x64, 0x63, 0x6A, 0x69, 0x66, 0x6E, 0x76, 0x6F, 0x78, 0x75, 0x6F, 0x76, 0x6A, 0x66, 0x6F, 
   0x66, 0x5F, 0x6B, 0x5D, 0x5A, 0x61, 0x69, 0x6D, 0x6E, 0x5F, 0x66, 0x70, 0x6D, 0x79, 0x91, 0x72, 
   0x8A, 0xA7, 0x73, 0x8F, 0xAB, 0x84, 0x95, 0xAC, 0x99, 0x9E, 0xA6, 0x9B, 0x9C, 0x9F, 0x9F, 0x9D, 
   0x9F, 0x9C, 0x9B, 0x9C, 0xBA, 0xB8, 0xB7, 0x97, 0x98, 0x95, 0x44, 0x4E, 0x4F, 0x3E, 0x48, 0x4C, 
   0x19, 0x18, 0x1A, 0x1D, 0x15, 0x17, 0x31, 0x30, 0x30, 0x40, 0x44, 0x47, 0x61, 0x60, 0x63, 0x7C, 
   0x79, 0x78, 0x8A, 0x88, 0x83, 0x8E, 0x8C, 0x87, 0x9D, 0xA1, 0x9C, 0x9A, 0xA0, 0xA2, 0x92, 0x93, 
   0x97, 0x8B, 0x8D, 0x96, 0x86, 0x8A, 0x94, 0x74, 0x74, 0x80, 0x6A, 0x6A, 0x73, 0x80, 0x87, 0x88, 
   0x9C, 0x9D, 0x9A, 0x98, 0x98, 0x99, 0x83, 0x85, 0x85, 0x71, 0x74, 0x76, 0x65, 0x68, 0x6F, 0x5A, 
   0x5F, 0x66, 0x4E, 0x54, 0x5A, 0x4E, 0x53, 0x5D, 0x4A, 0x4E, 0x51, 0x27, 0x2B, 0x29, 0x20, 0x21, 
   0x1B, 0x21, 0x21, 0x1E, 0x28, 0x28, 0x25, 0x29, 0x25, 0x22, 0x32, 0x2B, 0x28, 0x59, 0x57, 0x56, 
   0x5B, 0x5E, 0x5E, 0x48, 0x4A, 0x4D, 0x34, 0x38, 0x3C, 0x2F, 0x32, 0x37, 0x30, 0x32, 0x33, 0x2E, 
   0x32, 0x35, 0x2D, 0x2D, 0x37, 0x36, 0x30, 0x3B, 0x3F, 0x38, 0x42, 0x50, 0x4E, 0x56, 0x5F, 0x63, 
   0x6E, 0x6A, 0x71, 0x7E, 0x86, 0x8D, 0x98, 0x91, 0x95, 0x9E, 0x79, 0x7B, 0x83, 0x60, 0x5D, 0x66, 
   0x4A, 0x41, 0x4C, 0x1D, 0x18, 0x25, 0x0E, 0x11, 0x21, 0x22, 0x2E, 0x3A, 0x34, 0x40, 0x4C, 0x47, 
   0x4C, 0x5C, 0x53, 0x57, 0x68, 0x5B, 0x65, 0x75, 0x6C, 0x7C, 0x84, 0x84, 0x90, 0x98, 0x83, 0x90, 
   0xA0, 0x6D, 0x80, 0xA1, 0x5E, 0x7D, 0xA2, 0x55, 0x7D, 0xA1, 0x5C, 0x7E, 0x9D, 0x60, 0x71, 0x84, 
   0x43, 0x48, 0x53, 0x47, 0x50, 0x66, 0x50, 0x5E, 0x87, 0x59, 0x69, 0x92, 0x62, 0x75, 0x9C, 0x65, 
   0x79, 0x9D, 0x6B, 0x7B, 0x9A, 0x6C, 0x7C, 0x9C, 0x64, 0x70, 0x95, 0x65, 0x78, 0x95, 0x84, 0x8D, 
   0x9C, 0x95, 0x91, 0x98, 0x97, 0x94, 0x9A, 0x98, 0x96, 0x98, 0x94, 0x96, 0x95, 0x92, 0x93, 0x96, 
   0x95, 0x93, 0x97, 0x98, 0x96, 0x98, 0x99, 0x96, 0x99, 0x9A, 0x94, 0x9A, 0x99, 0x94, 0x9B, 0x97, 
   0x93, 0x99, 0x99, 0x96, 0x9E, 0x96, 0x93, 0x9C, 0x96, 0x94, 0x9C, 0x9A, 0x97, 0x9E, 0x9B, 0x96, 
   0x9E, 0x9B, 0x99, 0x9E, 0x9B, 0x93, 0x98, 0x9F, 0x94, 0x9F, 0x80, 0x7E, 0x96, 0x57, 0x5E, 0x81, 
   0x47, 0x49, 0x61, 0x17, 0x18, 0x1E, 0x0C, 0x14, 0x15, 0x4B, 0x58, 0x5A, 0x84, 0x8F, 0x9E, 0x7C, 
   0x84, 0x99, 0x76, 0x81, 0x95, 0x80, 0x88, 0xA1, 0x72, 0x78, 0x92, 0x6E, 0x76, 0x8B, 0x73, 0x7C, 
   0x8C, 0x6E, 0x77, 0x8D, 0x74, 0x77, 0x91, 0x73, 0x72, 0x87, 0x73, 0x74, 0x84, 0x75, 0x7B, 0x8B, 
   0x7E, 0x86, 0x93, 0xB2, 0xB2, 0xBC, 0xA4, 0xA0, 0xA7, 0x54, 0x58, 0x5D, 0x54, 0x5C, 0x63, 0x5E, 
   0x63, 0x6C, 0x59, 0x5C, 0x64, 0x54, 0x58, 0x61, 0x50, 0x5A, 0x61, 0x50, 0x61, 0x6F, 0x60, 0x81, 
   0x9D, 0x8D, 0xBA, 0xDC, 0x9D, 0xCD, 0xEE, 0x98, 0xC4, 0xEA, 0x8D, 0xB2, 0xDC, 0x89, 0xA9, 0xD2, 
   0x89, 0xAE, 0xD5, 0x95, 0xB5, 0xDE, 0x8B, 0x9D, 0xC1, 0x87, 0x97, 0xAC, 0x89, 0x92, 0x9D, 0x86, 
   0x84, 0x93, 0x76, 0x7A, 0x8D, 0x77, 0x8B, 0x9F, 0x7C, 0x91, 0xA9, 0x85, 0x95, 0xAF, 0x85, 0x94, 
   0xA9, 0x7E, 0x8D, 0xA5, 0x59, 0x5E, 0x75, 0x3C, 0x40, 0x48, 0x56, 0x5D, 0x5A, 0x79, 0x7F, 0x77, 
   0x80, 0x7D, 0x76, 0x7F, 0x7B, 0x74, 0x7D, 0x7D, 0x74, 0x80, 0x7F, 0x79, 0x84, 0x87, 0x81, 0x97, 
   0x9B, 0x97, 0x95, 0x96, 0x96, 0x8D, 0x8C, 0x89, 0x91, 0x91, 0x93, 0x9A, 0x99, 0x9C, 0x8F, 0x8A, 
   0x8B, 0x80, 0x7B, 0x7E, 0x6F, 0x6D, 0x71, 0x66, 0x66, 0x66, 0x60, 0x5C, 0x5C, 0x60, 0x5C, 0x5E, 
   0x67, 0x5F, 0x5B, 0x5C, 0x56, 0x52, 0x51, 0x4C, 0x4B, 0x39, 0x33, 0x36, 0x25, 0x23, 0x25, 0x15, 
   0x16, 0x0F, 0x20, 0x21, 0x1C, 0x48, 0x4A, 0x40, 0x7E, 0x80, 0x77, 0xA1, 0x9C, 0x94, 0xA2, 0x98, 
   0x8C, 0xAE, 0xA5, 0x99, 0xAB, 0x9F, 0x9A, 0xA8, 0x9E, 0x9C, 0x99, 0x90, 0x94, 0x78, 0x74, 0x7D, 
   0x6F, 0x73, 0x7C, 0x75, 0x84, 0x8C, 0x86, 0x93, 0x9B, 0x96, 0x99, 0xA0, 0x91, 0x91, 0x93, 0x84, 
   0x8B, 0x8B, 0x84, 0x8E, 0x95, 0x7E, 0x89, 0x99, 0x71, 0x75, 0x89, 0x56, 0x5C, 0x6D, 0x43, 0x4D, 
   0x5D, 0x50, 0x5B, 0x65, 0x73, 0x7D, 0x7A, 0x91, 0x93, 0x8A, 0x8A, 0x82, 0x7C, 0x8E, 0x81, 0x7C, 
   0x8B, 0x7D, 0x78, 0x79, 0x6F, 0x6A, 0x6A, 0x61, 0x5D, 0x79, 0x71, 0x70, 0xA3, 0x9E, 0x9B, 0xAB, 
   0xA1, 0x9C, 0x92, 0x83, 0x7E, 0x8A, 0x7D, 0x77, 0x8C, 0x87, 0x7D, 0x8E, 0x89, 0x88, 0x87, 0x86, 
   0x84, 0x8A, 0x8A, 0x8A, 0x8D, 0x87, 0x8C, 0x86, 0x77, 0x7C, 0x60, 0x4F, 0x5C, 0x17, 0x0C, 0x11, 
   0x15, 0x1A, 0x14, 0x24, 0x2C, 0x22, 0x36, 0x39, 0x34, 0x50, 0x51, 0x53, 0x77, 0x72, 0x76, 0x8B, 
   0x7B, 0x7D, 0x7D, 0x73, 0x72, 0x76, 0x70, 0x72, 0x85, 0x7E, 0x82, 0x84, 0x7A, 0x7D, 0x78, 0x6A, 
   0x6F, 0x71, 0x66, 0x6D, 0x6F, 0x66, 0x6F, 0x71, 0x6B, 0x75, 0x72, 0x6C, 0x77, 0x65, 0x62, 0x66, 
   0x75, 0x78, 0x78, 0x9D, 0x9C, 0xA3, 0x89, 0x86, 0x8D, 0x85, 0x82, 0x89, 0x8E, 0x8B, 0x96, 0x53, 
   0x4C, 0x5A, 0x48, 0x43, 0x4A, 0x64, 0x63, 0x64, 0x61, 0x5D, 0x61, 0x60, 0x5D, 0x63, 0x60, 0x5E, 
   0x63, 0x61, 0x61, 0x65, 0x6C, 0x69, 0x6E, 0x76, 0x6D, 0x76, 0x6B, 0x61, 0x6B, 0x5A, 0x50, 0x5A, 
   0x54, 0x4A, 0x52, 0x49, 0x49, 0x4F, 0x5D, 0x62, 0x6A, 0x5F, 0x6C, 0x7E, 0x6B, 0x80, 0x9C, 0x6B, 
   0x88, 0xA8, 0x7B, 0x95, 0xB5, 0x86, 0x93, 0xA8, 0x96, 0x95, 0x9A, 0x9A, 0x95, 0x98, 0x9A, 0x96, 
   0x96, 0x94, 0x92, 0x92, 0xB0, 0xAF, 0xAF, 0x89, 0x8A, 0x89, 0x3B, 0x45, 0x4C, 0x3C, 0x4B, 0x53, 
   0x22, 0x25, 0x29, 0x1E, 0x1B, 0x1D, 0x34, 0x36, 0x39, 0x44, 0x4A, 0x4E, 0x5B, 0x5B, 0x61, 0x67, 
   0x65, 0x67, 0x74, 0x73, 0x71, 0x74, 0x73, 0x71, 0x86, 0x88, 0x87, 0xAF, 0xAD, 0xB0, 0x9D, 0x9E, 
   0xA1, 0x86, 0x8B, 0x91, 0x93, 0x9B, 0x9E, 0x94, 0x9D, 0xA0, 0x91, 0x98, 0x9D, 0x9A, 0x9F, 0xA4, 
   0x92, 0x95, 0x96, 0x7B, 0x7C, 0x83, 0x6C, 0x6F, 0x76, 0x5F, 0x65, 0x6A, 0x53, 0x59, 0x5F, 0x43, 
   0x48, 0x52, 0x41, 0x45, 0x51, 0x4A, 0x4E, 0x55, 0x3D, 0x40, 0x41, 0x22, 0x25, 0x23, 0x2A, 0x29, 
   0x24, 0x2B, 0x2B, 0x27, 0x28, 0x29, 0x27, 0x2A, 0x2C, 0x27, 0x2F, 0x32, 0x2F, 0x39, 0x3B, 0x3A, 
   0x35, 0x39, 0x3A, 0x38, 0x38, 0x3C, 0x44, 0x45, 0x4C, 0x54, 0x55, 0x5D, 0x67, 0x65, 0x6B, 0x85, 
   0x82, 0x8B, 0x94, 0x90, 0x9D, 0x99, 0x95, 0x9F, 0xA1, 0x9D, 0xA2, 0xA2, 0x9F, 0xA1, 0x91, 0x92, 
   0x95, 0x74, 0x7F, 0x85, 0x7F, 0x86, 0x8D, 0x86, 0x86, 0x8D, 0x90, 0x8E, 0x93, 0xA0, 0x9C, 0xA0, 
   0x9E, 0x98, 0x9C, 0x7E, 0x7F, 0x7F, 0x51, 0x4E, 0x55, 0x27, 0x2C, 0x32, 0x2C, 0x33, 0x3C, 0x3E, 
   0x42, 0x4C, 0x4A, 0x4E, 0x58, 0x52, 0x5A, 0x68, 0x62, 0x70, 0x7B, 0x7E, 0x86, 0x94, 0x77, 0x83, 
   0x98, 0x5E, 0x70, 0x94, 0x58, 0x73, 0x9A, 0x55, 0x76, 0x9A, 0x59, 0x76, 0x96, 0x5B, 0x6C, 0x7F, 
   0x3D, 0x45, 0x53, 0x49, 0x50, 0x65, 0x58, 0x62, 0x80, 0x5D, 0x6B, 0x89, 0x68, 0x78, 0x9E, 0x6D, 
   0x7D, 0xA0, 0x73, 0x81, 0x9F, 0x71, 0x7F, 0x9D, 0x6E, 0x78, 0x96, 0x70, 0x7E, 0x96, 0x8A, 0x90, 
   0x9E, 0x94, 0x91, 0x99, 0x93, 0x93, 0x97, 0x94, 0x92, 0x95, 0x92, 0x91, 0x95, 0x93, 0x92, 0x98, 
   0x9B, 0x96, 0x9C, 0x9B, 0x97, 0x9B, 0x99, 0x96, 0x9B, 0x9D, 0x96, 0x9E, 0x9E, 0x99, 0xA0, 0x9B, 
   0x98, 0x9E, 0x99, 0x95, 0x9E, 0x95, 0x92, 0x9C, 0x9A, 0x96, 0x9F, 0x9C, 0x98, 0x9F, 0x98, 0x93, 
   0x9A, 0xA3, 0x9C, 0xA3, 0xA4, 0x9B, 0xA3, 0x93, 0x8C, 0x99, 0x6E, 0x71, 0x89, 0x45, 0x4D, 0x68, 
   0x16, 0x1B, 0x2B, 0x08, 0x11, 0x11, 0x13, 0x1D, 0x1D, 0x53, 0x61, 0x66, 0x78, 0x83, 0x92, 0x7E, 
   0x88, 0x99, 0x7A, 0x84, 0x98, 0x72, 0x7C, 0x93, 0x73, 0x7A, 0x92, 0x6E, 0x77, 0x8C, 0x71, 0x79, 
   0x87, 0x73, 0x78, 0x89, 0x78, 0x79, 0x8F, 0x73, 0x74, 0x89, 0x6B, 0x6E, 0x83, 0x65, 0x6A, 0x7C, 
   0x81, 0x86, 0x93, 0x8B, 0x8C, 0x96, 0x52, 0x52, 0x58, 0x48, 0x51, 0x56, 0x50, 0x5B, 0x60, 0x50, 
   0x54, 0x5B, 0x51, 0x57, 0x5E, 0x53, 0x5C, 0x62, 0x54, 0x5D, 0x64, 0x54, 0x61, 0x6C, 0x66, 0x7F, 
   0x94, 0x93, 0xB8, 0xD6, 0x9B, 0xC7, 0xE7, 0xA6, 0xD2, 0xF0, 0xA0, 0xCB, 0xED, 0x94, 0xBA, 0xE0, 
   0x88, 0xAF, 0xD7, 0x83, 0xA3, 0xCD, 0x74, 0x85, 0xAA, 0x60, 0x71, 0x8A, 0x64, 0x6F, 0x82, 0x6B, 
   0x77, 0x88, 0x71, 0x81, 0x95, 0x7A, 0x8C, 0x9F, 0x88, 0x96, 0xAA, 0x80, 0x90, 0xA8, 0x71, 0x85, 
   0x9D, 0x6D, 0x78, 0x93, 0x4E, 0x52, 0x68, 0x3C, 0x41, 0x4B, 0x44, 0x4D, 0x4B, 0x70, 0x77, 0x6F, 
   0x80, 0x7F, 0x76, 0x88, 0x84, 0x7E, 0x82, 0x80, 0x7E, 0x89, 0x87, 0x82, 0x93, 0x94, 0x8A, 0x83, 
   0x85, 0x7D, 0x86, 0x87, 0x82, 0x88, 0x88, 0x82, 0x83, 0x86, 0x83, 0x83, 0x86, 0x83, 0x7D, 0x7C, 
   0x7A, 0x74, 0x71, 0x71, 0x6C, 0x69, 0x68, 0x6D, 0x6A, 0x68, 0x6C, 0x67, 0x66, 0x68, 0x60, 0x63, 
   0x58, 0x4E, 0x4E, 0x45, 0x3C, 0x3D, 0x3B, 0x33, 0x35, 0x23, 0x21, 0x20, 0x15, 0x18, 0x15, 0x4A, 
   0x4D, 0x43, 0x99, 0x91, 0x7E, 0xB7, 0xAA, 0x96, 0xD4, 0xC7, 0xB9, 0xCD, 0xBE, 0xB6, 0xB9, 0xA7, 
   0xA1, 0xB7, 0xAB, 0xA4, 0xA8, 0x9E, 0x99, 0xAC, 0xA3, 0xA1, 0xAE, 0xA5, 0xA8, 0x93, 0x88, 0x8F, 
   0x77, 0x72, 0x7B, 0x74, 0x79, 0x7E, 0x77, 0x7D, 0x7F, 0x66, 0x68, 0x69, 0x6C, 0x6D, 0x6F, 0x75, 
   0x7C, 0x7E, 0x72, 0x7C, 0x83, 0x62, 0x6B, 0x7A, 0x49, 0x4E, 0x5E, 0x3E, 0x44, 0x50, 0x54, 0x5A, 
   0x61, 0x70, 0x71, 0x72, 0x83, 0x83, 0x7E, 0x89, 0x83, 0x7F, 0x7E, 0x74, 0x71, 0x7B, 0x73, 0x6E, 
   0x6F, 0x6B, 0x64, 0x75, 0x6F, 0x68, 0x91, 0x89, 0x83, 0xAD, 0xA7, 0xA1, 0xB3, 0xAD, 0xA9, 0xA7, 
   0x9C, 0x98, 0x94, 0x84, 0x82, 0x84, 0x77, 0x74, 0x80, 0x78, 0x73, 0x87, 0x81, 0x83, 0x87, 0x82, 
   0x84, 0x89, 0x86, 0x88, 0x8B, 0x85, 0x8B, 0x84, 0x77, 0x7D, 0x6E, 0x5E, 0x6C, 0x20, 0x12, 0x1B, 
   0x0D, 0x0F, 0x0E, 0x17, 0x20, 0x1A, 0x40, 0x47, 0x44, 0x70, 0x74, 0x74, 0x78, 0x75, 0x77, 0x7A, 
   0x6F, 0x71, 0x78, 0x6D, 0x71, 0x77, 0x6F, 0x76, 0x73, 0x6A, 0x73, 0x6D, 0x61, 0x69, 0x6F, 0x60, 
   0x66, 0x6E, 0x61, 0x68, 0x6B, 0x60, 0x68, 0x6F, 0x66, 0x6E, 0x6C, 0x67, 0x70, 0x5D, 0x5C, 0x5F, 
   0x78, 0x7D, 0x7E, 0x90, 0x8F, 0x99, 0x7D, 0x78, 0x83, 0x78, 0x77, 0x7E, 0x81, 0x81, 0x8B, 0x74, 
   0x6F, 0x7D, 0x48, 0x42, 0x4C, 0x5E, 0x5B, 0x5F, 0x5B, 0x57, 0x59, 0x5C, 0x59, 0x5C, 0x5A, 0x59, 
   0x5F, 0x5C, 0x5F, 0x64, 0x68, 0x65, 0x69, 0x5D, 0x56, 0x5D, 0x49, 0x44, 0x4D, 0x50, 0x4C, 0x52, 
   0x5E, 0x5B, 0x5D, 0x5D, 0x5A, 0x5D, 0x64, 0x6C, 0x7E, 0x80, 0x92, 0xA7, 0x76, 0x91, 0xAB, 0x68, 
   0x89, 0xA6, 0x72, 0x8B, 0xAC, 0x86, 0x93, 0xA5, 0x96, 0x96, 0x98, 0x9C, 0x98, 0x99, 0x97, 0x96, 
   0x97, 0x97, 0x96, 0x97, 0xA7, 0xA4, 0xA3, 0x83, 0x80, 0x82, 0x3B, 0x42, 0x4D, 0x43, 0x52, 0x5A, 
   0x38, 0x3F, 0x40, 0x23, 0x23, 0x23, 0x37, 0x3B, 0x3E, 0x4F, 0x53, 0x58, 0x5E, 0x5E, 0x63, 0x6A, 
   0x68, 0x6C, 0x6F, 0x6F, 0x6F, 0x71, 0x6F, 0x6E, 0x77, 0x73, 0x74, 0xA0, 0xA1, 0xA2, 0xB4, 0xB5, 
   0xB9, 0x8B, 0x8D, 0x95, 0x8C, 0x90, 0x95, 0x93, 0x98, 0x9B, 0x95, 0x97, 0x9D, 0x94, 0x98, 0x9F, 
   0x7A, 0x84, 0x81, 0x69, 0x6F, 0x76, 0x59, 0x5E, 0x69, 0x48, 0x4E, 0x57, 0x3F, 0x45, 0x4C, 0x3A, 
   0x41, 0x47, 0x3A, 0x3F, 0x45, 0x34, 0x36, 0x3A, 0x23, 0x25, 0x25, 0x22, 0x23, 0x23, 0x26, 0x25, 
   0x25, 0x28, 0x26, 0x29, 0x2D, 0x2C, 0x30, 0x3D, 0x3E, 0x41, 0x57, 0x59, 0x5B, 0x6C, 0x6C, 0x6E, 
   0x77, 0x76, 0x78, 0x87, 0x83, 0x86, 0x97, 0x97, 0x99, 0xA1, 0xA3, 0xA4, 0xA8, 0xA5, 0xA7, 0xA3, 
   0x9F, 0xA4, 0x9D, 0x97, 0xA0, 0x9A, 0x94, 0x9C, 0x93, 0x8E, 0x92, 0x8E, 0x88, 0x8C, 0x8F, 0x88, 
   0x8E, 0x81, 0x82, 0x86, 0x7E, 0x80, 0x86, 0x7C, 0x7A, 0x81, 0x72, 0x70, 0x79, 0x82, 0x7F, 0x87, 
   0x94, 0x8E, 0x95, 0x93, 0x8F, 0x93, 0x90, 0x89, 0x8C, 0x51, 0x4F, 0x53, 0x2A, 0x2E, 0x37, 0x2F, 
   0x39, 0x41, 0x3B, 0x45, 0x4D, 0x43, 0x4B, 0x5A, 0x53, 0x5E, 0x6D, 0x66, 0x6C, 0x77, 0x62, 0x6C, 
   0x7D, 0x59, 0x6B, 0x89, 0x56, 0x70, 0x94, 0x53, 0x73, 0x99, 0x53, 0x72, 0x96, 0x52, 0x67, 0x81, 
   0x36, 0x43, 0x53, 0x45, 0x4D, 0x60, 0x5B, 0x63, 0x7C, 0x57, 0x65, 0x83, 0x59, 0x69, 0x92, 0x64, 
   0x71, 0x9E, 0x6E, 0x79, 0xA0, 0x72, 0x7E, 0x9E, 0x75, 0x7D, 0x97, 0x82, 0x87, 0x9C, 0x91, 0x91, 
   0xA1, 0x93, 0x91, 0x9B, 0x94, 0x93, 0x95, 0x94, 0x91, 0x95, 0x93, 0x8E, 0x96, 0x92, 0x8D, 0x96, 
   0x98, 0x92, 0x99, 0x99, 0x94, 0x98, 0x99, 0x95, 0x98, 0x9E, 0x98, 0x9D, 0x9E, 0x98, 0x9F, 0x99, 
   0x96, 0x9C, 0x95, 0x91, 0x99, 0x8F, 0x8D, 0x94, 0x99, 0x96, 0x9E, 0x9D, 0x99, 0xA0, 0x98, 0x94, 
   0x9A, 0xA2, 0x9E, 0xA2, 0xA3, 0x9E, 0xA9, 0x82, 0x81, 0x94, 0x5D, 0x62, 0x79, 0x2F, 0x34, 0x46, 
   0x0F, 0x13, 0x1D, 0x0E, 0x19, 0x1B, 0x2E, 0x3C, 0x3E, 0x77, 0x84, 0x8D, 0x7F, 0x89, 0x98, 0x7A, 
   0x85, 0x95, 0x7A, 0x83, 0x95, 0x6F, 0x7A, 0x8E, 0x75, 0x7B, 0x90, 0x73, 0x7B, 0x90, 0x74, 0x7C, 
   0x8A, 0x74, 0x78, 0x86, 0x75, 0x78, 0x8A, 0x74, 0x79, 0x8F, 0x72, 0x75, 0x8B, 0x6E, 0x72, 0x84, 
   0x6F, 0x78, 0x84, 0x5C, 0x64, 0x6C, 0x59, 0x5D, 0x63, 0x59, 0x5F, 0x65, 0x57, 0x5A, 0x61, 0x58, 
   0x57, 0x60, 0x57, 0x5C, 0x64, 0x54, 0x5B, 0x64, 0x55, 0x5A, 0x66, 0x59, 0x5F, 0x68, 0x56, 0x63, 
   0x70, 0x6B, 0x82, 0x97, 0x8B, 0xA9, 0xC4, 0x9E, 0xC0, 0xDE, 0xA1, 0xC7, 0xE8, 0x9D, 0xC4, 0xE7, 
   0x94, 0xBA, 0xDD, 0xA2, 0xBF, 0xDF, 0xB2, 0xC2, 0xDD, 0x88, 0x96, 0xAD, 0x7C, 0x8C, 0xA2, 0x7C, 
   0x8C, 0xA0, 0x78, 0x89, 0x9D, 0x7D, 0x91, 0xA5, 0x86, 0x9C, 0xB3, 0x7E, 0x8F, 0xAD, 0x77, 0x85, 
   0xA2, 0x5D, 0x61, 0x7E, 0x4F, 0x53, 0x65, 0x4A, 0x4F, 0x5D, 0x3D, 0x44, 0x47, 0x5A, 0x5D, 0x59, 
   0x84, 0x83, 0x7D, 0x90, 0x90, 0x89, 0x90, 0x92, 0x8E, 0x98, 0x97, 0x92, 0x9C, 0x9A, 0x98, 0x90, 
   0x8F, 0x8E, 0x87, 0x88, 0x84, 0x85, 0x85, 0x80, 0x7E, 0x81, 0x7B, 0x79, 0x7C, 0x7B, 0x77, 0x79, 
   0x7B, 0x6E, 0x6D, 0x6C, 0x68, 0x67, 0x63, 0x6B, 0x6A, 0x67, 0x6C, 0x6D, 0x6B, 0x6E, 0x65, 0x6C, 
   0x3D, 0x30, 0x36, 0x21, 0x1B, 0x1E, 0x27, 0x29, 0x27, 0x4A, 0x4E, 0x4A, 0x75, 0x79, 0x7D, 0x9B, 
   0x9F, 0xA9, 0xB0, 0xA3, 0x9A, 0xB3, 0x9B, 0x8A, 0xBA, 0xA2, 0x8F, 0xBC, 0xA9, 0x9D, 0xBB, 0xAC, 
   0xA3, 0xB3, 0xA9, 0x9E, 0xA0, 0x98, 0x92, 0xB2, 0xAB, 0xAB, 0xC1, 0xBA, 0xBD, 0xA8, 0x9A, 0xA2, 
   0x72, 0x67, 0x6F, 0x5B, 0x59, 0x5C, 0x68, 0x68, 0x65, 0x67, 0x6C, 0x67, 0x6D, 0x71, 0x72, 0x68, 
   0x6F, 0x71, 0x59, 0x61, 0x63, 0x46, 0x4A, 0x4A, 0x3A, 0x40, 0x3D, 0x4F, 0x55, 0x4F, 0x70, 0x71, 
   0x6D, 0x79, 0x75, 0x74, 0x82, 0x79, 0x78, 0x78, 0x6B, 0x6F, 0x77, 0x6D, 0x6F, 0x7C, 0x77, 0x76, 
   0x91, 0x8E, 0x8D, 0xAB, 0xA7, 0xA3, 0xB0, 0xA9, 0xA3, 0xAF, 0xA7, 0xA1, 0xB0, 0xA8, 0xA1, 0xAD, 
   0xA0, 0x9B, 0x9C, 0x8D, 0x89, 0x8E, 0x84, 0x81, 0x89, 0x82, 0x7E, 0x86, 0x83, 0x85, 0x83, 0x7F, 
   0x80, 0x85, 0x7E, 0x81, 0x84, 0x7B, 0x81, 0x79, 0x6C, 0x71, 0x6E, 0x5C, 0x66, 0x2B, 0x1C, 0x23, 
   0x07, 0x09, 0x08, 0x23, 0x2F, 0x2B, 0x65, 0x6F, 0x6D, 0x7B, 0x7A, 0x7F, 0x7A, 0x74, 0x7C, 0x7B, 
   0x74, 0x7B, 0x7A, 0x70, 0x76, 0x7A, 0x72, 0x79, 0x7A, 0x71, 0x79, 0x73, 0x67, 0x6E, 0x6F, 0x60, 
   0x68, 0x6F, 0x62, 0x6B, 0x6C, 0x61, 0x68, 0x6C, 0x62, 0x67, 0x68, 0x63, 0x69, 0x61, 0x62, 0x64, 
   0x80, 0x85, 0x88, 0x7B, 0x7B, 0x87, 0x72, 0x6D, 0x7B, 0x75, 0x72, 0x7D, 0x77, 0x75, 0x80, 0x76, 
   0x72, 0x7F, 0x54, 0x4A, 0x59, 0x41, 0x3B, 0x43, 0x53, 0x50, 0x50, 0x54, 0x52, 0x52, 0x50, 0x4F, 
   0x55, 0x57, 0x5A, 0x5F, 0x53, 0x50, 0x53, 0x49, 0x45, 0x47, 0x4A, 0x4D, 0x4F, 0x63, 0x66, 0x68, 
   0x85, 0x85, 0x87, 0x75, 0x72, 0x79, 0x77, 0x82, 0x94, 0x72, 0x87, 0x9B, 0x7D, 0x98, 0xAF, 0x7C, 
   0x99, 0xB1, 0x7B, 0x92, 0xAE, 0x89, 0x96, 0xA9, 0x98, 0x9C, 0x9D, 0x9F, 0x9E, 0x9C, 0x94, 0x93, 
   0x96, 0x9A, 0x99, 0x9D, 0xB6, 0xB3, 0xB1, 0x97, 0x94, 0x94, 0x43, 0x4A, 0x54, 0x55, 0x66, 0x6A, 
   0x4D, 0x57, 0x55, 0x2C, 0x30, 0x32, 0x41, 0x43, 0x45, 0x54, 0x57, 0x57, 0x5E, 0x5C, 0x5D, 0x65, 
   0x64, 0x64, 0x6A, 0x6A, 0x68, 0x6F, 0x6B, 0x69, 0x78, 0x71, 0x6F, 0xAA, 0xAA, 0xA7, 0xAF, 0xAA, 
   0xAF, 0x94, 0x95, 0x9D, 0x8B, 0x94, 0x98, 0x89, 0x8F, 0x91, 0x89, 0x8D, 0x90, 0x86, 0x8E, 0x94, 
   0x6C, 0x75, 0x78, 0x56, 0x5C, 0x63, 0x47, 0x4B, 0x55, 0x3E, 0x42, 0x4C, 0x3C, 0x41, 0x49, 0x40, 
   0x43, 0x4A, 0x4A, 0x4A, 0x50, 0x4E, 0x4C, 0x52, 0x50, 0x4F, 0x52, 0x56, 0x54, 0x57, 0x50, 0x4C, 
   0x52, 0x61, 0x5C, 0x65, 0x75, 0x70, 0x79, 0x8E, 0x8A, 0x8E, 0x99, 0x95, 0x95, 0x9A, 0x93, 0x94, 
   0x98, 0x91, 0x92, 0x9C, 0x95, 0x95, 0x98, 0x93, 0x94, 0x8C, 0x89, 0x8A, 0x8A, 0x89, 0x8A, 0xA4, 
   0xA1, 0xA5, 0xA5, 0x9F, 0xA7, 0x98, 0x91, 0x98, 0x91, 0x8A, 0x91, 0x8E, 0x87, 0x8E, 0x8D, 0x85, 
   0x8E, 0x87, 0x82, 0x8A, 0x91, 0x8E, 0x96, 0x97, 0x92, 0x9B, 0x97, 0x93, 0x9C, 0x95, 0x92, 0x9A, 
   0x95, 0x8F, 0x98, 0x8D, 0x89, 0x92, 0x8E, 0x89, 0x8D, 0x82, 0x7B, 0x7F, 0x46, 0x43, 0x4B, 0x2A, 
   0x2D, 0x35, 0x30, 0x35, 0x3F, 0x3A, 0x40, 0x4E, 0x49, 0x55, 0x60, 0x5A, 0x65, 0x6C, 0x58, 0x62, 
   0x72, 0x53, 0x63, 0x80, 0x51, 0x69, 0x8E, 0x51, 0x6F, 0x95, 0x54, 0x6E, 0x91, 0x50, 0x62, 0x7B, 
   0x38, 0x45, 0x56, 0x42, 0x4D, 0x61, 0x50, 0x5A, 0x7A, 0x54, 0x63, 0x85, 0x57, 0x69, 0x8F, 0x61, 
   0x71, 0x9D, 0x67, 0x74, 0xA0, 0x6E, 0x79, 0x9F, 0x75, 0x7E, 0x9E, 0x81, 0x85, 0x9C, 0x8D, 0x8E, 
   0x9D, 0x94, 0x93, 0x9A, 0x96, 0x92, 0x94, 0x95, 0x8F, 0x95, 0x93, 0x8D, 0x96, 0x92, 0x8B, 0x94, 
   0x94, 0x8E, 0x94, 0x95, 0x91, 0x92, 0x97, 0x93, 0x93, 0x9C, 0x97, 0x99, 0x9A, 0x95, 0x9B, 0x9A, 
   0x95, 0x9C, 0x97, 0x93, 0x99, 0x96, 0x93, 0x99, 0x9F, 0x9B, 0xA1, 0x9C, 0x98, 0x9E, 0x98, 0x94, 
   0x9A, 0x9E, 0x9D, 0x9F, 0x97, 0x93, 0x9E, 0x6D, 0x6E, 0x83, 0x47, 0x4E, 0x63, 0x26, 0x2B, 0x36, 
   0x1B, 0x20, 0x26, 0x1B, 0x24, 0x2A, 0x46, 0x55, 0x59, 0x82, 0x90, 0x9F, 0x82, 0x8B, 0x9C, 0x7B, 
   0x87, 0x96, 0x75, 0x7D, 0x8F, 0x6E, 0x79, 0x8B, 0x77, 0x7B, 0x8C, 0x7D, 0x85, 0x97, 0x7D, 0x86, 
   0x98, 0x75, 0x7D, 0x8D, 0x72, 0x7A, 0x8B, 0x7B, 0x83, 0x95, 0x84, 0x84, 0x94, 0x71, 0x74, 0x7F, 
   0x5A, 0x65, 0x6B, 0x5A, 0x62, 0x68, 0x60, 0x62, 0x69, 0x5A, 0x5C, 0x65, 0x5C, 0x5A, 0x65, 0x5E, 
   0x5D, 0x69, 0x5A, 0x5D, 0x67, 0x55, 0x5B, 0x66, 0x54, 0x5A, 0x68, 0x57, 0x5D, 0x68, 0x54, 0x5C, 
   0x64, 0x51, 0x5C, 0x66, 0x66, 0x74, 0x84, 0x81, 0x96, 0xB1, 0x9B, 0xBD, 0xDA, 0xA2, 0xC9, 0xE8, 
   0x9F, 0xC5, 0xE5, 0xB5, 0xD3, 0xEC, 0xB2, 0xC3, 0xD9, 0x8E, 0x9A, 0xAE, 0x81, 0x91, 0xA7, 0x81, 
   0x90, 0xA2, 0x88, 0x97, 0xAC, 0x86, 0x9C, 0xB4, 0x7D, 0x98, 0xB4, 0x7A, 0x8C, 0xAC, 0x64, 0x6E, 
   0x8A, 0x4B, 0x4F, 0x67, 0x48, 0x4D, 0x5A, 0x48, 0x4D, 0x58, 0x48, 0x4C, 0x55, 0x47, 0x47, 0x49, 
   0x73, 0x74, 0x6E, 0x8A, 0x8E, 0x88, 0x8F, 0x93, 0x8D, 0x92, 0x94, 0x8C, 0x99, 0x99, 0x96, 0x97, 
   0x98, 0x99, 0x8B, 0x8E, 0x8E, 0x7D, 0x80, 0x80, 0x79, 0x7A, 0x7C, 0x79, 0x79, 0x7F, 0x7B, 0x78, 
   0x80, 0x6F, 0x6C, 0x6E, 0x69, 0x68, 0x68, 0x63, 0x66, 0x65, 0x5F, 0x65, 0x63, 0x69, 0x68, 0x6A, 
   0x44, 0x3D, 0x42, 0x25, 0x29, 0x2E, 0x5F, 0x6C, 0x6B, 0xA1, 0xA6, 0xA3, 0xAE, 0xAC, 0xB7, 0xA8, 
   0xAC, 0xC2, 0xA6, 0xA6, 0xAF, 0xAF, 0xA1, 0x97, 0xB8, 0xA3, 0x93, 0xB5, 0xA6, 0x99, 0xB2, 0xA9, 
   0x9B, 0xB7, 0xAE, 0xA0, 0xA9, 0xA0, 0x9B, 0xA9, 0xA8, 0xA9, 0xBC, 0xBD, 0xC0, 0xBE, 0xB6, 0xBE, 
   0x94, 0x8F, 0x97, 0x6D, 0x6A, 0x6F, 0x64, 0x60, 0x60, 0x55, 0x59, 0x56, 0x4F, 0x4E, 0x4F, 0x4D, 
   0x4E, 0x52, 0x41, 0x44, 0x45, 0x39, 0x39, 0x35, 0x47, 0x4C, 0x48, 0x6A, 0x6F, 0x6A, 0x80, 0x7D, 
   0x7A, 0x79, 0x73, 0x70, 0x79, 0x6F, 0x6E, 0x79, 0x6F, 0x71, 0x7C, 0x76, 0x76, 0x96, 0x94, 0x91, 
   0xB0, 0xAE, 0xAE, 0xAF, 0xAB, 0xA9, 0xAC, 0xA4, 0xA0, 0xAD, 0xA5, 0x9F, 0xB0, 0xA6, 0xA0, 0xAC, 
   0x9E, 0x98, 0x9C, 0x8F, 0x8A, 0x8E, 0x87, 0x83, 0x8E, 0x89, 0x85, 0x8C, 0x89, 0x88, 0x87, 0x82, 
   0x81, 0x85, 0x7B, 0x7C, 0x7D, 0x72, 0x76, 0x70, 0x65, 0x68, 0x68, 0x58, 0x5F, 0x2B, 0x20, 0x24, 
   0x13, 0x19, 0x18, 0x45, 0x51, 0x4D, 0x75, 0x78, 0x77, 0x79, 0x73, 0x77, 0x79, 0x71, 0x77, 0x80, 
   0x7A, 0x7F, 0x7D, 0x74, 0x7A, 0x78, 0x73, 0x76, 0x74, 0x6E, 0x70, 0x70, 0x66, 0x69, 0x70, 0x64, 
   0x6A, 0x78, 0x6B, 0x75, 0x6F, 0x63, 0x6C, 0x6D, 0x60, 0x66, 0x6B, 0x62, 0x68, 0x6F, 0x69, 0x6C, 
   0x8A, 0x88, 0x8C, 0x81, 0x7E, 0x88, 0x7C, 0x77, 0x83, 0x79, 0x74, 0x7F, 0x76, 0x73, 0x7D, 0x76, 
   0x73, 0x7F, 0x6B, 0x62, 0x72, 0x43, 0x3A, 0x43, 0x4E, 0x4B, 0x4B, 0x4F, 0x4D, 0x4C, 0x4D, 0x4D, 
   0x50, 0x4C, 0x4F, 0x52, 0x50, 0x4D, 0x4E, 0x55, 0x52, 0x53, 0x5D, 0x62, 0x64, 0x73, 0x79, 0x7D, 
   0x86, 0x88, 0x8D, 0x82, 0x81, 0x8C, 0x8E, 0x9E, 0xAC, 0x6E, 0x85, 0x96, 0x7B, 0x94, 0xAB, 0x82, 
   0x99, 0xB1, 0x82, 0x94, 0xAD, 0x89, 0x95, 0xA9, 0x97, 0x9B, 0x9E, 0xA1, 0xA0, 0x9A, 0x9C, 0x97, 
   0x96, 0xA6, 0xA2, 0xA6, 0xC1, 0xBE, 0xC0, 0x8F, 0x8D, 0x8F, 0x43, 0x4A, 0x53, 0x4D, 0x5C, 0x60, 
   0x43, 0x4D, 0x4D, 0x2A, 0x2F, 0x35, 0x46, 0x49, 0x4B, 0x51, 0x55, 0x54, 0x59, 0x58, 0x57, 0x61, 
   0x61, 0x5F, 0x65, 0x66, 0x66, 0x6D, 0x6B, 0x6A, 0x8D, 0x8B, 0x88, 0xBD, 0xBB, 0xBA, 0x9E, 0x9E, 
   0xA2, 0x8C, 0x95, 0x98, 0x82, 0x93, 0x93, 0x7F, 0x90, 0x8E, 0x7E, 0x8B, 0x8C, 0x73, 0x7D, 0x85, 
   0x5A, 0x5E, 0x6C, 0x47, 0x49, 0x51, 0x3C, 0x3D, 0x43, 0x45, 0x47, 0x4F, 0x5C, 0x5F, 0x68, 0x71, 
   0x70, 0x77, 0x80, 0x7D, 0x83, 0x89, 0x86, 0x8A, 0x8F, 0x8D, 0x8F, 0x8B, 0x89, 0x8A, 0x86, 0x82, 
   0x89, 0x9A, 0x94, 0x9C, 0x9B, 0x93, 0x9B, 0x93, 0x8C, 0x91, 0x93, 0x8D, 0x91, 0x96, 0x8F, 0x93, 
   0x98, 0x8F, 0x92, 0x9C, 0x95, 0x97, 0x9C, 0x95, 0x96, 0x99, 0x93, 0x93, 0x98, 0x94, 0x99, 0xA8, 
   0xA4, 0xAD, 0xA7, 0xA3, 0xAB, 0x9C, 0x97, 0x9D, 0x9C, 0x96, 0x9B, 0x99, 0x92, 0x98, 0x97, 0x90, 
   0x97, 0x93, 0x8B, 0x95, 0x9A, 0x96, 0x9D, 0x9C, 0x97, 0x9D, 0x9A, 0x96, 0x9B, 0x9A, 0x97, 0x9D, 
   0x95, 0x92, 0x98, 0x8C, 0x8A, 0x92, 0x8D, 0x88, 0x92, 0x95, 0x8E, 0x93, 0x7F, 0x7A, 0x81, 0x58, 
   0x55, 0x5F, 0x49, 0x48, 0x54, 0x39, 0x3A, 0x47, 0x3C, 0x44, 0x4B, 0x49, 0x54, 0x5A, 0x4B, 0x59, 
   0x6A, 0x49, 0x5F, 0x7F, 0x50, 0x6A, 0x93, 0x52, 0x6A, 0x91, 0x53, 0x68, 0x86, 0x4A, 0x5A, 0x6D, 
   0x38, 0x46, 0x55, 0x3E, 0x4B, 0x66, 0x48, 0x52, 0x76, 0x50, 0x5E, 0x80, 0x5C, 0x68, 0x8C, 0x63, 
   0x6F, 0x97, 0x65, 0x72, 0x9C, 0x66, 0x73, 0x9E, 0x6C, 0x77, 0x9E, 0x79, 0x82, 0x9E, 0x89, 0x8E, 
   0x9C, 0x95, 0x93, 0x9A, 0x97, 0x91, 0x95, 0x96, 0x8E, 0x96, 0x95, 0x8C, 0x97, 0x93, 0x8B, 0x96, 
   0x92, 0x8D, 0x95, 0x93, 0x8F, 0x93, 0x95, 0x91, 0x93, 0x97, 0x94, 0x97, 0x96, 0x91, 0x98, 0x97, 
   0x92, 0x98, 0x95, 0x91, 0x96, 0x97, 0x91, 0x97, 0x98, 0x93, 0x98, 0x97, 0x92, 0x99, 0x99, 0x94, 
   0x9B, 0x9D, 0x9C, 0xA3, 0x90, 0x8A, 0x9A, 0x61, 0x60, 0x75, 0x35, 0x3C, 0x4B, 0x1C, 0x24, 0x28, 
   0x1F, 0x27, 0x26, 0x1D, 0x25, 0x28, 0x47, 0x55, 0x5D, 0x7D, 0x8D, 0xA2, 0x7C, 0x85, 0x9A, 0x7A, 
   0x84, 0x94, 0x76, 0x7E, 0x8F, 0x72, 0x79, 0x8A, 0x74, 0x77, 0x89, 0x7F, 0x87, 0x9A, 0x7F, 0x87, 
   0x9C, 0x74, 0x7C, 0x8D, 0x71, 0x7A, 0x88, 0x78, 0x7F, 0x8E, 0x6E, 0x70, 0x7C, 0x46, 0x4A, 0x50, 
   0x4B, 0x54, 0x58, 0x5F, 0x64, 0x69, 0x5D, 0x5D, 0x65, 0x58, 0x58, 0x62, 0x5E, 0x5D, 0x6A, 0x5D, 
   0x5F, 0x6C, 0x58, 0x60, 0x6B, 0x52, 0x5B, 0x67, 0x54, 0x5C, 0x6A, 0x53, 0x5B, 0x68, 0x5A, 0x62, 
   0x68, 0x63, 0x6B, 0x6E, 0x67, 0x72, 0x77, 0x70, 0x80, 0x91, 0x75, 0x92, 0xA8, 0x93, 0xB7, 0xD3, 
   0x98, 0xBE, 0xDE, 0x96, 0xB7, 0xD7, 0x94, 0xAA, 0xC7, 0x8A, 0x99, 0xB3, 0x83, 0x94, 0xAB, 0x87, 
   0x96, 0xA8, 0x93, 0xA2, 0xB7, 0x91, 0xA2, 0xBC, 0x82, 0x93, 0xB1, 0x66, 0x73, 0x8F, 0x48, 0x55, 
   0x67, 0x45, 0x4E, 0x5D, 0x48, 0x50, 0x59, 0x48, 0x4F, 0x55, 0x4F, 0x51, 0x5D, 0x49, 0x49, 0x4E, 
   0x5F, 0x63, 0x5E, 0x74, 0x79, 0x74, 0x7B, 0x7F, 0x7A, 0x84, 0x86, 0x7D, 0x8F, 0x91, 0x89, 0x96, 
   0x99, 0x95, 0x95, 0x97, 0x94, 0x90, 0x91, 0x8F, 0x85, 0x87, 0x8B, 0x7E, 0x7C, 0x85, 0x7D, 0x76, 
   0x7F, 0x74, 0x6D, 0x71, 0x6D, 0x6A, 0x6C, 0x5F, 0x5F, 0x60, 0x50, 0x54, 0x52, 0x58, 0x5F, 0x60, 
   0x6B, 0x73, 0x7B, 0x76, 0x89, 0x9A, 0x85, 0x9B, 0xAE, 0x94, 0xA4, 0xB5, 0x8F, 0x9B, 0xB4, 0x90, 
   0xA0, 0xBE, 0x92, 0x9D, 0xB3, 0xA7, 0xA4, 0x9F, 0xB9, 0xAA, 0x9B, 0xB5, 0xA7, 0x9B, 0xAA, 0xA0, 
   0x92, 0xB2, 0xA7, 0x9B, 0xB1, 0xA7, 0xA5, 0xA7, 0xA6, 0xA8, 0xAA, 0xA9, 0xAC, 0xB7, 0xB0, 0xB6, 
   0xB8, 0xB2, 0xB9, 0xAB, 0xA2, 0xA9, 0x6D, 0x5E, 0x66, 0x3E, 0x39, 0x3D, 0x3B, 0x3F, 0x40, 0x38, 
   0x3D, 0x3F, 0x30, 0x36, 0x33, 0x42, 0x46, 0x3D, 0x5E, 0x62, 0x5B, 0x6F, 0x6E, 0x6A, 0x77, 0x71, 
   0x6D, 0x6C, 0x66, 0x62, 0x71, 0x6A, 0x69, 0x85, 0x80, 0x81, 0x90, 0x8E, 0x8C, 0xA2, 0xA0, 0x99, 
   0xA5, 0xA1, 0x9C, 0xA7, 0xA2, 0x9D, 0xAC, 0xA4, 0x9E, 0xAC, 0xA3, 0x9D, 0xB1, 0xA6, 0xA0, 0xA9, 
   0x9B, 0x97, 0x9C, 0x8F, 0x8D, 0x8F, 0x88, 0x87, 0x8C, 0x88, 0x87, 0x8F, 0x88, 0x88, 0x8B, 0x82, 
   0x83, 0x85, 0x78, 0x7B, 0x78, 0x69, 0x71, 0x67, 0x5C, 0x63, 0x53, 0x46, 0x4D, 0x1C, 0x17, 0x19, 
   0x2E, 0x36, 0x34, 0x6A, 0x72, 0x70, 0x87, 0x83, 0x84, 0x83, 0x79, 0x7C, 0x7D, 0x75, 0x78, 0x7E, 
   0x77, 0x7B, 0x7A, 0x71, 0x79, 0x78, 0x72, 0x75, 0x71, 0x6C, 0x6C, 0x6E, 0x66, 0x66, 0x70, 0x67, 
   0x6B, 0x75, 0x6B, 0x71, 0x6C, 0x62, 0x69, 0x6A, 0x5E, 0x67, 0x6E, 0x63, 0x6B, 0x75, 0x69, 0x70, 
   0x86, 0x7F, 0x85, 0x83, 0x7E, 0x86, 0x7B, 0x77, 0x7F, 0x75, 0x70, 0x7B, 0x70, 0x6B, 0x76, 0x70, 
   0x6D, 0x78, 0x73, 0x6B, 0x78, 0x5B, 0x50, 0x59, 0x4D, 0x48, 0x4A, 0x50, 0x4E, 0x4D, 0x4F, 0x50, 
   0x51, 0x52, 0x55, 0x57, 0x55, 0x52, 0x57, 0x62, 0x5F, 0x64, 0x6C, 0x72, 0x76, 0x72, 0x78, 0x80, 
   0x7C, 0x7E, 0x89, 0x82, 0x80, 0x8F, 0x7E, 0x94, 0xA1, 0x71, 0x89, 0x94, 0x75, 0x8C, 0x9E, 0x7F, 
   0x94, 0xAA, 0x81, 0x92, 0xA9, 0x86, 0x92, 0xA7, 0x8F, 0x96, 0x9A, 0x9A, 0x9A, 0x94, 0x9A, 0x97, 
   0x91, 0xAA, 0xA5, 0xA6, 0xA9, 0xA4, 0xA8, 0x75, 0x70, 0x78, 0x48, 0x4D, 0x58, 0x4E, 0x56, 0x5E, 
   0x43, 0x46, 0x4B, 0x31, 0x32, 0x3A, 0x4E, 0x4F, 0x53, 0x52, 0x56, 0x56, 0x56, 0x56, 0x55, 0x5B, 
   0x5A, 0x5B, 0x5F, 0x5F, 0x61, 0x73, 0x73, 0x74, 0x9A, 0x9E, 0x9D, 0xA1, 0xA6, 0xAA, 0x8A, 0x92, 
   0x99, 0x82, 0x90, 0x92, 0x7F, 0x8E, 0x90, 0x7E, 0x8E, 0x90, 0x79, 0x86, 0x8A, 0x68, 0x6F, 0x7C, 
   0x5A, 0x5E, 0x66, 0x5D, 0x5D, 0x61, 0x66, 0x63, 0x6A, 0x79, 0x79, 0x82, 0x80, 0x83, 0x8A, 0x85, 
   0x87, 0x87, 0x89, 0x87, 0x86, 0x8C, 0x89, 0x8D, 0x8F, 0x8D, 0x90, 0x8B, 0x88, 0x88, 0x7B, 0x78, 
   0x7D, 0x8D, 0x86, 0x8B, 0x99, 0x8F, 0x91, 0x97, 0x90, 0x92, 0x93, 0x90, 0x91, 0x94, 0x8F, 0x92, 
   0x99, 0x90, 0x94, 0x9B, 0x95, 0x99, 0x98, 0x93, 0x98, 0x97, 0x93, 0x97, 0x9B, 0x98, 0x9E, 0x98, 
   0x97, 0x9D, 0x97, 0x97, 0x9B, 0xA5, 0xA2, 0xA5, 0xA3, 0x9D, 0xA1, 0x9D, 0x94, 0x9A, 0x95, 0x8E, 
   0x96, 0x93, 0x8A, 0x8F, 0x92, 0x90, 0x93, 0x99, 0x98, 0x9C, 0x98, 0x98, 0x9D, 0x98, 0x99, 0x9F, 
   0x9B, 0x97, 0xA0, 0x9A, 0x93, 0x9E, 0x96, 0x92, 0x9E, 0x94, 0x94, 0x9B, 0x93, 0x92, 0x9C, 0x87, 
   0x85, 0x91, 0x7E, 0x7D, 0x8A, 0x69, 0x69, 0x77, 0x54, 0x57, 0x60, 0x4F, 0x55, 0x58, 0x42, 0x4C, 
   0x59, 0x3E, 0x55, 0x6E, 0x4E, 0x67, 0x8A, 0x51, 0x66, 0x8A, 0x51, 0x64, 0x80, 0x42, 0x54, 0x66, 
   0x33, 0x45, 0x54, 0x3A, 0x46, 0x63, 0x44, 0x4B, 0x6D, 0x49, 0x55, 0x76, 0x56, 0x5F, 0x84, 0x60, 
   0x67, 0x90, 0x63, 0x6F, 0x97, 0x64, 0x73, 0x9A, 0x6B, 0x76, 0x9D, 0x75, 0x83, 0x9F, 0x89, 0x8F, 
   0x9E, 0x96, 0x92, 0x99, 0x98, 0x92, 0x96, 0x95, 0x8F, 0x97, 0x94, 0x8B, 0x98, 0x93, 0x8A, 0x97, 
   0x91, 0x8D, 0x96, 0x92, 0x8F, 0x95, 0x94, 0x91, 0x97, 0x96, 0x93, 0x9A, 0x96, 0x93, 0x99, 0x96, 
   0x91, 0x98, 0x96, 0x90, 0x94, 0x97, 0x91, 0x95, 0x98, 0x92, 0x96, 0x97, 0x92, 0x99, 0x98, 0x95, 
   0x9B, 0x99, 0x97, 0xA5, 0x72, 0x6D, 0x81, 0x3F, 0x41, 0x54, 0x22, 0x28, 0x32, 0x22, 0x26, 0x27, 
   0x23, 0x28, 0x25, 0x24, 0x26, 0x27, 0x4C, 0x58, 0x65, 0x7B, 0x8E, 0xA6, 0x78, 0x81, 0x99, 0x75, 
   0x7C, 0x90, 0x72, 0x78, 0x8A, 0x74, 0x77, 0x89, 0x72, 0x76, 0x8A, 0x76, 0x7D, 0x8F, 0x7A, 0x80, 
   0x92, 0x6F, 0x76, 0x84, 0x69, 0x6F, 0x7B, 0x6B, 0x71, 0x7D, 0x60, 0x69, 0x73, 0x54, 0x5F, 0x66, 
   0x58, 0x63, 0x68, 0x57, 0x5D, 0x63, 0x54, 0x57, 0x5F, 0x59, 0x5E, 0x67, 0x63, 0x64, 0x6F, 0x60, 
   0x65, 0x6E, 0x58, 0x64, 0x70, 0x56, 0x61, 0x6A, 0x63, 0x6B, 0x74, 0x5E, 0x64, 0x6F, 0x5B, 0x61, 
   0x69, 0x5B, 0x62, 0x65, 0x5F, 0x69, 0x6A, 0x5D, 0x68, 0x73, 0x4D, 0x5D, 0x6F, 0x67, 0x7E, 0x95, 
   0x82, 0x9E, 0xBA, 0x8A, 0xA8, 0xC9, 0x8F, 0xAA, 0xCA, 0x8B, 0x9C, 0xB7, 0x89, 0x9C, 0xB3, 0x8F, 
   0x9F, 0xB2, 0x8D, 0x9D, 0xB1, 0x88, 0x98, 0xAE, 0x7C, 0x87, 0x9F, 0x51, 0x5A, 0x70, 0x4E, 0x5B, 
   0x6B, 0x53, 0x5E, 0x6D, 0x52, 0x5B, 0x69, 0x52, 0x59, 0x65, 0x52, 0x55, 0x65, 0x51, 0x50, 0x5D, 
   0x4D, 0x4F, 0x51, 0x5D, 0x63, 0x60, 0x67, 0x6D, 0x6A, 0x71, 0x75, 0x71, 0x7C, 0x7E, 0x79, 0x87, 
   0x89, 0x86, 0x8A, 0x8A, 0x86, 0x8C, 0x89, 0x82, 0x89, 0x89, 0x87, 0x89, 0x8A, 0x8E, 0x87, 0x82, 
   0x89, 0x72, 0x6B, 0x70, 0x68, 0x63, 0x65, 0x5A, 0x5A, 0x59, 0x51, 0x55, 0x55, 0x73, 0x79, 0x80, 
   0x98, 0xA4, 0xB1, 0x97, 0xAD, 0xC5, 0x8F, 0xAA, 0xC9, 0x88, 0xA7, 0xC6, 0x7B, 0x9A, 0xC0, 0x7E, 
   0x98, 0xC2, 0x7C, 0x8C, 0xAF, 0x99, 0xA0, 0xA8, 0xAF, 0xA8, 0x9E, 0xB3, 0xA8, 0x9A, 0xA8, 0x9F, 
   0x91, 0xA9, 0x9E, 0x96, 0xA8, 0xA0, 0xA2, 0xA6, 0xA6, 0xA5, 0xA7, 0xA4, 0xA3, 0xA9, 0xA5, 0xA3, 
   0xA7, 0xA6, 0xA4, 0xA5, 0xA0, 0xA2, 0x8A, 0x7D, 0x84, 0x4C, 0x43, 0x49, 0x2B, 0x28, 0x2A, 0x28, 
   0x25, 0x28, 0x2D, 0x30, 0x2B, 0x63, 0x6C, 0x62, 0x7A, 0x7E, 0x7B, 0x73, 0x70, 0x71, 0x6E, 0x6B, 
   0x69, 0x7D, 0x7C, 0x77, 0x96, 0x94, 0x92, 0xA5, 0xA0, 0xA2, 0xA2, 0x9B, 0x9A, 0xA6, 0x9E, 0x98, 
   0xA8, 0x9D, 0x98, 0xA9, 0xA0, 0x9A, 0xAB, 0xA3, 0x9C, 0xAB, 0xA2, 0x9E, 0xAC, 0xA1, 0x9F, 0xA7, 
   0x99, 0x9A, 0x9D, 0x8F, 0x92, 0x91, 0x8A, 0x8D, 0x8B, 0x86, 0x86, 0x91, 0x86, 0x86, 0x8C, 0x80, 
   0x81, 0x88, 0x7A, 0x80, 0x77, 0x67, 0x71, 0x5D, 0x52, 0x5C, 0x38, 0x2F, 0x37, 0x26, 0x28, 0x26, 
   0x6A, 0x6F, 0x6E, 0x7F, 0x81, 0x82, 0x94, 0x90, 0x93, 0x8E, 0x86, 0x8C, 0x7C, 0x72, 0x79, 0x77, 
   0x6E, 0x75, 0x74, 0x6D, 0x76, 0x76, 0x70, 0x75, 0x76, 0x70, 0x73, 0x70, 0x69, 0x6D, 0x6D, 0x64, 
   0x69, 0x69, 0x61, 0x64, 0x6A, 0x62, 0x65, 0x68, 0x5F, 0x68, 0x6A, 0x62, 0x6A, 0x75, 0x6B, 0x73, 
   0x84, 0x7E, 0x85, 0x80, 0x7C, 0x83, 0x74, 0x70, 0x79, 0x70, 0x6C, 0x76, 0x6E, 0x68, 0x73, 0x6D, 
   0x6A, 0x74, 0x73, 0x6E, 0x78, 0x77, 0x6B, 0x73, 0x5A, 0x51, 0x57, 0x42, 0x3F, 0x41, 0x3D, 0x3F, 
   0x41, 0x45, 0x4B, 0x4F, 0x4D, 0x4D, 0x57, 0x66, 0x64, 0x6E, 0x6D, 0x72, 0x7B, 0x6A, 0x6F, 0x7A, 
   0x75, 0x78, 0x86, 0x7B, 0x79, 0x8A, 0x7C, 0x8C, 0x9C, 0x73, 0x85, 0x92, 0x71, 0x82, 0x91, 0x86, 
   0x93, 0xA5, 0x8E, 0x98, 0xAD, 0x8B, 0x92, 0xA7, 0x91, 0x95, 0x9C, 0x9D, 0x9B, 0x9A, 0xA4, 0xA2, 
   0x9E, 0xB5, 0xB2, 0xAE, 0xA1, 0x9E, 0x9F, 0x69, 0x67, 0x6F, 0x4C, 0x51, 0x5B, 0x50, 0x56, 0x5C, 
   0x45, 0x46, 0x49, 0x36, 0x3A, 0x3D, 0x4D, 0x4C, 0x4F, 0x50, 0x51, 0x50, 0x59, 0x57, 0x55, 0x5D, 
   0x59, 0x5A, 0x68, 0x65, 0x68, 0x95, 0x94, 0x96, 0x9F, 0xA6, 0xA5, 0x8F, 0x93, 0x97, 0x85, 0x88, 
   0x8F, 0x82, 0x8F, 0x90, 0x7B, 0x8E, 0x90, 0x7C, 0x88, 0x8E, 0x7D, 0x82, 0x88, 0x72, 0x77, 0x81, 
   0x79, 0x7C, 0x85, 0x90, 0x8F, 0x96, 0x8E, 0x8B, 0x94, 0x87, 0x88, 0x92, 0x81, 0x87, 0x89, 0x86, 
   0x8A, 0x89, 0x8E, 0x8B, 0x8E, 0x8F, 0x8A, 0x93, 0x90, 0x8D, 0x93, 0x94, 0x91, 0x94, 0x91, 0x8D, 
   0x95, 0x91, 0x87, 0x8C, 0x99, 0x8D, 0x8E, 0x9A, 0x92, 0x93, 0x95, 0x91, 0x91, 0x96, 0x8E, 0x8F, 
   0x9D, 0x91, 0x92, 0xA0, 0x99, 0x9B, 0x9B, 0x99, 0x9C, 0x98, 0x9C, 0x9E, 0x9A, 0x9D, 0xA0, 0x9A, 
   0x9B, 0x9E, 0x9D, 0x9D, 0x9D, 0x9F, 0x97, 0x98, 0xA1, 0x94, 0x97, 0x9E, 0x94, 0x98, 0x96, 0x93, 
   0x98, 0x99, 0x93, 0x96, 0x96, 0x97, 0x99, 0x9C, 0x9B, 0x9F, 0x9C, 0x99, 0xA0, 0x97, 0x97, 0x9E, 
   0x9A, 0x99, 0x9E, 0x9D, 0x9A, 0x9F, 0x9E, 0x9A, 0xA0, 0x99, 0x99, 0x9E, 0x95, 0x95, 0x9E, 0x93, 
   0x91, 0x99, 0x90, 0x8E, 0x97, 0x91, 0x8F, 0x9B, 0x8F, 0x8B, 0x97, 0x8C, 0x89, 0x92, 0x72, 0x71, 
   0x7B, 0x54, 0x5D, 0x6A, 0x64, 0x72, 0x85, 0x6B, 0x79, 0x90, 0x57, 0x63, 0x7A, 0x3B, 0x49, 0x5D, 
   0x2C, 0x40, 0x52, 0x35, 0x41, 0x57, 0x37, 0x3E, 0x59, 0x34, 0x43, 0x5F, 0x3E, 0x50, 0x6B, 0x4E, 
   0x5D, 0x7D, 0x59, 0x68, 0x8A, 0x5E, 0x6E, 0x8F, 0x67, 0x71, 0x94, 0x74, 0x82, 0x9D, 0x90, 0x94, 
   0xA6, 0x96, 0x8F, 0x99, 0x94, 0x91, 0x95, 0x92, 0x8F, 0x94, 0x93, 0x8C, 0x95, 0x91, 0x8B, 0x95, 
   0x90, 0x8E, 0x95, 0x92, 0x90, 0x94, 0x94, 0x91, 0x95, 0x93, 0x93, 0x98, 0x96, 0x93, 0x99, 0x97, 
   0x93, 0x97, 0x96, 0x90, 0x93, 0x95, 0x8E, 0x91, 0x95, 0x8E, 0x92, 0x94, 0x8F, 0x94, 0x98, 0x95, 
   0x9B, 0x89, 0x82, 0x91, 0x58, 0x53, 0x66, 0x2E, 0x32, 0x40, 0x2D, 0x31, 0x37, 0x2F, 0x31, 0x33, 
   0x2E, 0x33, 0x33, 0x31, 0x34, 0x36, 0x63, 0x6E, 0x7E, 0x7A, 0x8F, 0xA9, 0x81, 0x8C, 0xA6, 0x7F, 
   0x82, 0x99, 0x60, 0x65, 0x77, 0x65, 0x67, 0x7A, 0x6B, 0x6E, 0x82, 0x70, 0x73, 0x83, 0x73, 0x76, 
   0x86, 0x71, 0x77, 0x86, 0x59, 0x60, 0x6C, 0x53, 0x59, 0x65, 0x5D, 0x6C, 0x76, 0x63, 0x71, 0x7A, 
   0x67, 0x70, 0x78, 0x6C, 0x71, 0x7A, 0x62, 0x6A, 0x72, 0x60, 0x6D, 0x73, 0x66, 0x70, 0x76, 0x62, 
   0x6D, 0x73, 0x5C, 0x68, 0x74, 0x62, 0x6A, 0x71, 0x68, 0x6D, 0x70, 0x61, 0x65, 0x6E, 0x63, 0x66, 
   0x71, 0x64, 0x65, 0x6E, 0x5F, 0x62, 0x69, 0x57, 0x5F, 0x67, 0x5C, 0x64, 0x6F, 0x79, 0x87, 0x90, 
   0x69, 0x7F, 0x8D, 0x81, 0x9E, 0xB9, 0x92, 0xB0, 0xD1, 0x8C, 0xA0, 0xBD, 0x95, 0xA2, 0xB3, 0x8A, 
   0x9A, 0xAB, 0x7E, 0x93, 0xA6, 0x7E, 0x92, 0xA2, 0x78, 0x82, 0x92, 0x52, 0x5A, 0x72, 0x58, 0x66, 
   0x7E, 0x64, 0x6E, 0x87, 0x6D, 0x72, 0x8C, 0x67, 0x6D, 0x87, 0x5A, 0x5F, 0x76, 0x52, 0x51, 0x67, 
   0x45, 0x43, 0x50, 0x53, 0x57, 0x5C, 0x7A, 0x83, 0x88, 0x86, 0x8E, 0x90, 0x76, 0x7E, 0x7B, 0x6E, 
   0x72, 0x70, 0x7B, 0x78, 0x79, 0x83, 0x7B, 0x78, 0x80, 0x7E, 0x7A, 0x7E, 0x82, 0x82, 0x78, 0x7A, 
   0x80, 0x6F, 0x6C, 0x73, 0x5C, 0x59, 0x59, 0x62, 0x66, 0x63, 0x7B, 0x86, 0x8C, 0x8B, 0x9A, 0xAA, 
   0x9F, 0xAC, 0xC0, 0x95, 0xA7, 0xC6, 0x82, 0xA2, 0xC7, 0x7B, 0xA2, 0xCA, 0x79, 0x9D, 0xC8, 0x7E, 
   0x99, 0xC5, 0x74, 0x8F, 0xB3, 0x8B, 0x9E, 0xB1, 0xA1, 0xA3, 0xA3, 0xA9, 0xA2, 0x9A, 0xA3, 0x9B, 
   0x95, 0xA3, 0x9B, 0x99, 0x9F, 0x9F, 0x9E, 0xA0, 0xA2, 0x9E, 0xAA, 0xA5, 0x9E, 0xAA, 0xA5, 0x9B, 
   0xA7, 0xA4, 0x9A, 0xA6, 0x9F, 0x9A, 0xAF, 0xA0, 0xA1, 0x92, 0x80, 0x82, 0x5D, 0x4B, 0x4F, 0x29, 
   0x1A, 0x1E, 0x21, 0x1D, 0x17, 0x6B, 0x74, 0x67, 0x9A, 0x9B, 0x97, 0x99, 0x96, 0x94, 0x97, 0x95, 
   0x90, 0xA1, 0x9F, 0x98, 0xA7, 0xA5, 0x9D, 0xA9, 0xA3, 0x9D, 0xAB, 0xA0, 0x9A, 0xAC, 0xA1, 0x9A, 
   0xA9, 0x9E, 0x99, 0xAB, 0xA2, 0x9D, 0xAC, 0xA3, 0x9F, 0xAC, 0xA2, 0xA0, 0xAB, 0xA0, 0xA1, 0xA7, 
   0x98, 0x9C, 0x9F, 0x92, 0x94, 0x94, 0x8D, 0x8E, 0x8C, 0x88, 0x85, 0x92, 0x85, 0x81, 0x90, 0x83, 
   0x81, 0x8E, 0x81, 0x83, 0x77, 0x67, 0x6F, 0x58, 0x4D, 0x57, 0x2B, 0x25, 0x2C, 0x4C, 0x50, 0x52, 
   0x76, 0x76, 0x79, 0x74, 0x76, 0x7A, 0x7A, 0x7D, 0x82, 0x7F, 0x7D, 0x83, 0x77, 0x70, 0x77, 0x7B, 
   0x74, 0x7B, 0x7B, 0x76, 0x7B, 0x79, 0x73, 0x78, 0x76, 0x6F, 0x76, 0x71, 0x68, 0x73, 0x70, 0x67, 
   0x71, 0x6F, 0x67, 0x6A, 0x71, 0x67, 0x6B, 0x7C, 0x6F, 0x78, 0x8B, 0x81, 0x87, 0x8C, 0x81, 0x88, 
   0x87, 0x7D, 0x85, 0x89, 0x80, 0x88, 0x7B, 0x6F, 0x79, 0x6A, 0x62, 0x6C, 0x6C, 0x65, 0x70, 0x6D, 
   0x68, 0x72, 0x74, 0x72, 0x78, 0x85, 0x79, 0x7F, 0x4F, 0x43, 0x4B, 0x30, 0x2C, 0x30, 0x40, 0x44, 
   0x49, 0x4E, 0x57, 0x60, 0x5E, 0x63, 0x71, 0x6F, 0x70, 0x7E, 0x6E, 0x71, 0x7E, 0x76, 0x7A, 0x87, 
   0x7D, 0x82, 0x90, 0x84, 0x7F, 0x8D, 0x9B, 0xA2, 0xB3, 0x86, 0x98, 0xA7, 0x80, 0x94, 0x9F, 0x96, 
   0x9F, 0xAC, 0x94, 0x9D, 0xAD, 0x88, 0x91, 0xA6, 0x8F, 0x92, 0x9B, 0xA0, 0x9C, 0x99, 0xB2, 0xAA, 
   0xA8, 0xB6, 0xB0, 0xB0, 0xAD, 0xAE, 0xAD, 0x69, 0x6E, 0x74, 0x46, 0x53, 0x5E, 0x4C, 0x57, 0x60, 
   0x43, 0x47, 0x4B, 0x3F, 0x3F, 0x40, 0x50, 0x4A, 0x47, 0x4B, 0x4C, 0x4B, 0x51, 0x58, 0x53, 0x66, 
   0x66, 0x61, 0x8C, 0x88, 0x86, 0x99, 0x9A, 0x97, 0x8E, 0x92, 0x95, 0x7F, 0x85, 0x83, 0x81, 0x85, 
   0x87, 0x84, 0x8A, 0x8E, 0x86, 0x91, 0x93, 0x80, 0x89, 0x8A, 0x76, 0x7D, 0x7E, 0x70, 0x79, 0x7B, 
   0x89, 0x89, 0x95, 0x91, 0x8F, 0x9A, 0x90, 0x8D, 0x98, 0x8A, 0x87, 0x93, 0x86, 0x82, 0x8A, 0x91, 
   0x8B, 0x8D, 0x97, 0x90, 0x90, 0x94, 0x8F, 0x94, 0x96, 0x8D, 0x94, 0x94, 0x8E, 0x95, 0x97, 0x94, 
   0x99, 0x93, 0x91, 0x93, 0x8E, 0x8C, 0x8C, 0x92, 0x91, 0x90, 0x93, 0x95, 0x92, 0x97, 0x96, 0x94, 
   0x96, 0x91, 0x91, 0x9F, 0x98, 0x99, 0xA0, 0x9C, 0x9E, 0x9C, 0x9D, 0x9E, 0x9A, 0x9D, 0x9E, 0x9A, 
   0x9B, 0x9B, 0x9B, 0x9A, 0x9A, 0x98, 0x95, 0x9A, 0x94, 0x94, 0x9A, 0x94, 0x93, 0x98, 0x98, 0x97, 
   0x99, 0xA1, 0xA0, 0xA7, 0x9E, 0x9D, 0xA3, 0x9E, 0x9B, 0xA1, 0x9D, 0x9A, 0xA0, 0x9A, 0x98, 0x9C, 
   0x97, 0x95, 0x97, 0x97, 0x97, 0x9A, 0x97, 0x95, 0x9D, 0x95, 0x94, 0x99, 0x97, 0x96, 0x97, 0x98, 
   0x97, 0x96, 0x95, 0x93, 0x94, 0x94, 0x8F, 0x96, 0x93, 0x8F, 0x98, 0x98, 0x98, 0x9F, 0xA2, 0xA0, 
   0xA5, 0x90, 0x93, 0x96, 0x83, 0x87, 0x8D, 0x8B, 0x8E, 0x99, 0x5D, 0x64, 0x74, 0x29, 0x3B, 0x49, 
   0x26, 0x37, 0x41, 0x2C, 0x3B, 0x49, 0x2F, 0x3D, 0x4F, 0x2F, 0x3F, 0x54, 0x30, 0x3F, 0x57, 0x37, 
   0x44, 0x5C, 0x49, 0x55, 0x72, 0x57, 0x64, 0x88, 0x5E, 0x6B, 0x93, 0x67, 0x75, 0x98, 0x7E, 0x84, 
   0x9D, 0x96, 0x91, 0x99, 0x93, 0x91, 0x90, 0x91, 0x8E, 0x90, 0x90, 0x8E, 0x8E, 0x90, 0x8A, 0x8E, 
   0x8F, 0x8E, 0x95, 0x90, 0x8E, 0x95, 0x92, 0x8F, 0x96, 0x95, 0x8C, 0x98, 0x91, 0x8B, 0x92, 0x92, 
   0x8B, 0x94, 0x95, 0x89, 0x92, 0x93, 0x8B, 0x92, 0x91, 0x8F, 0x94, 0x95, 0x92, 0x96, 0x99, 0x94, 
   0x9C, 0x6D, 0x66, 0x76, 0x48, 0x43, 0x4F, 0x2F, 0x32, 0x3D, 0x34, 0x38, 0x41, 0x32, 0x38, 0x3C, 
   0x36, 0x35, 0x38, 0x35, 0x38, 0x3E, 0x5F, 0x6B, 0x7C, 0x76, 0x8B, 0xA6, 0x7D, 0x94, 0xAE, 0x7C, 
   0x8B, 0xA1, 0x70, 0x78, 0x8E, 0x6A, 0x6D, 0x82, 0x70, 0x71, 0x82, 0x6B, 0x6E, 0x7D, 0x6D, 0x75, 
   0x81, 0x6D, 0x74, 0x7F, 0x58, 0x5F, 0x66, 0x5A, 0x63, 0x6A, 0x65, 0x70, 0x77, 0x6A, 0x73, 0x7D, 
   0x5C, 0x66, 0x71, 0x63, 0x6F, 0x77, 0x65, 0x70, 0x7A, 0x6B, 0x73, 0x80, 0x69, 0x70, 0x7D, 0x5F, 
   0x6A, 0x73, 0x63, 0x69, 0x74, 0x64, 0x64, 0x70, 0x64, 0x60, 0x69, 0x68, 0x66, 0x6B, 0x6D, 0x6F, 
   0x74, 0x71, 0x74, 0x7F, 0x69, 0x6F, 0x77, 0x6B, 0x74, 0x7A, 0x8C, 0x8D, 0x94, 0x88, 0x8A, 0x96, 
   0x60, 0x66, 0x71, 0x57, 0x6C, 0x7B, 0x77, 0x94, 0xAB, 0x8B, 0xA4, 0xCB, 0x86, 0x96, 0xB7, 0x84, 
   0x95, 0xB0, 0x7E, 0x94, 0xAB, 0x79, 0x8F, 0xA3, 0x5A, 0x67, 0x77, 0x53, 0x5B, 0x6A, 0x5F, 0x68, 
   0x7A, 0x67, 0x6D, 0x84, 0x6E, 0x71, 0x86, 0x6D, 0x6F, 0x84, 0x66, 0x68, 0x83, 0x62, 0x62, 0x80, 
   0x4B, 0x4F, 0x62, 0x43, 0x46, 0x4F, 0x58, 0x5D, 0x5F, 0x76, 0x80, 0x7B, 0x85, 0x8F, 0x8B, 0x8A, 
   0x8E, 0x8D, 0x76, 0x76, 0x74, 0x65, 0x63, 0x63, 0x65, 0x67, 0x65, 0x68, 0x6F, 0x6C, 0x6D, 0x6F, 
   0x74, 0x62, 0x62, 0x67, 0x60, 0x67, 0x66, 0x9A, 0xA4, 0xA9, 0xA5, 0xB3, 0xC6, 0xB2, 0xC3, 0xDE, 
   0xA3, 0xB2, 0xD0, 0x88, 0xA4, 0xCC, 0x7A, 0xA6, 0xD5, 0x6F, 0x9C, 0xCD, 0x70, 0x93, 0xC3, 0x7A, 
   0x97, 0xBF, 0x78, 0x97, 0xBC, 0x89, 0xA2, 0xBD, 0x9F, 0xAB, 0xBA, 0xA3, 0xA6, 0x9E, 0xA6, 0xA0, 
   0x97, 0x9C, 0x98, 0x95, 0x9D, 0x9C, 0x9B, 0xA9, 0xA5, 0x9B, 0xB6, 0xAC, 0xA2, 0xB3, 0xAC, 0xA2, 
   0xAC, 0xA5, 0x9E, 0xA3, 0x9D, 0x98, 0xA6, 0x9F, 0x9A, 0xA4, 0x99, 0x95, 0x9B, 0x8A, 0x8C, 0x63, 
   0x51, 0x56, 0x2D, 0x26, 0x28, 0x38, 0x3E, 0x34, 0x86, 0x8D, 0x7E, 0xA6, 0xA6, 0x9B, 0xA6, 0xA0, 
   0x9A, 0xA6, 0xA0, 0x9A, 0xAA, 0xA6, 0xA1, 0xAF, 0xA6, 0xA5, 0xA9, 0x9F, 0x9D, 0xA8, 0x9F, 0x9B, 
   0xA9, 0xA0, 0x9B, 0xAB, 0xA2, 0x9D, 0xA7, 0xA0, 0x9C, 0xA8, 0xA2, 0xA2, 0xA8, 0x9F, 0xA2, 0xA3, 
   0x98, 0x99, 0x9B, 0x91, 0x91, 0x96, 0x8E, 0x8E, 0x92, 0x8A, 0x8A, 0x8D, 0x84, 0x80, 0x93, 0x83, 
   0x7E, 0x8D, 0x78, 0x76, 0x67, 0x55, 0x55, 0x4A, 0x44, 0x44, 0x5E, 0x5B, 0x5A, 0x7C, 0x70, 0x7A, 
   0x74, 0x6C, 0x75, 0x76, 0x71, 0x7D, 0x73, 0x74, 0x7B, 0x77, 0x78, 0x7B, 0x8F, 0x8A, 0x91, 0x82, 
   0x79, 0x7F, 0x72, 0x74, 0x78, 0x72, 0x70, 0x76, 0x74, 0x68, 0x73, 0x74, 0x68, 0x76, 0x75, 0x69, 
   0x76, 0x79, 0x6B, 0x74, 0x7D, 0x77, 0x7E, 0x7A, 0x71, 0x7A, 0x7F, 0x71, 0x79, 0x80, 0x73, 0x7D, 
   0x7C, 0x73, 0x7D, 0x85, 0x80, 0x84, 0x8E, 0x86, 0x8A, 0x76, 0x70, 0x76, 0x6A, 0x67, 0x6F, 0x5F, 
   0x61, 0x67, 0x73, 0x6F, 0x79, 0x87, 0x7E, 0x8C, 0x43, 0x39, 0x42, 0x4D, 0x50, 0x53, 0x6D, 0x77, 
   0x79, 0x84, 0x89, 0x93, 0x7E, 0x7E, 0x8E, 0x75, 0x77, 0x83, 0x74, 0x78, 0x82, 0x7D, 0x83, 0x90, 
   0x7B, 0x80, 0x90, 0x79, 0x76, 0x85, 0x9C, 0xA7, 0xB3, 0x83, 0x98, 0xA7, 0x7F, 0x96, 0xA3, 0x99, 
   0xA3, 0xAD, 0x9C, 0xA1, 0xAF, 0x8A, 0x94, 0xA7, 0x8A, 0x8E, 0x99, 0xA3, 0x9E, 0x9D, 0xB6, 0xB0, 
   0xAC, 0xBB, 0xB5, 0xB2, 0xA2, 0xA2, 0x9F, 0x61, 0x68, 0x6A, 0x45, 0x57, 0x5F, 0x4E, 0x5C, 0x63, 
   0x5A, 0x60, 0x62, 0x52, 0x51, 0x51, 0x4E, 0x4A, 0x4A, 0x4E, 0x4E, 0x50, 0x56, 0x5A, 0x58, 0x79, 
   0x79, 0x75, 0x9B, 0x9A, 0x96, 0x92, 0x94, 0x8F, 0x87, 0x8C, 0x8C, 0x7E, 0x89, 0x89, 0x84, 0x8E, 
   0x8F, 0x89, 0x8E, 0x91, 0x89, 0x8C, 0x8F, 0x78, 0x7C, 0x7E, 0x53, 0x5B, 0x5A, 0x5D, 0x64, 0x63, 
   0x96, 0x93, 0x99, 0x95, 0x91, 0x95, 0x90, 0x8C, 0x8F, 0x90, 0x8C, 0x91, 0x8E, 0x8A, 0x90, 0x92, 
   0x8B, 0x8F, 0x97, 0x8F, 0x93, 0x9C, 0x93, 0x9A, 0x9C, 0x91, 0x99, 0x95, 0x8E, 0x96, 0x8E, 0x8A, 
   0x93, 0x97, 0x90, 0x97, 0x97, 0x8E, 0x94, 0x94, 0x8D, 0x90, 0x8F, 0x8D, 0x8D, 0x90, 0x8E, 0x8C, 
   0x97, 0x92, 0x92, 0x9D, 0x95, 0x98, 0xA0, 0x9A, 0x9D, 0x9E, 0x9C, 0x9D, 0x9F, 0x9C, 0x9F, 0x9B, 
   0x97, 0x9A, 0x9F, 0x9C, 0x9E, 0xA1, 0x9C, 0xA1, 0x9C, 0x97, 0x9D, 0x9A, 0x96, 0x9B, 0x9D, 0x9A, 
   0x9B, 0x9E, 0x9C, 0xA2, 0xA0, 0x9D, 0xA2, 0x9F, 0x9A, 0xA1, 0xA1, 0x9B, 0xA3, 0x9E, 0x99, 0x9F, 
   0x99, 0x95, 0x9A, 0x97, 0x93, 0x9A, 0x96, 0x94, 0x9B, 0x98, 0x95, 0x9A, 0x98, 0x95, 0x99, 0x97, 
   0x94, 0x97, 0x98, 0x94, 0x98, 0x99, 0x94, 0x9A, 0x94, 0x8F, 0x97, 0x90, 0x90, 0x97, 0x8F, 0x8C, 
   0x91, 0x89, 0x8A, 0x8D, 0x86, 0x87, 0x8C, 0x97, 0x96, 0x9F, 0x59, 0x5B, 0x6A, 0x1C, 0x28, 0x36, 
   0x1D, 0x28, 0x34, 0x24, 0x2A, 0x39, 0x2D, 0x33, 0x45, 0x31, 0x3B, 0x4E, 0x2D, 0x39, 0x4B, 0x2A, 
   0x32, 0x42, 0x2D, 0x31, 0x49, 0x3B, 0x40, 0x5F, 0x42, 0x4D, 0x71, 0x4E, 0x5C, 0x7E, 0x6F, 0x78, 
   0x96, 0x95, 0x92, 0xA2, 0x98, 0x90, 0x97, 0x95, 0x8E, 0x93, 0x92, 0x8F, 0x91, 0x97, 0x8F, 0x95, 
   0x97, 0x93, 0x9B, 0x91, 0x8D, 0x95, 0x91, 0x8D, 0x93, 0x94, 0x8C, 0x93, 0x92, 0x89, 0x95, 0x93, 
   0x89, 0x96, 0x91, 0x88, 0x91, 0x90, 0x8A, 0x92, 0x9B, 0x97, 0x9F, 0x9A, 0x97, 0x9D, 0x85, 0x82, 
   0x8B, 0x53, 0x53, 0x5C, 0x39, 0x37, 0x3D, 0x31, 0x30, 0x36, 0x38, 0x38, 0x3F, 0x36, 0x36, 0x3C, 
   0x37, 0x36, 0x3C, 0x3D, 0x41, 0x4A, 0x63, 0x73, 0x82, 0x74, 0x89, 0xA3, 0x78, 0x8D, 0xA9, 0x80, 
   0x8E, 0xA7, 0x7C, 0x80, 0x97, 0x71, 0x70, 0x84, 0x6B, 0x6A, 0x7C, 0x5C, 0x5F, 0x6F, 0x4D, 0x56, 
   0x5F, 0x4B, 0x53, 0x59, 0x52, 0x59, 0x5F, 0x5A, 0x62, 0x6A, 0x63, 0x6F, 0x75, 0x6D, 0x72, 0x7B, 
   0x6F, 0x72, 0x7C, 0x66, 0x6D, 0x76, 0x66, 0x6D, 0x76, 0x67, 0x6B, 0x75, 0x67, 0x6B, 0x76, 0x63, 
   0x6B, 0x74, 0x61, 0x68, 0x73, 0x64, 0x67, 0x71, 0x6B, 0x6A, 0x72, 0x6D, 0x6F, 0x73, 0x71, 0x76, 
   0x7B, 0x7E, 0x84, 0x8E, 0x82, 0x89, 0x91, 0x88, 0x93, 0x9B, 0x83, 0x8C, 0x94, 0x6B, 0x75, 0x81, 
   0x5E, 0x63, 0x6D, 0x43, 0x4D, 0x58, 0x4E, 0x60, 0x6D, 0x7D, 0x90, 0xA9, 0x7D, 0x92, 0xAD, 0x81, 
   0x95, 0xAF, 0x81, 0x94, 0xAA, 0x5F, 0x6D, 0x7D, 0x44, 0x4D, 0x56, 0x53, 0x56, 0x62, 0x4D, 0x51, 
   0x60, 0x47, 0x4D, 0x57, 0x53, 0x58, 0x63, 0x59, 0x5D, 0x6B, 0x58, 0x59, 0x6F, 0x5D, 0x5A, 0x79, 
   0x53, 0x51, 0x6C, 0x48, 0x46, 0x59, 0x49, 0x4C, 0x51, 0x5E, 0x69, 0x66, 0x79, 0x82, 0x81, 0x8B, 
   0x8A, 0x8B, 0x8C, 0x8A, 0x85, 0x85, 0x83, 0x80, 0x7B, 0x78, 0x79, 0x6B, 0x6D, 0x6D, 0x5C, 0x62, 
   0x61, 0x5A, 0x61, 0x66, 0x7E, 0x8A, 0x93, 0xA3, 0xB3, 0xBF, 0xA8, 0xBB, 0xD0, 0x98, 0xB5, 0xD6, 
   0x87, 0xAD, 0xD1, 0x75, 0xA5, 0xD3, 0x76, 0xA9, 0xDB, 0x75, 0xA4, 0xD6, 0x75, 0x9D, 0xCF, 0x79, 
   0x9A, 0xC7, 0x78, 0x97, 0xC2, 0x7D, 0x9A, 0xBD, 0x96, 0xA3, 0xBC, 0x9D, 0x9D, 0x9C, 0xA4, 0x9D, 
   0x95, 0xA4, 0x98, 0x93, 0xA8, 0x9B, 0x90, 0xB1, 0xA5, 0x97, 0xB8, 0xA8, 0x9A, 0xB3, 0xA7, 0x99, 
   0xAE, 0xA5, 0x9A, 0xA9, 0x9D, 0x97, 0xA6, 0x9D, 0x96, 0xA1, 0x96, 0x90, 0x9B, 0x90, 0x8C, 0x95, 
   0x8A, 0x86, 0x7A, 0x6F, 0x6F, 0x4C, 0x48, 0x45, 0x69, 0x6F, 0x63, 0x98, 0x9B, 0x92, 0xA2, 0xA1, 
   0x9D, 0xA7, 0xA6, 0xA2, 0xAC, 0xA8, 0xA5, 0xAC, 0xA3, 0xA2, 0xAC, 0xA2, 0xA0, 0xA9, 0xA0, 0x9C, 
   0xAD, 0xA2, 0x9C, 0xAD, 0xA3, 0x9D, 0xA7, 0x9F, 0x9A, 0xA8, 0x9E, 0x9C, 0xA9, 0x9F, 0xA0, 0xA3, 
   0x99, 0x9A, 0x9B, 0x91, 0x92, 0x96, 0x8D, 0x8E, 0x90, 0x85, 0x88, 0x8C, 0x83, 0x7F, 0x8F, 0x82, 
   0x7E, 0x7E, 0x6F, 0x70, 0x5C, 0x52, 0x53, 0x58, 0x59, 0x58, 0x83, 0x83, 0x86, 0x7A, 0x6F, 0x74, 
   0x73, 0x6E, 0x71, 0x71, 0x6E, 0x74, 0x73, 0x72, 0x74, 0x7B, 0x78, 0x76, 0x85, 0x7B, 0x7E, 0x7C, 
   0x72, 0x74, 0x77, 0x74, 0x76, 0x78, 0x73, 0x75, 0x76, 0x6B, 0x6F, 0x6F, 0x6A, 0x70, 0x6F, 0x6A, 
   0x74, 0x76, 0x6A, 0x75, 0x72, 0x69, 0x73, 0x6A, 0x61, 0x68, 0x6E, 0x61, 0x65, 0x6F, 0x64, 0x67, 
   0x7B, 0x76, 0x7D, 0x90, 0x8C, 0x95, 0xA3, 0x9F, 0xA6, 0x89, 0x84, 0x8D, 0x76, 0x6F, 0x7A, 0x6C, 
   0x66, 0x6F, 0x76, 0x6D, 0x78, 0x63, 0x5B, 0x68, 0x34, 0x30, 0x37, 0x5C, 0x68, 0x6A, 0x84, 0x8D, 
   0x91, 0x7C, 0x7C, 0x88, 0x7B, 0x76, 0x87, 0x76, 0x73, 0x82, 0x77, 0x7B, 0x83, 0x7C, 0x82, 0x8C, 
   0x7B, 0x80, 0x8E, 0x7C, 0x7B, 0x8B, 0x98, 0xA4, 0xB1, 0x77, 0x8B, 0x9B, 0x6D, 0x86, 0x96, 0x83, 
   0x96, 0xA5, 0x91, 0xA0, 0xB1, 0x90, 0x9F, 0xB5, 0x8F, 0x97, 0xA6, 0xA7, 0xA7, 0xAB, 0xBB, 0xB6, 
   0xB2, 0xAB, 0xA6, 0xA1, 0x96, 0x96, 0x93, 0x76, 0x7C, 0x7D, 0x46, 0x56, 0x5C, 0x50, 0x5F, 0x65, 
   0x59, 0x61, 0x63, 0x4F, 0x52, 0x52, 0x50, 0x4F, 0x4D, 0x50, 0x51, 0x51, 0x67, 0x67, 0x67, 0x90, 
   0x8E, 0x8D, 0x93, 0x93, 0x93, 0x86, 0x8B, 0x8B, 0x82, 0x88, 0x8A, 0x7D, 0x8B, 0x90, 0x7F, 0x8C, 
   0x91, 0x80, 0x87, 0x8D, 0x78, 0x79, 0x80, 0x66, 0x68, 0x6E, 0x4A, 0x50, 0x53, 0x4F, 0x53, 0x53, 
   0x80, 0x7D, 0x7F, 0x95, 0x8F, 0x8F, 0x93, 0x8A, 0x8B, 0x93, 0x8A, 0x8E, 0x92, 0x8B, 0x90, 0x93, 
   0x8C, 0x8F, 0x96, 0x8F, 0x90, 0x99, 0x92, 0x95, 0x98, 0x8F, 0x94, 0x90, 0x8B, 0x91, 0x8C, 0x8B, 
   0x92, 0x93, 0x8E, 0x95, 0x96, 0x8D, 0x93, 0x92, 0x8A, 0x8F, 0x8F, 0x8A, 0x8B, 0x90, 0x8E, 0x8C, 
   0x99, 0x96, 0x96, 0x9B, 0x94, 0x98, 0x9C, 0x94, 0x98, 0x9B, 0x96, 0x98, 0x9E, 0x98, 0x9B, 0x9D, 
   0x97, 0x9B, 0x9D, 0x99, 0x9D, 0x9D, 0x98, 0x9D, 0x9D, 0x97, 0x9C, 0x9D, 0x98, 0x9A, 0x9D, 0x9A, 
   0x9A, 0x9C, 0x98, 0x9B, 0x9C, 0x98, 0x9A, 0xA0, 0x99, 0x9C, 0x9F, 0x98, 0x9E, 0x9D, 0x96, 0x9B, 
   0x9E, 0x99, 0x9E, 0x9A, 0x96, 0x9D, 0x9B, 0x97, 0x9C, 0x9C, 0x98, 0x9C, 0x9A, 0x96, 0x9A, 0x98, 
   0x94, 0x99, 0x9D, 0x99, 0x9D, 0x9F, 0x9B, 0x9F, 0x9C, 0x97, 0x9D, 0x95, 0x93, 0x98, 0x92, 0x8D, 
   0x91, 0x8C, 0x89, 0x8D, 0x89, 0x86, 0x8C, 0x93, 0x8E, 0x97, 0x4C, 0x4A, 0x56, 0x2C, 0x31, 0x3E, 
   0x39, 0x3E, 0x4B, 0x41, 0x44, 0x53, 0x50, 0x52, 0x62, 0x5E, 0x61, 0x71, 0x58, 0x5D, 0x6B, 0x4F, 
   0x53, 0x61, 0x46, 0x48, 0x59, 0x3F, 0x45, 0x58, 0x3D, 0x48, 0x5E, 0x41, 0x4D, 0x65, 0x59, 0x64, 
   0x7D, 0x88, 0x8C, 0x9D, 0x95, 0x93, 0x9C, 0x95, 0x90, 0x96, 0x96, 0x90, 0x96, 0x9D, 0x93, 0x9C, 
   0x9C, 0x95, 0xA0, 0x93, 0x8D, 0x96, 0x91, 0x8C, 0x91, 0x93, 0x8A, 0x90, 0x92, 0x87, 0x91, 0x91, 
   0x85, 0x92, 0x8C, 0x85, 0x8C, 0x8A, 0x83, 0x8C, 0x91, 0x89, 0x96, 0x88, 0x85, 0x92, 0x68, 0x67, 
   0x75, 0x43, 0x4A, 0x51, 0x37, 0x3A, 0x3E, 0x36, 0x36, 0x38, 0x38, 0x39, 0x3D, 0x37, 0x37, 0x3A, 
   0x39, 0x40, 0x44, 0x47, 0x51, 0x5A, 0x71, 0x88, 0x98, 0x77, 0x8E, 0xA6, 0x75, 0x8B, 0xA8, 0x76, 
   0x84, 0x9F, 0x76, 0x7A, 0x8D, 0x66, 0x65, 0x74, 0x5A, 0x5A, 0x67, 0x4A, 0x4B, 0x56, 0x42, 0x4A, 
   0x51, 0x46, 0x4F, 0x53, 0x50, 0x58, 0x5C, 0x5C, 0x63, 0x68, 0x68, 0x6E, 0x72, 0x6B, 0x6C, 0x73, 
   0x71, 0x72, 0x7C, 0x71, 0x77, 0x82, 0x6E, 0x74, 0x7D, 0x67, 0x69, 0x72, 0x66, 0x6B, 0x73, 0x66, 
   0x70, 0x79, 0x68, 0x73, 0x7B, 0x6C, 0x75, 0x7B, 0x6D, 0x71, 0x78, 0x6C, 0x72, 0x77, 0x72, 0x7B, 
   0x81, 0x8B, 0x93, 0xA1, 0xA6, 0xAF, 0xBC, 0x8E, 0x96, 0xA2, 0x6C, 0x79, 0x82, 0x5C, 0x6A, 0x77, 
   0x58, 0x5D, 0x66, 0x3B, 0x3D, 0x43, 0x2C, 0x36, 0x39, 0x4E, 0x5C, 0x65, 0x65, 0x78, 0x8A, 0x79, 
   0x8A, 0x9E, 0x6C, 0x76, 0x8D, 0x55, 0x57, 0x6B, 0x54, 0x54, 0x5E, 0x5A, 0x58, 0x5F, 0x55, 0x55, 
   0x5D, 0x51, 0x56, 0x5F, 0x4A, 0x50, 0x59, 0x49, 0x4F, 0x58, 0x44, 0x45, 0x52, 0x44, 0x41, 0x55, 
   0x48, 0x48, 0x5A, 0x4A, 0x48, 0x58, 0x44, 0x44, 0x4C, 0x51, 0x55, 0x52, 0x69, 0x6D, 0x6B, 0x77, 
   0x7A, 0x78, 0x7F, 0x83, 0x7C, 0x7F, 0x83, 0x80, 0x76, 0x74, 0x75, 0x57, 0x5B, 0x5E, 0x43, 0x53, 
   0x55, 0x74, 0x8B, 0x97, 0x85, 0x9D, 0xB1, 0xAD, 0xC4, 0xD3, 0xC2, 0xD7, 0xED, 0x8E, 0xAE, 0xD7, 
   0x76, 0xA2, 0xCF, 0x71, 0xA5, 0xD7, 0x78, 0xA7, 0xDC, 0x7B, 0xA9, 0xDB, 0x79, 0xA9, 0xDB, 0x75, 
   0x9F, 0xD0, 0x7F, 0xA5, 0xCF, 0x82, 0xA4, 0xC8, 0x83, 0x95, 0xB3, 0x86, 0x8B, 0x91, 0x95, 0x92, 
   0x8C, 0x9F, 0x96, 0x90, 0xA3, 0x98, 0x86, 0xAD, 0xA0, 0x91, 0xB6, 0xA5, 0x97, 0xB4, 0xA7, 0x98, 
   0xB1, 0xA5, 0x9B, 0xB1, 0xA4, 0x9E, 0xB0, 0xA4, 0x9F, 0xA4, 0x99, 0x93, 0x95, 0x90, 0x87, 0x91, 
   0x8C, 0x81, 0x9A, 0x90, 0x8D, 0x84, 0x78, 0x7A, 0x69, 0x67, 0x63, 0x7C, 0x80, 0x79, 0x98, 0x9C, 
   0x99, 0xA6, 0xA6, 0xA4, 0xB0, 0xA8, 0xA7, 0xAE, 0xA1, 0xA0, 0xAB, 0xA2, 0x9E, 0xA8, 0xA2, 0x9C, 
   0xAC, 0xA3, 0x9B, 0xAC, 0xA2, 0x9C, 0xA9, 0x9E, 0x98, 0xA8, 0x9C, 0x98, 0xA9, 0x9E, 0x9D, 0xA7, 
   0x9D, 0xA0, 0x9F, 0x95, 0x98, 0x96, 0x8C, 0x8D, 0x8E, 0x84, 0x85, 0x86, 0x81, 0x7B, 0x87, 0x80, 
   0x7B, 0x76, 0x6D, 0x6E, 0x5D, 0x56, 0x58, 0x69, 0x68, 0x69, 0x7A, 0x78, 0x7D, 0x73, 0x6B, 0x70, 
   0x70, 0x6C, 0x70, 0x6B, 0x67, 0x6F, 0x6F, 0x6A, 0x6F, 0x74, 0x6D, 0x6F, 0x73, 0x6A, 0x6F, 0x75, 
   0x6D, 0x73, 0x74, 0x6E, 0x76, 0x6F, 0x69, 0x6D, 0x6D, 0x65, 0x67, 0x69, 0x66, 0x6A, 0x69, 0x65, 
   0x6F, 0x6F, 0x63, 0x71, 0x66, 0x5C, 0x68, 0x64, 0x5A, 0x62, 0x6C, 0x5E, 0x64, 0x7D, 0x73, 0x77, 
   0x8C, 0x87, 0x8F, 0x8D, 0x87, 0x95, 0x8F, 0x8E, 0x99, 0x9A, 0x9A, 0xA5, 0x8F, 0x8E, 0x9B, 0x88, 
   0x83, 0x90, 0x87, 0x7D, 0x8D, 0x51, 0x48, 0x57, 0x2B, 0x28, 0x2B, 0x59, 0x63, 0x5F, 0x86, 0x92, 
   0x96, 0x8D, 0x92, 0x9B, 0x8B, 0x86, 0x91, 0x7B, 0x78, 0x84, 0x76, 0x7C, 0x84, 0x79, 0x81, 0x87, 
   0x7F, 0x80, 0x8A, 0x7D, 0x7B, 0x8A, 0x98, 0xA6, 0xB5, 0x83, 0x97, 0xA4, 0x6C, 0x84, 0x92, 0x69, 
   0x81, 0x91, 0x82, 0x9B, 0xAA, 0x92, 0xA8, 0xBE, 0x95, 0xA3, 0xB6, 0x9F, 0xA6, 0xB1, 0xB1, 0xAE, 
   0xB0, 0x9A, 0x96, 0x93, 0x99, 0x9A, 0x98, 0x83, 0x85, 0x87, 0x46, 0x53, 0x5A, 0x4C, 0x5B, 0x61, 
   0x4A, 0x54, 0x58, 0x49, 0x50, 0x52, 0x57, 0x59, 0x54, 0x66, 0x67, 0x63, 0x81, 0x81, 0x81, 0x85, 
   0x85, 0x87, 0x80, 0x85, 0x88, 0x7A, 0x82, 0x87, 0x7B, 0x83, 0x8A, 0x7E, 0x85, 0x8F, 0x83, 0x88, 
   0x8F, 0x79, 0x7C, 0x82, 0x75, 0x74, 0x7C, 0x7A, 0x79, 0x82, 0x6E, 0x6E, 0x74, 0x56, 0x58, 0x5B, 
   0x6F, 0x6E, 0x70, 0x8E, 0x88, 0x89, 0x92, 0x88, 0x8B, 0x93, 0x87, 0x8D, 0x92, 0x87, 0x8E, 0x94, 
   0x8A, 0x8E, 0x94, 0x8B, 0x8C, 0x94, 0x8C, 0x8D, 0x95, 0x8B, 0x8D, 0x90, 0x89, 0x8D, 0x8A, 0x87, 
   0x8D, 0x8B, 0x86, 0x8C, 0x8E, 0x88, 0x8C, 0x8D, 0x85, 0x89, 0x8D, 0x85, 0x88, 0x8A, 0x87, 0x87, 
   0x91, 0x8E, 0x90, 0x96, 0x91, 0x95, 0x98, 0x91, 0x95, 0x9A, 0x93, 0x95, 0x9D, 0x96, 0x99, 0x9D, 
   0x98, 0x9C, 0x9E, 0x9B, 0xA0, 0x9D, 0x98, 0x9E, 0x9E, 0x97, 0x9B, 0x9C, 0x96, 0x97, 0x98, 0x95, 
   0x95, 0x9A, 0x96, 0x95, 0x9A, 0x95, 0x92, 0x9F, 0x98, 0x97, 0xA4, 0x9C, 0x9F, 0xA0, 0x99, 0x9D, 
   0x9F, 0x9B, 0x9E, 0x9C, 0x99, 0x9F, 0x9B, 0x97, 0x9B, 0x9E, 0x9A, 0x9E, 0x9C, 0x98, 0x9D, 0x99, 
   0x94, 0x9B, 0x99, 0x95, 0x9A, 0x9C, 0x98, 0x9C, 0x9E, 0x9B, 0x9F, 0x97, 0x92, 0x96, 0x95, 0x8E, 
   0x93, 0x96, 0x91, 0x95, 0x95, 0x91, 0x97, 0x80, 0x7B, 0x83, 0x43, 0x40, 0x4A, 0x40, 0x42, 0x4D, 
   0x47, 0x4D, 0x59, 0x4D, 0x54, 0x61, 0x53, 0x57, 0x65, 0x60, 0x61, 0x6F, 0x61, 0x62, 0x6F, 0x67, 
   0x6A, 0x79, 0x68, 0x6A, 0x7A, 0x6B, 0x6D, 0x79, 0x74, 0x76, 0x82, 0x6F, 0x70, 0x7D, 0x66, 0x69, 
   0x7B, 0x77, 0x7B, 0x8D, 0x8E, 0x8F, 0x9C, 0x98, 0x94, 0x9E, 0x99, 0x91, 0x9A, 0x96, 0x8D, 0x96, 
   0x93, 0x8A, 0x95, 0x90, 0x89, 0x92, 0x94, 0x8C, 0x92, 0x95, 0x8B, 0x90, 0x90, 0x88, 0x91, 0x90, 
   0x85, 0x91, 0x89, 0x83, 0x8A, 0x8B, 0x84, 0x8B, 0x8C, 0x83, 0x91, 0x6E, 0x6F, 0x7E, 0x4F, 0x55, 
   0x62, 0x40, 0x47, 0x4E, 0x3B, 0x40, 0x44, 0x3C, 0x3F, 0x41, 0x39, 0x40, 0x40, 0x39, 0x3E, 0x3D, 
   0x3F, 0x4B, 0x4C, 0x55, 0x63, 0x6B, 0x77, 0x8D, 0x9F, 0x75, 0x8D, 0xA2, 0x73, 0x8A, 0xA4, 0x6C, 
   0x79, 0x91, 0x4F, 0x51, 0x60, 0x3E, 0x42, 0x4A, 0x41, 0x47, 0x4D, 0x48, 0x4E, 0x53, 0x44, 0x4D, 
   0x56, 0x3E, 0x4B, 0x53, 0x41, 0x4F, 0x54, 0x50, 0x5B, 0x5D, 0x62, 0x68, 0x6B, 0x65, 0x67, 0x6D, 
   0x65, 0x68, 0x72, 0x63, 0x6A, 0x76, 0x64, 0x6C, 0x76, 0x60, 0x66, 0x6E, 0x5F, 0x67, 0x6F, 0x5E, 
   0x6A, 0x73, 0x61, 0x6E, 0x78, 0x60, 0x6C, 0x74, 0x5E, 0x67, 0x6E, 0x6E, 0x78, 0x7C, 0x79, 0x84, 
   0x89, 0x93, 0x9F, 0xA9, 0xA2, 0xAD, 0xB6, 0x79, 0x7E, 0x8A, 0x5F, 0x68, 0x74, 0x55, 0x60, 0x6F, 
   0x52, 0x54, 0x60, 0x30, 0x2F, 0x35, 0x1B, 0x23, 0x21, 0x38, 0x41, 0x45, 0x41, 0x4A, 0x58, 0x5E, 
   0x64, 0x73, 0x60, 0x66, 0x78, 0x5D, 0x5F, 0x6F, 0x60, 0x60, 0x68, 0x5C, 0x59, 0x5D, 0x54, 0x56, 
   0x5D, 0x51, 0x55, 0x63, 0x4B, 0x50, 0x62, 0x49, 0x4E, 0x5E, 0x52, 0x53, 0x62, 0x4B, 0x4A, 0x5A, 
   0x46, 0x49, 0x56, 0x42, 0x47, 0x51, 0x47, 0x4C, 0x54, 0x50, 0x54, 0x56, 0x5A, 0x5E, 0x5D, 0x6A, 
   0x72, 0x70, 0x72, 0x7C, 0x7A, 0x6F, 0x77, 0x7A, 0x5B, 0x62, 0x65, 0x4B, 0x57, 0x60, 0x67, 0x7B, 
   0x8A, 0x88, 0xA2, 0xBB, 0x87, 0xA4, 0xC2, 0xA5, 0xC4, 0xDD, 0xA6, 0xC4, 0xE7, 0x84, 0xAB, 0xDB, 
   0x7B, 0xA7, 0xD9, 0x6E, 0x9D, 0xD3, 0x76, 0xA4, 0xD9, 0x79, 0xAA, 0xDB, 0x75, 0xAB, 0xDC, 0x72, 
   0xA4, 0xD6, 0x84, 0xAF, 0xD8, 0xA3, 0xC7, 0xE8, 0x9F, 0xB3, 0xD0, 0x91, 0x97, 0xA3, 0x93, 0x8F, 
   0x8A, 0xA3, 0x95, 0x8E, 0xA1, 0x95, 0x86, 0xA3, 0x99, 0x8B, 0xAD, 0xA1, 0x93, 0xB6, 0xAB, 0x9E, 
   0xC7, 0xBC, 0xB4, 0xC9, 0xBA, 0xB6, 0xB5, 0xA6, 0xA3, 0xA5, 0x9B, 0x95, 0x97, 0x91, 0x89, 0x8F, 
   0x89, 0x7F, 0x94, 0x8D, 0x86, 0x8D, 0x82, 0x83, 0x72, 0x68, 0x6A, 0x56, 0x56, 0x51, 0x89, 0x8F, 
   0x88, 0xA7, 0xA9, 0xA5, 0xAB, 0xA4, 0xA1, 0xAE, 0xA1, 0x9E, 0xAD, 0xA5, 0xA1, 0xAC, 0xA8, 0xA3, 
   0xAE, 0xA6, 0xA1, 0xA8, 0x9E, 0x99, 0xA6, 0x9A, 0x95, 0xA9, 0x9B, 0x97, 0xA8, 0x9C, 0x9A, 0xA7, 
   0x9D, 0x9F, 0xA4, 0x9A, 0x9C, 0x9D, 0x93, 0x92, 0x99, 0x8D, 0x89, 0x8E, 0x85, 0x82, 0x84, 0x7C, 
   0x7B, 0x73, 0x6D, 0x6D, 0x63, 0x5F, 0x61, 0x6C, 0x6A, 0x6D, 0x73, 0x71, 0x74, 0x87, 0x83, 0x87, 
   0x7A, 0x74, 0x78, 0x73, 0x69, 0x71, 0x72, 0x69, 0x6E, 0x71, 0x69, 0x6C, 0x6F, 0x6A, 0x6F, 0x71, 
   0x6C, 0x73, 0x72, 0x6B, 0x76, 0x6A, 0x66, 0x6D, 0x67, 0x61, 0x67, 0x65, 0x60, 0x67, 0x67, 0x5F, 
   0x69, 0x60, 0x57, 0x62, 0x62, 0x5B, 0x64, 0x6B, 0x65, 0x6D, 0x6E, 0x63, 0x6F, 0x7B, 0x75, 0x7E, 
   0x83, 0x82, 0x8A, 0x83, 0x80, 0x8C, 0x84, 0x86, 0x92, 0xA0, 0xA5, 0xAD, 0xB5, 0xB8, 0xC1, 0xAB, 
   0xA8, 0xB6, 0xA2, 0x9A, 0xAD, 0x62, 0x59, 0x6A, 0x39, 0x34, 0x39, 0x58, 0x5F, 0x5D, 0x77, 0x82, 
   0x86, 0x9A, 0x9F, 0xA5, 0x97, 0x90, 0x99, 0x7F, 0x79, 0x85, 0x76, 0x77, 0x82, 0x7F, 0x85, 0x8D, 
   0x88, 0x8B, 0x96, 0x7A, 0x7A, 0x87, 0x96, 0xA8, 0xBD, 0x8C, 0xA3, 0xB5, 0x7E, 0x99, 0xA8, 0x6B, 
   0x88, 0x96, 0x77, 0x94, 0xA2, 0x7E, 0x9B, 0xAD, 0x8D, 0xA1, 0xB0, 0x98, 0xA0, 0xA9, 0x9B, 0x99, 
   0x9C, 0x93, 0x8E, 0x8E, 0x98, 0x96, 0x96, 0x7A, 0x7B, 0x7E, 0x42, 0x50, 0x58, 0x49, 0x5A, 0x62, 
   0x48, 0x54, 0x5A, 0x47, 0x4E, 0x54, 0x52, 0x54, 0x54, 0x89, 0x8E, 0x8D, 0x93, 0x98, 0x9B, 0x6F, 
   0x74, 0x78, 0x69, 0x72, 0x74, 0x73, 0x7F, 0x82, 0x72, 0x7C, 0x7F, 0x7A, 0x81, 0x86, 0x98, 0x9B, 
   0x9D, 0xA4, 0xA5, 0xA6, 0xA0, 0xA1, 0xA3, 0x9C, 0x9A, 0x9F, 0x83, 0x84, 0x88, 0x6A, 0x6F, 0x72, 
   0x69, 0x69, 0x6E, 0x7E, 0x7B, 0x7D, 0x8D, 0x87, 0x89, 0x8F, 0x88, 0x8C, 0x93, 0x89, 0x91, 0x8F, 
   0x83, 0x8C, 0x8A, 0x7F, 0x87, 0x8B, 0x83, 0x87, 0x8F, 0x84, 0x8A, 0x8C, 0x82, 0x8A, 0x84, 0x7F, 
   0x87, 0x85, 0x80, 0x88, 0x89, 0x84, 0x8A, 0x92, 0x8C, 0x91, 0x96, 0x8F, 0x93, 0x8C, 0x89, 0x8C, 
   0x8D, 0x8A, 0x8D, 0x97, 0x93, 0x96, 0x9A, 0x93, 0x96, 0x9E, 0x97, 0x9A, 0x9C, 0x94, 0x97, 0x9A, 
   0x92, 0x96, 0x9A, 0x94, 0x9A, 0x99, 0x92, 0x99, 0x9B, 0x93, 0x97, 0x9C, 0x94, 0x97, 0x9A, 0x94, 
   0x96, 0x9C, 0x97, 0x94, 0x9D, 0x97, 0x93, 0x9D, 0x97, 0x94, 0xA1, 0x9A, 0x9B, 0xA2, 0x9C, 0x9E, 
   0x9F, 0x9C, 0x9D, 0x9D, 0x9A, 0xA0, 0x9D, 0x98, 0x9E, 0x9F, 0x9C, 0xA0, 0x9F, 0x9B, 0xA0, 0x9D, 
   0x9A, 0x9F, 0x9C, 0x9B, 0x9E, 0x9E, 0x9D, 0xA0, 0xA5, 0xA2, 0xA8, 0xA9, 0xA3, 0xA9, 0x90, 0x88, 
   0x8F, 0x6D, 0x67, 0x6D, 0x5D, 0x5A, 0x61, 0x4C, 0x49, 0x51, 0x3C, 0x3D, 0x46, 0x41, 0x45, 0x4F, 
   0x41, 0x4B, 0x57, 0x49, 0x50, 0x5C, 0x52, 0x56, 0x62, 0x5C, 0x5E, 0x6A, 0x5C, 0x5F, 0x6B, 0x5C, 
   0x60, 0x6D, 0x63, 0x63, 0x71, 0x6F, 0x6C, 0x75, 0x75, 0x72, 0x78, 0x85, 0x81, 0x85, 0x7F, 0x7E, 
   0x87, 0x73, 0x78, 0x89, 0x89, 0x8D, 0x9D, 0x97, 0x96, 0xA2, 0x99, 0x93, 0x9D, 0x96, 0x8E, 0x98, 
   0x92, 0x88, 0x93, 0x92, 0x8B, 0x93, 0x95, 0x8D, 0x94, 0x94, 0x8A, 0x91, 0x8D, 0x87, 0x8D, 0x8C, 
   0x83, 0x8E, 0x87, 0x81, 0x88, 0x87, 0x81, 0x89, 0x7C, 0x77, 0x87, 0x55, 0x5A, 0x6A, 0x34, 0x40, 
   0x4A, 0x3E, 0x43, 0x48, 0x3E, 0x41, 0x44, 0x3E, 0x41, 0x42, 0x3A, 0x40, 0x41, 0x3D, 0x42, 0x42, 
   0x3E, 0x46, 0x48, 0x60, 0x6A, 0x72, 0x79, 0x88, 0x98, 0x71, 0x85, 0x95, 0x79, 0x8B, 0x9E, 0x59, 
   0x63, 0x75, 0x2F, 0x32, 0x3A, 0x3D, 0x46, 0x47, 0x43, 0x51, 0x53, 0x46, 0x4F, 0x57, 0x44, 0x4B, 
   0x58, 0x3F, 0x4A, 0x55, 0x48, 0x56, 0x5C, 0x55, 0x60, 0x65, 0x59, 0x60, 0x69, 0x59, 0x5C, 0x67, 
   0x5C, 0x60, 0x69, 0x63, 0x69, 0x73, 0x70, 0x77, 0x7F, 0x77, 0x7D, 0x85, 0x75, 0x7C, 0x84, 0x6C, 
   0x76, 0x7F, 0x74, 0x81, 0x8A, 0x74, 0x82, 0x88, 0x6B, 0x77, 0x7B, 0x70, 0x7D, 0x7D, 0x71, 0x80, 
   0x7E, 0x7E, 0x8C, 0x8F, 0x75, 0x80, 0x82, 0x62, 0x67, 0x70, 0x60, 0x68, 0x72, 0x55, 0x5B, 0x6B, 
   0x44, 0x44, 0x51, 0x20, 0x1D, 0x24, 0x16, 0x1C, 0x1B, 0x3F, 0x41, 0x46, 0x54, 0x53, 0x5D, 0x65, 
   0x5F, 0x6E, 0x61, 0x62, 0x73, 0x59, 0x5B, 0x66, 0x56, 0x59, 0x5A, 0x4A, 0x49, 0x4A, 0x49, 0x50, 
   0x57, 0x4F, 0x53, 0x60, 0x4E, 0x53, 0x64, 0x4E, 0x53, 0x64, 0x5D, 0x61, 0x6F, 0x55, 0x58, 0x64, 
   0x51, 0x55, 0x5C, 0x5C, 0x62, 0x62, 0x5A, 0x5F, 0x5E, 0x55, 0x58, 0x5A, 0x50, 0x52, 0x53, 0x59, 
   0x5C, 0x5E, 0x64, 0x69, 0x6E, 0x5B, 0x66, 0x6B, 0x54, 0x62, 0x69, 0x7F, 0x91, 0xA1, 0xA3, 0xBA, 
   0xD3, 0x99, 0xB5, 0xDB, 0x88, 0xAD, 0xDA, 0x85, 0xB1, 0xDD, 0x7E, 0xAE, 0xE1, 0x78, 0xA9, 0xE1, 
   0x76, 0x9E, 0xD5, 0x66, 0x8D, 0xC8, 0x72, 0x9F, 0xD6, 0x7A, 0xAB, 0xDF, 0x78, 0xAD, 0xE2, 0x77, 
   0xA9, 0xDF, 0x79, 0xA8, 0xD6, 0x9B, 0xBF, 0xE3, 0xA6, 0xBC, 0xDA, 0x95, 0x9E, 0xB0, 0x92, 0x8E, 
   0x8A, 0x9E, 0x91, 0x86, 0x9C, 0x93, 0x87, 0x9D, 0x95, 0x87, 0xA5, 0x9D, 0x8E, 0xBE, 0xB4, 0xA7, 
   0xDF, 0xD3, 0xCA, 0xDB, 0xCA, 0xC5, 0xB4, 0xA1, 0x9B, 0xA5, 0x98, 0x92, 0x98, 0x8F, 0x89, 0x91, 
   0x88, 0x80, 0x8E, 0x8D, 0x82, 0x90, 0x8A, 0x85, 0x8E, 0x7E, 0x84, 0x46, 0x3E, 0x3C, 0x56, 0x5A, 
   0x51, 0x8F, 0x93, 0x8D, 0xA6, 0xA6, 0xA0, 0xAE, 0xA6, 0xA1, 0xB1, 0xA8, 0xA3, 0xB1, 0xA9, 0xA6, 
   0xB0, 0xA5, 0xA3, 0xA5, 0x9C, 0x98, 0xA3, 0x9A, 0x95, 0xA6, 0x9C, 0x97, 0xA2, 0x98, 0x95, 0xA4, 
   0x9B, 0x9B, 0xA3, 0x99, 0x98, 0x9D, 0x94, 0x90, 0xA3, 0x96, 0x95, 0x97, 0x8A, 0x90, 0x74, 0x6B, 
   0x70, 0x5C, 0x55, 0x57, 0x65, 0x60, 0x64, 0x68, 0x62, 0x69, 0x6A, 0x64, 0x68, 0x7C, 0x7C, 0x7C, 
   0x79, 0x73, 0x74, 0x76, 0x6B, 0x70, 0x71, 0x68, 0x6B, 0x6E, 0x6B, 0x6B, 0x6C, 0x6A, 0x6D, 0x6A, 
   0x69, 0x6D, 0x6A, 0x67, 0x6E, 0x6B, 0x65, 0x6A, 0x67, 0x5E, 0x65, 0x5C, 0x56, 0x5E, 0x56, 0x52, 
   0x5B, 0x56, 0x52, 0x58, 0x62, 0x5E, 0x61, 0x6A, 0x66, 0x6A, 0x70, 0x66, 0x72, 0x6D, 0x66, 0x71, 
   0x78, 0x76, 0x7C, 0x82, 0x7E, 0x84, 0x80, 0x81, 0x89, 0x9B, 0xA0, 0xA6, 0xB7, 0xBB, 0xC3, 0xA4, 
   0xA2, 0xAE, 0x8D, 0x85, 0x95, 0x50, 0x48, 0x56, 0x30, 0x2C, 0x34, 0x4A, 0x51, 0x56, 0x5E, 0x67, 
   0x6B, 0x78, 0x7D, 0x84, 0x82, 0x80, 0x8E, 0x7A, 0x74, 0x83, 0x77, 0x72, 0x7D, 0x77, 0x78, 0x83, 
   0x7C, 0x83, 0x93, 0x7D, 0x81, 0x8F, 0xA4, 0xB3, 0xCB, 0x8A, 0xA2, 0xBD, 0x7E, 0x9E, 0xB6, 0x77, 
   0x99, 0xAD, 0x7A, 0x9A, 0xAC, 0x7B, 0x99, 0xA8, 0x8C, 0x9E, 0xA7, 0x96, 0x9B, 0xA0, 0x8E, 0x8D, 
   0x8C, 0x87, 0x83, 0x80, 0x92, 0x91, 0x8F, 0x75, 0x76, 0x78, 0x44, 0x53, 0x59, 0x46, 0x5A, 0x60, 
   0x4A, 0x59, 0x5E, 0x4D, 0x55, 0x5B, 0x41, 0x47, 0x4C, 0x74, 0x7F, 0x83, 0x81, 0x8D, 0x94, 0x62, 
   0x6E, 0x73, 0x2C, 0x39, 0x38, 0x42, 0x4D, 0x4D, 0x63, 0x6C, 0x6A, 0x6C, 0x6F, 0x6C, 0x7C, 0x7A, 
   0x78, 0xA2, 0x9E, 0x9D, 0xC1, 0xBE, 0xBC, 0xC4, 0xC0, 0xC0, 0xA8, 0xA6, 0xA8, 0x96, 0x95, 0x99, 
   0x7E, 0x7E, 0x85, 0x7C, 0x7B, 0x7D, 0x84, 0x83, 0x82, 0x8A, 0x87, 0x8A, 0x89, 0x83, 0x8B, 0x86, 
   0x7B, 0x87, 0x86, 0x7E, 0x87, 0x85, 0x86, 0x8B, 0x8D, 0x89, 0x90, 0x8A, 0x88, 0x90, 0x8C, 0x8C, 
   0x94, 0x95, 0x93, 0x99, 0x91, 0x8D, 0x92, 0x90, 0x8B, 0x8E, 0x94, 0x8E, 0x93, 0x93, 0x8F, 0x96, 
   0x8E, 0x8B, 0x90, 0x8D, 0x8A, 0x8C, 0x97, 0x92, 0x93, 0x91, 0x8D, 0x90, 0x8D, 0x89, 0x8A, 0x94, 
   0x8E, 0x90, 0x9A, 0x90, 0x98, 0x99, 0x90, 0x97, 0x97, 0x91, 0x95, 0x97, 0x91, 0x94, 0x98, 0x90, 
   0x95, 0x9A, 0x93, 0x93, 0x9C, 0x95, 0x94, 0x9B, 0x94, 0x94, 0x9D, 0x96, 0x99, 0x9E, 0x9A, 0x9C, 
   0x9B, 0x98, 0x9B, 0x9B, 0x99, 0x9F, 0x9A, 0x97, 0x9E, 0x99, 0x96, 0x9B, 0x9B, 0x99, 0x9C, 0xA7, 
   0xA6, 0xA9, 0xB3, 0xB4, 0xB7, 0xAA, 0xAB, 0xB1, 0x96, 0x95, 0x9D, 0x7D, 0x79, 0x81, 0x4B, 0x46, 
   0x4F, 0x30, 0x2C, 0x35, 0x32, 0x32, 0x3B, 0x3E, 0x3E, 0x47, 0x40, 0x41, 0x4A, 0x45, 0x46, 0x51, 
   0x44, 0x4C, 0x5A, 0x4A, 0x4F, 0x5B, 0x55, 0x56, 0x60, 0x56, 0x55, 0x5D, 0x54, 0x55, 0x5E, 0x5A, 
   0x5D, 0x65, 0x5E, 0x62, 0x69, 0x6B, 0x6D, 0x6E, 0x73, 0x73, 0x73, 0x80, 0x7F, 0x7E, 0x7C, 0x7D, 
   0x83, 0x6B, 0x72, 0x84, 0x71, 0x7B, 0x8E, 0x8A, 0x8D, 0x9C, 0x97, 0x93, 0x9E, 0x96, 0x92, 0x98, 
   0x92, 0x89, 0x92, 0x98, 0x92, 0x99, 0x96, 0x8F, 0x97, 0x8E, 0x84, 0x90, 0x88, 0x83, 0x85, 0x84, 
   0x7E, 0x87, 0x80, 0x7B, 0x83, 0x77, 0x76, 0x82, 0x5D, 0x5F, 0x75, 0x41, 0x48, 0x5D, 0x25, 0x31, 
   0x3F, 0x37, 0x3F, 0x44, 0x3E, 0x41, 0x44, 0x3D, 0x40, 0x44, 0x3D, 0x3F, 0x44, 0x3E, 0x40, 0x42, 
   0x40, 0x41, 0x44, 0x4B, 0x52, 0x57, 0x64, 0x6D, 0x74, 0x65, 0x71, 0x78, 0x5D, 0x67, 0x70, 0x44, 
   0x4C, 0x55, 0x3D, 0x48, 0x4C, 0x47, 0x55, 0x56, 0x4E, 0x5C, 0x60, 0x59, 0x62, 0x6C, 0x5B, 0x5F, 
   0x6B, 0x61, 0x66, 0x71, 0x61, 0x68, 0x73, 0x58, 0x5D, 0x67, 0x4D, 0x51, 0x5C, 0x56, 0x5A, 0x63, 
   0x73, 0x77, 0x7D, 0x81, 0x85, 0x8B, 0x8B, 0x90, 0x95, 0x83, 0x89, 0x8F, 0x79, 0x80, 0x85, 0x6C, 
   0x72, 0x78, 0x60, 0x6C, 0x71, 0x5F, 0x6C, 0x6E, 0x5C, 0x66, 0x68, 0x5B, 0x67, 0x66, 0x5E, 0x6B, 
   0x6B, 0x64, 0x6E, 0x75, 0x5B, 0x61, 0x68, 0x55, 0x5A, 0x5F, 0x4F, 0x58, 0x5E, 0x48, 0x4C, 0x5A, 
   0x36, 0x35, 0x40, 0x13, 0x0F, 0x14, 0x11, 0x17, 0x17, 0x3E, 0x42, 0x47, 0x65, 0x64, 0x6C, 0x6A, 
   0x63, 0x74, 0x65, 0x61, 0x76, 0x56, 0x53, 0x5F, 0x46, 0x4B, 0x48, 0x41, 0x42, 0x3E, 0x49, 0x52, 
   0x56, 0x55, 0x5B, 0x68, 0x53, 0x55, 0x65, 0x57, 0x59, 0x66, 0x58, 0x59, 0x66, 0x54, 0x57, 0x60, 
   0x51, 0x57, 0x5B, 0x75, 0x76, 0x74, 0x77, 0x73, 0x70, 0x5B, 0x59, 0x59, 0x55, 0x52, 0x50, 0x59, 
   0x56, 0x55, 0x4D, 0x4F, 0x52, 0x47, 0x55, 0x59, 0x83, 0x95, 0xA2, 0xAC, 0xC2, 0xDB, 0x93, 0xB4, 
   0xD6, 0x7E, 0xA9, 0xD7, 0x7B, 0xAC, 0xE3, 0x78, 0xA9, 0xE2, 0x73, 0xA7, 0xDE, 0x74, 0xA3, 0xDC, 
   0x79, 0x9A, 0xD4, 0x75, 0x94, 0xCF, 0x73, 0x99, 0xD2, 0x70, 0x9E, 0xD5, 0x75, 0xA7, 0xDE, 0x7A, 
   0xAC, 0xE0, 0x80, 0xAB, 0xDD, 0x8D, 0xAF, 0xDC, 0x96, 0xAF, 0xD2, 0x90, 0x9B, 0xB3, 0x8C, 0x8A, 
   0x8B, 0x9A, 0x90, 0x85, 0xA0, 0x95, 0x8B, 0xA4, 0x9A, 0x8C, 0xA6, 0x9D, 0x8F, 0xB1, 0xA7, 0x98, 
   0xBE, 0xB3, 0xA8, 0xCB, 0xB9, 0xB1, 0xAD, 0x9B, 0x90, 0xA2, 0x97, 0x8C, 0x9B, 0x90, 0x8B, 0x91, 
   0x87, 0x7E, 0x91, 0x8E, 0x80, 0x90, 0x8B, 0x85, 0x8F, 0x7F, 0x83, 0x54, 0x44, 0x46, 0x3E, 0x3A, 
   0x36, 0x55, 0x59, 0x56, 0x81, 0x87, 0x82, 0xAC, 0xAA, 0xA4, 0xAC, 0xA3, 0x9E, 0xAF, 0xA3, 0x9F, 
   0xAB, 0xA0, 0x9D, 0xA2, 0x9A, 0x96, 0x9F, 0x99, 0x94, 0xA3, 0x9B, 0x9A, 0xA2, 0x9A, 0x99, 0xA3, 
   0x99, 0x96, 0x9E, 0x95, 0x90, 0x9C, 0x93, 0x8E, 0xA3, 0x9B, 0x9A, 0x93, 0x8A, 0x93, 0x5A, 0x52, 
   0x5B, 0x60, 0x57, 0x5D, 0x72, 0x6B, 0x70, 0x6D, 0x64, 0x6A, 0x6D, 0x63, 0x67, 0x69, 0x66, 0x69, 
   0x6A, 0x67, 0x6A, 0x74, 0x70, 0x77, 0x6E, 0x6C, 0x71, 0x6F, 0x6E, 0x71, 0x70, 0x6E, 0x75, 0x6B, 
   0x68, 0x6F, 0x69, 0x65, 0x6E, 0x6A, 0x63, 0x6B, 0x5D, 0x56, 0x5D, 0x54, 0x51, 0x59, 0x5C, 0x5B, 
   0x61, 0x6D, 0x69, 0x6C, 0x7A, 0x73, 0x73, 0x88, 0x7F, 0x81, 0x92, 0x85, 0x8C, 0x88, 0x7E, 0x87, 
   0x7E, 0x78, 0x7F, 0x84, 0x7C, 0x81, 0x86, 0x87, 0x8E, 0x93, 0x94, 0x9E, 0x81, 0x82, 0x90, 0x71, 
   0x70, 0x7E, 0x66, 0x60, 0x6E, 0x44, 0x3D, 0x49, 0x27, 0x23, 0x29, 0x39, 0x41, 0x47, 0x43, 0x4E, 
   0x53, 0x54, 0x5F, 0x66, 0x5F, 0x68, 0x73, 0x6A, 0x6D, 0x78, 0x70, 0x6E, 0x78, 0x6B, 0x6B, 0x76, 
   0x78, 0x7D, 0x8A, 0x83, 0x88, 0x94, 0xA2, 0xAD, 0xBE, 0x80, 0x96, 0xB0, 0x79, 0x95, 0xB1, 0x82, 
   0x9E, 0xB8, 0x82, 0x9D, 0xB4, 0x8B, 0x9C, 0xAF, 0x9C, 0xA1, 0xAD, 0x9A, 0x9E, 0xA3, 0x91, 0x8F, 
   0x8F, 0x98, 0x96, 0x91, 0x9F, 0x9E, 0x9A, 0x79, 0x79, 0x78, 0x52, 0x5D, 0x61, 0x49, 0x5B, 0x5F, 
   0x50, 0x60, 0x63, 0x59, 0x66, 0x6B, 0x50, 0x5A, 0x61, 0x5C, 0x6C, 0x71, 0x76, 0x89, 0x92, 0x6F, 
   0x80, 0x86, 0x44, 0x52, 0x52, 0x2C, 0x36, 0x34, 0x40, 0x46, 0x41, 0x58, 0x56, 0x52, 0x5E, 0x60, 
   0x5D, 0x67, 0x67, 0x66, 0x87, 0x87, 0x84, 0xA8, 0xA7, 0xA4, 0xA3, 0xA0, 0xA3, 0x99, 0x92, 0x9A, 
   0x86, 0x85, 0x8B, 0x81, 0x7F, 0x84, 0x7F, 0x7E, 0x82, 0x93, 0x94, 0x97, 0x9C, 0x9C, 0xA1, 0x8C, 
   0x89, 0x8D, 0x88, 0x86, 0x89, 0x81, 0x83, 0x86, 0x81, 0x7F, 0x84, 0x82, 0x82, 0x88, 0x8C, 0x8E, 
   0x91, 0x98, 0x93, 0x95, 0x99, 0x90, 0x91, 0x8E, 0x88, 0x89, 0x89, 0x86, 0x8A, 0x88, 0x83, 0x8B, 
   0x8B, 0x88, 0x8E, 0x8E, 0x8C, 0x8C, 0x92, 0x90, 0x90, 0x91, 0x8F, 0x93, 0x8F, 0x8E, 0x8F, 0x90, 
   0x8D, 0x8F, 0x90, 0x89, 0x8F, 0x95, 0x91, 0x97, 0x96, 0x94, 0x97, 0x95, 0x93, 0x96, 0x93, 0x8F, 
   0x95, 0x97, 0x8F, 0x95, 0x9A, 0x92, 0x95, 0x9B, 0x92, 0x96, 0x9B, 0x93, 0x9A, 0x9A, 0x96, 0x9B, 
   0x97, 0x97, 0x9A, 0x99, 0x9A, 0xA1, 0x97, 0x95, 0x9D, 0x98, 0x97, 0x9D, 0x9C, 0x9C, 0x9E, 0x90, 
   0x93, 0x92, 0x67, 0x6A, 0x6B, 0x43, 0x47, 0x4C, 0x25, 0x28, 0x30, 0x1D, 0x1F, 0x27, 0x1F, 0x20, 
   0x28, 0x2D, 0x2B, 0x34, 0x39, 0x3A, 0x42, 0x40, 0x41, 0x49, 0x3F, 0x40, 0x49, 0x48, 0x45, 0x51, 
   0x47, 0x48, 0x56, 0x48, 0x4A, 0x54, 0x4F, 0x4E, 0x55, 0x53, 0x4E, 0x53, 0x58, 0x53, 0x56, 0x5B, 
   0x5B, 0x5E, 0x67, 0x6D, 0x70, 0x7A, 0x7D, 0x7D, 0x7D, 0x7B, 0x7D, 0x6C, 0x68, 0x6B, 0x59, 0x57, 
   0x63, 0x64, 0x69, 0x82, 0x71, 0x7C, 0x96, 0x8A, 0x91, 0x9F, 0x9E, 0x9B, 0xA4, 0x97, 0x94, 0x9A, 
   0x90, 0x89, 0x90, 0x8F, 0x89, 0x90, 0x91, 0x88, 0x91, 0x8C, 0x81, 0x8E, 0x86, 0x7E, 0x85, 0x7C, 
   0x77, 0x83, 0x77, 0x74, 0x81, 0x63, 0x67, 0x77, 0x43, 0x4A, 0x63, 0x27, 0x2D, 0x42, 0x0B, 0x17, 
   0x21, 0x27, 0x35, 0x3E, 0x3A, 0x41, 0x49, 0x3B, 0x41, 0x47, 0x3F, 0x40, 0x45, 0x3E, 0x41, 0x43, 
   0x42, 0x42, 0x42, 0x39, 0x41, 0x40, 0x34, 0x3D, 0x3B, 0x2C, 0x33, 0x33, 0x2B, 0x32, 0x34, 0x36, 
   0x42, 0x46, 0x3A, 0x50, 0x52, 0x4D, 0x61, 0x63, 0x57, 0x67, 0x6A, 0x5F, 0x69, 0x6E, 0x64, 0x6B, 
   0x6F, 0x6A, 0x73, 0x7A, 0x5E, 0x66, 0x74, 0x57, 0x5B, 0x66, 0x6E, 0x73, 0x77, 0x81, 0x88, 0x8A, 
   0x77, 0x7F, 0x80, 0x70, 0x75, 0x74, 0x73, 0x78, 0x79, 0x53, 0x5A, 0x5D, 0x4E, 0x54, 0x58, 0x5C, 
   0x61, 0x62, 0x5B, 0x63, 0x6A, 0x50, 0x57, 0x60, 0x46, 0x4E, 0x55, 0x46, 0x50, 0x53, 0x4C, 0x54, 
   0x58, 0x52, 0x57, 0x61, 0x51, 0x54, 0x5D, 0x56, 0x57, 0x5B, 0x48, 0x4F, 0x52, 0x39, 0x3C, 0x46, 
   0x21, 0x22, 0x29, 0x0C, 0x0B, 0x0E, 0x08, 0x10, 0x0D, 0x46, 0x50, 0x54, 0x69, 0x68, 0x79, 0x65, 
   0x63, 0x75, 0x5B, 0x59, 0x69, 0x4B, 0x47, 0x4E, 0x41, 0x45, 0x42, 0x4B, 0x4E, 0x48, 0x4C, 0x54, 
   0x53, 0x53, 0x57, 0x5B, 0x5E, 0x61, 0x64, 0x62, 0x66, 0x68, 0x5B, 0x61, 0x62, 0x57, 0x5C, 0x60, 
   0x4B, 0x4D, 0x4F, 0x47, 0x46, 0x4A, 0x50, 0x4E, 0x55, 0x50, 0x4F, 0x52, 0x51, 0x4F, 0x4F, 0x3F, 
   0x3F, 0x3F, 0x4D, 0x54, 0x57, 0x83, 0x8D, 0x9C, 0x97, 0xA7, 0xC2, 0x93, 0xAE, 0xCF, 0x96, 0xB8, 
   0xE1, 0x83, 0xAE, 0xDA, 0x7C, 0xA8, 0xDB, 0x7B, 0xA2, 0xDC, 0x78, 0x9F, 0xD6, 0x72, 0x9B, 0xD1, 
   0x74, 0x98, 0xCC, 0x76, 0x99, 0xCE, 0x78, 0x9D, 0xD3, 0x76, 0xA1, 0xD6, 0x75, 0xA6, 0xD9, 0x7E, 
   0xAD, 0xDC, 0x79, 0xAF, 0xDF, 0x78, 0xA9, 0xDB, 0x89, 0xB1, 0xD8, 0x8C, 0xA3, 0xC1, 0x82, 0x88, 
   0x91, 0x93, 0x8E, 0x88, 0xA1, 0x93, 0x8E, 0xA8, 0x9B, 0x91, 0xAB, 0xA2, 0x95, 0xB3, 0xA8, 0x9C, 
   0xB3, 0xAA, 0x9F, 0xB4, 0xA6, 0x9C, 0xA6, 0x98, 0x8B, 0xAA, 0xA1, 0x95, 0x9A, 0x8D, 0x88, 0x90, 
   0x86, 0x7A, 0x94, 0x8D, 0x80, 0x94, 0x8C, 0x86, 0x8E, 0x7D, 0x7F, 0x74, 0x61, 0x66, 0x5E, 0x52, 
   0x56, 0x58, 0x56, 0x56, 0x55, 0x5B, 0x57, 0x80, 0x80, 0x7A, 0xA9, 0xA0, 0x9A, 0xAD, 0xA2, 0x9D, 
   0xA5, 0x9F, 0x9A, 0x9D, 0x99, 0x94, 0x9D, 0x99, 0x97, 0xA1, 0x9D, 0x9C, 0xA2, 0x9D, 0x9B, 0xA1, 
   0x97, 0x93, 0x9A, 0x90, 0x8A, 0x9D, 0x94, 0x8F, 0x9F, 0x96, 0x98, 0x7A, 0x75, 0x78, 0x66, 0x60, 
   0x66, 0x79, 0x70, 0x77, 0x72, 0x6C, 0x6F, 0x6C, 0x66, 0x68, 0x6E, 0x69, 0x69, 0x69, 0x62, 0x66, 
   0x62, 0x61, 0x64, 0x5F, 0x62, 0x69, 0x5A, 0x5C, 0x62, 0x5C, 0x59, 0x5F, 0x5E, 0x56, 0x61, 0x58, 
   0x4F, 0x5B, 0x56, 0x50, 0x60, 0x58, 0x54, 0x62, 0x5D, 0x5D, 0x66, 0x7A, 0x78, 0x80, 0x7D, 0x77, 
   0x7E, 0x79, 0x71, 0x73, 0x78, 0x6D, 0x6F, 0x7F, 0x75, 0x78, 0x87, 0x7D, 0x7E, 0x7F, 0x7A, 0x7E, 
   0x78, 0x76, 0x7D, 0x74, 0x71, 0x7A, 0x9A, 0x9F, 0xAB, 0xB9, 0xB7, 0xC2, 0x93, 0x8D, 0x98, 0x80, 
   0x7F, 0x8C, 0x80, 0x7E, 0x8E, 0x64, 0x63, 0x71, 0x3D, 0x3B, 0x43, 0x37, 0x41, 0x47, 0x44, 0x4C, 
   0x54, 0x50, 0x56, 0x5D, 0x58, 0x5F, 0x60, 0x62, 0x69, 0x6C, 0x68, 0x6E, 0x77, 0x66, 0x6D, 0x74, 
   0x76, 0x7A, 0x7B, 0x8D, 0x93, 0x96, 0xAA, 0xB0, 0xC2, 0x90, 0xA4, 0xBA, 0x7B, 0xA2, 0xBB, 0x7E, 
   0xA1, 0xBE, 0x7F, 0x9D, 0xB3, 0x85, 0x95, 0xAA, 0x90, 0x93, 0xAA, 0xA3, 0xA4, 0xAC, 0x9F, 0x9A, 
   0x98, 0xA5, 0xA2, 0x9E, 0x9E, 0x9E, 0x9B, 0x66, 0x68, 0x68, 0x57, 0x61, 0x64, 0x4B, 0x5C, 0x5F, 
   0x52, 0x66, 0x68, 0x5C, 0x6B, 0x6E, 0x56, 0x5F, 0x64, 0x59, 0x61, 0x62, 0x71, 0x83, 0x8C, 0x6D, 
   0x82, 0x8B, 0x5B, 0x70, 0x77, 0x46, 0x54, 0x51, 0x32, 0x38, 0x36, 0x3A, 0x3E, 0x38, 0x42, 0x44, 
   0x40, 0x51, 0x52, 0x53, 0x61, 0x63, 0x63, 0x73, 0x78, 0x76, 0x88, 0x8A, 0x8D, 0xA1, 0xA2, 0xA5, 
   0x8F, 0x8F, 0x91, 0x85, 0x88, 0x8F, 0x88, 0x8A, 0x92, 0x84, 0x83, 0x87, 0x84, 0x84, 0x84, 0x84, 
   0x83, 0x86, 0x88, 0x87, 0x8B, 0x85, 0x86, 0x88, 0x81, 0x7D, 0x83, 0x83, 0x81, 0x88, 0x8B, 0x8E, 
   0x95, 0x94, 0x91, 0x97, 0x94, 0x93, 0x96, 0x8A, 0x8B, 0x90, 0x89, 0x87, 0x8A, 0x87, 0x85, 0x88, 
   0x83, 0x86, 0x8D, 0x83, 0x88, 0x8B, 0x87, 0x86, 0x90, 0x87, 0x8A, 0x91, 0x8D, 0x8F, 0x95, 0x9B, 
   0x99, 0x9E, 0x9C, 0x97, 0x9A, 0x96, 0x92, 0x93, 0x98, 0x98, 0x97, 0x90, 0x93, 0x95, 0x89, 0x8D, 
   0x8F, 0x8F, 0x8B, 0x91, 0x96, 0x8F, 0x94, 0x99, 0x93, 0x97, 0x9A, 0x96, 0x98, 0x98, 0x98, 0x9B, 
   0x95, 0x96, 0x9C, 0x96, 0x95, 0x9F, 0x94, 0x97, 0xA0, 0x98, 0x97, 0x9F, 0x70, 0x6F, 0x78, 0x27, 
   0x2C, 0x30, 0x16, 0x1C, 0x20, 0x25, 0x2A, 0x33, 0x3F, 0x45, 0x4E, 0x3C, 0x3F, 0x47, 0x30, 0x30, 
   0x3A, 0x33, 0x33, 0x39, 0x3C, 0x3D, 0x40, 0x40, 0x44, 0x47, 0x41, 0x45, 0x4D, 0x47, 0x48, 0x51, 
   0x4F, 0x4B, 0x53, 0x54, 0x50, 0x56, 0x56, 0x53, 0x59, 0x5D, 0x60, 0x66, 0x6C, 0x6E, 0x74, 0x75, 
   0x76, 0x78, 0x7D, 0x7E, 0x7F, 0x6D, 0x6E, 0x6C, 0x5C, 0x5B, 0x58, 0x4E, 0x4A, 0x50, 0x3D, 0x41, 
   0x52, 0x53, 0x60, 0x72, 0x79, 0x87, 0x95, 0x99, 0xA3, 0xA5, 0xA4, 0xA6, 0xA6, 0x99, 0x95, 0x99, 
   0x91, 0x8B, 0x92, 0x92, 0x87, 0x8F, 0x98, 0x8A, 0x92, 0x91, 0x86, 0x8C, 0x80, 0x7F, 0x87, 0x7D, 
   0x7A, 0x84, 0x6A, 0x6D, 0x79, 0x4A, 0x51, 0x65, 0x2E, 0x30, 0x46, 0x16, 0x1B, 0x25, 0x0D, 0x1B, 
   0x1F, 0x22, 0x32, 0x3C, 0x39, 0x3F, 0x47, 0x3B, 0x42, 0x44, 0x3D, 0x43, 0x43, 0x40, 0x47, 0x48, 
   0x42, 0x46, 0x49, 0x37, 0x3F, 0x42, 0x32, 0x37, 0x3C, 0x2E, 0x31, 0x39, 0x30, 0x33, 0x38, 0x2F, 
   0x3A, 0x3A, 0x3B, 0x48, 0x49, 0x4D, 0x5A, 0x5A, 0x51, 0x5F, 0x60, 0x56, 0x5E, 0x64, 0x57, 0x5D, 
   0x64, 0x54, 0x5F, 0x65, 0x58, 0x62, 0x65, 0x66, 0x69, 0x6C, 0x66, 0x6B, 0x70, 0x55, 0x5D, 0x60, 
   0x45, 0x4D, 0x4C, 0x49, 0x4F, 0x4E, 0x55, 0x5A, 0x5D, 0x45, 0x4C, 0x50, 0x4C, 0x52, 0x54, 0x58, 
   0x5B, 0x5E, 0x55, 0x58, 0x5E, 0x48, 0x4B, 0x55, 0x41, 0x48, 0x4D, 0x48, 0x4E, 0x50, 0x4A, 0x4D, 
   0x4E, 0x49, 0x4C, 0x4D, 0x48, 0x52, 0x55, 0x53, 0x57, 0x5B, 0x4F, 0x51, 0x51, 0x32, 0x32, 0x35, 
   0x0F, 0x13, 0x16, 0x04, 0x0C, 0x0B, 0x0E, 0x18, 0x18, 0x59, 0x66, 0x67, 0x91, 0x89, 0x97, 0x6D, 
   0x67, 0x7C, 0x59, 0x59, 0x6B, 0x47, 0x47, 0x4E, 0x4D, 0x4D, 0x4F, 0x51, 0x4D, 0x4F, 0x4E, 0x4B, 
   0x4F, 0x4E, 0x4E, 0x4F, 0x44, 0x49, 0x47, 0x47, 0x4B, 0x4C, 0x51, 0x53, 0x55, 0x52, 0x53, 0x50, 
   0x52, 0x50, 0x55, 0x4A, 0x49, 0x58, 0x41, 0x4A, 0x55, 0x3F, 0x48, 0x4D, 0x3A, 0x3E, 0x3A, 0x31, 
   0x3F, 0x3D, 0x7D, 0x8E, 0x8D, 0xA3, 0xAF, 0xC1, 0xA3, 0xAF, 0xCD, 0x9D, 0xB1, 0xD8, 0x89, 0xA0, 
   0xD2, 0x7C, 0xA0, 0xD5, 0x79, 0xA3, 0xDA, 0x79, 0xA0, 0xD9, 0x76, 0x99, 0xD1, 0x6E, 0x91, 0xC6, 
   0x6D, 0x97, 0xCA, 0x79, 0xA3, 0xD6, 0x7B, 0xA6, 0xD8, 0x78, 0xA5, 0xD5, 0x76, 0xA0, 0xD0, 0x7C, 
   0xA6, 0xD6, 0x77, 0xA8, 0xDB, 0x6F, 0xAB, 0xD9, 0x76, 0xAA, 0xD6, 0x7F, 0xA1, 0xC6, 0x82, 0x8B, 
   0x98, 0x8E, 0x8D, 0x84, 0xA8, 0xA4, 0x9B, 0xAC, 0xA1, 0x99, 0xA3, 0x9A, 0x90, 0xA4, 0x9F, 0x95, 
   0xAE, 0xA9, 0x9F, 0xB0, 0xA2, 0x9C, 0xAB, 0x99, 0x8E, 0xA9, 0x97, 0x8D, 0x93, 0x85, 0x7D, 0x8F, 
   0x84, 0x7B, 0x97, 0x8D, 0x86, 0x99, 0x91, 0x8A, 0x9A, 0x8A, 0x84, 0x85, 0x6F, 0x70, 0x66, 0x59, 
   0x5E, 0x59, 0x57, 0x58, 0x5C, 0x5D, 0x59, 0x62, 0x5E, 0x5C, 0x86, 0x7F, 0x7C, 0x9D, 0x9A, 0x94, 
   0x96, 0x95, 0x90, 0x98, 0x95, 0x92, 0xA1, 0x97, 0x96, 0xA0, 0x97, 0x95, 0x9C, 0x94, 0x98, 0x94, 
   0x8B, 0x8C, 0x88, 0x81, 0x7E, 0x87, 0x7E, 0x84, 0x6F, 0x65, 0x6D, 0x40, 0x3F, 0x3B, 0x6C, 0x6C, 
   0x67, 0x76, 0x6E, 0x70, 0x6C, 0x64, 0x6A, 0x6A, 0x6A, 0x70, 0x72, 0x6E, 0x72, 0x6D, 0x6D, 0x6C, 
   0x82, 0x81, 0x80, 0x92, 0x8F, 0x96, 0x86, 0x81, 0x8A, 0x76, 0x73, 0x7A, 0x78, 0x74, 0x7E, 0x83, 
   0x7E, 0x8A, 0x90, 0x8E, 0x96, 0x92, 0x8F, 0x96, 0x77, 0x74, 0x76, 0x76, 0x71, 0x72, 0x75, 0x6B, 
   0x73, 0x75, 0x6F, 0x71, 0x7F, 0x76, 0x7C, 0x8B, 0x7F, 0x83, 0x84, 0x76, 0x7A, 0x7C, 0x74, 0x76, 
   0x8C, 0x89, 0x8D, 0x96, 0x92, 0x99, 0xAD, 0xA9, 0xB2, 0xB5, 0xB2, 0xB9, 0xAB, 0xA4, 0xAD, 0x8D, 
   0x89, 0x96, 0x8C, 0x87, 0x97, 0x6E, 0x6C, 0x79, 0x4F, 0x4E, 0x59, 0x3F, 0x45, 0x4E, 0x43, 0x4A, 
   0x54, 0x47, 0x50, 0x56, 0x51, 0x58, 0x5C, 0x63, 0x67, 0x6F, 0x68, 0x6F, 0x78, 0x61, 0x6E, 0x72, 
   0x62, 0x6C, 0x6A, 0x88, 0x93, 0x8F, 0xAE, 0xB7, 0xC7, 0x97, 0xAC, 0xC1, 0x83, 0xA7, 0xC5, 0x80, 
   0xA6, 0xC5, 0x7B, 0xA0, 0xBB, 0x7B, 0x93, 0xAB, 0x7C, 0x83, 0x94, 0x9E, 0x9D, 0xA4, 0xA3, 0xA1, 
   0xA1, 0xA1, 0xA4, 0xA2, 0x8C, 0x93, 0x90, 0x5F, 0x63, 0x65, 0x53, 0x5C, 0x63, 0x49, 0x5B, 0x63, 
   0x52, 0x63, 0x68, 0x5C, 0x67, 0x6A, 0x59, 0x62, 0x66, 0x51, 0x56, 0x58, 0x60, 0x6C, 0x72, 0x69, 
   0x7B, 0x82, 0x5D, 0x6D, 0x72, 0x48, 0x4F, 0x4F, 0x2E, 0x35, 0x36, 0x2C, 0x31, 0x2D, 0x31, 0x33, 
   0x2D, 0x38, 0x39, 0x35, 0x3B, 0x41, 0x3C, 0x38, 0x43, 0x3F, 0x5D, 0x65, 0x66, 0xAF, 0xB4, 0xB3, 
   0xB2, 0xAF, 0xAE, 0x94, 0x95, 0x96, 0x96, 0x99, 0x9C, 0x93, 0x95, 0x97, 0x8F, 0x8E, 0x90, 0x8E, 
   0x8C, 0x8E, 0x92, 0x8F, 0x93, 0x91, 0x90, 0x92, 0x95, 0x94, 0x98, 0xA3, 0x9F, 0xA7, 0x93, 0x94, 
   0xA2, 0x83, 0x88, 0x99, 0x87, 0x8C, 0x9C, 0x85, 0x8C, 0x9C, 0x84, 0x8C, 0x97, 0x87, 0x8C, 0x97, 
   0x89, 0x8C, 0x99, 0x85, 0x88, 0x91, 0x82, 0x81, 0x8D, 0x80, 0x81, 0x8A, 0x85, 0x87, 0x8A, 0x8C, 
   0x8C, 0x8B, 0x91, 0x8C, 0x8D, 0x8F, 0x8A, 0x8B, 0x89, 0x88, 0x87, 0x82, 0x83, 0x85, 0x80, 0x82, 
   0x85, 0x85, 0x83, 0x89, 0x8C, 0x8A, 0x90, 0x93, 0x91, 0x97, 0x94, 0x95, 0x9B, 0x95, 0x97, 0x9F, 
   0x96, 0x96, 0xA0, 0x94, 0x91, 0x9C, 0x9B, 0x9D, 0xA3, 0x84, 0x88, 0x8D, 0x45, 0x4B, 0x51, 0x30, 
   0x36, 0x3A, 0x48, 0x4D, 0x4F, 0x5B, 0x5D, 0x64, 0x71, 0x76, 0x7B, 0x7D, 0x7B, 0x84, 0x7B, 0x75, 
   0x81, 0x70, 0x6A, 0x72, 0x66, 0x62, 0x66, 0x5D, 0x5B, 0x60, 0x55, 0x56, 0x5D, 0x56, 0x57, 0x5D, 
   0x60, 0x5E, 0x62, 0x61, 0x5D, 0x63, 0x67, 0x62, 0x6B, 0x74, 0x74, 0x7D, 0x74, 0x72, 0x7A, 0x66, 
   0x61, 0x65, 0x57, 0x55, 0x58, 0x4B, 0x4A, 0x4C, 0x45, 0x43, 0x47, 0x4A, 0x47, 0x4E, 0x51, 0x55, 
   0x5F, 0x62, 0x6E, 0x78, 0x83, 0x92, 0x98, 0x9A, 0xA6, 0xA3, 0xA4, 0xAA, 0xA6, 0xA3, 0xA3, 0xA4, 
   0x94, 0x8E, 0x95, 0x85, 0x7C, 0x85, 0x8A, 0x82, 0x8B, 0x87, 0x80, 0x8A, 0x7D, 0x79, 0x82, 0x78, 
   0x74, 0x7F, 0x52, 0x54, 0x62, 0x33, 0x3A, 0x4B, 0x1D, 0x20, 0x31, 0x16, 0x19, 0x22, 0x14, 0x1F, 
   0x21, 0x1F, 0x2E, 0x33, 0x36, 0x3F, 0x44, 0x40, 0x48, 0x4A, 0x40, 0x47, 0x46, 0x41, 0x49, 0x48, 
   0x3D, 0x41, 0x45, 0x2A, 0x33, 0x3A, 0x21, 0x2A, 0x36, 0x2C, 0x31, 0x3B, 0x38, 0x39, 0x3E, 0x39, 
   0x3E, 0x3E, 0x4A, 0x51, 0x52, 0x53, 0x5B, 0x5E, 0x4C, 0x56, 0x58, 0x50, 0x55, 0x59, 0x4C, 0x50, 
   0x54, 0x48, 0x4D, 0x50, 0x51, 0x56, 0x56, 0x54, 0x55, 0x57, 0x47, 0x46, 0x4B, 0x3B, 0x3E, 0x41, 
   0x34, 0x3C, 0x3B, 0x31, 0x3B, 0x3B, 0x40, 0x48, 0x4D, 0x54, 0x5B, 0x60, 0x5C, 0x61, 0x68, 0x6F, 
   0x6F, 0x79, 0x82, 0x7F, 0x86, 0x77, 0x75, 0x7C, 0x73, 0x73, 0x78, 0x7F, 0x7F, 0x86, 0x72, 0x6F, 
   0x76, 0x48, 0x48, 0x49, 0x34, 0x3E, 0x3A, 0x41, 0x43, 0x45, 0x47, 0x46, 0x47, 0x24, 0x23, 0x23, 
   0x08, 0x0C, 0x09, 0x08, 0x10, 0x0E, 0x1F, 0x29, 0x2D, 0x58, 0x64, 0x67, 0xA6, 0xA3, 0xA8, 0x89, 
   0x83, 0x91, 0x86, 0x7F, 0x90, 0x63, 0x5C, 0x68, 0x57, 0x53, 0x5F, 0x50, 0x4D, 0x58, 0x47, 0x47, 
   0x52, 0x4E, 0x4D, 0x56, 0x48, 0x4C, 0x4F, 0x46, 0x49, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x45, 
   0x4F, 0x4E, 0x4F, 0x55, 0x52, 0x61, 0x51, 0x4F, 0x61, 0x3A, 0x39, 0x43, 0x2C, 0x32, 0x2F, 0x7A, 
   0x87, 0x81, 0xB4, 0xBB, 0xB8, 0xAB, 0xAE, 0xBD, 0xA8, 0xB2, 0xCB, 0x9D, 0xB0, 0xD7, 0x87, 0x9F, 
   0xD4, 0x7E, 0xA1, 0xD8, 0x7A, 0x9F, 0xD8, 0x77, 0x9B, 0xD5, 0x77, 0xA0, 0xD5, 0x7A, 0xA2, 0xD5, 
   0x73, 0x9E, 0xD1, 0x74, 0x9E, 0xD0, 0x72, 0x9A, 0xCB, 0x6E, 0x94, 0xC5, 0x7D, 0xA1, 0xD1, 0x7E, 
   0xA5, 0xD4, 0x73, 0x9E, 0xD4, 0x70, 0xA8, 0xDA, 0x78, 0xAD, 0xDD, 0x83, 0xA8, 0xD0, 0x84, 0x8E, 
   0x9E, 0x90, 0x8C, 0x84, 0xB8, 0xAF, 0xA5, 0xB4, 0xA9, 0xA0, 0xA6, 0x9C, 0x92, 0xAD, 0xA9, 0xA1, 
   0xC5, 0xC0, 0xBA, 0xBF, 0xAD, 0xAB, 0xAD, 0x98, 0x8F, 0xA7, 0x98, 0x8C, 0x97, 0x89, 0x7C, 0x8C, 
   0x80, 0x75, 0x91, 0x89, 0x80, 0x93, 0x8D, 0x82, 0x95, 0x8E, 0x82, 0x8A, 0x7D, 0x7A, 0x6C, 0x61, 
   0x64, 0x58, 0x53, 0x56, 0x60, 0x5D, 0x5E, 0x69, 0x64, 0x66, 0x6B, 0x65, 0x66, 0x70, 0x6D, 0x6E, 
   0x7B, 0x79, 0x7A, 0x85, 0x88, 0x84, 0x97, 0x94, 0x91, 0x93, 0x8B, 0x8B, 0x80, 0x79, 0x7D, 0x7D, 
   0x75, 0x7C, 0x76, 0x71, 0x76, 0x73, 0x6D, 0x79, 0x5A, 0x55, 0x5F, 0x44, 0x43, 0x44, 0x61, 0x61, 
   0x61, 0x68, 0x63, 0x66, 0x70, 0x6A, 0x6C, 0x73, 0x70, 0x74, 0x75, 0x72, 0x75, 0x75, 0x7B, 0x7A, 
   0x91, 0x95, 0x91, 0xA6, 0xA3, 0xA6, 0x9D, 0x96, 0x99, 0x8C, 0x85, 0x86, 0x87, 0x7F, 0x85, 0x85, 
   0x7C, 0x86, 0x7E, 0x77, 0x7F, 0x77, 0x74, 0x7A, 0x6B, 0x6A, 0x6D, 0x71, 0x6C, 0x6F, 0x77, 0x6E, 
   0x76, 0x73, 0x6F, 0x73, 0x7B, 0x77, 0x79, 0x80, 0x75, 0x76, 0x78, 0x6D, 0x6E, 0x89, 0x84, 0x82, 
   0xB8, 0xB2, 0xB5, 0xC1, 0xB6, 0xC0, 0xB5, 0xAB, 0xB1, 0xAF, 0xA6, 0xAE, 0x8E, 0x84, 0x92, 0x75, 
   0x70, 0x7E, 0x77, 0x74, 0x80, 0x74, 0x6F, 0x7B, 0x59, 0x54, 0x5F, 0x44, 0x45, 0x4F, 0x44, 0x4C, 
   0x55, 0x44, 0x4E, 0x56, 0x4E, 0x55, 0x5B, 0x5F, 0x63, 0x6B, 0x67, 0x6E, 0x77, 0x62, 0x6B, 0x73, 
   0x5F, 0x66, 0x6C, 0x6B, 0x74, 0x74, 0xA0, 0xB2, 0xC2, 0x94, 0xAB, 0xC4, 0x88, 0xA6, 0xC5, 0x83, 
   0xA6, 0xC3, 0x7B, 0xA0, 0xBC, 0x7A, 0x93, 0xAC, 0x89, 0x8F, 0x99, 0xAD, 0xAB, 0xAE, 0xB1, 0xAF, 
   0xB0, 0xAA, 0xAB, 0xA9, 0x8A, 0x91, 0x8E, 0x6B, 0x6E, 0x6D, 0x59, 0x5F, 0x64, 0x49, 0x5C, 0x66, 
   0x65, 0x74, 0x7F, 0x6B, 0x74, 0x7B, 0x5D, 0x63, 0x6B, 0x4A, 0x4E, 0x52, 0x51, 0x56, 0x58, 0x66, 
   0x6C, 0x6C, 0x60, 0x65, 0x65, 0x53, 0x55, 0x53, 0x3D, 0x3E, 0x3E, 0x2E, 0x2F, 0x2E, 0x26, 0x27, 
   0x28, 0x2D, 0x2D, 0x30, 0x34, 0x35, 0x35, 0x23, 0x25, 0x22, 0x29, 0x2C, 0x28, 0x91, 0x92, 0x8E, 
   0xBF, 0xBE, 0xB6, 0xAC, 0xAC, 0xA8, 0xA0, 0xA4, 0xA3, 0x9E, 0xA2, 0xA2, 0x9D, 0x9B, 0x9D, 0xA0, 
   0x9D, 0x9E, 0xA2, 0xA2, 0xA1, 0xA6, 0xA4, 0xA1, 0xB0, 0xB0, 0xAF, 0xC9, 0xC4, 0xCD, 0x9A, 0x9D, 
   0xB1, 0x76, 0x84, 0xA1, 0x7E, 0x8C, 0xAA, 0x81, 0x8F, 0xAB, 0x7D, 0x8D, 0xA4, 0x7B, 0x88, 0x9D, 
   0x7F, 0x89, 0x9F, 0x7F, 0x86, 0x98, 0x79, 0x7E, 0x90, 0x77, 0x7C, 0x8C, 0x7F, 0x81, 0x8B, 0x83, 
   0x81, 0x87, 0x89, 0x85, 0x8A, 0x84, 0x81, 0x83, 0x85, 0x85, 0x85, 0x8C, 0x8C, 0x93, 0x8B, 0x8C, 
   0x96, 0x83, 0x85, 0x8A, 0x81, 0x83, 0x87, 0x8C, 0x8F, 0x93, 0x8C, 0x93, 0x96, 0x8E, 0x96, 0x99, 
   0x8B, 0x92, 0x96, 0x78, 0x7C, 0x81, 0x63, 0x65, 0x67, 0x52, 0x55, 0x58, 0x46, 0x4A, 0x51, 0x5A, 
   0x5C, 0x61, 0x75, 0x74, 0x76, 0x82, 0x7F, 0x84, 0x8F, 0x8F, 0x92, 0x99, 0x97, 0x9C, 0xA2, 0x9C, 
   0xA3, 0xA4, 0x9A, 0x9F, 0x9A, 0x91, 0x92, 0x8C, 0x84, 0x86, 0x73, 0x6E, 0x70, 0x6F, 0x6C, 0x6D, 
   0x70, 0x6D, 0x6E, 0x75, 0x6F, 0x74, 0x7A, 0x71, 0x79, 0x6D, 0x6A, 0x72, 0x5A, 0x56, 0x5E, 0x4A, 
   0x44, 0x4A, 0x42, 0x42, 0x44, 0x44, 0x48, 0x4A, 0x4D, 0x51, 0x54, 0x5B, 0x5E, 0x63, 0x57, 0x5C, 
   0x61, 0x68, 0x71, 0x75, 0x97, 0xA5, 0xA6, 0xA1, 0xAD, 0xA6, 0xA3, 0xAD, 0xA5, 0xA0, 0xA5, 0xA1, 
   0x95, 0x93, 0x95, 0x84, 0x7F, 0x86, 0x79, 0x75, 0x7E, 0x76, 0x6F, 0x7A, 0x6C, 0x6B, 0x71, 0x59, 
   0x59, 0x62, 0x33, 0x35, 0x45, 0x1E, 0x25, 0x32, 0x10, 0x13, 0x1E, 0x10, 0x0F, 0x19, 0x0F, 0x13, 
   0x16, 0x13, 0x21, 0x26, 0x2A, 0x34, 0x3B, 0x3C, 0x46, 0x4C, 0x42, 0x4B, 0x4C, 0x4C, 0x54, 0x53, 
   0x5B, 0x62, 0x66, 0x59, 0x63, 0x6C, 0x58, 0x62, 0x6D, 0x5F, 0x63, 0x6C, 0x59, 0x56, 0x5C, 0x3F, 
   0x3D, 0x40, 0x35, 0x35, 0x38, 0x2D, 0x2E, 0x31, 0x25, 0x29, 0x2B, 0x28, 0x2C, 0x2D, 0x29, 0x2C, 
   0x2C, 0x2E, 0x30, 0x2E, 0x34, 0x39, 0x33, 0x2D, 0x33, 0x2E, 0x28, 0x2A, 0x29, 0x25, 0x28, 0x25, 
   0x1E, 0x27, 0x21, 0x2B, 0x38, 0x35, 0x61, 0x68, 0x6C, 0x6D, 0x71, 0x77, 0x69, 0x6E, 0x73, 0x72, 
   0x73, 0x77, 0x76, 0x74, 0x78, 0x7E, 0x7B, 0x80, 0x90, 0x8E, 0x8F, 0x96, 0x92, 0x95, 0x94, 0x8A, 
   0x91, 0x69, 0x5E, 0x62, 0x2A, 0x25, 0x26, 0x22, 0x20, 0x24, 0x1D, 0x1B, 0x1C, 0x10, 0x10, 0x0F, 
   0x06, 0x0C, 0x06, 0x0A, 0x14, 0x0F, 0x19, 0x23, 0x24, 0x40, 0x4B, 0x49, 0x81, 0x86, 0x86, 0x7D, 
   0x7C, 0x83, 0x7B, 0x79, 0x83, 0x67, 0x65, 0x70, 0x57, 0x59, 0x6B, 0x59, 0x58, 0x6D, 0x55, 0x55, 
   0x6D, 0x57, 0x55, 0x6C, 0x54, 0x54, 0x64, 0x4F, 0x4E, 0x5B, 0x4C, 0x4A, 0x51, 0x4C, 0x4A, 0x4D, 
   0x4F, 0x4F, 0x54, 0x55, 0x53, 0x60, 0x46, 0x42, 0x50, 0x2F, 0x2B, 0x2F, 0x4B, 0x4E, 0x41, 0xBF, 
   0xC3, 0xAF, 0xCB, 0xC2, 0xB5, 0xBB, 0xB0, 0xB3, 0xA7, 0xA7, 0xB8, 0x96, 0xA6, 0xCA, 0x82, 0x99, 
   0xD1, 0x77, 0x99, 0xD2, 0x76, 0x9A, 0xD4, 0x73, 0x99, 0xD4, 0x7B, 0xA7, 0xDD, 0x7E, 0xA3, 0xDA, 
   0x75, 0x9C, 0xD2, 0x72, 0x98, 0xCE, 0x71, 0x97, 0xCD, 0x71, 0x93, 0xCB, 0x7C, 0x9B, 0xD2, 0x83, 
   0xA1, 0xD6, 0x74, 0x97, 0xC9, 0x6F, 0x9F, 0xD0, 0x70, 0xA0, 0xD2, 0x7C, 0x9F, 0xCC, 0x86, 0x8E, 
   0xA3, 0x91, 0x8C, 0x87, 0xA0, 0x93, 0x8B, 0xB1, 0xA6, 0x99, 0xB4, 0xA7, 0x9A, 0xBE, 0xB6, 0xAA, 
   0xDC, 0xD2, 0xC9, 0xD2, 0xBB, 0xB7, 0xAA, 0x99, 0x8D, 0xA8, 0x9E, 0x8F, 0x9F, 0x8D, 0x7F, 0x91, 
   0x82, 0x73, 0x8F, 0x85, 0x78, 0x94, 0x89, 0x80, 0x92, 0x8B, 0x84, 0x8C, 0x82, 0x80, 0x6F, 0x62, 
   0x64, 0x5C, 0x54, 0x59, 0x66, 0x60, 0x67, 0x69, 0x65, 0x6B, 0x67, 0x62, 0x68, 0x70, 0x6B, 0x72, 
   0x7B, 0x76, 0x7A, 0x81, 0x7E, 0x7E, 0x8B, 0x88, 0x89, 0x83, 0x82, 0x84, 0x77, 0x79, 0x7D, 0x81, 
   0x7E, 0x86, 0x83, 0x7D, 0x87, 0x79, 0x6F, 0x7A, 0x66, 0x60, 0x67, 0x5C, 0x57, 0x58, 0x69, 0x66, 
   0x6A, 0x71, 0x6E, 0x72, 0x77, 0x73, 0x75, 0x71, 0x70, 0x75, 0x77, 0x79, 0x80, 0x76, 0x75, 0x7A, 
   0x7C, 0x79, 0x7A, 0x7F, 0x78, 0x7C, 0x7B, 0x72, 0x75, 0x7F, 0x78, 0x79, 0x84, 0x7E, 0x83, 0x81, 
   0x7B, 0x82, 0x74, 0x69, 0x71, 0x6D, 0x69, 0x6D, 0x6D, 0x6B, 0x6E, 0x77, 0x73, 0x76, 0x79, 0x70, 
   0x78, 0x71, 0x6B, 0x72, 0x75, 0x72, 0x73, 0x7B, 0x75, 0x76, 0x7B, 0x78, 0x7A, 0x97, 0x96, 0x96, 
   0xC2, 0xBB, 0xC1, 0xC0, 0xB2, 0xC0, 0xBC, 0xB0, 0xB7, 0xB2, 0xA7, 0xB0, 0x88, 0x7F, 0x8D, 0x7E, 
   0x7F, 0x8A, 0x8C, 0x8F, 0x98, 0x83, 0x80, 0x8D, 0x64, 0x5C, 0x6C, 0x50, 0x4B, 0x59, 0x48, 0x50, 
   0x56, 0x49, 0x53, 0x58, 0x54, 0x5B, 0x62, 0x5F, 0x65, 0x6D, 0x66, 0x6E, 0x76, 0x67, 0x70, 0x79, 
   0x5E, 0x67, 0x72, 0x66, 0x6E, 0x73, 0x94, 0xB0, 0xC2, 0x93, 0xA8, 0xC1, 0x8F, 0xA4, 0xBF, 0x87, 
   0xA4, 0xBC, 0x7F, 0x9D, 0xB5, 0x7D, 0x90, 0xA5, 0x8E, 0x96, 0x9A, 0xB2, 0xB5, 0xB6, 0xB1, 0xB1, 
   0xB3, 0xA3, 0xA3, 0xA5, 0x81, 0x88, 0x86, 0x6E, 0x71, 0x6F, 0x5A, 0x5F, 0x63, 0x48, 0x59, 0x61, 
   0x74, 0x82, 0x8B, 0x78, 0x81, 0x86, 0x67, 0x6B, 0x71, 0x4B, 0x50, 0x55, 0x49, 0x4C, 0x4C, 0x63, 
   0x64, 0x61, 0x65, 0x63, 0x5F, 0x61, 0x5E, 0x59, 0x52, 0x4C, 0x47, 0x33, 0x34, 0x31, 0x27, 0x2A, 
   0x2C, 0x2D, 0x2F, 0x34, 0x39, 0x39, 0x3A, 0x2D, 0x2B, 0x29, 0x11, 0x10, 0x0D, 0x31, 0x31, 0x31, 
   0x8A, 0x8B, 0x82, 0xC1, 0xC1, 0xB9, 0xB1, 0xB3, 0xAD, 0xAE, 0xAF, 0xAB, 0xAE, 0xA8, 0xA8, 0xA4, 
   0xA2, 0xA2, 0xA9, 0xAD, 0xAA, 0xAD, 0xB2, 0xAD, 0xBE, 0xC1, 0xBE, 0xC7, 0xC7, 0xCE, 0x93, 0x9B, 
   0xAF, 0x80, 0x8F, 0xAB, 0x83, 0x92, 0xAE, 0x80, 0x8F, 0xAD, 0x7D, 0x8C, 0xAA, 0x7B, 0x8A, 0xA5, 
   0x75, 0x83, 0x9F, 0x73, 0x7F, 0x99, 0x75, 0x7F, 0x99, 0x76, 0x7F, 0x97, 0x7D, 0x82, 0x94, 0x81, 
   0x84, 0x90, 0x88, 0x8A, 0x93, 0x7D, 0x7F, 0x83, 0x7C, 0x80, 0x7F, 0x8C, 0x8E, 0x93, 0x8F, 0x91, 
   0x9A, 0x8C, 0x8D, 0x91, 0x89, 0x89, 0x8B, 0x86, 0x85, 0x87, 0x76, 0x78, 0x7A, 0x5D, 0x62, 0x65, 
   0x44, 0x49, 0x4F, 0x36, 0x39, 0x42, 0x40, 0x46, 0x47, 0x4E, 0x50, 0x55, 0x68, 0x66, 0x6F, 0x88, 
   0x85, 0x8B, 0x90, 0x8E, 0x90, 0x95, 0x91, 0x95, 0x94, 0x8F, 0x92, 0x92, 0x8F, 0x90, 0x97, 0x90, 
   0x93, 0x95, 0x8A, 0x8C, 0x90, 0x84, 0x84, 0x8D, 0x80, 0x81, 0x86, 0x7B, 0x7B, 0x81, 0x79, 0x78, 
   0x7D, 0x78, 0x7A, 0x82, 0x78, 0x7D, 0x7B, 0x6F, 0x75, 0x63, 0x5D, 0x62, 0x46, 0x43, 0x4A, 0x42, 
   0x41, 0x47, 0x48, 0x4E, 0x51, 0x56, 0x5F, 0x60, 0x5A, 0x64, 0x65, 0x5D, 0x65, 0x66, 0x50, 0x53, 
   0x57, 0x47, 0x4A, 0x4C, 0x81, 0x89, 0x87, 0xA0, 0xA9, 0xA1, 0xA1, 0xAB, 0xA3, 0x99, 0xA1, 0x9B, 
   0x92, 0x94, 0x93, 0x84, 0x84, 0x86, 0x71, 0x6E, 0x73, 0x6A, 0x61, 0x69, 0x60, 0x5B, 0x5D, 0x3D, 
   0x3B, 0x41, 0x1E, 0x20, 0x2D, 0x0E, 0x14, 0x1D, 0x08, 0x0D, 0x13, 0x10, 0x12, 0x1D, 0x1C, 0x22, 
   0x2A, 0x3B, 0x4D, 0x51, 0x56, 0x63, 0x6B, 0x5D, 0x69, 0x73, 0x61, 0x6F, 0x74, 0x87, 0x92, 0x96, 
   0x97, 0xA2, 0xAC, 0x93, 0x9E, 0xAC, 0x95, 0xA2, 0xAC, 0x9D, 0xA6, 0xAE, 0xA1, 0xA4, 0xAC, 0x7E, 
   0x82, 0x8C, 0x5E, 0x62, 0x6C, 0x31, 0x34, 0x3D, 0x14, 0x19, 0x20, 0x11, 0x18, 0x1D, 0x15, 0x1C, 
   0x20, 0x1A, 0x1E, 0x1E, 0x1C, 0x20, 0x1B, 0x1A, 0x1F, 0x18, 0x1D, 0x1F, 0x1B, 0x1E, 0x1F, 0x1A, 
   0x23, 0x2C, 0x26, 0x50, 0x5A, 0x59, 0x73, 0x74, 0x77, 0x75, 0x73, 0x78, 0x75, 0x77, 0x78, 0x78, 
   0x78, 0x75, 0x82, 0x7E, 0x7D, 0x92, 0x8B, 0x8E, 0x96, 0x91, 0x8F, 0x9D, 0x98, 0x96, 0xA5, 0x9B, 
   0x9D, 0x99, 0x8C, 0x91, 0x4F, 0x41, 0x4C, 0x12, 0x0C, 0x15, 0x0F, 0x0B, 0x11, 0x0A, 0x0A, 0x0F, 
   0x05, 0x0B, 0x0D, 0x07, 0x12, 0x10, 0x11, 0x1B, 0x1A, 0x2F, 0x36, 0x36, 0x6E, 0x7A, 0x7B, 0x70, 
   0x73, 0x7C, 0x70, 0x70, 0x7F, 0x69, 0x66, 0x7A, 0x67, 0x66, 0x82, 0x63, 0x61, 0x7B, 0x5D, 0x5C, 
   0x79, 0x5C, 0x5A, 0x7A, 0x5B, 0x5A, 0x74, 0x55, 0x52, 0x6C, 0x4B, 0x49, 0x5B, 0x44, 0x43, 0x51, 
   0x43, 0x45, 0x52, 0x45, 0x47, 0x53, 0x26, 0x28, 0x33, 0x22, 0x25, 0x23, 0x7A, 0x7C, 0x6D, 0xC1, 
   0xBE, 0xA8, 0xC4, 0xB6, 0xA8, 0xBF, 0xAE, 0xAA, 0xA7, 0x9F, 0xA8, 0x96, 0xA2, 0xC2, 0x85, 0x9B, 
   0xD1, 0x7B, 0x99, 0xD2, 0x76, 0x9D, 0xD6, 0x71, 0x9D, 0xD9, 0x79, 0xA1, 0xD9, 0x7C, 0x9A, 0xD1, 
   0x78, 0x92, 0xC9, 0x79, 0x94, 0xC9, 0x76, 0x95, 0xCB, 0x72, 0x92, 0xC9, 0x74, 0x90, 0xC6, 0x7C, 
   0x92, 0xC8, 0x7B, 0x95, 0xC4, 0x77, 0x9C, 0xC9, 0x74, 0x9C, 0xCC, 0x7D, 0x9A, 0xC7, 0x8A, 0x90, 
   0xA6, 0x8F, 0x8C, 0x88, 0x9B, 0x8F, 0x87, 0xAD, 0x9F, 0x94, 0xB0, 0xA4, 0x95, 0xB5, 0xAB, 0x9B, 
   0xBE, 0xB1, 0xA3, 0xBF, 0xAB, 0xA3, 0xA8, 0x9C, 0x8E, 0xA4, 0x9E, 0x8F, 0xA4, 0x93, 0x83, 0x9A, 
   0x8B, 0x78, 0x93, 0x87, 0x77, 0x97, 0x88, 0x7C, 0x95, 0x8F, 0x84, 0x9D, 0x94, 0x8C, 0x84, 0x77, 
   0x76, 0x69, 0x62, 0x68, 0x69, 0x63, 0x6B, 0x6F, 0x69, 0x70, 0x75, 0x6F, 0x74, 0x81, 0x7B, 0x82, 
   0x8C, 0x84, 0x87, 0x89, 0x81, 0x82, 0x82, 0x7E, 0x80, 0x76, 0x77, 0x7A, 0x8F, 0x90, 0x94, 0x94, 
   0x8D, 0x97, 0x8B, 0x82, 0x8E, 0x70, 0x6A, 0x70, 0x61, 0x5D, 0x62, 0x69, 0x62, 0x65, 0x76, 0x72, 
   0x79, 0x72, 0x70, 0x75, 0x6B, 0x68, 0x6A, 0x79, 0x79, 0x7D, 0x71, 0x74, 0x7D, 0x73, 0x6B, 0x75, 
   0x84, 0x7E, 0x82, 0x8D, 0x84, 0x8C, 0x84, 0x7B, 0x84, 0x79, 0x71, 0x78, 0x73, 0x6C, 0x73, 0x7A, 
   0x74, 0x79, 0x75, 0x6B, 0x72, 0x73, 0x6D, 0x70, 0x72, 0x6D, 0x73, 0x7C, 0x77, 0x7A, 0x80, 0x76, 
   0x7E, 0x74, 0x6A, 0x72, 0x78, 0x72, 0x72, 0x77, 0x76, 0x76, 0x86, 0x86, 0x8A, 0xA1, 0x9E, 0xA6, 
   0xB5, 0xAB, 0xB6, 0xB5, 0xA7, 0xB1, 0xBE, 0xB0, 0xB9, 0xB8, 0xAC, 0xB7, 0xA0, 0x99, 0xA6, 0x9F, 
   0x9C, 0xA6, 0xAA, 0xA6, 0xB2, 0x8C, 0x82, 0x94, 0x6E, 0x61, 0x74, 0x56, 0x4F, 0x5E, 0x4A, 0x51, 
   0x58, 0x4A, 0x54, 0x5C, 0x56, 0x5D, 0x6A, 0x61, 0x69, 0x74, 0x66, 0x6E, 0x75, 0x6E, 0x75, 0x7B, 
   0x6A, 0x73, 0x79, 0x67, 0x6B, 0x75, 0x8D, 0xAB, 0xBE, 0x92, 0xA7, 0xBD, 0x8F, 0xA3, 0xB8, 0x8D, 
   0xA0, 0xB8, 0x8C, 0x9D, 0xB3, 0x87, 0x8F, 0x9F, 0x86, 0x8C, 0x91, 0xAD, 0xB1, 0xB5, 0xA4, 0xA3, 
   0xA8, 0xA1, 0x9E, 0xA0, 0x85, 0x8A, 0x89, 0x74, 0x79, 0x7A, 0x58, 0x5D, 0x64, 0x44, 0x53, 0x5C, 
   0x74, 0x84, 0x8B, 0x84, 0x90, 0x90, 0x6D, 0x76, 0x75, 0x54, 0x5A, 0x5E, 0x3D, 0x43, 0x45, 0x52, 
   0x5B, 0x5B, 0x6B, 0x6C, 0x68, 0x6E, 0x69, 0x64, 0x69, 0x67, 0x5D, 0x46, 0x49, 0x49, 0x32, 0x32, 
   0x33, 0x31, 0x33, 0x30, 0x2F, 0x32, 0x2E, 0x2B, 0x2E, 0x2B, 0x1E, 0x22, 0x1C, 0x0A, 0x0B, 0x09, 
   0x2B, 0x2A, 0x28, 0x8E, 0x8C, 0x86, 0xCF, 0xCC, 0xC4, 0xE5, 0xE0, 0xD6, 0xCD, 0xC6, 0xBF, 0xB0, 
   0xAB, 0xAA, 0xB3, 0xB3, 0xB3, 0xB8, 0xBC, 0xBB, 0xBB, 0xBD, 0xC0, 0xAB, 0xAE, 0xBA, 0x8A, 0x95, 
   0xAD, 0x79, 0x85, 0xA3, 0x7E, 0x8B, 0xA8, 0x80, 0x8B, 0xA7, 0x80, 0x8B, 0xA6, 0x83, 0x90, 0xA9, 
   0x7F, 0x8B, 0xA5, 0x76, 0x82, 0x9D, 0x77, 0x82, 0x9D, 0x76, 0x7F, 0x98, 0x76, 0x7E, 0x94, 0x74, 
   0x7E, 0x91, 0x73, 0x7A, 0x8F, 0x61, 0x65, 0x73, 0x2B, 0x2E, 0x33, 0x32, 0x32, 0x37, 0x48, 0x48, 
   0x4C, 0x41, 0x3E, 0x42, 0x38, 0x33, 0x36, 0x2F, 0x2B, 0x2B, 0x25, 0x25, 0x23, 0x21, 0x27, 0x26, 
   0x22, 0x2B, 0x2E, 0x34, 0x3C, 0x42, 0x57, 0x58, 0x5D, 0x78, 0x74, 0x7A, 0x8C, 0x82, 0x8C, 0x9A, 
   0x90, 0x96, 0x9A, 0x94, 0x95, 0x9A, 0x94, 0x97, 0x96, 0x8C, 0x8D, 0x92, 0x88, 0x8A, 0x8F, 0x84, 
   0x88, 0x8B, 0x7F, 0x82, 0x84, 0x78, 0x7B, 0x81, 0x75, 0x7B, 0x81, 0x77, 0x7A, 0x81, 0x79, 0x79, 
   0x81, 0x79, 0x7D, 0x7F, 0x73, 0x79, 0x6F, 0x62, 0x68, 0x53, 0x50, 0x52, 0x44, 0x44, 0x46, 0x69, 
   0x6A, 0x6E, 0x70, 0x76, 0x7B, 0x68, 0x6F, 0x72, 0x61, 0x69, 0x6A, 0x60, 0x67, 0x68, 0x4D, 0x4C, 
   0x4F, 0x24, 0x1F, 0x21, 0x26, 0x26, 0x21, 0x31, 0x36, 0x30, 0x3B, 0x42, 0x3D, 0x60, 0x69, 0x63, 
   0x84, 0x89, 0x85, 0x78, 0x7B, 0x79, 0x6B, 0x6A, 0x6B, 0x60, 0x5C, 0x60, 0x4A, 0x47, 0x48, 0x30, 
   0x30, 0x34, 0x36, 0x39, 0x42, 0x4F, 0x57, 0x5E, 0x65, 0x6E, 0x76, 0x7B, 0x86, 0x90, 0x81, 0x90, 
   0x9B, 0x8B, 0x9B, 0xA4, 0x7C, 0x86, 0x93, 0x6B, 0x73, 0x82, 0x75, 0x82, 0x8D, 0x93, 0x9F, 0xA9, 
   0x92, 0x9D, 0xA9, 0x83, 0x8C, 0x9B, 0x87, 0x93, 0x9E, 0x8D, 0x9A, 0xA0, 0x92, 0x9E, 0xA5, 0x87, 
   0x96, 0xA1, 0x8C, 0x99, 0xA7, 0x81, 0x8B, 0x97, 0x58, 0x60, 0x6D, 0x2D, 0x35, 0x44, 0x1C, 0x26, 
   0x34, 0x29, 0x2E, 0x39, 0x2D, 0x2D, 0x32, 0x20, 0x21, 0x22, 0x23, 0x23, 0x22, 0x23, 0x24, 0x25, 
   0x48, 0x4D, 0x50, 0x70, 0x75, 0x79, 0x74, 0x72, 0x74, 0x78, 0x75, 0x77, 0x79, 0x78, 0x78, 0x85, 
   0x82, 0x7F, 0x97, 0x90, 0x8C, 0x96, 0x8D, 0x8E, 0x96, 0x8E, 0x8C, 0x97, 0x93, 0x90, 0x95, 0x90, 
   0x8E, 0xA4, 0x9B, 0x9E, 0x90, 0x86, 0x91, 0x30, 0x27, 0x2F, 0x0B, 0x06, 0x09, 0x0C, 0x0B, 0x10, 
   0x06, 0x0B, 0x11, 0x07, 0x0F, 0x11, 0x0C, 0x13, 0x14, 0x26, 0x2A, 0x2C, 0x50, 0x5E, 0x66, 0x53, 
   0x5A, 0x68, 0x5E, 0x60, 0x73, 0x68, 0x65, 0x7D, 0x6B, 0x69, 0x87, 0x5D, 0x5C, 0x79, 0x5D, 0x5F, 
   0x7B, 0x5F, 0x5F, 0x79, 0x5F, 0x5D, 0x75, 0x61, 0x5E, 0x78, 0x64, 0x64, 0x78, 0x5C, 0x5F, 0x70, 
   0x5B, 0x5E, 0x6D, 0x53, 0x53, 0x5A, 0x1F, 0x1E, 0x1F, 0x3C, 0x3E, 0x37, 0x99, 0x95, 0x89, 0xB4, 
   0xAC, 0x9E, 0xBD, 0xB2, 0xA8, 0xBE, 0xAE, 0xA5, 0xAA, 0xA0, 0xA6, 0x9D, 0xAA, 0xC6, 0x90, 0xA8, 
   0xD8, 0x85, 0xA1, 0xD9, 0x76, 0x9C, 0xD5, 0x70, 0x9A, 0xD5, 0x74, 0x91, 0xCA, 0x7A, 0x8E, 0xC2, 
   0x78, 0x85, 0xB8, 0x74, 0x83, 0xB3, 0x79, 0x8C, 0xBE, 0x7A, 0x8E, 0xC4, 0x7A, 0x90, 0xC5, 0x7E, 
   0x90, 0xC2, 0x7B, 0x8E, 0xBC, 0x7C, 0x97, 0xC3, 0x82, 0xA3, 0xD1, 0x91, 0xA9, 0xD4, 0x94, 0x99, 
   0xAE, 0x8F, 0x91, 0x89, 0x9A, 0x94, 0x86, 0xA2, 0x9A, 0x92, 0xA6, 0xA0, 0x93, 0xA8, 0xA2, 0x92, 
   0xB1, 0xA6, 0x96, 0xB3, 0xA0, 0x96, 0xAA, 0x99, 0x8B, 0xAC, 0x9C, 0x90, 0xAD, 0x9D, 0x8F, 0xA4, 
   0x92, 0x87, 0x99, 0x89, 0x7F, 0x92, 0x86, 0x77, 0x94, 0x90, 0x7C, 0x9D, 0x92, 0x87, 0x8C, 0x7F, 
   0x7F, 0x79, 0x74, 0x79, 0x7C, 0x75, 0x7C, 0x83, 0x7A, 0x7F, 0x8D, 0x87, 0x8B, 0x8C, 0x85, 0x8A, 
   0x8E, 0x84, 0x88, 0x8A, 0x80, 0x83, 0x7C, 0x74, 0x77, 0x79, 0x77, 0x7A, 0xA0, 0x9A, 0xA1, 0x95, 
   0x8A, 0x97, 0x75, 0x6F, 0x7E, 0x5C, 0x5D, 0x62, 0x6E, 0x6C, 0x6F, 0x74, 0x6D, 0x6D, 0x70, 0x6C, 
   0x70, 0x6D, 0x6B, 0x6F, 0x64, 0x61, 0x63, 0x7C, 0x7C, 0x81, 0x80, 0x84, 0x8E, 0x7E, 0x7E, 0x84, 
   0x82, 0x81, 0x83, 0x99, 0x94, 0x9B, 0x92, 0x8A, 0x93, 0x88, 0x7D, 0x85, 0x8F, 0x82, 0x88, 0x74, 
   0x67, 0x6B, 0x72, 0x6C, 0x6E, 0x73, 0x6C, 0x71, 0x71, 0x6A, 0x70, 0x79, 0x73, 0x78, 0x7B, 0x75, 
   0x79, 0x76, 0x6C, 0x74, 0x6E, 0x68, 0x6A, 0x7F, 0x83, 0x82, 0xA3, 0xA6, 0xA9, 0xAF, 0xAA, 0xB5, 
   0xAE, 0xA6, 0xAF, 0xAE, 0xA6, 0xA8, 0xBF, 0xB3, 0xBD, 0xAC, 0xA1, 0xB1, 0x97, 0x92, 0xA2, 0x92, 
   0x8D, 0x9B, 0x8F, 0x8C, 0x9C, 0x83, 0x7C, 0x8D, 0x72, 0x69, 0x78, 0x5E, 0x5A, 0x66, 0x4C, 0x52, 
   0x5A, 0x48, 0x55, 0x5F, 0x53, 0x60, 0x6F, 0x62, 0x6C, 0x7C, 0x63, 0x6B, 0x78, 0x6B, 0x71, 0x7A, 
   0x78, 0x7B, 0x84, 0x71, 0x6E, 0x7B, 0x73, 0x8F, 0xA0, 0x8D, 0xA3, 0xB4, 0x92, 0xA6, 0xBB, 0x92, 
   0x9E, 0xB9, 0x96, 0x9D, 0xB0, 0x97, 0x98, 0xA0, 0x9C, 0x9C, 0xA1, 0xBE, 0xBF, 0xC3, 0xB6, 0xB6, 
   0xB5, 0xA3, 0xA3, 0xA2, 0x7D, 0x85, 0x86, 0x69, 0x75, 0x7A, 0x51, 0x5B, 0x63, 0x47, 0x56, 0x5F, 
   0x79, 0x8D, 0x93, 0x8F, 0x9F, 0xA1, 0x78, 0x82, 0x81, 0x55, 0x5C, 0x62, 0x33, 0x38, 0x3C, 0x2F, 
   0x39, 0x3C, 0x40, 0x42, 0x44, 0x4C, 0x4B, 0x4E, 0x5B, 0x5E, 0x5B, 0x6D, 0x6C, 0x6C, 0x4B, 0x4A, 
   0x4C, 0x3B, 0x3B, 0x39, 0x2D, 0x2D, 0x2A, 0x2D, 0x2C, 0x29, 0x2E, 0x2E, 0x28, 0x19, 0x18, 0x17, 
   0x0D, 0x0F, 0x0E, 0x1D, 0x21, 0x1F, 0x63, 0x63, 0x5E, 0xC2, 0xC0, 0xB6, 0xD7, 0xD4, 0xC8, 0xDA, 
   0xD6, 0xCE, 0xEE, 0xEA, 0xE6, 0xDF, 0xDB, 0xDC, 0xB7, 0xB6, 0xC0, 0x96, 0x98, 0xAD, 0x81, 0x8A, 
   0xA7, 0x7D, 0x87, 0xA8, 0x76, 0x81, 0xA1, 0x75, 0x81, 0x9C, 0x79, 0x85, 0x9E, 0x79, 0x86, 0x9B, 
   0x7A, 0x81, 0x98, 0x7A, 0x80, 0x9A, 0x75, 0x7B, 0x95, 0x73, 0x78, 0x90, 0x77, 0x7C, 0x92, 0x72, 
   0x79, 0x8F, 0x6E, 0x73, 0x8D, 0x6A, 0x6D, 0x82, 0x37, 0x3A, 0x43, 0x12, 0x13, 0x18, 0x13, 0x15, 
   0x18, 0x10, 0x14, 0x16, 0x0A, 0x0C, 0x0D, 0x0D, 0x0F, 0x0F, 0x27, 0x2B, 0x2A, 0x3C, 0x42, 0x41, 
   0x49, 0x50, 0x51, 0x5D, 0x61, 0x64, 0x99, 0x8C, 0x94, 0xA1, 0x97, 0x9D, 0xA1, 0x95, 0x9B, 0x9E, 
   0x91, 0x92, 0x98, 0x8D, 0x8C, 0x95, 0x8B, 0x8B, 0x93, 0x84, 0x85, 0x8C, 0x7F, 0x7F, 0x87, 0x7B, 
   0x7C, 0x82, 0x79, 0x7A, 0x7D, 0x74, 0x78, 0x80, 0x76, 0x7F, 0x80, 0x77, 0x7D, 0x82, 0x7A, 0x7B, 
   0x7F, 0x76, 0x7A, 0x73, 0x68, 0x6F, 0x5A, 0x51, 0x59, 0x3E, 0x3E, 0x41, 0x50, 0x53, 0x52, 0x78, 
   0x77, 0x79, 0x70, 0x74, 0x75, 0x67, 0x6C, 0x6E, 0x68, 0x6A, 0x6D, 0x61, 0x63, 0x66, 0x4B, 0x4A, 
   0x4D, 0x32, 0x2C, 0x2E, 0x2B, 0x26, 0x26, 0x14, 0x19, 0x18, 0x06, 0x0B, 0x09, 0x12, 0x15, 0x13, 
   0x50, 0x54, 0x52, 0x5C, 0x62, 0x62, 0x53, 0x59, 0x5C, 0x51, 0x5A, 0x5E, 0x5A, 0x67, 0x6B, 0x74, 
   0x81, 0x87, 0x82, 0x90, 0x95, 0x7C, 0x86, 0x8E, 0x72, 0x79, 0x83, 0x68, 0x73, 0x7C, 0x5F, 0x69, 
   0x79, 0x57, 0x65, 0x74, 0x86, 0x8E, 0x9E, 0x9C, 0xA3, 0xB2, 0x85, 0x95, 0xA1, 0x87, 0x98, 0x9F, 
   0x86, 0x96, 0x9C, 0x84, 0x8C, 0x95, 0x86, 0x8E, 0x99, 0x8C, 0x96, 0x9C, 0x8C, 0x95, 0x9E, 0x7A, 
   0x86, 0x96, 0x7F, 0x8C, 0x9A, 0x90, 0x9B, 0xA4, 0x8E, 0x9B, 0xA4, 0x7F, 0x8C, 0x9C, 0x71, 0x81, 
   0x92, 0x71, 0x7E, 0x8E, 0x4B, 0x4F, 0x5A, 0x19, 0x1B, 0x20, 0x21, 0x27, 0x27, 0x43, 0x48, 0x4D, 
   0x65, 0x67, 0x71, 0x6E, 0x6F, 0x78, 0x76, 0x77, 0x7A, 0x79, 0x7A, 0x7C, 0x84, 0x81, 0x84, 0x97, 
   0x92, 0x92, 0x9E, 0x99, 0x98, 0x96, 0x8F, 0x90, 0x91, 0x8E, 0x8B, 0x90, 0x90, 0x8B, 0x91, 0x8F, 
   0x8D, 0x97, 0x92, 0x91, 0xAD, 0xA8, 0xAA, 0x95, 0x8A, 0x91, 0x28, 0x1E, 0x20, 0x0F, 0x07, 0x0A, 
   0x0B, 0x09, 0x08, 0x0B, 0x0F, 0x0C, 0x11, 0x14, 0x13, 0x1F, 0x21, 0x20, 0x37, 0x42, 0x47, 0x4F, 
   0x56, 0x60, 0x53, 0x59, 0x65, 0x5D, 0x5F, 0x6C, 0x63, 0x65, 0x79, 0x61, 0x64, 0x7A, 0x5F, 0x64, 
   0x79, 0x63, 0x60, 0x6E, 0x60, 0x5C, 0x68, 0x57, 0x55, 0x65, 0x4D, 0x50, 0x5C, 0x54, 0x58, 0x67, 
   0x5C, 0x5E, 0x6D, 0x56, 0x56, 0x5C, 0x3B, 0x3A, 0x3A, 0x72, 0x73, 0x6A, 0x9F, 0x99, 0x91, 0xA8, 
   0xA1, 0x9B, 0xAC, 0xA7, 0xAA, 0xAA, 0xA4, 0xA2, 0xA1, 0xA0, 0xAA, 0x99, 0xAA, 0xC6, 0x98, 0xB0, 
   0xDC, 0x86, 0xA3, 0xD7, 0x75, 0x96, 0xCC, 0x6C, 0x89, 0xC0, 0x72, 0x87, 0xBA, 0x7A, 0x85, 0xB8, 
   0x7B, 0x84, 0xB4, 0x72, 0x82, 0xAE, 0x7C, 0x8B, 0xBB, 0x83, 0x90, 0xC4, 0x81, 0x91, 0xC4, 0x7A, 
   0x8C, 0xBA, 0x7F, 0x92, 0xBF, 0x7E, 0x98, 0xC3, 0x7C, 0x9F, 0xC9, 0x86, 0xA0, 0xC9, 0x89, 0x93, 
   0xA7, 0x8A, 0x8E, 0x87, 0x9D, 0x96, 0x8A, 0xAB, 0x9B, 0x95, 0xAD, 0x9D, 0x93, 0xAE, 0xA3, 0x95, 
   0xBF, 0xB4, 0xA3, 0xB8, 0xA5, 0x98, 0xA3, 0x8F, 0x7D, 0xA8, 0x97, 0x86, 0xB0, 0x9F, 0x8F, 0xAC, 
   0x94, 0x8C, 0xA1, 0x8A, 0x84, 0x98, 0x8C, 0x7E, 0x9B, 0x91, 0x7F, 0x8D, 0x7D, 0x77, 0x77, 0x6A, 
   0x6F, 0x81, 0x7B, 0x80, 0x90, 0x88, 0x8C, 0x96, 0x8B, 0x91, 0x92, 0x89, 0x90, 0x8C, 0x87, 0x8C, 
   0x8F, 0x85, 0x8E, 0x8C, 0x83, 0x8E, 0x89, 0x83, 0x89, 0x82, 0x7C, 0x84, 0x98, 0x90, 0x9D, 0x84, 
   0x7B, 0x8C, 0x68, 0x62, 0x73, 0x6A, 0x66, 0x6C, 0x73, 0x6F, 0x70, 0x6A, 0x65, 0x62, 0x6D, 0x69, 
   0x6A, 0x78, 0x73, 0x77, 0x72, 0x6B, 0x6E, 0x7B, 0x77, 0x7D, 0x7B, 0x79, 0x81, 0x77, 0x7A, 0x7F, 
   0x84, 0x86, 0x85, 0x86, 0x84, 0x87, 0x83, 0x7B, 0x82, 0x87, 0x7C, 0x82, 0x8F, 0x83, 0x89, 0x7D, 
   0x74, 0x77, 0x7A, 0x75, 0x75, 0x75, 0x6F, 0x77, 0x82, 0x7D, 0x84, 0x82, 0x7C, 0x83, 0x77, 0x74, 
   0x76, 0x77, 0x74, 0x7B, 0x89, 0x8A, 0x90, 0xB0, 0xB2, 0xB8, 0xC0, 0xBF, 0xC5, 0xAF, 0xA6, 0xB0, 
   0x9E, 0x95, 0x9E, 0xA4, 0x9F, 0xA8, 0xB9, 0xB1, 0xBF, 0x9E, 0x94, 0xA7, 0x8F, 0x88, 0x9A, 0x90, 
   0x89, 0x9A, 0x88, 0x8B, 0x98, 0x87, 0x8B, 0x96, 0x7C, 0x7B, 0x88, 0x6C, 0x66, 0x77, 0x58, 0x56, 
   0x61, 0x53, 0x5B, 0x63, 0x5B, 0x6B, 0x76, 0x67, 0x74, 0x82, 0x6F, 0x7A, 0x88, 0x76, 0x7F, 0x8E, 
   0x7E, 0x80, 0x91, 0x7A, 0x7C, 0x88, 0x6C, 0x88, 0x99, 0x88, 0x9D, 0xB0, 0x8D, 0xA1, 0xB9, 0x8D, 
   0x9B, 0xB2, 0x95, 0x9B, 0xA8, 0x95, 0x97, 0x98, 0xA2, 0xA1, 0xA3, 0xAD, 0xB1, 0xB0, 0x9E, 0xA1, 
   0x9C, 0x7D, 0x81, 0x84, 0x68, 0x73, 0x7B, 0x5F, 0x71, 0x79, 0x51, 0x60, 0x69, 0x51, 0x60, 0x68, 
   0x78, 0x8A, 0x90, 0x94, 0xA2, 0xA6, 0x84, 0x8B, 0x8F, 0x5D, 0x65, 0x6C, 0x41, 0x46, 0x48, 0x3C, 
   0x41, 0x42, 0x3F, 0x40, 0x42, 0x3F, 0x41, 0x49, 0x42, 0x47, 0x4E, 0x5E, 0x61, 0x5E, 0x56, 0x5A, 
   0x5C, 0x47, 0x4A, 0x4E, 0x3C, 0x3B, 0x3D, 0x2E, 0x2A, 0x29, 0x2F, 0x2C, 0x29, 0x35, 0x35, 0x37, 
   0x20, 0x26, 0x21, 0x0E, 0x13, 0x12, 0x0C, 0x0D, 0x0F, 0x2C, 0x2D, 0x2A, 0x5F, 0x61, 0x59, 0x99, 
   0x9B, 0x92, 0xCB, 0xCA, 0xC2, 0xD0, 0xCD, 0xCC, 0xB0, 0xB1, 0xB9, 0x92, 0x95, 0xA7, 0x80, 0x89, 
   0xA2, 0x7A, 0x83, 0x9D, 0x72, 0x7D, 0x95, 0x70, 0x7D, 0x94, 0x70, 0x7E, 0x96, 0x6D, 0x7A, 0x92, 
   0x6C, 0x72, 0x8C, 0x67, 0x6A, 0x85, 0x68, 0x6C, 0x85, 0x6F, 0x70, 0x88, 0x76, 0x77, 0x8C, 0x6E, 
   0x73, 0x86, 0x64, 0x68, 0x7D, 0x66, 0x6A, 0x79, 0x44, 0x49, 0x4B, 0x13, 0x17, 0x18, 0x14, 0x18, 
   0x1A, 0x19, 0x1B, 0x1E, 0x16, 0x18, 0x19, 0x27, 0x28, 0x2A, 0x44, 0x45, 0x4B, 0x52, 0x56, 0x5D, 
   0x69, 0x6B, 0x73, 0x88, 0x85, 0x8C, 0xA3, 0x94, 0x9B, 0x9A, 0x92, 0x94, 0x97, 0x8F, 0x91, 0x96, 
   0x8D, 0x8B, 0x90, 0x87, 0x83, 0x8E, 0x84, 0x82, 0x8A, 0x7F, 0x7D, 0x85, 0x7D, 0x78, 0x7F, 0x77, 
   0x74, 0x7D, 0x78, 0x76, 0x80, 0x7B, 0x7D, 0x85, 0x7B, 0x83, 0x85, 0x7B, 0x7F, 0x78, 0x6F, 0x71, 
   0x6B, 0x63, 0x67, 0x5C, 0x56, 0x5B, 0x48, 0x46, 0x4A, 0x38, 0x3B, 0x3E, 0x60, 0x61, 0x60, 0x7F, 
   0x7D, 0x7C, 0x72, 0x73, 0x72, 0x64, 0x69, 0x68, 0x5F, 0x63, 0x66, 0x54, 0x59, 0x5E, 0x4B, 0x4D, 
   0x50, 0x3F, 0x3B, 0x3E, 0x2C, 0x28, 0x2C, 0x15, 0x18, 0x18, 0x0B, 0x11, 0x0F, 0x06, 0x08, 0x08, 
   0x23, 0x27, 0x28, 0x44, 0x4C, 0x51, 0x54, 0x60, 0x69, 0x61, 0x74, 0x7D, 0x72, 0x88, 0x8D, 0x75, 
   0x88, 0x8D, 0x74, 0x83, 0x88, 0x79, 0x82, 0x8A, 0x7F, 0x85, 0x90, 0x81, 0x8B, 0x94, 0x92, 0x99, 
   0xA7, 0x92, 0x99, 0xA8, 0x9A, 0x9D, 0xAC, 0x96, 0x98, 0xA6, 0x8B, 0x94, 0xA0, 0x8A, 0x94, 0x9E, 
   0x86, 0x90, 0x97, 0x89, 0x8E, 0x96, 0x89, 0x8E, 0x99, 0x84, 0x8A, 0x96, 0x7E, 0x83, 0x97, 0x78, 
   0x7F, 0x96, 0x7A, 0x83, 0x93, 0x7A, 0x84, 0x8C, 0x79, 0x87, 0x8E, 0x77, 0x8D, 0x9A, 0x67, 0x7E, 
   0x8E, 0x5A, 0x6E, 0x7C, 0x37, 0x41, 0x49, 0x29, 0x2D, 0x30, 0x65, 0x6A, 0x6A, 0x8B, 0x91, 0x94, 
   0x75, 0x77, 0x7F, 0x6F, 0x70, 0x79, 0x72, 0x76, 0x77, 0x7B, 0x80, 0x7F, 0x84, 0x83, 0x83, 0x8A, 
   0x84, 0x82, 0x8B, 0x84, 0x85, 0x8E, 0x86, 0x88, 0x8B, 0x88, 0x85, 0x8B, 0x8C, 0x87, 0x93, 0x91, 
   0x90, 0x97, 0x94, 0x93, 0x99, 0x96, 0x94, 0xA6, 0x9B, 0xA0, 0x71, 0x63, 0x6A, 0x1F, 0x14, 0x19, 
   0x0A, 0x05, 0x04, 0x11, 0x0F, 0x0C, 0x16, 0x15, 0x16, 0x1A, 0x1C, 0x18, 0x30, 0x30, 0x2E, 0x4C, 
   0x4F, 0x54, 0x57, 0x5B, 0x64, 0x5B, 0x5C, 0x66, 0x60, 0x5E, 0x6B, 0x5A, 0x5A, 0x68, 0x5F, 0x5D, 
   0x6C, 0x61, 0x5A, 0x63, 0x58, 0x53, 0x58, 0x4D, 0x4A, 0x52, 0x40, 0x44, 0x4B, 0x47, 0x4B, 0x57, 
   0x4E, 0x50, 0x60, 0x3A, 0x3D, 0x45, 0x42, 0x45, 0x44, 0x7E, 0x7B, 0x6F, 0x9D, 0x94, 0x88, 0xA5, 
   0x9D, 0x97, 0xA4, 0xA0, 0xA6, 0xA2, 0xA1, 0xA3, 0x9A, 0x9F, 0xAB, 0x8F, 0xA0, 0xBC, 0x8C, 0xA2, 
   0xCE, 0x81, 0x9B, 0xCF, 0x7C, 0x97, 0xCB, 0x7B, 0x92, 0xC5, 0x7A, 0x8E, 0xBE, 0x79, 0x84, 0xB4, 
   0x7F, 0x8C, 0xB8, 0x83, 0x98, 0xC2, 0x8B, 0x9F, 0xCB, 0x84, 0x92, 0xC3, 0x80, 0x91, 0xC1, 0x82, 
   0x93, 0xC1, 0x80, 0x95, 0xC2, 0x80, 0x9C, 0xC7, 0x80, 0xA5, 0xCF, 0x83, 0xA1, 0xC8, 0x82, 0x8C, 
   0xA1, 0x88, 0x89, 0x86, 0x9A, 0x91, 0x8A, 0xA8, 0x9A, 0x8E, 0xB1, 0x9D, 0x8F, 0xB8, 0xA6, 0x97, 
   0xC6, 0xB6, 0xA6, 0xC6, 0xAF, 0xA0, 0xAD, 0x95, 0x81, 0xB1, 0x9D, 0x88, 0xB7, 0xA5, 0x8F, 0xB5, 
   0x9D, 0x8E, 0xA7, 0x8E, 0x82, 0x9B, 0x8F, 0x81, 0xA1, 0x94, 0x87, 0x93, 0x80, 0x7E, 0x7B, 0x6F, 
   0x74, 0x82, 0x7A, 0x7E, 0x90, 0x86, 0x89, 0x99, 0x8D, 0x93, 0x99, 0x91, 0x98, 0x89, 0x83, 0x8B, 
   0x8E, 0x85, 0x90, 0x89, 0x86, 0x93, 0x92, 0x90, 0x9A, 0x99, 0x92, 0x9E, 0x92, 0x87, 0x9A, 0x75, 
   0x6E, 0x7F, 0x67, 0x63, 0x6F, 0x74, 0x6D, 0x70, 0x6D, 0x6B, 0x70, 0x73, 0x73, 0x75, 0x79, 0x78, 
   0x7B, 0x7B, 0x76, 0x7A, 0x77, 0x6F, 0x70, 0x7E, 0x79, 0x7A, 0x8D, 0x89, 0x8A, 0x81, 0x80, 0x84, 
   0x80, 0x7D, 0x7D, 0x7A, 0x74, 0x76, 0x79, 0x71, 0x77, 0x7A, 0x70, 0x77, 0x75, 0x6D, 0x73, 0x79, 
   0x73, 0x78, 0x7C, 0x76, 0x77, 0x77, 0x74, 0x7C, 0x7A, 0x76, 0x7D, 0x78, 0x71, 0x76, 0x73, 0x70, 
   0x72, 0x88, 0x8B, 0x90, 0xB1, 0xB4, 0xBB, 0xC6, 0xC1, 0xCC, 0xBD, 0xB2, 0xBE, 0x9E, 0x8E, 0x9A, 
   0x95, 0x89, 0x94, 0x9A, 0x91, 0x9F, 0xA5, 0x9B, 0xAB, 0xA5, 0x9C, 0xAC, 0x9B, 0x94, 0xA5, 0x94, 
   0x8E, 0x9E, 0x88, 0x89, 0x97, 0xA7, 0xAA, 0xB5, 0xB0, 0xAE, 0xBC, 0x9E, 0x97, 0xA9, 0x7B, 0x6F, 
   0x7F, 0x57, 0x55, 0x5F, 0x5E, 0x68, 0x6D, 0x6D, 0x7A, 0x7E, 0x79, 0x86, 0x8E, 0x82, 0x8D, 0x97, 
   0x81, 0x8A, 0x95, 0x7A, 0x81, 0x88, 0x70, 0x8A, 0x9D, 0x83, 0xA4, 0xBA, 0x8D, 0xAA, 0xC1, 0x95, 
   0xA0, 0xAC, 0x95, 0x94, 0x9A, 0x8F, 0x8C, 0x8D, 0xA1, 0x9F, 0x9F, 0x90, 0x93, 0x95, 0x7B, 0x7D, 
   0x81, 0x6C, 0x72, 0x7B, 0x63, 0x6F, 0x7A, 0x59, 0x6D, 0x79, 0x4D, 0x60, 0x6C, 0x59, 0x68, 0x76, 
   0x75, 0x87, 0x93, 0x87, 0x97, 0x9D, 0x7A, 0x86, 0x8A, 0x5E, 0x66, 0x6B, 0x45, 0x4C, 0x4B, 0x4F, 
   0x56, 0x52, 0x4B, 0x51, 0x51, 0x42, 0x46, 0x4D, 0x3E, 0x40, 0x4A, 0x3F, 0x44, 0x49, 0x45, 0x49, 
   0x4E, 0x3F, 0x41, 0x49, 0x39, 0x3B, 0x41, 0x23, 0x26, 0x24, 0x23, 0x28, 0x21, 0x36, 0x3A, 0x37, 
   0x36, 0x3C, 0x38, 0x2B, 0x2B, 0x2A, 0x25, 0x23, 0x28, 0x23, 0x24, 0x27, 0x29, 0x2B, 0x2C, 0x39, 
   0x3A, 0x3B, 0x6B, 0x6E, 0x6B, 0xA4, 0xA1, 0xA0, 0x99, 0x99, 0x9A, 0x83, 0x89, 0x8F, 0x7D, 0x86, 
   0x93, 0x72, 0x7A, 0x8C, 0x69, 0x74, 0x85, 0x70, 0x7B, 0x8E, 0x71, 0x79, 0x91, 0x65, 0x6E, 0x8A, 
   0x65, 0x6B, 0x8A, 0x66, 0x6D, 0x87, 0x68, 0x6E, 0x87, 0x6A, 0x6E, 0x86, 0x6C, 0x6F, 0x82, 0x68, 
   0x6F, 0x7D, 0x6B, 0x70, 0x80, 0x6C, 0x6D, 0x78, 0x57, 0x5B, 0x5A, 0x18, 0x1B, 0x1D, 0x0D, 0x0D, 
   0x10, 0x17, 0x1E, 0x22, 0x2F, 0x37, 0x36, 0x50, 0x53, 0x54, 0x5B, 0x59, 0x5E, 0x65, 0x62, 0x6A, 
   0x89, 0x82, 0x8B, 0x9B, 0x90, 0x96, 0x98, 0x8D, 0x90, 0x98, 0x8F, 0x90, 0x93, 0x8C, 0x8B, 0x8B, 
   0x84, 0x84, 0x81, 0x7B, 0x7C, 0x7E, 0x79, 0x76, 0x7D, 0x79, 0x76, 0x80, 0x79, 0x76, 0x86, 0x7E, 
   0x7A, 0x86, 0x80, 0x7D, 0x83, 0x7F, 0x81, 0x80, 0x7A, 0x7F, 0x7A, 0x74, 0x77, 0x68, 0x64, 0x67, 
   0x5D, 0x55, 0x5C, 0x4F, 0x4A, 0x4C, 0x40, 0x44, 0x42, 0x4E, 0x52, 0x55, 0x70, 0x72, 0x71, 0x7D, 
   0x7C, 0x7C, 0x6E, 0x6F, 0x73, 0x5F, 0x64, 0x6A, 0x59, 0x5F, 0x65, 0x4F, 0x56, 0x5C, 0x4B, 0x50, 
   0x53, 0x42, 0x42, 0x42, 0x2B, 0x27, 0x25, 0x13, 0x15, 0x13, 0x09, 0x10, 0x0F, 0x23, 0x2E, 0x30, 
   0x4E, 0x5B, 0x60, 0x65, 0x75, 0x80, 0x68, 0x7B, 0x8A, 0x64, 0x79, 0x87, 0x6B, 0x7D, 0x84, 0x74, 
   0x85, 0x85, 0x79, 0x84, 0x87, 0x8A, 0x92, 0x98, 0x99, 0x9F, 0xAA, 0x98, 0xA1, 0xB2, 0x9A, 0x9C, 
   0xAC, 0x90, 0x91, 0xA1, 0x8F, 0x92, 0xA1, 0x91, 0x96, 0xA3, 0x91, 0x96, 0xA2, 0x8C, 0x92, 0x9C, 
   0x85, 0x8C, 0x93, 0x83, 0x8A, 0x90, 0x81, 0x87, 0x8E, 0x7D, 0x82, 0x91, 0x79, 0x7F, 0x94, 0x76, 
   0x7E, 0x90, 0x74, 0x7D, 0x8A, 0x70, 0x7B, 0x82, 0x77, 0x85, 0x8D, 0x80, 0x90, 0xA0, 0x60, 0x72, 
   0x84, 0x42, 0x57, 0x61, 0x38, 0x48, 0x4A, 0x5F, 0x65, 0x69, 0x7F, 0x82, 0x87, 0x77, 0x79, 0x7C, 
   0x74, 0x73, 0x78, 0x78, 0x76, 0x7B, 0x7E, 0x7E, 0x7C, 0x88, 0x87, 0x80, 0x8D, 0x8B, 0x83, 0x93, 
   0x8F, 0x88, 0x8F, 0x8B, 0x85, 0x8C, 0x89, 0x86, 0x89, 0x87, 0x88, 0x8C, 0x88, 0x87, 0x92, 0x8D, 
   0x8D, 0x99, 0x92, 0x95, 0x92, 0x8F, 0x8D, 0x99, 0x94, 0x91, 0x9E, 0x95, 0x98, 0x5A, 0x50, 0x59, 
   0x18, 0x12, 0x17, 0x0B, 0x07, 0x07, 0x12, 0x11, 0x10, 0x16, 0x19, 0x16, 0x28, 0x24, 0x21, 0x3B, 
   0x40, 0x3E, 0x56, 0x5A, 0x5E, 0x56, 0x54, 0x5D, 0x5F, 0x53, 0x5D, 0x56, 0x51, 0x5B, 0x5F, 0x59, 
   0x66, 0x5B, 0x55, 0x5B, 0x56, 0x4F, 0x51, 0x56, 0x4F, 0x58, 0x4F, 0x53, 0x5A, 0x53, 0x56, 0x62, 
   0x51, 0x54, 0x65, 0x36, 0x3E, 0x46, 0x50, 0x58, 0x51, 0x99, 0x94, 0x88, 0xA1, 0x93, 0x88, 0xA3, 
   0x99, 0x96, 0xA1, 0x9C, 0x9F, 0x9C, 0x99, 0x99, 0x97, 0x98, 0x9E, 0x9C, 0xA7, 0xBE, 0x8E, 0xA4, 
   0xCE, 0x78, 0x91, 0xC3, 0x7B, 0x95, 0xC5, 0x7E, 0x98, 0xC6, 0x80, 0x98, 0xC4, 0x82, 0x98, 0xC4, 
   0x80, 0x96, 0xC2, 0x86, 0x9B, 0xC7, 0x87, 0x9B, 0xC8, 0x86, 0x99, 0xC6, 0x83, 0x96, 0xC3, 0x84, 
   0x95, 0xC4, 0x7F, 0x98, 0xC4, 0x80, 0x9D, 0xCC, 0x83, 0xA8, 0xD5, 0x88, 0xA8, 0xCF, 0x85, 0x91, 
   0xA4, 0x8E, 0x88, 0x86, 0xA0, 0x92, 0x8B, 0xA5, 0x9A, 0x88, 0xA9, 0x9B, 0x8B, 0xB4, 0xA4, 0x94, 
   0xBD, 0xAB, 0x9D, 0xC0, 0xAE, 0xA0, 0xB2, 0x9C, 0x8F, 0xB7, 0x9F, 0x90, 0xCA, 0xB9, 0xA4, 0xC7, 
   0xB6, 0xA5, 0xAE, 0x99, 0x8C, 0xA1, 0x96, 0x88, 0xA6, 0x98, 0x90, 0x8D, 0x7E, 0x7C, 0x82, 0x7A, 
   0x7B, 0x84, 0x7D, 0x7F, 0x85, 0x7B, 0x7E, 0x89, 0x7F, 0x83, 0x91, 0x8C, 0x90, 0x94, 0x8C, 0x92, 
   0x98, 0x8D, 0x94, 0x97, 0x90, 0x99, 0xA3, 0x9F, 0xA9, 0xA1, 0x99, 0xA9, 0x7E, 0x77, 0x8A, 0x67, 
   0x63, 0x71, 0x68, 0x64, 0x68, 0x6D, 0x69, 0x68, 0x70, 0x6F, 0x73, 0x77, 0x77, 0x7D, 0x74, 0x75, 
   0x7A, 0x6E, 0x6F, 0x74, 0x6A, 0x6A, 0x6D, 0x6E, 0x6F, 0x6E, 0x85, 0x85, 0x82, 0x86, 0x83, 0x83, 
   0x76, 0x6F, 0x70, 0x6E, 0x67, 0x6A, 0x71, 0x69, 0x70, 0x79, 0x6F, 0x75, 0x78, 0x6E, 0x6F, 0x77, 
   0x6E, 0x75, 0x76, 0x74, 0x77, 0x7F, 0x7B, 0x83, 0x83, 0x7A, 0x83, 0x92, 0x89, 0x8C, 0x97, 0x94, 
   0x97, 0xA8, 0xAA, 0xB0, 0xBF, 0xBE, 0xC6, 0xBE, 0xB5, 0xC0, 0xA7, 0x99, 0xA8, 0x91, 0x82, 0x8F, 
   0x8B, 0x88, 0x8F, 0x94, 0x8C, 0x95, 0x9F, 0x94, 0xA0, 0x9C, 0x95, 0xA1, 0x9A, 0x95, 0xA2, 0x92, 
   0x93, 0xA3, 0x91, 0x93, 0xA3, 0x9C, 0x9D, 0xAC, 0x9F, 0x9F, 0xAB, 0xA7, 0xA2, 0xAD, 0x96, 0x8A, 
   0x9C, 0x4D, 0x3F, 0x4E, 0x2F, 0x2A, 0x2B, 0x4A, 0x52, 0x4C, 0x6D, 0x73, 0x72, 0x86, 0x89, 0x89, 
   0x8F, 0x95, 0x97, 0x92, 0x98, 0x9A, 0x68, 0x82, 0x92, 0x77, 0x9C, 0xAF, 0x89, 0xA8, 0xBA, 0x8F, 
   0x98, 0xA1, 0x94, 0x91, 0x95, 0x95, 0x93, 0x92, 0xA8, 0xAB, 0xAB, 0x75, 0x7E, 0x81, 0x61, 0x6C, 
   0x72, 0x60, 0x6C, 0x78, 0x5B, 0x6A, 0x77, 0x57, 0x6A, 0x78, 0x53, 0x62, 0x71, 0x63, 0x70, 0x7D, 
   0x78, 0x88, 0x90, 0x84, 0x94, 0x9A, 0x7B, 0x88, 0x8D, 0x5C, 0x66, 0x6B, 0x3C, 0x42, 0x42, 0x46, 
   0x4A, 0x47, 0x56, 0x5B, 0x5B, 0x4B, 0x52, 0x58, 0x40, 0x44, 0x4C, 0x3A, 0x40, 0x47, 0x3F, 0x47, 
   0x4F, 0x3C, 0x47, 0x51, 0x37, 0x43, 0x4D, 0x2A, 0x36, 0x3A, 0x2A, 0x33, 0x31, 0x3D, 0x40, 0x42, 
   0x4E, 0x53, 0x54, 0x52, 0x53, 0x52, 0x4D, 0x4B, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x37, 
   0x37, 0x39, 0x58, 0x5B, 0x5B, 0x92, 0x8F, 0x8E, 0x8E, 0x8C, 0x8A, 0x7F, 0x84, 0x81, 0x65, 0x6C, 
   0x6C, 0x4E, 0x52, 0x5A, 0x53, 0x57, 0x64, 0x5E, 0x63, 0x77, 0x63, 0x6A, 0x82, 0x60, 0x6A, 0x84, 
   0x65, 0x6C, 0x88, 0x62, 0x6B, 0x81, 0x61, 0x6B, 0x81, 0x67, 0x6F, 0x85, 0x67, 0x6D, 0x80, 0x6E, 
   0x73, 0x7F, 0x76, 0x7C, 0x85, 0x71, 0x6F, 0x75, 0x62, 0x63, 0x63, 0x27, 0x27, 0x2C, 0x0F, 0x0E, 
   0x12, 0x28, 0x2F, 0x33, 0x47, 0x4F, 0x52, 0x56, 0x5C, 0x60, 0x66, 0x67, 0x6A, 0x84, 0x7E, 0x7F, 
   0x96, 0x89, 0x8F, 0x92, 0x88, 0x90, 0x90, 0x88, 0x88, 0x8C, 0x86, 0x83, 0x8B, 0x85, 0x82, 0x82, 
   0x7D, 0x7C, 0x7D, 0x78, 0x79, 0x7E, 0x7B, 0x7B, 0x86, 0x83, 0x82, 0x86, 0x7E, 0x81, 0x88, 0x81, 
   0x81, 0x84, 0x80, 0x7D, 0x80, 0x7C, 0x7C, 0x75, 0x72, 0x75, 0x6A, 0x67, 0x6B, 0x5D, 0x5A, 0x5D, 
   0x51, 0x4C, 0x4F, 0x47, 0x43, 0x43, 0x4A, 0x4D, 0x4D, 0x67, 0x70, 0x74, 0x76, 0x7D, 0x7E, 0x85, 
   0x86, 0x86, 0x73, 0x74, 0x77, 0x62, 0x65, 0x69, 0x5D, 0x60, 0x64, 0x52, 0x55, 0x59, 0x45, 0x4B, 
   0x4C, 0x35, 0x3A, 0x37, 0x1B, 0x1D, 0x19, 0x26, 0x2F, 0x2F, 0x3F, 0x4F, 0x52, 0x5F, 0x77, 0x7C, 
   0x72, 0x8A, 0x90, 0x6E, 0x82, 0x8D, 0x6A, 0x7B, 0x8A, 0x6A, 0x78, 0x88, 0x65, 0x71, 0x7B, 0x79, 
   0x8B, 0x8A, 0x9E, 0xA9, 0xA8, 0x95, 0x9D, 0xA1, 0x8B, 0x93, 0x9E, 0x8B, 0x94, 0xA8, 0x87, 0x8A, 
   0x9D, 0x8C, 0x8B, 0x9B, 0x90, 0x92, 0xA0, 0x90, 0x95, 0xA0, 0x8B, 0x92, 0x9D, 0x86, 0x8D, 0x98, 
   0x83, 0x8A, 0x95, 0x82, 0x88, 0x93, 0x82, 0x83, 0x92, 0x7C, 0x7E, 0x8E, 0x77, 0x7C, 0x8D, 0x6F, 
   0x78, 0x87, 0x5F, 0x6C, 0x77, 0x5E, 0x6E, 0x74, 0x6C, 0x7D, 0x84, 0x6B, 0x7B, 0x87, 0x48, 0x57, 
   0x66, 0x42, 0x51, 0x5A, 0x5A, 0x63, 0x69, 0x72, 0x76, 0x80, 0x75, 0x78, 0x80, 0x79, 0x79, 0x7E, 
   0x80, 0x7E, 0x7F, 0x83, 0x81, 0x81, 0x86, 0x83, 0x84, 0x8C, 0x8A, 0x85, 0x92, 0x91, 0x88, 0x97, 
   0x95, 0x8F, 0x91, 0x90, 0x8C, 0x8C, 0x8B, 0x89, 0x8D, 0x8D, 0x8F, 0x8D, 0x8C, 0x8A, 0x92, 0x8F, 
   0x8F, 0x9D, 0x9A, 0x9E, 0x95, 0x94, 0x95, 0x90, 0x92, 0x93, 0x92, 0x90, 0x93, 0x8B, 0x81, 0x89, 
   0x69, 0x5C, 0x64, 0x26, 0x1D, 0x21, 0x0B, 0x09, 0x0B, 0x12, 0x15, 0x13, 0x19, 0x1D, 0x19, 0x2B, 
   0x31, 0x2D, 0x47, 0x4A, 0x4D, 0x4E, 0x4A, 0x56, 0x57, 0x48, 0x57, 0x52, 0x4E, 0x58, 0x5F, 0x61, 
   0x69, 0x6F, 0x72, 0x75, 0x79, 0x71, 0x76, 0x64, 0x5D, 0x68, 0x58, 0x5D, 0x65, 0x61, 0x62, 0x70, 
   0x5D, 0x5F, 0x6E, 0x3B, 0x45, 0x48, 0x4F, 0x59, 0x52, 0xA2, 0x9F, 0x97, 0xC3, 0xB9, 0xB2, 0xB3, 
   0xA9, 0xA6, 0xA1, 0x99, 0x9A, 0x9A, 0x95, 0x92, 0x99, 0x97, 0x98, 0xA4, 0xAB, 0xBB, 0x8A, 0x9D, 
   0xC2, 0x77, 0x93, 0xC1, 0x7E, 0x98, 0xC5, 0x85, 0x9D, 0xC8, 0x81, 0x9B, 0xC3, 0x8B, 0xA5, 0xCD, 
   0x8D, 0xA7, 0xD1, 0x85, 0x9A, 0xC8, 0x83, 0x96, 0xC5, 0x83, 0x97, 0xC6, 0x84, 0x98, 0xC7, 0x7F, 
   0x96, 0xC3, 0x78, 0x91, 0xBD, 0x77, 0x95, 0xC6, 0x7E, 0xA3, 0xD4, 0x80, 0xA1, 0xCE, 0x82, 0x92, 
   0xAE, 0x84, 0x84, 0x85, 0x97, 0x8D, 0x83, 0xA4, 0x9C, 0x92, 0xA6, 0x9D, 0x91, 0xAE, 0xA2, 0x94, 
   0xB8, 0xAA, 0x9D, 0xC4, 0xB6, 0xA9, 0xD1, 0xBF, 0xB6, 0xBB, 0xA5, 0x9C, 0xC6, 0xB5, 0xA5, 0xC7, 
   0xB8, 0xA9, 0xB9, 0xA8, 0x9A, 0xAD, 0x9C, 0x90, 0xA4, 0x91, 0x8B, 0x82, 0x75, 0x75, 0x79, 0x75, 
   0x75, 0x7F, 0x7A, 0x7B, 0x7E, 0x76, 0x7A, 0x84, 0x7C, 0x7F, 0x8F, 0x89, 0x8A, 0x99, 0x8E, 0x91, 
   0x90, 0x85, 0x8B, 0x92, 0x8C, 0x95, 0x9C, 0x97, 0xA6, 0x8B, 0x85, 0x9A, 0x69, 0x62, 0x75, 0x51, 
   0x4C, 0x5A, 0x5B, 0x56, 0x5C, 0x67, 0x62, 0x65, 0x6E, 0x66, 0x6C, 0x6E, 0x64, 0x6C, 0x70, 0x69, 
   0x70, 0x68, 0x65, 0x6A, 0x65, 0x65, 0x68, 0x67, 0x66, 0x67, 0x7A, 0x78, 0x76, 0x7B, 0x76, 0x78, 
   0x6E, 0x65, 0x6A, 0x71, 0x69, 0x6E, 0x75, 0x6D, 0x74, 0x75, 0x6B, 0x70, 0x6D, 0x63, 0x64, 0x6F, 
   0x67, 0x6B, 0x77, 0x75, 0x79, 0x78, 0x73, 0x79, 0x85, 0x7E, 0x84, 0xAC, 0xA7, 0xAA, 0xBF, 0xBC, 
   0xC1, 0xB9, 0xB5, 0xC0, 0xB8, 0xB4, 0xBD, 0xA8, 0x9C, 0xA8, 0x94, 0x84, 0x93, 0x8C, 0x83, 0x8F, 
   0x8B, 0x87, 0x8F, 0x8E, 0x85, 0x8E, 0x93, 0x88, 0x92, 0x94, 0x8E, 0x98, 0x97, 0x94, 0x9D, 0x98, 
   0x98, 0xA2, 0x9B, 0x9B, 0xA6, 0x93, 0x93, 0xA2, 0x84, 0x86, 0x94, 0x7A, 0x79, 0x84, 0x81, 0x7F, 
   0x8A, 0x6E, 0x65, 0x76, 0x1F, 0x16, 0x22, 0x30, 0x30, 0x31, 0x4D, 0x4E, 0x4C, 0x55, 0x52, 0x50, 
   0x65, 0x62, 0x61, 0x71, 0x72, 0x72, 0x70, 0x87, 0x96, 0x74, 0x93, 0xA5, 0x87, 0xA1, 0xB2, 0x86, 
   0x8E, 0x97, 0x8C, 0x89, 0x8D, 0x94, 0x92, 0x90, 0x92, 0x94, 0x94, 0x69, 0x6F, 0x72, 0x57, 0x63, 
   0x68, 0x56, 0x63, 0x6A, 0x54, 0x62, 0x69, 0x5A, 0x67, 0x72, 0x60, 0x6A, 0x76, 0x69, 0x76, 0x7D, 
   0x77, 0x8A, 0x8A, 0x87, 0x9A, 0x9D, 0x81, 0x8F, 0x97, 0x5B, 0x67, 0x6F, 0x3D, 0x43, 0x46, 0x2E, 
   0x2F, 0x2D, 0x46, 0x4C, 0x4B, 0x55, 0x5E, 0x5F, 0x4F, 0x53, 0x56, 0x43, 0x46, 0x4A, 0x3D, 0x46, 
   0x4D, 0x3F, 0x4C, 0x57, 0x3C, 0x4C, 0x57, 0x3A, 0x48, 0x51, 0x3C, 0x43, 0x4A, 0x3E, 0x3E, 0x44, 
   0x4B, 0x49, 0x4A, 0x4E, 0x4E, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x52, 0x50, 0x50, 0x53, 
   0x56, 0x55, 0x84, 0x89, 0x83, 0x9B, 0x9A, 0x94, 0x96, 0x94, 0x90, 0x89, 0x8B, 0x89, 0x6D, 0x71, 
   0x71, 0x52, 0x52, 0x56, 0x3A, 0x38, 0x44, 0x3C, 0x40, 0x51, 0x4D, 0x56, 0x69, 0x59, 0x65, 0x7A, 
   0x60, 0x69, 0x80, 0x65, 0x70, 0x81, 0x68, 0x73, 0x85, 0x68, 0x70, 0x84, 0x64, 0x6C, 0x7E, 0x77, 
   0x7B, 0x85, 0x89, 0x8F, 0x94, 0x73, 0x6F, 0x73, 0x55, 0x55, 0x56, 0x29, 0x2A, 0x30, 0x2D, 0x2D, 
   0x33, 0x48, 0x4B, 0x4F, 0x54, 0x56, 0x5B, 0x5C, 0x5F, 0x67, 0x81, 0x81, 0x85, 0x99, 0x93, 0x92, 
   0x98, 0x8F, 0x90, 0x8D, 0x88, 0x8A, 0x88, 0x81, 0x7C, 0x82, 0x7B, 0x74, 0x85, 0x7E, 0x78, 0x87, 
   0x7E, 0x7C, 0x88, 0x7E, 0x7E, 0x8C, 0x82, 0x82, 0x8E, 0x84, 0x85, 0x87, 0x82, 0x88, 0x82, 0x7F, 
   0x81, 0x7A, 0x76, 0x78, 0x77, 0x72, 0x74, 0x6B, 0x69, 0x6B, 0x5F, 0x5C, 0x5E, 0x50, 0x4E, 0x4F, 
   0x47, 0x4A, 0x46, 0x49, 0x4A, 0x46, 0x5B, 0x60, 0x5F, 0x7E, 0x86, 0x8A, 0x85, 0x88, 0x8A, 0x90, 
   0x8D, 0x8E, 0x6F, 0x6D, 0x6F, 0x60, 0x64, 0x66, 0x5C, 0x61, 0x63, 0x53, 0x56, 0x57, 0x45, 0x46, 
   0x48, 0x29, 0x2D, 0x2D, 0x2F, 0x38, 0x38, 0x68, 0x74, 0x78, 0x70, 0x81, 0x8C, 0x62, 0x77, 0x83, 
   0x64, 0x77, 0x81, 0x69, 0x7A, 0x86, 0x69, 0x7A, 0x88, 0x67, 0x76, 0x85, 0x60, 0x6D, 0x78, 0x89, 
   0x9E, 0xA0, 0xAD, 0xB4, 0xB6, 0x92, 0x94, 0x9B, 0x88, 0x8D, 0x9A, 0x8A, 0x91, 0xA3, 0x86, 0x8A, 
   0x9A, 0x8A, 0x89, 0x96, 0x8F, 0x90, 0x9C, 0x8A, 0x8D, 0x99, 0x86, 0x8A, 0x96, 0x84, 0x87, 0x95, 
   0x83, 0x86, 0x95, 0x83, 0x85, 0x93, 0x81, 0x81, 0x8E, 0x79, 0x79, 0x8C, 0x73, 0x77, 0x8A, 0x68, 
   0x73, 0x80, 0x5F, 0x6F, 0x76, 0x5E, 0x6F, 0x75, 0x63, 0x72, 0x7B, 0x45, 0x55, 0x61, 0x33, 0x41, 
   0x4D, 0x5D, 0x67, 0x6E, 0x7A, 0x7D, 0x83, 0x74, 0x75, 0x7D, 0x77, 0x77, 0x7D, 0x7D, 0x7E, 0x7F, 
   0x7C, 0x7E, 0x7F, 0x7E, 0x7E, 0x80, 0x89, 0x89, 0x89, 0x8D, 0x8C, 0x8B, 0x8E, 0x8C, 0x8B, 0x92, 
   0x91, 0x8D, 0x95, 0x93, 0x92, 0x90, 0x8E, 0x8D, 0x91, 0x8F, 0x8F, 0x93, 0x8F, 0x8F, 0x97, 0x94, 
   0x93, 0x9D, 0x99, 0x9C, 0x9E, 0x9B, 0x9F, 0x92, 0x92, 0x91, 0x89, 0x88, 0x86, 0x93, 0x8A, 0x8F, 
   0xA0, 0x91, 0x99, 0x76, 0x69, 0x70, 0x2C, 0x24, 0x2B, 0x10, 0x0B, 0x0E, 0x14, 0x19, 0x13, 0x1E, 
   0x29, 0x23, 0x36, 0x3A, 0x3D, 0x47, 0x43, 0x4F, 0x46, 0x42, 0x4D, 0x5D, 0x64, 0x68, 0x84, 0x88, 
   0x89, 0x9B, 0xA0, 0x9D, 0xA1, 0x9F, 0x9E, 0x85, 0x7D, 0x82, 0x57, 0x55, 0x5C, 0x54, 0x50, 0x5E, 
   0x54, 0x53, 0x5E, 0x3C, 0x41, 0x44, 0x4E, 0x56, 0x55, 0xA2, 0xA2, 0x9F, 0xCE, 0xC6, 0xC0, 0xC2, 
   0xB8, 0xB4, 0x9E, 0x96, 0x99, 0x94, 0x90, 0x97, 0x97, 0x91, 0x99, 0x9F, 0x9E, 0xAF, 0x8E, 0x9C, 
   0xBE, 0x88, 0x9D, 0xC9, 0x89, 0x9C, 0xC9, 0x8E, 0x9C, 0xC9, 0x8D, 0x9D, 0xC7, 0x8D, 0x9B, 0xC4, 
   0x8E, 0x9B, 0xC5, 0x88, 0x96, 0xC3, 0x83, 0x92, 0xC1, 0x7D, 0x8F, 0xBF, 0x7B, 0x8F, 0xBF, 0x78, 
   0x8D, 0xBD, 0x76, 0x8D, 0xBD, 0x74, 0x8D, 0xC0, 0x7A, 0x93, 0xC4, 0x7E, 0x94, 0xC3, 0x83, 0x94, 
   0xB7, 0x78, 0x81, 0x8C, 0x82, 0x85, 0x80, 0x9D, 0x96, 0x8C, 0xAD, 0xA2, 0x98, 0xB3, 0xA5, 0x98, 
   0xBC, 0xAE, 0xA0, 0xC7, 0xB9, 0xAA, 0xCB, 0xBB, 0xAD, 0xC7, 0xB5, 0xA8, 0xBE, 0xAF, 0xA1, 0xB3, 
   0xA3, 0x94, 0xB2, 0x9F, 0x90, 0xBA, 0xA7, 0x9B, 0xAF, 0x99, 0x95, 0x7C, 0x6F, 0x70, 0x6A, 0x64, 
   0x67, 0x76, 0x6C, 0x71, 0x7C, 0x70, 0x78, 0x86, 0x7D, 0x82, 0x99, 0x93, 0x94, 0xA2, 0x98, 0x9C, 
   0x97, 0x90, 0x9A, 0x97, 0x96, 0xA4, 0x83, 0x86, 0x9A, 0x69, 0x6A, 0x82, 0x4B, 0x4B, 0x5C, 0x48, 
   0x46, 0x50, 0x5D, 0x55, 0x5E, 0x65, 0x5E, 0x66, 0x6E, 0x68, 0x6E, 0x6C, 0x67, 0x6C, 0x68, 0x65, 
   0x69, 0x65, 0x63, 0x67, 0x6F, 0x6C, 0x6F, 0x70, 0x6D, 0x6F, 0x87, 0x85, 0x84, 0x79, 0x73, 0x77, 
   0x75, 0x6D, 0x73, 0x78, 0x6E, 0x76, 0x74, 0x6A, 0x72, 0x72, 0x67, 0x6D, 0x6B, 0x61, 0x62, 0x82, 
   0x78, 0x7B, 0x89, 0x7F, 0x86, 0x7D, 0x79, 0x7D, 0x98, 0x9B, 0x9D, 0xB7, 0xB6, 0xB8, 0xC7, 0xBC, 
   0xC6, 0xBF, 0xB3, 0xC2, 0xAC, 0xA3, 0xAE, 0x94, 0x87, 0x93, 0x8A, 0x7B, 0x88, 0x8F, 0x87, 0x93, 
   0x8B, 0x86, 0x8F, 0x8B, 0x81, 0x87, 0x8A, 0x80, 0x87, 0x8C, 0x89, 0x93, 0x93, 0x94, 0x9E, 0x99, 
   0x97, 0xA0, 0x9C, 0x98, 0xA2, 0x8A, 0x8A, 0x97, 0x83, 0x89, 0x96, 0x88, 0x8D, 0x98, 0x8D, 0x90, 
   0x99, 0x9C, 0x93, 0xA4, 0x43, 0x36, 0x43, 0x4A, 0x49, 0x49, 0x5D, 0x5D, 0x5D, 0x52, 0x4E, 0x4E, 
   0x4F, 0x49, 0x48, 0x53, 0x4D, 0x4B, 0x74, 0x91, 0xA0, 0x71, 0x92, 0xA5, 0x83, 0x9C, 0xAD, 0x83, 
   0x8B, 0x95, 0x8A, 0x89, 0x8D, 0x94, 0x91, 0x8F, 0x73, 0x75, 0x74, 0x5D, 0x65, 0x69, 0x5D, 0x6A, 
   0x71, 0x5D, 0x6C, 0x72, 0x5A, 0x69, 0x6D, 0x52, 0x60, 0x67, 0x5A, 0x64, 0x6E, 0x68, 0x79, 0x7E, 
   0x77, 0x8E, 0x8E, 0x83, 0x9A, 0x9E, 0x79, 0x88, 0x91, 0x55, 0x62, 0x6B, 0x3E, 0x43, 0x48, 0x28, 
   0x26, 0x27, 0x30, 0x32, 0x32, 0x41, 0x47, 0x48, 0x53, 0x54, 0x54, 0x53, 0x58, 0x55, 0x44, 0x4E, 
   0x4E, 0x3F, 0x4C, 0x51, 0x3F, 0x4D, 0x55, 0x40, 0x4A, 0x56, 0x44, 0x4A, 0x55, 0x35, 0x37, 0x40, 
   0x3B, 0x3A, 0x3F, 0x42, 0x45, 0x46, 0x48, 0x4A, 0x4C, 0x4F, 0x4E, 0x50, 0x51, 0x4D, 0x51, 0x64, 
   0x63, 0x64, 0x9A, 0x9B, 0x94, 0xA0, 0x9F, 0x96, 0x91, 0x8E, 0x8B, 0x95, 0x95, 0x96, 0x89, 0x8B, 
   0x8E, 0x7A, 0x79, 0x7D, 0x76, 0x75, 0x7B, 0x52, 0x54, 0x5F, 0x32, 0x3A, 0x45, 0x42, 0x4D, 0x5A, 
   0x54, 0x5C, 0x6C, 0x67, 0x71, 0x7D, 0x72, 0x7D, 0x8C, 0x64, 0x6B, 0x7D, 0x5E, 0x66, 0x74, 0x6D, 
   0x72, 0x7C, 0x7B, 0x7F, 0x86, 0x63, 0x61, 0x64, 0x44, 0x48, 0x47, 0x36, 0x3B, 0x3F, 0x56, 0x59, 
   0x62, 0x5E, 0x61, 0x67, 0x5D, 0x63, 0x66, 0x7D, 0x7E, 0x85, 0xA0, 0x9B, 0xA1, 0x9E, 0x98, 0x99, 
   0x93, 0x8D, 0x8D, 0x8F, 0x86, 0x84, 0x8B, 0x82, 0x7F, 0x85, 0x7D, 0x78, 0x86, 0x7E, 0x7A, 0x85, 
   0x7C, 0x7B, 0x84, 0x7C, 0x7E, 0x86, 0x7D, 0x80, 0x81, 0x79, 0x7C, 0x7E, 0x7B, 0x7E, 0x78, 0x78, 
   0x7B, 0x74, 0x72, 0x75, 0x67, 0x64, 0x66, 0x5E, 0x5D, 0x5D, 0x51, 0x50, 0x4F, 0x4F, 0x51, 0x4E, 
   0x49, 0x51, 0x4C, 0x4B, 0x53, 0x4E, 0x5D, 0x65, 0x65, 0x79, 0x7E, 0x83, 0x8D, 0x8D, 0x92, 0x95, 
   0x92, 0x96, 0x72, 0x72, 0x77, 0x60, 0x64, 0x6B, 0x5B, 0x60, 0x65, 0x52, 0x54, 0x57, 0x3D, 0x3B, 
   0x3F, 0x25, 0x29, 0x2A, 0x56, 0x63, 0x62, 0x7C, 0x89, 0x90, 0x6B, 0x79, 0x87, 0x5C, 0x6B, 0x79, 
   0x65, 0x71, 0x7E, 0x63, 0x70, 0x7B, 0x61, 0x71, 0x7E, 0x5E, 0x6F, 0x7C, 0x5C, 0x6A, 0x70, 0x99, 
   0xAD, 0xAE, 0xA9, 0xAD, 0xB4, 0x90, 0x90, 0x9D, 0x88, 0x8C, 0x9D, 0x82, 0x89, 0x9A, 0x7E, 0x84, 
   0x8F, 0x84, 0x88, 0x91, 0x88, 0x8C, 0x98, 0x88, 0x8C, 0x9B, 0x83, 0x86, 0x97, 0x83, 0x83, 0x95, 
   0x83, 0x83, 0x93, 0x84, 0x84, 0x91, 0x7B, 0x80, 0x89, 0x72, 0x74, 0x84, 0x69, 0x6D, 0x7E, 0x62, 
   0x6C, 0x78, 0x62, 0x6F, 0x77, 0x5C, 0x68, 0x70, 0x4F, 0x58, 0x63, 0x3F, 0x4B, 0x55, 0x5E, 0x67, 
   0x70, 0x7E, 0x81, 0x87, 0x7C, 0x7C, 0x7E, 0x76, 0x79, 0x7A, 0x7D, 0x7F, 0x7D, 0x86, 0x88, 0x85, 
   0x91, 0x92, 0x93, 0x8B, 0x89, 0x8B, 0x8B, 0x86, 0x86, 0x8D, 0x86, 0x87, 0x90, 0x88, 0x8B, 0x93, 
   0x8C, 0x8D, 0x93, 0x8F, 0x8F, 0x92, 0x8E, 0x8B, 0x90, 0x8A, 0x87, 0x93, 0x8B, 0x8A, 0x98, 0x91, 
   0x8F, 0x98, 0x92, 0x93, 0x97, 0x91, 0x94, 0x93, 0x8E, 0x8D, 0x8B, 0x8A, 0x86, 0x8B, 0x87, 0x87, 
   0x8C, 0x83, 0x87, 0x87, 0x80, 0x84, 0x78, 0x72, 0x78, 0x57, 0x4E, 0x51, 0x17, 0x10, 0x15, 0x13, 
   0x17, 0x13, 0x2D, 0x30, 0x2E, 0x40, 0x41, 0x47, 0x38, 0x3D, 0x43, 0x67, 0x74, 0x72, 0x8F, 0x95, 
   0x91, 0x94, 0x99, 0x96, 0xA5, 0xA9, 0xA3, 0xB2, 0xAD, 0xAB, 0xA7, 0x9F, 0xA3, 0x77, 0x6C, 0x7B, 
   0x47, 0x44, 0x52, 0x34, 0x3C, 0x40, 0x32, 0x3F, 0x3E, 0x62, 0x69, 0x67, 0x8F, 0x8E, 0x89, 0xCC, 
   0xC6, 0xC2, 0xC7, 0xBE, 0xC1, 0xB0, 0xA8, 0xB0, 0x96, 0x8F, 0x9B, 0x93, 0x97, 0xAC, 0x9E, 0xAF, 
   0xD2, 0x88, 0x97, 0xC4, 0x80, 0x8D, 0xBD, 0x7F, 0x8B, 0xBB, 0x7E, 0x88, 0xB5, 0x86, 0x8A, 0xB6, 
   0x85, 0x89, 0xB4, 0x82, 0x88, 0xB4, 0x82, 0x8C, 0xB9, 0x83, 0x92, 0xC0, 0x7F, 0x92, 0xC1, 0x76, 
   0x8C, 0xBC, 0x7A, 0x91, 0xC1, 0x7C, 0x94, 0xC4, 0x80, 0x93, 0xC1, 0x82, 0x94, 0xC0, 0x91, 0xA0, 
   0xC2, 0x88, 0x8E, 0x9C, 0x8B, 0x8D, 0x8A, 0x9E, 0x98, 0x88, 0x9F, 0x94, 0x86, 0xA4, 0x94, 0x86, 
   0xBA, 0xAA, 0x9C, 0xCB, 0xBC, 0xAD, 0xC2, 0xB1, 0x9F, 0xC8, 0xB8, 0xA6, 0xC6, 0xB6, 0xA5, 0xC0, 
   0xAC, 0x9A, 0xBE, 0xAC, 0x9A, 0xE9, 0xD6, 0xC9, 0xB8, 0x9E, 0x9B, 0x78, 0x6B, 0x6D, 0x75, 0x70, 
   0x76, 0x7A, 0x71, 0x7A, 0x81, 0x77, 0x7F, 0x8B, 0x85, 0x88, 0x99, 0x95, 0x96, 0xA0, 0x99, 0xA0, 
   0x9E, 0x99, 0xAB, 0x8C, 0x8B, 0xA6, 0x68, 0x6B, 0x8A, 0x4B, 0x4F, 0x69, 0x3F, 0x42, 0x4D, 0x52, 
   0x54, 0x57, 0x5E, 0x58, 0x5C, 0x60, 0x5A, 0x5F, 0x63, 0x5B, 0x62, 0x62, 0x5F, 0x63, 0x65, 0x65, 
   0x68, 0x6C, 0x6B, 0x6E, 0x79, 0x74, 0x76, 0x84, 0x7C, 0x7F, 0x8D, 0x84, 0x87, 0x71, 0x6A, 0x71, 
   0x72, 0x6B, 0x72, 0x6F, 0x67, 0x70, 0x6B, 0x62, 0x6A, 0x6E, 0x65, 0x6B, 0x70, 0x68, 0x6B, 0x75, 
   0x6D, 0x6E, 0x81, 0x77, 0x7B, 0x8C, 0x86, 0x8A, 0xAC, 0xAD, 0xB1, 0xC4, 0xC4, 0xC7, 0xCD, 0xC1, 
   0xCB, 0xB2, 0xA1, 0xAF, 0x99, 0x8C, 0x97, 0x90, 0x85, 0x8E, 0xA0, 0x94, 0x9C, 0x9E, 0x8F, 0x9F, 
   0x88, 0x7F, 0x8D, 0x88, 0x7D, 0x80, 0x87, 0x7E, 0x83, 0x8A, 0x88, 0x94, 0x94, 0x93, 0xA2, 0x92, 
   0x92, 0xA2, 0x88, 0x8A, 0x99, 0x7E, 0x86, 0x90, 0x86, 0x91, 0x9C, 0x8D, 0x93, 0x9F, 0x9C, 0x9C, 
   0xA5, 0xBC, 0xAE, 0xBF, 0x5E, 0x4A, 0x55, 0x49, 0x42, 0x40, 0x57, 0x55, 0x51, 0x5E, 0x57, 0x56, 
   0x5A, 0x51, 0x51, 0x62, 0x55, 0x52, 0x7D, 0x9F, 0xAF, 0x7A, 0x9B, 0xAC, 0x7F, 0x9A, 0xAC, 0x8D, 
   0x9F, 0xAE, 0x9B, 0xA3, 0xA9, 0x91, 0x8F, 0x90, 0x65, 0x66, 0x66, 0x56, 0x5E, 0x62, 0x5F, 0x6C, 
   0x72, 0x66, 0x78, 0x7C, 0x5C, 0x6F, 0x74, 0x5C, 0x6A, 0x70, 0x5E, 0x68, 0x6F, 0x63, 0x71, 0x77, 
   0x6A, 0x7A, 0x7F, 0x6F, 0x7D, 0x83, 0x60, 0x6D, 0x72, 0x43, 0x53, 0x58, 0x36, 0x40, 0x43, 0x1D, 
   0x21, 0x22, 0x1E, 0x21, 0x22, 0x26, 0x2C, 0x2E, 0x36, 0x3C, 0x3D, 0x43, 0x4C, 0x47, 0x44, 0x4E, 
   0x4A, 0x42, 0x4E, 0x4C, 0x41, 0x4D, 0x50, 0x41, 0x4A, 0x54, 0x44, 0x4B, 0x57, 0x3E, 0x43, 0x4D, 
   0x31, 0x2E, 0x34, 0x39, 0x38, 0x39, 0x44, 0x40, 0x3F, 0x4D, 0x46, 0x46, 0x50, 0x4C, 0x4E, 0x6F, 
   0x6F, 0x6E, 0x8D, 0x8E, 0x87, 0x96, 0x95, 0x8E, 0x90, 0x8F, 0x8B, 0x97, 0x99, 0x97, 0x89, 0x8B, 
   0x8A, 0x84, 0x84, 0x82, 0x91, 0x90, 0x8E, 0x8D, 0x8D, 0x8B, 0x6A, 0x6B, 0x6C, 0x42, 0x46, 0x4C, 
   0x3D, 0x41, 0x4B, 0x44, 0x4D, 0x55, 0x57, 0x62, 0x6E, 0x64, 0x6D, 0x7C, 0x6D, 0x75, 0x83, 0x66, 
   0x6F, 0x7A, 0x66, 0x68, 0x71, 0x5E, 0x60, 0x65, 0x49, 0x4F, 0x51, 0x53, 0x59, 0x5D, 0x62, 0x62, 
   0x6A, 0x5F, 0x61, 0x6A, 0x7F, 0x85, 0x87, 0x9A, 0x9B, 0x9C, 0x9F, 0x9C, 0x9D, 0x92, 0x8E, 0x8E, 
   0x89, 0x82, 0x85, 0x8D, 0x80, 0x81, 0x86, 0x81, 0x7B, 0x89, 0x84, 0x7D, 0x88, 0x83, 0x7C, 0x8C, 
   0x84, 0x81, 0x8B, 0x81, 0x81, 0x83, 0x78, 0x78, 0x7D, 0x73, 0x72, 0x7C, 0x75, 0x76, 0x74, 0x6E, 
   0x72, 0x60, 0x5B, 0x62, 0x4E, 0x4D, 0x50, 0x4A, 0x4E, 0x4D, 0x44, 0x4A, 0x47, 0x44, 0x4B, 0x4A, 
   0x40, 0x48, 0x47, 0x47, 0x4E, 0x4C, 0x69, 0x6F, 0x72, 0x7E, 0x80, 0x86, 0x91, 0x8F, 0x96, 0x91, 
   0x92, 0x99, 0x74, 0x77, 0x7D, 0x61, 0x65, 0x6A, 0x5B, 0x5D, 0x62, 0x53, 0x53, 0x56, 0x2E, 0x30, 
   0x33, 0x26, 0x2D, 0x2F, 0x56, 0x63, 0x67, 0x72, 0x80, 0x88, 0x67, 0x77, 0x83, 0x68, 0x7B, 0x86, 
   0x6C, 0x7D, 0x85, 0x62, 0x70, 0x7A, 0x58, 0x67, 0x72, 0x5A, 0x67, 0x71, 0x6E, 0x77, 0x76, 0xB0, 
   0xBB, 0xBA, 0x92, 0x96, 0xA2, 0x7F, 0x84, 0x97, 0x84, 0x8A, 0x9E, 0x81, 0x88, 0x9B, 0x7A, 0x7F, 
   0x8B, 0x78, 0x82, 0x89, 0x7E, 0x88, 0x94, 0x7D, 0x85, 0x96, 0x7B, 0x81, 0x94, 0x7E, 0x81, 0x94, 
   0x7E, 0x81, 0x90, 0x7E, 0x81, 0x8D, 0x72, 0x7B, 0x83, 0x69, 0x6C, 0x75, 0x60, 0x61, 0x6B, 0x5D, 
   0x61, 0x69, 0x56, 0x5D, 0x67, 0x4F, 0x55, 0x5F, 0x60, 0x64, 0x6C, 0x73, 0x76, 0x7B, 0x80, 0x7F, 
   0x85, 0x7D, 0x7A, 0x7E, 0x72, 0x73, 0x72, 0x79, 0x7D, 0x7B, 0x82, 0x87, 0x85, 0x81, 0x85, 0x87, 
   0x86, 0x8A, 0x8C, 0x84, 0x86, 0x81, 0x8A, 0x86, 0x84, 0x8F, 0x87, 0x87, 0x90, 0x89, 0x87, 0x8D, 
   0x87, 0x87, 0x8C, 0x8C, 0x8A, 0x8E, 0x8D, 0x88, 0x8A, 0x83, 0x81, 0x90, 0x89, 0x89, 0x8E, 0x8A, 
   0x87, 0x8A, 0x88, 0x87, 0x8A, 0x87, 0x87, 0x89, 0x87, 0x88, 0x84, 0x83, 0x83, 0x7C, 0x7A, 0x7D, 
   0x78, 0x76, 0x76, 0x7C, 0x7B, 0x78, 0x99, 0x97, 0x98, 0xC1, 0xBE, 0xBE, 0x71, 0x60, 0x6F, 0x1D, 
   0x11, 0x11, 0x25, 0x24, 0x1D, 0x3C, 0x43, 0x40, 0x47, 0x4B, 0x50, 0x5F, 0x62, 0x67, 0x6F, 0x75, 
   0x77, 0x85, 0x8D, 0x8C, 0x97, 0x9C, 0x95, 0xAA, 0xAB, 0xA3, 0xD4, 0xD0, 0xCF, 0x91, 0x81, 0x8C, 
   0x35, 0x34, 0x3E, 0x36, 0x42, 0x43, 0x3A, 0x47, 0x41, 0x4A, 0x55, 0x54, 0x54, 0x5E, 0x5E, 0x6B, 
   0x6F, 0x6F, 0xAA, 0xA9, 0xA7, 0xC8, 0xC2, 0xBD, 0xBD, 0xB9, 0xB6, 0x9E, 0xA2, 0xAB, 0x99, 0xA3, 
   0xBC, 0x97, 0x9D, 0xC4, 0x86, 0x90, 0xBE, 0x84, 0x93, 0xC5, 0x85, 0x94, 0xC6, 0x82, 0x8E, 0xBD, 
   0x77, 0x81, 0xAE, 0x7C, 0x85, 0xB2, 0x7E, 0x88, 0xB5, 0x81, 0x8E, 0xBB, 0x82, 0x95, 0xC4, 0x80, 
   0x97, 0xC8, 0x80, 0x93, 0xC1, 0x7C, 0x93, 0xC0, 0x7D, 0x93, 0xBE, 0x7F, 0x95, 0xBF, 0x98, 0xA8, 
   0xC5, 0x91, 0x92, 0x97, 0x87, 0x84, 0x79, 0x95, 0x93, 0x7F, 0xA1, 0x98, 0x87, 0xAA, 0x9C, 0x8D, 
   0xB1, 0xA2, 0x93, 0xBD, 0xAE, 0x9F, 0xC4, 0xB6, 0xA5, 0xC4, 0xB5, 0xA3, 0xC5, 0xB4, 0xA0, 0xC6, 
   0xB5, 0xA0, 0xC0, 0xB1, 0x9F, 0xD5, 0xC0, 0xB5, 0x83, 0x68, 0x69, 0x6C, 0x62, 0x67, 0x76, 0x76, 
   0x7B, 0x7B, 0x7A, 0x80, 0x81, 0x7E, 0x83, 0x90, 0x8A, 0x8C, 0x99, 0x95, 0x98, 0x97, 0x93, 0x9F, 
   0x8A, 0x85, 0x9A, 0x74, 0x6F, 0x8D, 0x5A, 0x57, 0x76, 0x49, 0x48, 0x5E, 0x4B, 0x4C, 0x52, 0x61, 
   0x62, 0x62, 0x5B, 0x58, 0x59, 0x58, 0x52, 0x58, 0x59, 0x56, 0x5A, 0x5C, 0x59, 0x5C, 0x61, 0x64, 
   0x65, 0x5F, 0x65, 0x66, 0x64, 0x6B, 0x6C, 0x68, 0x68, 0x6B, 0x6E, 0x66, 0x6B, 0x85, 0x81, 0x86, 
   0x7D, 0x7A, 0x81, 0x6F, 0x6A, 0x72, 0x6D, 0x66, 0x6C, 0x72, 0x6D, 0x73, 0x72, 0x6D, 0x74, 0x6D, 
   0x66, 0x68, 0x7E, 0x79, 0x79, 0x98, 0x96, 0x9A, 0xB3, 0xB0, 0xB5, 0xB4, 0xAB, 0xAF, 0xB1, 0xA0, 
   0xA7, 0x9A, 0x8B, 0x94, 0x92, 0x87, 0x8D, 0x9A, 0x90, 0x95, 0x99, 0x8F, 0x93, 0x90, 0x7F, 0x8E, 
   0x88, 0x7B, 0x8A, 0x86, 0x7B, 0x7F, 0x83, 0x79, 0x80, 0x82, 0x80, 0x8D, 0x7D, 0x7F, 0x8E, 0x81, 
   0x83, 0x95, 0x83, 0x84, 0x95, 0x80, 0x83, 0x90, 0x7D, 0x85, 0x90, 0x7B, 0x82, 0x8E, 0x88, 0x8F, 
   0x97, 0x99, 0x92, 0xA0, 0x47, 0x34, 0x40, 0x47, 0x3E, 0x38, 0x57, 0x54, 0x48, 0x61, 0x5D, 0x54, 
   0x64, 0x5E, 0x5E, 0x64, 0x57, 0x57, 0x88, 0xA8, 0xB9, 0x81, 0xA0, 0xAF, 0x79, 0x93, 0xA2, 0x83, 
   0x97, 0xA8, 0x93, 0x9E, 0xA7, 0x87, 0x84, 0x87, 0x66, 0x65, 0x68, 0x54, 0x5C, 0x61, 0x53, 0x5E, 
   0x65, 0x52, 0x62, 0x68, 0x4A, 0x5C, 0x65, 0x49, 0x56, 0x5E, 0x5E, 0x69, 0x6F, 0x65, 0x73, 0x79, 
   0x69, 0x74, 0x7D, 0x65, 0x6D, 0x73, 0x5F, 0x62, 0x68, 0x51, 0x57, 0x5E, 0x4F, 0x55, 0x5A, 0x48, 
   0x4B, 0x4D, 0x43, 0x43, 0x45, 0x39, 0x3B, 0x3F, 0x30, 0x37, 0x38, 0x38, 0x3F, 0x3D, 0x40, 0x47, 
   0x46, 0x3E, 0x48, 0x44, 0x40, 0x4A, 0x49, 0x43, 0x4A, 0x51, 0x42, 0x49, 0x53, 0x40, 0x47, 0x4E, 
   0x2C, 0x2B, 0x2F, 0x2A, 0x2A, 0x29, 0x3B, 0x37, 0x39, 0x44, 0x3F, 0x42, 0x46, 0x46, 0x48, 0x6C, 
   0x70, 0x6C, 0x8B, 0x8F, 0x84, 0xA5, 0xA7, 0x9E, 0xA3, 0xA3, 0x9D, 0xA1, 0xA3, 0x9F, 0x90, 0x90, 
   0x91, 0x7F, 0x7A, 0x7A, 0x86, 0x80, 0x7C, 0x92, 0x8E, 0x86, 0x80, 0x7F, 0x76, 0x6F, 0x70, 0x6F, 
   0x51, 0x50, 0x58, 0x39, 0x3D, 0x44, 0x48, 0x4D, 0x57, 0x65, 0x68, 0x76, 0x65, 0x66, 0x76, 0x5E, 
   0x62, 0x6F, 0x60, 0x5D, 0x65, 0x55, 0x57, 0x5D, 0x52, 0x56, 0x5E, 0x59, 0x60, 0x66, 0x71, 0x72, 
   0x77, 0x8E, 0x8D, 0x92, 0x9F, 0x9E, 0xA0, 0x99, 0x97, 0x9A, 0x93, 0x90, 0x93, 0x85, 0x82, 0x82, 
   0x86, 0x81, 0x83, 0x89, 0x84, 0x83, 0x86, 0x80, 0x7A, 0x8B, 0x85, 0x7E, 0x8E, 0x87, 0x7F, 0x8B, 
   0x82, 0x7E, 0x87, 0x7C, 0x7B, 0x7E, 0x71, 0x6F, 0x7A, 0x6F, 0x6C, 0x71, 0x6B, 0x6B, 0x5E, 0x58, 
   0x5A, 0x44, 0x42, 0x42, 0x3C, 0x3F, 0x3D, 0x3D, 0x43, 0x3F, 0x2F, 0x37, 0x34, 0x2D, 0x37, 0x37, 
   0x31, 0x3A, 0x39, 0x60, 0x61, 0x5E, 0x87, 0x84, 0x86, 0x86, 0x82, 0x84, 0x92, 0x8D, 0x91, 0x90, 
   0x8A, 0x91, 0x7A, 0x77, 0x7B, 0x65, 0x66, 0x68, 0x5A, 0x5D, 0x5F, 0x4C, 0x4E, 0x4E, 0x2E, 0x32, 
   0x32, 0x42, 0x4C, 0x4E, 0x55, 0x68, 0x6B, 0x67, 0x77, 0x7C, 0x69, 0x7A, 0x82, 0x68, 0x7E, 0x83, 
   0x6E, 0x82, 0x86, 0x65, 0x74, 0x7C, 0x5C, 0x69, 0x74, 0x61, 0x6E, 0x74, 0x7B, 0x87, 0x83, 0xA5, 
   0xAB, 0xAD, 0x83, 0x85, 0x96, 0x79, 0x81, 0x95, 0x81, 0x87, 0x99, 0x82, 0x88, 0x98, 0x7E, 0x81, 
   0x8E, 0x78, 0x80, 0x8A, 0x7B, 0x83, 0x91, 0x76, 0x7F, 0x90, 0x76, 0x7E, 0x8F, 0x7D, 0x82, 0x93, 
   0x7C, 0x80, 0x8F, 0x7A, 0x80, 0x8B, 0x6F, 0x76, 0x7D, 0x5D, 0x5C, 0x66, 0x5C, 0x59, 0x64, 0x53, 
   0x55, 0x5D, 0x56, 0x5D, 0x61, 0x69, 0x6F, 0x73, 0x79, 0x7C, 0x7F, 0x80, 0x7D, 0x81, 0x84, 0x7D, 
   0x83, 0x75, 0x71, 0x76, 0x73, 0x75, 0x74, 0x7A, 0x7D, 0x7A, 0x7C, 0x7E, 0x7E, 0x75, 0x7A, 0x7F, 
   0x7B, 0x81, 0x87, 0x7C, 0x81, 0x7E, 0x81, 0x82, 0x7D, 0x83, 0x82, 0x7F, 0x83, 0x83, 0x81, 0x83, 
   0x85, 0x85, 0x87, 0x8A, 0x89, 0x8B, 0x8C, 0x86, 0x90, 0x89, 0x89, 0x94, 0x8C, 0x8F, 0x8C, 0x88, 
   0x88, 0x83, 0x81, 0x81, 0x85, 0x84, 0x84, 0x82, 0x81, 0x83, 0x78, 0x75, 0x79, 0x7A, 0x78, 0x7E, 
   0x87, 0x89, 0x89, 0xA3, 0xA4, 0xA0, 0xB8, 0xB6, 0xB5, 0xAF, 0xAB, 0xAD, 0x9B, 0x8C, 0x8F, 0x3E, 
   0x2E, 0x2F, 0x15, 0x11, 0x0D, 0x28, 0x2F, 0x28, 0x58, 0x5E, 0x59, 0x71, 0x71, 0x73, 0x75, 0x76, 
   0x7E, 0x7E, 0x82, 0x89, 0x98, 0x9A, 0x98, 0xB0, 0xAC, 0xA8, 0xC2, 0xB8, 0xBC, 0x59, 0x4C, 0x55, 
   0x2A, 0x2B, 0x31, 0x34, 0x3C, 0x3C, 0x3B, 0x42, 0x3C, 0x3E, 0x48, 0x45, 0x44, 0x51, 0x50, 0x43, 
   0x51, 0x51, 0x54, 0x5E, 0x5C, 0x7E, 0x82, 0x7A, 0xA8, 0xA7, 0xA0, 0xBB, 0xB9, 0xB9, 0xB7, 0xB6, 
   0xBF, 0xB2, 0xB4, 0xC7, 0xA4, 0xAD, 0xCB, 0x97, 0xA6, 0xD0, 0x8D, 0x9E, 0xCF, 0x81, 0x95, 0xC5, 
   0x77, 0x8A, 0xB9, 0x7D, 0x8B, 0xBC, 0x7B, 0x87, 0xB9, 0x79, 0x88, 0xBA, 0x7C, 0x8F, 0xC0, 0x7D, 
   0x94, 0xC4, 0x81, 0x96, 0xC3, 0x7F, 0x96, 0xC2, 0x81, 0x96, 0xC3, 0x82, 0x97, 0xC2, 0x90, 0x9D, 
   0xB8, 0x8F, 0x8F, 0x92, 0x87, 0x88, 0x7E, 0x96, 0x92, 0x84, 0xA2, 0x99, 0x8A, 0xAE, 0xA0, 0x90, 
   0xB0, 0xA0, 0x8F, 0xB8, 0xAA, 0x97, 0xBD, 0xB0, 0x9B, 0xC3, 0xB5, 0xA0, 0xC9, 0xB8, 0xA2, 0xC9, 
   0xBC, 0xA6, 0xCC, 0xBD, 0xAD, 0xBA, 0xA7, 0xA2, 0x60, 0x50, 0x54, 0x5C, 0x57, 0x5F, 0x65, 0x65, 
   0x6B, 0x6F, 0x71, 0x75, 0x86, 0x84, 0x89, 0x90, 0x87, 0x8E, 0x8A, 0x87, 0x93, 0x81, 0x82, 0x94, 
   0x6B, 0x69, 0x82, 0x5C, 0x58, 0x74, 0x50, 0x4F, 0x65, 0x43, 0x42, 0x51, 0x41, 0x40, 0x48, 0x4E, 
   0x50, 0x52, 0x53, 0x51, 0x51, 0x56, 0x50, 0x53, 0x56, 0x52, 0x56, 0x5A, 0x56, 0x59, 0x60, 0x5E, 
   0x5F, 0x6D, 0x6C, 0x6D, 0x79, 0x7A, 0x7B, 0x70, 0x6F, 0x72, 0x6E, 0x6B, 0x71, 0x79, 0x78, 0x7B, 
   0x75, 0x75, 0x79, 0x70, 0x6D, 0x75, 0x73, 0x6F, 0x75, 0x75, 0x71, 0x79, 0x75, 0x71, 0x7B, 0x72, 
   0x6E, 0x70, 0x7F, 0x7D, 0x79, 0xA3, 0xA0, 0xA3, 0xA7, 0x9F, 0xA7, 0x98, 0x8C, 0x91, 0xA1, 0x94, 
   0x97, 0xA6, 0x98, 0x9C, 0xA6, 0x99, 0x9A, 0xB2, 0xA5, 0xA7, 0xAE, 0xA5, 0xAB, 0x9C, 0x90, 0x9D, 
   0x8C, 0x7D, 0x8A, 0x8A, 0x7F, 0x87, 0x83, 0x79, 0x82, 0x7B, 0x79, 0x83, 0x82, 0x86, 0x91, 0x97, 
   0x99, 0xA6, 0x91, 0x8A, 0x9A, 0x7D, 0x77, 0x87, 0x74, 0x76, 0x83, 0x73, 0x7B, 0x85, 0x88, 0x90, 
   0x96, 0x73, 0x6F, 0x76, 0x49, 0x3E, 0x41, 0x57, 0x52, 0x4B, 0x59, 0x56, 0x4C, 0x63, 0x5E, 0x56, 
   0x6C, 0x65, 0x65, 0x61, 0x59, 0x56, 0x7B, 0x97, 0xA9, 0x8F, 0xAC, 0xC0, 0x8C, 0xA7, 0xB8, 0x86, 
   0x9A, 0xA7, 0x8D, 0x93, 0x99, 0x90, 0x89, 0x8B, 0x76, 0x75, 0x78, 0x59, 0x61, 0x6A, 0x51, 0x5B, 
   0x64, 0x49, 0x57, 0x62, 0x46, 0x58, 0x63, 0x49, 0x57, 0x60, 0x6C, 0x79, 0x7F, 0x69, 0x79, 0x80, 
   0x62, 0x6B, 0x74, 0x5B, 0x61, 0x67, 0x67, 0x62, 0x68, 0x66, 0x62, 0x69, 0x60, 0x5F, 0x65, 0x62, 
   0x5F, 0x62, 0x68, 0x62, 0x65, 0x5A, 0x56, 0x5B, 0x4D, 0x51, 0x55, 0x4C, 0x4E, 0x51, 0x46, 0x4A, 
   0x4B, 0x41, 0x48, 0x46, 0x41, 0x47, 0x49, 0x44, 0x4B, 0x4F, 0x40, 0x49, 0x4E, 0x3D, 0x42, 0x46, 
   0x2C, 0x2D, 0x32, 0x20, 0x21, 0x23, 0x32, 0x2F, 0x35, 0x3B, 0x36, 0x3F, 0x3C, 0x3A, 0x41, 0x6B, 
   0x6C, 0x69, 0x82, 0x84, 0x79, 0x9C, 0x9E, 0x93, 0xA0, 0xA0, 0x98, 0x9B, 0x9A, 0x95, 0x91, 0x8F, 
   0x8E, 0x7E, 0x79, 0x7A, 0x7E, 0x79, 0x77, 0x7F, 0x7C, 0x75, 0x76, 0x77, 0x6C, 0x78, 0x7A, 0x76, 
   0x69, 0x66, 0x6B, 0x5A, 0x58, 0x5C, 0x4D, 0x4F, 0x54, 0x50, 0x54, 0x5C, 0x52, 0x55, 0x61, 0x4B, 
   0x54, 0x5F, 0x4F, 0x50, 0x58, 0x4E, 0x51, 0x58, 0x55, 0x5A, 0x5F, 0x71, 0x73, 0x77, 0x97, 0x92, 
   0x97, 0x99, 0x97, 0x98, 0x9F, 0x9C, 0x9B, 0xA1, 0x9C, 0x9E, 0x97, 0x93, 0x96, 0x8F, 0x8C, 0x8E, 
   0x91, 0x8C, 0x8E, 0x90, 0x8E, 0x8B, 0x8C, 0x86, 0x82, 0x86, 0x80, 0x7C, 0x83, 0x7B, 0x78, 0x80, 
   0x77, 0x76, 0x7A, 0x71, 0x71, 0x73, 0x6B, 0x6A, 0x69, 0x62, 0x61, 0x4F, 0x4E, 0x51, 0x37, 0x35, 
   0x36, 0x2B, 0x29, 0x29, 0x2E, 0x31, 0x2B, 0x32, 0x34, 0x2A, 0x26, 0x29, 0x25, 0x1F, 0x26, 0x26, 
   0x2B, 0x31, 0x2D, 0x7B, 0x7A, 0x72, 0x9A, 0x92, 0x91, 0x7E, 0x79, 0x79, 0x93, 0x8C, 0x8E, 0x94, 
   0x8D, 0x93, 0x7F, 0x79, 0x7E, 0x66, 0x67, 0x69, 0x58, 0x5D, 0x61, 0x43, 0x48, 0x4A, 0x3F, 0x43, 
   0x42, 0x61, 0x6D, 0x6B, 0x5F, 0x74, 0x72, 0x66, 0x77, 0x78, 0x68, 0x7B, 0x7F, 0x62, 0x77, 0x7C, 
   0x65, 0x76, 0x7B, 0x63, 0x74, 0x7A, 0x60, 0x6F, 0x77, 0x5F, 0x6D, 0x71, 0x82, 0x93, 0x8F, 0x95, 
   0x9A, 0xA0, 0x7B, 0x7B, 0x8E, 0x76, 0x7A, 0x90, 0x82, 0x83, 0x96, 0x80, 0x81, 0x90, 0x7C, 0x7D, 
   0x8A, 0x7B, 0x7D, 0x88, 0x7A, 0x80, 0x8D, 0x76, 0x7D, 0x8E, 0x70, 0x79, 0x89, 0x78, 0x80, 0x91, 
   0x78, 0x81, 0x8D, 0x70, 0x75, 0x80, 0x5C, 0x61, 0x68, 0x51, 0x53, 0x5E, 0x53, 0x50, 0x5D, 0x55, 
   0x5A, 0x61, 0x72, 0x79, 0x77, 0x7E, 0x84, 0x84, 0x80, 0x80, 0x80, 0x84, 0x81, 0x82, 0x7E, 0x76, 
   0x7E, 0x72, 0x6F, 0x76, 0x6F, 0x71, 0x74, 0x78, 0x78, 0x77, 0x77, 0x78, 0x7A, 0x7C, 0x80, 0x84, 
   0x87, 0x88, 0x8E, 0x84, 0x82, 0x84, 0x7F, 0x80, 0x79, 0x7F, 0x80, 0x7B, 0x82, 0x85, 0x85, 0x89, 
   0x8C, 0x8C, 0x8C, 0x8B, 0x8A, 0x8B, 0x89, 0x85, 0x8D, 0x89, 0x87, 0x8B, 0x85, 0x86, 0x82, 0x7F, 
   0x7E, 0x7B, 0x79, 0x7A, 0x78, 0x76, 0x78, 0x78, 0x77, 0x79, 0x82, 0x7F, 0x81, 0x99, 0x97, 0x99, 
   0xA3, 0xA4, 0xA4, 0xA8, 0xA7, 0xA7, 0xAB, 0xA7, 0xA9, 0xAA, 0xA4, 0xA8, 0xAE, 0xA3, 0xA8, 0x7D, 
   0x6B, 0x76, 0x21, 0x17, 0x20, 0x25, 0x28, 0x27, 0x59, 0x62, 0x58, 0x75, 0x7B, 0x73, 0x91, 0x94, 
   0x95, 0x81, 0x7F, 0x89, 0x8C, 0x88, 0x8E, 0xA7, 0x9B, 0x9E, 0x7B, 0x6B, 0x73, 0x25, 0x1D, 0x23, 
   0x22, 0x26, 0x29, 0x2C, 0x32, 0x35, 0x31, 0x36, 0x36, 0x32, 0x39, 0x39, 0x38, 0x42, 0x42, 0x3E, 
   0x4C, 0x4C, 0x4A, 0x56, 0x57, 0x53, 0x5C, 0x5C, 0x61, 0x66, 0x68, 0x81, 0x83, 0x85, 0x84, 0x86, 
   0x88, 0x8D, 0x92, 0x97, 0x92, 0x9C, 0xA9, 0x94, 0xA2, 0xBC, 0x92, 0xA4, 0xC7, 0x90, 0xA2, 0xCB, 
   0x8B, 0x9C, 0xCC, 0x82, 0x92, 0xC6, 0x82, 0x92, 0xC5, 0x86, 0x94, 0xC6, 0x87, 0x97, 0xC7, 0x78, 
   0x8D, 0xBB, 0x7D, 0x96, 0xC4, 0x7E, 0x98, 0xC5, 0x7D, 0x93, 0xC3, 0x7F, 0x95, 0xC4, 0x94, 0x9F, 
   0xBD, 0x95, 0x92, 0x97, 0x90, 0x90, 0x8A, 0x9B, 0x93, 0x8A, 0xA1, 0x97, 0x8A, 0xA9, 0x9C, 0x8D, 
   0xAC, 0x9D, 0x8A, 0xB3, 0xA3, 0x8E, 0xB6, 0xA6, 0x90, 0xBE, 0xAE, 0x96, 0xC4, 0xB3, 0x9C, 0xC6, 
   0xB5, 0x9F, 0xC1, 0xAE, 0x9F, 0xA1, 0x93, 0x8D, 0x5E, 0x58, 0x5D, 0x57, 0x52, 0x5B, 0x65, 0x60, 
   0x68, 0x71, 0x70, 0x77, 0x91, 0x8E, 0x96, 0x92, 0x89, 0x96, 0x73, 0x6D, 0x82, 0x63, 0x61, 0x7A, 
   0x54, 0x53, 0x6E, 0x49, 0x4C, 0x63, 0x3E, 0x42, 0x53, 0x36, 0x37, 0x43, 0x31, 0x34, 0x39, 0x43, 
   0x46, 0x47, 0x4E, 0x4C, 0x4B, 0x52, 0x4D, 0x4B, 0x50, 0x4D, 0x4D, 0x52, 0x50, 0x51, 0x5F, 0x5D, 
   0x5C, 0x65, 0x63, 0x63, 0x63, 0x5E, 0x63, 0x5E, 0x5A, 0x60, 0x65, 0x66, 0x6D, 0x65, 0x67, 0x69, 
   0x6D, 0x6D, 0x72, 0x6F, 0x6C, 0x74, 0x6E, 0x6A, 0x70, 0x71, 0x6D, 0x73, 0x6F, 0x6C, 0x72, 0x79, 
   0x78, 0x77, 0x98, 0x98, 0x97, 0xAB, 0xA3, 0xA6, 0xA0, 0x94, 0x98, 0xA0, 0x95, 0x95, 0xA9, 0x9F, 
   0x9F, 0xAB, 0x9D, 0xA1, 0xA8, 0x98, 0x9B, 0x9E, 0x93, 0x94, 0xA4, 0x9E, 0xA2, 0xAA, 0xA1, 0xAC, 
   0x8C, 0x7D, 0x89, 0x8A, 0x80, 0x8B, 0x83, 0x7C, 0x86, 0x7A, 0x75, 0x7E, 0x83, 0x88, 0x90, 0xAB, 
   0xB1, 0xB9, 0x9C, 0x97, 0xA5, 0x74, 0x6D, 0x7E, 0x71, 0x70, 0x7D, 0x76, 0x7C, 0x84, 0x88, 0x8F, 
   0x94, 0x72, 0x70, 0x70, 0x6E, 0x63, 0x5D, 0x6C, 0x60, 0x5C, 0x66, 0x5B, 0x57, 0x61, 0x57, 0x55, 
   0x5D, 0x55, 0x57, 0x5C, 0x53, 0x54, 0x79, 0x91, 0xA0, 0x8B, 0xA9, 0xBE, 0x90, 0xAE, 0xC4, 0x91, 
   0xA8, 0xB5, 0x89, 0x8E, 0x93, 0x95, 0x8F, 0x8F, 0x80, 0x7D, 0x80, 0x62, 0x67, 0x6F, 0x5B, 0x65, 
   0x6D, 0x47, 0x56, 0x61, 0x48, 0x58, 0x61, 0x54, 0x61, 0x66, 0x71, 0x7D, 0x82, 0x6B, 0x77, 0x7D, 
   0x5E, 0x63, 0x6A, 0x60, 0x65, 0x6B, 0x75, 0x75, 0x7A, 0x8C, 0x8B, 0x90, 0x65, 0x64, 0x6A, 0x51, 
   0x4D, 0x51, 0x57, 0x4F, 0x53, 0x57, 0x52, 0x56, 0x51, 0x50, 0x56, 0x57, 0x56, 0x5C, 0x58, 0x59, 
   0x5A, 0x56, 0x59, 0x5B, 0x50, 0x51, 0x55, 0x4B, 0x4E, 0x50, 0x40, 0x48, 0x48, 0x3F, 0x41, 0x44, 
   0x29, 0x2C, 0x34, 0x17, 0x1A, 0x1E, 0x25, 0x27, 0x2A, 0x31, 0x30, 0x36, 0x34, 0x31, 0x38, 0x66, 
   0x66, 0x66, 0x7F, 0x81, 0x7B, 0x8F, 0x8F, 0x87, 0x94, 0x93, 0x8D, 0x91, 0x8D, 0x8C, 0x8E, 0x8A, 
   0x8A, 0x85, 0x81, 0x82, 0x7B, 0x7A, 0x79, 0x78, 0x78, 0x73, 0x75, 0x76, 0x6D, 0x69, 0x6B, 0x65, 
   0x64, 0x5F, 0x62, 0x62, 0x5C, 0x5B, 0x56, 0x56, 0x53, 0x3E, 0x45, 0x45, 0x36, 0x3E, 0x41, 0x3B, 
   0x43, 0x49, 0x4A, 0x4D, 0x51, 0x5F, 0x5F, 0x64, 0x74, 0x77, 0x75, 0x98, 0x96, 0x95, 0xA2, 0x9C, 
   0x9D, 0x97, 0x95, 0x97, 0xA0, 0x9D, 0x9C, 0x9F, 0x98, 0x97, 0x94, 0x8D, 0x8D, 0x91, 0x8C, 0x8E, 
   0x8E, 0x8A, 0x8C, 0x8C, 0x87, 0x86, 0x88, 0x83, 0x7F, 0x7F, 0x7A, 0x79, 0x7B, 0x74, 0x76, 0x77, 
   0x71, 0x73, 0x70, 0x6A, 0x6C, 0x61, 0x5B, 0x5B, 0x38, 0x34, 0x33, 0x1F, 0x23, 0x23, 0x17, 0x19, 
   0x1A, 0x15, 0x13, 0x14, 0x15, 0x15, 0x0F, 0x1B, 0x18, 0x0F, 0x20, 0x1E, 0x1A, 0x17, 0x1B, 0x19, 
   0x2E, 0x34, 0x2E, 0x85, 0x84, 0x7B, 0x98, 0x90, 0x8C, 0x72, 0x6F, 0x6F, 0x94, 0x90, 0x8F, 0x97, 
   0x94, 0x99, 0x7D, 0x7A, 0x7E, 0x63, 0x66, 0x67, 0x57, 0x5B, 0x5F, 0x3A, 0x41, 0x46, 0x4B, 0x52, 
   0x51, 0x65, 0x6F, 0x70, 0x5E, 0x6C, 0x6D, 0x67, 0x75, 0x77, 0x65, 0x76, 0x7B, 0x5A, 0x6D, 0x73, 
   0x59, 0x69, 0x6E, 0x63, 0x75, 0x7A, 0x67, 0x78, 0x7D, 0x5D, 0x6D, 0x70, 0x84, 0x97, 0x95, 0x89, 
   0x92, 0x9A, 0x7B, 0x7D, 0x90, 0x7A, 0x7D, 0x93, 0x7F, 0x81, 0x94, 0x7E, 0x7F, 0x8D, 0x78, 0x7B, 
   0x86, 0x78, 0x7A, 0x85, 0x77, 0x7E, 0x8A, 0x73, 0x79, 0x89, 0x6E, 0x75, 0x84, 0x75, 0x7E, 0x8D, 
   0x77, 0x81, 0x8B, 0x61, 0x66, 0x72, 0x43, 0x49, 0x55, 0x47, 0x4F, 0x58, 0x57, 0x57, 0x61, 0x73, 
   0x78, 0x7F, 0x80, 0x80, 0x82, 0x77, 0x79, 0x78, 0x80, 0x7D, 0x7D, 0x84, 0x81, 0x81, 0x75, 0x71, 
   0x77, 0x6E, 0x70, 0x74, 0x6C, 0x73, 0x77, 0x7B, 0x7A, 0x7A, 0x7C, 0x79, 0x7B, 0x80, 0x84, 0x85, 
   0x88, 0x87, 0x8A, 0x88, 0x83, 0x85, 0x85, 0x84, 0x80, 0x84, 0x85, 0x82, 0x83, 0x87, 0x88, 0x82, 
   0x81, 0x84, 0x84, 0x81, 0x80, 0x88, 0x85, 0x84, 0x85, 0x83, 0x82, 0x7C, 0x7A, 0x7A, 0x73, 0x72, 
   0x72, 0x76, 0x75, 0x76, 0x82, 0x82, 0x84, 0x97, 0x97, 0x98, 0xA5, 0xA4, 0xA2, 0xA8, 0xA6, 0xA4, 
   0xA8, 0xA5, 0xA4, 0xA7, 0xA4, 0xA4, 0xA6, 0xA3, 0xA2, 0xA5, 0x9F, 0x9E, 0xA2, 0x9E, 0xA0, 0x90, 
   0x86, 0x8E, 0x57, 0x51, 0x59, 0x3F, 0x3F, 0x42, 0x4A, 0x4B, 0x48, 0x5B, 0x61, 0x59, 0x7C, 0x84, 
   0x7E, 0x7F, 0x76, 0x80, 0x73, 0x68, 0x78, 0x73, 0x66, 0x72, 0x3E, 0x34, 0x3F, 0x1C, 0x1D, 0x26, 
   0x18, 0x1F, 0x25, 0x21, 0x25, 0x2D, 0x24, 0x26, 0x2E, 0x28, 0x2E, 0x33, 0x2B, 0x34, 0x36, 0x3E, 
   0x48, 0x4A, 0x44, 0x4D, 0x4F, 0x53, 0x5A, 0x5D, 0x5C, 0x60, 0x66, 0x61, 0x67, 0x6A, 0x58, 0x60, 
   0x61, 0x5D, 0x66, 0x67, 0x7E, 0x88, 0x8B, 0x81, 0x8E, 0x98, 0x8C, 0x9C, 0xAB, 0xA7, 0xB0, 0xC7, 
   0xA1, 0xAD, 0xD0, 0x83, 0x96, 0xC4, 0x7D, 0x93, 0xC1, 0x83, 0x95, 0xC3, 0x86, 0x96, 0xC5, 0x73, 
   0x89, 0xBA, 0x75, 0x8D, 0xBD, 0x75, 0x8E, 0xBF, 0x73, 0x8B, 0xBD, 0x7A, 0x93, 0xC0, 0x90, 0xA0, 
   0xB7, 0x9B, 0x99, 0x96, 0x9C, 0x97, 0x8C, 0x9E, 0x93, 0x89, 0x9E, 0x95, 0x85, 0xA7, 0x9A, 0x89, 
   0xAC, 0x9D, 0x89, 0xB2, 0xA0, 0x8D, 0xB7, 0xA4, 0x90, 0xBB, 0xA9, 0x90, 0xC3, 0xAC, 0x94, 0xC8, 
   0xB0, 0x9A, 0xB3, 0x9D, 0x90, 0x88, 0x7E, 0x7A, 0x6F, 0x70, 0x72, 0x67, 0x63, 0x6A, 0x68, 0x63, 
   0x6C, 0x78, 0x77, 0x7F, 0x97, 0x94, 0xA0, 0x82, 0x7E, 0x8F, 0x59, 0x57, 0x6C, 0x53, 0x53, 0x6A, 
   0x48, 0x4A, 0x60, 0x41, 0x46, 0x56, 0x33, 0x38, 0x44, 0x2C, 0x2D, 0x39, 0x28, 0x2E, 0x31, 0x39, 
   0x3F, 0x3B, 0x48, 0x45, 0x44, 0x4B, 0x47, 0x45, 0x48, 0x45, 0x44, 0x4A, 0x48, 0x49, 0x5E, 0x5F, 
   0x60, 0x60, 0x62, 0x65, 0x62, 0x5F, 0x63, 0x62, 0x5D, 0x62, 0x6B, 0x68, 0x70, 0x68, 0x6B, 0x6A, 
   0x6A, 0x69, 0x6A, 0x6E, 0x6C, 0x6F, 0x71, 0x70, 0x71, 0x78, 0x74, 0x78, 0x6F, 0x6B, 0x6F, 0x88, 
   0x89, 0x89, 0x9F, 0x9B, 0xA0, 0x9D, 0x93, 0x96, 0x9C, 0x8F, 0x90, 0xA2, 0x96, 0x96, 0xA2, 0x94, 
   0x96, 0x93, 0x86, 0x8C, 0x94, 0x86, 0x8E, 0x91, 0x85, 0x89, 0x96, 0x8E, 0x8F, 0x97, 0x8A, 0x95, 
   0x8A, 0x7D, 0x89, 0x86, 0x7D, 0x8A, 0x83, 0x7F, 0x8C, 0x83, 0x84, 0x8C, 0x9D, 0xA1, 0xA9, 0xA4, 
   0xA4, 0xAE, 0x81, 0x7A, 0x88, 0x6F, 0x6B, 0x7A, 0x6F, 0x70, 0x7C, 0x7B, 0x80, 0x88, 0x8B, 0x8E, 
   0x92, 0x86, 0x82, 0x7B, 0x81, 0x73, 0x6C, 0x6F, 0x5F, 0x5D, 0x69, 0x5B, 0x58, 0x60, 0x55, 0x53, 
   0x5E, 0x53, 0x56, 0x61, 0x56, 0x57, 0x81, 0x94, 0xA4, 0x87, 0xA0, 0xB5, 0x92, 0xAE, 0xC5, 0x9A, 
   0xAE, 0xBF, 0x87, 0x8B, 0x92, 0x99, 0x94, 0x97, 0x9D, 0x98, 0x99, 0x66, 0x68, 0x6A, 0x52, 0x5C, 
   0x66, 0x46, 0x55, 0x61, 0x4A, 0x59, 0x61, 0x58, 0x63, 0x67, 0x68, 0x6F, 0x74, 0x66, 0x6B, 0x72, 
   0x57, 0x5A, 0x61, 0x64, 0x6D, 0x72, 0x77, 0x7B, 0x82, 0x8B, 0x8E, 0x94, 0x6E, 0x6F, 0x72, 0x58, 
   0x55, 0x58, 0x54, 0x4F, 0x52, 0x59, 0x53, 0x57, 0x57, 0x52, 0x56, 0x54, 0x53, 0x57, 0x5C, 0x5A, 
   0x5C, 0x6B, 0x6A, 0x6D, 0x61, 0x5F, 0x64, 0x59, 0x57, 0x59, 0x65, 0x64, 0x66, 0x57, 0x56, 0x5C, 
   0x28, 0x2E, 0x34, 0x0E, 0x14, 0x19, 0x12, 0x18, 0x1B, 0x20, 0x24, 0x27, 0x2E, 0x31, 0x34, 0x46, 
   0x48, 0x49, 0x70, 0x73, 0x71, 0x7E, 0x82, 0x7C, 0x88, 0x88, 0x85, 0x87, 0x82, 0x84, 0x8F, 0x89, 
   0x8C, 0x8D, 0x88, 0x88, 0x82, 0x81, 0x7E, 0x7C, 0x7D, 0x77, 0x78, 0x79, 0x72, 0x6C, 0x6B, 0x67, 
   0x61, 0x5C, 0x5E, 0x5A, 0x51, 0x50, 0x50, 0x4C, 0x49, 0x36, 0x3B, 0x38, 0x16, 0x1D, 0x1B, 0x32, 
   0x39, 0x3B, 0x67, 0x67, 0x6A, 0x74, 0x70, 0x75, 0x87, 0x86, 0x85, 0x9C, 0x9A, 0x97, 0x96, 0x93, 
   0x91, 0x82, 0x86, 0x88, 0x71, 0x74, 0x75, 0x77, 0x76, 0x75, 0x7F, 0x7D, 0x7B, 0x81, 0x7E, 0x7F, 
   0x7D, 0x7A, 0x7C, 0x7D, 0x77, 0x79, 0x7B, 0x76, 0x75, 0x77, 0x75, 0x75, 0x75, 0x6F, 0x73, 0x71, 
   0x69, 0x6E, 0x59, 0x54, 0x57, 0x2E, 0x2C, 0x2C, 0x25, 0x22, 0x20, 0x2A, 0x2F, 0x2F, 0x2D, 0x2E, 
   0x33, 0x2B, 0x29, 0x2D, 0x2B, 0x28, 0x2A, 0x2E, 0x27, 0x2C, 0x18, 0x14, 0x1A, 0x10, 0x16, 0x15, 
   0x3F, 0x49, 0x42, 0x92, 0x92, 0x8B, 0x94, 0x8C, 0x89, 0x7A, 0x77, 0x75, 0x99, 0x96, 0x91, 0x99, 
   0x96, 0x96, 0x75, 0x74, 0x77, 0x5F, 0x63, 0x66, 0x59, 0x58, 0x5C, 0x36, 0x3F, 0x3F, 0x68, 0x73, 
   0x6F, 0x81, 0x84, 0x85, 0x67, 0x70, 0x73, 0x67, 0x73, 0x78, 0x61, 0x73, 0x79, 0x5C, 0x6D, 0x72, 
   0x56, 0x64, 0x68, 0x5B, 0x6A, 0x6F, 0x67, 0x75, 0x7B, 0x60, 0x6F, 0x74, 0x75, 0x85, 0x88, 0x79, 
   0x84, 0x90, 0x76, 0x7D, 0x90, 0x7A, 0x7F, 0x94, 0x7B, 0x82, 0x93, 0x77, 0x7F, 0x8D, 0x77, 0x7B, 
   0x88, 0x79, 0x80, 0x8B, 0x78, 0x7F, 0x8D, 0x72, 0x77, 0x87, 0x75, 0x79, 0x87, 0x7C, 0x83, 0x90, 
   0x81, 0x88, 0x93, 0x5F, 0x63, 0x73, 0x3B, 0x44, 0x50, 0x46, 0x51, 0x57, 0x6C, 0x6F, 0x74, 0x80, 
   0x82, 0x86, 0x8E, 0x8A, 0x8A, 0x7D, 0x7C, 0x77, 0x7F, 0x79, 0x78, 0x7A, 0x71, 0x75, 0x6B, 0x64, 
   0x65, 0x6B, 0x6C, 0x69, 0x79, 0x7D, 0x80, 0x83, 0x81, 0x83, 0x84, 0x81, 0x83, 0x7C, 0x7F, 0x7E, 
   0x7F, 0x80, 0x82, 0x83, 0x82, 0x85, 0x80, 0x82, 0x83, 0x87, 0x87, 0x89, 0x84, 0x84, 0x8A, 0x81, 
   0x80, 0x86, 0x80, 0x81, 0x82, 0x7C, 0x7C, 0x7D, 0x76, 0x74, 0x76, 0x70, 0x6D, 0x70, 0x7C, 0x79, 
   0x7C, 0x9B, 0x9A, 0x9A, 0xA5, 0xA4, 0xA4, 0xA9, 0xAA, 0xA5, 0xA4, 0xA2, 0xA0, 0xA6, 0xA1, 0xA1, 
   0xA9, 0xA5, 0xA5, 0xA8, 0xA5, 0xA4, 0xA6, 0xA2, 0x9F, 0xA3, 0x9D, 0x9A, 0x9C, 0x99, 0x99, 0x8F, 
   0x91, 0x90, 0x95, 0x97, 0x97, 0x99, 0x95, 0x96, 0x71, 0x69, 0x69, 0x42, 0x42, 0x3E, 0x59, 0x5E, 
   0x5A, 0x6F, 0x65, 0x6D, 0x53, 0x4A, 0x5A, 0x3D, 0x38, 0x47, 0x2E, 0x2F, 0x3D, 0x28, 0x2F, 0x3D, 
   0x25, 0x2B, 0x36, 0x26, 0x28, 0x34, 0x24, 0x28, 0x31, 0x1F, 0x25, 0x2C, 0x1E, 0x26, 0x2A, 0x2C, 
   0x34, 0x36, 0x33, 0x37, 0x3A, 0x44, 0x44, 0x47, 0x4F, 0x51, 0x56, 0x50, 0x57, 0x5A, 0x50, 0x59, 
   0x5C, 0x60, 0x68, 0x6C, 0x7F, 0x85, 0x88, 0x7C, 0x81, 0x87, 0x87, 0x8F, 0x93, 0xA8, 0xA9, 0xAD, 
   0xB9, 0xB9, 0xC8, 0x9C, 0xA5, 0xC6, 0x8B, 0x9C, 0xC7, 0x83, 0x96, 0xC4, 0x80, 0x92, 0xC1, 0x7B, 
   0x8E, 0xC0, 0x6D, 0x8A, 0xBA, 0x6D, 0x87, 0xB9, 0x73, 0x8A, 0xBB, 0x82, 0x9E, 0xC7, 0x98, 0xAB, 
   0xBF, 0xA0, 0x9D, 0x9A, 0xAA, 0x9D, 0x94, 0xA1, 0x96, 0x8B, 0xA0, 0x94, 0x84, 0xA4, 0x95, 0x84, 
   0xAA, 0x9A, 0x86, 0xAF, 0x9E, 0x8A, 0xB5, 0xA3, 0x90, 0xB8, 0xA6, 0x8F, 0xBC, 0xA6, 0x90, 0xBE, 
   0xA6, 0x95, 0x99, 0x83, 0x7F, 0x70, 0x65, 0x68, 0x6A, 0x6F, 0x6E, 0x6C, 0x6B, 0x70, 0x63, 0x5D, 
   0x68, 0x6B, 0x68, 0x75, 0x70, 0x71, 0x80, 0x59, 0x5E, 0x6D, 0x4B, 0x52, 0x61, 0x47, 0x4E, 0x5C, 
   0x43, 0x49, 0x57, 0x43, 0x45, 0x52, 0x43, 0x43, 0x4D, 0x3F, 0x3E, 0x47, 0x39, 0x3C, 0x40, 0x3B, 
   0x40, 0x3D, 0x45, 0x44, 0x43, 0x42, 0x42, 0x42, 0x3D, 0x3C, 0x3D, 0x5C, 0x59, 0x5D, 0x69, 0x66, 
   0x6E, 0x65, 0x63, 0x6A, 0x6B, 0x66, 0x67, 0x71, 0x6A, 0x6D, 0x78, 0x71, 0x7D, 0x72, 0x70, 0x77, 
   0x71, 0x6C, 0x72, 0x72, 0x6E, 0x72, 0x7D, 0x7F, 0x7D, 0xA1, 0xA1, 0xA3, 0xB1, 0xAC, 0xB5, 0xA0, 
   0x9C, 0xA4, 0x98, 0x92, 0x98, 0x99, 0x8D, 0x92, 0x9A, 0x8D, 0x90, 0x9C, 0x8F, 0x93, 0x98, 0x8B, 
   0x92, 0x91, 0x84, 0x8E, 0x93, 0x87, 0x93, 0x94, 0x88, 0x91, 0x99, 0x8E, 0x94, 0x94, 0x87, 0x91, 
   0x93, 0x87, 0x90, 0x91, 0x88, 0x93, 0x8A, 0x87, 0x93, 0x97, 0x9C, 0xA5, 0xA7, 0xA6, 0xB0, 0x88, 
   0x7F, 0x89, 0x6F, 0x69, 0x73, 0x6D, 0x6C, 0x79, 0x6F, 0x70, 0x7B, 0x81, 0x85, 0x8C, 0x92, 0x8F, 
   0x8F, 0x8C, 0x84, 0x7B, 0x7E, 0x6F, 0x68, 0x6D, 0x5E, 0x5E, 0x63, 0x56, 0x54, 0x5E, 0x54, 0x4F, 
   0x5E, 0x55, 0x52, 0x5F, 0x55, 0x54, 0x8C, 0x9B, 0xAC, 0x94, 0xA6, 0xB9, 0x95, 0xAA, 0xBB, 0x95, 
   0xA0, 0xAD, 0x97, 0x92, 0x98, 0xAE, 0xA5, 0xAA, 0xB5, 0xB4, 0xB3, 0x7D, 0x81, 0x7F, 0x4F, 0x58, 
   0x60, 0x48, 0x51, 0x5F, 0x4E, 0x57, 0x62, 0x5E, 0x69, 0x6F, 0x68, 0x72, 0x78, 0x64, 0x68, 0x6F, 
   0x5C, 0x5D, 0x63, 0x6B, 0x70, 0x73, 0x7F, 0x81, 0x88, 0x7F, 0x7F, 0x82, 0x6B, 0x6A, 0x69, 0x5C, 
   0x5B, 0x5B, 0x56, 0x55, 0x59, 0x55, 0x52, 0x59, 0x59, 0x53, 0x5C, 0x59, 0x56, 0x59, 0x5A, 0x55, 
   0x58, 0x60, 0x5D, 0x62, 0x5F, 0x5D, 0x61, 0x5F, 0x5C, 0x5E, 0x75, 0x72, 0x73, 0x73, 0x71, 0x76, 
   0x64, 0x61, 0x66, 0x51, 0x4F, 0x55, 0x3A, 0x38, 0x3F, 0x2A, 0x29, 0x2F, 0x2B, 0x2B, 0x2E, 0x2A, 
   0x2A, 0x2C, 0x3F, 0x41, 0x41, 0x5F, 0x62, 0x60, 0x80, 0x7B, 0x7A, 0x89, 0x83, 0x81, 0x86, 0x88, 
   0x83, 0x81, 0x85, 0x7F, 0x80, 0x7E, 0x7A, 0x70, 0x70, 0x6E, 0x79, 0x7B, 0x79, 0x73, 0x71, 0x6F, 
   0x62, 0x5D, 0x5D, 0x59, 0x53, 0x50, 0x49, 0x43, 0x43, 0x28, 0x2A, 0x2B, 0x1C, 0x1F, 0x21, 0x5C, 
   0x5B, 0x61, 0x70, 0x6D, 0x70, 0x72, 0x6E, 0x73, 0x93, 0x91, 0x92, 0x94, 0x8E, 0x92, 0x69, 0x60, 
   0x65, 0x4D, 0x4A, 0x4D, 0x4F, 0x4E, 0x50, 0x61, 0x61, 0x64, 0x66, 0x68, 0x6B, 0x6D, 0x6D, 0x70, 
   0x6E, 0x6B, 0x6C, 0x6F, 0x69, 0x69, 0x6D, 0x6A, 0x6E, 0x72, 0x71, 0x74, 0x70, 0x69, 0x6C, 0x59, 
   0x4D, 0x51, 0x39, 0x35, 0x37, 0x30, 0x34, 0x35, 0x34, 0x35, 0x36, 0x38, 0x3B, 0x3C, 0x3A, 0x3C, 
   0x3F, 0x3F, 0x41, 0x43, 0x46, 0x48, 0x4B, 0x5A, 0x57, 0x5D, 0x19, 0x1A, 0x1C, 0x14, 0x1D, 0x1B, 
   0x57, 0x63, 0x61, 0x91, 0x92, 0x90, 0x93, 0x8A, 0x8A, 0x7A, 0x76, 0x74, 0x88, 0x86, 0x81, 0x95, 
   0x90, 0x8E, 0x71, 0x71, 0x76, 0x59, 0x5F, 0x66, 0x56, 0x54, 0x5A, 0x3E, 0x42, 0x41, 0x84, 0x91, 
   0x8B, 0x9C, 0xA1, 0x9F, 0x76, 0x84, 0x85, 0x5F, 0x73, 0x77, 0x59, 0x6E, 0x74, 0x5D, 0x6C, 0x71, 
   0x5C, 0x69, 0x6D, 0x5F, 0x6C, 0x70, 0x62, 0x6B, 0x72, 0x60, 0x69, 0x71, 0x7F, 0x86, 0x8E, 0x80, 
   0x84, 0x92, 0x70, 0x75, 0x88, 0x79, 0x7F, 0x92, 0x77, 0x7F, 0x8F, 0x75, 0x7A, 0x8B, 0x75, 0x7A, 
   0x8B, 0x75, 0x7E, 0x8A, 0x72, 0x7C, 0x8B, 0x72, 0x7B, 0x8B, 0x72, 0x7A, 0x89, 0x6D, 0x75, 0x84, 
   0x76, 0x7E, 0x8F, 0x61, 0x65, 0x7A, 0x3F, 0x46, 0x53, 0x58, 0x5E, 0x67, 0x78, 0x79, 0x7F, 0x7F, 
   0x7F, 0x80, 0xA1, 0x9D, 0x98, 0x84, 0x83, 0x7C, 0x74, 0x71, 0x6F, 0x6F, 0x6B, 0x6D, 0x6D, 0x6A, 
   0x68, 0x76, 0x75, 0x71, 0x7E, 0x7E, 0x80, 0x82, 0x7B, 0x7E, 0x85, 0x7D, 0x7E, 0x81, 0x7B, 0x7B, 
   0x81, 0x7C, 0x7E, 0x7B, 0x7C, 0x7F, 0x76, 0x7B, 0x80, 0x80, 0x83, 0x88, 0x7C, 0x7D, 0x83, 0x77, 
   0x78, 0x7C, 0x76, 0x78, 0x7B, 0x77, 0x78, 0x7C, 0x76, 0x77, 0x7A, 0x8A, 0x8C, 0x8E, 0xA5, 0xA4, 
   0xA5, 0xA7, 0xA5, 0xA4, 0xA0, 0x9D, 0x9A, 0x9E, 0x9D, 0x98, 0xA6, 0xA0, 0xA1, 0xA8, 0xA0, 0xA3, 
   0xA7, 0xA1, 0xA2, 0xA6, 0xA3, 0xA1, 0xA6, 0xA3, 0xA1, 0xAA, 0xA3, 0xA3, 0x99, 0x98, 0x96, 0x91, 
   0x94, 0x91, 0xA2, 0xA3, 0xA1, 0xAC, 0xA5, 0xA4, 0xA7, 0xA0, 0x9F, 0x86, 0x80, 0x83, 0x52, 0x4E, 
   0x51, 0x31, 0x2D, 0x30, 0x25, 0x25, 0x2F, 0x2D, 0x32, 0x3B, 0x3A, 0x40, 0x49, 0x37, 0x3D, 0x46, 
   0x38, 0x3F, 0x46, 0x37, 0x3E, 0x45, 0x40, 0x48, 0x50, 0x3C, 0x43, 0x49, 0x2C, 0x32, 0x37, 0x2B, 
   0x2F, 0x32, 0x23, 0x26, 0x2C, 0x26, 0x2A, 0x2F, 0x2B, 0x30, 0x36, 0x36, 0x3F, 0x42, 0x41, 0x4C, 
   0x51, 0x4E, 0x57, 0x5B, 0x62, 0x68, 0x6A, 0x75, 0x79, 0x7D, 0x7E, 0x83, 0x85, 0x90, 0x92, 0x8D, 
   0xB4, 0xB4, 0xB0, 0xB1, 0xB2, 0xBC, 0xA8, 0xAF, 0xC7, 0x9A, 0xA6, 0xC7, 0x8A, 0x97, 0xBE, 0x84, 
   0x93, 0xC0, 0x81, 0x95, 0xC1, 0x7F, 0x91, 0xBD, 0x7B, 0x8C, 0xB6, 0x8E, 0xA5, 0xC6, 0x9E, 0xAE, 
   0xBD, 0xA1, 0x9E, 0x9B, 0xAA, 0x9D, 0x93, 0xA1, 0x99, 0x8F, 0x9E, 0x91, 0x83, 0x9F, 0x90, 0x7F, 
   0xA3, 0x95, 0x80, 0xA9, 0x9B, 0x87, 0xB3, 0xA3, 0x8F, 0xB5, 0xA3, 0x90, 0xB9, 0xA4, 0x95, 0xB8, 
   0xA7, 0x9F, 0x97, 0x8A, 0x8C, 0x8F, 0x8B, 0x8F, 0x75, 0x7A, 0x79, 0x6A, 0x68, 0x6E, 0x63, 0x5B, 
   0x69, 0x5D, 0x55, 0x68, 0x47, 0x47, 0x57, 0x3F, 0x48, 0x51, 0x37, 0x43, 0x48, 0x43, 0x48, 0x4E, 
   0x52, 0x50, 0x5B, 0x4C, 0x49, 0x53, 0x46, 0x46, 0x49, 0x3A, 0x36, 0x3A, 0x34, 0x31, 0x36, 0x33, 
   0x33, 0x32, 0x38, 0x39, 0x38, 0x36, 0x3D, 0x3E, 0x50, 0x54, 0x59, 0x67, 0x69, 0x6B, 0x6B, 0x6A, 
   0x6E, 0x6C, 0x68, 0x6D, 0x6B, 0x68, 0x6A, 0x72, 0x71, 0x76, 0x75, 0x76, 0x87, 0x77, 0x73, 0x7F, 
   0x6C, 0x63, 0x6C, 0x6F, 0x67, 0x6C, 0x82, 0x83, 0x83, 0xB3, 0xB6, 0xBB, 0xB4, 0xAF, 0xBC, 0x94, 
   0x88, 0x97, 0x9D, 0x94, 0x9B, 0xA1, 0x94, 0x99, 0xA0, 0x93, 0x97, 0x94, 0x88, 0x8F, 0x90, 0x84, 
   0x8D, 0x94, 0x89, 0x94, 0x91, 0x8A, 0x95, 0x92, 0x8F, 0x96, 0x98, 0x90, 0x94, 0x99, 0x8F, 0x96, 
   0x9F, 0x94, 0x9A, 0x9C, 0x90, 0x99, 0x8F, 0x8A, 0x93, 0x8A, 0x8A, 0x93, 0x88, 0x82, 0x8D, 0x79, 
   0x74, 0x7E, 0x69, 0x6C, 0x75, 0x6B, 0x6B, 0x77, 0x74, 0x75, 0x7E, 0x7E, 0x81, 0x87, 0x84, 0x83, 
   0x80, 0x86, 0x7F, 0x75, 0x74, 0x6A, 0x62, 0x5D, 0x53, 0x50, 0x61, 0x56, 0x52, 0x5E, 0x53, 0x4E, 
   0x5F, 0x56, 0x51, 0x5F, 0x57, 0x52, 0x92, 0x97, 0xA3, 0xA6, 0xAA, 0xB4, 0xA6, 0xAA, 0xB0, 0x96, 
   0x95, 0x98, 0x9D, 0x95, 0x95, 0xAC, 0xA6, 0xA9, 0xA8, 0xA7, 0xA8, 0x8E, 0x91, 0x90, 0x57, 0x60, 
   0x68, 0x4F, 0x58, 0x67, 0x50, 0x58, 0x64, 0x63, 0x6E, 0x74, 0x76, 0x83, 0x86, 0x75, 0x7B, 0x7D, 
   0x68, 0x69, 0x6B, 0x7D, 0x7F, 0x7E, 0x8C, 0x8C, 0x90, 0x7A, 0x78, 0x7C, 0x6A, 0x68, 0x69, 0x53, 
   0x53, 0x55, 0x4C, 0x4E, 0x53, 0x4E, 0x4F, 0x55, 0x55, 0x52, 0x57, 0x5A, 0x57, 0x59, 0x5C, 0x57, 
   0x5A, 0x5E, 0x5A, 0x5E, 0x5A, 0x59, 0x5D, 0x58, 0x58, 0x58, 0x56, 0x55, 0x57, 0x56, 0x5A, 0x5E, 
   0x5D, 0x5B, 0x5F, 0x5E, 0x5A, 0x61, 0x60, 0x5D, 0x64, 0x59, 0x57, 0x5B, 0x51, 0x51, 0x53, 0x47, 
   0x48, 0x4B, 0x46, 0x46, 0x4A, 0x5C, 0x5A, 0x5B, 0x7D, 0x79, 0x78, 0x84, 0x82, 0x80, 0x7E, 0x84, 
   0x7E, 0x7A, 0x81, 0x7B, 0x89, 0x89, 0x85, 0x76, 0x75, 0x74, 0x70, 0x73, 0x72, 0x6E, 0x6F, 0x6A, 
   0x5F, 0x5F, 0x58, 0x58, 0x55, 0x50, 0x48, 0x45, 0x47, 0x2B, 0x2D, 0x32, 0x3E, 0x3E, 0x44, 0x6F, 
   0x6A, 0x72, 0x72, 0x6D, 0x6F, 0x81, 0x7E, 0x80, 0x81, 0x80, 0x82, 0x6F, 0x70, 0x76, 0x6A, 0x69, 
   0x72, 0x71, 0x72, 0x77, 0x71, 0x71, 0x77, 0x7A, 0x7A, 0x80, 0x64, 0x66, 0x6A, 0x5A, 0x5C, 0x5E, 
   0x5F, 0x5E, 0x60, 0x64, 0x5E, 0x60, 0x62, 0x61, 0x63, 0x5D, 0x5E, 0x5F, 0x4E, 0x49, 0x4B, 0x43, 
   0x3C, 0x3D, 0x3E, 0x3E, 0x3F, 0x3C, 0x43, 0x45, 0x43, 0x47, 0x4A, 0x46, 0x49, 0x4C, 0x4A, 0x4D, 
   0x4B, 0x51, 0x53, 0x51, 0x59, 0x5C, 0x5F, 0x4A, 0x4D, 0x50, 0x25, 0x2E, 0x30, 0x3E, 0x4E, 0x4E, 
   0x72, 0x7D, 0x7E, 0x8F, 0x91, 0x94, 0x8D, 0x86, 0x8B, 0x79, 0x76, 0x76, 0x84, 0x82, 0x7E, 0x87, 
   0x81, 0x7F, 0x68, 0x67, 0x6B, 0x55, 0x5B, 0x62, 0x48, 0x4A, 0x4E, 0x40, 0x48, 0x45, 0x70, 0x82, 
   0x7B, 0x8D, 0x9B, 0x99, 0x75, 0x86, 0x8A, 0x5E, 0x75, 0x7A, 0x63, 0x78, 0x7E, 0x61, 0x6F, 0x73, 
   0x61, 0x6E, 0x72, 0x64, 0x74, 0x78, 0x65, 0x71, 0x77, 0x61, 0x6A, 0x72, 0x81, 0x8D, 0x93, 0x8D, 
   0x92, 0x9E, 0x6A, 0x6F, 0x80, 0x78, 0x7E, 0x90, 0x75, 0x77, 0x8A, 0x73, 0x74, 0x87, 0x71, 0x75, 
   0x8A, 0x70, 0x7A, 0x86, 0x71, 0x7D, 0x8B, 0x73, 0x80, 0x90, 0x6E, 0x7E, 0x8F, 0x5C, 0x6A, 0x7B, 
   0x4C, 0x56, 0x6C, 0x48, 0x4F, 0x67, 0x4F, 0x53, 0x61, 0x6D, 0x70, 0x77, 0x73, 0x73, 0x78, 0x6E, 
   0x6D, 0x71, 0x73, 0x71, 0x73, 0x6A, 0x69, 0x6B, 0x6B, 0x6A, 0x6B, 0x6F, 0x70, 0x6D, 0x6F, 0x72, 
   0x6F, 0x7C, 0x80, 0x7F, 0x82, 0x88, 0x85, 0x87, 0x84, 0x82, 0x85, 0x7E, 0x7C, 0x84, 0x7C, 0x79, 
   0x81, 0x7C, 0x79, 0x79, 0x78, 0x78, 0x7C, 0x7C, 0x80, 0x7B, 0x7B, 0x81, 0x7A, 0x7A, 0x7E, 0x78, 
   0x7A, 0x7C, 0x79, 0x7A, 0x81, 0x75, 0x75, 0x7D, 0x8A, 0x8B, 0x90, 0xA4, 0xA4, 0xA6, 0xA2, 0xA1, 
   0xA1, 0xA6, 0xA3, 0xA3, 0xA8, 0xA4, 0xA4, 0xA6, 0xA0, 0xA3, 0xA8, 0xA1, 0xA6, 0xAA, 0xA2, 0xA6, 
   0xA3, 0x9D, 0x9F, 0xA4, 0xA0, 0xA0, 0xA6, 0xA1, 0xA4, 0xA5, 0x9D, 0xA3, 0x95, 0x97, 0x95, 0x94, 
   0x96, 0x97, 0xA1, 0xA0, 0xA1, 0xA3, 0x9F, 0x9E, 0xA0, 0x9F, 0x9E, 0xB1, 0xAF, 0xB3, 0x9D, 0x98, 
   0xA2, 0x5C, 0x59, 0x60, 0x41, 0x3F, 0x4A, 0x46, 0x4A, 0x53, 0x4F, 0x56, 0x5B, 0x4F, 0x54, 0x5B, 
   0x49, 0x4E, 0x56, 0x3F, 0x45, 0x4C, 0x4A, 0x4F, 0x54, 0x4D, 0x50, 0x56, 0x47, 0x48, 0x4E, 0x45, 
   0x46, 0x4D, 0x45, 0x47, 0x4F, 0x3C, 0x3E, 0x48, 0x38, 0x3B, 0x44, 0x37, 0x3D, 0x40, 0x2F, 0x36, 
   0x38, 0x28, 0x2D, 0x2F, 0x35, 0x3A, 0x39, 0x4E, 0x52, 0x52, 0x54, 0x5C, 0x5A, 0x57, 0x5B, 0x59, 
   0x74, 0x79, 0x74, 0xB7, 0xBC, 0xB8, 0xCA, 0xCB, 0xC9, 0xBD, 0xB8, 0xBB, 0xB0, 0xAE, 0xBA, 0x9D, 
   0xA1, 0xBB, 0x99, 0xA2, 0xC2, 0x92, 0xA3, 0xC3, 0x97, 0xA9, 0xCA, 0xA6, 0xB5, 0xCA, 0xAF, 0xB3, 
   0xB7, 0xB1, 0xA7, 0xA1, 0xA5, 0x98, 0x8F, 0xA0, 0x9A, 0x8E, 0xA0, 0x96, 0x8A, 0x9C, 0x90, 0x81, 
   0x9E, 0x91, 0x7F, 0xAC, 0xA0, 0x8B, 0xC3, 0xB5, 0x9F, 0xBF, 0xAC, 0x9C, 0xA5, 0x92, 0x8E, 0x84, 
   0x7B, 0x7E, 0x77, 0x7A, 0x7B, 0x84, 0x8C, 0x8A, 0x85, 0x8B, 0x8F, 0x77, 0x75, 0x80, 0x5B, 0x55, 
   0x64, 0x4A, 0x45, 0x57, 0x3B, 0x3C, 0x4A, 0x39, 0x43, 0x4A, 0x44, 0x4E, 0x4F, 0x57, 0x57, 0x58, 
   0x5B, 0x54, 0x59, 0x54, 0x4F, 0x54, 0x4F, 0x4C, 0x4C, 0x45, 0x3E, 0x40, 0x31, 0x2D, 0x2F, 0x28, 
   0x29, 0x26, 0x36, 0x38, 0x36, 0x5F, 0x65, 0x67, 0x7C, 0x7C, 0x84, 0x64, 0x65, 0x67, 0x6C, 0x6B, 
   0x6D, 0x7C, 0x75, 0x7D, 0x70, 0x69, 0x6F, 0x67, 0x62, 0x69, 0x69, 0x66, 0x72, 0x70, 0x6A, 0x73, 
   0x6F, 0x6A, 0x73, 0x70, 0x6D, 0x73, 0x82, 0x81, 0x83, 0xA2, 0x9E, 0xA4, 0x96, 0x91, 0x98, 0x95, 
   0x8C, 0x92, 0xA6, 0x9D, 0x9F, 0xA7, 0x9C, 0x9C, 0x9E, 0x93, 0x94, 0x95, 0x8C, 0x90, 0x94, 0x8B, 
   0x93, 0x9C, 0x92, 0x9B, 0x95, 0x8F, 0x94, 0x99, 0x92, 0x93, 0x9A, 0x8D, 0x8D, 0x95, 0x89, 0x8A, 
   0x94, 0x89, 0x8E, 0x86, 0x7D, 0x88, 0x7A, 0x77, 0x82, 0x73, 0x73, 0x7D, 0x71, 0x70, 0x7A, 0x6F, 
   0x73, 0x7C, 0x70, 0x74, 0x7D, 0x72, 0x72, 0x7D, 0x78, 0x7E, 0x86, 0x82, 0x87, 0x8A, 0x83, 0x81, 
   0x7C, 0x85, 0x7D, 0x77, 0x85, 0x7A, 0x74, 0x7A, 0x6D, 0x68, 0x68, 0x59, 0x54, 0x5E, 0x52, 0x4D, 
   0x5E, 0x56, 0x54, 0x5F, 0x57, 0x55, 0x9C, 0x9D, 0xA1, 0xAB, 0xAA, 0xAB, 0xA6, 0xA0, 0x9F, 0x97, 
   0x90, 0x8D, 0x95, 0x91, 0x8E, 0x9A, 0x98, 0x97, 0x93, 0x91, 0x92, 0x75, 0x76, 0x79, 0x53, 0x5C, 
   0x68, 0x51, 0x5F, 0x6C, 0x54, 0x61, 0x69, 0x65, 0x71, 0x75, 0x6E, 0x79, 0x7B, 0x6C, 0x71, 0x74, 
   0x6F, 0x71, 0x73, 0x7C, 0x7D, 0x7D, 0x7C, 0x7D, 0x80, 0x72, 0x72, 0x77, 0x78, 0x78, 0x7E, 0x68, 
   0x68, 0x6E, 0x50, 0x50, 0x56, 0x4F, 0x4F, 0x52, 0x55, 0x52, 0x53, 0x59, 0x54, 0x59, 0x59, 0x57, 
   0x59, 0x5A, 0x57, 0x5B, 0x58, 0x57, 0x5C, 0x57, 0x59, 0x5B, 0x5B, 0x5C, 0x5E, 0x5E, 0x61, 0x65, 
   0x5C, 0x5F, 0x64, 0x58, 0x59, 0x5E, 0x58, 0x56, 0x5A, 0x57, 0x56, 0x56, 0x5B, 0x5B, 0x5B, 0x60, 
   0x62, 0x67, 0x6A, 0x6A, 0x71, 0x6B, 0x67, 0x69, 0x74, 0x73, 0x75, 0x84, 0x86, 0x87, 0x85, 0x89, 
   0x88, 0x87, 0x89, 0x87, 0x85, 0x85, 0x83, 0x77, 0x77, 0x77, 0x70, 0x70, 0x6E, 0x68, 0x69, 0x63, 
   0x59, 0x5B, 0x51, 0x4F, 0x51, 0x48, 0x43, 0x43, 0x44, 0x2B, 0x2D, 0x2E, 0x3F, 0x42, 0x44, 0x66, 
   0x62, 0x66, 0x7A, 0x76, 0x72, 0x85, 0x81, 0x80, 0x70, 0x6E, 0x6F, 0x72, 0x77, 0x7C, 0x76, 0x7B, 
   0x84, 0x7F, 0x84, 0x8B, 0x76, 0x77, 0x80, 0x70, 0x6D, 0x75, 0x52, 0x4F, 0x54, 0x4E, 0x4C, 0x4E, 
   0x55, 0x53, 0x56, 0x51, 0x4D, 0x51, 0x46, 0x45, 0x42, 0x46, 0x48, 0x45, 0x49, 0x4A, 0x49, 0x50, 
   0x51, 0x51, 0x52, 0x56, 0x57, 0x4E, 0x55, 0x57, 0x56, 0x5A, 0x5D, 0x58, 0x5F, 0x5E, 0x64, 0x6B, 
   0x66, 0x71, 0x75, 0x74, 0x6B, 0x6F, 0x73, 0x49, 0x4E, 0x52, 0x2E, 0x37, 0x3B, 0x60, 0x6E, 0x71, 
   0x87, 0x8F, 0x90, 0x7F, 0x83, 0x88, 0x7D, 0x79, 0x80, 0x7D, 0x7B, 0x7C, 0x8E, 0x8B, 0x88, 0x81, 
   0x7A, 0x78, 0x60, 0x5E, 0x60, 0x56, 0x5A, 0x5E, 0x43, 0x49, 0x49, 0x48, 0x54, 0x50, 0x64, 0x78, 
   0x73, 0x73, 0x84, 0x83, 0x6A, 0x76, 0x7E, 0x60, 0x70, 0x76, 0x64, 0x75, 0x77, 0x5F, 0x6C, 0x6F, 
   0x5B, 0x6A, 0x6E, 0x5E, 0x70, 0x74, 0x65, 0x74, 0x77, 0x60, 0x6F, 0x73, 0x79, 0x8D, 0x90, 0x8D, 
   0x98, 0xA1, 0x73, 0x7A, 0x8A, 0x76, 0x7C, 0x8E, 0x73, 0x74, 0x86, 0x74, 0x75, 0x87, 0x6F, 0x78, 
   0x8A, 0x6D, 0x7A, 0x87, 0x71, 0x7F, 0x8D, 0x72, 0x83, 0x91, 0x6E, 0x80, 0x93, 0x57, 0x66, 0x78, 
   0x47, 0x52, 0x68, 0x3F, 0x4B, 0x5B, 0x60, 0x68, 0x6F, 0x7A, 0x7D, 0x7B, 0x76, 0x78, 0x74, 0x74, 
   0x75, 0x79, 0x6C, 0x6C, 0x73, 0x6D, 0x6E, 0x74, 0x6E, 0x70, 0x71, 0x6D, 0x71, 0x6C, 0x77, 0x79, 
   0x75, 0x8A, 0x86, 0x86, 0x8B, 0x8A, 0x85, 0x8E, 0x89, 0x86, 0x8A, 0x84, 0x81, 0x87, 0x81, 0x80, 
   0x81, 0x80, 0x7D, 0x7D, 0x7C, 0x7A, 0x84, 0x80, 0x84, 0x7C, 0x79, 0x7D, 0x79, 0x77, 0x79, 0x74, 
   0x78, 0x78, 0x86, 0x8A, 0x8E, 0x98, 0x99, 0x9D, 0x9D, 0x9C, 0x9D, 0xA5, 0xA4, 0xA2, 0xA0, 0x9D, 
   0x9B, 0xA0, 0x9D, 0x9B, 0xA5, 0xA3, 0xA1, 0xA8, 0xA2, 0xA7, 0xA8, 0xA2, 0xA6, 0xA7, 0x9F, 0xA3, 
   0xA4, 0x9F, 0xA1, 0xA9, 0xA7, 0xA9, 0xA6, 0xA4, 0xA7, 0x9E, 0x9A, 0x9E, 0x8E, 0x91, 0x91, 0x91, 
   0x95, 0x99, 0x9F, 0x9F, 0xA2, 0xA2, 0xA0, 0x9F, 0xA2, 0xA2, 0xA0, 0xA4, 0xA5, 0xA7, 0x9C, 0x9C, 
   0xA2, 0x9B, 0x9A, 0x9E, 0x7E, 0x7A, 0x82, 0x52, 0x52, 0x5A, 0x4C, 0x51, 0x54, 0x4F, 0x52, 0x59, 
   0x56, 0x55, 0x5D, 0x56, 0x55, 0x5C, 0x53, 0x51, 0x58, 0x4E, 0x4D, 0x53, 0x4D, 0x4D, 0x53, 0x4E, 
   0x4D, 0x55, 0x4F, 0x4E, 0x58, 0x4B, 0x4A, 0x57, 0x49, 0x47, 0x51, 0x46, 0x46, 0x4B, 0x49, 0x4C, 
   0x51, 0x3A, 0x3C, 0x42, 0x35, 0x37, 0x3C, 0x39, 0x3A, 0x43, 0x37, 0x3A, 0x43, 0x36, 0x3D, 0x45, 
   0x38, 0x3C, 0x42, 0x64, 0x67, 0x66, 0x8D, 0x8F, 0x8B, 0xA6, 0xA2, 0x9E, 0xB7, 0xB1, 0xAC, 0xBE, 
   0xBB, 0xB5, 0xC1, 0xBE, 0xC4, 0xAF, 0xB6, 0xC1, 0xAC, 0xB6, 0xC6, 0xB3, 0xB7, 0xBB, 0xB7, 0xB1, 
   0xA9, 0xB1, 0xA3, 0x9A, 0xA3, 0x98, 0x91, 0x9F, 0x97, 0x90, 0xA8, 0x9F, 0x9C, 0xA2, 0x99, 0x95, 
   0x92, 0x89, 0x83, 0x99, 0x8F, 0x86, 0xAE, 0xA2, 0x98, 0x9D, 0x91, 0x8C, 0x7F, 0x7B, 0x7E, 0x6E, 
   0x71, 0x78, 0x6F, 0x7A, 0x7C, 0x77, 0x84, 0x82, 0x82, 0x88, 0x8E, 0x7F, 0x7B, 0x88, 0x47, 0x42, 
   0x50, 0x3C, 0x3C, 0x47, 0x34, 0x37, 0x41, 0x37, 0x3F, 0x46, 0x45, 0x4C, 0x50, 0x50, 0x4D, 0x4F, 
   0x52, 0x4D, 0x4B, 0x50, 0x4B, 0x4B, 0x4B, 0x45, 0x45, 0x41, 0x39, 0x3A, 0x30, 0x2F, 0x2F, 0x36, 
   0x3C, 0x36, 0x5F, 0x60, 0x5E, 0x7C, 0x7B, 0x7D, 0x77, 0x72, 0x7A, 0x60, 0x5F, 0x62, 0x7E, 0x7D, 
   0x81, 0x9A, 0x93, 0x9C, 0x72, 0x69, 0x72, 0x6D, 0x65, 0x68, 0x78, 0x6D, 0x6E, 0x71, 0x69, 0x71, 
   0x71, 0x71, 0x7A, 0x89, 0x88, 0x92, 0x9E, 0x96, 0x9F, 0x96, 0x89, 0x94, 0x95, 0x8C, 0x94, 0x97, 
   0x93, 0x93, 0x99, 0x90, 0x93, 0x98, 0x8D, 0x8E, 0x98, 0x8F, 0x8F, 0x98, 0x91, 0x94, 0x98, 0x91, 
   0x98, 0x99, 0x90, 0x95, 0x94, 0x8C, 0x8F, 0x93, 0x88, 0x8B, 0x92, 0x84, 0x88, 0x96, 0x89, 0x8D, 
   0x90, 0x86, 0x8D, 0x7E, 0x7A, 0x85, 0x77, 0x76, 0x80, 0x6D, 0x6F, 0x77, 0x6D, 0x71, 0x79, 0x75, 
   0x78, 0x81, 0x75, 0x72, 0x7F, 0x73, 0x76, 0x81, 0x7A, 0x82, 0x88, 0x84, 0x85, 0x85, 0x86, 0x7F, 
   0x79, 0x8E, 0x81, 0x7C, 0x8F, 0x81, 0x7A, 0x8F, 0x81, 0x77, 0x8E, 0x7D, 0x75, 0x75, 0x67, 0x61, 
   0x61, 0x57, 0x56, 0x5C, 0x56, 0x59, 0x9E, 0x9B, 0x9A, 0x98, 0x95, 0x95, 0x95, 0x8D, 0x8F, 0x8B, 
   0x86, 0x85, 0x8D, 0x8B, 0x87, 0x91, 0x90, 0x8D, 0x89, 0x88, 0x88, 0x62, 0x66, 0x6D, 0x4F, 0x59, 
   0x66, 0x4D, 0x5F, 0x6B, 0x56, 0x65, 0x6D, 0x6B, 0x76, 0x7C, 0x75, 0x7F, 0x85, 0x74, 0x78, 0x81, 
   0x79, 0x78, 0x82, 0x7D, 0x7A, 0x84, 0x78, 0x77, 0x7D, 0x75, 0x76, 0x7B, 0x7A, 0x7C, 0x80, 0x7A, 
   0x7D, 0x7E, 0x5D, 0x5F, 0x60, 0x52, 0x50, 0x54, 0x57, 0x50, 0x59, 0x56, 0x50, 0x57, 0x52, 0x53, 
   0x54, 0x55, 0x52, 0x54, 0x57, 0x54, 0x59, 0x54, 0x55, 0x58, 0x5B, 0x5A, 0x5C, 0x5E, 0x5E, 0x60, 
   0x5E, 0x5D, 0x62, 0x5B, 0x58, 0x5D, 0x5D, 0x56, 0x5A, 0x5F, 0x59, 0x5C, 0x62, 0x5F, 0x62, 0x6E, 
   0x70, 0x76, 0x80, 0x83, 0x89, 0x73, 0x73, 0x74, 0x62, 0x63, 0x63, 0x7A, 0x7D, 0x7A, 0x87, 0x89, 
   0x85, 0x89, 0x8A, 0x88, 0x87, 0x86, 0x85, 0x7B, 0x76, 0x78, 0x73, 0x6D, 0x6F, 0x67, 0x65, 0x63, 
   0x5A, 0x59, 0x54, 0x4B, 0x4C, 0x47, 0x40, 0x42, 0x43, 0x28, 0x2B, 0x28, 0x3C, 0x40, 0x3F, 0x66, 
   0x65, 0x66, 0x6F, 0x6C, 0x67, 0x70, 0x6B, 0x6C, 0x74, 0x6F, 0x72, 0x7A, 0x78, 0x80, 0x7B, 0x78, 
   0x80, 0x7C, 0x7A, 0x83, 0x7C, 0x77, 0x81, 0x7A, 0x73, 0x7E, 0x55, 0x50, 0x57, 0x3C, 0x3B, 0x3E, 
   0x39, 0x38, 0x3B, 0x30, 0x2E, 0x32, 0x33, 0x35, 0x30, 0x51, 0x53, 0x4E, 0x56, 0x5A, 0x55, 0x5A, 
   0x60, 0x5B, 0x5E, 0x64, 0x64, 0x5E, 0x64, 0x68, 0x65, 0x6A, 0x6F, 0x6D, 0x74, 0x72, 0x70, 0x79, 
   0x79, 0x64, 0x6F, 0x71, 0x4F, 0x5B, 0x5E, 0x40, 0x48, 0x4C, 0x2A, 0x2F, 0x30, 0x69, 0x72, 0x6F, 
   0x8C, 0x91, 0x8F, 0x76, 0x7C, 0x80, 0x70, 0x70, 0x76, 0x7C, 0x7B, 0x7B, 0x8D, 0x8B, 0x87, 0x7B, 
   0x75, 0x72, 0x5A, 0x5B, 0x5B, 0x55, 0x5A, 0x5B, 0x42, 0x47, 0x47, 0x51, 0x60, 0x5C, 0x65, 0x76, 
   0x74, 0x62, 0x70, 0x70, 0x64, 0x6C, 0x74, 0x67, 0x6F, 0x74, 0x63, 0x71, 0x72, 0x60, 0x70, 0x70, 
   0x5F, 0x6F, 0x74, 0x75, 0x82, 0x86, 0x7A, 0x84, 0x85, 0x6C, 0x7B, 0x7D, 0x7E, 0x8E, 0x91, 0x8A, 
   0x95, 0x9F, 0x80, 0x86, 0x97, 0x80, 0x83, 0x95, 0x76, 0x79, 0x8A, 0x72, 0x7B, 0x88, 0x73, 0x84, 
   0x8F, 0x73, 0x85, 0x93, 0x70, 0x80, 0x8D, 0x6B, 0x7C, 0x89, 0x69, 0x78, 0x8A, 0x58, 0x64, 0x75, 
   0x4A, 0x54, 0x64, 0x43, 0x52, 0x59, 0x75, 0x81, 0x86, 0x7B, 0x7C, 0x7A, 0x74, 0x75, 0x71, 0x75, 
   0x79, 0x78, 0x73, 0x79, 0x7A, 0x77, 0x7B, 0x7D, 0x73, 0x76, 0x77, 0x71, 0x76, 0x74, 0x7A, 0x7B, 
   0x76, 0x89, 0x83, 0x80, 0x8E, 0x8A, 0x81, 0x90, 0x87, 0x85, 0x8D, 0x83, 0x82, 0x7F, 0x79, 0x7E, 
   0x76, 0x78, 0x7D, 0x7D, 0x7E, 0x80, 0x77, 0x74, 0x78, 0x77, 0x77, 0x78, 0x84, 0x85, 0x80, 0x8D, 
   0x8F, 0x8A, 0xA5, 0xA7, 0xA5, 0xAB, 0xAA, 0xAA, 0x9D, 0x9C, 0x9C, 0x9A, 0x98, 0x98, 0x9D, 0x9A, 
   0x99, 0xA3, 0xA0, 0x9D, 0xA9, 0xA6, 0xA1, 0xAA, 0xA6, 0xA9, 0xA7, 0xA1, 0xA3, 0xA3, 0x9E, 0x9F, 
   0xA3, 0x9F, 0xA2, 0xAA, 0xA9, 0xAC, 0xA5, 0xA5, 0xA5, 0x9B, 0x99, 0x99, 0x8E, 0x90, 0x92, 0x98, 
   0x9A, 0x9C, 0xA2, 0xA0, 0xA1, 0xA3, 0x9E, 0x9E, 0xA5, 0xA0, 0x9F, 0xA8, 0xA4, 0xA2, 0xA0, 0x9D, 
   0x9B, 0xA5, 0xA1, 0xA0, 0x9F, 0x98, 0x9D, 0x5E, 0x58, 0x61, 0x50, 0x4E, 0x53, 0x54, 0x4F, 0x58, 
   0x55, 0x52, 0x5C, 0x57, 0x58, 0x5F, 0x58, 0x58, 0x60, 0x57, 0x55, 0x5D, 0x53, 0x51, 0x58, 0x52, 
   0x4F, 0x57, 0x52, 0x50, 0x5A, 0x4F, 0x50, 0x5A, 0x4E, 0x4C, 0x55, 0x49, 0x4A, 0x50, 0x46, 0x4A, 
   0x51, 0x46, 0x4C, 0x55, 0x45, 0x4A, 0x52, 0x45, 0x48, 0x53, 0x43, 0x47, 0x52, 0x45, 0x49, 0x51, 
   0x45, 0x45, 0x4F, 0x40, 0x41, 0x49, 0x3E, 0x45, 0x49, 0x46, 0x4C, 0x4F, 0x5B, 0x5D, 0x5F, 0x78, 
   0x7A, 0x77, 0x91, 0x8D, 0x8D, 0xA3, 0xA1, 0xA1, 0xB4, 0xB3, 0xB5, 0xC0, 0xBE, 0xBD, 0xBB, 0xB6, 
   0xB2, 0xB3, 0xA9, 0xA5, 0xA9, 0x9C, 0x96, 0x8B, 0x83, 0x7E, 0x79, 0x74, 0x75, 0x74, 0x73, 0x77, 
   0x67, 0x66, 0x6C, 0x55, 0x54, 0x58, 0x6A, 0x68, 0x6A, 0x6C, 0x6D, 0x73, 0x67, 0x71, 0x77, 0x6C, 
   0x76, 0x7E, 0x6E, 0x7B, 0x7F, 0x75, 0x84, 0x86, 0x85, 0x8F, 0x96, 0x73, 0x6E, 0x7B, 0x36, 0x30, 
   0x3C, 0x33, 0x33, 0x3B, 0x38, 0x38, 0x3E, 0x39, 0x3E, 0x42, 0x42, 0x46, 0x4A, 0x4A, 0x46, 0x48, 
   0x49, 0x46, 0x43, 0x49, 0x49, 0x46, 0x4A, 0x46, 0x45, 0x3F, 0x35, 0x38, 0x3D, 0x3A, 0x38, 0x5A, 
   0x60, 0x58, 0x6D, 0x6D, 0x6B, 0x67, 0x61, 0x62, 0x67, 0x64, 0x66, 0x78, 0x7E, 0x7D, 0x79, 0x7D, 
   0x7F, 0x88, 0x87, 0x8D, 0x7A, 0x75, 0x7D, 0x78, 0x75, 0x79, 0x7C, 0x77, 0x75, 0x98, 0x98, 0x98, 
   0xA6, 0xA8, 0xAD, 0xB3, 0xB0, 0xBA, 0xA8, 0x9D, 0xA7, 0x98, 0x8B, 0x96, 0x98, 0x8D, 0x97, 0x97, 
   0x90, 0x93, 0x95, 0x8D, 0x92, 0x98, 0x8E, 0x8F, 0x97, 0x90, 0x91, 0x99, 0x93, 0x98, 0x98, 0x91, 
   0x99, 0x9B, 0x93, 0x97, 0x9D, 0x95, 0x96, 0xA0, 0x96, 0x9D, 0x9F, 0x95, 0x9E, 0xA1, 0x97, 0xA0, 
   0x8B, 0x86, 0x90, 0x70, 0x72, 0x7F, 0x6A, 0x6E, 0x77, 0x6F, 0x72, 0x78, 0x7D, 0x82, 0x88, 0x78, 
   0x7B, 0x84, 0x75, 0x71, 0x80, 0x71, 0x76, 0x83, 0x7D, 0x83, 0x89, 0x84, 0x7F, 0x7D, 0x7F, 0x77, 
   0x6D, 0x87, 0x7E, 0x77, 0x90, 0x88, 0x7E, 0x94, 0x8B, 0x7E, 0x96, 0x88, 0x7E, 0x96, 0x86, 0x7E, 
   0x87, 0x79, 0x75, 0x71, 0x67, 0x66, 0xAB, 0xAA, 0xA6, 0x8F, 0x8E, 0x8C, 0x8F, 0x8B, 0x8B, 0x87, 
   0x83, 0x85, 0x87, 0x82, 0x87, 0x8E, 0x8B, 0x89, 0x78, 0x78, 0x76, 0x69, 0x6F, 0x79, 0x53, 0x60, 
   0x6E, 0x4E, 0x5C, 0x6A, 0x58, 0x63, 0x6D, 0x70, 0x7B, 0x81, 0x7B, 0x85, 0x90, 0x7C, 0x83, 0x8F, 
   0x79, 0x7C, 0x86, 0x7A, 0x76, 0x81, 0x72, 0x71, 0x79, 0x75, 0x75, 0x7D, 0x7A, 0x7A, 0x81, 0x80, 
   0x82, 0x86, 0x6B, 0x6D, 0x70, 0x53, 0x53, 0x58, 0x4F, 0x4D, 0x56, 0x4E, 0x4F, 0x54, 0x4F, 0x51, 
   0x52, 0x54, 0x51, 0x52, 0x57, 0x51, 0x57, 0x54, 0x4F, 0x56, 0x5A, 0x57, 0x5C, 0x5E, 0x5B, 0x60, 
   0x61, 0x5D, 0x62, 0x5F, 0x59, 0x5D, 0x5F, 0x58, 0x5C, 0x62, 0x5D, 0x5E, 0x63, 0x62, 0x63, 0x6B, 
   0x6D, 0x73, 0x76, 0x76, 0x7D, 0x77, 0x74, 0x78, 0x69, 0x68, 0x65, 0x70, 0x6F, 0x6C, 0x89, 0x89, 
   0x88, 0x87, 0x8A, 0x87, 0x82, 0x82, 0x81, 0x79, 0x73, 0x74, 0x71, 0x6A, 0x69, 0x6B, 0x68, 0x64, 
   0x5E, 0x5D, 0x57, 0x46, 0x48, 0x44, 0x37, 0x3D, 0x3B, 0x21, 0x22, 0x21, 0x38, 0x3C, 0x3C, 0x69, 
   0x71, 0x71, 0x58, 0x5D, 0x5A, 0x66, 0x62, 0x66, 0x78, 0x72, 0x7A, 0x77, 0x74, 0x7D, 0x7B, 0x74, 
   0x7E, 0x7C, 0x75, 0x7D, 0x7B, 0x78, 0x82, 0x7F, 0x79, 0x84, 0x62, 0x5F, 0x68, 0x31, 0x31, 0x38, 
   0x22, 0x23, 0x28, 0x24, 0x24, 0x29, 0x3E, 0x46, 0x42, 0x5F, 0x63, 0x5D, 0x5D, 0x61, 0x5B, 0x61, 
   0x64, 0x5E, 0x5D, 0x64, 0x61, 0x6A, 0x6D, 0x72, 0x6F, 0x71, 0x74, 0x71, 0x74, 0x77, 0x63, 0x6C, 
   0x71, 0x44, 0x50, 0x55, 0x37, 0x45, 0x4A, 0x34, 0x3C, 0x3F, 0x2B, 0x2E, 0x2F, 0x5D, 0x63, 0x61, 
   0x88, 0x88, 0x87, 0x73, 0x78, 0x79, 0x6B, 0x70, 0x73, 0x7B, 0x7B, 0x77, 0x8D, 0x89, 0x86, 0x77, 
   0x76, 0x79, 0x5A, 0x5B, 0x60, 0x56, 0x56, 0x5A, 0x4B, 0x4C, 0x4D, 0x5A, 0x69, 0x67, 0x68, 0x76, 
   0x77, 0x68, 0x71, 0x73, 0x72, 0x7C, 0x81, 0x6D, 0x7B, 0x7D, 0x68, 0x7A, 0x79, 0x5B, 0x6D, 0x6D, 
   0x65, 0x74, 0x79, 0x7F, 0x8D, 0x8D, 0x78, 0x86, 0x83, 0x74, 0x86, 0x85, 0x88, 0x97, 0x99, 0x86, 
   0x90, 0x97, 0x7F, 0x87, 0x95, 0x7E, 0x86, 0x97, 0x74, 0x7B, 0x89, 0x76, 0x82, 0x8D, 0x77, 0x8C, 
   0x98, 0x75, 0x88, 0x97, 0x71, 0x83, 0x90, 0x69, 0x7C, 0x87, 0x62, 0x72, 0x80, 0x58, 0x64, 0x73, 
   0x4D, 0x57, 0x64, 0x54, 0x64, 0x6A, 0x8B, 0x98, 0x9D, 0x83, 0x84, 0x87, 0x77, 0x72, 0x75, 0x6F, 
   0x6D, 0x70, 0x75, 0x78, 0x7A, 0x7A, 0x7E, 0x82, 0x76, 0x7A, 0x7D, 0x71, 0x77, 0x76, 0x77, 0x7D, 
   0x77, 0x88, 0x86, 0x81, 0x8F, 0x8D, 0x89, 0x88, 0x87, 0x86, 0x81, 0x7E, 0x81, 0x7A, 0x76, 0x7C, 
   0x79, 0x76, 0x7D, 0x7B, 0x75, 0x7D, 0x7F, 0x7B, 0x7F, 0x8B, 0x8C, 0x89, 0x9F, 0x9F, 0x98, 0xA4, 
   0x9F, 0x9C, 0xA5, 0x9D, 0x9E, 0xA1, 0x9E, 0x9F, 0x98, 0x97, 0x99, 0x97, 0x97, 0x99, 0x9E, 0x9E, 
   0xA0, 0xA7, 0xA5, 0xA6, 0xAB, 0xA9, 0xA9, 0xAF, 0xAB, 0xAB, 0xA4, 0xA2, 0xA1, 0x9B, 0x9A, 0x9A, 
   0xA0, 0x9F, 0xA0, 0xA4, 0xA0, 0xA3, 0xA3, 0x9F, 0xA1, 0x9C, 0x99, 0x9B, 0x96, 0x97, 0x9A, 0x9C, 
   0x9C, 0x9E, 0xA2, 0x9E, 0x9F, 0xA0, 0x9B, 0x9A, 0xA1, 0x9D, 0x9C, 0xA4, 0xA4, 0x9F, 0xA4, 0xA3, 
   0x9D, 0xA2, 0x9D, 0x9C, 0x99, 0x8D, 0x97, 0x60, 0x56, 0x62, 0x48, 0x43, 0x4E, 0x4B, 0x49, 0x58, 
   0x4F, 0x50, 0x5B, 0x52, 0x55, 0x5C, 0x52, 0x53, 0x5B, 0x52, 0x4F, 0x58, 0x50, 0x4D, 0x54, 0x4E, 
   0x4D, 0x57, 0x4E, 0x4F, 0x5D, 0x4D, 0x50, 0x5B, 0x4B, 0x4B, 0x55, 0x48, 0x49, 0x53, 0x43, 0x45, 
   0x50, 0x40, 0x42, 0x4B, 0x45, 0x46, 0x4F, 0x48, 0x48, 0x51, 0x4C, 0x4F, 0x57, 0x4F, 0x50, 0x57, 
   0x4E, 0x4A, 0x54, 0x49, 0x47, 0x51, 0x49, 0x4D, 0x56, 0x48, 0x4F, 0x58, 0x47, 0x4B, 0x55, 0x4A, 
   0x4B, 0x54, 0x4F, 0x51, 0x58, 0x63, 0x67, 0x70, 0x80, 0x83, 0x89, 0x9B, 0x9D, 0xA2, 0xA4, 0xA5, 
   0xAD, 0x99, 0x92, 0x9C, 0x7A, 0x70, 0x6F, 0x69, 0x62, 0x60, 0x5D, 0x5D, 0x5B, 0x5B, 0x5E, 0x62, 
   0x5A, 0x5E, 0x64, 0x57, 0x5A, 0x5E, 0x62, 0x68, 0x68, 0x64, 0x6E, 0x6E, 0x66, 0x74, 0x7A, 0x64, 
   0x72, 0x7A, 0x6C, 0x78, 0x83, 0x70, 0x7F, 0x83, 0x85, 0x8E, 0x99, 0x5B, 0x59, 0x64, 0x26, 0x24, 
   0x2C, 0x2D, 0x28, 0x30, 0x34, 0x2F, 0x37, 0x35, 0x36, 0x3C, 0x38, 0x3A, 0x3C, 0x3F, 0x3C, 0x3D, 
   0x3F, 0x3E, 0x40, 0x43, 0x43, 0x41, 0x43, 0x40, 0x3F, 0x3B, 0x36, 0x37, 0x3B, 0x3A, 0x35, 0x51, 
   0x54, 0x4F, 0x65, 0x66, 0x66, 0x6C, 0x69, 0x6D, 0x77, 0x73, 0x70, 0x99, 0x97, 0x98, 0x92, 0x92, 
   0x94, 0x99, 0x97, 0x99, 0x91, 0x89, 0x8E, 0x76, 0x6F, 0x74, 0x7F, 0x7E, 0x80, 0xB5, 0xBF, 0xC5, 
   0xB7, 0xB5, 0xBC, 0xA1, 0x94, 0x9C, 0x96, 0x89, 0x90, 0x93, 0x89, 0x92, 0x94, 0x8B, 0x93, 0x97, 
   0x8E, 0x93, 0x95, 0x8D, 0x8F, 0x95, 0x8F, 0x90, 0x93, 0x8E, 0x93, 0x93, 0x8D, 0x95, 0x95, 0x8C, 
   0x94, 0x98, 0x8F, 0x93, 0xA7, 0xA1, 0xA2, 0xA3, 0x9C, 0xA4, 0x9D, 0x96, 0xA0, 0x97, 0x8E, 0x99, 
   0x88, 0x83, 0x8E, 0x70, 0x70, 0x7D, 0x65, 0x68, 0x73, 0x6B, 0x6E, 0x76, 0x75, 0x7B, 0x83, 0x72, 
   0x77, 0x84, 0x70, 0x72, 0x81, 0x70, 0x76, 0x83, 0x6F, 0x72, 0x7C, 0x6B, 0x67, 0x66, 0x72, 0x6C, 
   0x62, 0x79, 0x73, 0x6A, 0x8C, 0x88, 0x7C, 0x96, 0x8E, 0x7F, 0x90, 0x84, 0x78, 0x8D, 0x80, 0x78, 
   0x89, 0x7D, 0x77, 0x85, 0x77, 0x73, 0xA9, 0xA6, 0xA2, 0x97, 0x92, 0x8F, 0x9B, 0x95, 0x93, 0x85, 
   0x82, 0x82, 0x7E, 0x7C, 0x80, 0x86, 0x84, 0x82, 0x75, 0x76, 0x72, 0x71, 0x76, 0x81, 0x5A, 0x66, 
   0x75, 0x54, 0x5E, 0x6D, 0x5C, 0x65, 0x6D, 0x76, 0x7E, 0x84, 0x82, 0x88, 0x93, 0x83, 0x8B, 0x95, 
   0x79, 0x7E, 0x84, 0x79, 0x78, 0x80, 0x7A, 0x79, 0x82, 0x78, 0x76, 0x7E, 0x7A, 0x77, 0x7F, 0x7E, 
   0x7B, 0x83, 0x76, 0x74, 0x7A, 0x5C, 0x5B, 0x61, 0x54, 0x56, 0x5A, 0x58, 0x59, 0x5C, 0x5D, 0x5E, 
   0x5E, 0x5D, 0x5D, 0x5E, 0x55, 0x52, 0x58, 0x54, 0x50, 0x56, 0x5C, 0x58, 0x5C, 0x5B, 0x57, 0x5B, 
   0x61, 0x59, 0x5C, 0x61, 0x5A, 0x5C, 0x60, 0x5A, 0x5D, 0x62, 0x5F, 0x5E, 0x68, 0x66, 0x64, 0x6F, 
   0x6D, 0x70, 0x68, 0x63, 0x67, 0x6A, 0x63, 0x66, 0x66, 0x62, 0x61, 0x6A, 0x64, 0x63, 0x86, 0x80, 
   0x83, 0x88, 0x88, 0x89, 0x79, 0x78, 0x79, 0x7B, 0x79, 0x79, 0x71, 0x6F, 0x6D, 0x66, 0x65, 0x62, 
   0x59, 0x59, 0x53, 0x43, 0x44, 0x3F, 0x38, 0x37, 0x36, 0x21, 0x1C, 0x1C, 0x1E, 0x1D, 0x1F, 0x4E, 
   0x52, 0x53, 0x5F, 0x60, 0x61, 0x7A, 0x72, 0x78, 0x7B, 0x73, 0x7D, 0x76, 0x71, 0x7B, 0x7D, 0x75, 
   0x7E, 0x7E, 0x75, 0x7F, 0x7B, 0x7C, 0x85, 0x7D, 0x7A, 0x82, 0x6A, 0x69, 0x71, 0x38, 0x3A, 0x40, 
   0x1E, 0x21, 0x26, 0x25, 0x26, 0x2C, 0x42, 0x46, 0x44, 0x5B, 0x5E, 0x5B, 0x62, 0x67, 0x63, 0x61, 
   0x67, 0x5F, 0x65, 0x6E, 0x67, 0x7A, 0x7D, 0x7B, 0x7A, 0x7D, 0x7C, 0x77, 0x7F, 0x81, 0x6E, 0x79, 
   0x7C, 0x59, 0x62, 0x67, 0x39, 0x42, 0x47, 0x28, 0x2A, 0x2D, 0x22, 0x23, 0x24, 0x4F, 0x57, 0x56, 
   0x7C, 0x7F, 0x7E, 0x6B, 0x6F, 0x71, 0x66, 0x6C, 0x70, 0x79, 0x7E, 0x79, 0x89, 0x88, 0x88, 0x79, 
   0x7D, 0x83, 0x60, 0x62, 0x69, 0x53, 0x56, 0x5A, 0x4C, 0x50, 0x4F, 0x62, 0x6C, 0x6B, 0x63, 0x6F, 
   0x6F, 0x65, 0x6F, 0x70, 0x77, 0x83, 0x85, 0x70, 0x80, 0x7F, 0x74, 0x85, 0x84, 0x6B, 0x7C, 0x7D, 
   0x69, 0x76, 0x7A, 0x6D, 0x7A, 0x7C, 0x73, 0x82, 0x82, 0x76, 0x88, 0x89, 0x91, 0xA2, 0xA1, 0x8D, 
   0x95, 0x99, 0x85, 0x8D, 0x98, 0x81, 0x8E, 0x9C, 0x7E, 0x8B, 0x97, 0x81, 0x8E, 0x98, 0x7E, 0x90, 
   0x9D, 0x78, 0x8A, 0x9A, 0x75, 0x85, 0x94, 0x6B, 0x7D, 0x89, 0x61, 0x6F, 0x7C, 0x51, 0x5B, 0x69, 
   0x4C, 0x56, 0x62, 0x6E, 0x7B, 0x81, 0x86, 0x8B, 0x91, 0x7F, 0x7E, 0x83, 0x79, 0x78, 0x7B, 0x76, 
   0x77, 0x79, 0x7E, 0x7F, 0x82, 0x7F, 0x82, 0x85, 0x7E, 0x83, 0x85, 0x80, 0x81, 0x82, 0x8A, 0x8B, 
   0x8B, 0x90, 0x8A, 0x8C, 0x8D, 0x89, 0x8B, 0x7D, 0x7D, 0x80, 0x7E, 0x7D, 0x84, 0x87, 0x86, 0x86, 
   0x8D, 0x8B, 0x87, 0x90, 0x8E, 0x8D, 0x97, 0x98, 0x96, 0x9B, 0x9B, 0x96, 0x9F, 0x9E, 0x9A, 0xA8, 
   0xA4, 0xA4, 0xA7, 0xA0, 0xA1, 0xA9, 0xA5, 0xA5, 0x9A, 0x99, 0x99, 0x9E, 0x9C, 0x9C, 0xA6, 0xA5, 
   0xA5, 0xAD, 0xA9, 0xA9, 0xB7, 0xB6, 0xB5, 0xAF, 0xA9, 0xA8, 0xA3, 0xA0, 0xA0, 0x9E, 0x9E, 0x9D, 
   0xA1, 0x9F, 0xA0, 0xA2, 0x9D, 0xA0, 0x9F, 0x99, 0x9C, 0x9A, 0x97, 0x99, 0x9E, 0x9D, 0x9C, 0x9F, 
   0x9E, 0x9E, 0xA0, 0x9C, 0x9C, 0xA0, 0x9B, 0x9C, 0x9F, 0x9C, 0x9E, 0xA1, 0x9F, 0xA1, 0xA6, 0xA3, 
   0xA4, 0xA4, 0x9E, 0x9F, 0x90, 0x86, 0x8E, 0x5D, 0x55, 0x60, 0x47, 0x45, 0x4F, 0x43, 0x46, 0x53, 
   0x46, 0x47, 0x56, 0x4D, 0x4D, 0x58, 0x4A, 0x4B, 0x52, 0x44, 0x41, 0x4C, 0x43, 0x43, 0x4A, 0x48, 
   0x4A, 0x52, 0x49, 0x4C, 0x58, 0x49, 0x4B, 0x54, 0x46, 0x46, 0x50, 0x47, 0x47, 0x53, 0x43, 0x44, 
   0x50, 0x43, 0x42, 0x4E, 0x48, 0x46, 0x52, 0x4D, 0x4C, 0x57, 0x4E, 0x4F, 0x58, 0x4E, 0x50, 0x58, 
   0x52, 0x52, 0x5B, 0x52, 0x4F, 0x5B, 0x52, 0x52, 0x5E, 0x55, 0x57, 0x63, 0x5C, 0x5C, 0x68, 0x5F, 
   0x5C, 0x68, 0x52, 0x4F, 0x5E, 0x51, 0x55, 0x64, 0x50, 0x53, 0x5D, 0x50, 0x50, 0x56, 0x51, 0x4D, 
   0x58, 0x56, 0x50, 0x5D, 0x51, 0x4D, 0x56, 0x57, 0x53, 0x58, 0x5B, 0x5B, 0x5B, 0x5A, 0x60, 0x63, 
   0x5A, 0x65, 0x67, 0x63, 0x6A, 0x6C, 0x6D, 0x6F, 0x73, 0x68, 0x71, 0x71, 0x69, 0x78, 0x75, 0x64, 
   0x71, 0x75, 0x66, 0x6F, 0x7C, 0x67, 0x74, 0x7C, 0x6D, 0x71, 0x81, 0x39, 0x36, 0x40, 0x30, 0x30, 
   0x35, 0x42, 0x3F, 0x42, 0x41, 0x39, 0x3D, 0x36, 0x2E, 0x32, 0x2C, 0x28, 0x2B, 0x2A, 0x27, 0x2B, 
   0x33, 0x2E, 0x32, 0x3A, 0x35, 0x38, 0x31, 0x2E, 0x2F, 0x30, 0x2D, 0x2E, 0x3C, 0x38, 0x38, 0x3E, 
   0x3C, 0x38, 0x5B, 0x5A, 0x57, 0x75, 0x76, 0x76, 0x7C, 0x79, 0x76, 0x84, 0x80, 0x83, 0x87, 0x87, 
   0x89, 0x90, 0x91, 0x91, 0x92, 0x8F, 0x92, 0x8D, 0x88, 0x8D, 0x9B, 0x9C, 0xA1, 0xB2, 0xBA, 0xC1, 
   0xB0, 0xAA, 0xB2, 0xA3, 0x96, 0x9E, 0x96, 0x8B, 0x93, 0x90, 0x88, 0x91, 0x8B, 0x85, 0x8E, 0x95, 
   0x8E, 0x96, 0x96, 0x8C, 0x91, 0x94, 0x8D, 0x92, 0x91, 0x8A, 0x93, 0x90, 0x87, 0x90, 0x91, 0x86, 
   0x8E, 0x92, 0x88, 0x8C, 0xAA, 0xA2, 0xA1, 0x9E, 0x95, 0x9B, 0x93, 0x8D, 0x95, 0x95, 0x8D, 0x97, 
   0x8E, 0x86, 0x92, 0x7A, 0x76, 0x80, 0x71, 0x6F, 0x79, 0x73, 0x73, 0x7E, 0x74, 0x79, 0x84, 0x65, 
   0x6C, 0x7B, 0x6B, 0x6D, 0x7F, 0x7A, 0x79, 0x8A, 0x76, 0x70, 0x80, 0x59, 0x4D, 0x52, 0x5D, 0x57, 
   0x4F, 0x66, 0x66, 0x5A, 0x71, 0x70, 0x63, 0x7B, 0x73, 0x66, 0x7A, 0x70, 0x66, 0x7C, 0x74, 0x70, 
   0x7F, 0x77, 0x76, 0x7E, 0x77, 0x76, 0xA9, 0xA6, 0xA6, 0x9D, 0x98, 0x98, 0xA6, 0xA0, 0x9D, 0x84, 
   0x83, 0x7E, 0x73, 0x75, 0x73, 0x7E, 0x80, 0x7D, 0x7B, 0x7D, 0x77, 0x6D, 0x73, 0x78, 0x5E, 0x68, 
   0x76, 0x55, 0x63, 0x70, 0x6D, 0x7C, 0x82, 0x8D, 0x97, 0x9B, 0x8B, 0x91, 0x99, 0x90, 0x97, 0x9F, 
   0x82, 0x8A, 0x8F, 0x74, 0x7A, 0x81, 0x78, 0x7A, 0x84, 0x7D, 0x7B, 0x83, 0x79, 0x76, 0x7A, 0x7A, 
   0x75, 0x7D, 0x79, 0x74, 0x7C, 0x68, 0x66, 0x6C, 0x55, 0x59, 0x5B, 0x5C, 0x5A, 0x5D, 0x5E, 0x5F, 
   0x5F, 0x5A, 0x5C, 0x5D, 0x53, 0x55, 0x59, 0x55, 0x56, 0x5A, 0x5D, 0x5B, 0x5E, 0x5F, 0x5A, 0x60, 
   0x5C, 0x58, 0x58, 0x5B, 0x58, 0x5A, 0x57, 0x56, 0x5A, 0x63, 0x65, 0x64, 0x6D, 0x6D, 0x6B, 0x6A, 
   0x68, 0x6A, 0x72, 0x6F, 0x6E, 0x6D, 0x69, 0x67, 0x6B, 0x65, 0x67, 0x65, 0x5F, 0x62, 0x79, 0x74, 
   0x75, 0x85, 0x83, 0x84, 0x7C, 0x7C, 0x7D, 0x77, 0x79, 0x79, 0x7B, 0x7A, 0x7A, 0x69, 0x6A, 0x69, 
   0x50, 0x54, 0x51, 0x36, 0x37, 0x36, 0x31, 0x2F, 0x31, 0x1E, 0x1B, 0x1D, 0x30, 0x2D, 0x31, 0x60, 
   0x5C, 0x60, 0x78, 0x74, 0x77, 0x79, 0x73, 0x78, 0x78, 0x70, 0x7A, 0x7A, 0x72, 0x7C, 0x7C, 0x76, 
   0x7F, 0x7F, 0x79, 0x81, 0x81, 0x82, 0x89, 0x8B, 0x86, 0x8E, 0x74, 0x70, 0x77, 0x4D, 0x4C, 0x52, 
   0x21, 0x22, 0x25, 0x25, 0x25, 0x28, 0x2D, 0x33, 0x39, 0x3F, 0x48, 0x50, 0x4D, 0x57, 0x5B, 0x5A, 
   0x64, 0x63, 0x73, 0x7D, 0x76, 0x8F, 0x8F, 0x85, 0x83, 0x8A, 0x83, 0x81, 0x8E, 0x88, 0x86, 0x91, 
   0x8E, 0x88, 0x8F, 0x8F, 0x73, 0x74, 0x76, 0x2B, 0x27, 0x2B, 0x19, 0x1B, 0x1E, 0x43, 0x4F, 0x50, 
   0x7A, 0x82, 0x81, 0x73, 0x74, 0x77, 0x6D, 0x6E, 0x74, 0x79, 0x81, 0x7E, 0x85, 0x8C, 0x8C, 0x70, 
   0x77, 0x7E, 0x5F, 0x63, 0x6A, 0x4B, 0x53, 0x56, 0x4A, 0x56, 0x54, 0x65, 0x6F, 0x6F, 0x68, 0x74, 
   0x74, 0x6D, 0x7D, 0x7A, 0x7D, 0x8C, 0x88, 0x6E, 0x7A, 0x78, 0x68, 0x73, 0x74, 0x6D, 0x78, 0x7E, 
   0x69, 0x75, 0x79, 0x68, 0x73, 0x77, 0x6C, 0x79, 0x7D, 0x6E, 0x7F, 0x82, 0xB2, 0xC0, 0xC0, 0xA1, 
   0xA5, 0xA9, 0x85, 0x8A, 0x95, 0x7E, 0x8D, 0x9A, 0x7B, 0x8F, 0x9A, 0x84, 0x93, 0x9D, 0x85, 0x92, 
   0xA0, 0x7C, 0x8F, 0x9E, 0x75, 0x85, 0x93, 0x6E, 0x7D, 0x8B, 0x5F, 0x6D, 0x7B, 0x4B, 0x56, 0x62, 
   0x68, 0x70, 0x7A, 0x81, 0x87, 0x8E, 0x75, 0x75, 0x7B, 0x69, 0x6E, 0x71, 0x6E, 0x75, 0x76, 0x7D, 
   0x80, 0x7F, 0x8B, 0x89, 0x88, 0x89, 0x8A, 0x89, 0x86, 0x88, 0x8B, 0x84, 0x84, 0x8A, 0x89, 0x84, 
   0x8A, 0x8B, 0x81, 0x85, 0x86, 0x7F, 0x81, 0x83, 0x80, 0x7F, 0x87, 0x84, 0x83, 0x92, 0x90, 0x89, 
   0x9E, 0x9D, 0x93, 0x9F, 0x9E, 0x96, 0x9C, 0x9A, 0x95, 0x9C, 0x9B, 0x97, 0x98, 0x95, 0x95, 0xA0, 
   0x9A, 0x9D, 0x9B, 0x96, 0x96, 0x9C, 0x9B, 0x9A, 0x9A, 0x97, 0x97, 0xA1, 0x9C, 0x9C, 0xB0, 0xAA, 
   0xAA, 0xB9, 0xB2, 0xB2, 0xB5, 0xB2, 0xB2, 0xAF, 0xA6, 0xA6, 0xA5, 0x9F, 0x9F, 0xA4, 0xA0, 0xA0, 
   0xA3, 0xA1, 0xA1, 0xA5, 0xA0, 0xA2, 0xA0, 0x9A, 0x9D, 0x9A, 0x97, 0x98, 0xA5, 0x9C, 0x9D, 0xA2, 
   0x9F, 0x9F, 0x9C, 0x9A, 0x9B, 0x9D, 0x9A, 0x9B, 0x9D, 0x9A, 0x9D, 0xA3, 0x9D, 0xA1, 0xA6, 0x9E, 
   0xA1, 0xA2, 0x9F, 0x9D, 0x91, 0x8C, 0x92, 0x6A, 0x65, 0x74, 0x81, 0x82, 0x92, 0x6F, 0x71, 0x7E, 
   0x60, 0x5E, 0x6A, 0x52, 0x4E, 0x59, 0x4E, 0x4B, 0x54, 0x4C, 0x4A, 0x57, 0x47, 0x49, 0x51, 0x45, 
   0x49, 0x51, 0x45, 0x49, 0x53, 0x46, 0x48, 0x50, 0x44, 0x45, 0x50, 0x43, 0x42, 0x4E, 0x3F, 0x3E, 
   0x4A, 0x41, 0x42, 0x4C, 0x43, 0x45, 0x4E, 0x46, 0x48, 0x51, 0x49, 0x4A, 0x53, 0x4A, 0x4A, 0x53, 
   0x50, 0x4D, 0x5A, 0x53, 0x4E, 0x5F, 0x51, 0x4D, 0x5D, 0x4F, 0x4E, 0x5C, 0x68, 0x6A, 0x77, 0x81, 
   0x82, 0x91, 0x6F, 0x72, 0x82, 0x5F, 0x63, 0x71, 0x5F, 0x60, 0x6A, 0x5D, 0x57, 0x60, 0x60, 0x57, 
   0x63, 0x5B, 0x58, 0x67, 0x56, 0x57, 0x6A, 0x51, 0x51, 0x63, 0x5C, 0x5A, 0x61, 0x6E, 0x72, 0x75, 
   0x6A, 0x75, 0x75, 0x6C, 0x75, 0x75, 0x74, 0x78, 0x7D, 0x72, 0x77, 0x7A, 0x72, 0x7B, 0x7A, 0x70, 
   0x7A, 0x7F, 0x6F, 0x76, 0x84, 0x6A, 0x76, 0x81, 0x60, 0x60, 0x70, 0x36, 0x33, 0x34, 0x66, 0x6A, 
   0x66, 0x7F, 0x82, 0x81, 0x7F, 0x7E, 0x7E, 0x70, 0x69, 0x6C, 0x5F, 0x5E, 0x60, 0x52, 0x52, 0x55, 
   0x4F, 0x49, 0x4D, 0x43, 0x39, 0x3D, 0x29, 0x23, 0x26, 0x26, 0x26, 0x28, 0x39, 0x38, 0x3D, 0x34, 
   0x32, 0x32, 0x42, 0x41, 0x3C, 0x68, 0x67, 0x66, 0x79, 0x77, 0x77, 0x79, 0x74, 0x7A, 0x7B, 0x76, 
   0x7A, 0x78, 0x76, 0x77, 0x88, 0x8B, 0x8D, 0xA8, 0xAE, 0xB3, 0xB8, 0xB9, 0xC2, 0xC2, 0xC3, 0xC7, 
   0xBB, 0xB6, 0xBD, 0xAB, 0xA4, 0xAD, 0xA3, 0x9D, 0xA8, 0xA1, 0x9C, 0xA6, 0x90, 0x8A, 0x94, 0x92, 
   0x8B, 0x98, 0x95, 0x8A, 0x96, 0x94, 0x8A, 0x93, 0x94, 0x87, 0x93, 0x95, 0x85, 0x91, 0x94, 0x84, 
   0x8E, 0x8D, 0x81, 0x88, 0xA5, 0x99, 0x9A, 0xA0, 0x94, 0x96, 0x96, 0x8C, 0x95, 0x98, 0x8C, 0x99, 
   0x81, 0x77, 0x82, 0x6A, 0x65, 0x6F, 0x73, 0x70, 0x7B, 0x82, 0x83, 0x8E, 0x89, 0x91, 0x9B, 0x7F, 
   0x8A, 0x96, 0xA2, 0xA4, 0xB5, 0xA8, 0x9F, 0xB1, 0x7D, 0x6F, 0x7F, 0x53, 0x44, 0x49, 0x52, 0x4C, 
   0x45, 0x5E, 0x5C, 0x51, 0x6E, 0x67, 0x5D, 0x71, 0x64, 0x5C, 0x79, 0x6C, 0x64, 0x75, 0x6B, 0x67, 
   0x6E, 0x67, 0x69, 0x72, 0x6C, 0x68, 0xC3, 0xC2, 0xC4, 0xC3, 0xC0, 0xBF, 0xC1, 0xBD, 0xB9, 0xAA, 
   0xA9, 0xA1, 0x8B, 0x8E, 0x87, 0x87, 0x89, 0x85, 0x89, 0x8B, 0x85, 0x7C, 0x86, 0x88, 0x66, 0x75, 
   0x81, 0x53, 0x68, 0x72, 0x72, 0x86, 0x8B, 0x8B, 0x97, 0x9C, 0x8A, 0x90, 0x98, 0x8E, 0x95, 0x9B, 
   0x81, 0x8A, 0x8E, 0x76, 0x7E, 0x84, 0x7B, 0x7E, 0x85, 0x75, 0x75, 0x7D, 0x74, 0x73, 0x79, 0x79, 
   0x78, 0x7D, 0x7B, 0x7A, 0x7F, 0x87, 0x88, 0x8C, 0x79, 0x7D, 0x7F, 0x5F, 0x5F, 0x62, 0x60, 0x62, 
   0x64, 0x5C, 0x5E, 0x61, 0x60, 0x61, 0x66, 0x60, 0x60, 0x64, 0x57, 0x57, 0x5B, 0x4C, 0x4B, 0x51, 
   0x58, 0x55, 0x59, 0x67, 0x66, 0x6A, 0x70, 0x70, 0x76, 0x92, 0x92, 0x92, 0x7A, 0x78, 0x79, 0x64, 
   0x61, 0x66, 0x76, 0x75, 0x76, 0x78, 0x79, 0x75, 0x7E, 0x7C, 0x7E, 0x7E, 0x7E, 0x82, 0x70, 0x71, 
   0x73, 0x89, 0x88, 0x85, 0x87, 0x87, 0x83, 0x76, 0x7B, 0x76, 0x70, 0x76, 0x73, 0x67, 0x6C, 0x6A, 
   0x4D, 0x54, 0x50, 0x33, 0x34, 0x33, 0x2F, 0x28, 0x2E, 0x2B, 0x27, 0x2F, 0x5D, 0x5E, 0x62, 0x77, 
   0x75, 0x79, 0x74, 0x72, 0x78, 0x70, 0x6F, 0x76, 0x75, 0x72, 0x7A, 0x77, 0x72, 0x7B, 0x7B, 0x77, 
   0x80, 0x81, 0x7E, 0x82, 0x7A, 0x79, 0x7F, 0x84, 0x7A, 0x83, 0x7F, 0x75, 0x7F, 0x6B, 0x66, 0x6E, 
   0x48, 0x47, 0x4A, 0x57, 0x55, 0x56, 0x3F, 0x48, 0x4B, 0x36, 0x43, 0x51, 0x3E, 0x4D, 0x5C, 0x54, 
   0x61, 0x6F, 0x80, 0x8A, 0x8D, 0x99, 0x99, 0x93, 0x76, 0x7F, 0x7D, 0x71, 0x7D, 0x7B, 0x72, 0x7D, 
   0x7B, 0x78, 0x80, 0x80, 0x91, 0x93, 0x95, 0x65, 0x63, 0x65, 0x1C, 0x1F, 0x22, 0x43, 0x4F, 0x4F, 
   0x7E, 0x84, 0x85, 0x79, 0x79, 0x7E, 0x72, 0x6F, 0x77, 0x7F, 0x83, 0x85, 0x85, 0x8A, 0x8F, 0x6C, 
   0x74, 0x7C, 0x5C, 0x60, 0x68, 0x3F, 0x47, 0x4B, 0x45, 0x54, 0x54, 0x63, 0x72, 0x74, 0x69, 0x79, 
   0x79, 0x69, 0x7A, 0x76, 0x76, 0x84, 0x80, 0x70, 0x79, 0x7B, 0x6A, 0x73, 0x7A, 0x6D, 0x76, 0x7E, 
   0x64, 0x70, 0x75, 0x63, 0x71, 0x76, 0x61, 0x71, 0x75, 0x6E, 0x80, 0x81, 0xA6, 0xB0, 0xB2, 0x95, 
   0x98, 0xA1, 0x7D, 0x84, 0x91, 0x79, 0x87, 0x95, 0x7B, 0x8D, 0x9B, 0x7F, 0x8F, 0x9D, 0x7F, 0x8E, 
   0x9D, 0x7C, 0x90, 0xA0, 0x7A, 0x8A, 0x99, 0x70, 0x80, 0x8F, 0x61, 0x71, 0x80, 0x4C, 0x59, 0x64, 
   0x61, 0x6A, 0x72, 0x73, 0x77, 0x7F, 0x6D, 0x70, 0x74, 0x6E, 0x77, 0x78, 0x7F, 0x81, 0x81, 0x8E, 
   0x88, 0x87, 0x88, 0x88, 0x86, 0x82, 0x85, 0x82, 0x80, 0x82, 0x81, 0x7D, 0x81, 0x81, 0x88, 0x84, 
   0x84, 0x8C, 0x84, 0x83, 0x87, 0x84, 0x7E, 0x81, 0x80, 0x7A, 0x8F, 0x8C, 0x87, 0xA1, 0x9F, 0x9A, 
   0xA8, 0xA3, 0xA0, 0xA3, 0x9C, 0x98, 0xA3, 0x9E, 0x9B, 0xAC, 0xAA, 0xAB, 0xA9, 0xA7, 0xA9, 0x9E, 
   0x9A, 0x9B, 0x9A, 0x97, 0x97, 0x96, 0x99, 0x99, 0x91, 0x93, 0x92, 0xA4, 0xA4, 0xA4, 0xB2, 0xAF, 
   0xB0, 0xB2, 0xAC, 0xAD, 0xA7, 0xA3, 0xA4, 0xA3, 0x9E, 0x9D, 0xA0, 0x9C, 0x9C, 0x9E, 0x9D, 0x9C, 
   0x9E, 0x9D, 0x9C, 0x9E, 0x9B, 0x9B, 0xA4, 0xA1, 0xA1, 0xA1, 0x9D, 0x9D, 0xA6, 0x9E, 0x9D, 0xA4, 
   0xA1, 0xA0, 0xA4, 0xA2, 0xA1, 0xA3, 0xA1, 0xA0, 0x9D, 0x9B, 0x9C, 0xA2, 0x9F, 0xA1, 0xA3, 0x9E, 
   0xA0, 0xA0, 0x9D, 0x9F, 0x8F, 0x8B, 0x95, 0x7E, 0x7E, 0x8D, 0x98, 0x9C, 0xAA, 0x9D, 0xA0, 0xAB, 
   0x88, 0x85, 0x8E, 0x87, 0x80, 0x88, 0x72, 0x6B, 0x74, 0x59, 0x53, 0x60, 0x59, 0x56, 0x63, 0x52, 
   0x55, 0x5F, 0x49, 0x4E, 0x59, 0x45, 0x4A, 0x57, 0x49, 0x4B, 0x5A, 0x4D, 0x4B, 0x5B, 0x49, 0x48, 
   0x56, 0x43, 0x45, 0x52, 0x41, 0x47, 0x51, 0x43, 0x48, 0x52, 0x44, 0x47, 0x50, 0x4C, 0x4E, 0x58, 
   0x51, 0x51, 0x62, 0x52, 0x4E, 0x64, 0x55, 0x52, 0x68, 0x4C, 0x4B, 0x5E, 0x48, 0x4C, 0x5C, 0x63, 
   0x69, 0x79, 0x80, 0x8C, 0x97, 0xA2, 0xA5, 0xB1, 0xB1, 0xB1, 0xBF, 0x98, 0x91, 0xA1, 0x82, 0x7C, 
   0x88, 0x8E, 0x8E, 0x98, 0x83, 0x80, 0x8F, 0x65, 0x65, 0x76, 0x66, 0x63, 0x6B, 0x65, 0x62, 0x66, 
   0x78, 0x78, 0x79, 0x7B, 0x7F, 0x80, 0x74, 0x7B, 0x80, 0x6E, 0x73, 0x77, 0x73, 0x76, 0x7A, 0x78, 
   0x7D, 0x85, 0x75, 0x7B, 0x89, 0x67, 0x72, 0x7E, 0x53, 0x50, 0x5F, 0x3C, 0x3B, 0x38, 0x7B, 0x80, 
   0x79, 0x8C, 0x8E, 0x8E, 0x9C, 0x9E, 0xA3, 0x9E, 0x9F, 0xA5, 0x9A, 0x9C, 0x9D, 0x9E, 0xA0, 0x9F, 
   0x96, 0x95, 0x97, 0x88, 0x83, 0x86, 0x71, 0x6E, 0x71, 0x3F, 0x3F, 0x44, 0x2B, 0x2A, 0x2F, 0x2B, 
   0x29, 0x2A, 0x2F, 0x2F, 0x2B, 0x57, 0x5A, 0x56, 0x81, 0x81, 0x7E, 0x79, 0x72, 0x76, 0x76, 0x6A, 
   0x6F, 0x70, 0x69, 0x6D, 0x80, 0x83, 0x88, 0xA5, 0xAC, 0xB2, 0xAC, 0xAC, 0xB8, 0xAA, 0xAA, 0xAF, 
   0xC7, 0xC4, 0xCD, 0xBC, 0xB6, 0xC3, 0x9D, 0x97, 0xA2, 0x94, 0x8F, 0x97, 0x94, 0x90, 0x98, 0x94, 
   0x8F, 0x98, 0x97, 0x91, 0x9B, 0x98, 0x90, 0x97, 0x96, 0x88, 0x93, 0x94, 0x85, 0x8F, 0x92, 0x82, 
   0x8D, 0x86, 0x7A, 0x84, 0x8E, 0x84, 0x88, 0x9A, 0x90, 0x96, 0x9B, 0x8E, 0x9A, 0x95, 0x86, 0x93, 
   0x73, 0x69, 0x73, 0x72, 0x6F, 0x78, 0x86, 0x84, 0x92, 0x82, 0x84, 0x91, 0x87, 0x8F, 0x96, 0x9F, 
   0xA4, 0xA9, 0xA6, 0xA1, 0xAA, 0x8B, 0x7E, 0x8A, 0x58, 0x4A, 0x4F, 0x59, 0x4D, 0x48, 0x6B, 0x61, 
   0x5A, 0x6D, 0x65, 0x5D, 0x71, 0x64, 0x5D, 0x6E, 0x5F, 0x5A, 0x6E, 0x61, 0x58, 0x74, 0x6B, 0x63, 
   0x78, 0x71, 0x6F, 0x65, 0x5D, 0x55, 0xB4, 0xB8, 0xBC, 0xC4, 0xC2, 0xC1, 0xCC, 0xC6, 0xC2, 0xAD, 
   0xAB, 0xA5, 0x95, 0x95, 0x8F, 0x8E, 0x8C, 0x89, 0x7D, 0x7F, 0x7B, 0x6A, 0x78, 0x7A, 0x5A, 0x6E, 
   0x7A, 0x56, 0x6E, 0x77, 0x7A, 0x8F, 0x94, 0x8A, 0x96, 0x9E, 0x8F, 0x96, 0x9E, 0x8D, 0x94, 0x9A, 
   0x76, 0x7D, 0x82, 0x72, 0x76, 0x7D, 0x76, 0x76, 0x7B, 0x6E, 0x6C, 0x74, 0x6D, 0x6C, 0x74, 0x75, 
   0x75, 0x7A, 0x7A, 0x7C, 0x7D, 0x84, 0x85, 0x87, 0x80, 0x7F, 0x85, 0x61, 0x60, 0x63, 0x6B, 0x6B, 
   0x6D, 0x64, 0x65, 0x69, 0x5F, 0x60, 0x66, 0x64, 0x66, 0x6A, 0x67, 0x68, 0x6C, 0x65, 0x63, 0x6A, 
   0x6E, 0x6A, 0x6F, 0x87, 0x85, 0x88, 0x9D, 0x9B, 0x9C, 0xAD, 0xAA, 0xA7, 0x83, 0x7F, 0x7E, 0x68, 
   0x66, 0x6C, 0x76, 0x77, 0x7A, 0x81, 0x80, 0x80, 0x85, 0x84, 0x84, 0x77, 0x78, 0x7E, 0x5F, 0x63, 
   0x66, 0x97, 0x99, 0x91, 0x95, 0x93, 0x8B, 0x82, 0x80, 0x7C, 0x6F, 0x6F, 0x6C, 0x67, 0x67, 0x65, 
   0x47, 0x49, 0x45, 0x25, 0x24, 0x23, 0x28, 0x23, 0x29, 0x47, 0x47, 0x4D, 0x6D, 0x70, 0x75, 0x6D, 
   0x6C, 0x72, 0x6C, 0x69, 0x72, 0x6E, 0x6F, 0x77, 0x73, 0x71, 0x79, 0x78, 0x73, 0x7B, 0x7F, 0x7A, 
   0x83, 0x82, 0x7F, 0x82, 0x7C, 0x7D, 0x82, 0x83, 0x7C, 0x86, 0x72, 0x6D, 0x77, 0x69, 0x68, 0x6F, 
   0x62, 0x61, 0x64, 0x7B, 0x76, 0x75, 0x75, 0x73, 0x72, 0x46, 0x4D, 0x57, 0x3A, 0x48, 0x5B, 0x55, 
   0x65, 0x7C, 0x7D, 0x89, 0x94, 0x91, 0x91, 0x8F, 0x7F, 0x88, 0x86, 0x78, 0x87, 0x85, 0x6F, 0x7B, 
   0x79, 0x75, 0x80, 0x7E, 0xA1, 0xA5, 0xA4, 0x9B, 0x9A, 0x9A, 0x48, 0x4A, 0x4B, 0x51, 0x58, 0x58, 
   0x85, 0x8B, 0x8B, 0x7B, 0x81, 0x84, 0x76, 0x75, 0x7C, 0x80, 0x84, 0x8A, 0x7F, 0x84, 0x8B, 0x69, 
   0x73, 0x7B, 0x5B, 0x63, 0x6B, 0x36, 0x3F, 0x45, 0x3F, 0x4A, 0x4C, 0x67, 0x76, 0x7A, 0x66, 0x75, 
   0x78, 0x63, 0x72, 0x71, 0x6E, 0x7D, 0x7B, 0x66, 0x74, 0x75, 0x61, 0x6D, 0x73, 0x6D, 0x79, 0x7F, 
   0x68, 0x77, 0x7C, 0x65, 0x76, 0x7D, 0x6C, 0x7E, 0x85, 0x8A, 0x9C, 0x9E, 0xA5, 0xAD, 0xB2, 0x7F, 
   0x85, 0x92, 0x7A, 0x84, 0x94, 0x78, 0x85, 0x96, 0x81, 0x8F, 0xA1, 0x7F, 0x8E, 0xA0, 0x73, 0x86, 
   0x96, 0x75, 0x8C, 0x9B, 0x76, 0x88, 0x97, 0x6B, 0x7D, 0x8E, 0x5D, 0x6F, 0x7F, 0x50, 0x5F, 0x69, 
   0x57, 0x62, 0x68, 0x59, 0x5F, 0x66, 0x6A, 0x6D, 0x70, 0x78, 0x7A, 0x7C, 0x87, 0x84, 0x85, 0x93, 
   0x8F, 0x8E, 0x89, 0x8B, 0x88, 0x83, 0x87, 0x84, 0x7B, 0x7F, 0x7D, 0x7B, 0x7F, 0x7A, 0x89, 0x86, 
   0x80, 0x87, 0x83, 0x7E, 0x81, 0x82, 0x78, 0x86, 0x88, 0x83, 0x97, 0x97, 0x97, 0x9F, 0x9D, 0x9D, 
   0xA5, 0xA1, 0xA0, 0x9E, 0x99, 0x97, 0xA1, 0x9E, 0x9C, 0xB4, 0xB3, 0xB4, 0xAD, 0xAD, 0xAF, 0x98, 
   0x98, 0x97, 0x98, 0x97, 0x98, 0x93, 0x97, 0x98, 0x8E, 0x94, 0x95, 0xA8, 0xAC, 0xAD, 0xB6, 0xB7, 
   0xB9, 0xAA, 0xA5, 0xA7, 0xAB, 0xA6, 0xA8, 0xA1, 0xA1, 0xA0, 0x9E, 0x9E, 0x9D, 0x9E, 0x9F, 0x9E, 
   0x9D, 0x9F, 0x9D, 0x9E, 0x9E, 0x9D, 0xAA, 0xA9, 0xA7, 0xA7, 0xA3, 0xA1, 0xAB, 0xA7, 0xA3, 0xA7, 
   0xA6, 0xA1, 0xA6, 0xA4, 0xA0, 0xA2, 0x9F, 0x9C, 0x9C, 0x9A, 0x99, 0xA2, 0xA2, 0xA0, 0xA6, 0xA4, 
   0xA5, 0xA2, 0x9D, 0xA1, 0x92, 0x8E, 0x9A, 0x8F, 0x92, 0x9C, 0x98, 0xA0, 0xA7, 0x9B, 0xA1, 0xAC, 
   0x97, 0x97, 0xA2, 0x9D, 0x99, 0xA2, 0xA0, 0x9B, 0xA3, 0x8A, 0x85, 0x90, 0x84, 0x7F, 0x8C, 0x84, 
   0x80, 0x8E, 0x6C, 0x6B, 0x7B, 0x53, 0x54, 0x67, 0x50, 0x4E, 0x66, 0x52, 0x4D, 0x66, 0x4C, 0x4A, 
   0x61, 0x42, 0x45, 0x59, 0x42, 0x48, 0x5A, 0x46, 0x4C, 0x5A, 0x50, 0x53, 0x61, 0x63, 0x65, 0x75, 
   0x63, 0x63, 0x77, 0x50, 0x4D, 0x66, 0x57, 0x53, 0x6D, 0x58, 0x56, 0x6C, 0x59, 0x5A, 0x6C, 0x66, 
   0x69, 0x78, 0x6E, 0x74, 0x7E, 0x84, 0x85, 0x93, 0x8E, 0x8E, 0xA1, 0x8F, 0x8C, 0x9B, 0x9C, 0x97, 
   0x9A, 0xB7, 0xB5, 0xB5, 0xC6, 0xC0, 0xC8, 0xAF, 0xA9, 0xB2, 0xA1, 0x9D, 0x9F, 0x84, 0x7F, 0x84, 
   0x86, 0x7F, 0x85, 0x7A, 0x7B, 0x7F, 0x73, 0x7C, 0x7E, 0x72, 0x75, 0x76, 0x74, 0x77, 0x77, 0x71, 
   0x76, 0x79, 0x6C, 0x75, 0x7C, 0x6B, 0x76, 0x80, 0x53, 0x4E, 0x5F, 0x41, 0x42, 0x43, 0x80, 0x85, 
   0x80, 0x93, 0x90, 0x8C, 0x9B, 0x94, 0x96, 0x9B, 0x97, 0x9A, 0xA0, 0x9F, 0xA1, 0xA0, 0x9E, 0x9E, 
   0x96, 0x94, 0x94, 0x94, 0x93, 0x93, 0x99, 0x96, 0x9A, 0x84, 0x7C, 0x83, 0x62, 0x58, 0x5A, 0x39, 
   0x32, 0x30, 0x2A, 0x29, 0x26, 0x36, 0x3B, 0x35, 0x64, 0x62, 0x5C, 0x72, 0x6B, 0x6B, 0x77, 0x6E, 
   0x72, 0x75, 0x71, 0x77, 0x74, 0x7B, 0x82, 0x95, 0x9D, 0xA3, 0xA3, 0xA0, 0xAC, 0x93, 0x93, 0x9A, 
   0xA5, 0xA4, 0xAD, 0xA1, 0x9C, 0xA7, 0x96, 0x8E, 0x98, 0x98, 0x92, 0x98, 0x9E, 0x99, 0x9F, 0x93, 
   0x90, 0x97, 0x96, 0x92, 0x9B, 0x9C, 0x96, 0x9A, 0x9A, 0x8F, 0x95, 0x96, 0x8B, 0x90, 0x92, 0x89, 
   0x90, 0x93, 0x8C, 0x93, 0x97, 0x94, 0x99, 0x9E, 0x9A, 0xA3, 0x9F, 0x94, 0xA0, 0x96, 0x87, 0x93, 
   0x7B, 0x75, 0x7C, 0x8F, 0x91, 0x99, 0x96, 0x96, 0xA5, 0x91, 0x92, 0x9F, 0x95, 0x97, 0x9C, 0x99, 
   0x96, 0x99, 0x97, 0x90, 0x94, 0x86, 0x7C, 0x81, 0x66, 0x5A, 0x58, 0x6E, 0x61, 0x56, 0x7A, 0x6E, 
   0x64, 0x7B, 0x70, 0x66, 0x79, 0x6B, 0x62, 0x74, 0x69, 0x62, 0x73, 0x6A, 0x63, 0x80, 0x79, 0x72, 
   0x7A, 0x73, 0x70, 0x5C, 0x55, 0x51, 0x8C, 0x99, 0xA4, 0xA5, 0xA7, 0xAD, 0xBA, 0xB5, 0xB8, 0xA4, 
   0xA1, 0x9F, 0x9A, 0x98, 0x95, 0x8E, 0x8C, 0x89, 0x6F, 0x73, 0x72, 0x56, 0x65, 0x6B, 0x51, 0x66, 
   0x72, 0x63, 0x79, 0x81, 0x7F, 0x92, 0x99, 0x8A, 0x99, 0xA3, 0x91, 0x9E, 0xA6, 0x94, 0xA1, 0xA6, 
   0x7B, 0x86, 0x8B, 0x71, 0x77, 0x7E, 0x77, 0x76, 0x7C, 0x72, 0x70, 0x76, 0x72, 0x6F, 0x76, 0x77, 
   0x75, 0x7A, 0x7C, 0x7B, 0x7D, 0x7F, 0x7E, 0x80, 0x8D, 0x8C, 0x90, 0x84, 0x81, 0x83, 0x7B, 0x78, 
   0x7A, 0x87, 0x86, 0x89, 0x76, 0x76, 0x7A, 0x70, 0x71, 0x73, 0x6E, 0x6E, 0x70, 0x73, 0x70, 0x77, 
   0x75, 0x73, 0x75, 0x82, 0x84, 0x84, 0x90, 0x92, 0x93, 0x8C, 0x8C, 0x89, 0x7E, 0x7C, 0x7A, 0x71, 
   0x73, 0x76, 0x77, 0x7B, 0x7D, 0x81, 0x7E, 0x7E, 0x88, 0x85, 0x83, 0x6D, 0x6C, 0x6F, 0x39, 0x3D, 
   0x3F, 0x8E, 0x94, 0x8C, 0x9D, 0x9C, 0x94, 0x84, 0x81, 0x7D, 0x69, 0x68, 0x68, 0x60, 0x5E, 0x5F, 
   0x3E, 0x3C, 0x3B, 0x1A, 0x18, 0x19, 0x36, 0x35, 0x3A, 0x64, 0x63, 0x6A, 0x6F, 0x6E, 0x74, 0x6D, 
   0x68, 0x71, 0x6F, 0x6A, 0x74, 0x72, 0x70, 0x79, 0x75, 0x72, 0x79, 0x7B, 0x75, 0x7D, 0x81, 0x7B, 
   0x85, 0x82, 0x80, 0x87, 0x7E, 0x81, 0x87, 0x7C, 0x78, 0x82, 0x6C, 0x6D, 0x76, 0x60, 0x64, 0x6B, 
   0x68, 0x69, 0x6E, 0x6F, 0x67, 0x6A, 0x81, 0x78, 0x79, 0x65, 0x65, 0x6D, 0x3D, 0x4A, 0x5C, 0x4B, 
   0x5B, 0x71, 0x6D, 0x79, 0x82, 0x8A, 0x8A, 0x86, 0x94, 0x9B, 0x92, 0x91, 0x9B, 0x94, 0x85, 0x8B, 
   0x83, 0x7F, 0x86, 0x7E, 0xA7, 0xAB, 0xA5, 0xB8, 0xB9, 0xB5, 0x69, 0x6D, 0x6B, 0x5D, 0x60, 0x5F, 
   0x86, 0x8B, 0x8A, 0x7D, 0x85, 0x85, 0x7D, 0x7F, 0x85, 0x7A, 0x7F, 0x86, 0x78, 0x7D, 0x86, 0x65, 
   0x70, 0x77, 0x5E, 0x67, 0x6F, 0x39, 0x40, 0x46, 0x44, 0x4C, 0x4C, 0x75, 0x82, 0x84, 0x67, 0x76, 
   0x78, 0x70, 0x7D, 0x7E, 0x6C, 0x7C, 0x7D, 0x61, 0x71, 0x73, 0x5D, 0x6C, 0x6E, 0x6F, 0x7F, 0x82, 
   0x7D, 0x8F, 0x94, 0x73, 0x88, 0x8E, 0x73, 0x86, 0x8C, 0x93, 0xA4, 0xA8, 0xA1, 0xAB, 0xAF, 0x74, 
   0x80, 0x8C, 0x77, 0x88, 0x98, 0x7B, 0x8B, 0x9C, 0x84, 0x93, 0xA5, 0x7A, 0x8A, 0x9E, 0x67, 0x7B, 
   0x8B, 0x70, 0x85, 0x94, 0x6E, 0x82, 0x90, 0x63, 0x76, 0x88, 0x57, 0x68, 0x7A, 0x59, 0x66, 0x6F, 
   0x5E, 0x67, 0x6C, 0x5A, 0x61, 0x68, 0x78, 0x7E, 0x80, 0x85, 0x84, 0x86, 0x88, 0x85, 0x86, 0x8D, 
   0x8C, 0x8A, 0x8D, 0x8A, 0x89, 0x84, 0x81, 0x82, 0x74, 0x77, 0x77, 0x78, 0x7E, 0x7B, 0x85, 0x85, 
   0x82, 0x89, 0x88, 0x85, 0x85, 0x85, 0x7E, 0x96, 0x94, 0x92, 0xA0, 0x9D, 0xA0, 0x9F, 0x9C, 0x9A, 
   0xA5, 0xA0, 0x9D, 0x9F, 0x9A, 0x96, 0x9C, 0x97, 0x94, 0x9F, 0x99, 0x99, 0x9D, 0x9A, 0x9A, 0x97, 
   0x98, 0x96, 0x97, 0x97, 0x97, 0x8E, 0x93, 0x94, 0x91, 0x97, 0x98, 0xA1, 0xA6, 0xA7, 0xA9, 0xAA, 
   0xAC, 0xAC, 0xA8, 0xAA, 0xAB, 0xA8, 0xAA, 0xA3, 0xA4, 0xA4, 0xA9, 0xA9, 0xA8, 0xA0, 0xA0, 0x9F, 
   0x9C, 0x9F, 0x9C, 0x9C, 0xA0, 0x9C, 0xA5, 0xA5, 0xA2, 0xA9, 0xA5, 0xA2, 0xAC, 0xA7, 0xA3, 0xA9, 
   0xA5, 0xA1, 0xA6, 0xA1, 0x9E, 0xA2, 0x9C, 0x99, 0x9D, 0x9B, 0x99, 0xA2, 0xA4, 0xA1, 0xAE, 0xAD, 
   0xAB, 0xA2, 0x9E, 0xA1, 0x9C, 0x9A, 0xA5, 0x99, 0x9D, 0xA7, 0x97, 0x9F, 0xA7, 0x95, 0x9A, 0xA6, 
   0x9B, 0x9E, 0xA9, 0xAA, 0xA9, 0xB1, 0xB3, 0xAE, 0xB4, 0xB7, 0xB3, 0xBA, 0xAD, 0xA8, 0xB3, 0x92, 
   0x8A, 0x99, 0x7C, 0x74, 0x86, 0x5F, 0x5C, 0x6D, 0x51, 0x4A, 0x64, 0x54, 0x4F, 0x6C, 0x52, 0x51, 
   0x6C, 0x43, 0x46, 0x60, 0x43, 0x48, 0x60, 0x48, 0x4C, 0x63, 0x4E, 0x50, 0x67, 0x64, 0x62, 0x78, 
   0x7C, 0x78, 0x8D, 0x71, 0x6C, 0x82, 0x61, 0x5D, 0x75, 0x58, 0x59, 0x6E, 0x59, 0x5D, 0x6B, 0x6E, 
   0x74, 0x7B, 0x7A, 0x78, 0x81, 0x71, 0x72, 0x81, 0x75, 0x79, 0x8A, 0x86, 0x89, 0x93, 0xA1, 0xA1, 
   0xA1, 0xA2, 0x9F, 0x9E, 0xA2, 0xA0, 0xA8, 0xA2, 0x9D, 0xA4, 0x9E, 0x9A, 0x9D, 0x9D, 0x9B, 0xA1, 
   0x8B, 0x89, 0x90, 0x77, 0x7D, 0x7F, 0x82, 0x8D, 0x89, 0x94, 0x97, 0x90, 0x9A, 0x9A, 0x99, 0x87, 
   0x86, 0x89, 0x74, 0x7C, 0x80, 0x81, 0x88, 0x8D, 0x51, 0x4A, 0x54, 0x42, 0x48, 0x44, 0x7F, 0x87, 
   0x7E, 0x91, 0x91, 0x86, 0x99, 0x90, 0x8B, 0x96, 0x8F, 0x8E, 0x94, 0x92, 0x94, 0x94, 0x92, 0x93, 
   0x93, 0x90, 0x8F, 0x93, 0x91, 0x8B, 0x9A, 0x94, 0x91, 0x93, 0x87, 0x88, 0x8E, 0x83, 0x82, 0x74, 
   0x6C, 0x6A, 0x5E, 0x59, 0x5A, 0x50, 0x4B, 0x4D, 0x45, 0x3F, 0x3C, 0x69, 0x62, 0x62, 0x85, 0x7F, 
   0x83, 0x99, 0x9A, 0x9F, 0x9E, 0xA5, 0xA9, 0xA9, 0xAF, 0xB2, 0xB4, 0xB2, 0xBC, 0x9B, 0x99, 0xA1, 
   0x94, 0x92, 0x98, 0x9A, 0x94, 0x9B, 0x9F, 0x96, 0x9C, 0x99, 0x93, 0x98, 0x95, 0x91, 0x97, 0x95, 
   0x92, 0x97, 0x94, 0x8F, 0x98, 0x95, 0x8E, 0x91, 0x97, 0x8D, 0x90, 0x96, 0x8F, 0x90, 0x92, 0x8E, 
   0x93, 0x9D, 0x9A, 0xA2, 0xA3, 0xA0, 0xA8, 0xA6, 0xA3, 0xAC, 0xA5, 0xA1, 0xA9, 0x9B, 0x93, 0x9A, 
   0x8B, 0x87, 0x8C, 0x95, 0x97, 0x9C, 0xA3, 0xA4, 0xAD, 0x98, 0x99, 0xA1, 0x8D, 0x8D, 0x8F, 0x8F, 
   0x8D, 0x8B, 0x93, 0x90, 0x91, 0x89, 0x82, 0x87, 0x72, 0x67, 0x63, 0x75, 0x69, 0x5E, 0x78, 0x6C, 
   0x62, 0x80, 0x72, 0x67, 0x7F, 0x6F, 0x65, 0x7F, 0x72, 0x6B, 0x85, 0x7C, 0x78, 0x7A, 0x71, 0x6F, 
   0x6B, 0x65, 0x62, 0x7D, 0x78, 0x70, 0xA0, 0xB0, 0xC2, 0x9B, 0xA0, 0xAD, 0x9F, 0x9B, 0xA4, 0x9D, 
   0x9B, 0x9E, 0x9E, 0x9C, 0x9B, 0x82, 0x81, 0x80, 0x62, 0x69, 0x6B, 0x56, 0x64, 0x6F, 0x56, 0x67, 
   0x73, 0x6E, 0x7C, 0x85, 0x83, 0x8F, 0x99, 0x92, 0x9E, 0xAB, 0x99, 0xA9, 0xB1, 0x95, 0xA8, 0xAC, 
   0x86, 0x94, 0x9A, 0x7B, 0x83, 0x8A, 0x76, 0x7A, 0x81, 0x72, 0x74, 0x79, 0x74, 0x73, 0x76, 0x78, 
   0x75, 0x7A, 0x7C, 0x7A, 0x7F, 0x7F, 0x81, 0x84, 0x8F, 0x94, 0x94, 0x84, 0x83, 0x80, 0x74, 0x72, 
   0x6F, 0x7C, 0x78, 0x78, 0x72, 0x6E, 0x6E, 0x6D, 0x6C, 0x6A, 0x6D, 0x70, 0x6E, 0x75, 0x76, 0x7A, 
   0x85, 0x7F, 0x81, 0x92, 0x92, 0x94, 0x88, 0x8A, 0x8F, 0x77, 0x78, 0x79, 0x79, 0x78, 0x78, 0x6D, 
   0x6E, 0x71, 0x78, 0x7A, 0x7C, 0x81, 0x7E, 0x7E, 0x81, 0x7D, 0x7B, 0x5D, 0x5A, 0x59, 0x12, 0x15, 
   0x14, 0x57, 0x64, 0x5F, 0x97, 0x9C, 0x95, 0x89, 0x8B, 0x86, 0x66, 0x6B, 0x6B, 0x5B, 0x5E, 0x5F, 
   0x33, 0x31, 0x32, 0x2B, 0x2C, 0x30, 0x55, 0x58, 0x61, 0x67, 0x67, 0x73, 0x6E, 0x68, 0x72, 0x71, 
   0x69, 0x73, 0x72, 0x6C, 0x78, 0x72, 0x6F, 0x79, 0x74, 0x72, 0x79, 0x7C, 0x78, 0x80, 0x7E, 0x79, 
   0x83, 0x7B, 0x7D, 0x87, 0x7D, 0x80, 0x8A, 0x7E, 0x77, 0x80, 0x76, 0x72, 0x7A, 0x66, 0x66, 0x6D, 
   0x6D, 0x6C, 0x74, 0x74, 0x6E, 0x76, 0x76, 0x6C, 0x6C, 0x80, 0x7C, 0x7D, 0x4E, 0x57, 0x64, 0x42, 
   0x4E, 0x60, 0x59, 0x63, 0x6D, 0x7D, 0x84, 0x84, 0x8C, 0x99, 0x93, 0xA7, 0xAD, 0xAF, 0xB1, 0xAF, 
   0xAF, 0xA4, 0xA3, 0xA0, 0xB2, 0xB1, 0xAC, 0xA4, 0xA4, 0x9F, 0x6B, 0x6C, 0x68, 0x5E, 0x5E, 0x5A, 
   0x80, 0x81, 0x7E, 0x7C, 0x81, 0x81, 0x84, 0x84, 0x87, 0x74, 0x78, 0x80, 0x76, 0x7B, 0x84, 0x63, 
   0x6A, 0x71, 0x4F, 0x52, 0x5A, 0x2A, 0x2F, 0x32, 0x3F, 0x48, 0x44, 0x69, 0x79, 0x75, 0x67, 0x77, 
   0x75, 0x77, 0x85, 0x84, 0x67, 0x75, 0x77, 0x5C, 0x6C, 0x71, 0x65, 0x75, 0x77, 0x7A, 0x8A, 0x8C, 
   0x84, 0x96, 0x9B, 0x78, 0x8C, 0x91, 0x77, 0x8A, 0x8C, 0x94, 0xA3, 0xA4, 0x9C, 0xA7, 0xA9, 0x76, 
   0x86, 0x91, 0x76, 0x8B, 0x9A, 0x7C, 0x92, 0xA1, 0x81, 0x94, 0xA4, 0x7A, 0x8C, 0x9D, 0x6F, 0x80, 
   0x90, 0x70, 0x83, 0x92, 0x6E, 0x81, 0x91, 0x64, 0x76, 0x8A, 0x5D, 0x6C, 0x7F, 0x6B, 0x75, 0x7E, 
   0x6C, 0x73, 0x76, 0x71, 0x76, 0x7D, 0x8E, 0x93, 0x95, 0x98, 0x99, 0x99, 0x90, 0x8D, 0x8D, 0x92, 
   0x8E, 0x8E, 0x8E, 0x8B, 0x8C, 0x84, 0x83, 0x86, 0x77, 0x7A, 0x7C, 0x7F, 0x83, 0x7F, 0x82, 0x81, 
   0x7F, 0x8E, 0x8B, 0x8D, 0x95, 0x94, 0x8F, 0x9C, 0x98, 0x99, 0xA0, 0xA0, 0xA2, 0xA0, 0xA0, 0x9E, 
   0xA0, 0x9C, 0x99, 0xA0, 0x99, 0x97, 0x9B, 0x95, 0x93, 0x98, 0x96, 0x95, 0x96, 0x98, 0x96, 0x96, 
   0x99, 0x96, 0x98, 0x97, 0x96, 0x91, 0x94, 0x94, 0x96, 0x98, 0x97, 0x9D, 0x9D, 0x9D, 0xA1, 0xA0, 
   0xA0, 0xAB, 0xA6, 0xA7, 0xA5, 0xA3, 0xA4, 0xA6, 0xA4, 0xA4, 0xA6, 0xA3, 0xA2, 0x9E, 0x9B, 0x9A, 
   0x99, 0x9A, 0x97, 0x9A, 0x9E, 0x99, 0xA1, 0xA2, 0x9D, 0xA8, 0xA6, 0xA1, 0xAD, 0xA6, 0xA0, 0xAC, 
   0xA5, 0xA0, 0xA9, 0xA2, 0xA0, 0xA3, 0x9C, 0x9B, 0x9C, 0x98, 0x9A, 0x9D, 0x9B, 0x9E, 0xA1, 0x9E, 
   0xA3, 0x96, 0x96, 0x9F, 0x96, 0x99, 0xA3, 0x97, 0x9E, 0xA6, 0x9C, 0xA4, 0xAA, 0xA1, 0xA5, 0xAC, 
   0xA4, 0xA4, 0xAE, 0xA9, 0xA2, 0xAE, 0xAC, 0xA3, 0xA7, 0xB4, 0xB0, 0xB3, 0xAB, 0xA7, 0xAE, 0x9F, 
   0x99, 0xA4, 0x90, 0x89, 0x96, 0x76, 0x71, 0x7D, 0x5E, 0x56, 0x6B, 0x4D, 0x49, 0x61, 0x4F, 0x50, 
   0x69, 0x52, 0x59, 0x70, 0x4A, 0x4E, 0x68, 0x49, 0x4C, 0x65, 0x45, 0x48, 0x62, 0x54, 0x55, 0x6C, 
   0x70, 0x70, 0x82, 0x74, 0x73, 0x84, 0x5E, 0x5F, 0x73, 0x51, 0x57, 0x69, 0x66, 0x6D, 0x76, 0x6A, 
   0x70, 0x6E, 0x7B, 0x7D, 0x80, 0x7E, 0x83, 0x88, 0x7C, 0x83, 0x8A, 0x86, 0x91, 0x99, 0x9B, 0xA3, 
   0xAC, 0x9D, 0x9F, 0xAA, 0x98, 0x9D, 0xA7, 0x90, 0x97, 0x9D, 0x94, 0x94, 0x99, 0x8D, 0x8E, 0x97, 
   0x72, 0x75, 0x7D, 0x7C, 0x88, 0x89, 0x85, 0x94, 0x8E, 0xA5, 0xA9, 0xA1, 0xB3, 0xB1, 0xAF, 0xA0, 
   0x9A, 0x9E, 0x89, 0x8E, 0x91, 0x94, 0x95, 0x96, 0x43, 0x3A, 0x3D, 0x4D, 0x56, 0x49, 0x84, 0x8A, 
   0x7E, 0x94, 0x93, 0x8A, 0x96, 0x93, 0x91, 0x93, 0x8D, 0x8F, 0x91, 0x8C, 0x8C, 0x93, 0x8F, 0x8E, 
   0x97, 0x90, 0x8F, 0x96, 0x93, 0x8E, 0x99, 0x94, 0x8B, 0x98, 0x8C, 0x87, 0x97, 0x8D, 0x8A, 0x9D, 
   0x99, 0x94, 0x95, 0x92, 0x90, 0x8E, 0x86, 0x8C, 0x6D, 0x66, 0x6A, 0x42, 0x38, 0x3B, 0x3B, 0x33, 
   0x35, 0x5E, 0x59, 0x5D, 0x72, 0x70, 0x71, 0x85, 0x86, 0x85, 0xA0, 0xA4, 0xA9, 0xA1, 0x9B, 0xA2, 
   0x98, 0x94, 0x97, 0x9B, 0x94, 0x96, 0xA0, 0x97, 0x9B, 0x98, 0x94, 0x9A, 0x9E, 0x9C, 0xA2, 0x97, 
   0x92, 0x99, 0x98, 0x91, 0x97, 0x93, 0x8B, 0x8C, 0x90, 0x87, 0x88, 0x8B, 0x86, 0x87, 0x92, 0x90, 
   0x97, 0x9B, 0x97, 0xA5, 0x94, 0x8F, 0x9A, 0x90, 0x8B, 0x93, 0x90, 0x92, 0x97, 0x99, 0x9A, 0x9D, 
   0x94, 0x91, 0x94, 0x95, 0x93, 0x96, 0x89, 0x87, 0x8A, 0x7C, 0x7C, 0x7C, 0x77, 0x78, 0x75, 0x88, 
   0x87, 0x81, 0x9D, 0x9B, 0x98, 0x95, 0x89, 0x8E, 0x79, 0x68, 0x65, 0x75, 0x67, 0x5F, 0x6C, 0x64, 
   0x5E, 0x6F, 0x64, 0x5D, 0x6F, 0x60, 0x59, 0x7B, 0x70, 0x6A, 0x7A, 0x72, 0x72, 0x5E, 0x59, 0x5A, 
   0x68, 0x6B, 0x64, 0x86, 0x86, 0x7B, 0xA4, 0xB0, 0xC3, 0xA0, 0xA4, 0xB3, 0x9E, 0x9F, 0xA7, 0xB2, 
   0xAB, 0xB2, 0xB0, 0xAA, 0xAE, 0x82, 0x7F, 0x80, 0x5A, 0x5B, 0x5E, 0x57, 0x60, 0x6C, 0x58, 0x66, 
   0x73, 0x7A, 0x84, 0x8C, 0x91, 0x9C, 0xA3, 0x9D, 0xAE, 0xB7, 0xA0, 0xB1, 0xBA, 0xA5, 0xB2, 0xB8, 
   0xA8, 0xB0, 0xB6, 0x94, 0x98, 0xA0, 0x7E, 0x80, 0x86, 0x7B, 0x7C, 0x82, 0x77, 0x76, 0x7B, 0x78, 
   0x76, 0x7A, 0x7E, 0x7D, 0x7E, 0x83, 0x82, 0x81, 0x86, 0x8A, 0x85, 0x76, 0x6F, 0x6E, 0x68, 0x5F, 
   0x60, 0x6A, 0x61, 0x64, 0x63, 0x61, 0x63, 0x66, 0x67, 0x64, 0x6D, 0x6D, 0x68, 0x7B, 0x7D, 0x7B, 
   0x86, 0x82, 0x82, 0x87, 0x84, 0x84, 0x72, 0x6D, 0x6F, 0x6F, 0x68, 0x6B, 0x77, 0x76, 0x79, 0x6A, 
   0x68, 0x6C, 0x6F, 0x6F, 0x73, 0x7B, 0x7D, 0x7E, 0x83, 0x7E, 0x80, 0x55, 0x4D, 0x4F, 0x0F, 0x13, 
   0x11, 0x34, 0x3F, 0x3D, 0x8A, 0x95, 0x94, 0x92, 0x98, 0x96, 0x6B, 0x6E, 0x6C, 0x5A, 0x5D, 0x5C, 
   0x2C, 0x2F, 0x32, 0x4D, 0x50, 0x57, 0x63, 0x66, 0x6F, 0x63, 0x66, 0x72, 0x6A, 0x6A, 0x74, 0x72, 
   0x6C, 0x76, 0x73, 0x6C, 0x74, 0x6F, 0x6B, 0x72, 0x73, 0x6F, 0x77, 0x7E, 0x78, 0x83, 0x7E, 0x79, 
   0x83, 0x7A, 0x7B, 0x82, 0x7F, 0x80, 0x87, 0x80, 0x7C, 0x84, 0x7A, 0x73, 0x7C, 0x69, 0x62, 0x6D, 
   0x65, 0x62, 0x6E, 0x70, 0x72, 0x7D, 0x6C, 0x69, 0x69, 0x7C, 0x77, 0x73, 0x58, 0x5A, 0x61, 0x3F, 
   0x47, 0x57, 0x3B, 0x46, 0x53, 0x51, 0x5C, 0x68, 0x7C, 0x90, 0x9D, 0x9F, 0xAD, 0xB3, 0xAE, 0xB4, 
   0xB6, 0x8E, 0x9B, 0xA3, 0x94, 0xA0, 0xA9, 0x7E, 0x7F, 0x81, 0x66, 0x64, 0x65, 0x54, 0x55, 0x53, 
   0x74, 0x76, 0x77, 0x75, 0x7B, 0x7C, 0x81, 0x86, 0x88, 0x6E, 0x77, 0x7A, 0x65, 0x6D, 0x71, 0x4F, 
   0x51, 0x56, 0x32, 0x30, 0x33, 0x24, 0x27, 0x28, 0x3C, 0x49, 0x48, 0x57, 0x6C, 0x68, 0x6F, 0x83, 
   0x7E, 0x81, 0x91, 0x8F, 0x6E, 0x7D, 0x7F, 0x52, 0x63, 0x66, 0x65, 0x75, 0x77, 0x80, 0x8D, 0x8B, 
   0x79, 0x8A, 0x88, 0x73, 0x88, 0x87, 0x8C, 0x9E, 0x9C, 0xA6, 0xB5, 0xB1, 0x94, 0x9F, 0xA7, 0x73, 
   0x82, 0x90, 0x75, 0x88, 0x99, 0x7B, 0x91, 0xA3, 0x7D, 0x90, 0xA0, 0x76, 0x84, 0x92, 0x70, 0x81, 
   0x93, 0x6B, 0x80, 0x92, 0x67, 0x7E, 0x8E, 0x66, 0x76, 0x8A, 0x5C, 0x66, 0x77, 0x5D, 0x68, 0x71, 
   0x6B, 0x75, 0x76, 0x8C, 0x8D, 0x93, 0x93, 0x94, 0x93, 0xA4, 0xA4, 0xA3, 0x9F, 0x9A, 0x9A, 0x91, 
   0x8A, 0x8A, 0x84, 0x82, 0x82, 0x80, 0x83, 0x82, 0x88, 0x87, 0x88, 0x8D, 0x88, 0x8A, 0x8D, 0x8B, 
   0x8A, 0x99, 0x97, 0x9A, 0x9D, 0x9A, 0x9C, 0x9D, 0x9A, 0x9A, 0x9D, 0x9D, 0x9E, 0xA1, 0xA0, 0xA4, 
   0x9F, 0x9A, 0x9E, 0xA0, 0x98, 0x95, 0xA0, 0x9A, 0x92, 0x9A, 0x97, 0x93, 0x97, 0x96, 0x94, 0x9A, 
   0x96, 0x97, 0x97, 0x95, 0x98, 0x97, 0x95, 0x96, 0x9E, 0x97, 0x94, 0x9B, 0x97, 0x94, 0x9A, 0x9A, 
   0x99, 0x9D, 0x9E, 0x9D, 0xAB, 0xAA, 0xA9, 0xB8, 0xB2, 0xB3, 0x9A, 0x96, 0x94, 0x9C, 0x9B, 0x9A, 
   0x9B, 0x9C, 0x9E, 0x9A, 0x9C, 0x9C, 0x9A, 0x9B, 0x96, 0xA3, 0xA1, 0x9B, 0xAB, 0xA3, 0x9D, 0xAD, 
   0xA2, 0xA1, 0xA8, 0x9D, 0xA0, 0x9A, 0x95, 0x97, 0x91, 0x8E, 0x95, 0x92, 0x94, 0x98, 0x8F, 0x97, 
   0x9F, 0x91, 0x96, 0xA5, 0x91, 0x95, 0xA5, 0x86, 0x8E, 0x9B, 0x96, 0xA4, 0xA9, 0xAC, 0xB3, 0xBA, 
   0xA8, 0xA9, 0xB4, 0xA5, 0xA2, 0xAC, 0xA9, 0xA1, 0xA9, 0xAF, 0xA6, 0xAD, 0xAE, 0xA8, 0xB0, 0xC3, 
   0xBC, 0xC4, 0xBA, 0xB2, 0xB8, 0xA6, 0xA4, 0xAA, 0x90, 0x8D, 0x97, 0x72, 0x71, 0x7C, 0x60, 0x63, 
   0x70, 0x64, 0x69, 0x79, 0x4C, 0x50, 0x64, 0x48, 0x4A, 0x62, 0x4A, 0x4B, 0x65, 0x4D, 0x52, 0x69, 
   0x65, 0x69, 0x7B, 0x6B, 0x6F, 0x7A, 0x83, 0x8A, 0x93, 0x90, 0x9B, 0xA5, 0xAF, 0xB8, 0xC2, 0x9E, 
   0xA2, 0xA9, 0x75, 0x7A, 0x81, 0x72, 0x7E, 0x7F, 0x7E, 0x8C, 0x8F, 0x8E, 0x9E, 0xAA, 0x9F, 0xAA, 
   0xBC, 0x95, 0xA3, 0xB4, 0x89, 0x9C, 0xAA, 0x8B, 0x99, 0x9F, 0x88, 0x90, 0x94, 0x71, 0x79, 0x7F, 
   0x63, 0x6B, 0x71, 0x72, 0x7A, 0x7D, 0x89, 0x93, 0x8E, 0xAE, 0xB3, 0xAE, 0xA9, 0xA9, 0xAA, 0x95, 
   0x95, 0x97, 0x97, 0x9D, 0x9F, 0xA4, 0x9A, 0x9D, 0x38, 0x2E, 0x2F, 0x57, 0x5F, 0x59, 0x87, 0x8D, 
   0x85, 0x99, 0x96, 0x93, 0x99, 0x93, 0x97, 0x93, 0x8D, 0x95, 0x8D, 0x8B, 0x8B, 0x8D, 0x8C, 0x86, 
   0x94, 0x8F, 0x8A, 0x98, 0x91, 0x8F, 0x96, 0x8F, 0x8A, 0x95, 0x8D, 0x88, 0x9A, 0x91, 0x8E, 0xA2, 
   0x9B, 0x98, 0x9D, 0x99, 0x96, 0x95, 0x91, 0x92, 0x9A, 0x97, 0x99, 0x7F, 0x75, 0x75, 0x38, 0x2F, 
   0x32, 0x32, 0x2D, 0x2C, 0x4C, 0x49, 0x44, 0x5A, 0x5F, 0x5B, 0x6A, 0x6F, 0x71, 0x88, 0x82, 0x86, 
   0x98, 0x97, 0x9D, 0x9F, 0x9A, 0xA1, 0x9E, 0x94, 0x9C, 0x9C, 0x93, 0x9D, 0xA0, 0x98, 0xA2, 0x9A, 
   0x93, 0x9B, 0x94, 0x90, 0x93, 0x8F, 0x88, 0x8A, 0x92, 0x88, 0x8B, 0x96, 0x91, 0x93, 0x9C, 0x99, 
   0x9D, 0x93, 0x8F, 0x97, 0x89, 0x85, 0x8C, 0x81, 0x7D, 0x80, 0x8B, 0x87, 0x87, 0x96, 0x90, 0x91, 
   0x87, 0x84, 0x85, 0x90, 0x90, 0x92, 0x91, 0x91, 0x92, 0x8D, 0x8D, 0x8C, 0x81, 0x85, 0x80, 0x7F, 
   0x80, 0x7F, 0x8B, 0x89, 0x86, 0x8F, 0x85, 0x84, 0x75, 0x60, 0x62, 0x6B, 0x5B, 0x56, 0x59, 0x53, 
   0x45, 0x6A, 0x63, 0x57, 0x77, 0x64, 0x5D, 0x75, 0x6A, 0x65, 0x61, 0x59, 0x5A, 0x64, 0x66, 0x62, 
   0x7D, 0x83, 0x77, 0x91, 0x90, 0x84, 0x86, 0x93, 0xA8, 0x95, 0x9B, 0xAB, 0x97, 0x9C, 0xA6, 0xA1, 
   0xA1, 0xA7, 0xB0, 0xAC, 0xAC, 0xA5, 0xA3, 0xA1, 0x76, 0x7A, 0x7C, 0x52, 0x5E, 0x6A, 0x59, 0x68, 
   0x74, 0x82, 0x8C, 0x95, 0x95, 0x9E, 0xA8, 0x9E, 0xAB, 0xB6, 0xA7, 0xB5, 0xC0, 0xAF, 0xBB, 0xC6, 
   0xB0, 0xBA, 0xC3, 0x9D, 0xA4, 0xAC, 0x84, 0x88, 0x8E, 0x7D, 0x80, 0x87, 0x74, 0x74, 0x7C, 0x78, 
   0x7B, 0x7E, 0x81, 0x83, 0x81, 0x8C, 0x8B, 0x89, 0x8A, 0x8A, 0x89, 0x78, 0x71, 0x75, 0x67, 0x66, 
   0x68, 0x62, 0x5F, 0x64, 0x5D, 0x59, 0x5E, 0x61, 0x5E, 0x60, 0x68, 0x63, 0x63, 0x76, 0x70, 0x74, 
   0x7A, 0x75, 0x74, 0x77, 0x74, 0x73, 0x63, 0x61, 0x62, 0x6A, 0x68, 0x6A, 0x76, 0x75, 0x78, 0x6F, 
   0x6B, 0x6F, 0x70, 0x6C, 0x72, 0x77, 0x76, 0x79, 0x85, 0x7D, 0x80, 0x4E, 0x45, 0x48, 0x17, 0x19, 
   0x1A, 0x16, 0x1C, 0x1D, 0x71, 0x7A, 0x7A, 0xA0, 0xA4, 0xA2, 0x79, 0x7A, 0x76, 0x4F, 0x51, 0x51, 
   0x40, 0x44, 0x47, 0x6D, 0x72, 0x77, 0x6D, 0x6F, 0x77, 0x6D, 0x6D, 0x77, 0x6D, 0x6A, 0x75, 0x70, 
   0x6C, 0x73, 0x72, 0x6C, 0x70, 0x73, 0x6F, 0x74, 0x7B, 0x78, 0x80, 0x7D, 0x7B, 0x84, 0x7A, 0x79, 
   0x82, 0x7C, 0x7D, 0x83, 0x7F, 0x83, 0x88, 0x82, 0x83, 0x89, 0x7E, 0x7B, 0x84, 0x72, 0x6F, 0x77, 
   0x5F, 0x5F, 0x65, 0x6B, 0x70, 0x76, 0x77, 0x72, 0x70, 0x7E, 0x7A, 0x6D, 0x5F, 0x60, 0x61, 0x3B, 
   0x46, 0x56, 0x44, 0x55, 0x68, 0x4E, 0x62, 0x78, 0x7C, 0x95, 0xA5, 0xA6, 0xB1, 0xB5, 0xA1, 0xAA, 
   0xB2, 0x8E, 0xA2, 0xB6, 0x95, 0xA8, 0xBA, 0xA1, 0xAA, 0xB0, 0x73, 0x79, 0x78, 0x50, 0x58, 0x53, 
   0x52, 0x5B, 0x5B, 0x72, 0x7C, 0x78, 0x81, 0x85, 0x83, 0x70, 0x76, 0x78, 0x55, 0x59, 0x5F, 0x3E, 
   0x3D, 0x43, 0x2F, 0x2E, 0x32, 0x2C, 0x31, 0x31, 0x42, 0x4D, 0x4D, 0x69, 0x79, 0x78, 0x7A, 0x8A, 
   0x88, 0x84, 0x94, 0x94, 0x70, 0x81, 0x83, 0x6E, 0x82, 0x83, 0x6C, 0x80, 0x7F, 0x6F, 0x7C, 0x7D, 
   0x76, 0x84, 0x88, 0x81, 0x92, 0x94, 0x9F, 0xAB, 0xAC, 0xAB, 0xB3, 0xB3, 0x89, 0x94, 0x99, 0x76, 
   0x85, 0x91, 0x73, 0x86, 0x97, 0x7A, 0x8F, 0xA2, 0x7A, 0x8F, 0xA1, 0x70, 0x82, 0x92, 0x68, 0x7D, 
   0x8D, 0x6E, 0x7D, 0x91, 0x65, 0x77, 0x86, 0x60, 0x6E, 0x7D, 0x5B, 0x68, 0x74, 0x62, 0x73, 0x7E, 
   0x79, 0x87, 0x8E, 0x96, 0x9B, 0xA2, 0x89, 0x89, 0x8B, 0x9B, 0x99, 0x9A, 0xA5, 0x9F, 0x9F, 0x95, 
   0x8E, 0x8D, 0x81, 0x80, 0x7F, 0x7F, 0x82, 0x83, 0x87, 0x87, 0x87, 0x8F, 0x8C, 0x8A, 0xA1, 0xA0, 
   0x9D, 0xA3, 0xA2, 0xA1, 0x95, 0x92, 0x92, 0x96, 0x94, 0x92, 0x9C, 0x9C, 0x9A, 0x9E, 0x9C, 0x9D, 
   0xA0, 0x9C, 0x9C, 0x9E, 0x9A, 0x97, 0x9D, 0x9A, 0x97, 0x9A, 0x98, 0x97, 0x9D, 0x9A, 0x9A, 0x9E, 
   0x98, 0x9A, 0x98, 0x97, 0x96, 0x96, 0x94, 0x92, 0x9A, 0x97, 0x95, 0x93, 0x91, 0x92, 0x96, 0x98, 
   0x9A, 0x9C, 0x9E, 0x9E, 0x9F, 0x9E, 0x9D, 0x9F, 0x9A, 0x99, 0x9F, 0x9C, 0x9A, 0xA2, 0xA0, 0xA0, 
   0x9F, 0x9E, 0xA1, 0x9B, 0x9B, 0x9C, 0x98, 0x97, 0x96, 0x9D, 0x9B, 0x9A, 0x9F, 0x9E, 0x9C, 0x9C, 
   0x9E, 0x9C, 0x95, 0x93, 0x99, 0x83, 0x89, 0x92, 0x77, 0x86, 0x91, 0x9F, 0xAD, 0xB3, 0x9C, 0xA4, 
   0xAE, 0x8C, 0x96, 0xA4, 0x91, 0x9D, 0xAA, 0x9F, 0xAC, 0xB7, 0xAE, 0xBF, 0xC5, 0xA9, 0xB7, 0xBF, 
   0xA3, 0xAA, 0xB6, 0x97, 0x97, 0xA5, 0x9D, 0x98, 0xA7, 0xA5, 0xA0, 0xAE, 0xA8, 0xA6, 0xB2, 0xA8, 
   0xA4, 0xAE, 0xA5, 0xA2, 0xA8, 0xAC, 0xAC, 0xB2, 0xAD, 0xAE, 0xB5, 0xB1, 0xAE, 0xB6, 0xA3, 0xA1, 
   0xAD, 0x92, 0x93, 0xA1, 0x92, 0x99, 0xA8, 0x92, 0x9D, 0xAD, 0x8F, 0x9C, 0xAC, 0x93, 0x9A, 0xAA, 
   0x89, 0x93, 0x9E, 0x89, 0x97, 0x9E, 0x9E, 0xB0, 0xB6, 0xA5, 0xB7, 0xBF, 0x9D, 0xAB, 0xB5, 0xA2, 
   0xAC, 0xB6, 0x9D, 0xA9, 0xB7, 0x9B, 0xA8, 0xB2, 0xA5, 0xB4, 0xC0, 0xA2, 0xB5, 0xC6, 0x9A, 0xAB, 
   0xBD, 0x92, 0xA4, 0xB6, 0x8F, 0xA0, 0xB2, 0x8B, 0x98, 0xA5, 0x6D, 0x77, 0x7E, 0x5E, 0x6C, 0x6F, 
   0x67, 0x74, 0x77, 0x6D, 0x7A, 0x7A, 0x7F, 0x8A, 0x88, 0x92, 0x99, 0x99, 0x98, 0x9C, 0x9A, 0x99, 
   0x97, 0x97, 0xA5, 0x9E, 0xA1, 0x6C, 0x61, 0x65, 0x33, 0x33, 0x34, 0x5D, 0x66, 0x64, 0x7A, 0x7F, 
   0x7B, 0x8A, 0x8A, 0x85, 0x91, 0x8F, 0x8D, 0x91, 0x8F, 0x90, 0x8D, 0x8B, 0x8B, 0x8D, 0x8B, 0x86, 
   0x93, 0x8C, 0x88, 0x96, 0x8E, 0x8C, 0x95, 0x8F, 0x8B, 0x94, 0x8F, 0x8A, 0x96, 0x93, 0x8E, 0x99, 
   0x95, 0x91, 0x99, 0x95, 0x92, 0x95, 0x90, 0x91, 0x8F, 0x8F, 0x8E, 0xA5, 0xA1, 0xA0, 0x84, 0x7F, 
   0x81, 0x5B, 0x58, 0x57, 0x59, 0x54, 0x52, 0x62, 0x5F, 0x5C, 0x69, 0x67, 0x68, 0x7C, 0x74, 0x79, 
   0x7B, 0x7A, 0x80, 0x8D, 0x8C, 0x92, 0x9B, 0x9A, 0x9E, 0x96, 0x97, 0x9E, 0x94, 0x90, 0x99, 0x98, 
   0x94, 0x98, 0xA2, 0x9B, 0x9C, 0xA9, 0xA2, 0xA7, 0xA3, 0x9B, 0xA0, 0x99, 0x96, 0x9A, 0x98, 0x9A, 
   0x9A, 0x83, 0x85, 0x87, 0xA2, 0xA3, 0xA6, 0xAD, 0xA9, 0xAA, 0xA8, 0xA1, 0xA1, 0xA6, 0x9C, 0x9D, 
   0x95, 0x8F, 0x92, 0x99, 0x96, 0x98, 0x9F, 0x9B, 0x9D, 0x94, 0x90, 0x90, 0x8C, 0x8D, 0x8A, 0x84, 
   0x88, 0x86, 0x8C, 0x8E, 0x8D, 0x94, 0x90, 0x92, 0x69, 0x57, 0x5D, 0x6C, 0x5B, 0x52, 0x93, 0x8D, 
   0x74, 0xDE, 0xCF, 0xBE, 0xBB, 0x9D, 0x97, 0x79, 0x6E, 0x6A, 0x7F, 0x7A, 0x7D, 0x90, 0x91, 0x8E, 
   0xA2, 0xA0, 0x97, 0xB5, 0xB1, 0xAB, 0x89, 0x9B, 0xAE, 0x8B, 0x9A, 0xA8, 0x8E, 0x98, 0xA2, 0x9D, 
   0x9F, 0xA2, 0xA7, 0xA3, 0x9E, 0xAC, 0xA8, 0xA2, 0x8A, 0x8E, 0x8E, 0x58, 0x65, 0x6E, 0x69, 0x77, 
   0x7F, 0x8D, 0x97, 0x9F, 0x99, 0xA3, 0xAC, 0xA1, 0xAB, 0xB4, 0xAA, 0xB6, 0xC0, 0xAB, 0xB8, 0xC3, 
   0xAC, 0xB9, 0xC3, 0xAA, 0xB4, 0xBD, 0x93, 0x99, 0x9F, 0x73, 0x77, 0x80, 0x72, 0x73, 0x7C, 0x7F, 
   0x84, 0x87, 0x82, 0x86, 0x83, 0x8A, 0x88, 0x86, 0x94, 0x91, 0x92, 0x83, 0x7D, 0x7E, 0x72, 0x77, 
   0x76, 0x78, 0x79, 0x7C, 0x6E, 0x6B, 0x6F, 0x5E, 0x5C, 0x5D, 0x68, 0x64, 0x67, 0x74, 0x6F, 0x74, 
   0x78, 0x70, 0x6F, 0x6F, 0x6B, 0x6B, 0x64, 0x65, 0x66, 0x66, 0x6B, 0x6C, 0x77, 0x75, 0x78, 0x71, 
   0x6C, 0x71, 0x71, 0x6B, 0x72, 0x77, 0x74, 0x77, 0x7D, 0x74, 0x76, 0x3C, 0x36, 0x38, 0x15, 0x19, 
   0x1C, 0x14, 0x15, 0x1C, 0x50, 0x56, 0x58, 0x96, 0x9C, 0x97, 0x81, 0x80, 0x7C, 0x53, 0x54, 0x57, 
   0x5C, 0x5E, 0x64, 0x78, 0x7B, 0x80, 0x7A, 0x7C, 0x81, 0x7A, 0x77, 0x7F, 0x71, 0x6D, 0x75, 0x74, 
   0x72, 0x78, 0x77, 0x75, 0x77, 0x7F, 0x7C, 0x80, 0x83, 0x84, 0x8A, 0x7F, 0x84, 0x8B, 0x7D, 0x81, 
   0x88, 0x83, 0x86, 0x8B, 0x83, 0x87, 0x8D, 0x84, 0x88, 0x91, 0x87, 0x8A, 0x94, 0x8A, 0x8B, 0x95, 
   0x6D, 0x6F, 0x78, 0x62, 0x66, 0x6D, 0x6F, 0x6E, 0x6F, 0x70, 0x6E, 0x62, 0x68, 0x66, 0x68, 0x3E, 
   0x48, 0x55, 0x47, 0x5D, 0x6D, 0x5C, 0x74, 0x8B, 0x83, 0x9D, 0xAE, 0xAD, 0xB8, 0xBF, 0x96, 0xA3, 
   0xB5, 0x84, 0x9B, 0xB7, 0x7F, 0x96, 0xAD, 0x8A, 0x98, 0xA6, 0x85, 0x90, 0x92, 0x64, 0x6C, 0x68, 
   0x43, 0x4B, 0x4B, 0x5B, 0x60, 0x5C, 0x7B, 0x7B, 0x78, 0x5D, 0x5E, 0x61, 0x31, 0x35, 0x3C, 0x32, 
   0x35, 0x3C, 0x31, 0x34, 0x36, 0x35, 0x39, 0x37, 0x62, 0x6A, 0x64, 0x80, 0x8B, 0x86, 0x7E, 0x8A, 
   0x88, 0x72, 0x80, 0x80, 0x6D, 0x7D, 0x7C, 0x6F, 0x81, 0x82, 0x6D, 0x80, 0x80, 0x6F, 0x7B, 0x7C, 
   0x82, 0x8C, 0x91, 0x88, 0x95, 0x97, 0xA7, 0xB0, 0xB2, 0xA9, 0xAE, 0xB5, 0x78, 0x82, 0x8B, 0x77, 
   0x89, 0x9A, 0x72, 0x85, 0x98, 0x7A, 0x8E, 0xA2, 0x75, 0x8C, 0x9F, 0x70, 0x87, 0x97, 0x72, 0x8A, 
   0x97, 0x71, 0x83, 0x95, 0x64, 0x76, 0x84, 0x56, 0x65, 0x73, 0x4F, 0x60, 0x6D, 0x57, 0x6A, 0x7A, 
   0x73, 0x80, 0x8A, 0xA8, 0xAC, 0xB1, 0x9A, 0x99, 0x9C, 0x93, 0x91, 0x92, 0x94, 0x90, 0x8F, 0x87, 
   0x84, 0x82, 0x7B, 0x7B, 0x7A, 0x89, 0x8C, 0x8D, 0x87, 0x89, 0x8A, 0x94, 0x94, 0x91, 0xA6, 0xA7, 
   0xA2, 0x9E, 0x9D, 0x9B, 0x97, 0x95, 0x93, 0x9A, 0x97, 0x93, 0x9F, 0x9E, 0x9B, 0x9C, 0x99, 0x96, 
   0x97, 0x95, 0x92, 0x9A, 0x99, 0x98, 0x9A, 0x99, 0x9C, 0x99, 0x97, 0x99, 0x9E, 0x9C, 0x9D, 0xA0, 
   0x9D, 0x9E, 0x9C, 0x9A, 0x97, 0x9B, 0x9A, 0x96, 0x9A, 0x99, 0x9A, 0x93, 0x95, 0x9A, 0x93, 0x99, 
   0x9F, 0x95, 0x99, 0x9D, 0x9F, 0x9E, 0x9D, 0xA1, 0xA1, 0x9F, 0x9F, 0x9E, 0x9E, 0xA0, 0xA1, 0xA2, 
   0x9F, 0xA0, 0xA3, 0x9B, 0x9D, 0x9F, 0x9E, 0xA0, 0xA1, 0x9B, 0x9A, 0x9E, 0x97, 0x8E, 0x93, 0x7B, 
   0x7C, 0x7C, 0x6A, 0x6C, 0x74, 0x5A, 0x64, 0x76, 0x4B, 0x65, 0x74, 0x88, 0x9D, 0xA6, 0x9C, 0xA4, 
   0xB1, 0x93, 0xA1, 0xAD, 0x9E, 0xB0, 0xB9, 0xAB, 0xBB, 0xC5, 0xAD, 0xBF, 0xC5, 0xA4, 0xB9, 0xBD, 
   0xA2, 0xB0, 0xBA, 0x9F, 0xA5, 0xB3, 0x99, 0x9D, 0xAD, 0x9B, 0xA2, 0xB0, 0x99, 0xA2, 0xB0, 0x9B, 
   0xA1, 0xAD, 0xA0, 0xA6, 0xAD, 0xA2, 0xA8, 0xAF, 0xAA, 0xB4, 0xB9, 0xAD, 0xB7, 0xBD, 0xAF, 0xB8, 
   0xC2, 0xA9, 0xB6, 0xC3, 0xA3, 0xB9, 0xC5, 0xAC, 0xC4, 0xCE, 0xAB, 0xC2, 0xCA, 0xA1, 0xB1, 0xBA, 
   0xA2, 0xB4, 0xBA, 0xA3, 0xB8, 0xBC, 0xB1, 0xC3, 0xCA, 0xAD, 0xBB, 0xC5, 0xA3, 0xB3, 0xBD, 0xA2, 
   0xB6, 0xBF, 0xA5, 0xB7, 0xC3, 0xA4, 0xB5, 0xBF, 0x97, 0xA7, 0xB2, 0x8E, 0xA6, 0xB1, 0x8E, 0xA8, 
   0xB0, 0x8A, 0xA2, 0xAA, 0x8F, 0xA3, 0xAD, 0x7B, 0x89, 0x99, 0x53, 0x5E, 0x66, 0x55, 0x63, 0x65, 
   0x60, 0x6E, 0x6F, 0x6D, 0x7A, 0x79, 0x74, 0x7F, 0x7F, 0x74, 0x7F, 0x7E, 0x92, 0x97, 0x95, 0xA5, 
   0x9F, 0xA1, 0x76, 0x68, 0x6C, 0x32, 0x2B, 0x2D, 0x38, 0x41, 0x40, 0x60, 0x6A, 0x68, 0x75, 0x78, 
   0x75, 0x84, 0x82, 0x7C, 0x8B, 0x89, 0x82, 0x91, 0x90, 0x8B, 0x8E, 0x8D, 0x8A, 0x8E, 0x8D, 0x88, 
   0x91, 0x8D, 0x8A, 0x92, 0x8B, 0x88, 0x94, 0x8E, 0x8A, 0x94, 0x90, 0x8C, 0x94, 0x94, 0x8E, 0x93, 
   0x92, 0x8E, 0x92, 0x8F, 0x8E, 0x96, 0x91, 0x91, 0x92, 0x90, 0x8C, 0x96, 0x95, 0x94, 0x9A, 0x97, 
   0x97, 0x8E, 0x8C, 0x8C, 0x78, 0x71, 0x74, 0x54, 0x4A, 0x48, 0x46, 0x41, 0x42, 0x5A, 0x54, 0x56, 
   0x64, 0x64, 0x63, 0x70, 0x72, 0x75, 0x7E, 0x86, 0x87, 0xA3, 0xAB, 0xB0, 0xA9, 0xA7, 0xB2, 0x9A, 
   0x96, 0x9E, 0x9A, 0x98, 0xA1, 0x99, 0x9A, 0xA3, 0x93, 0x92, 0x9A, 0x90, 0x90, 0x93, 0x97, 0x95, 
   0x93, 0x99, 0x95, 0x90, 0xA0, 0x9F, 0x9D, 0xB2, 0xB0, 0xB1, 0xC0, 0xBC, 0xBD, 0xB3, 0xAD, 0xAD, 
   0x9C, 0x97, 0x99, 0x8A, 0x85, 0x86, 0x88, 0x82, 0x82, 0x8F, 0x8A, 0x8A, 0x8B, 0x8C, 0x89, 0x99, 
   0x9B, 0x9A, 0x9F, 0xA2, 0xA1, 0x95, 0x94, 0x99, 0x73, 0x63, 0x6C, 0x67, 0x58, 0x4C, 0xA5, 0x9F, 
   0x87, 0xCE, 0xC0, 0xB2, 0x87, 0x73, 0x70, 0x71, 0x71, 0x6E, 0x88, 0x8D, 0x8B, 0x96, 0x9A, 0x97, 
   0x9E, 0x9F, 0x99, 0xA2, 0x9C, 0x9A, 0x93, 0xA5, 0xB3, 0x91, 0x9E, 0xAA, 0x98, 0x9C, 0xA4, 0x97, 
   0x97, 0x96, 0x9C, 0x97, 0x92, 0xA0, 0x9B, 0x98, 0x86, 0x89, 0x89, 0x64, 0x6F, 0x74, 0x74, 0x83, 
   0x88, 0x8F, 0x9E, 0xA4, 0x9E, 0xAB, 0xB1, 0xA3, 0xAF, 0xB5, 0xA7, 0xB2, 0xBA, 0xA7, 0xB4, 0xBE, 
   0xA1, 0xAE, 0xB9, 0xA3, 0xAE, 0xB7, 0xA3, 0xAC, 0xB6, 0x77, 0x7C, 0x86, 0x73, 0x73, 0x7A, 0x7B, 
   0x7C, 0x80, 0x82, 0x82, 0x83, 0x91, 0x8C, 0x8E, 0x93, 0x90, 0x92, 0x8E, 0x89, 0x88, 0x7E, 0x7D, 
   0x7E, 0x80, 0x7E, 0x82, 0x82, 0x82, 0x88, 0x78, 0x7B, 0x7F, 0x7A, 0x7A, 0x7D, 0x7A, 0x7B, 0x7E, 
   0x7C, 0x77, 0x76, 0x71, 0x6E, 0x6E, 0x6F, 0x70, 0x70, 0x6A, 0x70, 0x71, 0x75, 0x72, 0x76, 0x71, 
   0x6F, 0x73, 0x71, 0x6D, 0x73, 0x74, 0x72, 0x76, 0x76, 0x70, 0x72, 0x32, 0x32, 0x35, 0x16, 0x1D, 
   0x24, 0x17, 0x19, 0x22, 0x37, 0x3E, 0x41, 0x88, 0x90, 0x8C, 0x80, 0x81, 0x7E, 0x5F, 0x5E, 0x64, 
   0x71, 0x6F, 0x78, 0x72, 0x72, 0x77, 0x78, 0x79, 0x7C, 0x7D, 0x7C, 0x82, 0x74, 0x74, 0x7B, 0x78, 
   0x7B, 0x7E, 0x80, 0x81, 0x82, 0x84, 0x82, 0x84, 0x89, 0x8A, 0x90, 0x8A, 0x8F, 0x96, 0x88, 0x8B, 
   0x92, 0x8C, 0x8C, 0x8F, 0x8C, 0x8B, 0x90, 0x85, 0x85, 0x8D, 0x88, 0x87, 0x92, 0x8E, 0x8D, 0x98, 
   0x86, 0x84, 0x8F, 0x60, 0x5D, 0x66, 0x62, 0x66, 0x66, 0x6F, 0x6D, 0x65, 0x73, 0x6C, 0x70, 0x49, 
   0x4D, 0x59, 0x4B, 0x62, 0x71, 0x5E, 0x7B, 0x93, 0x7C, 0x97, 0xAC, 0x96, 0xA6, 0xB8, 0x87, 0x98, 
   0xB2, 0x7B, 0x94, 0xB4, 0x80, 0x9C, 0xB9, 0x9F, 0xB5, 0xCC, 0xBB, 0xC7, 0xD0, 0x99, 0x9D, 0x9B, 
   0x53, 0x5A, 0x58, 0x36, 0x3A, 0x38, 0x3D, 0x3C, 0x3A, 0x38, 0x38, 0x39, 0x33, 0x36, 0x39, 0x33, 
   0x33, 0x3A, 0x32, 0x33, 0x35, 0x3C, 0x3E, 0x3B, 0x6E, 0x74, 0x6D, 0x75, 0x80, 0x7A, 0x71, 0x7D, 
   0x7B, 0x72, 0x80, 0x80, 0x70, 0x7D, 0x7D, 0x6F, 0x7E, 0x7F, 0x71, 0x82, 0x82, 0x82, 0x8E, 0x8F, 
   0x9A, 0xA2, 0xA4, 0xA1, 0xAA, 0xAA, 0xB7, 0xBE, 0xC0, 0xAF, 0xB4, 0xBE, 0x87, 0x93, 0xA5, 0x7F, 
   0x94, 0xAB, 0x71, 0x86, 0x9A, 0x6E, 0x81, 0x95, 0x6B, 0x84, 0x97, 0x6D, 0x85, 0x96, 0x73, 0x88, 
   0x95, 0x6B, 0x80, 0x90, 0x60, 0x72, 0x80, 0x4F, 0x5F, 0x6D, 0x52, 0x67, 0x76, 0x5D, 0x73, 0x86, 
   0x6C, 0x7B, 0x84, 0xAC, 0xAF, 0xAF, 0xA7, 0xA4, 0xA7, 0x95, 0x93, 0x95, 0x89, 0x89, 0x88, 0x7B, 
   0x7C, 0x7B, 0x8E, 0x90, 0x90, 0x9E, 0x9F, 0xA1, 0x91, 0x93, 0x94, 0xA0, 0xA2, 0xA1, 0xB0, 0xB1, 
   0xB0, 0xA1, 0xA1, 0xA0, 0xA1, 0xA0, 0xA0, 0xA1, 0x9F, 0x9F, 0xA2, 0xA0, 0x9F, 0x9C, 0x99, 0x99, 
   0x93, 0x93, 0x92, 0x96, 0x97, 0x9A, 0x9E, 0x9C, 0xA2, 0xA0, 0x9E, 0x9E, 0x9F, 0x9E, 0x9E, 0x9E, 
   0x9F, 0x9F, 0xA5, 0xA3, 0xA0, 0xAC, 0xAA, 0xA9, 0x9D, 0x9D, 0x9F, 0x98, 0x9C, 0xA1, 0x9E, 0xA1, 
   0xA9, 0xA1, 0xA1, 0xA8, 0xA2, 0xA0, 0xA2, 0x97, 0x95, 0x97, 0x90, 0x8E, 0x91, 0x89, 0x86, 0x8C, 
   0x85, 0x83, 0x88, 0x89, 0x88, 0x89, 0x8B, 0x8B, 0x8C, 0x81, 0x7E, 0x85, 0x6A, 0x5F, 0x67, 0x4D, 
   0x4D, 0x4D, 0x4C, 0x51, 0x5B, 0x52, 0x5E, 0x75, 0x4E, 0x66, 0x79, 0x7D, 0x93, 0x9D, 0x93, 0xA0, 
   0xAC, 0x98, 0xA5, 0xB1, 0xA7, 0xB8, 0xBE, 0xAD, 0xBF, 0xC6, 0xAC, 0xBE, 0xC3, 0xA9, 0xBB, 0xBD, 
   0xA6, 0xB6, 0xBA, 0xA3, 0xB1, 0xB8, 0xA0, 0xAE, 0xB7, 0x9D, 0xB0, 0xB8, 0x9F, 0xB0, 0xB9, 0xAD, 
   0xBC, 0xC4, 0xC1, 0xCE, 0xD4, 0xB1, 0xBD, 0xC4, 0xAC, 0xBB, 0xC2, 0xAB, 0xBB, 0xC4, 0xAB, 0xBC, 
   0xC7, 0xA2, 0xB8, 0xC5, 0xA0, 0xBC, 0xC7, 0xAA, 0xC3, 0xCA, 0xB0, 0xC2, 0xC8, 0xAA, 0xBC, 0xC0, 
   0xA6, 0xBB, 0xC0, 0xA6, 0xBD, 0xC2, 0xAB, 0xBE, 0xC5, 0xAA, 0xB8, 0xC0, 0xA4, 0xB3, 0xBC, 0xA0, 
   0xB4, 0xBC, 0xA0, 0xB1, 0xBA, 0x94, 0xA6, 0xB1, 0x8A, 0x9D, 0xA8, 0x88, 0xA2, 0xA9, 0x90, 0xAC, 
   0xAF, 0x90, 0xA9, 0xAE, 0x89, 0x9B, 0xA4, 0x63, 0x6E, 0x7C, 0x4B, 0x54, 0x5A, 0x5F, 0x6C, 0x6D, 
   0x69, 0x77, 0x77, 0x6B, 0x77, 0x74, 0x71, 0x7C, 0x79, 0x7E, 0x8A, 0x89, 0x95, 0x97, 0x99, 0x6C, 
   0x64, 0x69, 0x35, 0x2C, 0x31, 0x26, 0x25, 0x24, 0x50, 0x58, 0x53, 0x71, 0x76, 0x73, 0x75, 0x77, 
   0x72, 0x7A, 0x7D, 0x73, 0x83, 0x84, 0x7A, 0x8E, 0x8D, 0x86, 0x8F, 0x8E, 0x87, 0x8F, 0x8E, 0x87, 
   0x91, 0x8A, 0x8A, 0x93, 0x8B, 0x8A, 0x99, 0x91, 0x90, 0x90, 0x8A, 0x87, 0x90, 0x8C, 0x86, 0x99, 
   0x94, 0x91, 0x95, 0x90, 0x90, 0x98, 0x93, 0x92, 0x90, 0x8C, 0x86, 0x93, 0x92, 0x91, 0x99, 0x96, 
   0x96, 0xA7, 0xA5, 0xA4, 0x97, 0x8E, 0x93, 0x53, 0x43, 0x44, 0x30, 0x2A, 0x2A, 0x32, 0x2F, 0x2E, 
   0x3C, 0x3D, 0x3A, 0x57, 0x58, 0x5A, 0x66, 0x6F, 0x6D, 0x97, 0x9D, 0x9F, 0xAF, 0xAA, 0xB4, 0x9D, 
   0x97, 0x9D, 0x9C, 0x95, 0x9D, 0x8C, 0x8C, 0x90, 0x86, 0x86, 0x88, 0x8A, 0x8A, 0x8A, 0x8E, 0x8C, 
   0x8B, 0x8E, 0x8C, 0x8B, 0x8F, 0x90, 0x91, 0x98, 0x99, 0x9B, 0xA3, 0xA3, 0xA5, 0xAB, 0xA8, 0xAA, 
   0xAA, 0xA7, 0xA7, 0x9D, 0x98, 0x98, 0x9B, 0x95, 0x95, 0x96, 0x91, 0x91, 0x8D, 0x8D, 0x8D, 0xA4, 
   0xA2, 0xA5, 0x9F, 0xA0, 0x9F, 0x9C, 0x9C, 0xA0, 0x83, 0x76, 0x7E, 0x61, 0x55, 0x4B, 0x95, 0x8D, 
   0x7D, 0x90, 0x88, 0x80, 0x71, 0x6C, 0x6A, 0x7C, 0x81, 0x7E, 0x84, 0x86, 0x84, 0x8B, 0x8C, 0x8C, 
   0x8E, 0x8E, 0x8D, 0x95, 0x8F, 0x8B, 0xA5, 0xB2, 0xBD, 0x9E, 0xA2, 0xAF, 0x9F, 0x9B, 0xA3, 0x96, 
   0x93, 0x92, 0x9A, 0x96, 0x96, 0xA7, 0xA4, 0xA8, 0x90, 0x96, 0x9A, 0x65, 0x70, 0x76, 0x79, 0x89, 
   0x8F, 0x91, 0xA2, 0xAA, 0x9F, 0xAD, 0xB5, 0xA2, 0xAD, 0xB6, 0xA0, 0xAC, 0xB5, 0xA1, 0xAE, 0xB9, 
   0x99, 0xA5, 0xB2, 0x99, 0xA3, 0xB0, 0xA0, 0xAC, 0xBC, 0x82, 0x8A, 0x95, 0x6F, 0x6F, 0x74, 0x74, 
   0x72, 0x76, 0x8B, 0x89, 0x8E, 0xB2, 0xAD, 0xB3, 0x94, 0x91, 0x93, 0x88, 0x87, 0x85, 0x84, 0x80, 
   0x83, 0x7D, 0x78, 0x7F, 0x7B, 0x7E, 0x83, 0x8B, 0x8F, 0x93, 0x93, 0x91, 0x96, 0x82, 0x85, 0x87, 
   0x7B, 0x7A, 0x78, 0x75, 0x73, 0x72, 0x70, 0x70, 0x71, 0x69, 0x6B, 0x6D, 0x70, 0x6D, 0x71, 0x6E, 
   0x6E, 0x71, 0x73, 0x72, 0x78, 0x73, 0x73, 0x79, 0x6C, 0x6B, 0x6F, 0x2C, 0x31, 0x37, 0x16, 0x20, 
   0x2C, 0x23, 0x28, 0x35, 0x29, 0x33, 0x3A, 0x45, 0x50, 0x4F, 0x54, 0x59, 0x59, 0x5B, 0x5A, 0x62, 
   0x6F, 0x6B, 0x74, 0x71, 0x6E, 0x74, 0x77, 0x76, 0x7A, 0x7B, 0x7C, 0x81, 0x7B, 0x7F, 0x85, 0x83, 
   0x87, 0x8C, 0x86, 0x87, 0x89, 0x86, 0x85, 0x88, 0x87, 0x88, 0x8F, 0x8E, 0x92, 0x99, 0x90, 0x90, 
   0x98, 0x8F, 0x8C, 0x92, 0x94, 0x91, 0x98, 0x8C, 0x8A, 0x92, 0x85, 0x85, 0x8D, 0x86, 0x86, 0x8E, 
   0x8A, 0x88, 0x90, 0x6A, 0x65, 0x6D, 0x71, 0x73, 0x77, 0x77, 0x74, 0x6E, 0x7A, 0x71, 0x72, 0x57, 
   0x57, 0x63, 0x52, 0x67, 0x7A, 0x63, 0x83, 0x9B, 0x70, 0x8D, 0xA5, 0x7F, 0x93, 0xAC, 0x7E, 0x92, 
   0xAD, 0x7C, 0x97, 0xB4, 0x84, 0xA6, 0xC3, 0x9B, 0xBA, 0xD3, 0xB7, 0xC7, 0xCF, 0xB1, 0xB5, 0xB1, 
   0x6A, 0x6F, 0x6C, 0x44, 0x47, 0x48, 0x37, 0x36, 0x38, 0x32, 0x34, 0x34, 0x2F, 0x31, 0x30, 0x34, 
   0x30, 0x35, 0x37, 0x35, 0x38, 0x3C, 0x42, 0x3E, 0x5C, 0x66, 0x60, 0x60, 0x6F, 0x6A, 0x6E, 0x7E, 
   0x7D, 0x7A, 0x8A, 0x8C, 0x73, 0x83, 0x86, 0x71, 0x84, 0x84, 0x72, 0x88, 0x87, 0x7E, 0x8F, 0x8E, 
   0x9E, 0xA7, 0xA7, 0xAD, 0xB2, 0xB2, 0xB7, 0xB9, 0xBD, 0xA8, 0xAB, 0xB3, 0x8F, 0xA0, 0xAF, 0x7C, 
   0x96, 0xA7, 0x65, 0x7B, 0x89, 0x61, 0x75, 0x84, 0x6C, 0x83, 0x95, 0x69, 0x80, 0x91, 0x6E, 0x7F, 
   0x91, 0x66, 0x7B, 0x8C, 0x57, 0x69, 0x78, 0x52, 0x65, 0x72, 0x5F, 0x77, 0x86, 0x67, 0x81, 0x93, 
   0x71, 0x80, 0x87, 0x9D, 0xA0, 0xA0, 0x9D, 0x9A, 0x9C, 0x8C, 0x8A, 0x8D, 0x88, 0x8A, 0x8D, 0x8A, 
   0x8E, 0x90, 0x9E, 0xA0, 0xA2, 0xA9, 0xA9, 0xAB, 0xA3, 0xA4, 0xA7, 0xA7, 0xAA, 0xAD, 0xAC, 0xAD, 
   0xB1, 0xAC, 0xAE, 0xB0, 0xAF, 0xB1, 0xB4, 0xAD, 0xAE, 0xB2, 0xA1, 0xA1, 0xA4, 0xA0, 0xA0, 0xA4, 
   0xA6, 0xA9, 0xAC, 0xAA, 0xAB, 0xB1, 0xAA, 0xA9, 0xAF, 0xA9, 0xA9, 0xA8, 0xA2, 0xA2, 0xA3, 0x9C, 
   0xA1, 0xA0, 0xA8, 0xAA, 0xAA, 0xA7, 0xA7, 0xA7, 0xA2, 0xA3, 0xA3, 0xA9, 0xA9, 0xAD, 0xB6, 0xB3, 
   0xBB, 0xAD, 0xA7, 0xAE, 0x81, 0x78, 0x7E, 0x5F, 0x59, 0x60, 0x5D, 0x58, 0x5E, 0x58, 0x53, 0x59, 
   0x57, 0x52, 0x56, 0x5B, 0x58, 0x59, 0x5F, 0x5C, 0x5C, 0x6A, 0x64, 0x6A, 0x61, 0x5A, 0x61, 0x4D, 
   0x4B, 0x4D, 0x4F, 0x57, 0x62, 0x53, 0x60, 0x7A, 0x52, 0x64, 0x78, 0x84, 0x98, 0xA3, 0x93, 0xA3, 
   0xAE, 0x95, 0x9E, 0xAA, 0xA3, 0xAF, 0xB4, 0xA6, 0xB5, 0xBA, 0xA9, 0xB9, 0xBC, 0xAD, 0xBB, 0xBC, 
   0xAB, 0xBA, 0xBC, 0xA7, 0xB7, 0xBA, 0xA4, 0xB4, 0xB9, 0xA4, 0xB8, 0xBB, 0xAA, 0xBB, 0xC1, 0xAC, 
   0xBA, 0xC1, 0xC0, 0xCE, 0xD3, 0xB8, 0xC5, 0xCC, 0xB2, 0xC3, 0xCD, 0xAB, 0xBE, 0xCA, 0xA3, 0xB6, 
   0xC4, 0x9E, 0xB6, 0xC4, 0xA4, 0xC0, 0xCC, 0xAB, 0xC4, 0xCD, 0xAC, 0xBE, 0xC6, 0xA9, 0xBB, 0xC0, 
   0xA8, 0xBD, 0xC3, 0xA5, 0xBC, 0xC3, 0xA2, 0xB8, 0xBE, 0xA3, 0xB6, 0xBC, 0x9F, 0xB2, 0xBB, 0x9A, 
   0xAF, 0xB9, 0x96, 0xAA, 0xB4, 0x89, 0xA0, 0xAE, 0x86, 0x9B, 0xA9, 0x87, 0x9F, 0xA9, 0x95, 0xA9, 
   0xB1, 0x9F, 0xB0, 0xB9, 0x87, 0x8F, 0x9C, 0x4A, 0x4C, 0x56, 0x42, 0x4A, 0x4D, 0x59, 0x65, 0x66, 
   0x6C, 0x79, 0x79, 0x71, 0x7B, 0x78, 0x75, 0x7B, 0x76, 0x81, 0x86, 0x84, 0x7D, 0x7B, 0x81, 0x38, 
   0x31, 0x39, 0x1A, 0x1B, 0x1E, 0x20, 0x24, 0x20, 0x57, 0x5B, 0x54, 0x76, 0x77, 0x72, 0x7D, 0x7D, 
   0x77, 0x81, 0x82, 0x78, 0x83, 0x80, 0x79, 0x88, 0x84, 0x7F, 0x8A, 0x8A, 0x81, 0x8E, 0x8E, 0x85, 
   0x8D, 0x88, 0x8A, 0x90, 0x8A, 0x8A, 0x99, 0x91, 0x8E, 0x92, 0x8A, 0x86, 0x92, 0x8A, 0x85, 0x9B, 
   0x93, 0x90, 0x9B, 0x95, 0x95, 0x9C, 0x98, 0x97, 0x97, 0x94, 0x8F, 0x98, 0x99, 0x97, 0x9E, 0x9C, 
   0x9B, 0xAA, 0xA7, 0xA5, 0xA6, 0x97, 0x9D, 0x5D, 0x45, 0x4A, 0x32, 0x2B, 0x2B, 0x2F, 0x30, 0x2C, 
   0x2D, 0x30, 0x2F, 0x3B, 0x3C, 0x3C, 0x46, 0x4A, 0x49, 0x61, 0x65, 0x66, 0x74, 0x70, 0x73, 0x7B, 
   0x77, 0x77, 0x79, 0x74, 0x78, 0x65, 0x66, 0x62, 0x70, 0x72, 0x69, 0x84, 0x86, 0x7E, 0x8E, 0x8D, 
   0x89, 0x8D, 0x8B, 0x8A, 0x8B, 0x8B, 0x8B, 0x8C, 0x8A, 0x8D, 0x93, 0x92, 0x95, 0x9F, 0x9D, 0x9F, 
   0xA6, 0xA2, 0xA2, 0xA7, 0xA0, 0x9F, 0xA7, 0x9E, 0x9D, 0x9F, 0x97, 0x96, 0x90, 0x8C, 0x8E, 0x8B, 
   0x89, 0x8C, 0x9A, 0x9B, 0x9A, 0xA2, 0xA5, 0xA3, 0x89, 0x7D, 0x83, 0x64, 0x56, 0x54, 0x69, 0x65, 
   0x58, 0x75, 0x74, 0x69, 0x8C, 0x8B, 0x89, 0x96, 0x96, 0x94, 0x99, 0x96, 0x94, 0x97, 0x93, 0x91, 
   0x8C, 0x86, 0x81, 0x89, 0x83, 0x7B, 0x9E, 0xAB, 0xBB, 0x99, 0xA1, 0xB0, 0x98, 0x99, 0xA2, 0x99, 
   0x96, 0x97, 0xA3, 0xA1, 0xA0, 0xA5, 0xA6, 0xA9, 0x7E, 0x89, 0x8E, 0x6E, 0x7B, 0x81, 0x87, 0x93, 
   0x9B, 0x9A, 0xA6, 0xAF, 0xA2, 0xAE, 0xB8, 0x9E, 0xAA, 0xB4, 0x9C, 0xA9, 0xB3, 0x99, 0xA6, 0xB2, 
   0x9B, 0xA6, 0xB5, 0x9B, 0xA7, 0xB8, 0x95, 0xA6, 0xB7, 0x87, 0x94, 0x9F, 0x76, 0x79, 0x7F, 0x78, 
   0x7A, 0x7E, 0x90, 0x92, 0x97, 0xB4, 0xB0, 0xB7, 0x89, 0x86, 0x8A, 0x83, 0x82, 0x81, 0x85, 0x82, 
   0x85, 0x83, 0x80, 0x82, 0x7F, 0x82, 0x7F, 0x8B, 0x8F, 0x8C, 0x91, 0x8F, 0x8F, 0x87, 0x86, 0x88, 
   0x7D, 0x7C, 0x7B, 0x76, 0x75, 0x74, 0x73, 0x72, 0x73, 0x70, 0x6E, 0x70, 0x65, 0x66, 0x69, 0x69, 
   0x69, 0x6D, 0x6E, 0x6D, 0x73, 0x71, 0x72, 0x78, 0x65, 0x67, 0x70, 0x2D, 0x33, 0x3F, 0x1B, 0x27, 
   0x36, 0x30, 0x38, 0x47, 0x2C, 0x37, 0x43, 0x24, 0x2D, 0x34, 0x34, 0x39, 0x3F, 0x58, 0x59, 0x61, 
   0x76, 0x72, 0x7C, 0x78, 0x75, 0x7D, 0x7C, 0x7B, 0x82, 0x87, 0x88, 0x8F, 0x8A, 0x8C, 0x94, 0x8F, 
   0x90, 0x96, 0x8E, 0x8C, 0x8F, 0x8C, 0x8A, 0x8F, 0x8B, 0x8C, 0x93, 0x94, 0x94, 0x9D, 0x90, 0x91, 
   0x99, 0x82, 0x84, 0x8E, 0x92, 0x92, 0x9C, 0x95, 0x96, 0x9D, 0x8C, 0x8F, 0x96, 0x85, 0x89, 0x90, 
   0x82, 0x84, 0x8D, 0x68, 0x66, 0x71, 0x79, 0x7A, 0x81, 0x7D, 0x7D, 0x79, 0x7E, 0x7B, 0x77, 0x64, 
   0x66, 0x70, 0x57, 0x6C, 0x82, 0x64, 0x86, 0x9E, 0x72, 0x91, 0xA8, 0x83, 0x99, 0xB1, 0x89, 0x9E, 
   0xB3, 0x8B, 0xA0, 0xB2, 0x92, 0xAE, 0xBF, 0x96, 0xB3, 0xC2, 0xB6, 0xC4, 0xC7, 0xC7, 0xCA, 0xC5, 
   0x85, 0x86, 0x83, 0x4F, 0x4E, 0x51, 0x36, 0x32, 0x38, 0x31, 0x34, 0x34, 0x2D, 0x31, 0x2E, 0x35, 
   0x33, 0x33, 0x35, 0x37, 0x35, 0x40, 0x49, 0x43, 0x50, 0x5D, 0x56, 0x5F, 0x70, 0x6A, 0x7E, 0x8E, 
   0x8A, 0x7E, 0x8F, 0x8F, 0x74, 0x88, 0x8B, 0x78, 0x8D, 0x90, 0x75, 0x8E, 0x91, 0x7B, 0x8E, 0x90, 
   0xB2, 0xBC, 0xBC, 0xB4, 0xB6, 0xB9, 0xAD, 0xAB, 0xB2, 0x9C, 0xA0, 0xA4, 0x8F, 0xA1, 0xAD, 0x7F, 
   0x9B, 0xA5, 0x66, 0x7C, 0x85, 0x6B, 0x7E, 0x8D, 0x6F, 0x86, 0x97, 0x67, 0x7D, 0x8E, 0x75, 0x86, 
   0x98, 0x69, 0x7E, 0x8F, 0x55, 0x69, 0x75, 0x5B, 0x72, 0x7F, 0x66, 0x82, 0x91, 0x6D, 0x87, 0x98, 
   0x7F, 0x8D, 0x95, 0x8D, 0x8F, 0x93, 0x8E, 0x8D, 0x90, 0x96, 0x94, 0x97, 0x9A, 0x9C, 0x9E, 0x99, 
   0x9C, 0x9E, 0x9A, 0x9B, 0x9D, 0x9C, 0x9C, 0x9F, 0x9C, 0xA0, 0xA3, 0x9C, 0xA1, 0xA5, 0xA2, 0xA3, 
   0xAA, 0xAC, 0xAF, 0xB2, 0xAD, 0xB3, 0xB6, 0xB1, 0xB6, 0xBC, 0xA6, 0xAA, 0xAF, 0xA8, 0xAB, 0xB0, 
   0xB2, 0xB7, 0xBA, 0xB0, 0xB2, 0xB7, 0xAA, 0xAA, 0xB1, 0xA5, 0xA9, 0xAA, 0xA2, 0xA5, 0xAA, 0xA2, 
   0xA7, 0xA8, 0xA9, 0xAB, 0xAD, 0xA8, 0xA7, 0xA9, 0xC0, 0xBC, 0xBC, 0xD4, 0xCC, 0xCF, 0xC6, 0xBB, 
   0xC2, 0x8B, 0x80, 0x87, 0x5E, 0x55, 0x59, 0x51, 0x4C, 0x54, 0x48, 0x47, 0x4A, 0x45, 0x46, 0x47, 
   0x4D, 0x4E, 0x50, 0x4F, 0x4F, 0x50, 0x52, 0x4F, 0x50, 0x67, 0x61, 0x65, 0x76, 0x6A, 0x72, 0x58, 
   0x4E, 0x54, 0x54, 0x56, 0x66, 0x58, 0x62, 0x81, 0x52, 0x61, 0x77, 0x7B, 0x8C, 0x9A, 0x8C, 0x99, 
   0xA3, 0x90, 0x98, 0xA2, 0xA2, 0xAD, 0xB2, 0xA5, 0xB2, 0xB8, 0xAE, 0xBA, 0xBF, 0xB2, 0xBB, 0xC4, 
   0xAA, 0xB7, 0xBF, 0xAA, 0xB8, 0xBD, 0xA7, 0xB5, 0xBC, 0xA6, 0xB7, 0xBD, 0xAB, 0xB8, 0xC1, 0xAB, 
   0xB6, 0xBF, 0xAF, 0xBE, 0xC4, 0xAF, 0xBF, 0xC7, 0xB1, 0xC3, 0xCF, 0xAB, 0xBF, 0xCC, 0xA1, 0xB4, 
   0xC1, 0x9F, 0xB3, 0xC0, 0xAB, 0xC1, 0xCE, 0xA8, 0xBE, 0xC9, 0xA6, 0xBA, 0xC4, 0xA3, 0xBA, 0xBF, 
   0xA5, 0xB8, 0xBE, 0xA7, 0xB7, 0xBE, 0xA4, 0xB4, 0xBB, 0xA1, 0xB5, 0xBC, 0x97, 0xAB, 0xB6, 0x8A, 
   0x9F, 0xAF, 0x8C, 0xA6, 0xB0, 0x85, 0xA0, 0xAE, 0x84, 0x9C, 0xA9, 0x85, 0x9D, 0xA6, 0x91, 0xA4, 
   0xAE, 0x9E, 0xAB, 0xB6, 0x82, 0x80, 0x8D, 0x3C, 0x39, 0x40, 0x40, 0x4A, 0x4A, 0x5F, 0x6A, 0x6A, 
   0x6B, 0x75, 0x77, 0x6D, 0x77, 0x76, 0x7D, 0x81, 0x7E, 0x8E, 0x8D, 0x8E, 0x7B, 0x75, 0x7D, 0x3D, 
   0x38, 0x40, 0x16, 0x19, 0x1C, 0x24, 0x2C, 0x26, 0x5B, 0x61, 0x58, 0x75, 0x74, 0x70, 0x80, 0x81, 
   0x7C, 0x81, 0x85, 0x7C, 0x81, 0x80, 0x79, 0x83, 0x7F, 0x7B, 0x85, 0x83, 0x7C, 0x8B, 0x89, 0x82, 
   0x8F, 0x89, 0x89, 0x90, 0x89, 0x89, 0x92, 0x8C, 0x88, 0x96, 0x90, 0x8A, 0x9A, 0x93, 0x8F, 0x9B, 
   0x95, 0x92, 0x9C, 0x97, 0x95, 0xA3, 0x9E, 0x9F, 0xA5, 0xA4, 0xA0, 0xA4, 0xA3, 0xA1, 0xA4, 0xA3, 
   0xA0, 0xAB, 0xA7, 0xA3, 0xAA, 0x96, 0x9C, 0x56, 0x3B, 0x44, 0x23, 0x1C, 0x1D, 0x31, 0x33, 0x31, 
   0x41, 0x48, 0x4D, 0x3E, 0x43, 0x48, 0x36, 0x3A, 0x41, 0x38, 0x3C, 0x45, 0x40, 0x43, 0x46, 0x42, 
   0x44, 0x45, 0x3A, 0x3D, 0x3A, 0x4C, 0x51, 0x45, 0x76, 0x79, 0x6B, 0x8C, 0x8E, 0x87, 0x98, 0x97, 
   0x9A, 0x91, 0x8D, 0x91, 0x7E, 0x7C, 0x7D, 0x7E, 0x7A, 0x7D, 0x97, 0x93, 0x97, 0x9E, 0x9C, 0x9F, 
   0x9F, 0x9B, 0x9A, 0xA6, 0x9E, 0x9C, 0xAB, 0xA3, 0xA2, 0xAA, 0xA0, 0xA0, 0xA0, 0x9A, 0x9C, 0x97, 
   0x94, 0x95, 0x99, 0x98, 0x99, 0xA3, 0xA3, 0xA1, 0x94, 0x87, 0x8C, 0x57, 0x48, 0x4C, 0x51, 0x55, 
   0x4A, 0x93, 0x96, 0x8A, 0xB2, 0xAF, 0xAC, 0xAA, 0xA8, 0xA6, 0xA8, 0xA5, 0xA0, 0xA7, 0xA2, 0x9E, 
   0xA5, 0x9F, 0x94, 0xA3, 0x9C, 0x94, 0x96, 0xAA, 0xC0, 0x9C, 0xA4, 0xB7, 0x96, 0x97, 0xA1, 0x98, 
   0x95, 0x95, 0xAD, 0xAC, 0xA3, 0xA9, 0xAB, 0xA8, 0x82, 0x91, 0x93, 0x84, 0x90, 0x96, 0x96, 0x9C, 
   0xA2, 0x9B, 0xA1, 0xA8, 0x9D, 0xA7, 0xAF, 0x9C, 0xA9, 0xB2, 0x9B, 0xAB, 0xB2, 0x99, 0xA8, 0xB0, 
   0x96, 0xA3, 0xB0, 0x94, 0xA2, 0xB2, 0x8E, 0xA3, 0xB2, 0x88, 0x99, 0xA5, 0x7C, 0x83, 0x8A, 0x7D, 
   0x84, 0x88, 0x87, 0x8E, 0x91, 0x90, 0x90, 0x94, 0x7A, 0x76, 0x7D, 0x8A, 0x80, 0x87, 0x83, 0x82, 
   0x88, 0x89, 0x8A, 0x89, 0x89, 0x8B, 0x83, 0x85, 0x87, 0x82, 0x91, 0x8F, 0x91, 0x8B, 0x8A, 0x8E, 
   0x81, 0x7F, 0x7D, 0x79, 0x79, 0x79, 0x76, 0x78, 0x78, 0x76, 0x74, 0x76, 0x6C, 0x72, 0x74, 0x74, 
   0x74, 0x77, 0x6A, 0x68, 0x6F, 0x75, 0x74, 0x7C, 0x62, 0x64, 0x71, 0x33, 0x3A, 0x49, 0x2D, 0x38, 
   0x49, 0x36, 0x3F, 0x51, 0x2B, 0x34, 0x44, 0x39, 0x3F, 0x4B, 0x52, 0x56, 0x5F, 0x5E, 0x60, 0x69, 
   0x74, 0x76, 0x7E, 0x7D, 0x7D, 0x85, 0x81, 0x81, 0x89, 0x89, 0x89, 0x91, 0x8A, 0x8B, 0x93, 0x92, 
   0x8E, 0x97, 0x97, 0x91, 0x97, 0x91, 0x8F, 0x95, 0x8A, 0x8A, 0x92, 0x8E, 0x8E, 0x98, 0x8E, 0x91, 
   0x9A, 0x8D, 0x8F, 0x97, 0x96, 0x95, 0x9C, 0xA1, 0x9F, 0xA3, 0xA0, 0xA1, 0xA4, 0x8A, 0x8D, 0x92, 
   0x85, 0x85, 0x90, 0x74, 0x6F, 0x7F, 0x6D, 0x69, 0x6A, 0x7A, 0x79, 0x76, 0x7B, 0x7C, 0x76, 0x65, 
   0x6D, 0x75, 0x53, 0x6E, 0x84, 0x5E, 0x87, 0xA0, 0x78, 0x9A, 0xB8, 0x90, 0xA9, 0xBD, 0xA6, 0xB7, 
   0xC6, 0xB7, 0xC2, 0xC8, 0xB1, 0xBD, 0xBF, 0xAD, 0xBA, 0xB9, 0xB6, 0xBE, 0xBB, 0xC5, 0xC7, 0xC4, 
   0xA7, 0xAB, 0xA8, 0x69, 0x6A, 0x6C, 0x38, 0x34, 0x3A, 0x31, 0x31, 0x34, 0x33, 0x34, 0x32, 0x36, 
   0x34, 0x30, 0x30, 0x31, 0x2D, 0x3C, 0x43, 0x40, 0x4B, 0x54, 0x53, 0x57, 0x61, 0x61, 0x6A, 0x73, 
   0x73, 0x70, 0x7C, 0x7F, 0x73, 0x85, 0x8B, 0x76, 0x89, 0x92, 0x74, 0x89, 0x93, 0x82, 0x95, 0x98, 
   0xB1, 0xBB, 0xB8, 0xAC, 0xAE, 0xB1, 0xA2, 0xA0, 0xAB, 0x90, 0x97, 0x9D, 0x90, 0xA3, 0xAF, 0x8D, 
   0xA4, 0xAF, 0x6C, 0x7F, 0x8A, 0x71, 0x83, 0x95, 0x69, 0x81, 0x93, 0x69, 0x80, 0x8F, 0x8B, 0x9E, 
   0xAE, 0x6A, 0x7A, 0x85, 0x55, 0x67, 0x70, 0x63, 0x79, 0x88, 0x6A, 0x88, 0x9B, 0x6F, 0x8B, 0x9D, 
   0x7D, 0x91, 0x98, 0x8C, 0x94, 0x9A, 0x9D, 0x9E, 0xA4, 0xA1, 0x9F, 0xA3, 0xA0, 0x9F, 0xA0, 0x9F, 
   0xA0, 0xA0, 0x99, 0x98, 0x9A, 0x8D, 0x8F, 0x95, 0x98, 0x9F, 0xA3, 0xA5, 0xAA, 0xAF, 0xB5, 0xB8, 
   0xBF, 0xBA, 0xC0, 0xC3, 0xB4, 0xBE, 0xC0, 0xA7, 0xB1, 0xB7, 0xA8, 0xB0, 0xB4, 0xB6, 0xBB, 0xBF, 
   0xB9, 0xBE, 0xBE, 0xB4, 0xB6, 0xB9, 0xA8, 0xAC, 0xB4, 0x9F, 0xA6, 0xAB, 0x9C, 0xA0, 0xA9, 0x80, 
   0x81, 0x87, 0x7B, 0x78, 0x7A, 0xBF, 0xB8, 0xBB, 0xDE, 0xD2, 0xD5, 0xB2, 0xA3, 0xA7, 0x6D, 0x5E, 
   0x64, 0x48, 0x3F, 0x43, 0x42, 0x3F, 0x3F, 0x49, 0x46, 0x4C, 0x48, 0x48, 0x46, 0x49, 0x4D, 0x4A, 
   0x5E, 0x61, 0x61, 0x6A, 0x69, 0x6C, 0x63, 0x5E, 0x61, 0x63, 0x5A, 0x61, 0x5C, 0x53, 0x5A, 0x4F, 
   0x44, 0x4E, 0x4D, 0x4E, 0x61, 0x55, 0x5F, 0x80, 0x4D, 0x5C, 0x75, 0x83, 0x8E, 0x9E, 0xA0, 0xA4, 
   0xB0, 0xA2, 0xA9, 0xB1, 0xB4, 0xC1, 0xC6, 0xB7, 0xC4, 0xC9, 0xB3, 0xBC, 0xC3, 0xBC, 0xC4, 0xD3, 
   0xB8, 0xC3, 0xD2, 0xAE, 0xBB, 0xC7, 0xA7, 0xB5, 0xC3, 0xA4, 0xB5, 0xC1, 0xA3, 0xAF, 0xBE, 0xAA, 
   0xB6, 0xC3, 0xB7, 0xC9, 0xD3, 0xAF, 0xC2, 0xCD, 0xA3, 0xBC, 0xC8, 0xA0, 0xBD, 0xC8, 0x9F, 0xBA, 
   0xC4, 0x9E, 0xB9, 0xC2, 0x9E, 0xB7, 0xC1, 0x9F, 0xB9, 0xC2, 0x9C, 0xB7, 0xC0, 0x9F, 0xB8, 0xBC, 
   0xA1, 0xB3, 0xB8, 0xA4, 0xB2, 0xB9, 0xA4, 0xB3, 0xBA, 0xA2, 0xB3, 0xBB, 0x97, 0xA5, 0xB5, 0x81, 
   0x89, 0xA1, 0x82, 0x9E, 0xAC, 0x8C, 0xA7, 0xB8, 0x89, 0x9F, 0xAD, 0x87, 0xA0, 0xAA, 0x88, 0xA0, 
   0xA9, 0x8A, 0x98, 0xA3, 0x79, 0x74, 0x7F, 0x36, 0x36, 0x3D, 0x43, 0x4F, 0x4F, 0x5F, 0x66, 0x66, 
   0x67, 0x6B, 0x6F, 0x7C, 0x84, 0x86, 0x82, 0x88, 0x8A, 0x7C, 0x7C, 0x7F, 0x64, 0x5C, 0x62, 0x55, 
   0x52, 0x58, 0x34, 0x33, 0x36, 0x2F, 0x38, 0x32, 0x62, 0x6C, 0x64, 0x75, 0x73, 0x72, 0x7F, 0x7E, 
   0x7C, 0x7E, 0x80, 0x78, 0x81, 0x7F, 0x77, 0x85, 0x80, 0x7C, 0x81, 0x7E, 0x7B, 0x84, 0x83, 0x7E, 
   0x8D, 0x8B, 0x88, 0x94, 0x8D, 0x8C, 0x91, 0x8C, 0x87, 0x92, 0x8F, 0x89, 0x99, 0x97, 0x93, 0x9B, 
   0x99, 0x96, 0x9F, 0x9D, 0x9A, 0xA6, 0xA1, 0xA2, 0xA7, 0xA3, 0xA2, 0xA5, 0xA2, 0x9E, 0xA8, 0xA4, 
   0xA1, 0xB1, 0xAB, 0xA5, 0xA7, 0x92, 0x96, 0x43, 0x2A, 0x34, 0x2D, 0x2B, 0x2C, 0x53, 0x52, 0x5C, 
   0x50, 0x58, 0x6C, 0x52, 0x5A, 0x6B, 0x50, 0x55, 0x69, 0x49, 0x51, 0x62, 0x50, 0x5A, 0x60, 0x5A, 
   0x62, 0x67, 0x59, 0x60, 0x61, 0x76, 0x7D, 0x74, 0x94, 0x97, 0x8C, 0x94, 0x96, 0x95, 0x99, 0x96, 
   0x9F, 0x99, 0x96, 0x9B, 0x8F, 0x8C, 0x8C, 0x87, 0x82, 0x86, 0x8D, 0x8C, 0x91, 0x96, 0x96, 0x99, 
   0x99, 0x98, 0x96, 0xA0, 0x9C, 0x98, 0xA5, 0xA1, 0x9E, 0xA8, 0xA0, 0x9F, 0xA5, 0x9F, 0x9F, 0xA1, 
   0x9F, 0x9E, 0xA3, 0x9D, 0xA0, 0xA4, 0x9E, 0xA0, 0x93, 0x83, 0x89, 0x44, 0x38, 0x3D, 0x5F, 0x6A, 
   0x61, 0xAC, 0xB1, 0xA4, 0xBF, 0xBA, 0xB4, 0xBF, 0xBC, 0xB6, 0xB4, 0xAD, 0xAB, 0xAD, 0xA4, 0xA6, 
   0xA8, 0xA1, 0x9E, 0xAA, 0xA0, 0x9F, 0x9F, 0xB1, 0xC3, 0xA9, 0xB3, 0xBF, 0xAE, 0xB4, 0xB2, 0xAF, 
   0xAE, 0xA7, 0xA9, 0xA8, 0xA1, 0x94, 0x98, 0x96, 0x8C, 0x96, 0x97, 0x8B, 0x93, 0x9C, 0x97, 0x9D, 
   0xAB, 0x9D, 0xA5, 0xB1, 0x9D, 0xA7, 0xB3, 0x9A, 0xA8, 0xB5, 0x9F, 0xAC, 0xBA, 0xA5, 0xB0, 0xBE, 
   0xA1, 0xAE, 0xBA, 0x9D, 0xAA, 0xB5, 0x98, 0xA7, 0xB2, 0x90, 0x9E, 0xAD, 0x79, 0x83, 0x8D, 0x79, 
   0x80, 0x81, 0x7F, 0x83, 0x83, 0x7F, 0x81, 0x84, 0x7E, 0x7D, 0x7D, 0x82, 0x80, 0x82, 0x86, 0x87, 
   0x87, 0x8C, 0x8C, 0x8A, 0x88, 0x86, 0x7B, 0x87, 0x84, 0x79, 0x8E, 0x8B, 0x89, 0x8B, 0x89, 0x8B, 
   0x87, 0x86, 0x88, 0x77, 0x78, 0x7C, 0x75, 0x75, 0x7A, 0x7A, 0x79, 0x7C, 0x7A, 0x80, 0x7B, 0x7A, 
   0x7E, 0x7E, 0x6D, 0x6B, 0x72, 0x74, 0x70, 0x77, 0x4C, 0x4F, 0x5A, 0x2D, 0x35, 0x44, 0x2F, 0x37, 
   0x4A, 0x31, 0x37, 0x48, 0x32, 0x3A, 0x44, 0x52, 0x58, 0x5F, 0x62, 0x61, 0x68, 0x6C, 0x6D, 0x71, 
   0x83, 0x87, 0x8E, 0x8B, 0x91, 0x98, 0x8E, 0x93, 0x9A, 0x89, 0x8E, 0x97, 0x8A, 0x8A, 0x95, 0x8E, 
   0x8E, 0x99, 0x8E, 0x8F, 0x97, 0x93, 0x92, 0x98, 0x92, 0x8F, 0x94, 0x91, 0x91, 0x95, 0x91, 0x97, 
   0x9B, 0x95, 0x9B, 0xA2, 0x96, 0x97, 0x9D, 0x9B, 0x9C, 0x9E, 0x9E, 0xA0, 0xA2, 0x93, 0x92, 0x97, 
   0x8D, 0x8B, 0x92, 0x94, 0x96, 0x9D, 0x69, 0x67, 0x6C, 0x6B, 0x69, 0x65, 0x78, 0x79, 0x77, 0x60, 
   0x6E, 0x75, 0x57, 0x71, 0x85, 0x66, 0x88, 0xA2, 0x7C, 0x9E, 0xB1, 0x90, 0xA9, 0xB6, 0xA7, 0xB8, 
   0xBC, 0xB4, 0xBD, 0xBB, 0xB5, 0xBC, 0xB9, 0xAB, 0xB3, 0xB0, 0xA8, 0xB0, 0xAD, 0xA7, 0xAD, 0xAD, 
   0x9F, 0xA7, 0xA5, 0x93, 0x9A, 0x9A, 0x4A, 0x4F, 0x52, 0x2D, 0x30, 0x33, 0x37, 0x38, 0x3A, 0x36, 
   0x37, 0x36, 0x30, 0x34, 0x34, 0x43, 0x47, 0x48, 0x49, 0x55, 0x57, 0x50, 0x59, 0x5A, 0x6A, 0x7A, 
   0x7A, 0x79, 0x85, 0x87, 0x73, 0x86, 0x87, 0x75, 0x87, 0x8E, 0x6B, 0x85, 0x8C, 0x99, 0xAC, 0xAB, 
   0xAA, 0xAF, 0xB0, 0xA2, 0xA6, 0xAD, 0x9E, 0xA2, 0xAA, 0x8C, 0x97, 0x9F, 0x83, 0x96, 0xA4, 0x6E, 
   0x80, 0x93, 0x6D, 0x80, 0x8F, 0x77, 0x8B, 0x97, 0x6E, 0x82, 0x8E, 0x72, 0x86, 0x93, 0x76, 0x8C, 
   0x94, 0x63, 0x74, 0x7B, 0x66, 0x76, 0x80, 0x6B, 0x86, 0x91, 0x69, 0x8B, 0x98, 0x73, 0x90, 0x9C, 
   0x89, 0x97, 0x9B, 0xA4, 0xA9, 0xA7, 0xA3, 0xA6, 0xA6, 0xAC, 0xAC, 0xAA, 0xA7, 0xA5, 0xA2, 0xAA, 
   0xAB, 0xAA, 0xB2, 0xBA, 0xBC, 0x9F, 0xA7, 0xAE, 0x98, 0xA1, 0xA9, 0x95, 0x9F, 0xA6, 0x8E, 0x91, 
   0x99, 0x9A, 0x9F, 0xAB, 0x92, 0x99, 0xA4, 0x7D, 0x80, 0x8F, 0x7D, 0x83, 0x90, 0x87, 0x91, 0x98, 
   0x92, 0x98, 0xA0, 0xAA, 0xA3, 0xAC, 0x9B, 0x96, 0xA0, 0x7B, 0x86, 0x92, 0x97, 0x99, 0xA4, 0x75, 
   0x6D, 0x77, 0x32, 0x2B, 0x2F, 0x46, 0x41, 0x41, 0x55, 0x4D, 0x4C, 0x45, 0x3E, 0x3C, 0x50, 0x50, 
   0x4C, 0x5C, 0x5B, 0x5A, 0x5D, 0x58, 0x58, 0x59, 0x57, 0x59, 0x61, 0x5A, 0x5B, 0x5A, 0x55, 0x59, 
   0x57, 0x55, 0x5E, 0x5D, 0x58, 0x60, 0x5C, 0x54, 0x59, 0x4F, 0x4D, 0x4E, 0x4B, 0x4B, 0x47, 0x3F, 
   0x45, 0x45, 0x48, 0x53, 0x61, 0x4D, 0x56, 0x74, 0x47, 0x57, 0x6A, 0xA0, 0xAE, 0xBA, 0xBC, 0xB6, 
   0xC3, 0xB5, 0xB7, 0xC0, 0xA9, 0xB6, 0xBD, 0xA0, 0xB2, 0xBA, 0xA6, 0xB4, 0xBE, 0xB0, 0xB7, 0xC4, 
   0xB0, 0xB6, 0xC6, 0xB6, 0xBE, 0xCF, 0xAE, 0xBB, 0xCA, 0xA1, 0xB2, 0xBD, 0x9F, 0xB6, 0xBC, 0xA3, 
   0xBA, 0xC0, 0xAA, 0xC0, 0xCA, 0xA4, 0xBE, 0xCA, 0x9D, 0xBA, 0xC7, 0x9C, 0xBB, 0xC5, 0x9B, 0xB9, 
   0xC4, 0x9C, 0xB5, 0xC5, 0x9E, 0xB8, 0xC8, 0xA3, 0xBC, 0xC5, 0x9E, 0xB1, 0xB7, 0x9D, 0xB1, 0xB7, 
   0x9E, 0xB1, 0xBB, 0x9F, 0xB1, 0xBE, 0x9C, 0xB3, 0xBC, 0x9E, 0xB3, 0xB9, 0x98, 0xA1, 0xAD, 0x80, 
   0x89, 0x9C, 0x88, 0x99, 0xAC, 0x81, 0x96, 0xAD, 0x75, 0x8E, 0xA5, 0x75, 0x8D, 0x9E, 0x7D, 0x8E, 
   0x9A, 0x7A, 0x85, 0x8E, 0x65, 0x6C, 0x73, 0x46, 0x4A, 0x4D, 0x46, 0x51, 0x51, 0x4E, 0x57, 0x58, 
   0x50, 0x5D, 0x57, 0x71, 0x7F, 0x76, 0x80, 0x82, 0x82, 0x65, 0x68, 0x6A, 0x39, 0x40, 0x46, 0x3E, 
   0x43, 0x47, 0x3F, 0x42, 0x45, 0x2E, 0x35, 0x35, 0x5B, 0x60, 0x5C, 0x6C, 0x6C, 0x67, 0x7C, 0x7B, 
   0x77, 0x8A, 0x82, 0x83, 0x8A, 0x80, 0x81, 0x86, 0x80, 0x7B, 0x82, 0x7D, 0x79, 0x7B, 0x7A, 0x77, 
   0x81, 0x81, 0x7B, 0x8E, 0x8B, 0x85, 0x8F, 0x8C, 0x87, 0x94, 0x90, 0x8C, 0x9B, 0x97, 0x93, 0x9A, 
   0x96, 0x91, 0x9F, 0x9B, 0x98, 0xA6, 0xA1, 0xA0, 0xA5, 0xA2, 0xA3, 0xA5, 0xA2, 0xA1, 0xA3, 0xA5, 
   0x9F, 0xAF, 0xA8, 0xA7, 0x7F, 0x68, 0x72, 0x22, 0x17, 0x22, 0x41, 0x49, 0x53, 0x77, 0x7D, 0x94, 
   0x62, 0x66, 0x7A, 0x58, 0x5B, 0x6E, 0x56, 0x5D, 0x75, 0x54, 0x5F, 0x79, 0x56, 0x61, 0x73, 0x64, 
   0x6F, 0x77, 0x6D, 0x73, 0x7C, 0x72, 0x79, 0x7C, 0x88, 0x89, 0x84, 0x8E, 0x8E, 0x8C, 0x92, 0x95, 
   0x95, 0x97, 0x9B, 0x9C, 0x95, 0x99, 0x9C, 0x97, 0x99, 0x9C, 0x93, 0x92, 0x98, 0x91, 0x8D, 0x8D, 
   0x94, 0x8F, 0x8D, 0x97, 0x92, 0x97, 0x9F, 0x9D, 0x9E, 0xA6, 0xA2, 0x9C, 0xA7, 0xA1, 0x9B, 0xA3, 
   0x9E, 0x9C, 0xA3, 0x9E, 0x9C, 0xA7, 0xA1, 0xA3, 0x94, 0x86, 0x90, 0x5D, 0x54, 0x56, 0x9A, 0x9C, 
   0x8F, 0xBD, 0xBA, 0xAC, 0xD5, 0xCC, 0xC1, 0xCC, 0xC2, 0xBA, 0xC6, 0xBD, 0xB6, 0xC9, 0xBE, 0xBA, 
   0xBE, 0xB6, 0xB2, 0xAF, 0xA4, 0xA0, 0x8D, 0x9E, 0xB0, 0x9D, 0xA2, 0xAE, 0xBD, 0xBD, 0xBE, 0xB7, 
   0xB7, 0xB3, 0x9B, 0x9A, 0x97, 0x90, 0x8F, 0x91, 0x7A, 0x7F, 0x84, 0x88, 0x91, 0x9B, 0x9F, 0xA7, 
   0xB7, 0xA6, 0xAF, 0xBB, 0xA2, 0xAD, 0xB8, 0x9F, 0xAB, 0xB7, 0x9A, 0xA7, 0xB5, 0x98, 0xA5, 0xB3, 
   0x96, 0xA4, 0xB1, 0x95, 0xA4, 0xB0, 0x91, 0xA2, 0xB1, 0x97, 0xA5, 0xB5, 0x85, 0x8F, 0x9A, 0x75, 
   0x79, 0x7D, 0x7B, 0x7E, 0x80, 0x85, 0x87, 0x88, 0x7C, 0x7C, 0x7B, 0x77, 0x77, 0x78, 0x79, 0x7C, 
   0x82, 0x78, 0x7D, 0x7F, 0x78, 0x7B, 0x77, 0x74, 0x75, 0x72, 0x7B, 0x7D, 0x7B, 0x88, 0x87, 0x8A, 
   0x7F, 0x7E, 0x7F, 0x6B, 0x6C, 0x6E, 0x70, 0x6F, 0x73, 0x7B, 0x78, 0x7C, 0x80, 0x81, 0x80, 0x7F, 
   0x7E, 0x84, 0x77, 0x71, 0x7E, 0x67, 0x64, 0x6F, 0x34, 0x39, 0x48, 0x23, 0x2F, 0x3E, 0x27, 0x34, 
   0x43, 0x21, 0x2C, 0x38, 0x2D, 0x35, 0x40, 0x51, 0x55, 0x5F, 0x67, 0x67, 0x6F, 0x83, 0x83, 0x8B, 
   0x8D, 0x91, 0x9A, 0x8E, 0x90, 0x9A, 0x92, 0x92, 0x9B, 0x8E, 0x8D, 0x98, 0x86, 0x88, 0x91, 0x8B, 
   0x8F, 0x95, 0x8F, 0x92, 0x99, 0x97, 0x98, 0x9F, 0x97, 0x95, 0x9C, 0x94, 0x93, 0x9A, 0x91, 0x95, 
   0x9B, 0x93, 0x96, 0x9C, 0x99, 0x98, 0x9E, 0x9D, 0x9D, 0xA2, 0x9B, 0x9E, 0xA3, 0x9A, 0x99, 0x9F, 
   0x9D, 0x9A, 0x9F, 0xA1, 0x9F, 0xA5, 0x6F, 0x6C, 0x71, 0x6D, 0x67, 0x66, 0x72, 0x70, 0x73, 0x52, 
   0x5B, 0x69, 0x58, 0x6B, 0x83, 0x6F, 0x8A, 0xA3, 0x80, 0x9E, 0xAF, 0x91, 0xA6, 0xAD, 0xA0, 0xAF, 
   0xAF, 0xAA, 0xB5, 0xB1, 0xA8, 0xB2, 0xAE, 0xA3, 0xAC, 0xAA, 0xA5, 0xAC, 0xAE, 0x9F, 0xA4, 0xA9, 
   0x8E, 0x9A, 0x9B, 0x8A, 0x97, 0x9A, 0x5C, 0x64, 0x69, 0x31, 0x36, 0x3B, 0x31, 0x3A, 0x3C, 0x33, 
   0x38, 0x39, 0x31, 0x36, 0x39, 0x47, 0x4C, 0x4F, 0x4B, 0x58, 0x5B, 0x48, 0x54, 0x54, 0x6F, 0x81, 
   0x80, 0x7C, 0x89, 0x8A, 0x73, 0x87, 0x85, 0x76, 0x89, 0x8E, 0x88, 0x9D, 0xA3, 0xAE, 0xBD, 0xC3, 
   0x9D, 0xA6, 0xB0, 0x93, 0x9F, 0xAA, 0x9A, 0xA5, 0xAF, 0x85, 0x95, 0x9D, 0x7F, 0x90, 0xA0, 0x6E, 
   0x7E, 0x91, 0x78, 0x88, 0x98, 0x7F, 0x8F, 0x9D, 0x77, 0x88, 0x97, 0x71, 0x84, 0x92, 0x64, 0x79, 
   0x82, 0x5F, 0x73, 0x7A, 0x62, 0x7C, 0x85, 0x6C, 0x89, 0x97, 0x70, 0x8C, 0x9C, 0x72, 0x89, 0x96, 
   0x82, 0x91, 0x94, 0xA4, 0xAB, 0xA8, 0xA3, 0xA9, 0xA9, 0x9D, 0xA2, 0xA3, 0x9B, 0xA0, 0xA3, 0xA1, 
   0xAC, 0xB1, 0x9A, 0xAD, 0xB6, 0x8B, 0x9D, 0xAA, 0x83, 0x92, 0xA2, 0x5D, 0x6B, 0x79, 0x5B, 0x63, 
   0x71, 0x71, 0x7A, 0x8A, 0x6C, 0x74, 0x86, 0x71, 0x76, 0x8B, 0x7C, 0x81, 0x96, 0x83, 0x89, 0x98, 
   0x90, 0x94, 0xA2, 0xAB, 0xA6, 0xB5, 0x87, 0x85, 0x93, 0x74, 0x7F, 0x8E, 0x95, 0x97, 0xA4, 0x7E, 
   0x79, 0x84, 0x30, 0x25, 0x2C, 0x13, 0x11, 0x13, 0x22, 0x25, 0x24, 0x44, 0x47, 0x44, 0x55, 0x55, 
   0x53, 0x5E, 0x5B, 0x5B, 0x64, 0x61, 0x61, 0x65, 0x63, 0x65, 0x6F, 0x69, 0x6C, 0x61, 0x5C, 0x63, 
   0x55, 0x53, 0x5C, 0x4C, 0x49, 0x4E, 0x48, 0x45, 0x47, 0x3C, 0x3D, 0x3F, 0x43, 0x40, 0x3F, 0x48, 
   0x4B, 0x4A, 0x58, 0x62, 0x6D, 0x51, 0x5C, 0x79, 0x42, 0x51, 0x67, 0xA1, 0xB3, 0xBD, 0xAD, 0xAB, 
   0xB5, 0xAD, 0xAE, 0xB6, 0xA6, 0xB1, 0xB9, 0xA0, 0xB2, 0xBB, 0xA6, 0xB7, 0xC3, 0xA5, 0xB0, 0xC0, 
   0xA5, 0xAD, 0xC0, 0xBA, 0xC4, 0xD7, 0xB2, 0xC0, 0xD0, 0xA0, 0xB2, 0xC0, 0x9E, 0xB6, 0xBF, 0x9E, 
   0xB7, 0xBF, 0xA1, 0xB8, 0xC3, 0x9F, 0xB9, 0xC6, 0x9A, 0xB7, 0xC4, 0x99, 0xB8, 0xC1, 0xA1, 0xBC, 
   0xC7, 0xA3, 0xB7, 0xC7, 0x9B, 0xB0, 0xC0, 0x9D, 0xB2, 0xBD, 0x9D, 0xAD, 0xB5, 0x9B, 0xAD, 0xB6, 
   0x9E, 0xAF, 0xBA, 0xA2, 0xB3, 0xC1, 0xA5, 0xB8, 0xC4, 0xA3, 0xB1, 0xBC, 0x97, 0x9C, 0xAD, 0x81, 
   0x89, 0x9E, 0x8E, 0x9B, 0xAD, 0x7F, 0x8E, 0xA5, 0x74, 0x89, 0x9D, 0x6C, 0x83, 0x92, 0x74, 0x84, 
   0x94, 0x7B, 0x81, 0x92, 0x5C, 0x5D, 0x68, 0x43, 0x47, 0x4D, 0x45, 0x4D, 0x4E, 0x51, 0x58, 0x57, 
   0x66, 0x6F, 0x69, 0x75, 0x7A, 0x77, 0x5C, 0x5C, 0x5F, 0x64, 0x6B, 0x6D, 0x6E, 0x73, 0x76, 0x59, 
   0x5A, 0x5D, 0x4F, 0x51, 0x54, 0x37, 0x37, 0x39, 0x4A, 0x4D, 0x47, 0x5B, 0x5F, 0x5A, 0x74, 0x77, 
   0x73, 0x8B, 0x87, 0x87, 0x8A, 0x83, 0x82, 0x87, 0x81, 0x7B, 0x85, 0x7F, 0x7C, 0x7D, 0x7B, 0x78, 
   0x7E, 0x7C, 0x78, 0x89, 0x85, 0x82, 0x8E, 0x8A, 0x88, 0x8D, 0x88, 0x87, 0x94, 0x90, 0x8C, 0x9D, 
   0x9A, 0x94, 0xA4, 0xA1, 0x9A, 0xA6, 0xA3, 0x9D, 0xA6, 0xA0, 0xA0, 0xA3, 0xA1, 0xA1, 0xA8, 0xA5, 
   0xA3, 0x9D, 0x90, 0x95, 0x51, 0x42, 0x4D, 0x42, 0x41, 0x4F, 0x73, 0x79, 0x8B, 0x8C, 0x90, 0xA2, 
   0x7E, 0x82, 0x93, 0x74, 0x76, 0x89, 0x5E, 0x63, 0x7B, 0x57, 0x60, 0x79, 0x5A, 0x65, 0x77, 0x58, 
   0x64, 0x71, 0x5F, 0x68, 0x76, 0x66, 0x6C, 0x79, 0x70, 0x73, 0x79, 0x7B, 0x7E, 0x80, 0x89, 0x8D, 
   0x8A, 0x94, 0x98, 0x93, 0x96, 0x9C, 0x9B, 0x99, 0x9D, 0xA2, 0x9A, 0x9D, 0xA9, 0x96, 0x99, 0xA5, 
   0x94, 0x96, 0xA2, 0x89, 0x89, 0x98, 0x7D, 0x7D, 0x85, 0x8C, 0x86, 0x86, 0x9B, 0x96, 0x90, 0xA1, 
   0x9B, 0x97, 0xAA, 0xA1, 0x9F, 0xAE, 0xA2, 0xA0, 0x93, 0x84, 0x86, 0x7B, 0x77, 0x73, 0xA7, 0xA9, 
   0x9D, 0xB4, 0xB1, 0xA5, 0xC9, 0xC1, 0xB6, 0xD2, 0xC8, 0xBD, 0xD6, 0xCC, 0xC2, 0xDB, 0xCF, 0xC6, 
   0xD4, 0xC7, 0xBF, 0xC3, 0xBA, 0xB1, 0x87, 0x93, 0xA0, 0x8D, 0x91, 0x9B, 0xB1, 0xAF, 0xB2, 0xA7, 
   0xA8, 0xA8, 0xA3, 0xA6, 0xA6, 0xA4, 0xA4, 0xAA, 0x72, 0x79, 0x7E, 0x8F, 0x9B, 0xA4, 0xA1, 0xAC, 
   0xBA, 0xA1, 0xAF, 0xB7, 0xA3, 0xB1, 0xB9, 0xA7, 0xB0, 0xBC, 0xA3, 0xAC, 0xBA, 0x98, 0xA4, 0xB2, 
   0x91, 0x9F, 0xAD, 0x92, 0xA0, 0xAE, 0x93, 0xA0, 0xB0, 0x96, 0xA2, 0xB0, 0x8A, 0x91, 0x9C, 0x7A, 
   0x7B, 0x83, 0x85, 0x87, 0x8D, 0x93, 0x98, 0x9B, 0x7C, 0x81, 0x82, 0x79, 0x78, 0x77, 0x80, 0x80, 
   0x87, 0x7E, 0x80, 0x83, 0x7C, 0x7C, 0x7C, 0x77, 0x77, 0x76, 0x7C, 0x7D, 0x7A, 0x81, 0x7D, 0x7F, 
   0x70, 0x72, 0x70, 0x68, 0x6B, 0x6C, 0x6F, 0x70, 0x73, 0x71, 0x71, 0x74, 0x74, 0x75, 0x78, 0x77, 
   0x76, 0x7E, 0x7B, 0x77, 0x80, 0x78, 0x75, 0x79, 0x54, 0x56, 0x5F, 0x2F, 0x36, 0x43, 0x28, 0x30, 
   0x3E, 0x17, 0x21, 0x2B, 0x1A, 0x25, 0x2A, 0x43, 0x4A, 0x4F, 0x6C, 0x6F, 0x73, 0x8A, 0x8B, 0x90, 
   0x89, 0x8D, 0x95, 0x8B, 0x8C, 0x96, 0x92, 0x8F, 0x97, 0x8D, 0x8A, 0x93, 0x89, 0x88, 0x8F, 0x8A, 
   0x8A, 0x90, 0x90, 0x91, 0x98, 0x98, 0x98, 0xA0, 0x96, 0x95, 0x9D, 0x97, 0x98, 0x9F, 0x93, 0x97, 
   0x9C, 0x8F, 0x8F, 0x93, 0x93, 0x92, 0x99, 0x9B, 0x9B, 0xA3, 0x9E, 0xA1, 0xA6, 0x9C, 0x9C, 0xA0, 
   0xA1, 0x9E, 0xA1, 0xA1, 0x9D, 0xA4, 0x72, 0x6F, 0x70, 0x77, 0x70, 0x6C, 0x71, 0x6E, 0x6E, 0x49, 
   0x52, 0x5B, 0x50, 0x5D, 0x71, 0x76, 0x87, 0x9E, 0x97, 0xAE, 0xBE, 0x96, 0xA8, 0xB0, 0x9F, 0xAD, 
   0xAF, 0xA2, 0xAF, 0xAD, 0x9B, 0xA9, 0xA8, 0x98, 0xA5, 0xA4, 0x9E, 0xA7, 0xA7, 0x98, 0x9E, 0xA0, 
   0x92, 0x9C, 0x9C, 0x8F, 0x9A, 0x9C, 0x7E, 0x83, 0x87, 0x3B, 0x3C, 0x40, 0x33, 0x3A, 0x3E, 0x35, 
   0x39, 0x3D, 0x32, 0x37, 0x38, 0x4D, 0x55, 0x52, 0x4E, 0x5C, 0x5D, 0x48, 0x54, 0x55, 0x7A, 0x8B, 
   0x8C, 0x81, 0x8D, 0x8F, 0x75, 0x87, 0x86, 0x8A, 0x9C, 0x9E, 0xB4, 0xC0, 0xC5, 0x9E, 0xA9, 0xB4, 
   0x85, 0x92, 0xA2, 0x86, 0x92, 0xA4, 0x89, 0x99, 0xAA, 0x85, 0x99, 0xA5, 0x8C, 0x99, 0xAD, 0x7C, 
   0x88, 0x9C, 0x7C, 0x86, 0x99, 0x7E, 0x89, 0x99, 0x7C, 0x89, 0x98, 0x76, 0x88, 0x96, 0x68, 0x7D, 
   0x88, 0x5F, 0x78, 0x7E, 0x61, 0x80, 0x8B, 0x71, 0x91, 0xA1, 0x75, 0x90, 0xA5, 0x68, 0x82, 0x93, 
   0x64, 0x79, 0x83, 0x71, 0x82, 0x86, 0x84, 0x93, 0x98, 0x79, 0x88, 0x90, 0x6F, 0x80, 0x8A, 0x78, 
   0x8E, 0x99, 0x80, 0x9D, 0xAA, 0x80, 0x98, 0xA9, 0x73, 0x83, 0x96, 0x58, 0x64, 0x72, 0x72, 0x7B, 
   0x88, 0x85, 0x8C, 0x9B, 0x77, 0x7F, 0x8D, 0x77, 0x7F, 0x91, 0x8E, 0x95, 0xA7, 0x9A, 0x9D, 0xAE, 
   0x94, 0x96, 0xA7, 0x9E, 0x9C, 0xAD, 0x80, 0x83, 0x93, 0x73, 0x7E, 0x8F, 0x8F, 0x91, 0x9F, 0x7E, 
   0x79, 0x86, 0x30, 0x2A, 0x32, 0x20, 0x22, 0x26, 0x41, 0x43, 0x45, 0x4B, 0x4D, 0x4D, 0x50, 0x52, 
   0x52, 0x54, 0x53, 0x53, 0x5D, 0x59, 0x5A, 0x63, 0x60, 0x63, 0x62, 0x5D, 0x62, 0x55, 0x51, 0x5A, 
   0x45, 0x45, 0x4E, 0x3B, 0x3C, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x43, 0x44, 0x44, 0x3F, 0x41, 0x3F, 
   0x41, 0x40, 0x4C, 0x55, 0x5F, 0x4B, 0x56, 0x72, 0x43, 0x52, 0x67, 0xA2, 0xB3, 0xBD, 0xAB, 0xAC, 
   0xB4, 0xA0, 0xA6, 0xAE, 0x9C, 0xA4, 0xAF, 0x9C, 0xAB, 0xB8, 0x95, 0xAC, 0xBA, 0x94, 0xA9, 0xBA, 
   0x97, 0xA4, 0xB6, 0x96, 0xA0, 0xB3, 0x9E, 0xAC, 0xBC, 0x9E, 0xB1, 0xBF, 0x9E, 0xB9, 0xC3, 0x9F, 
   0xBA, 0xC4, 0xA1, 0xBA, 0xC6, 0x9F, 0xB8, 0xC6, 0x98, 0xB3, 0xC0, 0x96, 0xB2, 0xBC, 0xA7, 0xBF, 
   0xC8, 0xA0, 0xB1, 0xC0, 0x94, 0xA4, 0xB4, 0x9D, 0xAE, 0xBA, 0xA7, 0xB5, 0xBF, 0xA3, 0xB2, 0xBE, 
   0x9E, 0xAF, 0xBC, 0x9D, 0xAD, 0xBC, 0x9D, 0xAD, 0xB9, 0xA0, 0xA9, 0xB6, 0x98, 0x9D, 0xAD, 0x82, 
   0x8C, 0xA0, 0x83, 0x90, 0x9D, 0x77, 0x84, 0x95, 0x6E, 0x7D, 0x8D, 0x69, 0x7A, 0x88, 0x68, 0x75, 
   0x86, 0x5F, 0x65, 0x74, 0x43, 0x46, 0x4C, 0x2F, 0x36, 0x39, 0x38, 0x40, 0x3D, 0x46, 0x4E, 0x48, 
   0x58, 0x5E, 0x56, 0x60, 0x60, 0x5D, 0x5D, 0x5F, 0x5F, 0x68, 0x74, 0x71, 0x8C, 0x96, 0x93, 0x94, 
   0x96, 0x96, 0x81, 0x83, 0x87, 0x60, 0x5C, 0x60, 0x4D, 0x48, 0x46, 0x4C, 0x4D, 0x49, 0x61, 0x66, 
   0x61, 0x7D, 0x7F, 0x7B, 0x84, 0x81, 0x7C, 0x85, 0x7F, 0x77, 0x84, 0x7C, 0x77, 0x80, 0x7D, 0x79, 
   0x80, 0x7D, 0x7C, 0x88, 0x84, 0x84, 0x8F, 0x8A, 0x8A, 0x90, 0x8A, 0x8B, 0x96, 0x92, 0x8F, 0xA2, 
   0x9F, 0x98, 0xA6, 0xA5, 0x9B, 0xA6, 0xA5, 0x9B, 0xA9, 0xA3, 0x9C, 0xA5, 0xA4, 0xA1, 0xAB, 0xA5, 
   0xA6, 0x84, 0x73, 0x7D, 0x5A, 0x53, 0x64, 0x77, 0x7D, 0x94, 0x84, 0x88, 0xA6, 0x83, 0x83, 0x9B, 
   0x7D, 0x7F, 0x96, 0x7C, 0x7C, 0x95, 0x75, 0x78, 0x92, 0x61, 0x66, 0x80, 0x58, 0x5E, 0x74, 0x59, 
   0x62, 0x74, 0x5E, 0x68, 0x75, 0x6A, 0x70, 0x7E, 0x6C, 0x71, 0x7A, 0x6B, 0x71, 0x75, 0x79, 0x7D, 
   0x7C, 0x89, 0x8D, 0x8A, 0x91, 0x99, 0x99, 0x92, 0x99, 0xA1, 0x8F, 0x9A, 0xA7, 0x8E, 0x9B, 0xA7, 
   0x90, 0x9B, 0xA8, 0x8F, 0x96, 0xA6, 0x85, 0x85, 0x93, 0x7B, 0x77, 0x7A, 0x84, 0x82, 0x7D, 0x8E, 
   0x8E, 0x89, 0xA0, 0x9C, 0x9E, 0x9F, 0x95, 0x94, 0x8F, 0x83, 0x7F, 0x92, 0x8E, 0x85, 0xB0, 0xAC, 
   0xA0, 0xBE, 0xB8, 0xAB, 0xCD, 0xC5, 0xB9, 0xD7, 0xCB, 0xBE, 0xDA, 0xCF, 0xC1, 0xDD, 0xD2, 0xC4, 
   0xDD, 0xCD, 0xBF, 0xD6, 0xC8, 0xBC, 0x8B, 0x90, 0x90, 0x8B, 0x8E, 0x8F, 0x9C, 0x9C, 0x9B, 0xA2, 
   0xA1, 0xA3, 0xBB, 0xBD, 0xBF, 0x95, 0x9C, 0xA2, 0x7A, 0x84, 0x8A, 0x96, 0xA0, 0xA7, 0x9D, 0xA6, 
   0xB0, 0x9D, 0xAA, 0xB0, 0xA1, 0xAD, 0xB3, 0xA3, 0xAA, 0xB4, 0x9C, 0xA2, 0xAF, 0x9C, 0xA5, 0xB4, 
   0x9B, 0xA7, 0xB5, 0x97, 0xA2, 0xB0, 0x93, 0x9C, 0xAB, 0x90, 0x9A, 0xA5, 0x75, 0x7C, 0x85, 0x66, 
   0x67, 0x71, 0x84, 0x86, 0x90, 0x97, 0x9D, 0xA3, 0x7B, 0x83, 0x86, 0x81, 0x82, 0x81, 0x91, 0x92, 
   0x94, 0x89, 0x89, 0x8A, 0x84, 0x82, 0x80, 0x7B, 0x7B, 0x78, 0x77, 0x77, 0x76, 0x73, 0x72, 0x6F, 
   0x6D, 0x71, 0x6D, 0x6C, 0x72, 0x72, 0x6D, 0x71, 0x74, 0x6C, 0x6F, 0x72, 0x6F, 0x74, 0x76, 0x78, 
   0x7B, 0x7C, 0x81, 0x82, 0x82, 0x83, 0x86, 0x82, 0x82, 0x85, 0x82, 0x73, 0x78, 0x78, 0x61, 0x66, 
   0x6B, 0x47, 0x4C, 0x52, 0x39, 0x3D, 0x40, 0x45, 0x4A, 0x4C, 0x77, 0x7C, 0x7D, 0x8F, 0x92, 0x94, 
   0x8B, 0x8F, 0x96, 0x88, 0x89, 0x91, 0x8C, 0x89, 0x8E, 0x8B, 0x87, 0x8D, 0x8A, 0x87, 0x8F, 0x8B, 
   0x89, 0x91, 0x8D, 0x8A, 0x93, 0x92, 0x90, 0x99, 0x90, 0x8E, 0x96, 0x93, 0x91, 0x97, 0x92, 0x91, 
   0x94, 0x8D, 0x8E, 0x94, 0x8F, 0x8E, 0x96, 0x97, 0x97, 0x9E, 0x9F, 0x9F, 0xA2, 0x9C, 0x9C, 0x9E, 
   0xA0, 0x9F, 0xA2, 0x98, 0x95, 0x9C, 0x74, 0x70, 0x74, 0x75, 0x6E, 0x6B, 0x72, 0x70, 0x6D, 0x59, 
   0x63, 0x64, 0x4A, 0x55, 0x5F, 0x63, 0x6F, 0x7C, 0x9E, 0xB0, 0xB4, 0xA3, 0xB3, 0xB5, 0xA0, 0xAE, 
   0xAF, 0x9B, 0xA9, 0xAC, 0x86, 0x98, 0x9D, 0x85, 0x97, 0x9D, 0x8D, 0x99, 0x9E, 0x8A, 0x93, 0x95, 
   0x89, 0x91, 0x90, 0x92, 0x98, 0x99, 0x9C, 0x9D, 0x9F, 0x60, 0x5E, 0x60, 0x40, 0x40, 0x43, 0x3C, 
   0x3C, 0x40, 0x38, 0x3B, 0x3D, 0x56, 0x5D, 0x5C, 0x56, 0x5F, 0x61, 0x5C, 0x65, 0x66, 0x88, 0x94, 
   0x94, 0x83, 0x8C, 0x8C, 0x7F, 0x8E, 0x8B, 0xBB, 0xC8, 0xCA, 0xCB, 0xD1, 0xD5, 0x8A, 0x92, 0x9F, 
   0x79, 0x82, 0x96, 0x7D, 0x84, 0x99, 0x75, 0x82, 0x9A, 0x72, 0x88, 0x9C, 0x79, 0x8B, 0x9F, 0x78, 
   0x87, 0x9B, 0x78, 0x86, 0x98, 0x77, 0x84, 0x95, 0x79, 0x89, 0x98, 0x79, 0x8E, 0x9B, 0x73, 0x8C, 
   0x98, 0x6D, 0x8B, 0x97, 0x6F, 0x8D, 0x9E, 0x70, 0x90, 0xA5, 0x74, 0x93, 0xA8, 0x70, 0x8D, 0x9D, 
   0x6A, 0x83, 0x8D, 0x67, 0x7E, 0x83, 0x7A, 0x91, 0x97, 0x7A, 0x91, 0x9A, 0x7A, 0x91, 0x9D, 0x89, 
   0xA1, 0xAE, 0x8E, 0xA9, 0xB6, 0x86, 0x9A, 0xAC, 0x6D, 0x79, 0x8E, 0x6C, 0x75, 0x87, 0x8E, 0x97, 
   0xA5, 0x95, 0x9A, 0xA9, 0x79, 0x81, 0x8D, 0x82, 0x8E, 0x9B, 0xA3, 0xAD, 0xBA, 0xA9, 0xAA, 0xB8, 
   0x9B, 0x9C, 0xAA, 0xA6, 0xA6, 0xB4, 0x83, 0x88, 0x97, 0x8D, 0x97, 0xA7, 0x9E, 0x9F, 0xB0, 0x83, 
   0x7F, 0x8D, 0x40, 0x3E, 0x47, 0x3B, 0x3E, 0x43, 0x51, 0x50, 0x53, 0x5A, 0x55, 0x57, 0x60, 0x5D, 
   0x5F, 0x60, 0x5E, 0x61, 0x60, 0x5E, 0x61, 0x64, 0x60, 0x65, 0x59, 0x56, 0x5A, 0x43, 0x44, 0x4A, 
   0x3E, 0x42, 0x4A, 0x3F, 0x43, 0x47, 0x3C, 0x3D, 0x3D, 0x40, 0x41, 0x40, 0x45, 0x44, 0x43, 0x43, 
   0x46, 0x47, 0x4B, 0x52, 0x5E, 0x4A, 0x54, 0x6E, 0x4B, 0x59, 0x6B, 0xA9, 0xB7, 0xBF, 0xAA, 0xAB, 
   0xB5, 0x9B, 0xA2, 0xAE, 0x8F, 0x9E, 0xAC, 0x8F, 0xA5, 0xB6, 0x90, 0xA9, 0xBA, 0x92, 0xA7, 0xB9, 
   0x95, 0xA6, 0xB6, 0x97, 0xA6, 0xB4, 0xA2, 0xB2, 0xBD, 0xA2, 0xB5, 0xC0, 0xA0, 0xBA, 0xC2, 0xA0, 
   0xBB, 0xC4, 0xA2, 0xB9, 0xC6, 0x9F, 0xB3, 0xC2, 0x97, 0xAF, 0xBC, 0x94, 0xAC, 0xB7, 0xA2, 0xB6, 
   0xC0, 0xA1, 0xB1, 0xBF, 0x9F, 0xAC, 0xBC, 0xA2, 0xAF, 0xBE, 0xA3, 0xB1, 0xBC, 0x9B, 0xA9, 0xB7, 
   0x97, 0xA7, 0xB7, 0x8E, 0xA0, 0xAE, 0x90, 0xA1, 0xAC, 0x96, 0xA3, 0xAC, 0x8F, 0x9C, 0xA6, 0x7F, 
   0x91, 0x9E, 0x7C, 0x8D, 0x97, 0x6F, 0x7D, 0x88, 0x65, 0x70, 0x7E, 0x60, 0x6C, 0x7B, 0x58, 0x64, 
   0x70, 0x4E, 0x58, 0x5D, 0x43, 0x4B, 0x4A, 0x42, 0x4A, 0x48, 0x47, 0x52, 0x4B, 0x4E, 0x55, 0x4F, 
   0x56, 0x56, 0x51, 0x5C, 0x5B, 0x59, 0x5B, 0x61, 0x5E, 0x62, 0x6D, 0x67, 0x6A, 0x70, 0x6C, 0x79, 
   0x7B, 0x78, 0x7E, 0x81, 0x83, 0x7E, 0x7D, 0x82, 0x6A, 0x64, 0x66, 0x44, 0x44, 0x42, 0x53, 0x59, 
   0x54, 0x70, 0x77, 0x6E, 0x7D, 0x7F, 0x74, 0x83, 0x7F, 0x74, 0x84, 0x7E, 0x74, 0x81, 0x7C, 0x75, 
   0x7C, 0x7A, 0x78, 0x85, 0x82, 0x7F, 0x8E, 0x8A, 0x88, 0x96, 0x91, 0x92, 0x9A, 0x96, 0x94, 0xA4, 
   0xA0, 0x9B, 0xA4, 0xA2, 0x9A, 0xA5, 0xA3, 0x9A, 0xA8, 0xA4, 0xA0, 0xA9, 0xA8, 0xA6, 0xAA, 0xA2, 
   0xA4, 0x84, 0x76, 0x84, 0x79, 0x75, 0x8C, 0x7C, 0x83, 0x9F, 0x80, 0x83, 0xA3, 0x81, 0x83, 0x9B, 
   0x81, 0x85, 0x9C, 0x86, 0x87, 0xA0, 0x84, 0x85, 0xA0, 0x73, 0x74, 0x8F, 0x5E, 0x5D, 0x77, 0x56, 
   0x59, 0x70, 0x5E, 0x63, 0x76, 0x60, 0x66, 0x75, 0x66, 0x70, 0x79, 0x6D, 0x77, 0x7C, 0x6E, 0x74, 
   0x77, 0x75, 0x7D, 0x7E, 0x7E, 0x8A, 0x8D, 0x82, 0x8D, 0x98, 0x82, 0x91, 0x9B, 0x84, 0x93, 0x99, 
   0x86, 0x93, 0x99, 0x8C, 0x94, 0x9E, 0x8D, 0x8F, 0x9B, 0x81, 0x7D, 0x80, 0x88, 0x84, 0x7F, 0x89, 
   0x88, 0x85, 0x87, 0x88, 0x8F, 0x71, 0x70, 0x73, 0x7C, 0x79, 0x71, 0x9E, 0x9C, 0x90, 0xBB, 0xB3, 
   0xA5, 0xCB, 0xC1, 0xB2, 0xD4, 0xC9, 0xBA, 0xD8, 0xCA, 0xBC, 0xD9, 0xCE, 0xBF, 0xDC, 0xD2, 0xC3, 
   0xDF, 0xD0, 0xC1, 0xD9, 0xC9, 0xBC, 0x8A, 0x87, 0x87, 0x8A, 0x89, 0x89, 0x8C, 0x8B, 0x8B, 0x97, 
   0x92, 0x98, 0xAC, 0xAD, 0xB2, 0x8F, 0x97, 0x9E, 0x92, 0x9B, 0xA1, 0x9D, 0xA1, 0xA8, 0x9B, 0x9E, 
   0xA7, 0x99, 0xA1, 0xA7, 0x9D, 0xA5, 0xAC, 0x9F, 0xA4, 0xAE, 0x9C, 0xA1, 0xAE, 0x9F, 0xA6, 0xB2, 
   0x9F, 0xA7, 0xB4, 0x9C, 0xA6, 0xB2, 0x92, 0x9C, 0xAB, 0x93, 0x9E, 0xA9, 0x7C, 0x84, 0x8D, 0x5C, 
   0x5E, 0x68, 0x6B, 0x6E, 0x77, 0x81, 0x86, 0x8B, 0x7F, 0x84, 0x83, 0x87, 0x8B, 0x8C, 0x8F, 0x91, 
   0x91, 0x82, 0x81, 0x84, 0x87, 0x85, 0x83, 0x7B, 0x7B, 0x79, 0x75, 0x76, 0x77, 0x6D, 0x6D, 0x68, 
   0x6C, 0x6C, 0x6A, 0x6A, 0x6D, 0x6E, 0x68, 0x6C, 0x6E, 0x71, 0x76, 0x76, 0x71, 0x79, 0x78, 0x7A, 
   0x80, 0x7A, 0x83, 0x86, 0x7F, 0x83, 0x86, 0x83, 0x83, 0x88, 0x86, 0x82, 0x88, 0x88, 0x7C, 0x85, 
   0x84, 0x81, 0x89, 0x86, 0x7E, 0x82, 0x81, 0x6B, 0x6F, 0x6F, 0x7F, 0x84, 0x87, 0x91, 0x95, 0x99, 
   0x8B, 0x8F, 0x99, 0x88, 0x88, 0x93, 0x88, 0x85, 0x8C, 0x8C, 0x87, 0x8E, 0x8B, 0x89, 0x91, 0x8A, 
   0x89, 0x91, 0x86, 0x83, 0x8C, 0x84, 0x83, 0x8B, 0x82, 0x83, 0x8A, 0x83, 0x83, 0x87, 0x89, 0x86, 
   0x89, 0x88, 0x8A, 0x93, 0x85, 0x88, 0x90, 0x93, 0x95, 0x9A, 0x97, 0x95, 0x97, 0x94, 0x95, 0x95, 
   0xA5, 0xA6, 0xA9, 0x8E, 0x8E, 0x96, 0x78, 0x76, 0x7B, 0x73, 0x70, 0x70, 0x6A, 0x6B, 0x6D, 0x61, 
   0x6A, 0x6E, 0x5A, 0x63, 0x6B, 0x57, 0x5F, 0x65, 0x6B, 0x78, 0x74, 0x94, 0xA0, 0x9A, 0xAF, 0xBA, 
   0xB9, 0xA8, 0xB6, 0xBA, 0x84, 0x98, 0xA0, 0x79, 0x8F, 0x9B, 0x7D, 0x8F, 0x97, 0x7B, 0x8A, 0x8F, 
   0x76, 0x84, 0x87, 0x7B, 0x84, 0x86, 0x89, 0x8D, 0x8E, 0x6F, 0x6F, 0x6F, 0x42, 0x3F, 0x40, 0x3E, 
   0x3C, 0x3C, 0x34, 0x35, 0x38, 0x46, 0x4A, 0x4C, 0x50, 0x57, 0x58, 0x5F, 0x68, 0x64, 0x7C, 0x84, 
   0x81, 0x78, 0x7F, 0x7E, 0x88, 0x92, 0x92, 0xB1, 0xBA, 0xBC, 0xA3, 0xA7, 0xAC, 0x7B, 0x82, 0x8E, 
   0x77, 0x7D, 0x8F, 0x7A, 0x7C, 0x91, 0x70, 0x7B, 0x93, 0x6B, 0x80, 0x98, 0x72, 0x85, 0x9A, 0x74, 
   0x85, 0x96, 0x6E, 0x7C, 0x8E, 0x6F, 0x7C, 0x8D, 0x73, 0x83, 0x91, 0x75, 0x89, 0x95, 0x7A, 0x8F, 
   0x9C, 0x81, 0x9C, 0xAA, 0x84, 0x9C, 0xAF, 0x79, 0x93, 0xA7, 0x78, 0x97, 0xA7, 0x76, 0x94, 0x9F, 
   0x72, 0x8B, 0x91, 0x73, 0x8D, 0x90, 0x82, 0x9C, 0x9D, 0x7E, 0x97, 0x9C, 0x84, 0x98, 0xA0, 0x76, 
   0x86, 0x8E, 0x6C, 0x79, 0x84, 0x6D, 0x78, 0x88, 0x6A, 0x72, 0x88, 0x74, 0x7C, 0x91, 0x91, 0x99, 
   0xA9, 0x96, 0x9A, 0xA8, 0x87, 0x8D, 0x98, 0x9F, 0xA7, 0xB4, 0xB8, 0xBD, 0xCA, 0xAD, 0xAD, 0xB9, 
   0xA4, 0xA4, 0xAE, 0xA0, 0x9F, 0xAB, 0x7D, 0x80, 0x90, 0xA6, 0xAF, 0xBE, 0xA7, 0xA8, 0xBA, 0x7B, 
   0x78, 0x87, 0x48, 0x45, 0x4D, 0x47, 0x48, 0x4B, 0x55, 0x50, 0x53, 0x63, 0x5B, 0x5E, 0x63, 0x60, 
   0x62, 0x66, 0x62, 0x66, 0x64, 0x60, 0x65, 0x62, 0x5D, 0x64, 0x45, 0x45, 0x48, 0x3A, 0x3F, 0x42, 
   0x44, 0x48, 0x50, 0x47, 0x4A, 0x50, 0x48, 0x47, 0x49, 0x4B, 0x49, 0x49, 0x50, 0x50, 0x4F, 0x53, 
   0x57, 0x58, 0x54, 0x5A, 0x66, 0x4C, 0x55, 0x6E, 0x52, 0x5E, 0x6C, 0x9C, 0xA6, 0xAD, 0xA8, 0xA8, 
   0xB5, 0xA2, 0xA9, 0xB8, 0x8E, 0xA2, 0xB3, 0x85, 0xA1, 0xB6, 0x87, 0xA2, 0xB7, 0x91, 0xA6, 0xB9, 
   0x97, 0xAA, 0xB8, 0xA4, 0xB7, 0xC2, 0xB0, 0xC1, 0xCA, 0xA7, 0xB9, 0xC2, 0xA4, 0xBA, 0xC4, 0x9F, 
   0xB8, 0xC2, 0x9F, 0xB3, 0xC0, 0x9F, 0xB1, 0xC0, 0x9C, 0xB0, 0xBD, 0x9C, 0xB0, 0xBC, 0x9E, 0xB2, 
   0xBC, 0x9B, 0xAE, 0xB9, 0x9D, 0xAC, 0xBA, 0xA0, 0xAE, 0xBD, 0x98, 0xAA, 0xB6, 0x8D, 0x9F, 0xAE, 
   0x88, 0x99, 0xA9, 0x80, 0x96, 0xA2, 0x84, 0x9B, 0xA4, 0x87, 0x99, 0xA1, 0x7C, 0x90, 0x96, 0x6D, 
   0x83, 0x8B, 0x6A, 0x77, 0x85, 0x5F, 0x6C, 0x76, 0x5A, 0x66, 0x74, 0x58, 0x62, 0x74, 0x4D, 0x58, 
   0x60, 0x34, 0x3E, 0x3B, 0x3B, 0x40, 0x3B, 0x47, 0x4D, 0x49, 0x4E, 0x58, 0x52, 0x5C, 0x62, 0x60, 
   0x5F, 0x5E, 0x5E, 0x59, 0x58, 0x59, 0x53, 0x59, 0x58, 0x56, 0x5B, 0x57, 0x57, 0x59, 0x58, 0x56, 
   0x59, 0x58, 0x5A, 0x5D, 0x61, 0x6D, 0x72, 0x78, 0x88, 0x84, 0x87, 0x5C, 0x58, 0x58, 0x45, 0x48, 
   0x45, 0x60, 0x68, 0x5C, 0x77, 0x7C, 0x6F, 0x81, 0x7E, 0x73, 0x82, 0x7E, 0x72, 0x80, 0x7C, 0x73, 
   0x7A, 0x79, 0x73, 0x82, 0x80, 0x7A, 0x8A, 0x87, 0x83, 0x96, 0x92, 0x90, 0x9E, 0x99, 0x98, 0xA0, 
   0x9C, 0x99, 0xA3, 0xA0, 0x9B, 0xA6, 0xA3, 0x9D, 0xA8, 0xA5, 0xA3, 0xAA, 0xA7, 0xA7, 0xA3, 0x9B, 
   0x9E, 0x8F, 0x87, 0x97, 0x88, 0x86, 0xA0, 0x7F, 0x82, 0xA2, 0x7E, 0x81, 0xA1, 0x7E, 0x83, 0x9F, 
   0x83, 0x88, 0xA2, 0x84, 0x85, 0xA0, 0x86, 0x87, 0xA3, 0x8B, 0x89, 0xA6, 0x7E, 0x79, 0x95, 0x5D, 
   0x5B, 0x74, 0x61, 0x63, 0x7D, 0x5B, 0x64, 0x75, 0x58, 0x67, 0x74, 0x66, 0x73, 0x7F, 0x6A, 0x74, 
   0x80, 0x64, 0x70, 0x7A, 0x5F, 0x6E, 0x76, 0x68, 0x75, 0x80, 0x71, 0x7F, 0x87, 0x77, 0x81, 0x87, 
   0x80, 0x86, 0x8C, 0x85, 0x8A, 0x91, 0x85, 0x88, 0x90, 0x80, 0x7F, 0x7F, 0x84, 0x83, 0x7C, 0x8B, 
   0x84, 0x83, 0x87, 0x85, 0x8D, 0x7A, 0x78, 0x7D, 0x8F, 0x8E, 0x82, 0xBD, 0xBC, 0xAC, 0xC7, 0xBD, 
   0xAD, 0xD3, 0xC7, 0xB4, 0xD9, 0xCB, 0xBB, 0xDA, 0xCC, 0xBC, 0xD8, 0xCD, 0xBF, 0xDA, 0xD0, 0xC2, 
   0xDA, 0xCD, 0xC0, 0xD8, 0xC9, 0xBE, 0x8A, 0x81, 0x82, 0x87, 0x87, 0x85, 0x86, 0x8A, 0x89, 0x8F, 
   0x8F, 0x98, 0xA1, 0xA6, 0xAE, 0x9C, 0xA3, 0xAE, 0x9E, 0xA4, 0xAC, 0xA0, 0xA2, 0xAA, 0x9E, 0xA0, 
   0xA8, 0x9E, 0xA3, 0xA9, 0x9E, 0xA3, 0xAC, 0x9D, 0xA4, 0xAE, 0x9F, 0xA5, 0xB2, 0x9F, 0xA6, 0xB2, 
   0x9B, 0xA2, 0xAD, 0x94, 0x9D, 0xA7, 0x8E, 0x99, 0xA4, 0x8E, 0x9A, 0xA5, 0x86, 0x92, 0x98, 0x6E, 
   0x75, 0x7B, 0x62, 0x66, 0x6E, 0x74, 0x76, 0x7C, 0x84, 0x85, 0x81, 0x81, 0x80, 0x7F, 0x79, 0x76, 
   0x7A, 0x83, 0x7C, 0x83, 0x8D, 0x86, 0x8B, 0x84, 0x80, 0x84, 0x7C, 0x79, 0x7B, 0x7D, 0x76, 0x73, 
   0x7A, 0x73, 0x77, 0x6A, 0x6A, 0x6D, 0x68, 0x6C, 0x6C, 0x78, 0x80, 0x7D, 0x80, 0x89, 0x87, 0x7D, 
   0x85, 0x81, 0x7D, 0x81, 0x7B, 0x82, 0x82, 0x7E, 0x85, 0x86, 0x87, 0x82, 0x87, 0x8B, 0x7C, 0x88, 
   0x88, 0x7B, 0x8A, 0x87, 0x86, 0x93, 0x8F, 0x81, 0x8B, 0x89, 0x79, 0x7E, 0x7F, 0x84, 0x88, 0x8C, 
   0x89, 0x8E, 0x98, 0x82, 0x85, 0x8F, 0x83, 0x82, 0x89, 0x87, 0x86, 0x8C, 0x8F, 0x8C, 0x94, 0x92, 
   0x8E, 0x97, 0x8A, 0x87, 0x8F, 0x7C, 0x7C, 0x82, 0x7D, 0x81, 0x86, 0x7D, 0x80, 0x85, 0x80, 0x80, 
   0x85, 0x85, 0x86, 0x91, 0x8C, 0x90, 0x99, 0x96, 0x9B, 0x9F, 0x9A, 0x9B, 0x9E, 0x9B, 0x9E, 0xA0, 
   0xA5, 0xA9, 0xAC, 0x84, 0x86, 0x8A, 0x82, 0x82, 0x85, 0x8D, 0x8F, 0x8E, 0x6F, 0x74, 0x78, 0x5E, 
   0x67, 0x6E, 0x64, 0x6C, 0x76, 0x60, 0x67, 0x6D, 0x58, 0x61, 0x5E, 0x64, 0x6D, 0x6B, 0x81, 0x89, 
   0x8A, 0x92, 0x9F, 0xA0, 0x80, 0x93, 0x96, 0x72, 0x87, 0x8D, 0x74, 0x85, 0x89, 0x6F, 0x7E, 0x7F, 
   0x67, 0x74, 0x77, 0x6B, 0x74, 0x75, 0x76, 0x78, 0x78, 0x66, 0x64, 0x62, 0x42, 0x3F, 0x3F, 0x3B, 
   0x38, 0x38, 0x31, 0x30, 0x31, 0x34, 0x37, 0x36, 0x42, 0x49, 0x47, 0x4C, 0x5A, 0x55, 0x5B, 0x65, 
   0x63, 0x62, 0x68, 0x69, 0x81, 0x87, 0x89, 0x9D, 0xA2, 0xA7, 0x88, 0x8C, 0x96, 0x77, 0x7D, 0x8C, 
   0x72, 0x77, 0x88, 0x71, 0x76, 0x88, 0x6A, 0x78, 0x88, 0x60, 0x71, 0x83, 0x5D, 0x6D, 0x80, 0x63, 
   0x73, 0x83, 0x61, 0x6E, 0x7E, 0x62, 0x6D, 0x7D, 0x6A, 0x75, 0x83, 0x74, 0x80, 0x8C, 0x7D, 0x89, 
   0x96, 0x7B, 0x8C, 0x98, 0x7C, 0x91, 0x9F, 0x81, 0x9C, 0xA9, 0x7C, 0x9A, 0xA4, 0x75, 0x94, 0x9B, 
   0x76, 0x93, 0x9A, 0x7F, 0x9B, 0xA3, 0x88, 0x9F, 0xA5, 0x7A, 0x91, 0x9A, 0x72, 0x81, 0x8B, 0x4B, 
   0x51, 0x5A, 0x5C, 0x61, 0x6B, 0x66, 0x71, 0x81, 0x74, 0x7D, 0x92, 0x71, 0x78, 0x89, 0x7C, 0x81, 
   0x8D, 0x8A, 0x8C, 0x98, 0xA0, 0xA2, 0xAC, 0xAA, 0xAD, 0xBB, 0xB6, 0xB7, 0xC6, 0xAE, 0xAE, 0xBD, 
   0x9E, 0xA0, 0xAC, 0x97, 0x94, 0xA1, 0x70, 0x74, 0x84, 0x79, 0x83, 0x92, 0x7D, 0x82, 0x92, 0x71, 
   0x72, 0x80, 0x57, 0x55, 0x59, 0x54, 0x53, 0x53, 0x60, 0x59, 0x59, 0x6D, 0x65, 0x67, 0x5A, 0x59, 
   0x5C, 0x56, 0x54, 0x59, 0x54, 0x4E, 0x56, 0x41, 0x42, 0x44, 0x39, 0x3C, 0x3D, 0x51, 0x53, 0x58, 
   0x57, 0x56, 0x5F, 0x54, 0x52, 0x5A, 0x52, 0x50, 0x53, 0x5E, 0x5B, 0x5D, 0x52, 0x51, 0x53, 0x4E, 
   0x51, 0x52, 0x54, 0x59, 0x62, 0x52, 0x5B, 0x72, 0x4B, 0x58, 0x66, 0x8D, 0x97, 0x9E, 0xAB, 0xAE, 
   0xB8, 0xA5, 0xAF, 0xBD, 0x95, 0xA7, 0xBB, 0x94, 0xAF, 0xC6, 0x92, 0xB2, 0xCA, 0x8C, 0xA9, 0xBD, 
   0x97, 0xAF, 0xBD, 0xA2, 0xB7, 0xC3, 0xAC, 0xBE, 0xCB, 0xA8, 0xB9, 0xC6, 0xA1, 0xB5, 0xC1, 0x9C, 
   0xB4, 0xC0, 0x9A, 0xB0, 0xBC, 0x9A, 0xAE, 0xB9, 0x9D, 0xB1, 0xBB, 0x9C, 0xAF, 0xBB, 0x98, 0xAD, 
   0xB7, 0x93, 0xAC, 0xB5, 0x96, 0xAB, 0xB9, 0x98, 0xAA, 0xBA, 0x90, 0xA7, 0xB4, 0x7E, 0x95, 0xA2, 
   0x7B, 0x8F, 0x9D, 0x72, 0x8D, 0x98, 0x79, 0x92, 0x9C, 0x7A, 0x8E, 0x98, 0x6F, 0x83, 0x8D, 0x64, 
   0x74, 0x80, 0x5B, 0x66, 0x75, 0x50, 0x5D, 0x68, 0x4F, 0x59, 0x66, 0x4A, 0x51, 0x5D, 0x3B, 0x41, 
   0x45, 0x31, 0x36, 0x31, 0x2B, 0x2F, 0x2B, 0x2A, 0x33, 0x2F, 0x32, 0x3C, 0x39, 0x39, 0x44, 0x45, 
   0x43, 0x4B, 0x4A, 0x54, 0x5A, 0x5B, 0x61, 0x67, 0x69, 0x5D, 0x61, 0x62, 0x60, 0x67, 0x68, 0x6E, 
   0x73, 0x78, 0x65, 0x6A, 0x71, 0x69, 0x6F, 0x72, 0x82, 0x83, 0x82, 0x74, 0x70, 0x74, 0x3D, 0x3B, 
   0x3D, 0x57, 0x5C, 0x54, 0x78, 0x7D, 0x73, 0x85, 0x82, 0x7C, 0x7F, 0x7D, 0x74, 0x82, 0x7E, 0x75, 
   0x80, 0x7F, 0x78, 0x81, 0x81, 0x79, 0x89, 0x87, 0x80, 0x9B, 0x96, 0x96, 0xA3, 0x9E, 0x9E, 0xA1, 
   0x9D, 0x9B, 0xA4, 0xA1, 0x9C, 0xAB, 0xA8, 0xA2, 0xAF, 0xA7, 0xA5, 0xA0, 0x9B, 0x9C, 0x95, 0x8E, 
   0x94, 0x90, 0x8C, 0x9C, 0x8B, 0x8A, 0xA5, 0x89, 0x87, 0xA8, 0x81, 0x84, 0xA6, 0x83, 0x85, 0xAE, 
   0x85, 0x87, 0xAA, 0x85, 0x85, 0xA3, 0x88, 0x89, 0xA7, 0x8B, 0x8B, 0xAB, 0x91, 0x8D, 0xA9, 0x7B, 
   0x79, 0x90, 0x62, 0x63, 0x7D, 0x5A, 0x63, 0x78, 0x55, 0x64, 0x79, 0x5E, 0x69, 0x7B, 0x6D, 0x74, 
   0x87, 0x65, 0x6F, 0x81, 0x51, 0x5B, 0x69, 0x4F, 0x5A, 0x63, 0x61, 0x69, 0x71, 0x6C, 0x6E, 0x77, 
   0x72, 0x73, 0x7C, 0x78, 0x7C, 0x85, 0x7B, 0x81, 0x89, 0x7A, 0x82, 0x85, 0x7C, 0x84, 0x82, 0x88, 
   0x85, 0x87, 0x8C, 0x89, 0x91, 0x82, 0x7B, 0x7D, 0x8C, 0x87, 0x78, 0xBC, 0xB9, 0xA9, 0xC1, 0xBA, 
   0xA9, 0xD6, 0xCC, 0xB9, 0xDE, 0xD0, 0xBF, 0xDE, 0xD0, 0xC1, 0xDA, 0xCD, 0xBF, 0xD4, 0xC8, 0xBB, 
   0xCF, 0xC4, 0xB7, 0xD6, 0xCA, 0xBE, 0x7E, 0x73, 0x7B, 0x75, 0x75, 0x78, 0x75, 0x7C, 0x7F, 0x86, 
   0x8F, 0x99, 0x91, 0x9D, 0xA7, 0x98, 0xA1, 0xAF, 0x9C, 0xA2, 0xAD, 0x96, 0x9E, 0xA7, 0x9C, 0xA0, 
   0xA9, 0x9E, 0xA2, 0xA9, 0x9C, 0xA2, 0xAC, 0x97, 0xA2, 0xAC, 0x9B, 0xA6, 0xB2, 0x9F, 0xA7, 0xB3, 
   0x9C, 0xA4, 0xAE, 0x98, 0xA0, 0xA8, 0x96, 0x9E, 0xA4, 0x98, 0xA2, 0xA9, 0x8D, 0x98, 0x9D, 0x79, 
   0x82, 0x87, 0x6D, 0x74, 0x7D, 0x75, 0x79, 0x82, 0x82, 0x83, 0x81, 0x74, 0x70, 0x6D, 0x7A, 0x74, 
   0x7A, 0x87, 0x80, 0x86, 0x89, 0x83, 0x8B, 0x8B, 0x86, 0x8D, 0x85, 0x81, 0x81, 0x85, 0x7D, 0x7B, 
   0x7A, 0x74, 0x7B, 0x7A, 0x7A, 0x7F, 0x7E, 0x85, 0x84, 0x82, 0x8C, 0x88, 0x82, 0x8E, 0x8E, 0x83, 
   0x8D, 0x8E, 0x83, 0x8B, 0x89, 0x83, 0x86, 0x84, 0x83, 0x86, 0x81, 0x82, 0x87, 0x82, 0x81, 0x8C, 
   0x89, 0x7D, 0x8C, 0x8B, 0x7C, 0x8C, 0x8A, 0x7D, 0x89, 0x88, 0x73, 0x7A, 0x79, 0x73, 0x7A, 0x7C, 
   0x8E, 0x94, 0x9A, 0x81, 0x85, 0x8D, 0x82, 0x84, 0x88, 0x89, 0x8A, 0x8F, 0x8D, 0x90, 0x96, 0x90, 
   0x96, 0x9C, 0x90, 0x94, 0x99, 0x87, 0x8E, 0x92, 0x8B, 0x91, 0x96, 0x94, 0x97, 0x9E, 0x8D, 0x8C, 
   0x94, 0x86, 0x86, 0x91, 0x8D, 0x92, 0x98, 0x91, 0x97, 0x9C, 0x9A, 0xA0, 0xA5, 0xA6, 0xAC, 0xB1, 
   0xA4, 0xA9, 0xAC, 0x79, 0x7B, 0x7A, 0x87, 0x88, 0x8D, 0x93, 0x9A, 0x9B, 0x79, 0x84, 0x86, 0x72, 
   0x7E, 0x82, 0x70, 0x7A, 0x80, 0x6F, 0x76, 0x7A, 0x65, 0x6C, 0x6B, 0x62, 0x6F, 0x6F, 0x6A, 0x75, 
   0x74, 0x6E, 0x7A, 0x76, 0x73, 0x82, 0x7E, 0x6F, 0x7D, 0x7E, 0x6B, 0x75, 0x76, 0x5E, 0x65, 0x62, 
   0x5A, 0x5F, 0x5A, 0x54, 0x57, 0x51, 0x4B, 0x47, 0x41, 0x50, 0x48, 0x44, 0x4A, 0x45, 0x43, 0x3D, 
   0x38, 0x3B, 0x39, 0x35, 0x36, 0x3F, 0x41, 0x3F, 0x3C, 0x44, 0x46, 0x3E, 0x4F, 0x50, 0x4E, 0x5C, 
   0x5C, 0x51, 0x59, 0x57, 0x70, 0x76, 0x71, 0x98, 0x9C, 0xA0, 0x74, 0x78, 0x85, 0x6B, 0x70, 0x80, 
   0x67, 0x6E, 0x7E, 0x64, 0x6F, 0x7E, 0x65, 0x74, 0x7D, 0x5B, 0x68, 0x74, 0x52, 0x63, 0x74, 0x53, 
   0x64, 0x73, 0x55, 0x64, 0x73, 0x55, 0x64, 0x73, 0x5A, 0x69, 0x74, 0x68, 0x76, 0x7F, 0x7A, 0x87, 
   0x92, 0x80, 0x8D, 0x9C, 0x7D, 0x97, 0xA4, 0x80, 0x9E, 0xA9, 0x76, 0x94, 0x9D, 0x74, 0x92, 0x98, 
   0x7A, 0x97, 0xA0, 0x81, 0x9F, 0xAA, 0x84, 0xA0, 0xAE, 0x6A, 0x83, 0x92, 0x49, 0x57, 0x66, 0x58, 
   0x5A, 0x66, 0x7C, 0x7B, 0x88, 0x6D, 0x73, 0x84, 0x70, 0x79, 0x8B, 0x7B, 0x82, 0x91, 0xA3, 0xA8, 
   0xB3, 0xAC, 0xAF, 0xB9, 0xA8, 0xAB, 0xB7, 0x9B, 0x9F, 0xAF, 0x92, 0x98, 0xAA, 0x93, 0x99, 0xAA, 
   0x93, 0x96, 0xA5, 0x8B, 0x8A, 0x9A, 0x78, 0x7C, 0x8D, 0x70, 0x7C, 0x8A, 0x73, 0x7B, 0x89, 0x6E, 
   0x72, 0x7D, 0x69, 0x64, 0x66, 0x5F, 0x5F, 0x5C, 0x65, 0x65, 0x63, 0x6C, 0x66, 0x67, 0x67, 0x5F, 
   0x63, 0x5E, 0x59, 0x5F, 0x45, 0x47, 0x4E, 0x36, 0x3E, 0x3C, 0x4B, 0x50, 0x52, 0x4F, 0x4E, 0x56, 
   0x50, 0x4C, 0x55, 0x54, 0x52, 0x57, 0x6D, 0x6A, 0x6E, 0x74, 0x6F, 0x77, 0x52, 0x4D, 0x53, 0x4E, 
   0x4E, 0x4F, 0x56, 0x58, 0x60, 0x4E, 0x58, 0x6D, 0x46, 0x53, 0x65, 0x7B, 0x8A, 0x90, 0xA9, 0xB1, 
   0xB7, 0xA3, 0xAB, 0xB7, 0x9D, 0xB2, 0xC4, 0x9C, 0xBB, 0xD2, 0x9C, 0xBC, 0xD6, 0x91, 0xAD, 0xC3, 
   0x94, 0xAF, 0xBE, 0x9B, 0xB5, 0xC2, 0xA4, 0xB8, 0xC7, 0x9E, 0xAF, 0xC0, 0x9A, 0xAD, 0xBC, 0x97, 
   0xAF, 0xBE, 0x93, 0xAC, 0xB7, 0x92, 0xA9, 0xB2, 0x99, 0xAD, 0xB6, 0x96, 0xA8, 0xB4, 0x89, 0xA0, 
   0xAA, 0x8B, 0xA7, 0xAF, 0x8B, 0xA3, 0xAE, 0x86, 0x9A, 0xAA, 0x76, 0x90, 0x9D, 0x72, 0x8D, 0x9A, 
   0x7A, 0x93, 0x9E, 0x79, 0x94, 0x9C, 0x71, 0x88, 0x92, 0x69, 0x7C, 0x8A, 0x61, 0x6F, 0x81, 0x60, 
   0x67, 0x79, 0x4E, 0x5A, 0x65, 0x48, 0x53, 0x5C, 0x48, 0x4F, 0x57, 0x45, 0x47, 0x4B, 0x29, 0x29, 
   0x29, 0x25, 0x26, 0x23, 0x35, 0x3B, 0x3B, 0x39, 0x45, 0x49, 0x3F, 0x49, 0x4F, 0x40, 0x51, 0x56, 
   0x52, 0x64, 0x65, 0x80, 0x8B, 0x8E, 0x93, 0x99, 0xA2, 0x9B, 0xA0, 0xA7, 0x9A, 0x9D, 0xA1, 0x86, 
   0x85, 0x90, 0x60, 0x61, 0x6C, 0x5C, 0x60, 0x61, 0x6C, 0x75, 0x6F, 0x81, 0x82, 0x86, 0x4B, 0x44, 
   0x4B, 0x51, 0x51, 0x4C, 0x79, 0x7A, 0x75, 0x75, 0x72, 0x71, 0x7E, 0x7D, 0x77, 0x7F, 0x7E, 0x77, 
   0x80, 0x80, 0x7A, 0x87, 0x87, 0x7F, 0x96, 0x93, 0x8D, 0xA3, 0x9E, 0x9D, 0xA5, 0x9F, 0xA1, 0xA3, 
   0xA0, 0x9C, 0xA6, 0xA4, 0x9D, 0xAD, 0xAA, 0xA4, 0xAC, 0x9F, 0xA2, 0x96, 0x8D, 0x94, 0x95, 0x8E, 
   0x99, 0x8E, 0x8C, 0xA0, 0x86, 0x87, 0xA0, 0x86, 0x87, 0xA4, 0x90, 0x96, 0xB5, 0x88, 0x8D, 0xB2, 
   0x7E, 0x81, 0xA0, 0x83, 0x82, 0x9D, 0x86, 0x87, 0xA4, 0x85, 0x88, 0xA7, 0x8C, 0x8B, 0xA7, 0x8C, 
   0x8C, 0xA2, 0x68, 0x66, 0x80, 0x54, 0x5A, 0x74, 0x57, 0x61, 0x7C, 0x5E, 0x62, 0x77, 0x62, 0x66, 
   0x75, 0x65, 0x6A, 0x76, 0x65, 0x69, 0x72, 0x5A, 0x63, 0x69, 0x55, 0x5C, 0x64, 0x5B, 0x5D, 0x65, 
   0x5F, 0x61, 0x69, 0x63, 0x68, 0x71, 0x67, 0x6F, 0x79, 0x6B, 0x74, 0x7D, 0x71, 0x79, 0x81, 0x7D, 
   0x7D, 0x85, 0x81, 0x82, 0x89, 0x7F, 0x78, 0x79, 0x65, 0x60, 0x54, 0x92, 0x92, 0x84, 0xA7, 0xA5, 
   0x96, 0xBB, 0xB5, 0xA5, 0xDB, 0xCF, 0xC0, 0xDB, 0xCF, 0xC0, 0xD7, 0xCB, 0xBC, 0xD4, 0xC6, 0xB9, 
   0xD4, 0xC9, 0xBC, 0xDE, 0xD2, 0xC4, 0x6F, 0x68, 0x76, 0x5D, 0x5A, 0x65, 0x54, 0x58, 0x60, 0x84, 
   0x8E, 0x98, 0x98, 0xA3, 0xAF, 0x9E, 0xA7, 0xB6, 0x9E, 0xA8, 0xB2, 0x9C, 0xA5, 0xAC, 0xA0, 0xA2, 
   0xA8, 0x9E, 0x9F, 0xA6, 0x9B, 0x9F, 0xA9, 0x9C, 0xA2, 0xAD, 0x9A, 0xA3, 0xAF, 0x9F, 0xA6, 0xB2, 
   0xA3, 0xA8, 0xB2, 0xA5, 0xA8, 0xB1, 0xA2, 0xA8, 0xAC, 0x9B, 0xA2, 0xA7, 0x8E, 0x90, 0x98, 0x79, 
   0x83, 0x8C, 0x6E, 0x79, 0x84, 0x6B, 0x75, 0x7C, 0x72, 0x75, 0x77, 0x69, 0x65, 0x64, 0x6C, 0x67, 
   0x68, 0x75, 0x70, 0x73, 0x83, 0x82, 0x86, 0x96, 0x91, 0x95, 0x90, 0x8E, 0x91, 0x8B, 0x8C, 0x8C, 
   0x8D, 0x8F, 0x8D, 0x8C, 0x8E, 0x91, 0x8A, 0x90, 0x95, 0x8B, 0x93, 0x98, 0x85, 0x8F, 0x91, 0x89, 
   0x94, 0x95, 0x89, 0x93, 0x95, 0x86, 0x8C, 0x90, 0x87, 0x89, 0x89, 0x84, 0x86, 0x85, 0x87, 0x8D, 
   0x8D, 0x83, 0x8E, 0x8E, 0x7E, 0x8C, 0x89, 0x80, 0x8A, 0x8A, 0x75, 0x7C, 0x7E, 0x5A, 0x63, 0x67, 
   0x6E, 0x73, 0x7A, 0x84, 0x85, 0x8D, 0x84, 0x86, 0x8D, 0x89, 0x89, 0x94, 0x8D, 0x8F, 0x95, 0x8C, 
   0x96, 0x97, 0x96, 0x98, 0x9E, 0x99, 0x9A, 0xA4, 0x9C, 0x9E, 0xA7, 0x95, 0x93, 0x9C, 0x8C, 0x8B, 
   0x91, 0x89, 0x89, 0x90, 0x90, 0x8D, 0x92, 0x8E, 0x8D, 0x93, 0x9B, 0xA0, 0xA5, 0xA6, 0xAB, 0xB0, 
   0xA0, 0xA2, 0xA5, 0x81, 0x86, 0x83, 0x8C, 0x8E, 0x8E, 0x82, 0x8A, 0x90, 0x73, 0x81, 0x89, 0x73, 
   0x84, 0x89, 0x76, 0x81, 0x86, 0x74, 0x78, 0x7C, 0x71, 0x74, 0x75, 0x6B, 0x79, 0x74, 0x71, 0x7D, 
   0x77, 0x77, 0x7F, 0x7C, 0x72, 0x78, 0x76, 0x68, 0x6F, 0x6F, 0x68, 0x74, 0x76, 0x65, 0x76, 0x74, 
   0x6C, 0x79, 0x77, 0x65, 0x6B, 0x68, 0x55, 0x55, 0x51, 0x51, 0x4B, 0x45, 0x41, 0x3B, 0x37, 0x3B, 
   0x3B, 0x3B, 0x42, 0x44, 0x47, 0x3E, 0x42, 0x46, 0x2B, 0x31, 0x35, 0x3A, 0x44, 0x49, 0x4D, 0x58, 
   0x5D, 0x49, 0x4F, 0x52, 0x5A, 0x5F, 0x62, 0x89, 0x8A, 0x95, 0x6E, 0x71, 0x7D, 0x61, 0x64, 0x70, 
   0x60, 0x66, 0x72, 0x5D, 0x66, 0x74, 0x5E, 0x66, 0x74, 0x54, 0x5F, 0x6A, 0x4C, 0x5C, 0x69, 0x4E, 
   0x58, 0x68, 0x51, 0x58, 0x67, 0x4F, 0x59, 0x63, 0x54, 0x5F, 0x66, 0x5C, 0x69, 0x70, 0x65, 0x75, 
   0x7F, 0x7C, 0x88, 0x91, 0x8D, 0xA0, 0xA8, 0x91, 0xA8, 0xB0, 0x6E, 0x8F, 0x99, 0x7A, 0x99, 0xA5, 
   0x91, 0xA3, 0xB1, 0x87, 0x9E, 0xA9, 0x6F, 0x83, 0x8A, 0x47, 0x54, 0x5B, 0x3A, 0x44, 0x4B, 0x5A, 
   0x62, 0x69, 0x71, 0x71, 0x7D, 0x78, 0x7E, 0x88, 0x77, 0x7F, 0x8C, 0x81, 0x89, 0x99, 0xBE, 0xC0, 
   0xC9, 0xCC, 0xCB, 0xD0, 0xC0, 0xBB, 0xC8, 0x96, 0x94, 0xA6, 0x7D, 0x85, 0x97, 0x9D, 0xA6, 0xB6, 
   0xA7, 0xA8, 0xB8, 0x86, 0x89, 0x97, 0x7C, 0x82, 0x90, 0x7A, 0x85, 0x93, 0x7A, 0x80, 0x8A, 0x72, 
   0x6F, 0x78, 0x64, 0x62, 0x62, 0x60, 0x61, 0x5E, 0x66, 0x65, 0x64, 0x6B, 0x63, 0x66, 0x64, 0x5A, 
   0x61, 0x4D, 0x49, 0x51, 0x38, 0x3C, 0x43, 0x3F, 0x45, 0x4A, 0x5A, 0x5C, 0x66, 0x5F, 0x5C, 0x64, 
   0x66, 0x67, 0x6C, 0x6E, 0x73, 0x76, 0x98, 0x97, 0x9B, 0x84, 0x7D, 0x89, 0x52, 0x4F, 0x57, 0x56, 
   0x5A, 0x61, 0x5E, 0x5F, 0x6A, 0x53, 0x5C, 0x6B, 0x56, 0x68, 0x7E, 0x79, 0x8E, 0x98, 0x9A, 0xA9, 
   0xAF, 0x9E, 0xAA, 0xB6, 0x95, 0xAB, 0xBE, 0x9A, 0xB5, 0xCD, 0x9B, 0xB7, 0xCF, 0x96, 0xAE, 0xC1, 
   0x9C, 0xB2, 0xBF, 0x9E, 0xB5, 0xC0, 0xA4, 0xB4, 0xC5, 0xA0, 0xAD, 0xC2, 0x96, 0xA8, 0xB9, 0x91, 
   0xA9, 0xBA, 0x8D, 0xA6, 0xB3, 0x8E, 0xA3, 0xAE, 0x91, 0xA4, 0xAE, 0x90, 0xA4, 0xAF, 0x87, 0x9D, 
   0xAA, 0x85, 0x9C, 0xA6, 0x7F, 0x93, 0xA1, 0x77, 0x8C, 0x9C, 0x71, 0x88, 0x97, 0x6E, 0x86, 0x94, 
   0x68, 0x82, 0x8F, 0x71, 0x86, 0x8F, 0x6A, 0x7B, 0x81, 0x5E, 0x6E, 0x7A, 0x58, 0x64, 0x76, 0x55, 
   0x5A, 0x6A, 0x43, 0x45, 0x4E, 0x36, 0x3A, 0x3E, 0x2F, 0x32, 0x35, 0x2E, 0x2F, 0x32, 0x2F, 0x32, 
   0x34, 0x40, 0x45, 0x48, 0x40, 0x4B, 0x52, 0x45, 0x51, 0x54, 0x57, 0x62, 0x6A, 0x77, 0x81, 0x85, 
   0x99, 0xA0, 0x9F, 0xB0, 0xB1, 0xB3, 0xAD, 0xAD, 0xB2, 0xA8, 0xA9, 0xAD, 0xA9, 0xA8, 0xAC, 0xA1, 
   0x9D, 0xA6, 0x6C, 0x63, 0x70, 0x54, 0x51, 0x58, 0x63, 0x6C, 0x69, 0x7D, 0x82, 0x80, 0x72, 0x6B, 
   0x6F, 0x48, 0x40, 0x3E, 0x5F, 0x58, 0x55, 0x6D, 0x66, 0x66, 0x75, 0x76, 0x70, 0x7A, 0x7A, 0x75, 
   0x7D, 0x7C, 0x77, 0x83, 0x83, 0x79, 0x99, 0x98, 0x8F, 0xA7, 0xA3, 0x9D, 0xA6, 0xA2, 0x9F, 0xA5, 
   0xA5, 0x9F, 0xA8, 0xA8, 0xA4, 0xA4, 0x9C, 0xA0, 0x8A, 0x81, 0x8C, 0x87, 0x83, 0x8A, 0x8E, 0x8C, 
   0x99, 0x82, 0x81, 0x9E, 0x7B, 0x7C, 0xA3, 0x7D, 0x83, 0xA8, 0x85, 0x8C, 0xAE, 0x7E, 0x85, 0xAA, 
   0x81, 0x87, 0xA5, 0x8A, 0x8A, 0xA4, 0x8F, 0x8C, 0xA7, 0x8F, 0x8C, 0xA8, 0x8E, 0x8C, 0xA9, 0x8B, 
   0x8D, 0xA8, 0x7D, 0x7D, 0x93, 0x6C, 0x71, 0x85, 0x68, 0x6F, 0x84, 0x68, 0x6C, 0x81, 0x61, 0x63, 
   0x72, 0x65, 0x69, 0x70, 0x67, 0x6C, 0x70, 0x69, 0x70, 0x76, 0x62, 0x6B, 0x74, 0x54, 0x5C, 0x66, 
   0x4F, 0x56, 0x5E, 0x51, 0x5A, 0x60, 0x55, 0x62, 0x67, 0x5D, 0x69, 0x6E, 0x68, 0x6E, 0x74, 0x70, 
   0x72, 0x79, 0x7B, 0x78, 0x80, 0x69, 0x62, 0x69, 0x29, 0x23, 0x24, 0x32, 0x35, 0x2D, 0x6A, 0x74, 
   0x68, 0x8F, 0x95, 0x8B, 0xAD, 0xAE, 0xA4, 0xBF, 0xBC, 0xAC, 0xCD, 0xC5, 0xB4, 0xD7, 0xCB, 0xBD, 
   0xDD, 0xCF, 0xC2, 0xDC, 0xCB, 0xC4, 0x75, 0x6E, 0x76, 0x66, 0x62, 0x67, 0x58, 0x58, 0x5C, 0x89, 
   0x8F, 0x95, 0x9E, 0xA6, 0xB0, 0xA1, 0xA7, 0xB6, 0xA5, 0xAB, 0xB5, 0xA3, 0xA9, 0xB2, 0xA2, 0xA4, 
   0xAD, 0x9F, 0xA2, 0xAA, 0x9E, 0xA4, 0xAE, 0x9B, 0xA4, 0xAE, 0x95, 0x9F, 0xAB, 0x9B, 0xA4, 0xB0, 
   0xA5, 0xAC, 0xB7, 0xA9, 0xAE, 0xB8, 0xA8, 0xB0, 0xB6, 0xA6, 0xAC, 0xB3, 0x97, 0x99, 0xA1, 0x7B, 
   0x87, 0x8E, 0x6F, 0x7F, 0x88, 0x65, 0x72, 0x79, 0x4B, 0x50, 0x50, 0x44, 0x47, 0x46, 0x4E, 0x4C, 
   0x4D, 0x5A, 0x59, 0x5C, 0x70, 0x78, 0x7A, 0x8C, 0x96, 0x97, 0x8E, 0x9B, 0x9B, 0x92, 0x9D, 0x9B, 
   0x9B, 0xA3, 0x9F, 0x99, 0x9E, 0x9F, 0x91, 0x96, 0x99, 0x93, 0x99, 0x9D, 0x8C, 0x95, 0x97, 0x8B, 
   0x93, 0x97, 0x87, 0x8F, 0x93, 0x83, 0x8F, 0x8F, 0x86, 0x8E, 0x8D, 0x86, 0x8A, 0x8A, 0x87, 0x8D, 
   0x8E, 0x81, 0x8B, 0x8C, 0x7D, 0x89, 0x89, 0x7C, 0x85, 0x85, 0x7B, 0x83, 0x83, 0x61, 0x68, 0x6B, 
   0x58, 0x5B, 0x64, 0x7D, 0x7F, 0x89, 0x7C, 0x81, 0x86, 0x7F, 0x82, 0x87, 0x86, 0x88, 0x8B, 0x8C, 
   0x92, 0x93, 0x96, 0x95, 0x9A, 0x9A, 0x9B, 0xA1, 0x97, 0x99, 0xA0, 0x8D, 0x90, 0x96, 0x87, 0x8C, 
   0x92, 0x8E, 0x90, 0x91, 0x9C, 0x96, 0x98, 0x99, 0x94, 0x9B, 0xA7, 0xA9, 0xAF, 0xAB, 0xA9, 0xAD, 
   0x8F, 0x8C, 0x8F, 0x7E, 0x83, 0x80, 0x81, 0x83, 0x88, 0x77, 0x7E, 0x87, 0x70, 0x7F, 0x87, 0x70, 
   0x83, 0x8B, 0x74, 0x83, 0x8C, 0x72, 0x7B, 0x83, 0x75, 0x7A, 0x7C, 0x73, 0x7A, 0x76, 0x70, 0x79, 
   0x75, 0x70, 0x77, 0x75, 0x6F, 0x75, 0x71, 0x6B, 0x73, 0x71, 0x6C, 0x7A, 0x7F, 0x6F, 0x82, 0x89, 
   0x6F, 0x82, 0x8A, 0x67, 0x77, 0x7B, 0x5A, 0x5F, 0x5F, 0x4B, 0x48, 0x43, 0x41, 0x43, 0x41, 0x6D, 
   0x76, 0x79, 0x90, 0x9B, 0xA2, 0x7A, 0x84, 0x8E, 0x5C, 0x67, 0x70, 0x64, 0x71, 0x79, 0x6F, 0x7A, 
   0x83, 0x68, 0x6C, 0x76, 0x4B, 0x51, 0x5A, 0x4B, 0x4E, 0x59, 0x4B, 0x4F, 0x58, 0x54, 0x54, 0x5D, 
   0x59, 0x5B, 0x65, 0x57, 0x5D, 0x69, 0x5C, 0x60, 0x6D, 0x55, 0x59, 0x64, 0x42, 0x50, 0x59, 0x44, 
   0x52, 0x5D, 0x46, 0x4F, 0x5B, 0x49, 0x51, 0x5C, 0x4A, 0x54, 0x5F, 0x52, 0x5D, 0x68, 0x5F, 0x67, 
   0x72, 0x79, 0x84, 0x8C, 0x88, 0x99, 0x9F, 0x7D, 0x94, 0x9B, 0x71, 0x90, 0x9C, 0x88, 0xA3, 0xB3, 
   0xA0, 0xAA, 0xB8, 0x7A, 0x82, 0x89, 0x3F, 0x45, 0x4A, 0x32, 0x38, 0x3F, 0x42, 0x4C, 0x52, 0x60, 
   0x6C, 0x72, 0x6B, 0x71, 0x79, 0x80, 0x86, 0x92, 0x81, 0x87, 0x98, 0x88, 0x90, 0xA0, 0xBA, 0xBD, 
   0xC7, 0xC9, 0xC7, 0xD1, 0xBA, 0xB4, 0xC6, 0x89, 0x88, 0x9B, 0x81, 0x89, 0x9B, 0xA0, 0xA9, 0xB8, 
   0x9F, 0xA2, 0xB1, 0x7B, 0x7E, 0x8B, 0x86, 0x8B, 0x98, 0x7F, 0x89, 0x96, 0x80, 0x82, 0x8D, 0x70, 
   0x68, 0x71, 0x64, 0x60, 0x63, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x60, 0x5B, 0x60, 0x4E, 0x4A, 
   0x51, 0x40, 0x43, 0x4A, 0x47, 0x4A, 0x52, 0x58, 0x5B, 0x61, 0x71, 0x72, 0x78, 0x7A, 0x78, 0x7C, 
   0x7D, 0x7D, 0x84, 0x7B, 0x7D, 0x86, 0x7A, 0x76, 0x7E, 0x5F, 0x56, 0x60, 0x4C, 0x46, 0x4F, 0x57, 
   0x57, 0x5F, 0x52, 0x55, 0x5E, 0x53, 0x5F, 0x65, 0x77, 0x88, 0x91, 0x90, 0x9C, 0xA4, 0xAA, 0xB2, 
   0xBE, 0x99, 0xA9, 0xB8, 0x8D, 0xA3, 0xB2, 0x94, 0xAC, 0xBD, 0x96, 0xB0, 0xC3, 0x8F, 0xA6, 0xB8, 
   0x97, 0xAF, 0xBB, 0x9B, 0xB5, 0xBF, 0xA0, 0xB3, 0xC5, 0x9E, 0xAB, 0xC2, 0x91, 0xA1, 0xB3, 0x8F, 
   0xA6, 0xB4, 0x8C, 0xA6, 0xB2, 0x87, 0x9E, 0xAC, 0x86, 0x9B, 0xA9, 0x87, 0x9B, 0xAA, 0x81, 0x97, 
   0xA5, 0x7E, 0x95, 0x9F, 0x7A, 0x90, 0x9C, 0x76, 0x8C, 0x98, 0x6D, 0x84, 0x8E, 0x66, 0x79, 0x85, 
   0x60, 0x74, 0x82, 0x5D, 0x70, 0x7C, 0x55, 0x66, 0x6B, 0x4F, 0x5E, 0x62, 0x48, 0x51, 0x5A, 0x46, 
   0x49, 0x53, 0x37, 0x36, 0x3D, 0x20, 0x23, 0x29, 0x21, 0x28, 0x2D, 0x30, 0x39, 0x3D, 0x3A, 0x44, 
   0x47, 0x42, 0x4D, 0x4F, 0x4E, 0x5D, 0x5F, 0x65, 0x73, 0x7A, 0x84, 0x8E, 0x94, 0xA0, 0xA6, 0xAC, 
   0xA8, 0xA8, 0xAE, 0xA4, 0xA4, 0xA7, 0xA2, 0xA6, 0xAA, 0xA7, 0xAB, 0xB3, 0xAB, 0xAC, 0xB0, 0xAD, 
   0xAA, 0xB1, 0x7C, 0x71, 0x7D, 0x5B, 0x55, 0x5D, 0x62, 0x69, 0x68, 0x7C, 0x81, 0x7E, 0x9F, 0x99, 
   0x9E, 0x60, 0x56, 0x5C, 0x40, 0x37, 0x37, 0x60, 0x5A, 0x5A, 0x6D, 0x6D, 0x6D, 0x77, 0x74, 0x70, 
   0x80, 0x7C, 0x75, 0x84, 0x84, 0x7B, 0x9C, 0x9B, 0x91, 0xA7, 0xA4, 0x98, 0xA8, 0xA5, 0x9E, 0xAA, 
   0xA8, 0xA4, 0xA0, 0x9B, 0x9D, 0x8B, 0x82, 0x8D, 0x7D, 0x76, 0x83, 0x7B, 0x78, 0x85, 0x7A, 0x7A, 
   0x91, 0x7A, 0x7A, 0x9C, 0x7D, 0x7E, 0xA6, 0x81, 0x81, 0xA9, 0x7E, 0x7E, 0xA5, 0x77, 0x79, 0xA2, 
   0x7B, 0x7F, 0xA0, 0x88, 0x88, 0xA4, 0x8D, 0x8C, 0xA9, 0x8C, 0x8B, 0xA9, 0x8D, 0x8E, 0xAA, 0x91, 
   0x96, 0xAE, 0x86, 0x86, 0x9C, 0x71, 0x75, 0x8D, 0x70, 0x77, 0x8F, 0x6F, 0x75, 0x8C, 0x69, 0x6D, 
   0x82, 0x68, 0x6C, 0x79, 0x63, 0x68, 0x6F, 0x62, 0x65, 0x6B, 0x63, 0x66, 0x6A, 0x5E, 0x61, 0x66, 
   0x52, 0x54, 0x5D, 0x47, 0x4F, 0x56, 0x4F, 0x5D, 0x61, 0x5B, 0x65, 0x6A, 0x5C, 0x63, 0x69, 0x61, 
   0x67, 0x6B, 0x67, 0x64, 0x69, 0x3B, 0x31, 0x35, 0x11, 0x0A, 0x0C, 0x0D, 0x0F, 0x0F, 0x32, 0x3E, 
   0x37, 0x67, 0x74, 0x6E, 0x83, 0x89, 0x82, 0x9C, 0x9D, 0x8E, 0xBF, 0xB9, 0xA7, 0xD2, 0xC7, 0xB7, 
   0xD7, 0xC7, 0xBA, 0xD8, 0xC3, 0xBC, 0x70, 0x68, 0x64, 0x64, 0x60, 0x61, 0x57, 0x56, 0x58, 0x6D, 
   0x71, 0x74, 0x91, 0x9A, 0xA2, 0xA0, 0xA7, 0xB4, 0xA5, 0xAB, 0xB4, 0xA0, 0xA8, 0xB1, 0xA0, 0xA6, 
   0xB1, 0xA1, 0xA7, 0xB1, 0xA0, 0xA7, 0xB2, 0x9B, 0xA4, 0xAF, 0x95, 0xA0, 0xAC, 0x9A, 0xA4, 0xB0, 
   0xA2, 0xAA, 0xB5, 0xA7, 0xAD, 0xB8, 0xA4, 0xAE, 0xB7, 0xA9, 0xB0, 0xB9, 0xA9, 0xAD, 0xB7, 0x8E, 
   0x99, 0xA0, 0x78, 0x88, 0x8F, 0x64, 0x71, 0x76, 0x41, 0x45, 0x45, 0x3F, 0x43, 0x41, 0x46, 0x46, 
   0x46, 0x4C, 0x4C, 0x4D, 0x60, 0x6A, 0x6B, 0x74, 0x82, 0x83, 0x80, 0x90, 0x91, 0x8B, 0x9A, 0x9A, 
   0x94, 0xA2, 0xA0, 0x9A, 0xA4, 0xA5, 0x9B, 0xA0, 0xA3, 0x9D, 0xA4, 0xA6, 0x98, 0xA0, 0xA1, 0x8F, 
   0x96, 0x99, 0x88, 0x8E, 0x92, 0x7F, 0x88, 0x89, 0x7F, 0x89, 0x8B, 0x7E, 0x89, 0x8B, 0x84, 0x8F, 
   0x92, 0x7B, 0x89, 0x89, 0x76, 0x82, 0x7E, 0x7B, 0x85, 0x82, 0x7E, 0x87, 0x85, 0x76, 0x7E, 0x7F, 
   0x4D, 0x50, 0x58, 0x57, 0x5A, 0x66, 0x6A, 0x71, 0x79, 0x73, 0x79, 0x7E, 0x79, 0x7E, 0x81, 0x88, 
   0x8E, 0x92, 0x8E, 0x8C, 0x91, 0x8D, 0x8A, 0x90, 0x92, 0x90, 0x96, 0x8C, 0x8E, 0x92, 0x8A, 0x8F, 
   0x92, 0x94, 0x94, 0x95, 0x9D, 0x97, 0x99, 0x9F, 0x98, 0xA0, 0xA8, 0xA5, 0xAB, 0x96, 0x92, 0x97, 
   0x75, 0x71, 0x79, 0x66, 0x6E, 0x76, 0x6A, 0x72, 0x7C, 0x6D, 0x76, 0x82, 0x6E, 0x7B, 0x86, 0x71, 
   0x82, 0x8D, 0x70, 0x80, 0x8E, 0x70, 0x7C, 0x88, 0x72, 0x7B, 0x80, 0x78, 0x7C, 0x7A, 0x6D, 0x74, 
   0x73, 0x66, 0x6E, 0x6C, 0x64, 0x6C, 0x69, 0x67, 0x6F, 0x6E, 0x6E, 0x79, 0x7F, 0x6A, 0x79, 0x80, 
   0x65, 0x76, 0x7B, 0x61, 0x71, 0x74, 0x53, 0x5E, 0x5E, 0x48, 0x51, 0x4F, 0x78, 0x84, 0x87, 0xAA, 
   0xB6, 0xC0, 0xB3, 0xBC, 0xCA, 0xA9, 0xB2, 0xC1, 0xA1, 0xAC, 0xB8, 0xAB, 0xB6, 0xBF, 0xA3, 0xAB, 
   0xB4, 0xA4, 0xA7, 0xB0, 0x8A, 0x91, 0x9B, 0x5C, 0x63, 0x71, 0x38, 0x3E, 0x4C, 0x3D, 0x3D, 0x49, 
   0x47, 0x49, 0x54, 0x47, 0x50, 0x5A, 0x4C, 0x54, 0x5D, 0x41, 0x47, 0x4D, 0x38, 0x3D, 0x43, 0x40, 
   0x46, 0x4B, 0x44, 0x49, 0x4E, 0x45, 0x4A, 0x53, 0x47, 0x51, 0x5B, 0x51, 0x5D, 0x67, 0x5F, 0x68, 
   0x6F, 0x71, 0x80, 0x88, 0x78, 0x89, 0x91, 0x72, 0x82, 0x8C, 0x71, 0x84, 0x90, 0x7B, 0x89, 0x97, 
   0x6A, 0x6D, 0x7A, 0x3D, 0x43, 0x4A, 0x30, 0x36, 0x3A, 0x39, 0x40, 0x46, 0x4B, 0x52, 0x5B, 0x54, 
   0x5C, 0x63, 0x64, 0x67, 0x6D, 0x83, 0x86, 0x8F, 0x8C, 0x8C, 0x9A, 0x96, 0x9A, 0xA6, 0xB2, 0xB2, 
   0xBD, 0xB4, 0xB2, 0xBF, 0x9B, 0x9A, 0xAB, 0x7D, 0x81, 0x92, 0x95, 0xA0, 0xAD, 0xB1, 0xB6, 0xC3, 
   0x9F, 0x9F, 0xAD, 0x78, 0x7C, 0x88, 0x88, 0x8E, 0x9A, 0x8B, 0x8E, 0x9B, 0x7E, 0x7B, 0x86, 0x64, 
   0x5D, 0x64, 0x60, 0x5C, 0x60, 0x5D, 0x5D, 0x60, 0x52, 0x51, 0x54, 0x49, 0x46, 0x4A, 0x3F, 0x40, 
   0x45, 0x3D, 0x46, 0x49, 0x5B, 0x64, 0x67, 0x69, 0x6E, 0x72, 0x78, 0x7D, 0x81, 0x7B, 0x7E, 0x81, 
   0x77, 0x7C, 0x86, 0x74, 0x79, 0x88, 0x71, 0x71, 0x7C, 0x5F, 0x5E, 0x67, 0x4F, 0x4F, 0x56, 0x57, 
   0x57, 0x5C, 0x58, 0x5B, 0x60, 0x62, 0x6E, 0x6D, 0x84, 0x91, 0x90, 0xAE, 0xB5, 0xB6, 0xC4, 0xCB, 
   0xD7, 0x9F, 0xB1, 0xC0, 0x94, 0xAB, 0xB8, 0x91, 0xA8, 0xB4, 0x92, 0xA9, 0xB7, 0x95, 0xAB, 0xBA, 
   0x98, 0xB0, 0xBC, 0x9D, 0xB8, 0xC1, 0xA5, 0xB9, 0xC7, 0x9D, 0xAC, 0xBB, 0x95, 0xA3, 0xAF, 0x92, 
   0xA4, 0xB0, 0x8C, 0xA2, 0xB0, 0x85, 0x9D, 0xAB, 0x84, 0x9A, 0xA8, 0x84, 0x99, 0xA7, 0x81, 0x97, 
   0xA5, 0x78, 0x8E, 0x98, 0x80, 0x94, 0x9E, 0x77, 0x8A, 0x94, 0x65, 0x7A, 0x81, 0x60, 0x70, 0x78, 
   0x5B, 0x69, 0x74, 0x4E, 0x5A, 0x63, 0x49, 0x54, 0x58, 0x49, 0x52, 0x54, 0x3B, 0x44, 0x47, 0x2A, 
   0x35, 0x3A, 0x23, 0x29, 0x2F, 0x23, 0x2D, 0x35, 0x2F, 0x3C, 0x41, 0x40, 0x50, 0x52, 0x4E, 0x5B, 
   0x5E, 0x5F, 0x68, 0x6B, 0x88, 0x92, 0x94, 0x9B, 0xA3, 0xAC, 0x96, 0x9D, 0xA1, 0xA3, 0xA7, 0xAD, 
   0xAC, 0xAC, 0xB4, 0xA7, 0xA8, 0xAB, 0xA1, 0xA2, 0xA6, 0xA9, 0xA9, 0xB3, 0xAA, 0xA9, 0xAF, 0xAC, 
   0xAA, 0xAE, 0x95, 0x8E, 0x97, 0x58, 0x53, 0x5D, 0x5F, 0x63, 0x65, 0x69, 0x6B, 0x6A, 0x85, 0x82, 
   0x81, 0x73, 0x6B, 0x6C, 0x35, 0x2A, 0x27, 0x46, 0x45, 0x3E, 0x6B, 0x6F, 0x6E, 0x79, 0x78, 0x75, 
   0x85, 0x85, 0x7E, 0x8E, 0x8E, 0x8A, 0x9A, 0x9A, 0x94, 0xAA, 0xA7, 0x9F, 0xAF, 0xA7, 0xA3, 0x8F, 
   0x86, 0x85, 0x78, 0x71, 0x75, 0x84, 0x80, 0x8B, 0x87, 0x84, 0x91, 0x77, 0x76, 0x89, 0x75, 0x75, 
   0x94, 0x78, 0x79, 0x9E, 0x7C, 0x7B, 0xA2, 0x82, 0x80, 0xA6, 0x7F, 0x7C, 0xA5, 0x7D, 0x7E, 0xA8, 
   0x7A, 0x7D, 0xA0, 0x7F, 0x81, 0x9D, 0x85, 0x86, 0xA2, 0x85, 0x87, 0xA4, 0x8A, 0x8B, 0xA5, 0x8E, 
   0x94, 0xA8, 0x8E, 0x8E, 0xA3, 0x76, 0x77, 0x92, 0x6E, 0x71, 0x8E, 0x66, 0x69, 0x87, 0x66, 0x68, 
   0x85, 0x66, 0x69, 0x7D, 0x6D, 0x72, 0x7B, 0x77, 0x79, 0x7E, 0x6D, 0x6B, 0x6E, 0x5F, 0x5C, 0x62, 
   0x5A, 0x59, 0x60, 0x57, 0x5B, 0x5D, 0x60, 0x66, 0x69, 0x5F, 0x64, 0x6B, 0x52, 0x57, 0x5E, 0x56, 
   0x5D, 0x63, 0x65, 0x63, 0x68, 0x43, 0x3E, 0x40, 0x21, 0x20, 0x23, 0x13, 0x18, 0x1C, 0x19, 0x22, 
   0x24, 0x35, 0x40, 0x3F, 0x50, 0x58, 0x50, 0x85, 0x89, 0x78, 0xBE, 0xBB, 0xAB, 0xCB, 0xC1, 0xB6, 
   0xD4, 0xC6, 0xBD, 0xC8, 0xB4, 0xAC, 0x67, 0x5E, 0x56, 0x55, 0x52, 0x4F, 0x51, 0x4E, 0x4E, 0x52, 
   0x55, 0x55, 0x78, 0x7F, 0x85, 0xAA, 0xB0, 0xBA, 0xA6, 0xAB, 0xB4, 0xA0, 0xA7, 0xB3, 0xA1, 0xA9, 
   0xB7, 0xA2, 0xA8, 0xB4, 0x9B, 0xA1, 0xAC, 0x99, 0xA0, 0xAC, 0x98, 0xA0, 0xAE, 0x99, 0xA0, 0xAD, 
   0x9E, 0xA5, 0xB0, 0xA3, 0xA9, 0xB4, 0xA0, 0xAA, 0xB4, 0xA5, 0xAC, 0xB7, 0xAA, 0xB0, 0xBB, 0x9D, 
   0xA4, 0xAC, 0x83, 0x8B, 0x93, 0x5F, 0x65, 0x6B, 0x36, 0x39, 0x3B, 0x39, 0x3C, 0x39, 0x3A, 0x3A, 
   0x38, 0x42, 0x42, 0x41, 0x58, 0x5D, 0x5D, 0x6E, 0x73, 0x75, 0x81, 0x8B, 0x8E, 0x85, 0x92, 0x96, 
   0x88, 0x99, 0x9C, 0x94, 0x9F, 0xA4, 0xA5, 0xAD, 0xB0, 0xAD, 0xB4, 0xB5, 0xA2, 0xAB, 0xA9, 0x95, 
   0x9A, 0x9A, 0x94, 0x98, 0x9B, 0x84, 0x8D, 0x91, 0x7C, 0x89, 0x8D, 0x7A, 0x86, 0x88, 0x7F, 0x8A, 
   0x8B, 0x79, 0x82, 0x82, 0x79, 0x7F, 0x7D, 0x7C, 0x82, 0x81, 0x79, 0x82, 0x82, 0x7D, 0x85, 0x86, 
   0x67, 0x6B, 0x71, 0x3E, 0x44, 0x50, 0x4A, 0x52, 0x61, 0x5D, 0x64, 0x72, 0x6E, 0x78, 0x7F, 0x7D, 
   0x88, 0x8D, 0x8B, 0x8D, 0x91, 0x86, 0x87, 0x89, 0x91, 0x8D, 0x90, 0x92, 0x8F, 0x92, 0x90, 0x8F, 
   0x92, 0x99, 0x95, 0x96, 0x97, 0x95, 0x96, 0x99, 0x98, 0x9C, 0x99, 0x99, 0x9E, 0x7B, 0x7D, 0x82, 
   0x66, 0x6B, 0x77, 0x5F, 0x6B, 0x79, 0x60, 0x6F, 0x7C, 0x67, 0x73, 0x81, 0x6A, 0x77, 0x83, 0x6F, 
   0x7D, 0x8A, 0x71, 0x7F, 0x8F, 0x70, 0x7C, 0x8B, 0x71, 0x7B, 0x83, 0x75, 0x7A, 0x7D, 0x6B, 0x70, 
   0x72, 0x63, 0x69, 0x6A, 0x63, 0x6A, 0x6C, 0x62, 0x6D, 0x71, 0x61, 0x6E, 0x70, 0x5D, 0x6C, 0x6F, 
   0x55, 0x67, 0x6B, 0x51, 0x5F, 0x65, 0x54, 0x64, 0x69, 0x78, 0x8B, 0x8F, 0xA5, 0xB7, 0xBD, 0xAF, 
   0xBE, 0xCA, 0xA7, 0xB3, 0xC5, 0xA3, 0xAF, 0xC2, 0xAA, 0xB5, 0xC5, 0xAC, 0xB6, 0xC2, 0xA7, 0xAC, 
   0xB6, 0xAA, 0xAB, 0xB4, 0xAA, 0xAE, 0xB7, 0xA4, 0xAA, 0xB5, 0x87, 0x8A, 0x95, 0x75, 0x72, 0x7B, 
   0x46, 0x45, 0x4F, 0x37, 0x3E, 0x49, 0x41, 0x47, 0x52, 0x36, 0x3B, 0x45, 0x32, 0x35, 0x36, 0x37, 
   0x37, 0x36, 0x3B, 0x3F, 0x3E, 0x3E, 0x47, 0x4A, 0x44, 0x50, 0x57, 0x4D, 0x5B, 0x62, 0x5D, 0x6B, 
   0x70, 0x6D, 0x7B, 0x82, 0x75, 0x80, 0x86, 0x51, 0x56, 0x5B, 0x2D, 0x2F, 0x33, 0x2E, 0x2E, 0x31, 
   0x34, 0x33, 0x37, 0x30, 0x34, 0x38, 0x32, 0x37, 0x3B, 0x3E, 0x46, 0x48, 0x67, 0x70, 0x78, 0x6E, 
   0x76, 0x81, 0x53, 0x57, 0x5F, 0x64, 0x65, 0x6C, 0x90, 0x8C, 0x96, 0x99, 0x97, 0xA4, 0x9A, 0x99, 
   0xA6, 0x98, 0x99, 0xA9, 0x8F, 0x95, 0xA6, 0x86, 0x8F, 0xA0, 0xA1, 0xA9, 0xB6, 0xBB, 0xB8, 0xC5, 
   0x9D, 0x97, 0xA4, 0x7E, 0x7F, 0x89, 0x7C, 0x81, 0x8C, 0x81, 0x82, 0x8E, 0x72, 0x6D, 0x76, 0x5A, 
   0x57, 0x5C, 0x62, 0x60, 0x66, 0x58, 0x54, 0x5B, 0x44, 0x41, 0x48, 0x48, 0x48, 0x4F, 0x59, 0x58, 
   0x5F, 0x64, 0x65, 0x6B, 0x6C, 0x6F, 0x74, 0x71, 0x73, 0x77, 0x7E, 0x83, 0x89, 0x7D, 0x81, 0x88, 
   0x7A, 0x80, 0x8D, 0x72, 0x7B, 0x8B, 0x70, 0x75, 0x84, 0x69, 0x6E, 0x7C, 0x5B, 0x5F, 0x68, 0x59, 
   0x5D, 0x61, 0x60, 0x64, 0x68, 0x7E, 0x8A, 0x88, 0x8A, 0x94, 0x92, 0xC0, 0xC8, 0xC7, 0xC6, 0xD0, 
   0xD8, 0xA8, 0xB9, 0xC5, 0x99, 0xB2, 0xBE, 0x91, 0xAA, 0xB7, 0x95, 0xAC, 0xB8, 0x99, 0xAD, 0xB7, 
   0x9A, 0xB1, 0xBA, 0x9C, 0xB8, 0xC0, 0x9B, 0xB3, 0xBE, 0x92, 0xA8, 0xB4, 0x95, 0xA8, 0xB2, 0x90, 
   0xA5, 0xAE, 0x8C, 0xA0, 0xAB, 0x95, 0xA7, 0xB1, 0x93, 0xA4, 0xAD, 0x85, 0x96, 0xA2, 0x78, 0x8D, 
   0x98, 0x70, 0x82, 0x8B, 0x7D, 0x8B, 0x96, 0x69, 0x76, 0x82, 0x5B, 0x6C, 0x73, 0x54, 0x62, 0x6B, 
   0x4C, 0x56, 0x5F, 0x45, 0x4E, 0x53, 0x40, 0x46, 0x49, 0x38, 0x3B, 0x3D, 0x26, 0x2B, 0x2C, 0x1D, 
   0x27, 0x26, 0x25, 0x32, 0x36, 0x3B, 0x49, 0x4F, 0x4A, 0x58, 0x5A, 0x69, 0x77, 0x75, 0x8F, 0x9A, 
   0x9A, 0x93, 0x98, 0x9C, 0xA3, 0xA7, 0xAA, 0xA7, 0xA6, 0xAC, 0xA1, 0xA1, 0xA4, 0xA2, 0xA3, 0xA6, 
   0xA5, 0xA8, 0xAC, 0xA8, 0xA9, 0xAC, 0xA5, 0xA2, 0xA8, 0xAB, 0xA7, 0xAF, 0xA8, 0xA7, 0xAD, 0xAA, 
   0xAA, 0xAD, 0xAE, 0xAB, 0xB1, 0x69, 0x65, 0x6F, 0x51, 0x53, 0x57, 0x61, 0x61, 0x5F, 0x73, 0x72, 
   0x6C, 0x82, 0x7B, 0x7A, 0x38, 0x2C, 0x2A, 0x34, 0x35, 0x2B, 0x58, 0x61, 0x5A, 0x7E, 0x82, 0x76, 
   0x94, 0x97, 0x8C, 0x9B, 0x9E, 0x99, 0x9F, 0xA0, 0x9B, 0xB4, 0xB0, 0xAD, 0x8B, 0x80, 0x80, 0x60, 
   0x58, 0x58, 0x81, 0x7E, 0x82, 0x8B, 0x86, 0x94, 0x86, 0x83, 0x93, 0x7B, 0x7A, 0x93, 0x7B, 0x78, 
   0x9D, 0x7A, 0x78, 0x9F, 0x7B, 0x79, 0x9F, 0x79, 0x79, 0xA0, 0x79, 0x7A, 0xA4, 0x7B, 0x7D, 0xAA, 
   0x7B, 0x7F, 0xA6, 0x80, 0x82, 0xA3, 0x82, 0x83, 0xA3, 0x83, 0x84, 0xA4, 0x86, 0x84, 0xA2, 0x87, 
   0x89, 0xA2, 0x8A, 0x8A, 0xA2, 0x83, 0x86, 0xA2, 0x7B, 0x7F, 0xA1, 0x68, 0x6C, 0x92, 0x62, 0x68, 
   0x89, 0x63, 0x6A, 0x7F, 0x6C, 0x71, 0x7E, 0x7F, 0x7F, 0x84, 0x78, 0x74, 0x77, 0x65, 0x61, 0x67, 
   0x60, 0x5E, 0x66, 0x5E, 0x5F, 0x5E, 0x66, 0x65, 0x66, 0x65, 0x63, 0x6A, 0x5D, 0x5F, 0x67, 0x56, 
   0x58, 0x63, 0x54, 0x55, 0x5E, 0x50, 0x55, 0x59, 0x53, 0x5C, 0x5D, 0x5B, 0x64, 0x66, 0x5A, 0x61, 
   0x63, 0x5C, 0x61, 0x64, 0x57, 0x5C, 0x5D, 0x58, 0x5B, 0x59, 0x66, 0x64, 0x64, 0x6C, 0x67, 0x68, 
   0x80, 0x7B, 0x77, 0x7B, 0x6D, 0x67, 0x63, 0x5F, 0x5C, 0x5C, 0x5B, 0x59, 0x5E, 0x59, 0x58, 0x5E, 
   0x5E, 0x5E, 0x60, 0x62, 0x64, 0x85, 0x86, 0x8D, 0xA1, 0xA4, 0xAD, 0x9D, 0xA2, 0xAF, 0xA4, 0xA9, 
   0xB7, 0xA3, 0xA9, 0xB5, 0x9B, 0xA2, 0xAE, 0x98, 0x9F, 0xAD, 0x99, 0x9F, 0xAE, 0x9A, 0xA1, 0xB0, 
   0x9D, 0xA4, 0xB1, 0x9F, 0xA6, 0xB1, 0xA0, 0xA7, 0xB3, 0x9F, 0xA4, 0xB1, 0xA3, 0xAC, 0xB5, 0xA0, 
   0xA5, 0xAE, 0x80, 0x85, 0x8E, 0x53, 0x55, 0x5F, 0x31, 0x34, 0x38, 0x39, 0x3D, 0x3B, 0x3B, 0x3E, 
   0x3B, 0x42, 0x42, 0x41, 0x4F, 0x52, 0x52, 0x66, 0x67, 0x69, 0x67, 0x6D, 0x72, 0x70, 0x7C, 0x82, 
   0x7C, 0x8D, 0x92, 0x87, 0x95, 0x9B, 0x94, 0x9F, 0xA5, 0x9D, 0xA5, 0xA7, 0x93, 0x9A, 0x97, 0x90, 
   0x95, 0x90, 0x84, 0x88, 0x88, 0x7D, 0x86, 0x8B, 0x74, 0x84, 0x86, 0x70, 0x80, 0x7F, 0x76, 0x81, 
   0x7F, 0x6F, 0x7B, 0x7B, 0x70, 0x75, 0x7B, 0x70, 0x76, 0x7A, 0x70, 0x78, 0x79, 0x70, 0x78, 0x79, 
   0x71, 0x76, 0x79, 0x41, 0x48, 0x52, 0x36, 0x40, 0x52, 0x4C, 0x56, 0x6B, 0x5A, 0x68, 0x7C, 0x61, 
   0x71, 0x81, 0x79, 0x83, 0x8B, 0x88, 0x8F, 0x90, 0x95, 0x97, 0x95, 0x8F, 0x8F, 0x8E, 0x8B, 0x8A, 
   0x8A, 0x90, 0x8A, 0x8A, 0x8F, 0x91, 0x8F, 0x94, 0x98, 0x9A, 0x84, 0x88, 0x8D, 0x55, 0x5E, 0x63, 
   0x54, 0x61, 0x6A, 0x60, 0x6C, 0x76, 0x5C, 0x67, 0x74, 0x61, 0x6D, 0x7B, 0x65, 0x74, 0x80, 0x69, 
   0x79, 0x85, 0x6D, 0x79, 0x88, 0x76, 0x7F, 0x8E, 0x72, 0x78, 0x82, 0x69, 0x70, 0x76, 0x66, 0x68, 
   0x6D, 0x62, 0x65, 0x68, 0x60, 0x67, 0x6C, 0x5B, 0x69, 0x6E, 0x55, 0x66, 0x65, 0x55, 0x64, 0x65, 
   0x5C, 0x6B, 0x71, 0x70, 0x7F, 0x87, 0x99, 0xAD, 0xB5, 0xAD, 0xC1, 0xC7, 0xAC, 0xB8, 0xBF, 0xAE, 
   0xB7, 0xC0, 0xAB, 0xB5, 0xC3, 0xAB, 0xB5, 0xC6, 0xAC, 0xB3, 0xC2, 0xAB, 0xB2, 0xBD, 0xA3, 0xAC, 
   0xB3, 0xAC, 0xAE, 0xB3, 0xAC, 0xAE, 0xB3, 0xA7, 0xAB, 0xAE, 0xA6, 0xA9, 0xAD, 0xB1, 0xAD, 0xB2, 
   0x7E, 0x7B, 0x83, 0x46, 0x48, 0x52, 0x36, 0x39, 0x44, 0x32, 0x36, 0x3F, 0x34, 0x36, 0x35, 0x39, 
   0x39, 0x37, 0x3A, 0x3F, 0x3C, 0x38, 0x43, 0x42, 0x3F, 0x4B, 0x4F, 0x4E, 0x5B, 0x64, 0x63, 0x76, 
   0x7F, 0x6E, 0x78, 0x82, 0x4E, 0x50, 0x53, 0x1D, 0x1A, 0x1A, 0x13, 0x12, 0x11, 0x12, 0x12, 0x13, 
   0x19, 0x1A, 0x1A, 0x1C, 0x21, 0x1F, 0x1D, 0x27, 0x27, 0x51, 0x5E, 0x5D, 0x86, 0x90, 0x95, 0x91, 
   0x97, 0xA4, 0x80, 0x82, 0x91, 0x44, 0x47, 0x53, 0x46, 0x45, 0x4E, 0x68, 0x6A, 0x72, 0x7C, 0x81, 
   0x8B, 0x83, 0x87, 0x95, 0x87, 0x8F, 0x9E, 0x85, 0x8D, 0x9B, 0x9B, 0x9D, 0xA7, 0xBD, 0xB6, 0xC2, 
   0x9C, 0x96, 0xA1, 0x82, 0x7D, 0x86, 0x78, 0x7C, 0x85, 0x6C, 0x70, 0x79, 0x53, 0x52, 0x5A, 0x57, 
   0x54, 0x58, 0x67, 0x63, 0x69, 0x50, 0x47, 0x4F, 0x3F, 0x3D, 0x43, 0x4B, 0x50, 0x55, 0x61, 0x61, 
   0x67, 0x72, 0x6D, 0x73, 0x6E, 0x6B, 0x70, 0x7B, 0x7F, 0x82, 0x86, 0x8C, 0x94, 0x83, 0x87, 0x91, 
   0x7E, 0x83, 0x90, 0x76, 0x7F, 0x8E, 0x75, 0x7E, 0x8C, 0x71, 0x7A, 0x8B, 0x6C, 0x6E, 0x7D, 0x69, 
   0x6B, 0x73, 0x6B, 0x70, 0x75, 0x7F, 0x8A, 0x8B, 0x8A, 0x93, 0x98, 0xB7, 0xBF, 0xC4, 0xB0, 0xBC, 
   0xC7, 0xA3, 0xB4, 0xBF, 0x97, 0xB0, 0xBD, 0x93, 0xAB, 0xBA, 0x96, 0xAE, 0xBA, 0xA5, 0xB9, 0xC2, 
   0xA1, 0xB6, 0xBB, 0x9F, 0xB6, 0xBE, 0x9B, 0xAE, 0xBC, 0x88, 0x9E, 0xB0, 0x7F, 0x99, 0xA8, 0x84, 
   0xA2, 0xA6, 0x88, 0xA0, 0xA7, 0x8F, 0xA1, 0xA9, 0x8A, 0x9A, 0x9F, 0x7B, 0x8A, 0x92, 0x63, 0x73, 
   0x7C, 0x5E, 0x6F, 0x75, 0x64, 0x70, 0x79, 0x56, 0x61, 0x6C, 0x4D, 0x5A, 0x64, 0x44, 0x54, 0x5B, 
   0x3E, 0x4D, 0x51, 0x39, 0x41, 0x43, 0x25, 0x27, 0x2D, 0x1B, 0x1D, 0x24, 0x28, 0x32, 0x37, 0x2F, 
   0x40, 0x41, 0x3D, 0x51, 0x56, 0x64, 0x74, 0x79, 0x76, 0x80, 0x83, 0x9E, 0xA5, 0xA7, 0xAB, 0xB1, 
   0xB6, 0xA4, 0xA2, 0xAB, 0xA4, 0xA2, 0xAD, 0xA4, 0xA0, 0xA4, 0xA1, 0x9E, 0xA2, 0x9F, 0x9F, 0xA0, 
   0x9D, 0xA0, 0xA0, 0xA7, 0xA8, 0xAE, 0xAA, 0xA6, 0xAD, 0xA9, 0xA7, 0xAC, 0xA7, 0xA9, 0xAE, 0xA7, 
   0xA6, 0xAA, 0xB1, 0xAC, 0xB4, 0x8C, 0x87, 0x90, 0x5D, 0x5B, 0x60, 0x60, 0x61, 0x5F, 0x76, 0x78, 
   0x73, 0x89, 0x83, 0x85, 0x3A, 0x2D, 0x32, 0x2B, 0x29, 0x24, 0x42, 0x4B, 0x43, 0x60, 0x60, 0x55, 
   0x70, 0x6D, 0x65, 0x86, 0x86, 0x86, 0x8F, 0x8E, 0x8F, 0x69, 0x64, 0x66, 0x3B, 0x38, 0x38, 0x71, 
   0x76, 0x73, 0xA0, 0xA3, 0xA5, 0xA0, 0x94, 0xA5, 0x85, 0x7E, 0x97, 0x7E, 0x7A, 0x9C, 0x7A, 0x77, 
   0xA1, 0x7A, 0x77, 0xA0, 0x77, 0x74, 0x9D, 0x71, 0x71, 0x9C, 0x70, 0x76, 0xA0, 0x71, 0x78, 0xA2, 
   0x77, 0x7D, 0xA3, 0x80, 0x81, 0xA5, 0x83, 0x82, 0xA5, 0x84, 0x82, 0xA4, 0x85, 0x84, 0xA2, 0x85, 
   0x87, 0xA2, 0x8C, 0x8E, 0xAA, 0x7C, 0x81, 0x9E, 0x73, 0x77, 0x9C, 0x6A, 0x6E, 0x98, 0x65, 0x6C, 
   0x8D, 0x66, 0x6D, 0x85, 0x60, 0x61, 0x76, 0x69, 0x66, 0x72, 0x80, 0x7C, 0x7F, 0x7C, 0x7C, 0x7F, 
   0x71, 0x72, 0x78, 0x71, 0x6E, 0x71, 0x6F, 0x6E, 0x6D, 0x70, 0x6F, 0x70, 0x74, 0x70, 0x76, 0x79, 
   0x78, 0x80, 0x69, 0x6C, 0x73, 0x4B, 0x55, 0x56, 0x4F, 0x5B, 0x58, 0x60, 0x69, 0x65, 0x6C, 0x6E, 
   0x69, 0x6B, 0x6A, 0x6A, 0x62, 0x62, 0x67, 0x5C, 0x61, 0x63, 0x5D, 0x62, 0x65, 0x64, 0x69, 0x6E, 
   0x6B, 0x71, 0x73, 0x69, 0x63, 0x5F, 0x4D, 0x4E, 0x50, 0x4D, 0x4D, 0x50, 0x5D, 0x5A, 0x5D, 0x62, 
   0x61, 0x64, 0x66, 0x67, 0x68, 0x72, 0x71, 0x76, 0x79, 0x7A, 0x84, 0x94, 0x98, 0xA6, 0x9F, 0xA3, 
   0xB0, 0x9B, 0xA2, 0xAE, 0x96, 0x9F, 0xAB, 0x94, 0x9D, 0xAB, 0x97, 0x9F, 0xAE, 0x9B, 0xA3, 0xB2, 
   0x9B, 0xA4, 0xB2, 0x9C, 0xA5, 0xB1, 0x9D, 0xA5, 0xB0, 0x9E, 0xA2, 0xAD, 0x9A, 0xA1, 0xA9, 0x8E, 
   0x94, 0x9B, 0x76, 0x7F, 0x89, 0x4F, 0x57, 0x62, 0x2A, 0x33, 0x3A, 0x32, 0x37, 0x39, 0x36, 0x37, 
   0x38, 0x3A, 0x38, 0x38, 0x41, 0x45, 0x43, 0x55, 0x5A, 0x59, 0x57, 0x60, 0x61, 0x5B, 0x65, 0x68, 
   0x75, 0x83, 0x87, 0x80, 0x90, 0x95, 0x8A, 0x99, 0x9F, 0x9A, 0xA3, 0xA7, 0x9C, 0xA1, 0x9F, 0x96, 
   0x9B, 0x95, 0x8C, 0x91, 0x8E, 0x81, 0x86, 0x8B, 0x79, 0x81, 0x87, 0x7A, 0x7D, 0x81, 0x7A, 0x7A, 
   0x7D, 0x6E, 0x76, 0x77, 0x69, 0x72, 0x75, 0x68, 0x70, 0x72, 0x6B, 0x73, 0x74, 0x6B, 0x73, 0x75, 
   0x6D, 0x74, 0x77, 0x52, 0x58, 0x5F, 0x32, 0x3C, 0x4C, 0x42, 0x50, 0x64, 0x52, 0x62, 0x7C, 0x65, 
   0x74, 0x8F, 0x70, 0x7D, 0x93, 0x71, 0x7D, 0x8D, 0x7B, 0x83, 0x8E, 0x79, 0x82, 0x8A, 0x6B, 0x70, 
   0x78, 0x5E, 0x5D, 0x65, 0x72, 0x71, 0x75, 0x96, 0x93, 0x98, 0x77, 0x77, 0x7C, 0x30, 0x34, 0x3A, 
   0x32, 0x3A, 0x42, 0x55, 0x5E, 0x63, 0x5C, 0x61, 0x6C, 0x5B, 0x63, 0x71, 0x62, 0x70, 0x7C, 0x6A, 
   0x7A, 0x83, 0x6B, 0x77, 0x82, 0x71, 0x79, 0x85, 0x67, 0x6E, 0x79, 0x61, 0x6E, 0x74, 0x65, 0x6C, 
   0x72, 0x60, 0x65, 0x68, 0x59, 0x61, 0x65, 0x58, 0x65, 0x69, 0x46, 0x57, 0x59, 0x5C, 0x6D, 0x75, 
   0x92, 0xA4, 0xAC, 0xAA, 0xB7, 0xC2, 0xB1, 0xBA, 0xC3, 0xB0, 0xB8, 0xBF, 0xAB, 0xB5, 0xBB, 0xA8, 
   0xB3, 0xBC, 0xA5, 0xAE, 0xB9, 0xA8, 0xAE, 0xB9, 0xAD, 0xAF, 0xBB, 0xAF, 0xB6, 0xBF, 0xAB, 0xB6, 
   0xBC, 0xA8, 0xAD, 0xB2, 0xA4, 0xA6, 0xA9, 0xA0, 0xA4, 0xAA, 0x9E, 0xA4, 0xAA, 0xA2, 0xA1, 0xA6, 
   0xA5, 0xA2, 0xA9, 0x93, 0x93, 0x9B, 0x63, 0x65, 0x6B, 0x39, 0x3F, 0x42, 0x35, 0x37, 0x39, 0x2B, 
   0x30, 0x30, 0x2B, 0x31, 0x2F, 0x2D, 0x32, 0x2E, 0x35, 0x39, 0x37, 0x3A, 0x42, 0x45, 0x33, 0x40, 
   0x47, 0x24, 0x27, 0x2F, 0x19, 0x17, 0x1A, 0x1A, 0x1A, 0x19, 0x14, 0x19, 0x19, 0x0D, 0x14, 0x18, 
   0x09, 0x11, 0x13, 0x19, 0x24, 0x24, 0x44, 0x53, 0x55, 0x75, 0x85, 0x88, 0x8B, 0x97, 0x9C, 0x8D, 
   0x96, 0x9C, 0x9A, 0x9E, 0xAC, 0x6A, 0x6D, 0x7E, 0x34, 0x35, 0x40, 0x37, 0x3F, 0x42, 0x4F, 0x56, 
   0x5C, 0x63, 0x67, 0x70, 0x75, 0x7C, 0x85, 0x79, 0x83, 0x8B, 0x85, 0x89, 0x90, 0xA3, 0x9D, 0xA8, 
   0x9A, 0x95, 0xA0, 0x88, 0x83, 0x8C, 0x7D, 0x82, 0x8A, 0x62, 0x67, 0x6F, 0x41, 0x41, 0x46, 0x51, 
   0x4E, 0x51, 0x53, 0x4F, 0x51, 0x5C, 0x5B, 0x5D, 0x71, 0x71, 0x73, 0x8B, 0x8B, 0x8D, 0x8C, 0x88, 
   0x8B, 0x86, 0x81, 0x85, 0x87, 0x88, 0x8B, 0x9B, 0xA1, 0xA4, 0x8F, 0x94, 0x9C, 0x91, 0x92, 0x98, 
   0x8F, 0x8F, 0x98, 0x87, 0x89, 0x93, 0x85, 0x88, 0x92, 0x7D, 0x82, 0x91, 0x7D, 0x7D, 0x8E, 0x6C, 
   0x6C, 0x77, 0x64, 0x64, 0x67, 0x7E, 0x84, 0x81, 0x93, 0x9C, 0x9F, 0xA0, 0xAB, 0xB5, 0x9B, 0xAD, 
   0xBC, 0x9B, 0xAF, 0xBD, 0x96, 0xAA, 0xB7, 0x8F, 0xA2, 0xB0, 0x8B, 0xA3, 0xB0, 0x91, 0xA9, 0xB2, 
   0x9E, 0xB3, 0xB9, 0xA2, 0xB4, 0xBC, 0x98, 0xA5, 0xB3, 0x88, 0x97, 0xA7, 0x85, 0x96, 0xA3, 0x84, 
   0x9B, 0x9D, 0x7F, 0x96, 0x9C, 0x72, 0x89, 0x92, 0x6E, 0x81, 0x87, 0x70, 0x7D, 0x84, 0x5C, 0x66, 
   0x6E, 0x54, 0x63, 0x68, 0x4C, 0x5E, 0x65, 0x46, 0x56, 0x5F, 0x42, 0x4F, 0x57, 0x3B, 0x49, 0x4F, 
   0x35, 0x41, 0x44, 0x27, 0x28, 0x2E, 0x21, 0x1C, 0x26, 0x2D, 0x30, 0x37, 0x46, 0x53, 0x57, 0x6E, 
   0x7E, 0x84, 0xA0, 0xAB, 0xAD, 0xB5, 0xBC, 0xBC, 0xB4, 0xB4, 0xB5, 0xAB, 0xAB, 0xAE, 0xA6, 0xA5, 
   0xA9, 0xA1, 0x9C, 0xA3, 0xA2, 0x9C, 0xA6, 0xA2, 0xA1, 0xA7, 0xA2, 0xA0, 0xA4, 0x9F, 0x9E, 0xA1, 
   0xA0, 0xA2, 0xA5, 0xA1, 0xA4, 0xAC, 0xA8, 0xA8, 0xB0, 0xA7, 0xA8, 0xAE, 0xA4, 0xA6, 0xAA, 0xA3, 
   0xA3, 0xA8, 0xA9, 0xA5, 0xAE, 0x95, 0x90, 0x99, 0x75, 0x71, 0x74, 0x5B, 0x5B, 0x59, 0x64, 0x65, 
   0x62, 0x73, 0x6D, 0x70, 0x36, 0x28, 0x2E, 0x1B, 0x19, 0x15, 0x1A, 0x22, 0x1E, 0x17, 0x17, 0x13, 
   0x13, 0x10, 0x0C, 0x18, 0x17, 0x17, 0x19, 0x17, 0x18, 0x13, 0x12, 0x13, 0x4C, 0x53, 0x56, 0x91, 
   0x99, 0x9C, 0x98, 0x97, 0x9E, 0x99, 0x91, 0xA0, 0x8E, 0x84, 0xA4, 0x82, 0x7D, 0xA3, 0x7A, 0x7B, 
   0xA0, 0x7D, 0x7D, 0xA3, 0x78, 0x75, 0x9E, 0x72, 0x71, 0x9C, 0x6F, 0x74, 0x9D, 0x6B, 0x74, 0x98, 
   0x79, 0x80, 0xA5, 0x7D, 0x7D, 0xA3, 0x80, 0x7E, 0xA1, 0x82, 0x82, 0xA1, 0x82, 0x83, 0xA1, 0x81, 
   0x87, 0xA5, 0x8A, 0x8C, 0xB0, 0x81, 0x83, 0xA5, 0x74, 0x79, 0x9A, 0x6B, 0x73, 0x94, 0x69, 0x70, 
   0x90, 0x69, 0x6B, 0x89, 0x65, 0x64, 0x7F, 0x62, 0x61, 0x75, 0x7A, 0x7A, 0x7F, 0x8C, 0x90, 0x8D, 
   0x94, 0x94, 0x94, 0x91, 0x8A, 0x8D, 0x7D, 0x7A, 0x7A, 0x78, 0x77, 0x7A, 0x78, 0x74, 0x79, 0x78, 
   0x74, 0x7A, 0x7C, 0x7C, 0x83, 0x72, 0x75, 0x7B, 0x6F, 0x70, 0x75, 0x73, 0x75, 0x75, 0x75, 0x79, 
   0x74, 0x74, 0x78, 0x72, 0x81, 0x85, 0x7E, 0x88, 0x8C, 0x85, 0x8E, 0x8F, 0x8C, 0x86, 0x81, 0x84, 
   0x75, 0x6E, 0x70, 0x6A, 0x62, 0x5F, 0x53, 0x55, 0x56, 0x4C, 0x51, 0x52, 0x58, 0x5C, 0x5F, 0x62, 
   0x65, 0x65, 0x6C, 0x6E, 0x6A, 0x8D, 0x8B, 0x8C, 0x61, 0x63, 0x6A, 0x65, 0x6C, 0x74, 0x84, 0x87, 
   0x8F, 0x94, 0x99, 0xA3, 0x95, 0xA0, 0xAB, 0x94, 0xA0, 0xAC, 0x93, 0x9E, 0xAC, 0x95, 0x9F, 0xAC, 
   0x95, 0x9F, 0xAC, 0x98, 0xA2, 0xAE, 0x9B, 0xA4, 0xAF, 0xA0, 0xA4, 0xAE, 0x9A, 0xA1, 0xA8, 0x7B, 
   0x82, 0x8B, 0x6F, 0x7A, 0x86, 0x53, 0x5E, 0x68, 0x2F, 0x3B, 0x41, 0x32, 0x3B, 0x3C, 0x36, 0x38, 
   0x3C, 0x32, 0x31, 0x33, 0x2E, 0x33, 0x32, 0x44, 0x4C, 0x4B, 0x4C, 0x55, 0x55, 0x4D, 0x56, 0x57, 
   0x6A, 0x76, 0x77, 0x7C, 0x8A, 0x8F, 0x7E, 0x8E, 0x92, 0x92, 0x9E, 0xA1, 0x9E, 0xA4, 0xA4, 0x9D, 
   0x9F, 0x9F, 0x8C, 0x90, 0x90, 0x7F, 0x83, 0x87, 0x7A, 0x86, 0x8A, 0x79, 0x82, 0x88, 0x72, 0x79, 
   0x7C, 0x6B, 0x75, 0x72, 0x69, 0x70, 0x6E, 0x68, 0x6C, 0x6B, 0x67, 0x6F, 0x70, 0x69, 0x72, 0x74, 
   0x6D, 0x73, 0x74, 0x6A, 0x70, 0x74, 0x36, 0x3E, 0x4A, 0x3A, 0x48, 0x58, 0x4C, 0x61, 0x7A, 0x65, 
   0x79, 0x95, 0x6B, 0x7C, 0x9A, 0x6B, 0x78, 0x98, 0x6D, 0x77, 0x95, 0x71, 0x7F, 0x9A, 0x60, 0x6D, 
   0x86, 0x2B, 0x34, 0x48, 0x35, 0x36, 0x43, 0x59, 0x56, 0x5C, 0x4F, 0x4D, 0x53, 0x28, 0x27, 0x2E, 
   0x24, 0x25, 0x2E, 0x32, 0x37, 0x3E, 0x56, 0x59, 0x61, 0x5A, 0x61, 0x6B, 0x58, 0x63, 0x6D, 0x5F, 
   0x6A, 0x74, 0x65, 0x6F, 0x79, 0x64, 0x6E, 0x79, 0x60, 0x6B, 0x75, 0x5D, 0x6C, 0x71, 0x5E, 0x69, 
   0x6E, 0x59, 0x62, 0x64, 0x50, 0x58, 0x59, 0x4D, 0x56, 0x59, 0x58, 0x64, 0x6A, 0x80, 0x8F, 0x9C, 
   0xA9, 0xB8, 0xC7, 0xAD, 0xBA, 0xC8, 0xAC, 0xB8, 0xC5, 0xA8, 0xB7, 0xC1, 0xA5, 0xB7, 0xC1, 0xA9, 
   0xB4, 0xC1, 0xA7, 0xB1, 0xBF, 0xA6, 0xB2, 0xBE, 0xA8, 0xAF, 0xBC, 0xA7, 0xB0, 0xBC, 0xA7, 0xB1, 
   0xBD, 0xA3, 0xA8, 0xB2, 0xA1, 0xA2, 0xAB, 0x9E, 0xA1, 0xAA, 0x9F, 0xA2, 0xAC, 0xA0, 0x9F, 0xA6, 
   0xA0, 0x9E, 0xA4, 0xA4, 0xA2, 0xA9, 0x9F, 0x9F, 0xA3, 0x85, 0x88, 0x8B, 0x6A, 0x6A, 0x71, 0x43, 
   0x4A, 0x50, 0x36, 0x3A, 0x3D, 0x25, 0x25, 0x24, 0x16, 0x15, 0x11, 0x07, 0x0B, 0x07, 0x07, 0x0D, 
   0x0B, 0x13, 0x16, 0x12, 0x1C, 0x1E, 0x1B, 0x19, 0x1D, 0x1D, 0x15, 0x1A, 0x1B, 0x12, 0x17, 0x18, 
   0x10, 0x1A, 0x1A, 0x36, 0x43, 0x45, 0x67, 0x74, 0x7D, 0x7D, 0x8C, 0x94, 0x86, 0x93, 0x99, 0x87, 
   0x95, 0x98, 0x8C, 0x97, 0x9F, 0x8F, 0x93, 0xA1, 0x66, 0x65, 0x73, 0x38, 0x3D, 0x45, 0x40, 0x45, 
   0x4D, 0x54, 0x56, 0x60, 0x56, 0x5C, 0x67, 0x5E, 0x6A, 0x73, 0x73, 0x7A, 0x83, 0x8F, 0x8E, 0x96, 
   0x98, 0x97, 0x9F, 0x85, 0x85, 0x92, 0x7E, 0x83, 0x8E, 0x64, 0x65, 0x6D, 0x44, 0x42, 0x47, 0x4D, 
   0x4C, 0x4D, 0x6A, 0x6C, 0x6C, 0x7A, 0x7D, 0x7E, 0x7E, 0x7E, 0x81, 0x82, 0x7D, 0x81, 0x87, 0x7F, 
   0x83, 0x86, 0x80, 0x85, 0x84, 0x84, 0x88, 0x88, 0x88, 0x8E, 0x89, 0x8A, 0x91, 0x8B, 0x86, 0x8C, 
   0x8E, 0x86, 0x8D, 0x8D, 0x86, 0x90, 0x8C, 0x87, 0x92, 0x86, 0x82, 0x92, 0x80, 0x7F, 0x8D, 0x6C, 
   0x6B, 0x74, 0x59, 0x56, 0x59, 0x7D, 0x7F, 0x7B, 0xAB, 0xAF, 0xAF, 0xAA, 0xB5, 0xBE, 0x9B, 0xAD, 
   0xBB, 0x95, 0xA8, 0xB6, 0x90, 0xA1, 0xAF, 0x87, 0x98, 0xA4, 0x7E, 0x95, 0x9F, 0x92, 0xA8, 0xB1, 
   0x99, 0xAA, 0xB3, 0x95, 0xA4, 0xAE, 0x92, 0x9F, 0xA8, 0x91, 0x9C, 0xA3, 0x89, 0x94, 0x9A, 0x83, 
   0x90, 0x96, 0x77, 0x85, 0x90, 0x5C, 0x6F, 0x7A, 0x4F, 0x63, 0x69, 0x57, 0x65, 0x6C, 0x5B, 0x63, 
   0x6C, 0x4F, 0x5D, 0x65, 0x40, 0x56, 0x5D, 0x3B, 0x4E, 0x57, 0x39, 0x45, 0x4D, 0x2E, 0x38, 0x41, 
   0x29, 0x36, 0x3C, 0x2C, 0x33, 0x3C, 0x3B, 0x42, 0x4B, 0x50, 0x5E, 0x63, 0x75, 0x84, 0x86, 0x98, 
   0xA0, 0xA7, 0xAF, 0xB1, 0xB4, 0xAC, 0xAC, 0xAE, 0xA9, 0xA5, 0xAB, 0xA2, 0xA0, 0xA9, 0x9F, 0xA1, 
   0xA8, 0xA1, 0xA0, 0xA7, 0x9C, 0x9A, 0xA4, 0x9D, 0x9A, 0xA2, 0xA2, 0xA1, 0xA4, 0xA1, 0xA2, 0xA4, 
   0xA4, 0xA6, 0xAD, 0xA4, 0xA7, 0xB0, 0xAA, 0xAA, 0xB3, 0xA5, 0xA4, 0xAC, 0xA1, 0xA2, 0xA6, 0x9E, 
   0x9F, 0xA3, 0xAB, 0xA9, 0xB0, 0x9D, 0x99, 0xA1, 0x7C, 0x79, 0x7C, 0x65, 0x62, 0x62, 0x5A, 0x55, 
   0x56, 0x56, 0x4D, 0x52, 0x2C, 0x22, 0x25, 0x21, 0x1D, 0x19, 0x1B, 0x21, 0x1E, 0x13, 0x19, 0x18, 
   0x16, 0x18, 0x14, 0x1E, 0x20, 0x1B, 0x19, 0x1D, 0x17, 0x37, 0x40, 0x3E, 0x87, 0x92, 0x99, 0x99, 
   0x9C, 0xA8, 0x91, 0x8C, 0x9D, 0x8A, 0x88, 0x9B, 0x88, 0x82, 0xA3, 0x89, 0x88, 0xAB, 0x87, 0x8C, 
   0xAD, 0x8B, 0x90, 0xB2, 0x85, 0x87, 0xAD, 0x79, 0x77, 0xA0, 0x6F, 0x71, 0x95, 0x69, 0x6E, 0x90, 
   0x7D, 0x7F, 0xA5, 0x81, 0x7E, 0xA7, 0x7D, 0x7A, 0xA0, 0x81, 0x81, 0xA2, 0x80, 0x83, 0xA3, 0x7C, 
   0x82, 0xA5, 0x7C, 0x81, 0xA7, 0x80, 0x84, 0xA8, 0x7E, 0x85, 0xA4, 0x71, 0x7A, 0x95, 0x6D, 0x75, 
   0x92, 0x69, 0x6E, 0x8C, 0x66, 0x6A, 0x87, 0x5F, 0x65, 0x7D, 0x66, 0x6B, 0x77, 0x7F, 0x84, 0x85, 
   0x93, 0x92, 0x8F, 0x95, 0x8C, 0x8C, 0x8D, 0x88, 0x8A, 0x8C, 0x89, 0x8D, 0x92, 0x8D, 0x90, 0x89, 
   0x88, 0x89, 0x80, 0x82, 0x84, 0x80, 0x7E, 0x82, 0x7D, 0x79, 0x7C, 0x77, 0x75, 0x75, 0x7B, 0x7D, 
   0x79, 0x83, 0x82, 0x7C, 0x85, 0x85, 0x7D, 0x83, 0x82, 0x7C, 0x81, 0x79, 0x79, 0x75, 0x69, 0x6C, 
   0x71, 0x66, 0x64, 0x62, 0x5A, 0x5A, 0x5C, 0x60, 0x5D, 0x55, 0x5E, 0x59, 0x5A, 0x61, 0x60, 0x6B, 
   0x6D, 0x6D, 0x80, 0x81, 0x7C, 0x84, 0x80, 0x82, 0x60, 0x62, 0x66, 0x5B, 0x5F, 0x5D, 0x69, 0x69, 
   0x68, 0x79, 0x79, 0x7D, 0x84, 0x88, 0x8F, 0x92, 0x9C, 0xA4, 0x92, 0x9D, 0xA8, 0x93, 0x9C, 0xA8, 
   0x96, 0x9E, 0xAA, 0x9A, 0xA1, 0xAD, 0x9C, 0xA3, 0xB2, 0xA2, 0xA8, 0xB2, 0xA3, 0xA8, 0xB0, 0x75, 
   0x76, 0x83, 0x59, 0x5B, 0x67, 0x45, 0x4C, 0x52, 0x3F, 0x4B, 0x4A, 0x48, 0x55, 0x4E, 0x42, 0x4B, 
   0x4B, 0x2B, 0x2E, 0x30, 0x19, 0x1C, 0x1C, 0x2E, 0x33, 0x33, 0x3B, 0x41, 0x43, 0x39, 0x43, 0x45, 
   0x4E, 0x56, 0x59, 0x69, 0x71, 0x75, 0x75, 0x80, 0x82, 0x80, 0x8F, 0x8F, 0x92, 0x9E, 0x9F, 0x9E, 
   0xA2, 0xA7, 0x89, 0x8D, 0x92, 0x76, 0x79, 0x7C, 0x71, 0x7A, 0x7C, 0x6F, 0x79, 0x7C, 0x6B, 0x74, 
   0x75, 0x6B, 0x75, 0x72, 0x69, 0x70, 0x70, 0x5F, 0x62, 0x65, 0x63, 0x68, 0x69, 0x67, 0x6E, 0x6C, 
   0x69, 0x6D, 0x6A, 0x6E, 0x6F, 0x73, 0x41, 0x41, 0x4A, 0x33, 0x3F, 0x4C, 0x4F, 0x66, 0x7F, 0x6E, 
   0x87, 0xA3, 0x68, 0x7E, 0x9B, 0x67, 0x76, 0x9A, 0x6A, 0x7C, 0x9F, 0x6D, 0x85, 0xA7, 0x72, 0x88, 
   0xAD, 0x35, 0x48, 0x5D, 0x1A, 0x26, 0x34, 0x21, 0x2B, 0x2F, 0x22, 0x28, 0x2F, 0x24, 0x26, 0x2D, 
   0x28, 0x27, 0x2C, 0x1F, 0x1F, 0x24, 0x29, 0x2E, 0x30, 0x4A, 0x51, 0x52, 0x5B, 0x64, 0x6B, 0x61, 
   0x6B, 0x77, 0x62, 0x6D, 0x77, 0x54, 0x60, 0x66, 0x56, 0x62, 0x67, 0x55, 0x60, 0x6B, 0x54, 0x5D, 
   0x66, 0x53, 0x5B, 0x62, 0x4C, 0x56, 0x5B, 0x52, 0x5C, 0x64, 0x73, 0x80, 0x8A, 0x90, 0x9F, 0xAA, 
   0xA5, 0xB1, 0xBB, 0xAA, 0xB6, 0xC0, 0xA8, 0xB6, 0xC3, 0xA7, 0xB6, 0xC6, 0xA9, 0xB5, 0xC7, 0xAB, 
   0xB3, 0xC3, 0xA8, 0xB1, 0xC1, 0xA3, 0xB0, 0xC0, 0xA3, 0xAF, 0xBB, 0xA6, 0xB0, 0xBB, 0xAA, 0xAF, 
   0xBB, 0xA3, 0xA6, 0xB1, 0xA2, 0xA5, 0xAD, 0xA0, 0xA2, 0xA9, 0xA1, 0xA0, 0xAB, 0x9E, 0x9C, 0xA4, 
   0xA0, 0x9E, 0xA2, 0xA1, 0x9F, 0xA2, 0xA1, 0xA1, 0xA1, 0xA6, 0xA7, 0xAA, 0xA6, 0xA1, 0xA8, 0x82, 
   0x84, 0x8F, 0x69, 0x68, 0x78, 0x49, 0x49, 0x57, 0x2D, 0x2F, 0x39, 0x10, 0x19, 0x1C, 0x0A, 0x12, 
   0x12, 0x0F, 0x19, 0x13, 0x15, 0x1E, 0x1A, 0x17, 0x1F, 0x1E, 0x17, 0x1D, 0x1D, 0x1D, 0x24, 0x24, 
   0x2D, 0x3A, 0x38, 0x53, 0x64, 0x65, 0x70, 0x82, 0x8B, 0x7B, 0x8A, 0x8F, 0x88, 0x90, 0x96, 0x89, 
   0x92, 0x98, 0x8A, 0x96, 0x9B, 0x93, 0x9A, 0xA1, 0x86, 0x88, 0x96, 0x49, 0x4D, 0x5C, 0x2F, 0x35, 
   0x3D, 0x46, 0x4C, 0x52, 0x53, 0x5B, 0x64, 0x57, 0x60, 0x6A, 0x5F, 0x66, 0x70, 0x73, 0x77, 0x7E, 
   0x8A, 0x8C, 0x95, 0x87, 0x8B, 0x9C, 0x71, 0x73, 0x84, 0x6C, 0x6A, 0x71, 0x53, 0x50, 0x53, 0x49, 
   0x47, 0x48, 0x6D, 0x6E, 0x6F, 0x7D, 0x79, 0x7D, 0x7A, 0x72, 0x78, 0x7E, 0x78, 0x7E, 0x7F, 0x7B, 
   0x82, 0x82, 0x7F, 0x84, 0x86, 0x81, 0x86, 0x89, 0x80, 0x88, 0x88, 0x84, 0x8B, 0x88, 0x81, 0x8A, 
   0x8B, 0x81, 0x8A, 0x89, 0x82, 0x8C, 0x88, 0x84, 0x90, 0x85, 0x80, 0x90, 0x82, 0x7D, 0x88, 0x85, 
   0x80, 0x86, 0x7F, 0x78, 0x80, 0x80, 0x7A, 0x7E, 0xA3, 0x9D, 0xA0, 0x97, 0x98, 0x9F, 0x89, 0x92, 
   0x9A, 0x92, 0x9E, 0xA6, 0x93, 0x9E, 0xA9, 0x8F, 0x99, 0xA3, 0x8C, 0x96, 0x9A, 0x92, 0x9C, 0x9D, 
   0x8E, 0x9A, 0x9D, 0x90, 0x9A, 0xA1, 0x90, 0x96, 0x9F, 0x89, 0x94, 0x99, 0x82, 0x8E, 0x94, 0x73, 
   0x7F, 0x88, 0x68, 0x73, 0x7D, 0x5D, 0x68, 0x70, 0x55, 0x61, 0x68, 0x55, 0x60, 0x69, 0x54, 0x5D, 
   0x68, 0x45, 0x51, 0x5C, 0x34, 0x44, 0x4F, 0x2D, 0x3B, 0x44, 0x2D, 0x36, 0x3F, 0x2E, 0x34, 0x3A, 
   0x31, 0x3E, 0x41, 0x56, 0x64, 0x67, 0x77, 0x83, 0x87, 0x86, 0x92, 0x96, 0x94, 0x9B, 0x9E, 0x98, 
   0x9A, 0xA0, 0xA1, 0xA3, 0xA5, 0xA5, 0xA2, 0xA9, 0xA2, 0x9D, 0xA7, 0x9F, 0x9C, 0xA5, 0x9F, 0x9E, 
   0xA4, 0xA4, 0xA3, 0xA9, 0xA3, 0x9F, 0xA7, 0x99, 0x96, 0x9F, 0x9D, 0x9C, 0x9F, 0xA4, 0xA3, 0xA7, 
   0xA8, 0xA6, 0xB0, 0xA9, 0xA6, 0xB1, 0xA5, 0xA2, 0xAB, 0xA3, 0xA1, 0xA9, 0xA0, 0xA0, 0xA9, 0x9F, 
   0xA2, 0xA6, 0xAF, 0xAE, 0xB4, 0x9F, 0x9B, 0xA3, 0x85, 0x7F, 0x89, 0x72, 0x6B, 0x71, 0x47, 0x41, 
   0x47, 0x31, 0x2A, 0x33, 0x1D, 0x1B, 0x1E, 0x1D, 0x19, 0x18, 0x15, 0x16, 0x16, 0x11, 0x18, 0x19, 
   0x15, 0x15, 0x16, 0x12, 0x14, 0x10, 0x14, 0x20, 0x19, 0x64, 0x74, 0x74, 0x8E, 0x97, 0xA1, 0x8D, 
   0x91, 0xA1, 0x8A, 0x8A, 0xA1, 0x8A, 0x8A, 0xA2, 0x88, 0x88, 0xA6, 0x87, 0x8D, 0xAA, 0x8C, 0x90, 
   0xB1, 0x88, 0x8B, 0xB0, 0x80, 0x83, 0xA9, 0x78, 0x76, 0x9E, 0x70, 0x70, 0x91, 0x74, 0x74, 0x8F, 
   0x7D, 0x7D, 0x9D, 0x7E, 0x7D, 0xA3, 0x79, 0x77, 0x9D, 0x7C, 0x7E, 0x9C, 0x82, 0x86, 0xA3, 0x81, 
   0x85, 0xA8, 0x7B, 0x7E, 0xA6, 0x7E, 0x81, 0xA8, 0x7E, 0x80, 0xA6, 0x79, 0x7B, 0x9B, 0x72, 0x75, 
   0x92, 0x6B, 0x74, 0x92, 0x6A, 0x74, 0x94, 0x68, 0x6E, 0x8D, 0x6A, 0x70, 0x84, 0x74, 0x78, 0x82, 
   0x8B, 0x87, 0x8A, 0x93, 0x8B, 0x8B, 0x93, 0x8E, 0x91, 0x94, 0x91, 0x97, 0x91, 0x8E, 0x95, 0x87, 
   0x88, 0x8C, 0x7F, 0x81, 0x84, 0x84, 0x83, 0x84, 0x83, 0x81, 0x81, 0x7B, 0x78, 0x77, 0x76, 0x77, 
   0x74, 0x7D, 0x76, 0x72, 0x76, 0x72, 0x6B, 0x77, 0x73, 0x6F, 0x77, 0x6A, 0x6A, 0x6F, 0x64, 0x64, 
   0x69, 0x60, 0x5D, 0x5C, 0x54, 0x56, 0x5E, 0x5D, 0x5C, 0x5B, 0x5E, 0x5B, 0x5F, 0x61, 0x61, 0x6B, 
   0x69, 0x6A, 0x96, 0x95, 0x93, 0x83, 0x84, 0x87, 0x62, 0x65, 0x6A, 0x63, 0x61, 0x60, 0x60, 0x5F, 
   0x5C, 0x5E, 0x5E, 0x5C, 0x62, 0x61, 0x62, 0x78, 0x7C, 0x7F, 0x7F, 0x87, 0x8E, 0x8C, 0x91, 0x9A, 
   0x93, 0x95, 0xA0, 0x90, 0x93, 0xA0, 0x8B, 0x8F, 0x9F, 0x94, 0x96, 0xA2, 0x8B, 0x8B, 0x96, 0x4F, 
   0x4E, 0x58, 0x34, 0x33, 0x3A, 0x4B, 0x4E, 0x4E, 0x58, 0x5E, 0x5B, 0x5C, 0x5F, 0x5C, 0x5E, 0x61, 
   0x60, 0x40, 0x3F, 0x40, 0x12, 0x12, 0x13, 0x18, 0x1B, 0x1A, 0x2A, 0x2C, 0x2D, 0x2A, 0x30, 0x34, 
   0x36, 0x3C, 0x42, 0x4F, 0x56, 0x58, 0x61, 0x69, 0x69, 0x6D, 0x7B, 0x7C, 0x7C, 0x8C, 0x8F, 0x95, 
   0x9D, 0xA1, 0x87, 0x8C, 0x8E, 0x72, 0x75, 0x75, 0x68, 0x72, 0x72, 0x67, 0x71, 0x74, 0x65, 0x6D, 
   0x6F, 0x66, 0x6F, 0x6F, 0x64, 0x6B, 0x6F, 0x56, 0x5A, 0x5D, 0x5A, 0x5F, 0x5E, 0x60, 0x65, 0x61, 
   0x62, 0x64, 0x5E, 0x69, 0x66, 0x66, 0x49, 0x48, 0x4C, 0x2A, 0x34, 0x3B, 0x4D, 0x5C, 0x6C, 0x68, 
   0x79, 0x8D, 0x62, 0x75, 0x8E, 0x66, 0x77, 0x98, 0x6D, 0x82, 0xA4, 0x6D, 0x87, 0xA7, 0x7A, 0x94, 
   0xB5, 0x4D, 0x5C, 0x6F, 0x1B, 0x25, 0x2D, 0x22, 0x2A, 0x30, 0x21, 0x27, 0x2D, 0x26, 0x23, 0x28, 
   0x25, 0x21, 0x21, 0x1D, 0x1E, 0x1D, 0x20, 0x22, 0x23, 0x30, 0x36, 0x37, 0x4E, 0x56, 0x5A, 0x5D, 
   0x69, 0x6F, 0x5E, 0x6C, 0x71, 0x53, 0x62, 0x63, 0x5F, 0x6C, 0x6C, 0x71, 0x7C, 0x8B, 0x80, 0x8C, 
   0x99, 0x8C, 0x95, 0xA0, 0x81, 0x8A, 0x94, 0x89, 0x97, 0xA2, 0xA6, 0xB7, 0xC4, 0xB7, 0xC3, 0xCF, 
   0xB0, 0xB6, 0xBC, 0xA9, 0xB1, 0xB8, 0xA9, 0xB4, 0xBE, 0xA9, 0xB4, 0xC3, 0xA0, 0xAB, 0xBD, 0xA1, 
   0xA9, 0xBB, 0xA7, 0xAF, 0xC0, 0xA6, 0xB1, 0xC0, 0xA4, 0xAE, 0xBB, 0xA5, 0xAF, 0xB9, 0xA3, 0xA9, 
   0xB2, 0xA2, 0xA6, 0xAD, 0xA3, 0xA4, 0xA9, 0x9E, 0xA1, 0xA7, 0x9F, 0xA0, 0xAA, 0x9F, 0x9F, 0xA5, 
   0xA3, 0xA1, 0xA7, 0xA2, 0x9E, 0xA5, 0x9F, 0x9D, 0x9F, 0xA1, 0x9F, 0xA1, 0xA6, 0xA4, 0xA6, 0xA0, 
   0xA6, 0xAB, 0x9B, 0x9C, 0xAA, 0x77, 0x77, 0x88, 0x4A, 0x49, 0x5B, 0x2F, 0x34, 0x42, 0x14, 0x19, 
   0x23, 0x14, 0x18, 0x18, 0x17, 0x19, 0x19, 0x17, 0x1B, 0x1C, 0x2A, 0x33, 0x33, 0x4C, 0x51, 0x53, 
   0x58, 0x61, 0x63, 0x63, 0x73, 0x76, 0x76, 0x83, 0x8A, 0x7E, 0x8A, 0x8F, 0x86, 0x8E, 0x91, 0x8C, 
   0x93, 0x95, 0x8F, 0x97, 0x9C, 0x90, 0x97, 0x9D, 0x99, 0x9D, 0xA9, 0x7C, 0x7F, 0x8D, 0x33, 0x35, 
   0x3E, 0x28, 0x2E, 0x32, 0x3F, 0x47, 0x4B, 0x55, 0x5A, 0x61, 0x5C, 0x61, 0x69, 0x5C, 0x5E, 0x6A, 
   0x6A, 0x70, 0x7C, 0x80, 0x86, 0x91, 0x6F, 0x6F, 0x78, 0x7C, 0x7A, 0x7C, 0x63, 0x5E, 0x60, 0x4C, 
   0x49, 0x4B, 0x68, 0x67, 0x6C, 0x72, 0x6B, 0x75, 0x70, 0x63, 0x6E, 0x72, 0x68, 0x72, 0x71, 0x6F, 
   0x77, 0x76, 0x74, 0x7A, 0x7F, 0x79, 0x7E, 0x86, 0x80, 0x85, 0x8A, 0x83, 0x89, 0x8A, 0x80, 0x89, 
   0x88, 0x80, 0x89, 0x87, 0x81, 0x8B, 0x8C, 0x87, 0x92, 0x91, 0x8E, 0x98, 0x83, 0x83, 0x8A, 0x83, 
   0x7E, 0x83, 0x8A, 0x81, 0x89, 0x7E, 0x77, 0x7C, 0x7E, 0x75, 0x7C, 0x61, 0x5D, 0x65, 0x5A, 0x5B, 
   0x5F, 0x77, 0x78, 0x7D, 0x7C, 0x78, 0x81, 0x79, 0x72, 0x7C, 0x74, 0x6E, 0x72, 0x6E, 0x6B, 0x69, 
   0x6B, 0x6B, 0x6A, 0x72, 0x70, 0x74, 0x70, 0x6B, 0x73, 0x6D, 0x6B, 0x70, 0x68, 0x6A, 0x6E, 0x5E, 
   0x61, 0x68, 0x5B, 0x5F, 0x66, 0x52, 0x57, 0x5C, 0x4D, 0x50, 0x57, 0x44, 0x45, 0x4F, 0x3C, 0x3F, 
   0x49, 0x37, 0x3A, 0x44, 0x32, 0x38, 0x41, 0x30, 0x3B, 0x41, 0x2F, 0x3D, 0x42, 0x3A, 0x46, 0x4A, 
   0x60, 0x71, 0x72, 0x97, 0xA5, 0xA7, 0xA0, 0xA6, 0xAB, 0x9F, 0xA1, 0xA5, 0xA2, 0xA1, 0xA4, 0x9F, 
   0x9E, 0xA4, 0x9F, 0x9D, 0xA2, 0xA3, 0xA1, 0xA9, 0xA5, 0xA2, 0xAA, 0xA3, 0xA1, 0xA8, 0xA4, 0xA1, 
   0xA7, 0xA4, 0xA2, 0xAA, 0xA7, 0xA4, 0xAD, 0xA4, 0xA2, 0xAB, 0xA0, 0x9E, 0xA5, 0xA3, 0xA2, 0xA8, 
   0xA7, 0xA4, 0xAF, 0xAB, 0xA7, 0xB5, 0xA8, 0xA5, 0xB0, 0xA5, 0xA3, 0xAC, 0xA5, 0xA6, 0xB0, 0xA6, 
   0xAC, 0xB0, 0xB1, 0xB4, 0xB7, 0xA8, 0xA4, 0xAC, 0x95, 0x8D, 0x9B, 0x5A, 0x52, 0x5F, 0x39, 0x36, 
   0x40, 0x4B, 0x4C, 0x55, 0x54, 0x56, 0x5A, 0x50, 0x4D, 0x52, 0x26, 0x24, 0x29, 0x10, 0x13, 0x17, 
   0x0D, 0x0F, 0x10, 0x0C, 0x13, 0x0F, 0x2E, 0x3D, 0x3A, 0x71, 0x7E, 0x83, 0x79, 0x7F, 0x8F, 0x8A, 
   0x8F, 0xA1, 0x94, 0x93, 0xAA, 0x8E, 0x8B, 0xA3, 0x8E, 0x8B, 0xA4, 0x92, 0x95, 0xAA, 0x92, 0x93, 
   0xAB, 0x85, 0x84, 0xA6, 0x7C, 0x7F, 0xA5, 0x77, 0x78, 0x9D, 0x76, 0x74, 0x97, 0x7C, 0x7C, 0x96, 
   0x7F, 0x80, 0x9C, 0x7D, 0x7D, 0x9D, 0x7A, 0x7B, 0x9D, 0x7C, 0x7F, 0x9D, 0x88, 0x8D, 0xA8, 0x8E, 
   0x91, 0xB0, 0x84, 0x86, 0xAE, 0x82, 0x84, 0xAC, 0x83, 0x83, 0xAA, 0x7F, 0x7F, 0x9F, 0x7C, 0x7F, 
   0x9D, 0x71, 0x79, 0x9D, 0x6D, 0x76, 0x9D, 0x6B, 0x6F, 0x97, 0x6E, 0x71, 0x90, 0x72, 0x76, 0x86, 
   0x87, 0x89, 0x8C, 0x96, 0x90, 0x93, 0x96, 0x8F, 0x96, 0x8F, 0x8E, 0x93, 0x89, 0x8E, 0x91, 0x8A, 
   0x8E, 0x91, 0x89, 0x89, 0x8B, 0x8B, 0x89, 0x8A, 0x89, 0x87, 0x87, 0x87, 0x88, 0x86, 0x7A, 0x77, 
   0x77, 0x70, 0x66, 0x66, 0x71, 0x68, 0x66, 0x71, 0x6B, 0x6A, 0x6D, 0x66, 0x66, 0x6A, 0x61, 0x61, 
   0x61, 0x55, 0x54, 0x58, 0x4A, 0x49, 0x66, 0x61, 0x63, 0x66, 0x64, 0x63, 0x62, 0x62, 0x62, 0x66, 
   0x67, 0x66, 0x91, 0x91, 0x8D, 0x7F, 0x7E, 0x7D, 0x69, 0x6A, 0x6C, 0x68, 0x65, 0x65, 0x60, 0x60, 
   0x61, 0x58, 0x5A, 0x59, 0x61, 0x61, 0x5E, 0x62, 0x62, 0x5F, 0x51, 0x54, 0x53, 0x50, 0x4F, 0x52, 
   0x47, 0x46, 0x4E, 0x36, 0x38, 0x44, 0x38, 0x39, 0x42, 0x35, 0x35, 0x3E, 0x34, 0x38, 0x40, 0x43, 
   0x49, 0x4E, 0x6B, 0x6E, 0x70, 0x91, 0x90, 0x91, 0x82, 0x7C, 0x7E, 0x73, 0x71, 0x73, 0x7B, 0x7E, 
   0x7D, 0x7D, 0x7F, 0x81, 0x53, 0x57, 0x59, 0x30, 0x36, 0x35, 0x25, 0x26, 0x27, 0x1D, 0x1F, 0x24, 
   0x28, 0x2C, 0x31, 0x3A, 0x41, 0x43, 0x44, 0x4B, 0x4C, 0x58, 0x63, 0x64, 0x68, 0x77, 0x78, 0x84, 
   0x8D, 0x90, 0x88, 0x8E, 0x8F, 0x73, 0x7B, 0x79, 0x64, 0x70, 0x6F, 0x5D, 0x69, 0x69, 0x5D, 0x65, 
   0x64, 0x5E, 0x65, 0x61, 0x5C, 0x61, 0x61, 0x53, 0x55, 0x57, 0x51, 0x54, 0x54, 0x56, 0x5A, 0x57, 
   0x58, 0x5C, 0x56, 0x61, 0x60, 0x5D, 0x56, 0x55, 0x55, 0x23, 0x29, 0x2C, 0x22, 0x2B, 0x31, 0x3E, 
   0x48, 0x51, 0x53, 0x60, 0x71, 0x65, 0x74, 0x8E, 0x68, 0x7A, 0x97, 0x6E, 0x83, 0xA1, 0x73, 0x8A, 
   0xAB, 0x5E, 0x69, 0x84, 0x1D, 0x21, 0x2A, 0x24, 0x27, 0x2D, 0x1B, 0x21, 0x22, 0x19, 0x19, 0x1A, 
   0x16, 0x15, 0x15, 0x19, 0x22, 0x1F, 0x2C, 0x30, 0x39, 0x3E, 0x43, 0x49, 0x4A, 0x52, 0x53, 0x5C, 
   0x68, 0x68, 0x5D, 0x6B, 0x6F, 0x7D, 0x8D, 0x94, 0xA5, 0xB4, 0xB9, 0xB7, 0xC1, 0xCD, 0xC1, 0xCD, 
   0xD7, 0xB5, 0xBD, 0xC7, 0xAA, 0xB0, 0xB9, 0xB1, 0xBB, 0xC5, 0xAF, 0xBB, 0xC6, 0xAF, 0xB9, 0xC3, 
   0xAB, 0xB5, 0xBA, 0xAA, 0xB1, 0xB6, 0xAC, 0xB3, 0xB9, 0xAC, 0xB6, 0xBF, 0xA7, 0xB3, 0xC2, 0xA2, 
   0xB0, 0xC2, 0x9B, 0xA8, 0xB9, 0x9F, 0xAA, 0xB7, 0xA3, 0xAB, 0xB6, 0x9E, 0xA4, 0xAD, 0xA2, 0xA5, 
   0xAC, 0x9F, 0xA1, 0xA6, 0x9F, 0xA1, 0xA4, 0x9C, 0xA0, 0xA5, 0x9D, 0xA0, 0xA8, 0x9E, 0xA0, 0xA6, 
   0xA0, 0x9F, 0xA7, 0x9F, 0x9C, 0xA5, 0x9D, 0x9C, 0xA1, 0x9D, 0x9D, 0x9E, 0xA0, 0x9D, 0x9D, 0x9B, 
   0x9D, 0x9D, 0x9E, 0x9D, 0xA2, 0x96, 0x93, 0xA1, 0x70, 0x6A, 0x7D, 0x59, 0x57, 0x6A, 0x3F, 0x3D, 
   0x4F, 0x2A, 0x2A, 0x31, 0x18, 0x17, 0x1D, 0x14, 0x19, 0x1B, 0x3A, 0x44, 0x44, 0x5F, 0x66, 0x67, 
   0x6E, 0x76, 0x7A, 0x72, 0x7E, 0x83, 0x7A, 0x84, 0x89, 0x7C, 0x86, 0x8E, 0x83, 0x8A, 0x90, 0x8D, 
   0x91, 0x93, 0x92, 0x97, 0x9B, 0x96, 0x9C, 0xA1, 0x9D, 0xA2, 0xA8, 0xA3, 0xA3, 0xAC, 0x6C, 0x6B, 
   0x72, 0x2D, 0x31, 0x34, 0x31, 0x36, 0x39, 0x42, 0x46, 0x4A, 0x50, 0x54, 0x5A, 0x55, 0x5A, 0x60, 
   0x61, 0x68, 0x6D, 0x7A, 0x7F, 0x84, 0x88, 0x86, 0x88, 0x86, 0x84, 0x7F, 0x5E, 0x58, 0x57, 0x4B, 
   0x49, 0x4C, 0x68, 0x6B, 0x71, 0x72, 0x6F, 0x78, 0x75, 0x6B, 0x76, 0x73, 0x6B, 0x75, 0x5E, 0x5A, 
   0x61, 0x54, 0x50, 0x55, 0x64, 0x5C, 0x5F, 0x7A, 0x74, 0x78, 0x8A, 0x81, 0x86, 0x8B, 0x80, 0x89, 
   0x88, 0x7F, 0x8A, 0x86, 0x7F, 0x8C, 0x87, 0x82, 0x8B, 0x88, 0x84, 0x88, 0x87, 0x7E, 0x85, 0x83, 
   0x7C, 0x82, 0x83, 0x7D, 0x84, 0x7C, 0x75, 0x7D, 0x7F, 0x71, 0x7E, 0x5E, 0x53, 0x5F, 0x47, 0x43, 
   0x46, 0x71, 0x6C, 0x72, 0x7A, 0x6F, 0x79, 0x73, 0x66, 0x71, 0x70, 0x66, 0x6B, 0x69, 0x61, 0x63, 
   0x6D, 0x63, 0x68, 0x69, 0x5D, 0x65, 0x65, 0x59, 0x61, 0x67, 0x5A, 0x61, 0x5E, 0x52, 0x57, 0x55, 
   0x4C, 0x50, 0x52, 0x4D, 0x50, 0x4B, 0x4A, 0x4B, 0x41, 0x40, 0x42, 0x3A, 0x37, 0x3B, 0x36, 0x34, 
   0x39, 0x35, 0x36, 0x3A, 0x3B, 0x41, 0x46, 0x32, 0x3E, 0x42, 0x43, 0x55, 0x59, 0x77, 0x89, 0x8D, 
   0xA2, 0xAF, 0xB3, 0xAD, 0xB0, 0xB6, 0x9E, 0x9F, 0xA6, 0x9D, 0xA0, 0xA6, 0xA3, 0xA5, 0xAA, 0xA3, 
   0xA0, 0xA8, 0xA4, 0xA1, 0xA7, 0xA2, 0xA1, 0xA7, 0xA1, 0xA2, 0xA7, 0xA5, 0xA3, 0xA8, 0xA8, 0xA4, 
   0xAB, 0xA5, 0xA0, 0xAA, 0xA0, 0x9F, 0xAA, 0xA5, 0xA3, 0xAC, 0xA1, 0x9E, 0xA7, 0xA3, 0xA2, 0xA9, 
   0xA8, 0xA6, 0xAF, 0xB3, 0xAF, 0xBD, 0xAE, 0xAC, 0xB7, 0xA7, 0xA5, 0xAD, 0xA6, 0xA8, 0xAD, 0xAE, 
   0xB4, 0xB7, 0xC0, 0xC5, 0xCA, 0xBC, 0xBC, 0xC9, 0x87, 0x82, 0x95, 0x34, 0x2C, 0x3D, 0x28, 0x21, 
   0x2F, 0x23, 0x21, 0x2B, 0x3C, 0x3C, 0x3C, 0x8E, 0x86, 0x88, 0x76, 0x6B, 0x76, 0x2C, 0x25, 0x30, 
   0x05, 0x06, 0x0B, 0x18, 0x23, 0x25, 0x61, 0x71, 0x77, 0x93, 0x9C, 0xAB, 0x8C, 0x90, 0xA6, 0x86, 
   0x8A, 0xA0, 0x94, 0x94, 0xAB, 0x8D, 0x8A, 0x9E, 0x90, 0x8B, 0x9F, 0x9B, 0x9A, 0xAD, 0xA0, 0x9D, 
   0xAF, 0x8A, 0x84, 0xA2, 0x79, 0x79, 0xA0, 0x75, 0x77, 0x9D, 0x78, 0x75, 0x9C, 0x79, 0x79, 0x98, 
   0x7F, 0x7E, 0x9B, 0x7D, 0x7C, 0x9B, 0x7E, 0x7F, 0x9F, 0x7B, 0x7F, 0x9A, 0x95, 0x9A, 0xAE, 0xA4, 
   0xA7, 0xBB, 0x8A, 0x8B, 0xAD, 0x84, 0x85, 0xAB, 0x87, 0x86, 0xAB, 0x85, 0x85, 0xA4, 0x81, 0x84, 
   0xA1, 0x74, 0x7A, 0x9D, 0x71, 0x78, 0xA0, 0x6F, 0x72, 0x9C, 0x72, 0x73, 0x9A, 0x70, 0x74, 0x8D, 
   0x75, 0x7A, 0x84, 0x8B, 0x8A, 0x90, 0x92, 0x8B, 0x92, 0x93, 0x8D, 0x92, 0x93, 0x93, 0x95, 0x93, 
   0x92, 0x95, 0x8E, 0x89, 0x8C, 0x85, 0x7F, 0x7F, 0x81, 0x7E, 0x7D, 0x89, 0x8B, 0x89, 0x86, 0x85, 
   0x86, 0x6D, 0x69, 0x6C, 0x6C, 0x62, 0x64, 0x6B, 0x64, 0x66, 0x63, 0x60, 0x61, 0x5E, 0x56, 0x57, 
   0x58, 0x4B, 0x4C, 0x43, 0x35, 0x33, 0x6C, 0x66, 0x65, 0x66, 0x67, 0x61, 0x65, 0x66, 0x64, 0x61, 
   0x61, 0x62, 0x61, 0x5E, 0x5C, 0x6A, 0x63, 0x63, 0x67, 0x65, 0x68, 0x63, 0x63, 0x66, 0x72, 0x6F, 
   0x73, 0x73, 0x6E, 0x70, 0x72, 0x71, 0x6F, 0x53, 0x53, 0x4F, 0x49, 0x48, 0x44, 0x4F, 0x4F, 0x4E, 
   0x42, 0x46, 0x47, 0x29, 0x2F, 0x33, 0x2C, 0x30, 0x33, 0x50, 0x52, 0x55, 0x7B, 0x79, 0x7F, 0x96, 
   0x93, 0x96, 0x99, 0x96, 0x97, 0x95, 0x91, 0x94, 0x8E, 0x89, 0x8F, 0x80, 0x83, 0x89, 0x85, 0x8B, 
   0x8C, 0x95, 0x95, 0x98, 0x95, 0x94, 0x9A, 0x8D, 0x8E, 0x91, 0x85, 0x85, 0x87, 0x6F, 0x71, 0x76, 
   0x3A, 0x3C, 0x3F, 0x1E, 0x26, 0x28, 0x28, 0x30, 0x32, 0x40, 0x47, 0x46, 0x56, 0x5E, 0x5C, 0x6A, 
   0x71, 0x73, 0x77, 0x7E, 0x81, 0x78, 0x82, 0x82, 0x61, 0x6B, 0x6C, 0x59, 0x63, 0x65, 0x58, 0x60, 
   0x5F, 0x5E, 0x63, 0x5E, 0x5E, 0x63, 0x62, 0x52, 0x55, 0x59, 0x4D, 0x4D, 0x50, 0x50, 0x52, 0x52, 
   0x4F, 0x54, 0x52, 0x54, 0x55, 0x53, 0x55, 0x55, 0x55, 0x2B, 0x31, 0x32, 0x12, 0x1A, 0x19, 0x15, 
   0x21, 0x20, 0x2D, 0x38, 0x3C, 0x4A, 0x53, 0x61, 0x5A, 0x68, 0x7A, 0x70, 0x80, 0x99, 0x7A, 0x90, 
   0xB2, 0x7C, 0x8B, 0xB2, 0x2C, 0x30, 0x3D, 0x13, 0x12, 0x16, 0x10, 0x14, 0x13, 0x0F, 0x12, 0x15, 
   0x12, 0x17, 0x1A, 0x1A, 0x28, 0x28, 0x29, 0x35, 0x3C, 0x33, 0x3B, 0x42, 0x34, 0x3D, 0x41, 0x4E, 
   0x5B, 0x60, 0x6C, 0x7C, 0x86, 0x9A, 0xAB, 0xB7, 0xA9, 0xB9, 0xC2, 0xB2, 0xB6, 0xC3, 0xB1, 0xB4, 
   0xC0, 0xAF, 0xB4, 0xBF, 0xAB, 0xB2, 0xBD, 0xA7, 0xAE, 0xB9, 0x9F, 0xA9, 0xB4, 0xA0, 0xAD, 0xB7, 
   0xA4, 0xB1, 0xB8, 0xA6, 0xB1, 0xB8, 0xAD, 0xB6, 0xBC, 0xB4, 0xBD, 0xC4, 0xBB, 0xC7, 0xD2, 0xC7, 
   0xD6, 0xE5, 0xBA, 0xC9, 0xD4, 0xAE, 0xB9, 0xC0, 0xAB, 0xB4, 0xBC, 0xA1, 0xA6, 0xAE, 0xA2, 0xA5, 
   0xAC, 0xA2, 0xA1, 0xA9, 0xA0, 0x9E, 0xA5, 0x9F, 0x9C, 0xA4, 0x9F, 0x9D, 0xA4, 0x9D, 0x9C, 0xA3, 
   0x9D, 0x9B, 0xA4, 0x9F, 0x9B, 0xA5, 0xA1, 0x9D, 0xA5, 0xA0, 0x9E, 0xA2, 0xA2, 0x9B, 0x9F, 0x9E, 
   0x9A, 0x9D, 0x9B, 0x96, 0x9B, 0x9C, 0x97, 0xA2, 0x99, 0x8E, 0x9F, 0x94, 0x8A, 0x9E, 0x8E, 0x86, 
   0x9A, 0x5A, 0x58, 0x65, 0x3A, 0x3A, 0x42, 0x38, 0x3A, 0x3E, 0x52, 0x58, 0x59, 0x68, 0x6E, 0x70, 
   0x70, 0x76, 0x7B, 0x77, 0x7C, 0x83, 0x7A, 0x84, 0x8C, 0x7D, 0x87, 0x94, 0x83, 0x88, 0x93, 0x8E, 
   0x8E, 0x94, 0x97, 0x97, 0x9B, 0xA0, 0xA3, 0xA5, 0xA1, 0xA2, 0xA3, 0xA9, 0xA7, 0xAC, 0xA6, 0xA6, 
   0xAD, 0x75, 0x74, 0x7C, 0x46, 0x47, 0x4D, 0x49, 0x4D, 0x50, 0x4E, 0x54, 0x55, 0x58, 0x5D, 0x5C, 
   0x63, 0x66, 0x63, 0x67, 0x6A, 0x6A, 0x71, 0x6E, 0x70, 0x6D, 0x66, 0x62, 0x31, 0x2D, 0x2C, 0x32, 
   0x34, 0x36, 0x6D, 0x6E, 0x70, 0x7B, 0x7A, 0x7D, 0x7E, 0x7A, 0x80, 0x7D, 0x77, 0x80, 0x75, 0x6E, 
   0x78, 0x64, 0x5E, 0x67, 0x50, 0x4B, 0x53, 0x51, 0x4C, 0x50, 0x74, 0x70, 0x75, 0x97, 0x8F, 0x97, 
   0x8C, 0x81, 0x8C, 0x83, 0x7C, 0x87, 0x81, 0x7D, 0x82, 0x84, 0x79, 0x79, 0x8F, 0x7C, 0x7E, 0x7E, 
   0x6E, 0x71, 0x6A, 0x5F, 0x63, 0x5E, 0x55, 0x59, 0x5A, 0x47, 0x52, 0x3E, 0x31, 0x39, 0x2F, 0x29, 
   0x29, 0x62, 0x5D, 0x64, 0x7E, 0x75, 0x7E, 0x74, 0x6A, 0x72, 0x6E, 0x68, 0x6A, 0x6A, 0x66, 0x65, 
   0x6C, 0x63, 0x67, 0x68, 0x60, 0x65, 0x62, 0x5D, 0x5F, 0x62, 0x5A, 0x5D, 0x5F, 0x55, 0x59, 0x57, 
   0x4E, 0x51, 0x4E, 0x4A, 0x4D, 0x47, 0x45, 0x48, 0x39, 0x3D, 0x40, 0x31, 0x36, 0x39, 0x3A, 0x3E, 
   0x42, 0x38, 0x3F, 0x44, 0x37, 0x42, 0x47, 0x4C, 0x5A, 0x5F, 0x81, 0x8F, 0x94, 0xA4, 0xA9, 0xB0, 
   0xA9, 0xAA, 0xB0, 0xB0, 0xB1, 0xB7, 0xB1, 0xAF, 0xB6, 0xB0, 0xAD, 0xB4, 0xAE, 0xAB, 0xB1, 0xA8, 
   0xA5, 0xAD, 0xA7, 0xA5, 0xA9, 0xA4, 0xA4, 0xA7, 0xA5, 0xA6, 0xA8, 0xA9, 0xA7, 0xAC, 0xAB, 0xA6, 
   0xAE, 0xA7, 0xA1, 0xAE, 0x9B, 0x9A, 0xA6, 0x9D, 0x9C, 0xA0, 0x9F, 0x9D, 0xA4, 0xA7, 0xA7, 0xAB, 
   0xAA, 0xA9, 0xAF, 0xAF, 0xAC, 0xB7, 0xA6, 0xA4, 0xAD, 0xA7, 0xA5, 0xAA, 0xAA, 0xA9, 0xAE, 0xAF, 
   0xB2, 0xBE, 0xAF, 0xB6, 0xCB, 0xA3, 0xA9, 0xC4, 0x95, 0x94, 0xAC, 0x76, 0x6C, 0x7F, 0x30, 0x25, 
   0x35, 0x07, 0x08, 0x0E, 0x35, 0x42, 0x38, 0xD5, 0xD4, 0xCE, 0xD9, 0xC6, 0xCF, 0x8C, 0x75, 0x86, 
   0x38, 0x31, 0x40, 0x56, 0x5F, 0x6E, 0x7E, 0x89, 0x9E, 0x8C, 0x8F, 0xA8, 0x8B, 0x8B, 0xA7, 0x75, 
   0x79, 0x92, 0x7C, 0x7D, 0x91, 0x88, 0x88, 0x99, 0x8B, 0x87, 0x9A, 0x8B, 0x85, 0x9F, 0x8E, 0x89, 
   0x9A, 0x8D, 0x85, 0x99, 0x7D, 0x78, 0x9C, 0x78, 0x78, 0xA2, 0x78, 0x73, 0x9F, 0x74, 0x73, 0x97, 
   0x7D, 0x7C, 0x9A, 0x7E, 0x7D, 0x9C, 0x82, 0x83, 0xA3, 0x85, 0x8A, 0xA4, 0x91, 0x95, 0xA7, 0xAE, 
   0xAD, 0xC0, 0x85, 0x7F, 0xA2, 0x73, 0x70, 0x97, 0x79, 0x7A, 0xA2, 0x81, 0x82, 0xA8, 0x81, 0x82, 
   0xA6, 0x79, 0x7D, 0xA1, 0x72, 0x75, 0x9B, 0x6C, 0x6F, 0x95, 0x6F, 0x73, 0x96, 0x74, 0x78, 0x98, 
   0x67, 0x6F, 0x83, 0x7E, 0x83, 0x89, 0x90, 0x8D, 0x90, 0x97, 0x92, 0x95, 0x94, 0x93, 0x95, 0x93, 
   0x93, 0x95, 0x8F, 0x8E, 0x8D, 0x8C, 0x89, 0x88, 0x8B, 0x88, 0x88, 0x84, 0x84, 0x83, 0x83, 0x87, 
   0x88, 0x82, 0x87, 0x8B, 0x77, 0x70, 0x74, 0x65, 0x5C, 0x60, 0x5D, 0x5D, 0x5F, 0x4E, 0x4C, 0x4E, 
   0x30, 0x2D, 0x2F, 0x1D, 0x15, 0x15, 0x79, 0x74, 0x77, 0x73, 0x76, 0x74, 0x73, 0x77, 0x74, 0x75, 
   0x74, 0x74, 0x71, 0x6D, 0x6C, 0x74, 0x6E, 0x6D, 0x87, 0x88, 0x88, 0x9E, 0xA1, 0x9E, 0x78, 0x75, 
   0x70, 0x65, 0x5F, 0x5C, 0x6D, 0x6B, 0x6A, 0x62, 0x65, 0x64, 0x48, 0x48, 0x49, 0x3F, 0x3F, 0x40, 
   0x54, 0x55, 0x55, 0x72, 0x71, 0x70, 0x8E, 0x8B, 0x8E, 0x9C, 0x98, 0x9E, 0x94, 0x8D, 0x93, 0x97, 
   0x8F, 0x91, 0x9A, 0x92, 0x93, 0x97, 0x90, 0x93, 0x92, 0x8D, 0x91, 0x8A, 0x87, 0x8D, 0x8A, 0x8A, 
   0x8D, 0x91, 0x8E, 0x91, 0x90, 0x8D, 0x91, 0x90, 0x8C, 0x91, 0x94, 0x8E, 0x91, 0x95, 0x93, 0x94, 
   0x79, 0x78, 0x7A, 0x3E, 0x44, 0x46, 0x24, 0x29, 0x2A, 0x26, 0x29, 0x28, 0x3A, 0x3C, 0x39, 0x55, 
   0x58, 0x59, 0x5E, 0x65, 0x69, 0x61, 0x69, 0x6D, 0x54, 0x5B, 0x5F, 0x57, 0x5F, 0x65, 0x72, 0x78, 
   0x7D, 0x91, 0x95, 0x96, 0x90, 0x96, 0x98, 0x83, 0x87, 0x8D, 0x63, 0x61, 0x65, 0x4B, 0x4A, 0x4C, 
   0x48, 0x4A, 0x4B, 0x50, 0x4F, 0x4D, 0x4E, 0x4F, 0x4F, 0x2B, 0x33, 0x34, 0x11, 0x16, 0x14, 0x09, 
   0x0D, 0x0A, 0x0F, 0x10, 0x10, 0x28, 0x29, 0x2D, 0x42, 0x48, 0x4E, 0x5F, 0x67, 0x77, 0x72, 0x83, 
   0xA0, 0x7F, 0x96, 0xBB, 0x44, 0x4D, 0x61, 0x07, 0x06, 0x0C, 0x0A, 0x0C, 0x0E, 0x0E, 0x12, 0x16, 
   0x13, 0x1A, 0x1D, 0x24, 0x31, 0x33, 0x3B, 0x4A, 0x51, 0x35, 0x42, 0x47, 0x52, 0x5E, 0x64, 0x8A, 
   0x9A, 0xA2, 0xA5, 0xB7, 0xC3, 0xA2, 0xB3, 0xC0, 0xA6, 0xB2, 0xBE, 0xAD, 0xB4, 0xBF, 0xAE, 0xB4, 
   0xBE, 0xAD, 0xB5, 0xBF, 0xAB, 0xB5, 0xBE, 0xA7, 0xAE, 0xB9, 0xA4, 0xAC, 0xB6, 0xA4, 0xAE, 0xB7, 
   0xA9, 0xB3, 0xBA, 0xA8, 0xB2, 0xBD, 0xAA, 0xB4, 0xBF, 0xB6, 0xBF, 0xC9, 0xC0, 0xC9, 0xD2, 0xBE, 
   0xC8, 0xD2, 0xB7, 0xC2, 0xCB, 0xB6, 0xC0, 0xC8, 0xB4, 0xBD, 0xC6, 0xA9, 0xB0, 0xB9, 0xA8, 0xAC, 
   0xB3, 0xA6, 0xA6, 0xAE, 0xA2, 0x9E, 0xA7, 0xA0, 0x9C, 0xA6, 0x9D, 0x9C, 0xA3, 0x9A, 0x9A, 0xA2, 
   0x9C, 0x9D, 0xA5, 0x9D, 0x9D, 0xA5, 0x9E, 0x9D, 0xA5, 0x9E, 0x9C, 0xA4, 0x9E, 0x9C, 0x9E, 0x9F, 
   0x9D, 0xA0, 0x9F, 0x9D, 0xA1, 0x9E, 0x9C, 0xA2, 0xA5, 0x9D, 0xA8, 0x9E, 0x97, 0xA3, 0x9B, 0x98, 
   0xA3, 0x7D, 0x7A, 0x8A, 0x51, 0x4D, 0x58, 0x41, 0x3E, 0x44, 0x4D, 0x4D, 0x50, 0x69, 0x6B, 0x6E, 
   0x78, 0x7B, 0x7E, 0x79, 0x7C, 0x81, 0x78, 0x83, 0x8A, 0x7F, 0x89, 0x94, 0x86, 0x8B, 0x96, 0x91, 
   0x92, 0x97, 0x98, 0x99, 0x9B, 0x9E, 0x9F, 0xA1, 0xA5, 0xA4, 0xA8, 0xA8, 0xA9, 0xAB, 0xA8, 0xAC, 
   0xAF, 0x9A, 0x9A, 0xA2, 0x60, 0x5E, 0x67, 0x44, 0x47, 0x4B, 0x47, 0x4C, 0x4B, 0x51, 0x53, 0x51, 
   0x59, 0x58, 0x55, 0x5D, 0x5D, 0x5C, 0x6C, 0x67, 0x6C, 0x66, 0x5C, 0x60, 0x1D, 0x18, 0x1B, 0x12, 
   0x15, 0x13, 0x39, 0x37, 0x32, 0x56, 0x53, 0x4F, 0x7B, 0x75, 0x74, 0x85, 0x7C, 0x7D, 0x8A, 0x7E, 
   0x7F, 0x92, 0x87, 0x88, 0x8F, 0x88, 0x88, 0x6F, 0x6B, 0x6C, 0x54, 0x55, 0x56, 0x57, 0x53, 0x57, 
   0x58, 0x4E, 0x54, 0x5A, 0x52, 0x55, 0x58, 0x52, 0x4F, 0x69, 0x5C, 0x56, 0x82, 0x76, 0x6E, 0x6D, 
   0x5E, 0x58, 0x49, 0x3B, 0x38, 0x41, 0x37, 0x35, 0x2F, 0x24, 0x23, 0x2F, 0x2A, 0x28, 0x2A, 0x29, 
   0x24, 0x45, 0x45, 0x44, 0x6E, 0x69, 0x6E, 0x71, 0x67, 0x6F, 0x6D, 0x64, 0x69, 0x68, 0x5F, 0x64, 
   0x62, 0x5B, 0x62, 0x64, 0x5C, 0x61, 0x64, 0x59, 0x5B, 0x5F, 0x56, 0x59, 0x57, 0x53, 0x57, 0x4B, 
   0x4A, 0x4E, 0x3F, 0x42, 0x45, 0x36, 0x39, 0x40, 0x2E, 0x35, 0x3E, 0x30, 0x39, 0x43, 0x39, 0x43, 
   0x4B, 0x47, 0x53, 0x59, 0x6B, 0x79, 0x7E, 0x9D, 0xAA, 0xAF, 0xA9, 0xB4, 0xBB, 0xA6, 0xAB, 0xB1, 
   0xAE, 0xAE, 0xB1, 0xAB, 0xAE, 0xB1, 0xAD, 0xAE, 0xB4, 0xB1, 0xAE, 0xB3, 0xB3, 0xB0, 0xB4, 0xB2, 
   0xB0, 0xB6, 0xAB, 0xA9, 0xAD, 0xA7, 0xA7, 0xA9, 0xAB, 0xAA, 0xAD, 0xAA, 0xA8, 0xAE, 0xAB, 0xA6, 
   0xB0, 0xA6, 0xA3, 0xAE, 0xA6, 0xA3, 0xAD, 0xA6, 0xA6, 0xAA, 0xA7, 0xA6, 0xAC, 0xA7, 0xA6, 0xAC, 
   0xA6, 0xA5, 0xAB, 0xA4, 0xA2, 0xAA, 0xA2, 0xA0, 0xA8, 0xA9, 0xA7, 0xAF, 0xB2, 0xB3, 0xBE, 0xA2, 
   0xA6, 0xBD, 0x88, 0x92, 0xB1, 0x88, 0x91, 0xAE, 0x89, 0x87, 0x9B, 0x8D, 0x83, 0x8E, 0x46, 0x3A, 
   0x43, 0x08, 0x08, 0x09, 0x65, 0x77, 0x6A, 0xEE, 0xED, 0xE3, 0xFB, 0xE4, 0xE4, 0xDA, 0xBD, 0xC9, 
   0x84, 0x71, 0x88, 0x70, 0x73, 0x8D, 0x75, 0x7A, 0x9A, 0x77, 0x75, 0x95, 0x76, 0x75, 0x94, 0x76, 
   0x79, 0x94, 0x82, 0x85, 0x9A, 0x8D, 0x94, 0xA5, 0x90, 0x8F, 0xA5, 0x82, 0x7C, 0x97, 0x8F, 0x8B, 
   0x9D, 0x98, 0x92, 0x9F, 0x8B, 0x82, 0x9E, 0x7C, 0x77, 0xA1, 0x77, 0x72, 0x9E, 0x75, 0x72, 0x9A, 
   0x79, 0x75, 0x99, 0x7D, 0x7B, 0x9D, 0x7E, 0x7F, 0xA1, 0x89, 0x8D, 0xA9, 0x9E, 0xA0, 0xB2, 0xAA, 
   0xA5, 0xB8, 0x8D, 0x81, 0xA4, 0x77, 0x72, 0x98, 0x74, 0x74, 0x9B, 0x78, 0x79, 0xA2, 0x7F, 0x80, 
   0xA6, 0x89, 0x8A, 0xAD, 0x7A, 0x7C, 0x9F, 0x74, 0x79, 0x9A, 0x7F, 0x85, 0xA5, 0x81, 0x86, 0xA8, 
   0x7A, 0x81, 0x9D, 0x7D, 0x85, 0x92, 0x8D, 0x90, 0x93, 0x9C, 0x99, 0x99, 0x98, 0x97, 0x96, 0x98, 
   0x98, 0x98, 0x9B, 0x9A, 0x99, 0x9B, 0x97, 0x96, 0x9A, 0x94, 0x94, 0x98, 0x91, 0x91, 0x96, 0x95, 
   0x96, 0x96, 0x96, 0x99, 0x97, 0x8A, 0x91, 0x6D, 0x5D, 0x62, 0x41, 0x39, 0x3C, 0x35, 0x32, 0x35, 
   0x30, 0x30, 0x34, 0x33, 0x32, 0x35, 0x73, 0x6D, 0x74, 0x74, 0x73, 0x78, 0x80, 0x81, 0x81, 0x7D, 
   0x7D, 0x79, 0x83, 0x80, 0x7C, 0x95, 0x92, 0x8D, 0xA8, 0xA8, 0xA5, 0x9A, 0x99, 0x96, 0x64, 0x63, 
   0x5D, 0x59, 0x56, 0x53, 0x64, 0x62, 0x62, 0x68, 0x68, 0x6A, 0x53, 0x54, 0x56, 0x5C, 0x58, 0x5C, 
   0x82, 0x7B, 0x7E, 0x98, 0x90, 0x91, 0xA5, 0x9C, 0xA2, 0xA2, 0x9A, 0xA3, 0x95, 0x91, 0x97, 0x99, 
   0x98, 0x98, 0x9F, 0x9B, 0x9D, 0x99, 0x92, 0x97, 0x96, 0x8C, 0x91, 0x8E, 0x8A, 0x8D, 0x8F, 0x8C, 
   0x8F, 0x94, 0x8F, 0x8F, 0x90, 0x8A, 0x8A, 0x8C, 0x88, 0x8B, 0x8D, 0x88, 0x89, 0x87, 0x88, 0x85, 
   0x86, 0x81, 0x85, 0x70, 0x6D, 0x6F, 0x58, 0x56, 0x56, 0x3B, 0x3D, 0x3D, 0x2B, 0x2C, 0x2C, 0x2F, 
   0x30, 0x32, 0x46, 0x4E, 0x52, 0x4B, 0x53, 0x5C, 0x52, 0x59, 0x61, 0x6F, 0x76, 0x7E, 0x87, 0x8D, 
   0x91, 0xA6, 0xA9, 0xA8, 0x9E, 0xA3, 0xA3, 0x9A, 0x9B, 0x9F, 0x97, 0x90, 0x94, 0x6E, 0x69, 0x6B, 
   0x49, 0x48, 0x4A, 0x4E, 0x4C, 0x4B, 0x47, 0x48, 0x48, 0x1F, 0x24, 0x25, 0x17, 0x18, 0x19, 0x1B, 
   0x1F, 0x1F, 0x37, 0x36, 0x36, 0x3E, 0x3B, 0x3B, 0x3A, 0x3A, 0x39, 0x43, 0x42, 0x49, 0x58, 0x61, 
   0x74, 0x77, 0x8A, 0xA9, 0x55, 0x5D, 0x77, 0x05, 0x07, 0x0E, 0x0C, 0x0E, 0x11, 0x12, 0x17, 0x16, 
   0x22, 0x2A, 0x29, 0x38, 0x43, 0x48, 0x53, 0x64, 0x70, 0x69, 0x76, 0x7E, 0x94, 0x9E, 0xA6, 0xAC, 
   0xB8, 0xC2, 0xA8, 0xB7, 0xC2, 0xA6, 0xB4, 0xBF, 0xA8, 0xB2, 0xBF, 0xA9, 0xB1, 0xBA, 0xAC, 0xB5, 
   0xBE, 0xAD, 0xB5, 0xBE, 0xA8, 0xB0, 0xBA, 0xA6, 0xAF, 0xB8, 0xA9, 0xB2, 0xBB, 0xA9, 0xB0, 0xB8, 
   0xAA, 0xB1, 0xBA, 0xA8, 0xAF, 0xBD, 0xA7, 0xAF, 0xBD, 0xAE, 0xB4, 0xC0, 0xB2, 0xB8, 0xC3, 0xB0, 
   0xB9, 0xC5, 0xA7, 0xB2, 0xBC, 0xA8, 0xB3, 0xBD, 0xBA, 0xC4, 0xCF, 0xB1, 0xB8, 0xC2, 0xA5, 0xAA, 
   0xB0, 0xA2, 0xA3, 0xAA, 0xA0, 0x9D, 0xA6, 0x9F, 0x9E, 0xA7, 0x9D, 0x9D, 0xA4, 0x9F, 0xA0, 0xA9, 
   0xA1, 0xA2, 0xAA, 0xA1, 0xA2, 0xA7, 0xA0, 0x9D, 0xA6, 0xA1, 0x9C, 0xA7, 0xA0, 0x9D, 0xA3, 0x9F, 
   0x9D, 0xA3, 0x9F, 0x9E, 0xA3, 0x9E, 0x9F, 0xA2, 0xA6, 0xA2, 0xA7, 0xA4, 0xA0, 0xA8, 0xA3, 0xA0, 
   0xAB, 0x8B, 0x8B, 0x99, 0x70, 0x6A, 0x75, 0x4C, 0x47, 0x4F, 0x3E, 0x3F, 0x43, 0x4C, 0x50, 0x52, 
   0x70, 0x76, 0x77, 0x74, 0x7D, 0x7F, 0x78, 0x82, 0x86, 0x82, 0x8B, 0x8F, 0x8B, 0x91, 0x94, 0x92, 
   0x96, 0x96, 0x99, 0x9D, 0x9C, 0x9D, 0xA0, 0xA6, 0xA1, 0xA2, 0xAB, 0xA4, 0xA8, 0xAC, 0xA5, 0xAC, 
   0xAE, 0xA8, 0xAC, 0xB2, 0x9C, 0x9A, 0xA3, 0x60, 0x5B, 0x63, 0x43, 0x42, 0x42, 0x4D, 0x4D, 0x4B, 
   0x59, 0x59, 0x58, 0x61, 0x61, 0x63, 0x6C, 0x66, 0x6C, 0x50, 0x48, 0x4A, 0x23, 0x1C, 0x1C, 0x25, 
   0x25, 0x1F, 0x3F, 0x41, 0x37, 0x3C, 0x3B, 0x34, 0x47, 0x41, 0x3B, 0x56, 0x4D, 0x47, 0x58, 0x4B, 
   0x46, 0x55, 0x48, 0x41, 0x54, 0x4A, 0x3F, 0x53, 0x4A, 0x44, 0x43, 0x3F, 0x3C, 0x39, 0x36, 0x34, 
   0x3C, 0x38, 0x33, 0x3E, 0x3B, 0x32, 0x43, 0x40, 0x34, 0x6B, 0x67, 0x5A, 0x86, 0x78, 0x6B, 0x68, 
   0x5A, 0x4E, 0x50, 0x43, 0x3C, 0x49, 0x40, 0x39, 0x44, 0x39, 0x31, 0x35, 0x30, 0x2A, 0x2D, 0x2C, 
   0x26, 0x39, 0x38, 0x30, 0x5D, 0x58, 0x5B, 0x6C, 0x61, 0x6C, 0x6A, 0x5D, 0x69, 0x66, 0x59, 0x63, 
   0x5E, 0x53, 0x5D, 0x5E, 0x54, 0x5D, 0x5D, 0x53, 0x5A, 0x5A, 0x52, 0x5B, 0x50, 0x4D, 0x55, 0x3C, 
   0x3F, 0x44, 0x2D, 0x34, 0x37, 0x34, 0x3A, 0x40, 0x3C, 0x45, 0x4D, 0x3E, 0x4D, 0x54, 0x59, 0x6A, 
   0x6E, 0x8B, 0x9A, 0x9C, 0xB4, 0xBC, 0xC0, 0xB7, 0xBC, 0xC3, 0xAA, 0xAF, 0xB7, 0xAE, 0xB4, 0xBA, 
   0xB3, 0xB2, 0xB7, 0xB3, 0xB2, 0xB7, 0xB4, 0xB5, 0xBB, 0xAC, 0xAB, 0xB1, 0xAC, 0xAD, 0xB1, 0xAD, 
   0xAD, 0xB3, 0xA7, 0xA7, 0xAE, 0xA6, 0xA3, 0xAA, 0xA7, 0xA3, 0xA9, 0xA5, 0xA2, 0xAA, 0xA4, 0xA2, 
   0xAB, 0xA5, 0xA4, 0xAB, 0xA4, 0xA2, 0xA5, 0xA3, 0xA1, 0xA8, 0xA6, 0xA5, 0xAB, 0xA6, 0xA4, 0xAD, 
   0xA5, 0xA2, 0xAC, 0xA2, 0xA0, 0xA8, 0xA2, 0x9F, 0xA8, 0xA7, 0xA5, 0xB3, 0xA2, 0xA4, 0xBD, 0x89, 
   0x93, 0xB6, 0x79, 0x89, 0xAC, 0x71, 0x79, 0x92, 0x69, 0x61, 0x6C, 0x5C, 0x4F, 0x54, 0x2D, 0x23, 
   0x29, 0x12, 0x10, 0x11, 0x79, 0x81, 0x73, 0xDD, 0xD3, 0xC5, 0xEC, 0xD7, 0xD3, 0xEB, 0xD3, 0xDB, 
   0xA1, 0x83, 0x9A, 0x69, 0x64, 0x81, 0x6C, 0x6D, 0x90, 0x71, 0x6D, 0x8F, 0x72, 0x70, 0x90, 0x6E, 
   0x71, 0x8F, 0x71, 0x77, 0x8F, 0x7E, 0x8A, 0xA0, 0x8A, 0x8E, 0xA3, 0x90, 0x8F, 0xA5, 0x9B, 0x99, 
   0xAC, 0x9F, 0x99, 0xA6, 0x93, 0x88, 0x9C, 0x79, 0x71, 0x94, 0x71, 0x6E, 0x96, 0x6E, 0x6C, 0x93, 
   0x72, 0x6D, 0x93, 0x77, 0x73, 0x99, 0x79, 0x7A, 0x9F, 0x80, 0x84, 0xA3, 0xA6, 0xA6, 0xBD, 0xAA, 
   0xA0, 0xB9, 0x8A, 0x7D, 0xA2, 0x7E, 0x78, 0x9C, 0x78, 0x79, 0x99, 0x74, 0x76, 0x9A, 0x7C, 0x7D, 
   0xA1, 0x84, 0x87, 0xA5, 0x7C, 0x7F, 0x9E, 0x79, 0x7C, 0x9C, 0x7A, 0x80, 0xA0, 0x78, 0x7E, 0x9F, 
   0x75, 0x7B, 0x9B, 0x77, 0x7F, 0x95, 0x84, 0x8B, 0x92, 0x9A, 0x98, 0x98, 0x9F, 0x98, 0x98, 0x9A, 
   0x96, 0x95, 0x9C, 0x96, 0x95, 0x9D, 0x93, 0x94, 0x9D, 0x93, 0x93, 0xA0, 0x96, 0x96, 0x9E, 0x9A, 
   0x99, 0x9D, 0x9C, 0x9D, 0xA8, 0x9B, 0xA1, 0x7E, 0x6B, 0x71, 0x40, 0x32, 0x36, 0x3B, 0x36, 0x39, 
   0x3B, 0x39, 0x3E, 0x36, 0x37, 0x3B, 0x71, 0x6D, 0x72, 0x77, 0x73, 0x79, 0x76, 0x74, 0x75, 0x6B, 
   0x6B, 0x65, 0x72, 0x6F, 0x67, 0x78, 0x73, 0x70, 0x77, 0x72, 0x73, 0x74, 0x6E, 0x6E, 0x60, 0x5E, 
   0x5D, 0x54, 0x51, 0x52, 0x64, 0x5D, 0x61, 0x78, 0x70, 0x75, 0x79, 0x73, 0x78, 0x8E, 0x89, 0x8D, 
   0x97, 0x8F, 0x94, 0x95, 0x8D, 0x93, 0x9B, 0x91, 0x99, 0x97, 0x8E, 0x97, 0x93, 0x90, 0x95, 0x95, 
   0x94, 0x97, 0x9C, 0x99, 0x9C, 0x99, 0x94, 0x99, 0x97, 0x90, 0x95, 0x92, 0x8C, 0x92, 0x95, 0x90, 
   0x94, 0x95, 0x8F, 0x8F, 0x8B, 0x86, 0x84, 0x88, 0x83, 0x83, 0x84, 0x81, 0x83, 0x7A, 0x7A, 0x7B, 
   0x77, 0x6E, 0x75, 0x6B, 0x63, 0x64, 0x62, 0x5F, 0x5E, 0x52, 0x54, 0x55, 0x34, 0x36, 0x39, 0x1C, 
   0x1E, 0x22, 0x40, 0x47, 0x4D, 0x57, 0x61, 0x69, 0x73, 0x7B, 0x81, 0x98, 0x9F, 0xA5, 0x91, 0x96, 
   0x98, 0xA3, 0xA4, 0xA4, 0xA8, 0xA8, 0xA8, 0x9F, 0x9A, 0x9F, 0xA0, 0x96, 0x99, 0x96, 0x93, 0x93, 
   0x76, 0x79, 0x7B, 0x59, 0x5C, 0x5E, 0x3D, 0x3D, 0x42, 0x23, 0x22, 0x25, 0x2D, 0x2D, 0x2C, 0x35, 
   0x37, 0x37, 0x45, 0x45, 0x46, 0x4A, 0x4B, 0x48, 0x46, 0x48, 0x3F, 0x4B, 0x48, 0x45, 0x52, 0x55, 
   0x5B, 0x5E, 0x66, 0x76, 0x3D, 0x3E, 0x52, 0x06, 0x07, 0x11, 0x0E, 0x12, 0x14, 0x22, 0x27, 0x22, 
   0x42, 0x4A, 0x47, 0x4B, 0x58, 0x5D, 0x7F, 0x90, 0x97, 0x97, 0xA2, 0xAA, 0xA5, 0xAC, 0xB8, 0xAC, 
   0xB3, 0xC1, 0xAC, 0xB5, 0xC1, 0xAA, 0xB6, 0xC1, 0xA2, 0xAF, 0xBA, 0xA5, 0xAC, 0xB9, 0xA7, 0xB0, 
   0xBA, 0xA7, 0xAF, 0xB8, 0xA4, 0xAD, 0xB7, 0xA4, 0xB0, 0xBB, 0xAB, 0xB5, 0xC0, 0xA9, 0xB1, 0xBA, 
   0xA7, 0xB0, 0xB8, 0xA7, 0xB0, 0xB9, 0xAA, 0xB1, 0xBB, 0xAC, 0xB1, 0xBA, 0xAC, 0xB1, 0xB8, 0xA9, 
   0xB2, 0xBB, 0xA8, 0xB2, 0xBE, 0xAA, 0xB5, 0xBF, 0xB0, 0xBA, 0xC5, 0xAF, 0xB4, 0xBD, 0xA4, 0xA9, 
   0xAD, 0x9E, 0xA2, 0xA8, 0x9C, 0x9E, 0xA7, 0x9D, 0x9C, 0xA5, 0x9F, 0x9D, 0xA5, 0xA4, 0xA3, 0xAA, 
   0xA3, 0xA2, 0xAA, 0xA6, 0xA5, 0xAC, 0xA6, 0xA2, 0xAD, 0xA9, 0xA2, 0xAD, 0xA2, 0x9F, 0xA8, 0xA2, 
   0xA0, 0xA8, 0xA1, 0x9F, 0xA6, 0x9F, 0x9F, 0xA5, 0xA2, 0xA1, 0xA7, 0xA0, 0x9E, 0xA6, 0xA3, 0x9F, 
   0xAB, 0x9A, 0x97, 0xA1, 0x88, 0x82, 0x8B, 0x6A, 0x61, 0x6B, 0x4B, 0x48, 0x4E, 0x4D, 0x4D, 0x51, 
   0x66, 0x69, 0x6B, 0x71, 0x7A, 0x7B, 0x7A, 0x81, 0x86, 0x84, 0x8D, 0x8F, 0x8A, 0x93, 0x96, 0x93, 
   0x9B, 0x9D, 0x9C, 0xA2, 0xA2, 0xA2, 0xA4, 0xA9, 0xA9, 0xAA, 0xB3, 0xA7, 0xAB, 0xB2, 0xA6, 0xAA, 
   0xAF, 0xA8, 0xAB, 0xB2, 0xB1, 0xAF, 0xB8, 0x92, 0x8B, 0x94, 0x66, 0x60, 0x65, 0x54, 0x50, 0x51, 
   0x5A, 0x5A, 0x57, 0x61, 0x60, 0x61, 0x4C, 0x45, 0x47, 0x2A, 0x22, 0x23, 0x26, 0x20, 0x1C, 0x36, 
   0x35, 0x2B, 0x4C, 0x49, 0x3F, 0x4E, 0x49, 0x40, 0x4D, 0x46, 0x3E, 0x53, 0x4C, 0x44, 0x50, 0x4A, 
   0x42, 0x4C, 0x45, 0x3D, 0x4B, 0x45, 0x3C, 0x48, 0x44, 0x3A, 0x48, 0x43, 0x3B, 0x46, 0x41, 0x3A, 
   0x47, 0x43, 0x39, 0x49, 0x44, 0x39, 0x57, 0x50, 0x43, 0x7D, 0x75, 0x69, 0x74, 0x66, 0x5A, 0x5F, 
   0x52, 0x48, 0x56, 0x4A, 0x42, 0x51, 0x44, 0x3C, 0x51, 0x44, 0x3A, 0x3C, 0x34, 0x2F, 0x36, 0x2E, 
   0x2D, 0x32, 0x2F, 0x26, 0x45, 0x42, 0x41, 0x60, 0x58, 0x63, 0x63, 0x56, 0x64, 0x5F, 0x54, 0x5B, 
   0x56, 0x4D, 0x53, 0x4F, 0x4B, 0x54, 0x4E, 0x4C, 0x58, 0x4D, 0x4C, 0x57, 0x45, 0x46, 0x4F, 0x37, 
   0x3A, 0x40, 0x36, 0x3B, 0x3F, 0x37, 0x42, 0x47, 0x47, 0x59, 0x5E, 0x6C, 0x81, 0x85, 0x9A, 0xAC, 
   0xAF, 0xB5, 0xC0, 0xC2, 0xB5, 0xB8, 0xBF, 0xB5, 0xB4, 0xBD, 0xAE, 0xAE, 0xB5, 0xB0, 0xB1, 0xB8, 
   0xA9, 0xA7, 0xAE, 0xA6, 0xA4, 0xAC, 0xAA, 0xAA, 0xB1, 0xA5, 0xA4, 0xAA, 0xA1, 0xA1, 0xA7, 0xA0, 
   0xA1, 0xA8, 0xA8, 0xA4, 0xAD, 0xA9, 0xA4, 0xAA, 0xA7, 0xA3, 0xA8, 0xA4, 0xA3, 0xAA, 0xA3, 0xA2, 
   0xAA, 0xA7, 0xA5, 0xAB, 0xA5, 0xA3, 0xA5, 0x9F, 0x9C, 0xA3, 0xA3, 0xA3, 0xAB, 0xA4, 0xA3, 0xAD, 
   0xA8, 0xA5, 0xAF, 0xAA, 0xA6, 0xB0, 0xA4, 0xA0, 0xB0, 0x94, 0x92, 0xAB, 0x83, 0x86, 0xA9, 0x70, 
   0x79, 0x9F, 0x5E, 0x6F, 0x94, 0x5C, 0x63, 0x7F, 0x47, 0x3F, 0x4B, 0x4E, 0x45, 0x49, 0x4A, 0x40, 
   0x45, 0x3D, 0x3A, 0x39, 0x77, 0x75, 0x69, 0xB3, 0xA4, 0x99, 0xC9, 0xBA, 0xB1, 0xE4, 0xCC, 0xD3, 
   0xA8, 0x84, 0x9E, 0x6E, 0x61, 0x81, 0x6F, 0x6D, 0x8F, 0x72, 0x6F, 0x91, 0x6E, 0x6D, 0x8F, 0x6E, 
   0x71, 0x8D, 0x70, 0x76, 0x8D, 0x80, 0x89, 0xA3, 0x86, 0x8A, 0xA5, 0x8C, 0x8C, 0xA4, 0x91, 0x92, 
   0xA6, 0x98, 0x94, 0xA6, 0x9A, 0x90, 0xA5, 0x87, 0x7D, 0x9A, 0x75, 0x71, 0x92, 0x71, 0x6D, 0x90, 
   0x73, 0x6E, 0x91, 0x78, 0x74, 0x98, 0x77, 0x74, 0x9A, 0x79, 0x78, 0x9B, 0x83, 0x7E, 0xA0, 0x86, 
   0x7E, 0xA1, 0x81, 0x79, 0x9D, 0x80, 0x7A, 0x9F, 0x7A, 0x79, 0x9A, 0x74, 0x74, 0x95, 0x79, 0x79, 
   0x9B, 0x87, 0x89, 0xA7, 0x7D, 0x7E, 0x9D, 0x78, 0x79, 0x99, 0x77, 0x7A, 0x98, 0x76, 0x7C, 0x9B, 
   0x77, 0x7D, 0x9E, 0x72, 0x78, 0x95, 0x7B, 0x81, 0x90, 0x8A, 0x8B, 0x8D, 0x99, 0x93, 0x93, 0x99, 
   0x94, 0x94, 0x92, 0x8E, 0x8E, 0x92, 0x8B, 0x8B, 0x90, 0x8B, 0x89, 0x91, 0x8E, 0x8C, 0x91, 0x91, 
   0x91, 0x92, 0x92, 0x96, 0x9A, 0x95, 0x9B, 0x94, 0x86, 0x8E, 0x60, 0x51, 0x58, 0x45, 0x39, 0x3C, 
   0x44, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x80, 0x7D, 0x7E, 0x76, 0x77, 0x76, 0x64, 0x67, 0x65, 0x50, 
   0x54, 0x4E, 0x4D, 0x4E, 0x45, 0x49, 0x45, 0x43, 0x47, 0x43, 0x45, 0x3F, 0x3C, 0x3B, 0x49, 0x48, 
   0x48, 0x5E, 0x5B, 0x5F, 0x74, 0x6F, 0x75, 0x8E, 0x83, 0x8C, 0x95, 0x88, 0x90, 0x97, 0x8E, 0x92, 
   0x94, 0x8C, 0x90, 0x90, 0x88, 0x8E, 0x95, 0x89, 0x92, 0x95, 0x8C, 0x95, 0x94, 0x90, 0x97, 0x94, 
   0x8F, 0x96, 0x96, 0x8F, 0x95, 0x97, 0x8F, 0x93, 0x99, 0x91, 0x96, 0x9A, 0x90, 0x96, 0x97, 0x93, 
   0x96, 0x95, 0x91, 0x91, 0x88, 0x86, 0x85, 0x83, 0x7F, 0x80, 0x7D, 0x78, 0x7D, 0x76, 0x6D, 0x76, 
   0x76, 0x69, 0x72, 0x64, 0x5A, 0x5F, 0x53, 0x51, 0x51, 0x44, 0x48, 0x49, 0x39, 0x40, 0x44, 0x44, 
   0x4A, 0x50, 0x70, 0x75, 0x7C, 0x83, 0x8B, 0x8E, 0x8D, 0x94, 0x97, 0x93, 0x99, 0x9D, 0x8E, 0x93, 
   0x97, 0xA3, 0xA5, 0xAA, 0xA1, 0xA0, 0xA6, 0xA0, 0x99, 0xA1, 0x9E, 0x97, 0x9B, 0x98, 0x97, 0x99, 
   0x8F, 0x92, 0x96, 0x7C, 0x80, 0x87, 0x4A, 0x4A, 0x55, 0x2E, 0x2D, 0x35, 0x2C, 0x2D, 0x2C, 0x2F, 
   0x30, 0x2F, 0x31, 0x32, 0x32, 0x3A, 0x3D, 0x3A, 0x43, 0x43, 0x3B, 0x4C, 0x47, 0x40, 0x56, 0x55, 
   0x51, 0x5C, 0x5C, 0x5A, 0x30, 0x2D, 0x31, 0x0C, 0x0D, 0x11, 0x0D, 0x15, 0x14, 0x32, 0x3B, 0x35, 
   0x55, 0x5D, 0x5A, 0x50, 0x59, 0x5D, 0x6A, 0x78, 0x79, 0x95, 0xA0, 0xA6, 0xA6, 0xB0, 0xBD, 0xA7, 
   0xB0, 0xBD, 0xAC, 0xB3, 0xBE, 0xAC, 0xB4, 0xBF, 0xA1, 0xAF, 0xB8, 0xA3, 0xAF, 0xBB, 0xA3, 0xAD, 
   0xB8, 0xA2, 0xAA, 0xB5, 0xA0, 0xAA, 0xB4, 0xA4, 0xAE, 0xB8, 0xAB, 0xB5, 0xBD, 0xA8, 0xB0, 0xB7, 
   0xA6, 0xAF, 0xB5, 0xAA, 0xB3, 0xB9, 0xAA, 0xB1, 0xB9, 0xAB, 0xAF, 0xB6, 0xAD, 0xB1, 0xB4, 0xA8, 
   0xAE, 0xB5, 0xA8, 0xAF, 0xBA, 0xA3, 0xAC, 0xB5, 0xA3, 0xAB, 0xB5, 0xA6, 0xAC, 0xB5, 0x9E, 0xA5, 
   0xA9, 0x9D, 0xA2, 0xA9, 0x9D, 0xA0, 0xAA, 0x9D, 0x9F, 0xA9, 0xA0, 0xA0, 0xA9, 0xA5, 0xA4, 0xAB, 
   0xA4, 0xA3, 0xAB, 0xA5, 0xA5, 0xAF, 0xA3, 0xA3, 0xAD, 0xA4, 0xA4, 0xAC, 0x9F, 0x9F, 0xA8, 0xA2, 
   0x9F, 0xA8, 0xA0, 0x9E, 0xA6, 0xA0, 0x9E, 0xA6, 0xA1, 0xA0, 0xA8, 0x9D, 0x9C, 0xA4, 0x9D, 0x9A, 
   0xA2, 0x9F, 0x99, 0xA3, 0x94, 0x8F, 0x9B, 0x7B, 0x73, 0x82, 0x5C, 0x57, 0x63, 0x4A, 0x48, 0x51, 
   0x5E, 0x5E, 0x64, 0x75, 0x7A, 0x7D, 0x80, 0x87, 0x8C, 0x88, 0x90, 0x91, 0x8A, 0x96, 0x97, 0x95, 
   0xA0, 0xA4, 0x9F, 0xA4, 0xA6, 0xA4, 0xA4, 0xA6, 0xA6, 0xA7, 0xAA, 0xA7, 0xA8, 0xAE, 0xA9, 0xAA, 
   0xB1, 0xAC, 0xAD, 0xB3, 0xAD, 0xAC, 0xB3, 0xA9, 0xA6, 0xAD, 0x98, 0x94, 0x9B, 0x67, 0x61, 0x67, 
   0x4B, 0x46, 0x47, 0x3E, 0x38, 0x38, 0x21, 0x1F, 0x1A, 0x24, 0x22, 0x1F, 0x35, 0x34, 0x2F, 0x4B, 
   0x46, 0x3C, 0x52, 0x48, 0x3E, 0x53, 0x49, 0x3F, 0x52, 0x49, 0x3E, 0x58, 0x4C, 0x42, 0x5E, 0x51, 
   0x47, 0x5D, 0x52, 0x48, 0x54, 0x4C, 0x43, 0x4E, 0x49, 0x3F, 0x50, 0x49, 0x3F, 0x50, 0x47, 0x3C, 
   0x52, 0x48, 0x3C, 0x63, 0x5B, 0x4E, 0x6C, 0x63, 0x57, 0x6A, 0x5E, 0x55, 0x69, 0x5A, 0x52, 0x66, 
   0x55, 0x4E, 0x5A, 0x4C, 0x45, 0x55, 0x46, 0x3E, 0x4F, 0x44, 0x39, 0x3E, 0x34, 0x30, 0x38, 0x2C, 
   0x2E, 0x2D, 0x26, 0x22, 0x38, 0x34, 0x34, 0x5F, 0x56, 0x60, 0x64, 0x55, 0x62, 0x5B, 0x53, 0x56, 
   0x52, 0x4D, 0x51, 0x48, 0x49, 0x52, 0x47, 0x48, 0x54, 0x45, 0x46, 0x4F, 0x41, 0x44, 0x4B, 0x3C, 
   0x44, 0x49, 0x42, 0x4A, 0x4F, 0x54, 0x63, 0x69, 0x81, 0x92, 0x98, 0xA0, 0xAC, 0xB1, 0xA8, 0xB0, 
   0xB3, 0xA8, 0xAA, 0xAE, 0xA3, 0xA3, 0xAA, 0xA1, 0xA2, 0xAB, 0xA5, 0xA9, 0xAF, 0xA8, 0xA9, 0xB0, 
   0xA5, 0xA5, 0xAD, 0xA1, 0xA1, 0xA9, 0xA3, 0xA3, 0xAB, 0xA4, 0xA5, 0xAB, 0x9F, 0xA0, 0xA6, 0x9E, 
   0x9E, 0xA4, 0xA1, 0x9E, 0xA5, 0x9D, 0x9C, 0xA2, 0xA5, 0xA5, 0xAA, 0xA5, 0xA4, 0xAC, 0x9C, 0x9B, 
   0xA5, 0xA1, 0xA1, 0xA9, 0xA2, 0xA3, 0xA8, 0x9E, 0x9C, 0xA1, 0xA3, 0xA2, 0xAA, 0xA9, 0xA9, 0xB2, 
   0xB0, 0xAF, 0xBB, 0x9E, 0x9B, 0xB0, 0x8A, 0x86, 0xA9, 0x72, 0x73, 0x9E, 0x62, 0x6A, 0x94, 0x59, 
   0x63, 0x88, 0x51, 0x5C, 0x7E, 0x44, 0x48, 0x60, 0x2E, 0x31, 0x36, 0x98, 0x95, 0x94, 0x97, 0x81, 
   0x85, 0x5D, 0x4E, 0x4D, 0x6E, 0x64, 0x5E, 0xAD, 0x9D, 0x95, 0xE0, 0xD2, 0xCA, 0xE3, 0xCB, 0xD6, 
   0x98, 0x79, 0x95, 0x6E, 0x62, 0x85, 0x70, 0x6D, 0x8D, 0x76, 0x73, 0x94, 0x6F, 0x6D, 0x8E, 0x71, 
   0x72, 0x8B, 0x76, 0x79, 0x8F, 0x7E, 0x80, 0x9F, 0x81, 0x80, 0x9F, 0x83, 0x80, 0x9B, 0x87, 0x86, 
   0x9F, 0x8D, 0x8B, 0xA5, 0x90, 0x8A, 0xA4, 0x8D, 0x83, 0x9F, 0x7D, 0x75, 0x95, 0x7A, 0x73, 0x98, 
   0x7A, 0x75, 0x99, 0x7A, 0x75, 0x9A, 0x76, 0x72, 0x98, 0x73, 0x71, 0x97, 0x74, 0x74, 0x9C, 0x7C, 
   0x7D, 0xA7, 0x81, 0x81, 0xA4, 0x81, 0x7D, 0xA4, 0x81, 0x7F, 0xA4, 0x78, 0x74, 0x95, 0x79, 0x77, 
   0x98, 0x7F, 0x81, 0xA1, 0x77, 0x76, 0x96, 0x77, 0x77, 0x95, 0x7A, 0x78, 0x98, 0x76, 0x77, 0x9B, 
   0x70, 0x76, 0x97, 0x76, 0x7E, 0x9C, 0x75, 0x81, 0x97, 0x7E, 0x88, 0x91, 0x8B, 0x89, 0x8C, 0x92, 
   0x8C, 0x8F, 0x93, 0x90, 0x91, 0x8D, 0x89, 0x87, 0x8F, 0x8A, 0x86, 0x93, 0x8C, 0x8D, 0x93, 0x8D, 
   0x92, 0x92, 0x8E, 0x94, 0x91, 0x8D, 0x94, 0x98, 0x8D, 0x97, 0x83, 0x74, 0x7E, 0x50, 0x41, 0x46, 
   0x44, 0x40, 0x3D, 0x4C, 0x49, 0x48, 0x7E, 0x7E, 0x7D, 0x74, 0x7B, 0x77, 0x65, 0x6A, 0x66, 0x55, 
   0x56, 0x54, 0x47, 0x48, 0x43, 0x3A, 0x39, 0x37, 0x3C, 0x3F, 0x3F, 0x57, 0x5B, 0x5C, 0x78, 0x7C, 
   0x7F, 0x89, 0x87, 0x8B, 0x8A, 0x86, 0x8A, 0x92, 0x89, 0x90, 0x97, 0x8B, 0x93, 0x97, 0x8E, 0x93, 
   0x95, 0x8C, 0x91, 0x8E, 0x89, 0x8E, 0x90, 0x88, 0x91, 0x94, 0x8E, 0x97, 0x94, 0x90, 0x97, 0x97, 
   0x92, 0x99, 0x95, 0x8D, 0x93, 0x92, 0x89, 0x8E, 0x96, 0x8D, 0x92, 0x99, 0x93, 0x96, 0xA0, 0x9D, 
   0x9F, 0xA1, 0x9C, 0x9E, 0x89, 0x85, 0x88, 0x7F, 0x78, 0x7C, 0x75, 0x6E, 0x74, 0x6F, 0x64, 0x6B, 
   0x62, 0x59, 0x60, 0x4F, 0x4B, 0x52, 0x38, 0x39, 0x3C, 0x47, 0x4D, 0x4D, 0x67, 0x71, 0x76, 0x83, 
   0x8A, 0x92, 0x83, 0x86, 0x8E, 0x86, 0x8D, 0x92, 0x95, 0x9C, 0xA1, 0xA0, 0xA7, 0xAC, 0x9F, 0xA3, 
   0xA6, 0xA3, 0xA5, 0xA8, 0x9C, 0x9A, 0x9D, 0xA0, 0x9C, 0x9E, 0xA1, 0x9B, 0x9B, 0x9D, 0x96, 0x98, 
   0x9E, 0x97, 0x9C, 0x9C, 0x9A, 0x9F, 0x81, 0x80, 0x87, 0x4C, 0x4E, 0x55, 0x3A, 0x3E, 0x41, 0x3A, 
   0x40, 0x41, 0x36, 0x3B, 0x3A, 0x32, 0x34, 0x35, 0x38, 0x35, 0x36, 0x40, 0x38, 0x35, 0x4F, 0x49, 
   0x43, 0x59, 0x57, 0x50, 0x5B, 0x54, 0x51, 0x4A, 0x44, 0x43, 0x41, 0x44, 0x40, 0x67, 0x6D, 0x66, 
   0x81, 0x86, 0x7F, 0x7C, 0x7E, 0x7A, 0x5C, 0x65, 0x67, 0x7D, 0x89, 0x8F, 0xA0, 0xAC, 0xB9, 0xA1, 
   0xAB, 0xB8, 0xA4, 0xAC, 0xB7, 0xA8, 0xAE, 0xB8, 0xAA, 0xB0, 0xB8, 0xA7, 0xAF, 0xB9, 0xA6, 0xAB, 
   0xB9, 0xA5, 0xA9, 0xB8, 0xA2, 0xA8, 0xB4, 0xA3, 0xAA, 0xB1, 0xAD, 0xB2, 0xB9, 0xA8, 0xAD, 0xB3, 
   0xA2, 0xA9, 0xAF, 0xA5, 0xAB, 0xB2, 0xA6, 0xAB, 0xB3, 0xA6, 0xA9, 0xB0, 0xB0, 0xB2, 0xB8, 0xA8, 
   0xAD, 0xB6, 0xAB, 0xB1, 0xBB, 0xAA, 0xAF, 0xB8, 0x9D, 0xA2, 0xAC, 0x9E, 0xA3, 0xAD, 0x9D, 0xA3, 
   0xA9, 0x9E, 0xA2, 0xAB, 0x9E, 0xA0, 0xAD, 0x9F, 0xA3, 0xAC, 0x9F, 0xA3, 0xAB, 0x9E, 0xA1, 0xAA, 
   0xA0, 0xA2, 0xAB, 0xA1, 0xA2, 0xAA, 0x9F, 0xA3, 0xAB, 0x9F, 0xA4, 0xAC, 0x9F, 0x9F, 0xAA, 0x9C, 
   0x9D, 0xA8, 0x9C, 0x9D, 0xA7, 0x9E, 0x9C, 0xA6, 0xA1, 0x9E, 0xA6, 0xA1, 0x9D, 0xA5, 0x9F, 0x9B, 
   0xA3, 0x9B, 0x99, 0xA5, 0x9A, 0x97, 0xA6, 0x84, 0x81, 0x96, 0x67, 0x67, 0x79, 0x45, 0x48, 0x54, 
   0x4C, 0x50, 0x5A, 0x75, 0x7B, 0x81, 0x80, 0x89, 0x8A, 0x89, 0x91, 0x90, 0x92, 0x9A, 0x9A, 0x9A, 
   0xA2, 0xA4, 0xA0, 0xA3, 0xA6, 0xA3, 0xA3, 0xA6, 0xA4, 0xA6, 0xA9, 0xA5, 0xA8, 0xAD, 0xA5, 0xA8, 
   0xB0, 0xA8, 0xAB, 0xB2, 0xA7, 0xAB, 0xAE, 0xA9, 0xAA, 0xAD, 0xAB, 0xA7, 0xAD, 0x88, 0x7F, 0x89, 
   0x32, 0x27, 0x2F, 0x17, 0x13, 0x15, 0x1B, 0x1F, 0x13, 0x2D, 0x30, 0x26, 0x3B, 0x39, 0x33, 0x45, 
   0x3F, 0x38, 0x4A, 0x42, 0x39, 0x50, 0x48, 0x3E, 0x52, 0x48, 0x3E, 0x56, 0x4A, 0x3F, 0x5D, 0x4E, 
   0x44, 0x5F, 0x54, 0x48, 0x58, 0x52, 0x44, 0x55, 0x4D, 0x42, 0x54, 0x4B, 0x41, 0x58, 0x50, 0x44, 
   0x6C, 0x63, 0x52, 0x89, 0x80, 0x6F, 0x88, 0x7C, 0x70, 0x5D, 0x50, 0x49, 0x61, 0x4E, 0x4A, 0x61, 
   0x4C, 0x48, 0x5A, 0x4B, 0x47, 0x51, 0x47, 0x3E, 0x42, 0x37, 0x2D, 0x3B, 0x33, 0x2D, 0x38, 0x31, 
   0x29, 0x31, 0x26, 0x23, 0x3C, 0x35, 0x36, 0x61, 0x58, 0x60, 0x5D, 0x52, 0x5C, 0x53, 0x4D, 0x54, 
   0x4D, 0x4A, 0x53, 0x44, 0x49, 0x55, 0x41, 0x48, 0x52, 0x44, 0x48, 0x4F, 0x3E, 0x44, 0x47, 0x38, 
   0x47, 0x48, 0x67, 0x75, 0x79, 0x93, 0xA0, 0xA6, 0xA8, 0xB2, 0xB6, 0xAC, 0xB1, 0xB5, 0xAE, 0xAF, 
   0xB2, 0xAD, 0xAB, 0xAE, 0xAF, 0xAB, 0xB2, 0xAB, 0xA8, 0xB0, 0xAC, 0xAC, 0xB1, 0xAF, 0xB2, 0xB8, 
   0xAD, 0xAF, 0xB6, 0xA2, 0xA4, 0xAB, 0xA5, 0xA5, 0xAD, 0xA6, 0xA6, 0xAC, 0xAC, 0xAC, 0xB2, 0xB3, 
   0xB2, 0xB8, 0xA8, 0xA6, 0xAA, 0xA1, 0xA5, 0xA8, 0xA4, 0xA5, 0xAA, 0xA8, 0xA3, 0xAC, 0xA3, 0x9E, 
   0xA9, 0xA2, 0xA1, 0xAA, 0xA1, 0xA1, 0xA8, 0xA5, 0xA0, 0xA9, 0xAD, 0xA8, 0xB2, 0xA8, 0xA4, 0xB3, 
   0x8D, 0x8C, 0xA3, 0x73, 0x75, 0x97, 0x67, 0x6A, 0x95, 0x60, 0x66, 0x92, 0x51, 0x5C, 0x81, 0x4B, 
   0x53, 0x72, 0x36, 0x38, 0x4F, 0x12, 0x14, 0x1B, 0x4D, 0x57, 0x4E, 0xDB, 0xD8, 0xD1, 0xD4, 0xB8, 
   0xB8, 0x9A, 0x7F, 0x7F, 0x82, 0x70, 0x6D, 0xA0, 0x90, 0x87, 0xD8, 0xC6, 0xC2, 0xC7, 0xA7, 0xBA, 
   0x80, 0x66, 0x83, 0x6C, 0x64, 0x84, 0x6E, 0x69, 0x8A, 0x76, 0x6F, 0x93, 0x6A, 0x65, 0x8B, 0x64, 
   0x61, 0x81, 0x76, 0x75, 0x91, 0x7E, 0x7C, 0x9C, 0x7F, 0x7C, 0x99, 0x7C, 0x78, 0x94, 0x80, 0x7D, 
   0x9D, 0x85, 0x82, 0xA2, 0x90, 0x8B, 0xA8, 0x91, 0x89, 0xA6, 0x86, 0x7F, 0xA2, 0x85, 0x7B, 0xA4, 
   0x80, 0x7A, 0x9F, 0x7F, 0x7A, 0xA0, 0x7B, 0x75, 0x9D, 0x73, 0x6F, 0x97, 0x72, 0x75, 0x9E, 0x76, 
   0x7B, 0xA7, 0x7B, 0x7F, 0xA5, 0x7D, 0x7C, 0xA6, 0x7D, 0x7B, 0xA3, 0x76, 0x72, 0x95, 0x6F, 0x6E, 
   0x8A, 0x6F, 0x73, 0x8F, 0x73, 0x76, 0x95, 0x7B, 0x7E, 0x9A, 0x7D, 0x7F, 0xA1, 0x72, 0x78, 0x9D, 
   0x6D, 0x76, 0x96, 0x7B, 0x82, 0xA1, 0x7A, 0x81, 0xA3, 0x78, 0x7F, 0x97, 0x8A, 0x8C, 0x95, 0x93, 
   0x90, 0x8F, 0x96, 0x90, 0x91, 0x90, 0x8E, 0x8F, 0x99, 0x95, 0x95, 0x9C, 0x96, 0x99, 0x97, 0x8D, 
   0x94, 0x93, 0x8B, 0x8F, 0x91, 0x8D, 0x91, 0x97, 0x8F, 0x93, 0x96, 0x8F, 0x93, 0x64, 0x5A, 0x61, 
   0x43, 0x3F, 0x3E, 0x48, 0x48, 0x43, 0x85, 0x82, 0x81, 0x7D, 0x7C, 0x79, 0x69, 0x69, 0x66, 0x51, 
   0x51, 0x52, 0x42, 0x42, 0x44, 0x64, 0x62, 0x61, 0x8A, 0x8B, 0x8B, 0x98, 0x96, 0x9B, 0xA9, 0xA4, 
   0xAA, 0xA3, 0x9A, 0x9E, 0x98, 0x91, 0x95, 0x95, 0x90, 0x97, 0x94, 0x8E, 0x94, 0x95, 0x90, 0x94, 
   0x95, 0x8F, 0x94, 0x91, 0x8C, 0x93, 0x8E, 0x8A, 0x92, 0x8E, 0x8C, 0x93, 0x8F, 0x8D, 0x93, 0x93, 
   0x8F, 0x95, 0x93, 0x8B, 0x91, 0x91, 0x88, 0x8D, 0x8F, 0x88, 0x8C, 0x88, 0x87, 0x8A, 0x89, 0x86, 
   0x8C, 0x8C, 0x85, 0x8C, 0x80, 0x78, 0x80, 0x77, 0x6D, 0x73, 0x67, 0x61, 0x64, 0x53, 0x50, 0x50, 
   0x53, 0x55, 0x59, 0x61, 0x64, 0x6B, 0x6A, 0x6D, 0x73, 0x74, 0x7A, 0x7D, 0x76, 0x7F, 0x83, 0x76, 
   0x7C, 0x83, 0x74, 0x77, 0x80, 0x8A, 0x8E, 0x96, 0x92, 0x95, 0x9C, 0x98, 0x98, 0x9E, 0x9E, 0x9C, 
   0x9F, 0x9F, 0x9D, 0x9C, 0xA0, 0x9E, 0x9C, 0xA3, 0xA0, 0x9D, 0xA7, 0xA0, 0x9D, 0xA0, 0x96, 0x98, 
   0x9C, 0x90, 0x94, 0x9A, 0x92, 0x93, 0x99, 0x97, 0x9B, 0x82, 0x85, 0x8B, 0x51, 0x57, 0x5D, 0x46, 
   0x4C, 0x51, 0x53, 0x54, 0x58, 0x46, 0x44, 0x46, 0x42, 0x3E, 0x41, 0x40, 0x3A, 0x39, 0x49, 0x45, 
   0x3F, 0x53, 0x4E, 0x4A, 0x5A, 0x54, 0x51, 0x5F, 0x58, 0x57, 0x59, 0x54, 0x52, 0x5D, 0x5B, 0x57, 
   0x73, 0x71, 0x6A, 0x81, 0x7E, 0x75, 0x70, 0x74, 0x74, 0x6F, 0x77, 0x7A, 0x89, 0x8F, 0x98, 0x9D, 
   0xA1, 0xAA, 0x9F, 0xA3, 0xAB, 0xA3, 0xA7, 0xB2, 0xA4, 0xA6, 0xB1, 0xA0, 0xA7, 0xAE, 0xA1, 0xA6, 
   0xB0, 0xA0, 0xA6, 0xB2, 0x9F, 0xA8, 0xB3, 0xA1, 0xA9, 0xB2, 0xA4, 0xA7, 0xB1, 0xA4, 0xA5, 0xAF, 
   0x9F, 0xA4, 0xAC, 0x9D, 0xA1, 0xAA, 0xA2, 0xA4, 0xAD, 0xAD, 0xAD, 0xB5, 0xB1, 0xB2, 0xBA, 0xA4, 
   0xA9, 0xB2, 0xA3, 0xA8, 0xB1, 0xA1, 0xA5, 0xAB, 0x9D, 0xA0, 0xA8, 0x9B, 0x9F, 0xA9, 0x9D, 0xA2, 
   0xA8, 0xA1, 0xA3, 0xAC, 0xA0, 0xA3, 0xAF, 0xA4, 0xA4, 0xAD, 0xA4, 0xA6, 0xAF, 0x99, 0x9E, 0xA9, 
   0x97, 0x9B, 0xA6, 0x9F, 0xA0, 0xA9, 0xA0, 0xA2, 0xAA, 0x9E, 0xA0, 0xAB, 0x9D, 0xA0, 0xAD, 0x9D, 
   0xA1, 0xAE, 0x9D, 0xA1, 0xAD, 0x9C, 0x9F, 0xA9, 0x9E, 0x9C, 0xA4, 0x9C, 0x99, 0xA1, 0x96, 0x96, 
   0x9E, 0x91, 0x94, 0x9D, 0x94, 0x93, 0x9D, 0x8A, 0x8B, 0x99, 0x78, 0x7A, 0x8A, 0x57, 0x5B, 0x6A, 
   0x4C, 0x54, 0x60, 0x73, 0x7A, 0x80, 0x7B, 0x86, 0x89, 0x88, 0x8E, 0x8E, 0x9E, 0xA2, 0xA2, 0xA5, 
   0xA7, 0xAC, 0x9E, 0x9D, 0xA3, 0xA0, 0xA1, 0xA7, 0xA3, 0xA7, 0xAE, 0xA6, 0xA9, 0xB4, 0xA3, 0xA7, 
   0xB5, 0xA6, 0xAA, 0xB6, 0xA5, 0xAB, 0xAD, 0xA1, 0xA4, 0xA4, 0xA5, 0xA4, 0xA8, 0xB0, 0xAA, 0xB5, 
   0x80, 0x76, 0x82, 0x24, 0x17, 0x1E, 0x25, 0x24, 0x1C, 0x34, 0x37, 0x2C, 0x34, 0x34, 0x2C, 0x3C, 
   0x39, 0x31, 0x4A, 0x40, 0x39, 0x4D, 0x43, 0x3C, 0x4E, 0x44, 0x3D, 0x4D, 0x42, 0x39, 0x50, 0x42, 
   0x3A, 0x57, 0x49, 0x41, 0x57, 0x4B, 0x42, 0x55, 0x4E, 0x3D, 0x61, 0x5D, 0x4E, 0x7C, 0x7A, 0x6A, 
   0x96, 0x92, 0x80, 0x9E, 0x94, 0x81, 0x91, 0x82, 0x74, 0x62, 0x50, 0x4A, 0x5D, 0x4C, 0x46, 0x59, 
   0x4A, 0x42, 0x51, 0x46, 0x41, 0x46, 0x3E, 0x36, 0x31, 0x28, 0x22, 0x36, 0x2E, 0x2B, 0x31, 0x2C, 
   0x1D, 0x2B, 0x28, 0x1D, 0x33, 0x31, 0x30, 0x4B, 0x47, 0x4E, 0x4F, 0x4A, 0x51, 0x4A, 0x4A, 0x4F, 
   0x4A, 0x49, 0x53, 0x47, 0x4F, 0x59, 0x40, 0x4E, 0x55, 0x3B, 0x46, 0x4B, 0x35, 0x40, 0x41, 0x72, 
   0x80, 0x80, 0x9A, 0xA3, 0xA8, 0x9D, 0x9F, 0xA8, 0xA3, 0xA8, 0xAE, 0xAB, 0xB0, 0xB7, 0xAD, 0xAF, 
   0xB6, 0xB6, 0xB5, 0xB9, 0xBF, 0xBC, 0xC1, 0xB0, 0xAD, 0xB4, 0xB1, 0xAF, 0xB2, 0xB2, 0xB5, 0xBB, 
   0xB0, 0xB5, 0xBC, 0xAB, 0xAE, 0xB5, 0xAB, 0xAB, 0xB2, 0xA8, 0xA7, 0xAD, 0xA9, 0xA7, 0xAD, 0xA9, 
   0xA6, 0xAC, 0xB0, 0xAA, 0xB1, 0xA6, 0xAB, 0xAD, 0xA4, 0xA7, 0xAA, 0xAB, 0xA5, 0xAA, 0xAA, 0xA3, 
   0xAA, 0xA8, 0xA5, 0xAC, 0xAB, 0xA6, 0xAE, 0xA6, 0xA0, 0xAA, 0x91, 0x8E, 0x9B, 0x7F, 0x7F, 0x93, 
   0x7C, 0x7E, 0x98, 0x7B, 0x7E, 0xA0, 0x6A, 0x6D, 0x91, 0x50, 0x55, 0x77, 0x3A, 0x42, 0x5B, 0x20, 
   0x24, 0x34, 0x15, 0x16, 0x1D, 0x46, 0x4D, 0x49, 0xCF, 0xD1, 0xC6, 0xF1, 0xE6, 0xDF, 0xDE, 0xC7, 
   0xC7, 0xD2, 0xB9, 0xBB, 0xCE, 0xBC, 0xB9, 0xC9, 0xBB, 0xB2, 0xD0, 0xBA, 0xBB, 0x9D, 0x82, 0x9A, 
   0x77, 0x64, 0x88, 0x70, 0x67, 0x8B, 0x6F, 0x68, 0x8D, 0x70, 0x67, 0x90, 0x66, 0x5F, 0x89, 0x67, 
   0x62, 0x87, 0x6F, 0x6D, 0x8D, 0x79, 0x76, 0x98, 0x7D, 0x77, 0x9B, 0x7D, 0x77, 0x99, 0x7D, 0x78, 
   0x98, 0x89, 0x85, 0xA0, 0x8F, 0x8D, 0xA4, 0x82, 0x81, 0x9B, 0x81, 0x80, 0xA3, 0x84, 0x7F, 0xA6, 
   0x8A, 0x86, 0xAA, 0x91, 0x8C, 0xB0, 0x89, 0x80, 0xA6, 0x7E, 0x76, 0x9B, 0x7B, 0x79, 0x9E, 0x77, 
   0x79, 0xA2, 0x75, 0x7C, 0xA5, 0x78, 0x7C, 0xA5, 0x79, 0x7C, 0xA2, 0x77, 0x79, 0x97, 0x7B, 0x7F, 
   0x93, 0x82, 0x84, 0x9B, 0x84, 0x82, 0x9F, 0x88, 0x86, 0xA2, 0x87, 0x8B, 0xA6, 0x79, 0x81, 0xA0, 
   0x76, 0x7C, 0x9F, 0x73, 0x74, 0x9B, 0x6F, 0x71, 0x9A, 0x69, 0x71, 0x91, 0x76, 0x80, 0x93, 0x89, 
   0x8D, 0x94, 0x87, 0x82, 0x87, 0x86, 0x81, 0x86, 0x8A, 0x81, 0x85, 0x89, 0x82, 0x83, 0x82, 0x7F, 
   0x7D, 0x82, 0x7E, 0x7A, 0x8A, 0x85, 0x87, 0x8B, 0x84, 0x84, 0x95, 0x94, 0x94, 0x7E, 0x76, 0x83, 
   0x42, 0x3C, 0x45, 0x38, 0x3D, 0x38, 0x82, 0x7D, 0x79, 0x74, 0x6F, 0x6D, 0x6A, 0x66, 0x66, 0x66, 
   0x68, 0x67, 0x85, 0x86, 0x89, 0x9E, 0x98, 0x9C, 0x9C, 0x98, 0x9B, 0x9A, 0x93, 0x9A, 0x9D, 0x94, 
   0x99, 0x9F, 0x96, 0x9B, 0x9E, 0x99, 0x9F, 0x98, 0x93, 0x9B, 0x97, 0x92, 0x99, 0x99, 0x94, 0x98, 
   0x9C, 0x94, 0x97, 0x98, 0x91, 0x95, 0x93, 0x8E, 0x95, 0x90, 0x8B, 0x93, 0x8F, 0x8A, 0x90, 0x95, 
   0x8D, 0x95, 0x98, 0x8D, 0x93, 0x98, 0x8D, 0x92, 0x96, 0x8D, 0x92, 0x91, 0x88, 0x8D, 0x85, 0x7D, 
   0x84, 0x81, 0x79, 0x81, 0x76, 0x71, 0x79, 0x60, 0x5C, 0x62, 0x46, 0x49, 0x4B, 0x51, 0x54, 0x55, 
   0x7F, 0x85, 0x87, 0x97, 0x97, 0x9C, 0x8B, 0x8B, 0x94, 0x79, 0x7D, 0x85, 0x77, 0x7C, 0x81, 0x76, 
   0x7C, 0x81, 0x7E, 0x83, 0x8B, 0x9B, 0x9B, 0x9F, 0xA0, 0x9D, 0xA0, 0x9D, 0x98, 0x9B, 0xA0, 0x9A, 
   0x9D, 0x9D, 0x9A, 0x9A, 0x9C, 0x9B, 0x9A, 0x9D, 0x9A, 0x9A, 0x9E, 0x99, 0x9A, 0x9C, 0x93, 0x9A, 
   0x98, 0x8F, 0x96, 0x94, 0x8F, 0x92, 0x99, 0x97, 0x9B, 0x9C, 0x9C, 0xA4, 0x8B, 0x8F, 0x97, 0x59, 
   0x60, 0x66, 0x57, 0x56, 0x5D, 0x5B, 0x57, 0x5A, 0x5D, 0x5B, 0x59, 0x5B, 0x58, 0x56, 0x59, 0x57, 
   0x57, 0x54, 0x50, 0x50, 0x4E, 0x4E, 0x4D, 0x4C, 0x4F, 0x4E, 0x4E, 0x4E, 0x4D, 0x55, 0x52, 0x52, 
   0x58, 0x53, 0x50, 0x67, 0x63, 0x5E, 0x73, 0x70, 0x70, 0x7E, 0x7E, 0x7E, 0x85, 0x84, 0x86, 0x9A, 
   0x97, 0x99, 0xA2, 0xA1, 0xA6, 0x9A, 0x9D, 0xA8, 0x9C, 0xA1, 0xAF, 0x9F, 0xA8, 0xB4, 0x9F, 0xA6, 
   0xAE, 0x9D, 0xA4, 0xAA, 0x9C, 0xA3, 0xAB, 0x99, 0xA0, 0xAA, 0x9F, 0xA4, 0xAD, 0x9E, 0xA2, 0xA9, 
   0x9A, 0x9E, 0xA6, 0x99, 0x9D, 0xA8, 0x9E, 0xA0, 0xAA, 0xA3, 0xA4, 0xAC, 0xA3, 0xA4, 0xAD, 0xA3, 
   0xA8, 0xB2, 0xA1, 0xA7, 0xAF, 0x9F, 0xA4, 0xA8, 0x9C, 0x9F, 0xA7, 0x99, 0x9D, 0xA8, 0x9E, 0xA4, 
   0xA9, 0xA2, 0xA4, 0xAD, 0xA1, 0xA5, 0xAF, 0x9F, 0xA2, 0xAB, 0x9F, 0xA1, 0xAD, 0x9C, 0xA0, 0xAC, 
   0x98, 0x9D, 0xA7, 0x9C, 0xA0, 0xA9, 0x9E, 0xA1, 0xA9, 0x9A, 0x9E, 0xA9, 0x99, 0x9D, 0xA9, 0x98, 
   0x9F, 0xAB, 0x9A, 0x9F, 0xAD, 0x98, 0x9B, 0xA6, 0x99, 0x9B, 0xA2, 0x99, 0x9A, 0xA1, 0x98, 0x9A, 
   0xA3, 0x95, 0x98, 0xA2, 0x98, 0x95, 0x9B, 0x95, 0x92, 0x9A, 0x95, 0x91, 0x9D, 0x81, 0x80, 0x91, 
   0x67, 0x6A, 0x7C, 0x70, 0x76, 0x81, 0x7A, 0x86, 0x8B, 0x84, 0x89, 0x8E, 0x92, 0x94, 0x98, 0x9E, 
   0x9D, 0xA3, 0x9E, 0x9B, 0xA4, 0x9E, 0x9F, 0xA9, 0xA3, 0xA6, 0xAF, 0xA8, 0xA9, 0xB3, 0xA6, 0xA8, 
   0xB6, 0xA5, 0xA9, 0xB4, 0xA4, 0xAB, 0xAD, 0xA2, 0xA9, 0xA9, 0xAA, 0xAE, 0xB1, 0xB0, 0xAF, 0xB7, 
   0xA9, 0x9F, 0xAC, 0x4E, 0x44, 0x4C, 0x33, 0x2F, 0x2F, 0x3C, 0x3B, 0x34, 0x3D, 0x3B, 0x32, 0x40, 
   0x3F, 0x34, 0x43, 0x40, 0x35, 0x46, 0x42, 0x38, 0x48, 0x43, 0x39, 0x4A, 0x43, 0x39, 0x4F, 0x44, 
   0x3D, 0x51, 0x47, 0x40, 0x56, 0x4E, 0x46, 0x6B, 0x68, 0x54, 0x87, 0x85, 0x73, 0x9E, 0x98, 0x8A, 
   0xA5, 0x99, 0x8B, 0xA5, 0x96, 0x85, 0x83, 0x72, 0x65, 0x61, 0x50, 0x48, 0x5D, 0x50, 0x46, 0x52, 
   0x4C, 0x40, 0x5E, 0x58, 0x51, 0x4D, 0x42, 0x3C, 0x2F, 0x28, 0x26, 0x2F, 0x29, 0x28, 0x32, 0x29, 
   0x1D, 0x28, 0x26, 0x1B, 0x2E, 0x2C, 0x2A, 0x46, 0x45, 0x4A, 0x4A, 0x49, 0x50, 0x45, 0x4A, 0x4B, 
   0x4A, 0x51, 0x50, 0x4E, 0x56, 0x58, 0x37, 0x42, 0x49, 0x35, 0x44, 0x49, 0x69, 0x76, 0x77, 0xA6, 
   0xAE, 0xB0, 0xAC, 0xAC, 0xB5, 0xA8, 0xA5, 0xAF, 0xA9, 0xA9, 0xB0, 0xAF, 0xAF, 0xB7, 0xB2, 0xB0, 
   0xB9, 0xB3, 0xB1, 0xB9, 0xAF, 0xAE, 0xB5, 0xA4, 0xA3, 0xAC, 0xAD, 0xAE, 0xB5, 0xAD, 0xB1, 0xB8, 
   0xAD, 0xB1, 0xB8, 0xAD, 0xB0, 0xB7, 0xAF, 0xAF, 0xB6, 0xAA, 0xAA, 0xB0, 0xA9, 0xA7, 0xAD, 0xAA, 
   0xA7, 0xAD, 0xA5, 0xA1, 0xA9, 0xA0, 0xA5, 0xAA, 0xA6, 0xA9, 0xAC, 0xAE, 0xA9, 0xAE, 0xAF, 0xAA, 
   0xB1, 0xAB, 0xA8, 0xB4, 0xA1, 0x9C, 0xAE, 0x88, 0x86, 0x99, 0x80, 0x87, 0x9A, 0x88, 0x93, 0xA9, 
   0x8D, 0x96, 0xAD, 0x99, 0x9C, 0xB5, 0x89, 0x89, 0xA2, 0x5C, 0x5F, 0x76, 0x49, 0x52, 0x61, 0x54, 
   0x5C, 0x62, 0x91, 0x95, 0x96, 0xCC, 0xCE, 0xCD, 0xEF, 0xE8, 0xE6, 0xF0, 0xDF, 0xDE, 0xEA, 0xD6, 
   0xD8, 0xF0, 0xDC, 0xDC, 0xF3, 0xE6, 0xE3, 0xF1, 0xDF, 0xE1, 0xCC, 0xB4, 0xBB, 0x91, 0x7E, 0x95, 
   0x7D, 0x71, 0x93, 0x72, 0x6A, 0x93, 0x6F, 0x69, 0x91, 0x6F, 0x6A, 0x90, 0x6F, 0x6C, 0x8F, 0x6E, 
   0x6B, 0x8C, 0x71, 0x6E, 0x91, 0x75, 0x72, 0x98, 0x7B, 0x75, 0x98, 0x7A, 0x75, 0x94, 0x77, 0x73, 
   0x8F, 0x7C, 0x7A, 0x91, 0x7E, 0x80, 0x92, 0x80, 0x83, 0x98, 0x82, 0x82, 0xA0, 0x81, 0x7C, 0xA1, 
   0x85, 0x81, 0xA2, 0x86, 0x80, 0xA3, 0x85, 0x7C, 0xA2, 0x79, 0x72, 0x96, 0x78, 0x75, 0x9A, 0x77, 
   0x78, 0x9E, 0x73, 0x7B, 0xA1, 0x74, 0x7A, 0xA0, 0x78, 0x7A, 0xA1, 0x7A, 0x7C, 0x9D, 0x7C, 0x7F, 
   0x98, 0x80, 0x80, 0x99, 0x88, 0x89, 0xA4, 0x8F, 0x90, 0xA9, 0x8C, 0x8E, 0xA5, 0x82, 0x84, 0xA0, 
   0x85, 0x84, 0xA4, 0x7D, 0x76, 0x9E, 0x70, 0x6C, 0x94, 0x6C, 0x70, 0x91, 0x6B, 0x75, 0x94, 0x70, 
   0x78, 0x97, 0x76, 0x79, 0x8F, 0x7D, 0x7D, 0x8A, 0x7F, 0x7A, 0x84, 0x7F, 0x7C, 0x80, 0x83, 0x86, 
   0x83, 0x8E, 0x90, 0x8A, 0x93, 0x93, 0x97, 0x93, 0x94, 0xA0, 0xA4, 0xAA, 0xBB, 0x93, 0x8F, 0xA9, 
   0x42, 0x3E, 0x4A, 0x3C, 0x41, 0x3D, 0x7B, 0x7B, 0x78, 0x70, 0x70, 0x73, 0x7E, 0x7D, 0x82, 0x7D, 
   0x80, 0x80, 0x86, 0x87, 0x8B, 0x9B, 0x93, 0x97, 0x98, 0x91, 0x94, 0x9A, 0x95, 0x98, 0x9D, 0x96, 
   0x98, 0x9A, 0x92, 0x94, 0x98, 0x94, 0x98, 0x9C, 0x97, 0x9D, 0x9C, 0x96, 0x9C, 0x98, 0x94, 0x98, 
   0x9A, 0x95, 0x99, 0x98, 0x93, 0x9A, 0x96, 0x8E, 0x97, 0x94, 0x8C, 0x95, 0x94, 0x8C, 0x93, 0x96, 
   0x8B, 0x93, 0x98, 0x8B, 0x92, 0x99, 0x8F, 0x94, 0x97, 0x8F, 0x94, 0x95, 0x87, 0x8C, 0x81, 0x78, 
   0x7E, 0x74, 0x71, 0x78, 0x6A, 0x6D, 0x73, 0x5A, 0x5D, 0x64, 0x58, 0x5D, 0x62, 0x89, 0x8B, 0x90, 
   0x98, 0x97, 0x99, 0x88, 0x84, 0x88, 0x7D, 0x7A, 0x82, 0x7A, 0x7D, 0x86, 0x7D, 0x82, 0x88, 0x87, 
   0x8D, 0x8F, 0x90, 0x95, 0x9A, 0xA1, 0x9F, 0xA5, 0x9E, 0x9B, 0xA0, 0xA0, 0x9C, 0xA0, 0xA1, 0x9B, 
   0x9E, 0x9C, 0x98, 0x99, 0x9C, 0x98, 0x99, 0x9D, 0x99, 0x9B, 0x9A, 0x94, 0x97, 0x98, 0x91, 0x97, 
   0x91, 0x8A, 0x91, 0x8E, 0x89, 0x8C, 0x9A, 0x96, 0x99, 0xA0, 0x9C, 0xA1, 0x9A, 0x9B, 0xA0, 0x8A, 
   0x8F, 0x94, 0x71, 0x70, 0x78, 0x54, 0x51, 0x53, 0x55, 0x56, 0x54, 0x58, 0x58, 0x56, 0x59, 0x56, 
   0x58, 0x52, 0x4E, 0x52, 0x45, 0x44, 0x46, 0x4E, 0x4C, 0x4D, 0x5C, 0x56, 0x56, 0x5B, 0x56, 0x54, 
   0x58, 0x55, 0x50, 0x60, 0x60, 0x5A, 0x73, 0x72, 0x71, 0x7F, 0x7E, 0x7C, 0x81, 0x7F, 0x7D, 0x80, 
   0x7E, 0x79, 0x8B, 0x8A, 0x89, 0x93, 0x97, 0x9E, 0x96, 0x9F, 0xA9, 0x9D, 0xA5, 0xB2, 0xA1, 0xA5, 
   0xAF, 0xA0, 0xA1, 0xA9, 0x9E, 0xA0, 0xA7, 0x9B, 0x9F, 0xA7, 0x9C, 0xA2, 0xA8, 0x9B, 0xA0, 0xA6, 
   0x9A, 0x9E, 0xA7, 0x9A, 0x9D, 0xAA, 0x9B, 0x9E, 0xA8, 0x9B, 0x9F, 0xA7, 0x9D, 0xA0, 0xAA, 0x9D, 
   0xA4, 0xAF, 0x9B, 0xA4, 0xAC, 0x9D, 0xA3, 0xAA, 0x9A, 0x9C, 0xA8, 0x99, 0x9E, 0xAA, 0x9D, 0xA3, 
   0xAB, 0xA2, 0xA3, 0xAD, 0xA1, 0xA4, 0xAE, 0x9D, 0xA2, 0xAD, 0x9A, 0x9E, 0xA9, 0x9D, 0xA0, 0xAC, 
   0x9F, 0xA2, 0xAD, 0x9C, 0xA0, 0xAB, 0x9C, 0xA1, 0xAB, 0x99, 0x9F, 0xAA, 0x99, 0x9F, 0xA6, 0x99, 
   0x9C, 0xA8, 0x97, 0x9A, 0xA6, 0x93, 0x97, 0xA0, 0x94, 0x98, 0x9D, 0x9A, 0x9E, 0xA4, 0x9B, 0x9D, 
   0xA7, 0x93, 0x96, 0xA2, 0x92, 0x90, 0x99, 0x8F, 0x8A, 0x94, 0x87, 0x85, 0x90, 0x79, 0x7C, 0x8A, 
   0x62, 0x64, 0x76, 0x58, 0x5D, 0x6B, 0x77, 0x82, 0x8A, 0x85, 0x8B, 0x91, 0x8E, 0x92, 0x95, 0x96, 
   0x97, 0x9B, 0x9D, 0x9C, 0xA5, 0xA2, 0xA4, 0xAE, 0xA8, 0xAD, 0xB3, 0xA9, 0xAC, 0xB1, 0xA6, 0xAB, 
   0xB2, 0xA4, 0xAA, 0xB0, 0xA3, 0xA9, 0xAC, 0xA0, 0xA5, 0xA9, 0xA4, 0xA6, 0xAC, 0xA8, 0xA6, 0xAD, 
   0xB0, 0xA9, 0xB1, 0x91, 0x8D, 0x92, 0x4D, 0x4B, 0x52, 0x3F, 0x3B, 0x39, 0x46, 0x3E, 0x34, 0x44, 
   0x40, 0x35, 0x3F, 0x40, 0x34, 0x3F, 0x40, 0x35, 0x44, 0x43, 0x38, 0x4B, 0x45, 0x3A, 0x51, 0x48, 
   0x3D, 0x5F, 0x59, 0x4C, 0x7C, 0x7A, 0x6C, 0x96, 0x92, 0x7F, 0xA0, 0x98, 0x87, 0x9F, 0x91, 0x83, 
   0x9B, 0x8A, 0x7D, 0x9A, 0x88, 0x7B, 0x7C, 0x6A, 0x5F, 0x5D, 0x4C, 0x42, 0x68, 0x5D, 0x50, 0x59, 
   0x54, 0x46, 0x66, 0x5E, 0x55, 0x52, 0x44, 0x40, 0x2E, 0x27, 0x24, 0x2B, 0x27, 0x26, 0x2F, 0x24, 
   0x1F, 0x29, 0x23, 0x1B, 0x2A, 0x27, 0x22, 0x40, 0x3E, 0x42, 0x43, 0x43, 0x4B, 0x42, 0x49, 0x4A, 
   0x46, 0x4E, 0x4C, 0x3C, 0x42, 0x42, 0x2F, 0x37, 0x3D, 0x5A, 0x68, 0x6F, 0x9B, 0xA4, 0xA8, 0xA8, 
   0xA9, 0xB0, 0xA9, 0xA5, 0xB1, 0xAB, 0xA9, 0xB3, 0xAA, 0xAA, 0xAF, 0xB0, 0xAE, 0xB4, 0xB4, 0xB0, 
   0xB9, 0xB2, 0xAF, 0xB6, 0xAC, 0xAA, 0xB1, 0xAD, 0xA9, 0xB3, 0xAC, 0xA8, 0xB2, 0xA2, 0xA3, 0xAB, 
   0xA5, 0xA7, 0xAE, 0xAD, 0xAE, 0xB6, 0xAE, 0xAE, 0xB6, 0xAA, 0xAA, 0xB0, 0xA5, 0xA5, 0xAB, 0xA0, 
   0xA0, 0xA6, 0xA9, 0xAB, 0xB0, 0xAF, 0xB1, 0xB8, 0xAF, 0xAC, 0xB5, 0xA6, 0x9E, 0xA9, 0x8C, 0x85, 
   0x91, 0x70, 0x6E, 0x7D, 0x62, 0x63, 0x75, 0x67, 0x71, 0x85, 0x70, 0x7E, 0x97, 0x78, 0x86, 0xA4, 
   0x78, 0x81, 0xA0, 0x6A, 0x6D, 0x88, 0x49, 0x4B, 0x5E, 0x51, 0x53, 0x5F, 0x90, 0x93, 0x95, 0xB4, 
   0xBA, 0xB7, 0xDC, 0xDC, 0xD8, 0xDE, 0xD7, 0xD6, 0xE2, 0xD5, 0xD8, 0xEA, 0xD8, 0xD8, 0xE8, 0xD6, 
   0xD6, 0xEA, 0xD7, 0xD6, 0xE5, 0xD0, 0xD2, 0xA8, 0x8D, 0x98, 0x7C, 0x6E, 0x77, 0x8A, 0x85, 0x90, 
   0x8D, 0x87, 0x9A, 0x7C, 0x77, 0x94, 0x72, 0x6D, 0x8D, 0x6E, 0x6A, 0x89, 0x70, 0x6E, 0x8D, 0x6F, 
   0x6C, 0x8C, 0x72, 0x6F, 0x91, 0x74, 0x72, 0x94, 0x78, 0x73, 0x90, 0x75, 0x72, 0x8C, 0x74, 0x73, 
   0x8D, 0x74, 0x73, 0x8D, 0x7B, 0x7E, 0x93, 0x87, 0x8B, 0x9F, 0x89, 0x87, 0xA0, 0x8D, 0x84, 0xA2, 
   0x8E, 0x84, 0xA2, 0x88, 0x7C, 0x9E, 0x81, 0x77, 0x9E, 0x7B, 0x77, 0x9D, 0x77, 0x75, 0x9C, 0x7A, 
   0x7A, 0xA2, 0x76, 0x7B, 0xA4, 0x77, 0x7B, 0xA5, 0x7A, 0x7B, 0xA3, 0x7B, 0x7C, 0xA2, 0x7F, 0x80, 
   0x9E, 0x86, 0x87, 0xA0, 0x96, 0x97, 0xAE, 0x9F, 0x9D, 0xB4, 0x94, 0x92, 0xAD, 0x85, 0x85, 0xA3, 
   0x88, 0x88, 0xA6, 0x7D, 0x76, 0x98, 0x7B, 0x71, 0x98, 0x7A, 0x75, 0x9C, 0x76, 0x7B, 0xA3, 0x71, 
   0x7D, 0xA4, 0x71, 0x7C, 0x9E, 0x78, 0x7D, 0x9A, 0x7F, 0x81, 0x96, 0x8C, 0x8F, 0x94, 0x97, 0x96, 
   0x97, 0x99, 0x9A, 0x9C, 0x96, 0xA1, 0xAF, 0x97, 0xA8, 0xC1, 0x9E, 0xAC, 0xCB, 0x79, 0x77, 0x93, 
   0x37, 0x35, 0x3D, 0x54, 0x60, 0x58, 0x7F, 0x81, 0x7E, 0x87, 0x87, 0x8A, 0x99, 0x98, 0x9C, 0x8E, 
   0x8F, 0x90, 0x8C, 0x8C, 0x8F, 0x9B, 0x91, 0x93, 0x98, 0x8F, 0x8F, 0x98, 0x93, 0x93, 0x9A, 0x93, 
   0x96, 0x98, 0x91, 0x94, 0x96, 0x92, 0x96, 0x9D, 0x97, 0x9E, 0xA3, 0x9F, 0xA5, 0x9C, 0x9C, 0x9F, 
   0x9B, 0x97, 0x9B, 0x99, 0x91, 0x97, 0x94, 0x8E, 0x96, 0x94, 0x8F, 0x97, 0x95, 0x90, 0x96, 0x92, 
   0x8A, 0x91, 0x93, 0x8B, 0x90, 0x94, 0x8E, 0x92, 0x8C, 0x8A, 0x8E, 0x87, 0x80, 0x87, 0x77, 0x76, 
   0x7C, 0x6C, 0x6D, 0x74, 0x70, 0x77, 0x7C, 0x7A, 0x7D, 0x83, 0x8C, 0x8E, 0x93, 0x95, 0x91, 0x95, 
   0x86, 0x7F, 0x80, 0x77, 0x72, 0x76, 0x82, 0x80, 0x85, 0x7B, 0x7D, 0x85, 0x83, 0x87, 0x90, 0x9D, 
   0x9D, 0xA1, 0x9F, 0x9D, 0x9F, 0xA4, 0xA1, 0xA8, 0x9A, 0x99, 0xA0, 0x96, 0x96, 0x9C, 0x94, 0x94, 
   0x9A, 0x94, 0x91, 0x97, 0x99, 0x93, 0x9A, 0x9B, 0x95, 0x9C, 0x98, 0x93, 0x9A, 0x97, 0x91, 0x99, 
   0x92, 0x8C, 0x95, 0x92, 0x8E, 0x92, 0x98, 0x93, 0x98, 0x99, 0x94, 0x98, 0x95, 0x90, 0x92, 0x90, 
   0x8F, 0x93, 0x93, 0x91, 0x97, 0x74, 0x74, 0x78, 0x4A, 0x51, 0x51, 0x4C, 0x52, 0x51, 0x52, 0x52, 
   0x52, 0x4D, 0x4B, 0x4A, 0x47, 0x46, 0x43, 0x53, 0x4D, 0x4B, 0x62, 0x5B, 0x56, 0x64, 0x62, 0x5C, 
   0x55, 0x58, 0x52, 0x54, 0x56, 0x52, 0x62, 0x65, 0x63, 0x77, 0x77, 0x75, 0x85, 0x85, 0x82, 0x80, 
   0x81, 0x7B, 0x8C, 0x8C, 0x87, 0x8A, 0x8F, 0x8E, 0x8C, 0x97, 0x99, 0x96, 0x9F, 0xA7, 0x9B, 0xA2, 
   0xAB, 0x9E, 0xA5, 0xAE, 0x9A, 0xA3, 0xAA, 0x9B, 0xA5, 0xAB, 0x9D, 0xA3, 0xA9, 0x9C, 0xA0, 0xA7, 
   0x9B, 0xA0, 0xA9, 0x9C, 0xA0, 0xAD, 0x9B, 0xA0, 0xAA, 0x9A, 0x9F, 0xA6, 0x9D, 0xA2, 0xAD, 0x9A, 
   0xA2, 0xAD, 0x97, 0xA2, 0xAE, 0x9D, 0xA3, 0xB0, 0x9C, 0x9E, 0xAF, 0x98, 0x9E, 0xAF, 0x9B, 0xA0, 
   0xAC, 0xA0, 0xA0, 0xAC, 0xA1, 0xA3, 0xAE, 0xA0, 0xA3, 0xAF, 0x9C, 0x9E, 0xAA, 0x9D, 0x9E, 0xA8, 
   0x9E, 0xA0, 0xAC, 0x9C, 0x9F, 0xAB, 0x9C, 0x9F, 0xAB, 0x9D, 0x9E, 0xA8, 0x9C, 0xA0, 0xA5, 0xA0, 
   0x9F, 0xA9, 0xA2, 0xA0, 0xAC, 0xAB, 0xAB, 0xB3, 0xA5, 0xA8, 0xAC, 0xA9, 0xAB, 0xB1, 0xA7, 0xA5, 
   0xB1, 0x98, 0x99, 0xA4, 0x92, 0x8F, 0x9D, 0x87, 0x80, 0x91, 0x6B, 0x6C, 0x78, 0x67, 0x6F, 0x77, 
   0x7E, 0x81, 0x8E, 0x73, 0x78, 0x84, 0x76, 0x81, 0x8A, 0x85, 0x8C, 0x92, 0x8B, 0x91, 0x93, 0x94, 
   0x98, 0x98, 0x9D, 0x9D, 0xA4, 0xA1, 0xA4, 0xAB, 0xA4, 0xA9, 0xAE, 0xA6, 0xA6, 0xAD, 0xA4, 0xA6, 
   0xAD, 0xA4, 0xA8, 0xAE, 0xA4, 0xA8, 0xAE, 0xA5, 0xA8, 0xAE, 0xA8, 0xAA, 0xB0, 0xA9, 0xA8, 0xAD, 
   0xB0, 0xAB, 0xB1, 0xB5, 0xB3, 0xB7, 0x91, 0x90, 0x9A, 0x5C, 0x56, 0x57, 0x48, 0x3E, 0x34, 0x46, 
   0x3F, 0x35, 0x42, 0x3F, 0x39, 0x3F, 0x3C, 0x38, 0x45, 0x42, 0x3B, 0x4C, 0x47, 0x3E, 0x60, 0x58, 
   0x4C, 0x7C, 0x76, 0x67, 0xA0, 0x9D, 0x8C, 0xA8, 0x9D, 0x8E, 0x9A, 0x8D, 0x7E, 0x99, 0x8B, 0x7C, 
   0x88, 0x7D, 0x6E, 0x8B, 0x7F, 0x73, 0x7D, 0x6D, 0x64, 0x65, 0x52, 0x4C, 0x74, 0x66, 0x5B, 0x65, 
   0x5A, 0x4C, 0x68, 0x5B, 0x52, 0x55, 0x44, 0x40, 0x2E, 0x24, 0x20, 0x2B, 0x25, 0x21, 0x2A, 0x21, 
   0x22, 0x20, 0x1D, 0x1C, 0x24, 0x25, 0x21, 0x38, 0x3A, 0x3D, 0x36, 0x3A, 0x42, 0x3C, 0x45, 0x46, 
   0x3B, 0x42, 0x40, 0x31, 0x38, 0x37, 0x39, 0x44, 0x49, 0x82, 0x8F, 0x98, 0xA9, 0xAF, 0xB7, 0xA7, 
   0xA7, 0xB0, 0xA7, 0xA3, 0xB2, 0xA8, 0xA6, 0xB0, 0xA6, 0xA8, 0xAC, 0xA9, 0xA9, 0xB0, 0xAE, 0xAD, 
   0xB6, 0xB3, 0xB3, 0xB8, 0xB0, 0xAE, 0xB2, 0xAE, 0xA9, 0xB0, 0xAB, 0xA7, 0xAD, 0xA2, 0xA1, 0xA8, 
   0xA4, 0xA4, 0xAC, 0xAA, 0xAA, 0xB2, 0xA9, 0xAA, 0xB1, 0xAA, 0xAB, 0xB1, 0xAC, 0xAD, 0xB3, 0xAC, 
   0xAD, 0xB3, 0xB2, 0xB4, 0xC1, 0x97, 0x95, 0xA7, 0x6F, 0x6B, 0x80, 0x4B, 0x46, 0x5B, 0x36, 0x33, 
   0x44, 0x38, 0x3A, 0x49, 0x4B, 0x51, 0x60, 0x5C, 0x69, 0x82, 0x69, 0x76, 0x91, 0x73, 0x7D, 0x9D, 
   0x80, 0x85, 0xA8, 0x58, 0x5B, 0x7A, 0x3A, 0x3E, 0x50, 0x3F, 0x41, 0x49, 0x4F, 0x4B, 0x4C, 0x6C, 
   0x6E, 0x6B, 0xB8, 0xB9, 0xB4, 0xF2, 0xEC, 0xE8, 0xF7, 0xF1, 0xEF, 0xF4, 0xE9, 0xE7, 0xE7, 0xD4, 
   0xD6, 0xD7, 0xBE, 0xC2, 0xA8, 0x8C, 0x92, 0x43, 0x2D, 0x37, 0x24, 0x1E, 0x20, 0x56, 0x57, 0x57, 
   0x89, 0x88, 0x8D, 0x8D, 0x8B, 0x99, 0x82, 0x80, 0x93, 0x78, 0x75, 0x8C, 0x70, 0x6D, 0x87, 0x73, 
   0x6F, 0x8D, 0x78, 0x74, 0x93, 0x79, 0x76, 0x95, 0x79, 0x78, 0x93, 0x74, 0x75, 0x8F, 0x76, 0x73, 
   0x8F, 0x76, 0x72, 0x8F, 0x78, 0x7A, 0x93, 0x83, 0x87, 0x9A, 0x8C, 0x8C, 0x9F, 0x97, 0x91, 0xA1, 
   0x97, 0x8D, 0xA1, 0x89, 0x7F, 0x9C, 0x7E, 0x79, 0x9E, 0x7A, 0x7B, 0xA2, 0x79, 0x7B, 0xA2, 0x7D, 
   0x7C, 0xA6, 0x7A, 0x79, 0xA4, 0x7E, 0x81, 0xA8, 0x7E, 0x82, 0xA4, 0x79, 0x81, 0x9F, 0x7F, 0x80, 
   0xA0, 0x83, 0x80, 0x9D, 0x8A, 0x88, 0xA1, 0x8E, 0x8A, 0xA3, 0x87, 0x80, 0x9F, 0x7E, 0x7A, 0x9D, 
   0x7C, 0x7C, 0x9B, 0x7A, 0x77, 0x97, 0x7E, 0x77, 0x9C, 0x80, 0x7C, 0xA3, 0x80, 0x83, 0xAA, 0x75, 
   0x7F, 0xA3, 0x71, 0x78, 0x9E, 0x77, 0x77, 0x9E, 0x7C, 0x80, 0x99, 0x8D, 0x90, 0x98, 0x95, 0x99, 
   0x9C, 0x9C, 0xA1, 0xAD, 0x99, 0xA7, 0xC1, 0x9C, 0xAB, 0xCB, 0x87, 0x8B, 0xA7, 0x58, 0x52, 0x62, 
   0x48, 0x4B, 0x4F, 0x88, 0x9B, 0x95, 0x7F, 0x82, 0x85, 0x8B, 0x8D, 0x8E, 0x9F, 0x9D, 0x9F, 0xA9, 
   0xA3, 0xA4, 0x98, 0x93, 0x93, 0x8D, 0x85, 0x88, 0x8C, 0x85, 0x87, 0x8D, 0x87, 0x88, 0x93, 0x8B, 
   0x8F, 0x91, 0x8C, 0x93, 0x92, 0x90, 0x96, 0x9A, 0x99, 0x9D, 0x9D, 0x9C, 0x9F, 0x9B, 0x9A, 0x9A, 
   0x9B, 0x95, 0x96, 0x9B, 0x92, 0x95, 0x96, 0x8F, 0x94, 0x95, 0x8F, 0x97, 0x96, 0x90, 0x98, 0x94, 
   0x8E, 0x96, 0x91, 0x8B, 0x94, 0x90, 0x8C, 0x93, 0x8B, 0x89, 0x8F, 0x84, 0x7F, 0x89, 0x75, 0x72, 
   0x7A, 0x73, 0x71, 0x75, 0x7A, 0x7A, 0x7D, 0x7D, 0x7B, 0x81, 0x83, 0x80, 0x88, 0x7F, 0x7B, 0x80, 
   0x71, 0x72, 0x74, 0x77, 0x78, 0x7D, 0x8C, 0x89, 0x90, 0x8B, 0x8B, 0x90, 0x92, 0x91, 0x97, 0xA2, 
   0x9B, 0xA2, 0xA0, 0x9B, 0xA2, 0x9E, 0x9A, 0xA2, 0x95, 0x93, 0x99, 0x91, 0x8F, 0x94, 0x91, 0x90, 
   0x93, 0x91, 0x90, 0x94, 0x92, 0x93, 0x98, 0x94, 0x93, 0x98, 0x9B, 0x9B, 0xA2, 0x91, 0x93, 0x9B, 
   0x8C, 0x8B, 0x8F, 0x97, 0x93, 0x94, 0x9A, 0x96, 0x98, 0x92, 0x91, 0x92, 0x86, 0x89, 0x89, 0x7F, 
   0x86, 0x85, 0x83, 0x88, 0x88, 0x82, 0x88, 0x8B, 0x49, 0x51, 0x55, 0x47, 0x4C, 0x4D, 0x50, 0x51, 
   0x4D, 0x4F, 0x4F, 0x49, 0x4A, 0x49, 0x42, 0x51, 0x4E, 0x45, 0x5A, 0x57, 0x4E, 0x61, 0x61, 0x5B, 
   0x53, 0x55, 0x52, 0x47, 0x48, 0x47, 0x4F, 0x57, 0x52, 0x65, 0x69, 0x63, 0x7F, 0x82, 0x7C, 0x8C, 
   0x8D, 0x86, 0x93, 0x90, 0x8B, 0x82, 0x82, 0x7F, 0x76, 0x7E, 0x7D, 0x8C, 0x96, 0x9C, 0x9B, 0xA6, 
   0xAD, 0x9E, 0xA8, 0xB3, 0x9B, 0xA5, 0xB0, 0x9B, 0xA5, 0xAC, 0x9D, 0xA3, 0xAA, 0x9C, 0x9F, 0xA8, 
   0x9B, 0xA0, 0xA9, 0x9D, 0xA2, 0xAC, 0x9E, 0xA4, 0xAC, 0x9D, 0xA3, 0xAB, 0x9E, 0xA4, 0xAD, 0x9B, 
   0xA2, 0xAB, 0x9A, 0xA1, 0xAA, 0x9C, 0xA1, 0xAD, 0x9B, 0xA1, 0xAF, 0x9B, 0xA2, 0xB0, 0x9E, 0xA4, 
   0xB0, 0xA0, 0xA3, 0xAF, 0x9E, 0xA3, 0xAD, 0x9F, 0xA3, 0xAF, 0x9E, 0x9E, 0xAA, 0x9F, 0x9C, 0xA6, 
   0x9F, 0x9D, 0xA7, 0x9D, 0x9E, 0xA8, 0x9C, 0x9E, 0xA9, 0x9C, 0x9E, 0xAA, 0x9C, 0x9F, 0xA7, 0x9F, 
   0x9F, 0xA8, 0xA1, 0xA0, 0xA9, 0xAC, 0xA9, 0xB1, 0xAA, 0xA8, 0xAF, 0xA7, 0xA6, 0xB0, 0xA3, 0xA3, 
   0xAF, 0x9A, 0x9A, 0xA3, 0x7F, 0x7F, 0x8F, 0x67, 0x67, 0x78, 0x76, 0x7C, 0x86, 0x8E, 0x95, 0x9C, 
   0x96, 0x99, 0xA1, 0xA2, 0xA2, 0xAA, 0x92, 0x92, 0x99, 0x8C, 0x8E, 0x92, 0x90, 0x94, 0x96, 0x97, 
   0x9A, 0x99, 0x9C, 0x9D, 0x9F, 0xA1, 0xA1, 0xA7, 0xA2, 0xA4, 0xAA, 0xA2, 0xA3, 0xAE, 0xA2, 0xA4, 
   0xB0, 0xA2, 0xA9, 0xAF, 0xA3, 0xAB, 0xB0, 0xAA, 0xAD, 0xB9, 0xAD, 0xAF, 0xB8, 0xAA, 0xAA, 0xAE, 
   0xA6, 0xA4, 0xA9, 0xA8, 0xAA, 0xB0, 0xAF, 0xB2, 0xB9, 0x85, 0x7D, 0x84, 0x42, 0x34, 0x34, 0x3A, 
   0x31, 0x2A, 0x3E, 0x37, 0x31, 0x3B, 0x35, 0x30, 0x40, 0x3E, 0x35, 0x52, 0x54, 0x44, 0x7D, 0x7C, 
   0x6A, 0x92, 0x8A, 0x7A, 0x9B, 0x8F, 0x7D, 0x97, 0x8A, 0x7A, 0x8B, 0x7D, 0x6E, 0x87, 0x7F, 0x6D, 
   0x88, 0x85, 0x71, 0x8D, 0x85, 0x78, 0x82, 0x73, 0x6A, 0x75, 0x65, 0x5D, 0x6E, 0x5F, 0x56, 0x58, 
   0x48, 0x3F, 0x5C, 0x49, 0x43, 0x54, 0x40, 0x3F, 0x2B, 0x1D, 0x19, 0x29, 0x23, 0x1A, 0x22, 0x21, 
   0x1E, 0x1F, 0x22, 0x23, 0x30, 0x37, 0x37, 0x38, 0x40, 0x42, 0x30, 0x38, 0x3A, 0x2B, 0x37, 0x37, 
   0x21, 0x2D, 0x2D, 0x33, 0x42, 0x44, 0x64, 0x77, 0x7B, 0x95, 0xA1, 0xA9, 0xA3, 0xA9, 0xB0, 0xA3, 
   0xA5, 0xAC, 0xA4, 0xA0, 0xAC, 0xA3, 0x9F, 0xA8, 0xA5, 0xA5, 0xA8, 0xA4, 0xA8, 0xAD, 0xA6, 0xAA, 
   0xB2, 0xA7, 0xA8, 0xB0, 0xAA, 0xA7, 0xAC, 0xAB, 0xA7, 0xAC, 0xAB, 0xA9, 0xB0, 0xA7, 0xA8, 0xAE, 
   0xAA, 0xAD, 0xB6, 0xB1, 0xB1, 0xBB, 0xB4, 0xB3, 0xBA, 0xBD, 0xBB, 0xC2, 0xB6, 0xB0, 0xBB, 0x87, 
   0x83, 0x8F, 0x60, 0x5D, 0x71, 0x49, 0x4B, 0x67, 0x3B, 0x43, 0x63, 0x32, 0x3B, 0x59, 0x2C, 0x34, 
   0x4D, 0x31, 0x38, 0x4B, 0x43, 0x4D, 0x5B, 0x5A, 0x64, 0x7F, 0x60, 0x6B, 0x8E, 0x64, 0x6D, 0x93, 
   0x57, 0x5A, 0x79, 0x37, 0x39, 0x53, 0x4F, 0x55, 0x67, 0x52, 0x54, 0x65, 0x32, 0x31, 0x3C, 0x16, 
   0x16, 0x18, 0x32, 0x35, 0x31, 0x8A, 0x8E, 0x86, 0xBC, 0xBA, 0xB6, 0xC8, 0xBC, 0xBD, 0xC4, 0xB1, 
   0xB4, 0xB2, 0xA0, 0xA4, 0x90, 0x86, 0x8B, 0x68, 0x61, 0x68, 0x29, 0x21, 0x20, 0x26, 0x29, 0x22, 
   0x68, 0x6E, 0x6E, 0x8D, 0x8A, 0x94, 0x92, 0x90, 0x99, 0x8C, 0x8C, 0x98, 0x86, 0x82, 0x95, 0x82, 
   0x7B, 0x92, 0x7A, 0x75, 0x91, 0x78, 0x78, 0x95, 0x7E, 0x7E, 0x99, 0x7C, 0x7C, 0x9A, 0x77, 0x75, 
   0x92, 0x7A, 0x79, 0x92, 0x7B, 0x7C, 0x95, 0x80, 0x82, 0x98, 0x8E, 0x93, 0x9E, 0x9E, 0x99, 0xA3, 
   0x98, 0x90, 0xA3, 0x8B, 0x82, 0x9B, 0x87, 0x7E, 0x9F, 0x7B, 0x77, 0x9F, 0x7B, 0x7D, 0xA5, 0x7A, 
   0x80, 0xAA, 0x7F, 0x82, 0xA7, 0x7D, 0x84, 0xA3, 0x88, 0x8A, 0xA7, 0x81, 0x86, 0xA2, 0x81, 0x81, 
   0x9E, 0x7D, 0x79, 0x96, 0x79, 0x7C, 0x98, 0x7C, 0x79, 0x9A, 0x76, 0x70, 0x95, 0x74, 0x6F, 0x95, 
   0x75, 0x7A, 0x99, 0x7F, 0x80, 0xA2, 0x81, 0x81, 0xA5, 0x7F, 0x81, 0xA4, 0x7F, 0x84, 0xA3, 0x74, 
   0x75, 0x97, 0x6F, 0x70, 0x99, 0x6E, 0x73, 0x9D, 0x76, 0x7C, 0x99, 0x8E, 0x93, 0xA2, 0x99, 0xA0, 
   0xB2, 0x96, 0xA2, 0xB6, 0x92, 0x9F, 0xB7, 0x91, 0x95, 0xAE, 0x67, 0x64, 0x71, 0x66, 0x68, 0x68, 
   0x91, 0xA0, 0x9F, 0xC2, 0xD0, 0xCD, 0x6C, 0x6F, 0x72, 0x91, 0x94, 0x95, 0x9C, 0x9C, 0xA1, 0xAF, 
   0xAA, 0xB5, 0xA9, 0xA7, 0xB1, 0xAB, 0xA6, 0xAF, 0x9C, 0x92, 0x99, 0x87, 0x7C, 0x80, 0x8F, 0x84, 
   0x89, 0x8F, 0x8A, 0x91, 0x8D, 0x8B, 0x90, 0x92, 0x8F, 0x91, 0x9A, 0x93, 0x96, 0x9E, 0x95, 0x96, 
   0x9D, 0x93, 0x94, 0x9D, 0x93, 0x95, 0x99, 0x91, 0x97, 0x98, 0x91, 0x98, 0x9A, 0x94, 0x9B, 0x98, 
   0x93, 0x9B, 0x94, 0x8E, 0x98, 0x92, 0x8D, 0x96, 0x94, 0x8F, 0x9B, 0x88, 0x82, 0x8F, 0x70, 0x6B, 
   0x76, 0x71, 0x6F, 0x72, 0x76, 0x74, 0x75, 0x74, 0x71, 0x76, 0x78, 0x75, 0x7B, 0x76, 0x76, 0x78, 
   0x7A, 0x7E, 0x80, 0x84, 0x87, 0x8B, 0x91, 0x8C, 0x94, 0x96, 0x93, 0x9A, 0x97, 0x94, 0x9A, 0x9A, 
   0x95, 0x99, 0x8F, 0x8F, 0x92, 0x85, 0x85, 0x89, 0x87, 0x89, 0x8D, 0x85, 0x88, 0x8D, 0x89, 0x8A, 
   0x8F, 0x8D, 0x8D, 0x90, 0x8D, 0x90, 0x91, 0x94, 0x95, 0x99, 0x9D, 0x9E, 0xA5, 0x94, 0x9A, 0x9E, 
   0x91, 0x90, 0x8F, 0x9B, 0x96, 0x91, 0xA1, 0x9C, 0x9A, 0xA5, 0xA2, 0xA2, 0x89, 0x8B, 0x8D, 0x7A, 
   0x82, 0x83, 0x7B, 0x81, 0x85, 0x82, 0x87, 0x8E, 0x58, 0x5B, 0x63, 0x45, 0x46, 0x48, 0x4C, 0x4E, 
   0x4A, 0x4D, 0x4D, 0x4A, 0x4B, 0x48, 0x43, 0x54, 0x4E, 0x46, 0x5C, 0x56, 0x4D, 0x62, 0x5D, 0x56, 
   0x5A, 0x58, 0x54, 0x47, 0x49, 0x46, 0x48, 0x51, 0x4B, 0x59, 0x5E, 0x58, 0x6F, 0x74, 0x6F, 0x82, 
   0x86, 0x83, 0x8A, 0x8A, 0x87, 0x7C, 0x7A, 0x78, 0x60, 0x64, 0x64, 0x6D, 0x72, 0x7C, 0x96, 0x9D, 
   0xA6, 0x9F, 0xA6, 0xB3, 0x9D, 0xA5, 0xB3, 0x9D, 0xA4, 0xAF, 0x9A, 0xA1, 0xA9, 0x99, 0x9F, 0xA9, 
   0x99, 0xA0, 0xA9, 0x9C, 0xA4, 0xAC, 0x9E, 0xA5, 0xAD, 0xA2, 0xA8, 0xB0, 0xA0, 0xA4, 0xAD, 0xA0, 
   0xA4, 0xAD, 0x9D, 0xA1, 0xAA, 0x99, 0x9F, 0xA8, 0x97, 0x9E, 0xA9, 0x9B, 0x9F, 0xAC, 0x9D, 0xA1, 
   0xAD, 0x9F, 0xA2, 0xAC, 0x9D, 0xA3, 0xAB, 0x9C, 0xA2, 0xAC, 0xA1, 0xA2, 0xAE, 0xA6, 0xA3, 0xAC, 
   0xA0, 0x9E, 0xA6, 0x9E, 0x9D, 0xA6, 0x9B, 0x9B, 0xA6, 0x9E, 0x9E, 0xAA, 0x9E, 0x9F, 0xA9, 0x9F, 
   0xA1, 0xAA, 0x9D, 0xA1, 0xAB, 0x9F, 0xA2, 0xAD, 0xA0, 0xA2, 0xAD, 0xA0, 0x9E, 0xAC, 0x9D, 0x9A, 
   0xA8, 0x82, 0x87, 0x8F, 0x77, 0x7B, 0x87, 0x8D, 0x92, 0x9D, 0x9B, 0x9F, 0xA7, 0x9B, 0x9D, 0xA5, 
   0x9C, 0x9A, 0xA1, 0x9A, 0x96, 0x9D, 0x92, 0x92, 0x95, 0x8E, 0x90, 0x95, 0x93, 0x96, 0x9D, 0x98, 
   0x9A, 0x9D, 0xA2, 0xA2, 0xA4, 0xA6, 0xA5, 0xAB, 0xA1, 0xA2, 0xA4, 0xA5, 0xA4, 0xA8, 0xA8, 0xA7, 
   0xAE, 0xAA, 0xAC, 0xAF, 0xAA, 0xAC, 0xAF, 0xAE, 0xAD, 0xB4, 0xAF, 0xAD, 0xB2, 0xAB, 0xA9, 0xAC, 
   0xAB, 0xA9, 0xAE, 0xAB, 0xAE, 0xB5, 0xAB, 0xAE, 0xB4, 0xA3, 0x9B, 0xA4, 0x63, 0x56, 0x5D, 0x3B, 
   0x31, 0x2F, 0x3E, 0x35, 0x30, 0x45, 0x3C, 0x33, 0x61, 0x55, 0x48, 0x85, 0x7B, 0x68, 0x91, 0x89, 
   0x74, 0x8E, 0x84, 0x74, 0x83, 0x77, 0x65, 0x8C, 0x82, 0x73, 0xAD, 0xA1, 0x92, 0x9C, 0x92, 0x85, 
   0x87, 0x84, 0x72, 0x8F, 0x8A, 0x7D, 0x88, 0x7E, 0x73, 0x81, 0x72, 0x68, 0x68, 0x5D, 0x54, 0x51, 
   0x47, 0x40, 0x58, 0x47, 0x43, 0x4F, 0x3F, 0x3F, 0x22, 0x1A, 0x17, 0x24, 0x1F, 0x18, 0x28, 0x21, 
   0x21, 0x2F, 0x30, 0x33, 0x36, 0x3F, 0x41, 0x31, 0x3A, 0x3C, 0x25, 0x2E, 0x2F, 0x2C, 0x3C, 0x3F, 
   0x57, 0x71, 0x74, 0x8C, 0xA3, 0xA9, 0xAC, 0xB8, 0xC0, 0xAA, 0xAB, 0xB5, 0xAA, 0xA9, 0xAF, 0xA7, 
   0xA4, 0xA9, 0xA4, 0x9E, 0xA5, 0xA1, 0x9E, 0xA1, 0xA4, 0xA5, 0xA8, 0xA8, 0xA8, 0xAF, 0xA9, 0xA5, 
   0xAE, 0xAB, 0xA7, 0xB0, 0xB0, 0xAF, 0xB4, 0xAB, 0xAB, 0xB0, 0xA8, 0xA8, 0xB0, 0xB7, 0xB8, 0xBE, 
   0xC5, 0xC6, 0xD1, 0xC5, 0xC1, 0xCF, 0x9E, 0x9A, 0xA8, 0x7A, 0x77, 0x8A, 0x63, 0x61, 0x79, 0x53, 
   0x56, 0x70, 0x4A, 0x4E, 0x65, 0x4A, 0x51, 0x6C, 0x53, 0x5D, 0x7B, 0x57, 0x64, 0x84, 0x55, 0x62, 
   0x83, 0x56, 0x60, 0x7F, 0x4A, 0x52, 0x6A, 0x56, 0x5D, 0x78, 0x59, 0x60, 0x83, 0x42, 0x4A, 0x68, 
   0x31, 0x34, 0x42, 0x3D, 0x3E, 0x46, 0x57, 0x58, 0x64, 0x6F, 0x6B, 0x7E, 0x6C, 0x6A, 0x78, 0x24, 
   0x27, 0x2C, 0x31, 0x3D, 0x3B, 0x6F, 0x7B, 0x76, 0x8B, 0x90, 0x8F, 0x8F, 0x8E, 0x90, 0x92, 0x8F, 
   0x92, 0x90, 0x93, 0x95, 0x87, 0x91, 0x95, 0x91, 0x98, 0x9F, 0x7A, 0x7B, 0x7B, 0x56, 0x5C, 0x57, 
   0x71, 0x7B, 0x7D, 0x8E, 0x8C, 0x95, 0x93, 0x8E, 0x96, 0x90, 0x8F, 0x9B, 0x90, 0x8D, 0x9B, 0x8F, 
   0x8B, 0x9C, 0x80, 0x7D, 0x96, 0x77, 0x7B, 0x96, 0x7C, 0x7F, 0x9B, 0x82, 0x81, 0xA4, 0x75, 0x75, 
   0x96, 0x78, 0x7D, 0x93, 0x78, 0x7D, 0x92, 0x7A, 0x7F, 0x92, 0x96, 0x9C, 0xA5, 0x9F, 0x9B, 0xA7, 
   0x9B, 0x92, 0xA6, 0x92, 0x88, 0x9F, 0x8A, 0x82, 0xA0, 0x7E, 0x78, 0x9F, 0x7C, 0x7C, 0xA3, 0x73, 
   0x76, 0x9D, 0x7A, 0x7C, 0xA1, 0x7C, 0x7E, 0xA2, 0x7C, 0x7C, 0xA0, 0x7D, 0x80, 0xA1, 0x87, 0x86, 
   0xA2, 0x84, 0x81, 0x9D, 0x7E, 0x7F, 0x9E, 0x7B, 0x76, 0x99, 0x72, 0x6A, 0x93, 0x6D, 0x69, 0x92, 
   0x71, 0x7C, 0x9C, 0x7A, 0x7E, 0xA2, 0x7E, 0x80, 0xA4, 0x81, 0x83, 0xA2, 0x80, 0x85, 0x9F, 0x7A, 
   0x78, 0x9B, 0x78, 0x73, 0x9D, 0x7B, 0x7F, 0xA5, 0x85, 0x8B, 0xA7, 0x93, 0x9C, 0xB4, 0x94, 0xA1, 
   0xBA, 0x8E, 0x9A, 0xAF, 0x87, 0x8C, 0x9A, 0x62, 0x64, 0x6D, 0x5F, 0x69, 0x67, 0xA3, 0xB4, 0xAB, 
   0xCF, 0xDB, 0xD7, 0xD2, 0xD6, 0xD3, 0x48, 0x4E, 0x50, 0x7A, 0x7D, 0x7E, 0x97, 0x99, 0xA1, 0x92, 
   0x92, 0xA3, 0x8E, 0x8E, 0xA3, 0x97, 0x96, 0xA6, 0xAB, 0xA4, 0xAB, 0xA0, 0x96, 0x9C, 0x90, 0x8A, 
   0x90, 0x8F, 0x8A, 0x90, 0x8A, 0x86, 0x8A, 0x82, 0x7C, 0x7F, 0x85, 0x7E, 0x7E, 0x97, 0x8E, 0x8F, 
   0x9B, 0x93, 0x95, 0x9D, 0x95, 0x98, 0x98, 0x92, 0x95, 0x93, 0x8D, 0x91, 0x97, 0x91, 0x95, 0x97, 
   0x93, 0x98, 0x94, 0x8E, 0x96, 0x91, 0x8B, 0x95, 0x90, 0x8A, 0x97, 0x83, 0x7E, 0x8B, 0x77, 0x75, 
   0x80, 0x77, 0x79, 0x7E, 0x72, 0x72, 0x74, 0x6E, 0x6B, 0x6F, 0x73, 0x73, 0x76, 0x77, 0x7B, 0x7A, 
   0x87, 0x89, 0x8B, 0x90, 0x92, 0x94, 0x94, 0x8F, 0x96, 0x90, 0x8D, 0x95, 0xA0, 0x9D, 0xA3, 0x90, 
   0x8E, 0x8F, 0x84, 0x86, 0x83, 0x8C, 0x8C, 0x8C, 0x8C, 0x8F, 0x90, 0x89, 0x8C, 0x8E, 0x91, 0x91, 
   0x94, 0x97, 0x94, 0x98, 0x95, 0x92, 0x94, 0x97, 0x91, 0x95, 0x8C, 0x87, 0x8E, 0x86, 0x84, 0x8B, 
   0x97, 0x94, 0x97, 0xA2, 0x9B, 0x9C, 0x9F, 0x9B, 0x9C, 0x9F, 0x9D, 0x9F, 0x91, 0x8F, 0x93, 0x84, 
   0x85, 0x8C, 0x8B, 0x8E, 0x97, 0x98, 0x98, 0xA4, 0x76, 0x76, 0x80, 0x49, 0x47, 0x4C, 0x48, 0x4A, 
   0x47, 0x43, 0x47, 0x43, 0x48, 0x47, 0x42, 0x4F, 0x4A, 0x45, 0x5A, 0x56, 0x4F, 0x62, 0x5D, 0x56, 
   0x59, 0x54, 0x50, 0x3E, 0x3E, 0x3C, 0x3D, 0x43, 0x3D, 0x54, 0x55, 0x52, 0x5B, 0x5C, 0x5C, 0x68, 
   0x6A, 0x6B, 0x82, 0x83, 0x85, 0x88, 0x87, 0x87, 0x87, 0x86, 0x85, 0x84, 0x84, 0x87, 0x8F, 0x92, 
   0x94, 0x96, 0x9A, 0xA0, 0x9D, 0xA4, 0xAD, 0xA2, 0xAA, 0xB2, 0x9B, 0xA2, 0xAB, 0x9D, 0xA3, 0xAE, 
   0x9E, 0xA2, 0xAD, 0x9F, 0xA3, 0xAE, 0x9E, 0xA3, 0xAE, 0xA1, 0xA6, 0xB1, 0x9C, 0xA3, 0xAE, 0x9C, 
   0xA3, 0xAE, 0x98, 0x9F, 0xA8, 0x95, 0x9F, 0xA6, 0x99, 0xA0, 0xA8, 0x9D, 0x9F, 0xAA, 0x9E, 0x9F, 
   0xAA, 0xA0, 0xA0, 0xA9, 0x9F, 0xA3, 0xAA, 0x9C, 0xA0, 0xA8, 0x9D, 0x9D, 0xA6, 0xA1, 0x9F, 0xA7, 
   0xA2, 0xA1, 0xA9, 0xA0, 0xA0, 0xA8, 0xA1, 0xA0, 0xA9, 0xA2, 0x9E, 0xA8, 0xA1, 0xA1, 0xA9, 0xA0, 
   0xA3, 0xAC, 0x9D, 0xA1, 0xAC, 0x9A, 0x9D, 0xAA, 0x96, 0x99, 0xA5, 0x97, 0x97, 0xA3, 0x92, 0x90, 
   0x9B, 0x95, 0x93, 0x9A, 0xA1, 0x9E, 0xA3, 0xA4, 0xA0, 0xA6, 0xA1, 0x9B, 0xA3, 0x9D, 0x97, 0x9E, 
   0x8E, 0x89, 0x8D, 0x8F, 0x8C, 0x90, 0x8D, 0x93, 0x98, 0x90, 0x95, 0x9C, 0x95, 0x97, 0xA2, 0x9A, 
   0x9B, 0xA2, 0xA4, 0xA4, 0xA6, 0xA5, 0xA8, 0xAA, 0xA1, 0xA4, 0xA5, 0xA3, 0xA3, 0xA4, 0xA5, 0xA5, 
   0xA7, 0xA7, 0xA7, 0xAB, 0xA6, 0xA6, 0xAA, 0xA7, 0xA7, 0xAD, 0xA9, 0xA8, 0xAE, 0xAA, 0xA8, 0xAB, 
   0xAD, 0xAB, 0xAD, 0xAD, 0xAE, 0xB0, 0xB7, 0xB3, 0xB6, 0xC2, 0xB9, 0xBE, 0x8E, 0x86, 0x8A, 0x4C, 
   0x47, 0x48, 0x54, 0x50, 0x4B, 0x66, 0x63, 0x55, 0x84, 0x7A, 0x68, 0x92, 0x84, 0x70, 0x88, 0x81, 
   0x68, 0x91, 0x91, 0x7C, 0x97, 0x97, 0x85, 0x94, 0x89, 0x77, 0xA1, 0x94, 0x82, 0x99, 0x8B, 0x7D, 
   0x8C, 0x82, 0x72, 0x8E, 0x87, 0x77, 0x91, 0x86, 0x76, 0x81, 0x6E, 0x5F, 0x5C, 0x52, 0x4B, 0x62, 
   0x59, 0x51, 0x65, 0x54, 0x53, 0x4B, 0x40, 0x3F, 0x2A, 0x2E, 0x2C, 0x2E, 0x31, 0x30, 0x33, 0x32, 
   0x33, 0x2C, 0x31, 0x34, 0x27, 0x2E, 0x30, 0x26, 0x31, 0x34, 0x3F, 0x50, 0x56, 0x83, 0x96, 0x9F, 
   0xA9, 0xB5, 0xBF, 0xA8, 0xB0, 0xB9, 0xA5, 0xAB, 0xB5, 0xA4, 0xA6, 0xB2, 0xA0, 0xA2, 0xAC, 0xA0, 
   0xA3, 0xA7, 0xA4, 0xA1, 0xA6, 0xA0, 0x9B, 0xA2, 0xA6, 0x9F, 0xA6, 0xA9, 0xA2, 0xA9, 0xAB, 0xA7, 
   0xAE, 0xB2, 0xAF, 0xB7, 0xBE, 0xBD, 0xC4, 0xB8, 0xB6, 0xBF, 0xAC, 0xA9, 0xB3, 0x97, 0x93, 0xA5, 
   0x78, 0x78, 0x8C, 0x5D, 0x5C, 0x75, 0x47, 0x4C, 0x67, 0x46, 0x4F, 0x6F, 0x4F, 0x56, 0x79, 0x52, 
   0x5B, 0x7B, 0x4C, 0x57, 0x6B, 0x4B, 0x53, 0x68, 0x4D, 0x53, 0x69, 0x4F, 0x59, 0x70, 0x57, 0x63, 
   0x7F, 0x65, 0x71, 0x91, 0x6D, 0x78, 0x97, 0x6A, 0x70, 0x92, 0x4E, 0x51, 0x69, 0x3C, 0x3F, 0x47, 
   0x51, 0x51, 0x4F, 0x57, 0x51, 0x54, 0x45, 0x40, 0x43, 0x64, 0x60, 0x67, 0x4F, 0x4E, 0x56, 0x41, 
   0x4C, 0x4E, 0x61, 0x70, 0x6F, 0x7B, 0x86, 0x83, 0x89, 0x8F, 0x91, 0x8E, 0x94, 0x99, 0x91, 0x96, 
   0x9B, 0x98, 0x9C, 0xA3, 0x93, 0x98, 0xA0, 0x8B, 0x90, 0x98, 0x90, 0x94, 0x99, 0x85, 0x86, 0x8B, 
   0x78, 0x7C, 0x82, 0x87, 0x87, 0x8F, 0x89, 0x89, 0x92, 0x89, 0x8A, 0x96, 0x8A, 0x8B, 0x96, 0x8E, 
   0x8D, 0x97, 0x8B, 0x89, 0x9C, 0x7D, 0x7F, 0x99, 0x79, 0x7F, 0x9A, 0x7F, 0x83, 0xA4, 0x7F, 0x82, 
   0xA2, 0x75, 0x7C, 0x95, 0x7E, 0x88, 0x9A, 0x8C, 0x93, 0xA1, 0x90, 0x94, 0xA0, 0x93, 0x94, 0xA0, 
   0x98, 0x93, 0xA2, 0x95, 0x8C, 0xA2, 0x87, 0x83, 0xA0, 0x7D, 0x7C, 0xA1, 0x79, 0x76, 0xA1, 0x77, 
   0x72, 0x97, 0x74, 0x72, 0x94, 0x7A, 0x77, 0xA1, 0x79, 0x7A, 0xA2, 0x7C, 0x80, 0xA0, 0x81, 0x80, 
   0x9D, 0x84, 0x82, 0xA1, 0x82, 0x82, 0xA2, 0x84, 0x80, 0xA0, 0x76, 0x70, 0x95, 0x75, 0x6F, 0x97, 
   0x7C, 0x7D, 0x9F, 0x81, 0x7D, 0x9F, 0x86, 0x81, 0xA0, 0x88, 0x85, 0x9F, 0x85, 0x86, 0xA0, 0x83, 
   0x81, 0xA4, 0x82, 0x7D, 0xA3, 0x7E, 0x80, 0x9F, 0x86, 0x91, 0xAC, 0x8F, 0xA0, 0xBF, 0x8C, 0x97, 
   0xB7, 0x8A, 0x8C, 0xA2, 0x73, 0x6F, 0x77, 0x69, 0x6D, 0x6C, 0x9B, 0xAE, 0xA6, 0xCC, 0xDF, 0xD8, 
   0xD9, 0xDF, 0xDC, 0xCF, 0xCD, 0xCA, 0x4D, 0x52, 0x58, 0x60, 0x63, 0x6B, 0x8C, 0x8F, 0x99, 0x8D, 
   0x8C, 0x9C, 0x8F, 0x8D, 0xA0, 0x94, 0x91, 0x9F, 0x99, 0x97, 0xA1, 0x9E, 0x9C, 0xA7, 0x92, 0x92, 
   0x9D, 0x92, 0x8E, 0x95, 0x8C, 0x87, 0x8C, 0x8E, 0x8A, 0x8D, 0x8A, 0x87, 0x88, 0x8A, 0x87, 0x88, 
   0x8E, 0x88, 0x8B, 0x93, 0x8B, 0x90, 0x98, 0x91, 0x91, 0x99, 0x92, 0x94, 0x99, 0x93, 0x96, 0x98, 
   0x92, 0x98, 0x93, 0x8D, 0x95, 0x8E, 0x88, 0x91, 0x8B, 0x86, 0x8E, 0x81, 0x7D, 0x86, 0x7B, 0x7E, 
   0x84, 0x7D, 0x83, 0x86, 0x82, 0x84, 0x86, 0x84, 0x82, 0x85, 0x81, 0x83, 0x85, 0x8E, 0x94, 0x96, 
   0x9B, 0x9F, 0xA2, 0x97, 0x9B, 0x9C, 0x99, 0x98, 0x9A, 0x94, 0x92, 0x97, 0x98, 0x95, 0x9A, 0x92, 
   0x8F, 0x90, 0x90, 0x8E, 0x8C, 0x96, 0x92, 0x94, 0x9A, 0x99, 0x98, 0x94, 0x93, 0x92, 0x90, 0x8D, 
   0x8D, 0x99, 0x93, 0x96, 0x95, 0x90, 0x95, 0x8D, 0x8B, 0x93, 0x85, 0x85, 0x8E, 0x86, 0x86, 0x8F, 
   0x94, 0x91, 0x98, 0x9D, 0x94, 0x9B, 0x9B, 0x93, 0x9A, 0x9D, 0x97, 0x9E, 0x96, 0x93, 0x96, 0x91, 
   0x91, 0x96, 0x8B, 0x88, 0x90, 0x8D, 0x8A, 0x96, 0x80, 0x82, 0x8D, 0x4F, 0x4E, 0x54, 0x3E, 0x3D, 
   0x3D, 0x3D, 0x44, 0x3E, 0x40, 0x40, 0x3C, 0x45, 0x45, 0x41, 0x4A, 0x4C, 0x47, 0x55, 0x54, 0x4E, 
   0x5D, 0x57, 0x55, 0x3C, 0x39, 0x3B, 0x3A, 0x40, 0x3D, 0x50, 0x51, 0x4F, 0x59, 0x57, 0x57, 0x5E, 
   0x5D, 0x5E, 0x6C, 0x6D, 0x6E, 0x93, 0x94, 0x97, 0x88, 0x88, 0x88, 0x96, 0x9A, 0x91, 0x9B, 0xA0, 
   0x98, 0x8B, 0x90, 0x8D, 0x96, 0x9C, 0x9E, 0xA1, 0xA7, 0xAB, 0x9E, 0xA5, 0xAB, 0x9B, 0xA2, 0xAC, 
   0x9A, 0xA0, 0xAB, 0x9C, 0xA1, 0xAC, 0x9D, 0xA2, 0xAD, 0xA0, 0xA5, 0xB0, 0x9D, 0xA2, 0xAD, 0x9F, 
   0xA4, 0xAF, 0xA2, 0xA8, 0xB0, 0x9D, 0xA6, 0xAC, 0x9B, 0xA3, 0xAA, 0x9F, 0xA2, 0xAB, 0xA1, 0xA2, 
   0xAC, 0xA3, 0xA1, 0xAA, 0xA0, 0xA0, 0xA8, 0x9F, 0x9E, 0xA6, 0xA1, 0x9F, 0xA7, 0xA3, 0xA1, 0xA6, 
   0xA6, 0xA6, 0xAB, 0xA1, 0xA4, 0xA9, 0xA0, 0xA2, 0xA9, 0x9C, 0x9B, 0xA3, 0x9A, 0x9E, 0xA4, 0xA2, 
   0xA7, 0xAC, 0xA8, 0xAA, 0xB1, 0xA1, 0xA2, 0xAA, 0x9C, 0x9C, 0xA5, 0x9D, 0x9D, 0xA6, 0xA0, 0xA1, 
   0xAA, 0xA5, 0xA2, 0xA9, 0xA0, 0xA0, 0xA3, 0x9E, 0x9E, 0xA4, 0x9F, 0x9C, 0xA7, 0x94, 0x91, 0x99, 
   0x7F, 0x7F, 0x83, 0x86, 0x8A, 0x8C, 0x8B, 0x92, 0x96, 0x91, 0x97, 0x9C, 0x99, 0x9C, 0xA3, 0x9F, 
   0x9F, 0xA1, 0xA8, 0xA7, 0xA7, 0xAF, 0xB0, 0xB3, 0xC0, 0xC2, 0xC3, 0xC9, 0xC8, 0xCA, 0xB6, 0xB7, 
   0xB7, 0xA9, 0xAA, 0xAE, 0xA0, 0xA0, 0xA7, 0xA7, 0xA7, 0xAC, 0xAD, 0xAC, 0xB4, 0xAD, 0xAA, 0xB0, 
   0xAD, 0xAA, 0xAD, 0xAD, 0xAC, 0xAF, 0xB3, 0xAC, 0xB1, 0xB3, 0xAB, 0xB1, 0x97, 0x93, 0x99, 0x7B, 
   0x78, 0x7F, 0x66, 0x60, 0x60, 0x66, 0x60, 0x54, 0x81, 0x73, 0x62, 0x8C, 0x7B, 0x67, 0x8C, 0x82, 
   0x69, 0x90, 0x8A, 0x74, 0x87, 0x7F, 0x6F, 0x85, 0x74, 0x63, 0x90, 0x84, 0x71, 0xA0, 0x93, 0x84, 
   0x94, 0x86, 0x77, 0x93, 0x85, 0x76, 0x98, 0x8C, 0x79, 0x87, 0x78, 0x66, 0x50, 0x42, 0x3A, 0x63, 
   0x58, 0x4E, 0x68, 0x5B, 0x57, 0x50, 0x4B, 0x47, 0x46, 0x4C, 0x4A, 0x3C, 0x41, 0x44, 0x2D, 0x32, 
   0x31, 0x2C, 0x38, 0x38, 0x44, 0x54, 0x54, 0x73, 0x86, 0x8B, 0x90, 0xA3, 0xAD, 0xA5, 0xB1, 0xBE, 
   0xB1, 0xB7, 0xC0, 0xAB, 0xAE, 0xB4, 0xAC, 0xAC, 0xB5, 0xAA, 0xA8, 0xB5, 0x9D, 0x9F, 0xA8, 0x9A, 
   0x9D, 0xA0, 0xA2, 0xA1, 0xA4, 0xA6, 0xA3, 0xA9, 0xA7, 0xA6, 0xAB, 0xAF, 0xAD, 0xB0, 0xB9, 0xB2, 
   0xB6, 0xB4, 0xA9, 0xB2, 0x8B, 0x83, 0x90, 0x65, 0x61, 0x71, 0x4A, 0x49, 0x5B, 0x46, 0x49, 0x60, 
   0x4C, 0x53, 0x6C, 0x53, 0x5B, 0x76, 0x59, 0x66, 0x83, 0x5C, 0x6C, 0x8E, 0x59, 0x66, 0x88, 0x55, 
   0x62, 0x7F, 0x53, 0x5B, 0x70, 0x51, 0x56, 0x6D, 0x52, 0x56, 0x6D, 0x4F, 0x56, 0x6C, 0x4E, 0x56, 
   0x6D, 0x50, 0x58, 0x73, 0x54, 0x5F, 0x80, 0x58, 0x60, 0x83, 0x59, 0x58, 0x6D, 0x52, 0x4F, 0x55, 
   0x55, 0x54, 0x53, 0x59, 0x51, 0x58, 0x26, 0x23, 0x23, 0x30, 0x33, 0x31, 0x43, 0x4C, 0x4B, 0x6C, 
   0x7B, 0x78, 0x7F, 0x8B, 0x8B, 0x84, 0x8B, 0x89, 0x91, 0x97, 0x99, 0x91, 0x97, 0x9C, 0x90, 0x97, 
   0x9C, 0x8F, 0x95, 0x9C, 0x92, 0x95, 0x9D, 0x8A, 0x92, 0x96, 0x8A, 0x91, 0x97, 0x8D, 0x8D, 0x96, 
   0x75, 0x79, 0x7F, 0x71, 0x78, 0x7F, 0x7A, 0x7F, 0x87, 0x81, 0x85, 0x90, 0x85, 0x89, 0x92, 0x89, 
   0x89, 0x91, 0x87, 0x84, 0x95, 0x7F, 0x7D, 0x97, 0x7E, 0x83, 0x9F, 0x81, 0x85, 0xA4, 0x81, 0x82, 
   0xA4, 0x7D, 0x80, 0xA0, 0x7C, 0x80, 0x9B, 0x7D, 0x7E, 0x94, 0x85, 0x81, 0x94, 0x8A, 0x8B, 0x97, 
   0x9A, 0x95, 0xA3, 0x9B, 0x94, 0xAA, 0x85, 0x81, 0x9D, 0x71, 0x70, 0x92, 0x71, 0x6E, 0x96, 0x76, 
   0x75, 0x94, 0x77, 0x73, 0x94, 0x7F, 0x7B, 0xA1, 0x81, 0x82, 0xA4, 0x80, 0x81, 0x9E, 0x81, 0x80, 
   0x9E, 0x83, 0x83, 0xA6, 0x7F, 0x82, 0xA5, 0x78, 0x79, 0x9D, 0x76, 0x74, 0x9A, 0x7A, 0x72, 0x99, 
   0x77, 0x75, 0x98, 0x81, 0x7C, 0xA0, 0x86, 0x82, 0xA4, 0x89, 0x86, 0xA4, 0x86, 0x87, 0xA4, 0x85, 
   0x86, 0xA5, 0x87, 0x88, 0xA3, 0x8C, 0x91, 0xAF, 0x91, 0x9D, 0xBF, 0x8B, 0x9B, 0xBE, 0x83, 0x8D, 
   0xAC, 0x6B, 0x70, 0x7E, 0x6B, 0x74, 0x72, 0xA6, 0xB6, 0xB0, 0xC4, 0xD1, 0xCB, 0xD2, 0xD9, 0xD4, 
   0xD0, 0xD7, 0xD7, 0xCE, 0xD2, 0xD6, 0x4F, 0x53, 0x5B, 0x56, 0x58, 0x65, 0x79, 0x7C, 0x8B, 0x86, 
   0x86, 0x97, 0x8A, 0x84, 0x96, 0x8B, 0x86, 0x96, 0x8D, 0x8C, 0x9C, 0x8F, 0x90, 0xA1, 0x91, 0x92, 
   0xA2, 0x97, 0x94, 0x9F, 0x93, 0x8E, 0x97, 0x95, 0x90, 0x96, 0x93, 0x8F, 0x92, 0x8E, 0x88, 0x8B, 
   0x88, 0x82, 0x85, 0x8B, 0x84, 0x88, 0x92, 0x8C, 0x8A, 0x99, 0x92, 0x92, 0x9A, 0x91, 0x97, 0x99, 
   0x91, 0x99, 0x95, 0x8E, 0x96, 0x8D, 0x87, 0x8D, 0x8B, 0x87, 0x89, 0x82, 0x7F, 0x86, 0x79, 0x7C, 
   0x82, 0x87, 0x8B, 0x90, 0x89, 0x8B, 0x8E, 0x89, 0x89, 0x8A, 0x8A, 0x8C, 0x8C, 0x91, 0x97, 0x9A, 
   0x98, 0x9D, 0xA2, 0x97, 0x9C, 0x9E, 0x99, 0x99, 0x9B, 0x93, 0x90, 0x94, 0x93, 0x8F, 0x92, 0x97, 
   0x92, 0x94, 0x99, 0x95, 0x95, 0x99, 0x94, 0x96, 0x9F, 0x9B, 0x9C, 0x95, 0x91, 0x92, 0x93, 0x8C, 
   0x8F, 0x94, 0x90, 0x93, 0x92, 0x91, 0x94, 0x8E, 0x90, 0x97, 0x8F, 0x91, 0x99, 0x8E, 0x8E, 0x92, 
   0x90, 0x90, 0x93, 0x9E, 0x9A, 0x9E, 0x9E, 0x98, 0x9E, 0x94, 0x90, 0x97, 0x8C, 0x8D, 0x8F, 0x8F, 
   0x90, 0x90, 0x91, 0x8D, 0x8F, 0x8B, 0x89, 0x90, 0x7E, 0x82, 0x8C, 0x58, 0x58, 0x5F, 0x46, 0x42, 
   0x45, 0x46, 0x4C, 0x49, 0x44, 0x42, 0x42, 0x3E, 0x3D, 0x3D, 0x3E, 0x3F, 0x3C, 0x48, 0x46, 0x42, 
   0x59, 0x53, 0x50, 0x50, 0x4D, 0x4C, 0x36, 0x38, 0x38, 0x42, 0x44, 0x43, 0x4B, 0x4D, 0x4C, 0x52, 
   0x56, 0x54, 0x55, 0x5A, 0x5A, 0x68, 0x6B, 0x6E, 0x6F, 0x70, 0x72, 0x73, 0x7A, 0x71, 0x83, 0x8A, 
   0x80, 0x78, 0x7D, 0x77, 0x7F, 0x84, 0x82, 0x90, 0x95, 0x95, 0xA2, 0xA7, 0xAC, 0x9D, 0xA2, 0xAA, 
   0x9B, 0xA0, 0xAB, 0x9C, 0xA0, 0xAB, 0x9B, 0xA0, 0xAB, 0x9A, 0x9F, 0xAA, 0x99, 0x9F, 0xAA, 0xA0, 
   0xA5, 0xB0, 0xA3, 0xA8, 0xB1, 0x9C, 0xA3, 0xAA, 0x9B, 0xA3, 0xAB, 0x9F, 0xA3, 0xAD, 0x9F, 0xA3, 
   0xAC, 0xA3, 0xA2, 0xAB, 0xA1, 0xA1, 0xA9, 0x9E, 0xA0, 0xA7, 0xA1, 0xA2, 0xA9, 0xA6, 0xA5, 0xAB, 
   0xA8, 0xAA, 0xAD, 0xA2, 0xA6, 0xA9, 0x9F, 0xA1, 0xA8, 0x9F, 0x9E, 0xA6, 0x98, 0x9B, 0xA3, 0xA8, 
   0xAA, 0xB2, 0xC1, 0xC1, 0xC8, 0xB7, 0xB5, 0xBC, 0xA3, 0xA0, 0xA9, 0x9D, 0x9C, 0xA6, 0x9D, 0x9C, 
   0xA8, 0xA0, 0x9E, 0xA5, 0x9E, 0xA1, 0xA7, 0x9B, 0x9F, 0xAA, 0x9A, 0x9A, 0xA9, 0x85, 0x83, 0x8E, 
   0x70, 0x73, 0x75, 0x7A, 0x81, 0x7E, 0x8C, 0x94, 0x92, 0x97, 0x9E, 0x9F, 0x99, 0x9B, 0xA1, 0x9F, 
   0x9E, 0xA0, 0xAB, 0xAA, 0xA9, 0xB4, 0xB5, 0xB5, 0xBF, 0xBF, 0xBD, 0xC5, 0xBF, 0xBF, 0xBF, 0xBC, 
   0xBA, 0xB0, 0xB0, 0xB2, 0xA3, 0xA5, 0xA8, 0xA9, 0xA8, 0xAA, 0xB0, 0xAD, 0xB1, 0xAA, 0xA8, 0xAF, 
   0xA9, 0xAB, 0xB1, 0xA5, 0xA7, 0xAE, 0xAC, 0xA9, 0xB2, 0xA9, 0xA7, 0xB0, 0xA3, 0xA6, 0xAF, 0x9E, 
   0xA2, 0xAE, 0x72, 0x70, 0x75, 0x52, 0x4E, 0x46, 0x70, 0x64, 0x57, 0x81, 0x71, 0x5E, 0x88, 0x7A, 
   0x63, 0x89, 0x7C, 0x67, 0x86, 0x78, 0x69, 0x91, 0x83, 0x73, 0x9D, 0x91, 0x7F, 0xA0, 0x92, 0x84, 
   0x97, 0x89, 0x7A, 0x9B, 0x8F, 0x81, 0x94, 0x89, 0x77, 0x8F, 0x7F, 0x70, 0x57, 0x49, 0x3F, 0x6C, 
   0x5F, 0x53, 0x6F, 0x63, 0x5B, 0x62, 0x5F, 0x59, 0x5A, 0x5E, 0x5E, 0x33, 0x37, 0x3C, 0x3C, 0x48, 
   0x47, 0x67, 0x79, 0x79, 0x9A, 0xA7, 0xA8, 0xAD, 0xB6, 0xBB, 0xA7, 0xAF, 0xB8, 0xA3, 0xA6, 0xB3, 
   0xA9, 0xA8, 0xB3, 0xA9, 0xA9, 0xB3, 0xA8, 0xA7, 0xB3, 0xAD, 0xAC, 0xBB, 0xA6, 0xA9, 0xB5, 0xA3, 
   0xA6, 0xAC, 0xB6, 0xB6, 0xBB, 0xB5, 0xB4, 0xBC, 0x9D, 0x9B, 0xA5, 0x8D, 0x87, 0x92, 0x7E, 0x74, 
   0x83, 0x57, 0x53, 0x63, 0x3B, 0x3F, 0x51, 0x44, 0x4B, 0x5D, 0x4E, 0x54, 0x67, 0x50, 0x57, 0x6A, 
   0x4F, 0x56, 0x6B, 0x51, 0x55, 0x6E, 0x53, 0x58, 0x73, 0x55, 0x5C, 0x7C, 0x5C, 0x61, 0x83, 0x5C, 
   0x62, 0x81, 0x54, 0x5B, 0x76, 0x52, 0x54, 0x6F, 0x56, 0x59, 0x74, 0x50, 0x57, 0x73, 0x51, 0x58, 
   0x76, 0x54, 0x5A, 0x7B, 0x53, 0x5C, 0x7F, 0x53, 0x5D, 0x7E, 0x5C, 0x5B, 0x71, 0x55, 0x52, 0x5A, 
   0x57, 0x59, 0x57, 0x5E, 0x5B, 0x60, 0x21, 0x21, 0x24, 0x27, 0x32, 0x32, 0x61, 0x75, 0x71, 0x75, 
   0x86, 0x83, 0x81, 0x8B, 0x8B, 0x95, 0x9D, 0x9C, 0x99, 0xA2, 0xA4, 0x8E, 0x97, 0x9D, 0x8A, 0x93, 
   0x98, 0x8D, 0x95, 0x9A, 0x90, 0x94, 0x9B, 0x89, 0x91, 0x94, 0x83, 0x8C, 0x90, 0x88, 0x8A, 0x92, 
   0x7F, 0x83, 0x88, 0x73, 0x7B, 0x81, 0x6A, 0x6F, 0x77, 0x76, 0x79, 0x84, 0x7F, 0x84, 0x8E, 0x84, 
   0x87, 0x90, 0x80, 0x7F, 0x91, 0x7A, 0x79, 0x93, 0x7C, 0x81, 0x9C, 0x7A, 0x7F, 0x97, 0x7B, 0x7F, 
   0x93, 0x7C, 0x7F, 0x92, 0x7F, 0x7E, 0x90, 0x7E, 0x7B, 0x89, 0x7B, 0x77, 0x80, 0x85, 0x80, 0x8B, 
   0x8C, 0x88, 0x92, 0x94, 0x8F, 0x9C, 0x9A, 0x95, 0xA6, 0x90, 0x8A, 0xA2, 0x71, 0x6C, 0x8E, 0x75, 
   0x76, 0x94, 0x77, 0x74, 0x96, 0x79, 0x75, 0x99, 0x7F, 0x7E, 0x9D, 0x80, 0x7F, 0x9C, 0x7B, 0x78, 
   0x98, 0x7A, 0x79, 0xA0, 0x78, 0x7A, 0xA3, 0x75, 0x77, 0x9F, 0x75, 0x76, 0x9E, 0x7A, 0x76, 0x9E, 
   0x73, 0x73, 0x99, 0x76, 0x74, 0x9D, 0x78, 0x78, 0xA1, 0x7E, 0x7E, 0xA2, 0x85, 0x88, 0xA8, 0x8A, 
   0x8E, 0xA9, 0x8E, 0x96, 0xA7, 0x95, 0x9D, 0xB8, 0x92, 0x9E, 0xC4, 0x84, 0x91, 0xB3, 0x67, 0x73, 
   0x8B, 0x5C, 0x6A, 0x6E, 0xA3, 0xB6, 0xAA, 0xDD, 0xEA, 0xE1, 0xE0, 0xE1, 0xDF, 0xD8, 0xD7, 0xD8, 
   0xCF, 0xD3, 0xDC, 0xD1, 0xCE, 0xDF, 0x52, 0x59, 0x5C, 0x4A, 0x4E, 0x57, 0x62, 0x67, 0x75, 0x86, 
   0x86, 0x96, 0x8B, 0x84, 0x96, 0x8C, 0x84, 0x96, 0x8B, 0x87, 0x98, 0x8B, 0x8A, 0x9A, 0x90, 0x8E, 
   0x9F, 0x93, 0x90, 0x9F, 0x94, 0x90, 0x9D, 0x9F, 0x99, 0xA4, 0x9C, 0x95, 0x9C, 0x92, 0x8B, 0x90, 
   0x8D, 0x87, 0x8A, 0x8B, 0x85, 0x89, 0x90, 0x89, 0x88, 0x92, 0x8B, 0x8B, 0x92, 0x89, 0x8F, 0x99, 
   0x90, 0x98, 0x95, 0x8E, 0x94, 0x89, 0x83, 0x85, 0x87, 0x83, 0x80, 0x7F, 0x7F, 0x83, 0x7D, 0x80, 
   0x83, 0x89, 0x8C, 0x90, 0x91, 0x92, 0x96, 0x91, 0x92, 0x92, 0x93, 0x96, 0x95, 0x9E, 0xA1, 0xA6, 
   0x9A, 0x9E, 0xA4, 0x97, 0x98, 0x9F, 0x98, 0x96, 0x9C, 0x96, 0x91, 0x97, 0x93, 0x90, 0x93, 0x98, 
   0x94, 0x96, 0xA2, 0x9E, 0xA0, 0xA3, 0x9E, 0xA1, 0x96, 0x91, 0x96, 0x8E, 0x89, 0x8F, 0x8F, 0x87, 
   0x8D, 0x8F, 0x89, 0x8D, 0x93, 0x91, 0x93, 0x90, 0x92, 0x96, 0x8F, 0x90, 0x94, 0x91, 0x8F, 0x90, 
   0x92, 0x90, 0x95, 0x9B, 0x97, 0x9D, 0x95, 0x91, 0x96, 0x8C, 0x8B, 0x8E, 0x81, 0x84, 0x86, 0x83, 
   0x87, 0x86, 0x8E, 0x8C, 0x89, 0x8B, 0x8B, 0x8E, 0x7F, 0x83, 0x8C, 0x5E, 0x5E, 0x66, 0x49, 0x44, 
   0x47, 0x4C, 0x4D, 0x4F, 0x4C, 0x4B, 0x4D, 0x3D, 0x3A, 0x3C, 0x39, 0x36, 0x36, 0x3A, 0x36, 0x34, 
   0x48, 0x44, 0x40, 0x52, 0x50, 0x4D, 0x3B, 0x36, 0x36, 0x35, 0x36, 0x35, 0x42, 0x46, 0x44, 0x4A, 
   0x4D, 0x4C, 0x4A, 0x4D, 0x4E, 0x50, 0x51, 0x53, 0x60, 0x5E, 0x61, 0x6C, 0x71, 0x72, 0x7D, 0x81, 
   0x7F, 0x6D, 0x70, 0x6F, 0x6C, 0x6F, 0x6F, 0x70, 0x73, 0x72, 0x92, 0x97, 0x99, 0xA0, 0xA5, 0xAC, 
   0x9E, 0xA4, 0xAD, 0x9D, 0xA3, 0xAC, 0x9A, 0x9F, 0xA9, 0x99, 0x9E, 0xA8, 0x9A, 0x9F, 0xA9, 0x9B, 
   0xA0, 0xAA, 0x9A, 0x9E, 0xA7, 0x97, 0x9E, 0xA6, 0x99, 0xA1, 0xAA, 0x9E, 0xA3, 0xAF, 0x9C, 0xA0, 
   0xAC, 0xA0, 0xA2, 0xAC, 0x9E, 0xA1, 0xA9, 0x9B, 0xA2, 0xA9, 0x9D, 0xA2, 0xA9, 0xA4, 0xA7, 0xAC, 
   0xA6, 0xA8, 0xAC, 0xA1, 0xA5, 0xA9, 0x9C, 0xA0, 0xA6, 0x9C, 0x9D, 0xA5, 0x99, 0x9C, 0xA4, 0xA5, 
   0xA7, 0xAF, 0xB7, 0xB9, 0xC0, 0xAE, 0xAF, 0xB7, 0xA1, 0xA0, 0xA9, 0xA0, 0x9E, 0xA8, 0x9D, 0x9A, 
   0xA6, 0x9C, 0x9B, 0xA4, 0x9E, 0xA0, 0xAC, 0x9C, 0xA0, 0xAE, 0x9B, 0x9B, 0xAA, 0x73, 0x71, 0x7B, 
   0x55, 0x5A, 0x5B, 0x68, 0x72, 0x6D, 0x81, 0x88, 0x81, 0x8F, 0x96, 0x94, 0x92, 0x96, 0x9C, 0x9B, 
   0x9D, 0xA1, 0xA4, 0xA5, 0xA6, 0xA6, 0xA9, 0xA9, 0xAA, 0xAA, 0xA9, 0xB5, 0xAF, 0xB1, 0xB7, 0xB4, 
   0xB5, 0xB3, 0xB3, 0xB6, 0xAB, 0xAE, 0xB2, 0xA8, 0xAA, 0xAC, 0xA8, 0xA8, 0xAC, 0xA6, 0xAA, 0xB0, 
   0xAB, 0xB1, 0xB7, 0xA9, 0xAE, 0xB5, 0xA7, 0xAC, 0xB4, 0xA6, 0xAC, 0xB2, 0xA5, 0xAE, 0xB2, 0xA8, 
   0xB1, 0xB9, 0x9B, 0xA1, 0xA7, 0x67, 0x66, 0x66, 0x60, 0x57, 0x51, 0x71, 0x68, 0x5A, 0x7E, 0x74, 
   0x60, 0x86, 0x79, 0x66, 0x8A, 0x7F, 0x6D, 0x93, 0x89, 0x78, 0x97, 0x89, 0x75, 0x94, 0x83, 0x73, 
   0x97, 0x8A, 0x7A, 0x9A, 0x8F, 0x80, 0x8D, 0x81, 0x70, 0x84, 0x71, 0x66, 0x59, 0x4A, 0x41, 0x5F, 
   0x4F, 0x45, 0x61, 0x51, 0x48, 0x5F, 0x5A, 0x55, 0x52, 0x58, 0x5B, 0x6E, 0x79, 0x7E, 0x94, 0xA2, 
   0xA5, 0xB2, 0xBA, 0xC0, 0xB2, 0xBA, 0xBF, 0xAB, 0xB4, 0xBA, 0xAB, 0xB3, 0xBA, 0xAC, 0xAE, 0xB8, 
   0xA4, 0xA7, 0xB4, 0xA6, 0xAB, 0xB6, 0xAD, 0xB0, 0xB9, 0xBB, 0xC0, 0xC9, 0xBC, 0xC1, 0xCC, 0xA9, 
   0xAB, 0xB5, 0x8D, 0x8C, 0x95, 0x5F, 0x5D, 0x69, 0x48, 0x4B, 0x61, 0x48, 0x51, 0x6D, 0x3E, 0x49, 
   0x69, 0x35, 0x3F, 0x5D, 0x42, 0x49, 0x64, 0x4E, 0x53, 0x6A, 0x50, 0x56, 0x6A, 0x54, 0x58, 0x6B, 
   0x51, 0x56, 0x6E, 0x54, 0x58, 0x70, 0x57, 0x5D, 0x74, 0x59, 0x5E, 0x78, 0x5B, 0x5D, 0x7A, 0x55, 
   0x58, 0x74, 0x50, 0x58, 0x73, 0x53, 0x56, 0x6C, 0x59, 0x5C, 0x73, 0x54, 0x5C, 0x77, 0x4E, 0x55, 
   0x73, 0x4B, 0x51, 0x72, 0x4B, 0x56, 0x79, 0x4D, 0x57, 0x78, 0x58, 0x5A, 0x6E, 0x57, 0x55, 0x5A, 
   0x59, 0x5B, 0x58, 0x5E, 0x5B, 0x60, 0x3B, 0x3B, 0x3D, 0x47, 0x52, 0x52, 0x6E, 0x7F, 0x7E, 0x76, 
   0x81, 0x82, 0x83, 0x89, 0x8B, 0x99, 0xA1, 0xA1, 0x99, 0xA1, 0xA4, 0x91, 0x95, 0x9E, 0x8C, 0x93, 
   0x98, 0x8D, 0x94, 0x97, 0x8D, 0x91, 0x96, 0x80, 0x88, 0x8C, 0x7F, 0x89, 0x8D, 0x8B, 0x90, 0x97, 
   0x84, 0x8C, 0x91, 0x7B, 0x84, 0x8A, 0x75, 0x79, 0x81, 0x6F, 0x70, 0x7C, 0x7C, 0x81, 0x8D, 0x84, 
   0x88, 0x95, 0x7E, 0x7E, 0x93, 0x78, 0x7B, 0x96, 0x78, 0x7E, 0x99, 0x71, 0x78, 0x8D, 0x78, 0x7E, 
   0x8A, 0x80, 0x82, 0x89, 0x7D, 0x79, 0x80, 0x7D, 0x78, 0x7F, 0x79, 0x76, 0x7C, 0x80, 0x7B, 0x81, 
   0x84, 0x81, 0x8A, 0x93, 0x91, 0x9B, 0xAA, 0xA5, 0xB0, 0xAA, 0xA2, 0xB5, 0x83, 0x7B, 0x98, 0x71, 
   0x6D, 0x8F, 0x74, 0x71, 0x94, 0x75, 0x71, 0x96, 0x79, 0x76, 0x98, 0x78, 0x78, 0x95, 0x6F, 0x6D, 
   0x8A, 0x6C, 0x68, 0x8E, 0x70, 0x72, 0x9B, 0x77, 0x7A, 0x9F, 0x73, 0x77, 0x9B, 0x7A, 0x78, 0x9D, 
   0x76, 0x77, 0x9C, 0x74, 0x71, 0x9C, 0x74, 0x73, 0x9B, 0x79, 0x7A, 0x9C, 0x8B, 0x8E, 0xAD, 0x94, 
   0x99, 0xB2, 0x91, 0x9A, 0xA7, 0x93, 0x98, 0xAC, 0x8B, 0x93, 0xB0, 0x65, 0x72, 0x8E, 0x49, 0x56, 
   0x67, 0x77, 0x87, 0x89, 0xC3, 0xCF, 0xC5, 0xE6, 0xE6, 0xDD, 0xE2, 0xDF, 0xDB, 0xD8, 0xD6, 0xD8, 
   0xD1, 0xCE, 0xD7, 0xA9, 0x94, 0xA7, 0x6C, 0x74, 0x76, 0x62, 0x66, 0x70, 0x62, 0x65, 0x71, 0x89, 
   0x87, 0x92, 0x8F, 0x8A, 0x97, 0x8E, 0x86, 0x97, 0x90, 0x89, 0x97, 0x8D, 0x8A, 0x95, 0x8E, 0x8C, 
   0x9C, 0x96, 0x94, 0xA7, 0x9B, 0x99, 0xAB, 0x9B, 0x9A, 0xA7, 0x9A, 0x98, 0xA1, 0x95, 0x92, 0x97, 
   0x98, 0x93, 0x97, 0x8F, 0x88, 0x8C, 0x8F, 0x86, 0x88, 0x8D, 0x85, 0x87, 0x8D, 0x84, 0x89, 0x92, 
   0x8A, 0x8F, 0x8E, 0x88, 0x8A, 0x88, 0x84, 0x82, 0x8C, 0x88, 0x85, 0x7F, 0x81, 0x80, 0x82, 0x83, 
   0x83, 0x89, 0x89, 0x8D, 0x92, 0x92, 0x97, 0x9F, 0xA1, 0xA2, 0xB9, 0xBA, 0xBC, 0xA6, 0xA5, 0xAD, 
   0x9A, 0x9C, 0xA1, 0x98, 0x96, 0x9F, 0x99, 0x95, 0xA0, 0x9A, 0x95, 0x9E, 0x98, 0x94, 0x98, 0x98, 
   0x98, 0x98, 0xA3, 0xA2, 0xA4, 0xA6, 0xA3, 0xAA, 0x92, 0x93, 0x99, 0x8C, 0x8D, 0x92, 0x8F, 0x8E, 
   0x91, 0x8F, 0x8C, 0x8E, 0x94, 0x91, 0x94, 0x95, 0x91, 0x98, 0x96, 0x8F, 0x96, 0x96, 0x8E, 0x90, 
   0x84, 0x80, 0x84, 0x85, 0x81, 0x88, 0x8C, 0x89, 0x8F, 0x85, 0x86, 0x8C, 0x74, 0x76, 0x7F, 0x7C, 
   0x82, 0x84, 0x87, 0x8A, 0x85, 0x84, 0x87, 0x87, 0x7F, 0x81, 0x8A, 0x67, 0x65, 0x6E, 0x4A, 0x47, 
   0x48, 0x4B, 0x4A, 0x4B, 0x43, 0x44, 0x44, 0x2E, 0x30, 0x2E, 0x29, 0x2A, 0x2A, 0x2C, 0x2C, 0x2D, 
   0x34, 0x32, 0x31, 0x37, 0x35, 0x33, 0x37, 0x33, 0x30, 0x24, 0x28, 0x25, 0x32, 0x36, 0x36, 0x3F, 
   0x41, 0x41, 0x3D, 0x3F, 0x40, 0x44, 0x48, 0x47, 0x4E, 0x51, 0x51, 0x69, 0x6D, 0x71, 0x81, 0x85, 
   0x85, 0x6D, 0x70, 0x70, 0x61, 0x64, 0x65, 0x51, 0x56, 0x56, 0x5C, 0x63, 0x65, 0x9A, 0xA0, 0xA7, 
   0xA7, 0xAD, 0xB5, 0x9E, 0xA5, 0xAD, 0x98, 0x9E, 0xA6, 0x9C, 0xA2, 0xAA, 0x9C, 0xA1, 0xAA, 0x9E, 
   0xA4, 0xAC, 0x9C, 0xA3, 0xAB, 0x99, 0x9F, 0xA9, 0x99, 0x9E, 0xAA, 0x96, 0x9A, 0xA7, 0x9A, 0x9D, 
   0xAA, 0x9D, 0xA0, 0xAC, 0x9A, 0xA2, 0xAB, 0x9B, 0xA4, 0xAB, 0x9B, 0xA1, 0xA8, 0xA0, 0xA1, 0xA8, 
   0xA0, 0xA2, 0xA8, 0x9E, 0xA2, 0xA8, 0x99, 0xA0, 0xA6, 0x96, 0x9D, 0xA5, 0x99, 0x9F, 0xA2, 0x9C, 
   0xA2, 0xA6, 0x9A, 0x9F, 0xA5, 0x97, 0x9B, 0xA2, 0x9A, 0x9C, 0xA4, 0x9F, 0x9F, 0xA7, 0x9E, 0x9E, 
   0xA5, 0x95, 0x99, 0xA3, 0x9A, 0x9D, 0xAC, 0xA2, 0xA2, 0xB2, 0xA6, 0xA0, 0xAC, 0x62, 0x5A, 0x60, 
   0x41, 0x3E, 0x41, 0x5A, 0x5F, 0x5B, 0x6D, 0x74, 0x6D, 0x82, 0x8A, 0x88, 0x8F, 0x97, 0x9B, 0x96, 
   0x9E, 0xA0, 0x9B, 0xA1, 0xA3, 0xA0, 0xA4, 0xAA, 0xA6, 0xA8, 0xAC, 0xAE, 0xAA, 0xAF, 0xB0, 0xAD, 
   0xB0, 0xB2, 0xB2, 0xB5, 0xAF, 0xB2, 0xB5, 0xA8, 0xAB, 0xAE, 0xA6, 0xAA, 0xAD, 0xAA, 0xB1, 0xB5, 
   0xAE, 0xB3, 0xB8, 0xAB, 0xAE, 0xB6, 0xA5, 0xAA, 0xB5, 0xA5, 0xAB, 0xB1, 0xA8, 0xAF, 0xB3, 0xA7, 
   0xAD, 0xB5, 0xA2, 0xA9, 0xB1, 0x90, 0x8E, 0x93, 0x50, 0x4A, 0x4A, 0x5B, 0x5A, 0x4E, 0x79, 0x73, 
   0x62, 0x89, 0x7E, 0x6E, 0x82, 0x7B, 0x65, 0x88, 0x7E, 0x6F, 0x92, 0x86, 0x72, 0x92, 0x85, 0x75, 
   0x8B, 0x80, 0x71, 0x8C, 0x7E, 0x72, 0x89, 0x7C, 0x6E, 0x7B, 0x6D, 0x66, 0x61, 0x4F, 0x48, 0x49, 
   0x3A, 0x33, 0x50, 0x46, 0x3B, 0x5C, 0x5F, 0x5B, 0x6D, 0x7C, 0x82, 0xA6, 0xB0, 0xB7, 0xB5, 0xB7, 
   0xC0, 0xB4, 0xB5, 0xC0, 0xAE, 0xB1, 0xBD, 0xA9, 0xB1, 0xBC, 0xAA, 0xB3, 0xBC, 0xB2, 0xB6, 0xC0, 
   0xA6, 0xAB, 0xB8, 0xAE, 0xB6, 0xC3, 0xC7, 0xCE, 0xD6, 0xBA, 0xBC, 0xC6, 0x8F, 0x8D, 0xA0, 0x5D, 
   0x58, 0x71, 0x41, 0x43, 0x5C, 0x38, 0x44, 0x5F, 0x4E, 0x5F, 0x82, 0x62, 0x75, 0x9E, 0x5D, 0x71, 
   0x9F, 0x52, 0x64, 0x90, 0x53, 0x62, 0x84, 0x4C, 0x57, 0x72, 0x49, 0x52, 0x6A, 0x4C, 0x53, 0x69, 
   0x4E, 0x56, 0x6F, 0x53, 0x57, 0x71, 0x53, 0x54, 0x6B, 0x52, 0x51, 0x68, 0x57, 0x55, 0x6F, 0x55, 
   0x55, 0x72, 0x52, 0x57, 0x71, 0x55, 0x58, 0x6E, 0x57, 0x5C, 0x71, 0x56, 0x5B, 0x73, 0x54, 0x56, 
   0x6F, 0x54, 0x5A, 0x76, 0x5E, 0x6C, 0x8E, 0x50, 0x5A, 0x77, 0x58, 0x5C, 0x72, 0x5E, 0x5B, 0x66, 
   0x5F, 0x5E, 0x5D, 0x61, 0x5B, 0x5C, 0x57, 0x53, 0x53, 0x59, 0x60, 0x60, 0x6D, 0x7A, 0x79, 0x77, 
   0x81, 0x81, 0x7F, 0x87, 0x88, 0x88, 0x93, 0x8E, 0x98, 0x9B, 0x9C, 0x98, 0x98, 0x9F, 0x8E, 0x94, 
   0x99, 0x89, 0x93, 0x96, 0x8A, 0x93, 0x98, 0x86, 0x8E, 0x94, 0x86, 0x8F, 0x94, 0x8F, 0x92, 0x99, 
   0x89, 0x8C, 0x95, 0x7D, 0x87, 0x8F, 0x80, 0x86, 0x8C, 0x6F, 0x71, 0x7B, 0x73, 0x78, 0x87, 0x80, 
   0x84, 0x96, 0x7E, 0x7D, 0x96, 0x7A, 0x7C, 0x97, 0x78, 0x80, 0x97, 0x75, 0x7E, 0x93, 0x75, 0x7C, 
   0x8B, 0x84, 0x84, 0x8B, 0x7C, 0x75, 0x7B, 0x78, 0x72, 0x7B, 0x76, 0x74, 0x7E, 0x7A, 0x78, 0x83, 
   0x74, 0x72, 0x87, 0x78, 0x78, 0x8C, 0x8D, 0x8C, 0x9D, 0x95, 0x92, 0xA3, 0x8E, 0x8A, 0x9D, 0x86, 
   0x80, 0x9B, 0x7F, 0x7A, 0x9A, 0x78, 0x75, 0x99, 0x78, 0x75, 0x99, 0x84, 0x88, 0xA2, 0x91, 0x93, 
   0xA7, 0x80, 0x79, 0x97, 0x76, 0x77, 0x9B, 0x7B, 0x7F, 0x9F, 0x75, 0x7A, 0x9B, 0x7B, 0x78, 0x9E, 
   0x71, 0x6F, 0x98, 0x6F, 0x6E, 0x9A, 0x70, 0x74, 0x9C, 0x7B, 0x7F, 0x9F, 0x90, 0x93, 0xAD, 0x9A, 
   0x9D, 0xB5, 0x97, 0x9D, 0xAB, 0x96, 0x97, 0xA1, 0x7E, 0x84, 0x91, 0x6F, 0x7E, 0x93, 0x73, 0x8A, 
   0x9E, 0x86, 0x98, 0xAB, 0xA2, 0xA8, 0xB5, 0xBA, 0xBC, 0xC0, 0xD3, 0xD2, 0xD9, 0xD6, 0xCE, 0xDA, 
   0xB2, 0xA2, 0xAB, 0x52, 0x3B, 0x42, 0x7E, 0x81, 0x88, 0x7A, 0x7D, 0x87, 0x64, 0x64, 0x72, 0x61, 
   0x62, 0x70, 0x7C, 0x81, 0x8D, 0x83, 0x85, 0x95, 0x8C, 0x88, 0x99, 0x8F, 0x8A, 0x98, 0x8A, 0x8A, 
   0x9A, 0x94, 0x93, 0xA1, 0xA0, 0x9E, 0xAD, 0x9D, 0x98, 0xA6, 0x98, 0x97, 0xA2, 0x99, 0x9D, 0xA7, 
   0xA7, 0xAC, 0xB1, 0x9D, 0xA3, 0xA1, 0x90, 0x8F, 0x90, 0x86, 0x83, 0x85, 0x8A, 0x86, 0x85, 0x8B, 
   0x85, 0x83, 0x85, 0x81, 0x83, 0x84, 0x7F, 0x83, 0x7A, 0x70, 0x71, 0x68, 0x6D, 0x6F, 0x86, 0x88, 
   0x8A, 0x84, 0x89, 0x8D, 0x88, 0x8B, 0x90, 0x94, 0x98, 0x9C, 0xA4, 0xA2, 0xA9, 0x8D, 0x8F, 0x97, 
   0x95, 0x93, 0x9B, 0x93, 0x96, 0x9D, 0x95, 0x95, 0x9B, 0x91, 0x8D, 0x94, 0x92, 0x92, 0x98, 0x8E, 
   0x92, 0x99, 0x92, 0x94, 0x9B, 0x9B, 0x98, 0x9F, 0x9A, 0x98, 0xA1, 0x8E, 0x91, 0x9A, 0x8A, 0x8B, 
   0x93, 0x97, 0x94, 0x98, 0x97, 0x93, 0x92, 0x92, 0x8F, 0x90, 0x8C, 0x8C, 0x8F, 0x83, 0x83, 0x85, 
   0x80, 0x7F, 0x82, 0x7F, 0x7E, 0x82, 0x84, 0x81, 0x88, 0x7C, 0x7E, 0x86, 0x7A, 0x7D, 0x84, 0x6E, 
   0x73, 0x78, 0x74, 0x75, 0x77, 0x83, 0x82, 0x85, 0x7F, 0x85, 0x87, 0x72, 0x77, 0x78, 0x50, 0x50, 
   0x4F, 0x45, 0x45, 0x47, 0x2E, 0x2E, 0x32, 0x1B, 0x1F, 0x1E, 0x26, 0x2C, 0x28, 0x2E, 0x30, 0x2E, 
   0x38, 0x3A, 0x39, 0x3A, 0x43, 0x3D, 0x3E, 0x44, 0x44, 0x33, 0x3B, 0x37, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3F, 0x3A, 0x3F, 0x41, 0x44, 0x4C, 0x49, 0x4F, 0x54, 0x52, 0x67, 0x65, 0x67, 0x76, 0x73, 
   0x73, 0x5C, 0x5B, 0x5A, 0x4C, 0x4D, 0x4C, 0x44, 0x47, 0x46, 0x3C, 0x44, 0x43, 0x6B, 0x73, 0x76, 
   0xAA, 0xB1, 0xB7, 0xA5, 0xAC, 0xB2, 0xA1, 0xA1, 0xA9, 0xA1, 0xA2, 0xA8, 0x9B, 0xA5, 0xAA, 0x9E, 
   0xA8, 0xB1, 0x9D, 0xA3, 0xB0, 0x9B, 0xA3, 0xAE, 0x9B, 0xA2, 0xAA, 0xA0, 0x9E, 0xA8, 0xA3, 0x9D, 
   0xAC, 0x9E, 0x9D, 0xAD, 0x9C, 0xA1, 0xB1, 0x98, 0x9D, 0xA8, 0x9B, 0x9D, 0xA6, 0x94, 0x98, 0xA1, 
   0x96, 0x9D, 0xA5, 0x97, 0x9D, 0xA5, 0x9C, 0xA0, 0xA8, 0x99, 0x9D, 0xA6, 0x94, 0x9A, 0xA2, 0x99, 
   0x9E, 0xA4, 0xA1, 0xA1, 0xA6, 0x9A, 0x9B, 0x9F, 0x9B, 0xA0, 0xA5, 0xA4, 0xA9, 0xB2, 0xA7, 0xAD, 
   0xB8, 0xA5, 0xAA, 0xB2, 0x9A, 0x9E, 0xA1, 0x93, 0x94, 0x9B, 0x8B, 0x8A, 0x93, 0x70, 0x71, 0x78, 
   0x40, 0x44, 0x4C, 0x3A, 0x41, 0x46, 0x58, 0x5D, 0x60, 0x6F, 0x77, 0x77, 0x8D, 0x91, 0x92, 0x95, 
   0x9D, 0xA1, 0x97, 0x9C, 0xA3, 0xA0, 0xA0, 0xA8, 0xA2, 0xA7, 0xAE, 0xA9, 0xAA, 0xB0, 0xA9, 0xAB, 
   0xB0, 0xA6, 0xAD, 0xB3, 0xAA, 0xAD, 0xB2, 0xA6, 0xA9, 0xAD, 0xA6, 0xAC, 0xB5, 0xA6, 0xAB, 0xB6, 
   0xA8, 0xAD, 0xB5, 0xA6, 0xAB, 0xB3, 0xA5, 0xAC, 0xB2, 0xA3, 0xAA, 0xAF, 0xA5, 0xAB, 0xB1, 0xA3, 
   0xA8, 0xB3, 0xA1, 0xA4, 0xAD, 0xAB, 0xA8, 0xB3, 0x6E, 0x67, 0x6D, 0x51, 0x4C, 0x43, 0x84, 0x7E, 
   0x6C, 0x92, 0x86, 0x76, 0x83, 0x73, 0x64, 0x7F, 0x7A, 0x68, 0x83, 0x7C, 0x6C, 0x8E, 0x83, 0x74, 
   0x8D, 0x7F, 0x74, 0x8C, 0x7F, 0x75, 0x89, 0x80, 0x72, 0x89, 0x80, 0x76, 0x7B, 0x68, 0x5D, 0x42, 
   0x34, 0x2C, 0x40, 0x3E, 0x36, 0x66, 0x69, 0x65, 0x88, 0x9D, 0x9F, 0xB3, 0xBA, 0xC4, 0xAD, 0xAB, 
   0xB7, 0xA5, 0xAE, 0xB8, 0xAD, 0xB4, 0xBF, 0xB0, 0xB4, 0xBE, 0xB0, 0xB9, 0xC0, 0xBB, 0xC4, 0xCD, 
   0xC1, 0xC6, 0xD4, 0xA4, 0xAA, 0xBD, 0x84, 0x87, 0x9E, 0x50, 0x53, 0x6E, 0x45, 0x4B, 0x66, 0x4E, 
   0x58, 0x74, 0x57, 0x66, 0x88, 0x60, 0x74, 0x9A, 0x66, 0x7B, 0xA3, 0x5E, 0x79, 0x9E, 0x55, 0x70, 
   0x98, 0x5D, 0x70, 0x99, 0x5F, 0x72, 0x92, 0x58, 0x67, 0x84, 0x57, 0x63, 0x82, 0x53, 0x5E, 0x7B, 
   0x4E, 0x5A, 0x77, 0x4B, 0x54, 0x71, 0x52, 0x57, 0x70, 0x59, 0x5E, 0x77, 0x56, 0x5A, 0x78, 0x54, 
   0x56, 0x72, 0x51, 0x5A, 0x6F, 0x4C, 0x57, 0x6F, 0x52, 0x59, 0x76, 0x55, 0x5B, 0x75, 0x56, 0x59, 
   0x72, 0x59, 0x5B, 0x73, 0x5F, 0x64, 0x80, 0x5C, 0x63, 0x78, 0x5E, 0x63, 0x73, 0x5D, 0x5C, 0x64, 
   0x5B, 0x5E, 0x59, 0x5D, 0x60, 0x5C, 0x58, 0x5B, 0x5D, 0x59, 0x63, 0x5F, 0x6A, 0x73, 0x70, 0x77, 
   0x7E, 0x81, 0x79, 0x85, 0x89, 0x82, 0x8F, 0x8E, 0x97, 0x99, 0x99, 0x9E, 0x9C, 0xA1, 0x98, 0x9A, 
   0xA1, 0x8F, 0x96, 0x9A, 0x80, 0x8D, 0x91, 0x82, 0x8C, 0x99, 0x8D, 0x94, 0x9E, 0x90, 0x91, 0x9B, 
   0x8D, 0x8D, 0x97, 0x87, 0x8B, 0x94, 0x83, 0x88, 0x92, 0x68, 0x6E, 0x79, 0x65, 0x6F, 0x78, 0x7A, 
   0x82, 0x8E, 0x7C, 0x81, 0x97, 0x7A, 0x80, 0x95, 0x83, 0x87, 0x99, 0x8A, 0x87, 0x9A, 0x7B, 0x76, 
   0x8C, 0x70, 0x6F, 0x86, 0x71, 0x70, 0x85, 0x71, 0x6D, 0x80, 0x6E, 0x6E, 0x81, 0x76, 0x72, 0x89, 
   0x79, 0x74, 0x91, 0x79, 0x72, 0x92, 0x79, 0x74, 0x91, 0x7B, 0x76, 0x90, 0x82, 0x7B, 0x93, 0x96, 
   0x90, 0xA8, 0x8B, 0x83, 0x9F, 0x82, 0x79, 0x9B, 0x7B, 0x72, 0x97, 0x84, 0x80, 0x99, 0x9C, 0x9B, 
   0xAD, 0x92, 0x8F, 0xA5, 0x80, 0x7D, 0x9C, 0x7B, 0x7B, 0x99, 0x7E, 0x7C, 0x9C, 0x7C, 0x76, 0x9E, 
   0x75, 0x73, 0x9F, 0x74, 0x7A, 0xA2, 0x7E, 0x85, 0xA4, 0x8C, 0x8F, 0xA4, 0x91, 0x96, 0xA6, 0x8F, 
   0x95, 0xAA, 0x8E, 0x92, 0xA2, 0x7D, 0x7F, 0x86, 0x58, 0x57, 0x60, 0x5D, 0x62, 0x71, 0x77, 0x8C, 
   0xA3, 0x8E, 0xA3, 0xC1, 0x9C, 0xAB, 0xC9, 0xA4, 0xB3, 0xCC, 0xB0, 0xB8, 0xD1, 0x93, 0x8B, 0xA3, 
   0x4A, 0x37, 0x48, 0x1B, 0x15, 0x17, 0x83, 0x84, 0x86, 0x7D, 0x7D, 0x7F, 0x7E, 0x7A, 0x7F, 0x76, 
   0x72, 0x7B, 0x7D, 0x7D, 0x88, 0x80, 0x83, 0x90, 0x7E, 0x82, 0x91, 0x81, 0x83, 0x97, 0x84, 0x85, 
   0x9A, 0x89, 0x86, 0x99, 0x8A, 0x86, 0x99, 0x91, 0x8E, 0xA0, 0x91, 0x93, 0xA2, 0x8E, 0x93, 0xA3, 
   0x9F, 0xA0, 0xAE, 0xBB, 0xBA, 0xC3, 0xA6, 0xAA, 0xAD, 0x96, 0x99, 0x98, 0x8E, 0x8A, 0x8B, 0x8E, 
   0x87, 0x8B, 0x7A, 0x76, 0x7A, 0x46, 0x45, 0x49, 0x22, 0x20, 0x24, 0x46, 0x4B, 0x50, 0x8C, 0x8C, 
   0x8F, 0x89, 0x89, 0x8C, 0x87, 0x87, 0x8A, 0x88, 0x87, 0x8C, 0x96, 0x8F, 0x98, 0x94, 0x8F, 0x97, 
   0x94, 0x8E, 0x95, 0x95, 0x95, 0x99, 0x9A, 0x98, 0x9C, 0x95, 0x91, 0x95, 0x89, 0x88, 0x8B, 0x7F, 
   0x7F, 0x85, 0x88, 0x89, 0x8F, 0x92, 0x93, 0x9B, 0x83, 0x82, 0x8B, 0x7E, 0x7B, 0x85, 0x8E, 0x8A, 
   0x92, 0x95, 0x93, 0x96, 0x8A, 0x8A, 0x89, 0x8A, 0x8C, 0x8A, 0x80, 0x84, 0x83, 0x77, 0x7B, 0x7C, 
   0x7E, 0x83, 0x85, 0x83, 0x87, 0x88, 0x9D, 0x9B, 0x9D, 0x87, 0x87, 0x87, 0x81, 0x82, 0x84, 0x7E, 
   0x82, 0x84, 0x78, 0x79, 0x7C, 0x77, 0x76, 0x7B, 0x80, 0x87, 0x8D, 0x7B, 0x82, 0x88, 0x52, 0x57, 
   0x5D, 0x3B, 0x3B, 0x40, 0x22, 0x1F, 0x22, 0x22, 0x20, 0x21, 0x3C, 0x3E, 0x3D, 0x4B, 0x4E, 0x4C, 
   0x4A, 0x4D, 0x4B, 0x43, 0x4B, 0x4A, 0x45, 0x4D, 0x4E, 0x42, 0x47, 0x48, 0x3F, 0x42, 0x44, 0x38, 
   0x3A, 0x3E, 0x34, 0x38, 0x3D, 0x38, 0x3C, 0x3F, 0x58, 0x59, 0x59, 0x63, 0x62, 0x65, 0x56, 0x53, 
   0x54, 0x44, 0x42, 0x42, 0x34, 0x34, 0x33, 0x37, 0x36, 0x36, 0x31, 0x37, 0x38, 0x32, 0x3C, 0x3D, 
   0x76, 0x7E, 0x80, 0xA2, 0xAA, 0xAF, 0xA4, 0xA8, 0xAF, 0x9F, 0xA3, 0xAA, 0xA0, 0xA6, 0xAC, 0xA0, 
   0xA5, 0xAC, 0x9D, 0x9F, 0xAA, 0x9D, 0xA1, 0xAA, 0x9F, 0xA3, 0xAA, 0xA3, 0xA3, 0xAB, 0xA8, 0xA8, 
   0xB2, 0xA1, 0xA5, 0xB0, 0x9B, 0xA0, 0xAA, 0x99, 0x9E, 0xA7, 0x99, 0x9F, 0xA7, 0x9A, 0x9E, 0xA7, 
   0x98, 0x9D, 0xA5, 0x9A, 0x9F, 0xA7, 0x9A, 0x9F, 0xA8, 0x96, 0x9C, 0xA4, 0x95, 0x9B, 0xA5, 0x9A, 
   0x9D, 0xA6, 0x9C, 0x99, 0xA2, 0x97, 0x94, 0x9C, 0x92, 0x94, 0x9A, 0x99, 0x9B, 0xA2, 0x98, 0x9B, 
   0xA2, 0x87, 0x88, 0x93, 0x7E, 0x82, 0x89, 0x92, 0x97, 0x9E, 0x8D, 0x93, 0x99, 0x8E, 0x93, 0x9E, 
   0x7A, 0x7E, 0x8B, 0x46, 0x4B, 0x53, 0x41, 0x45, 0x47, 0x53, 0x5A, 0x57, 0x6B, 0x70, 0x6D, 0x86, 
   0x8D, 0x8B, 0x94, 0x98, 0x9A, 0x9D, 0x9F, 0xA3, 0x9F, 0xA4, 0xA9, 0xA4, 0xA7, 0xAD, 0xA5, 0xA8, 
   0xAD, 0xA2, 0xA7, 0xAD, 0xAA, 0xAA, 0xB2, 0xAB, 0xAD, 0xB4, 0xA6, 0xAE, 0xB7, 0xA5, 0xAC, 0xB6, 
   0xA7, 0xAD, 0xB5, 0xA6, 0xAA, 0xB3, 0xA7, 0xAC, 0xB3, 0xA5, 0xAB, 0xB1, 0xA2, 0xA9, 0xB0, 0x9F, 
   0xA7, 0xB0, 0x9B, 0xA1, 0xA6, 0x9F, 0x9E, 0xA7, 0x88, 0x82, 0x8E, 0x5F, 0x5A, 0x5B, 0x68, 0x63, 
   0x5B, 0x6B, 0x64, 0x58, 0x68, 0x5D, 0x4F, 0x5D, 0x56, 0x49, 0x6A, 0x61, 0x57, 0x7A, 0x71, 0x66, 
   0x8D, 0x82, 0x79, 0x97, 0x8B, 0x83, 0x8D, 0x81, 0x75, 0x95, 0x89, 0x7F, 0x93, 0x7C, 0x74, 0x4B, 
   0x39, 0x34, 0x37, 0x2E, 0x27, 0x58, 0x51, 0x4C, 0x7B, 0x84, 0x82, 0xB8, 0xC3, 0xC6, 0xB4, 0xBA, 
   0xBE, 0xB1, 0xB6, 0xBD, 0xB8, 0xBC, 0xC4, 0xC5, 0xC5, 0xCD, 0xBF, 0xC0, 0xC9, 0x9D, 0x9C, 0xAA, 
   0x6A, 0x6E, 0x82, 0x51, 0x5B, 0x76, 0x55, 0x60, 0x81, 0x59, 0x61, 0x83, 0x4E, 0x59, 0x74, 0x53, 
   0x62, 0x7D, 0x5E, 0x74, 0x96, 0x55, 0x72, 0x95, 0x58, 0x71, 0x98, 0x5C, 0x73, 0x9A, 0x5B, 0x6C, 
   0x96, 0x5E, 0x65, 0x8F, 0x5B, 0x64, 0x86, 0x5B, 0x64, 0x82, 0x5F, 0x67, 0x86, 0x61, 0x69, 0x88, 
   0x58, 0x62, 0x81, 0x55, 0x60, 0x83, 0x55, 0x62, 0x83, 0x5F, 0x6F, 0x90, 0x5F, 0x6C, 0x91, 0x56, 
   0x5C, 0x7D, 0x55, 0x5D, 0x74, 0x5F, 0x68, 0x82, 0x63, 0x6A, 0x88, 0x55, 0x5D, 0x77, 0x59, 0x5D, 
   0x76, 0x58, 0x5A, 0x6E, 0x5A, 0x5B, 0x71, 0x57, 0x5D, 0x70, 0x5C, 0x61, 0x77, 0x5C, 0x60, 0x6C, 
   0x59, 0x5B, 0x5A, 0x5B, 0x59, 0x57, 0x5D, 0x5B, 0x5C, 0x54, 0x58, 0x56, 0x60, 0x68, 0x66, 0x6E, 
   0x77, 0x7A, 0x7A, 0x87, 0x89, 0x82, 0x8E, 0x8C, 0x98, 0x99, 0x99, 0x9C, 0x99, 0x9C, 0x94, 0x94, 
   0x9B, 0x92, 0x97, 0x9D, 0x85, 0x8E, 0x96, 0x86, 0x8E, 0x9C, 0x8F, 0x95, 0x9C, 0x91, 0x95, 0x9C, 
   0x8E, 0x90, 0x98, 0x8A, 0x8D, 0x96, 0x86, 0x8B, 0x95, 0x7B, 0x81, 0x8C, 0x78, 0x80, 0x87, 0x79, 
   0x7F, 0x88, 0x82, 0x83, 0x94, 0x8B, 0x8B, 0x96, 0x86, 0x8A, 0x96, 0x8E, 0x8B, 0x97, 0x8B, 0x84, 
   0x93, 0x83, 0x7F, 0x94, 0x7D, 0x7A, 0x90, 0x78, 0x72, 0x8D, 0x75, 0x73, 0x91, 0x77, 0x77, 0x97, 
   0x7B, 0x7A, 0x9A, 0x7B, 0x78, 0x95, 0x7A, 0x79, 0x90, 0x7E, 0x80, 0x92, 0x7A, 0x7A, 0x8C, 0x82, 
   0x84, 0x99, 0x84, 0x81, 0x9F, 0x81, 0x7A, 0x9F, 0x7A, 0x71, 0x9B, 0x76, 0x71, 0x95, 0x7D, 0x7C, 
   0x9A, 0x7D, 0x7A, 0x97, 0x78, 0x71, 0x95, 0x73, 0x6D, 0x92, 0x7A, 0x78, 0x9C, 0x7C, 0x7A, 0xA2, 
   0x7A, 0x7B, 0xA2, 0x7A, 0x7F, 0xA0, 0x81, 0x88, 0x9E, 0x93, 0x98, 0xA5, 0x8F, 0x96, 0xA0, 0x89, 
   0x8C, 0x9A, 0x75, 0x75, 0x82, 0x6B, 0x6F, 0x73, 0x6D, 0x6E, 0x72, 0x4F, 0x4E, 0x53, 0x46, 0x4C, 
   0x53, 0x56, 0x62, 0x6E, 0x58, 0x60, 0x71, 0x5D, 0x60, 0x73, 0x52, 0x52, 0x62, 0x3F, 0x3A, 0x45, 
   0x36, 0x35, 0x36, 0x45, 0x4D, 0x4F, 0x96, 0x91, 0x97, 0x8C, 0x89, 0x8C, 0x8F, 0x8D, 0x90, 0x93, 
   0x90, 0x97, 0x94, 0x92, 0x9C, 0x89, 0x8B, 0x94, 0x7A, 0x7D, 0x89, 0x7A, 0x7B, 0x8E, 0x7F, 0x7C, 
   0x8F, 0x82, 0x80, 0x90, 0x82, 0x83, 0x93, 0x86, 0x86, 0x95, 0x89, 0x8C, 0x99, 0x88, 0x8C, 0x9C, 
   0x8C, 0x8D, 0x9E, 0xA1, 0x9F, 0xAC, 0xAB, 0xAD, 0xB6, 0xB7, 0xB8, 0xBB, 0x98, 0x94, 0x96, 0x78, 
   0x71, 0x77, 0x59, 0x57, 0x5D, 0x43, 0x48, 0x4B, 0x3A, 0x42, 0x46, 0x3F, 0x44, 0x4A, 0x7D, 0x7A, 
   0x80, 0x89, 0x87, 0x8B, 0x85, 0x86, 0x89, 0x87, 0x89, 0x8E, 0x90, 0x8B, 0x94, 0x91, 0x89, 0x94, 
   0x8E, 0x86, 0x8D, 0x92, 0x8E, 0x94, 0x9A, 0x98, 0x9C, 0x96, 0x95, 0x97, 0x92, 0x90, 0x95, 0x9E, 
   0x9B, 0xA1, 0x98, 0x96, 0x9D, 0x8E, 0x8F, 0x97, 0x82, 0x83, 0x8A, 0x8F, 0x8E, 0x95, 0x99, 0x98, 
   0x9D, 0x97, 0x98, 0x9B, 0x9B, 0x9B, 0x9E, 0x9A, 0x98, 0x9A, 0x95, 0x93, 0x95, 0x8D, 0x8D, 0x8F, 
   0x8C, 0x8F, 0x92, 0x93, 0x98, 0x9B, 0xA3, 0xA2, 0xA5, 0x86, 0x87, 0x8A, 0x7F, 0x80, 0x82, 0x7B, 
   0x7F, 0x80, 0x7A, 0x7C, 0x7F, 0x7F, 0x80, 0x86, 0x82, 0x87, 0x8E, 0x7B, 0x80, 0x88, 0x5D, 0x61, 
   0x6B, 0x35, 0x37, 0x3A, 0x17, 0x15, 0x13, 0x29, 0x26, 0x23, 0x37, 0x38, 0x35, 0x48, 0x4C, 0x48, 
   0x4B, 0x52, 0x4D, 0x4B, 0x53, 0x51, 0x45, 0x51, 0x50, 0x45, 0x4C, 0x4E, 0x3E, 0x46, 0x47, 0x35, 
   0x3E, 0x3F, 0x2B, 0x32, 0x36, 0x22, 0x25, 0x29, 0x3B, 0x3D, 0x3C, 0x53, 0x50, 0x54, 0x43, 0x44, 
   0x48, 0x4A, 0x51, 0x55, 0x49, 0x50, 0x54, 0x3F, 0x40, 0x44, 0x2B, 0x2C, 0x2F, 0x23, 0x28, 0x2A, 
   0x2C, 0x35, 0x36, 0x63, 0x6A, 0x6E, 0x9E, 0xA3, 0xAA, 0xA1, 0xA7, 0xAD, 0x9D, 0xA2, 0xA9, 0x9D, 
   0xA0, 0xA7, 0x9E, 0xA0, 0xAA, 0x9F, 0xA2, 0xAC, 0xA1, 0xA3, 0xAA, 0xA0, 0xA0, 0xA7, 0xA0, 0xA3, 
   0xAB, 0x9C, 0xA3, 0xAB, 0x96, 0x9D, 0xA3, 0x97, 0x9B, 0xA3, 0x9E, 0xA2, 0xAB, 0x9A, 0x9C, 0xA5, 
   0x99, 0x96, 0xA0, 0x9B, 0x99, 0xA3, 0x99, 0x9B, 0xA4, 0x96, 0x97, 0xA0, 0x93, 0x97, 0x9F, 0x9E, 
   0xA2, 0xAA, 0x99, 0x97, 0xA0, 0x98, 0x97, 0xA0, 0x97, 0x9B, 0xA2, 0x92, 0x97, 0x9D, 0x88, 0x90, 
   0x96, 0x7F, 0x85, 0x90, 0x7E, 0x83, 0x8D, 0x86, 0x8A, 0x91, 0x84, 0x88, 0x8F, 0x81, 0x86, 0x92, 
   0x7C, 0x83, 0x92, 0x6F, 0x79, 0x83, 0x5E, 0x63, 0x6A, 0x44, 0x4A, 0x4C, 0x4B, 0x51, 0x54, 0x68, 
   0x6F, 0x6E, 0x83, 0x89, 0x8D, 0x92, 0x96, 0xA0, 0x9B, 0xA0, 0xA7, 0xA0, 0xA5, 0xAC, 0xA2, 0xA7, 
   0xAC, 0xA2, 0xA7, 0xAE, 0xA6, 0xA7, 0xAF, 0xAC, 0xAE, 0xB6, 0xA3, 0xAB, 0xB3, 0xA2, 0xAA, 0xB2, 
   0xA6, 0xAD, 0xB5, 0xA6, 0xAA, 0xB3, 0xA7, 0xA9, 0xB2, 0xA6, 0xAA, 0xB1, 0x9F, 0xA5, 0xAD, 0x9C, 
   0xA4, 0xAE, 0x93, 0x9F, 0xA4, 0x8B, 0x93, 0x9B, 0x81, 0x83, 0x8E, 0x6E, 0x6C, 0x71, 0x58, 0x55, 
   0x52, 0x5D, 0x56, 0x4E, 0x69, 0x5C, 0x53, 0x68, 0x60, 0x57, 0x7A, 0x72, 0x69, 0x8B, 0x83, 0x76, 
   0xA0, 0x96, 0x89, 0x91, 0x87, 0x7A, 0x7C, 0x71, 0x64, 0x81, 0x75, 0x69, 0x8C, 0x74, 0x6E, 0x5F, 
   0x4A, 0x45, 0x47, 0x34, 0x2F, 0x4B, 0x3A, 0x34, 0x4C, 0x43, 0x40, 0x94, 0x98, 0x96, 0xCE, 0xD2, 
   0xD1, 0xC4, 0xC3, 0xC8, 0xAB, 0xA7, 0xAD, 0x85, 0x7D, 0x84, 0x5F, 0x5A, 0x65, 0x51, 0x52, 0x66, 
   0x56, 0x5E, 0x7B, 0x54, 0x62, 0x83, 0x54, 0x62, 0x83, 0x57, 0x60, 0x7D, 0x57, 0x5D, 0x77, 0x57, 
   0x5E, 0x79, 0x5D, 0x68, 0x8A, 0x5F, 0x71, 0x95, 0x60, 0x73, 0x96, 0x60, 0x73, 0x94, 0x56, 0x62, 
   0x87, 0x59, 0x5E, 0x83, 0x57, 0x5E, 0x7E, 0x55, 0x59, 0x78, 0x58, 0x58, 0x78, 0x5C, 0x5F, 0x7C, 
   0x5D, 0x64, 0x7F, 0x5E, 0x68, 0x86, 0x61, 0x6B, 0x8A, 0x61, 0x6A, 0x89, 0x5F, 0x66, 0x87, 0x58, 
   0x5E, 0x7B, 0x57, 0x5B, 0x75, 0x5C, 0x62, 0x7D, 0x5D, 0x60, 0x7D, 0x57, 0x5D, 0x76, 0x57, 0x5D, 
   0x76, 0x5A, 0x5C, 0x6F, 0x5A, 0x59, 0x6E, 0x56, 0x55, 0x6D, 0x53, 0x55, 0x6E, 0x54, 0x55, 0x62, 
   0x5B, 0x58, 0x5B, 0x61, 0x5A, 0x5A, 0x62, 0x5C, 0x5B, 0x57, 0x59, 0x57, 0x5A, 0x61, 0x61, 0x6C, 
   0x71, 0x74, 0x78, 0x7E, 0x81, 0x82, 0x86, 0x84, 0x96, 0x93, 0x91, 0x96, 0x95, 0x96, 0x8E, 0x91, 
   0x94, 0x92, 0x97, 0x9A, 0x8F, 0x96, 0x9C, 0x8A, 0x90, 0x9B, 0x90, 0x96, 0x9E, 0x96, 0x9A, 0xA2, 
   0x8F, 0x90, 0x9C, 0x8B, 0x8D, 0x99, 0x87, 0x8B, 0x95, 0x83, 0x88, 0x92, 0x81, 0x87, 0x8E, 0x7F, 
   0x81, 0x8B, 0x79, 0x75, 0x82, 0x60, 0x5B, 0x60, 0x6A, 0x6D, 0x70, 0x87, 0x87, 0x89, 0x8E, 0x89, 
   0x90, 0x93, 0x8F, 0x9C, 0x93, 0x90, 0x9F, 0x8D, 0x8A, 0x9D, 0x83, 0x83, 0x99, 0x7E, 0x80, 0x98, 
   0x7E, 0x82, 0x98, 0x7A, 0x7D, 0x91, 0x7F, 0x85, 0x94, 0x88, 0x8F, 0x9B, 0x81, 0x85, 0x93, 0x7D, 
   0x83, 0x96, 0x81, 0x89, 0xA3, 0x7F, 0x82, 0xA1, 0x7E, 0x7B, 0xA2, 0x7D, 0x7B, 0x9F, 0x6E, 0x6D, 
   0x8E, 0x63, 0x63, 0x7E, 0x74, 0x71, 0x91, 0x78, 0x74, 0x98, 0x7A, 0x79, 0x9B, 0x7A, 0x78, 0x9E, 
   0x7C, 0x7A, 0x9E, 0x83, 0x87, 0xA3, 0x89, 0x91, 0xA4, 0x8F, 0x93, 0x9E, 0x8D, 0x8C, 0x95, 0x8E, 
   0x89, 0x95, 0x5D, 0x55, 0x62, 0x56, 0x5C, 0x61, 0x76, 0x80, 0x83, 0x63, 0x66, 0x68, 0x51, 0x50, 
   0x51, 0x43, 0x48, 0x47, 0x38, 0x3F, 0x3E, 0x39, 0x3D, 0x3F, 0x45, 0x4B, 0x4D, 0x6F, 0x72, 0x72, 
   0x84, 0x82, 0x84, 0x7E, 0x7B, 0x85, 0x90, 0x88, 0x90, 0x8D, 0x88, 0x8D, 0x8F, 0x8B, 0x8F, 0x8E, 
   0x8A, 0x8F, 0x8B, 0x87, 0x8D, 0x81, 0x7E, 0x86, 0x68, 0x65, 0x6F, 0x6A, 0x68, 0x75, 0x7A, 0x77, 
   0x87, 0x7F, 0x7D, 0x8C, 0x80, 0x80, 0x8F, 0x81, 0x81, 0x90, 0x84, 0x85, 0x93, 0x85, 0x86, 0x97, 
   0x87, 0x87, 0x9B, 0x88, 0x89, 0x9A, 0x9A, 0x98, 0xA8, 0xB7, 0xB3, 0xBE, 0x84, 0x80, 0x85, 0x55, 
   0x52, 0x54, 0x4F, 0x4F, 0x52, 0x58, 0x5C, 0x60, 0x4F, 0x57, 0x5A, 0x39, 0x41, 0x46, 0x69, 0x6A, 
   0x6F, 0x85, 0x85, 0x88, 0x7C, 0x83, 0x84, 0x7A, 0x81, 0x85, 0x8B, 0x8E, 0x95, 0xA2, 0xA1, 0xAA, 
   0x9B, 0x95, 0x9D, 0x96, 0x92, 0x98, 0x93, 0x93, 0x97, 0x93, 0x95, 0x98, 0x98, 0x98, 0x9C, 0x9C, 
   0x9A, 0xA0, 0x97, 0x95, 0x9D, 0x93, 0x94, 0x9A, 0x97, 0x99, 0x9E, 0x9B, 0x99, 0x9D, 0x99, 0x96, 
   0x99, 0x95, 0x96, 0x9B, 0x9C, 0x9D, 0xA4, 0x9C, 0x99, 0x9E, 0x96, 0x93, 0x95, 0x97, 0x93, 0x94, 
   0x93, 0x91, 0x92, 0x91, 0x92, 0x95, 0x95, 0x92, 0x98, 0x81, 0x7E, 0x86, 0x7C, 0x7C, 0x7E, 0x7D, 
   0x7E, 0x7F, 0x7D, 0x7F, 0x80, 0x7D, 0x80, 0x82, 0x7E, 0x80, 0x84, 0x7C, 0x7E, 0x84, 0x71, 0x73, 
   0x7B, 0x44, 0x4A, 0x49, 0x10, 0x11, 0x0D, 0x24, 0x23, 0x1F, 0x26, 0x2B, 0x25, 0x3D, 0x45, 0x3E, 
   0x48, 0x51, 0x4B, 0x48, 0x52, 0x4D, 0x48, 0x51, 0x50, 0x4A, 0x4E, 0x4E, 0x46, 0x4D, 0x4B, 0x45, 
   0x4E, 0x4D, 0x3E, 0x43, 0x44, 0x24, 0x22, 0x23, 0x22, 0x20, 0x20, 0x34, 0x35, 0x3B, 0x3F, 0x47, 
   0x4E, 0x50, 0x5B, 0x65, 0x60, 0x68, 0x73, 0x65, 0x69, 0x72, 0x3F, 0x43, 0x49, 0x26, 0x2C, 0x31, 
   0x21, 0x27, 0x2B, 0x29, 0x2C, 0x30, 0x6D, 0x71, 0x74, 0xA2, 0xA7, 0xAB, 0x9D, 0xA3, 0xA9, 0x9C, 
   0xA0, 0xA7, 0x9A, 0xA0, 0xAA, 0x99, 0x9F, 0xA9, 0x9E, 0x9E, 0xA7, 0x9E, 0x9C, 0xA4, 0x9D, 0xA0, 
   0xA9, 0x9B, 0xA3, 0xAA, 0xA2, 0xA7, 0xAC, 0xAC, 0xAC, 0xB4, 0xA7, 0xA7, 0xB0, 0x94, 0x95, 0x9E, 
   0x93, 0x91, 0x9A, 0x92, 0x92, 0x9B, 0x92, 0x95, 0x9E, 0x91, 0x91, 0x9B, 0x8D, 0x8F, 0x96, 0x90, 
   0x94, 0x9B, 0x94, 0x96, 0x9D, 0x91, 0x95, 0x9B, 0x89, 0x90, 0x96, 0x85, 0x8C, 0x94, 0x84, 0x90, 
   0x99, 0x84, 0x8D, 0x97, 0x82, 0x89, 0x91, 0x83, 0x89, 0x8E, 0x7A, 0x81, 0x88, 0x7A, 0x82, 0x8D, 
   0x85, 0x8E, 0x9A, 0x87, 0x90, 0x9B, 0x82, 0x8A, 0x93, 0x63, 0x6A, 0x6F, 0x4A, 0x53, 0x59, 0x56, 
   0x5F, 0x5F, 0x74, 0x7D, 0x80, 0x85, 0x8E, 0x98, 0x95, 0x9B, 0xA2, 0x9C, 0xA2, 0xAA, 0x9F, 0xA7, 
   0xAE, 0xA2, 0xA9, 0xB0, 0xA2, 0xA7, 0xAF, 0xA6, 0xAA, 0xB3, 0xA4, 0xAA, 0xB2, 0xA1, 0xA9, 0xB0, 
   0xA4, 0xAB, 0xB2, 0xA6, 0xA7, 0xB3, 0xA6, 0xA4, 0xAE, 0xA2, 0xA0, 0xA8, 0x97, 0x98, 0xA0, 0x8E, 
   0x90, 0x9A, 0x7F, 0x88, 0x93, 0x74, 0x7B, 0x87, 0x72, 0x75, 0x7E, 0x75, 0x75, 0x77, 0x6A, 0x68, 
   0x64, 0x73, 0x6F, 0x67, 0x7A, 0x6F, 0x68, 0x74, 0x6C, 0x65, 0x80, 0x7A, 0x6F, 0x84, 0x7C, 0x6F, 
   0x85, 0x7C, 0x6C, 0x76, 0x6A, 0x5A, 0x6E, 0x63, 0x54, 0x6F, 0x63, 0x55, 0x71, 0x5C, 0x52, 0x6A, 
   0x57, 0x4D, 0x51, 0x3D, 0x36, 0x3C, 0x2E, 0x28, 0x2B, 0x1D, 0x18, 0x35, 0x31, 0x2F, 0x62, 0x60, 
   0x5D, 0x54, 0x52, 0x52, 0x37, 0x30, 0x32, 0x33, 0x2E, 0x34, 0x47, 0x4C, 0x59, 0x55, 0x65, 0x7D, 
   0x62, 0x74, 0x97, 0x5D, 0x6D, 0x94, 0x54, 0x5F, 0x81, 0x54, 0x5C, 0x78, 0x57, 0x59, 0x74, 0x55, 
   0x54, 0x71, 0x4E, 0x4F, 0x6C, 0x4C, 0x50, 0x6D, 0x52, 0x5C, 0x79, 0x55, 0x61, 0x7F, 0x4E, 0x54, 
   0x73, 0x52, 0x53, 0x72, 0x53, 0x5A, 0x75, 0x55, 0x5A, 0x78, 0x58, 0x59, 0x7B, 0x57, 0x5C, 0x79, 
   0x55, 0x5F, 0x76, 0x54, 0x5D, 0x76, 0x59, 0x5B, 0x75, 0x5C, 0x5A, 0x72, 0x5D, 0x5A, 0x74, 0x5A, 
   0x5D, 0x74, 0x58, 0x58, 0x75, 0x5A, 0x5B, 0x75, 0x5C, 0x5A, 0x73, 0x56, 0x58, 0x6E, 0x54, 0x58, 
   0x71, 0x59, 0x5A, 0x71, 0x5B, 0x5C, 0x76, 0x5A, 0x5D, 0x7E, 0x5C, 0x5E, 0x7B, 0x54, 0x55, 0x60, 
   0x5A, 0x58, 0x5A, 0x62, 0x5C, 0x5E, 0x64, 0x5D, 0x5D, 0x52, 0x50, 0x50, 0x54, 0x54, 0x57, 0x64, 
   0x67, 0x69, 0x6F, 0x76, 0x76, 0x7E, 0x82, 0x80, 0x92, 0x90, 0x8E, 0x94, 0x94, 0x94, 0x92, 0x95, 
   0x97, 0x95, 0x97, 0x9B, 0x90, 0x94, 0x9A, 0x8A, 0x8E, 0x98, 0x88, 0x8E, 0x95, 0x93, 0x99, 0xA0, 
   0x91, 0x94, 0xA0, 0x8D, 0x8E, 0x99, 0x87, 0x8B, 0x93, 0x85, 0x8A, 0x94, 0x85, 0x8A, 0x94, 0x88, 
   0x8A, 0x96, 0x80, 0x7C, 0x8A, 0x51, 0x4D, 0x53, 0x4F, 0x52, 0x53, 0x6C, 0x6D, 0x6E, 0x7A, 0x77, 
   0x7E, 0x8A, 0x89, 0x95, 0x8A, 0x8A, 0x95, 0x89, 0x89, 0x91, 0x88, 0x88, 0x8F, 0x82, 0x86, 0x90, 
   0x82, 0x89, 0x96, 0x7F, 0x87, 0x98, 0x84, 0x90, 0xA2, 0x8A, 0x96, 0xA8, 0x89, 0x92, 0xA6, 0x86, 
   0x90, 0xA7, 0x87, 0x93, 0xB4, 0x83, 0x8C, 0xB0, 0x7C, 0x7E, 0xA7, 0x76, 0x73, 0x98, 0x6D, 0x69, 
   0x89, 0x66, 0x67, 0x82, 0x74, 0x77, 0x98, 0x71, 0x73, 0x94, 0x71, 0x6F, 0x90, 0x78, 0x73, 0x96, 
   0x83, 0x80, 0xA0, 0x8F, 0x92, 0xAB, 0x8D, 0x93, 0xA3, 0x8A, 0x8D, 0x97, 0x87, 0x86, 0x8E, 0x85, 
   0x7D, 0x88, 0x39, 0x2E, 0x3A, 0x30, 0x37, 0x3B, 0x64, 0x71, 0x75, 0x64, 0x67, 0x6E, 0x4C, 0x4A, 
   0x4D, 0x52, 0x5A, 0x55, 0x6E, 0x7B, 0x75, 0x81, 0x89, 0x88, 0x87, 0x8B, 0x8E, 0x8A, 0x89, 0x8E, 
   0x74, 0x6C, 0x77, 0x63, 0x5C, 0x71, 0x88, 0x7D, 0x85, 0x88, 0x83, 0x88, 0x88, 0x83, 0x87, 0x8A, 
   0x86, 0x89, 0x89, 0x87, 0x8A, 0x79, 0x76, 0x7E, 0x56, 0x51, 0x59, 0x53, 0x4D, 0x53, 0x5F, 0x56, 
   0x60, 0x6C, 0x62, 0x71, 0x75, 0x71, 0x82, 0x80, 0x7E, 0x8E, 0x81, 0x80, 0x91, 0x7F, 0x80, 0x94, 
   0x82, 0x80, 0x98, 0x83, 0x83, 0x97, 0x7E, 0x7C, 0x8D, 0x76, 0x71, 0x80, 0x56, 0x56, 0x5C, 0x55, 
   0x56, 0x55, 0x5B, 0x5A, 0x5C, 0x59, 0x55, 0x5B, 0x4E, 0x4E, 0x51, 0x37, 0x40, 0x43, 0x62, 0x67, 
   0x6A, 0x82, 0x85, 0x88, 0x7B, 0x82, 0x86, 0x7C, 0x81, 0x86, 0x8A, 0x8D, 0x94, 0xA5, 0xA4, 0xAC, 
   0xA2, 0x9E, 0xA3, 0x9C, 0x99, 0x9C, 0x97, 0x95, 0x96, 0x9D, 0x9D, 0x9D, 0x9D, 0x9E, 0xA0, 0x8F, 
   0x8E, 0x92, 0x8F, 0x8C, 0x92, 0x92, 0x91, 0x95, 0x9B, 0x99, 0x9D, 0x9F, 0x9B, 0x9F, 0x93, 0x8F, 
   0x93, 0x88, 0x87, 0x8E, 0x93, 0x93, 0x9C, 0x93, 0x90, 0x99, 0x98, 0x92, 0x99, 0x9F, 0x96, 0x9D, 
   0x9C, 0x93, 0x9B, 0x8F, 0x8A, 0x92, 0x82, 0x7C, 0x85, 0x7C, 0x78, 0x81, 0x78, 0x79, 0x7C, 0x7F, 
   0x7E, 0x80, 0x81, 0x80, 0x82, 0x7D, 0x7E, 0x80, 0x7E, 0x7E, 0x80, 0x83, 0x81, 0x84, 0x8A, 0x88, 
   0x8D, 0x67, 0x6E, 0x6E, 0x18, 0x1B, 0x1D, 0x16, 0x19, 0x18, 0x23, 0x2B, 0x25, 0x43, 0x4C, 0x47, 
   0x46, 0x4F, 0x4C, 0x45, 0x50, 0x4A, 0x47, 0x4E, 0x52, 0x49, 0x4E, 0x4D, 0x49, 0x4F, 0x4E, 0x4B, 
   0x51, 0x54, 0x4D, 0x51, 0x53, 0x37, 0x38, 0x38, 0x16, 0x15, 0x1A, 0x29, 0x2E, 0x38, 0x42, 0x4D, 
   0x55, 0x4A, 0x56, 0x5F, 0x4F, 0x56, 0x60, 0x58, 0x5E, 0x68, 0x4B, 0x52, 0x5C, 0x29, 0x30, 0x38, 
   0x1D, 0x22, 0x28, 0x1C, 0x1D, 0x1F, 0x2D, 0x2D, 0x2C, 0x79, 0x7D, 0x7D, 0xA4, 0xAB, 0xAF, 0x9D, 
   0xA4, 0xAB, 0x9B, 0xA2, 0xAA, 0x99, 0xA0, 0xA7, 0x9B, 0x9E, 0xA4, 0x9A, 0x9C, 0xA2, 0x95, 0x9B, 
   0xA2, 0x95, 0x9D, 0xA3, 0x9C, 0x9E, 0xA2, 0x9E, 0x9C, 0xA3, 0x99, 0x9A, 0xA3, 0x8F, 0x92, 0x9B, 
   0x94, 0x96, 0x9F, 0x91, 0x93, 0x9C, 0x93, 0x96, 0x9F, 0x99, 0x98, 0xA2, 0x8E, 0x90, 0x9B, 0x82, 
   0x89, 0x91, 0x8A, 0x8F, 0x94, 0x8E, 0x94, 0x97, 0x92, 0x97, 0x9C, 0x94, 0x96, 0x9E, 0x91, 0x98, 
   0xA1, 0x91, 0x9A, 0xA2, 0x96, 0x9D, 0xA2, 0x98, 0x9E, 0xA4, 0x8F, 0x96, 0xA0, 0x82, 0x8D, 0x97, 
   0x8C, 0x97, 0x9E, 0x9B, 0xA2, 0xAE, 0x9E, 0xA5, 0xAE, 0x86, 0x8D, 0x94, 0x62, 0x6A, 0x73, 0x51, 
   0x58, 0x5B, 0x69, 0x72, 0x77, 0x7B, 0x84, 0x8E, 0x8D, 0x93, 0x9A, 0x96, 0x9E, 0xA7, 0x9B, 0xA6, 
   0xB1, 0xA0, 0xAB, 0xB5, 0x9F, 0xAA, 0xB1, 0xA3, 0xAB, 0xB3, 0xA4, 0xAA, 0xB1, 0xA2, 0xAA, 0xAF, 
   0xA1, 0xA6, 0xAE, 0xA2, 0xA3, 0xAE, 0xA3, 0xA0, 0xAB, 0x98, 0x93, 0x9C, 0x78, 0x75, 0x7D, 0x5E, 
   0x5D, 0x66, 0x51, 0x56, 0x62, 0x4E, 0x54, 0x5E, 0x4E, 0x4F, 0x58, 0x5D, 0x5C, 0x60, 0x68, 0x67, 
   0x64, 0x7A, 0x77, 0x6E, 0x81, 0x7B, 0x71, 0x77, 0x6F, 0x69, 0x73, 0x6D, 0x63, 0x77, 0x70, 0x65, 
   0x78, 0x71, 0x64, 0x7B, 0x71, 0x62, 0x81, 0x74, 0x66, 0x7F, 0x70, 0x62, 0x72, 0x5A, 0x4E, 0x70, 
   0x59, 0x4C, 0x5A, 0x44, 0x3D, 0x33, 0x29, 0x22, 0x29, 0x20, 0x1A, 0x1D, 0x17, 0x15, 0x1B, 0x15, 
   0x10, 0x1C, 0x1B, 0x14, 0x23, 0x25, 0x24, 0x3B, 0x45, 0x4E, 0x55, 0x67, 0x7C, 0x6B, 0x83, 0xA2, 
   0x66, 0x7C, 0xA2, 0x57, 0x66, 0x8A, 0x54, 0x5B, 0x77, 0x58, 0x5E, 0x76, 0x5B, 0x5E, 0x76, 0x5A, 
   0x5B, 0x74, 0x58, 0x59, 0x71, 0x53, 0x54, 0x6C, 0x56, 0x5E, 0x7C, 0x5B, 0x68, 0x8C, 0x50, 0x59, 
   0x7C, 0x4D, 0x53, 0x72, 0x4F, 0x59, 0x77, 0x51, 0x5B, 0x7B, 0x54, 0x5B, 0x7E, 0x4C, 0x55, 0x76, 
   0x4E, 0x57, 0x70, 0x53, 0x58, 0x71, 0x54, 0x56, 0x6E, 0x59, 0x59, 0x6D, 0x5C, 0x5A, 0x70, 0x59, 
   0x5B, 0x71, 0x58, 0x58, 0x77, 0x5A, 0x5A, 0x74, 0x5E, 0x59, 0x72, 0x5A, 0x59, 0x6F, 0x54, 0x56, 
   0x6F, 0x54, 0x57, 0x71, 0x58, 0x5C, 0x7B, 0x59, 0x5F, 0x81, 0x5C, 0x5F, 0x79, 0x55, 0x53, 0x5B, 
   0x59, 0x55, 0x54, 0x68, 0x62, 0x63, 0x6D, 0x65, 0x66, 0x4D, 0x4A, 0x4A, 0x4B, 0x4C, 0x4F, 0x51, 
   0x5A, 0x5A, 0x6A, 0x77, 0x73, 0x7C, 0x86, 0x81, 0x87, 0x8B, 0x88, 0x89, 0x8D, 0x8C, 0x8B, 0x8E, 
   0x91, 0x8E, 0x8E, 0x93, 0x90, 0x91, 0x95, 0x95, 0x99, 0x9E, 0x9A, 0xA0, 0xA7, 0x96, 0x9D, 0xA3, 
   0x93, 0x98, 0xA1, 0x8E, 0x90, 0x9B, 0x88, 0x8C, 0x94, 0x87, 0x8C, 0x96, 0x88, 0x8C, 0x98, 0x89, 
   0x8C, 0x99, 0x80, 0x80, 0x8F, 0x57, 0x56, 0x63, 0x44, 0x49, 0x50, 0x4C, 0x51, 0x56, 0x54, 0x59, 
   0x60, 0x68, 0x6F, 0x77, 0x6D, 0x76, 0x7A, 0x6D, 0x71, 0x72, 0x75, 0x75, 0x77, 0x75, 0x78, 0x7C, 
   0x80, 0x86, 0x8F, 0x8A, 0x91, 0x9F, 0x8C, 0x96, 0xA8, 0x8D, 0x99, 0xAD, 0x92, 0x9B, 0xB2, 0x8F, 
   0x97, 0xB2, 0x90, 0x99, 0xBD, 0x8A, 0x93, 0xBB, 0x81, 0x84, 0xAF, 0x73, 0x71, 0x95, 0x78, 0x76, 
   0x94, 0x7C, 0x7F, 0x9B, 0x83, 0x87, 0xA8, 0x87, 0x89, 0xA7, 0x81, 0x81, 0x9F, 0x82, 0x7F, 0x9E, 
   0x8E, 0x91, 0xAB, 0x8D, 0x94, 0xA8, 0x8D, 0x8E, 0x9D, 0x86, 0x83, 0x8C, 0x7F, 0x7D, 0x83, 0x82, 
   0x78, 0x81, 0x42, 0x37, 0x3F, 0x0D, 0x12, 0x11, 0x2A, 0x37, 0x38, 0x47, 0x50, 0x57, 0x3C, 0x40, 
   0x47, 0x63, 0x6D, 0x6D, 0x84, 0x8C, 0x86, 0x8A, 0x8A, 0x87, 0x8C, 0x88, 0x8B, 0x74, 0x6B, 0x79, 
   0x5A, 0x51, 0x69, 0x58, 0x50, 0x6E, 0x65, 0x5F, 0x66, 0x67, 0x61, 0x6A, 0x67, 0x60, 0x68, 0x6C, 
   0x63, 0x6A, 0x73, 0x6E, 0x73, 0x73, 0x72, 0x76, 0x5D, 0x5E, 0x62, 0x52, 0x52, 0x55, 0x53, 0x50, 
   0x53, 0x5D, 0x55, 0x5B, 0x67, 0x63, 0x6C, 0x77, 0x76, 0x80, 0x79, 0x7B, 0x86, 0x78, 0x78, 0x87, 
   0x77, 0x74, 0x85, 0x6C, 0x6B, 0x77, 0x61, 0x5F, 0x6A, 0x5D, 0x5B, 0x65, 0x54, 0x55, 0x5B, 0x5D, 
   0x60, 0x62, 0x63, 0x61, 0x65, 0x59, 0x53, 0x58, 0x4C, 0x4A, 0x4C, 0x43, 0x4C, 0x4C, 0x62, 0x68, 
   0x6B, 0x89, 0x8B, 0x91, 0x81, 0x86, 0x8D, 0x87, 0x87, 0x8E, 0x89, 0x89, 0x90, 0x96, 0x95, 0x9A, 
   0xA2, 0xA0, 0xA3, 0xA0, 0x9F, 0xA1, 0x9C, 0x99, 0x99, 0xA0, 0x9E, 0x9D, 0x93, 0x96, 0x97, 0x95, 
   0x97, 0x98, 0x9F, 0x9A, 0xA0, 0x9B, 0x94, 0x9B, 0x9A, 0x95, 0x9C, 0x95, 0x95, 0x99, 0x87, 0x88, 
   0x8B, 0x88, 0x86, 0x8C, 0x91, 0x8D, 0x95, 0x99, 0x94, 0x9A, 0x9C, 0x95, 0x9A, 0x9C, 0x91, 0x99, 
   0x8B, 0x85, 0x8D, 0x72, 0x72, 0x79, 0x83, 0x82, 0x88, 0x7F, 0x81, 0x85, 0x79, 0x7D, 0x80, 0x83, 
   0x80, 0x83, 0x85, 0x81, 0x85, 0x83, 0x84, 0x87, 0x84, 0x86, 0x89, 0x84, 0x85, 0x88, 0x90, 0x90, 
   0x93, 0x88, 0x8B, 0x92, 0x31, 0x34, 0x3A, 0x09, 0x0E, 0x0F, 0x30, 0x3A, 0x37, 0x55, 0x5D, 0x59, 
   0x48, 0x4D, 0x4A, 0x45, 0x4B, 0x46, 0x48, 0x4C, 0x52, 0x4B, 0x4F, 0x50, 0x4E, 0x51, 0x50, 0x4C, 
   0x4F, 0x50, 0x47, 0x4B, 0x4E, 0x46, 0x48, 0x4B, 0x2A, 0x2B, 0x2F, 0x28, 0x2E, 0x37, 0x36, 0x40, 
   0x46, 0x40, 0x4B, 0x50, 0x44, 0x4C, 0x52, 0x4C, 0x55, 0x5B, 0x54, 0x5C, 0x64, 0x42, 0x48, 0x50, 
   0x21, 0x27, 0x2C, 0x1D, 0x20, 0x20, 0x19, 0x19, 0x17, 0x2F, 0x32, 0x33, 0x93, 0x9C, 0xA0, 0xAB, 
   0xB0, 0xB7, 0xA2, 0xA6, 0xAC, 0x9A, 0xA0, 0xA5, 0x9A, 0x9E, 0xA3, 0x9A, 0x9E, 0xA5, 0x90, 0x96, 
   0x9E, 0x8D, 0x94, 0x9B, 0x8E, 0x8F, 0x95, 0x8E, 0x90, 0x98, 0x9F, 0xA2, 0xAB, 0x97, 0x9A, 0xA3, 
   0x9E, 0xA0, 0xA9, 0x99, 0x98, 0xA1, 0x8D, 0x8A, 0x94, 0x8D, 0x89, 0x93, 0x88, 0x8B, 0x96, 0x86, 
   0x8F, 0x97, 0x8F, 0x96, 0x9C, 0x94, 0x9A, 0x9E, 0x96, 0x99, 0x9F, 0x94, 0x93, 0x9A, 0x99, 0x9D, 
   0xA4, 0x99, 0xA5, 0xAB, 0x9B, 0xA0, 0xA8, 0x97, 0x98, 0xA2, 0x90, 0x92, 0xA0, 0x88, 0x90, 0x9E, 
   0x8A, 0x94, 0x9D, 0x96, 0x9F, 0xA7, 0xA5, 0xAD, 0xB3, 0x96, 0x9D, 0xA4, 0x77, 0x7F, 0x88, 0x60, 
   0x67, 0x6C, 0x5A, 0x63, 0x66, 0x71, 0x7B, 0x7F, 0x83, 0x8C, 0x90, 0x91, 0x9D, 0xA5, 0x9C, 0xAA, 
   0xB8, 0xA2, 0xAE, 0xBA, 0xA3, 0xB1, 0xB7, 0xA8, 0xB4, 0xBA, 0xA8, 0xB0, 0xB7, 0xA5, 0xAC, 0xB2, 
   0xAB, 0xAE, 0xB6, 0xA4, 0xA5, 0xB0, 0x86, 0x86, 0x92, 0x72, 0x72, 0x7B, 0x6A, 0x6C, 0x74, 0x64, 
   0x67, 0x6F, 0x76, 0x7E, 0x87, 0x7A, 0x82, 0x89, 0x52, 0x56, 0x5E, 0x40, 0x3F, 0x47, 0x4F, 0x4D, 
   0x4F, 0x69, 0x68, 0x60, 0x7F, 0x7A, 0x6F, 0x77, 0x6F, 0x68, 0x72, 0x6B, 0x61, 0x7D, 0x77, 0x6D, 
   0x7B, 0x75, 0x6A, 0x79, 0x70, 0x63, 0x7A, 0x6B, 0x60, 0x7A, 0x67, 0x5A, 0x76, 0x5C, 0x50, 0x71, 
   0x59, 0x4B, 0x60, 0x46, 0x42, 0x31, 0x24, 0x1F, 0x26, 0x20, 0x1A, 0x22, 0x1D, 0x1B, 0x1E, 0x1C, 
   0x14, 0x26, 0x29, 0x1F, 0x58, 0x60, 0x5D, 0x6C, 0x7D, 0x88, 0x77, 0x8D, 0xA8, 0x7D, 0x98, 0xBC, 
   0x77, 0x90, 0xB9, 0x64, 0x72, 0x96, 0x5D, 0x60, 0x7D, 0x5C, 0x5F, 0x78, 0x5B, 0x5E, 0x77, 0x58, 
   0x5C, 0x71, 0x59, 0x5D, 0x6F, 0x5D, 0x60, 0x75, 0x5C, 0x65, 0x84, 0x5E, 0x70, 0x99, 0x62, 0x76, 
   0x9D, 0x69, 0x7D, 0x9F, 0x65, 0x78, 0x99, 0x58, 0x66, 0x87, 0x55, 0x5E, 0x80, 0x50, 0x5B, 0x7D, 
   0x56, 0x5E, 0x79, 0x59, 0x5D, 0x79, 0x59, 0x5E, 0x7A, 0x57, 0x5E, 0x75, 0x5A, 0x5D, 0x75, 0x5B, 
   0x5E, 0x75, 0x59, 0x5D, 0x7A, 0x57, 0x5B, 0x78, 0x59, 0x59, 0x77, 0x57, 0x59, 0x72, 0x55, 0x59, 
   0x73, 0x52, 0x57, 0x71, 0x53, 0x58, 0x77, 0x5A, 0x59, 0x79, 0x58, 0x56, 0x70, 0x50, 0x4C, 0x56, 
   0x4F, 0x4B, 0x48, 0x6A, 0x63, 0x62, 0x71, 0x69, 0x6D, 0x40, 0x40, 0x41, 0x3D, 0x46, 0x46, 0x4E, 
   0x5D, 0x58, 0x77, 0x85, 0x7E, 0x87, 0x8C, 0x87, 0x8A, 0x8B, 0x89, 0x80, 0x87, 0x88, 0x80, 0x85, 
   0x88, 0x87, 0x86, 0x89, 0x8D, 0x8C, 0x8A, 0x94, 0x97, 0x98, 0x93, 0x98, 0xA2, 0x8B, 0x92, 0x9C, 
   0x8D, 0x92, 0x9E, 0x8D, 0x91, 0x9C, 0x8C, 0x90, 0x98, 0x88, 0x8A, 0x96, 0x87, 0x88, 0x95, 0x84, 
   0x86, 0x90, 0x7A, 0x7B, 0x89, 0x5E, 0x5F, 0x70, 0x4A, 0x4C, 0x5B, 0x45, 0x48, 0x50, 0x44, 0x47, 
   0x4C, 0x4A, 0x4F, 0x50, 0x5C, 0x60, 0x5E, 0x62, 0x61, 0x5D, 0x6B, 0x64, 0x64, 0x65, 0x62, 0x63, 
   0x61, 0x62, 0x65, 0x82, 0x83, 0x8A, 0x98, 0x9C, 0xA4, 0x92, 0x98, 0xA1, 0x92, 0x93, 0xA1, 0x93, 
   0x95, 0xA8, 0x97, 0x9A, 0xB0, 0x91, 0x96, 0xAF, 0x8A, 0x90, 0xAF, 0x81, 0x87, 0xA5, 0x8D, 0x94, 
   0xB0, 0x92, 0x98, 0xB3, 0x88, 0x8B, 0xA9, 0x92, 0x93, 0xAD, 0x99, 0x9B, 0xB5, 0x94, 0x97, 0xB2, 
   0x91, 0x98, 0xAE, 0x88, 0x8E, 0xA0, 0x85, 0x82, 0x92, 0x7C, 0x78, 0x82, 0x73, 0x77, 0x7A, 0x79, 
   0x75, 0x7A, 0x66, 0x5B, 0x60, 0x20, 0x1D, 0x1B, 0x0C, 0x0F, 0x0D, 0x26, 0x2D, 0x2C, 0x36, 0x45, 
   0x44, 0x5B, 0x66, 0x66, 0x7F, 0x7B, 0x7C, 0x84, 0x7C, 0x7E, 0x7D, 0x77, 0x7F, 0x64, 0x5E, 0x6F, 
   0x5D, 0x59, 0x70, 0x58, 0x55, 0x70, 0x40, 0x45, 0x49, 0x46, 0x46, 0x4D, 0x46, 0x47, 0x4A, 0x48, 
   0x47, 0x48, 0x4A, 0x45, 0x49, 0x4C, 0x4A, 0x4A, 0x5E, 0x63, 0x65, 0x80, 0x85, 0x8A, 0x81, 0x82, 
   0x86, 0x78, 0x75, 0x76, 0x79, 0x7B, 0x7C, 0x74, 0x76, 0x7A, 0x72, 0x71, 0x79, 0x68, 0x66, 0x6F, 
   0x65, 0x61, 0x6A, 0x63, 0x63, 0x66, 0x63, 0x62, 0x67, 0x64, 0x62, 0x65, 0x65, 0x66, 0x69, 0x5E, 
   0x5F, 0x67, 0x59, 0x57, 0x5E, 0x4E, 0x4D, 0x50, 0x42, 0x47, 0x48, 0x40, 0x46, 0x45, 0x4F, 0x55, 
   0x58, 0x81, 0x84, 0x8A, 0x84, 0x89, 0x91, 0x84, 0x84, 0x8D, 0x80, 0x84, 0x8A, 0x84, 0x89, 0x8C, 
   0x9D, 0x9F, 0xA4, 0xA5, 0xA7, 0xAA, 0xA3, 0xA1, 0xA4, 0x9C, 0x9A, 0x9C, 0x90, 0x96, 0x98, 0x98, 
   0x9E, 0xA1, 0x9E, 0x9B, 0xA3, 0x9B, 0x92, 0x9B, 0x92, 0x8A, 0x92, 0x8D, 0x89, 0x8F, 0x91, 0x8F, 
   0x93, 0x97, 0x93, 0x97, 0x96, 0x94, 0x96, 0x95, 0x93, 0x96, 0x94, 0x91, 0x95, 0x90, 0x8D, 0x8F, 
   0x7A, 0x79, 0x7D, 0x7E, 0x84, 0x87, 0x9A, 0x9B, 0xA2, 0x93, 0x92, 0x9B, 0x81, 0x83, 0x88, 0x88, 
   0x84, 0x88, 0x88, 0x82, 0x89, 0x8A, 0x8B, 0x90, 0x89, 0x8D, 0x92, 0x81, 0x86, 0x8C, 0x89, 0x8A, 
   0x92, 0x98, 0x97, 0xA2, 0x60, 0x64, 0x69, 0x14, 0x1B, 0x1B, 0x3D, 0x47, 0x45, 0x67, 0x6E, 0x67, 
   0x78, 0x7B, 0x72, 0x64, 0x66, 0x60, 0x46, 0x4E, 0x4F, 0x42, 0x49, 0x4A, 0x49, 0x50, 0x4C, 0x49, 
   0x4F, 0x4B, 0x45, 0x4E, 0x4E, 0x43, 0x4C, 0x4E, 0x44, 0x4B, 0x4A, 0x45, 0x4F, 0x51, 0x36, 0x3F, 
   0x41, 0x36, 0x39, 0x3C, 0x3C, 0x3D, 0x40, 0x40, 0x48, 0x4B, 0x4C, 0x5A, 0x5C, 0x52, 0x5C, 0x5F, 
   0x3A, 0x41, 0x44, 0x1F, 0x26, 0x25, 0x13, 0x15, 0x14, 0x08, 0x0C, 0x0E, 0x36, 0x3F, 0x43, 0x8A, 
   0x8B, 0x91, 0xA7, 0xA6, 0xAD, 0x98, 0x9C, 0xA3, 0x96, 0x99, 0xA0, 0x9C, 0x9C, 0xA7, 0x90, 0x93, 
   0x9F, 0x8A, 0x91, 0x9C, 0x8B, 0x90, 0x9A, 0x95, 0x98, 0xA1, 0xBB, 0xBC, 0xC5, 0x95, 0x93, 0x9C, 
   0x95, 0x98, 0xA0, 0x93, 0x96, 0x9F, 0x6C, 0x6F, 0x78, 0x5A, 0x62, 0x6A, 0x6F, 0x76, 0x7C, 0x7F, 
   0x8B, 0x90, 0x8D, 0x97, 0x9E, 0x9F, 0xA7, 0xAD, 0xA0, 0xA5, 0xAD, 0x9D, 0x9F, 0xA8, 0x9C, 0xA1, 
   0xA9, 0x9F, 0xA8, 0xAD, 0xA2, 0xA4, 0xB1, 0xA4, 0xA4, 0xB1, 0x8E, 0x92, 0xA1, 0x88, 0x90, 0xA1, 
   0x93, 0x9B, 0xA6, 0x9C, 0xA2, 0xAA, 0xA5, 0xAF, 0xB8, 0xA5, 0xAD, 0xBB, 0x84, 0x8C, 0x9A, 0x72, 
   0x7B, 0x86, 0x64, 0x6F, 0x76, 0x63, 0x6E, 0x73, 0x77, 0x83, 0x87, 0x88, 0x99, 0xA0, 0x9A, 0xAA, 
   0xBA, 0xA6, 0xB2, 0xC1, 0xA9, 0xB8, 0xBE, 0xB2, 0xC1, 0xC5, 0xB1, 0xBC, 0xC3, 0xA8, 0xAE, 0xB5, 
   0xAA, 0xAA, 0xB2, 0x90, 0x91, 0x9C, 0x66, 0x6A, 0x75, 0x7A, 0x80, 0x87, 0x7C, 0x84, 0x8A, 0x78, 
   0x80, 0x86, 0x92, 0x99, 0xA0, 0x99, 0x9F, 0xA5, 0x83, 0x85, 0x8D, 0x62, 0x62, 0x6C, 0x49, 0x4C, 
   0x4F, 0x55, 0x57, 0x53, 0x75, 0x76, 0x6F, 0x89, 0x84, 0x77, 0x87, 0x82, 0x73, 0x84, 0x7E, 0x73, 
   0x7B, 0x73, 0x68, 0x79, 0x6D, 0x60, 0x76, 0x67, 0x5B, 0x76, 0x68, 0x57, 0x6D, 0x5E, 0x51, 0x6B, 
   0x5E, 0x4E, 0x59, 0x46, 0x42, 0x30, 0x24, 0x20, 0x20, 0x1F, 0x17, 0x1C, 0x1E, 0x19, 0x19, 0x21, 
   0x18, 0x46, 0x4C, 0x43, 0x77, 0x7A, 0x77, 0x76, 0x80, 0x8A, 0x77, 0x89, 0xA4, 0x6B, 0x87, 0xAE, 
   0x69, 0x88, 0xB2, 0x67, 0x76, 0xA0, 0x5F, 0x64, 0x88, 0x62, 0x68, 0x88, 0x5B, 0x60, 0x7F, 0x5A, 
   0x5D, 0x79, 0x5A, 0x5D, 0x79, 0x59, 0x5B, 0x7D, 0x5E, 0x62, 0x85, 0x5B, 0x67, 0x8E, 0x5E, 0x6E, 
   0x96, 0x5B, 0x6B, 0x90, 0x52, 0x63, 0x89, 0x4B, 0x5C, 0x7E, 0x4D, 0x5E, 0x7D, 0x4D, 0x60, 0x81, 
   0x4E, 0x5D, 0x7A, 0x55, 0x5E, 0x7F, 0x5C, 0x65, 0x89, 0x5D, 0x64, 0x84, 0x5A, 0x5F, 0x7E, 0x5A, 
   0x62, 0x7E, 0x55, 0x5F, 0x7B, 0x4F, 0x5A, 0x7A, 0x4F, 0x56, 0x79, 0x51, 0x58, 0x75, 0x56, 0x5C, 
   0x76, 0x56, 0x5B, 0x73, 0x54, 0x5A, 0x77, 0x59, 0x5A, 0x7B, 0x56, 0x59, 0x7B, 0x58, 0x5A, 0x71, 
   0x57, 0x58, 0x5C, 0x67, 0x62, 0x65, 0x50, 0x49, 0x54, 0x2F, 0x2F, 0x35, 0x44, 0x4E, 0x4C, 0x66, 
   0x77, 0x71, 0x84, 0x90, 0x88, 0x96, 0x96, 0x91, 0x94, 0x8F, 0x8F, 0x86, 0x84, 0x86, 0x76, 0x75, 
   0x7A, 0x75, 0x72, 0x77, 0x7B, 0x7B, 0x78, 0x88, 0x89, 0x88, 0x8A, 0x8F, 0x99, 0x86, 0x8E, 0x97, 
   0x84, 0x8B, 0x93, 0x88, 0x8D, 0x97, 0x89, 0x8E, 0x96, 0x87, 0x88, 0x95, 0x86, 0x85, 0x91, 0x89, 
   0x89, 0x8F, 0x7A, 0x7A, 0x85, 0x57, 0x58, 0x69, 0x48, 0x4C, 0x63, 0x41, 0x46, 0x56, 0x39, 0x3D, 
   0x47, 0x33, 0x37, 0x3A, 0x42, 0x45, 0x42, 0x4A, 0x49, 0x44, 0x54, 0x4E, 0x4C, 0x54, 0x4D, 0x4D, 
   0x47, 0x47, 0x47, 0x50, 0x52, 0x53, 0x75, 0x7A, 0x7B, 0x8F, 0x90, 0x93, 0x95, 0x8F, 0x96, 0x95, 
   0x8E, 0x98, 0x98, 0x94, 0x9D, 0x98, 0x96, 0xA2, 0x8F, 0x94, 0xA8, 0x8A, 0x98, 0xB2, 0x91, 0xA0, 
   0xBE, 0x91, 0x9B, 0xB7, 0x8A, 0x8B, 0xAA, 0x88, 0x89, 0xA5, 0x8F, 0x94, 0xAF, 0x93, 0x97, 0xB2, 
   0x88, 0x8C, 0x9F, 0x7C, 0x7F, 0x8D, 0x74, 0x72, 0x7E, 0x71, 0x6F, 0x79, 0x6C, 0x6F, 0x75, 0x6B, 
   0x69, 0x6D, 0x6C, 0x60, 0x65, 0x3B, 0x2E, 0x31, 0x0E, 0x06, 0x05, 0x22, 0x2A, 0x21, 0x58, 0x66, 
   0x61, 0x63, 0x6C, 0x6D, 0x73, 0x72, 0x74, 0x7A, 0x76, 0x78, 0x71, 0x6C, 0x74, 0x60, 0x57, 0x6A, 
   0x53, 0x4F, 0x67, 0x49, 0x4F, 0x61, 0x7D, 0x86, 0x8F, 0x6C, 0x7B, 0x80, 0x72, 0x7D, 0x82, 0x71, 
   0x74, 0x7B, 0x67, 0x6B, 0x71, 0x67, 0x6E, 0x71, 0x6D, 0x75, 0x77, 0x80, 0x85, 0x87, 0x8D, 0x8C, 
   0x90, 0x81, 0x81, 0x85, 0x75, 0x75, 0x7D, 0x70, 0x6C, 0x7A, 0x79, 0x76, 0x84, 0x75, 0x74, 0x7E, 
   0x64, 0x64, 0x6C, 0x65, 0x65, 0x6D, 0x69, 0x6E, 0x72, 0x67, 0x69, 0x6D, 0x5A, 0x58, 0x5E, 0x56, 
   0x54, 0x5A, 0x4C, 0x4E, 0x4F, 0x45, 0x48, 0x4B, 0x41, 0x44, 0x47, 0x3C, 0x41, 0x44, 0x3A, 0x43, 
   0x47, 0x5F, 0x61, 0x67, 0x81, 0x81, 0x88, 0x7D, 0x83, 0x8B, 0x82, 0x81, 0x8B, 0x76, 0x7C, 0x87, 
   0x8A, 0x93, 0x9D, 0xA9, 0xAA, 0xB1, 0xA4, 0xA5, 0xA8, 0x9F, 0x9F, 0x9F, 0xA5, 0x9E, 0xA0, 0x99, 
   0x93, 0x9A, 0x9A, 0x98, 0xA1, 0x9B, 0x97, 0x9F, 0x8E, 0x8E, 0x90, 0x87, 0x8A, 0x8C, 0x8C, 0x8E, 
   0x95, 0x94, 0x92, 0x9B, 0x97, 0x95, 0x98, 0x90, 0x8D, 0x8D, 0x88, 0x85, 0x86, 0x86, 0x87, 0x8A, 
   0x87, 0x88, 0x8C, 0x90, 0x8F, 0x93, 0x9B, 0x98, 0x9F, 0x92, 0x90, 0x9A, 0x7F, 0x7F, 0x88, 0x7E, 
   0x7E, 0x82, 0x7D, 0x81, 0x83, 0x87, 0x84, 0x86, 0x88, 0x85, 0x88, 0x84, 0x84, 0x87, 0x7C, 0x7F, 
   0x85, 0x8A, 0x89, 0x8D, 0x8E, 0x92, 0x96, 0x4D, 0x4C, 0x50, 0x51, 0x53, 0x52, 0x69, 0x6F, 0x68, 
   0x8D, 0x8E, 0x86, 0x9A, 0xA2, 0x9B, 0x94, 0x96, 0x8F, 0x78, 0x7D, 0x7B, 0x5C, 0x62, 0x63, 0x4D, 
   0x53, 0x53, 0x4E, 0x50, 0x51, 0x4C, 0x4F, 0x4F, 0x43, 0x48, 0x4A, 0x46, 0x50, 0x51, 0x48, 0x4F, 
   0x51, 0x3F, 0x3F, 0x45, 0x35, 0x33, 0x3B, 0x45, 0x4C, 0x54, 0x60, 0x6F, 0x7A, 0x89, 0x9A, 0xA2, 
   0x78, 0x84, 0x8A, 0x49, 0x4F, 0x56, 0x21, 0x20, 0x24, 0x0E, 0x12, 0x13, 0x07, 0x0A, 0x0B, 0x2E, 
   0x30, 0x31, 0x76, 0x74, 0x7A, 0x94, 0x91, 0x9A, 0xA6, 0xA5, 0xAC, 0xA1, 0x9F, 0xA6, 0x8F, 0x92, 
   0x9A, 0x8C, 0x93, 0x9A, 0x8A, 0x91, 0x98, 0x8C, 0x90, 0x9B, 0x90, 0x92, 0x98, 0x7B, 0x7A, 0x7D, 
   0x8D, 0x90, 0x91, 0x98, 0xA1, 0xA3, 0x9B, 0xA5, 0xAB, 0x82, 0x8C, 0x91, 0x6A, 0x77, 0x7D, 0x74, 
   0x85, 0x8E, 0x82, 0x8E, 0x9A, 0x8C, 0x96, 0x9F, 0x95, 0x98, 0x9E, 0x95, 0x99, 0xA2, 0x9F, 0xA3, 
   0xB0, 0xA2, 0xAB, 0xB2, 0xA4, 0xB0, 0xB7, 0xA4, 0xAB, 0xB3, 0x96, 0x99, 0xA4, 0x91, 0x95, 0xA1, 
   0xA0, 0xAC, 0xB3, 0x99, 0xA5, 0xAA, 0xA8, 0xB3, 0xBA, 0xA0, 0xA9, 0xB6, 0x8A, 0x95, 0x9D, 0x7D, 
   0x8B, 0x93, 0x71, 0x7F, 0x87, 0x63, 0x70, 0x75, 0x74, 0x82, 0x83, 0x8C, 0x9C, 0xA2, 0xA7, 0xB6, 
   0xBF, 0xB5, 0xC0, 0xCB, 0xAF, 0xBE, 0xC6, 0xAD, 0xB9, 0xBF, 0xA2, 0xAC, 0xB3, 0x95, 0xA0, 0xA7, 
   0x7E, 0x85, 0x8C, 0x6B, 0x6E, 0x76, 0x73, 0x75, 0x79, 0x79, 0x81, 0x7C, 0x77, 0x7E, 0x80, 0x7D, 
   0x84, 0x86, 0x96, 0x9B, 0x9D, 0xA7, 0xAB, 0xB0, 0x8C, 0x91, 0x9C, 0x8A, 0x8F, 0x99, 0x7D, 0x80, 
   0x88, 0x69, 0x67, 0x6D, 0x75, 0x74, 0x71, 0x8F, 0x84, 0x77, 0x9A, 0x94, 0x88, 0x9B, 0x95, 0x8E, 
   0x7E, 0x72, 0x6D, 0x72, 0x62, 0x5B, 0x69, 0x5A, 0x4D, 0x71, 0x5C, 0x4D, 0x71, 0x5B, 0x48, 0x66, 
   0x53, 0x48, 0x47, 0x35, 0x32, 0x29, 0x21, 0x1E, 0x1B, 0x1B, 0x16, 0x17, 0x17, 0x12, 0x2E, 0x32, 
   0x26, 0x63, 0x67, 0x61, 0x7D, 0x7E, 0x77, 0x7B, 0x7E, 0x83, 0x6B, 0x75, 0x93, 0x6E, 0x8B, 0xB5, 
   0x6D, 0x8C, 0xB8, 0x64, 0x71, 0x9D, 0x5C, 0x5E, 0x80, 0x5D, 0x66, 0x84, 0x62, 0x6D, 0x8D, 0x6A, 
   0x6F, 0x8F, 0x63, 0x65, 0x84, 0x5C, 0x5E, 0x7E, 0x56, 0x5A, 0x7D, 0x56, 0x63, 0x87, 0x61, 0x78, 
   0x9C, 0x5D, 0x74, 0x9B, 0x75, 0x8C, 0xB5, 0x87, 0x9E, 0xC4, 0x94, 0xA2, 0xC6, 0x83, 0x93, 0xBB, 
   0x80, 0x93, 0xB9, 0x7E, 0x93, 0xBA, 0x7A, 0x8F, 0xB6, 0x7A, 0x8E, 0xB3, 0x75, 0x83, 0xAA, 0x6D, 
   0x77, 0x9E, 0x6B, 0x78, 0xA0, 0x68, 0x79, 0xA2, 0x64, 0x78, 0x9F, 0x62, 0x74, 0x98, 0x61, 0x6E, 
   0x90, 0x59, 0x63, 0x85, 0x5B, 0x63, 0x86, 0x5D, 0x66, 0x8C, 0x57, 0x62, 0x8B, 0x56, 0x61, 0x86, 
   0x54, 0x55, 0x62, 0x49, 0x49, 0x4D, 0x34, 0x35, 0x3E, 0x2D, 0x33, 0x37, 0x4B, 0x57, 0x53, 0x6A, 
   0x7A, 0x76, 0x78, 0x82, 0x7D, 0x92, 0x94, 0x8F, 0x94, 0x90, 0x90, 0x8D, 0x89, 0x88, 0x82, 0x81, 
   0x7D, 0x72, 0x74, 0x70, 0x6D, 0x6F, 0x6D, 0x79, 0x7B, 0x7A, 0x85, 0x8C, 0x8A, 0x8F, 0x94, 0x96, 
   0x90, 0x93, 0x9A, 0x88, 0x90, 0x99, 0x91, 0x96, 0xA1, 0x95, 0x97, 0xA2, 0x8B, 0x8E, 0x94, 0x87, 
   0x83, 0x85, 0x68, 0x5E, 0x60, 0x4D, 0x47, 0x4A, 0x47, 0x45, 0x52, 0x46, 0x49, 0x5D, 0x42, 0x48, 
   0x5C, 0x42, 0x49, 0x55, 0x3A, 0x3E, 0x44, 0x2A, 0x28, 0x29, 0x12, 0x11, 0x0D, 0x11, 0x0D, 0x0F, 
   0x14, 0x1B, 0x19, 0x1E, 0x2C, 0x27, 0x3A, 0x41, 0x40, 0x4B, 0x4C, 0x51, 0x56, 0x50, 0x59, 0x70, 
   0x69, 0x6F, 0x82, 0x7C, 0x82, 0x90, 0x87, 0x93, 0x8B, 0x87, 0x95, 0x87, 0x93, 0xA3, 0x90, 0xA2, 
   0xBA, 0x8E, 0xA0, 0xBD, 0x8C, 0x94, 0xB1, 0x87, 0x87, 0xA2, 0x91, 0x91, 0xA5, 0x94, 0x8E, 0xA0, 
   0x80, 0x78, 0x88, 0x75, 0x71, 0x7A, 0x70, 0x6C, 0x73, 0x6F, 0x69, 0x71, 0x6C, 0x6B, 0x73, 0x66, 
   0x66, 0x6A, 0x69, 0x62, 0x64, 0x43, 0x39, 0x3D, 0x18, 0x18, 0x15, 0x4B, 0x56, 0x51, 0x6C, 0x6E, 
   0x6B, 0x65, 0x64, 0x63, 0x7B, 0x76, 0x7A, 0x78, 0x73, 0x79, 0x6C, 0x68, 0x6E, 0x61, 0x5D, 0x68, 
   0x58, 0x58, 0x6D, 0x5A, 0x6B, 0x79, 0xA4, 0xA9, 0xB4, 0x8A, 0x94, 0x9D, 0x8A, 0x93, 0x9B, 0x90, 
   0x94, 0x9D, 0x9D, 0x9F, 0xA6, 0x94, 0x96, 0x9B, 0x8B, 0x90, 0x94, 0x85, 0x89, 0x8E, 0x80, 0x83, 
   0x89, 0x76, 0x74, 0x7D, 0x73, 0x6E, 0x7A, 0x6A, 0x67, 0x71, 0x6F, 0x6E, 0x76, 0x72, 0x70, 0x77, 
   0x6E, 0x6B, 0x70, 0x6B, 0x66, 0x6C, 0x6B, 0x69, 0x70, 0x67, 0x66, 0x6D, 0x57, 0x56, 0x5E, 0x52, 
   0x50, 0x56, 0x4E, 0x4E, 0x50, 0x49, 0x4E, 0x50, 0x42, 0x4A, 0x4D, 0x3C, 0x44, 0x45, 0x37, 0x3F, 
   0x40, 0x4C, 0x4F, 0x52, 0x76, 0x78, 0x7D, 0x81, 0x86, 0x8C, 0x82, 0x81, 0x89, 0x76, 0x7C, 0x85, 
   0x85, 0x8C, 0x94, 0xA0, 0xA1, 0xA4, 0xA6, 0xA4, 0xA8, 0xA4, 0xA2, 0xA6, 0xA1, 0x9B, 0x9B, 0x9D, 
   0x98, 0x9B, 0x94, 0x93, 0x9B, 0x8E, 0x90, 0x98, 0x90, 0x94, 0x99, 0x93, 0x93, 0x99, 0x95, 0x94, 
   0x9C, 0x97, 0x96, 0x9E, 0x98, 0x97, 0x9B, 0x92, 0x91, 0x93, 0x85, 0x87, 0x89, 0x80, 0x85, 0x8A, 
   0x8C, 0x8D, 0x94, 0x94, 0x92, 0x98, 0x9F, 0x9A, 0xA1, 0x99, 0x93, 0x9C, 0x80, 0x7C, 0x81, 0x82, 
   0x80, 0x82, 0x7C, 0x81, 0x82, 0x7B, 0x7E, 0x80, 0x7A, 0x7E, 0x7F, 0x79, 0x7E, 0x7F, 0x77, 0x7D, 
   0x7E, 0x7C, 0x82, 0x82, 0x7E, 0x85, 0x87, 0x5B, 0x5F, 0x63, 0x55, 0x5A, 0x5A, 0x6B, 0x6E, 0x6A, 
   0x80, 0x80, 0x7B, 0x83, 0x87, 0x85, 0x93, 0x91, 0x8D, 0x9C, 0x9A, 0x96, 0x9B, 0x98, 0x96, 0x8D, 
   0x89, 0x86, 0x6F, 0x6C, 0x69, 0x61, 0x60, 0x5F, 0x5D, 0x61, 0x64, 0x5C, 0x61, 0x63, 0x5A, 0x5F, 
   0x60, 0x58, 0x59, 0x5F, 0x44, 0x46, 0x4D, 0x43, 0x4B, 0x53, 0x63, 0x6F, 0x7A, 0x99, 0xA4, 0xAD, 
   0xAD, 0xB4, 0xBB, 0x7D, 0x82, 0x8E, 0x31, 0x35, 0x3F, 0x15, 0x17, 0x1A, 0x07, 0x0D, 0x0E, 0x17, 
   0x1C, 0x1D, 0x32, 0x31, 0x34, 0x55, 0x57, 0x59, 0x96, 0x98, 0x9B, 0x9F, 0x9D, 0xA0, 0x91, 0x91, 
   0x94, 0x89, 0x8E, 0x93, 0x7D, 0x85, 0x8D, 0x7E, 0x88, 0x93, 0x81, 0x8B, 0x91, 0x82, 0x89, 0x8B, 
   0xA0, 0xA7, 0xA5, 0xA4, 0xAD, 0xAA, 0xBD, 0xC4, 0xC6, 0xC9, 0xCE, 0xD3, 0x9C, 0xA2, 0xA6, 0x89, 
   0x96, 0x9C, 0x83, 0x8F, 0x98, 0x88, 0x94, 0x9B, 0x99, 0xA0, 0xA6, 0x95, 0x9E, 0xA4, 0x9E, 0xA8, 
   0xAE, 0xA3, 0xAB, 0xB2, 0xA9, 0xB0, 0xB6, 0xAB, 0xB0, 0xB6, 0xA9, 0xAF, 0xB6, 0x9D, 0xA5, 0xAD, 
   0xA8, 0xB2, 0xBA, 0xAB, 0xB3, 0xBC, 0xAA, 0xB2, 0xBA, 0x98, 0xA1, 0xAC, 0x7C, 0x8A, 0x92, 0x79, 
   0x8A, 0x93, 0x84, 0x93, 0x9C, 0x75, 0x7E, 0x87, 0x69, 0x70, 0x75, 0x78, 0x7E, 0x84, 0x84, 0x88, 
   0x8F, 0x7E, 0x7F, 0x84, 0x7F, 0x81, 0x84, 0x80, 0x86, 0x89, 0x78, 0x80, 0x86, 0x6F, 0x79, 0x81, 
   0x60, 0x69, 0x6E, 0x6A, 0x6C, 0x73, 0x78, 0x78, 0x7E, 0x7A, 0x7E, 0x80, 0x7D, 0x82, 0x8A, 0x7F, 
   0x87, 0x8D, 0x90, 0x95, 0x98, 0x8F, 0x93, 0x97, 0x8A, 0x8F, 0x99, 0x91, 0x96, 0xA0, 0x8E, 0x93, 
   0x99, 0x78, 0x7A, 0x7E, 0x68, 0x69, 0x66, 0x85, 0x82, 0x72, 0x9C, 0x99, 0x8A, 0x98, 0x93, 0x85, 
   0x78, 0x68, 0x5F, 0x6E, 0x5A, 0x51, 0x66, 0x54, 0x48, 0x6C, 0x58, 0x4B, 0x6A, 0x54, 0x45, 0x56, 
   0x45, 0x3A, 0x3B, 0x2B, 0x26, 0x22, 0x1E, 0x18, 0x13, 0x19, 0x15, 0x34, 0x3A, 0x37, 0x54, 0x59, 
   0x50, 0x73, 0x73, 0x6B, 0x7A, 0x76, 0x6F, 0x76, 0x76, 0x77, 0x65, 0x72, 0x84, 0x76, 0x94, 0xB8, 
   0x76, 0x97, 0xC4, 0x66, 0x7C, 0xAA, 0x4F, 0x5D, 0x84, 0x4E, 0x58, 0x77, 0x57, 0x5F, 0x79, 0x59, 
   0x61, 0x77, 0x59, 0x5F, 0x78, 0x5B, 0x63, 0x84, 0x5B, 0x67, 0x8B, 0x5E, 0x75, 0x98, 0x72, 0x92, 
   0xB3, 0x79, 0x92, 0xAC, 0x89, 0x97, 0xAA, 0x97, 0xA1, 0xB0, 0x9D, 0xA6, 0xB7, 0x93, 0x9B, 0xB2, 
   0x8D, 0x9B, 0xB0, 0x94, 0xA5, 0xBF, 0x9A, 0xAC, 0xCE, 0x9B, 0xAD, 0xD3, 0x94, 0xA5, 0xCB, 0x8F, 
   0xA2, 0xC2, 0x8B, 0x9C, 0xBF, 0x8E, 0x9F, 0xC4, 0x96, 0xA9, 0xCD, 0x92, 0xA4, 0xC7, 0x8E, 0x9D, 
   0xC2, 0x85, 0x95, 0xBF, 0x71, 0x82, 0xB0, 0x74, 0x8B, 0xB9, 0x78, 0x94, 0xC0, 0x7C, 0x8F, 0xBA, 
   0x51, 0x51, 0x6A, 0x31, 0x2F, 0x3A, 0x2D, 0x33, 0x37, 0x34, 0x3F, 0x3F, 0x57, 0x64, 0x66, 0x6B, 
   0x7A, 0x7B, 0x72, 0x78, 0x78, 0x85, 0x84, 0x82, 0x89, 0x83, 0x81, 0x88, 0x82, 0x7D, 0x81, 0x80, 
   0x79, 0x7D, 0x7B, 0x76, 0x7A, 0x76, 0x73, 0x7E, 0x79, 0x77, 0x82, 0x81, 0x7F, 0x89, 0x8B, 0x8C, 
   0x8E, 0x92, 0x97, 0x8D, 0x8E, 0x96, 0x91, 0x8F, 0x97, 0x7C, 0x77, 0x80, 0x5E, 0x5C, 0x63, 0x58, 
   0x53, 0x55, 0x59, 0x52, 0x51, 0x4F, 0x4F, 0x4A, 0x46, 0x47, 0x4B, 0x40, 0x44, 0x4B, 0x40, 0x45, 
   0x4C, 0x3E, 0x43, 0x49, 0x38, 0x3D, 0x43, 0x2D, 0x2D, 0x31, 0x11, 0x12, 0x0F, 0x1B, 0x21, 0x1D, 
   0x3D, 0x42, 0x3D, 0x55, 0x54, 0x57, 0x57, 0x53, 0x5C, 0x46, 0x45, 0x4C, 0x59, 0x59, 0x5D, 0x5C, 
   0x5B, 0x62, 0x59, 0x5B, 0x5E, 0x71, 0x72, 0x77, 0x80, 0x82, 0x87, 0x86, 0x92, 0x9F, 0x93, 0xA4, 
   0xBD, 0x8F, 0xA3, 0xBC, 0x99, 0xA7, 0xBA, 0x9D, 0xA5, 0xB5, 0x95, 0x93, 0x9F, 0x86, 0x7D, 0x88, 
   0x6B, 0x63, 0x6E, 0x6E, 0x68, 0x6F, 0x72, 0x68, 0x6F, 0x6F, 0x66, 0x6A, 0x69, 0x66, 0x68, 0x65, 
   0x5E, 0x62, 0x5F, 0x57, 0x5C, 0x32, 0x2A, 0x32, 0x1E, 0x19, 0x1B, 0x48, 0x4C, 0x4B, 0x5B, 0x5A, 
   0x59, 0x52, 0x52, 0x55, 0x52, 0x52, 0x5B, 0x59, 0x5A, 0x64, 0x5C, 0x5D, 0x64, 0x63, 0x64, 0x6C, 
   0x70, 0x7B, 0x86, 0x8E, 0x9C, 0xA9, 0xAA, 0xAB, 0xB5, 0x8B, 0x90, 0x9A, 0x87, 0x91, 0x9A, 0x80, 
   0x87, 0x91, 0x89, 0x8B, 0x94, 0x94, 0x93, 0x9A, 0x8B, 0x8B, 0x92, 0x7F, 0x81, 0x88, 0x85, 0x87, 
   0x8F, 0x84, 0x85, 0x8D, 0x7C, 0x7B, 0x82, 0x75, 0x72, 0x79, 0x71, 0x6B, 0x73, 0x6F, 0x68, 0x70, 
   0x68, 0x62, 0x67, 0x63, 0x5E, 0x60, 0x62, 0x5D, 0x60, 0x53, 0x4F, 0x53, 0x4B, 0x47, 0x4F, 0x4A, 
   0x46, 0x4D, 0x47, 0x44, 0x49, 0x43, 0x43, 0x49, 0x3B, 0x3E, 0x45, 0x33, 0x37, 0x39, 0x2C, 0x32, 
   0x34, 0x31, 0x39, 0x3C, 0x55, 0x5F, 0x63, 0x7F, 0x84, 0x8B, 0x87, 0x84, 0x8C, 0x7E, 0x7F, 0x88, 
   0x87, 0x8C, 0x91, 0x9D, 0x9D, 0x9E, 0xA5, 0xA2, 0xA7, 0xA6, 0xA2, 0xA9, 0xA3, 0x9C, 0x9E, 0x9F, 
   0x9A, 0x9B, 0x93, 0x90, 0x93, 0x8D, 0x8D, 0x91, 0x92, 0x97, 0x9B, 0x9D, 0x9C, 0xA3, 0xAC, 0xA9, 
   0xAF, 0x9A, 0x9A, 0x9E, 0x98, 0x93, 0x97, 0x9B, 0x98, 0x9B, 0x97, 0x9B, 0x9E, 0x92, 0x96, 0x9E, 
   0x91, 0x94, 0x9D, 0x97, 0x96, 0x9D, 0x9B, 0x99, 0x9E, 0x9C, 0x99, 0x9E, 0x88, 0x87, 0x88, 0x82, 
   0x83, 0x85, 0x7C, 0x83, 0x85, 0x72, 0x7C, 0x7B, 0x74, 0x7C, 0x7C, 0x79, 0x7E, 0x80, 0x79, 0x7F, 
   0x7E, 0x73, 0x78, 0x79, 0x77, 0x7C, 0x81, 0x61, 0x66, 0x6D, 0x58, 0x5E, 0x5F, 0x6A, 0x6E, 0x6A, 
   0x76, 0x7A, 0x76, 0x7A, 0x80, 0x81, 0x85, 0x86, 0x86, 0x89, 0x87, 0x87, 0x99, 0x95, 0x94, 0xA3, 
   0x9E, 0x9C, 0x96, 0x93, 0x90, 0x82, 0x85, 0x83, 0x67, 0x6F, 0x6F, 0x75, 0x7B, 0x7B, 0x79, 0x80, 
   0x80, 0x7F, 0x83, 0x88, 0x69, 0x6C, 0x72, 0x33, 0x3D, 0x43, 0x76, 0x83, 0x8D, 0x96, 0xA3, 0xAB, 
   0x9C, 0xA7, 0xB0, 0x7D, 0x87, 0x97, 0x53, 0x5C, 0x6E, 0x2E, 0x31, 0x3E, 0x0A, 0x0D, 0x13, 0x22, 
   0x24, 0x25, 0x33, 0x33, 0x34, 0x34, 0x3B, 0x39, 0x5D, 0x65, 0x67, 0x70, 0x74, 0x77, 0x7F, 0x83, 
   0x81, 0x7D, 0x86, 0x86, 0x76, 0x83, 0x86, 0x82, 0x8B, 0x94, 0xA6, 0xAF, 0xB6, 0xAE, 0xB4, 0xBC, 
   0xB7, 0xBE, 0xC1, 0xB2, 0xBA, 0xB9, 0xAD, 0xB1, 0xB4, 0xB0, 0xB2, 0xB8, 0x9F, 0x9F, 0xA4, 0xA0, 
   0xA5, 0xAB, 0x9B, 0x9F, 0xA7, 0x8D, 0x92, 0x99, 0x92, 0x93, 0x9B, 0x92, 0x98, 0x9D, 0x9B, 0xA2, 
   0xA7, 0xA7, 0xAE, 0xB4, 0xAB, 0xAF, 0xB6, 0xB3, 0xB8, 0xBE, 0xB4, 0xBD, 0xC2, 0xAC, 0xB6, 0xBC, 
   0x9B, 0xA3, 0xAD, 0xA0, 0xA8, 0xB5, 0x99, 0xA0, 0xAC, 0x96, 0x9D, 0xA7, 0x8C, 0x94, 0xA0, 0x84, 
   0x8C, 0x97, 0x97, 0x9D, 0xA5, 0x8A, 0x8B, 0x94, 0x3E, 0x3D, 0x43, 0x26, 0x23, 0x29, 0x24, 0x20, 
   0x24, 0x1A, 0x17, 0x17, 0x17, 0x15, 0x12, 0x29, 0x2D, 0x2D, 0x5D, 0x65, 0x6A, 0x7A, 0x84, 0x8C, 
   0x82, 0x8C, 0x90, 0x7D, 0x82, 0x87, 0x7F, 0x81, 0x86, 0x82, 0x85, 0x8A, 0x88, 0x8A, 0x93, 0x88, 
   0x8B, 0x92, 0x96, 0x98, 0x9B, 0x98, 0x9A, 0x9F, 0x82, 0x85, 0x8F, 0x83, 0x87, 0x90, 0x88, 0x8D, 
   0x92, 0x7C, 0x7F, 0x82, 0x65, 0x67, 0x64, 0x8E, 0x8B, 0x7A, 0xA8, 0xA0, 0x91, 0x91, 0x85, 0x7A, 
   0x79, 0x64, 0x5C, 0x73, 0x5B, 0x53, 0x68, 0x55, 0x49, 0x6A, 0x56, 0x48, 0x66, 0x54, 0x47, 0x4E, 
   0x3E, 0x34, 0x30, 0x20, 0x1C, 0x1A, 0x15, 0x10, 0x2F, 0x36, 0x33, 0x70, 0x75, 0x72, 0x6A, 0x6C, 
   0x65, 0x84, 0x80, 0x73, 0x7A, 0x73, 0x6A, 0x74, 0x70, 0x6D, 0x73, 0x7A, 0x80, 0x75, 0x8E, 0xA8, 
   0x7B, 0xA0, 0xC8, 0x7C, 0xA1, 0xCB, 0x75, 0x91, 0xB9, 0x53, 0x66, 0x8C, 0x4D, 0x5B, 0x7F, 0x58, 
   0x69, 0x87, 0x73, 0x86, 0xA3, 0x7E, 0x95, 0xB7, 0x7D, 0x9A, 0xBE, 0x7E, 0x98, 0xB5, 0x93, 0xA1, 
   0xB3, 0x9A, 0x9F, 0xA2, 0xA1, 0x9E, 0x9A, 0xA6, 0x9E, 0x97, 0xA9, 0xA1, 0x9C, 0xA8, 0xA1, 0xA0, 
   0xA2, 0xA0, 0x9D, 0x9C, 0x9C, 0xA1, 0x99, 0x9A, 0xA7, 0x98, 0x9A, 0xAA, 0x98, 0x9C, 0xA9, 0x98, 
   0x9F, 0xA3, 0x97, 0x9E, 0xA6, 0x9B, 0xA1, 0xAD, 0x98, 0x9F, 0xAD, 0x95, 0x9E, 0xAE, 0x94, 0xA1, 
   0xB5, 0x91, 0xA2, 0xBD, 0x86, 0x99, 0xBB, 0x8E, 0xA2, 0xC7, 0x8C, 0xA8, 0xCC, 0x8B, 0x9C, 0xC3, 
   0x44, 0x42, 0x59, 0x28, 0x27, 0x2E, 0x2B, 0x33, 0x2F, 0x45, 0x4E, 0x4C, 0x5D, 0x6B, 0x6A, 0x65, 
   0x74, 0x77, 0x6A, 0x71, 0x76, 0x73, 0x74, 0x78, 0x78, 0x75, 0x76, 0x7D, 0x7B, 0x75, 0x7C, 0x7D, 
   0x75, 0x80, 0x7D, 0x7A, 0x7D, 0x77, 0x76, 0x7A, 0x77, 0x76, 0x7B, 0x79, 0x78, 0x7E, 0x7F, 0x81, 
   0x87, 0x84, 0x8B, 0x72, 0x6D, 0x75, 0x56, 0x52, 0x59, 0x4D, 0x4B, 0x50, 0x4E, 0x51, 0x54, 0x58, 
   0x57, 0x5C, 0x58, 0x57, 0x5A, 0x46, 0x4A, 0x4A, 0x3F, 0x40, 0x42, 0x3A, 0x3E, 0x40, 0x3A, 0x3E, 
   0x3F, 0x38, 0x3B, 0x3D, 0x30, 0x33, 0x36, 0x28, 0x28, 0x29, 0x26, 0x29, 0x25, 0x4D, 0x58, 0x56, 
   0x5F, 0x5E, 0x61, 0x57, 0x50, 0x54, 0x4D, 0x47, 0x49, 0x50, 0x4C, 0x4B, 0x62, 0x5E, 0x5C, 0x5B, 
   0x58, 0x54, 0x5B, 0x5C, 0x58, 0x67, 0x6A, 0x68, 0x79, 0x7F, 0x7F, 0x88, 0x94, 0x9E, 0x93, 0xA2, 
   0xBA, 0x95, 0xA9, 0xBC, 0xA8, 0xB6, 0xC0, 0xA9, 0xAE, 0xB8, 0x89, 0x82, 0x88, 0x74, 0x69, 0x6E, 
   0x65, 0x5F, 0x65, 0x68, 0x62, 0x66, 0x6F, 0x64, 0x6A, 0x6B, 0x61, 0x65, 0x66, 0x61, 0x62, 0x5D, 
   0x57, 0x5A, 0x57, 0x4D, 0x52, 0x2D, 0x20, 0x26, 0x18, 0x0D, 0x0E, 0x2C, 0x2C, 0x29, 0x33, 0x36, 
   0x37, 0x30, 0x33, 0x3B, 0x2D, 0x30, 0x3B, 0x2F, 0x35, 0x3C, 0x35, 0x3E, 0x42, 0x41, 0x47, 0x4E, 
   0x4E, 0x58, 0x60, 0x5A, 0x61, 0x69, 0xA3, 0xA5, 0xAD, 0x8F, 0x95, 0x9C, 0x82, 0x89, 0x93, 0x7E, 
   0x81, 0x8D, 0x81, 0x81, 0x8B, 0x90, 0x90, 0x98, 0x8B, 0x8D, 0x95, 0x7B, 0x7F, 0x86, 0x7D, 0x7F, 
   0x88, 0x79, 0x7A, 0x81, 0x6A, 0x6C, 0x71, 0x69, 0x6B, 0x70, 0x6C, 0x6B, 0x73, 0x68, 0x64, 0x6E, 
   0x5C, 0x57, 0x5E, 0x4C, 0x48, 0x48, 0x43, 0x3F, 0x3E, 0x3E, 0x3B, 0x3A, 0x3C, 0x37, 0x3B, 0x3A, 
   0x37, 0x3A, 0x3A, 0x37, 0x39, 0x38, 0x34, 0x3C, 0x31, 0x2C, 0x35, 0x27, 0x28, 0x2B, 0x29, 0x2A, 
   0x2D, 0x25, 0x27, 0x2B, 0x33, 0x37, 0x3C, 0x6B, 0x6B, 0x72, 0x98, 0x92, 0x9B, 0x96, 0x92, 0x9A, 
   0x88, 0x8B, 0x8D, 0x9F, 0x9E, 0xA1, 0x9F, 0x9C, 0xA0, 0xA2, 0x9E, 0xA3, 0xA7, 0xA0, 0xA6, 0x9D, 
   0x98, 0x99, 0x8F, 0x8D, 0x8A, 0x8D, 0x8C, 0x8B, 0x92, 0x96, 0x9B, 0x9E, 0x9D, 0xA8, 0xA8, 0xA6, 
   0xB0, 0x95, 0x99, 0x9E, 0x9C, 0x9B, 0xA2, 0xA4, 0xA0, 0xA5, 0x9E, 0x9E, 0xA4, 0x9A, 0x9B, 0xA4, 
   0x94, 0x95, 0xA0, 0x98, 0x96, 0x9E, 0x9F, 0x9C, 0xA0, 0xB2, 0xB0, 0xB2, 0xA0, 0xA0, 0xA2, 0x87, 
   0x8B, 0x90, 0x7E, 0x85, 0x87, 0x74, 0x7D, 0x7B, 0x79, 0x7F, 0x7E, 0x83, 0x86, 0x8A, 0x83, 0x88, 
   0x8C, 0x86, 0x8C, 0x90, 0x90, 0x94, 0x9C, 0x68, 0x6E, 0x77, 0x59, 0x5F, 0x62, 0x69, 0x6D, 0x69, 
   0x77, 0x7A, 0x77, 0x7D, 0x83, 0x82, 0x84, 0x89, 0x88, 0x8C, 0x8D, 0x8D, 0x95, 0x94, 0x95, 0x9D, 
   0x9B, 0x9C, 0xA8, 0xA6, 0xA7, 0xB0, 0xB2, 0xB1, 0x8F, 0x93, 0x92, 0x89, 0x8D, 0x8D, 0x88, 0x8D, 
   0x8D, 0x83, 0x85, 0x89, 0x77, 0x79, 0x7F, 0x52, 0x59, 0x5F, 0xA8, 0xB3, 0xBC, 0x88, 0x94, 0x9B, 
   0x81, 0x90, 0x97, 0x83, 0x92, 0x9C, 0x80, 0x8E, 0x9B, 0x61, 0x6F, 0x7C, 0x17, 0x21, 0x26, 0x18, 
   0x1B, 0x1A, 0x2E, 0x30, 0x2D, 0x2E, 0x38, 0x36, 0x5D, 0x6A, 0x6E, 0x70, 0x79, 0x80, 0x76, 0x7D, 
   0x7C, 0x80, 0x89, 0x88, 0x89, 0x93, 0x94, 0x8F, 0x98, 0x9C, 0xC6, 0xCF, 0xD3, 0xBF, 0xC5, 0xCF, 
   0xA7, 0xAD, 0xB5, 0xA0, 0xA8, 0xAC, 0x9E, 0xA5, 0xAC, 0x92, 0x99, 0xA1, 0x88, 0x8E, 0x97, 0x8D, 
   0x96, 0x9D, 0x94, 0x99, 0x9F, 0x97, 0x9A, 0xA0, 0xA2, 0xA2, 0xA9, 0x96, 0x99, 0xA1, 0x90, 0x94, 
   0x9D, 0xA3, 0xA9, 0xAF, 0xA7, 0xAB, 0xB4, 0xAA, 0xB0, 0xBB, 0xAF, 0xB8, 0xC1, 0xB4, 0xBB, 0xC4, 
   0xA2, 0xA8, 0xB3, 0x96, 0xA1, 0xAD, 0x84, 0x91, 0x9B, 0x87, 0x92, 0x98, 0x96, 0x9F, 0xAB, 0x97, 
   0x9D, 0xA7, 0x99, 0x9E, 0xA4, 0x97, 0x96, 0xA1, 0x4A, 0x46, 0x4E, 0x25, 0x22, 0x27, 0x12, 0x13, 
   0x16, 0x0E, 0x14, 0x13, 0x32, 0x3A, 0x37, 0x5E, 0x69, 0x67, 0x7D, 0x88, 0x8C, 0x7B, 0x83, 0x88, 
   0x82, 0x87, 0x8A, 0x81, 0x83, 0x8A, 0x82, 0x84, 0x8A, 0x83, 0x87, 0x8A, 0x88, 0x8C, 0x90, 0x89, 
   0x8A, 0x8E, 0x92, 0x91, 0x95, 0x96, 0x96, 0x9B, 0x7B, 0x7B, 0x83, 0x80, 0x81, 0x88, 0x8C, 0x8F, 
   0x92, 0x7D, 0x7E, 0x81, 0x6E, 0x6F, 0x6C, 0x86, 0x84, 0x7A, 0x88, 0x7D, 0x74, 0x7E, 0x6F, 0x65, 
   0x89, 0x75, 0x6B, 0x79, 0x63, 0x58, 0x69, 0x56, 0x4A, 0x67, 0x54, 0x49, 0x5D, 0x4E, 0x40, 0x4B, 
   0x3C, 0x34, 0x2A, 0x1C, 0x18, 0x19, 0x17, 0x12, 0x59, 0x5C, 0x5B, 0x75, 0x75, 0x70, 0x72, 0x6F, 
   0x69, 0x80, 0x79, 0x70, 0x7C, 0x73, 0x6B, 0x7F, 0x75, 0x6E, 0x80, 0x7C, 0x77, 0x70, 0x79, 0x88, 
   0x7C, 0x9A, 0xBB, 0x8D, 0xB6, 0xD9, 0xAB, 0xCE, 0xED, 0xA3, 0xBC, 0xD4, 0x7B, 0x90, 0xAD, 0x6F, 
   0x84, 0xA4, 0xA3, 0xB6, 0xD6, 0x98, 0xA9, 0xCB, 0x8B, 0x9F, 0xB5, 0x90, 0x9B, 0xA3, 0xA2, 0x9F, 
   0x9C, 0xAC, 0xA5, 0x9D, 0xA8, 0x9F, 0x9A, 0xA9, 0x9F, 0x99, 0xAD, 0xA6, 0x9B, 0xB1, 0xA7, 0x9E, 
   0xAC, 0xA2, 0x9A, 0xAB, 0xA1, 0x9F, 0xA8, 0xA0, 0x9E, 0xA9, 0xA2, 0x9C, 0xAA, 0xA3, 0x9C, 0xAA, 
   0xA3, 0x99, 0xA8, 0xA3, 0x9A, 0xAC, 0xA4, 0xA0, 0xA8, 0xA0, 0x9F, 0xA3, 0x9E, 0x9E, 0xA0, 0x9F, 
   0xA0, 0x9C, 0x9E, 0xA1, 0x9A, 0x9D, 0xA4, 0x9C, 0x9D, 0xA9, 0x98, 0x9F, 0xB0, 0x8F, 0x8B, 0xA4, 
   0x3B, 0x31, 0x40, 0x22, 0x22, 0x25, 0x49, 0x4E, 0x50, 0x5B, 0x5C, 0x62, 0x65, 0x6B, 0x6C, 0x66, 
   0x6F, 0x74, 0x65, 0x69, 0x6E, 0x69, 0x6A, 0x6E, 0x71, 0x6F, 0x71, 0x7C, 0x78, 0x74, 0x82, 0x7F, 
   0x78, 0x89, 0x82, 0x7F, 0x80, 0x7A, 0x7A, 0x76, 0x77, 0x76, 0x7C, 0x7C, 0x7B, 0x86, 0x85, 0x89, 
   0x74, 0x6D, 0x75, 0x4E, 0x45, 0x4E, 0x44, 0x40, 0x46, 0x47, 0x4B, 0x4B, 0x42, 0x4B, 0x49, 0x4D, 
   0x52, 0x53, 0x57, 0x59, 0x5B, 0x58, 0x5A, 0x5A, 0x54, 0x54, 0x58, 0x4F, 0x54, 0x58, 0x48, 0x4E, 
   0x4F, 0x3F, 0x41, 0x41, 0x29, 0x27, 0x27, 0x20, 0x1E, 0x1C, 0x32, 0x37, 0x36, 0x48, 0x4F, 0x52, 
   0x4A, 0x45, 0x4F, 0x47, 0x3D, 0x42, 0x51, 0x4A, 0x46, 0x63, 0x5A, 0x59, 0x66, 0x5E, 0x62, 0x63, 
   0x61, 0x61, 0x6A, 0x6E, 0x6A, 0x70, 0x72, 0x6E, 0x7D, 0x7D, 0x79, 0x8E, 0x92, 0x94, 0x99, 0xA2, 
   0xB1, 0xAA, 0xBD, 0xCD, 0xBA, 0xC6, 0xD2, 0x9C, 0x98, 0xA4, 0x6F, 0x66, 0x6C, 0x67, 0x61, 0x64, 
   0x63, 0x5F, 0x63, 0x64, 0x5F, 0x62, 0x69, 0x60, 0x65, 0x61, 0x57, 0x60, 0x57, 0x51, 0x5A, 0x4E, 
   0x4B, 0x52, 0x4F, 0x46, 0x4B, 0x23, 0x1C, 0x1F, 0x12, 0x0F, 0x10, 0x1E, 0x25, 0x23, 0x33, 0x3D, 
   0x3C, 0x40, 0x48, 0x4F, 0x4E, 0x51, 0x5C, 0x52, 0x59, 0x61, 0x61, 0x6B, 0x71, 0x72, 0x77, 0x7E, 
   0x7F, 0x85, 0x89, 0x7E, 0x81, 0x84, 0xA3, 0xA7, 0xAF, 0xA8, 0xAD, 0xB6, 0xA4, 0xA9, 0xB4, 0x95, 
   0x99, 0xA5, 0x8F, 0x92, 0x9C, 0x97, 0x9B, 0xA2, 0x8E, 0x92, 0x99, 0x88, 0x8A, 0x92, 0x80, 0x7D, 
   0x87, 0x72, 0x71, 0x7B, 0x61, 0x63, 0x6C, 0x61, 0x65, 0x6B, 0x66, 0x69, 0x6E, 0x60, 0x61, 0x65, 
   0x56, 0x56, 0x58, 0x59, 0x59, 0x57, 0x59, 0x5A, 0x57, 0x52, 0x51, 0x4F, 0x4F, 0x4C, 0x4D, 0x55, 
   0x56, 0x54, 0x5F, 0x62, 0x5E, 0x60, 0x60, 0x5F, 0x50, 0x4B, 0x4C, 0x36, 0x35, 0x32, 0x2A, 0x29, 
   0x27, 0x21, 0x22, 0x22, 0x19, 0x1E, 0x1D, 0x3F, 0x3F, 0x41, 0x7F, 0x7C, 0x7F, 0x8E, 0x8B, 0x8F, 
   0x85, 0x86, 0x89, 0x98, 0x97, 0x9C, 0x9B, 0x99, 0x9D, 0x98, 0x95, 0x98, 0x96, 0x91, 0x99, 0x96, 
   0x91, 0x95, 0x8C, 0x8C, 0x86, 0x94, 0x94, 0x92, 0x99, 0x99, 0x9F, 0x9B, 0x97, 0xA3, 0x97, 0x95, 
   0x9F, 0x94, 0x98, 0x9E, 0x9D, 0xA1, 0xA7, 0xA4, 0xA3, 0xA7, 0x9E, 0x9B, 0xA0, 0x9A, 0x97, 0x9F, 
   0x97, 0x94, 0x9C, 0xA2, 0x9B, 0xA2, 0xAA, 0xA1, 0xA3, 0xBF, 0xB6, 0xB7, 0xA8, 0xA3, 0xA8, 0x88, 
   0x88, 0x90, 0x85, 0x87, 0x8A, 0x7F, 0x83, 0x82, 0x86, 0x87, 0x87, 0x86, 0x88, 0x8D, 0x83, 0x89, 
   0x8F, 0x8E, 0x92, 0x9A, 0x96, 0x98, 0xA1, 0x85, 0x87, 0x90, 0x61, 0x67, 0x6A, 0x60, 0x65, 0x63, 
   0x72, 0x75, 0x72, 0x7C, 0x82, 0x7F, 0x88, 0x90, 0x8B, 0x8F, 0x94, 0x90, 0x94, 0x96, 0x95, 0x99, 
   0x99, 0x9A, 0x9F, 0x9E, 0xA0, 0xB7, 0xB6, 0xB5, 0xB9, 0xB9, 0xB5, 0xA8, 0xAA, 0xA9, 0x97, 0x9D, 
   0x9C, 0x88, 0x8E, 0x91, 0x85, 0x8C, 0x8F, 0x70, 0x7A, 0x7F, 0xB6, 0xC3, 0xCA, 0x8B, 0x97, 0x9E, 
   0x76, 0x87, 0x8E, 0x6C, 0x7F, 0x82, 0x67, 0x78, 0x7D, 0x72, 0x88, 0x90, 0x61, 0x71, 0x77, 0x3E, 
   0x41, 0x44, 0x2A, 0x2A, 0x28, 0x29, 0x2E, 0x2C, 0x52, 0x5B, 0x60, 0x71, 0x79, 0x83, 0x79, 0x80, 
   0x82, 0x7F, 0x86, 0x89, 0x85, 0x8C, 0x90, 0x8D, 0x99, 0x9C, 0xC3, 0xD0, 0xD1, 0xC6, 0xCC, 0xD2, 
   0xA8, 0xAC, 0xB2, 0x9D, 0xA3, 0xA7, 0x98, 0xA0, 0xA8, 0x86, 0x91, 0x9B, 0x79, 0x86, 0x91, 0x89, 
   0x97, 0x9F, 0x9C, 0xA3, 0xA8, 0xAD, 0xB2, 0xB5, 0xAE, 0xB0, 0xB5, 0x9C, 0xA2, 0xAA, 0x7F, 0x85, 
   0x91, 0x80, 0x88, 0x91, 0x91, 0x98, 0xA5, 0x94, 0x9B, 0xAA, 0x9A, 0xA0, 0xAE, 0x9E, 0xA2, 0xAF, 
   0x9F, 0xA5, 0xB0, 0xA6, 0xB2, 0xBE, 0x92, 0xA2, 0xAD, 0x7E, 0x8C, 0x92, 0x87, 0x97, 0xA0, 0x8B, 
   0x98, 0x9E, 0x8C, 0x96, 0x98, 0x7A, 0x7B, 0x84, 0x37, 0x33, 0x38, 0x1C, 0x1C, 0x1F, 0x1F, 0x25, 
   0x28, 0x4E, 0x5A, 0x5B, 0x83, 0x91, 0x90, 0x88, 0x94, 0x94, 0x89, 0x92, 0x95, 0x80, 0x86, 0x89, 
   0x7F, 0x82, 0x85, 0x81, 0x80, 0x87, 0x82, 0x81, 0x88, 0x7F, 0x82, 0x84, 0x82, 0x88, 0x87, 0x86, 
   0x8A, 0x8C, 0x8B, 0x8B, 0x8E, 0x91, 0x92, 0x97, 0x88, 0x87, 0x8F, 0x7D, 0x7D, 0x83, 0x85, 0x85, 
   0x88, 0x7F, 0x7F, 0x82, 0x7C, 0x7D, 0x7A, 0x7C, 0x7C, 0x78, 0x6F, 0x64, 0x5E, 0x6C, 0x59, 0x4F, 
   0x7F, 0x66, 0x5A, 0x7B, 0x60, 0x53, 0x6F, 0x57, 0x4C, 0x66, 0x50, 0x45, 0x69, 0x5A, 0x4E, 0x50, 
   0x42, 0x3C, 0x1C, 0x16, 0x11, 0x35, 0x3A, 0x34, 0x91, 0x93, 0x92, 0x80, 0x7F, 0x75, 0x71, 0x71, 
   0x69, 0x77, 0x71, 0x6A, 0x7A, 0x71, 0x68, 0x85, 0x7A, 0x6D, 0x83, 0x7D, 0x71, 0x77, 0x7E, 0x86, 
   0x7C, 0x93, 0xB1, 0x8B, 0xB0, 0xD1, 0xB8, 0xD6, 0xEB, 0xE2, 0xF1, 0xF9, 0xE1, 0xE9, 0xF3, 0xBF, 
   0xCC, 0xE4, 0x9C, 0xA8, 0xC4, 0x7C, 0x84, 0x95, 0x86, 0x8A, 0x8D, 0x98, 0x95, 0x91, 0xA1, 0x98, 
   0x8F, 0xA5, 0x9C, 0x93, 0xA6, 0x9E, 0x95, 0xAA, 0xA0, 0x95, 0xAB, 0xA2, 0x95, 0xA6, 0x9D, 0x96, 
   0xA6, 0x9C, 0x99, 0xAA, 0x9F, 0x9F, 0xA7, 0x9E, 0x99, 0xA8, 0xA1, 0x96, 0xA8, 0xA0, 0x98, 0xA9, 
   0xA0, 0x9A, 0xAE, 0xA2, 0x9B, 0xAF, 0xA1, 0x9D, 0xAC, 0x9F, 0x9E, 0xAB, 0xA0, 0x9F, 0xAC, 0xA4, 
   0x9F, 0xB2, 0xAB, 0xA3, 0xAA, 0xA2, 0x9B, 0xA4, 0x9F, 0x9F, 0xAE, 0xA4, 0xA6, 0x97, 0x81, 0x88, 
   0x3A, 0x2A, 0x2C, 0x27, 0x24, 0x22, 0x53, 0x55, 0x53, 0x62, 0x60, 0x60, 0x66, 0x6B, 0x64, 0x6F, 
   0x74, 0x6F, 0x71, 0x72, 0x6B, 0x74, 0x75, 0x6D, 0x75, 0x75, 0x70, 0x89, 0x88, 0x83, 0x91, 0x8E, 
   0x87, 0x8C, 0x83, 0x80, 0x80, 0x7A, 0x78, 0x83, 0x82, 0x80, 0x88, 0x85, 0x83, 0x7B, 0x76, 0x78, 
   0x55, 0x4D, 0x54, 0x3E, 0x38, 0x3E, 0x43, 0x45, 0x47, 0x44, 0x4E, 0x4E, 0x44, 0x50, 0x51, 0x50, 
   0x58, 0x5C, 0x5C, 0x60, 0x63, 0x5F, 0x60, 0x61, 0x5B, 0x5A, 0x5F, 0x55, 0x5C, 0x5F, 0x53, 0x5A, 
   0x5C, 0x58, 0x5B, 0x5C, 0x4B, 0x4A, 0x48, 0x35, 0x33, 0x34, 0x29, 0x2D, 0x33, 0x2C, 0x31, 0x3C, 
   0x43, 0x44, 0x4E, 0x48, 0x46, 0x4B, 0x5E, 0x5B, 0x5A, 0x70, 0x69, 0x68, 0x72, 0x6C, 0x6D, 0x73, 
   0x73, 0x72, 0x70, 0x6F, 0x6E, 0x74, 0x71, 0x70, 0x80, 0x79, 0x77, 0x8B, 0x86, 0x84, 0x83, 0x7F, 
   0x87, 0x87, 0x8C, 0x9A, 0x8F, 0x91, 0xA3, 0x6A, 0x66, 0x75, 0x51, 0x4F, 0x55, 0x58, 0x59, 0x5C, 
   0x61, 0x5E, 0x61, 0x62, 0x5A, 0x5D, 0x64, 0x5A, 0x60, 0x57, 0x4B, 0x56, 0x4A, 0x41, 0x4B, 0x46, 
   0x42, 0x47, 0x36, 0x2E, 0x31, 0x16, 0x1D, 0x1D, 0x39, 0x47, 0x4A, 0x50, 0x5D, 0x63, 0x56, 0x5F, 
   0x64, 0x5C, 0x64, 0x6A, 0x6D, 0x6F, 0x79, 0x78, 0x7B, 0x85, 0x87, 0x88, 0x91, 0x8F, 0x8B, 0x95, 
   0x97, 0x97, 0x9E, 0x9B, 0x9C, 0xA6, 0xA1, 0xA4, 0xAD, 0xB2, 0xB4, 0xBC, 0xBF, 0xC0, 0xCB, 0xB1, 
   0xB2, 0xBE, 0x9B, 0x9C, 0xA5, 0x93, 0x96, 0x9D, 0x86, 0x8B, 0x92, 0x79, 0x7E, 0x85, 0x74, 0x75, 
   0x7C, 0x66, 0x68, 0x71, 0x5D, 0x5F, 0x68, 0x57, 0x57, 0x5F, 0x55, 0x54, 0x5A, 0x59, 0x5B, 0x5B, 
   0x6B, 0x70, 0x6C, 0x72, 0x79, 0x73, 0x6B, 0x6C, 0x67, 0x66, 0x67, 0x60, 0x60, 0x63, 0x5F, 0x70, 
   0x76, 0x6E, 0x7E, 0x85, 0x79, 0x7E, 0x82, 0x79, 0x76, 0x78, 0x6F, 0x5C, 0x5A, 0x54, 0x5E, 0x63, 
   0x5C, 0x75, 0x7C, 0x76, 0x72, 0x7D, 0x78, 0x5E, 0x67, 0x64, 0x68, 0x70, 0x6E, 0x78, 0x79, 0x79, 
   0x85, 0x84, 0x8C, 0x95, 0x96, 0x9C, 0x99, 0x9A, 0x9D, 0x9F, 0x9E, 0xA3, 0x9A, 0x98, 0xA1, 0x9C, 
   0x99, 0x9E, 0x9A, 0x99, 0x98, 0xA5, 0xA2, 0xA5, 0xA0, 0x9D, 0xA3, 0x8F, 0x8D, 0x93, 0x8C, 0x8A, 
   0x8F, 0x9E, 0x9E, 0xA1, 0x9D, 0x9F, 0xA1, 0xA2, 0x9E, 0xA1, 0x9E, 0x97, 0x9B, 0x9E, 0x99, 0x9F, 
   0xA3, 0x9F, 0xA3, 0xA6, 0x9E, 0xA0, 0xA9, 0x9F, 0xA1, 0xAA, 0xA0, 0xA2, 0xA0, 0x98, 0x9E, 0x8F, 
   0x8E, 0x92, 0x94, 0x91, 0x93, 0x91, 0x8F, 0x91, 0x9B, 0x98, 0x9A, 0x99, 0x9A, 0x9C, 0x87, 0x8B, 
   0x8F, 0x8A, 0x89, 0x92, 0x98, 0x94, 0x9B, 0xA2, 0x9D, 0xA1, 0x73, 0x75, 0x77, 0x58, 0x61, 0x60, 
   0x6B, 0x71, 0x6F, 0x7B, 0x85, 0x7E, 0x89, 0x93, 0x8D, 0x8F, 0x96, 0x90, 0x95, 0x99, 0x94, 0x98, 
   0x9C, 0x9A, 0x9A, 0x9F, 0x9F, 0xA6, 0xA9, 0xA9, 0xB1, 0xB2, 0xB0, 0xB0, 0xB1, 0xAF, 0xB9, 0xBC, 
   0xBB, 0xC7, 0xC8, 0xCB, 0xB1, 0xB2, 0xB5, 0x80, 0x87, 0x8C, 0xB9, 0xC1, 0xC9, 0x9B, 0xA3, 0xA9, 
   0x79, 0x83, 0x8B, 0x73, 0x82, 0x88, 0x67, 0x78, 0x7F, 0x6F, 0x82, 0x8D, 0x90, 0xA0, 0xA9, 0x75, 
   0x7F, 0x85, 0x30, 0x2F, 0x31, 0x29, 0x27, 0x27, 0x47, 0x4B, 0x4D, 0x6B, 0x70, 0x74, 0x83, 0x8D, 
   0x8C, 0x95, 0xA0, 0xA4, 0x9C, 0xA6, 0xAC, 0xA6, 0xB3, 0xB8, 0xCB, 0xD4, 0xD7, 0xD3, 0xD7, 0xDA, 
   0xB7, 0xBA, 0xC0, 0xA3, 0xAA, 0xAF, 0x99, 0xA1, 0xAA, 0x93, 0x9A, 0xA3, 0x90, 0x9B, 0xA1, 0x90, 
   0x98, 0xA0, 0x96, 0x99, 0x9F, 0x93, 0x98, 0x9A, 0x91, 0x96, 0x97, 0xA0, 0xA9, 0xAD, 0xA3, 0xAB, 
   0xB6, 0x88, 0x94, 0xA2, 0x89, 0x95, 0xA1, 0x97, 0xA1, 0xAC, 0x9F, 0xA4, 0xB0, 0x99, 0xA0, 0xAB, 
   0x96, 0xA0, 0xA8, 0x9F, 0xAA, 0xB1, 0x86, 0x8F, 0x95, 0x77, 0x81, 0x83, 0x82, 0x91, 0x96, 0x78, 
   0x85, 0x87, 0x7F, 0x89, 0x8C, 0x86, 0x89, 0x94, 0x2F, 0x2D, 0x33, 0x1C, 0x22, 0x23, 0x56, 0x5E, 
   0x60, 0x7F, 0x87, 0x89, 0x84, 0x8F, 0x8E, 0x82, 0x8A, 0x89, 0x84, 0x89, 0x8B, 0x7F, 0x86, 0x87, 
   0x7C, 0x83, 0x83, 0x7C, 0x80, 0x83, 0x91, 0x95, 0x9C, 0x85, 0x8A, 0x92, 0x80, 0x87, 0x8B, 0x80, 
   0x86, 0x8B, 0x7C, 0x83, 0x86, 0x91, 0x98, 0x9A, 0x95, 0x98, 0x9E, 0x83, 0x87, 0x8A, 0x7E, 0x81, 
   0x81, 0x75, 0x78, 0x79, 0x7C, 0x7E, 0x7B, 0x78, 0x80, 0x78, 0x66, 0x5F, 0x57, 0x66, 0x56, 0x4D, 
   0x5F, 0x4A, 0x3F, 0x66, 0x4F, 0x42, 0x6E, 0x5A, 0x4C, 0x60, 0x4D, 0x40, 0x80, 0x6F, 0x68, 0x5B, 
   0x4E, 0x4A, 0x19, 0x19, 0x13, 0x66, 0x71, 0x67, 0xA5, 0xA4, 0xA0, 0x9B, 0x93, 0x85, 0x7D, 0x7C, 
   0x70, 0x74, 0x70, 0x62, 0x78, 0x72, 0x64, 0x7E, 0x76, 0x67, 0x7F, 0x7C, 0x71, 0x7B, 0x7E, 0x81, 
   0x7B, 0x8D, 0x9F, 0x94, 0xAF, 0xCA, 0xCB, 0xDC, 0xEC, 0xEB, 0xF1, 0xF8, 0xE1, 0xE3, 0xF2, 0x9D, 
   0xA4, 0xBE, 0x77, 0x7F, 0x8E, 0x7D, 0x81, 0x7E, 0x8F, 0x91, 0x8A, 0x9A, 0x97, 0x94, 0x9B, 0x93, 
   0x91, 0xA0, 0x97, 0x93, 0xA4, 0x9E, 0x98, 0xA3, 0x9E, 0x9A, 0xA4, 0x9E, 0x9E, 0xA8, 0xA0, 0x9D, 
   0xA9, 0xA1, 0x9B, 0xA6, 0x9C, 0x99, 0xA9, 0xA1, 0x9A, 0xAB, 0xA5, 0x9B, 0xAA, 0xA3, 0x9D, 0xA9, 
   0xA2, 0x9E, 0xAA, 0xA2, 0x9E, 0xA9, 0x9F, 0x9E, 0xA9, 0x9F, 0xA0, 0xAA, 0xA2, 0xA1, 0xAE, 0xA8, 
   0xA3, 0xB4, 0xAD, 0xA6, 0xAF, 0xA5, 0xA0, 0xC0, 0xB6, 0xB1, 0xBD, 0xAA, 0xA8, 0x7D, 0x60, 0x60, 
   0x2B, 0x1D, 0x16, 0x20, 0x1E, 0x19, 0x24, 0x28, 0x20, 0x3E, 0x3F, 0x39, 0x54, 0x59, 0x51, 0x7D, 
   0x81, 0x7A, 0x8A, 0x88, 0x82, 0x86, 0x85, 0x7F, 0x86, 0x84, 0x84, 0x95, 0x92, 0x92, 0x8E, 0x8C, 
   0x88, 0x7F, 0x7D, 0x78, 0x79, 0x77, 0x74, 0x7F, 0x78, 0x77, 0x77, 0x6E, 0x6D, 0x6C, 0x61, 0x64, 
   0x48, 0x40, 0x47, 0x39, 0x3A, 0x3C, 0x40, 0x48, 0x48, 0x40, 0x4C, 0x4F, 0x45, 0x4F, 0x54, 0x50, 
   0x56, 0x5C, 0x5D, 0x60, 0x68, 0x67, 0x68, 0x71, 0x60, 0x60, 0x68, 0x51, 0x57, 0x5A, 0x4B, 0x51, 
   0x52, 0x4C, 0x51, 0x52, 0x4F, 0x53, 0x54, 0x51, 0x53, 0x57, 0x45, 0x48, 0x52, 0x32, 0x39, 0x3F, 
   0x4B, 0x54, 0x58, 0x6F, 0x77, 0x77, 0x7B, 0x7E, 0x7D, 0x78, 0x75, 0x78, 0x6F, 0x69, 0x70, 0x6E, 
   0x66, 0x6A, 0x6B, 0x63, 0x64, 0x6C, 0x64, 0x66, 0x6B, 0x66, 0x69, 0x6F, 0x6B, 0x6F, 0x6A, 0x5F, 
   0x65, 0x58, 0x52, 0x5C, 0x5F, 0x5E, 0x6D, 0x4A, 0x4D, 0x5C, 0x43, 0x4A, 0x4F, 0x50, 0x54, 0x56, 
   0x5A, 0x57, 0x5A, 0x59, 0x53, 0x56, 0x54, 0x4A, 0x50, 0x49, 0x3C, 0x46, 0x3E, 0x34, 0x39, 0x34, 
   0x2D, 0x2E, 0x26, 0x1F, 0x20, 0x28, 0x38, 0x37, 0x68, 0x7A, 0x82, 0x7F, 0x8C, 0x9A, 0x7D, 0x86, 
   0x95, 0x7A, 0x81, 0x8E, 0x7E, 0x81, 0x8A, 0x81, 0x82, 0x8C, 0x82, 0x82, 0x8C, 0x84, 0x81, 0x8D, 
   0x81, 0x81, 0x8F, 0x85, 0x84, 0x96, 0x9B, 0x9E, 0xA5, 0xB2, 0xB3, 0xBA, 0xB5, 0xB8, 0xC0, 0xC8, 
   0xCD, 0xD5, 0xA9, 0xAC, 0xB4, 0x90, 0x91, 0x99, 0x83, 0x87, 0x8C, 0x75, 0x78, 0x7E, 0x72, 0x71, 
   0x78, 0x72, 0x71, 0x75, 0x66, 0x68, 0x6B, 0x52, 0x54, 0x59, 0x60, 0x64, 0x67, 0x71, 0x77, 0x76, 
   0x79, 0x80, 0x7B, 0x76, 0x7C, 0x75, 0x88, 0x86, 0x7E, 0x8D, 0x8D, 0x82, 0x89, 0x8B, 0x82, 0x96, 
   0x99, 0x90, 0x94, 0x97, 0x8B, 0x7F, 0x82, 0x77, 0x6F, 0x72, 0x68, 0x63, 0x62, 0x5C, 0x64, 0x68, 
   0x61, 0x79, 0x7B, 0x77, 0x87, 0x8D, 0x89, 0x7A, 0x80, 0x7D, 0x62, 0x6C, 0x6A, 0x71, 0x76, 0x78, 
   0x81, 0x81, 0x8B, 0x98, 0x9B, 0xA1, 0x9F, 0xA1, 0xA6, 0xA4, 0xA4, 0xAB, 0xA0, 0x9E, 0xA8, 0x9F, 
   0x9E, 0xA3, 0xA2, 0x9F, 0xA2, 0xA2, 0x9D, 0xA8, 0x9F, 0x9D, 0xA6, 0x9B, 0x9E, 0xA4, 0x9C, 0xA2, 
   0xA5, 0x9E, 0xA0, 0xA4, 0x98, 0x98, 0x9D, 0x9A, 0x95, 0x98, 0x9B, 0x93, 0x96, 0x9B, 0x95, 0x99, 
   0x98, 0x94, 0x96, 0x9A, 0x98, 0x97, 0xA1, 0x9F, 0x9E, 0xA7, 0xA5, 0xA7, 0xA8, 0xA3, 0xA7, 0xA4, 
   0xA3, 0xA4, 0xAA, 0xA5, 0xA7, 0x95, 0x90, 0x95, 0xA1, 0x9C, 0x9F, 0x9D, 0x9A, 0x9A, 0x8E, 0x8A, 
   0x8D, 0x88, 0x85, 0x8D, 0x93, 0x91, 0x95, 0x9E, 0x9A, 0x9B, 0x7B, 0x7E, 0x80, 0x5C, 0x65, 0x67, 
   0x72, 0x76, 0x76, 0x7D, 0x84, 0x7F, 0x88, 0x8E, 0x8E, 0x96, 0x9A, 0x97, 0x9B, 0x9D, 0x9A, 0x9B, 
   0x9E, 0x9C, 0x9A, 0x9E, 0x9F, 0xA0, 0xA5, 0xA9, 0xAE, 0xB1, 0xB2, 0xA9, 0xAE, 0xAD, 0xB8, 0xBC, 
   0xBC, 0xC3, 0xC3, 0xC6, 0xA4, 0xA5, 0xA9, 0x8A, 0x91, 0x96, 0xB7, 0xC2, 0xCA, 0xB6, 0xC2, 0xC6, 
   0x8D, 0x9A, 0x9D, 0x7D, 0x8E, 0x93, 0x79, 0x8A, 0x96, 0x7A, 0x83, 0x92, 0x8B, 0x96, 0xA0, 0x8C, 
   0x93, 0x9A, 0x5A, 0x5B, 0x63, 0x25, 0x2B, 0x2F, 0x39, 0x42, 0x42, 0x5C, 0x64, 0x65, 0x9B, 0xA4, 
   0xA0, 0xC2, 0xCD, 0xCD, 0xD5, 0xDC, 0xE1, 0xCB, 0xD3, 0xD8, 0xC6, 0xCF, 0xD4, 0xB7, 0xBD, 0xC5, 
   0xA4, 0xAD, 0xB7, 0x95, 0xA2, 0xAC, 0x9A, 0xA5, 0xAF, 0x97, 0x9E, 0xA5, 0x90, 0x95, 0x99, 0x91, 
   0x94, 0x9A, 0x93, 0x93, 0x9A, 0x8E, 0x93, 0x96, 0x8C, 0x94, 0x94, 0x9B, 0xA6, 0xA9, 0xA6, 0xB0, 
   0xB8, 0x95, 0xA5, 0xB4, 0x8F, 0x9D, 0xA9, 0x9A, 0xA4, 0xAC, 0x9F, 0xA6, 0xAD, 0x93, 0x9E, 0xA5, 
   0x97, 0xA4, 0xAA, 0x9A, 0xA3, 0xA9, 0x8D, 0x91, 0x9C, 0x82, 0x86, 0x8D, 0x83, 0x8C, 0x92, 0x65, 
   0x6E, 0x6E, 0x7A, 0x85, 0x84, 0x87, 0x90, 0x96, 0x30, 0x34, 0x36, 0x2E, 0x37, 0x38, 0x5F, 0x68, 
   0x6A, 0x76, 0x7C, 0x7D, 0x79, 0x80, 0x7F, 0x7D, 0x82, 0x82, 0x7E, 0x82, 0x85, 0x7E, 0x81, 0x85, 
   0x7A, 0x7D, 0x7F, 0x7A, 0x7F, 0x81, 0x93, 0x9B, 0xA2, 0x8F, 0x9B, 0xA6, 0x8D, 0x9A, 0xA2, 0x8A, 
   0x93, 0x9B, 0x8F, 0x98, 0x9C, 0xAB, 0xB4, 0xB8, 0x99, 0xA0, 0xA5, 0x89, 0x90, 0x90, 0x81, 0x88, 
   0x87, 0x78, 0x7D, 0x7D, 0x6F, 0x73, 0x70, 0x81, 0x81, 0x7A, 0x6B, 0x60, 0x56, 0x68, 0x59, 0x4B, 
   0x63, 0x55, 0x43, 0x6A, 0x56, 0x46, 0x63, 0x4F, 0x42, 0x56, 0x41, 0x3A, 0x5B, 0x4D, 0x48, 0x36, 
   0x2B, 0x27, 0x24, 0x29, 0x1F, 0x78, 0x84, 0x75, 0xB4, 0xAC, 0xA4, 0xA3, 0x94, 0x86, 0x71, 0x69, 
   0x5E, 0x71, 0x6E, 0x5F, 0x78, 0x76, 0x66, 0x7B, 0x76, 0x67, 0x7F, 0x74, 0x6A, 0x7D, 0x73, 0x6A, 
   0x7B, 0x7E, 0x7C, 0x84, 0x92, 0x9B, 0x89, 0x95, 0xA6, 0x93, 0x9A, 0xAF, 0x8D, 0x8F, 0xA7, 0x71, 
   0x71, 0x82, 0x7F, 0x7E, 0x7F, 0x83, 0x83, 0x79, 0x88, 0x89, 0x7D, 0x94, 0x95, 0x8D, 0x94, 0x91, 
   0x90, 0x94, 0x8E, 0x8E, 0x9C, 0x93, 0x92, 0x9F, 0x96, 0x95, 0xA4, 0x9C, 0x9C, 0xA2, 0x9C, 0x9C, 
   0xA3, 0x9F, 0x9B, 0xA6, 0xA2, 0x9F, 0xA7, 0xA3, 0xA0, 0xA8, 0xA4, 0xA1, 0xA8, 0xA4, 0xA3, 0xA9, 
   0xA4, 0xA4, 0xA8, 0xA5, 0xA4, 0xA5, 0x9F, 0xA1, 0xA6, 0x9E, 0xA0, 0xA8, 0xA0, 0x9F, 0xAB, 0xA5, 
   0xA0, 0xAE, 0xA5, 0x9F, 0xB0, 0xA2, 0x9F, 0xB1, 0xA8, 0xA6, 0xB3, 0xA0, 0xA7, 0x6F, 0x54, 0x5B, 
   0x2A, 0x1C, 0x1B, 0x23, 0x1F, 0x1C, 0x22, 0x20, 0x1A, 0x26, 0x20, 0x1D, 0x3B, 0x3B, 0x36, 0x5E, 
   0x5D, 0x5B, 0x5B, 0x57, 0x56, 0x50, 0x4D, 0x4B, 0x51, 0x4D, 0x4B, 0x60, 0x5A, 0x55, 0x64, 0x5F, 
   0x5A, 0x6D, 0x6D, 0x69, 0x71, 0x6F, 0x6E, 0x6D, 0x67, 0x67, 0x5F, 0x59, 0x5B, 0x4E, 0x48, 0x4C, 
   0x36, 0x35, 0x3B, 0x3F, 0x40, 0x44, 0x48, 0x4D, 0x4F, 0x4B, 0x51, 0x55, 0x4B, 0x4E, 0x51, 0x50, 
   0x51, 0x53, 0x55, 0x57, 0x5C, 0x61, 0x63, 0x6A, 0x63, 0x62, 0x6D, 0x5A, 0x5C, 0x60, 0x59, 0x5A, 
   0x5A, 0x52, 0x58, 0x58, 0x4D, 0x58, 0x59, 0x5A, 0x64, 0x65, 0x73, 0x76, 0x7C, 0x6A, 0x73, 0x78, 
   0x52, 0x58, 0x5F, 0x4F, 0x50, 0x53, 0x49, 0x46, 0x47, 0x52, 0x4D, 0x57, 0x59, 0x53, 0x63, 0x53, 
   0x4D, 0x56, 0x4A, 0x44, 0x4B, 0x4E, 0x4A, 0x4C, 0x4A, 0x4A, 0x4C, 0x46, 0x48, 0x4C, 0x4A, 0x45, 
   0x4A, 0x45, 0x45, 0x4F, 0x4E, 0x53, 0x62, 0x3E, 0x45, 0x51, 0x3D, 0x45, 0x4C, 0x4C, 0x4F, 0x53, 
   0x52, 0x51, 0x55, 0x4C, 0x4A, 0x50, 0x3C, 0x36, 0x3E, 0x2A, 0x26, 0x2E, 0x23, 0x22, 0x27, 0x2A, 
   0x28, 0x2D, 0x28, 0x26, 0x2C, 0x2B, 0x39, 0x3F, 0x4C, 0x58, 0x69, 0x62, 0x6F, 0x85, 0x70, 0x7D, 
   0x93, 0x88, 0x8F, 0xA4, 0x90, 0x8C, 0xA0, 0x87, 0x83, 0x97, 0x7E, 0x81, 0x90, 0x7F, 0x7F, 0x8B, 
   0x7C, 0x7C, 0x89, 0x82, 0x7E, 0x8D, 0x84, 0x8A, 0x91, 0x92, 0x93, 0x9C, 0xA6, 0xAA, 0xB1, 0xD0, 
   0xD7, 0xDB, 0xC0, 0xC2, 0xC9, 0x97, 0x95, 0x9E, 0x84, 0x88, 0x90, 0x7A, 0x7B, 0x82, 0x72, 0x70, 
   0x75, 0x67, 0x68, 0x6C, 0x59, 0x5D, 0x62, 0x5E, 0x63, 0x67, 0x7D, 0x82, 0x7F, 0x85, 0x8C, 0x85, 
   0x88, 0x8F, 0x86, 0x96, 0x9A, 0x8F, 0xAA, 0xAB, 0xA4, 0x92, 0x90, 0x8D, 0x88, 0x82, 0x80, 0x8F, 
   0x90, 0x8D, 0x96, 0x94, 0x8C, 0x88, 0x85, 0x79, 0x7C, 0x76, 0x6E, 0x68, 0x66, 0x60, 0x65, 0x63, 
   0x5E, 0x72, 0x71, 0x6C, 0x7A, 0x80, 0x7A, 0x7B, 0x7E, 0x7C, 0x6B, 0x6A, 0x6B, 0x64, 0x6D, 0x6F, 
   0x77, 0x80, 0x85, 0xA1, 0xA9, 0xB0, 0xA4, 0xA7, 0xB1, 0xA1, 0xA1, 0xA9, 0xA2, 0xA0, 0xAB, 0x9E, 
   0x9C, 0xA3, 0x9F, 0x9B, 0x9B, 0x9E, 0x9B, 0x9E, 0x9D, 0x99, 0x9F, 0x9A, 0x98, 0xA0, 0x97, 0x99, 
   0xA0, 0x96, 0x9A, 0xA1, 0x96, 0x99, 0x9F, 0x96, 0x95, 0x98, 0x9B, 0x94, 0x97, 0x9C, 0x92, 0x98, 
   0x97, 0x8F, 0x92, 0x97, 0x95, 0x92, 0xA3, 0xA3, 0xA0, 0xA5, 0xA2, 0xA5, 0x98, 0x93, 0x98, 0x95, 
   0x90, 0x96, 0x9E, 0x93, 0x9B, 0x98, 0x8F, 0x95, 0x98, 0x95, 0x99, 0x9A, 0x95, 0x99, 0x99, 0x91, 
   0x97, 0x94, 0x8F, 0x94, 0x8F, 0x8D, 0x90, 0x92, 0x94, 0x97, 0x85, 0x8A, 0x8C, 0x66, 0x6D, 0x6E, 
   0x6E, 0x77, 0x75, 0x79, 0x84, 0x7E, 0x8A, 0x8D, 0x90, 0x91, 0x96, 0x96, 0x98, 0x9A, 0x9C, 0x99, 
   0x9B, 0x9B, 0x99, 0x9D, 0x9C, 0xA0, 0xA3, 0xA5, 0xAB, 0xAE, 0xAE, 0xAD, 0xAE, 0xB4, 0xB5, 0xB8, 
   0xBA, 0xB1, 0xB0, 0xB5, 0x97, 0x9A, 0xA0, 0x8C, 0x91, 0x99, 0xA2, 0xA7, 0xB4, 0xC0, 0xC9, 0xD2, 
   0xC4, 0xCC, 0xD6, 0xA7, 0xB3, 0xBD, 0x9D, 0xA6, 0xB5, 0x9D, 0xA7, 0xB5, 0x8C, 0x9B, 0xAA, 0x8A, 
   0x99, 0xA6, 0x89, 0x90, 0x9F, 0x35, 0x3C, 0x47, 0x36, 0x45, 0x45, 0x50, 0x5A, 0x5D, 0x76, 0x7D, 
   0x7E, 0x96, 0x9E, 0x9F, 0xAF, 0xB3, 0xB9, 0xB5, 0xBE, 0xBF, 0xB5, 0xC3, 0xC7, 0xB1, 0xBA, 0xC3, 
   0xAB, 0xB3, 0xBC, 0x9E, 0xA9, 0xB3, 0x9E, 0xA7, 0xB1, 0x9F, 0xA6, 0xAC, 0x8F, 0x98, 0x9D, 0x8A, 
   0x8E, 0x95, 0x90, 0x95, 0x9B, 0x8E, 0x93, 0x9A, 0x88, 0x8F, 0x96, 0x8D, 0x96, 0x9D, 0x98, 0x9E, 
   0xA7, 0xA0, 0xA7, 0xB7, 0x9D, 0xA6, 0xB5, 0x97, 0x9E, 0xA9, 0xA3, 0xA8, 0xB0, 0xAB, 0xB1, 0xBA, 
   0xA8, 0xAE, 0xB8, 0xA3, 0xA8, 0xAF, 0xA1, 0xA6, 0xAF, 0x7D, 0x83, 0x8E, 0x71, 0x79, 0x7F, 0x6D, 
   0x76, 0x76, 0x83, 0x89, 0x8B, 0x8C, 0x8D, 0x93, 0x45, 0x48, 0x4D, 0x42, 0x4C, 0x52, 0x5F, 0x6A, 
   0x71, 0x77, 0x84, 0x8C, 0x7B, 0x86, 0x8D, 0x7B, 0x81, 0x88, 0x77, 0x7E, 0x86, 0x7E, 0x80, 0x86, 
   0x7C, 0x82, 0x86, 0x82, 0x8E, 0x93, 0x9D, 0xA9, 0xB0, 0x98, 0xA3, 0xAC, 0x92, 0x9B, 0xA4, 0x87, 
   0x8B, 0x95, 0x91, 0x98, 0x9E, 0xA7, 0xAF, 0xB5, 0x9B, 0x9F, 0xA2, 0x86, 0x8A, 0x88, 0x7F, 0x87, 
   0x85, 0x8A, 0x90, 0x90, 0x7F, 0x7F, 0x7F, 0x86, 0x81, 0x7D, 0x73, 0x68, 0x5E, 0x58, 0x4B, 0x42, 
   0x5D, 0x50, 0x40, 0x67, 0x53, 0x44, 0x6A, 0x58, 0x4B, 0x67, 0x5C, 0x50, 0x60, 0x53, 0x4E, 0x28, 
   0x22, 0x1C, 0x41, 0x4B, 0x3E, 0x83, 0x8B, 0x7B, 0x94, 0x8E, 0x82, 0x98, 0x90, 0x85, 0x88, 0x82, 
   0x75, 0x7C, 0x78, 0x6B, 0x73, 0x72, 0x63, 0x7E, 0x77, 0x67, 0x8F, 0x83, 0x71, 0x95, 0x8B, 0x7C, 
   0x96, 0x94, 0x87, 0x9A, 0x99, 0x93, 0x96, 0x94, 0x99, 0x90, 0x8D, 0x96, 0x8E, 0x8C, 0x90, 0x8C, 
   0x8A, 0x88, 0x88, 0x86, 0x7D, 0x8A, 0x85, 0x7D, 0x8D, 0x8A, 0x85, 0x95, 0x92, 0x8E, 0x95, 0x8D, 
   0x8D, 0x94, 0x8A, 0x8C, 0x9B, 0x93, 0x93, 0x98, 0x90, 0x91, 0x99, 0x91, 0x93, 0x9C, 0x92, 0x94, 
   0x9B, 0x91, 0x92, 0x9B, 0x93, 0x93, 0x9D, 0x96, 0x96, 0xA5, 0x9C, 0x9C, 0xA8, 0x9E, 0x9D, 0xA9, 
   0x9E, 0x9D, 0xB1, 0xA9, 0xA8, 0xA7, 0xA0, 0x9F, 0xA6, 0xA0, 0x9E, 0xAA, 0xA1, 0xA0, 0xA8, 0x9E, 
   0x9D, 0xAA, 0x9C, 0x9C, 0xAC, 0x9D, 0x9D, 0xAF, 0xA4, 0xA5, 0xA2, 0x90, 0x96, 0x57, 0x3E, 0x44, 
   0x2E, 0x1E, 0x1D, 0x23, 0x1F, 0x1C, 0x23, 0x1E, 0x15, 0x21, 0x1C, 0x14, 0x21, 0x20, 0x19, 0x27, 
   0x26, 0x22, 0x23, 0x22, 0x20, 0x1A, 0x1A, 0x17, 0x16, 0x17, 0x13, 0x1B, 0x1D, 0x18, 0x34, 0x3A, 
   0x32, 0x5B, 0x60, 0x59, 0x61, 0x5E, 0x5C, 0x52, 0x4B, 0x4E, 0x45, 0x43, 0x46, 0x3C, 0x3E, 0x41, 
   0x38, 0x3C, 0x3E, 0x41, 0x43, 0x43, 0x45, 0x47, 0x4B, 0x42, 0x46, 0x49, 0x3F, 0x42, 0x44, 0x3F, 
   0x43, 0x46, 0x47, 0x4D, 0x53, 0x52, 0x58, 0x5D, 0x66, 0x6B, 0x6C, 0x61, 0x62, 0x6A, 0x62, 0x5E, 
   0x65, 0x5F, 0x62, 0x66, 0x69, 0x73, 0x77, 0x77, 0x82, 0x86, 0x7A, 0x79, 0x83, 0x79, 0x7D, 0x8A, 
   0x69, 0x6B, 0x71, 0x54, 0x52, 0x59, 0x45, 0x43, 0x49, 0x44, 0x43, 0x46, 0x49, 0x45, 0x4D, 0x4B, 
   0x45, 0x4E, 0x4E, 0x45, 0x4F, 0x45, 0x41, 0x48, 0x3D, 0x3C, 0x41, 0x41, 0x3D, 0x43, 0x43, 0x3E, 
   0x44, 0x3D, 0x38, 0x42, 0x36, 0x36, 0x3F, 0x2B, 0x32, 0x39, 0x2A, 0x32, 0x3E, 0x33, 0x3A, 0x44, 
   0x30, 0x37, 0x3F, 0x2C, 0x33, 0x3C, 0x34, 0x36, 0x3F, 0x31, 0x33, 0x3B, 0x30, 0x35, 0x3C, 0x26, 
   0x2C, 0x34, 0x22, 0x2B, 0x38, 0x34, 0x41, 0x51, 0x46, 0x53, 0x6D, 0x51, 0x60, 0x7E, 0x56, 0x69, 
   0x85, 0x63, 0x74, 0x92, 0x72, 0x7D, 0x9C, 0x7F, 0x80, 0x9C, 0x7B, 0x82, 0x95, 0x87, 0x8D, 0x9B, 
   0x95, 0x94, 0xA2, 0x9E, 0x9E, 0xA6, 0x85, 0x8F, 0x95, 0x83, 0x89, 0x8F, 0x8C, 0x91, 0x97, 0xB2, 
   0xB7, 0xBD, 0xD3, 0xD5, 0xDC, 0xB7, 0xB7, 0xBE, 0x8B, 0x8F, 0x95, 0x77, 0x79, 0x7F, 0x70, 0x6E, 
   0x75, 0x68, 0x68, 0x6C, 0x60, 0x63, 0x69, 0x7A, 0x7C, 0x85, 0x8A, 0x8B, 0x8E, 0x91, 0x93, 0x8F, 
   0x8F, 0x90, 0x8C, 0x8C, 0x8A, 0x87, 0x7B, 0x7A, 0x7D, 0x68, 0x65, 0x74, 0x5C, 0x5A, 0x6C, 0x74, 
   0x77, 0x7D, 0x8E, 0x8F, 0x89, 0x8A, 0x86, 0x7C, 0x82, 0x80, 0x75, 0x71, 0x74, 0x6B, 0x64, 0x66, 
   0x5F, 0x6A, 0x6D, 0x65, 0x74, 0x78, 0x72, 0x7A, 0x79, 0x77, 0x74, 0x6F, 0x71, 0x63, 0x67, 0x69, 
   0x72, 0x73, 0x77, 0x9C, 0x9D, 0xA3, 0xA4, 0xA4, 0xAB, 0x9B, 0x9A, 0x9F, 0x97, 0x95, 0x9B, 0x9B, 
   0x95, 0x9D, 0x9F, 0x98, 0x9B, 0x9D, 0x96, 0x9A, 0x9B, 0x98, 0x9D, 0x98, 0x97, 0x9E, 0x98, 0x99, 
   0xA1, 0x9A, 0x9A, 0xA1, 0x99, 0x98, 0x9E, 0x95, 0x94, 0x98, 0x9C, 0x9B, 0x9F, 0x9D, 0x9B, 0x9E, 
   0x9D, 0x9A, 0x9B, 0xA0, 0x9D, 0x9A, 0xA6, 0xA1, 0xA0, 0xA8, 0xA0, 0xA6, 0xA1, 0x9D, 0xA3, 0x9E, 
   0x9D, 0xA0, 0x96, 0x8F, 0x95, 0x91, 0x8C, 0x90, 0x8A, 0x8B, 0x8E, 0x90, 0x8F, 0x92, 0x95, 0x91, 
   0x95, 0x94, 0x93, 0x91, 0x9A, 0x9A, 0x97, 0x9C, 0x9B, 0x9B, 0x94, 0x93, 0x96, 0x6F, 0x71, 0x75, 
   0x6C, 0x73, 0x74, 0x74, 0x80, 0x7C, 0x81, 0x8A, 0x87, 0x8B, 0x91, 0x90, 0x93, 0x98, 0x99, 0x93, 
   0x98, 0x9B, 0x97, 0x97, 0x9A, 0xA3, 0xA2, 0xA4, 0xAB, 0xAC, 0xAF, 0xAF, 0xB2, 0xB9, 0xB0, 0xB1, 
   0xB6, 0xA3, 0xA2, 0xA9, 0x87, 0x88, 0x8F, 0x81, 0x84, 0x8F, 0xA0, 0xA8, 0xB6, 0xB8, 0xC2, 0xCC, 
   0xC1, 0xC7, 0xD0, 0xAA, 0xB1, 0xBC, 0x98, 0x9C, 0xAB, 0xAA, 0xB2, 0xBB, 0xA7, 0xB4, 0xBF, 0x93, 
   0xA1, 0xAF, 0x8C, 0x96, 0xA5, 0x49, 0x52, 0x5B, 0x35, 0x3F, 0x43, 0x51, 0x5B, 0x5E, 0x66, 0x6F, 
   0x71, 0x7F, 0x88, 0x8B, 0x86, 0x8E, 0x92, 0x8B, 0x97, 0x97, 0xA1, 0xAF, 0xB2, 0xB6, 0xC0, 0xC7, 
   0xB2, 0xB7, 0xBF, 0x9D, 0xA2, 0xAB, 0x9A, 0xA0, 0xA8, 0x96, 0x9E, 0xA2, 0x85, 0x8C, 0x91, 0x87, 
   0x8D, 0x93, 0x94, 0x9D, 0xA3, 0x9C, 0xA6, 0xAD, 0x8C, 0x94, 0x9D, 0x8D, 0x96, 0xA1, 0x92, 0x97, 
   0xA3, 0x9E, 0xA5, 0xB3, 0x9E, 0xA5, 0xB2, 0x8B, 0x8E, 0x9B, 0x8C, 0x8E, 0x99, 0xA3, 0xA9, 0xB1, 
   0xA6, 0xAF, 0xB6, 0xA5, 0xAF, 0xB4, 0xB3, 0xBB, 0xBF, 0x92, 0x99, 0xA0, 0x7C, 0x86, 0x89, 0xA6, 
   0xB0, 0xAE, 0xAC, 0xB0, 0xB1, 0x79, 0x7C, 0x80, 0x45, 0x4B, 0x4F, 0x5A, 0x65, 0x6B, 0x7E, 0x89, 
   0x93, 0x8C, 0x98, 0xA3, 0x88, 0x92, 0x9B, 0x7B, 0x82, 0x89, 0x75, 0x7E, 0x83, 0x7A, 0x81, 0x84, 
   0x7A, 0x84, 0x86, 0x89, 0x99, 0x9B, 0xAA, 0xB6, 0xBB, 0x9E, 0xA6, 0xAD, 0x9A, 0xA1, 0xA9, 0x8A, 
   0x8E, 0x98, 0x90, 0x98, 0xA1, 0x9E, 0xA7, 0xAE, 0x9C, 0x9A, 0x9D, 0x83, 0x82, 0x7E, 0x7F, 0x85, 
   0x82, 0x8A, 0x8D, 0x8E, 0x97, 0x93, 0x96, 0x95, 0x8E, 0x8A, 0x80, 0x74, 0x6A, 0x69, 0x5C, 0x53, 
   0x5B, 0x51, 0x40, 0x63, 0x56, 0x46, 0x85, 0x78, 0x67, 0x83, 0x73, 0x63, 0x63, 0x51, 0x47, 0x2D, 
   0x29, 0x1F, 0x67, 0x6E, 0x5F, 0x91, 0x93, 0x84, 0x96, 0x91, 0x87, 0x9F, 0x99, 0x91, 0x9B, 0x92, 
   0x89, 0x8E, 0x88, 0x7D, 0x8D, 0x8A, 0x7B, 0x9B, 0x95, 0x85, 0xAB, 0xA1, 0x94, 0xA7, 0x9F, 0x95, 
   0xA3, 0x9D, 0x94, 0xA4, 0x9D, 0x95, 0xA7, 0x9E, 0x9A, 0xA5, 0x9C, 0x98, 0xA1, 0x9B, 0x92, 0x97, 
   0x91, 0x88, 0x8D, 0x88, 0x7E, 0x8E, 0x88, 0x80, 0x93, 0x8F, 0x8A, 0x9F, 0x9B, 0x99, 0xA1, 0x9B, 
   0x9A, 0x99, 0x8F, 0x90, 0xA5, 0x99, 0x98, 0x9A, 0x8E, 0x8D, 0x97, 0x8C, 0x8F, 0x9B, 0x8F, 0x8F, 
   0x9B, 0x8E, 0x8E, 0x98, 0x8B, 0x8B, 0x99, 0x8E, 0x8F, 0xA0, 0x94, 0x96, 0xA0, 0x95, 0x98, 0x99, 
   0x8F, 0x92, 0xA6, 0x9D, 0x9C, 0xA3, 0x9A, 0x99, 0xA3, 0x99, 0x98, 0xA6, 0x9B, 0x9A, 0xA2, 0x96, 
   0x96, 0xA0, 0x95, 0x94, 0xA5, 0x99, 0x98, 0xAA, 0x9C, 0x9F, 0x91, 0x7C, 0x81, 0x43, 0x2D, 0x32, 
   0x2A, 0x22, 0x22, 0x26, 0x22, 0x1D, 0x21, 0x1E, 0x18, 0x20, 0x1D, 0x17, 0x1B, 0x1E, 0x16, 0x17, 
   0x1C, 0x13, 0x17, 0x1A, 0x13, 0x16, 0x1A, 0x17, 0x10, 0x19, 0x15, 0x13, 0x1D, 0x16, 0x23, 0x2C, 
   0x23, 0x3B, 0x40, 0x3B, 0x3D, 0x3D, 0x3C, 0x3A, 0x3B, 0x3F, 0x3C, 0x44, 0x48, 0x3D, 0x46, 0x4A, 
   0x3A, 0x41, 0x44, 0x38, 0x3D, 0x3E, 0x38, 0x3B, 0x3F, 0x39, 0x37, 0x3D, 0x31, 0x33, 0x37, 0x35, 
   0x3E, 0x41, 0x43, 0x4C, 0x51, 0x44, 0x4E, 0x53, 0x5A, 0x64, 0x61, 0x6D, 0x71, 0x76, 0x61, 0x5F, 
   0x66, 0x5E, 0x61, 0x68, 0x6B, 0x6F, 0x78, 0x76, 0x78, 0x82, 0x79, 0x73, 0x7F, 0x64, 0x67, 0x70, 
   0x64, 0x68, 0x70, 0x58, 0x5B, 0x67, 0x4D, 0x4E, 0x59, 0x47, 0x48, 0x4E, 0x43, 0x41, 0x48, 0x44, 
   0x40, 0x48, 0x49, 0x43, 0x4D, 0x3B, 0x38, 0x3D, 0x32, 0x31, 0x2F, 0x36, 0x32, 0x30, 0x3A, 0x34, 
   0x39, 0x33, 0x2F, 0x35, 0x2A, 0x2A, 0x2E, 0x25, 0x2C, 0x2F, 0x24, 0x2E, 0x34, 0x37, 0x42, 0x49, 
   0x54, 0x5F, 0x67, 0x53, 0x5E, 0x69, 0x69, 0x70, 0x7B, 0x71, 0x74, 0x80, 0x70, 0x74, 0x82, 0x59, 
   0x5F, 0x6D, 0x40, 0x49, 0x57, 0x38, 0x43, 0x52, 0x3E, 0x4B, 0x62, 0x48, 0x56, 0x74, 0x4E, 0x5E, 
   0x79, 0x56, 0x68, 0x85, 0x60, 0x72, 0x95, 0x6E, 0x73, 0x98, 0x79, 0x7D, 0x9B, 0x92, 0x95, 0xA9, 
   0xAA, 0xA4, 0xB3, 0xAA, 0xA1, 0xAB, 0x8C, 0x96, 0x9C, 0x91, 0x99, 0x9F, 0x9C, 0xA1, 0xA8, 0xA4, 
   0xAA, 0xB1, 0xB9, 0xBD, 0xC3, 0xBD, 0xBF, 0xC3, 0x92, 0x96, 0x9A, 0x7C, 0x7C, 0x82, 0x8C, 0x89, 
   0x91, 0x7B, 0x79, 0x82, 0x61, 0x61, 0x6F, 0x61, 0x61, 0x74, 0x5F, 0x5E, 0x71, 0x67, 0x6B, 0x7A, 
   0x61, 0x6A, 0x7D, 0x5C, 0x68, 0x7E, 0x54, 0x62, 0x76, 0x60, 0x6A, 0x85, 0x69, 0x75, 0x91, 0x7C, 
   0x84, 0x96, 0x83, 0x89, 0x90, 0x81, 0x81, 0x82, 0x86, 0x89, 0x7F, 0x87, 0x8A, 0x81, 0x70, 0x73, 
   0x68, 0x6B, 0x70, 0x66, 0x73, 0x77, 0x71, 0x7C, 0x78, 0x76, 0x7A, 0x74, 0x75, 0x69, 0x6A, 0x6D, 
   0x69, 0x67, 0x6B, 0x80, 0x80, 0x86, 0x95, 0x97, 0x9E, 0x98, 0x9B, 0x9E, 0x96, 0x96, 0x98, 0x99, 
   0x94, 0x9B, 0x9F, 0x98, 0x9C, 0x9E, 0x95, 0x99, 0x99, 0x96, 0x9A, 0x97, 0x96, 0x9C, 0x9B, 0x99, 
   0x9F, 0xA1, 0x9E, 0xA4, 0x95, 0x92, 0x97, 0x87, 0x87, 0x8D, 0x99, 0x9C, 0xA4, 0xB0, 0xB1, 0xB7, 
   0xA5, 0xA3, 0xA4, 0xA3, 0x9D, 0x99, 0xA2, 0x9A, 0x98, 0x9F, 0x97, 0x9B, 0x99, 0x99, 0x9D, 0x9F, 
   0x9F, 0xA2, 0x94, 0x91, 0x94, 0x83, 0x82, 0x84, 0x7F, 0x82, 0x85, 0x88, 0x8A, 0x8D, 0x94, 0x91, 
   0x94, 0x94, 0x96, 0x93, 0x9E, 0x9E, 0x99, 0xB3, 0xB0, 0xAC, 0xAC, 0xA8, 0xA8, 0x7D, 0x7C, 0x7E, 
   0x6A, 0x6E, 0x71, 0x6C, 0x76, 0x75, 0x7A, 0x86, 0x80, 0x85, 0x8C, 0x8C, 0x8D, 0x94, 0x95, 0x91, 
   0x96, 0x9B, 0x95, 0x95, 0x99, 0x9D, 0x9C, 0x9C, 0xA7, 0xA7, 0xAA, 0xB0, 0xB0, 0xB7, 0x9E, 0x9E, 
   0xA5, 0x87, 0x8A, 0x95, 0x76, 0x79, 0x87, 0x70, 0x74, 0x83, 0x98, 0xA0, 0xAC, 0xA7, 0xAF, 0xB6, 
   0xAA, 0xB1, 0xB7, 0xA8, 0xAC, 0xB7, 0x9A, 0x9C, 0xAC, 0xA0, 0xA4, 0xAF, 0xAB, 0xB1, 0xBB, 0xA5, 
   0xAD, 0xB9, 0x9C, 0xA5, 0xAF, 0x82, 0x89, 0x92, 0x4B, 0x4F, 0x57, 0x49, 0x51, 0x56, 0x5A, 0x66, 
   0x69, 0x6D, 0x7A, 0x7F, 0x73, 0x82, 0x85, 0x7F, 0x8E, 0x91, 0x9D, 0xA9, 0xAE, 0xA7, 0xB2, 0xB7, 
   0xB2, 0xB7, 0xBB, 0xA0, 0xA1, 0xA7, 0x94, 0x9B, 0xA2, 0x97, 0xA1, 0xA7, 0x84, 0x8F, 0x97, 0x94, 
   0x9F, 0xA8, 0x99, 0xA6, 0xAE, 0x9F, 0xA8, 0xB2, 0x9C, 0xA1, 0xAC, 0x97, 0x9E, 0xA9, 0x9C, 0xA2, 
   0xAD, 0x94, 0x9F, 0xA9, 0x97, 0xA2, 0xAB, 0x95, 0x9E, 0xAA, 0x89, 0x91, 0x9E, 0x7C, 0x87, 0x8F, 
   0x8B, 0x9B, 0x9F, 0x92, 0xA2, 0xA6, 0xA8, 0xB3, 0xB4, 0xA1, 0xAA, 0xAC, 0x97, 0xA5, 0xA5, 0xBC, 
   0xC6, 0xC5, 0xA9, 0xAA, 0xAE, 0x61, 0x64, 0x69, 0x5B, 0x62, 0x66, 0x77, 0x81, 0x86, 0x8B, 0x94, 
   0x9C, 0x8E, 0x97, 0xA0, 0x90, 0x98, 0x9F, 0x83, 0x8B, 0x90, 0x79, 0x85, 0x87, 0x7B, 0x82, 0x84, 
   0x79, 0x81, 0x84, 0x90, 0x9C, 0x9F, 0xA3, 0xAB, 0xB0, 0x98, 0x9C, 0xA5, 0x97, 0x9C, 0xA7, 0x98, 
   0x9C, 0xA9, 0x9C, 0xA3, 0xAF, 0xA8, 0xAE, 0xB8, 0x99, 0x94, 0x9B, 0x7B, 0x79, 0x7A, 0x73, 0x78, 
   0x7A, 0x79, 0x7B, 0x81, 0x8A, 0x87, 0x8E, 0x8F, 0x83, 0x7E, 0x78, 0x69, 0x5D, 0x7C, 0x6D, 0x62, 
   0x68, 0x5B, 0x4C, 0x6A, 0x60, 0x50, 0x8F, 0x87, 0x75, 0x92, 0x82, 0x6F, 0x74, 0x5D, 0x53, 0x52, 
   0x4D, 0x42, 0x8F, 0x93, 0x85, 0x95, 0x94, 0x87, 0x9A, 0x98, 0x90, 0x9E, 0x9A, 0x96, 0xA5, 0x9D, 
   0x97, 0xAE, 0xA7, 0x9D, 0xB8, 0xB1, 0xA3, 0xAE, 0xA7, 0x98, 0xA6, 0x9E, 0x93, 0xA0, 0x99, 0x91, 
   0xA4, 0x9B, 0x95, 0xA5, 0x9E, 0x97, 0xA4, 0x9F, 0x96, 0xA5, 0x9F, 0x95, 0xAC, 0xA6, 0x9A, 0x9A, 
   0x92, 0x8B, 0x97, 0x90, 0x8A, 0x92, 0x8D, 0x87, 0x92, 0x8C, 0x89, 0x9E, 0x98, 0x99, 0xA8, 0xA2, 
   0xA2, 0x91, 0x87, 0x86, 0x95, 0x87, 0x86, 0x93, 0x82, 0x84, 0x88, 0x78, 0x7D, 0x8F, 0x80, 0x81, 
   0x94, 0x85, 0x85, 0x92, 0x86, 0x86, 0x97, 0x8C, 0x8C, 0x9B, 0x8E, 0x8F, 0x9C, 0x8C, 0x8E, 0x9A, 
   0x89, 0x8B, 0x9E, 0x91, 0x92, 0xA1, 0x94, 0x95, 0xA2, 0x93, 0x94, 0xA5, 0x96, 0x97, 0xA9, 0x9C, 
   0x9D, 0xA0, 0x95, 0x95, 0xA0, 0x95, 0x96, 0xA7, 0x95, 0x9B, 0x82, 0x6B, 0x74, 0x3A, 0x27, 0x2C, 
   0x27, 0x23, 0x21, 0x27, 0x21, 0x1B, 0x20, 0x1E, 0x1A, 0x20, 0x1D, 0x15, 0x1B, 0x1C, 0x16, 0x18, 
   0x1D, 0x15, 0x1A, 0x1C, 0x15, 0x17, 0x1B, 0x18, 0x11, 0x1E, 0x19, 0x17, 0x23, 0x1B, 0x26, 0x2E, 
   0x28, 0x2E, 0x34, 0x31, 0x38, 0x3E, 0x3C, 0x46, 0x4B, 0x4C, 0x4F, 0x57, 0x58, 0x60, 0x68, 0x69, 
   0x75, 0x7D, 0x7F, 0x6F, 0x75, 0x74, 0x58, 0x5E, 0x60, 0x4E, 0x4F, 0x56, 0x40, 0x44, 0x48, 0x49, 
   0x53, 0x53, 0x4C, 0x51, 0x53, 0x3B, 0x46, 0x4A, 0x50, 0x5E, 0x58, 0x6F, 0x75, 0x77, 0x66, 0x65, 
   0x69, 0x5A, 0x5D, 0x60, 0x60, 0x62, 0x67, 0x68, 0x69, 0x6D, 0x6E, 0x6C, 0x71, 0x61, 0x63, 0x69, 
   0x61, 0x66, 0x6F, 0x62, 0x65, 0x74, 0x5F, 0x62, 0x6D, 0x4F, 0x50, 0x56, 0x45, 0x43, 0x4B, 0x3B, 
   0x3B, 0x41, 0x37, 0x37, 0x3A, 0x21, 0x25, 0x27, 0x29, 0x30, 0x31, 0x4D, 0x53, 0x58, 0x60, 0x61, 
   0x6D, 0x5C, 0x5B, 0x64, 0x54, 0x56, 0x59, 0x4C, 0x52, 0x58, 0x55, 0x5B, 0x63, 0x70, 0x74, 0x81, 
   0x83, 0x83, 0x97, 0x77, 0x74, 0x8C, 0x77, 0x71, 0x8A, 0x78, 0x72, 0x88, 0x7B, 0x77, 0x8A, 0x7B, 
   0x77, 0x8A, 0x7A, 0x76, 0x88, 0x71, 0x70, 0x7D, 0x63, 0x68, 0x78, 0x4E, 0x57, 0x6E, 0x43, 0x52, 
   0x6C, 0x4E, 0x59, 0x77, 0x5B, 0x6B, 0x8D, 0x62, 0x72, 0x95, 0x6F, 0x79, 0x9A, 0x82, 0x87, 0xA2, 
   0x90, 0x8D, 0xA5, 0x92, 0x8F, 0xA0, 0x8E, 0x93, 0x98, 0x95, 0x9B, 0xA2, 0xA6, 0xAB, 0xB5, 0xA7, 
   0xAE, 0xB5, 0xAF, 0xB6, 0xBC, 0xD2, 0xD6, 0xD9, 0xA5, 0xA6, 0xAA, 0x7D, 0x7A, 0x81, 0x7C, 0x77, 
   0x81, 0x6E, 0x68, 0x77, 0x59, 0x54, 0x6A, 0x58, 0x55, 0x6E, 0x59, 0x56, 0x71, 0x60, 0x62, 0x81, 
   0x63, 0x6E, 0x92, 0x62, 0x75, 0x99, 0x62, 0x76, 0x9A, 0x70, 0x7E, 0x9F, 0x84, 0x92, 0xB1, 0x7D, 
   0x83, 0xA0, 0x78, 0x7E, 0x96, 0x70, 0x70, 0x82, 0x7B, 0x7D, 0x80, 0x88, 0x89, 0x82, 0x7B, 0x7B, 
   0x70, 0x6D, 0x71, 0x67, 0x74, 0x76, 0x70, 0x7C, 0x79, 0x75, 0x79, 0x75, 0x75, 0x66, 0x69, 0x6C, 
   0x66, 0x6A, 0x6F, 0x71, 0x75, 0x7D, 0x84, 0x89, 0x94, 0x96, 0x9B, 0xA1, 0x9E, 0x9F, 0xA1, 0x9E, 
   0x99, 0x9D, 0x9F, 0x98, 0x9D, 0x9F, 0x99, 0x9F, 0x98, 0x94, 0x98, 0x95, 0x91, 0x95, 0x9A, 0x95, 
   0x99, 0x97, 0x91, 0x96, 0x85, 0x83, 0x87, 0x7D, 0x7F, 0x86, 0x92, 0x96, 0xA0, 0xA6, 0xA8, 0xAF, 
   0xA4, 0xA2, 0xA4, 0xA5, 0x9E, 0x9C, 0xA3, 0x9D, 0x9C, 0x9E, 0x9C, 0x9D, 0x92, 0x93, 0x96, 0x96, 
   0x95, 0x97, 0x94, 0x91, 0x92, 0x95, 0x93, 0x96, 0x88, 0x89, 0x8D, 0x84, 0x85, 0x89, 0x95, 0x93, 
   0x96, 0x96, 0x94, 0x96, 0x9E, 0x9D, 0x9A, 0xA7, 0xA6, 0xA1, 0xA3, 0xA1, 0x9D, 0x8E, 0x8D, 0x8C, 
   0x75, 0x77, 0x78, 0x73, 0x79, 0x78, 0x82, 0x87, 0x84, 0x84, 0x8B, 0x8D, 0x8B, 0x91, 0x93, 0x92, 
   0x96, 0x9B, 0x97, 0x9A, 0x9E, 0x9C, 0xA0, 0x9B, 0xAC, 0xAB, 0xAB, 0xA2, 0x9F, 0xA4, 0x77, 0x77, 
   0x80, 0x6D, 0x75, 0x81, 0x67, 0x6E, 0x7F, 0x75, 0x7C, 0x8C, 0xA6, 0xAF, 0xB9, 0xA6, 0xAB, 0xB3, 
   0xA8, 0xAD, 0xB4, 0xA6, 0xAC, 0xB4, 0xA8, 0xAC, 0xBA, 0xAC, 0xB0, 0xBD, 0xA8, 0xAA, 0xB9, 0xA5, 
   0xA9, 0xB4, 0x9E, 0xA6, 0xAC, 0xB0, 0xB4, 0xBE, 0x8C, 0x8C, 0x98, 0x45, 0x4C, 0x52, 0x4D, 0x58, 
   0x5E, 0x65, 0x73, 0x79, 0x6F, 0x80, 0x84, 0x80, 0x8F, 0x97, 0x8F, 0x98, 0xA2, 0x9F, 0xA8, 0xAE, 
   0xB7, 0xBE, 0xC3, 0xA2, 0xA5, 0xAB, 0x8B, 0x97, 0x9D, 0xA7, 0xB7, 0xC0, 0x9F, 0xAC, 0xB6, 0xA1, 
   0xAE, 0xB8, 0x91, 0x9F, 0xA9, 0x92, 0x9C, 0xA6, 0x99, 0x9F, 0xAA, 0x9A, 0xA1, 0xAC, 0xAB, 0xB1, 
   0xBC, 0x9F, 0xA7, 0xB1, 0x9C, 0xA6, 0xAE, 0xA1, 0xAC, 0xB6, 0xAB, 0xB7, 0xC3, 0x93, 0xA1, 0xA9, 
   0x8C, 0x9B, 0x9F, 0x9A, 0xA9, 0xAC, 0xA2, 0xAF, 0xB0, 0xB0, 0xB7, 0xBC, 0xA3, 0xAE, 0xB1, 0xA2, 
   0xAB, 0xAF, 0x92, 0x92, 0x9A, 0x68, 0x6A, 0x72, 0x79, 0x81, 0x85, 0x84, 0x8E, 0x8F, 0x82, 0x8B, 
   0x8F, 0x8A, 0x93, 0x98, 0x9A, 0xA0, 0xA3, 0xAA, 0xAC, 0xAF, 0xA1, 0xA6, 0xAA, 0x84, 0x88, 0x8F, 
   0x7C, 0x85, 0x8E, 0x8D, 0x99, 0xA0, 0x9C, 0xA4, 0xAB, 0x8E, 0x94, 0x9C, 0x97, 0xA0, 0xA7, 0xB0, 
   0xBA, 0xC1, 0xB4, 0xBA, 0xBF, 0xBE, 0xBE, 0xC5, 0x93, 0x8C, 0x93, 0x7B, 0x78, 0x7A, 0x71, 0x74, 
   0x76, 0x6F, 0x6E, 0x72, 0x74, 0x6F, 0x72, 0x6F, 0x64, 0x5A, 0x72, 0x65, 0x56, 0x7B, 0x6C, 0x60, 
   0x7F, 0x6C, 0x5E, 0x6E, 0x5C, 0x50, 0x87, 0x7B, 0x6C, 0x84, 0x74, 0x62, 0x6B, 0x58, 0x52, 0x6F, 
   0x6B, 0x65, 0x98, 0x9A, 0x91, 0x96, 0x95, 0x8E, 0xA3, 0xA0, 0x9C, 0xA3, 0x9E, 0x9E, 0xA4, 0xA0, 
   0x9C, 0xAB, 0xA5, 0x9F, 0xB5, 0xA9, 0xA5, 0xA9, 0x9C, 0x97, 0x9C, 0x92, 0x8D, 0x9A, 0x92, 0x8E, 
   0x9F, 0x95, 0x94, 0x9F, 0x97, 0x96, 0xA1, 0x9D, 0x98, 0xA9, 0xA2, 0x9C, 0xAD, 0xA4, 0x9F, 0x9F, 
   0x93, 0x92, 0x9D, 0x92, 0x92, 0x97, 0x8D, 0x8C, 0x8B, 0x84, 0x84, 0x86, 0x7D, 0x84, 0x8F, 0x85, 
   0x89, 0x87, 0x7C, 0x7E, 0x86, 0x7A, 0x7B, 0x90, 0x7F, 0x83, 0x8A, 0x75, 0x7E, 0x8E, 0x7F, 0x85, 
   0x8D, 0x81, 0x85, 0x83, 0x7A, 0x7E, 0x91, 0x8A, 0x8C, 0x94, 0x8B, 0x8E, 0x96, 0x8A, 0x8D, 0x96, 
   0x87, 0x8B, 0x9A, 0x8D, 0x8E, 0x9F, 0x8F, 0x91, 0xA1, 0x91, 0x93, 0xA2, 0x92, 0x94, 0xA1, 0x93, 
   0x95, 0x97, 0x8D, 0x8E, 0x9B, 0x92, 0x92, 0xA3, 0x90, 0x93, 0x77, 0x61, 0x6B, 0x36, 0x25, 0x28, 
   0x27, 0x22, 0x1E, 0x28, 0x20, 0x1E, 0x1F, 0x1B, 0x1D, 0x23, 0x19, 0x14, 0x1C, 0x18, 0x13, 0x14, 
   0x1A, 0x15, 0x16, 0x19, 0x16, 0x18, 0x18, 0x16, 0x0E, 0x14, 0x12, 0x1B, 0x25, 0x24, 0x2D, 0x35, 
   0x35, 0x36, 0x40, 0x40, 0x3A, 0x49, 0x45, 0x45, 0x52, 0x4B, 0x63, 0x6B, 0x64, 0x83, 0x87, 0x82, 
   0x99, 0x9E, 0x9C, 0x9F, 0xA2, 0x9E, 0x9D, 0xA3, 0xA1, 0x7C, 0x7F, 0x82, 0x66, 0x6C, 0x6D, 0x6A, 
   0x74, 0x70, 0x5C, 0x5E, 0x5B, 0x40, 0x47, 0x49, 0x56, 0x66, 0x68, 0x6C, 0x75, 0x7D, 0x68, 0x68, 
   0x6F, 0x64, 0x66, 0x69, 0x63, 0x62, 0x66, 0x58, 0x5A, 0x5C, 0x57, 0x5B, 0x5F, 0x63, 0x64, 0x6A, 
   0x6E, 0x71, 0x7A, 0x6A, 0x6A, 0x78, 0x5A, 0x5A, 0x62, 0x4A, 0x49, 0x4C, 0x40, 0x40, 0x46, 0x3B, 
   0x3F, 0x43, 0x35, 0x3C, 0x3A, 0x36, 0x3F, 0x3E, 0x59, 0x62, 0x6A, 0x74, 0x79, 0x8C, 0x6E, 0x6F, 
   0x84, 0x6D, 0x69, 0x77, 0x6E, 0x69, 0x74, 0x6E, 0x68, 0x78, 0x71, 0x69, 0x7A, 0x74, 0x6B, 0x7E, 
   0x75, 0x6A, 0x81, 0x73, 0x66, 0x80, 0x76, 0x6C, 0x82, 0x73, 0x6A, 0x80, 0x75, 0x6C, 0x83, 0x78, 
   0x6F, 0x86, 0x7B, 0x70, 0x8A, 0x7D, 0x75, 0x88, 0x7C, 0x7A, 0x89, 0x69, 0x6A, 0x7E, 0x4C, 0x55, 
   0x6B, 0x4C, 0x51, 0x69, 0x56, 0x60, 0x7C, 0x58, 0x6D, 0x8C, 0x5E, 0x6F, 0x92, 0x69, 0x77, 0x9B, 
   0x74, 0x7F, 0xA2, 0x7A, 0x86, 0xA0, 0x77, 0x79, 0x7D, 0x8A, 0x8D, 0x95, 0x99, 0x9E, 0xA6, 0x9B, 
   0xA3, 0xA9, 0xB0, 0xB7, 0xBD, 0xD3, 0xD7, 0xDD, 0xB8, 0xB9, 0xBF, 0x7E, 0x7A, 0x81, 0x7C, 0x78, 
   0x80, 0x8A, 0x82, 0x8E, 0x67, 0x62, 0x73, 0x55, 0x56, 0x6A, 0x52, 0x54, 0x6D, 0x4F, 0x52, 0x73, 
   0x5C, 0x63, 0x8B, 0x6D, 0x78, 0xA1, 0x72, 0x7B, 0xA7, 0x82, 0x8C, 0xB1, 0x8C, 0x94, 0xBA, 0x6C, 
   0x73, 0x98, 0x69, 0x73, 0x94, 0x71, 0x7A, 0x96, 0x73, 0x78, 0x89, 0x84, 0x84, 0x80, 0x8D, 0x88, 
   0x7E, 0x73, 0x72, 0x69, 0x6F, 0x71, 0x6C, 0x7B, 0x7B, 0x75, 0x7E, 0x7E, 0x79, 0x6D, 0x6F, 0x70, 
   0x6E, 0x6E, 0x73, 0x72, 0x73, 0x78, 0x76, 0x77, 0x82, 0x90, 0x91, 0x9B, 0xA0, 0x9D, 0xA2, 0xA1, 
   0x9D, 0xA1, 0xA0, 0x9D, 0xA0, 0x97, 0x94, 0x9A, 0x92, 0x8E, 0x93, 0x93, 0x8D, 0x91, 0x8E, 0x86, 
   0x89, 0x90, 0x8B, 0x8E, 0x87, 0x85, 0x88, 0x80, 0x83, 0x87, 0x8B, 0x90, 0x94, 0x9E, 0x9F, 0xA3, 
   0xA2, 0x9E, 0xA2, 0xA0, 0x9B, 0x9E, 0x97, 0x95, 0x98, 0x8E, 0x90, 0x93, 0x8D, 0x8E, 0x92, 0x93, 
   0x91, 0x93, 0x94, 0x92, 0x91, 0x9B, 0x99, 0x9A, 0x98, 0x95, 0x9A, 0x8C, 0x8A, 0x8E, 0x97, 0x95, 
   0x96, 0x91, 0x8E, 0x90, 0x9A, 0x98, 0x98, 0xA6, 0xA5, 0xA4, 0xA1, 0x9F, 0xA0, 0x99, 0x98, 0x9A, 
   0x84, 0x85, 0x85, 0x8A, 0x8C, 0x88, 0x95, 0x94, 0x96, 0x8B, 0x90, 0x92, 0x8D, 0x92, 0x94, 0x96, 
   0x98, 0x9B, 0x9D, 0xA1, 0xA2, 0xA3, 0xA4, 0xA2, 0xA6, 0xA2, 0xA2, 0x77, 0x76, 0x7E, 0x5D, 0x5F, 
   0x67, 0x5E, 0x64, 0x6E, 0x60, 0x66, 0x75, 0x82, 0x8A, 0x9A, 0xA4, 0xAD, 0xB8, 0x9E, 0xA3, 0xAF, 
   0x9F, 0xA3, 0xAD, 0xA2, 0xA8, 0xB0, 0xA5, 0xAC, 0xB6, 0xA3, 0xAA, 0xB6, 0x8B, 0x92, 0xA1, 0x97, 
   0x9D, 0xA9, 0x94, 0x9C, 0xA2, 0x96, 0x9C, 0xA5, 0x96, 0x9A, 0xA5, 0x80, 0x87, 0x8D, 0x5F, 0x68, 
   0x6F, 0x63, 0x6D, 0x75, 0x71, 0x7B, 0x82, 0x77, 0x87, 0x8F, 0x86, 0x94, 0x9B, 0x9B, 0xA6, 0xAD, 
   0xB0, 0xB9, 0xC1, 0xAA, 0xB0, 0xB7, 0x92, 0x99, 0xA0, 0xA6, 0xB1, 0xB8, 0xC5, 0xCC, 0xD4, 0xB0, 
   0xB7, 0xBF, 0x90, 0x9E, 0xA5, 0x97, 0xA4, 0xAE, 0xAC, 0xB7, 0xC2, 0x9F, 0xA8, 0xB6, 0x99, 0x9D, 
   0xAC, 0x9B, 0xA2, 0xAA, 0x9A, 0xA3, 0xA9, 0xA0, 0xAB, 0xB4, 0xA9, 0xB6, 0xBF, 0xA7, 0xB1, 0xBA, 
   0x91, 0x9A, 0xA0, 0xA5, 0xAF, 0xB6, 0xAB, 0xB9, 0xBD, 0xC0, 0xC8, 0xCE, 0xB0, 0xB8, 0xBE, 0x9E, 
   0xA6, 0xAE, 0x81, 0x84, 0x91, 0x74, 0x77, 0x81, 0x9A, 0x9E, 0xA1, 0x99, 0x9C, 0x9C, 0x86, 0x8D, 
   0x90, 0x89, 0x95, 0x96, 0xA7, 0xB1, 0xB2, 0x99, 0x9B, 0x9E, 0x8E, 0x8E, 0x94, 0x89, 0x8A, 0x91, 
   0x8D, 0x93, 0x99, 0x9F, 0xA6, 0xAD, 0x96, 0x9B, 0xA3, 0x86, 0x8E, 0x94, 0x92, 0x9F, 0xA2, 0xB4, 
   0xC1, 0xC2, 0xBA, 0xC3, 0xC3, 0xC7, 0xCC, 0xCE, 0xA1, 0x9F, 0xA3, 0x82, 0x83, 0x85, 0x76, 0x78, 
   0x7B, 0x68, 0x63, 0x66, 0x5E, 0x5A, 0x59, 0x56, 0x4F, 0x46, 0x6C, 0x62, 0x51, 0x7C, 0x6B, 0x5D, 
   0x8E, 0x78, 0x6B, 0x71, 0x5B, 0x52, 0x6D, 0x5F, 0x54, 0x79, 0x6A, 0x5D, 0x5A, 0x4E, 0x4B, 0x64, 
   0x64, 0x62, 0x88, 0x8B, 0x86, 0x92, 0x92, 0x8C, 0x9D, 0x95, 0x95, 0xA3, 0x97, 0x9B, 0x9F, 0x96, 
   0x96, 0x9B, 0x94, 0x92, 0x9A, 0x8C, 0x8F, 0x8F, 0x7F, 0x82, 0x8A, 0x7F, 0x7D, 0x8A, 0x80, 0x7D, 
   0x93, 0x89, 0x88, 0x97, 0x8C, 0x8E, 0xA2, 0x97, 0x98, 0xAA, 0xA0, 0x9D, 0xA7, 0x9D, 0x9A, 0xA0, 
   0x96, 0x94, 0x9C, 0x91, 0x93, 0x95, 0x8A, 0x8C, 0x89, 0x81, 0x83, 0x7A, 0x71, 0x73, 0x84, 0x78, 
   0x7D, 0x88, 0x7D, 0x80, 0x83, 0x7A, 0x79, 0x89, 0x7C, 0x7C, 0x87, 0x74, 0x78, 0x86, 0x79, 0x7D, 
   0x86, 0x7B, 0x7F, 0x89, 0x7E, 0x83, 0x91, 0x89, 0x8C, 0x95, 0x8D, 0x8F, 0x96, 0x90, 0x90, 0x96, 
   0x91, 0x91, 0x98, 0x8C, 0x8D, 0x9D, 0x90, 0x91, 0x9D, 0x91, 0x92, 0x98, 0x8B, 0x8C, 0x96, 0x8B, 
   0x8C, 0x95, 0x8B, 0x8C, 0x97, 0x8C, 0x8E, 0x9B, 0x89, 0x8E, 0x76, 0x62, 0x6E, 0x33, 0x26, 0x2A, 
   0x24, 0x20, 0x1B, 0x25, 0x20, 0x1D, 0x1F, 0x1C, 0x1C, 0x20, 0x1B, 0x15, 0x1A, 0x1C, 0x15, 0x19, 
   0x1B, 0x17, 0x12, 0x14, 0x11, 0x10, 0x14, 0x11, 0x2A, 0x33, 0x32, 0x44, 0x49, 0x4F, 0x45, 0x46, 
   0x4C, 0x48, 0x4E, 0x4F, 0x54, 0x62, 0x5E, 0x72, 0x7F, 0x77, 0x83, 0x86, 0x80, 0x8D, 0x8A, 0x86, 
   0x96, 0x93, 0x92, 0x9A, 0x98, 0x95, 0xAB, 0xAA, 0xA5, 0x9A, 0x95, 0x95, 0x6C, 0x6B, 0x6B, 0x6D, 
   0x75, 0x70, 0x77, 0x7D, 0x79, 0x64, 0x6A, 0x6A, 0x62, 0x71, 0x78, 0x65, 0x72, 0x7F, 0x65, 0x69, 
   0x72, 0x6A, 0x6C, 0x71, 0x73, 0x6E, 0x75, 0x66, 0x64, 0x6B, 0x5E, 0x60, 0x67, 0x66, 0x69, 0x70, 
   0x65, 0x67, 0x6F, 0x59, 0x58, 0x62, 0x4A, 0x4A, 0x4D, 0x42, 0x43, 0x45, 0x39, 0x39, 0x41, 0x2E, 
   0x34, 0x38, 0x41, 0x4E, 0x50, 0x6A, 0x70, 0x73, 0x73, 0x6F, 0x7D, 0x75, 0x6B, 0x82, 0x70, 0x68, 
   0x7B, 0x71, 0x6A, 0x79, 0x72, 0x6A, 0x79, 0x73, 0x68, 0x7A, 0x75, 0x69, 0x7B, 0x75, 0x69, 0x7D, 
   0x73, 0x69, 0x80, 0x74, 0x6C, 0x7E, 0x77, 0x71, 0x82, 0x75, 0x6E, 0x80, 0x78, 0x6D, 0x81, 0x7B, 
   0x70, 0x85, 0x79, 0x70, 0x88, 0x76, 0x70, 0x84, 0x7E, 0x7A, 0x87, 0x80, 0x79, 0x8A, 0x60, 0x5E, 
   0x74, 0x49, 0x54, 0x69, 0x45, 0x55, 0x6D, 0x52, 0x62, 0x7D, 0x59, 0x66, 0x85, 0x61, 0x72, 0x91, 
   0x66, 0x76, 0x93, 0x6C, 0x7D, 0x96, 0x47, 0x4B, 0x50, 0x69, 0x6D, 0x72, 0x9F, 0xA3, 0xA7, 0xA7, 
   0xAB, 0xB0, 0xAF, 0xB4, 0xBB, 0xC7, 0xCA, 0xD1, 0xBB, 0xBB, 0xC3, 0x7B, 0x79, 0x81, 0x73, 0x73, 
   0x79, 0x7C, 0x77, 0x81, 0x68, 0x62, 0x74, 0x55, 0x56, 0x6E, 0x51, 0x50, 0x6B, 0x58, 0x54, 0x76, 
   0x66, 0x63, 0x8B, 0x6F, 0x6D, 0x98, 0x72, 0x6E, 0x9C, 0x74, 0x7A, 0xA5, 0x74, 0x7D, 0xAC, 0x71, 
   0x80, 0xA9, 0x6F, 0x7D, 0xA2, 0x73, 0x80, 0xA1, 0x78, 0x84, 0x92, 0x82, 0x83, 0x81, 0x91, 0x89, 
   0x82, 0x78, 0x74, 0x6C, 0x6B, 0x6C, 0x67, 0x79, 0x7B, 0x72, 0x7E, 0x81, 0x78, 0x75, 0x74, 0x73, 
   0x6C, 0x6F, 0x6F, 0x79, 0x7A, 0x78, 0x71, 0x71, 0x74, 0x7D, 0x7C, 0x83, 0x9C, 0x96, 0x9D, 0x99, 
   0x92, 0x99, 0x96, 0x93, 0x99, 0x92, 0x90, 0x97, 0x90, 0x8C, 0x91, 0x92, 0x8D, 0x90, 0x92, 0x8F, 
   0x90, 0x92, 0x91, 0x92, 0x95, 0x93, 0x96, 0x90, 0x8F, 0x92, 0x8E, 0x8F, 0x91, 0x9B, 0x9B, 0x9E, 
   0x98, 0x97, 0x9D, 0x8C, 0x8D, 0x93, 0x87, 0x89, 0x8F, 0x8D, 0x8E, 0x92, 0x8B, 0x89, 0x8E, 0x95, 
   0x93, 0x95, 0x9C, 0x9E, 0x9C, 0x99, 0x9A, 0x9A, 0x9A, 0x95, 0x9A, 0x97, 0x95, 0x99, 0x9C, 0x9C, 
   0x9B, 0x95, 0x93, 0x96, 0x9B, 0x9A, 0x9C, 0xA0, 0x9F, 0x9E, 0x9E, 0x9F, 0x9E, 0x95, 0x95, 0x97, 
   0x84, 0x86, 0x87, 0x8A, 0x8E, 0x8D, 0x95, 0x96, 0x98, 0x90, 0x94, 0x94, 0x92, 0x96, 0x98, 0x99, 
   0x9D, 0x9E, 0xAA, 0xA8, 0xAA, 0xAC, 0xA5, 0xA9, 0x60, 0x57, 0x5A, 0x3A, 0x3B, 0x42, 0x4D, 0x50, 
   0x58, 0x5A, 0x5D, 0x65, 0x65, 0x6B, 0x79, 0x7F, 0x87, 0x96, 0x8F, 0x99, 0xA3, 0x8E, 0x97, 0xA2, 
   0x8F, 0x97, 0xA0, 0x8E, 0x98, 0xA2, 0x92, 0x96, 0xA4, 0x90, 0x96, 0xA3, 0x8E, 0x98, 0xA6, 0x92, 
   0x9B, 0xA9, 0x8D, 0x92, 0x9B, 0x9C, 0x9F, 0xAA, 0xA2, 0xA8, 0xB4, 0xA5, 0xAD, 0xB3, 0x6E, 0x75, 
   0x7D, 0x70, 0x79, 0x7F, 0x74, 0x7B, 0x85, 0x7D, 0x88, 0x92, 0x98, 0xA5, 0xAB, 0x98, 0xA1, 0xA7, 
   0xA0, 0xAA, 0xB3, 0xB0, 0xBB, 0xC0, 0xAF, 0xB6, 0xBA, 0xAE, 0xB4, 0xBA, 0xBA, 0xC0, 0xC7, 0xB8, 
   0xBC, 0xC3, 0xA2, 0xAD, 0xB5, 0xA2, 0xAF, 0xB7, 0xB3, 0xC0, 0xCA, 0xA5, 0xB0, 0xBB, 0xA0, 0xA4, 
   0xB2, 0x93, 0xA0, 0xA7, 0x96, 0xA0, 0xA8, 0x9E, 0xAC, 0xB2, 0xB6, 0xC5, 0xCA, 0xBD, 0xC8, 0xCF, 
   0x9E, 0xA6, 0xAF, 0x9F, 0xAB, 0xB2, 0xC0, 0xD0, 0xD5, 0xC1, 0xC9, 0xD0, 0xAE, 0xB3, 0xBA, 0x98, 
   0x9F, 0xA9, 0x67, 0x6E, 0x7A, 0x73, 0x79, 0x82, 0x90, 0x94, 0x97, 0x8F, 0x92, 0x96, 0x88, 0x8D, 
   0x94, 0x8B, 0x92, 0x9A, 0x9F, 0xA4, 0xAA, 0x90, 0x92, 0x96, 0x81, 0x85, 0x8A, 0x8B, 0x90, 0x92, 
   0x8B, 0x91, 0x93, 0x8B, 0x8F, 0x96, 0x8E, 0x92, 0x9E, 0x8D, 0x95, 0xA0, 0xA1, 0xAD, 0xB4, 0xB5, 
   0xBE, 0xC1, 0xB3, 0xBB, 0xBE, 0xB7, 0xBD, 0xC3, 0xA8, 0xA8, 0xAF, 0x89, 0x89, 0x8F, 0x7A, 0x7A, 
   0x81, 0x6A, 0x64, 0x6D, 0x5D, 0x5C, 0x62, 0x56, 0x55, 0x50, 0x60, 0x56, 0x48, 0x65, 0x55, 0x46, 
   0x7D, 0x6A, 0x5C, 0x6A, 0x5A, 0x50, 0x65, 0x5A, 0x4F, 0x71, 0x63, 0x56, 0x50, 0x41, 0x3F, 0x3B, 
   0x3A, 0x37, 0x7D, 0x7E, 0x79, 0x95, 0x91, 0x8C, 0x95, 0x8D, 0x8D, 0x99, 0x8E, 0x91, 0x9D, 0x93, 
   0x96, 0xA2, 0x95, 0x9A, 0x96, 0x87, 0x8C, 0x8A, 0x7E, 0x81, 0x7F, 0x76, 0x77, 0x88, 0x7D, 0x7C, 
   0x8C, 0x80, 0x7E, 0x8B, 0x7E, 0x7C, 0x98, 0x8A, 0x88, 0xA6, 0x9B, 0x99, 0xAA, 0x9F, 0xA1, 0x94, 
   0x8B, 0x8C, 0x93, 0x8A, 0x8E, 0x8A, 0x81, 0x84, 0x87, 0x7E, 0x7F, 0x83, 0x78, 0x7B, 0x78, 0x6F, 
   0x73, 0x7E, 0x74, 0x78, 0x7F, 0x75, 0x75, 0x84, 0x78, 0x77, 0x89, 0x7C, 0x7C, 0x88, 0x7C, 0x7E, 
   0x86, 0x7C, 0x7D, 0x85, 0x7C, 0x7D, 0x87, 0x7F, 0x80, 0x8E, 0x86, 0x88, 0x95, 0x8D, 0x8F, 0x97, 
   0x8F, 0x91, 0xA5, 0x98, 0x9A, 0x9E, 0x93, 0x94, 0x9C, 0x91, 0x93, 0x9A, 0x91, 0x92, 0x97, 0x8D, 
   0x8E, 0x91, 0x87, 0x88, 0x91, 0x86, 0x88, 0x96, 0x86, 0x90, 0x6B, 0x56, 0x5F, 0x2F, 0x25, 0x2A, 
   0x22, 0x21, 0x1D, 0x20, 0x20, 0x1B, 0x17, 0x1A, 0x14, 0x14, 0x18, 0x15, 0x19, 0x1C, 0x1B, 0x20, 
   0x22, 0x1F, 0x31, 0x34, 0x2E, 0x45, 0x4C, 0x47, 0x4A, 0x53, 0x50, 0x53, 0x5A, 0x59, 0x6A, 0x6E, 
   0x6C, 0x77, 0x7D, 0x78, 0x88, 0x8E, 0x89, 0x89, 0x8E, 0x89, 0x8B, 0x8C, 0x88, 0x94, 0x91, 0x8E, 
   0x97, 0x91, 0x90, 0x95, 0x92, 0x90, 0x97, 0x94, 0x91, 0x9F, 0x96, 0x95, 0x8C, 0x81, 0x82, 0x67, 
   0x61, 0x62, 0x6B, 0x6D, 0x6A, 0x6E, 0x71, 0x71, 0x68, 0x71, 0x71, 0x60, 0x6D, 0x73, 0x5F, 0x65, 
   0x6D, 0x64, 0x64, 0x6B, 0x63, 0x5E, 0x68, 0x58, 0x56, 0x61, 0x54, 0x51, 0x5E, 0x4E, 0x52, 0x5B, 
   0x4C, 0x4E, 0x57, 0x49, 0x4A, 0x53, 0x44, 0x49, 0x4D, 0x3E, 0x44, 0x49, 0x30, 0x33, 0x3C, 0x43, 
   0x48, 0x4D, 0x6E, 0x76, 0x7D, 0x7E, 0x7E, 0x8A, 0x77, 0x71, 0x81, 0x7D, 0x75, 0x88, 0x83, 0x7E, 
   0x90, 0x78, 0x75, 0x84, 0x74, 0x6E, 0x7D, 0x76, 0x6B, 0x7D, 0x73, 0x6A, 0x7C, 0x6D, 0x68, 0x7B, 
   0x71, 0x6D, 0x7F, 0x81, 0x7B, 0x8A, 0x81, 0x7A, 0x89, 0x76, 0x6F, 0x81, 0x79, 0x71, 0x81, 0x85, 
   0x79, 0x87, 0x7E, 0x71, 0x83, 0x75, 0x6D, 0x7F, 0x72, 0x6E, 0x7A, 0x7C, 0x74, 0x83, 0x59, 0x54, 
   0x6D, 0x3B, 0x47, 0x5E, 0x3E, 0x4E, 0x64, 0x51, 0x5D, 0x75, 0x52, 0x5D, 0x76, 0x55, 0x61, 0x79, 
   0x60, 0x69, 0x7E, 0x6A, 0x75, 0x86, 0x53, 0x58, 0x5F, 0x36, 0x39, 0x3D, 0x71, 0x73, 0x76, 0x9B, 
   0x9E, 0xA3, 0xA3, 0xA7, 0xAF, 0x9D, 0x9E, 0xA9, 0x9C, 0x9E, 0xA6, 0x76, 0x77, 0x7F, 0x6A, 0x6C, 
   0x72, 0x61, 0x62, 0x6E, 0x58, 0x5B, 0x71, 0x50, 0x56, 0x72, 0x54, 0x55, 0x72, 0x63, 0x60, 0x7E, 
   0x6C, 0x68, 0x8A, 0x6D, 0x6A, 0x92, 0x6F, 0x6A, 0x98, 0x6A, 0x6F, 0xA2, 0x6D, 0x79, 0xAC, 0x7E, 
   0x8F, 0xB9, 0x73, 0x80, 0xA8, 0x72, 0x7F, 0xA2, 0x76, 0x83, 0x93, 0x7B, 0x7E, 0x7F, 0x95, 0x91, 
   0x8A, 0x84, 0x81, 0x7B, 0x6B, 0x6B, 0x65, 0x72, 0x74, 0x6A, 0x77, 0x7C, 0x70, 0x77, 0x76, 0x72, 
   0x73, 0x72, 0x6E, 0x78, 0x78, 0x70, 0x71, 0x6F, 0x6E, 0x72, 0x70, 0x75, 0x84, 0x83, 0x88, 0x8A, 
   0x89, 0x8F, 0x87, 0x86, 0x8D, 0x87, 0x84, 0x8A, 0x82, 0x80, 0x84, 0x8E, 0x8C, 0x8F, 0x9B, 0x9A, 
   0x9A, 0x9C, 0x99, 0x99, 0x9E, 0x9C, 0x9C, 0x8C, 0x8C, 0x8D, 0x85, 0x87, 0x88, 0x95, 0x96, 0x9A, 
   0x96, 0x96, 0x9C, 0x95, 0x98, 0x9E, 0x98, 0x9A, 0xA0, 0xA0, 0x9F, 0xA3, 0x8D, 0x8D, 0x91, 0x8C, 
   0x8F, 0x90, 0x99, 0x9E, 0x9D, 0xA0, 0xA1, 0xA2, 0x9E, 0x9A, 0x9E, 0x9B, 0x9B, 0x9C, 0x9D, 0x9F, 
   0x9C, 0x98, 0x96, 0x9A, 0x9B, 0x9B, 0x9E, 0x9E, 0x9E, 0x9D, 0xA4, 0xA3, 0xA0, 0x9F, 0x9E, 0x9F, 
   0x85, 0x85, 0x89, 0x85, 0x86, 0x89, 0x88, 0x8C, 0x8C, 0x8E, 0x92, 0x91, 0x8D, 0x94, 0x96, 0x96, 
   0x9C, 0x9C, 0xAD, 0xAA, 0xAE, 0x84, 0x79, 0x80, 0x20, 0x18, 0x1E, 0x1A, 0x1C, 0x22, 0x32, 0x36, 
   0x3F, 0x48, 0x4D, 0x55, 0x60, 0x68, 0x73, 0x7A, 0x81, 0x8E, 0x9D, 0xA4, 0xAD, 0x94, 0x9F, 0xA7, 
   0x8C, 0x9B, 0xA5, 0x82, 0x90, 0x9E, 0x87, 0x8D, 0x9D, 0x88, 0x8D, 0x9B, 0x92, 0x9F, 0xA9, 0x9B, 
   0xA6, 0xB2, 0xA1, 0xA3, 0xB0, 0xA3, 0xA6, 0xB2, 0x9F, 0xA6, 0xB0, 0x98, 0x9D, 0xA3, 0x72, 0x77, 
   0x7E, 0x73, 0x7B, 0x81, 0x77, 0x80, 0x89, 0x86, 0x8C, 0x95, 0x93, 0x9B, 0xA2, 0x95, 0x9E, 0xA3, 
   0x9B, 0xA7, 0xAC, 0xAF, 0xBC, 0xBE, 0xB5, 0xBE, 0xC0, 0xB5, 0xBC, 0xC3, 0xB9, 0xC2, 0xCA, 0xAD, 
   0xB4, 0xBD, 0xA4, 0xAD, 0xB6, 0xB5, 0xBF, 0xC8, 0xC0, 0xCB, 0xD4, 0xB4, 0xBF, 0xC8, 0x9F, 0xA6, 
   0xAF, 0x9B, 0xA9, 0xB0, 0xB0, 0xBB, 0xC5, 0xB0, 0xBC, 0xC4, 0xB3, 0xC1, 0xC8, 0xBA, 0xC4, 0xCD, 
   0x9F, 0xA7, 0xAF, 0x9B, 0xAA, 0xB1, 0xBB, 0xCB, 0xD1, 0xAF, 0xB7, 0xBD, 0xA2, 0xA6, 0xAE, 0x83, 
   0x8A, 0x94, 0x61, 0x6C, 0x76, 0x6A, 0x75, 0x7B, 0x77, 0x80, 0x83, 0x7C, 0x86, 0x8D, 0x81, 0x88, 
   0x91, 0x8D, 0x91, 0x9B, 0x9E, 0xA0, 0xA7, 0x95, 0x97, 0x9D, 0x82, 0x8B, 0x8D, 0x87, 0x8E, 0x91, 
   0x88, 0x8B, 0x91, 0x8B, 0x8E, 0x97, 0x8E, 0x94, 0xA2, 0x90, 0x9E, 0xA9, 0xA2, 0xB2, 0xB9, 0xB4, 
   0xC1, 0xC4, 0xBA, 0xBE, 0xC5, 0xB0, 0xB1, 0xB9, 0xAA, 0xA9, 0xB1, 0x8F, 0x8F, 0x95, 0x78, 0x77, 
   0x7D, 0x68, 0x67, 0x6E, 0x67, 0x6B, 0x6F, 0x6D, 0x70, 0x6C, 0x61, 0x57, 0x4B, 0x68, 0x5A, 0x4B, 
   0x87, 0x79, 0x67, 0x83, 0x75, 0x68, 0x72, 0x67, 0x5C, 0x6C, 0x5A, 0x4E, 0x50, 0x3E, 0x38, 0x28, 
   0x22, 0x1E, 0x69, 0x69, 0x64, 0x99, 0x93, 0x90, 0x99, 0x90, 0x92, 0x94, 0x89, 0x8C, 0x90, 0x87, 
   0x8A, 0x8E, 0x84, 0x8C, 0x8C, 0x82, 0x87, 0x88, 0x7F, 0x82, 0x82, 0x78, 0x7C, 0x89, 0x7C, 0x82, 
   0x8D, 0x80, 0x84, 0x91, 0x83, 0x84, 0x99, 0x8B, 0x89, 0xA7, 0x9A, 0x9A, 0xAE, 0xA1, 0xA7, 0x97, 
   0x8B, 0x90, 0x89, 0x7C, 0x81, 0x7E, 0x70, 0x76, 0x7C, 0x6E, 0x73, 0x7A, 0x6E, 0x74, 0x70, 0x67, 
   0x6E, 0x73, 0x6B, 0x71, 0x78, 0x6C, 0x72, 0x7C, 0x6E, 0x73, 0x79, 0x6F, 0x73, 0x7B, 0x71, 0x75, 
   0x7C, 0x73, 0x76, 0x7E, 0x76, 0x79, 0x80, 0x7A, 0x7E, 0x82, 0x7C, 0x80, 0x90, 0x85, 0x8A, 0x98, 
   0x87, 0x8D, 0x99, 0x8C, 0x8F, 0x97, 0x8A, 0x8F, 0x96, 0x8B, 0x90, 0x94, 0x8D, 0x8F, 0x94, 0x8B, 
   0x8D, 0x90, 0x83, 0x87, 0x8E, 0x80, 0x86, 0x88, 0x78, 0x83, 0x50, 0x3E, 0x44, 0x27, 0x21, 0x26, 
   0x1F, 0x20, 0x22, 0x1A, 0x1E, 0x1D, 0x13, 0x1B, 0x16, 0x1F, 0x27, 0x29, 0x39, 0x3A, 0x3E, 0x45, 
   0x4A, 0x49, 0x50, 0x56, 0x53, 0x5C, 0x61, 0x5E, 0x6D, 0x70, 0x6B, 0x7D, 0x81, 0x7C, 0x8B, 0x8F, 
   0x8A, 0x8C, 0x8C, 0x89, 0x93, 0x8E, 0x8D, 0x92, 0x8B, 0x8C, 0x95, 0x8D, 0x8E, 0x9B, 0x92, 0x93, 
   0x9C, 0x92, 0x92, 0x97, 0x90, 0x90, 0x99, 0x94, 0x92, 0xA1, 0x9B, 0x97, 0xA1, 0x95, 0x96, 0x7A, 
   0x6D, 0x6F, 0x6A, 0x65, 0x66, 0x6A, 0x6A, 0x6D, 0x6E, 0x6F, 0x6E, 0x66, 0x6C, 0x71, 0x61, 0x65, 
   0x6C, 0x5E, 0x5E, 0x68, 0x5D, 0x5A, 0x69, 0x5E, 0x5B, 0x69, 0x5B, 0x56, 0x66, 0x52, 0x53, 0x5F, 
   0x4B, 0x4C, 0x57, 0x47, 0x49, 0x52, 0x44, 0x4A, 0x50, 0x40, 0x47, 0x4D, 0x3F, 0x45, 0x4C, 0x60, 
   0x61, 0x67, 0x76, 0x74, 0x7D, 0x76, 0x6E, 0x7F, 0x76, 0x68, 0x7D, 0x7D, 0x72, 0x87, 0x84, 0x7E, 
   0x91, 0x77, 0x71, 0x80, 0x71, 0x67, 0x75, 0x72, 0x64, 0x75, 0x69, 0x5F, 0x70, 0x5D, 0x5D, 0x6D, 
   0x6B, 0x6F, 0x79, 0x82, 0x7E, 0x87, 0x7F, 0x77, 0x83, 0x70, 0x6B, 0x7A, 0x70, 0x6C, 0x7B, 0x7A, 
   0x71, 0x7D, 0x7B, 0x6D, 0x7D, 0x77, 0x6B, 0x7D, 0x70, 0x69, 0x78, 0x6D, 0x65, 0x78, 0x4F, 0x47, 
   0x5D, 0x38, 0x3D, 0x50, 0x34, 0x40, 0x50, 0x37, 0x44, 0x55, 0x3D, 0x48, 0x5C, 0x44, 0x4D, 0x63, 
   0x4C, 0x52, 0x69, 0x59, 0x59, 0x6F, 0x69, 0x71, 0x79, 0x33, 0x36, 0x3C, 0x31, 0x35, 0x37, 0x71, 
   0x77, 0x7A, 0xA5, 0xAB, 0xB2, 0xA0, 0xA4, 0xAF, 0x99, 0x9C, 0xA2, 0x7A, 0x7E, 0x86, 0x6C, 0x6A, 
   0x75, 0x61, 0x5F, 0x6E, 0x5A, 0x5C, 0x70, 0x56, 0x5A, 0x75, 0x5C, 0x5D, 0x7D, 0x69, 0x67, 0x86, 
   0x6C, 0x6A, 0x89, 0x6A, 0x68, 0x8E, 0x69, 0x6B, 0x96, 0x65, 0x6E, 0x9F, 0x6C, 0x7C, 0xAC, 0x82, 
   0x93, 0xBD, 0x6B, 0x7A, 0xA3, 0x62, 0x6F, 0x94, 0x66, 0x73, 0x8E, 0x67, 0x69, 0x73, 0x9C, 0x9B, 
   0x97, 0xA1, 0xA1, 0x9A, 0x7B, 0x7E, 0x72, 0x68, 0x6C, 0x61, 0x6D, 0x76, 0x6B, 0x78, 0x7A, 0x73, 
   0x78, 0x77, 0x6E, 0x73, 0x74, 0x69, 0x6A, 0x67, 0x64, 0x6C, 0x6C, 0x70, 0x77, 0x7E, 0x80, 0x87, 
   0x8D, 0x8E, 0x80, 0x82, 0x86, 0x80, 0x80, 0x85, 0x80, 0x82, 0x84, 0x94, 0x91, 0x97, 0x9F, 0x9A, 
   0x9E, 0x95, 0x8F, 0x93, 0x8A, 0x86, 0x86, 0x83, 0x83, 0x85, 0x87, 0x8B, 0x8B, 0x9C, 0xA0, 0xA0, 
   0x9D, 0x9E, 0x9F, 0xA0, 0x9F, 0xA1, 0xA2, 0xA0, 0xA4, 0xA4, 0xA3, 0xA8, 0x90, 0x95, 0x99, 0x7F, 
   0x88, 0x8A, 0x8F, 0x95, 0x98, 0x9A, 0x98, 0x9B, 0x96, 0x94, 0x96, 0x9B, 0x9B, 0x9A, 0x9D, 0x9C, 
   0x99, 0x99, 0x98, 0x98, 0x8F, 0x90, 0x94, 0x96, 0x96, 0x96, 0xA6, 0xA4, 0x9F, 0xAB, 0xA9, 0xA9, 
   0x97, 0x96, 0x9D, 0x90, 0x90, 0x95, 0x8D, 0x92, 0x91, 0x8F, 0x93, 0x93, 0x90, 0x96, 0x98, 0x9A, 
   0x9E, 0x9E, 0x97, 0x95, 0x9D, 0x44, 0x3E, 0x46, 0x26, 0x29, 0x30, 0x20, 0x26, 0x2F, 0x1C, 0x26, 
   0x30, 0x1F, 0x2C, 0x34, 0x3F, 0x4B, 0x51, 0x6C, 0x74, 0x7E, 0xA8, 0xAC, 0xB8, 0x8F, 0x96, 0xA1, 
   0x7F, 0x8E, 0x9E, 0x76, 0x86, 0x94, 0x87, 0x90, 0x9A, 0x8F, 0x94, 0xA0, 0x97, 0xA1, 0xAB, 0x95, 
   0xA2, 0xAC, 0x94, 0x9B, 0xAA, 0x93, 0x99, 0xA6, 0x9D, 0xA3, 0xAB, 0x76, 0x77, 0x7E, 0x6F, 0x73, 
   0x79, 0x75, 0x7A, 0x81, 0x82, 0x8C, 0x8F, 0x8B, 0x94, 0x99, 0x80, 0x8C, 0x92, 0x80, 0x90, 0x96, 
   0x93, 0xA0, 0xA5, 0xA6, 0xB1, 0xB4, 0xB0, 0xBA, 0xBE, 0xBF, 0xC4, 0xCE, 0xBD, 0xC6, 0xCC, 0xA8, 
   0xB1, 0xB8, 0xAD, 0xB6, 0xBE, 0xBE, 0xC7, 0xD2, 0xC3, 0xCC, 0xD8, 0xBA, 0xC3, 0xCE, 0xAA, 0xB4, 
   0xBE, 0x9C, 0xAA, 0xB2, 0xA7, 0xB7, 0xC1, 0xB5, 0xC4, 0xCE, 0xBC, 0xCC, 0xD7, 0xBC, 0xC8, 0xD3, 
   0x96, 0xA1, 0xA6, 0x8E, 0xA0, 0xA5, 0xA4, 0xAE, 0xB5, 0x9E, 0xA4, 0xAB, 0x8F, 0x97, 0xA0, 0x76, 
   0x80, 0x89, 0x6D, 0x7B, 0x83, 0x6E, 0x7D, 0x84, 0x6D, 0x78, 0x7D, 0x75, 0x7D, 0x84, 0x7E, 0x85, 
   0x8C, 0x86, 0x8A, 0x90, 0x95, 0x98, 0x9D, 0x94, 0x9A, 0xA0, 0x7E, 0x8A, 0x8D, 0x7B, 0x87, 0x8C, 
   0x81, 0x8B, 0x91, 0x8A, 0x95, 0x9B, 0x98, 0xA6, 0xAD, 0xA0, 0xAE, 0xB5, 0xAE, 0xB8, 0xBF, 0xBE, 
   0xC3, 0xC7, 0xBA, 0xBD, 0xC4, 0xA5, 0xA6, 0xAB, 0xA5, 0xA8, 0xAD, 0x96, 0x99, 0x9E, 0x7C, 0x7F, 
   0x82, 0x7B, 0x80, 0x83, 0x84, 0x87, 0x88, 0x84, 0x81, 0x7C, 0x67, 0x58, 0x4C, 0x73, 0x65, 0x54, 
   0x97, 0x8B, 0x75, 0xA3, 0x94, 0x82, 0x7F, 0x72, 0x67, 0x5F, 0x4F, 0x42, 0x54, 0x46, 0x3D, 0x2E, 
   0x24, 0x20, 0x57, 0x59, 0x57, 0x96, 0x90, 0x91, 0x9B, 0x8E, 0x95, 0x92, 0x86, 0x89, 0x8B, 0x84, 
   0x84, 0x85, 0x83, 0x86, 0x8A, 0x85, 0x88, 0x8A, 0x81, 0x83, 0x84, 0x77, 0x7B, 0x89, 0x7D, 0x82, 
   0x91, 0x86, 0x8D, 0x99, 0x8A, 0x90, 0x9A, 0x8B, 0x8C, 0x9E, 0x93, 0x93, 0xA2, 0x96, 0x9B, 0x9C, 
   0x8D, 0x92, 0x89, 0x7A, 0x7C, 0x75, 0x65, 0x6A, 0x79, 0x6A, 0x6F, 0x7E, 0x70, 0x73, 0x7A, 0x6F, 
   0x73, 0x76, 0x6F, 0x72, 0x76, 0x6A, 0x70, 0x79, 0x6C, 0x72, 0x76, 0x6E, 0x74, 0x75, 0x6F, 0x73, 
   0x81, 0x79, 0x7C, 0x9E, 0x94, 0x96, 0x90, 0x84, 0x87, 0x83, 0x78, 0x7C, 0x8D, 0x82, 0x86, 0x98, 
   0x86, 0x8A, 0x96, 0x86, 0x87, 0x92, 0x82, 0x89, 0x96, 0x88, 0x8E, 0x95, 0x8D, 0x8F, 0x98, 0x8D, 
   0x90, 0x92, 0x7F, 0x87, 0x8C, 0x7B, 0x85, 0x7C, 0x67, 0x76, 0x37, 0x2A, 0x30, 0x1A, 0x1B, 0x1F, 
   0x19, 0x21, 0x26, 0x2B, 0x36, 0x39, 0x43, 0x4F, 0x4E, 0x61, 0x68, 0x69, 0x73, 0x75, 0x75, 0x71, 
   0x73, 0x73, 0x70, 0x72, 0x76, 0x7B, 0x7E, 0x82, 0x92, 0x95, 0x95, 0x94, 0x93, 0x94, 0x91, 0x8E, 
   0x90, 0x8F, 0x8C, 0x8E, 0x95, 0x91, 0x93, 0x99, 0x93, 0x93, 0x9B, 0x92, 0x92, 0x96, 0x8C, 0x8C, 
   0x97, 0x8E, 0x8C, 0x97, 0x8F, 0x8E, 0x9C, 0x92, 0x92, 0x9D, 0x96, 0x95, 0x98, 0x91, 0x91, 0x88, 
   0x7F, 0x80, 0x70, 0x6A, 0x6C, 0x67, 0x64, 0x67, 0x6A, 0x66, 0x6C, 0x5A, 0x5A, 0x61, 0x57, 0x58, 
   0x5F, 0x5C, 0x5D, 0x67, 0x5D, 0x5E, 0x6A, 0x60, 0x5E, 0x67, 0x5B, 0x5A, 0x66, 0x55, 0x52, 0x5D, 
   0x49, 0x48, 0x50, 0x41, 0x40, 0x47, 0x3B, 0x40, 0x45, 0x3D, 0x42, 0x45, 0x49, 0x52, 0x54, 0x6A, 
   0x6C, 0x71, 0x6C, 0x65, 0x72, 0x65, 0x5C, 0x6C, 0x66, 0x56, 0x6A, 0x60, 0x55, 0x68, 0x5A, 0x57, 
   0x65, 0x62, 0x5D, 0x66, 0x62, 0x58, 0x61, 0x5C, 0x52, 0x5D, 0x60, 0x59, 0x63, 0x6F, 0x6C, 0x77, 
   0x73, 0x74, 0x79, 0x7E, 0x76, 0x7F, 0x7C, 0x71, 0x7E, 0x73, 0x6C, 0x79, 0x6C, 0x67, 0x74, 0x72, 
   0x6D, 0x78, 0x76, 0x6B, 0x78, 0x75, 0x67, 0x78, 0x70, 0x66, 0x79, 0x6C, 0x64, 0x78, 0x53, 0x4C, 
   0x60, 0x42, 0x46, 0x57, 0x38, 0x49, 0x57, 0x36, 0x43, 0x52, 0x36, 0x41, 0x52, 0x38, 0x43, 0x57, 
   0x3D, 0x43, 0x5A, 0x45, 0x46, 0x5E, 0x75, 0x83, 0x89, 0x4E, 0x57, 0x5C, 0x15, 0x1C, 0x1B, 0x2D, 
   0x32, 0x31, 0x89, 0x90, 0x92, 0xAF, 0xB3, 0xB9, 0xA0, 0xA4, 0xA8, 0x8B, 0x8F, 0x98, 0x71, 0x72, 
   0x7F, 0x5A, 0x5A, 0x65, 0x5A, 0x59, 0x67, 0x5E, 0x5E, 0x77, 0x65, 0x67, 0x86, 0x69, 0x69, 0x87, 
   0x64, 0x63, 0x80, 0x67, 0x67, 0x87, 0x72, 0x71, 0x95, 0x6B, 0x71, 0x9D, 0x61, 0x72, 0xA0, 0x74, 
   0x87, 0xB2, 0x6D, 0x7F, 0xAA, 0x6A, 0x79, 0xA1, 0x66, 0x72, 0x91, 0x64, 0x66, 0x7C, 0x87, 0x89, 
   0x8B, 0xAC, 0xAE, 0xA8, 0x9A, 0x9D, 0x90, 0x7C, 0x7F, 0x74, 0x74, 0x7B, 0x6D, 0x7E, 0x82, 0x75, 
   0x7F, 0x80, 0x72, 0x7B, 0x7E, 0x73, 0x6D, 0x6E, 0x68, 0x66, 0x6C, 0x6A, 0x6F, 0x78, 0x77, 0x80, 
   0x88, 0x89, 0x89, 0x8E, 0x93, 0x85, 0x88, 0x8E, 0x88, 0x88, 0x8A, 0x93, 0x8E, 0x94, 0x96, 0x90, 
   0x92, 0x94, 0x91, 0x94, 0x90, 0x8D, 0x8F, 0x8B, 0x8B, 0x90, 0x8B, 0x8D, 0x92, 0x9D, 0x9E, 0xA0, 
   0x9F, 0x9E, 0x9F, 0xA1, 0x9F, 0xA0, 0xA3, 0xA1, 0xA5, 0xA6, 0xA4, 0xAB, 0xA1, 0xA4, 0xA9, 0x8F, 
   0x96, 0x9A, 0x8B, 0x90, 0x95, 0x8F, 0x8F, 0x94, 0x91, 0x90, 0x93, 0x9B, 0x9A, 0x9B, 0x9E, 0x9B, 
   0x99, 0x9A, 0x98, 0x97, 0x8F, 0x90, 0x92, 0x92, 0x91, 0x90, 0x98, 0x97, 0x93, 0xA1, 0xA2, 0xA3, 
   0x95, 0x98, 0xA0, 0x8A, 0x8E, 0x95, 0x9E, 0xA4, 0xA4, 0x9A, 0x9C, 0x9C, 0x9B, 0x9B, 0x9D, 0xA5, 
   0xA4, 0xA5, 0x7B, 0x7A, 0x81, 0x46, 0x48, 0x51, 0x61, 0x6D, 0x77, 0x54, 0x60, 0x70, 0x41, 0x51, 
   0x60, 0x3E, 0x50, 0x5B, 0x39, 0x49, 0x53, 0x45, 0x51, 0x5E, 0x7B, 0x83, 0x91, 0x7F, 0x87, 0x95, 
   0x7C, 0x88, 0x97, 0x7B, 0x89, 0x93, 0x93, 0x9F, 0xA6, 0x9E, 0xA3, 0xAF, 0x9F, 0xA2, 0xAE, 0x93, 
   0x97, 0xA1, 0x90, 0x97, 0xA2, 0xA3, 0xAB, 0xB5, 0xA1, 0xA5, 0xAC, 0x4E, 0x50, 0x58, 0x69, 0x6D, 
   0x74, 0x7C, 0x82, 0x88, 0x7D, 0x84, 0x87, 0x84, 0x8F, 0x93, 0x7E, 0x8E, 0x95, 0x82, 0x93, 0x9B, 
   0x8C, 0x99, 0xA1, 0x96, 0xA2, 0xA8, 0xA6, 0xB1, 0xB8, 0xB3, 0xBB, 0xC5, 0xB1, 0xBA, 0xBD, 0xAF, 
   0xB6, 0xBC, 0xB9, 0xC0, 0xC8, 0xC0, 0xC8, 0xD3, 0xC7, 0xCF, 0xDB, 0xC6, 0xCE, 0xDA, 0xC1, 0xCA, 
   0xD5, 0xA6, 0xB7, 0xBE, 0xA9, 0xBC, 0xC5, 0xBD, 0xD0, 0xD9, 0xC1, 0xD1, 0xDB, 0xC0, 0xC9, 0xD2, 
   0xA4, 0xAC, 0xB2, 0xA2, 0xAE, 0xB3, 0x9B, 0xA2, 0xA8, 0x93, 0x9C, 0xA5, 0x82, 0x8F, 0x99, 0x7E, 
   0x8C, 0x93, 0x7B, 0x89, 0x8F, 0x86, 0x93, 0x9E, 0x88, 0x90, 0x9B, 0x74, 0x79, 0x80, 0x6D, 0x74, 
   0x79, 0x75, 0x79, 0x81, 0x84, 0x88, 0x91, 0x8F, 0x95, 0x9B, 0x93, 0x9B, 0xA2, 0x86, 0x90, 0x9A, 
   0x81, 0x8E, 0x98, 0x8E, 0x9C, 0xA3, 0xAE, 0xB7, 0xBC, 0xBD, 0xC4, 0xC8, 0xBD, 0xC2, 0xC7, 0xB6, 
   0xB6, 0xBC, 0xBB, 0xBF, 0xC5, 0xB6, 0xBB, 0xBC, 0xBD, 0xC2, 0xC7, 0xB0, 0xB4, 0xB8, 0xA9, 0xAA, 
   0xAD, 0xA0, 0xA0, 0xA6, 0x9D, 0x9C, 0xA0, 0x8F, 0x87, 0x85, 0x65, 0x55, 0x4A, 0x79, 0x66, 0x56, 
   0x8C, 0x7E, 0x6B, 0x9D, 0x8E, 0x7C, 0x80, 0x6C, 0x5F, 0x59, 0x49, 0x3D, 0x70, 0x62, 0x59, 0x53, 
   0x47, 0x42, 0x5B, 0x58, 0x57, 0x92, 0x8B, 0x8E, 0x92, 0x86, 0x8C, 0x8D, 0x82, 0x85, 0x89, 0x7F, 
   0x85, 0x83, 0x80, 0x84, 0x8C, 0x85, 0x8A, 0x92, 0x88, 0x8B, 0x8A, 0x7D, 0x81, 0x89, 0x7E, 0x82, 
   0x92, 0x87, 0x8C, 0x97, 0x8A, 0x8E, 0x96, 0x88, 0x8A, 0x96, 0x8B, 0x8D, 0x96, 0x8B, 0x8F, 0x99, 
   0x8D, 0x8E, 0x99, 0x8C, 0x8C, 0x93, 0x85, 0x88, 0x96, 0x85, 0x89, 0x86, 0x73, 0x75, 0x7F, 0x70, 
   0x72, 0x7C, 0x71, 0x75, 0x78, 0x6B, 0x71, 0x7C, 0x6C, 0x75, 0x7B, 0x6E, 0x78, 0x7B, 0x73, 0x76, 
   0x81, 0x7A, 0x7D, 0x92, 0x8A, 0x8D, 0x8D, 0x80, 0x84, 0x87, 0x7B, 0x7D, 0x8A, 0x7E, 0x82, 0x91, 
   0x83, 0x88, 0x95, 0x83, 0x87, 0x97, 0x87, 0x8D, 0x97, 0x89, 0x8D, 0x93, 0x87, 0x88, 0x93, 0x82, 
   0x87, 0x91, 0x7A, 0x86, 0x7A, 0x69, 0x77, 0x4B, 0x3B, 0x45, 0x21, 0x1C, 0x20, 0x1D, 0x26, 0x26, 
   0x3F, 0x4E, 0x4E, 0x6C, 0x7A, 0x7B, 0x7E, 0x87, 0x88, 0x86, 0x87, 0x89, 0x8A, 0x89, 0x89, 0x8E, 
   0x8D, 0x8D, 0x8C, 0x8A, 0x90, 0x8A, 0x86, 0x8F, 0x93, 0x8F, 0x93, 0x95, 0x91, 0x92, 0x99, 0x92, 
   0x93, 0xA0, 0x97, 0x98, 0x9D, 0x96, 0x98, 0x99, 0x93, 0x95, 0x93, 0x8E, 0x90, 0x94, 0x8E, 0x90, 
   0x94, 0x8E, 0x8F, 0x96, 0x8F, 0x8F, 0x99, 0x90, 0x92, 0x97, 0x8F, 0x92, 0x94, 0x8E, 0x92, 0x93, 
   0x8C, 0x90, 0x7C, 0x78, 0x7B, 0x6C, 0x68, 0x69, 0x6B, 0x66, 0x6E, 0x5E, 0x5D, 0x67, 0x5B, 0x5C, 
   0x62, 0x5E, 0x62, 0x66, 0x62, 0x67, 0x6D, 0x68, 0x67, 0x6F, 0x63, 0x60, 0x6A, 0x5B, 0x5B, 0x65, 
   0x4E, 0x4D, 0x55, 0x3D, 0x3E, 0x43, 0x38, 0x40, 0x40, 0x50, 0x59, 0x59, 0x5A, 0x65, 0x66, 0x6A, 
   0x6B, 0x6F, 0x68, 0x60, 0x6E, 0x63, 0x5B, 0x6A, 0x67, 0x5B, 0x6B, 0x6A, 0x62, 0x70, 0x6A, 0x66, 
   0x72, 0x6B, 0x62, 0x6D, 0x73, 0x68, 0x72, 0x71, 0x6E, 0x74, 0x90, 0x8F, 0x93, 0x9D, 0x91, 0x99, 
   0x7D, 0x73, 0x7A, 0x7F, 0x75, 0x7E, 0x7D, 0x73, 0x7F, 0x7C, 0x77, 0x82, 0x75, 0x6E, 0x7A, 0x72, 
   0x68, 0x74, 0x71, 0x66, 0x77, 0x70, 0x66, 0x7A, 0x6E, 0x65, 0x7B, 0x71, 0x6B, 0x80, 0x62, 0x60, 
   0x75, 0x48, 0x4B, 0x61, 0x3F, 0x4B, 0x5E, 0x3D, 0x4C, 0x5E, 0x39, 0x47, 0x5A, 0x39, 0x46, 0x5B, 
   0x3B, 0x44, 0x5C, 0x3D, 0x44, 0x5F, 0x74, 0x84, 0x8A, 0x5F, 0x6B, 0x71, 0x2F, 0x36, 0x38, 0x20, 
   0x23, 0x22, 0x40, 0x43, 0x42, 0x86, 0x8B, 0x8C, 0xA1, 0xA7, 0xA9, 0x9C, 0xA2, 0xA9, 0x86, 0x8B, 
   0x96, 0x6C, 0x71, 0x79, 0x5E, 0x60, 0x6A, 0x5D, 0x5C, 0x71, 0x68, 0x6E, 0x8A, 0x69, 0x6F, 0x8B, 
   0x71, 0x74, 0x8F, 0x7C, 0x7F, 0x9B, 0x84, 0x7E, 0xA0, 0x72, 0x72, 0x9C, 0x71, 0x7D, 0xA9, 0x82, 
   0x92, 0xBF, 0x80, 0x90, 0xBD, 0x76, 0x87, 0xB0, 0x6D, 0x7C, 0x9E, 0x6B, 0x6F, 0x89, 0x7A, 0x7B, 
   0x8A, 0x9B, 0x97, 0xA1, 0xB0, 0xAD, 0xAB, 0x9B, 0x9A, 0x90, 0x7F, 0x81, 0x71, 0x84, 0x86, 0x74, 
   0x84, 0x88, 0x78, 0x81, 0x83, 0x7A, 0x73, 0x72, 0x6D, 0x6B, 0x6D, 0x69, 0x71, 0x75, 0x75, 0x7E, 
   0x80, 0x86, 0x9D, 0xA2, 0xAA, 0xA8, 0xAC, 0xB6, 0x99, 0x98, 0x9D, 0x95, 0x91, 0x97, 0x93, 0x91, 
   0x90, 0x9B, 0x9A, 0x97, 0x9F, 0x9F, 0x9A, 0x97, 0x97, 0x98, 0x96, 0x99, 0x9B, 0x9B, 0x9C, 0x9C, 
   0xA2, 0xA1, 0xA1, 0xA3, 0xA1, 0xA1, 0xA2, 0x9F, 0xA2, 0x9F, 0x9D, 0xA3, 0x99, 0x99, 0x9F, 0x89, 
   0x8C, 0x92, 0x7B, 0x80, 0x87, 0x8A, 0x8C, 0x93, 0x94, 0x97, 0x9B, 0x9C, 0x9C, 0x9E, 0xA5, 0xA1, 
   0xA1, 0x9F, 0x9B, 0x99, 0x93, 0x92, 0x91, 0x9A, 0x9B, 0x98, 0xAF, 0xAE, 0xAA, 0xB0, 0xAF, 0xB1, 
   0x95, 0x97, 0x9F, 0x89, 0x8C, 0x94, 0x9D, 0x9F, 0xA2, 0x9C, 0x9B, 0x9D, 0xA1, 0xA0, 0xA1, 0xA7, 
   0xA4, 0xA5, 0x67, 0x65, 0x6E, 0x57, 0x57, 0x63, 0x59, 0x61, 0x6F, 0x50, 0x5B, 0x6A, 0x49, 0x58, 
   0x6A, 0x50, 0x62, 0x74, 0x54, 0x64, 0x7A, 0x4A, 0x57, 0x6F, 0x4A, 0x55, 0x6B, 0x5E, 0x68, 0x7A, 
   0x76, 0x7C, 0x8A, 0x7E, 0x85, 0x91, 0x7C, 0x86, 0x92, 0x7C, 0x86, 0x92, 0x84, 0x88, 0x92, 0x7D, 
   0x80, 0x86, 0x8E, 0x96, 0x9C, 0xA3, 0xA9, 0xB1, 0x7A, 0x7C, 0x82, 0x3E, 0x41, 0x46, 0x4A, 0x4D, 
   0x51, 0x64, 0x6B, 0x6F, 0x6E, 0x76, 0x7A, 0x75, 0x83, 0x87, 0x77, 0x89, 0x91, 0x82, 0x92, 0x9D, 
   0x89, 0x94, 0xA1, 0x90, 0x9B, 0xA5, 0x9F, 0xAB, 0xB3, 0xA2, 0xAA, 0xB4, 0xA9, 0xB1, 0xB4, 0xB2, 
   0xB8, 0xBE, 0xB9, 0xBF, 0xC6, 0xBC, 0xC2, 0xCB, 0xBF, 0xC5, 0xD0, 0xBF, 0xC6, 0xD2, 0xBE, 0xC5, 
   0xD0, 0xAB, 0xBA, 0xC1, 0xAC, 0xBF, 0xC5, 0xBE, 0xCF, 0xD5, 0xBF, 0xC9, 0xD1, 0xB1, 0xB3, 0xBC, 
   0xA5, 0xA9, 0xB0, 0x9C, 0xA5, 0xAC, 0x90, 0x9E, 0xA6, 0x8E, 0x9B, 0xA3, 0x7F, 0x8C, 0x96, 0x89, 
   0x92, 0x98, 0x7D, 0x87, 0x8D, 0x7F, 0x8A, 0x96, 0x8F, 0x99, 0xA3, 0x84, 0x8E, 0x93, 0x64, 0x6F, 
   0x74, 0x66, 0x6C, 0x74, 0x6B, 0x6F, 0x7A, 0x80, 0x83, 0x8C, 0x91, 0x96, 0xA0, 0x83, 0x8B, 0x96, 
   0x73, 0x81, 0x8B, 0x8F, 0x9C, 0xA4, 0xB1, 0xB2, 0xB8, 0xB1, 0xB0, 0xB2, 0xAE, 0xAD, 0xB1, 0xB1, 
   0xAD, 0xB5, 0xB0, 0xB3, 0xBB, 0xB2, 0xB6, 0xBC, 0xB2, 0xB4, 0xBD, 0xAF, 0xB1, 0xB8, 0xB2, 0xB2, 
   0xB7, 0xAA, 0xA8, 0xAF, 0xB1, 0xAE, 0xB3, 0xA7, 0x9E, 0x9D, 0x63, 0x56, 0x48, 0x82, 0x6E, 0x5D, 
   0x8B, 0x7D, 0x6A, 0x97, 0x89, 0x76, 0x8C, 0x75, 0x68, 0x66, 0x56, 0x4B, 0x76, 0x67, 0x5B, 0x64, 
   0x58, 0x4E, 0x69, 0x64, 0x61, 0x8F, 0x85, 0x89, 0x94, 0x86, 0x8B, 0x8E, 0x81, 0x88, 0x86, 0x7A, 
   0x84, 0x83, 0x7A, 0x82, 0x8F, 0x88, 0x8D, 0x95, 0x8E, 0x92, 0x8D, 0x86, 0x8A, 0x8B, 0x82, 0x85, 
   0x90, 0x83, 0x89, 0x93, 0x86, 0x8C, 0x93, 0x86, 0x8D, 0x93, 0x88, 0x90, 0x90, 0x86, 0x8E, 0x92, 
   0x89, 0x8B, 0x97, 0x8D, 0x8E, 0x9C, 0x90, 0x94, 0xA6, 0x95, 0x98, 0x9E, 0x8A, 0x8B, 0x81, 0x70, 
   0x72, 0x7B, 0x6F, 0x73, 0x7D, 0x71, 0x77, 0x7E, 0x70, 0x79, 0x7A, 0x6B, 0x75, 0x7C, 0x6F, 0x72, 
   0x81, 0x77, 0x7A, 0x80, 0x7A, 0x7E, 0x84, 0x7D, 0x80, 0x86, 0x7F, 0x81, 0x87, 0x7C, 0x7F, 0x89, 
   0x78, 0x7E, 0x84, 0x75, 0x7A, 0x8C, 0x82, 0x87, 0x8C, 0x82, 0x85, 0x89, 0x7F, 0x80, 0x8D, 0x7E, 
   0x83, 0x8F, 0x7F, 0x89, 0x59, 0x51, 0x5A, 0x2C, 0x29, 0x2C, 0x42, 0x49, 0x49, 0x79, 0x84, 0x82, 
   0x93, 0x9A, 0x99, 0x8B, 0x8E, 0x8D, 0x82, 0x82, 0x81, 0x85, 0x82, 0x81, 0x87, 0x82, 0x81, 0x8E, 
   0x8B, 0x8A, 0x8E, 0x8A, 0x8E, 0x8F, 0x88, 0x8F, 0x96, 0x8E, 0x92, 0x96, 0x91, 0x93, 0x98, 0x93, 
   0x96, 0x9E, 0x98, 0x9A, 0xA0, 0x9A, 0x9D, 0x98, 0x94, 0x97, 0x97, 0x94, 0x96, 0x9C, 0x96, 0x99, 
   0x99, 0x92, 0x95, 0x99, 0x90, 0x92, 0x9A, 0x90, 0x92, 0x94, 0x8C, 0x8F, 0x8E, 0x8A, 0x8D, 0x8D, 
   0x8B, 0x8F, 0x7E, 0x7C, 0x7F, 0x6D, 0x69, 0x6B, 0x6D, 0x68, 0x70, 0x66, 0x65, 0x70, 0x64, 0x63, 
   0x69, 0x69, 0x6E, 0x6C, 0x7E, 0x84, 0x85, 0x81, 0x80, 0x88, 0x67, 0x66, 0x71, 0x63, 0x5F, 0x69, 
   0x5D, 0x58, 0x60, 0x40, 0x3F, 0x43, 0x54, 0x5A, 0x59, 0x7E, 0x80, 0x80, 0x88, 0x8A, 0x8C, 0x99, 
   0x93, 0x97, 0x86, 0x80, 0x8E, 0x7A, 0x71, 0x80, 0x79, 0x69, 0x7C, 0x75, 0x66, 0x7B, 0x72, 0x69, 
   0x7B, 0x71, 0x69, 0x79, 0x75, 0x6D, 0x7B, 0x89, 0x88, 0x8F, 0xAA, 0xA5, 0xAB, 0x92, 0x7E, 0x89, 
   0x76, 0x68, 0x73, 0x78, 0x71, 0x7F, 0x79, 0x73, 0x81, 0x7E, 0x7B, 0x86, 0x8F, 0x87, 0x91, 0x7B, 
   0x6E, 0x7B, 0x71, 0x66, 0x79, 0x70, 0x68, 0x80, 0x6F, 0x67, 0x7F, 0x6E, 0x6B, 0x80, 0x6B, 0x69, 
   0x82, 0x5C, 0x59, 0x75, 0x3C, 0x3E, 0x57, 0x3B, 0x44, 0x5B, 0x39, 0x46, 0x5B, 0x3B, 0x46, 0x5B, 
   0x37, 0x42, 0x58, 0x3A, 0x42, 0x59, 0x6D, 0x7D, 0x83, 0x64, 0x69, 0x71, 0x37, 0x38, 0x3D, 0x34, 
   0x35, 0x35, 0x28, 0x2A, 0x29, 0x3F, 0x44, 0x45, 0x93, 0x98, 0x9A, 0xB0, 0xB6, 0xBC, 0x98, 0xA0, 
   0xA7, 0x81, 0x8A, 0x91, 0x64, 0x67, 0x72, 0x5E, 0x5E, 0x6F, 0x6B, 0x70, 0x87, 0x76, 0x7B, 0x92, 
   0x7A, 0x7B, 0x93, 0x7E, 0x7D, 0x98, 0x7E, 0x80, 0xA2, 0x7B, 0x83, 0xA9, 0x87, 0x90, 0xB9, 0x90, 
   0x97, 0xC1, 0x8A, 0x94, 0xBD, 0x8C, 0x9B, 0xC0, 0x89, 0x9C, 0xBC, 0x73, 0x72, 0x8A, 0x7B, 0x77, 
   0x8A, 0x87, 0x7C, 0x8F, 0xA0, 0x97, 0x9F, 0xB2, 0xAD, 0xAD, 0x9B, 0x99, 0x8F, 0x8D, 0x8D, 0x7D, 
   0x8A, 0x89, 0x7A, 0x80, 0x81, 0x75, 0x7A, 0x79, 0x72, 0x6E, 0x70, 0x6B, 0x6C, 0x6F, 0x6D, 0x70, 
   0x75, 0x79, 0x8F, 0x95, 0x9E, 0x9C, 0x9E, 0xAA, 0x93, 0x93, 0x9C, 0x93, 0x91, 0x9C, 0x92, 0x94, 
   0x98, 0x95, 0x96, 0x98, 0x94, 0x93, 0x90, 0x99, 0x98, 0x9B, 0x9E, 0x9F, 0xA3, 0xA1, 0xA1, 0xA4, 
   0xA6, 0xA3, 0xA6, 0xA0, 0x9E, 0xA0, 0x9B, 0x99, 0x99, 0x9C, 0x9B, 0x9B, 0x96, 0x95, 0x99, 0x82, 
   0x84, 0x8B, 0x80, 0x85, 0x8C, 0x81, 0x86, 0x8C, 0x88, 0x8C, 0x90, 0x8F, 0x90, 0x92, 0xAC, 0xA8, 
   0xA9, 0xAD, 0xA5, 0xA5, 0x9D, 0x9D, 0x9C, 0xA3, 0xA5, 0xA2, 0xBD, 0xB9, 0xB6, 0xBE, 0xB6, 0xB8, 
   0x8C, 0x87, 0x8F, 0x82, 0x81, 0x8A, 0x94, 0x93, 0x99, 0x96, 0x93, 0x98, 0x94, 0x92, 0x96, 0x78, 
   0x76, 0x78, 0x51, 0x55, 0x5D, 0x66, 0x6B, 0x76, 0x5E, 0x66, 0x74, 0x58, 0x66, 0x73, 0x4F, 0x60, 
   0x72, 0x3F, 0x52, 0x66, 0x3F, 0x53, 0x69, 0x49, 0x5A, 0x72, 0x49, 0x59, 0x6F, 0x4B, 0x5C, 0x6F, 
   0x4A, 0x57, 0x69, 0x44, 0x4E, 0x5F, 0x42, 0x4A, 0x58, 0x48, 0x4D, 0x55, 0x57, 0x58, 0x5F, 0x5E, 
   0x62, 0x6A, 0x66, 0x6B, 0x74, 0x5F, 0x5F, 0x67, 0x36, 0x37, 0x3B, 0x3B, 0x42, 0x40, 0x40, 0x42, 
   0x41, 0x50, 0x55, 0x57, 0x6B, 0x77, 0x7D, 0x8C, 0x99, 0xA0, 0x88, 0x97, 0xA0, 0x9C, 0xA7, 0xB5, 
   0x9C, 0xA4, 0xB2, 0x9B, 0xA5, 0xB0, 0xA3, 0xAE, 0xB8, 0xA3, 0xA9, 0xB4, 0xA2, 0xA9, 0xAD, 0xB0, 
   0xB6, 0xBB, 0xB4, 0xB9, 0xC0, 0xB6, 0xBC, 0xC5, 0xB4, 0xB9, 0xC3, 0xB6, 0xBB, 0xC6, 0xBA, 0xC0, 
   0xCB, 0xB1, 0xBA, 0xC2, 0xB6, 0xC1, 0xC6, 0xC0, 0xC9, 0xD0, 0xBB, 0xBF, 0xC6, 0x98, 0x9B, 0xA3, 
   0x8F, 0x97, 0x9F, 0x95, 0xA4, 0xAC, 0x8E, 0x9E, 0xA8, 0x81, 0x8C, 0x93, 0x77, 0x80, 0x87, 0x7D, 
   0x85, 0x8B, 0x84, 0x8D, 0x95, 0x70, 0x7D, 0x86, 0x76, 0x84, 0x89, 0x80, 0x8F, 0x94, 0x8A, 0x98, 
   0x9F, 0x9D, 0xA7, 0xAD, 0x80, 0x84, 0x8D, 0x69, 0x6D, 0x78, 0x62, 0x68, 0x72, 0x75, 0x7E, 0x84, 
   0x99, 0xA6, 0xAA, 0xB7, 0xC1, 0xC6, 0xAD, 0xAA, 0xB2, 0xAB, 0xA7, 0xAB, 0xA6, 0xA8, 0xAC, 0xA9, 
   0xAB, 0xB2, 0xA9, 0xA9, 0xB1, 0xA7, 0xA6, 0xAC, 0xA3, 0xA3, 0xAB, 0xA6, 0xA6, 0xAD, 0xA7, 0xA7, 
   0xAC, 0xA8, 0xA8, 0xAF, 0xB3, 0xB3, 0xB8, 0xA6, 0x9E, 0x9A, 0x6C, 0x5C, 0x4D, 0x7D, 0x6D, 0x5A, 
   0x92, 0x87, 0x74, 0x97, 0x8D, 0x7B, 0x8C, 0x80, 0x74, 0x7E, 0x72, 0x69, 0x73, 0x61, 0x58, 0x6D, 
   0x60, 0x55, 0x81, 0x7A, 0x74, 0x94, 0x89, 0x8B, 0x99, 0x88, 0x8B, 0x91, 0x85, 0x89, 0x86, 0x7C, 
   0x83, 0x81, 0x75, 0x7F, 0x88, 0x7F, 0x87, 0x8E, 0x87, 0x8C, 0x8D, 0x86, 0x8A, 0x8D, 0x84, 0x88, 
   0x92, 0x87, 0x8C, 0x96, 0x89, 0x90, 0x94, 0x86, 0x8F, 0x94, 0x86, 0x90, 0x91, 0x84, 0x8C, 0x92, 
   0x87, 0x8C, 0x96, 0x8B, 0x8E, 0x9A, 0x8D, 0x92, 0xA1, 0x92, 0x94, 0xAA, 0x9A, 0x9A, 0x8B, 0x7C, 
   0x7D, 0x75, 0x6B, 0x6F, 0x7E, 0x74, 0x7A, 0x82, 0x75, 0x7E, 0x80, 0x73, 0x7D, 0x7D, 0x74, 0x7A, 
   0x7F, 0x77, 0x7A, 0x85, 0x7B, 0x7C, 0x85, 0x7A, 0x7E, 0x84, 0x7D, 0x80, 0x83, 0x7C, 0x7F, 0x87, 
   0x79, 0x7B, 0x83, 0x79, 0x7C, 0x81, 0x7D, 0x80, 0x80, 0x7B, 0x7D, 0x82, 0x79, 0x7A, 0x89, 0x7F, 
   0x83, 0x7F, 0x79, 0x7D, 0x63, 0x65, 0x67, 0x7B, 0x7E, 0x81, 0x8B, 0x8F, 0x95, 0x8E, 0x8D, 0x96, 
   0x9D, 0x9A, 0xA5, 0xA0, 0xA0, 0xAA, 0x8F, 0x8F, 0x99, 0x81, 0x7D, 0x87, 0x85, 0x7E, 0x82, 0x87, 
   0x83, 0x84, 0x87, 0x84, 0x84, 0x93, 0x8D, 0x8D, 0x96, 0x90, 0x8F, 0x93, 0x8F, 0x90, 0x93, 0x92, 
   0x96, 0x97, 0x94, 0x9A, 0x9C, 0x98, 0x9C, 0x9E, 0x98, 0x9B, 0x9F, 0x97, 0x9A, 0xA0, 0x99, 0x99, 
   0x9A, 0x93, 0x93, 0x98, 0x8F, 0x8D, 0x95, 0x8D, 0x89, 0x91, 0x8A, 0x86, 0x8B, 0x8A, 0x88, 0x92, 
   0x96, 0x95, 0x96, 0x99, 0x9C, 0x7C, 0x7C, 0x82, 0x6F, 0x6F, 0x77, 0x68, 0x6A, 0x73, 0x67, 0x66, 
   0x6C, 0x6F, 0x72, 0x71, 0x91, 0x96, 0x97, 0x8F, 0x8E, 0x98, 0x7A, 0x75, 0x83, 0x6F, 0x69, 0x74, 
   0x54, 0x4F, 0x5A, 0x3F, 0x41, 0x45, 0x71, 0x74, 0x72, 0x7F, 0x77, 0x7A, 0x75, 0x6E, 0x74, 0x7B, 
   0x70, 0x77, 0x81, 0x75, 0x85, 0x7E, 0x6C, 0x7F, 0x7B, 0x63, 0x78, 0x78, 0x63, 0x78, 0x73, 0x65, 
   0x78, 0x71, 0x69, 0x78, 0x73, 0x72, 0x7E, 0x91, 0x8F, 0x99, 0x9A, 0x8F, 0x99, 0x7E, 0x6B, 0x7B, 
   0x6E, 0x68, 0x76, 0x6E, 0x6A, 0x7C, 0x74, 0x6D, 0x7E, 0x7C, 0x76, 0x82, 0x86, 0x7B, 0x86, 0x76, 
   0x67, 0x76, 0x6D, 0x61, 0x76, 0x70, 0x68, 0x80, 0x74, 0x6D, 0x84, 0x74, 0x71, 0x83, 0x6F, 0x6A, 
   0x81, 0x6B, 0x60, 0x7B, 0x4F, 0x47, 0x62, 0x3A, 0x3B, 0x55, 0x36, 0x3E, 0x57, 0x3A, 0x44, 0x5B, 
   0x37, 0x43, 0x58, 0x35, 0x42, 0x53, 0x6B, 0x78, 0x82, 0x5C, 0x62, 0x69, 0x27, 0x2B, 0x2C, 0x30, 
   0x33, 0x31, 0x43, 0x44, 0x43, 0x2B, 0x2E, 0x31, 0x60, 0x64, 0x68, 0xAC, 0xB0, 0xB8, 0xA4, 0xAB, 
   0xB2, 0x93, 0x9A, 0xA2, 0x75, 0x76, 0x80, 0x6E, 0x6B, 0x76, 0x6C, 0x6B, 0x79, 0x70, 0x70, 0x80, 
   0x74, 0x72, 0x84, 0x76, 0x74, 0x8B, 0x80, 0x7F, 0x9A, 0x86, 0x8B, 0xAC, 0x89, 0x91, 0xBB, 0x8C, 
   0x94, 0xC1, 0x8E, 0x97, 0xC1, 0x9C, 0xA7, 0xCA, 0x87, 0x93, 0xAD, 0x71, 0x6D, 0x8C, 0x7F, 0x7B, 
   0x91, 0x85, 0x7D, 0x91, 0x84, 0x7E, 0x89, 0x94, 0x8F, 0x99, 0xB2, 0xAB, 0xAC, 0xA7, 0xA4, 0x98, 
   0x97, 0x96, 0x87, 0x85, 0x88, 0x78, 0x79, 0x7E, 0x71, 0x75, 0x7B, 0x72, 0x78, 0x7D, 0x76, 0x77, 
   0x79, 0x78, 0x7B, 0x82, 0x84, 0x8D, 0x92, 0x97, 0x9B, 0xA0, 0xA4, 0x99, 0x9C, 0xA4, 0x94, 0x95, 
   0x9A, 0x9B, 0x9C, 0xA0, 0xA0, 0xA0, 0xA0, 0xA2, 0xA3, 0xA5, 0x9F, 0xA1, 0xA2, 0xA5, 0xA3, 0xA6, 
   0xAA, 0xA6, 0xAB, 0xA8, 0xA3, 0xA9, 0xA5, 0xA1, 0xA7, 0xA5, 0xA2, 0xA8, 0xA0, 0x9D, 0xA3, 0x89, 
   0x8C, 0x90, 0x83, 0x89, 0x8D, 0x7D, 0x81, 0x85, 0x84, 0x88, 0x8A, 0x82, 0x85, 0x85, 0x92, 0x91, 
   0x8F, 0xA9, 0x9C, 0x9E, 0xA3, 0x9D, 0x9D, 0xA1, 0x9D, 0x9C, 0x9C, 0x96, 0x95, 0x99, 0x93, 0x95, 
   0x80, 0x80, 0x86, 0x79, 0x7D, 0x85, 0x8B, 0x8E, 0x95, 0x92, 0x92, 0x9A, 0x84, 0x82, 0x8A, 0x60, 
   0x5F, 0x65, 0x50, 0x5A, 0x63, 0x6D, 0x7B, 0x84, 0x75, 0x85, 0x90, 0x5C, 0x6A, 0x7E, 0x57, 0x69, 
   0x80, 0x57, 0x6E, 0x83, 0x4D, 0x63, 0x78, 0x41, 0x55, 0x6C, 0x3D, 0x51, 0x66, 0x43, 0x58, 0x69, 
   0x46, 0x5B, 0x6B, 0x58, 0x6B, 0x7E, 0x5B, 0x6B, 0x80, 0x44, 0x4E, 0x5B, 0x44, 0x44, 0x51, 0x50, 
   0x51, 0x5D, 0x5A, 0x5D, 0x66, 0x49, 0x48, 0x4F, 0x2A, 0x29, 0x2C, 0x35, 0x3B, 0x37, 0x3E, 0x43, 
   0x3E, 0x4B, 0x4F, 0x50, 0x62, 0x6D, 0x74, 0x88, 0x93, 0x9B, 0x98, 0xA2, 0xAC, 0xA4, 0xAD, 0xB9, 
   0x95, 0x9E, 0xA9, 0x92, 0x9D, 0xA7, 0xA0, 0xAC, 0xB5, 0xA8, 0xAE, 0xBA, 0xA8, 0xAF, 0xB6, 0xAC, 
   0xB4, 0xB9, 0xB2, 0xB9, 0xC0, 0xB7, 0xBD, 0xC5, 0xB7, 0xBD, 0xC5, 0xBD, 0xC3, 0xC9, 0xC0, 0xC7, 
   0xCD, 0xB5, 0xBD, 0xC4, 0xB8, 0xC1, 0xC6, 0xB9, 0xC2, 0xC7, 0xAC, 0xB1, 0xB6, 0x90, 0x98, 0x9E, 
   0x91, 0x9C, 0xA5, 0x9A, 0xA3, 0xAB, 0x83, 0x89, 0x91, 0x7C, 0x82, 0x87, 0x85, 0x90, 0x95, 0x8B, 
   0x96, 0x9C, 0xA6, 0xB1, 0xBB, 0x94, 0xA0, 0xA9, 0x82, 0x8E, 0x92, 0x83, 0x91, 0x96, 0x8D, 0x9A, 
   0xA0, 0xA0, 0xAB, 0xB0, 0xB3, 0xBA, 0xC0, 0x9E, 0xA5, 0xAE, 0x88, 0x93, 0x9A, 0xA1, 0xAB, 0xAF, 
   0xB0, 0xBA, 0xBD, 0xA8, 0xAD, 0xB3, 0xA2, 0x9F, 0xA7, 0xA7, 0xA6, 0xAC, 0xA4, 0xA9, 0xAE, 0xA8, 
   0xAF, 0xB3, 0xAA, 0xAB, 0xAB, 0xA3, 0xA2, 0x9F, 0xA5, 0xA5, 0xA6, 0xA4, 0xA5, 0xA7, 0x9F, 0xA1, 
   0xA2, 0xA3, 0xA5, 0xAA, 0xC1, 0xC3, 0xC9, 0xA0, 0x94, 0x92, 0x6B, 0x57, 0x4B, 0x77, 0x67, 0x56, 
   0x88, 0x7D, 0x69, 0x8A, 0x84, 0x71, 0x90, 0x8E, 0x80, 0x7C, 0x76, 0x69, 0x73, 0x61, 0x5A, 0x72, 
   0x62, 0x58, 0x8D, 0x81, 0x78, 0xA2, 0x98, 0x95, 0x9A, 0x8B, 0x8B, 0x90, 0x85, 0x87, 0x8D, 0x84, 
   0x85, 0x86, 0x7F, 0x87, 0x96, 0x8C, 0x94, 0x95, 0x89, 0x8F, 0x8A, 0x7E, 0x84, 0x8E, 0x83, 0x89, 
   0x92, 0x89, 0x91, 0x94, 0x8A, 0x91, 0x94, 0x86, 0x8C, 0x93, 0x84, 0x8A, 0x8E, 0x81, 0x84, 0x8E, 
   0x82, 0x87, 0x8F, 0x81, 0x88, 0x90, 0x81, 0x86, 0x90, 0x85, 0x85, 0x9D, 0x92, 0x93, 0x9C, 0x8F, 
   0x91, 0x79, 0x6D, 0x71, 0x7B, 0x70, 0x76, 0x7F, 0x72, 0x7B, 0x82, 0x75, 0x7E, 0x7B, 0x74, 0x79, 
   0x7D, 0x75, 0x78, 0x81, 0x77, 0x79, 0x82, 0x78, 0x7B, 0x81, 0x7C, 0x7F, 0x84, 0x7E, 0x82, 0x88, 
   0x7C, 0x7E, 0x86, 0x79, 0x7B, 0x86, 0x7F, 0x82, 0x8B, 0x82, 0x85, 0x8D, 0x83, 0x88, 0x92, 0x8B, 
   0x93, 0x89, 0x86, 0x8E, 0x7E, 0x82, 0x85, 0x80, 0x80, 0x85, 0x78, 0x73, 0x7A, 0x6F, 0x67, 0x72, 
   0x7A, 0x7A, 0x85, 0x89, 0x91, 0x9A, 0x8D, 0x92, 0xA0, 0x8C, 0x8E, 0x9E, 0x98, 0x95, 0x9D, 0x92, 
   0x91, 0x94, 0x8B, 0x8A, 0x8B, 0x8E, 0x8D, 0x8C, 0x8C, 0x8E, 0x8C, 0x8F, 0x92, 0x93, 0x95, 0x98, 
   0x9B, 0x97, 0x98, 0x9D, 0x9A, 0x98, 0x9B, 0x9C, 0x98, 0x9A, 0x9E, 0x97, 0x97, 0x9C, 0x95, 0x94, 
   0x99, 0x93, 0x91, 0x92, 0x8B, 0x87, 0x8A, 0x85, 0x80, 0x95, 0x92, 0x8C, 0xAA, 0xAA, 0xA6, 0xA6, 
   0xA9, 0xA8, 0x9C, 0x9D, 0xA1, 0x8D, 0x8F, 0x95, 0x72, 0x76, 0x7D, 0x64, 0x68, 0x70, 0x64, 0x62, 
   0x6D, 0x68, 0x6C, 0x70, 0x93, 0x99, 0x9A, 0x99, 0x94, 0x9E, 0x6A, 0x61, 0x6E, 0x5C, 0x55, 0x60, 
   0x44, 0x3F, 0x4A, 0x43, 0x49, 0x4C, 0x81, 0x87, 0x83, 0x84, 0x7D, 0x7F, 0x75, 0x6D, 0x74, 0x6E, 
   0x66, 0x6C, 0x6D, 0x65, 0x75, 0x6E, 0x62, 0x73, 0x6A, 0x5D, 0x70, 0x6C, 0x61, 0x75, 0x6E, 0x62, 
   0x76, 0x6E, 0x64, 0x77, 0x74, 0x73, 0x81, 0x8B, 0x8C, 0x94, 0x82, 0x78, 0x83, 0x76, 0x6A, 0x79, 
   0x6D, 0x69, 0x77, 0x70, 0x6C, 0x7A, 0x78, 0x70, 0x7E, 0x81, 0x76, 0x82, 0x86, 0x79, 0x86, 0x7C, 
   0x6D, 0x7F, 0x6E, 0x61, 0x76, 0x75, 0x6B, 0x7F, 0x76, 0x6E, 0x81, 0x75, 0x71, 0x81, 0x74, 0x6B, 
   0x7E, 0x75, 0x66, 0x7C, 0x6C, 0x5D, 0x75, 0x48, 0x41, 0x5A, 0x3A, 0x39, 0x52, 0x32, 0x34, 0x4C, 
   0x2F, 0x35, 0x4A, 0x2D, 0x36, 0x46, 0x6A, 0x79, 0x83, 0x5D, 0x67, 0x6F, 0x35, 0x3C, 0x3C, 0x3E, 
   0x44, 0x3F, 0x43, 0x45, 0x43, 0x32, 0x36, 0x39, 0x2F, 0x32, 0x39, 0x87, 0x88, 0x94, 0xAA, 0xB0, 
   0xBA, 0xA2, 0xA7, 0xAF, 0x9C, 0x9D, 0xA3, 0x81, 0x7E, 0x84, 0x75, 0x71, 0x79, 0x73, 0x71, 0x7B, 
   0x6C, 0x6E, 0x78, 0x6D, 0x71, 0x7E, 0x77, 0x78, 0x87, 0x7C, 0x80, 0x94, 0x86, 0x8C, 0xAA, 0x90, 
   0x94, 0xB9, 0x93, 0x97, 0xB9, 0x7E, 0x83, 0x9C, 0x67, 0x6B, 0x7E, 0x71, 0x6C, 0x8D, 0x82, 0x7E, 
   0x9B, 0x86, 0x7F, 0x9B, 0x81, 0x7F, 0x92, 0x82, 0x7E, 0x92, 0x95, 0x8C, 0x9B, 0xAA, 0xA4, 0xA6, 
   0xA1, 0x9D, 0x92, 0x98, 0x98, 0x88, 0x88, 0x8A, 0x7D, 0x7B, 0x7D, 0x76, 0x84, 0x83, 0x7D, 0x7E, 
   0x7E, 0x7C, 0x78, 0x7E, 0x81, 0x80, 0x86, 0x8C, 0x90, 0x97, 0x99, 0x98, 0x9B, 0xA1, 0x9A, 0x99, 
   0x9D, 0x9D, 0x9C, 0xA0, 0x9B, 0x9D, 0x9F, 0x9C, 0x9E, 0xA1, 0xA0, 0xA2, 0xA2, 0xA4, 0xA3, 0xA2, 
   0xA5, 0xA2, 0xA2, 0xA3, 0xA0, 0xA2, 0xA2, 0x9E, 0xA3, 0xA9, 0xA5, 0xAD, 0x9E, 0x9C, 0xA1, 0x8E, 
   0x91, 0x94, 0x8D, 0x91, 0x95, 0x84, 0x87, 0x8A, 0x88, 0x8C, 0x8D, 0x86, 0x8A, 0x88, 0x8F, 0x8F, 
   0x8C, 0x9E, 0x96, 0x99, 0xA3, 0x9C, 0x9E, 0xA3, 0x9C, 0x9C, 0x9C, 0x96, 0x96, 0x97, 0x96, 0x96, 
   0x82, 0x85, 0x89, 0x80, 0x83, 0x89, 0x88, 0x8E, 0x96, 0x88, 0x8A, 0x94, 0x76, 0x76, 0x81, 0x52, 
   0x52, 0x5A, 0x56, 0x61, 0x6B, 0x6D, 0x7C, 0x83, 0x7D, 0x8B, 0x93, 0x75, 0x7E, 0x8C, 0x59, 0x66, 
   0x7A, 0x52, 0x65, 0x7B, 0x51, 0x65, 0x7C, 0x4E, 0x62, 0x7B, 0x47, 0x5C, 0x73, 0x40, 0x57, 0x6A, 
   0x3F, 0x53, 0x63, 0x4D, 0x5E, 0x6F, 0x50, 0x60, 0x76, 0x49, 0x5D, 0x70, 0x4A, 0x58, 0x6C, 0x4C, 
   0x54, 0x65, 0x47, 0x4C, 0x55, 0x2F, 0x31, 0x36, 0x2E, 0x2C, 0x2E, 0x2D, 0x30, 0x2E, 0x34, 0x3B, 
   0x36, 0x44, 0x49, 0x48, 0x5F, 0x68, 0x6D, 0x7C, 0x84, 0x8C, 0x85, 0x8C, 0x97, 0x88, 0x92, 0x9C, 
   0x88, 0x94, 0x9C, 0x85, 0x94, 0x9A, 0x97, 0xA6, 0xAE, 0xAD, 0xB3, 0xBF, 0xAB, 0xB6, 0xBD, 0xA5, 
   0xB0, 0xB6, 0xAC, 0xB4, 0xBC, 0xB4, 0xBC, 0xC3, 0xB5, 0xBB, 0xC1, 0xB6, 0xBC, 0xC0, 0xBD, 0xC2, 
   0xC7, 0xBB, 0xC0, 0xC8, 0xC2, 0xC7, 0xCC, 0xB7, 0xBF, 0xC4, 0xA1, 0xA8, 0xAC, 0x9A, 0xA3, 0xA8, 
   0x98, 0xA0, 0xAB, 0x8C, 0x8B, 0x93, 0x62, 0x64, 0x62, 0x7B, 0x83, 0x84, 0xA2, 0xAF, 0xB4, 0xA1, 
   0xAC, 0xB2, 0x94, 0x9C, 0xA5, 0x99, 0xA2, 0xAD, 0x8F, 0x98, 0xA1, 0x83, 0x8F, 0x95, 0x8A, 0x98, 
   0x9D, 0x95, 0xA2, 0xA7, 0xA1, 0xAA, 0xB0, 0xB1, 0xB8, 0xBC, 0xB8, 0xBF, 0xC3, 0xB2, 0xB6, 0xBC, 
   0xAA, 0xAB, 0xB2, 0xAA, 0xA6, 0xAC, 0xA5, 0x9F, 0xA5, 0xA1, 0x9E, 0xA5, 0xA6, 0xA7, 0xAB, 0xAC, 
   0xB1, 0xB2, 0xB1, 0xB1, 0xB1, 0xAA, 0xA8, 0xA6, 0xA5, 0xA4, 0xA4, 0xA2, 0xA3, 0xA5, 0x9D, 0x9E, 
   0x9F, 0xA6, 0xA9, 0xAC, 0xC1, 0xC4, 0xC7, 0xA8, 0x9B, 0x9D, 0x75, 0x65, 0x5E, 0x75, 0x66, 0x57, 
   0x8F, 0x83, 0x6C, 0xA1, 0x9C, 0x86, 0x9F, 0x9E, 0x8C, 0x83, 0x7C, 0x69, 0x7F, 0x70, 0x62, 0x79, 
   0x67, 0x57, 0x82, 0x71, 0x62, 0x9E, 0x95, 0x8F, 0x9E, 0x94, 0x95, 0x92, 0x85, 0x8B, 0x90, 0x84, 
   0x85, 0x85, 0x7E, 0x85, 0x86, 0x7C, 0x82, 0x88, 0x7C, 0x81, 0x86, 0x79, 0x80, 0x86, 0x7B, 0x83, 
   0x8F, 0x87, 0x90, 0x95, 0x8C, 0x94, 0x92, 0x86, 0x8D, 0x8E, 0x81, 0x86, 0x8B, 0x81, 0x83, 0x8B, 
   0x81, 0x89, 0x8A, 0x7F, 0x8A, 0x8A, 0x7C, 0x83, 0x87, 0x80, 0x82, 0xA1, 0x98, 0x9B, 0xB3, 0xA5, 
   0xA9, 0x9C, 0x8E, 0x92, 0x86, 0x78, 0x7E, 0x7F, 0x72, 0x78, 0x7E, 0x71, 0x78, 0x7D, 0x72, 0x76, 
   0x7C, 0x74, 0x77, 0x7D, 0x76, 0x79, 0x80, 0x78, 0x7B, 0x84, 0x7F, 0x80, 0x8B, 0x85, 0x87, 0x90, 
   0x84, 0x88, 0x8B, 0x7B, 0x80, 0x8F, 0x85, 0x88, 0x98, 0x8E, 0x91, 0x90, 0x88, 0x8D, 0x8E, 0x8B, 
   0x97, 0x8E, 0x8B, 0x9C, 0x81, 0x81, 0x8E, 0x80, 0x7E, 0x88, 0x81, 0x7F, 0x83, 0x80, 0x7A, 0x7F, 
   0x7E, 0x7C, 0x7E, 0x8B, 0x8C, 0x8B, 0x91, 0x94, 0x9B, 0x8E, 0x96, 0xA2, 0x9E, 0xA2, 0xA7, 0xA4, 
   0xA6, 0xA9, 0x98, 0x98, 0x9D, 0x8D, 0x90, 0x95, 0x8C, 0x91, 0x96, 0x8C, 0x92, 0x99, 0x92, 0x96, 
   0x9B, 0x92, 0x95, 0x95, 0x96, 0x97, 0x97, 0x95, 0x94, 0x94, 0x99, 0x94, 0x94, 0x9B, 0x93, 0x93, 
   0x8F, 0x85, 0x85, 0x84, 0x7F, 0x7C, 0x8C, 0x8E, 0x89, 0xA1, 0xA1, 0x9E, 0xA7, 0xA4, 0xA5, 0xAB, 
   0xAA, 0xAD, 0xA1, 0x9F, 0xA4, 0x96, 0x98, 0x9D, 0x7B, 0x7F, 0x87, 0x5E, 0x63, 0x6B, 0x5F, 0x61, 
   0x70, 0x65, 0x6B, 0x76, 0x83, 0x8C, 0x8F, 0xA7, 0xA2, 0xA8, 0x90, 0x7E, 0x89, 0x6B, 0x5E, 0x69, 
   0x52, 0x44, 0x50, 0x53, 0x54, 0x54, 0x83, 0x88, 0x81, 0x8D, 0x87, 0x87, 0x98, 0x90, 0x95, 0x89, 
   0x80, 0x83, 0x87, 0x82, 0x8A, 0x7F, 0x79, 0x85, 0x6B, 0x66, 0x77, 0x61, 0x61, 0x73, 0x63, 0x5F, 
   0x71, 0x68, 0x65, 0x73, 0x86, 0x89, 0x93, 0x99, 0x94, 0x9D, 0x7C, 0x71, 0x7F, 0x76, 0x6C, 0x7E, 
   0x75, 0x6C, 0x79, 0x74, 0x6C, 0x79, 0x7E, 0x78, 0x84, 0x8F, 0x82, 0x8D, 0x88, 0x78, 0x88, 0x76, 
   0x68, 0x7C, 0x6D, 0x5F, 0x74, 0x77, 0x6C, 0x7B, 0x75, 0x6D, 0x7A, 0x73, 0x6C, 0x7B, 0x72, 0x67, 
   0x7C, 0x74, 0x66, 0x7D, 0x76, 0x67, 0x80, 0x69, 0x5D, 0x75, 0x45, 0x3D, 0x53, 0x2A, 0x28, 0x3A, 
   0x28, 0x2B, 0x39, 0x28, 0x2A, 0x39, 0x6C, 0x7E, 0x8B, 0x5D, 0x65, 0x6E, 0x46, 0x49, 0x49, 0x5A, 
   0x60, 0x5C, 0x69, 0x6A, 0x6A, 0x5C, 0x5E, 0x63, 0x2F, 0x32, 0x3A, 0x43, 0x46, 0x50, 0x97, 0x9B, 
   0xA4, 0xA6, 0xAC, 0xB3, 0xAC, 0xAF, 0xB5, 0x9A, 0xA0, 0xA5, 0x8B, 0x8D, 0x94, 0x8C, 0x87, 0x90, 
   0x78, 0x7A, 0x81, 0x71, 0x76, 0x7D, 0x6F, 0x75, 0x7B, 0x70, 0x79, 0x83, 0x88, 0x8E, 0x9E, 0x98, 
   0x97, 0xAA, 0x76, 0x77, 0x88, 0x4C, 0x51, 0x62, 0x3F, 0x44, 0x57, 0x5B, 0x59, 0x72, 0x77, 0x77, 
   0x90, 0x85, 0x7F, 0x98, 0x88, 0x82, 0x98, 0x81, 0x7A, 0x92, 0x7B, 0x70, 0x88, 0x92, 0x89, 0x99, 
   0xA1, 0x9F, 0x9C, 0x9F, 0x9E, 0x92, 0x93, 0x91, 0x88, 0x74, 0x72, 0x72, 0x55, 0x55, 0x5C, 0x4E, 
   0x4F, 0x5A, 0x59, 0x5F, 0x6A, 0x77, 0x7D, 0x88, 0x8E, 0x92, 0x98, 0x98, 0x99, 0xA0, 0x96, 0x96, 
   0x99, 0x96, 0x97, 0x9B, 0x98, 0x9C, 0x9E, 0x9E, 0xA0, 0xA3, 0xA2, 0xA3, 0xA5, 0xA1, 0xA2, 0xA2, 
   0xA2, 0xA2, 0xA1, 0x9B, 0x9A, 0x9E, 0xA4, 0xA1, 0xA4, 0xAB, 0xA7, 0xAD, 0xA0, 0x9E, 0xA2, 0x91, 
   0x90, 0x94, 0x90, 0x91, 0x95, 0x8A, 0x8D, 0x90, 0x93, 0x96, 0x95, 0x8C, 0x8C, 0x8B, 0x8E, 0x8E, 
   0x8D, 0x94, 0x94, 0x96, 0x9B, 0x98, 0x9A, 0x9D, 0x9A, 0x9A, 0x9D, 0x9C, 0x99, 0x9C, 0x9C, 0x9D, 
   0x89, 0x89, 0x8D, 0x85, 0x86, 0x8D, 0x8B, 0x8E, 0x96, 0x84, 0x86, 0x90, 0x74, 0x72, 0x7E, 0x4E, 
   0x4F, 0x5A, 0x58, 0x62, 0x6D, 0x6F, 0x7D, 0x83, 0x79, 0x87, 0x8D, 0x7F, 0x8A, 0x97, 0x75, 0x83, 
   0x92, 0x6A, 0x7B, 0x90, 0x4A, 0x5A, 0x75, 0x48, 0x56, 0x70, 0x43, 0x53, 0x69, 0x43, 0x56, 0x6A, 
   0x4D, 0x5F, 0x72, 0x46, 0x59, 0x69, 0x41, 0x54, 0x65, 0x48, 0x5E, 0x70, 0x50, 0x65, 0x7A, 0x5B, 
   0x6A, 0x80, 0x56, 0x5F, 0x71, 0x2E, 0x34, 0x3E, 0x29, 0x29, 0x2C, 0x29, 0x26, 0x26, 0x32, 0x35, 
   0x35, 0x3B, 0x40, 0x41, 0x51, 0x57, 0x58, 0x6F, 0x73, 0x78, 0x78, 0x83, 0x8A, 0x7E, 0x8A, 0x90, 
   0x8E, 0x9D, 0xA2, 0x91, 0xA5, 0xAA, 0xA8, 0xB7, 0xBD, 0xB8, 0xC2, 0xCB, 0xAB, 0xB7, 0xBD, 0x9F, 
   0xAA, 0xAF, 0xAF, 0xB7, 0xBD, 0xB5, 0xBA, 0xC2, 0xAC, 0xB1, 0xBA, 0xA3, 0xAA, 0xB2, 0xA5, 0xAC, 
   0xB2, 0xB1, 0xB3, 0xB6, 0xC1, 0xC4, 0xC8, 0xBD, 0xBF, 0xC7, 0x9E, 0xA5, 0xAC, 0x94, 0xA0, 0xA6, 
   0x8B, 0x92, 0x98, 0x69, 0x6A, 0x6E, 0x56, 0x5D, 0x56, 0x87, 0x95, 0x90, 0xB7, 0xC3, 0xC6, 0xAA, 
   0xB3, 0xB9, 0x8D, 0x95, 0x9D, 0x99, 0xA1, 0xAC, 0x9B, 0xA4, 0xAD, 0x8B, 0x95, 0x9D, 0x84, 0x91, 
   0x98, 0x8F, 0x9D, 0xA4, 0x97, 0xA2, 0xA7, 0xA9, 0xAF, 0xB1, 0xB2, 0xB4, 0xB6, 0xB0, 0xAF, 0xB3, 
   0xAB, 0xA7, 0xAD, 0xB2, 0xAA, 0xB0, 0xA6, 0xA1, 0xA3, 0x9F, 0x9D, 0xA0, 0xA6, 0xA4, 0xAA, 0xA6, 
   0xA7, 0xAC, 0xA6, 0xA4, 0xAB, 0xA4, 0x9F, 0xA2, 0xA1, 0x9D, 0xA1, 0xA1, 0x9F, 0xA5, 0xA2, 0xA0, 
   0xA6, 0xAD, 0xAC, 0xB1, 0xB1, 0xB1, 0xB2, 0x8D, 0x83, 0x84, 0x7F, 0x73, 0x6B, 0x75, 0x62, 0x56, 
   0x84, 0x72, 0x60, 0x92, 0x86, 0x73, 0xA8, 0x9D, 0x8F, 0x91, 0x86, 0x76, 0x7D, 0x70, 0x5D, 0x84, 
   0x71, 0x5C, 0x7A, 0x65, 0x58, 0x5C, 0x50, 0x4A, 0x75, 0x6C, 0x6C, 0x91, 0x89, 0x8C, 0x91, 0x87, 
   0x8A, 0x8F, 0x89, 0x90, 0x8E, 0x85, 0x8D, 0x89, 0x7E, 0x84, 0x8C, 0x7F, 0x88, 0x89, 0x7F, 0x87, 
   0x90, 0x87, 0x8D, 0x97, 0x8C, 0x94, 0x93, 0x89, 0x8E, 0x8F, 0x83, 0x85, 0x8B, 0x82, 0x84, 0x86, 
   0x7E, 0x88, 0x8A, 0x7E, 0x8A, 0x89, 0x7D, 0x85, 0x89, 0x80, 0x86, 0x94, 0x89, 0x90, 0x9F, 0x90, 
   0x99, 0xA2, 0x93, 0x9A, 0x97, 0x86, 0x8D, 0x83, 0x71, 0x77, 0x81, 0x72, 0x76, 0x7E, 0x71, 0x74, 
   0x7E, 0x71, 0x76, 0x80, 0x74, 0x7C, 0x84, 0x78, 0x80, 0x86, 0x7C, 0x80, 0x89, 0x80, 0x83, 0x8C, 
   0x82, 0x88, 0x8E, 0x7D, 0x86, 0x8F, 0x84, 0x8B, 0x92, 0x89, 0x8F, 0x8C, 0x84, 0x8D, 0x87, 0x81, 
   0x8F, 0x87, 0x80, 0x92, 0x88, 0x83, 0x93, 0x97, 0x90, 0xA3, 0x95, 0x8D, 0x98, 0x8C, 0x81, 0x86, 
   0x87, 0x7D, 0x7E, 0x93, 0x8C, 0x87, 0x95, 0x93, 0x92, 0x95, 0x97, 0x9E, 0x93, 0x97, 0x9D, 0x96, 
   0x9B, 0xA1, 0x96, 0x9B, 0xA4, 0x90, 0x96, 0xA0, 0x94, 0x9C, 0xA3, 0x96, 0xA0, 0xA4, 0x9A, 0x9E, 
   0xA0, 0x9A, 0x9A, 0x98, 0x9A, 0x9B, 0x9B, 0x97, 0x96, 0x96, 0x9E, 0x9B, 0x9D, 0x9B, 0x94, 0x96, 
   0x81, 0x79, 0x7A, 0x85, 0x83, 0x83, 0x97, 0x9B, 0x99, 0x9E, 0xA0, 0x9E, 0x9C, 0x9B, 0x9E, 0xA3, 
   0xA0, 0xA6, 0x9F, 0x9B, 0xA1, 0x97, 0x95, 0x9B, 0x8F, 0x8E, 0x98, 0x71, 0x72, 0x7F, 0x60, 0x61, 
   0x73, 0x64, 0x6A, 0x7A, 0x77, 0x7E, 0x86, 0x99, 0x95, 0x9B, 0xB4, 0xAA, 0xB0, 0x9C, 0x8E, 0x99, 
   0x5C, 0x4C, 0x58, 0x5A, 0x56, 0x58, 0x87, 0x87, 0x80, 0x91, 0x89, 0x87, 0xA8, 0x9E, 0xA0, 0xAA, 
   0xA0, 0xA2, 0xAC, 0xA5, 0xA8, 0xA6, 0xA0, 0xA5, 0x99, 0x92, 0x9C, 0x91, 0x8E, 0x98, 0x99, 0x96, 
   0x9F, 0x95, 0x90, 0x97, 0xB7, 0xB3, 0xBA, 0xAA, 0x9C, 0xAA, 0x7C, 0x6F, 0x81, 0x7C, 0x6F, 0x83, 
   0x7D, 0x71, 0x82, 0x79, 0x6E, 0x7D, 0x7C, 0x75, 0x84, 0x87, 0x7D, 0x8B, 0x86, 0x7A, 0x8B, 0x7A, 
   0x6E, 0x81, 0x71, 0x65, 0x76, 0x72, 0x69, 0x76, 0x73, 0x6B, 0x79, 0x72, 0x6B, 0x7C, 0x71, 0x68, 
   0x7F, 0x74, 0x67, 0x7E, 0x7A, 0x69, 0x7E, 0x7E, 0x6F, 0x85, 0x68, 0x5A, 0x72, 0x34, 0x2D, 0x40, 
   0x21, 0x26, 0x2F, 0x33, 0x37, 0x42, 0x6C, 0x7D, 0x8B, 0x60, 0x68, 0x6E, 0x56, 0x55, 0x57, 0x66, 
   0x66, 0x67, 0x74, 0x73, 0x75, 0x78, 0x78, 0x7B, 0x4A, 0x4F, 0x53, 0x2A, 0x31, 0x34, 0x5D, 0x64, 
   0x67, 0xA0, 0xA8, 0xAD, 0xAA, 0xAC, 0xB4, 0x88, 0x8B, 0x93, 0x8B, 0x89, 0x91, 0x95, 0x8D, 0x94, 
   0x7F, 0x7E, 0x82, 0x78, 0x79, 0x7E, 0x83, 0x88, 0x8D, 0x84, 0x8C, 0x96, 0x84, 0x86, 0x95, 0x6E, 
   0x69, 0x75, 0x4B, 0x4C, 0x56, 0x3F, 0x47, 0x56, 0x42, 0x4C, 0x5D, 0x54, 0x57, 0x66, 0x67, 0x6C, 
   0x7C, 0x83, 0x80, 0x91, 0x86, 0x7F, 0x91, 0x75, 0x6E, 0x82, 0x70, 0x68, 0x7A, 0xA7, 0xA1, 0xAC, 
   0xCD, 0xCA, 0xCD, 0xCD, 0xCA, 0xC4, 0xB8, 0xB6, 0xB5, 0x7F, 0x7E, 0x8D, 0x50, 0x50, 0x6F, 0x48, 
   0x4B, 0x6C, 0x54, 0x58, 0x72, 0x70, 0x71, 0x83, 0x92, 0x91, 0x9D, 0x9C, 0x9C, 0xA4, 0x99, 0x9C, 
   0x9D, 0x98, 0x9B, 0x9D, 0x9C, 0x9E, 0xA2, 0xA2, 0xA2, 0xA5, 0x9E, 0xA0, 0xA2, 0xA2, 0xA1, 0xA2, 
   0xA5, 0xA3, 0xA6, 0x9C, 0x9B, 0xA1, 0xA5, 0xA2, 0xA3, 0xA4, 0xA3, 0xA6, 0x9A, 0x9A, 0xA0, 0x93, 
   0x91, 0x97, 0x8D, 0x8E, 0x93, 0x8A, 0x90, 0x93, 0x9A, 0x9E, 0xA0, 0x92, 0x94, 0x96, 0x90, 0x90, 
   0x92, 0x90, 0x90, 0x90, 0x98, 0x96, 0x97, 0x9F, 0x9E, 0xA0, 0xA8, 0xAC, 0xA9, 0x9E, 0xA1, 0xA3, 
   0x8F, 0x90, 0x95, 0x8C, 0x8E, 0x94, 0x90, 0x93, 0x99, 0x8C, 0x8C, 0x96, 0x7C, 0x7A, 0x87, 0x57, 
   0x59, 0x68, 0x5C, 0x66, 0x72, 0x68, 0x75, 0x7E, 0x87, 0x95, 0x9D, 0x99, 0xA6, 0xB1, 0x8B, 0x99, 
   0xA3, 0x73, 0x84, 0x97, 0x4F, 0x5F, 0x7B, 0x47, 0x54, 0x6F, 0x45, 0x53, 0x6C, 0x52, 0x64, 0x7E, 
   0x67, 0x7C, 0x92, 0x59, 0x71, 0x85, 0x48, 0x5E, 0x71, 0x4E, 0x60, 0x73, 0x4E, 0x63, 0x76, 0x53, 
   0x67, 0x7D, 0x59, 0x69, 0x80, 0x4A, 0x56, 0x68, 0x2C, 0x33, 0x3D, 0x24, 0x25, 0x29, 0x2F, 0x33, 
   0x34, 0x37, 0x40, 0x3F, 0x43, 0x4D, 0x4B, 0x56, 0x5B, 0x5A, 0x68, 0x73, 0x75, 0x7D, 0x89, 0x8A, 
   0xA8, 0xB2, 0xB5, 0xBD, 0xCB, 0xD0, 0xC6, 0xD1, 0xD6, 0xC9, 0xD1, 0xD8, 0xBD, 0xC5, 0xCB, 0xB2, 
   0xBA, 0xBE, 0xB6, 0xBD, 0xC3, 0xB5, 0xBB, 0xC2, 0xA1, 0xA6, 0xB1, 0x95, 0x9C, 0xA7, 0x9F, 0xA7, 
   0xAF, 0xA8, 0xB2, 0xB5, 0xB4, 0xBC, 0xC2, 0xB2, 0xB4, 0xBE, 0x98, 0x9E, 0xA8, 0x87, 0x91, 0x97, 
   0x74, 0x77, 0x7C, 0x5E, 0x5E, 0x60, 0x57, 0x61, 0x5C, 0x85, 0x96, 0x8F, 0xAF, 0xBA, 0xBD, 0x9E, 
   0xAA, 0xB0, 0x90, 0x9B, 0xA4, 0xA3, 0xAC, 0xB7, 0xA1, 0xAB, 0xB4, 0x98, 0xA2, 0xA8, 0x93, 0x9E, 
   0xA4, 0xA7, 0xB3, 0xB9, 0xAD, 0xB7, 0xBD, 0xA7, 0xAB, 0xB1, 0xAA, 0xA9, 0xAE, 0xAB, 0xAA, 0xAD, 
   0xA9, 0xA6, 0xAB, 0xA4, 0xA0, 0xA4, 0xAB, 0xAB, 0xAA, 0xB0, 0xAF, 0xB1, 0xAB, 0xA8, 0xAF, 0xA6, 
   0xA5, 0xAD, 0xA4, 0xA0, 0xA9, 0x9F, 0x9B, 0x9F, 0x9E, 0x99, 0x9D, 0x9F, 0x9C, 0xA0, 0x9F, 0x9E, 
   0xA3, 0xA1, 0x9E, 0xA3, 0x9F, 0x9D, 0x9A, 0x88, 0x7F, 0x77, 0x7C, 0x6F, 0x60, 0x74, 0x5E, 0x50, 
   0x6B, 0x57, 0x48, 0x6E, 0x60, 0x4E, 0x9C, 0x8D, 0x7E, 0x9C, 0x8C, 0x7E, 0x74, 0x61, 0x4E, 0x81, 
   0x6B, 0x5C, 0x61, 0x4B, 0x46, 0x26, 0x1A, 0x1B, 0x26, 0x26, 0x28, 0x5D, 0x5C, 0x5E, 0x89, 0x82, 
   0x84, 0x97, 0x8F, 0x95, 0x91, 0x88, 0x8F, 0x8C, 0x81, 0x86, 0x8F, 0x84, 0x8A, 0x8D, 0x84, 0x88, 
   0x91, 0x87, 0x89, 0x98, 0x8B, 0x91, 0x99, 0x8F, 0x92, 0x95, 0x8A, 0x8B, 0x8F, 0x84, 0x87, 0x8A, 
   0x7E, 0x87, 0x8E, 0x80, 0x8A, 0x8C, 0x7E, 0x87, 0x8A, 0x7F, 0x87, 0x8D, 0x81, 0x8A, 0x94, 0x87, 
   0x91, 0x96, 0x89, 0x92, 0xA3, 0x93, 0x9B, 0x8F, 0x7D, 0x85, 0x81, 0x74, 0x7A, 0x7F, 0x73, 0x7A, 
   0x80, 0x72, 0x7A, 0x81, 0x73, 0x7D, 0x82, 0x77, 0x81, 0x84, 0x79, 0x81, 0x85, 0x79, 0x80, 0x86, 
   0x7C, 0x84, 0x87, 0x7A, 0x84, 0x8A, 0x7E, 0x88, 0x88, 0x7D, 0x88, 0x8A, 0x7C, 0x8C, 0x8C, 0x7C, 
   0x8E, 0x8D, 0x7F, 0x8E, 0x8C, 0x7F, 0x8C, 0x94, 0x7E, 0x90, 0x91, 0x7D, 0x8A, 0x8F, 0x81, 0x87, 
   0x96, 0x8E, 0x90, 0x95, 0x91, 0x90, 0x95, 0x8F, 0x92, 0x97, 0x8D, 0x94, 0x91, 0x87, 0x8F, 0x92, 
   0x8D, 0x95, 0x92, 0x91, 0x99, 0x93, 0x93, 0x9C, 0x96, 0x99, 0x9F, 0x94, 0x97, 0x9A, 0xA2, 0xA2, 
   0xA5, 0xAD, 0xAB, 0xAE, 0xA9, 0xA9, 0xA9, 0xA3, 0xA0, 0x9F, 0x97, 0x94, 0x95, 0x8F, 0x89, 0x8D, 
   0x86, 0x83, 0x87, 0x99, 0x99, 0x9D, 0x9D, 0x9C, 0x9E, 0x99, 0x94, 0x94, 0x96, 0x91, 0x93, 0x9D, 
   0x99, 0x9D, 0x9D, 0x99, 0x9E, 0x99, 0x95, 0x9A, 0x97, 0x95, 0x99, 0x93, 0x91, 0x9C, 0x73, 0x73, 
   0x81, 0x67, 0x6A, 0x78, 0x76, 0x79, 0x83, 0x7F, 0x7E, 0x84, 0xA1, 0xA2, 0xA7, 0xB9, 0xAF, 0xB9, 
   0x70, 0x66, 0x73, 0x5E, 0x59, 0x5E, 0x80, 0x7D, 0x78, 0x88, 0x7E, 0x7E, 0x90, 0x86, 0x84, 0xA1, 
   0x98, 0x98, 0xA6, 0x9A, 0x9B, 0xAC, 0xA6, 0xA6, 0xB5, 0xAF, 0xB1, 0xC6, 0xC1, 0xC3, 0xBD, 0xB5, 
   0xB9, 0xAA, 0xA0, 0xA8, 0xAF, 0xA7, 0xAE, 0xA6, 0x96, 0xA6, 0x80, 0x72, 0x85, 0x7B, 0x6C, 0x7E, 
   0x86, 0x7C, 0x8A, 0x85, 0x77, 0x87, 0x80, 0x76, 0x87, 0x7F, 0x76, 0x86, 0x7C, 0x74, 0x87, 0x80, 
   0x79, 0x8C, 0x7B, 0x73, 0x83, 0x80, 0x74, 0x80, 0x7F, 0x72, 0x80, 0x76, 0x6D, 0x7D, 0x72, 0x6A, 
   0x7E, 0x7A, 0x6B, 0x80, 0x7F, 0x6D, 0x7D, 0x81, 0x71, 0x83, 0x81, 0x70, 0x88, 0x61, 0x54, 0x6B, 
   0x3E, 0x3D, 0x4B, 0x42, 0x46, 0x4F, 0x64, 0x74, 0x82, 0x4F, 0x5A, 0x5E, 0x5C, 0x5C, 0x5E, 0x68, 
   0x65, 0x67, 0x68, 0x66, 0x65, 0x86, 0x85, 0x84, 0x82, 0x86, 0x87, 0x5C, 0x63, 0x64, 0x3D, 0x44, 
   0x44, 0x75, 0x7E, 0x82, 0xA4, 0xAA, 0xB2, 0x9C, 0x9C, 0xA4, 0xA4, 0xA2, 0xA7, 0xAF, 0xAE, 0xAE, 
   0xAF, 0xB0, 0xB0, 0xA5, 0xA8, 0xAC, 0x8D, 0x8E, 0x98, 0x60, 0x62, 0x74, 0x3F, 0x40, 0x50, 0x3A, 
   0x3C, 0x44, 0x42, 0x48, 0x55, 0x47, 0x51, 0x63, 0x4F, 0x58, 0x66, 0x56, 0x5D, 0x6C, 0x5E, 0x67, 
   0x78, 0x8A, 0x8E, 0x9F, 0x89, 0x8A, 0x9B, 0x85, 0x86, 0x94, 0xAC, 0xAA, 0xAF, 0xE8, 0xE7, 0xE3, 
   0xF6, 0xF3, 0xEF, 0xD6, 0xD2, 0xD3, 0xB0, 0xAB, 0xBA, 0x81, 0x80, 0x9C, 0x6B, 0x6F, 0x94, 0x62, 
   0x6B, 0x92, 0x5D, 0x65, 0x84, 0x68, 0x65, 0x79, 0x82, 0x81, 0x8C, 0x93, 0x93, 0x9B, 0x9D, 0x9D, 
   0xA1, 0x9E, 0x9F, 0xA4, 0x9F, 0x9F, 0xA4, 0x9F, 0x9C, 0xA1, 0xA0, 0x9E, 0xA3, 0xA7, 0xA1, 0xA8, 
   0xA6, 0x9E, 0xA8, 0xA1, 0x9C, 0xA3, 0x9E, 0x9B, 0x9C, 0xA3, 0xA3, 0xA6, 0x9A, 0x9A, 0xA1, 0x88, 
   0x8B, 0x8F, 0x82, 0x88, 0x8A, 0x89, 0x8F, 0x91, 0x91, 0x94, 0x97, 0x8F, 0x8F, 0x92, 0x90, 0x8E, 
   0x8E, 0x8F, 0x8D, 0x8B, 0x96, 0x94, 0x92, 0xA1, 0x9F, 0xA0, 0xA6, 0xA9, 0xA8, 0x9F, 0xA5, 0xA7, 
   0x94, 0x99, 0x9C, 0x92, 0x93, 0x96, 0x95, 0x96, 0x9C, 0x91, 0x92, 0x9B, 0x7D, 0x7C, 0x8A, 0x5D, 
   0x60, 0x71, 0x5E, 0x67, 0x76, 0x6C, 0x75, 0x83, 0x92, 0x9E, 0xAB, 0x99, 0xA4, 0xAF, 0x8C, 0x98, 
   0xA1, 0x6C, 0x7C, 0x8C, 0x58, 0x6B, 0x81, 0x4C, 0x5E, 0x76, 0x46, 0x5B, 0x72, 0x4E, 0x62, 0x7D, 
   0x55, 0x6A, 0x83, 0x55, 0x67, 0x81, 0x52, 0x5D, 0x76, 0x54, 0x5C, 0x71, 0x4D, 0x5A, 0x6B, 0x4C, 
   0x5F, 0x71, 0x51, 0x60, 0x77, 0x56, 0x63, 0x76, 0x54, 0x5F, 0x6D, 0x31, 0x39, 0x44, 0x25, 0x2C, 
   0x30, 0x34, 0x3D, 0x3B, 0x3C, 0x48, 0x47, 0x42, 0x4A, 0x49, 0x4F, 0x58, 0x55, 0x5C, 0x61, 0x60, 
   0x77, 0x78, 0x79, 0x97, 0x9A, 0x9B, 0xA8, 0xAA, 0xAE, 0xB8, 0xBA, 0xBE, 0xC0, 0xC4, 0xC9, 0xCC, 
   0xD1, 0xD5, 0xD1, 0xD8, 0xDB, 0xC5, 0xCC, 0xD2, 0xA8, 0xB0, 0xB7, 0xA6, 0xAD, 0xB6, 0xAE, 0xB6, 
   0xBD, 0xAD, 0xB2, 0xBA, 0xA3, 0xAA, 0xB2, 0x97, 0x9E, 0xA6, 0x93, 0x98, 0xA0, 0x7B, 0x82, 0x87, 
   0x64, 0x6A, 0x6F, 0x5C, 0x5E, 0x60, 0x5E, 0x66, 0x62, 0x7C, 0x8C, 0x87, 0xA9, 0xB7, 0xBA, 0x99, 
   0xA7, 0xAC, 0x91, 0x9E, 0xA4, 0xAD, 0xB4, 0xBF, 0xA7, 0xB1, 0xB8, 0xA1, 0xAC, 0xAD, 0x9E, 0xA6, 
   0xAB, 0xAD, 0xB3, 0xB9, 0xAB, 0xAE, 0xB5, 0xA6, 0xA7, 0xAF, 0xA8, 0xA8, 0xAF, 0xB5, 0xB6, 0xBB, 
   0xB3, 0xB3, 0xB6, 0xA3, 0xA4, 0xA7, 0xC3, 0xC8, 0xC8, 0xD0, 0xD1, 0xD4, 0xB0, 0xAC, 0xB3, 0xA0, 
   0x9E, 0xA5, 0xA0, 0x9E, 0xA1, 0x9F, 0x9D, 0x9F, 0x9E, 0x99, 0x9D, 0x9D, 0x9A, 0x9A, 0x98, 0x9A, 
   0x9D, 0x97, 0x96, 0x9C, 0x95, 0x8F, 0x8B, 0x8D, 0x7E, 0x74, 0x77, 0x63, 0x57, 0x73, 0x58, 0x4E, 
   0x63, 0x4D, 0x44, 0x5C, 0x4F, 0x43, 0x7D, 0x70, 0x60, 0x9F, 0x8D, 0x81, 0x7E, 0x62, 0x5A, 0x65, 
   0x4F, 0x4C, 0x35, 0x26, 0x2A, 0x1D, 0x1D, 0x23, 0x14, 0x20, 0x29, 0x22, 0x27, 0x30, 0x69, 0x63, 
   0x62, 0x9B, 0x8F, 0x94, 0x95, 0x8B, 0x90, 0x8C, 0x86, 0x87, 0x8B, 0x83, 0x86, 0x81, 0x77, 0x7A, 
   0x88, 0x7D, 0x7F, 0x91, 0x85, 0x89, 0x9A, 0x8D, 0x92, 0x99, 0x8F, 0x94, 0x94, 0x88, 0x8D, 0x8E, 
   0x7D, 0x86, 0x8C, 0x7E, 0x87, 0x8C, 0x7F, 0x86, 0x8D, 0x81, 0x88, 0x8E, 0x81, 0x89, 0x91, 0x84, 
   0x8B, 0x96, 0x8A, 0x90, 0x9E, 0x90, 0x99, 0x98, 0x88, 0x94, 0x81, 0x75, 0x83, 0x79, 0x70, 0x7B, 
   0x7A, 0x6F, 0x7A, 0x7A, 0x71, 0x79, 0x7C, 0x74, 0x7C, 0x7D, 0x72, 0x7C, 0x7E, 0x71, 0x7C, 0x82, 
   0x79, 0x82, 0x88, 0x7D, 0x85, 0x88, 0x7C, 0x85, 0x88, 0x79, 0x84, 0x8E, 0x79, 0x87, 0x95, 0x7D, 
   0x8D, 0x92, 0x7C, 0x88, 0x8B, 0x77, 0x80, 0x94, 0x7A, 0x84, 0x90, 0x77, 0x81, 0x89, 0x75, 0x7D, 
   0x96, 0x89, 0x8F, 0xA5, 0x9C, 0xA2, 0x98, 0x8F, 0x97, 0x95, 0x8B, 0x92, 0x92, 0x87, 0x8B, 0x8B, 
   0x80, 0x84, 0x8F, 0x84, 0x89, 0x98, 0x8E, 0x92, 0x9B, 0x92, 0x94, 0x95, 0x8F, 0x8E, 0x9B, 0x93, 
   0x94, 0x9D, 0x95, 0x99, 0x90, 0x8D, 0x8F, 0x84, 0x82, 0x84, 0x7D, 0x7C, 0x7E, 0x89, 0x85, 0x8A, 
   0x94, 0x90, 0x98, 0x9F, 0x9D, 0xA6, 0x9B, 0x95, 0x9D, 0x9E, 0x94, 0x98, 0x9C, 0x91, 0x95, 0x9E, 
   0x96, 0x99, 0x99, 0x95, 0x98, 0x96, 0x93, 0x94, 0x96, 0x93, 0x93, 0x96, 0x93, 0x97, 0x97, 0x94, 
   0x9C, 0x91, 0x8F, 0x97, 0x86, 0x84, 0x8B, 0x87, 0x88, 0x8E, 0x9C, 0x9B, 0xA1, 0xC6, 0xC1, 0xCB, 
   0xB3, 0xB1, 0xBB, 0x8F, 0x87, 0x90, 0x86, 0x80, 0x82, 0x89, 0x84, 0x84, 0x93, 0x8B, 0x87, 0xA0, 
   0x97, 0x98, 0xA5, 0x93, 0x98, 0x9E, 0x98, 0x99, 0xA1, 0x9B, 0x9D, 0xAC, 0xA3, 0xA4, 0xA7, 0x99, 
   0x99, 0xA6, 0x9B, 0x9C, 0xA8, 0xA2, 0xA6, 0x8E, 0x80, 0x8F, 0x7B, 0x6D, 0x7F, 0x82, 0x73, 0x84, 
   0x89, 0x7F, 0x8C, 0x8C, 0x7F, 0x90, 0x84, 0x79, 0x89, 0x7F, 0x74, 0x84, 0x78, 0x70, 0x7F, 0x7E, 
   0x77, 0x88, 0x7D, 0x72, 0x83, 0x85, 0x76, 0x82, 0x82, 0x71, 0x81, 0x79, 0x6D, 0x7D, 0x73, 0x6C, 
   0x7D, 0x7B, 0x6D, 0x7F, 0x7E, 0x6C, 0x7E, 0x7D, 0x6C, 0x7F, 0x82, 0x71, 0x88, 0x7F, 0x6D, 0x86, 
   0x6E, 0x60, 0x75, 0x58, 0x51, 0x5A, 0x57, 0x62, 0x6E, 0x43, 0x4A, 0x4F, 0x58, 0x59, 0x5A, 0x5F, 
   0x5C, 0x5B, 0x7D, 0x7C, 0x77, 0x8D, 0x8E, 0x87, 0x68, 0x69, 0x67, 0x53, 0x56, 0x56, 0x44, 0x46, 
   0x46, 0x51, 0x52, 0x55, 0x98, 0x9B, 0xA1, 0xBD, 0xBB, 0xC3, 0xD6, 0xD1, 0xD8, 0xBE, 0xBC, 0xBF, 
   0xA2, 0x9D, 0xA3, 0x74, 0x71, 0x79, 0x2F, 0x31, 0x3F, 0x23, 0x26, 0x3A, 0x32, 0x38, 0x47, 0x43, 
   0x4C, 0x55, 0x43, 0x4F, 0x5F, 0x47, 0x53, 0x68, 0x52, 0x5B, 0x6B, 0x56, 0x58, 0x6F, 0x53, 0x57, 
   0x70, 0x6A, 0x69, 0x82, 0x81, 0x7D, 0x95, 0x9D, 0x97, 0xAB, 0xE5, 0xDB, 0xE6, 0xE4, 0xD9, 0xD9, 
   0xD7, 0xCD, 0xD6, 0xB2, 0xAB, 0xBE, 0x8A, 0x88, 0xA8, 0x78, 0x7E, 0xA0, 0x78, 0x81, 0xA2, 0x79, 
   0x82, 0xA2, 0x6A, 0x70, 0x89, 0x65, 0x64, 0x6F, 0x6C, 0x6D, 0x72, 0x89, 0x8C, 0x92, 0x98, 0x97, 
   0x9F, 0xA2, 0xA0, 0xA8, 0xA6, 0xA3, 0xA9, 0xA4, 0x9F, 0xA3, 0xA7, 0xA2, 0xA4, 0xA9, 0x9F, 0xA8, 
   0xA6, 0x9B, 0xA8, 0xA1, 0x9C, 0xA2, 0x9E, 0x9A, 0x99, 0xA6, 0xA4, 0xA4, 0x9E, 0x9C, 0xA0, 0x7F, 
   0x85, 0x87, 0x75, 0x84, 0x84, 0x81, 0x89, 0x8A, 0x81, 0x81, 0x83, 0x86, 0x84, 0x85, 0x88, 0x87, 
   0x86, 0x8D, 0x8C, 0x8B, 0x92, 0x91, 0x8F, 0x95, 0x91, 0x92, 0x95, 0x94, 0x91, 0x8C, 0x91, 0x93, 
   0x8B, 0x92, 0x95, 0x9D, 0x9E, 0xA3, 0xAC, 0xA8, 0xAF, 0x9D, 0x9B, 0xA4, 0x7C, 0x7B, 0x88, 0x60, 
   0x67, 0x74, 0x64, 0x70, 0x7D, 0x77, 0x82, 0x90, 0x87, 0x93, 0xA0, 0x8A, 0x95, 0xA1, 0x96, 0x9F, 
   0xA9, 0x8D, 0x98, 0xA5, 0x68, 0x77, 0x89, 0x51, 0x62, 0x75, 0x4F, 0x5F, 0x77, 0x4D, 0x5C, 0x76, 
   0x4C, 0x5D, 0x78, 0x4E, 0x5C, 0x7B, 0x46, 0x4F, 0x6C, 0x43, 0x4D, 0x62, 0x44, 0x51, 0x63, 0x43, 
   0x54, 0x69, 0x47, 0x57, 0x6C, 0x4E, 0x5A, 0x6C, 0x53, 0x5F, 0x6F, 0x46, 0x54, 0x65, 0x35, 0x41, 
   0x4E, 0x31, 0x38, 0x3E, 0x33, 0x39, 0x3C, 0x37, 0x3C, 0x3F, 0x45, 0x47, 0x45, 0x54, 0x57, 0x56, 
   0x55, 0x56, 0x54, 0x5B, 0x5A, 0x55, 0x5D, 0x5C, 0x59, 0x65, 0x61, 0x5E, 0x6F, 0x6F, 0x6F, 0x9C, 
   0x9F, 0xA0, 0xBF, 0xC5, 0xC6, 0xD1, 0xD9, 0xDC, 0xDA, 0xE3, 0xE8, 0xCB, 0xD1, 0xD9, 0xAC, 0xB2, 
   0xBA, 0xA3, 0xA8, 0xB0, 0x97, 0xA3, 0xA9, 0x98, 0xA4, 0xA9, 0x94, 0x9B, 0xA0, 0x70, 0x75, 0x78, 
   0x6A, 0x6F, 0x70, 0x65, 0x6A, 0x6A, 0x63, 0x69, 0x67, 0x6D, 0x78, 0x76, 0xA4, 0xB0, 0xB2, 0xB7, 
   0xC0, 0xC3, 0xB5, 0xBD, 0xBE, 0xBC, 0xC3, 0xC4, 0xB2, 0xBC, 0xBE, 0xBB, 0xC5, 0xC9, 0xB6, 0xBB, 
   0xC1, 0xB2, 0xB3, 0xBB, 0xAC, 0xAA, 0xB1, 0xA4, 0xA4, 0xA8, 0xA5, 0xA8, 0xAB, 0xB7, 0xBA, 0xBD, 
   0xB5, 0xB7, 0xBA, 0x9D, 0xA1, 0xA4, 0xAC, 0xB2, 0xB4, 0xC6, 0xC6, 0xC9, 0xAF, 0xAA, 0xAF, 0xAB, 
   0xA5, 0xAB, 0xA0, 0x9D, 0xA1, 0x9B, 0x9B, 0x9D, 0xA1, 0x9D, 0xA1, 0xA1, 0x9C, 0xA1, 0xA0, 0xA1, 
   0xA8, 0xA3, 0xA2, 0xAB, 0x97, 0x8A, 0x8A, 0x81, 0x6D, 0x62, 0x70, 0x5C, 0x52, 0x6F, 0x5A, 0x4D, 
   0x65, 0x54, 0x4A, 0x64, 0x5A, 0x4F, 0x8F, 0x82, 0x71, 0xB3, 0xA3, 0x99, 0x70, 0x59, 0x61, 0x32, 
   0x2B, 0x31, 0x29, 0x2D, 0x37, 0x24, 0x2F, 0x3B, 0x2B, 0x3A, 0x48, 0x3D, 0x45, 0x53, 0x47, 0x47, 
   0x4C, 0x70, 0x69, 0x6A, 0x8B, 0x83, 0x85, 0x8F, 0x88, 0x8B, 0x92, 0x86, 0x8D, 0x8A, 0x7A, 0x83, 
   0x88, 0x7C, 0x84, 0x8E, 0x83, 0x8B, 0x94, 0x87, 0x8E, 0x95, 0x8A, 0x92, 0x95, 0x89, 0x8F, 0x91, 
   0x85, 0x8A, 0x8D, 0x82, 0x87, 0x8B, 0x80, 0x85, 0x8F, 0x83, 0x8A, 0x91, 0x82, 0x8B, 0x92, 0x85, 
   0x8D, 0x90, 0x82, 0x8B, 0x95, 0x84, 0x8E, 0x96, 0x84, 0x91, 0x89, 0x7D, 0x8A, 0x76, 0x6F, 0x7A, 
   0x79, 0x6E, 0x79, 0x79, 0x70, 0x77, 0x7A, 0x72, 0x77, 0x7D, 0x71, 0x7B, 0x7D, 0x6F, 0x7C, 0x80, 
   0x74, 0x7D, 0x85, 0x78, 0x80, 0x7F, 0x72, 0x7B, 0x7E, 0x71, 0x7A, 0x88, 0x76, 0x80, 0x8E, 0x77, 
   0x83, 0x8B, 0x72, 0x7E, 0x8B, 0x74, 0x7E, 0x92, 0x7D, 0x84, 0x94, 0x7A, 0x85, 0x92, 0x78, 0x82, 
   0x8D, 0x76, 0x7F, 0x90, 0x7C, 0x88, 0x96, 0x86, 0x92, 0xA8, 0x9B, 0xA2, 0xA8, 0xA0, 0xA1, 0x9C, 
   0x92, 0x94, 0x9D, 0x92, 0x93, 0x9A, 0x8F, 0x8C, 0x93, 0x8A, 0x86, 0x92, 0x88, 0x85, 0x93, 0x87, 
   0x85, 0x93, 0x89, 0x88, 0x80, 0x7B, 0x7D, 0x77, 0x77, 0x7A, 0x7E, 0x7D, 0x82, 0x8C, 0x88, 0x8E, 
   0x88, 0x84, 0x8A, 0x8E, 0x8B, 0x95, 0x96, 0x94, 0x9F, 0x95, 0x92, 0x9A, 0x9A, 0x95, 0x99, 0x98, 
   0x91, 0x97, 0x97, 0x90, 0x99, 0x94, 0x92, 0x97, 0x95, 0x92, 0x98, 0x94, 0x90, 0x95, 0x9E, 0x9A, 
   0xA1, 0xA0, 0x98, 0x9E, 0x90, 0x89, 0x8A, 0xA3, 0xA3, 0xA4, 0xA3, 0x9E, 0xA0, 0x9D, 0x99, 0xA1, 
   0xB6, 0xB2, 0xBC, 0xB4, 0xA3, 0xB0, 0x8A, 0x7D, 0x85, 0x8E, 0x87, 0x8B, 0x97, 0x8C, 0x88, 0xBC, 
   0xAD, 0xB0, 0xB1, 0x9C, 0xA6, 0x9C, 0x92, 0x97, 0x96, 0x8D, 0x91, 0x96, 0x8A, 0x8B, 0x9D, 0x8D, 
   0x8B, 0x9B, 0x8D, 0x8B, 0xA3, 0x9C, 0x9B, 0xA0, 0x95, 0x9F, 0x83, 0x74, 0x85, 0x7F, 0x70, 0x81, 
   0x7E, 0x75, 0x85, 0x84, 0x76, 0x8A, 0x84, 0x78, 0x86, 0x88, 0x7B, 0x89, 0x88, 0x7B, 0x86, 0x81, 
   0x72, 0x81, 0x7A, 0x6B, 0x7E, 0x7B, 0x71, 0x7D, 0x74, 0x6A, 0x7C, 0x69, 0x5F, 0x75, 0x73, 0x6B, 
   0x7B, 0x80, 0x6F, 0x83, 0x81, 0x6B, 0x82, 0x79, 0x68, 0x7E, 0x7F, 0x6F, 0x86, 0x84, 0x71, 0x88, 
   0x86, 0x71, 0x85, 0x6F, 0x5D, 0x6D, 0x31, 0x39, 0x41, 0x4B, 0x50, 0x4F, 0x69, 0x6A, 0x68, 0x75, 
   0x75, 0x73, 0x8C, 0x8E, 0x89, 0x85, 0x86, 0x80, 0x67, 0x66, 0x62, 0x54, 0x53, 0x50, 0x4D, 0x4D, 
   0x4A, 0x4E, 0x4D, 0x4D, 0x6D, 0x72, 0x74, 0x90, 0x92, 0x99, 0x92, 0x8D, 0x97, 0x8E, 0x88, 0x93, 
   0x75, 0x6F, 0x7A, 0x47, 0x47, 0x53, 0x2E, 0x34, 0x42, 0x35, 0x3C, 0x49, 0x4B, 0x51, 0x5B, 0x52, 
   0x57, 0x64, 0x49, 0x51, 0x62, 0x49, 0x51, 0x64, 0x52, 0x59, 0x69, 0x56, 0x5A, 0x70, 0x55, 0x5B, 
   0x73, 0x54, 0x58, 0x71, 0x5C, 0x60, 0x79, 0x74, 0x72, 0x8D, 0x93, 0x88, 0xA0, 0x89, 0x81, 0x92, 
   0x81, 0x79, 0x91, 0x95, 0x93, 0xA6, 0xA3, 0xA6, 0xB8, 0x91, 0x96, 0xA6, 0x8C, 0x91, 0xA3, 0x8D, 
   0x90, 0xA6, 0x62, 0x65, 0x79, 0x3D, 0x3D, 0x4D, 0x4C, 0x4F, 0x59, 0x78, 0x7D, 0x85, 0x97, 0x99, 
   0x9E, 0x9A, 0x98, 0x9F, 0xA5, 0xA3, 0xA9, 0xAA, 0xA4, 0xA8, 0xAE, 0xA7, 0xA8, 0xA9, 0xA0, 0xA7, 
   0x9E, 0x98, 0xA1, 0x97, 0x98, 0x99, 0x9B, 0x97, 0x95, 0xA8, 0xA3, 0xA2, 0xA5, 0xA2, 0xA5, 0x98, 
   0x9B, 0xA0, 0x7F, 0x89, 0x8F, 0x8C, 0x93, 0x97, 0x87, 0x8A, 0x8C, 0x85, 0x88, 0x89, 0x82, 0x87, 
   0x89, 0x93, 0x96, 0x94, 0xA1, 0xA3, 0xA1, 0x87, 0x87, 0x89, 0x88, 0x8C, 0x8B, 0x83, 0x8C, 0x8F, 
   0x88, 0x90, 0x93, 0x9E, 0x9F, 0xA4, 0xC0, 0xB8, 0xC1, 0x94, 0x90, 0x99, 0x61, 0x61, 0x6B, 0x5E, 
   0x68, 0x72, 0x67, 0x77, 0x80, 0x74, 0x82, 0x8C, 0x83, 0x91, 0x9A, 0x92, 0x9A, 0xA2, 0x96, 0x9E, 
   0xA5, 0x9E, 0xA5, 0xB0, 0x9B, 0xA4, 0xB2, 0x6F, 0x7C, 0x8D, 0x62, 0x6E, 0x86, 0x52, 0x5C, 0x77, 
   0x54, 0x5F, 0x7A, 0x58, 0x64, 0x84, 0x52, 0x61, 0x80, 0x4B, 0x5B, 0x74, 0x49, 0x57, 0x6E, 0x50, 
   0x5C, 0x77, 0x57, 0x65, 0x7E, 0x49, 0x57, 0x6B, 0x43, 0x52, 0x65, 0x45, 0x58, 0x6F, 0x45, 0x5A, 
   0x70, 0x3A, 0x48, 0x58, 0x2F, 0x38, 0x3F, 0x2F, 0x36, 0x3A, 0x3F, 0x41, 0x42, 0x4E, 0x55, 0x52, 
   0x52, 0x57, 0x54, 0x5A, 0x5B, 0x54, 0x5C, 0x5C, 0x58, 0x60, 0x5C, 0x59, 0x5B, 0x5B, 0x56, 0x60, 
   0x63, 0x5F, 0x73, 0x78, 0x77, 0x9A, 0xA1, 0xA2, 0xC9, 0xD0, 0xD3, 0xCA, 0xD0, 0xD7, 0xA7, 0xAB, 
   0xB4, 0x9D, 0xA0, 0xA2, 0x9A, 0xA3, 0xA7, 0x90, 0x96, 0x9A, 0x72, 0x7D, 0x7E, 0x64, 0x73, 0x72, 
   0x6D, 0x79, 0x74, 0x68, 0x73, 0x6D, 0x61, 0x6B, 0x69, 0x5F, 0x6A, 0x67, 0x89, 0x94, 0x94, 0xB8, 
   0xBF, 0xC4, 0xAE, 0xB5, 0xB8, 0xAD, 0xB6, 0xB6, 0xB5, 0xBF, 0xC1, 0xB2, 0xBB, 0xBF, 0xA8, 0xAD, 
   0xB2, 0xAA, 0xAA, 0xB1, 0xAA, 0xA8, 0xAD, 0xA3, 0xA4, 0xA7, 0xB0, 0xB4, 0xB6, 0xC2, 0xC5, 0xC7, 
   0xB0, 0xB0, 0xB3, 0xA0, 0xA2, 0xA5, 0x95, 0x97, 0x9D, 0xAB, 0xA7, 0xAD, 0xA0, 0x98, 0x9C, 0x9A, 
   0x94, 0x97, 0x9B, 0x99, 0x9F, 0xA0, 0xA0, 0xA3, 0xA0, 0x9D, 0xA1, 0x97, 0x93, 0x9C, 0x97, 0x97, 
   0x9E, 0x92, 0x90, 0x94, 0x78, 0x69, 0x66, 0x76, 0x5F, 0x56, 0x6D, 0x5A, 0x51, 0x6F, 0x5E, 0x55, 
   0x70, 0x60, 0x5C, 0x6C, 0x5E, 0x5C, 0x84, 0x75, 0x72, 0x6F, 0x61, 0x66, 0x2D, 0x2D, 0x3B, 0x28, 
   0x31, 0x3A, 0x26, 0x34, 0x42, 0x30, 0x40, 0x50, 0x43, 0x50, 0x5E, 0x48, 0x4D, 0x5B, 0x42, 0x45, 
   0x4D, 0x55, 0x56, 0x57, 0x83, 0x7F, 0x81, 0x8D, 0x86, 0x8A, 0x96, 0x89, 0x8F, 0x91, 0x81, 0x88, 
   0x87, 0x7B, 0x83, 0x87, 0x81, 0x87, 0x8D, 0x85, 0x8A, 0x93, 0x86, 0x8E, 0x94, 0x8C, 0x91, 0x92, 
   0x8C, 0x91, 0x91, 0x88, 0x8D, 0x8D, 0x83, 0x88, 0x8D, 0x84, 0x8A, 0x90, 0x85, 0x8C, 0x92, 0x86, 
   0x8F, 0x8F, 0x83, 0x8C, 0x8F, 0x80, 0x8A, 0x92, 0x82, 0x8B, 0x9B, 0x90, 0x98, 0x8C, 0x83, 0x8C, 
   0x83, 0x76, 0x7F, 0x7E, 0x73, 0x77, 0x7D, 0x73, 0x76, 0x7F, 0x72, 0x7A, 0x7E, 0x6E, 0x78, 0x7E, 
   0x70, 0x77, 0x80, 0x6F, 0x7C, 0x70, 0x62, 0x6F, 0x7A, 0x6F, 0x7C, 0x83, 0x77, 0x84, 0x88, 0x76, 
   0x82, 0x8D, 0x77, 0x83, 0x8F, 0x78, 0x84, 0x96, 0x80, 0x84, 0x92, 0x79, 0x83, 0x8C, 0x74, 0x7E, 
   0x8A, 0x75, 0x80, 0x89, 0x76, 0x84, 0x93, 0x7E, 0x8D, 0x98, 0x81, 0x8D, 0x9D, 0x86, 0x91, 0x9C, 
   0x8B, 0x97, 0xA5, 0x9A, 0xA2, 0x9C, 0x96, 0x98, 0xA2, 0x9A, 0x99, 0xA4, 0x98, 0x9B, 0x9A, 0x8E, 
   0x92, 0x92, 0x8B, 0x8F, 0x93, 0x90, 0x92, 0x98, 0x95, 0x97, 0x8F, 0x8C, 0x8F, 0x8B, 0x89, 0x8C, 
   0x92, 0x94, 0x97, 0xAE, 0xAD, 0xB4, 0xA6, 0xA5, 0xAC, 0x8F, 0x91, 0x96, 0x89, 0x89, 0x8C, 0x92, 
   0x8C, 0x93, 0x96, 0x8E, 0x97, 0x92, 0x8E, 0x95, 0x92, 0x8F, 0x98, 0x9A, 0x95, 0x9C, 0xA0, 0x99, 
   0xA3, 0x9C, 0x91, 0x97, 0x96, 0x8C, 0x8D, 0x9C, 0x96, 0x99, 0xA2, 0x98, 0x9A, 0x9A, 0x96, 0x9C, 
   0xA1, 0x9B, 0xA4, 0x89, 0x77, 0x83, 0x72, 0x65, 0x6D, 0x94, 0x8A, 0x90, 0x9C, 0x8D, 0x8D, 0x9D, 
   0x8D, 0x92, 0xA1, 0x90, 0x97, 0x9C, 0x8F, 0x94, 0x9E, 0x90, 0x96, 0x9E, 0x93, 0x94, 0xA4, 0x96, 
   0x97, 0xA5, 0x93, 0x96, 0x9D, 0x91, 0x90, 0xAB, 0xA1, 0xA3, 0xB0, 0xA2, 0xAC, 0x8E, 0x7F, 0x8D, 
   0x7B, 0x72, 0x81, 0x86, 0x79, 0x8C, 0x86, 0x7D, 0x89, 0x8C, 0x7F, 0x8B, 0x8A, 0x7E, 0x89, 0x7F, 
   0x72, 0x83, 0x77, 0x68, 0x7D, 0x75, 0x6A, 0x7A, 0x72, 0x67, 0x7C, 0x6F, 0x67, 0x7D, 0x78, 0x6D, 
   0x7D, 0x83, 0x70, 0x85, 0x85, 0x6E, 0x88, 0x84, 0x72, 0x8A, 0x81, 0x71, 0x87, 0x83, 0x71, 0x85, 
   0x8B, 0x76, 0x86, 0x81, 0x6D, 0x80, 0x43, 0x4A, 0x4C, 0x73, 0x77, 0x73, 0x7B, 0x7C, 0x77, 0x77, 
   0x78, 0x77, 0x7C, 0x7F, 0x7D, 0x7C, 0x7F, 0x7C, 0x82, 0x82, 0x7C, 0x65, 0x66, 0x5F, 0x47, 0x47, 
   0x41, 0x50, 0x52, 0x50, 0x55, 0x5C, 0x5C, 0x5F, 0x63, 0x65, 0x4F, 0x4A, 0x52, 0x42, 0x3B, 0x48, 
   0x35, 0x30, 0x3E, 0x2C, 0x31, 0x3C, 0x34, 0x37, 0x43, 0x40, 0x44, 0x4E, 0x5E, 0x63, 0x6D, 0x57, 
   0x5B, 0x6B, 0x4F, 0x54, 0x64, 0x56, 0x5B, 0x69, 0x63, 0x68, 0x76, 0x59, 0x60, 0x74, 0x58, 0x5F, 
   0x75, 0x5A, 0x63, 0x79, 0x69, 0x74, 0x8C, 0x74, 0x7C, 0x97, 0x6D, 0x6F, 0x8A, 0x67, 0x6D, 0x84, 
   0x73, 0x77, 0x93, 0x99, 0x9A, 0xAE, 0xCC, 0xC9, 0xD4, 0xD4, 0xD0, 0xD3, 0xB5, 0xB2, 0xB9, 0x84, 
   0x86, 0x9B, 0x68, 0x6E, 0x89, 0x56, 0x5C, 0x73, 0x45, 0x4C, 0x5F, 0x62, 0x6B, 0x75, 0x96, 0x9A, 
   0x9A, 0xA7, 0xA7, 0xAC, 0xAC, 0xAB, 0xB2, 0xAE, 0xA9, 0xAE, 0xB0, 0xAB, 0xAB, 0xA7, 0xA2, 0xA4, 
   0x9A, 0x96, 0x9D, 0x99, 0x9A, 0x9B, 0xA7, 0xA3, 0xA4, 0xAE, 0xA7, 0xA9, 0xA4, 0xA1, 0xA3, 0xA4, 
   0xA1, 0xA5, 0x91, 0x8F, 0x95, 0x8E, 0x8E, 0x92, 0x88, 0x8D, 0x8C, 0x81, 0x87, 0x86, 0x7B, 0x83, 
   0x83, 0x8B, 0x90, 0x8C, 0x97, 0x9B, 0x9A, 0x7A, 0x80, 0x85, 0x80, 0x8A, 0x8E, 0x89, 0x92, 0x99, 
   0x9C, 0xA1, 0xA6, 0xAE, 0xAD, 0xB1, 0xAB, 0xA3, 0xAB, 0x64, 0x62, 0x6A, 0x56, 0x59, 0x62, 0x62, 
   0x6E, 0x77, 0x69, 0x79, 0x83, 0x73, 0x7E, 0x8A, 0x8F, 0x98, 0xA4, 0x8E, 0x95, 0x9F, 0x83, 0x8A, 
   0x95, 0x94, 0x99, 0xA5, 0xB3, 0xB9, 0xC5, 0xA9, 0xB4, 0xC1, 0x89, 0x94, 0xA6, 0x7C, 0x88, 0x9C, 
   0x6B, 0x7A, 0x90, 0x66, 0x78, 0x91, 0x68, 0x7D, 0x97, 0x61, 0x74, 0x8B, 0x5B, 0x65, 0x7D, 0x4D, 
   0x54, 0x6D, 0x57, 0x62, 0x7C, 0x52, 0x5F, 0x79, 0x48, 0x57, 0x6F, 0x42, 0x55, 0x6B, 0x43, 0x59, 
   0x70, 0x47, 0x59, 0x6E, 0x44, 0x51, 0x5E, 0x3C, 0x45, 0x4C, 0x3D, 0x41, 0x45, 0x45, 0x4B, 0x4A, 
   0x46, 0x4E, 0x49, 0x4D, 0x50, 0x4C, 0x56, 0x58, 0x55, 0x59, 0x5A, 0x5A, 0x59, 0x5D, 0x57, 0x62, 
   0x65, 0x62, 0x5E, 0x61, 0x61, 0x65, 0x69, 0x69, 0x8E, 0x93, 0x93, 0xB0, 0xB5, 0xB8, 0xA7, 0xAB, 
   0xB1, 0xAD, 0xB2, 0xB2, 0xA6, 0xAC, 0xAD, 0x89, 0x8B, 0x8D, 0x68, 0x74, 0x74, 0x65, 0x7B, 0x77, 
   0x75, 0x84, 0x80, 0x68, 0x74, 0x70, 0x62, 0x6E, 0x6A, 0x5D, 0x69, 0x64, 0x84, 0x92, 0x8F, 0xC1, 
   0xC8, 0xCF, 0xB1, 0xB5, 0xBD, 0xA0, 0xA8, 0xAC, 0xA8, 0xB1, 0xB3, 0xA4, 0xAC, 0xAC, 0xA0, 0xA6, 
   0xA8, 0xA2, 0xA4, 0xA9, 0xA5, 0xA7, 0xAC, 0xA2, 0xA5, 0xAA, 0xAA, 0xAE, 0xB2, 0xB6, 0xB7, 0xBC, 
   0xAF, 0xAF, 0xB3, 0xBB, 0xBD, 0xC1, 0xA0, 0x9F, 0xA7, 0xA0, 0x9A, 0xA1, 0x9C, 0x95, 0x98, 0x98, 
   0x95, 0x97, 0x9A, 0x98, 0x9F, 0x9C, 0x9D, 0xA2, 0x9E, 0x9E, 0xA4, 0x97, 0x95, 0x9E, 0x93, 0x92, 
   0x99, 0x87, 0x81, 0x85, 0x63, 0x54, 0x4F, 0x66, 0x55, 0x4E, 0x72, 0x65, 0x5D, 0x7C, 0x6D, 0x6B, 
   0x6D, 0x5E, 0x63, 0x4D, 0x45, 0x4D, 0x42, 0x3F, 0x48, 0x34, 0x3A, 0x47, 0x26, 0x35, 0x42, 0x2A, 
   0x39, 0x46, 0x3A, 0x47, 0x5A, 0x49, 0x55, 0x65, 0x47, 0x51, 0x5C, 0x49, 0x4C, 0x57, 0x47, 0x49, 
   0x51, 0x4B, 0x4F, 0x55, 0x74, 0x73, 0x78, 0x8F, 0x87, 0x8E, 0x92, 0x87, 0x8C, 0x8D, 0x82, 0x87, 
   0x87, 0x7F, 0x84, 0x85, 0x7F, 0x83, 0x89, 0x81, 0x85, 0x8F, 0x85, 0x88, 0x93, 0x8C, 0x8F, 0x92, 
   0x8C, 0x93, 0x93, 0x8A, 0x93, 0x92, 0x88, 0x8F, 0x8F, 0x87, 0x8B, 0x8C, 0x82, 0x88, 0x90, 0x85, 
   0x8C, 0x8E, 0x84, 0x8B, 0x8F, 0x83, 0x8B, 0x8D, 0x82, 0x87, 0x97, 0x91, 0x94, 0x9E, 0x93, 0x9A, 
   0x88, 0x77, 0x80, 0x7F, 0x6F, 0x77, 0x7D, 0x70, 0x78, 0x80, 0x72, 0x7A, 0x7E, 0x6E, 0x77, 0x7B, 
   0x6D, 0x75, 0x7B, 0x69, 0x78, 0x6F, 0x62, 0x73, 0x73, 0x69, 0x7D, 0x7B, 0x70, 0x83, 0x85, 0x76, 
   0x86, 0x8C, 0x79, 0x88, 0x8D, 0x78, 0x85, 0x8F, 0x7A, 0x80, 0x91, 0x77, 0x80, 0x91, 0x76, 0x81, 
   0x8E, 0x77, 0x83, 0x88, 0x76, 0x83, 0x9D, 0x8D, 0x9C, 0x98, 0x86, 0x96, 0x93, 0x7D, 0x8F, 0x90, 
   0x7F, 0x94, 0x98, 0x8A, 0x9E, 0x97, 0x89, 0x96, 0xA2, 0x93, 0x9C, 0xA7, 0x9B, 0xA5, 0x96, 0x8B, 
   0x95, 0x95, 0x8A, 0x93, 0x97, 0x91, 0x99, 0x9D, 0x99, 0x9E, 0xA3, 0x9E, 0xA3, 0x9F, 0x9D, 0xA2, 
   0xB0, 0xB3, 0xB7, 0xBF, 0xBD, 0xC1, 0xB7, 0xB4, 0xB7, 0xAB, 0xAB, 0xAB, 0x9A, 0x98, 0x98, 0x91, 
   0x8D, 0x91, 0x94, 0x8E, 0x93, 0x90, 0x8D, 0x91, 0x90, 0x8E, 0x94, 0x96, 0x93, 0x96, 0x98, 0x91, 
   0x99, 0x97, 0x8D, 0x93, 0x9C, 0x92, 0x93, 0x9C, 0x92, 0x98, 0x97, 0x8C, 0x90, 0x91, 0x8E, 0x8E, 
   0x93, 0x8D, 0x93, 0x71, 0x63, 0x6A, 0x76, 0x6F, 0x72, 0x98, 0x90, 0x96, 0x9A, 0x8D, 0x90, 0x97, 
   0x89, 0x8E, 0x9D, 0x90, 0x93, 0x9D, 0x90, 0x92, 0x9F, 0x91, 0x94, 0x9F, 0x94, 0x95, 0xAC, 0xA0, 
   0xA3, 0xAC, 0x99, 0x9D, 0xA0, 0x91, 0x91, 0x9A, 0x8E, 0x8F, 0xAB, 0xA0, 0xA5, 0xAB, 0x9D, 0xA8, 
   0x8A, 0x80, 0x90, 0x8A, 0x7C, 0x92, 0x87, 0x7F, 0x91, 0x8A, 0x7F, 0x8E, 0x84, 0x7A, 0x87, 0x79, 
   0x70, 0x82, 0x77, 0x68, 0x81, 0x7D, 0x6B, 0x81, 0x7C, 0x6B, 0x84, 0x76, 0x69, 0x84, 0x79, 0x6A, 
   0x7E, 0x80, 0x6C, 0x82, 0x85, 0x71, 0x89, 0x87, 0x75, 0x8C, 0x84, 0x73, 0x88, 0x84, 0x71, 0x86, 
   0x88, 0x73, 0x83, 0x85, 0x70, 0x84, 0x5C, 0x65, 0x68, 0x83, 0x88, 0x87, 0x85, 0x85, 0x80, 0x7E, 
   0x7E, 0x7B, 0x7E, 0x80, 0x81, 0x7F, 0x82, 0x82, 0x8A, 0x8B, 0x86, 0x86, 0x88, 0x81, 0x45, 0x49, 
   0x44, 0x3E, 0x42, 0x43, 0x4D, 0x51, 0x53, 0x47, 0x49, 0x48, 0x1A, 0x1A, 0x1C, 0x1D, 0x1B, 0x25, 
   0x26, 0x26, 0x32, 0x2B, 0x2F, 0x38, 0x3D, 0x3D, 0x4C, 0x4D, 0x4E, 0x5F, 0x59, 0x5A, 0x6F, 0x54, 
   0x56, 0x6C, 0x57, 0x59, 0x6C, 0x5C, 0x63, 0x72, 0x6B, 0x77, 0x83, 0x63, 0x69, 0x78, 0x62, 0x66, 
   0x7A, 0x64, 0x6A, 0x80, 0x64, 0x6F, 0x87, 0x65, 0x6D, 0x8B, 0x63, 0x66, 0x85, 0x6A, 0x72, 0x8D, 
   0x6A, 0x75, 0x95, 0x76, 0x7F, 0x9C, 0x8A, 0x90, 0xAB, 0x95, 0x99, 0xB0, 0x88, 0x8C, 0xA6, 0x61, 
   0x69, 0x8A, 0x4A, 0x59, 0x75, 0x45, 0x54, 0x66, 0x4E, 0x5A, 0x70, 0x65, 0x71, 0x7C, 0x83, 0x89, 
   0x87, 0xAB, 0xAC, 0xAF, 0xAB, 0xAD, 0xB1, 0xAD, 0xAC, 0xB0, 0xAE, 0xAC, 0xAD, 0xA3, 0xA0, 0xA1, 
   0x9E, 0x9A, 0xA1, 0xA5, 0xA4, 0xA7, 0xAD, 0xA6, 0xAB, 0xB0, 0xA8, 0xAF, 0xAD, 0xAC, 0xB1, 0xA9, 
   0xA7, 0xAC, 0x97, 0x95, 0x98, 0x90, 0x8F, 0x92, 0x8A, 0x89, 0x8D, 0x87, 0x88, 0x8A, 0x7D, 0x84, 
   0x83, 0x82, 0x86, 0x85, 0x7C, 0x7D, 0x7F, 0x75, 0x78, 0x7F, 0x85, 0x8C, 0x90, 0x94, 0x96, 0x9F, 
   0xAD, 0xAA, 0xB3, 0xAD, 0xA9, 0xB1, 0x62, 0x5E, 0x65, 0x4E, 0x50, 0x57, 0x65, 0x6B, 0x73, 0x69, 
   0x75, 0x7F, 0x6D, 0x7B, 0x88, 0x6D, 0x72, 0x83, 0x7F, 0x83, 0x94, 0x79, 0x86, 0x8E, 0x87, 0x96, 
   0xA1, 0xA0, 0xAA, 0xB6, 0xB7, 0xBC, 0xC7, 0xB8, 0xBE, 0xCA, 0xAD, 0xB5, 0xC4, 0xAE, 0xB8, 0xC7, 
   0xAA, 0xB7, 0xC5, 0xA5, 0xB4, 0xC3, 0xA4, 0xB5, 0xC6, 0x98, 0xA7, 0xB7, 0x98, 0xA2, 0xB1, 0x84, 
   0x90, 0x9D, 0x7B, 0x89, 0x99, 0x6E, 0x7E, 0x93, 0x5E, 0x6F, 0x84, 0x52, 0x64, 0x71, 0x50, 0x62, 
   0x71, 0x53, 0x65, 0x7B, 0x5A, 0x6B, 0x7F, 0x58, 0x63, 0x6F, 0x50, 0x54, 0x5E, 0x48, 0x4B, 0x4E, 
   0x42, 0x47, 0x45, 0x46, 0x49, 0x46, 0x4C, 0x50, 0x4B, 0x49, 0x50, 0x4E, 0x4C, 0x52, 0x4E, 0x59, 
   0x5D, 0x5B, 0x62, 0x65, 0x65, 0x66, 0x69, 0x67, 0x64, 0x67, 0x64, 0x67, 0x6B, 0x69, 0x7C, 0x81, 
   0x81, 0x8A, 0x8D, 0x8F, 0x7C, 0x82, 0x83, 0x6A, 0x72, 0x71, 0x64, 0x70, 0x6E, 0x64, 0x76, 0x74, 
   0x6E, 0x7F, 0x7E, 0x73, 0x7E, 0x7F, 0x6D, 0x76, 0x73, 0x6B, 0x76, 0x6E, 0xA0, 0xB1, 0xAA, 0xD2, 
   0xDA, 0xE0, 0xB4, 0xB6, 0xBE, 0xAD, 0xB3, 0xB4, 0xB0, 0xB5, 0xB5, 0xA5, 0xAC, 0xAB, 0xA4, 0xAB, 
   0xAC, 0xA2, 0xA8, 0xAD, 0xA0, 0xA6, 0xAB, 0xA2, 0xA7, 0xAC, 0xA4, 0xA7, 0xAC, 0xA3, 0xA4, 0xAA, 
   0xA2, 0xA3, 0xA7, 0xBC, 0xBF, 0xC4, 0xAE, 0xAE, 0xB6, 0xA3, 0x9E, 0xA4, 0x9C, 0x97, 0x99, 0x94, 
   0x96, 0x96, 0x95, 0x96, 0x9A, 0x9E, 0x9D, 0xA3, 0xA6, 0xA6, 0xAF, 0x96, 0x97, 0xA0, 0x9C, 0x98, 
   0xA5, 0x75, 0x6A, 0x77, 0x39, 0x2A, 0x2B, 0x31, 0x2B, 0x29, 0x42, 0x41, 0x3E, 0x45, 0x42, 0x49, 
   0x38, 0x3A, 0x46, 0x31, 0x3A, 0x45, 0x34, 0x3E, 0x4A, 0x32, 0x40, 0x4B, 0x35, 0x42, 0x52, 0x44, 
   0x56, 0x67, 0x54, 0x61, 0x73, 0x5A, 0x61, 0x6B, 0x4F, 0x54, 0x5A, 0x4B, 0x4C, 0x58, 0x47, 0x48, 
   0x52, 0x42, 0x45, 0x4E, 0x4E, 0x4D, 0x55, 0x68, 0x60, 0x6B, 0x83, 0x7A, 0x82, 0x88, 0x84, 0x8B, 
   0x86, 0x7F, 0x89, 0x84, 0x7A, 0x80, 0x85, 0x7C, 0x7F, 0x85, 0x7F, 0x7E, 0x91, 0x88, 0x8B, 0x98, 
   0x8D, 0x96, 0x97, 0x8C, 0x96, 0x93, 0x8A, 0x92, 0x92, 0x86, 0x8C, 0x8D, 0x80, 0x86, 0x8D, 0x81, 
   0x86, 0x91, 0x87, 0x8A, 0x94, 0x89, 0x8D, 0x9A, 0x90, 0x94, 0x9B, 0x97, 0x9A, 0xA5, 0x99, 0xA1, 
   0x92, 0x80, 0x89, 0x78, 0x66, 0x72, 0x75, 0x66, 0x73, 0x79, 0x6A, 0x75, 0x77, 0x69, 0x71, 0x77, 
   0x6A, 0x74, 0x75, 0x68, 0x76, 0x6D, 0x62, 0x73, 0x72, 0x69, 0x7B, 0x7C, 0x70, 0x80, 0x87, 0x78, 
   0x84, 0x8E, 0x7C, 0x88, 0x8E, 0x7A, 0x89, 0x8B, 0x78, 0x85, 0x93, 0x7A, 0x85, 0x97, 0x7B, 0x87, 
   0x90, 0x77, 0x84, 0x84, 0x73, 0x7D, 0xA3, 0x98, 0xA3, 0x9E, 0x92, 0xA0, 0x96, 0x83, 0x96, 0x91, 
   0x82, 0x9B, 0x92, 0x83, 0x9D, 0x97, 0x83, 0x96, 0x91, 0x7B, 0x88, 0x92, 0x82, 0x8E, 0x8E, 0x7F, 
   0x8D, 0x92, 0x7F, 0x8C, 0x8F, 0x80, 0x88, 0x90, 0x84, 0x89, 0x9C, 0x8F, 0x95, 0x9E, 0x96, 0xA2, 
   0xA4, 0xA2, 0xB3, 0xB4, 0xB0, 0xBB, 0xB5, 0xAF, 0xB2, 0xB9, 0xB0, 0xB0, 0xAE, 0xA6, 0xAA, 0x90, 
   0x8E, 0x93, 0x8B, 0x8C, 0x90, 0x8B, 0x8C, 0x90, 0x90, 0x8D, 0x91, 0x92, 0x8F, 0x90, 0x95, 0x8C, 
   0x94, 0x91, 0x8A, 0x8F, 0x98, 0x91, 0x92, 0x9A, 0x8E, 0x93, 0x87, 0x80, 0x81, 0x89, 0x86, 0x82, 
   0x90, 0x88, 0x8C, 0x6A, 0x60, 0x64, 0x79, 0x77, 0x76, 0x90, 0x89, 0x8F, 0x96, 0x8A, 0x8F, 0x92, 
   0x85, 0x8C, 0x9D, 0x90, 0x93, 0x9C, 0x90, 0x92, 0x9D, 0x90, 0x92, 0x9E, 0x94, 0x92, 0xAD, 0xA2, 
   0x9F, 0xA7, 0x97, 0x94, 0x9D, 0x8D, 0x89, 0x9B, 0x8C, 0x8C, 0x98, 0x8E, 0x8E, 0xB5, 0xAA, 0xAD, 
   0xAD, 0xA3, 0xB0, 0x8C, 0x80, 0x95, 0x86, 0x7E, 0x96, 0x85, 0x7C, 0x8F, 0x80, 0x73, 0x88, 0x7C, 
   0x6D, 0x86, 0x79, 0x67, 0x81, 0x7B, 0x68, 0x81, 0x7E, 0x6B, 0x83, 0x7B, 0x6A, 0x82, 0x7C, 0x6A, 
   0x80, 0x7E, 0x6C, 0x81, 0x80, 0x6F, 0x83, 0x84, 0x73, 0x85, 0x85, 0x72, 0x87, 0x86, 0x72, 0x89, 
   0x87, 0x72, 0x87, 0x86, 0x6E, 0x84, 0x5C, 0x61, 0x64, 0x81, 0x82, 0x83, 0x88, 0x86, 0x80, 0x7F, 
   0x7E, 0x78, 0x78, 0x7D, 0x7B, 0x77, 0x7D, 0x7E, 0x9A, 0xA4, 0xA1, 0xB5, 0xBE, 0xBA, 0x6B, 0x79, 
   0x76, 0x33, 0x3C, 0x3D, 0x3F, 0x41, 0x40, 0x33, 0x39, 0x33, 0x16, 0x19, 0x1F, 0x1E, 0x24, 0x2B, 
   0x21, 0x2A, 0x31, 0x28, 0x30, 0x37, 0x3B, 0x45, 0x53, 0x4E, 0x55, 0x69, 0x55, 0x59, 0x71, 0x59, 
   0x5E, 0x75, 0x5C, 0x62, 0x78, 0x66, 0x6C, 0x80, 0x6F, 0x72, 0x83, 0x6E, 0x6F, 0x85, 0x6B, 0x6D, 
   0x82, 0x68, 0x69, 0x82, 0x62, 0x65, 0x7F, 0x5E, 0x65, 0x80, 0x66, 0x71, 0x8D, 0x78, 0x85, 0x9F, 
   0x72, 0x7F, 0x9B, 0x82, 0x91, 0xAE, 0x7D, 0x8A, 0xAE, 0x6F, 0x7C, 0xA0, 0x63, 0x6E, 0x91, 0x4E, 
   0x58, 0x73, 0x4F, 0x5A, 0x6A, 0x60, 0x6B, 0x73, 0x6D, 0x78, 0x84, 0x72, 0x79, 0x83, 0x75, 0x79, 
   0x7A, 0xA4, 0xA7, 0xA9, 0xB2, 0xB5, 0xB9, 0xAD, 0xAD, 0xAE, 0xB0, 0xB0, 0xAF, 0x9B, 0x9C, 0x9C, 
   0x9E, 0x9E, 0x9F, 0xAA, 0xA6, 0xAA, 0xAE, 0xA6, 0xAE, 0xB3, 0xAD, 0xB1, 0xBC, 0xBB, 0xC0, 0xB6, 
   0xB5, 0xC2, 0xAC, 0xA8, 0xB0, 0xA4, 0xA2, 0xA6, 0x8B, 0x8D, 0x8D, 0x8E, 0x8E, 0x93, 0x87, 0x88, 
   0x8E, 0x89, 0x8A, 0x8B, 0x74, 0x79, 0x7B, 0x77, 0x7E, 0x84, 0x8D, 0x92, 0x98, 0x97, 0x97, 0xA0, 
   0xA3, 0x9D, 0xAB, 0x78, 0x6F, 0x7A, 0x3B, 0x40, 0x49, 0x57, 0x5E, 0x66, 0x64, 0x6F, 0x76, 0x67, 
   0x74, 0x7D, 0x6C, 0x76, 0x83, 0x65, 0x6D, 0x7F, 0x70, 0x7D, 0x8F, 0x8F, 0x9F, 0xA4, 0xB2, 0xBD, 
   0xC3, 0xBA, 0xBF, 0xC9, 0xB8, 0xBA, 0xC8, 0xB8, 0xB8, 0xC6, 0xB0, 0xB1, 0xBE, 0xAE, 0xB1, 0xBD, 
   0xB3, 0xB8, 0xC4, 0xB1, 0xB7, 0xC5, 0xB0, 0xB8, 0xC6, 0xB2, 0xB6, 0xC5, 0xB6, 0xB5, 0xC2, 0xC0, 
   0xBF, 0xC8, 0xBB, 0xBB, 0xC4, 0xA7, 0xAA, 0xB5, 0xA0, 0xA7, 0xB4, 0x93, 0x9E, 0xA9, 0x89, 0x95, 
   0x9F, 0x73, 0x81, 0x91, 0x5F, 0x70, 0x88, 0x50, 0x5F, 0x76, 0x59, 0x67, 0x79, 0x75, 0x7C, 0x83, 
   0x50, 0x56, 0x53, 0x3A, 0x40, 0x3A, 0x40, 0x42, 0x3E, 0x45, 0x48, 0x46, 0x4C, 0x4F, 0x4A, 0x52, 
   0x52, 0x51, 0x5A, 0x5B, 0x5D, 0x5F, 0x60, 0x61, 0x5D, 0x60, 0x60, 0x53, 0x57, 0x58, 0x5F, 0x63, 
   0x66, 0x67, 0x6C, 0x6D, 0x60, 0x66, 0x65, 0x64, 0x6F, 0x6B, 0x62, 0x70, 0x6B, 0x60, 0x6E, 0x6D, 
   0x6A, 0x79, 0x77, 0x70, 0x7F, 0x7F, 0x6D, 0x74, 0x76, 0x68, 0x73, 0x6F, 0x9D, 0xAC, 0xA6, 0xC3, 
   0xCA, 0xCB, 0xAD, 0xB1, 0xB7, 0xBA, 0xC1, 0xC7, 0xC9, 0xCF, 0xD3, 0xBC, 0xC0, 0xC3, 0xA8, 0xAA, 
   0xAD, 0xA6, 0xA9, 0xAD, 0xA1, 0xA7, 0xAD, 0x9F, 0xA6, 0xAD, 0x9F, 0xA6, 0xAB, 0x9F, 0xA4, 0xA9, 
   0xA0, 0xA5, 0xAA, 0xBC, 0xBF, 0xC4, 0xB0, 0xAE, 0xB4, 0x9D, 0x9B, 0xA1, 0x9A, 0x99, 0x9E, 0x97, 
   0x9A, 0x9E, 0xA0, 0x9E, 0xA5, 0x9F, 0x9E, 0xA5, 0xA6, 0xA4, 0xAA, 0x9A, 0x97, 0xA1, 0x92, 0x8B, 
   0x9C, 0x57, 0x4A, 0x5C, 0x18, 0x15, 0x1E, 0x20, 0x26, 0x2D, 0x27, 0x31, 0x3A, 0x2B, 0x35, 0x45, 
   0x2F, 0x3A, 0x4C, 0x32, 0x3F, 0x4D, 0x35, 0x42, 0x51, 0x32, 0x43, 0x4F, 0x46, 0x50, 0x60, 0x5C, 
   0x67, 0x74, 0x65, 0x6D, 0x7B, 0x63, 0x66, 0x70, 0x51, 0x52, 0x59, 0x49, 0x4A, 0x56, 0x49, 0x47, 
   0x53, 0x47, 0x49, 0x4E, 0x3C, 0x3E, 0x44, 0x3D, 0x39, 0x40, 0x46, 0x42, 0x46, 0x5A, 0x57, 0x5B, 
   0x6E, 0x67, 0x6E, 0x7F, 0x7A, 0x80, 0x86, 0x83, 0x86, 0x84, 0x7F, 0x7F, 0x89, 0x81, 0x84, 0x9C, 
   0x91, 0x9A, 0x9F, 0x94, 0x9D, 0x98, 0x8B, 0x96, 0x96, 0x88, 0x92, 0x93, 0x86, 0x8C, 0x8E, 0x84, 
   0x8B, 0x8F, 0x85, 0x8D, 0x95, 0x8B, 0x92, 0x9A, 0x90, 0x98, 0x98, 0x8F, 0x97, 0xAB, 0x9E, 0xA5, 
   0xAE, 0x9D, 0xA4, 0x91, 0x82, 0x89, 0x7B, 0x72, 0x7A, 0x73, 0x6C, 0x72, 0x7E, 0x73, 0x7A, 0x7E, 
   0x73, 0x7C, 0x7E, 0x6E, 0x7B, 0x6D, 0x5F, 0x72, 0x77, 0x6E, 0x7E, 0x7F, 0x75, 0x84, 0x88, 0x7B, 
   0x87, 0x8E, 0x7D, 0x85, 0x90, 0x7A, 0x86, 0x8B, 0x79, 0x88, 0x90, 0x7E, 0x8C, 0x94, 0x7C, 0x89, 
   0x94, 0x7A, 0x80, 0x8C, 0x7A, 0x7D, 0x98, 0x89, 0x8D, 0x98, 0x86, 0x8A, 0x95, 0x81, 0x8A, 0x97, 
   0x81, 0x91, 0x9B, 0x88, 0x9C, 0x9D, 0x8D, 0xA0, 0x94, 0x82, 0x8F, 0x94, 0x7F, 0x8B, 0x93, 0x7F, 
   0x90, 0x92, 0x80, 0x8E, 0x93, 0x7D, 0x89, 0x94, 0x7F, 0x8A, 0x91, 0x81, 0x90, 0x8E, 0x8A, 0xA2, 
   0x92, 0x96, 0xB1, 0x9E, 0xA0, 0xB8, 0xA6, 0x9E, 0xAE, 0x9E, 0x92, 0x98, 0x90, 0x8D, 0x8D, 0x8E, 
   0x8C, 0x8C, 0x91, 0x8D, 0x8F, 0x8D, 0x8D, 0x90, 0x8D, 0x8C, 0x8C, 0x90, 0x8C, 0x8C, 0x94, 0x89, 
   0x91, 0x99, 0x94, 0x99, 0xA5, 0xA2, 0xA6, 0xA2, 0x9A, 0xA3, 0xA1, 0x97, 0x9B, 0x9F, 0x9C, 0x9B, 
   0xBA, 0xB7, 0xBC, 0xA1, 0x9B, 0xA2, 0x97, 0x90, 0x90, 0x98, 0x8D, 0x94, 0x8F, 0x86, 0x8D, 0x8D, 
   0x86, 0x8B, 0x9A, 0x8E, 0x93, 0x9B, 0x90, 0x91, 0x9B, 0x8F, 0x90, 0x9C, 0x8F, 0x91, 0xA2, 0x94, 
   0x95, 0xA0, 0x91, 0x8F, 0x9B, 0x8D, 0x88, 0x9D, 0x8F, 0x8F, 0x8F, 0x81, 0x82, 0x9A, 0x8C, 0x8A, 
   0xB8, 0xAD, 0xAE, 0x9F, 0x92, 0xA3, 0x86, 0x7C, 0x94, 0x84, 0x7B, 0x92, 0x82, 0x74, 0x8D, 0x7E, 
   0x6B, 0x86, 0x79, 0x65, 0x80, 0x7B, 0x68, 0x81, 0x7A, 0x6A, 0x7F, 0x76, 0x69, 0x7C, 0x77, 0x6C, 
   0x7C, 0x7E, 0x70, 0x82, 0x7D, 0x6E, 0x7F, 0x83, 0x73, 0x81, 0x83, 0x71, 0x81, 0x87, 0x74, 0x83, 
   0x89, 0x74, 0x87, 0x8C, 0x74, 0x8B, 0x5E, 0x61, 0x64, 0x77, 0x75, 0x75, 0x9A, 0x97, 0x8D, 0x97, 
   0x95, 0x88, 0x87, 0x88, 0x7F, 0x99, 0x9A, 0x94, 0xB2, 0xB9, 0xB4, 0xDC, 0xE2, 0xE0, 0xAE, 0xB8, 
   0xBB, 0x5B, 0x67, 0x6B, 0x39, 0x42, 0x43, 0x41, 0x4C, 0x48, 0x28, 0x2E, 0x36, 0x19, 0x1F, 0x26, 
   0x1F, 0x27, 0x2E, 0x28, 0x2C, 0x38, 0x38, 0x42, 0x55, 0x4C, 0x54, 0x6C, 0x55, 0x5B, 0x74, 0x5F, 
   0x65, 0x7E, 0x5F, 0x66, 0x80, 0x66, 0x6A, 0x84, 0x73, 0x70, 0x85, 0x6F, 0x74, 0x8B, 0x67, 0x72, 
   0x88, 0x64, 0x6F, 0x88, 0x6D, 0x77, 0x8D, 0x79, 0x85, 0x9D, 0x7D, 0x88, 0xA8, 0x7E, 0x86, 0xA9, 
   0x7F, 0x8C, 0xAC, 0x7B, 0x88, 0xA9, 0x6B, 0x78, 0x9E, 0x4F, 0x5D, 0x81, 0x48, 0x56, 0x72, 0x5C, 
   0x65, 0x75, 0x64, 0x68, 0x6F, 0x63, 0x67, 0x6A, 0x6E, 0x73, 0x78, 0x72, 0x73, 0x7C, 0x71, 0x72, 
   0x78, 0x9A, 0x9E, 0xA3, 0xCC, 0xD0, 0xD3, 0xC4, 0xC8, 0xC7, 0xC0, 0xC2, 0xC2, 0xAD, 0xAF, 0xB0, 
   0xAC, 0xAC, 0xAE, 0xC5, 0xC2, 0xC5, 0xC5, 0xC0, 0xC7, 0xBC, 0xB9, 0xC0, 0xBE, 0xBC, 0xC5, 0xC0, 
   0xBD, 0xCA, 0xBB, 0xB5, 0xBF, 0xB3, 0xB0, 0xB4, 0xA8, 0xAB, 0xAD, 0xA8, 0xA9, 0xB1, 0x94, 0x95, 
   0x9E, 0x85, 0x84, 0x8A, 0x79, 0x80, 0x85, 0x89, 0x92, 0x9C, 0x9D, 0xA1, 0xAB, 0xA0, 0x9E, 0xA9, 
   0x89, 0x85, 0x95, 0x4E, 0x4B, 0x56, 0x48, 0x50, 0x52, 0x61, 0x69, 0x6D, 0x64, 0x71, 0x79, 0x65, 
   0x74, 0x7F, 0x66, 0x71, 0x80, 0x62, 0x6E, 0x7F, 0x7E, 0x8F, 0x9E, 0xA2, 0xAE, 0xB5, 0xB7, 0xBC, 
   0xC2, 0xB9, 0xBA, 0xC2, 0xB8, 0xB6, 0xC3, 0xB7, 0xB5, 0xC3, 0xAF, 0xAF, 0xBA, 0xAC, 0xAD, 0xB7, 
   0xB3, 0xB5, 0xC1, 0xB2, 0xB8, 0xC4, 0xAD, 0xB3, 0xC0, 0xB1, 0xB4, 0xC1, 0xB0, 0xAF, 0xBB, 0xB3, 
   0xB0, 0xB9, 0xB0, 0xAD, 0xB6, 0xB0, 0xAF, 0xB9, 0xBA, 0xBE, 0xC8, 0xC3, 0xC9, 0xD3, 0xC3, 0xC8, 
   0xD0, 0xB5, 0xBC, 0xC6, 0x95, 0x9C, 0xB1, 0x63, 0x6D, 0x84, 0x4D, 0x5E, 0x71, 0x78, 0x86, 0x96, 
   0x72, 0x7C, 0x88, 0x5A, 0x5F, 0x67, 0x42, 0x44, 0x48, 0x40, 0x47, 0x48, 0x46, 0x4A, 0x4C, 0x4B, 
   0x4C, 0x51, 0x4E, 0x51, 0x53, 0x53, 0x5A, 0x5A, 0x55, 0x5D, 0x5B, 0x54, 0x5C, 0x5B, 0x57, 0x63, 
   0x63, 0x60, 0x6B, 0x6F, 0x63, 0x6E, 0x6C, 0x64, 0x72, 0x6E, 0x64, 0x74, 0x71, 0x66, 0x73, 0x73, 
   0x68, 0x76, 0x73, 0x65, 0x74, 0x75, 0x60, 0x68, 0x6B, 0x62, 0x69, 0x64, 0x77, 0x81, 0x78, 0xAE, 
   0xB3, 0xAF, 0xBF, 0xC5, 0xCA, 0xC2, 0xC9, 0xCF, 0xB8, 0xBD, 0xC1, 0xB1, 0xB6, 0xB6, 0xA8, 0xAC, 
   0xAF, 0xA3, 0xA7, 0xAC, 0x9F, 0xA3, 0xA9, 0xA0, 0xA4, 0xAB, 0x9D, 0xA2, 0xAB, 0x9B, 0xA0, 0xA7, 
   0x9E, 0xA2, 0xA7, 0xA9, 0xA8, 0xAD, 0xA6, 0xA1, 0xA8, 0x9A, 0x98, 0x9D, 0x9C, 0x99, 0x9E, 0x96, 
   0x97, 0x99, 0x96, 0x95, 0x99, 0x9B, 0x9A, 0x9E, 0x99, 0x96, 0x9C, 0x93, 0x90, 0x9C, 0x7D, 0x78, 
   0x89, 0x3F, 0x38, 0x49, 0x21, 0x2A, 0x33, 0x2B, 0x33, 0x3E, 0x2D, 0x38, 0x45, 0x2F, 0x3A, 0x4B, 
   0x32, 0x3E, 0x4B, 0x34, 0x42, 0x49, 0x32, 0x43, 0x51, 0x41, 0x54, 0x66, 0x53, 0x5C, 0x6A, 0x5B, 
   0x61, 0x69, 0x65, 0x6A, 0x72, 0x69, 0x6A, 0x73, 0x5A, 0x59, 0x64, 0x4F, 0x50, 0x5C, 0x4D, 0x4C, 
   0x54, 0x4E, 0x4B, 0x4E, 0x42, 0x43, 0x48, 0x3E, 0x3E, 0x46, 0x3B, 0x3E, 0x45, 0x3E, 0x44, 0x46, 
   0x36, 0x34, 0x39, 0x2E, 0x2B, 0x30, 0x54, 0x53, 0x53, 0x85, 0x7F, 0x7F, 0x8F, 0x84, 0x8A, 0x9C, 
   0x90, 0x98, 0x9F, 0x96, 0x9B, 0x99, 0x90, 0x97, 0x97, 0x8D, 0x97, 0x93, 0x89, 0x92, 0x93, 0x89, 
   0x92, 0x8B, 0x82, 0x8D, 0x8E, 0x85, 0x8E, 0x99, 0x8E, 0x98, 0x93, 0x88, 0x92, 0x94, 0x8E, 0x93, 
   0x9F, 0x95, 0x9A, 0x9F, 0x96, 0x9B, 0x97, 0x90, 0x94, 0x8D, 0x83, 0x87, 0x8C, 0x7E, 0x82, 0x66, 
   0x59, 0x5B, 0x5B, 0x54, 0x59, 0x6D, 0x66, 0x72, 0x7B, 0x74, 0x82, 0x83, 0x79, 0x89, 0x88, 0x78, 
   0x88, 0x8E, 0x79, 0x84, 0x95, 0x7D, 0x82, 0x92, 0x7E, 0x8A, 0x8F, 0x80, 0x8D, 0x93, 0x80, 0x8D, 
   0x92, 0x7D, 0x88, 0x90, 0x80, 0x8D, 0x94, 0x7F, 0x8E, 0x95, 0x7C, 0x87, 0x92, 0x7A, 0x85, 0x91, 
   0x79, 0x85, 0x93, 0x7E, 0x8D, 0x94, 0x82, 0x91, 0x91, 0x82, 0x89, 0x90, 0x7F, 0x86, 0x90, 0x7F, 
   0x8C, 0x95, 0x84, 0x92, 0x9B, 0x86, 0x93, 0x9B, 0x85, 0x91, 0x8C, 0x7B, 0x8C, 0x88, 0x84, 0x9F, 
   0x84, 0x89, 0xA8, 0x80, 0x80, 0xA2, 0x83, 0x7E, 0x98, 0x96, 0x91, 0x9F, 0xAA, 0xAA, 0xAB, 0x92, 
   0x92, 0x8F, 0x9E, 0x97, 0x98, 0x99, 0x93, 0x97, 0x8F, 0x8A, 0x8D, 0x91, 0x8D, 0x91, 0x85, 0x7F, 
   0x8A, 0x80, 0x82, 0x88, 0x93, 0x96, 0x9C, 0x9A, 0x98, 0x9F, 0xA4, 0x9B, 0x9D, 0xA3, 0xA3, 0x9F, 
   0xD7, 0xD5, 0xD7, 0xBE, 0xAE, 0xB6, 0x9A, 0x8B, 0x8D, 0x9E, 0x8E, 0x96, 0x93, 0x81, 0x8D, 0x95, 
   0x88, 0x91, 0x97, 0x8C, 0x93, 0x9A, 0x8F, 0x92, 0x9C, 0x90, 0x93, 0x95, 0x87, 0x8C, 0x9A, 0x8B, 
   0x90, 0xA0, 0x91, 0x93, 0x9F, 0x90, 0x90, 0xA4, 0x94, 0x96, 0xAC, 0x9C, 0x9E, 0x9D, 0x90, 0x8E, 
   0x9F, 0x95, 0x94, 0xA7, 0x99, 0xA5, 0x90, 0x84, 0x97, 0x84, 0x79, 0x8F, 0x81, 0x73, 0x8C, 0x7A, 
   0x69, 0x85, 0x76, 0x66, 0x80, 0x77, 0x68, 0x7D, 0x73, 0x66, 0x77, 0x70, 0x66, 0x75, 0x73, 0x69, 
   0x78, 0x80, 0x72, 0x85, 0x81, 0x75, 0x87, 0x7E, 0x71, 0x80, 0x81, 0x71, 0x81, 0x87, 0x73, 0x83, 
   0x8C, 0x74, 0x89, 0x8A, 0x75, 0x8A, 0x6C, 0x6C, 0x6A, 0x99, 0x95, 0x94, 0xBE, 0xBA, 0xB5, 0xB1, 
   0xAC, 0xA6, 0x96, 0x92, 0x8D, 0x9C, 0x95, 0x91, 0xAF, 0xB2, 0xAD, 0xD1, 0xD6, 0xD4, 0xC2, 0xCA, 
   0xCC, 0xC2, 0xCF, 0xD3, 0xB5, 0xC5, 0xC9, 0x7C, 0x8B, 0x8C, 0x4A, 0x55, 0x5D, 0x21, 0x27, 0x2C, 
   0x15, 0x1D, 0x25, 0x25, 0x2B, 0x3A, 0x3E, 0x45, 0x5C, 0x4C, 0x54, 0x6C, 0x54, 0x5B, 0x71, 0x5A, 
   0x60, 0x78, 0x63, 0x69, 0x86, 0x66, 0x6B, 0x87, 0x72, 0x73, 0x8A, 0x6D, 0x74, 0x8E, 0x66, 0x73, 
   0x8E, 0x70, 0x7E, 0x96, 0x88, 0x94, 0xA5, 0x95, 0x9E, 0xB2, 0x86, 0x8C, 0xAE, 0x7E, 0x86, 0xAA, 
   0x6D, 0x7E, 0xA4, 0x5E, 0x6C, 0x8E, 0x4B, 0x58, 0x76, 0x48, 0x58, 0x6E, 0x62, 0x70, 0x7D, 0x7A, 
   0x7F, 0x85, 0x63, 0x64, 0x66, 0x5C, 0x5F, 0x5E, 0x6A, 0x6B, 0x6B, 0x6D, 0x6F, 0x73, 0x66, 0x69, 
   0x6F, 0x63, 0x67, 0x6D, 0x87, 0x8B, 0x8E, 0xAB, 0xAC, 0xAB, 0xA9, 0xA2, 0xA4, 0x8E, 0x87, 0x8D, 
   0x89, 0x85, 0x8E, 0x81, 0x7A, 0x81, 0x71, 0x65, 0x6B, 0x6F, 0x65, 0x6D, 0x6C, 0x66, 0x6E, 0x7B, 
   0x75, 0x80, 0x93, 0x89, 0x90, 0x87, 0x7E, 0x81, 0x79, 0x74, 0x7A, 0x7D, 0x76, 0x84, 0x91, 0x8C, 
   0x96, 0x9B, 0x98, 0xA2, 0x97, 0x9E, 0xA8, 0x94, 0x9C, 0xA9, 0x9B, 0x9D, 0xA9, 0x9A, 0x99, 0xA7, 
   0x71, 0x73, 0x82, 0x47, 0x4F, 0x59, 0x5D, 0x67, 0x6E, 0x66, 0x73, 0x79, 0x70, 0x7E, 0x87, 0x6A, 
   0x7A, 0x83, 0x63, 0x70, 0x7B, 0x69, 0x77, 0x82, 0x8C, 0x9D, 0xA9, 0xAB, 0xB3, 0xBD, 0xBB, 0xBD, 
   0xC6, 0xB9, 0xB9, 0xC1, 0xB0, 0xB1, 0xBA, 0xB1, 0xAF, 0xBD, 0xAF, 0xAE, 0xBB, 0xAE, 0xAE, 0xBB, 
   0xAB, 0xAC, 0xB9, 0xA8, 0xAB, 0xB9, 0xAB, 0xAF, 0xBC, 0xAE, 0xB1, 0xBE, 0xAF, 0xAF, 0xBB, 0xAF, 
   0xAF, 0xB8, 0xAF, 0xAF, 0xB9, 0xAE, 0xAF, 0xBB, 0xB0, 0xB1, 0xBD, 0xB4, 0xB3, 0xBE, 0xB9, 0xB7, 
   0xBE, 0xBC, 0xBA, 0xC2, 0xB8, 0xB3, 0xC1, 0xA7, 0xA8, 0xB9, 0x88, 0x92, 0xA5, 0x65, 0x71, 0x86, 
   0x61, 0x6E, 0x82, 0x65, 0x6F, 0x80, 0x4E, 0x58, 0x61, 0x35, 0x43, 0x45, 0x32, 0x3A, 0x40, 0x3C, 
   0x3C, 0x42, 0x44, 0x47, 0x49, 0x49, 0x52, 0x52, 0x4F, 0x57, 0x58, 0x4A, 0x52, 0x53, 0x4E, 0x5E, 
   0x5C, 0x58, 0x66, 0x6A, 0x5D, 0x6A, 0x67, 0x62, 0x71, 0x6E, 0x65, 0x74, 0x75, 0x69, 0x76, 0x76, 
   0x68, 0x74, 0x72, 0x5F, 0x6C, 0x71, 0x5F, 0x69, 0x6B, 0x70, 0x77, 0x70, 0x7E, 0x87, 0x7C, 0xA0, 
   0xAA, 0xA5, 0xD0, 0xDC, 0xDF, 0xDD, 0xE4, 0xE8, 0xBC, 0xBE, 0xBE, 0x9C, 0xA1, 0x9E, 0xA0, 0xA7, 
   0xA8, 0xA3, 0xAA, 0xAC, 0xA1, 0xA4, 0xA5, 0x9F, 0x9F, 0xA3, 0x9B, 0x9D, 0xA5, 0x93, 0x99, 0x9E, 
   0x93, 0x9A, 0x9E, 0x9E, 0xA1, 0xA6, 0xA0, 0x9E, 0xA4, 0x99, 0x99, 0x9E, 0x97, 0x98, 0x9A, 0x94, 
   0x98, 0x97, 0x93, 0x97, 0x96, 0x98, 0x98, 0x9B, 0x94, 0x92, 0x9E, 0x86, 0x85, 0x97, 0x71, 0x6D, 
   0x7E, 0x31, 0x33, 0x3F, 0x21, 0x31, 0x37, 0x2A, 0x33, 0x41, 0x30, 0x36, 0x43, 0x32, 0x38, 0x46, 
   0x2F, 0x3C, 0x47, 0x2E, 0x41, 0x4B, 0x33, 0x45, 0x57, 0x42, 0x51, 0x66, 0x58, 0x59, 0x67, 0x5E, 
   0x5E, 0x66, 0x66, 0x68, 0x6D, 0x69, 0x68, 0x6F, 0x60, 0x5E, 0x6B, 0x59, 0x59, 0x65, 0x52, 0x54, 
   0x5A, 0x47, 0x4F, 0x54, 0x44, 0x4B, 0x4C, 0x43, 0x46, 0x47, 0x3F, 0x44, 0x44, 0x3D, 0x45, 0x44, 
   0x35, 0x38, 0x3E, 0x20, 0x20, 0x27, 0x0F, 0x0F, 0x0E, 0x2B, 0x2A, 0x2A, 0x56, 0x52, 0x55, 0x69, 
   0x61, 0x65, 0x6B, 0x65, 0x67, 0x86, 0x84, 0x84, 0x96, 0x93, 0x96, 0x98, 0x92, 0x98, 0x9D, 0x97, 
   0x9B, 0x9F, 0x9D, 0xA0, 0xAB, 0xA5, 0xAB, 0xB3, 0xA8, 0xAD, 0x9E, 0x93, 0x98, 0x93, 0x87, 0x8E, 
   0x9E, 0x92, 0x9A, 0x9C, 0x90, 0x97, 0x94, 0x89, 0x8E, 0x8C, 0x81, 0x85, 0x70, 0x68, 0x68, 0x50, 
   0x4C, 0x4C, 0x4A, 0x47, 0x4B, 0x64, 0x63, 0x68, 0x80, 0x7F, 0x84, 0x8A, 0x85, 0x8B, 0x90, 0x82, 
   0x8D, 0x93, 0x7D, 0x8A, 0x9A, 0x7F, 0x86, 0x97, 0x7D, 0x89, 0x94, 0x7E, 0x8C, 0x8F, 0x7A, 0x8D, 
   0x8E, 0x7D, 0x8F, 0x8D, 0x81, 0x97, 0x8C, 0x7F, 0x96, 0x8F, 0x7C, 0x8D, 0x96, 0x81, 0x89, 0x95, 
   0x82, 0x88, 0x97, 0x82, 0x8B, 0x99, 0x82, 0x8F, 0x97, 0x86, 0x96, 0x99, 0x89, 0x9E, 0x95, 0x86, 
   0x9C, 0x93, 0x88, 0x9E, 0xA3, 0x9A, 0xB2, 0x9D, 0x8F, 0xA5, 0x96, 0x89, 0x9E, 0x98, 0x96, 0xAF, 
   0x91, 0x92, 0xAD, 0x92, 0x8A, 0xA7, 0x94, 0x8B, 0x9F, 0x9A, 0x8F, 0x9D, 0xA6, 0x9E, 0xA5, 0xC4, 
   0xBD, 0xBB, 0xB3, 0xA3, 0xA1, 0x98, 0x8D, 0x8D, 0x94, 0x8A, 0x8A, 0x92, 0x8D, 0x94, 0x7B, 0x7B, 
   0x85, 0x81, 0x88, 0x90, 0x8A, 0x8D, 0x98, 0x8E, 0x8F, 0x98, 0x97, 0x92, 0x97, 0x95, 0x99, 0x98, 
   0xB6, 0xB3, 0xB7, 0x9F, 0x8D, 0x95, 0x7A, 0x72, 0x73, 0x94, 0x8F, 0x93, 0x99, 0x8B, 0x93, 0x98, 
   0x8E, 0x91, 0x91, 0x87, 0x8A, 0x9B, 0x91, 0x93, 0xA2, 0x97, 0x98, 0xA0, 0x95, 0x95, 0x9E, 0x92, 
   0x92, 0x9E, 0x92, 0x92, 0x9F, 0x91, 0x92, 0xA6, 0x96, 0x97, 0xAB, 0x9C, 0x9C, 0x9F, 0x92, 0x8E, 
   0x9C, 0x91, 0x8E, 0xB0, 0xA3, 0xA8, 0xB2, 0xA2, 0xB0, 0x8A, 0x7B, 0x90, 0x80, 0x71, 0x8C, 0x77, 
   0x69, 0x85, 0x70, 0x67, 0x7F, 0x71, 0x69, 0x7B, 0x78, 0x6E, 0x7B, 0x77, 0x6D, 0x7A, 0x77, 0x6A, 
   0x7A, 0x77, 0x6B, 0x7F, 0x76, 0x6C, 0x7E, 0x7B, 0x6D, 0x7D, 0x80, 0x6D, 0x7F, 0x87, 0x72, 0x83, 
   0x89, 0x73, 0x88, 0x86, 0x74, 0x88, 0x71, 0x70, 0x6B, 0x8C, 0x89, 0x88, 0x9C, 0x99, 0x9A, 0xAA, 
   0xA6, 0xA7, 0x8F, 0x8C, 0x8D, 0x91, 0x8C, 0x8D, 0xAD, 0xB3, 0xB4, 0xC7, 0xCE, 0xCF, 0xBF, 0xC8, 
   0xCA, 0xC9, 0xD2, 0xD5, 0xCA, 0xD6, 0xDB, 0xBB, 0xC7, 0xC9, 0x7E, 0x8A, 0x8F, 0x43, 0x49, 0x4A, 
   0x17, 0x20, 0x25, 0x1F, 0x2B, 0x39, 0x3E, 0x44, 0x57, 0x4D, 0x54, 0x67, 0x57, 0x5F, 0x70, 0x61, 
   0x69, 0x7D, 0x6C, 0x75, 0x90, 0x69, 0x71, 0x8D, 0x72, 0x78, 0x8E, 0x71, 0x7A, 0x95, 0x6B, 0x77, 
   0x93, 0x7E, 0x87, 0xA1, 0x8E, 0x95, 0xAA, 0x8C, 0x94, 0xAF, 0x7B, 0x88, 0xAB, 0x6B, 0x7E, 0x9C, 
   0x56, 0x69, 0x86, 0x4D, 0x5D, 0x73, 0x65, 0x71, 0x7F, 0x8A, 0x94, 0x98, 0x9C, 0xA1, 0xA2, 0x86, 
   0x87, 0x89, 0x74, 0x77, 0x75, 0x78, 0x7E, 0x7A, 0x74, 0x77, 0x74, 0x6A, 0x70, 0x6E, 0x65, 0x6D, 
   0x6F, 0x60, 0x66, 0x6A, 0x66, 0x69, 0x6D, 0x70, 0x6F, 0x73, 0x71, 0x6C, 0x6E, 0x54, 0x52, 0x56, 
   0x4F, 0x54, 0x5D, 0x40, 0x41, 0x48, 0x27, 0x21, 0x23, 0x23, 0x1F, 0x1E, 0x1E, 0x1C, 0x1D, 0x1E, 
   0x1C, 0x21, 0x2B, 0x27, 0x26, 0x33, 0x2E, 0x2E, 0x2F, 0x2D, 0x35, 0x2E, 0x28, 0x38, 0x3A, 0x37, 
   0x40, 0x65, 0x68, 0x70, 0x96, 0x9D, 0xA3, 0xA1, 0xA5, 0xAF, 0xAB, 0xAA, 0xB7, 0x9C, 0x9B, 0xAA, 
   0x64, 0x6A, 0x77, 0x4D, 0x57, 0x62, 0x59, 0x6B, 0x72, 0x65, 0x75, 0x7E, 0x6E, 0x7C, 0x87, 0x6B, 
   0x77, 0x84, 0x5F, 0x6B, 0x79, 0x6E, 0x7B, 0x88, 0x97, 0xA5, 0xB1, 0xAB, 0xB3, 0xBF, 0xB7, 0xB9, 
   0xC5, 0xB6, 0xB9, 0xC2, 0xAF, 0xB3, 0xBD, 0xAE, 0xB1, 0xBD, 0xAF, 0xB1, 0xBE, 0xA9, 0xAC, 0xBA, 
   0xA6, 0xA8, 0xB9, 0xA4, 0xA8, 0xB7, 0xA5, 0xA9, 0xB7, 0xAB, 0xAE, 0xBC, 0xAF, 0xB0, 0xBC, 0xB2, 
   0xB0, 0xBD, 0xB4, 0xB3, 0xC0, 0xB4, 0xB5, 0xC1, 0xAF, 0xAE, 0xBA, 0xB5, 0xB2, 0xBE, 0xB8, 0xB4, 
   0xBD, 0xB5, 0xB1, 0xB9, 0xAD, 0xA5, 0xB3, 0x9C, 0x98, 0xA8, 0xA7, 0xA8, 0xB8, 0xA6, 0xAA, 0xBB, 
   0x86, 0x8E, 0x9F, 0x81, 0x8E, 0x99, 0x81, 0x8F, 0x94, 0x67, 0x76, 0x75, 0x3B, 0x42, 0x42, 0x30, 
   0x31, 0x31, 0x3C, 0x3E, 0x3E, 0x44, 0x49, 0x4B, 0x43, 0x47, 0x4C, 0x42, 0x48, 0x4B, 0x4B, 0x58, 
   0x57, 0x53, 0x5E, 0x62, 0x5A, 0x64, 0x64, 0x75, 0x81, 0x7F, 0x82, 0x8E, 0x8F, 0x74, 0x7D, 0x7F, 
   0x69, 0x71, 0x71, 0x67, 0x71, 0x74, 0x6C, 0x72, 0x72, 0x72, 0x77, 0x73, 0x74, 0x7D, 0x77, 0x85, 
   0x92, 0x8F, 0xC3, 0xD0, 0xD0, 0xCE, 0xD2, 0xD4, 0xC0, 0xBF, 0xC0, 0xA5, 0xA8, 0xA7, 0xA1, 0xA6, 
   0xA6, 0xA3, 0xAA, 0xAB, 0x9D, 0xA3, 0xA5, 0x9C, 0xA1, 0xA2, 0x9C, 0xA1, 0xA3, 0x99, 0x9E, 0xA0, 
   0x95, 0x9C, 0xA0, 0x97, 0x9B, 0xA0, 0x9A, 0x99, 0xA0, 0x95, 0x98, 0x9D, 0x94, 0x96, 0x98, 0x95, 
   0x9A, 0x98, 0x96, 0x9C, 0x9C, 0x98, 0x96, 0x9D, 0x7F, 0x7C, 0x8E, 0x72, 0x6F, 0x86, 0x4F, 0x4B, 
   0x5E, 0x28, 0x2F, 0x37, 0x25, 0x34, 0x38, 0x29, 0x33, 0x41, 0x2C, 0x34, 0x3E, 0x2C, 0x34, 0x41, 
   0x28, 0x34, 0x45, 0x2E, 0x3D, 0x52, 0x40, 0x4B, 0x62, 0x4A, 0x52, 0x61, 0x50, 0x54, 0x5F, 0x57, 
   0x58, 0x61, 0x61, 0x63, 0x68, 0x67, 0x65, 0x6A, 0x64, 0x5F, 0x69, 0x66, 0x62, 0x6C, 0x5F, 0x5C, 
   0x61, 0x4E, 0x51, 0x5A, 0x46, 0x4B, 0x52, 0x44, 0x47, 0x51, 0x3D, 0x44, 0x4E, 0x4F, 0x58, 0x60, 
   0x3F, 0x42, 0x4E, 0x27, 0x29, 0x33, 0x1A, 0x21, 0x22, 0x2E, 0x38, 0x37, 0x3E, 0x44, 0x45, 0x60, 
   0x60, 0x62, 0x77, 0x77, 0x77, 0x92, 0x92, 0x92, 0x9C, 0x9C, 0x9C, 0x9E, 0x9B, 0x9E, 0xB0, 0xAD, 
   0xAE, 0xD0, 0xD0, 0xCF, 0xC6, 0xC1, 0xC5, 0xB2, 0xA9, 0xAA, 0xA9, 0x9E, 0xA0, 0x9F, 0x97, 0x9A, 
   0x98, 0x92, 0x94, 0x9F, 0x97, 0x99, 0xAC, 0xA1, 0xA2, 0xA8, 0x9B, 0x9C, 0x89, 0x7E, 0x7C, 0x70, 
   0x69, 0x66, 0x5F, 0x58, 0x5D, 0x52, 0x50, 0x54, 0x5E, 0x60, 0x64, 0x80, 0x83, 0x81, 0x9B, 0x97, 
   0x97, 0x9D, 0x8C, 0x97, 0x9A, 0x81, 0x89, 0x99, 0x7F, 0x8B, 0x97, 0x80, 0x92, 0x94, 0x7C, 0x91, 
   0x93, 0x7E, 0x8E, 0x91, 0x80, 0x90, 0x8E, 0x81, 0x97, 0x8D, 0x7F, 0x92, 0x97, 0x83, 0x90, 0x9A, 
   0x85, 0x8B, 0x9D, 0x83, 0x8B, 0x9B, 0x82, 0x8A, 0x93, 0x81, 0x91, 0x93, 0x82, 0x98, 0x8F, 0x81, 
   0x93, 0x8F, 0x89, 0x9A, 0x93, 0x94, 0xAB, 0x8F, 0x88, 0xA1, 0x9F, 0x96, 0xAA, 0xAF, 0xAB, 0xBE, 
   0xA1, 0x99, 0xAA, 0x9A, 0x86, 0x95, 0x95, 0x81, 0x8A, 0x97, 0x84, 0x8F, 0x9E, 0x94, 0x9E, 0xC7, 
   0xBE, 0xBF, 0xB3, 0x9E, 0x9E, 0x8E, 0x80, 0x82, 0x92, 0x88, 0x86, 0x8F, 0x8A, 0x91, 0x7E, 0x7E, 
   0x86, 0x85, 0x8A, 0x93, 0x86, 0x86, 0x93, 0x85, 0x85, 0x8D, 0x92, 0x91, 0x96, 0x96, 0x92, 0x95, 
   0x97, 0x8C, 0x91, 0x76, 0x69, 0x6F, 0x61, 0x5F, 0x60, 0x8B, 0x89, 0x8B, 0x9D, 0x92, 0x99, 0xB0, 
   0xA5, 0xA7, 0x97, 0x87, 0x89, 0x9D, 0x8E, 0x90, 0xA5, 0x97, 0x99, 0xA0, 0x92, 0x94, 0xA0, 0x92, 
   0x94, 0x9E, 0x93, 0x94, 0x9F, 0x93, 0x95, 0x9D, 0x8F, 0x8F, 0x99, 0x8B, 0x88, 0x98, 0x89, 0x86, 
   0x99, 0x89, 0x86, 0x9A, 0x8B, 0x8B, 0xA9, 0x97, 0xA0, 0x9C, 0x8A, 0x9D, 0x83, 0x71, 0x8C, 0x76, 
   0x66, 0x84, 0x6C, 0x63, 0x7D, 0x6F, 0x68, 0x79, 0x75, 0x6A, 0x78, 0x75, 0x68, 0x78, 0x77, 0x6A, 
   0x7A, 0x77, 0x6A, 0x7E, 0x75, 0x68, 0x7A, 0x7B, 0x68, 0x78, 0x84, 0x6B, 0x7D, 0x89, 0x71, 0x83, 
   0x86, 0x73, 0x88, 0x7F, 0x73, 0x87, 0x71, 0x70, 0x6C, 0x77, 0x74, 0x76, 0x7E, 0x79, 0x7B, 0x9A, 
   0x96, 0x94, 0x8F, 0x8F, 0x8E, 0xAA, 0xAA, 0xAC, 0xB1, 0xB9, 0xBE, 0xAD, 0xB4, 0xB8, 0xB8, 0xBF, 
   0xC2, 0xC7, 0xCB, 0xCD, 0xB9, 0xC0, 0xC4, 0xB6, 0xC0, 0xC3, 0xA6, 0xB1, 0xB4, 0x6F, 0x77, 0x74, 
   0x34, 0x3E, 0x3F, 0x20, 0x2C, 0x35, 0x3C, 0x42, 0x52, 0x54, 0x5C, 0x6D, 0x66, 0x6F, 0x81, 0x69, 
   0x71, 0x87, 0x6F, 0x78, 0x94, 0x6E, 0x79, 0x94, 0x76, 0x7F, 0x94, 0x77, 0x85, 0x98, 0x83, 0x92, 
   0xA5, 0x8D, 0x98, 0xAA, 0x87, 0x90, 0xA3, 0x7F, 0x8A, 0xA5, 0x75, 0x84, 0xA3, 0x6E, 0x82, 0x95, 
   0x7A, 0x86, 0x91, 0x88, 0x92, 0x99, 0x9C, 0xA0, 0xA4, 0x99, 0x95, 0x93, 0x9A, 0x93, 0x8F, 0x9C, 
   0x98, 0x97, 0xA8, 0xA9, 0xA5, 0x91, 0x93, 0x8E, 0x6D, 0x6D, 0x6C, 0x63, 0x68, 0x68, 0x63, 0x6C, 
   0x6D, 0x64, 0x69, 0x6B, 0x66, 0x68, 0x6C, 0x70, 0x6D, 0x75, 0x69, 0x62, 0x69, 0x56, 0x54, 0x55, 
   0x50, 0x55, 0x56, 0x3E, 0x3F, 0x42, 0x38, 0x34, 0x33, 0x3A, 0x3A, 0x36, 0x35, 0x36, 0x34, 0x32, 
   0x33, 0x33, 0x36, 0x36, 0x31, 0x35, 0x36, 0x36, 0x31, 0x37, 0x3E, 0x2F, 0x34, 0x41, 0x32, 0x3B, 
   0x42, 0x34, 0x3E, 0x41, 0x60, 0x68, 0x6A, 0x89, 0x8B, 0x8E, 0x9A, 0x97, 0xA2, 0x83, 0x85, 0x93, 
   0x5E, 0x67, 0x71, 0x5C, 0x65, 0x6E, 0x58, 0x6A, 0x70, 0x5F, 0x6D, 0x76, 0x6C, 0x75, 0x84, 0x6C, 
   0x75, 0x87, 0x5C, 0x68, 0x7A, 0x78, 0x87, 0x97, 0x9F, 0xAF, 0xBE, 0xAA, 0xB3, 0xC2, 0xB6, 0xBA, 
   0xC9, 0xB5, 0xB9, 0xC7, 0xAE, 0xB4, 0xC1, 0xAD, 0xB1, 0xBD, 0xAB, 0xAE, 0xBC, 0xA9, 0xAD, 0xBE, 
   0xA8, 0xAE, 0xBF, 0xA7, 0xAC, 0xBC, 0xA2, 0xA6, 0xB5, 0xAA, 0xAD, 0xBB, 0xAE, 0xAF, 0xBC, 0xB3, 
   0xB0, 0xBE, 0xB6, 0xB4, 0xC2, 0xB4, 0xB5, 0xC0, 0xAD, 0xAE, 0xB8, 0xB1, 0xAE, 0xBC, 0xB1, 0xAD, 
   0xBA, 0xB2, 0xAE, 0xBA, 0xAD, 0xA7, 0xB7, 0x9E, 0x9A, 0xA9, 0x9F, 0x9E, 0xAD, 0xAA, 0xAB, 0xBB, 
   0xAC, 0xAD, 0xBC, 0xB4, 0xB4, 0xBF, 0xB7, 0xBC, 0xC0, 0xB8, 0xC0, 0xBF, 0x8B, 0x8F, 0x8D, 0x36, 
   0x3A, 0x3A, 0x31, 0x34, 0x36, 0x32, 0x35, 0x3B, 0x32, 0x36, 0x3D, 0x38, 0x40, 0x43, 0x45, 0x4E, 
   0x4C, 0x4A, 0x53, 0x57, 0x55, 0x5D, 0x5F, 0x6A, 0x73, 0x72, 0x7C, 0x87, 0x85, 0x6B, 0x73, 0x77, 
   0x5E, 0x67, 0x69, 0x66, 0x71, 0x72, 0x6C, 0x70, 0x70, 0x6D, 0x71, 0x71, 0x69, 0x6E, 0x6D, 0x6C, 
   0x75, 0x71, 0xB0, 0xB7, 0xB6, 0xB7, 0xBA, 0xBC, 0xB3, 0xB4, 0xB9, 0xA8, 0xA9, 0xAC, 0xA3, 0xA5, 
   0xA7, 0xA6, 0xAB, 0xAE, 0x9B, 0xA3, 0xAB, 0x9B, 0xA2, 0xAB, 0x9E, 0xA2, 0xAB, 0x9D, 0xA0, 0xA5, 
   0x98, 0x9D, 0xA2, 0x94, 0x97, 0x9C, 0x95, 0x96, 0x9C, 0x94, 0x96, 0x9B, 0x95, 0x95, 0x99, 0x94, 
   0x96, 0x99, 0x95, 0x98, 0x9F, 0x8D, 0x8B, 0x98, 0x74, 0x71, 0x87, 0x69, 0x67, 0x81, 0x3B, 0x39, 
   0x4C, 0x1F, 0x27, 0x2F, 0x23, 0x2F, 0x35, 0x26, 0x2E, 0x3B, 0x25, 0x31, 0x3A, 0x2D, 0x39, 0x46, 
   0x3E, 0x49, 0x59, 0x4C, 0x53, 0x66, 0x4F, 0x52, 0x65, 0x50, 0x54, 0x61, 0x4F, 0x55, 0x5E, 0x56, 
   0x58, 0x61, 0x5E, 0x60, 0x68, 0x61, 0x61, 0x64, 0x60, 0x5E, 0x64, 0x65, 0x64, 0x6C, 0x62, 0x5E, 
   0x64, 0x55, 0x53, 0x5A, 0x4A, 0x4D, 0x52, 0x44, 0x47, 0x4E, 0x3E, 0x45, 0x4F, 0x42, 0x4E, 0x5A, 
   0x36, 0x40, 0x4F, 0x22, 0x2E, 0x37, 0x37, 0x45, 0x43, 0x61, 0x71, 0x70, 0x6F, 0x7A, 0x7D, 0x80, 
   0x85, 0x89, 0x99, 0x9B, 0x9C, 0x9C, 0x9C, 0x9C, 0x9F, 0x9D, 0x9D, 0x9F, 0x9B, 0x9F, 0xB6, 0xB2, 
   0xB4, 0xC8, 0xC4, 0xC5, 0xB6, 0xAF, 0xB2, 0xAD, 0xA4, 0xA7, 0xAD, 0xA3, 0xA6, 0xA7, 0x9F, 0xA3, 
   0xA6, 0xA0, 0xA4, 0xAD, 0xA5, 0xA9, 0xB9, 0xAD, 0xB1, 0xBA, 0xAD, 0xB1, 0xA8, 0x9B, 0x9F, 0x86, 
   0x7B, 0x7F, 0x65, 0x5E, 0x62, 0x5D, 0x5B, 0x61, 0x55, 0x58, 0x60, 0x75, 0x7C, 0x7C, 0x9F, 0xA0, 
   0x9D, 0xA6, 0x9A, 0xA0, 0x93, 0x7C, 0x86, 0x96, 0x80, 0x8A, 0x98, 0x83, 0x93, 0x95, 0x7F, 0x90, 
   0x95, 0x7E, 0x88, 0x95, 0x7E, 0x87, 0x92, 0x7F, 0x90, 0x8F, 0x7F, 0x90, 0x94, 0x83, 0x8F, 0x9A, 
   0x84, 0x8B, 0x9D, 0x82, 0x88, 0x9A, 0x82, 0x88, 0x96, 0x84, 0x92, 0x95, 0x81, 0x95, 0x97, 0x87, 
   0x98, 0xA4, 0xA1, 0xB1, 0xAB, 0xAC, 0xC1, 0x9B, 0x93, 0xAB, 0xA4, 0x9C, 0xAE, 0xAE, 0xA3, 0xB6, 
   0x9E, 0x8A, 0x9C, 0x98, 0x7D, 0x89, 0x96, 0x7F, 0x87, 0x96, 0x81, 0x89, 0x9A, 0x88, 0x8F, 0xBA, 
   0xAB, 0xAE, 0xC0, 0xAC, 0xB0, 0x8E, 0x7F, 0x83, 0x8F, 0x85, 0x85, 0x8F, 0x89, 0x91, 0x89, 0x85, 
   0x8E, 0x8E, 0x8D, 0x96, 0x8D, 0x88, 0x93, 0x86, 0x85, 0x8A, 0x8E, 0x8E, 0x90, 0x94, 0x91, 0x96, 
   0x99, 0x8F, 0x95, 0x88, 0x84, 0x88, 0x7B, 0x79, 0x7D, 0x85, 0x80, 0x84, 0x99, 0x93, 0x9B, 0xB1, 
   0xA6, 0xAA, 0xA1, 0x8B, 0x90, 0x9F, 0x8A, 0x8E, 0x9E, 0x8C, 0x8F, 0x9B, 0x8B, 0x8F, 0x9B, 0x8D, 
   0x91, 0x9F, 0x92, 0x96, 0xA1, 0x94, 0x99, 0x9A, 0x8E, 0x8F, 0x9C, 0x8C, 0x8E, 0xA3, 0x8F, 0x93, 
   0x9F, 0x8B, 0x8B, 0x99, 0x8A, 0x85, 0xA0, 0x93, 0x90, 0xAC, 0x9E, 0xA8, 0x94, 0x82, 0x99, 0x7E, 
   0x6C, 0x87, 0x6F, 0x63, 0x7D, 0x71, 0x66, 0x79, 0x74, 0x65, 0x77, 0x75, 0x64, 0x78, 0x78, 0x68, 
   0x7C, 0x77, 0x67, 0x7E, 0x78, 0x67, 0x7B, 0x7D, 0x67, 0x7B, 0x83, 0x68, 0x7D, 0x87, 0x6D, 0x81, 
   0x85, 0x6F, 0x87, 0x7E, 0x6D, 0x84, 0x85, 0x84, 0x80, 0x76, 0x73, 0x76, 0x80, 0x7A, 0x7C, 0xA2, 
   0x9C, 0x9A, 0x91, 0x94, 0x91, 0xA0, 0xA5, 0xA4, 0xAD, 0xB6, 0xB8, 0xBB, 0xC1, 0xC2, 0xCE, 0xD3, 
   0xD2, 0xE1, 0xE3, 0xE2, 0xD3, 0xD6, 0xD9, 0xAE, 0xBA, 0xBB, 0xB0, 0xBB, 0xBD, 0xB3, 0xBC, 0xB9, 
   0x7E, 0x87, 0x88, 0x2B, 0x36, 0x3B, 0x38, 0x41, 0x50, 0x58, 0x63, 0x77, 0x77, 0x82, 0x9A, 0x74, 
   0x7C, 0x95, 0x6C, 0x74, 0x8F, 0x74, 0x7E, 0x93, 0x86, 0x8F, 0x9D, 0x96, 0xA0, 0xA6, 0xB0, 0xBA, 
   0xBE, 0xB2, 0xB9, 0xBF, 0xA6, 0xAB, 0xB5, 0x97, 0x9F, 0xAB, 0x91, 0x98, 0xA5, 0xA0, 0xA5, 0xA8, 
   0xB1, 0xB3, 0xB3, 0xB4, 0xB6, 0xB7, 0xA8, 0xA4, 0xA8, 0x95, 0x8C, 0x8C, 0x90, 0x86, 0x84, 0x91, 
   0x8C, 0x8B, 0xA8, 0xA8, 0xA5, 0x89, 0x87, 0x83, 0x66, 0x66, 0x67, 0x61, 0x64, 0x67, 0x63, 0x65, 
   0x6B, 0x64, 0x67, 0x6A, 0x69, 0x69, 0x6C, 0x67, 0x63, 0x6A, 0x63, 0x5D, 0x65, 0x59, 0x55, 0x57, 
   0x4B, 0x4D, 0x4B, 0x38, 0x36, 0x35, 0x3A, 0x37, 0x39, 0x3B, 0x3C, 0x3D, 0x37, 0x38, 0x39, 0x35, 
   0x37, 0x38, 0x37, 0x37, 0x35, 0x36, 0x37, 0x3D, 0x30, 0x38, 0x40, 0x2E, 0x37, 0x43, 0x2C, 0x38, 
   0x41, 0x2E, 0x3B, 0x3D, 0x42, 0x4D, 0x4C, 0x4F, 0x54, 0x55, 0x63, 0x63, 0x6C, 0x5C, 0x60, 0x6C, 
   0x4B, 0x56, 0x5D, 0x50, 0x5B, 0x61, 0x5B, 0x62, 0x6F, 0x5C, 0x64, 0x70, 0x68, 0x70, 0x7D, 0x75, 
   0x7F, 0x8C, 0x63, 0x72, 0x81, 0x71, 0x83, 0x93, 0x9A, 0xA7, 0xBA, 0xA7, 0xB0, 0xC2, 0xB0, 0xB4, 
   0xC5, 0xB1, 0xB4, 0xC9, 0xAA, 0xAE, 0xC2, 0xAC, 0xB0, 0xBC, 0xAA, 0xAC, 0xBA, 0xAA, 0xAD, 0xC0, 
   0xAC, 0xB4, 0xC3, 0xAC, 0xB1, 0xBF, 0xAB, 0xAF, 0xBB, 0xAE, 0xB2, 0xBD, 0xB2, 0xB4, 0xC0, 0xB5, 
   0xB4, 0xC2, 0xBA, 0xB8, 0xC5, 0xBC, 0xBD, 0xC6, 0xB5, 0xB8, 0xC0, 0xB3, 0xB2, 0xBF, 0xB3, 0xB0, 
   0xBC, 0xB7, 0xB3, 0xBE, 0xB0, 0xAD, 0xBA, 0xA7, 0xA6, 0xB3, 0xA6, 0xA5, 0xB2, 0xA8, 0xAA, 0xBA, 
   0xA7, 0xA6, 0xB6, 0xAE, 0xA7, 0xB4, 0xB4, 0xB2, 0xBA, 0xBD, 0xC1, 0xC4, 0xBE, 0xC1, 0xC2, 0x63, 
   0x65, 0x6B, 0x34, 0x39, 0x41, 0x37, 0x3E, 0x47, 0x33, 0x3B, 0x43, 0x34, 0x3D, 0x3F, 0x37, 0x41, 
   0x41, 0x3D, 0x47, 0x49, 0x47, 0x4F, 0x4F, 0x4D, 0x57, 0x54, 0x59, 0x63, 0x61, 0x58, 0x5F, 0x61, 
   0x56, 0x5D, 0x5D, 0x67, 0x70, 0x71, 0x6D, 0x75, 0x75, 0x67, 0x6E, 0x6E, 0x64, 0x69, 0x67, 0x61, 
   0x68, 0x63, 0x88, 0x90, 0x8C, 0xB4, 0xBA, 0xBA, 0xBE, 0xC4, 0xC8, 0xB1, 0xB3, 0xB7, 0x99, 0x9D, 
   0xA1, 0xA0, 0xA7, 0xAD, 0x99, 0xA2, 0xAB, 0x9B, 0xA2, 0xAE, 0x9D, 0xA1, 0xAE, 0x99, 0x9C, 0xA5, 
   0x94, 0x9C, 0xA1, 0x94, 0x99, 0x9E, 0x92, 0x97, 0x9B, 0x91, 0x96, 0x9C, 0x94, 0x96, 0x9E, 0x93, 
   0x95, 0x9F, 0x8E, 0x8E, 0x9C, 0x80, 0x7E, 0x8D, 0x74, 0x74, 0x89, 0x62, 0x63, 0x7C, 0x34, 0x38, 
   0x4C, 0x25, 0x2F, 0x3C, 0x27, 0x31, 0x3F, 0x25, 0x2E, 0x3A, 0x36, 0x43, 0x4D, 0x54, 0x61, 0x6D, 
   0x6E, 0x75, 0x80, 0x71, 0x71, 0x7D, 0x5D, 0x5A, 0x69, 0x54, 0x55, 0x62, 0x53, 0x54, 0x5C, 0x59, 
   0x59, 0x5F, 0x5D, 0x5F, 0x66, 0x5E, 0x60, 0x66, 0x58, 0x5B, 0x62, 0x5A, 0x62, 0x6B, 0x59, 0x5F, 
   0x67, 0x55, 0x58, 0x60, 0x49, 0x53, 0x5C, 0x43, 0x4C, 0x57, 0x41, 0x4B, 0x57, 0x37, 0x40, 0x4F, 
   0x2E, 0x36, 0x42, 0x3F, 0x4D, 0x4D, 0x76, 0x84, 0x7D, 0xA2, 0xAD, 0xAA, 0xA6, 0xAA, 0xAF, 0x9C, 
   0x9B, 0xA2, 0x9F, 0x9D, 0xA0, 0x9F, 0x9C, 0x9C, 0x9F, 0x9B, 0x9B, 0xBC, 0xBA, 0xB9, 0xDC, 0xD8, 
   0xD8, 0xC1, 0xB8, 0xB9, 0xAB, 0xA3, 0xA3, 0xAD, 0xA6, 0xA7, 0xB0, 0xA9, 0xA9, 0xAB, 0xA2, 0xA5, 
   0xA6, 0x9F, 0xA4, 0xAA, 0xA2, 0xA5, 0xB2, 0xA7, 0xAB, 0xAC, 0xA2, 0xA5, 0xA8, 0x9C, 0xA0, 0x9F, 
   0x92, 0x95, 0x6C, 0x66, 0x6A, 0x63, 0x60, 0x67, 0x5B, 0x5D, 0x65, 0x65, 0x69, 0x6E, 0x8C, 0x8E, 
   0x8F, 0xA8, 0xA2, 0xA6, 0x98, 0x87, 0x95, 0x9D, 0x85, 0x90, 0x9B, 0x83, 0x91, 0x96, 0x7F, 0x8E, 
   0x93, 0x7E, 0x86, 0x93, 0x7D, 0x86, 0x93, 0x7D, 0x8B, 0x92, 0x7F, 0x8B, 0x92, 0x82, 0x8D, 0x96, 
   0x80, 0x8D, 0x96, 0x7F, 0x8A, 0x94, 0x82, 0x8B, 0x97, 0x88, 0x96, 0x96, 0x85, 0x98, 0x98, 0x8A, 
   0x9D, 0xAA, 0xA5, 0xB8, 0xAD, 0xAA, 0xBD, 0x9D, 0x95, 0xA8, 0x97, 0x90, 0x9F, 0x98, 0x8C, 0x9C, 
   0x93, 0x7E, 0x8C, 0x92, 0x7C, 0x84, 0x95, 0x82, 0x8C, 0x9B, 0x84, 0x8B, 0xA3, 0x83, 0x87, 0xA5, 
   0x8C, 0x91, 0xB8, 0xA8, 0xAC, 0x9B, 0x8E, 0x92, 0x89, 0x81, 0x82, 0x89, 0x84, 0x8B, 0x8C, 0x87, 
   0x8F, 0x92, 0x8E, 0x98, 0x8E, 0x87, 0x92, 0x85, 0x80, 0x8B, 0x8E, 0x8B, 0x92, 0x99, 0x92, 0x9E, 
   0x96, 0x8F, 0x97, 0x92, 0x8F, 0x94, 0x8D, 0x88, 0x8F, 0x87, 0x81, 0x86, 0x89, 0x83, 0x8B, 0x90, 
   0x85, 0x86, 0x97, 0x84, 0x85, 0x99, 0x86, 0x86, 0x99, 0x88, 0x88, 0xA3, 0x93, 0x95, 0xA2, 0x93, 
   0x97, 0x9D, 0x8F, 0x92, 0x9F, 0x93, 0x94, 0xA3, 0x96, 0x97, 0xA8, 0x99, 0x9C, 0xA3, 0x8F, 0x96, 
   0x9D, 0x8A, 0x8C, 0x99, 0x8B, 0x86, 0x97, 0x8D, 0x86, 0xA9, 0xA0, 0xA3, 0xAB, 0x9F, 0xAC, 0x93, 
   0x83, 0x96, 0x7D, 0x70, 0x84, 0x77, 0x69, 0x7D, 0x76, 0x67, 0x7B, 0x72, 0x64, 0x79, 0x76, 0x68, 
   0x7E, 0x76, 0x67, 0x80, 0x78, 0x68, 0x7F, 0x7D, 0x69, 0x7F, 0x81, 0x69, 0x7F, 0x82, 0x6A, 0x81, 
   0x84, 0x6C, 0x87, 0x7F, 0x6D, 0x86, 0x86, 0x86, 0x7E, 0x71, 0x72, 0x73, 0x7C, 0x7A, 0x7C, 0x9B, 
   0x96, 0x97, 0x90, 0x95, 0x91, 0xA5, 0xAC, 0xA7, 0xD9, 0xE3, 0xE1, 0xE2, 0xE7, 0xE7, 0xCF, 0xD6, 
   0xD5, 0xD5, 0xD8, 0xD6, 0xDD, 0xDC, 0xE0, 0xCB, 0xD7, 0xD8, 0xC0, 0xCD, 0xD0, 0xD2, 0xDE, 0xDD, 
   0xA6, 0xB3, 0xB5, 0x3A, 0x45, 0x48, 0x37, 0x45, 0x52, 0x5D, 0x6D, 0x81, 0x77, 0x85, 0x9E, 0x78, 
   0x81, 0x99, 0x7B, 0x83, 0x97, 0x94, 0x9D, 0xA9, 0xB2, 0xB9, 0xBE, 0xB7, 0xB8, 0xB5, 0xAB, 0xAB, 
   0xA8, 0xA7, 0xA2, 0xA4, 0x9F, 0x9B, 0x9F, 0x96, 0x96, 0x9A, 0x96, 0x94, 0x9A, 0x9E, 0x95, 0x99, 
   0x9B, 0x98, 0x9B, 0xA5, 0xA3, 0xA7, 0x9D, 0x99, 0x9F, 0x95, 0x94, 0x94, 0x92, 0x91, 0x90, 0x88, 
   0x89, 0x8B, 0x98, 0x99, 0x9B, 0x8B, 0x8D, 0x8E, 0x67, 0x6F, 0x6F, 0x5F, 0x67, 0x66, 0x5F, 0x60, 
   0x66, 0x60, 0x5F, 0x66, 0x63, 0x60, 0x63, 0x60, 0x5C, 0x5F, 0x62, 0x61, 0x66, 0x5B, 0x5D, 0x61, 
   0x3D, 0x41, 0x42, 0x30, 0x33, 0x32, 0x34, 0x36, 0x3A, 0x33, 0x36, 0x3D, 0x30, 0x36, 0x3B, 0x2D, 
   0x36, 0x38, 0x36, 0x3B, 0x3B, 0x33, 0x36, 0x41, 0x2F, 0x36, 0x42, 0x2C, 0x34, 0x41, 0x2C, 0x34, 
   0x41, 0x31, 0x3C, 0x42, 0x43, 0x50, 0x53, 0x46, 0x51, 0x52, 0x50, 0x54, 0x5E, 0x55, 0x5A, 0x67, 
   0x47, 0x53, 0x58, 0x3D, 0x4B, 0x4F, 0x53, 0x59, 0x60, 0x60, 0x69, 0x70, 0x74, 0x7F, 0x88, 0x74, 
   0x81, 0x8D, 0x61, 0x72, 0x81, 0x76, 0x84, 0x96, 0xA0, 0xA5, 0xBC, 0xA8, 0xB0, 0xC4, 0xAF, 0xB2, 
   0xC5, 0xB0, 0xB1, 0xCA, 0xAB, 0xAB, 0xC5, 0xAD, 0xAE, 0xBD, 0xAF, 0xAD, 0xBD, 0xAC, 0xAB, 0xBF, 
   0xAD, 0xB4, 0xC0, 0xAE, 0xB2, 0xBC, 0xAE, 0xB2, 0xBB, 0xB3, 0xBA, 0xC0, 0xB4, 0xBA, 0xC2, 0xB7, 
   0xBA, 0xC4, 0xBA, 0xB9, 0xC3, 0xB9, 0xBB, 0xC2, 0xB3, 0xB8, 0xBF, 0xB4, 0xB5, 0xBF, 0xBC, 0xB7, 
   0xC1, 0xC1, 0xBC, 0xC5, 0xB3, 0xB1, 0xBA, 0xA3, 0xA4, 0xAF, 0xA4, 0xA2, 0xAE, 0xA9, 0xA9, 0xB6, 
   0xA2, 0xA4, 0xB0, 0xA3, 0xA3, 0xAF, 0xA4, 0xA7, 0xB2, 0xAA, 0xAE, 0xB8, 0xC4, 0xC5, 0xCD, 0x92, 
   0x90, 0x9A, 0x3A, 0x3E, 0x4B, 0x38, 0x43, 0x4E, 0x38, 0x41, 0x4A, 0x39, 0x3E, 0x46, 0x37, 0x3F, 
   0x46, 0x35, 0x3D, 0x40, 0x3B, 0x43, 0x3F, 0x40, 0x48, 0x44, 0x4B, 0x52, 0x51, 0x55, 0x58, 0x58, 
   0x57, 0x57, 0x56, 0x62, 0x65, 0x66, 0x66, 0x6C, 0x6A, 0x64, 0x69, 0x66, 0x68, 0x6B, 0x68, 0x67, 
   0x6E, 0x6B, 0x70, 0x76, 0x74, 0x8B, 0x8F, 0x8B, 0xA6, 0xAB, 0xA9, 0xB1, 0xB6, 0xB9, 0xAD, 0xB7, 
   0xBC, 0xB4, 0xC0, 0xC6, 0xAF, 0xBB, 0xBF, 0xA4, 0xAB, 0xB0, 0x96, 0x9A, 0xA3, 0x92, 0x96, 0x9E, 
   0x97, 0x9D, 0xA3, 0x98, 0x9C, 0xA0, 0x92, 0x97, 0x9A, 0x91, 0x96, 0x9C, 0x93, 0x93, 0x9E, 0x90, 
   0x8E, 0x9D, 0x85, 0x81, 0x94, 0x7B, 0x7B, 0x8A, 0x73, 0x77, 0x88, 0x5B, 0x61, 0x79, 0x33, 0x3F, 
   0x53, 0x2E, 0x3C, 0x4D, 0x32, 0x3D, 0x54, 0x33, 0x40, 0x51, 0x4D, 0x58, 0x63, 0x60, 0x63, 0x70, 
   0x72, 0x72, 0x7E, 0x82, 0x81, 0x8D, 0x66, 0x63, 0x71, 0x55, 0x54, 0x5E, 0x50, 0x53, 0x5A, 0x58, 
   0x5A, 0x5A, 0x5B, 0x60, 0x63, 0x59, 0x5D, 0x66, 0x54, 0x58, 0x64, 0x53, 0x5E, 0x6B, 0x5A, 0x64, 
   0x71, 0x58, 0x64, 0x78, 0x4F, 0x61, 0x75, 0x43, 0x52, 0x62, 0x3F, 0x49, 0x56, 0x36, 0x3A, 0x49, 
   0x32, 0x39, 0x3C, 0x67, 0x73, 0x6C, 0x9D, 0xA7, 0x9F, 0xB4, 0xB5, 0xB0, 0xB0, 0xA7, 0xAA, 0xA7, 
   0x9E, 0xA3, 0xA2, 0x9D, 0x9D, 0xA2, 0x9D, 0x9E, 0xA1, 0x99, 0x9D, 0xC6, 0xC2, 0xC2, 0xEF, 0xE9, 
   0xEB, 0xC3, 0xB4, 0xB8, 0xA5, 0x99, 0x9B, 0xAA, 0xA5, 0xA8, 0xAD, 0xA6, 0xA8, 0xAB, 0xA4, 0xA6, 
   0xAF, 0xA9, 0xAC, 0xAA, 0xA4, 0xA4, 0xAD, 0xA3, 0xA4, 0xB0, 0xA8, 0xA7, 0xB0, 0xA6, 0xA4, 0xB3, 
   0xA4, 0xA1, 0x84, 0x7E, 0x7C, 0x6E, 0x69, 0x6C, 0x6D, 0x69, 0x74, 0x5D, 0x5A, 0x6C, 0x66, 0x67, 
   0x72, 0x8C, 0x8F, 0x91, 0x92, 0x8E, 0x99, 0x98, 0x84, 0x93, 0x9B, 0x83, 0x92, 0x98, 0x7F, 0x8E, 
   0x92, 0x7D, 0x89, 0x93, 0x7F, 0x8D, 0x97, 0x7F, 0x8C, 0x99, 0x82, 0x88, 0x98, 0x7F, 0x8A, 0x99, 
   0x7D, 0x8E, 0x97, 0x81, 0x8C, 0x95, 0x82, 0x8D, 0x92, 0x7E, 0x8B, 0x93, 0x82, 0x8E, 0x97, 0x87, 
   0x97, 0x96, 0x88, 0x9A, 0x8E, 0x83, 0x97, 0x97, 0x8C, 0xA0, 0x94, 0x8D, 0xA0, 0x94, 0x85, 0x9A, 
   0x97, 0x7F, 0x8E, 0x93, 0x80, 0x88, 0x96, 0x83, 0x92, 0x9B, 0x84, 0x8E, 0x9D, 0x82, 0x87, 0x99, 
   0x82, 0x90, 0xB0, 0xA4, 0xAF, 0xB4, 0xAA, 0xAF, 0x87, 0x80, 0x87, 0x82, 0x7F, 0x88, 0x8F, 0x89, 
   0x95, 0x8E, 0x8B, 0x96, 0x8D, 0x89, 0x92, 0x85, 0x7F, 0x8C, 0x91, 0x8B, 0x95, 0x99, 0x8E, 0x9C, 
   0x8D, 0x8B, 0x92, 0x8A, 0x8A, 0x90, 0x84, 0x87, 0x8F, 0x7C, 0x80, 0x86, 0x86, 0x85, 0x8F, 0x8C, 
   0x85, 0x88, 0x8F, 0x82, 0x84, 0x93, 0x85, 0x84, 0x92, 0x84, 0x84, 0x9D, 0x8D, 0x91, 0xA6, 0x94, 
   0x9D, 0x9F, 0x8E, 0x93, 0xA0, 0x91, 0x92, 0xA9, 0x9A, 0x9A, 0xA6, 0x97, 0x98, 0x9C, 0x8D, 0x8F, 
   0x96, 0x89, 0x88, 0x97, 0x8A, 0x8A, 0x96, 0x89, 0x8C, 0xA0, 0x98, 0x9C, 0xB8, 0xB3, 0xB7, 0xA9, 
   0x9E, 0xA7, 0x89, 0x7D, 0x8C, 0x77, 0x69, 0x7C, 0x7B, 0x6D, 0x82, 0x73, 0x6A, 0x7E, 0x71, 0x6B, 
   0x7E, 0x70, 0x66, 0x7D, 0x77, 0x67, 0x7D, 0x7F, 0x6A, 0x80, 0x80, 0x6B, 0x80, 0x7E, 0x6B, 0x80, 
   0x7F, 0x6C, 0x85, 0x7F, 0x6F, 0x87, 0x81, 0x82, 0x7A, 0x6F, 0x71, 0x74, 0x7A, 0x7B, 0x7C, 0x97, 
   0x97, 0x94, 0xAB, 0xAE, 0xAB, 0xCA, 0xD0, 0xCB, 0xD8, 0xDE, 0xDC, 0xC8, 0xD0, 0xD3, 0xC0, 0xCC, 
   0xCF, 0xC4, 0xCE, 0xD0, 0xCA, 0xD2, 0xD7, 0xCF, 0xD8, 0xDE, 0xCD, 0xD5, 0xD9, 0xD5, 0xDD, 0xDE, 
   0xC3, 0xCE, 0xCF, 0x59, 0x68, 0x6A, 0x4E, 0x60, 0x68, 0x85, 0x98, 0xA2, 0x9E, 0xAF, 0xBD, 0x8E, 
   0x96, 0xA2, 0x9E, 0x9F, 0xA5, 0xC4, 0xC2, 0xC6, 0xD9, 0xDB, 0xDC, 0xBB, 0xBD, 0xBC, 0xA1, 0xA0, 
   0x9D, 0x93, 0x90, 0x8D, 0x92, 0x8F, 0x90, 0x90, 0x92, 0x94, 0x95, 0x9A, 0x9C, 0x99, 0x9D, 0x9D, 
   0x9C, 0x98, 0x99, 0xA8, 0xA8, 0xAA, 0x9E, 0xA2, 0xA2, 0x96, 0x9A, 0x9A, 0x91, 0x92, 0x97, 0x91, 
   0x92, 0x97, 0x95, 0x98, 0x99, 0x86, 0x84, 0x8D, 0x63, 0x67, 0x6E, 0x5C, 0x61, 0x66, 0x5F, 0x60, 
   0x62, 0x5B, 0x5A, 0x5A, 0x51, 0x53, 0x55, 0x50, 0x56, 0x5A, 0x5A, 0x5F, 0x65, 0x50, 0x55, 0x5C, 
   0x36, 0x3F, 0x3F, 0x36, 0x3B, 0x36, 0x37, 0x36, 0x38, 0x35, 0x35, 0x3C, 0x2E, 0x32, 0x38, 0x2A, 
   0x2F, 0x36, 0x2A, 0x2D, 0x35, 0x2A, 0x2F, 0x37, 0x28, 0x34, 0x3B, 0x28, 0x34, 0x3E, 0x2C, 0x36, 
   0x45, 0x35, 0x41, 0x50, 0x3D, 0x4C, 0x56, 0x47, 0x53, 0x5C, 0x50, 0x59, 0x63, 0x5E, 0x66, 0x71, 
   0x64, 0x6F, 0x77, 0x5D, 0x65, 0x6B, 0x56, 0x63, 0x69, 0x6D, 0x78, 0x83, 0x79, 0x83, 0x8F, 0x6F, 
   0x7B, 0x88, 0x5F, 0x6D, 0x7E, 0x8A, 0x94, 0xA8, 0xAA, 0xAD, 0xC0, 0xA0, 0xA8, 0xBB, 0xA7, 0xAB, 
   0xC1, 0xA1, 0xA2, 0xB8, 0x9A, 0x9A, 0xAC, 0x9E, 0xA0, 0xAD, 0xA5, 0xA7, 0xB5, 0x9E, 0xA3, 0xB2, 
   0xA4, 0xAB, 0xB8, 0xAC, 0xB0, 0xBD, 0xA9, 0xB1, 0xBC, 0xAA, 0xB4, 0xBC, 0xB7, 0xBB, 0xC3, 0xC3, 
   0xC3, 0xCC, 0xBB, 0xBE, 0xC7, 0xAF, 0xB5, 0xC0, 0xBA, 0xC1, 0xCC, 0xB2, 0xB7, 0xC1, 0xBD, 0xBE, 
   0xC5, 0xBF, 0xBE, 0xC8, 0xAB, 0xAA, 0xB8, 0x9F, 0x9E, 0xAE, 0x9C, 0x9D, 0xAD, 0xA1, 0xA3, 0xB0, 
   0xA4, 0xA7, 0xB4, 0xA2, 0xA4, 0xB4, 0xA3, 0xA6, 0xB4, 0xA3, 0xA9, 0xB4, 0xB1, 0xB3, 0xBF, 0xA7, 
   0xA0, 0xB1, 0x3C, 0x3D, 0x4B, 0x2C, 0x34, 0x3C, 0x36, 0x40, 0x43, 0x39, 0x42, 0x47, 0x3A, 0x3D, 
   0x48, 0x35, 0x40, 0x43, 0x31, 0x41, 0x40, 0x36, 0x43, 0x45, 0x3B, 0x43, 0x46, 0x3D, 0x42, 0x40, 
   0x44, 0x4B, 0x46, 0x4E, 0x56, 0x51, 0x5A, 0x5F, 0x5C, 0x5E, 0x61, 0x61, 0x68, 0x67, 0x68, 0x6E, 
   0x6F, 0x6E, 0x70, 0x76, 0x71, 0x7B, 0x80, 0x77, 0x87, 0x89, 0x80, 0x95, 0x96, 0x97, 0x9F, 0xA3, 
   0xA6, 0xA7, 0xAA, 0xAA, 0xB8, 0xB9, 0xB7, 0xC3, 0xC3, 0xC6, 0xC1, 0xC1, 0xC8, 0x9A, 0x9B, 0xA2, 
   0x91, 0x96, 0x95, 0x95, 0x9C, 0x97, 0x93, 0x98, 0x9F, 0x91, 0x91, 0x9A, 0x8D, 0x88, 0x95, 0x80, 
   0x7E, 0x91, 0x7D, 0x79, 0x8B, 0x7E, 0x76, 0x8A, 0x78, 0x72, 0x84, 0x68, 0x6E, 0x7E, 0x56, 0x63, 
   0x72, 0x4A, 0x54, 0x61, 0x51, 0x5C, 0x6A, 0x6E, 0x75, 0x7A, 0x66, 0x66, 0x6F, 0x5C, 0x5B, 0x65, 
   0x63, 0x66, 0x70, 0x6B, 0x6C, 0x7A, 0x5B, 0x5A, 0x67, 0x50, 0x51, 0x59, 0x4A, 0x50, 0x56, 0x50, 
   0x57, 0x5C, 0x53, 0x5A, 0x61, 0x57, 0x5F, 0x69, 0x54, 0x5C, 0x70, 0x52, 0x62, 0x7A, 0x53, 0x68, 
   0x7D, 0x5E, 0x68, 0x7F, 0x50, 0x55, 0x6A, 0x3D, 0x41, 0x4D, 0x39, 0x3D, 0x42, 0x37, 0x3A, 0x3C, 
   0x4E, 0x56, 0x53, 0x78, 0x81, 0x7D, 0x96, 0x9A, 0x9A, 0xAB, 0xAA, 0xAB, 0x9D, 0x95, 0x99, 0x96, 
   0x8B, 0x8E, 0x9E, 0x94, 0x94, 0xA2, 0x99, 0x97, 0xA5, 0x9D, 0x9A, 0xA8, 0xA1, 0x9F, 0xB9, 0xB2, 
   0xB3, 0xBE, 0xB1, 0xB5, 0xAC, 0xA1, 0xA5, 0xA9, 0xA2, 0xA4, 0xAA, 0xA1, 0xA2, 0xB6, 0xAC, 0xB3, 
   0xC0, 0xB7, 0xBC, 0xA5, 0x9B, 0xA0, 0xA4, 0x97, 0x99, 0xC4, 0xBB, 0xB8, 0xCE, 0xC1, 0xC1, 0xB5, 
   0xA9, 0xAA, 0xB2, 0xA7, 0xA9, 0x99, 0x8F, 0x8E, 0x7C, 0x71, 0x78, 0x61, 0x5A, 0x6E, 0x54, 0x57, 
   0x6A, 0x67, 0x6A, 0x77, 0x8D, 0x86, 0x96, 0x8E, 0x84, 0x9B, 0x93, 0x82, 0x98, 0x92, 0x80, 0x95, 
   0x90, 0x7E, 0x91, 0x97, 0x7F, 0x8D, 0x9E, 0x81, 0x87, 0x9D, 0x80, 0x83, 0x9A, 0x7D, 0x89, 0x9A, 
   0x7F, 0x89, 0x97, 0x82, 0x8B, 0xA8, 0x98, 0xA5, 0xB9, 0xAA, 0xBA, 0x98, 0x89, 0x99, 0x94, 0x85, 
   0x95, 0x91, 0x82, 0x95, 0x95, 0x82, 0x97, 0x91, 0x88, 0x9D, 0x91, 0x90, 0xA5, 0x9E, 0x90, 0xA6, 
   0x99, 0x81, 0x92, 0x97, 0x7E, 0x8F, 0x94, 0x81, 0x94, 0x9A, 0x84, 0x92, 0x93, 0x7C, 0x89, 0x9C, 
   0x8E, 0x9E, 0xB4, 0xA9, 0xB4, 0xC0, 0xB6, 0xBF, 0x99, 0x8E, 0x96, 0x85, 0x85, 0x8C, 0x91, 0x8E, 
   0x95, 0x91, 0x8C, 0x93, 0x91, 0x8D, 0x94, 0x8B, 0x82, 0x8A, 0x95, 0x90, 0x95, 0x97, 0x8A, 0x98, 
   0x8B, 0x84, 0x8E, 0x81, 0x7E, 0x81, 0x80, 0x7E, 0x7F, 0x8D, 0x8B, 0x8F, 0x92, 0x8D, 0x92, 0x90, 
   0x83, 0x86, 0x92, 0x82, 0x83, 0x90, 0x83, 0x85, 0x8E, 0x86, 0x89, 0x91, 0x86, 0x8D, 0x98, 0x87, 
   0x8E, 0x9B, 0x88, 0x8E, 0x94, 0x86, 0x89, 0x96, 0x89, 0x89, 0x9B, 0x8B, 0x8B, 0x98, 0x8A, 0x8B, 
   0x95, 0x88, 0x88, 0x96, 0x87, 0x88, 0x95, 0x86, 0x87, 0x8E, 0x86, 0x83, 0xAA, 0xA9, 0xA4, 0xBE, 
   0xBA, 0xBC, 0xA1, 0x9B, 0xA7, 0x76, 0x6B, 0x7D, 0x78, 0x6B, 0x81, 0x79, 0x71, 0x85, 0x79, 0x74, 
   0x88, 0x77, 0x6F, 0x86, 0x7B, 0x6C, 0x81, 0x7B, 0x6C, 0x7D, 0x7D, 0x70, 0x84, 0x7A, 0x6F, 0x86, 
   0x7A, 0x6E, 0x86, 0x7D, 0x6F, 0x83, 0x7C, 0x79, 0x7D, 0x83, 0x84, 0x88, 0x8C, 0x90, 0x8E, 0x99, 
   0x99, 0x97, 0xBA, 0xBB, 0xBA, 0xE1, 0xE6, 0xE6, 0xC9, 0xD3, 0xD7, 0xBB, 0xCA, 0xD0, 0xC8, 0xD5, 
   0xDF, 0xD9, 0xE3, 0xEB, 0xD3, 0xDC, 0xE2, 0xDB, 0xE3, 0xE8, 0xDE, 0xE5, 0xE6, 0xE6, 0xEC, 0xEA, 
   0xE8, 0xEE, 0xED, 0x8F, 0x97, 0x99, 0x5E, 0x72, 0x77, 0x90, 0xA4, 0xA7, 0xB0, 0xB9, 0xBF, 0xB5, 
   0xB5, 0xBB, 0xAF, 0xAB, 0xAE, 0x9D, 0x97, 0x9A, 0xA8, 0xA2, 0xA2, 0xB1, 0xAD, 0xAD, 0xA2, 0xA3, 
   0xA3, 0x94, 0x98, 0x98, 0x91, 0x97, 0x99, 0x92, 0x98, 0x99, 0xAA, 0xB0, 0xB1, 0xA9, 0xAF, 0xB1, 
   0x9F, 0x9F, 0xA0, 0xC0, 0xBF, 0xC0, 0xAD, 0xAD, 0xAB, 0x9E, 0xA0, 0x9E, 0x9E, 0x9E, 0xA3, 0x9C, 
   0x9C, 0x9F, 0x9D, 0x9C, 0x9E, 0x87, 0x8B, 0x8E, 0x65, 0x6C, 0x72, 0x5A, 0x60, 0x67, 0x65, 0x65, 
   0x69, 0x69, 0x68, 0x6A, 0x62, 0x63, 0x65, 0x5E, 0x61, 0x63, 0x5B, 0x60, 0x64, 0x4C, 0x53, 0x57, 
   0x3C, 0x43, 0x42, 0x36, 0x3C, 0x36, 0x32, 0x34, 0x35, 0x33, 0x33, 0x37, 0x35, 0x37, 0x39, 0x2B, 
   0x34, 0x37, 0x25, 0x2E, 0x34, 0x2B, 0x35, 0x3D, 0x2A, 0x3B, 0x44, 0x30, 0x42, 0x4F, 0x35, 0x47, 
   0x59, 0x3D, 0x4C, 0x5C, 0x3C, 0x4B, 0x5B, 0x43, 0x51, 0x60, 0x4D, 0x57, 0x66, 0x5A, 0x64, 0x71, 
   0x64, 0x72, 0x7A, 0x6D, 0x7B, 0x81, 0x6D, 0x7E, 0x84, 0x71, 0x80, 0x8A, 0x6F, 0x7B, 0x86, 0x6D, 
   0x7A, 0x87, 0x68, 0x78, 0x88, 0x93, 0x9E, 0xB2, 0xA4, 0xA7, 0xB9, 0xA2, 0xA9, 0xB9, 0xAA, 0xB1, 
   0xC2, 0xAC, 0xB1, 0xC1, 0xA3, 0xA7, 0xB4, 0xA5, 0xA9, 0xB3, 0xB1, 0xB4, 0xC0, 0xB7, 0xBB, 0xC7, 
   0xB2, 0xB6, 0xC3, 0xAF, 0xB2, 0xBE, 0xAB, 0xB0, 0xBC, 0xA9, 0xB2, 0xBC, 0xB1, 0xB8, 0xC0, 0xBE, 
   0xC3, 0xCC, 0xB8, 0xBC, 0xC6, 0xAB, 0xAF, 0xBB, 0xB1, 0xB5, 0xC2, 0xB5, 0xB8, 0xC3, 0xB3, 0xB1, 
   0xBA, 0xB1, 0xAD, 0xB8, 0xA6, 0xA3, 0xB1, 0xA0, 0x9F, 0xAD, 0x9C, 0x9F, 0xAB, 0x9F, 0xA2, 0xAD, 
   0xA8, 0xA9, 0xB6, 0xA8, 0xAB, 0xBB, 0xA7, 0xA9, 0xB9, 0xA5, 0xAA, 0xB7, 0x9F, 0xA9, 0xB4, 0x9F, 
   0xA1, 0xAD, 0x62, 0x60, 0x6D, 0x3C, 0x3D, 0x48, 0x3A, 0x3E, 0x46, 0x33, 0x3A, 0x41, 0x33, 0x3C, 
   0x41, 0x38, 0x40, 0x42, 0x38, 0x43, 0x46, 0x3D, 0x48, 0x4B, 0x3E, 0x45, 0x4A, 0x3B, 0x3E, 0x42, 
   0x3C, 0x42, 0x44, 0x41, 0x4A, 0x49, 0x48, 0x4D, 0x48, 0x52, 0x51, 0x4E, 0x5C, 0x5A, 0x58, 0x63, 
   0x64, 0x61, 0x6E, 0x72, 0x6C, 0x77, 0x7E, 0x75, 0x7E, 0x83, 0x7C, 0x84, 0x87, 0x83, 0x81, 0x84, 
   0x82, 0x83, 0x86, 0x80, 0x8F, 0x8F, 0x87, 0x9E, 0x9D, 0x97, 0xAD, 0xAD, 0xAA, 0xA8, 0xAB, 0xAD, 
   0x9D, 0xA1, 0xA1, 0x96, 0x97, 0x96, 0x93, 0x96, 0x9D, 0x8A, 0x8C, 0x95, 0x84, 0x7F, 0x8E, 0x80, 
   0x7A, 0x8C, 0x7C, 0x73, 0x7F, 0x79, 0x6F, 0x7D, 0x74, 0x6D, 0x7A, 0x66, 0x66, 0x73, 0x66, 0x6A, 
   0x79, 0x6C, 0x71, 0x7E, 0x6D, 0x77, 0x86, 0x85, 0x89, 0x97, 0x75, 0x75, 0x82, 0x63, 0x62, 0x6B, 
   0x5F, 0x63, 0x69, 0x60, 0x64, 0x6B, 0x5B, 0x5B, 0x64, 0x4C, 0x4F, 0x56, 0x4A, 0x4D, 0x54, 0x47, 
   0x4C, 0x58, 0x4B, 0x55, 0x66, 0x50, 0x5E, 0x76, 0x4C, 0x59, 0x76, 0x4C, 0x56, 0x68, 0x4C, 0x53, 
   0x5B, 0x54, 0x58, 0x61, 0x52, 0x52, 0x5A, 0x40, 0x41, 0x45, 0x2E, 0x31, 0x32, 0x42, 0x44, 0x41, 
   0x55, 0x5B, 0x54, 0x82, 0x88, 0x82, 0x9F, 0x9E, 0x9C, 0xB1, 0xAD, 0xAB, 0xB7, 0xAF, 0xAE, 0xAE, 
   0xA4, 0xA4, 0xA0, 0x97, 0x98, 0x9B, 0x95, 0x96, 0xA3, 0x9C, 0x9A, 0xA8, 0xA0, 0x9F, 0xB5, 0xAE, 
   0xAE, 0xCA, 0xBF, 0xC2, 0xAD, 0xA2, 0xA6, 0xA9, 0xA1, 0xA3, 0xAA, 0xA1, 0xA2, 0xAC, 0xA6, 0xAB, 
   0xAF, 0xA5, 0xA6, 0xAB, 0x9F, 0xA0, 0xA7, 0x9A, 0x9D, 0xA4, 0x98, 0x9E, 0x9E, 0x8E, 0x99, 0x9D, 
   0x93, 0x98, 0xC7, 0xB9, 0xBA, 0xB2, 0xA6, 0xA4, 0x8E, 0x85, 0x8C, 0x63, 0x5C, 0x6F, 0x5B, 0x5A, 
   0x6E, 0x62, 0x66, 0x75, 0x79, 0x7C, 0x8E, 0x85, 0x87, 0xA3, 0x84, 0x80, 0x9C, 0x8E, 0x86, 0xA0, 
   0x94, 0x88, 0x9E, 0x93, 0x82, 0x92, 0x99, 0x81, 0x89, 0x9A, 0x7D, 0x84, 0x99, 0x79, 0x88, 0x93, 
   0x78, 0x89, 0x8E, 0x79, 0x8C, 0x94, 0x84, 0x96, 0x96, 0x8C, 0x9C, 0x94, 0x8F, 0xA1, 0x94, 0x95, 
   0xA9, 0x9E, 0x9D, 0xB2, 0x9A, 0x92, 0xA7, 0x8F, 0x87, 0x9E, 0x88, 0x82, 0x98, 0x93, 0x85, 0x99, 
   0x90, 0x7D, 0x8F, 0x87, 0x74, 0x85, 0x89, 0x7A, 0x8F, 0x90, 0x7D, 0x95, 0x8B, 0x7D, 0x92, 0x92, 
   0x91, 0xA1, 0xA4, 0xA3, 0xAC, 0xAF, 0xA7, 0xB0, 0x95, 0x8C, 0x96, 0x85, 0x85, 0x90, 0x8E, 0x8A, 
   0x94, 0x8C, 0x85, 0x8D, 0x8E, 0x89, 0x8F, 0x8C, 0x83, 0x89, 0x90, 0x89, 0x8F, 0x8A, 0x85, 0x92, 
   0x85, 0x80, 0x8D, 0x76, 0x73, 0x7B, 0x76, 0x78, 0x7A, 0x95, 0x95, 0x99, 0x95, 0x8F, 0x96, 0x8C, 
   0x80, 0x87, 0x8F, 0x82, 0x82, 0x8E, 0x81, 0x84, 0x8D, 0x83, 0x87, 0x8C, 0x83, 0x87, 0x90, 0x82, 
   0x86, 0x94, 0x83, 0x86, 0x96, 0x85, 0x88, 0x93, 0x81, 0x86, 0x93, 0x81, 0x86, 0x93, 0x83, 0x87, 
   0x94, 0x84, 0x88, 0x93, 0x84, 0x86, 0x8C, 0x7D, 0x80, 0x83, 0x7C, 0x77, 0xB2, 0xB4, 0xAB, 0xDE, 
   0xDC, 0xDA, 0xDC, 0xD4, 0xDC, 0xB2, 0xA2, 0xB2, 0x80, 0x73, 0x87, 0x6F, 0x6D, 0x81, 0x73, 0x6E, 
   0x86, 0x79, 0x70, 0x88, 0x77, 0x6D, 0x82, 0x78, 0x6D, 0x80, 0x79, 0x6D, 0x84, 0x79, 0x6E, 0x87, 
   0x7A, 0x72, 0x85, 0x78, 0x72, 0x80, 0x70, 0x6F, 0x77, 0x79, 0x7B, 0x80, 0x7F, 0x86, 0x88, 0x84, 
   0x89, 0x8D, 0xAB, 0xAD, 0xB1, 0xC9, 0xCE, 0xD6, 0xBF, 0xCD, 0xD5, 0xBD, 0xCD, 0xD3, 0xCB, 0xD5, 
   0xDE, 0xC8, 0xD3, 0xDC, 0xBD, 0xCA, 0xD0, 0xC4, 0xD0, 0xD4, 0xD7, 0xE0, 0xE0, 0xE4, 0xEA, 0xE8, 
   0xEC, 0xF0, 0xEE, 0xA0, 0xA3, 0xA4, 0x73, 0x81, 0x84, 0xA9, 0xB3, 0xB2, 0xCA, 0xCB, 0xCA, 0xC9, 
   0xC7, 0xC6, 0xB4, 0xB6, 0xB4, 0x9E, 0xA0, 0xA1, 0xA1, 0xA2, 0xA0, 0xB0, 0xAC, 0xAB, 0xA6, 0xA6, 
   0xA9, 0xA1, 0xA5, 0xA8, 0xA3, 0xA7, 0xA9, 0x9C, 0x9E, 0x9F, 0xAD, 0xAF, 0xB1, 0xB0, 0xB3, 0xB8, 
   0x9C, 0x9A, 0x9B, 0xAA, 0xA6, 0xA4, 0xA2, 0x9E, 0x9A, 0x9C, 0x9C, 0x98, 0xA2, 0xA3, 0xA5, 0x9C, 
   0x9D, 0xA0, 0x97, 0x9A, 0x9A, 0x96, 0x9D, 0x9B, 0x76, 0x7D, 0x81, 0x59, 0x5E, 0x65, 0x5F, 0x5F, 
   0x66, 0x70, 0x6F, 0x72, 0x70, 0x71, 0x73, 0x63, 0x65, 0x67, 0x59, 0x5D, 0x5F, 0x53, 0x58, 0x59, 
   0x47, 0x48, 0x47, 0x2E, 0x2F, 0x2A, 0x32, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x32, 0x31, 0x2C, 
   0x33, 0x34, 0x27, 0x2F, 0x37, 0x2C, 0x34, 0x41, 0x34, 0x42, 0x50, 0x3D, 0x4F, 0x5F, 0x3F, 0x53, 
   0x65, 0x42, 0x51, 0x62, 0x3C, 0x4A, 0x5E, 0x3F, 0x4C, 0x60, 0x48, 0x53, 0x65, 0x5D, 0x6B, 0x78, 
   0x6C, 0x7D, 0x84, 0x70, 0x7F, 0x85, 0x6A, 0x79, 0x81, 0x6B, 0x78, 0x83, 0x62, 0x6F, 0x7A, 0x67, 
   0x76, 0x82, 0x72, 0x84, 0x92, 0xA1, 0xAF, 0xC1, 0xA3, 0xA9, 0xBB, 0xAA, 0xAE, 0xBF, 0xB1, 0xB6, 
   0xC6, 0xB4, 0xBA, 0xC9, 0xAE, 0xB3, 0xC0, 0xAC, 0xB0, 0xBC, 0xB9, 0xBA, 0xC7, 0xC1, 0xC2, 0xD0, 
   0xB5, 0xB6, 0xC3, 0xAF, 0xB0, 0xBC, 0xAB, 0xAF, 0xBB, 0xA7, 0xB1, 0xBB, 0xAC, 0xB5, 0xC0, 0xB1, 
   0xB7, 0xC3, 0xB0, 0xB4, 0xC0, 0xAE, 0xB2, 0xBD, 0xB5, 0xB9, 0xC4, 0xB3, 0xB5, 0xC1, 0xAB, 0xAA, 
   0xB5, 0xAA, 0xA8, 0xB3, 0xA6, 0xA3, 0xB0, 0x9F, 0x9F, 0xAD, 0x9F, 0xA1, 0xAE, 0xA6, 0xA4, 0xB0, 
   0xA8, 0xA8, 0xB6, 0xA6, 0xAA, 0xB8, 0xA6, 0xA8, 0xB7, 0xA6, 0xA9, 0xB6, 0x9D, 0xA9, 0xB3, 0x9D, 
   0xA5, 0xB0, 0x7B, 0x7B, 0x87, 0x48, 0x48, 0x55, 0x4C, 0x4F, 0x59, 0x4E, 0x51, 0x59, 0x41, 0x4B, 
   0x4E, 0x4A, 0x51, 0x55, 0x49, 0x52, 0x5A, 0x40, 0x4A, 0x51, 0x3F, 0x47, 0x4E, 0x3E, 0x41, 0x4B, 
   0x3C, 0x43, 0x4B, 0x3C, 0x47, 0x4B, 0x3C, 0x43, 0x44, 0x41, 0x43, 0x44, 0x4C, 0x4E, 0x4D, 0x58, 
   0x5B, 0x58, 0x5D, 0x60, 0x5A, 0x61, 0x66, 0x5F, 0x74, 0x7C, 0x74, 0x80, 0x87, 0x7F, 0x79, 0x7E, 
   0x76, 0x83, 0x8A, 0x7E, 0x8F, 0x92, 0x85, 0x91, 0x91, 0x85, 0x8F, 0x90, 0x85, 0x99, 0x9D, 0x97, 
   0xA4, 0xA8, 0xA4, 0xA0, 0xA0, 0x9F, 0x96, 0x97, 0x9A, 0x97, 0x97, 0x9F, 0x81, 0x7C, 0x8C, 0x7B, 
   0x77, 0x88, 0x82, 0x82, 0x8D, 0x81, 0x7F, 0x8B, 0x75, 0x71, 0x7C, 0x66, 0x62, 0x6F, 0x63, 0x62, 
   0x71, 0x69, 0x69, 0x77, 0x66, 0x67, 0x76, 0x72, 0x75, 0x83, 0x7B, 0x78, 0x85, 0x71, 0x6C, 0x79, 
   0x60, 0x5D, 0x6A, 0x60, 0x5F, 0x69, 0x59, 0x5A, 0x63, 0x4E, 0x50, 0x5D, 0x4B, 0x4C, 0x5D, 0x4C, 
   0x51, 0x69, 0x4D, 0x59, 0x75, 0x4B, 0x59, 0x74, 0x46, 0x50, 0x65, 0x47, 0x4A, 0x52, 0x48, 0x47, 
   0x47, 0x4B, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x3E, 0x40, 0x41, 0x38, 0x3C, 0x3B, 0x4E, 0x52, 0x4B, 
   0x5F, 0x64, 0x5B, 0x90, 0x94, 0x8F, 0xA4, 0xA3, 0xA3, 0xA8, 0xA4, 0xA4, 0xB1, 0xA8, 0xA9, 0xB6, 
   0xAC, 0xAD, 0xAA, 0x9F, 0xA3, 0x9D, 0x92, 0x98, 0xA2, 0x99, 0x9A, 0xA9, 0xA2, 0xA0, 0xB7, 0xB0, 
   0xAF, 0xC7, 0xBC, 0xBE, 0xAD, 0xA3, 0xA5, 0xAD, 0xA6, 0xA7, 0xB2, 0xA9, 0xA9, 0xAB, 0xA5, 0xA4, 
   0xA9, 0xA0, 0xA1, 0xA2, 0x97, 0x9E, 0x9F, 0x94, 0x9F, 0x87, 0x80, 0x91, 0x73, 0x6E, 0x80, 0x9E, 
   0x9C, 0xA1, 0xC7, 0xBC, 0xBA, 0xB3, 0xA6, 0xA7, 0x94, 0x89, 0x93, 0x5F, 0x5A, 0x6B, 0x5A, 0x5B, 
   0x6C, 0x65, 0x68, 0x77, 0x62, 0x67, 0x7A, 0x5A, 0x63, 0x80, 0x5F, 0x64, 0x83, 0x6A, 0x6B, 0x88, 
   0x75, 0x73, 0x8B, 0x7B, 0x78, 0x88, 0x84, 0x7A, 0x86, 0x91, 0x7F, 0x8C, 0x93, 0x7C, 0x8D, 0x8A, 
   0x79, 0x8E, 0x8E, 0x7F, 0x96, 0x96, 0x85, 0x9A, 0x95, 0x87, 0x9B, 0x92, 0x8D, 0xA1, 0x93, 0x94, 
   0xAB, 0x99, 0x98, 0xB0, 0x8E, 0x89, 0x9F, 0x8B, 0x84, 0x9E, 0x8E, 0x86, 0x9B, 0x91, 0x81, 0x91, 
   0x90, 0x7D, 0x90, 0x8C, 0x81, 0x97, 0x90, 0x8A, 0xA3, 0x9E, 0x94, 0xAE, 0x8E, 0x89, 0x9E, 0x9A, 
   0x9D, 0xAC, 0xAA, 0xA9, 0xB3, 0xA6, 0x9B, 0xA4, 0x8C, 0x8A, 0x91, 0x8C, 0x92, 0x9A, 0x89, 0x88, 
   0x94, 0x88, 0x83, 0x8B, 0x89, 0x85, 0x8B, 0x8A, 0x84, 0x8C, 0x8B, 0x85, 0x90, 0x81, 0x82, 0x8E, 
   0x7F, 0x7B, 0x8A, 0x67, 0x65, 0x6F, 0x67, 0x68, 0x6C, 0x8E, 0x8B, 0x90, 0x89, 0x7F, 0x86, 0x88, 
   0x7B, 0x84, 0x8B, 0x7E, 0x7F, 0x8C, 0x7E, 0x80, 0x8C, 0x80, 0x83, 0x8B, 0x82, 0x84, 0x92, 0x85, 
   0x86, 0x94, 0x84, 0x84, 0x94, 0x82, 0x84, 0x8A, 0x7B, 0x80, 0x88, 0x7B, 0x80, 0x8C, 0x7F, 0x83, 
   0x8C, 0x81, 0x84, 0x8B, 0x82, 0x86, 0x90, 0x88, 0x8B, 0xA1, 0x9B, 0x9B, 0xC3, 0xC3, 0xBF, 0xD6, 
   0xD3, 0xD2, 0xDE, 0xD7, 0xDC, 0xDA, 0xCC, 0xD7, 0xA4, 0x97, 0xA6, 0x7D, 0x7A, 0x8B, 0x77, 0x72, 
   0x86, 0x79, 0x73, 0x87, 0x73, 0x6D, 0x80, 0x76, 0x6D, 0x82, 0x7A, 0x6C, 0x85, 0x7A, 0x6B, 0x82, 
   0x7A, 0x6D, 0x7D, 0x73, 0x6D, 0x79, 0x72, 0x79, 0x7E, 0x6E, 0x76, 0x7A, 0x77, 0x7E, 0x81, 0x8E, 
   0x94, 0x97, 0xB2, 0xB9, 0xBC, 0xC0, 0xC8, 0xCF, 0xC1, 0xCD, 0xD6, 0xC3, 0xD3, 0xD8, 0xC2, 0xCF, 
   0xD7, 0xB8, 0xC7, 0xD0, 0xB5, 0xC6, 0xCE, 0xBC, 0xCA, 0xD0, 0xCD, 0xD9, 0xDD, 0xDD, 0xE5, 0xE7, 
   0xEB, 0xEF, 0xF0, 0xAF, 0xB1, 0xB0, 0x7D, 0x82, 0x84, 0x90, 0x96, 0x92, 0x9E, 0x9E, 0x9A, 0xAD, 
   0xAC, 0xA9, 0xB7, 0xBA, 0xB7, 0xB2, 0xB5, 0xB6, 0xB2, 0xB5, 0xB4, 0xAB, 0xAE, 0xAF, 0xA0, 0xA1, 
   0xA3, 0xA2, 0xA2, 0xA5, 0xA9, 0xAA, 0xAC, 0xA5, 0xA6, 0xAA, 0xB3, 0xB7, 0xBB, 0xB1, 0xB5, 0xB9, 
   0x9B, 0x99, 0x9A, 0x9D, 0x9A, 0x98, 0xA7, 0xA3, 0x9D, 0xA4, 0xA1, 0x9C, 0x9F, 0x9C, 0x9E, 0x9F, 
   0x9E, 0xA1, 0x9B, 0x9D, 0x9D, 0x9B, 0xA0, 0x9D, 0x8A, 0x90, 0x91, 0x62, 0x67, 0x6B, 0x5F, 0x62, 
   0x65, 0x75, 0x76, 0x79, 0x6A, 0x6E, 0x71, 0x62, 0x67, 0x6A, 0x54, 0x57, 0x57, 0x47, 0x47, 0x46, 
   0x30, 0x2D, 0x2D, 0x26, 0x22, 0x1E, 0x41, 0x3D, 0x3C, 0x3A, 0x37, 0x35, 0x35, 0x34, 0x33, 0x2F, 
   0x36, 0x39, 0x2F, 0x38, 0x40, 0x33, 0x3A, 0x48, 0x37, 0x43, 0x51, 0x3D, 0x4D, 0x5D, 0x44, 0x56, 
   0x69, 0x49, 0x54, 0x67, 0x45, 0x52, 0x67, 0x41, 0x4F, 0x66, 0x44, 0x53, 0x64, 0x5C, 0x6D, 0x77, 
   0x70, 0x80, 0x87, 0x6F, 0x7D, 0x82, 0x66, 0x72, 0x7D, 0x5F, 0x68, 0x75, 0x6A, 0x74, 0x7F, 0x6D, 
   0x7C, 0x86, 0x80, 0x91, 0x9F, 0xA5, 0xB3, 0xC3, 0xA7, 0xAE, 0xC0, 0xAE, 0xB2, 0xC1, 0xAE, 0xB3, 
   0xC1, 0xB1, 0xB8, 0xC4, 0xB1, 0xB9, 0xC3, 0xAF, 0xB3, 0xBF, 0xAF, 0xB2, 0xBE, 0xB1, 0xB2, 0xC0, 
   0xA6, 0xA8, 0xB4, 0xA2, 0xA4, 0xB0, 0xA9, 0xAD, 0xB9, 0xAA, 0xB2, 0xBE, 0xAE, 0xB7, 0xC3, 0xB3, 
   0xB7, 0xC4, 0xB2, 0xB6, 0xC1, 0xB6, 0xBA, 0xC4, 0xB9, 0xBC, 0xC6, 0xB3, 0xB6, 0xC1, 0xAF, 0xB0, 
   0xBD, 0xAC, 0xAB, 0xB8, 0xA4, 0xA2, 0xB0, 0x9E, 0x9D, 0xAD, 0xA1, 0xA1, 0xAF, 0xA8, 0xA5, 0xB1, 
   0xA8, 0xA7, 0xB4, 0xA2, 0xA6, 0xB3, 0xA4, 0xA6, 0xB2, 0xAA, 0xAD, 0xB7, 0x9F, 0xA9, 0xB3, 0x97, 
   0xA1, 0xAE, 0x75, 0x79, 0x87, 0x53, 0x58, 0x62, 0x6A, 0x6E, 0x74, 0x78, 0x76, 0x7D, 0x78, 0x7A, 
   0x83, 0x84, 0x88, 0x92, 0x85, 0x8B, 0x96, 0x7C, 0x84, 0x8E, 0x78, 0x7F, 0x87, 0x6A, 0x6F, 0x7B, 
   0x5D, 0x65, 0x71, 0x4D, 0x58, 0x5F, 0x45, 0x4C, 0x55, 0x3E, 0x46, 0x50, 0x42, 0x4A, 0x53, 0x4D, 
   0x56, 0x5E, 0x4C, 0x57, 0x5B, 0x4E, 0x5A, 0x5C, 0x66, 0x70, 0x6E, 0x7D, 0x83, 0x7A, 0x86, 0x89, 
   0x7E, 0x8A, 0x8F, 0x82, 0x96, 0x9B, 0x8E, 0x93, 0x95, 0x88, 0x91, 0x94, 0x89, 0x92, 0x95, 0x8C, 
   0x8F, 0x93, 0x8B, 0x9A, 0x9D, 0x97, 0xAE, 0xAC, 0xAA, 0xA9, 0xA6, 0xAB, 0x85, 0x83, 0x91, 0x84, 
   0x82, 0x90, 0x8F, 0x95, 0xA0, 0x86, 0x89, 0x95, 0x78, 0x77, 0x82, 0x6E, 0x6D, 0x79, 0x60, 0x64, 
   0x6F, 0x64, 0x69, 0x75, 0x65, 0x67, 0x72, 0x6E, 0x6F, 0x79, 0x80, 0x7B, 0x84, 0x70, 0x6A, 0x75, 
   0x5C, 0x59, 0x67, 0x5D, 0x5F, 0x6C, 0x57, 0x5C, 0x6C, 0x4E, 0x55, 0x6C, 0x4A, 0x53, 0x6D, 0x4D, 
   0x56, 0x74, 0x4F, 0x58, 0x70, 0x46, 0x4C, 0x5B, 0x47, 0x48, 0x50, 0x46, 0x45, 0x48, 0x42, 0x42, 
   0x42, 0x3A, 0x3D, 0x3F, 0x3A, 0x40, 0x3E, 0x3E, 0x44, 0x43, 0x51, 0x58, 0x56, 0x7A, 0x80, 0x79, 
   0x8B, 0x8E, 0x88, 0x99, 0x9A, 0x99, 0xA6, 0xA4, 0xA6, 0xAA, 0xA5, 0xA8, 0xA8, 0x9F, 0xA3, 0xB0, 
   0xA4, 0xA9, 0xB8, 0xAC, 0xB0, 0xA4, 0x98, 0x9C, 0x9F, 0x95, 0x96, 0xA6, 0x9E, 0x9D, 0xAB, 0xA4, 
   0xA3, 0xBB, 0xB0, 0xB0, 0xB5, 0xAB, 0xAC, 0xB1, 0xAA, 0xAA, 0xB5, 0xAC, 0xAE, 0xB6, 0xA9, 0xA9, 
   0xA0, 0x95, 0x9E, 0x7A, 0x73, 0x86, 0x75, 0x6E, 0x82, 0x6C, 0x6D, 0x80, 0x81, 0x87, 0x94, 0xB9, 
   0xB9, 0xB9, 0xC3, 0xB3, 0xB6, 0xA2, 0x8F, 0x96, 0x6E, 0x60, 0x6E, 0x4E, 0x49, 0x59, 0x4B, 0x4D, 
   0x59, 0x57, 0x5A, 0x67, 0x53, 0x58, 0x69, 0x4C, 0x55, 0x6D, 0x4A, 0x53, 0x6D, 0x4E, 0x54, 0x6E, 
   0x52, 0x58, 0x6D, 0x4E, 0x57, 0x66, 0x55, 0x5A, 0x68, 0x6A, 0x66, 0x76, 0x78, 0x6E, 0x7E, 0x7F, 
   0x78, 0x87, 0x9A, 0x93, 0xA1, 0xA3, 0x97, 0xA7, 0x9D, 0x92, 0xA4, 0x9D, 0x99, 0xAB, 0x98, 0x95, 
   0xAA, 0x93, 0x8D, 0xA3, 0x8B, 0x83, 0x98, 0x8C, 0x82, 0x99, 0x92, 0x84, 0x96, 0x94, 0x84, 0x8F, 
   0x9B, 0x8E, 0x9D, 0xA1, 0x9D, 0xB4, 0xA1, 0xA2, 0xBB, 0xA3, 0xA0, 0xB7, 0xA6, 0xA0, 0xB1, 0xA6, 
   0xA2, 0xB0, 0x91, 0x8A, 0x96, 0x8A, 0x80, 0x88, 0x83, 0x84, 0x89, 0x8A, 0x8E, 0x96, 0x8E, 0x8A, 
   0x96, 0x87, 0x7F, 0x87, 0x85, 0x81, 0x84, 0x8A, 0x84, 0x89, 0x8C, 0x84, 0x8E, 0x81, 0x83, 0x8D, 
   0x7F, 0x7B, 0x87, 0x62, 0x61, 0x68, 0x69, 0x6A, 0x6E, 0x94, 0x8F, 0x96, 0x8E, 0x82, 0x89, 0x7E, 
   0x70, 0x76, 0x7A, 0x6F, 0x71, 0x7E, 0x71, 0x73, 0x83, 0x78, 0x79, 0x87, 0x7F, 0x7F, 0x91, 0x88, 
   0x87, 0x94, 0x88, 0x87, 0x95, 0x8A, 0x89, 0x91, 0x8A, 0x8C, 0x91, 0x8F, 0x91, 0x99, 0x96, 0x98, 
   0xA0, 0x9B, 0x9F, 0xA4, 0xA3, 0xA7, 0xAF, 0xAF, 0xB4, 0xB6, 0xB6, 0xBD, 0xB8, 0xBA, 0xC2, 0xB9, 
   0xBA, 0xC1, 0xB9, 0xBA, 0xC0, 0xC5, 0xC4, 0xCB, 0xC2, 0xBE, 0xC8, 0xB0, 0xAD, 0xB8, 0x9B, 0x96, 
   0xA4, 0x83, 0x7D, 0x8F, 0x73, 0x70, 0x85, 0x76, 0x73, 0x8B, 0x7C, 0x74, 0x8C, 0x7D, 0x71, 0x88, 
   0x79, 0x70, 0x84, 0x71, 0x6D, 0x80, 0x7B, 0x84, 0x8C, 0x74, 0x81, 0x82, 0x87, 0x8F, 0x90, 0xAB, 
   0xB1, 0xB2, 0xC4, 0xCE, 0xCE, 0xCC, 0xD5, 0xD7, 0xD1, 0xDA, 0xDE, 0xD5, 0xE0, 0xE4, 0xBD, 0xCC, 
   0xD3, 0xAD, 0xBE, 0xC6, 0xAA, 0xBA, 0xC2, 0xAC, 0xB9, 0xC1, 0xC9, 0xD3, 0xDC, 0xD4, 0xDB, 0xE3, 
   0xCB, 0xCF, 0xD4, 0xA0, 0xA2, 0xA2, 0x6E, 0x6F, 0x71, 0x7C, 0x81, 0x7B, 0x8F, 0x92, 0x8E, 0x9C, 
   0x9A, 0x98, 0xA9, 0xA6, 0xA4, 0xAE, 0xAA, 0xAB, 0xA6, 0xA3, 0xA2, 0xA4, 0xA8, 0xAA, 0xB4, 0xB6, 
   0xB5, 0xA2, 0xA1, 0xA1, 0x99, 0x9A, 0x9B, 0x98, 0x9B, 0xA0, 0xAC, 0xB0, 0xB4, 0xAA, 0xAC, 0xAE, 
   0xA5, 0xA1, 0xA3, 0xA8, 0xA7, 0xA5, 0xAB, 0xAA, 0xA5, 0xA5, 0xA1, 0x9E, 0x9F, 0x99, 0x9C, 0x9E, 
   0x9B, 0x9F, 0xA0, 0xA0, 0xA1, 0xA8, 0xA7, 0xA8, 0xA6, 0xA7, 0xA9, 0x7B, 0x7D, 0x7E, 0x72, 0x75, 
   0x75, 0x69, 0x6E, 0x6E, 0x65, 0x69, 0x6D, 0x5F, 0x62, 0x67, 0x3C, 0x3C, 0x3C, 0x22, 0x20, 0x1E, 
   0x12, 0x12, 0x11, 0x17, 0x17, 0x14, 0x37, 0x31, 0x2F, 0x43, 0x3C, 0x3A, 0x40, 0x3D, 0x3E, 0x3C, 
   0x41, 0x46, 0x3F, 0x46, 0x4C, 0x3E, 0x46, 0x4E, 0x3B, 0x46, 0x50, 0x3E, 0x4B, 0x5C, 0x48, 0x56, 
   0x6D, 0x51, 0x5B, 0x73, 0x51, 0x60, 0x77, 0x51, 0x60, 0x75, 0x4F, 0x5F, 0x6E, 0x5D, 0x6E, 0x77, 
   0x6D, 0x7C, 0x81, 0x74, 0x7F, 0x84, 0x65, 0x73, 0x80, 0x6E, 0x77, 0x85, 0x7C, 0x86, 0x91, 0x76, 
   0x85, 0x8E, 0x8B, 0x98, 0xA6, 0xA5, 0xAD, 0xBE, 0xA9, 0xAC, 0xBE, 0xAB, 0xAE, 0xBF, 0xAD, 0xB2, 
   0xBF, 0xB6, 0xBC, 0xC7, 0xC3, 0xC9, 0xD3, 0xAE, 0xB2, 0xBF, 0xAC, 0xB0, 0xBE, 0xAB, 0xAD, 0xBC, 
   0xA2, 0xA6, 0xB4, 0x9D, 0xA2, 0xAF, 0xA9, 0xAD, 0xBA, 0xAE, 0xB5, 0xC1, 0xAF, 0xB6, 0xC3, 0xB3, 
   0xB6, 0xC3, 0xB2, 0xB2, 0xBD, 0xB7, 0xB7, 0xC0, 0xBB, 0xBA, 0xC3, 0xBD, 0xBB, 0xC7, 0xB1, 0xB0, 
   0xBE, 0xA9, 0xA7, 0xB5, 0xA4, 0xA1, 0xAF, 0x9F, 0x9E, 0xAB, 0xA0, 0xA1, 0xAC, 0xA7, 0xA4, 0xAF, 
   0xA1, 0xA0, 0xAB, 0x9E, 0xA2, 0xAF, 0xA3, 0xA5, 0xB3, 0xA9, 0xAB, 0xB6, 0xA3, 0xAB, 0xB6, 0xA7, 
   0xAE, 0xBC, 0x98, 0x9E, 0xAC, 0x71, 0x77, 0x7F, 0x70, 0x74, 0x78, 0x82, 0x7D, 0x85, 0x91, 0x8E, 
   0x9B, 0x99, 0x95, 0xA3, 0x9C, 0x9A, 0xA7, 0xA2, 0xA2, 0xAC, 0xA6, 0xA6, 0xAF, 0xA5, 0xA6, 0xB1, 
   0xA0, 0xA2, 0xAE, 0x8B, 0x8F, 0x9A, 0x81, 0x87, 0x94, 0x6F, 0x79, 0x88, 0x56, 0x5F, 0x70, 0x4D, 
   0x54, 0x64, 0x51, 0x5A, 0x66, 0x52, 0x59, 0x62, 0x53, 0x57, 0x5A, 0x61, 0x64, 0x5E, 0x76, 0x76, 
   0x6C, 0x81, 0x81, 0x77, 0x97, 0x98, 0x8F, 0x96, 0x98, 0x8E, 0x94, 0x97, 0x8E, 0x9E, 0xA5, 0x9C, 
   0xA0, 0xAA, 0xA2, 0xAB, 0xAF, 0xA8, 0xA3, 0xA1, 0x9C, 0x9D, 0x9F, 0x9F, 0xA0, 0xA5, 0xAF, 0x9A, 
   0x99, 0xA5, 0x80, 0x7F, 0x89, 0x7C, 0x7B, 0x83, 0x78, 0x76, 0x80, 0x6C, 0x6C, 0x76, 0x61, 0x63, 
   0x6D, 0x66, 0x6B, 0x76, 0x63, 0x68, 0x72, 0x6F, 0x6F, 0x7B, 0x78, 0x73, 0x80, 0x62, 0x5E, 0x70, 
   0x5A, 0x5C, 0x6F, 0x5C, 0x65, 0x7A, 0x5B, 0x67, 0x81, 0x58, 0x67, 0x89, 0x4A, 0x58, 0x6F, 0x41, 
   0x4B, 0x5D, 0x43, 0x49, 0x53, 0x43, 0x46, 0x4A, 0x3D, 0x3C, 0x40, 0x3B, 0x3A, 0x3E, 0x2F, 0x2F, 
   0x30, 0x31, 0x38, 0x36, 0x46, 0x50, 0x4A, 0x5A, 0x61, 0x5B, 0x78, 0x7D, 0x79, 0xA2, 0xA3, 0xA0, 
   0xA5, 0xA1, 0xA2, 0xAC, 0xA6, 0xA7, 0xB1, 0xAC, 0xAC, 0xB1, 0xA9, 0xAB, 0xAC, 0xA3, 0xA5, 0xAE, 
   0xA4, 0xA6, 0xB9, 0xB0, 0xAF, 0xCF, 0xC8, 0xC5, 0xBC, 0xB3, 0xB2, 0xB1, 0xAA, 0xA9, 0xAA, 0xA3, 
   0xA2, 0xB0, 0xA6, 0xA5, 0xB4, 0xAB, 0xAA, 0xB7, 0xAF, 0xB1, 0xBC, 0xB3, 0xB6, 0xC7, 0xB7, 0xBB, 
   0x95, 0x83, 0x96, 0x6B, 0x68, 0x80, 0x6F, 0x73, 0x83, 0x91, 0x95, 0x9E, 0xBB, 0xBB, 0xBC, 0xCF, 
   0xC5, 0xC2, 0xBA, 0x9F, 0xA8, 0x63, 0x4C, 0x58, 0x38, 0x2C, 0x3B, 0x36, 0x32, 0x40, 0x38, 0x39, 
   0x44, 0x3B, 0x41, 0x4A, 0x41, 0x4D, 0x59, 0x3E, 0x48, 0x59, 0x3F, 0x48, 0x5A, 0x41, 0x4A, 0x5D, 
   0x43, 0x4D, 0x5D, 0x41, 0x4D, 0x5B, 0x42, 0x4C, 0x5A, 0x43, 0x47, 0x57, 0x3D, 0x40, 0x4D, 0x3C, 
   0x40, 0x47, 0x49, 0x4B, 0x4F, 0x4A, 0x48, 0x50, 0x4A, 0x46, 0x53, 0x63, 0x5E, 0x6D, 0x7B, 0x76, 
   0x87, 0x8B, 0x84, 0x95, 0x9E, 0x9C, 0xAB, 0xA2, 0xA2, 0xB3, 0xA1, 0x9B, 0xA8, 0x9E, 0x92, 0x9A, 
   0x9A, 0x91, 0x9B, 0x95, 0x93, 0xA0, 0x8C, 0x8E, 0xA0, 0x8D, 0x86, 0x9F, 0x86, 0x79, 0x8B, 0x65, 
   0x58, 0x64, 0x4D, 0x43, 0x4D, 0x5D, 0x56, 0x5E, 0x6D, 0x6D, 0x73, 0x77, 0x77, 0x80, 0x82, 0x7C, 
   0x87, 0x83, 0x7C, 0x83, 0x82, 0x7E, 0x80, 0x91, 0x8B, 0x8E, 0x98, 0x8F, 0x96, 0x86, 0x82, 0x8B, 
   0x7F, 0x7A, 0x82, 0x6A, 0x6A, 0x6E, 0x73, 0x78, 0x79, 0x95, 0x95, 0x9B, 0xA5, 0xA0, 0xA3, 0x9C, 
   0x94, 0x95, 0x95, 0x8E, 0x91, 0x90, 0x87, 0x89, 0x8C, 0x86, 0x86, 0x93, 0x91, 0x8F, 0xA5, 0xA3, 
   0xA1, 0xB1, 0xAE, 0xAD, 0xBA, 0xB6, 0xB7, 0xC0, 0xBC, 0xC1, 0xBF, 0xC1, 0xC5, 0xBF, 0xC0, 0xC5, 
   0xC0, 0xBE, 0xC6, 0xC2, 0xC1, 0xCA, 0xC2, 0xC4, 0xCE, 0xC6, 0xCB, 0xD6, 0xC0, 0xC6, 0xD2, 0xC0, 
   0xC4, 0xCD, 0xBA, 0xC0, 0xC7, 0xC2, 0xC8, 0xCE, 0xCB, 0xCE, 0xD6, 0xCA, 0xCA, 0xD3, 0xCE, 0xCB, 
   0xD4, 0xAF, 0xA9, 0xB7, 0x80, 0x7B, 0x91, 0x78, 0x78, 0x90, 0x81, 0x7E, 0x94, 0x83, 0x7E, 0x92, 
   0x7D, 0x79, 0x90, 0x76, 0x73, 0x8B, 0x74, 0x7A, 0x83, 0x95, 0x9E, 0x9C, 0xA3, 0xAA, 0xAA, 0xB6, 
   0xBD, 0xC2, 0xD4, 0xDC, 0xDE, 0xE5, 0xEC, 0xEA, 0xEA, 0xEE, 0xEC, 0xE6, 0xEC, 0xEE, 0xCC, 0xD8, 
   0xDB, 0xB4, 0xC4, 0xCA, 0xB2, 0xC1, 0xC7, 0xB8, 0xC5, 0xCB, 0xBE, 0xCA, 0xD2, 0xB9, 0xC4, 0xCC, 
   0xAA, 0xB3, 0xB8, 0x94, 0x9A, 0x99, 0x70, 0x73, 0x71, 0x7A, 0x7F, 0x7A, 0x8B, 0x8C, 0x8B, 0x94, 
   0x91, 0x8F, 0x9C, 0x96, 0x93, 0xA7, 0xA2, 0xA1, 0xA0, 0x9E, 0x9A, 0x9A, 0x98, 0x99, 0xAC, 0xAA, 
   0xA9, 0xA8, 0xA6, 0xA5, 0xA6, 0xA5, 0xA6, 0x9D, 0x9C, 0x9E, 0x95, 0x93, 0x95, 0x97, 0x92, 0x94, 
   0xA2, 0x9B, 0x9C, 0xA4, 0xA0, 0xA1, 0xA2, 0xA0, 0x9E, 0xA2, 0xA1, 0x9F, 0xA3, 0xA1, 0xA6, 0x9B, 
   0x9B, 0x9E, 0x9F, 0xA0, 0xA1, 0xA1, 0x9F, 0xA1, 0xA3, 0xA1, 0xA3, 0x95, 0x95, 0x94, 0x7D, 0x7F, 
   0x7D, 0x59, 0x5C, 0x5C, 0x5B, 0x5D, 0x62, 0x47, 0x46, 0x4D, 0x24, 0x21, 0x22, 0x19, 0x1A, 0x17, 
   0x0F, 0x15, 0x15, 0x0C, 0x14, 0x13, 0x16, 0x18, 0x16, 0x29, 0x25, 0x22, 0x35, 0x30, 0x31, 0x41, 
   0x41, 0x44, 0x41, 0x42, 0x45, 0x44, 0x48, 0x4C, 0x43, 0x4E, 0x55, 0x42, 0x4E, 0x60, 0x50, 0x5A, 
   0x76, 0x5E, 0x6C, 0x8C, 0x6A, 0x7D, 0x98, 0x61, 0x74, 0x87, 0x5E, 0x6E, 0x7C, 0x60, 0x70, 0x7A, 
   0x6B, 0x7A, 0x81, 0x6C, 0x79, 0x7E, 0x61, 0x73, 0x81, 0x7E, 0x8B, 0x99, 0x81, 0x8E, 0x97, 0x81, 
   0x91, 0x99, 0x9D, 0xAA, 0xB6, 0xA9, 0xAD, 0xBF, 0xAA, 0xAB, 0xBE, 0xA6, 0xA8, 0xBD, 0xAC, 0xB0, 
   0xBF, 0xB2, 0xB6, 0xC2, 0xBB, 0xBF, 0xCD, 0xA9, 0xAC, 0xBC, 0xAE, 0xB1, 0xC3, 0xAA, 0xAE, 0xBF, 
   0xA5, 0xA9, 0xB9, 0xA1, 0xA6, 0xB5, 0xAB, 0xAF, 0xBE, 0xB1, 0xB6, 0xC3, 0xB0, 0xB8, 0xC4, 0xB5, 
   0xB8, 0xC4, 0xB8, 0xB7, 0xC1, 0xC5, 0xC4, 0xCC, 0xC3, 0xBF, 0xC7, 0xBB, 0xB8, 0xC4, 0xAA, 0xA8, 
   0xB8, 0xA2, 0x9F, 0xAF, 0xA2, 0x9E, 0xAB, 0xA1, 0x9E, 0xAA, 0xA0, 0xA2, 0xAB, 0xA4, 0xA4, 0xAD, 
   0xA1, 0xA1, 0xAC, 0xA4, 0xA6, 0xB3, 0xA9, 0xA9, 0xB6, 0xA8, 0xAA, 0xB6, 0xA3, 0xA9, 0xB4, 0xAD, 
   0xB1, 0xBE, 0xB5, 0xBA, 0xC7, 0x93, 0x97, 0xA1, 0x75, 0x73, 0x7A, 0x85, 0x80, 0x88, 0x95, 0x90, 
   0x9A, 0x99, 0x90, 0x9C, 0x9D, 0x96, 0xA0, 0xA1, 0x9B, 0xA4, 0xA3, 0x9D, 0xA7, 0xA7, 0xA2, 0xAC, 
   0xA9, 0xA3, 0xB0, 0xA7, 0xA0, 0xAF, 0xAE, 0xA7, 0xB8, 0xA9, 0xA9, 0xB9, 0x96, 0x99, 0xA7, 0x87, 
   0x87, 0x94, 0x6D, 0x6E, 0x77, 0x61, 0x63, 0x68, 0x5C, 0x60, 0x62, 0x56, 0x5C, 0x59, 0x57, 0x59, 
   0x52, 0x5E, 0x5D, 0x57, 0x6E, 0x6E, 0x69, 0x7D, 0x81, 0x79, 0x89, 0x8E, 0x85, 0x92, 0x97, 0x90, 
   0x97, 0x9C, 0x92, 0xA2, 0x9F, 0x96, 0x9E, 0x99, 0x93, 0xA5, 0xA7, 0xA7, 0x99, 0x9E, 0xAA, 0x80, 
   0x7E, 0x8F, 0x6F, 0x73, 0x80, 0x71, 0x75, 0x7D, 0x74, 0x7A, 0x85, 0x64, 0x6E, 0x78, 0x65, 0x6C, 
   0x74, 0x6A, 0x70, 0x7A, 0x5E, 0x66, 0x6D, 0x6B, 0x74, 0x7E, 0x71, 0x74, 0x86, 0x5C, 0x5D, 0x76, 
   0x56, 0x5D, 0x73, 0x5D, 0x66, 0x7A, 0x5F, 0x69, 0x7D, 0x5C, 0x67, 0x7E, 0x50, 0x58, 0x64, 0x3B, 
   0x41, 0x47, 0x3E, 0x44, 0x44, 0x43, 0x48, 0x49, 0x36, 0x39, 0x41, 0x2B, 0x2D, 0x34, 0x27, 0x2A, 
   0x29, 0x43, 0x49, 0x43, 0x62, 0x69, 0x63, 0x7F, 0x82, 0x7C, 0x8D, 0x8D, 0x8A, 0x97, 0x94, 0x94, 
   0xA2, 0x9B, 0x9E, 0xAD, 0xA3, 0xA4, 0xB0, 0xA8, 0xA5, 0xB2, 0xA9, 0xA6, 0xB2, 0xAA, 0xA7, 0xB4, 
   0xAC, 0xA9, 0xC0, 0xB8, 0xB5, 0xD0, 0xC8, 0xC4, 0xBD, 0xB4, 0xB3, 0xAA, 0xA3, 0xA2, 0xAA, 0xA2, 
   0xA1, 0xB1, 0xA7, 0xA6, 0xAF, 0xA6, 0xA5, 0xB1, 0xA9, 0xAB, 0xB8, 0xAE, 0xB2, 0xBD, 0xAD, 0xB6, 
   0x89, 0x77, 0x8E, 0x6E, 0x6F, 0x87, 0x75, 0x7F, 0x8C, 0xAA, 0xAA, 0xAF, 0xCF, 0xC3, 0xC1, 0xCC, 
   0xB6, 0xB6, 0x70, 0x52, 0x5D, 0x2F, 0x1F, 0x2A, 0x35, 0x33, 0x3F, 0x3D, 0x3F, 0x4B, 0x3D, 0x41, 
   0x4C, 0x3B, 0x43, 0x4D, 0x3F, 0x4C, 0x56, 0x3D, 0x48, 0x54, 0x2F, 0x39, 0x45, 0x27, 0x32, 0x3D, 
   0x24, 0x32, 0x3D, 0x25, 0x32, 0x3E, 0x24, 0x2F, 0x3B, 0x1E, 0x28, 0x32, 0x17, 0x22, 0x27, 0x1B, 
   0x28, 0x28, 0x28, 0x35, 0x31, 0x26, 0x31, 0x2E, 0x33, 0x3D, 0x3D, 0x58, 0x5F, 0x64, 0x6C, 0x74, 
   0x7C, 0x72, 0x76, 0x81, 0x7C, 0x81, 0x8C, 0x80, 0x88, 0x94, 0x74, 0x73, 0x7F, 0x67, 0x64, 0x6C, 
   0x61, 0x65, 0x6B, 0x64, 0x6D, 0x72, 0x68, 0x71, 0x7C, 0x5D, 0x5F, 0x76, 0x4C, 0x4A, 0x5B, 0x46, 
   0x47, 0x4F, 0x44, 0x48, 0x52, 0x37, 0x3C, 0x45, 0x3D, 0x41, 0x46, 0x58, 0x5A, 0x60, 0x6A, 0x69, 
   0x71, 0x7B, 0x79, 0x7F, 0x82, 0x83, 0x88, 0x8A, 0x89, 0x8F, 0x9A, 0x92, 0x9B, 0x89, 0x7F, 0x87, 
   0x74, 0x6F, 0x76, 0x66, 0x68, 0x6B, 0x77, 0x7D, 0x7E, 0x91, 0x94, 0x98, 0xBF, 0xBB, 0xBC, 0xB4, 
   0xA9, 0xA9, 0xB3, 0xA3, 0xA7, 0xB8, 0xA7, 0xAB, 0xB9, 0xAF, 0xAF, 0xBD, 0xB5, 0xB5, 0xC2, 0xB8, 
   0xBB, 0xC2, 0xBC, 0xBF, 0xC1, 0xBE, 0xC3, 0xC4, 0xC0, 0xC9, 0xC2, 0xC2, 0xCB, 0xC2, 0xC3, 0xCC, 
   0xC5, 0xC2, 0xCC, 0xC0, 0xBC, 0xC6, 0xBD, 0xBD, 0xC7, 0xC6, 0xC7, 0xD1, 0xC3, 0xC3, 0xCD, 0xC0, 
   0xBD, 0xC6, 0xC1, 0xC0, 0xC8, 0xC4, 0xC4, 0xCC, 0xC6, 0xC7, 0xCE, 0xC5, 0xC5, 0xCD, 0xC8, 0xCA, 
   0xCE, 0xD6, 0xD3, 0xD9, 0xB8, 0xB2, 0xBF, 0x9E, 0x9C, 0xAC, 0x9D, 0x98, 0xA6, 0x96, 0x8D, 0x99, 
   0x8F, 0x86, 0x97, 0x80, 0x82, 0x94, 0x7E, 0x85, 0x85, 0xBC, 0xC0, 0xB8, 0xBB, 0xBD, 0xBB, 0xBC, 
   0xC1, 0xC4, 0xD8, 0xDC, 0xDC, 0xDD, 0xE0, 0xDA, 0xDD, 0xDE, 0xDB, 0xD7, 0xDC, 0xE0, 0xC3, 0xCE, 
   0xD5, 0xB3, 0xC5, 0xCA, 0xB5, 0xC7, 0xCB, 0xB9, 0xCB, 0xCC, 0xBA, 0xCB, 0xCF, 0xBA, 0xCB, 0xD0, 
   0xB3, 0xC1, 0xC6, 0x96, 0xA1, 0xA3, 0x77, 0x83, 0x7D, 0x78, 0x81, 0x7A, 0x83, 0x83, 0x83, 0x90, 
   0x8D, 0x8B, 0x96, 0x93, 0x8E, 0xA2, 0xA1, 0x9B, 0xB2, 0xB3, 0xAC, 0xA9, 0xA9, 0xA5, 0x98, 0x99, 
   0x98, 0x93, 0x95, 0x96, 0x99, 0x98, 0x99, 0xA3, 0xA0, 0x9F, 0x9D, 0x9A, 0x9C, 0x95, 0x95, 0x97, 
   0x95, 0x94, 0x93, 0x9B, 0x98, 0x9A, 0x9F, 0x9D, 0x9D, 0xA4, 0xA5, 0xA6, 0xA2, 0xA3, 0xA8, 0x9A, 
   0x97, 0x9C, 0x9E, 0x9B, 0x9C, 0x9B, 0x99, 0x9B, 0xA0, 0x9E, 0xA1, 0xAE, 0xAD, 0xAD, 0xA5, 0xA4, 
   0xA3, 0x67, 0x68, 0x66, 0x5B, 0x59, 0x5C, 0x38, 0x33, 0x3A, 0x29, 0x26, 0x28, 0x2C, 0x2F, 0x2C, 
   0x25, 0x2A, 0x2C, 0x1C, 0x26, 0x25, 0x15, 0x20, 0x1D, 0x17, 0x1C, 0x19, 0x1E, 0x1F, 0x19, 0x27, 
   0x29, 0x25, 0x33, 0x35, 0x37, 0x45, 0x4B, 0x51, 0x64, 0x75, 0x7E, 0x58, 0x6A, 0x7C, 0x54, 0x63, 
   0x7E, 0x61, 0x75, 0x98, 0x65, 0x7B, 0x98, 0x61, 0x73, 0x89, 0x5D, 0x6B, 0x7B, 0x63, 0x70, 0x7C, 
   0x67, 0x76, 0x7F, 0x66, 0x75, 0x7D, 0x61, 0x74, 0x82, 0x77, 0x85, 0x93, 0x7C, 0x8C, 0x95, 0x86, 
   0x9A, 0xA0, 0xA1, 0xAF, 0xBB, 0xA9, 0xB0, 0xC1, 0xAE, 0xB2, 0xC4, 0xAD, 0xB0, 0xC3, 0xAE, 0xB2, 
   0xC0, 0xAA, 0xAE, 0xB9, 0xBB, 0xBF, 0xCC, 0xAF, 0xB2, 0xC3, 0xAA, 0xAF, 0xC1, 0xAA, 0xAE, 0xBF, 
   0xAB, 0xAD, 0xBF, 0xAC, 0xAF, 0xC0, 0xAF, 0xB2, 0xC2, 0xAE, 0xB3, 0xC0, 0xAE, 0xB6, 0xC1, 0xB4, 
   0xB8, 0xC4, 0xBB, 0xBC, 0xC6, 0xC5, 0xC6, 0xCE, 0xBC, 0xBB, 0xC3, 0xA7, 0xA6, 0xB2, 0xA8, 0xA8, 
   0xB8, 0xA7, 0xA7, 0xB7, 0xA7, 0xA6, 0xB4, 0xAF, 0xAA, 0xB8, 0xA7, 0xA6, 0xB2, 0xA3, 0xA4, 0xAE, 
   0xA7, 0xA8, 0xB1, 0xAC, 0xAD, 0xB8, 0xB1, 0xB1, 0xBB, 0xAB, 0xAF, 0xB7, 0xAD, 0xAF, 0xBA, 0xAE, 
   0xAE, 0xBA, 0xAD, 0xB2, 0xBE, 0xA2, 0xA6, 0xB2, 0x85, 0x81, 0x8C, 0x87, 0x82, 0x8B, 0x91, 0x8B, 
   0x90, 0x93, 0x8D, 0x95, 0x95, 0x90, 0x95, 0x9B, 0x94, 0x9A, 0x9E, 0x98, 0xA0, 0xA4, 0x9E, 0xA7, 
   0xA5, 0x9E, 0xAB, 0xAA, 0xA0, 0xB1, 0xA7, 0xA2, 0xB3, 0xA6, 0xA3, 0xB2, 0xA3, 0xA2, 0xAF, 0x9D, 
   0x9B, 0xA8, 0x9A, 0x93, 0xA0, 0x95, 0x90, 0x9D, 0x8B, 0x8F, 0x99, 0x7F, 0x8C, 0x8E, 0x5F, 0x69, 
   0x64, 0x51, 0x55, 0x4F, 0x6F, 0x73, 0x6D, 0x76, 0x81, 0x77, 0x82, 0x8C, 0x81, 0x8B, 0x90, 0x86, 
   0x90, 0x92, 0x85, 0x95, 0x93, 0x85, 0x92, 0x93, 0x8D, 0x86, 0x8C, 0x8F, 0x68, 0x6F, 0x82, 0x69, 
   0x72, 0x8D, 0x6F, 0x81, 0xA4, 0x80, 0x8D, 0xB0, 0x79, 0x88, 0xAA, 0x6C, 0x83, 0xA2, 0x6A, 0x80, 
   0x9C, 0x62, 0x75, 0x92, 0x5A, 0x6B, 0x86, 0x64, 0x73, 0x93, 0x73, 0x7B, 0x9E, 0x58, 0x5D, 0x7C, 
   0x4B, 0x52, 0x63, 0x4F, 0x54, 0x5C, 0x4B, 0x4B, 0x4F, 0x35, 0x34, 0x37, 0x2B, 0x2A, 0x2E, 0x27, 
   0x2B, 0x2D, 0x26, 0x2D, 0x2E, 0x2C, 0x34, 0x36, 0x29, 0x2F, 0x35, 0x1B, 0x21, 0x27, 0x26, 0x2D, 
   0x2E, 0x41, 0x46, 0x44, 0x59, 0x5D, 0x5F, 0x72, 0x71, 0x72, 0x84, 0x80, 0x81, 0x96, 0x94, 0x96, 
   0xA2, 0x9C, 0x9C, 0xA9, 0xA1, 0x9F, 0xAB, 0xA5, 0xA2, 0xAA, 0xA4, 0xA0, 0xAB, 0xA5, 0xA1, 0xB8, 
   0xB0, 0xAD, 0xB6, 0xAB, 0xAB, 0xA9, 0x9D, 0x9F, 0xA1, 0x96, 0x98, 0xA9, 0xA1, 0xA1, 0xAB, 0xA3, 
   0xA2, 0xAD, 0xA3, 0xA3, 0xAB, 0xA2, 0xA2, 0xAB, 0xA4, 0xA5, 0xAA, 0xA0, 0xA5, 0xA6, 0x93, 0xA0, 
   0x7E, 0x6F, 0x89, 0x6B, 0x72, 0x8D, 0x79, 0x83, 0x97, 0xA0, 0x9F, 0xA9, 0xC0, 0xB3, 0xB5, 0x9B, 
   0x82, 0x88, 0x34, 0x23, 0x2A, 0x2C, 0x27, 0x30, 0x35, 0x39, 0x42, 0x3A, 0x40, 0x4A, 0x3E, 0x46, 
   0x52, 0x45, 0x4D, 0x59, 0x4B, 0x4F, 0x5D, 0x4C, 0x56, 0x64, 0x3E, 0x46, 0x51, 0x34, 0x3F, 0x47, 
   0x3A, 0x4A, 0x53, 0x40, 0x4E, 0x58, 0x2E, 0x3A, 0x44, 0x2A, 0x39, 0x40, 0x46, 0x58, 0x60, 0x6D, 
   0x81, 0x8B, 0x8C, 0xA0, 0xA7, 0x97, 0xA6, 0xAC, 0x86, 0x91, 0x97, 0x7F, 0x87, 0x92, 0x7D, 0x86, 
   0x90, 0x76, 0x7D, 0x86, 0x73, 0x7C, 0x84, 0x7B, 0x89, 0x93, 0x73, 0x79, 0x86, 0x64, 0x69, 0x73, 
   0x5F, 0x6A, 0x6E, 0x63, 0x70, 0x75, 0x6A, 0x75, 0x80, 0x66, 0x6E, 0x7F, 0x51, 0x5A, 0x65, 0x5A, 
   0x63, 0x6D, 0x6A, 0x6F, 0x80, 0x68, 0x69, 0x79, 0x50, 0x50, 0x5C, 0x42, 0x41, 0x4C, 0x50, 0x4E, 
   0x58, 0x69, 0x68, 0x6F, 0x7C, 0x7E, 0x84, 0x8A, 0x8A, 0x90, 0x93, 0x8D, 0x92, 0x88, 0x7E, 0x83, 
   0x79, 0x75, 0x7E, 0x6E, 0x6D, 0x75, 0x81, 0x84, 0x86, 0xA5, 0xA3, 0xA6, 0xC9, 0xBF, 0xC1, 0xAB, 
   0x94, 0x9A, 0x9C, 0x8D, 0x90, 0x97, 0x8B, 0x8D, 0xA2, 0x9B, 0x9B, 0xBF, 0xBA, 0xBA, 0xC1, 0xBB, 
   0xBE, 0xB8, 0xB7, 0xBE, 0xB8, 0xBA, 0xC2, 0xB8, 0xB7, 0xC3, 0xBB, 0xBD, 0xC7, 0xBF, 0xC3, 0xCB, 
   0xC2, 0xC3, 0xCA, 0xC2, 0xBE, 0xC4, 0xBD, 0xBF, 0xC2, 0xC2, 0xC1, 0xC7, 0xC4, 0xBE, 0xC6, 0xBD, 
   0xB8, 0xC1, 0xC2, 0xC0, 0xC8, 0xC0, 0xBF, 0xC5, 0xC3, 0xC3, 0xC8, 0xC5, 0xC9, 0xCE, 0xC4, 0xC7, 
   0xCC, 0xC7, 0xC5, 0xC9, 0xCB, 0xC5, 0xCD, 0xC3, 0xC1, 0xCC, 0xC5, 0xC2, 0xCC, 0xB8, 0xB0, 0xB9, 
   0x9D, 0x96, 0xA0, 0x81, 0x7E, 0x88, 0xA2, 0xAE, 0xAC, 0xCB, 0xD6, 0xD2, 0xC2, 0xCB, 0xCA, 0xC1, 
   0xCA, 0xCB, 0xCF, 0xD6, 0xD6, 0xD4, 0xD8, 0xD7, 0xC6, 0xCF, 0xCE, 0xB9, 0xC7, 0xC9, 0xAB, 0xB9, 
   0xBE, 0xA4, 0xB1, 0xB8, 0xB4, 0xC2, 0xC9, 0xBE, 0xCB, 0xD1, 0xC3, 0xCF, 0xD3, 0xC9, 0xD2, 0xD6, 
   0xC5, 0xC6, 0xCC, 0x8F, 0x93, 0x99, 0x6A, 0x72, 0x71, 0x76, 0x7A, 0x77, 0x7E, 0x7D, 0x7B, 0x8D, 
   0x8C, 0x8B, 0x91, 0x92, 0x91, 0x8F, 0x93, 0x91, 0x93, 0x97, 0x95, 0x97, 0x9E, 0xA0, 0x93, 0x99, 
   0x9B, 0x8E, 0x90, 0x92, 0x98, 0x94, 0x95, 0xA3, 0x9C, 0x9D, 0x9D, 0x9A, 0x99, 0xA0, 0xA3, 0xA2, 
   0x9D, 0x9E, 0x9E, 0x97, 0x97, 0x99, 0x9A, 0x99, 0x99, 0x97, 0x97, 0x96, 0x94, 0x94, 0x96, 0x96, 
   0x93, 0x99, 0x93, 0x90, 0x98, 0x91, 0x92, 0x97, 0x97, 0x93, 0x9A, 0x9D, 0x98, 0x9B, 0xAA, 0xA8, 
   0xAA, 0x85, 0x84, 0x88, 0x50, 0x51, 0x52, 0x35, 0x36, 0x38, 0x38, 0x39, 0x3B, 0x3C, 0x41, 0x41, 
   0x35, 0x3D, 0x3F, 0x32, 0x3D, 0x3A, 0x34, 0x3B, 0x37, 0x25, 0x2A, 0x28, 0x15, 0x20, 0x1A, 0x12, 
   0x1C, 0x18, 0x16, 0x19, 0x1F, 0x29, 0x35, 0x3A, 0x6B, 0x7F, 0x82, 0x62, 0x71, 0x7C, 0x57, 0x63, 
   0x77, 0x5C, 0x71, 0x88, 0x63, 0x7A, 0x96, 0x5E, 0x72, 0x8F, 0x5A, 0x69, 0x7F, 0x69, 0x76, 0x82, 
   0x71, 0x7C, 0x88, 0x73, 0x7B, 0x8C, 0x71, 0x80, 0x91, 0x6E, 0x80, 0x91, 0x71, 0x83, 0x92, 0x89, 
   0x9A, 0xA7, 0xA2, 0xAD, 0xBB, 0xAE, 0xB2, 0xC1, 0xB9, 0xBB, 0xC5, 0xBA, 0xBF, 0xC6, 0xBF, 0xC3, 
   0xCA, 0xB1, 0xB4, 0xBE, 0xA9, 0xAE, 0xBC, 0xA7, 0xAD, 0xC0, 0xA9, 0xAE, 0xC2, 0xAB, 0xAF, 0xC0, 
   0xA9, 0xB0, 0xBC, 0xAA, 0xB1, 0xBD, 0xAD, 0xB3, 0xBF, 0xAD, 0xB1, 0xBE, 0xB0, 0xB4, 0xC1, 0xB2, 
   0xB6, 0xC3, 0xBC, 0xC0, 0xCA, 0xBF, 0xC1, 0xCA, 0xAF, 0xAD, 0xBA, 0xA7, 0xA6, 0xB5, 0xA8, 0xA4, 
   0xB5, 0xA6, 0xA1, 0xB0, 0xA6, 0xA3, 0xB0, 0xA9, 0xA5, 0xB2, 0xAC, 0xA9, 0xB5, 0xBA, 0xB9, 0xC2, 
   0xB7, 0xB8, 0xC1, 0xAF, 0xAF, 0xB9, 0xAB, 0xAB, 0xB5, 0xA8, 0xA7, 0xB3, 0xAE, 0xAF, 0xBB, 0xB2, 
   0xB4, 0xBD, 0xAD, 0xAD, 0xB9, 0xA8, 0xA7, 0xB5, 0x8D, 0x8D, 0x97, 0x86, 0x83, 0x89, 0x8F, 0x87, 
   0x8E, 0x98, 0x8D, 0x92, 0x96, 0x8D, 0x96, 0x9A, 0x94, 0x9D, 0xA2, 0x9E, 0xA5, 0xA5, 0xA0, 0xA5, 
   0xA7, 0x9D, 0xA6, 0xAB, 0x9E, 0xAA, 0xA7, 0xA0, 0xAC, 0xA8, 0xA1, 0xAE, 0xA7, 0xA0, 0xAB, 0xA1, 
   0x9E, 0xA9, 0xA7, 0xA3, 0xB1, 0x9A, 0x95, 0xA3, 0x8C, 0x8E, 0x9B, 0x8A, 0x92, 0x9D, 0x6F, 0x7C, 
   0x7F, 0x53, 0x59, 0x57, 0x61, 0x5F, 0x5A, 0x6B, 0x74, 0x6A, 0x74, 0x7B, 0x6F, 0x7B, 0x7E, 0x71, 
   0x7C, 0x7D, 0x75, 0x6A, 0x6A, 0x68, 0x71, 0x6D, 0x72, 0x60, 0x5E, 0x67, 0x4D, 0x55, 0x5F, 0x5D, 
   0x67, 0x74, 0x72, 0x7F, 0x92, 0x86, 0x94, 0xAB, 0x75, 0x87, 0x9D, 0x77, 0x8D, 0xA2, 0x7A, 0x8A, 
   0xA3, 0x6A, 0x7C, 0x9A, 0x5C, 0x70, 0x94, 0x58, 0x67, 0x8A, 0x4E, 0x57, 0x6C, 0x36, 0x3B, 0x46, 
   0x27, 0x2F, 0x31, 0x24, 0x2B, 0x2D, 0x29, 0x31, 0x30, 0x2D, 0x38, 0x37, 0x3A, 0x46, 0x43, 0x55, 
   0x64, 0x61, 0x6C, 0x7C, 0x7B, 0x88, 0x96, 0x97, 0x86, 0x90, 0x91, 0x6E, 0x78, 0x78, 0x72, 0x7A, 
   0x7B, 0x7B, 0x81, 0x85, 0x7E, 0x7C, 0x82, 0x73, 0x69, 0x71, 0x68, 0x60, 0x68, 0x7F, 0x81, 0x85, 
   0x8F, 0x91, 0x93, 0x9F, 0x9E, 0x9D, 0xAB, 0xA7, 0xA6, 0xA3, 0x9F, 0xA0, 0xA5, 0x9D, 0x9B, 0xB6, 
   0xB2, 0xAF, 0xB9, 0xAB, 0xAE, 0xB2, 0xA6, 0xAC, 0xAB, 0xA3, 0xA5, 0xAA, 0xA1, 0x9C, 0xA7, 0x9A, 
   0x9B, 0xA1, 0x96, 0x9B, 0xA5, 0x9C, 0x9E, 0xA9, 0x9E, 0xA0, 0xA0, 0x96, 0x9A, 0x93, 0x85, 0x94, 
   0x7E, 0x77, 0x96, 0x71, 0x77, 0x98, 0x7B, 0x88, 0x98, 0x95, 0x99, 0xA0, 0x9C, 0x90, 0x99, 0x7A, 
   0x6E, 0x77, 0x5F, 0x62, 0x67, 0x5E, 0x69, 0x6A, 0x5B, 0x60, 0x65, 0x44, 0x47, 0x54, 0x3B, 0x45, 
   0x53, 0x42, 0x4B, 0x5A, 0x47, 0x4A, 0x5C, 0x3F, 0x48, 0x5A, 0x3A, 0x45, 0x51, 0x46, 0x52, 0x5E, 
   0x55, 0x60, 0x6B, 0x53, 0x5E, 0x6B, 0x54, 0x60, 0x6C, 0x57, 0x61, 0x6A, 0x5D, 0x67, 0x72, 0x6A, 
   0x76, 0x87, 0x72, 0x7C, 0x8F, 0x72, 0x7B, 0x8A, 0x71, 0x7B, 0x87, 0x74, 0x7C, 0x88, 0x73, 0x79, 
   0x87, 0x6D, 0x72, 0x7E, 0x71, 0x74, 0x80, 0x72, 0x77, 0x85, 0x65, 0x6C, 0x7A, 0x5D, 0x65, 0x6F, 
   0x66, 0x72, 0x7C, 0x6E, 0x7A, 0x83, 0x66, 0x72, 0x7B, 0x61, 0x6C, 0x78, 0x5A, 0x64, 0x74, 0x60, 
   0x68, 0x7A, 0x65, 0x6A, 0x7D, 0x64, 0x71, 0x82, 0x81, 0x92, 0xA1, 0x8D, 0x97, 0xA1, 0x69, 0x6C, 
   0x75, 0x56, 0x57, 0x5C, 0x6E, 0x72, 0x70, 0x85, 0x85, 0x86, 0x8F, 0x88, 0x91, 0x88, 0x82, 0x8D, 
   0x7C, 0x7D, 0x85, 0x72, 0x73, 0x77, 0x82, 0x81, 0x85, 0x9A, 0x94, 0x96, 0xA3, 0x99, 0x9E, 0x9E, 
   0x89, 0x91, 0x9A, 0x8A, 0x8B, 0x95, 0x8C, 0x8C, 0xB1, 0xAC, 0xAC, 0xCB, 0xC6, 0xCA, 0xB8, 0xB2, 
   0xBB, 0xAF, 0xAA, 0xB7, 0xB5, 0xB2, 0xBF, 0xB7, 0xB3, 0xBE, 0xB7, 0xB9, 0xC0, 0xBB, 0xC0, 0xC6, 
   0xB5, 0xB7, 0xBB, 0xBC, 0xB9, 0xBD, 0xBC, 0xB8, 0xBC, 0xC0, 0xBA, 0xC0, 0xC1, 0xBC, 0xC3, 0xBD, 
   0xBB, 0xC1, 0xBD, 0xC1, 0xC6, 0xBF, 0xC3, 0xC9, 0xC4, 0xC5, 0xCB, 0xC8, 0xC6, 0xCC, 0xC0, 0xBC, 
   0xC2, 0xBE, 0xBA, 0xC2, 0xBE, 0xBC, 0xC3, 0xC2, 0xC1, 0xC5, 0xC3, 0xC2, 0xC5, 0xC5, 0xC2, 0xC7, 
   0xCF, 0xCA, 0xD1, 0xBE, 0xB8, 0xC1, 0xC9, 0xD7, 0xD9, 0xC5, 0xD1, 0xD5, 0xBF, 0xC8, 0xCD, 0xC3, 
   0xC9, 0xCD, 0xCB, 0xD0, 0xD2, 0xD5, 0xD7, 0xD8, 0xD1, 0xD9, 0xDB, 0xC1, 0xCF, 0xD3, 0xB8, 0xC7, 
   0xCD, 0xBA, 0xC8, 0xCE, 0xBE, 0xCD, 0xD2, 0xBD, 0xCB, 0xD1, 0xBE, 0xCB, 0xD1, 0xC6, 0xCE, 0xD5, 
   0xB8, 0xB9, 0xBF, 0x7D, 0x80, 0x85, 0x68, 0x6E, 0x6D, 0x6F, 0x73, 0x72, 0x70, 0x72, 0x72, 0x79, 
   0x7B, 0x7D, 0x83, 0x86, 0x87, 0x85, 0x87, 0x89, 0x80, 0x80, 0x82, 0x86, 0x89, 0x8B, 0x82, 0x81, 
   0x84, 0x7E, 0x78, 0x7C, 0x8E, 0x86, 0x8A, 0x9A, 0x92, 0x95, 0x93, 0x8D, 0x91, 0x8E, 0x8A, 0x8C, 
   0x92, 0x92, 0x91, 0x97, 0x99, 0x9A, 0x99, 0x9B, 0x9D, 0x99, 0x99, 0x9A, 0x96, 0x95, 0x96, 0x91, 
   0x91, 0x94, 0x8B, 0x8D, 0x91, 0x8A, 0x8D, 0x90, 0x92, 0x92, 0x97, 0x93, 0x93, 0x94, 0x96, 0x96, 
   0x96, 0x81, 0x81, 0x83, 0x34, 0x33, 0x33, 0x34, 0x32, 0x31, 0x41, 0x41, 0x3B, 0x46, 0x49, 0x44, 
   0x3E, 0x40, 0x42, 0x3A, 0x38, 0x38, 0x3D, 0x39, 0x3A, 0x39, 0x3D, 0x3E, 0x28, 0x32, 0x2E, 0x17, 
   0x20, 0x1E, 0x14, 0x1B, 0x20, 0x1E, 0x26, 0x2D, 0x52, 0x5D, 0x64, 0x53, 0x5A, 0x6A, 0x52, 0x5D, 
   0x74, 0x5E, 0x73, 0x8B, 0x63, 0x78, 0x93, 0x69, 0x7D, 0x9A, 0x6A, 0x7B, 0x91, 0x6A, 0x78, 0x87, 
   0x72, 0x7E, 0x8D, 0x73, 0x7F, 0x91, 0x6E, 0x79, 0x8E, 0x66, 0x75, 0x8B, 0x75, 0x87, 0x98, 0x9D, 
   0xAA, 0xB9, 0xAA, 0xB0, 0xBF, 0xB5, 0xB8, 0xC5, 0xB9, 0xBC, 0xC5, 0xB8, 0xBB, 0xC5, 0xBE, 0xC2, 
   0xCA, 0xBC, 0xC0, 0xC9, 0xAC, 0xB4, 0xBE, 0xA4, 0xAE, 0xBC, 0xA7, 0xB2, 0xBE, 0xAA, 0xB3, 0xBF, 
   0xAD, 0xB3, 0xBF, 0xAE, 0xB4, 0xC0, 0xAF, 0xB4, 0xC0, 0xB2, 0xB6, 0xC3, 0xB4, 0xB7, 0xC4, 0xB1, 
   0xB4, 0xC1, 0xBD, 0xC0, 0xCB, 0xC4, 0xC5, 0xCE, 0xB4, 0xB1, 0xBB, 0xAC, 0xA9, 0xB5, 0xAB, 0xA7, 
   0xB2, 0xAC, 0xA6, 0xB3, 0xA7, 0xA4, 0xB1, 0xA2, 0x9F, 0xAC, 0xA6, 0xA2, 0xAF, 0xB5, 0xAF, 0xB9, 
   0xBD, 0xB7, 0xC1, 0xB2, 0xB0, 0xB9, 0xA8, 0xA9, 0xB4, 0xA7, 0xAA, 0xB6, 0xB2, 0xB6, 0xC2, 0xB1, 
   0xB7, 0xBF, 0xA8, 0xAC, 0xB7, 0xA5, 0xA5, 0xB2, 0x99, 0x96, 0xA0, 0x90, 0x8C, 0x90, 0x94, 0x8B, 
   0x92, 0x98, 0x8D, 0x94, 0x96, 0x8D, 0x96, 0x9C, 0x94, 0x9E, 0xA2, 0x9B, 0xA4, 0xA6, 0x9E, 0xA7, 
   0xA6, 0x9B, 0xA7, 0xA8, 0x9B, 0xA8, 0xA8, 0x9F, 0xAB, 0xA8, 0xA1, 0xAE, 0xA6, 0x9F, 0xAA, 0xA1, 
   0x9E, 0xA9, 0xA7, 0xA4, 0xB2, 0x9D, 0x99, 0xA7, 0x8D, 0x8E, 0x99, 0x8B, 0x91, 0x99, 0x78, 0x85, 
   0x8C, 0x58, 0x61, 0x61, 0x60, 0x5E, 0x58, 0x6E, 0x6F, 0x64, 0x75, 0x78, 0x6F, 0x78, 0x76, 0x72, 
   0x56, 0x54, 0x53, 0x3D, 0x40, 0x41, 0x5B, 0x5E, 0x64, 0x5A, 0x5E, 0x62, 0x5D, 0x64, 0x65, 0x73, 
   0x77, 0x7B, 0x7D, 0x7E, 0x86, 0x7E, 0x7E, 0x8A, 0x79, 0x7D, 0x87, 0x7D, 0x8A, 0x8E, 0x7D, 0x87, 
   0x8C, 0x6D, 0x77, 0x81, 0x4B, 0x58, 0x63, 0x4C, 0x59, 0x61, 0x4C, 0x56, 0x5C, 0x4C, 0x56, 0x5A, 
   0x57, 0x63, 0x5F, 0x6C, 0x76, 0x70, 0x8B, 0x98, 0x90, 0x85, 0x97, 0x92, 0x85, 0x8F, 0x8B, 0xA0, 
   0xA8, 0xA5, 0xB9, 0xBF, 0xBB, 0xC8, 0xC8, 0xC5, 0xCD, 0xC9, 0xC7, 0xCA, 0xC5, 0xC3, 0xCD, 0xCA, 
   0xC7, 0xB9, 0xB8, 0xB8, 0x9A, 0x96, 0x98, 0x82, 0x79, 0x7D, 0x5E, 0x59, 0x5C, 0x69, 0x6E, 0x6E, 
   0x88, 0x8C, 0x8B, 0xA1, 0xA0, 0xA1, 0xAD, 0xA8, 0xAA, 0xA7, 0xA1, 0xA2, 0xA3, 0x9B, 0x9D, 0xB2, 
   0xAE, 0xB1, 0xBC, 0xAB, 0xB1, 0xB8, 0xA8, 0xAD, 0xB2, 0xA8, 0xAA, 0xA9, 0xA0, 0xA0, 0xA3, 0x9A, 
   0x9D, 0xA0, 0x96, 0x9D, 0xA5, 0x97, 0x9A, 0xAA, 0x9A, 0x9E, 0x9A, 0x8E, 0x95, 0x85, 0x7C, 0x8C, 
   0x70, 0x71, 0x8B, 0x6D, 0x73, 0x8D, 0x8C, 0x90, 0x9E, 0x9F, 0x9F, 0xA6, 0x8D, 0x89, 0x90, 0x79, 
   0x79, 0x7D, 0x7C, 0x80, 0x84, 0x82, 0x86, 0x87, 0x84, 0x85, 0x88, 0x7A, 0x7D, 0x85, 0x63, 0x68, 
   0x73, 0x4C, 0x50, 0x5C, 0x44, 0x4B, 0x57, 0x3F, 0x4A, 0x57, 0x3B, 0x45, 0x52, 0x41, 0x4B, 0x5A, 
   0x44, 0x4E, 0x59, 0x43, 0x4E, 0x59, 0x45, 0x51, 0x62, 0x4A, 0x51, 0x62, 0x52, 0x53, 0x66, 0x52, 
   0x52, 0x64, 0x5A, 0x56, 0x68, 0x59, 0x57, 0x67, 0x5B, 0x5D, 0x6D, 0x60, 0x63, 0x74, 0x5E, 0x63, 
   0x72, 0x5C, 0x5F, 0x6E, 0x5C, 0x5C, 0x6B, 0x57, 0x58, 0x64, 0x58, 0x57, 0x65, 0x56, 0x55, 0x62, 
   0x5C, 0x5F, 0x66, 0x66, 0x6F, 0x74, 0x5E, 0x65, 0x6E, 0x53, 0x54, 0x62, 0x52, 0x5A, 0x65, 0x61, 
   0x6D, 0x77, 0x62, 0x6A, 0x78, 0x5C, 0x64, 0x74, 0x6C, 0x73, 0x82, 0x77, 0x7E, 0x85, 0x88, 0x8D, 
   0x95, 0x79, 0x7D, 0x87, 0x63, 0x64, 0x6C, 0x77, 0x72, 0x7A, 0x8A, 0x7F, 0x87, 0x8B, 0x8C, 0x92, 
   0x7B, 0x7B, 0x82, 0x77, 0x75, 0x78, 0x87, 0x86, 0x87, 0x93, 0x8B, 0x8A, 0xB0, 0xA4, 0xA5, 0xA8, 
   0x99, 0x9E, 0xA3, 0x9E, 0xA0, 0xB0, 0xAD, 0xB2, 0xC1, 0xBE, 0xC5, 0xC7, 0xC2, 0xCB, 0xB9, 0xB3, 
   0xBC, 0xB5, 0xB1, 0xBA, 0xB6, 0xB4, 0xBD, 0xB7, 0xB7, 0xBE, 0xB9, 0xBA, 0xC2, 0xBA, 0xBC, 0xC4, 
   0xBC, 0xBD, 0xC4, 0xC2, 0xC0, 0xC5, 0xC8, 0xC2, 0xC7, 0xC7, 0xC1, 0xC7, 0xBF, 0xBB, 0xC2, 0xBB, 
   0xB7, 0xBE, 0xBC, 0xBD, 0xC3, 0xC0, 0xC5, 0xCB, 0xC6, 0xC9, 0xCF, 0xC6, 0xC3, 0xCA, 0xC2, 0xBA, 
   0xC2, 0xBE, 0xB8, 0xBF, 0xBB, 0xB8, 0xBC, 0xBD, 0xBC, 0xBE, 0xC0, 0xBF, 0xC1, 0xBC, 0xB9, 0xBF, 
   0xB9, 0xB3, 0xBE, 0xC3, 0xB6, 0xBD, 0xC1, 0xCB, 0xD1, 0xB6, 0xC0, 0xC9, 0xB4, 0xBD, 0xC6, 0xB9, 
   0xC1, 0xC6, 0xC6, 0xCC, 0xCF, 0xD1, 0xD4, 0xD5, 0xC6, 0xCE, 0xCF, 0xBE, 0xCC, 0xCF, 0xBB, 0xC9, 
   0xCF, 0xC1, 0xCE, 0xD3, 0xC6, 0xD4, 0xD7, 0xC0, 0xCF, 0xD3, 0xBD, 0xCA, 0xCF, 0xCF, 0xD7, 0xDB, 
   0xA8, 0xAB, 0xAD, 0x64, 0x68, 0x68, 0x61, 0x68, 0x66, 0x78, 0x7D, 0x7B, 0x7B, 0x7E, 0x7D, 0x79, 
   0x7B, 0x7B, 0x7C, 0x7D, 0x7E, 0x7A, 0x77, 0x7A, 0x71, 0x6A, 0x6E, 0x65, 0x69, 0x68, 0x63, 0x67, 
   0x66, 0x69, 0x6A, 0x6B, 0x61, 0x5F, 0x61, 0x60, 0x5C, 0x60, 0x65, 0x64, 0x67, 0x76, 0x77, 0x7A, 
   0x7F, 0x83, 0x85, 0x88, 0x8B, 0x8E, 0x91, 0x94, 0x96, 0x94, 0x97, 0x96, 0x9C, 0x9F, 0x9B, 0x9B, 
   0x9B, 0x9B, 0x93, 0x92, 0x94, 0x90, 0x90, 0x92, 0x8F, 0x91, 0x93, 0x8E, 0x8E, 0x8F, 0x91, 0x8C, 
   0x8D, 0x60, 0x58, 0x59, 0x20, 0x1A, 0x1A, 0x28, 0x25, 0x22, 0x34, 0x31, 0x2C, 0x3D, 0x3B, 0x38, 
   0x33, 0x32, 0x36, 0x28, 0x28, 0x29, 0x29, 0x26, 0x26, 0x32, 0x33, 0x31, 0x38, 0x3B, 0x39, 0x31, 
   0x38, 0x36, 0x19, 0x22, 0x26, 0x17, 0x21, 0x27, 0x3F, 0x48, 0x50, 0x55, 0x5C, 0x6D, 0x56, 0x66, 
   0x7D, 0x61, 0x75, 0x8A, 0x65, 0x78, 0x92, 0x6D, 0x7F, 0x9B, 0x6A, 0x7B, 0x92, 0x65, 0x74, 0x86, 
   0x6B, 0x7A, 0x8C, 0x6C, 0x7B, 0x90, 0x6E, 0x79, 0x89, 0x6F, 0x7D, 0x8D, 0x86, 0x95, 0xA3, 0xAB, 
   0xB5, 0xC2, 0xB1, 0xB5, 0xC4, 0xB5, 0xB8, 0xC5, 0xB3, 0xB8, 0xC3, 0xAD, 0xB3, 0xC0, 0xB0, 0xB5, 
   0xC0, 0xB4, 0xBA, 0xC4, 0xA9, 0xB3, 0xBD, 0xA7, 0xB1, 0xBC, 0xAA, 0xB5, 0xBE, 0xAC, 0xB5, 0xBE, 
   0xB0, 0xB5, 0xC1, 0xB3, 0xB7, 0xC4, 0xB4, 0xB8, 0xC5, 0xB6, 0xBA, 0xC7, 0xB4, 0xB7, 0xC4, 0xB2, 
   0xB4, 0xC1, 0xC0, 0xC0, 0xCB, 0xC0, 0xBC, 0xC6, 0xB0, 0xAC, 0xB7, 0xAA, 0xA9, 0xB5, 0xAB, 0xA9, 
   0xB5, 0xAE, 0xA8, 0xB4, 0xAC, 0xA6, 0xB2, 0xA9, 0xA4, 0xB0, 0xA4, 0x9E, 0xAB, 0xB3, 0xAC, 0xB6, 
   0xBD, 0xB5, 0xC0, 0xB0, 0xAC, 0xB6, 0xA6, 0xA7, 0xB2, 0xA4, 0xAA, 0xB5, 0xB5, 0xB9, 0xC6, 0xB9, 
   0xBF, 0xC8, 0xAE, 0xB4, 0xBD, 0xAF, 0xB0, 0xBB, 0xA3, 0xA0, 0xA8, 0x90, 0x8C, 0x90, 0x8E, 0x88, 
   0x8E, 0x95, 0x8D, 0x92, 0x98, 0x8F, 0x96, 0x9F, 0x96, 0x9D, 0xA2, 0x9A, 0xA1, 0xA4, 0x9B, 0xA4, 
   0xA5, 0x9C, 0xA5, 0xA6, 0x9E, 0xA8, 0xA8, 0xA2, 0xAD, 0xA9, 0xA4, 0xB0, 0xA6, 0xA0, 0xAB, 0xA0, 
   0x9C, 0xA8, 0xA6, 0xA0, 0xAE, 0x9F, 0x98, 0xA6, 0x8E, 0x8A, 0x95, 0x90, 0x90, 0x99, 0x82, 0x85, 
   0x91, 0x57, 0x5C, 0x62, 0x46, 0x48, 0x43, 0x57, 0x59, 0x50, 0x60, 0x60, 0x5C, 0x56, 0x52, 0x53, 
   0x35, 0x32, 0x33, 0x46, 0x4A, 0x4C, 0x5B, 0x61, 0x68, 0x5E, 0x64, 0x69, 0x6F, 0x76, 0x77, 0x9D, 
   0x9D, 0xA4, 0x9D, 0x98, 0x9F, 0x94, 0x92, 0x99, 0x7B, 0x7F, 0x85, 0x74, 0x80, 0x81, 0x7E, 0x86, 
   0x83, 0x84, 0x8B, 0x83, 0x84, 0x89, 0x7D, 0xA0, 0xA9, 0xA2, 0xA9, 0xB3, 0xB2, 0x8A, 0x96, 0x98, 
   0x9C, 0xA7, 0x9E, 0xBD, 0xBF, 0xB2, 0xC6, 0xC7, 0xBA, 0xBA, 0xBE, 0xB7, 0xBC, 0xBB, 0xB5, 0xAE, 
   0xAB, 0xA8, 0xAD, 0xA8, 0xA2, 0xB9, 0xB2, 0xA9, 0xC0, 0xB4, 0xB0, 0xC5, 0xBB, 0xB7, 0xD0, 0xCB, 
   0xC3, 0xC3, 0xBF, 0xBD, 0xAA, 0xA3, 0xA3, 0x94, 0x8C, 0x8E, 0x75, 0x71, 0x73, 0x67, 0x69, 0x69, 
   0x89, 0x8A, 0x89, 0xA3, 0xA0, 0xA0, 0xAD, 0xA5, 0xA4, 0xA8, 0xA0, 0x9D, 0xA0, 0x9B, 0x9D, 0xBD, 
   0xBC, 0xC3, 0xB8, 0xA8, 0xB0, 0xB4, 0xA6, 0xA9, 0xC3, 0xBB, 0xBA, 0xCD, 0xC5, 0xC2, 0xB5, 0xAC, 
   0xB0, 0xA6, 0xA0, 0xA6, 0xAB, 0xA4, 0xA8, 0xAA, 0x9F, 0xA8, 0x8B, 0x81, 0x8E, 0x7D, 0x74, 0x85, 
   0x6A, 0x71, 0x84, 0x82, 0x8A, 0x99, 0xAD, 0xAA, 0xB2, 0xAA, 0xA3, 0xAA, 0x9A, 0x99, 0xA0, 0x96, 
   0x9B, 0xA0, 0x96, 0x9C, 0x9E, 0x9C, 0x9C, 0xA1, 0x90, 0x91, 0x98, 0x8F, 0x97, 0xA0, 0x87, 0x8C, 
   0x98, 0x71, 0x74, 0x7F, 0x63, 0x6E, 0x71, 0x5E, 0x67, 0x6B, 0x5F, 0x66, 0x6A, 0x61, 0x6A, 0x71, 
   0x5F, 0x66, 0x6C, 0x59, 0x60, 0x67, 0x55, 0x5B, 0x69, 0x52, 0x55, 0x66, 0x4B, 0x4E, 0x61, 0x4D, 
   0x4F, 0x5F, 0x5A, 0x55, 0x64, 0x62, 0x59, 0x68, 0x5F, 0x5B, 0x69, 0x5B, 0x5C, 0x6B, 0x55, 0x54, 
   0x64, 0x4D, 0x49, 0x59, 0x4E, 0x48, 0x57, 0x4F, 0x4B, 0x59, 0x5A, 0x55, 0x66, 0x59, 0x56, 0x67, 
   0x50, 0x52, 0x5C, 0x4F, 0x53, 0x5B, 0x4F, 0x55, 0x64, 0x53, 0x5F, 0x70, 0x5E, 0x6E, 0x77, 0x75, 
   0x80, 0x87, 0x6D, 0x6F, 0x7D, 0x54, 0x57, 0x66, 0x59, 0x60, 0x6F, 0x69, 0x71, 0x7B, 0x90, 0x94, 
   0xA1, 0x89, 0x88, 0x98, 0x61, 0x5D, 0x6B, 0x5C, 0x55, 0x5F, 0x6F, 0x6A, 0x6C, 0x8B, 0x8C, 0x8F, 
   0x7A, 0x77, 0x7D, 0x74, 0x72, 0x74, 0x82, 0x82, 0x81, 0x9A, 0x94, 0x91, 0xAD, 0xA6, 0xA3, 0xB2, 
   0xAB, 0xAE, 0xBA, 0xBB, 0xBE, 0xC0, 0xC1, 0xC6, 0xC1, 0xBF, 0xC7, 0xC1, 0xBD, 0xC6, 0xBC, 0xB7, 
   0xC1, 0xBB, 0xB8, 0xC1, 0xB9, 0xB8, 0xC0, 0xB9, 0xB8, 0xC0, 0xBA, 0xB9, 0xC2, 0xB8, 0xB9, 0xC2, 
   0xB3, 0xB6, 0xBF, 0xB8, 0xBA, 0xC2, 0xBE, 0xBC, 0xC3, 0xC3, 0xBE, 0xC5, 0xC0, 0xB8, 0xC1, 0xBC, 
   0xB4, 0xBD, 0xBE, 0xB9, 0xC1, 0xC4, 0xC5, 0xCC, 0xC8, 0xC7, 0xCE, 0xC3, 0xBD, 0xC6, 0xBB, 0xB6, 
   0xBE, 0xB6, 0xB4, 0xBB, 0xB6, 0xB5, 0xBD, 0xB9, 0xB9, 0xBE, 0xBE, 0xBD, 0xC1, 0xBD, 0xBB, 0xBF, 
   0xB8, 0xB3, 0xBA, 0xA9, 0x9F, 0xA6, 0xB6, 0xC4, 0xCB, 0xB2, 0xBE, 0xC6, 0xB2, 0xBB, 0xC3, 0xB8, 
   0xC0, 0xC6, 0xC5, 0xCD, 0xCF, 0xD6, 0xDC, 0xDB, 0xC6, 0xD0, 0xCF, 0xB0, 0xC0, 0xC0, 0xAC, 0xBD, 
   0xC0, 0xB9, 0xC5, 0xC9, 0xCD, 0xD7, 0xDC, 0xCB, 0xD8, 0xDC, 0xBF, 0xCB, 0xCD, 0xCB, 0xD2, 0xD4, 
   0x89, 0x8C, 0x8F, 0x48, 0x4B, 0x4C, 0x4C, 0x4F, 0x4D, 0x64, 0x65, 0x63, 0x63, 0x62, 0x60, 0x59, 
   0x58, 0x57, 0x5A, 0x5B, 0x5B, 0x66, 0x67, 0x68, 0x6D, 0x6B, 0x6D, 0x6E, 0x75, 0x6E, 0x76, 0x7E, 
   0x77, 0x7F, 0x86, 0x81, 0x77, 0x7C, 0x79, 0x60, 0x65, 0x64, 0x48, 0x50, 0x4F, 0x5E, 0x68, 0x68, 
   0x6F, 0x77, 0x7F, 0x7A, 0x7E, 0x84, 0x85, 0x88, 0x8A, 0x8C, 0x91, 0x8C, 0xA1, 0xA5, 0x9E, 0xB1, 
   0xB0, 0xAB, 0xA3, 0x9E, 0x9C, 0x9B, 0x97, 0x98, 0x9A, 0x97, 0x99, 0x9F, 0x9B, 0x9E, 0x7C, 0x75, 
   0x78, 0x30, 0x2B, 0x2A, 0x1D, 0x1E, 0x1B, 0x1C, 0x21, 0x1E, 0x1E, 0x22, 0x1F, 0x26, 0x28, 0x28, 
   0x24, 0x27, 0x2B, 0x27, 0x29, 0x29, 0x29, 0x28, 0x25, 0x2C, 0x2C, 0x26, 0x33, 0x30, 0x2E, 0x35, 
   0x37, 0x35, 0x20, 0x27, 0x28, 0x22, 0x2B, 0x2E, 0x3B, 0x45, 0x49, 0x5B, 0x61, 0x6F, 0x5D, 0x6A, 
   0x7D, 0x66, 0x77, 0x8B, 0x68, 0x79, 0x92, 0x67, 0x78, 0x92, 0x67, 0x78, 0x8E, 0x5F, 0x70, 0x83, 
   0x66, 0x76, 0x8A, 0x69, 0x7A, 0x8F, 0x82, 0x8F, 0x96, 0x92, 0x9D, 0xA5, 0xA5, 0xAE, 0xB8, 0xBB, 
   0xC3, 0xCF, 0xB3, 0xBB, 0xC7, 0xAE, 0xB4, 0xC3, 0xB0, 0xB6, 0xC5, 0xAF, 0xB6, 0xC4, 0xB1, 0xB8, 
   0xC4, 0xAE, 0xB4, 0xC0, 0xA2, 0xAA, 0xB7, 0xA9, 0xB1, 0xBF, 0xAE, 0xB5, 0xC2, 0xB0, 0xB5, 0xC1, 
   0xB1, 0xB4, 0xC1, 0xB2, 0xB5, 0xC2, 0xB4, 0xB7, 0xC4, 0xB4, 0xB5, 0xC2, 0xB2, 0xB3, 0xC0, 0xB3, 
   0xB4, 0xC1, 0xC2, 0xBF, 0xCB, 0xBF, 0xB7, 0xC4, 0xAF, 0xAA, 0xB7, 0xA9, 0xAA, 0xB7, 0xAC, 0xAB, 
   0xB8, 0xB2, 0xAD, 0xBA, 0xB7, 0xB0, 0xBC, 0xBF, 0xB9, 0xC5, 0xAD, 0xA6, 0xB3, 0xAD, 0xA6, 0xB1, 
   0xB4, 0xAF, 0xB9, 0xAE, 0xAE, 0xB7, 0xAA, 0xAD, 0xB8, 0xA4, 0xA8, 0xB3, 0xAA, 0xB0, 0xBE, 0xBA, 
   0xC3, 0xCD, 0xC1, 0xC6, 0xCF, 0xC3, 0xC3, 0xCC, 0xAA, 0xA5, 0xAB, 0x93, 0x8C, 0x90, 0x8E, 0x88, 
   0x8C, 0x95, 0x91, 0x94, 0x9B, 0x94, 0x97, 0xA1, 0x98, 0x9C, 0xA3, 0x99, 0x9E, 0xA4, 0x9A, 0xA1, 
   0xA4, 0x9D, 0xA4, 0xA7, 0xA1, 0xA9, 0xA8, 0xA3, 0xAE, 0xA6, 0xA2, 0xAE, 0xA5, 0x9F, 0xAA, 0xA2, 
   0x9C, 0xA8, 0xA4, 0x9C, 0xAB, 0x9F, 0x95, 0xA3, 0x8D, 0x88, 0x94, 0x8D, 0x8C, 0x98, 0x8A, 0x88, 
   0x95, 0x5F, 0x62, 0x6D, 0x4C, 0x56, 0x57, 0x5E, 0x65, 0x63, 0x43, 0x43, 0x44, 0x3B, 0x3E, 0x40, 
   0x4F, 0x57, 0x55, 0x60, 0x69, 0x6B, 0x65, 0x6A, 0x74, 0x72, 0x75, 0x7F, 0x86, 0x8C, 0x92, 0xA6, 
   0xA6, 0xB3, 0x8A, 0x7D, 0x8D, 0x59, 0x50, 0x59, 0x3C, 0x3F, 0x43, 0x61, 0x6F, 0x71, 0x8E, 0x99, 
   0x94, 0xB5, 0xBA, 0xAE, 0xB6, 0xB2, 0xA7, 0xBF, 0xB9, 0xB1, 0xC2, 0xC2, 0xC0, 0xA1, 0xA9, 0xAC, 
   0xB5, 0xBB, 0xB1, 0xD6, 0xD0, 0xBF, 0xD2, 0xC7, 0xB8, 0xC8, 0xBE, 0xB4, 0xC3, 0xB9, 0xAF, 0xB5, 
   0xAE, 0xA9, 0xB4, 0xAF, 0xA7, 0xBC, 0xB8, 0xAE, 0xC1, 0xBA, 0xB7, 0xCB, 0xC8, 0xC5, 0xCB, 0xC8, 
   0xC0, 0xCB, 0xC4, 0xBD, 0xBA, 0xB0, 0xAC, 0xA1, 0x9A, 0x97, 0x8C, 0x88, 0x86, 0x75, 0x73, 0x70, 
   0x85, 0x82, 0x7F, 0x9F, 0x9B, 0x97, 0xA9, 0xA1, 0x9D, 0xA7, 0x9F, 0x9D, 0x9B, 0x99, 0x9D, 0xBA, 
   0xC1, 0xC7, 0xB8, 0xB1, 0xB5, 0xB0, 0xA9, 0xAA, 0xBA, 0xB6, 0xB7, 0xD7, 0xD1, 0xD0, 0xC1, 0xB7, 
   0xBA, 0xA7, 0xA0, 0xA4, 0xAA, 0xA5, 0xA6, 0xA6, 0x9F, 0xA8, 0x7B, 0x78, 0x85, 0x6D, 0x6A, 0x7D, 
   0x6C, 0x76, 0x85, 0xA0, 0xA8, 0xAE, 0xB4, 0xAF, 0xB1, 0x92, 0x8D, 0x90, 0x8A, 0x8B, 0x91, 0xA0, 
   0xA3, 0xAA, 0xAA, 0xA9, 0xAB, 0x9F, 0x9C, 0xA4, 0x96, 0x97, 0xA1, 0x97, 0x9C, 0xA8, 0x89, 0x8E, 
   0x9C, 0x77, 0x7F, 0x88, 0x7D, 0x88, 0x89, 0x7D, 0x80, 0x81, 0x79, 0x7C, 0x7C, 0x81, 0x85, 0x88, 
   0x7F, 0x81, 0x85, 0x76, 0x77, 0x80, 0x6C, 0x6C, 0x7B, 0x73, 0x74, 0x80, 0x69, 0x71, 0x80, 0x63, 
   0x6C, 0x7E, 0x61, 0x65, 0x77, 0x64, 0x63, 0x72, 0x6E, 0x6D, 0x7A, 0x71, 0x77, 0x84, 0x6E, 0x72, 
   0x80, 0x5A, 0x5A, 0x66, 0x54, 0x53, 0x5E, 0x65, 0x62, 0x70, 0x6B, 0x68, 0x78, 0x5D, 0x5C, 0x6A, 
   0x55, 0x57, 0x61, 0x52, 0x58, 0x64, 0x52, 0x5A, 0x6F, 0x56, 0x61, 0x78, 0x5F, 0x6B, 0x79, 0x7B, 
   0x82, 0x8C, 0x79, 0x7C, 0x8A, 0x5E, 0x63, 0x6E, 0x5B, 0x62, 0x6E, 0x65, 0x6F, 0x7A, 0x79, 0x7F, 
   0x90, 0x7A, 0x7C, 0x8F, 0x6C, 0x6B, 0x7C, 0x5B, 0x58, 0x64, 0x49, 0x47, 0x4B, 0x62, 0x61, 0x66, 
   0x6A, 0x6C, 0x72, 0x76, 0x79, 0x7C, 0x8B, 0x8D, 0x8D, 0xAA, 0xAC, 0xA9, 0xBE, 0xBC, 0xB9, 0xCC, 
   0xC6, 0xCA, 0xCA, 0xC9, 0xCD, 0xC5, 0xC2, 0xC7, 0xC0, 0xBD, 0xC2, 0xC1, 0xBE, 0xC4, 0xC7, 0xC4, 
   0xCC, 0xBC, 0xBD, 0xC6, 0xBA, 0xBA, 0xC3, 0xBC, 0xB9, 0xC1, 0xBC, 0xB9, 0xC1, 0xBB, 0xBA, 0xC1, 
   0xB5, 0xB9, 0xBF, 0xB5, 0xB9, 0xC0, 0xB7, 0xB6, 0xBE, 0xBC, 0xB7, 0xBF, 0xBF, 0xB9, 0xC2, 0xBA, 
   0xB5, 0xBE, 0xB8, 0xB6, 0xBE, 0xBC, 0xBA, 0xC2, 0xBD, 0xBA, 0xC2, 0xB4, 0xB2, 0xBA, 0xB0, 0xAD, 
   0xB4, 0xAF, 0xAE, 0xB5, 0xAB, 0xA9, 0xB3, 0xB1, 0xAE, 0xB6, 0xB6, 0xB2, 0xB7, 0xBA, 0xB5, 0xB7, 
   0xBD, 0xB5, 0xB8, 0xB7, 0xB0, 0xB5, 0xB8, 0xCA, 0xD0, 0xBE, 0xCB, 0xD1, 0xCA, 0xD2, 0xD8, 0xC6, 
   0xCB, 0xD1, 0xD3, 0xD5, 0xD8, 0xE7, 0xE6, 0xE6, 0xE0, 0xE2, 0xE1, 0xCA, 0xD2, 0xD1, 0xC2, 0xCA, 
   0xCC, 0xC0, 0xC5, 0xCA, 0xCF, 0xD5, 0xDA, 0xD2, 0xDA, 0xDD, 0xD3, 0xDA, 0xD9, 0xD1, 0xD4, 0xD3, 
   0x6C, 0x71, 0x72, 0x25, 0x28, 0x2B, 0x1D, 0x22, 0x21, 0x27, 0x2A, 0x29, 0x31, 0x32, 0x31, 0x39, 
   0x3C, 0x3B, 0x48, 0x4E, 0x4C, 0x55, 0x5D, 0x5B, 0x6D, 0x73, 0x71, 0x7C, 0x85, 0x78, 0x8E, 0x95, 
   0x88, 0x92, 0x95, 0x8C, 0x91, 0x98, 0x8F, 0x8C, 0x94, 0x8C, 0x6D, 0x73, 0x6E, 0x68, 0x6B, 0x68, 
   0x6C, 0x73, 0x7A, 0x73, 0x7A, 0x7F, 0x75, 0x7B, 0x7B, 0x84, 0x86, 0x82, 0x99, 0x98, 0x91, 0xA8, 
   0xA5, 0x9F, 0xAA, 0xA7, 0xA5, 0xB2, 0xB1, 0xB1, 0xBE, 0xB9, 0xBB, 0x93, 0x8A, 0x90, 0x3E, 0x38, 
   0x3E, 0x23, 0x24, 0x22, 0x26, 0x2B, 0x28, 0x23, 0x2A, 0x28, 0x1E, 0x25, 0x23, 0x1F, 0x25, 0x25, 
   0x1B, 0x24, 0x27, 0x26, 0x33, 0x33, 0x2E, 0x36, 0x33, 0x2C, 0x31, 0x2D, 0x2A, 0x2C, 0x2B, 0x2A, 
   0x30, 0x2D, 0x22, 0x28, 0x29, 0x2A, 0x34, 0x33, 0x3F, 0x49, 0x48, 0x5F, 0x65, 0x6D, 0x60, 0x68, 
   0x76, 0x68, 0x76, 0x89, 0x5F, 0x6E, 0x87, 0x72, 0x82, 0x99, 0x7C, 0x8D, 0x9F, 0x66, 0x76, 0x88, 
   0x64, 0x75, 0x88, 0x6B, 0x7E, 0x8F, 0x82, 0x90, 0x9A, 0x96, 0x9F, 0xA9, 0xC2, 0xC6, 0xD2, 0xC4, 
   0xCA, 0xD7, 0xAB, 0xB5, 0xC2, 0xA9, 0xB2, 0xBE, 0xAD, 0xB3, 0xC2, 0xAE, 0xB4, 0xC1, 0xAE, 0xB3, 
   0xBF, 0xAA, 0xAF, 0xBB, 0xA2, 0xA9, 0xB8, 0xA7, 0xAF, 0xBF, 0xAE, 0xB5, 0xC4, 0xB2, 0xB7, 0xC5, 
   0xB2, 0xB5, 0xC2, 0xB0, 0xB1, 0xBE, 0xAD, 0xAF, 0xBC, 0xAC, 0xAD, 0xBA, 0xAA, 0xA8, 0xB6, 0xA3, 
   0xA1, 0xAF, 0xA5, 0xA2, 0xB1, 0xAD, 0xA7, 0xB8, 0xB1, 0xAB, 0xB9, 0xAF, 0xAD, 0xB9, 0xB1, 0xAE, 
   0xB9, 0xB3, 0xAD, 0xBB, 0xB0, 0xAD, 0xBC, 0xAE, 0xA9, 0xB7, 0xA9, 0xA2, 0xAF, 0xAB, 0xA8, 0xB2, 
   0xAE, 0xAF, 0xB8, 0xAC, 0xAF, 0xB8, 0xB1, 0xB4, 0xBE, 0xBA, 0xBB, 0xC7, 0xAC, 0xB0, 0xBE, 0xCA, 
   0xD0, 0xDA, 0xCC, 0xCF, 0xD8, 0xB3, 0xB1, 0xB9, 0xA7, 0xA2, 0xA7, 0xA4, 0x9F, 0xA0, 0x9B, 0x95, 
   0x99, 0x9C, 0x97, 0x9C, 0xA2, 0x9C, 0xA0, 0xA5, 0x9B, 0xA0, 0xA6, 0x9A, 0xA1, 0xA5, 0x9A, 0xA3, 
   0xA6, 0x9E, 0xA6, 0xA3, 0x9D, 0xA5, 0xA6, 0x9E, 0xA9, 0xA3, 0x9C, 0xA8, 0xA4, 0x9B, 0xA7, 0xA1, 
   0x9A, 0xA7, 0x9A, 0x93, 0xA1, 0x9B, 0x94, 0xA2, 0x8B, 0x89, 0x95, 0x82, 0x84, 0x90, 0x8A, 0x8D, 
   0x99, 0x7B, 0x7F, 0x8A, 0x72, 0x77, 0x7F, 0x7F, 0x7D, 0x83, 0x5A, 0x52, 0x58, 0x3F, 0x3E, 0x41, 
   0x56, 0x59, 0x5B, 0x65, 0x64, 0x6A, 0x5D, 0x55, 0x64, 0x47, 0x3E, 0x4A, 0x33, 0x2F, 0x38, 0x28, 
   0x24, 0x2F, 0x18, 0x14, 0x1D, 0x0B, 0x0C, 0x0C, 0x1F, 0x29, 0x27, 0x6C, 0x82, 0x81, 0x8C, 0x9C, 
   0x97, 0x9F, 0xA5, 0x9B, 0xAE, 0xA7, 0xA0, 0xB3, 0xAB, 0x9D, 0xB4, 0xB1, 0xAA, 0xA9, 0xAF, 0xB0, 
   0xC6, 0xCA, 0xC0, 0xE7, 0xDC, 0xCE, 0xDA, 0xCA, 0xBD, 0xD2, 0xC2, 0xB4, 0xC9, 0xC0, 0xB3, 0xC1, 
   0xBD, 0xB4, 0xBC, 0xBC, 0xB3, 0xCA, 0xCB, 0xC3, 0xDC, 0xDA, 0xD7, 0xD7, 0xD4, 0xD1, 0xD6, 0xD1, 
   0xCA, 0xD7, 0xC9, 0xC1, 0xC9, 0xBB, 0xB5, 0xB0, 0xA5, 0xA2, 0xA0, 0x99, 0x95, 0x9B, 0x96, 0x92, 
   0x91, 0x8D, 0x89, 0xA0, 0x9E, 0x9C, 0xA9, 0xA3, 0xA4, 0xA7, 0xA1, 0xA5, 0x98, 0x96, 0x9E, 0xBE, 
   0xC7, 0xCD, 0xBC, 0xB8, 0xBD, 0xA9, 0xA3, 0xA6, 0xAA, 0xA2, 0xA6, 0xB8, 0xB0, 0xB1, 0xB9, 0xB4, 
   0xB3, 0xBD, 0xB8, 0xB5, 0xB5, 0xAB, 0xAC, 0xA7, 0x9A, 0xA8, 0x82, 0x7C, 0x8E, 0x77, 0x7E, 0x92, 
   0x80, 0x8B, 0x99, 0xA4, 0xA3, 0xA9, 0x96, 0x92, 0x91, 0x8F, 0x95, 0x95, 0x8F, 0x98, 0x9A, 0x93, 
   0x9A, 0x9D, 0x98, 0x9D, 0xA1, 0x8D, 0x93, 0x98, 0x95, 0x9D, 0xA2, 0xA3, 0xA6, 0xAE, 0x9A, 0x9D, 
   0xA8, 0x89, 0x91, 0x9A, 0x88, 0x8F, 0x94, 0x80, 0x82, 0x87, 0x78, 0x7B, 0x7C, 0x7C, 0x80, 0x83, 
   0x83, 0x84, 0x8A, 0x85, 0x84, 0x8F, 0x82, 0x83, 0x8F, 0x88, 0x8A, 0x92, 0x87, 0x8F, 0x96, 0x69, 
   0x73, 0x82, 0x5D, 0x62, 0x75, 0x67, 0x64, 0x75, 0x84, 0x82, 0x8F, 0x8E, 0x8F, 0x9C, 0x8B, 0x8D, 
   0x9A, 0x86, 0x86, 0x90, 0x8A, 0x88, 0x92, 0x90, 0x8A, 0x97, 0x6D, 0x66, 0x70, 0x58, 0x55, 0x5A, 
   0x54, 0x50, 0x55, 0x54, 0x56, 0x60, 0x56, 0x5A, 0x6D, 0x57, 0x5A, 0x76, 0x53, 0x59, 0x6F, 0x5A, 
   0x62, 0x72, 0x66, 0x6F, 0x7C, 0x5F, 0x66, 0x6D, 0x5C, 0x61, 0x66, 0x58, 0x5E, 0x66, 0x60, 0x65, 
   0x74, 0x63, 0x69, 0x7A, 0x66, 0x6D, 0x7E, 0x62, 0x65, 0x77, 0x54, 0x57, 0x62, 0x48, 0x4D, 0x55, 
   0x54, 0x5C, 0x64, 0x77, 0x80, 0x81, 0x8E, 0x92, 0x92, 0xAD, 0xB1, 0xB2, 0xC9, 0xC7, 0xC7, 0xCB, 
   0xC2, 0xC9, 0xCA, 0xC4, 0xC8, 0xBF, 0xBA, 0xBD, 0xB9, 0xB4, 0xB8, 0xBD, 0xB9, 0xBE, 0xC3, 0xC3, 
   0xCB, 0xC0, 0xBF, 0xCB, 0xB9, 0xB8, 0xC3, 0xBA, 0xB8, 0xBF, 0xBF, 0xBC, 0xC1, 0xC8, 0xC6, 0xC9, 
   0xCC, 0xCB, 0xCE, 0xBF, 0xBE, 0xC1, 0xBB, 0xB6, 0xBC, 0xBD, 0xB6, 0xBF, 0xBB, 0xB5, 0xBF, 0xB4, 
   0xB2, 0xBB, 0xB5, 0xB5, 0xBE, 0xB3, 0xAE, 0xB8, 0xAE, 0xAA, 0xB3, 0xAE, 0xAD, 0xB6, 0xAE, 0xAD, 
   0xB4, 0xAF, 0xAC, 0xB3, 0xAD, 0xAA, 0xB3, 0xAE, 0xAC, 0xB2, 0xB0, 0xAD, 0xB1, 0xB5, 0xB0, 0xB4, 
   0xBB, 0xB5, 0xBA, 0xAD, 0xA9, 0xA7, 0xB6, 0xC4, 0xCA, 0xBE, 0xC8, 0xCE, 0xBA, 0xC4, 0xCB, 0xB0, 
   0xBA, 0xC1, 0xBC, 0xC3, 0xC6, 0xD5, 0xD5, 0xD7, 0xD1, 0xD2, 0xD2, 0xC7, 0xC9, 0xCB, 0xD8, 0xD8, 
   0xDC, 0xD8, 0xD8, 0xDB, 0xDD, 0xDF, 0xE1, 0xE3, 0xE8, 0xE7, 0xE7, 0xE7, 0xE7, 0xC7, 0xC4, 0xC4, 
   0x5C, 0x62, 0x5F, 0x24, 0x2B, 0x28, 0x30, 0x38, 0x37, 0x41, 0x49, 0x49, 0x4A, 0x52, 0x4F, 0x56, 
   0x5E, 0x5B, 0x6D, 0x76, 0x72, 0x7E, 0x85, 0x7F, 0x89, 0x8A, 0x85, 0x94, 0x96, 0x89, 0x9D, 0x9C, 
   0x90, 0x9D, 0x9C, 0x91, 0x97, 0x9C, 0x91, 0x8B, 0x95, 0x8B, 0x71, 0x7A, 0x70, 0x6E, 0x74, 0x6C, 
   0x71, 0x77, 0x74, 0x7F, 0x84, 0x84, 0x83, 0x86, 0x89, 0x83, 0x83, 0x84, 0x78, 0x75, 0x74, 0x7E, 
   0x7D, 0x78, 0x97, 0x94, 0x92, 0x8E, 0x87, 0x8A, 0x53, 0x4E, 0x51, 0x28, 0x24, 0x2C, 0x1E, 0x1C, 
   0x24, 0x21, 0x27, 0x27, 0x1B, 0x29, 0x25, 0x24, 0x33, 0x31, 0x33, 0x3C, 0x3B, 0x3B, 0x42, 0x42, 
   0x52, 0x60, 0x63, 0x6F, 0x82, 0x82, 0x71, 0x80, 0x80, 0x5B, 0x62, 0x65, 0x4D, 0x56, 0x57, 0x48, 
   0x53, 0x53, 0x3F, 0x45, 0x47, 0x25, 0x2B, 0x2A, 0x31, 0x38, 0x32, 0x60, 0x64, 0x68, 0x6E, 0x79, 
   0x83, 0x71, 0x7E, 0x90, 0x61, 0x6E, 0x87, 0x71, 0x80, 0x97, 0x7E, 0x8D, 0x9C, 0x75, 0x82, 0x92, 
   0x73, 0x81, 0x92, 0x7B, 0x8C, 0x99, 0x78, 0x8A, 0x96, 0x96, 0xA2, 0xAC, 0xB9, 0xBF, 0xCB, 0xAD, 
   0xB3, 0xBF, 0xA7, 0xB0, 0xB9, 0xA8, 0xB1, 0xB9, 0xAD, 0xB3, 0xBE, 0xAE, 0xB2, 0xBF, 0xA9, 0xAD, 
   0xB8, 0xA9, 0xAD, 0xB8, 0xA1, 0xA7, 0xB3, 0xA2, 0xA9, 0xB8, 0xAB, 0xB1, 0xBF, 0xB1, 0xB4, 0xC1, 
   0xB0, 0xB1, 0xBE, 0xAE, 0xAF, 0xBC, 0xB3, 0xB2, 0xC0, 0xAA, 0xA8, 0xB6, 0xA5, 0xA2, 0xB0, 0xA4, 
   0xA1, 0xAF, 0x9E, 0x9B, 0xAB, 0xA4, 0x9F, 0xB0, 0xAD, 0xA8, 0xB5, 0xAF, 0xAC, 0xB6, 0xB0, 0xAE, 
   0xB7, 0xB0, 0xAE, 0xB9, 0xB9, 0xBA, 0xC6, 0xB2, 0xAF, 0xBC, 0xAA, 0xA7, 0xB3, 0xAD, 0xB0, 0xB9, 
   0xB6, 0xBB, 0xC4, 0xAF, 0xB4, 0xBD, 0xB9, 0xBB, 0xC6, 0xC7, 0xC8, 0xD4, 0xBD, 0xBC, 0xCD, 0xBC, 
   0xBB, 0xC6, 0xAA, 0xA5, 0xAE, 0x91, 0x8B, 0x92, 0x97, 0x93, 0x95, 0xA0, 0x9D, 0x9D, 0x9F, 0x9B, 
   0x9D, 0x9F, 0x98, 0x9E, 0xA1, 0x9B, 0x9E, 0xA3, 0x9B, 0x9E, 0xA7, 0x9D, 0xA5, 0xAC, 0xA2, 0xAA, 
   0xA5, 0x9D, 0xA6, 0xA3, 0x9B, 0xA2, 0xA7, 0x9C, 0xA8, 0xA5, 0x9A, 0xA8, 0xA5, 0x9A, 0xA6, 0xA0, 
   0x99, 0xA5, 0xA2, 0x9C, 0xAA, 0xA2, 0x9D, 0xAA, 0x8C, 0x89, 0x94, 0x77, 0x7A, 0x83, 0x81, 0x89, 
   0x93, 0x7E, 0x80, 0x8C, 0x64, 0x62, 0x6B, 0x3F, 0x37, 0x3F, 0x3A, 0x32, 0x38, 0x35, 0x33, 0x38, 
   0x2C, 0x2C, 0x33, 0x2C, 0x2C, 0x35, 0x33, 0x30, 0x3A, 0x33, 0x30, 0x37, 0x2C, 0x2F, 0x32, 0x24, 
   0x26, 0x2A, 0x1F, 0x22, 0x22, 0x16, 0x1C, 0x1A, 0x20, 0x2C, 0x28, 0x6B, 0x81, 0x7D, 0x84, 0x94, 
   0x92, 0x8E, 0x9B, 0x94, 0xA8, 0xAD, 0xA2, 0xB8, 0xB4, 0xA6, 0xB4, 0xAD, 0xA3, 0x9F, 0x9F, 0x9C, 
   0xBA, 0xBA, 0xAF, 0xD8, 0xD0, 0xC3, 0xD2, 0xCA, 0xC0, 0xCF, 0xC8, 0xB6, 0xD3, 0xCC, 0xBC, 0xDB, 
   0xD8, 0xCC, 0xD9, 0xD9, 0xD1, 0xDB, 0xD9, 0xD4, 0xDF, 0xD7, 0xD3, 0xD4, 0xCB, 0xC5, 0xE2, 0xD7, 
   0xCE, 0xDC, 0xCC, 0xC5, 0xCD, 0xBC, 0xB8, 0xB4, 0xA7, 0xA5, 0xAA, 0xA0, 0x9F, 0xAB, 0xA0, 0xA0, 
   0x9A, 0x94, 0x92, 0xAA, 0xA6, 0xA7, 0xAC, 0xA5, 0xA9, 0xA9, 0xA2, 0xA5, 0x9E, 0x9B, 0x9E, 0xB7, 
   0xBE, 0xC4, 0xBE, 0xBB, 0xC4, 0xAA, 0xA6, 0xA8, 0xA8, 0xA5, 0xA4, 0xBE, 0xBA, 0xB7, 0xC7, 0xBE, 
   0xBB, 0xCF, 0xBF, 0xC1, 0xBD, 0xA6, 0xB2, 0x92, 0x80, 0x96, 0x86, 0x85, 0x99, 0x8F, 0x97, 0xA5, 
   0xAC, 0xAF, 0xB9, 0xA9, 0xA3, 0xAB, 0x92, 0x92, 0x98, 0x94, 0x9F, 0xA1, 0x97, 0xA3, 0xA5, 0x93, 
   0x9C, 0x9E, 0x88, 0x90, 0x98, 0x89, 0x90, 0x95, 0x9D, 0xA6, 0xAA, 0xA8, 0xA8, 0xB1, 0xA5, 0xA2, 
   0xAE, 0x9D, 0x9E, 0xAA, 0x98, 0x98, 0xA3, 0x89, 0x8E, 0x94, 0x86, 0x8B, 0x8E, 0x85, 0x8C, 0x8F, 
   0x88, 0x8E, 0x8F, 0x8B, 0x91, 0x93, 0x87, 0x8E, 0x94, 0x7B, 0x80, 0x83, 0x77, 0x7D, 0x7F, 0x77, 
   0x7C, 0x85, 0x6C, 0x6B, 0x79, 0x59, 0x56, 0x64, 0x58, 0x57, 0x61, 0x53, 0x51, 0x5B, 0x51, 0x4E, 
   0x57, 0x54, 0x52, 0x5C, 0x61, 0x5D, 0x6B, 0x66, 0x5E, 0x6D, 0x58, 0x52, 0x5A, 0x60, 0x5E, 0x62, 
   0x5E, 0x5B, 0x61, 0x58, 0x53, 0x5C, 0x5E, 0x5D, 0x6D, 0x63, 0x6C, 0x88, 0x66, 0x70, 0x93, 0x62, 
   0x68, 0x88, 0x66, 0x6D, 0x83, 0x75, 0x79, 0x85, 0x7F, 0x7A, 0x82, 0x66, 0x5D, 0x65, 0x57, 0x51, 
   0x5B, 0x5F, 0x60, 0x6D, 0x6C, 0x74, 0x87, 0x7A, 0x89, 0x9E, 0x7A, 0x8D, 0x9B, 0x80, 0x8A, 0x96, 
   0x62, 0x6B, 0x71, 0x78, 0x83, 0x7E, 0x8D, 0x91, 0x8E, 0x7F, 0x80, 0x84, 0x9C, 0x97, 0x9A, 0xAC, 
   0xA7, 0xAD, 0xBA, 0xB7, 0xBE, 0xBE, 0xBA, 0xC1, 0xBD, 0xB8, 0xC0, 0xB8, 0xB5, 0xBE, 0xB4, 0xB3, 
   0xBC, 0xB7, 0xB3, 0xBD, 0xB5, 0xB1, 0xBA, 0xB1, 0xB1, 0xBA, 0xB9, 0xB9, 0xC1, 0xC0, 0xBF, 0xC6, 
   0xC5, 0xC2, 0xC7, 0xBF, 0xBC, 0xC0, 0xBA, 0xB7, 0xBB, 0xBA, 0xB4, 0xBC, 0xBE, 0xB8, 0xC2, 0xBA, 
   0xB7, 0xC1, 0xB6, 0xB3, 0xBD, 0xB4, 0xAF, 0xB9, 0xB3, 0xAE, 0xB8, 0xB2, 0xB1, 0xBB, 0xB3, 0xB3, 
   0xBA, 0xB0, 0xAE, 0xB6, 0xAC, 0xAC, 0xB4, 0xB0, 0xAF, 0xB6, 0xB2, 0xB2, 0xB5, 0xB5, 0xB3, 0xB6, 
   0xB7, 0xB3, 0xB7, 0xB5, 0xAE, 0xAB, 0xBE, 0xCA, 0xCF, 0xBA, 0xC4, 0xCC, 0xB2, 0xBA, 0xC4, 0xAE, 
   0xB4, 0xBC, 0xB6, 0xB7, 0xBE, 0xCF, 0xCC, 0xD0, 0xDD, 0xDB, 0xDC, 0xD5, 0xD6, 0xD8, 0xCB, 0xCA, 
   0xD0, 0xD2, 0xD0, 0xD4, 0xDB, 0xD8, 0xDB, 0xEA, 0xE9, 0xEB, 0xD8, 0xD2, 0xD5, 0x85, 0x7F, 0x82, 
   0x3F, 0x43, 0x43, 0x38, 0x41, 0x3E, 0x44, 0x4A, 0x48, 0x58, 0x5E, 0x5A, 0x65, 0x6F, 0x69, 0x7B, 
   0x85, 0x7D, 0x90, 0x99, 0x8F, 0x96, 0x9B, 0x8F, 0x99, 0x9B, 0x8F, 0xA0, 0xA2, 0x96, 0xA6, 0xA9, 
   0x9C, 0x9E, 0xA2, 0x96, 0x9A, 0xA1, 0x94, 0x96, 0x9F, 0x92, 0x78, 0x80, 0x74, 0x8E, 0x97, 0x8B, 
   0xB2, 0xB8, 0xAB, 0x99, 0x9A, 0x96, 0x73, 0x70, 0x74, 0x5E, 0x5C, 0x60, 0x55, 0x55, 0x57, 0x49, 
   0x4A, 0x46, 0x3D, 0x3D, 0x3A, 0x34, 0x35, 0x37, 0x34, 0x3E, 0x41, 0x3D, 0x47, 0x4E, 0x4B, 0x51, 
   0x57, 0x54, 0x5B, 0x59, 0x68, 0x77, 0x73, 0x86, 0x97, 0x98, 0x80, 0x90, 0x92, 0x74, 0x83, 0x84, 
   0x87, 0x93, 0x97, 0x96, 0x9D, 0x9D, 0x77, 0x7C, 0x7E, 0x50, 0x59, 0x5D, 0x52, 0x5A, 0x5C, 0x53, 
   0x5B, 0x5B, 0x55, 0x57, 0x5B, 0x42, 0x41, 0x42, 0x30, 0x31, 0x2C, 0x59, 0x5C, 0x5B, 0x7D, 0x87, 
   0x8D, 0x7D, 0x89, 0x99, 0x74, 0x81, 0x99, 0x76, 0x83, 0x98, 0x72, 0x81, 0x8F, 0x74, 0x7F, 0x8D, 
   0x7B, 0x87, 0x96, 0x7B, 0x89, 0x95, 0x7C, 0x8E, 0x97, 0x9E, 0xAD, 0xB4, 0xB2, 0xBC, 0xC4, 0xA9, 
   0xB0, 0xBA, 0xAF, 0xB4, 0xBC, 0xB1, 0xB8, 0xBD, 0xAB, 0xB3, 0xBC, 0xB0, 0xB8, 0xC3, 0xAD, 0xB4, 
   0xBF, 0xAB, 0xB0, 0xBB, 0xA6, 0xAB, 0xB6, 0xA7, 0xAA, 0xB7, 0xAD, 0xB0, 0xBA, 0xAE, 0xAF, 0xB9, 
   0xAE, 0xAF, 0xBC, 0xAB, 0xAC, 0xB9, 0xB0, 0xAE, 0xBC, 0xAB, 0xA8, 0xB6, 0xA3, 0x9F, 0xAC, 0xA1, 
   0x9D, 0xAA, 0xA1, 0x9F, 0xAC, 0xA7, 0xA6, 0xB2, 0xA8, 0xA5, 0xB1, 0xAB, 0xAB, 0xB5, 0xA9, 0xAA, 
   0xB4, 0xAB, 0xAB, 0xB3, 0xBF, 0xC0, 0xC7, 0xBB, 0xB9, 0xC3, 0xB5, 0xB3, 0xC0, 0xB0, 0xB3, 0xBE, 
   0xB2, 0xB8, 0xC1, 0xB2, 0xB7, 0xC0, 0xAB, 0xAE, 0xB9, 0xA4, 0xA5, 0xB2, 0x9C, 0x9E, 0xAC, 0x9A, 
   0x99, 0xA3, 0x92, 0x8C, 0x94, 0x9A, 0x92, 0x98, 0xA0, 0x9A, 0x9C, 0x9F, 0x99, 0x9B, 0x9F, 0x97, 
   0x9A, 0x9D, 0x98, 0x9C, 0xA0, 0x9A, 0x9B, 0xA3, 0x9B, 0x9E, 0xA5, 0x9D, 0xA1, 0xA6, 0x9D, 0xA3, 
   0xA5, 0x9D, 0xA3, 0xA2, 0x99, 0x9F, 0xA0, 0x96, 0xA1, 0xA2, 0x99, 0xA5, 0xA3, 0x9A, 0xA6, 0x9E, 
   0x97, 0xA3, 0xA4, 0x9D, 0xAA, 0xB0, 0xA8, 0xB6, 0x97, 0x95, 0x9E, 0x75, 0x80, 0x85, 0x78, 0x86, 
   0x8D, 0x78, 0x82, 0x8B, 0x61, 0x67, 0x6F, 0x44, 0x46, 0x4B, 0x39, 0x3A, 0x3E, 0x37, 0x36, 0x39, 
   0x34, 0x32, 0x36, 0x33, 0x32, 0x39, 0x34, 0x31, 0x38, 0x32, 0x30, 0x33, 0x30, 0x2E, 0x2E, 0x34, 
   0x2F, 0x2E, 0x30, 0x32, 0x36, 0x24, 0x28, 0x2E, 0x1B, 0x24, 0x24, 0x58, 0x6D, 0x65, 0x7F, 0x93, 
   0x8E, 0x89, 0x99, 0x98, 0x99, 0xA7, 0xA0, 0xAF, 0xB2, 0xA9, 0xBA, 0xB7, 0xAD, 0xAD, 0xAB, 0xA6, 
   0xAF, 0xAF, 0xA3, 0xCC, 0xC6, 0xBA, 0xCC, 0xC6, 0xBD, 0xCC, 0xC8, 0xB8, 0xDA, 0xD2, 0xC3, 0xE1, 
   0xDA, 0xCC, 0xDC, 0xD5, 0xCC, 0xD3, 0xCB, 0xC5, 0xD5, 0xCA, 0xC3, 0xD5, 0xC8, 0xBE, 0xDA, 0xCD, 
   0xC0, 0xD8, 0xCE, 0xC3, 0xD0, 0xC4, 0xBD, 0xC2, 0xB6, 0xB1, 0xAC, 0xA1, 0x9E, 0xA7, 0x9C, 0x9B, 
   0x91, 0x89, 0x87, 0x92, 0x8C, 0x8C, 0xA6, 0x9E, 0x9E, 0xAA, 0xA3, 0x9F, 0xA6, 0xA1, 0xA0, 0xA9, 
   0xAB, 0xB3, 0xB7, 0xB5, 0xC0, 0xB2, 0xB1, 0xB4, 0xC0, 0xBE, 0xBE, 0xCC, 0xC3, 0xC4, 0xC1, 0xB4, 
   0xB8, 0xB1, 0xA2, 0xAD, 0x9D, 0x8F, 0x9E, 0x8F, 0x85, 0x99, 0x9D, 0x9D, 0xAA, 0xB6, 0xB3, 0xB7, 
   0xC1, 0xBD, 0xC1, 0xA5, 0xA0, 0xA8, 0x94, 0x95, 0x9F, 0x8A, 0x90, 0x99, 0x89, 0x90, 0x96, 0x99, 
   0xA2, 0xA7, 0x94, 0x9A, 0xA4, 0x94, 0x9C, 0xA3, 0xA9, 0xB4, 0xBC, 0xA3, 0xAC, 0xB7, 0x9D, 0xA3, 
   0xB0, 0x9D, 0xA6, 0xB2, 0x9F, 0xA5, 0xB0, 0x9B, 0x9F, 0xA8, 0x92, 0x96, 0x9D, 0x8C, 0x93, 0x99, 
   0x91, 0x98, 0x99, 0x96, 0x9C, 0x9D, 0x99, 0x9E, 0xA4, 0xA2, 0xA5, 0xAA, 0xA4, 0xA8, 0xAC, 0x90, 
   0x92, 0x9B, 0x72, 0x72, 0x82, 0x61, 0x64, 0x76, 0x5E, 0x66, 0x76, 0x5F, 0x68, 0x75, 0x5E, 0x66, 
   0x70, 0x5F, 0x66, 0x74, 0x5C, 0x60, 0x74, 0x5A, 0x5C, 0x6E, 0x61, 0x63, 0x70, 0x6A, 0x6E, 0x7A, 
   0x70, 0x73, 0x80, 0x7D, 0x80, 0x8C, 0x7C, 0x82, 0x92, 0x6D, 0x79, 0x96, 0x67, 0x70, 0x97, 0x63, 
   0x69, 0x8F, 0x5B, 0x64, 0x7F, 0x64, 0x69, 0x78, 0x74, 0x73, 0x7D, 0x71, 0x6D, 0x73, 0x6E, 0x6A, 
   0x6F, 0x62, 0x62, 0x6D, 0x5D, 0x61, 0x74, 0x6B, 0x73, 0x89, 0x6D, 0x76, 0x84, 0x7A, 0x84, 0x93, 
   0x69, 0x6F, 0x77, 0x7C, 0x83, 0x7F, 0x97, 0x9B, 0x96, 0x95, 0x93, 0x95, 0x95, 0x8E, 0x90, 0x86, 
   0x84, 0x8B, 0xA2, 0xA3, 0xAB, 0xB1, 0xB1, 0xBB, 0xB9, 0xB8, 0xC4, 0xB4, 0xB3, 0xBF, 0xAF, 0xAD, 
   0xB7, 0xB3, 0xAE, 0xB7, 0xB0, 0xA9, 0xB4, 0xA8, 0xA9, 0xB4, 0xAA, 0xAC, 0xB8, 0xAB, 0xAC, 0xB8, 
   0xB5, 0xB2, 0xBC, 0xBA, 0xB9, 0xC0, 0xB1, 0xB3, 0xB9, 0xA9, 0xAA, 0xB1, 0xB4, 0xB2, 0xBC, 0xB9, 
   0xB8, 0xC1, 0xB8, 0xB7, 0xC1, 0xB3, 0xB4, 0xBD, 0xB3, 0xB3, 0xBC, 0xAF, 0xB1, 0xBA, 0xB2, 0xB3, 
   0xBA, 0xB7, 0xB8, 0xC0, 0xB9, 0xB5, 0xC2, 0xB8, 0xB1, 0xBD, 0xB7, 0xB3, 0xB9, 0xC0, 0xBA, 0xBA, 
   0xC0, 0xB6, 0xB4, 0xAF, 0xAB, 0xA8, 0xB8, 0xC5, 0xC7, 0xBC, 0xC5, 0xC8, 0xBD, 0xC2, 0xC7, 0xB9, 
   0xBD, 0xC4, 0xBA, 0xBA, 0xC2, 0xCE, 0xCC, 0xCF, 0xE9, 0xE7, 0xE4, 0xE9, 0xE7, 0xE4, 0xDB, 0xD9, 
   0xDC, 0xC5, 0xC2, 0xCA, 0xBB, 0xB8, 0xBD, 0xA8, 0xA3, 0xA9, 0x75, 0x6D, 0x72, 0x48, 0x46, 0x45, 
   0x44, 0x49, 0x48, 0x55, 0x5F, 0x5C, 0x68, 0x6C, 0x69, 0x73, 0x7A, 0x72, 0x7B, 0x84, 0x7A, 0x88, 
   0x8C, 0x85, 0x91, 0x91, 0x88, 0x99, 0x97, 0x89, 0xA0, 0xA1, 0x91, 0x9F, 0x9E, 0x93, 0xA0, 0x9E, 
   0x94, 0x9D, 0x9D, 0x92, 0x9C, 0x9E, 0x8F, 0x95, 0x9C, 0x8A, 0x8E, 0x93, 0x84, 0xAC, 0xB2, 0xA6, 
   0xC2, 0xC7, 0xB9, 0x87, 0x86, 0x81, 0x42, 0x3D, 0x40, 0x35, 0x34, 0x38, 0x48, 0x4C, 0x4C, 0x5B, 
   0x62, 0x5D, 0x5F, 0x66, 0x63, 0x70, 0x75, 0x77, 0x82, 0x89, 0x90, 0x8D, 0x97, 0x9E, 0xA6, 0xB4, 
   0xB4, 0xA1, 0xAD, 0xAA, 0xA3, 0xAC, 0xAC, 0x9B, 0xA2, 0xA6, 0x74, 0x7E, 0x83, 0x56, 0x61, 0x68, 
   0x5E, 0x65, 0x6C, 0x74, 0x77, 0x78, 0x75, 0x78, 0x7A, 0x63, 0x6B, 0x6E, 0x5C, 0x63, 0x65, 0x56, 
   0x5E, 0x5A, 0x55, 0x5B, 0x58, 0x51, 0x53, 0x56, 0x31, 0x32, 0x31, 0x45, 0x47, 0x41, 0x81, 0x82, 
   0x7F, 0x95, 0x99, 0x9E, 0x90, 0x9B, 0xA6, 0x8B, 0x94, 0x9F, 0x87, 0x93, 0x98, 0x8D, 0x93, 0x98, 
   0x83, 0x8E, 0x97, 0x7B, 0x87, 0x94, 0x98, 0xA5, 0xAE, 0xB9, 0xC0, 0xC7, 0xB9, 0xBD, 0xC5, 0xB5, 
   0xBB, 0xC5, 0xB6, 0xBC, 0xC4, 0xB4, 0xBA, 0xC2, 0xAC, 0xB1, 0xBD, 0xAB, 0xB0, 0xBC, 0xA6, 0xAE, 
   0xBA, 0xAB, 0xB2, 0xBF, 0xAC, 0xB0, 0xBD, 0xAC, 0xAE, 0xB9, 0xAE, 0xB1, 0xBA, 0xAD, 0xB0, 0xBA, 
   0xB1, 0xB3, 0xBF, 0xB0, 0xB0, 0xBD, 0xAF, 0xAC, 0xBA, 0xAB, 0xA6, 0xB5, 0xA7, 0xA4, 0xB3, 0xA5, 
   0xA4, 0xB2, 0xA4, 0xA5, 0xB1, 0xAB, 0xAD, 0xB8, 0xB5, 0xB2, 0xBD, 0xB5, 0xB2, 0xBD, 0xB5, 0xB2, 
   0xBE, 0xBB, 0xB6, 0xC1, 0xC2, 0xBC, 0xC7, 0xB4, 0xAC, 0xB9, 0xAE, 0xA7, 0xB6, 0xAB, 0xA8, 0xB9, 
   0xAA, 0xAA, 0xB8, 0xA8, 0xAA, 0xB4, 0x9F, 0x9D, 0xA9, 0x9F, 0x99, 0xA8, 0x9C, 0x9A, 0xA3, 0x9D, 
   0x98, 0x9F, 0xA0, 0x96, 0x9C, 0xA5, 0x99, 0x9E, 0xA5, 0x99, 0x9D, 0xA1, 0x97, 0x9C, 0x9E, 0x95, 
   0x9B, 0x9D, 0x99, 0x9F, 0xA1, 0x99, 0x9F, 0xA3, 0x99, 0xA1, 0xA3, 0x9B, 0x9F, 0xA2, 0x9C, 0x9E, 
   0xA2, 0x98, 0xA0, 0xA3, 0x96, 0xA0, 0xA2, 0x97, 0xA2, 0xA0, 0x98, 0xA2, 0xA0, 0x9A, 0xA4, 0x9C, 
   0x97, 0xA1, 0xA3, 0x9D, 0xA8, 0xB3, 0xAC, 0xB8, 0x9E, 0x9C, 0xA6, 0x77, 0x81, 0x88, 0x71, 0x7E, 
   0x86, 0x73, 0x81, 0x89, 0x63, 0x70, 0x7B, 0x54, 0x59, 0x65, 0x39, 0x38, 0x3F, 0x30, 0x31, 0x33, 
   0x2C, 0x30, 0x2F, 0x2D, 0x2E, 0x2F, 0x30, 0x30, 0x34, 0x2E, 0x32, 0x34, 0x30, 0x2F, 0x30, 0x30, 
   0x2D, 0x2D, 0x2A, 0x2B, 0x2F, 0x21, 0x26, 0x2A, 0x1D, 0x27, 0x26, 0x55, 0x67, 0x62, 0x7C, 0x90, 
   0x8C, 0x8F, 0x9D, 0x9E, 0x9A, 0xA7, 0xAC, 0xA1, 0xA8, 0xA7, 0xBD, 0xC1, 0xB7, 0xC6, 0xC8, 0xBF, 
   0xB8, 0xBA, 0xB3, 0xC8, 0xC4, 0xB9, 0xCF, 0xC3, 0xB8, 0xD1, 0xC9, 0xBC, 0xDE, 0xD0, 0xC5, 0xE2, 
   0xD2, 0xC5, 0xE2, 0xD3, 0xC6, 0xDD, 0xD1, 0xC5, 0xD4, 0xCB, 0xC1, 0xD4, 0xCA, 0xBF, 0xDA, 0xCE, 
   0xC1, 0xDF, 0xD3, 0xC8, 0xD8, 0xCD, 0xC7, 0xD0, 0xC3, 0xBF, 0xB4, 0xA9, 0xA8, 0x9F, 0x9B, 0x9E, 
   0x92, 0x90, 0x92, 0x87, 0x84, 0x84, 0xA0, 0x9C, 0x99, 0xAF, 0xAC, 0xA7, 0xB3, 0xB1, 0xB2, 0xAC, 
   0xA6, 0xB0, 0xA8, 0xA2, 0xAB, 0xBD, 0xBB, 0xBE, 0xD4, 0xD1, 0xD5, 0xBF, 0xB4, 0xBC, 0xBB, 0xAC, 
   0xB1, 0xAA, 0xA1, 0xAA, 0xA9, 0xA2, 0xA7, 0xB9, 0xB0, 0xB8, 0xC5, 0xBB, 0xBF, 0xBA, 0xAE, 0xAF, 
   0xB2, 0xAE, 0xAF, 0xBB, 0xB7, 0xBE, 0xB4, 0xAC, 0xB6, 0x9B, 0x98, 0xA1, 0x89, 0x8D, 0x94, 0x8E, 
   0x91, 0x98, 0x8E, 0x97, 0xA0, 0x8F, 0x97, 0xA1, 0x97, 0xA0, 0xA7, 0xA8, 0xB3, 0xBA, 0xA9, 0xB3, 
   0xBE, 0xA0, 0xA8, 0xB4, 0xA3, 0xA9, 0xB0, 0x9F, 0xA2, 0xAE, 0x9A, 0xA0, 0xA7, 0x98, 0xA0, 0xA3, 
   0x9C, 0xA4, 0xA7, 0xAA, 0xAF, 0xB4, 0xAF, 0xB0, 0xB6, 0xBB, 0xB7, 0xBF, 0xAD, 0xAB, 0xB7, 0x8B, 
   0x8E, 0xA0, 0x70, 0x75, 0x8E, 0x68, 0x6F, 0x89, 0x63, 0x6D, 0x84, 0x68, 0x76, 0x8C, 0x76, 0x82, 
   0x96, 0x78, 0x81, 0x95, 0x6C, 0x74, 0x8E, 0x68, 0x6F, 0x87, 0x69, 0x6E, 0x83, 0x66, 0x6B, 0x7E, 
   0x69, 0x6B, 0x7B, 0x7C, 0x80, 0x91, 0x80, 0x88, 0x99, 0x7B, 0x89, 0x9D, 0x6F, 0x7C, 0x95, 0x6A, 
   0x74, 0x8E, 0x69, 0x72, 0x86, 0x89, 0x8E, 0x95, 0x94, 0x92, 0x96, 0x78, 0x72, 0x76, 0x76, 0x73, 
   0x79, 0x6A, 0x6C, 0x75, 0x5A, 0x5E, 0x6B, 0x5C, 0x64, 0x70, 0x5C, 0x60, 0x6B, 0x62, 0x69, 0x77, 
   0x5D, 0x66, 0x70, 0x7B, 0x81, 0x84, 0x9B, 0x9C, 0x9D, 0xAB, 0xA2, 0xA8, 0x8F, 0x81, 0x8A, 0x4B, 
   0x44, 0x4A, 0x54, 0x55, 0x5A, 0x6D, 0x72, 0x78, 0x98, 0x9A, 0xA4, 0xAD, 0xAE, 0xB9, 0xAD, 0xB0, 
   0xBB, 0xB2, 0xB2, 0xBB, 0xB6, 0xB2, 0xBC, 0xB6, 0xB4, 0xBF, 0xB2, 0xAF, 0xBB, 0xB1, 0xAF, 0xBA, 
   0xB3, 0xB4, 0xBC, 0xB3, 0xB8, 0xBE, 0xB2, 0xB8, 0xBF, 0xB3, 0xB6, 0xBE, 0xB7, 0xB7, 0xC0, 0xB7, 
   0xB8, 0xC1, 0xB6, 0xB8, 0xC1, 0xB5, 0xB7, 0xC1, 0xB5, 0xB6, 0xC0, 0xB4, 0xB4, 0xBE, 0xB1, 0xAE, 
   0xB9, 0xC2, 0xBC, 0xC7, 0xB3, 0xA4, 0xB5, 0x7F, 0x6E, 0x7A, 0x84, 0x82, 0x84, 0xA5, 0xA5, 0xA1, 
   0xB8, 0xAC, 0xA8, 0xB4, 0xAC, 0xA5, 0xC0, 0xC9, 0xCD, 0xC9, 0xD0, 0xD3, 0xCB, 0xCF, 0xD3, 0xBF, 
   0xC1, 0xC9, 0xBA, 0xBC, 0xC3, 0xCD, 0xCF, 0xD0, 0xEF, 0xEE, 0xE9, 0xEE, 0xE9, 0xE5, 0xD0, 0xCB, 
   0xCC, 0xA0, 0x9C, 0xA3, 0x6F, 0x6D, 0x72, 0x4B, 0x4A, 0x4F, 0x3F, 0x40, 0x42, 0x49, 0x52, 0x4D, 
   0x59, 0x64, 0x60, 0x6A, 0x74, 0x6D, 0x76, 0x7A, 0x72, 0x7B, 0x7F, 0x78, 0x7D, 0x82, 0x7A, 0x7F, 
   0x81, 0x78, 0x91, 0x8F, 0x83, 0xAD, 0xA8, 0x9A, 0xB6, 0xB1, 0xA1, 0x9F, 0x9E, 0x93, 0x9D, 0x9B, 
   0x91, 0x98, 0x9A, 0x8E, 0x9B, 0x9A, 0x8D, 0x8E, 0x8F, 0x82, 0x84, 0x87, 0x7C, 0xA9, 0xAF, 0xA6, 
   0xAD, 0xAE, 0xA2, 0x72, 0x6D, 0x68, 0x34, 0x2F, 0x31, 0x34, 0x3C, 0x3E, 0x79, 0x86, 0x86, 0x92, 
   0x9A, 0x9A, 0x87, 0x8D, 0x90, 0x91, 0x93, 0x99, 0x8F, 0x90, 0x96, 0x8B, 0x8D, 0x94, 0x99, 0x9D, 
   0xA3, 0x9B, 0xA0, 0xA4, 0x9B, 0x9D, 0x9F, 0x9B, 0xA0, 0xA3, 0x95, 0xA2, 0xA5, 0x7F, 0x8D, 0x91, 
   0x71, 0x79, 0x82, 0x75, 0x7D, 0x82, 0x81, 0x8A, 0x8F, 0x83, 0x8C, 0x90, 0x67, 0x6F, 0x70, 0x5A, 
   0x62, 0x60, 0x5B, 0x60, 0x5F, 0x56, 0x57, 0x5C, 0x2F, 0x2E, 0x30, 0x27, 0x27, 0x24, 0x45, 0x43, 
   0x42, 0x7F, 0x79, 0x76, 0xA2, 0x9E, 0x9E, 0xA8, 0xA6, 0xA4, 0xAC, 0xAD, 0xA6, 0xA1, 0xA2, 0x9D, 
   0x94, 0x9C, 0x9F, 0x8B, 0x98, 0xA0, 0xA9, 0xB4, 0xBA, 0xBD, 0xC1, 0xC7, 0xBF, 0xBF, 0xC8, 0xB5, 
   0xB8, 0xC3, 0xB1, 0xB6, 0xC0, 0xAE, 0xB3, 0xBE, 0xA7, 0xAA, 0xB8, 0xA7, 0xAB, 0xB5, 0xAA, 0xB0, 
   0xBA, 0xAA, 0xAF, 0xBA, 0xAA, 0xAD, 0xB9, 0xAB, 0xB0, 0xBB, 0xAC, 0xB4, 0xBD, 0xAF, 0xB8, 0xC2, 
   0xB6, 0xB8, 0xC6, 0xB3, 0xB3, 0xC1, 0xA7, 0xA3, 0xB3, 0xB2, 0xAC, 0xBD, 0xBE, 0xB9, 0xC9, 0xB4, 
   0xB0, 0xC0, 0xA9, 0xA4, 0xB1, 0xB6, 0xB0, 0xB9, 0xBA, 0xB3, 0xBD, 0xB2, 0xA8, 0xB3, 0xAD, 0xA0, 
   0xAF, 0x9E, 0x92, 0xA4, 0x94, 0x8C, 0xA0, 0x96, 0x8F, 0xA3, 0x9C, 0x94, 0xA7, 0xA6, 0x9E, 0xAD, 
   0x9D, 0x95, 0xA1, 0x99, 0x90, 0x9A, 0x98, 0x8F, 0x98, 0xA1, 0x96, 0xA0, 0xA3, 0x9B, 0xA4, 0x9F, 
   0x95, 0x9D, 0x9F, 0x93, 0x98, 0xA5, 0x97, 0x9C, 0xA5, 0x97, 0x9C, 0xA1, 0x95, 0x9A, 0xA2, 0x98, 
   0x9D, 0xA2, 0x9B, 0xA2, 0xA4, 0x9B, 0xA2, 0xA3, 0x97, 0xA1, 0xA0, 0x96, 0x9C, 0x9F, 0x97, 0x9A, 
   0xA1, 0x97, 0x9D, 0xA4, 0x97, 0x9D, 0xA8, 0x9B, 0xA4, 0xA4, 0x9A, 0xA2, 0xA0, 0x98, 0xA1, 0xA0, 
   0x9A, 0xA4, 0xA4, 0x9E, 0xAB, 0xAA, 0xA3, 0xB0, 0x9E, 0x99, 0xA5, 0x7A, 0x7D, 0x85, 0x71, 0x7B, 
   0x83, 0x6E, 0x7C, 0x83, 0x66, 0x76, 0x80, 0x6B, 0x71, 0x7E, 0x47, 0x46, 0x51, 0x2B, 0x2F, 0x32, 
   0x28, 0x31, 0x31, 0x2D, 0x32, 0x33, 0x2F, 0x35, 0x37, 0x2E, 0x36, 0x37, 0x30, 0x34, 0x35, 0x2F, 
   0x34, 0x33, 0x32, 0x31, 0x32, 0x2E, 0x31, 0x32, 0x28, 0x34, 0x30, 0x4D, 0x61, 0x59, 0x73, 0x88, 
   0x81, 0x8E, 0x9D, 0x9F, 0x99, 0xA9, 0xB3, 0x88, 0x98, 0xA4, 0xA5, 0xAF, 0xB3, 0xC3, 0xC6, 0xC9, 
   0xBD, 0xBD, 0xBA, 0xC5, 0xC0, 0xB7, 0xCD, 0xC1, 0xB8, 0xD4, 0xC6, 0xBC, 0xD7, 0xCA, 0xBE, 0xDC, 
   0xCE, 0xC0, 0xE0, 0xD2, 0xC4, 0xDE, 0xD2, 0xC6, 0xD6, 0xCB, 0xC2, 0xD2, 0xC7, 0xBC, 0xD5, 0xC9, 
   0xBE, 0xDE, 0xD3, 0xC9, 0xDE, 0xD3, 0xCD, 0xD9, 0xCD, 0xC9, 0xBE, 0xB4, 0xB2, 0x9B, 0x96, 0x97, 
   0x94, 0x92, 0x92, 0x8C, 0x89, 0x86, 0x9A, 0x96, 0x94, 0xAE, 0xAA, 0xAD, 0xB4, 0xB1, 0xB7, 0xA7, 
   0xA2, 0xAA, 0x8F, 0x88, 0x92, 0x96, 0x93, 0x9B, 0xB5, 0xB1, 0xBA, 0xB0, 0xA8, 0xB2, 0xB3, 0xAB, 
   0xAD, 0xB8, 0xAE, 0xAD, 0xBD, 0xAF, 0xAC, 0xB6, 0xA5, 0xAA, 0xA4, 0x93, 0x97, 0x8A, 0x84, 0x84, 
   0x95, 0x98, 0x99, 0xB2, 0xB3, 0xB7, 0xB2, 0xAF, 0xB4, 0xAD, 0xAB, 0xB2, 0xAE, 0xB1, 0xB7, 0x9C, 
   0xA0, 0xA5, 0x8B, 0x93, 0x98, 0x8A, 0x94, 0x99, 0x98, 0xA3, 0xA7, 0xAD, 0xB6, 0xBB, 0xAC, 0xB2, 
   0xBB, 0x9E, 0xA5, 0xAE, 0x9C, 0xA6, 0xAB, 0x9D, 0xA4, 0xAC, 0xA0, 0xA5, 0xAC, 0xA0, 0xA5, 0xA9, 
   0x9E, 0xA7, 0xA7, 0xAB, 0xB4, 0xB3, 0xB5, 0xB7, 0xBB, 0xB2, 0xAE, 0xB7, 0x91, 0x94, 0xA1, 0x84, 
   0x91, 0xA2, 0x83, 0x8E, 0xA6, 0x7D, 0x83, 0xA0, 0x66, 0x73, 0x8C, 0x6B, 0x7D, 0x91, 0x7E, 0x8E, 
   0xA1, 0x7D, 0x8B, 0xA2, 0x70, 0x7E, 0x98, 0x6B, 0x74, 0x8D, 0x6E, 0x72, 0x89, 0x6A, 0x6D, 0x84, 
   0x65, 0x67, 0x7D, 0x6B, 0x70, 0x82, 0x79, 0x82, 0x90, 0x83, 0x92, 0x9F, 0x82, 0x93, 0xA5, 0x8D, 
   0x9A, 0xAB, 0x8C, 0x93, 0x9F, 0xA1, 0xA9, 0xB2, 0xA9, 0xA3, 0xB0, 0x8C, 0x81, 0x8C, 0x77, 0x73, 
   0x7A, 0x74, 0x79, 0x7C, 0x68, 0x72, 0x75, 0x69, 0x76, 0x7B, 0x64, 0x6A, 0x74, 0x63, 0x66, 0x74, 
   0x65, 0x6F, 0x77, 0x7D, 0x81, 0x84, 0x8E, 0x89, 0x8D, 0x91, 0x86, 0x8F, 0x6A, 0x5F, 0x68, 0x38, 
   0x33, 0x36, 0x35, 0x3C, 0x3C, 0x3D, 0x43, 0x45, 0x54, 0x57, 0x5D, 0x6A, 0x6D, 0x75, 0x86, 0x8B, 
   0x94, 0xA0, 0xA2, 0xAB, 0xB0, 0xAF, 0xB8, 0xB8, 0xB7, 0xC0, 0xBD, 0xB7, 0xC2, 0xAE, 0xA9, 0xB3, 
   0xA6, 0xA8, 0xAE, 0xA6, 0xAC, 0xB1, 0xAD, 0xB1, 0xB8, 0xB6, 0xB6, 0xBE, 0xB8, 0xB8, 0xC0, 0xB3, 
   0xB5, 0xBE, 0xB8, 0xB9, 0xC4, 0xBF, 0xBD, 0xCA, 0xC2, 0xBA, 0xC9, 0xBE, 0xB0, 0xC1, 0x9A, 0x87, 
   0x99, 0x81, 0x6B, 0x7B, 0x58, 0x40, 0x4C, 0x30, 0x24, 0x24, 0x54, 0x53, 0x48, 0x81, 0x83, 0x78, 
   0xA3, 0xA2, 0x9A, 0xBE, 0xBB, 0xAF, 0xAF, 0xB5, 0xBC, 0xA6, 0xAD, 0xB3, 0x9B, 0x9D, 0xA2, 0x96, 
   0x96, 0x9A, 0x94, 0x96, 0x9A, 0xA7, 0xA6, 0xA8, 0xCA, 0xC3, 0xC1, 0xC8, 0xBD, 0xBC, 0x9D, 0x92, 
   0x96, 0x71, 0x6C, 0x6F, 0x42, 0x44, 0x44, 0x3E, 0x47, 0x45, 0x51, 0x5A, 0x56, 0x72, 0x7C, 0x75, 
   0x82, 0x8D, 0x85, 0x82, 0x8C, 0x82, 0x7E, 0x88, 0x7E, 0x79, 0x82, 0x7D, 0x7A, 0x82, 0x7B, 0x87, 
   0x8D, 0x7F, 0x9C, 0x9C, 0x8D, 0xAA, 0xA5, 0x99, 0xA5, 0x9C, 0x91, 0x92, 0x95, 0x8C, 0xA5, 0xA7, 
   0x9D, 0xA2, 0xA7, 0x9B, 0x99, 0x9B, 0x90, 0x95, 0x9B, 0x90, 0x97, 0x9E, 0x96, 0x9B, 0xA5, 0x9E, 
   0xAB, 0xAB, 0xA2, 0x79, 0x73, 0x6E, 0x2A, 0x29, 0x29, 0x42, 0x50, 0x51, 0x97, 0xA6, 0xA9, 0x99, 
   0xA1, 0xA5, 0x89, 0x8F, 0x93, 0x8C, 0x8C, 0x91, 0x83, 0x86, 0x8C, 0x85, 0x8A, 0x90, 0x8E, 0x92, 
   0x98, 0x9E, 0x9E, 0xA2, 0xA3, 0xA1, 0xA4, 0xA5, 0xA6, 0xAA, 0xAF, 0xB7, 0xBA, 0xB0, 0xBA, 0xBD, 
   0xA6, 0xAE, 0xB1, 0x8A, 0x93, 0x95, 0x86, 0x91, 0x95, 0x8B, 0x90, 0x94, 0x6D, 0x72, 0x76, 0x5D, 
   0x63, 0x64, 0x5F, 0x62, 0x65, 0x57, 0x58, 0x5E, 0x33, 0x33, 0x37, 0x2A, 0x29, 0x29, 0x2C, 0x2A, 
   0x2B, 0x3B, 0x34, 0x36, 0x5F, 0x55, 0x57, 0x8B, 0x81, 0x7D, 0xAB, 0x9F, 0x95, 0xA9, 0xA0, 0x99, 
   0xB4, 0xB0, 0xB1, 0xC0, 0xC5, 0xCB, 0xC6, 0xCD, 0xD2, 0xBB, 0xBE, 0xC4, 0xB1, 0xB2, 0xBB, 0xA6, 
   0xAB, 0xB7, 0xA8, 0xB2, 0xBC, 0xAC, 0xB3, 0xBE, 0xAD, 0xAD, 0xBB, 0xB0, 0xB1, 0xB9, 0xB3, 0xB4, 
   0xBD, 0xAD, 0xAC, 0xB7, 0xAC, 0xAA, 0xB6, 0xAF, 0xAE, 0xBA, 0xAF, 0xB1, 0xBD, 0xAF, 0xB2, 0xBE, 
   0xB3, 0xB2, 0xC0, 0xAC, 0xA8, 0xB6, 0x9B, 0x97, 0xA6, 0x90, 0x89, 0x97, 0x89, 0x7F, 0x89, 0x78, 
   0x6D, 0x76, 0x7B, 0x71, 0x77, 0x92, 0x8A, 0x91, 0x95, 0x8D, 0x97, 0x89, 0x80, 0x8D, 0x97, 0x8B, 
   0x9B, 0x94, 0x89, 0x9D, 0x90, 0x8A, 0x9E, 0x90, 0x8A, 0xA0, 0x94, 0x8E, 0xA0, 0x9B, 0x95, 0xA0, 
   0x9C, 0x96, 0x9E, 0x9E, 0x95, 0x9D, 0xA1, 0x96, 0x9E, 0xA1, 0x95, 0x9C, 0xA2, 0x96, 0x9E, 0xA2, 
   0x95, 0x9D, 0xA2, 0x94, 0x9A, 0xA3, 0x95, 0x99, 0xA3, 0x96, 0x9B, 0xA1, 0x95, 0x9A, 0xA2, 0x97, 
   0x9E, 0xA2, 0x99, 0x9E, 0xA4, 0x98, 0xA0, 0xA1, 0x93, 0x9F, 0x9D, 0x90, 0x9B, 0x9C, 0x92, 0x9A, 
   0xA1, 0x94, 0x9F, 0xA4, 0x96, 0xA0, 0xA6, 0x9A, 0xA2, 0xA2, 0x98, 0xA1, 0xA1, 0x9A, 0xA3, 0xA4, 
   0x9D, 0xA6, 0xA5, 0x9C, 0xA8, 0xA9, 0xA1, 0xAD, 0xA4, 0x9B, 0xA7, 0x80, 0x7D, 0x86, 0x6F, 0x76, 
   0x7D, 0x6D, 0x7D, 0x81, 0x6E, 0x80, 0x85, 0x7D, 0x83, 0x8C, 0x5E, 0x5B, 0x63, 0x30, 0x34, 0x36, 
   0x30, 0x37, 0x37, 0x37, 0x3A, 0x3C, 0x38, 0x3C, 0x3F, 0x36, 0x3A, 0x3D, 0x39, 0x3D, 0x3F, 0x3E, 
   0x46, 0x46, 0x41, 0x43, 0x3F, 0x3C, 0x3F, 0x3C, 0x33, 0x3C, 0x39, 0x40, 0x50, 0x4B, 0x6A, 0x80, 
   0x7B, 0x81, 0x92, 0x98, 0x85, 0x99, 0xA9, 0x7F, 0x96, 0xA8, 0x93, 0xA6, 0xB2, 0x9C, 0xA7, 0xAF, 
   0xB2, 0xB5, 0xB2, 0xC2, 0xBE, 0xB5, 0xC6, 0xBE, 0xB4, 0xCF, 0xC1, 0xB7, 0xD0, 0xC6, 0xB9, 0xD5, 
   0xCA, 0xBD, 0xDA, 0xCF, 0xC1, 0xDC, 0xD2, 0xC6, 0xD9, 0xCF, 0xC5, 0xD6, 0xCD, 0xC2, 0xD6, 0xCC, 
   0xC1, 0xDD, 0xD1, 0xC8, 0xDA, 0xCE, 0xC7, 0xD7, 0xCB, 0xC6, 0xCA, 0xC0, 0xBC, 0xAC, 0xA5, 0xA4, 
   0x99, 0x95, 0x95, 0x92, 0x90, 0x90, 0x8C, 0x89, 0x8F, 0x95, 0x93, 0x9D, 0xAC, 0xAC, 0xB3, 0xBD, 
   0xBA, 0xBD, 0xAE, 0xA6, 0xAC, 0x95, 0x93, 0x99, 0x9A, 0x97, 0xA0, 0xA5, 0xA5, 0xA8, 0xB8, 0xB4, 
   0xB1, 0xDC, 0xCB, 0xCA, 0xB4, 0x9C, 0x9D, 0x62, 0x54, 0x58, 0x73, 0x72, 0x72, 0x7E, 0x81, 0x83, 
   0x73, 0x7C, 0x7F, 0x90, 0x99, 0x9C, 0xA7, 0xAB, 0xB0, 0xA7, 0xAA, 0xB0, 0xAF, 0xB1, 0xB9, 0xB8, 
   0xB8, 0xC0, 0xAF, 0xAF, 0xB3, 0x9D, 0xA2, 0xA6, 0x9B, 0xA5, 0xA8, 0xAC, 0xB5, 0xB9, 0xAB, 0xB1, 
   0xB8, 0xA3, 0xA9, 0xB1, 0xA1, 0xAB, 0xB0, 0xA4, 0xAB, 0xAE, 0xA5, 0xAA, 0xAF, 0xA2, 0xA6, 0xAD, 
   0xA2, 0xA7, 0xAD, 0xA7, 0xAD, 0xB3, 0xAB, 0xAF, 0xB8, 0x97, 0x9A, 0xA6, 0x7C, 0x87, 0x95, 0x7A, 
   0x8E, 0x9D, 0x85, 0x96, 0xAA, 0x8B, 0x93, 0xAD, 0x7B, 0x87, 0x9F, 0x7C, 0x8C, 0x9E, 0x82, 0x8E, 
   0xA0, 0x7A, 0x85, 0x9E, 0x6B, 0x79, 0x93, 0x76, 0x7F, 0x99, 0x72, 0x77, 0x8F, 0x6C, 0x72, 0x8A, 
   0x6E, 0x76, 0x8C, 0x71, 0x7A, 0x8D, 0x6A, 0x72, 0x85, 0x62, 0x69, 0x79, 0x66, 0x6F, 0x7D, 0x6F, 
   0x7C, 0x88, 0x8A, 0x92, 0x99, 0x9F, 0xA7, 0xB1, 0x97, 0x96, 0xA7, 0x91, 0x8E, 0x9C, 0x90, 0x8F, 
   0x96, 0x8F, 0x94, 0x94, 0x8B, 0x94, 0x93, 0x8B, 0x96, 0x9B, 0x87, 0x91, 0x9E, 0x7A, 0x87, 0x92, 
   0x77, 0x80, 0x88, 0x75, 0x73, 0x78, 0x7E, 0x78, 0x7F, 0x76, 0x70, 0x7B, 0x42, 0x3B, 0x45, 0x2B, 
   0x2C, 0x2C, 0x28, 0x30, 0x30, 0x26, 0x2C, 0x2D, 0x25, 0x28, 0x2B, 0x21, 0x26, 0x29, 0x2A, 0x31, 
   0x32, 0x46, 0x4A, 0x4A, 0x6E, 0x6D, 0x70, 0x85, 0x83, 0x8A, 0x93, 0x8A, 0x92, 0x84, 0x79, 0x82, 
   0x81, 0x79, 0x80, 0x7F, 0x78, 0x7F, 0x7E, 0x75, 0x7D, 0x97, 0x8F, 0x97, 0xB6, 0xB1, 0xB9, 0xBB, 
   0xB6, 0xC0, 0xB6, 0xAE, 0xB9, 0x97, 0x8A, 0x99, 0x88, 0x75, 0x85, 0x76, 0x5D, 0x6F, 0x4D, 0x35, 
   0x47, 0x31, 0x21, 0x2E, 0x26, 0x21, 0x23, 0x45, 0x48, 0x43, 0x67, 0x62, 0x58, 0x67, 0x61, 0x5A, 
   0x8B, 0x8A, 0x7F, 0xAF, 0xB0, 0xA2, 0xA1, 0xA5, 0xA8, 0xA3, 0xA4, 0xA9, 0x9F, 0xA0, 0xA4, 0x91, 
   0x97, 0x98, 0x8A, 0x8E, 0x91, 0x94, 0x92, 0x94, 0x9A, 0x90, 0x93, 0x8B, 0x7F, 0x83, 0x5D, 0x54, 
   0x5A, 0x38, 0x36, 0x3C, 0x2D, 0x34, 0x35, 0x3F, 0x4A, 0x49, 0x5E, 0x66, 0x62, 0x92, 0x98, 0x91, 
   0x9E, 0xA3, 0x9C, 0x9A, 0xA0, 0x96, 0x94, 0x9E, 0x96, 0x93, 0x9C, 0x9A, 0x93, 0x9C, 0x96, 0xA1, 
   0xA9, 0x9B, 0xA1, 0xA6, 0x98, 0x9B, 0x99, 0x91, 0x95, 0x90, 0x89, 0x9E, 0xA3, 0x9A, 0xBD, 0xBC, 
   0xB3, 0xB6, 0xB6, 0xAB, 0xA6, 0xA8, 0x9E, 0x9F, 0xA7, 0x9E, 0xA5, 0xAB, 0xA5, 0x99, 0x9E, 0x98, 
   0xA5, 0xA6, 0xA3, 0x6A, 0x69, 0x66, 0x20, 0x23, 0x22, 0x65, 0x73, 0x72, 0xB5, 0xBF, 0xC1, 0x98, 
   0x9D, 0xA0, 0x8B, 0x92, 0x93, 0x92, 0x94, 0x94, 0x8E, 0x94, 0x98, 0x8A, 0x91, 0x96, 0x8D, 0x91, 
   0x95, 0xA4, 0xA4, 0xA6, 0xB8, 0xB7, 0xBA, 0xAF, 0xAF, 0xB5, 0xA9, 0xAD, 0xB2, 0xAD, 0xB0, 0xB7, 
   0xB7, 0xB9, 0xBE, 0x85, 0x8F, 0x8C, 0x77, 0x81, 0x80, 0x84, 0x86, 0x8A, 0x6F, 0x71, 0x76, 0x60, 
   0x63, 0x66, 0x5E, 0x5F, 0x62, 0x58, 0x58, 0x5E, 0x34, 0x37, 0x3B, 0x27, 0x2A, 0x2A, 0x2D, 0x2D, 
   0x2F, 0x30, 0x32, 0x37, 0x29, 0x26, 0x2C, 0x27, 0x21, 0x20, 0x31, 0x27, 0x20, 0x44, 0x38, 0x32, 
   0x56, 0x4C, 0x4A, 0x86, 0x7F, 0x82, 0xBF, 0xBD, 0xC3, 0xB4, 0xAE, 0xB3, 0xA6, 0x9C, 0xA5, 0xB0, 
   0xAA, 0xB4, 0xB8, 0xB8, 0xC0, 0xC0, 0xC0, 0xC7, 0xB7, 0xB4, 0xBB, 0xBB, 0xBA, 0xBB, 0xBA, 0xB9, 
   0xBC, 0xB6, 0xB5, 0xBB, 0xC1, 0xBF, 0xC7, 0xBA, 0xB9, 0xC0, 0xAE, 0xAE, 0xB2, 0xAA, 0xA8, 0xAB, 
   0x98, 0x96, 0x94, 0x8C, 0x86, 0x88, 0x88, 0x81, 0x89, 0x4E, 0x47, 0x51, 0x30, 0x28, 0x2C, 0x2F, 
   0x2B, 0x2B, 0x51, 0x4B, 0x4B, 0x8D, 0x84, 0x88, 0x8F, 0x88, 0x90, 0x7E, 0x76, 0x80, 0x9C, 0x95, 
   0xA0, 0x9E, 0x98, 0xA6, 0x99, 0x97, 0xA3, 0x98, 0x94, 0xA4, 0x9A, 0x94, 0xA2, 0xA0, 0x9B, 0xA2, 
   0xA4, 0x9E, 0xA2, 0xA3, 0x9C, 0xA2, 0xA1, 0x99, 0xA0, 0x9D, 0x96, 0x9B, 0xA0, 0x94, 0x9B, 0xA1, 
   0x94, 0x9A, 0xA3, 0x96, 0x9B, 0xA2, 0x97, 0x9A, 0xA4, 0x99, 0x9E, 0xA3, 0x99, 0xA0, 0x9F, 0x98, 
   0x9F, 0x9F, 0x98, 0x98, 0x9E, 0x93, 0x97, 0xA0, 0x92, 0x9C, 0xA3, 0x97, 0xA0, 0xA2, 0x98, 0xA0, 
   0xA3, 0x96, 0xA1, 0xA2, 0x95, 0xA0, 0xA3, 0x9A, 0xA4, 0xA1, 0x9B, 0xA5, 0xA0, 0x9C, 0xA4, 0xA1, 
   0x9A, 0xA3, 0xA6, 0x9C, 0xA4, 0xAC, 0xA2, 0xAA, 0xB1, 0xA7, 0xB0, 0x95, 0x8F, 0x98, 0x6C, 0x70, 
   0x76, 0x6A, 0x7A, 0x7A, 0x6D, 0x81, 0x82, 0x7F, 0x83, 0x8A, 0x67, 0x62, 0x67, 0x36, 0x38, 0x3A, 
   0x37, 0x3B, 0x3E, 0x45, 0x46, 0x49, 0x44, 0x46, 0x49, 0x44, 0x44, 0x47, 0x47, 0x48, 0x4B, 0x42, 
   0x48, 0x4A, 0x41, 0x46, 0x42, 0x41, 0x43, 0x41, 0x3B, 0x3B, 0x3F, 0x37, 0x43, 0x46, 0x68, 0x7D, 
   0x80, 0x7F, 0x94, 0x9D, 0x7D, 0x93, 0xA4, 0x81, 0x97, 0xAB, 0x8D, 0xA5, 0xB3, 0x8B, 0xA0, 0xA7, 
   0xB5, 0xBD, 0xBA, 0xC6, 0xC3, 0xBE, 0xBB, 0xB9, 0xB3, 0xCA, 0xC2, 0xB8, 0xCF, 0xC5, 0xB7, 0xD3, 
   0xC8, 0xBB, 0xDD, 0xD2, 0xC5, 0xE4, 0xD8, 0xCC, 0xDE, 0xD1, 0xC6, 0xDD, 0xD0, 0xC6, 0xD7, 0xCC, 
   0xC2, 0xDC, 0xD1, 0xC5, 0xDF, 0xD3, 0xCA, 0xDB, 0xD0, 0xC9, 0xD2, 0xC8, 0xC4, 0xC6, 0xBD, 0xBD, 
   0xAA, 0xA3, 0xA6, 0x9F, 0x9B, 0x9E, 0x8F, 0x8D, 0x91, 0x89, 0x8B, 0x8B, 0xA3, 0xA8, 0xA4, 0xBA, 
   0xB8, 0xB3, 0xBE, 0xB7, 0xB3, 0xAC, 0xA9, 0xA8, 0xAE, 0xAB, 0xB1, 0xC2, 0xBE, 0xC0, 0xD6, 0xC6, 
   0xCA, 0xB3, 0x94, 0x9E, 0x4B, 0x2C, 0x33, 0x31, 0x29, 0x28, 0x67, 0x72, 0x70, 0x7D, 0x85, 0x88, 
   0x73, 0x7D, 0x81, 0x75, 0x82, 0x86, 0xA6, 0xB1, 0xB5, 0x9F, 0xA7, 0xAC, 0x97, 0x9C, 0xA3, 0xA0, 
   0xA1, 0xA9, 0x91, 0x93, 0xA2, 0x7C, 0x84, 0x92, 0x6D, 0x79, 0x86, 0x80, 0x8D, 0x99, 0x92, 0x9E, 
   0xA8, 0x99, 0xA3, 0xAC, 0xA8, 0xB0, 0xB9, 0xB3, 0xBA, 0xBF, 0xA9, 0xAF, 0xB6, 0x9F, 0xA5, 0xB2, 
   0x8B, 0x91, 0xA3, 0x80, 0x88, 0x9A, 0x85, 0x8F, 0x9F, 0x88, 0x93, 0xA2, 0x81, 0x8D, 0x9C, 0x87, 
   0x96, 0xA2, 0x8B, 0x9A, 0xA6, 0x86, 0x95, 0xA5, 0x8D, 0x9B, 0xAB, 0x98, 0xA6, 0xB5, 0x8A, 0x92, 
   0xA2, 0x81, 0x87, 0x9B, 0x62, 0x6E, 0x83, 0x6B, 0x75, 0x8A, 0x82, 0x8A, 0xA0, 0x7E, 0x88, 0x9E, 
   0x7A, 0x88, 0x9A, 0x7A, 0x86, 0x97, 0x71, 0x7C, 0x93, 0x5F, 0x68, 0x80, 0x5D, 0x68, 0x7B, 0x62, 
   0x72, 0x83, 0x6C, 0x78, 0x88, 0x78, 0x7D, 0x90, 0x85, 0x86, 0x9B, 0x90, 0x94, 0xA4, 0x9E, 0xA7, 
   0xAD, 0xA6, 0xAD, 0xAB, 0xAA, 0xAE, 0xAB, 0x99, 0x9C, 0xA1, 0x82, 0x89, 0x95, 0x78, 0x88, 0x91, 
   0x87, 0x91, 0x99, 0x8A, 0x86, 0x8F, 0x95, 0x89, 0x95, 0x5C, 0x4F, 0x5E, 0x2E, 0x27, 0x31, 0x26, 
   0x2D, 0x2C, 0x2B, 0x30, 0x31, 0x2D, 0x33, 0x35, 0x31, 0x3B, 0x3C, 0x3F, 0x4C, 0x4D, 0x44, 0x50, 
   0x50, 0x45, 0x4A, 0x48, 0x43, 0x45, 0x46, 0x39, 0x3C, 0x40, 0x3A, 0x37, 0x3C, 0x40, 0x3B, 0x40, 
   0x4A, 0x43, 0x4A, 0x45, 0x3D, 0x44, 0x32, 0x2A, 0x32, 0x37, 0x2F, 0x37, 0x52, 0x49, 0x52, 0x5F, 
   0x52, 0x5C, 0x4D, 0x3E, 0x48, 0x37, 0x28, 0x32, 0x35, 0x29, 0x34, 0x34, 0x2D, 0x37, 0x32, 0x32, 
   0x3B, 0x36, 0x39, 0x41, 0x37, 0x3A, 0x3B, 0x48, 0x4D, 0x50, 0x64, 0x60, 0x5F, 0x55, 0x4D, 0x53, 
   0x61, 0x59, 0x58, 0x9E, 0x9E, 0x91, 
};

static RESOURCEDATA g_rd_rocks(TEXT(MODULE_STRING), TEXT("rocks.bmp"), g_rocks, sizeof(g_rocks));

extern "C" LPVOID PREPEND_MODULE(_rocks) = (LPVOID)&g_rd_rocks;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_stncil
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    stencil.cpp \
    flags.cpp \
    cap.cpp \
    clear.cpp \
    func.cpp \
    ignore.cpp \
    op.cpp \
    scorrupt.cpp \
    zcorrupt.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\op.cpp ===
// FILE:        op.cpp
// DESC:        stencil plane op conformance tests
// AUTHOR:      Todd M. Frost
// COMMENTS:    tests for stencil ops (D3DSTENCILOP)

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "flags.h"
#include "stencil.h"

const UINT NSTENCILSTATES = 3;//(D3DRENDERSTATE_STENCILPASS - D3DRENDERSTATE_STENCILFAIL + 1);
const UINT NSTENCILOPS    = 8;//(D3DSTENCILOP_DECR - D3DSTENCILOP_KEEP + 1);

// NAME:        CStencilOp()
// DESC:        stencil op class constructor
// INPUT:       none
// OUTPUT:      none

CStencilOp::CStencilOp()
{
    m_szTestName = TEXT("Stencil op");
    m_szCommandKey = TEXT("Op");

    m_nStipple = (UINT) 0;
}

// NAME:        ~CStencilOp()
// DESC:        stencil op class destructor
// INPUT:       none
// OUTPUT:      none

CStencilOp::~CStencilOp()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CStencilOp::CommandLineHelp(void)
{
    CStencil::CommandLineHelp();
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      uResult..result of test initialization

UINT CStencilOp::TestInitialize(VOID)
{
    UINT uResult = CStencil::TestInitialize();

    m_nStipple = (UINT) (m_dwVersion > 0x0600) ? 1 : 2;
    SetTestRange((UINT) 1, (UINT) (NMASKS*m_nStipple*NSTENCILSTATES*NSTENCILOPS));
    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test executed successfully
//              false....otherwise

bool CStencilOp::ExecuteTest(UINT uTest)
{
    bool bFail = false, bSuccess = false, bWrap;
    CHAR szStipple[2][13] = {
        "Non-Stippled",
        "    Stippled"
    };
    D3DVALUE dvDepth = 1.0f;
    DWORD dwOp, dwState;
    DWORD dwMasks[2];
    UINT i, j, k, n, o, p;
    DWORD dwClear, dwIterations;
    DWORD dwFlags = D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL;
    DWORD dwReference[2], dwStates[5];
    DWORD dwStencilOp[] = {
            D3DSTENCILOP_KEEP,
            D3DSTENCILOP_ZERO,
            D3DSTENCILOP_REPLACE,
            D3DSTENCILOP_INCRSAT,
            D3DSTENCILOP_DECRSAT,
            D3DSTENCILOP_INVERT,
            D3DSTENCILOP_INCR,
            D3DSTENCILOP_DECR,
    };
    DWORD dwStencilState[] = {
            D3DRS_STENCILFAIL,
            D3DRS_STENCILZFAIL,
            D3DRS_STENCILPASS,
    };

    CStencil::ExecuteTest(uTest);
    dwMasks[0] = m_dwStencilBitMask;
    dwMasks[1] = 0xffffffff;

    for (k = 1, i = 0; (i < m_nStipple) && !bSuccess; i++) {
        for (j = 0; (j < NMASKS) && !bSuccess; j++) {
//            for (dwState = D3DRENDERSTATE_STENCILFAIL; dwState <= D3DRENDERSTATE_STENCILPASS; dwState++)
            for (p = 0; p <= 2; p++) {
                dwState = dwStencilState[p];
//                for (dwOp = D3DSTENCILOP_KEEP; dwOp <= D3DSTENCILOP_DECR; dwOp++, k++)
                for (o = 0; o <= 7; o++) {
                    dwOp = dwStencilOp[o];
                    if (k == uTest)
                    {
                        vStipple(((i == 0) ? false : true));

                        switch (dwState)
                        {
                            case D3DRENDERSTATE_STENCILFAIL:
                                dwStates[0] = D3DCMP_ALWAYS;
                                dwStates[1] = D3DCMP_NEVER;
                                dwStates[2] = dwOp;
                                dwStates[3] = D3DSTENCILOP_KEEP;
                                dwStates[4] = D3DSTENCILOP_KEEP;
                            break;

                            case D3DRENDERSTATE_STENCILZFAIL:
                                dwStates[0] = D3DCMP_NEVER;
                                dwStates[1] = D3DCMP_ALWAYS;
                                dwStates[2] = D3DSTENCILOP_KEEP;
                                dwStates[3] = dwOp;
                                dwStates[4] = D3DSTENCILOP_KEEP;
                            break;

                            case D3DRENDERSTATE_STENCILPASS:
                                dwStates[0] = D3DCMP_ALWAYS;
                                dwStates[1] = D3DCMP_ALWAYS;
                                dwStates[2] = D3DSTENCILOP_KEEP;
                                dwStates[3] = D3DSTENCILOP_KEEP;
                                dwStates[4] = dwOp;
                            break;

                            default:
                                WriteToLog(_T("Unknown render state, blocked."));
                                Fail();
                                return false;
                            break;
                        }

                        switch (dwOp)
                        {
                            case D3DSTENCILOP_KEEP:
                                dwClear = m_dwStencilBitMask & 0x55555555;
                                dwIterations = (DWORD) 1;
                                bWrap = false;
                                dwReference[0] = dwClear;
                                dwReference[1] = (DWORD) 0;
                            break;

                            case D3DSTENCILOP_ZERO:
                                dwClear = m_dwStencilBitMask;
                                dwIterations = (DWORD) 1;
                                bWrap = false;
                                dwReference[0] = (DWORD) 0;
                                dwReference[1] = (DWORD) 0;
                            break;

                            case D3DSTENCILOP_REPLACE:
                                dwClear = m_dwStencilBitMask;
                                dwIterations = (DWORD) 1;
                                bWrap = false;
                                dwReference[0] = (DWORD) 0;
                                dwReference[1] = (DWORD) 0;
                            break;

                            case D3DSTENCILOP_INCRSAT:
                                dwClear = (DWORD) 0;
                                dwIterations = m_dwStencilBitMask;
                                bWrap = true;
                                dwReference[0] = m_dwStencilBitMask;
                                dwReference[1] = m_dwStencilBitMask;
                            break;

                            case D3DSTENCILOP_DECRSAT:
                                dwClear = m_dwStencilBitMask;
                                dwIterations = m_dwStencilBitMask;
                                bWrap = true;
                                dwReference[0] = (DWORD) 0;
                                dwReference[1] = (DWORD) 0;
                            break;

                            case D3DSTENCILOP_INVERT:
                                dwClear = m_dwStencilBitMask & 0x55555555;
                                dwIterations = (DWORD) 1;
                                bWrap = false;
                                dwReference[0] = m_dwStencilBitMask & 0xaaaaaaaa;
                                dwReference[1] = (DWORD) 0;
                            break;

                            case D3DSTENCILOP_INCR:
                                dwClear = (DWORD) 0;
                                dwIterations = m_dwStencilBitMask;
                                bWrap = true;
                                dwReference[0] = m_dwStencilBitMask;
                                dwReference[1] = (DWORD) 0;
                            break;

                            case D3DSTENCILOP_DECR:
                                dwClear = m_dwStencilBitMask;
                                dwIterations = m_dwStencilBitMask;
                                bWrap = true;
                                dwReference[0] = (DWORD) 0;
                                dwReference[1] = m_dwStencilBitMask;
                            break;

                            default:
                                WriteToLog(_T("Unknown stencil op, blocked."));
                                Fail();
                                return false;
                            break;         
                        }

                        sprintf(m_szBuffer, "%s, %s, %s", lpszGetOp(dwOp), lpszGetState(dwState), szStipple[i]);
                        BeginTestCase(m_szBuffer);
                        SetRenderState(D3DRENDERSTATE_ZFUNC, dwStates[0]);
                        SetRenderState(D3DRENDERSTATE_STENCILENABLE, (DWORD) TRUE);
                        SetRenderState(D3DRENDERSTATE_STENCILFUNC, dwStates[1]);
                        SetRenderState(D3DRENDERSTATE_STENCILFAIL, dwStates[2]);
                        SetRenderState(D3DRENDERSTATE_STENCILZFAIL, dwStates[3]);
                        SetRenderState(D3DRENDERSTATE_STENCILPASS, dwStates[4]);
                        SetRenderState(D3DRENDERSTATE_STENCILREF, dwReference[0]);
                        SetRenderState(D3DRENDERSTATE_STENCILMASK, dwMasks[j]);
                        SetRenderState(D3DRENDERSTATE_STENCILWRITEMASK, dwMasks[j]);

                        for (n = 0; n < dwIterations; n++)
                        {
                            if (BeginScene(dvDepth, dwClear, m_dwFailColor, dwFlags))
                            {
                                vFlood((D3DVALUE) 0.5, m_dwFailColor);

                                if (!EndScene())
                                {
                                    WriteToLog(_T("Unable to end scene, blocked."));
                                    Fail();
                                    bFail = true;
                                    break;
                                }
                            }
                            else
                            {
                                WriteToLog(_T("Unable to begin scene, blocked."));
                                Fail();
                                bFail = true;
                                break;
                            }

                            dwFlags = (DWORD) 0;
                        }

                        if (!bFail)
                        {
                            SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD) D3DCMP_ALWAYS);
                            SetRenderState(D3DRENDERSTATE_STENCILFUNC, (DWORD) D3DCMP_EQUAL);
                            SetRenderState(D3DRENDERSTATE_STENCILFAIL, (DWORD) D3DSTENCILOP_KEEP);
                            SetRenderState(D3DRENDERSTATE_STENCILZFAIL, (DWORD) D3DSTENCILOP_KEEP);
                            SetRenderState(D3DRENDERSTATE_STENCILPASS, (DWORD) D3DSTENCILOP_KEEP);

                            if (BeginScene(dvDepth, dwClear, m_dwFailColor, dwFlags))
                            {
                                vFlood((D3DVALUE) 0.5, m_dwPassColor);
                    
                                if (EndScene())
                                {
                                    m_fPassPercentage = 1.0;

                                    if (!bSupportedOperation(dwOp) || bCompare())
                                        Pass();
                                    else
                                    {
                                        WriteToLog(_T("Invalid pixel detected."));
                                        Fail();
                                        bFail = true;
                                    }
                                }
                                else
                                {
                                    WriteToLog(_T("Unable to end scene, blocked."));
                                    Fail();
                                    bFail = true;
                                }
                            }
                            else
                            {
                                WriteToLog(_T("Unable to begin scene, blocked."));
                                Fail();
                                bFail = true;
                            }
                        }

                        if (bWrap && !bFail)
                        {
                            if (BeginScene(dvDepth, dwClear, m_dwFailColor, dwFlags))
                            {
                                vFlood((D3DVALUE) 0.5, m_dwFailColor);

                                if (EndScene())
                                {
                                    SetRenderState(D3DRENDERSTATE_ZFUNC, dwStates[0]);
                                    SetRenderState(D3DRENDERSTATE_STENCILFUNC, dwStates[1]);
                                    SetRenderState(D3DRENDERSTATE_STENCILFAIL, dwStates[2]);
                                    SetRenderState(D3DRENDERSTATE_STENCILZFAIL, dwStates[3]);
                                    SetRenderState(D3DRENDERSTATE_STENCILPASS, dwStates[4]);

                                    if (BeginScene(dvDepth, dwClear, m_dwFailColor, dwFlags))
                                    {
                                        vFlood((D3DVALUE) 0.5, m_dwFailColor);

                                        if (EndScene())
                                        {
                                            SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD) D3DCMP_ALWAYS);
                                            SetRenderState(D3DRENDERSTATE_STENCILFUNC, (DWORD) D3DCMP_EQUAL);
                                            SetRenderState(D3DRENDERSTATE_STENCILFAIL, (DWORD) D3DSTENCILOP_KEEP);
                                            SetRenderState(D3DRENDERSTATE_STENCILZFAIL, (DWORD) D3DSTENCILOP_KEEP);
                                            SetRenderState(D3DRENDERSTATE_STENCILPASS, (DWORD) D3DSTENCILOP_KEEP);
                                            SetRenderState(D3DRENDERSTATE_STENCILREF, dwReference[1]);

                                            if (BeginScene(dvDepth, dwClear, m_dwFailColor, dwFlags))
                                            {
                                                vFlood((D3DVALUE) 0.5, m_dwPassColor);

                                                if (EndScene())
                                                {
                                                    m_fPassPercentage = 1.0;

                                                    if (!bSupportedOperation(dwOp) || bCompare())
                                                        Pass();
                                                    else
                                                    {
                                                        WriteToLog(_T("Invalid pixel detected."));
                                                        Fail();
                                                    }
                                                }
                                                else
                                                {
                                                    WriteToLog(_T("Unable to end scene, blocked."));
                                                    Fail();
                                                }
                                            }
                                            else
                                            {
                                                WriteToLog(_T("Unable to begin scene, blocked."));
                                                Fail();
                                            }
                                        }
                                        else
                                        {
                                            WriteToLog(_T("Unable to end scene, blocked."));
                                            Fail();
                                        }
                                    }
                                    else
                                    {
                                        WriteToLog(_T("Unable to begin scene, blocked."));
                                        Fail();
                                    }

                                    m_pDevice->Present(NULL, NULL, NULL, NULL);
                                }
                                else
                                {
                                    WriteToLog(_T("Unable to end scene, blocked."));
                                    Fail();
                                }
                            }
                            else
                            {
                                WriteToLog(_T("Unable to begin scene, blocked."));
                                Fail();
                            }
                        }

                        bSuccess = true;
                    }
                }
            }
        }
    }

//    return bSuccess;
    return false;
}

const UINT NOPS = 8;

// NAME:        lpszGetOp()
// DESC:        get operation string
// INPUT:       dwOp.....operation index
// OUTPUT:      szOps[dwOp]
// COMMENTS:    dwOp clamped to NOPS

LPSTR CStencilOp::lpszGetOp(DWORD dwOp)
{
    static PSTR szOps[] = {
        "D3DSTENCILOP_KEEP",
        "D3DSTENCILOP_ZERO",
        "D3DSTENCILOP_REPLACE",
        "D3DSTENCILOP_INCRSAT",
        "D3DSTENCILOP_DECRSAT",
        "D3DSTENCILOP_INVERT",
        "D3DSTENCILOP_INCR",
        "D3DSTENCILOP_DECR",
        "invalid op"
    };
    static DWORD dwOps[] = {
        D3DSTENCILOP_KEEP,
        D3DSTENCILOP_ZERO,
        D3DSTENCILOP_REPLACE,
        D3DSTENCILOP_INCRSAT,
        D3DSTENCILOP_DECRSAT,
        D3DSTENCILOP_INVERT,
        D3DSTENCILOP_INCR,
        D3DSTENCILOP_DECR,
    };
    UINT i;

    for (i = 0; i < NOPS; i++) {
        if (dwOp == dwOps[i]) {
            return (LPSTR)szOps[i];
        }
    }

    return (LPSTR)szOps[NOPS];
//    dwOp -= D3DSTENCILOP_KEEP;
//    dwOp = (DWORD) ((dwOp < NOPS) ? dwOp : NOPS);
//    return((LPSTR) szOps[dwOp]);
}

const UINT NSTATES = 3;

// NAME:        lpszGetState()
// DESC:        get state string
// INPUT:       dwState..state index
// OUTPUT:      szStates[dwState]
// COMMENTS:    dwState clamped to NSTATES

LPSTR CStencilOp::lpszGetState(DWORD dwState)
{
    static PSTR szStates[] = {
        "D3DRENDERSTATE_STENCILFAIL",
        "D3DRENDERSTATE_STENCILZFAIL",
        "D3DRENDERSTATE_STENCILPASS",
        "invalid state"
    };
    static DWORD dwStates[] = {
        D3DRENDERSTATE_STENCILFAIL,
        D3DRENDERSTATE_STENCILZFAIL,
        D3DRENDERSTATE_STENCILPASS,
    };
    UINT i;

    for (i = 0; i < NSTATES; i++) {
        if (dwState == dwStates[i]) {
            return (LPSTR)szStates[i];
        }
    }

    return (LPSTR)szStates[NSTATES];

//    dwState -= D3DRENDERSTATE_STENCILFAIL;
//    dwState = (DWORD) ((dwState < NSTATES) ? dwState : NSTATES);
//    return((LPSTR) szStates[dwState]);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\zcorrupt.cpp ===
// FILE:        zcorrupt.cpp
// DESC:        stencil conformance tests
// AUTHOR:      Todd M. Frost
// COMMENTS:    tests for z corruption due to stencil clear operations

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "flags.h"
#include "stencil.h"

// NAME:        CStencilZCorrupt()
// DESC:        stencil z corrupt class constructor
// INPUT:       none
// OUTPUT:      none

CStencilZCorrupt::CStencilZCorrupt()
{
    m_szTestName = TEXT("Z corruption");
    m_szCommandKey = TEXT("ZCorrupt");

    m_nStipple = (UINT) 0;
}

// NAME:        ~CStencilZCorrupt()
// DESC:        stencil z corrupt class destructor
// INPUT:       none
// OUTPUT:      none

CStencilZCorrupt::~CStencilZCorrupt()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CStencilZCorrupt::CommandLineHelp(void)
{
    CStencil::CommandLineHelp();
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      uResult..result of test initialization

UINT CStencilZCorrupt::TestInitialize(VOID)
{
    UINT uResult = CStencil::TestInitialize();

    m_nStipple = (UINT) (m_dwVersion > 0x0600) ? 1 : 2;
    SetTestRange((UINT) 1, (UINT) (NMASKS*m_nStipple*(m_dwStencilBitMask + 1)));
    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test executed successfully
//              false....otherwise

bool CStencilZCorrupt::ExecuteTest(UINT uTest)
{
    bool bSuccess = false;
    CHAR szStipple[2][13] = {
        "Non-Stippled",
        "    Stippled"
    };
    D3DVALUE dvDepth = 0.0f;
    DWORD dwClear, dwFlags, dwInvert;
    DWORD dwMasks[2];
    UINT i, j, k;

    CStencil::ExecuteTest(uTest);
    dwMasks[0] = m_dwStencilBitMask;
    dwMasks[1] = 0xffffffff;

    for (k = 1, i = 0; (i < m_nStipple) && !bSuccess; i++)
        for (j = 0; (j < NMASKS) && !bSuccess; j++)
            for (dwClear = 0; dwClear <= m_dwStencilBitMask && !bSuccess; dwClear++, k++)
                if (k == uTest)
                {
                    sprintf(m_szBuffer, "Clear2() corruption:  0x%08X, 0x%08X, %s", dwClear, dwMasks[j], szStipple[i]);
                	BeginTestCase(m_szBuffer);
                    vStipple(((i == 0) ? false : true));
                    SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD) D3DCMP_EQUAL);
                    SetRenderState(D3DRENDERSTATE_STENCILFUNC, (DWORD) D3DCMP_ALWAYS);
                    SetRenderState(D3DRENDERSTATE_STENCILENABLE, (DWORD) TRUE);
                    SetRenderState(D3DRENDERSTATE_STENCILWRITEMASK, dwMasks[j]);
                    SetRenderState(D3DRENDERSTATE_STENCILFAIL, (DWORD) D3DSTENCILOP_KEEP);
                    SetRenderState(D3DRENDERSTATE_STENCILZFAIL, (DWORD) D3DSTENCILOP_KEEP);
                    SetRenderState(D3DRENDERSTATE_STENCILPASS, (DWORD) D3DSTENCILOP_KEEP);
                    dwFlags = D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL;

                    if (BeginScene(dvDepth, dwClear, m_dwPassColor, dwFlags))
                    {
                        if (EndScene())
                        {
                            dwFlags = D3DCLEAR_TARGET | D3DCLEAR_STENCIL;
                            dwInvert = m_dwStencilBitMask & ~dwClear;

                            if (BeginScene(dvDepth, dwInvert, m_dwPassColor, dwFlags))
                            {
                                SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD) D3DCMP_NOTEQUAL);
                                SetRenderState(D3DRENDERSTATE_STENCILFUNC, (DWORD) D3DCMP_ALWAYS);
                                vFlood(dvDepth, m_dwFailColor);
        
                                if (EndScene())
                                {
                                    if (bCompare())
                                        Pass();
                                    else
                                    {
                                        WriteToLog(_T("Invalid pixel detected."));
                                        Fail();
                                    }

                                    m_pDevice->Present(NULL, NULL, NULL, NULL);
                                }
                                else
                                {
                                    WriteToLog(_T("Unable to end scene, blocked."));
                                    Fail();
                                }
                            }
                            else
                            {
                                WriteToLog(_T("Unable to begin scene, blocked."));
                                Fail();
                            }
                        }
                        else
                        {
                            WriteToLog(_T("Unable to end scene, blocked."));
                            Fail();
                        }
                    }
                    else
                    {
                        WriteToLog(_T("Unable to begin scene, blocked."));
                        Fail();
                    }

                    bSuccess = true;
                }

//    return bSuccess;
    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\stencil.cpp ===
// FILE:        stencil.cpp
// DESC:        stencil plane conformance tests
// AUTHOR:      Todd M. Frost

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "flags.h"
#include "stencil.h"

//CD3DWindowFramework App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CStencil*       pStencil;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 7 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pStencil = new CStencilCap();
                break;
            case 1:
                pStencil = new CStencilClear();
                break;
            case 2:
                pStencil = new CStencilFunc();
                break;
            case 3:
                pStencil = new CStencilIgnore();
                break;
            case 4:
                pStencil = new CStencilOp();
                break;
            case 5:
                pStencil = new CStencilSCorrupt();
                break;
            case 6:
                pStencil = new CStencilZCorrupt();
                break;
        }

        if (!pStencil) {
            return FALSE;
        }

        // Initialize the scene
        if (!pStencil->Create(pDisplay)) {
            pStencil->Release();
            return FALSE;
        }

        bRet = pStencil->Exhibit(pnExitCode);

        bQuit = pStencil->AbortedExit();

        // Clean up the scene
        pStencil->Release();
    }

    return bRet;
}

// NAME:        CStencil()
// DESC:        stencil class constructor
// INPUT:       none
// OUTPUT:      none

CStencil::CStencil()
{
    strcpy(m_szBuffer, "");

    m_dwFailColor = (D3DCOLOR) 0;
    m_dwPassColor = (D3DCOLOR) 0;

    m_dwRedMask = (DWORD) 0;

    m_dwRequestedDepth = (DWORD) 0;

    m_dwStencilBitDepth = (DWORD) 0;
    m_dwStencilBitDepthReported = (DWORD) 0;
    m_dwStencilBitMask = (DWORD) 0;
    m_dwStencilCaps = (DWORD) 0;

    m_uRange = (UINT) 1;

    m_ModeOptions.fReference = false;

    m_bExit = FALSE;
}

// NAME:        ~CStencil()
// DESC:        stencil class destructor
// INPUT:       none
// OUTPUT:      none

CStencil::~CStencil()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CStencil::CommandLineHelp(void)
{
//    WriteCommandLineHelp("$yverbose: $wverbose $c($wOn$c/Off)");
//    WriteCommandLineHelp("$ysubrect: $wsubrect validation $c($wOn$c/Off)");
//    WriteCommandLineHelp("$ydepth: $wstencil depth $c(default=0)");
}

// NAME:        AddModeList()
// DESC:        add mode list
// INPUT:       pMode........address of MODELIST structure
//              pData........address of VOID data
//              dwDataSize...data size
// OUTPUT:      true
// COMMENTS:    for non-conformance, add only modes having appropriate stencil buffers
/*
bool CStencil::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
    UINT n;
    PBUFFER pBuffers = NULL;

    vProcessArgs();

    if (IsConformance())
    {
        for (n = 0; n < m_uCommonZBufferFormats; n++)
            if (m_pCommonZBufferFormats[n].ddpfPixelFormat.dwFlags & PF_STENCILBUFFER)
                if (m_dwRequestedDepth)
                {
                    if (m_pCommonZBufferFormats[n].ddpfPixelFormat.dwStencilBitDepth == m_dwRequestedDepth)
                        if (bUnique(&pBuffers, &m_pCommonZBufferFormats[n].ddpfPixelFormat))
                        {
                            pMode->D3DMode.nZBufferFormat = n;
                            CD3DTest::AddModeList(pMode);
                        }
                }
                else
                {
                    if (m_pCommonZBufferFormats[n].ddpfPixelFormat.dwStencilBitDepth >= 1)
                        if (bUnique(&pBuffers, &m_pCommonZBufferFormats[n].ddpfPixelFormat))
                        {
                            pMode->D3DMode.nZBufferFormat = n;
                            CD3DTest::AddModeList(pMode);
                        }
                }
    }
    else
    {
        n = pMode->D3DMode.nZBufferFormat;

        if (m_pCommonZBufferFormats[n].ddpfPixelFormat.dwFlags & PF_STENCILBUFFER)
            if (m_dwRequestedDepth)
            {
                if (m_pCommonZBufferFormats[n].ddpfPixelFormat.dwStencilBitDepth == m_dwRequestedDepth)
                    CD3DTest::AddModeList(pMode);
            }
            else
            {
                if (m_pCommonZBufferFormats[n].ddpfPixelFormat.dwStencilBitDepth >= 1)
                    CD3DTest::AddModeList(pMode);
            }
    }

    if (pBuffers)
    {
        PBUFFER pBuffer, pTemp;

        for (pBuffer = pBuffers; pBuffer; pBuffer = pTemp)
        {
            pTemp = pBuffer->pNext;
            free(pBuffer);
        }
    }

    return true;
}
*/

// NAME:        EmptyModeList()
// DESC:        empty mode list handler
// INPUT:       none
// OUTPUT:      D3DTESTINIT_SKIPALL

UINT CStencil::EmptyModeList()
{
    SetTestRange((UINT) 1, (UINT) 1);
    return (UINT) D3DTESTINIT_SKIPALL;
}

// NAME:        PreModeSetup()
// DESC:        pre mode setup
// INPUT:       none
// OUTPUT:      none

//bool CStencil::PreModeSetup(void)
//{
//    m_pMode->nTextureFormat = DISABLE_TEXTURE;
//    return CD3DTest::PreModeSetup();
//}

// NAME:        SetDefaultRenderStates()
// DESC:        set default render states
// INPUT:       none
// OUTPUT:      SetRenderState()

bool CStencil::SetDefaultRenderStates(VOID)
{
    if (m_dwVersion < 0x0700)
        return true;
    else
        return SetRenderState(D3DRENDERSTATE_LIGHTING, (DWORD) FALSE);
}

// NAME:        ClearFrame()
// DESC:        clear frame
// INPUT:       none
// OUTPUT:      true
// COMMENTS:    defeat framework's ClearFrame()

bool CStencil::ClearFrame(VOID)
{
    return true;
}

// NAME:        BeginScene()
// DESC:        begin scene
// INPUT:       dvZ.........clear z
//              dwStencil...clear stencil
//              dwColor.....clear color
//              dwFlags.....clear flags
// OUTPUT:      true.....if clear/begin scene successful
//              false....otherwise

bool CStencil::BeginScene(D3DVALUE dvZ, DWORD dwStencil, DWORD dwColor, DWORD dwFlags)
{
    m_pDevice->SetViewport(&m_vpFull);

    if (dwFlags && !Clear(dwColor, dvZ, dwStencil, dwFlags))
    {
        WriteToLog(_T("Unable to clear z buffer."));
        return false;
    }
    else if (!CD3DTest::BeginScene())
    {
        WriteToLog(_T("Unable to clear z buffer."));
        return false;
    }

    return true;
}

// NAME:        SetTestRange()
// DESC:        set test range
// INPUT:       uStart...start test range
//              uEnd.....end test range
// OUTPUT:      true

bool CStencil::SetTestRange(UINT uStart, UINT uEnd)
{
    if (m_Flags.bCheck(VERBOSE) && (uEnd > 0))
        WriteToLog(_T("Current test range:  (%d,%d)."), uStart, uEnd);

    if (uStart < uEnd)
        m_uRange = uEnd - uStart;
    else
        m_uRange = (UINT) 1;

    return CD3DTest::SetTestRange(uStart, uEnd);
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      D3DTESTINIT_RUN
// COMMENTS:    pixel format bit depths can be unreliable, compute from bit masks

UINT CStencil::TestInitialize(VOID)
{
/*
    bool bMatch = false;
//    DDPIXELFORMAT Format;
    UINT i, j, uCount;

    i = m_pMode->nSrcDevice;
    j = m_pMode->nZBufferFormat;
    m_dwZCmpCaps = m_pAdapter->Devices[i].Desc.dpcTriCaps.dwZCmpCaps;
    memcpy(&Format, &m_pCommonZBufferFormats[j].ddpfPixelFormat, sizeof(Format));
    m_dwStencilBitDepthReported = Format.dwStencilBitDepth;
    m_dwStencilBitDepth = (DWORD) ((m_dwVersion > 0x0700) ? m_dwStencilBitDepthReported : 0);

    if (!(m_dwVersion > 0x0700))
    {
        uCount = Format.dwStencilBitMask;

        while (0 != uCount)
        {
            m_dwStencilBitDepth += (uCount & 1);
            uCount >>= 1;
        }
    }

    m_dwStencilBitMask = (DWORD) ((1 << m_dwStencilBitDepth) - 1);
    m_dwStencilCaps = m_pAdapter->Devices[i].Desc.dwStencilCaps;
    SetDisplayMode(DISPLAYMODE_WINDOW_SRCONLY);

    if (m_dwVersion > 0x0700)
        WriteToLog(_T("Stencil/Z depth:  %d/%d."), Format.dwStencilBitDepth, Format.dwZBufferBitDepth);
    else
        WriteToLog(_T("Stencil/Z masks:  0x%08X/0x%08X."), Format.dwStencilBitMask, Format.dwZBitMask);

    if (m_Flags.bCheck(VERBOSE) && m_pSrcTarget && m_pSrcTarget->m_pSurface4)
    {
        DDSCAPS2 Caps;
        LPDIRECTDRAWSURFACE4 lpSurface;

        memset(&Caps, 0, sizeof(Caps));
        Caps.dwCaps = DDSCAPS_ZBUFFER;

        if (DD_OK == m_pSrcTarget->m_pSurface4->GetAttachedSurface(&Caps, &lpSurface))
        {
            DDSURFACEDESC2 Desc;

            memset(&Desc, 0, sizeof(Desc));
            Desc.dwSize = sizeof(Desc);

            if (DD_OK == lpSurface->GetSurfaceDesc(&Desc))
            {
                if (Desc.ddpfPixelFormat.dwStencilBitDepth == m_dwStencilBitDepth)
                {
                    HRESULT hResult;

                    memset(&Desc, 0, sizeof(Desc));
                    Desc.dwSize = sizeof(Desc);
                    while ((hResult = lpSurface->Lock(NULL, &Desc, 0, NULL)) == DDERR_WASSTILLDRAWING);

                    if (DD_OK == hResult)
                    {
                        lpSurface->Unlock(NULL);

                        if (Desc.ddpfPixelFormat.dwStencilBitDepth == m_dwStencilBitDepth)
                            bMatch = true;
                        else
                            WriteToLog(_T("Stencil depth %d does not match expected depth %d (Lock)."),
                                       Desc.ddpfPixelFormat.dwStencilBitDepth, m_dwStencilBitDepth);
                    }
                    else
                        WriteToLog(_T("Lock() failed on z buffer."));
                }
                else
                    WriteToLog(_T("Stencil depth %d does not match expected depth %d (GetSurfaceDesc)."),
                               Desc.ddpfPixelFormat.dwStencilBitDepth, m_dwStencilBitDepth);
            }
            else
                WriteToLog(_T("GetSurfaceDesc() failed on z buffer."));
        }
        else
            WriteToLog(_T("GetAttachedSurface() failed on render target."));
    }
*/

    m_dwStencilCaps = m_d3dcaps.StencilCaps;

    m_dwRequestedDepth = 8;
    m_dwStencilBitDepth = 8;
    m_dwStencilBitDepthReported = 8;
    m_dwStencilBitMask = 0x000000FF;

    WriteToLog(_T("Stencil/Z depth:  %d/%d."), 8, 24);
    WriteToLog(_T("Stencil/Z masks:  0x%08X/0x%08X."), 0x000000FF, 0xFFFFFF00);

    return D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true
// COMMENTS:    fail color always has max red component (255)
//              pass color always has min red component (  0)

bool CStencil::ExecuteTest(UINT uTest)
{
    D3DVALUE dvDelta = 0.0f;
    DWORD dwColor[3];
    VOID *pvBuffer;
    CSurface8* pd3ds;
    D3DSURFACE_DESC d3dsd;
    ARGBPIXELDESC pixd;

    if (m_uRange > 1)
        dvDelta = ((D3DVALUE) (uTest - 1))/((D3DVALUE) (m_uRange - 1));
 
    dwColor[0] = (DWORD) 255;
    dwColor[1] = (DWORD) (255.0*(1.0f - dvDelta) + 0.5);
    dwColor[2] = (DWORD) (255.0*(0.0f + dvDelta) + 0.5);

    dwColor[0] = (dwColor[0] > 255) ? 255 : dwColor[0];
    dwColor[1] = (dwColor[1] > 255) ? 255 : dwColor[1];
    dwColor[2] = (dwColor[2] > 255) ? 255 : dwColor[2];

    m_dwFailColor = RGB_MAKE(dwColor[0], dwColor[1], dwColor[2]);
    m_dwPassColor = 0x00ffffff & ~m_dwFailColor;

    // bit masks valid between lock/unlock
/*
    if (!(pvBuffer = m_pSrcTarget->Lock()))
    {
        WriteToLog(_T("Unable to lock source target."));
        return false;
    }

    m_dwRedMask = m_pSrcTarget->m_dwRedMask << m_pSrcTarget->m_nRedShift;

    if (!m_pSrcTarget->Unlock())
    {
        WriteToLog(_T("Unable to unlock source target."));
        return false;
    }
*/

    if (FAILED(m_pDevice->GetRenderTarget(&pd3ds))) {
        return false;
    }

    pd3ds->GetDesc(&d3dsd);
    pd3ds->Release();

    GetARGBPixelDesc(d3dsd.Format, &pixd);

    m_dwRedMask = pixd.dwRMask;

    return true;
}

// NAME:        CompareImages()
// DESC:        compare images
// INPUT:       pSrc.....address of CDirectDrawSurface source
//              pRef.....address of CDirectDrawSurface reference
//              pResult..address of CDirectDrawSurface result
// OUTPUT:      true
// COMMENTS:    defeat framework's CompareImages()
/*
bool CStencil::CompareImages(CDirectDrawSurface *pSrc, CDirectDrawSurface *pRef, CDirectDrawSurface *pResult)
{
    return true;
}
*/
// NAME:        ProcessFrame()
// DESC:        process frame
// INPUT:       none
// OUTPUT:      true

bool CStencil::ProcessFrame(VOID)
{
    return true;
}

// NAME:        bCompare()
// DESC:        compare target to key
// INPUT:       none
// OUTPUT:      true.........if extract successful
//              false........otherwise

bool CStencil::bCompare(VOID)
{
    int i, j;
    DWORD dwPixel;
    DWORD dwFailed = (DWORD) 0, dwInspected = (DWORD) 0, dwPassed = (DWORD) 0;
    INT nMin[2], nMax[2];
    VOID *pvBuffer, *pvColor;
    CSurface8* pd3ds;
    D3DLOCKED_RECT d3dlr;
    D3DSURFACE_DESC d3dsd;
    ARGBPIXELDESC pixd;
    DWORD dwFilter;

//    if (!m_pSrcTarget)
//    {
//        WriteToLog(_T("Unable to analyze:  invalid target."));
//        return false;
//    }

    if (FAILED(m_pDevice->GetRenderTarget(&pd3ds))) {
        WriteToLog(_T("Unable to analyze:  invalid target."));
        return false;
    }

    pd3ds->GetDesc(&d3dsd);
    GetARGBPixelDesc(d3dsd.Format, &pixd);
    dwFilter = pixd.dwRMask | pixd.dwGMask | pixd.dwBMask;

//    if (!(pvBuffer = m_pSrcTarget->Lock()))
//    {
//        WriteToLog(_T("Unable to attempt extraction:  lock failed."));
//        return false;
//    }

    if (FAILED(pd3ds->LockRect(&d3dlr, NULL, 0))) {
        WriteToLog(_T("Unable to attempt extraction:  lock failed."));
        pd3ds->Release();
        return false;
    }
    pvBuffer = d3dlr.pBits;

    vGetRange(nMin, nMax);

    for (j = nMin[1]; j <= nMax[1]; j++)
    {
        pvColor = (char *) pvBuffer + (j*d3dlr.Pitch);

        for (i = 0; i < (int) d3dsd.Width; i++)
        {
//            dwPixel = m_pSrcTarget->ReadPixel(&pvColor);

            if (FormatToBitDepth(d3dsd.Format) == 16) {
                dwPixel = *(LPWORD)pvColor;
                dwPixel &= dwFilter;
                pvColor = ((LPWORD)pvColor) + 1;
            }
            else {
                dwPixel = *(LPDWORD)pvColor;
                dwPixel &= dwFilter;
                pvColor = ((LPDWORD)pvColor) + 1;
            }

            if ((nMin[0] <= i) && (i <= nMax[0]))
            {
                dwInspected++;

                if (!(dwPixel & m_dwRedMask))
                    dwPassed++;
                else
                    dwFailed++;
            }
        }
    }

//    if (!m_pSrcTarget->Unlock())
    if (FAILED(pd3ds->UnlockRect()))
    {
        WriteToLog(_T("Unable to terminate extraction:  unlock failed."));
        pd3ds->Release();
        return false;
    }

    pd3ds->Release();

    if (!dwInspected || (dwInspected != dwPassed))
    {
        if (!dwInspected)
            m_fPassPercentage = 0.0f;
        else
            m_fPassPercentage = ((float) dwPassed) / ((float) dwInspected);

        return false;
    }
    else
    {
        m_fPassPercentage = 1.0;
        return true;
    }
}

// NAME:        bSupportedOperation()
// DESC:        supported stencil operation indicator
// INPUT:       dwOp.....stencil operation
// OUTPUT:      true.....if stencil operation is supported
//              false....otherwise

bool CStencil::bSupportedOperation(DWORD dwOp)
{
    bool bSupported = false;

    switch (dwOp)
    {
        case D3DSTENCILOP_KEEP:
            if (D3DSTENCILCAPS_KEEP & m_dwStencilCaps)
                bSupported = true;
        break;

        case D3DSTENCILOP_ZERO:
            if (D3DSTENCILCAPS_ZERO & m_dwStencilCaps)
                bSupported = true;
        break;

        case D3DSTENCILOP_REPLACE:
            if (D3DSTENCILCAPS_REPLACE & m_dwStencilCaps)
                bSupported = true;
        break;

        case D3DSTENCILOP_INCRSAT:
            if (D3DSTENCILCAPS_INCRSAT & m_dwStencilCaps)
                bSupported = true;
        break;

        case D3DSTENCILOP_DECRSAT:
            if (D3DSTENCILCAPS_DECRSAT & m_dwStencilCaps)
                bSupported = true;
        break;

        case D3DSTENCILOP_INVERT:
            if (D3DSTENCILCAPS_INVERT & m_dwStencilCaps)
                bSupported = true;
        break;

        case D3DSTENCILOP_INCR:
            if (D3DSTENCILCAPS_INCR & m_dwStencilCaps)
                bSupported = true;
        break;

        case D3DSTENCILOP_DECR:
            if (D3DSTENCILCAPS_DECR & m_dwStencilCaps)
                bSupported = true;
        break;

        default:
        break;
    }

    return bSupported;
}

// NAME:        bUnique()
// DESC:        unique z/stencil mask check
// INPUT:       pBuffers.buffer list
//              pFormat..pixel format
// OUTPUT:      true.....if pixel format z/stencil masks not contained in pBuffers
//              false....otherwise

bool CStencil::bUnique(PBUFFER *pBuffers)
{
    bool bFound = false;
    PBUFFER pBuffer;

    return true;
/*
    if (m_dwVersion > 0x0700)
        return true;

    if (m_Flags.bCheck(LOMASK) && (pFormat->dwStencilBitMask & 0x00000001))
        return false;

    if (m_Flags.bCheck(HIMASK) && !(pFormat->dwStencilBitMask & 0x00000001))
        return false;

    for (pBuffer = *pBuffers; pBuffer && !bFound; pBuffer = pBuffer->pNext)
        if ((pFormat->dwStencilBitMask == pBuffer->dwStencilBitMask) &&
            (pFormat->dwZBitMask == pBuffer->dwZBitMask))
            bFound = true;

    if (!bFound)
    {
        pBuffer = (PBUFFER) malloc(sizeof(BUFFER));
        pBuffer->dwStencilBitMask = pFormat->dwStencilBitMask;
        pBuffer->dwZBitMask = pFormat->dwZBitMask;
        pBuffer->pNext = *pBuffers;
        *pBuffers = pBuffer;
    }

    return !bFound;
*/
}

// NAME:        vGetRange()
// DESC:        get compare range
// INPUT:       nMin.....range min
//              nMax.....range max
// OUTPUT:      none

VOID CStencil::vGetRange(INT nMin[2], INT nMax[2])
{
    CSurface8* pd3ds;

    if (m_Flags.bCheck(SUBRECT))
    {
        D3DVALUE dvMid[2];

        dvMid[0] = (D3DVALUE) (m_pDisplay->GetWidth() >> 1);
        dvMid[1] = (D3DVALUE) (m_pDisplay->GetHeight() >> 1);
        nMin[0] = (INT) (dvMid[0] - HALF_SUBRECT_WIDTH);
        nMin[1] = (INT) (dvMid[1] - HALF_SUBRECT_HEIGHT);
        nMax[0] = (INT) (dvMid[0] + HALF_SUBRECT_WIDTH);
        nMax[1] = (INT) (dvMid[1] + HALF_SUBRECT_HEIGHT);
    }
    else
    {
        nMin[0] = (DWORD) 0;
        nMin[1] = (DWORD) 0;
        nMax[0] = (DWORD) m_pDisplay->GetWidth() - 1;
        nMax[1] = (DWORD) m_pDisplay->GetHeight() - 1;
    }
}

// NAME:        vFlood()
// DESC:        flood rendering target
// INPUT:       dvDepth......flood depth
//              dwColor......flood color
// OUTPUT:      none

VOID CStencil::vFlood(D3DVALUE dvDepth, D3DCOLOR dwColor)
{
    D3DCOLOR dwSpecular = RGB_MAKE(0, 0, 0);
    D3DPRIMITIVETYPE dwType = D3DPT_TRIANGLEFAN;
    D3DTLVERTEX Vertices[4];
    DWORD dwCount = 4;
    DWORD dwFlags = (DWORD) CD3D_SRC;
    DWORD dwFormat = D3DFVF_TLVERTEX;
    INT nMin[2], nMax[2];

    vGetRange(nMin, nMax);

    Vertices[0].sx = (D3DVALUE) nMin[0];
    Vertices[0].sy = (D3DVALUE) nMax[1] + 1;
    Vertices[0].sz = dvDepth;
    Vertices[0].rhw = 1.0f;
    Vertices[0].color = dwColor;
    Vertices[0].specular = dwSpecular;
    Vertices[0].tu = 0.0f;
    Vertices[0].tv = 0.0f;

    Vertices[1].sx = (D3DVALUE) nMin[0];
    Vertices[1].sy = (D3DVALUE) nMin[1];
    Vertices[1].sz = dvDepth;
    Vertices[1].rhw = 1.0f;
    Vertices[1].color = dwColor;
    Vertices[1].specular = dwSpecular;
    Vertices[1].tu = 0.0f;
    Vertices[1].tv = 1.0f;

    Vertices[2].sx = (D3DVALUE) nMax[0] + 1;
    Vertices[2].sy = (D3DVALUE) nMin[1];
    Vertices[2].sz = dvDepth;
    Vertices[2].rhw = 1.0f;
    Vertices[2].color = dwColor;
    Vertices[2].specular = dwSpecular;
    Vertices[2].tu = 1.0f;
    Vertices[2].tv = 1.0f;

    Vertices[3].sx = (D3DVALUE) nMax[0] + 1;
    Vertices[3].sy = (D3DVALUE) nMax[1] + 1;
    Vertices[3].sz = dvDepth;
    Vertices[3].rhw = 1.0f;
    Vertices[3].color = dwColor;
    Vertices[3].specular = dwSpecular;
    Vertices[3].tu = 1.0f;
    Vertices[3].tv = 0.0f;

    RenderPrimitive(dwType, dwFormat, (LPVOID) Vertices, dwCount, NULL, 0, dwFlags);
}

// NAME:        vStipple()
// DESC:        stipple enable/disable
// INPUT:       bEnable..enable flag
// OUTPUT:      none

VOID CStencil::vStipple(bool bEnable)
{
    D3DRENDERSTATETYPE dwType;
    DWORD dwMask, dwState; 
    UINT i;

    // all stipple renderstates retired post DX6
    return;

/*
    if (m_dwVersion > 0x0600)
        return;

    if (bEnable)
    {
        dwMask = 0xffffffff;
        dwState = (DWORD) TRUE;
    }
    else
    {
        dwMask = 0x00000000;
        dwState = (DWORD) FALSE;
    }

    SetRenderState(D3DRENDERSTATE_STIPPLEENABLE, dwState);

    for (i = 0; i < 32; i++)
    {
        dwType = (D3DRENDERSTATETYPE) D3DRENDERSTATE_STIPPLEPATTERN(i);
        SetRenderState(dwType, dwMask);
    }
*/
}

// NAME:        vProcessArgs()
// DESC:        process args
// INPUT:       none
// OUTPUT:      none

VOID CStencil::vProcessArgs(VOID)
{
    int iDefault, iResult;

    if (KeySet("WHQL"))
    {
        m_dwRequestedDepth = (DWORD) 0;
        return;
    }

    // verbose
    // default:  off

    if (KeySet("verbose"))
        m_Flags.vSet(VERBOSE);

    // himask
    // default:  off

    if (KeySet("himask"))
        m_Flags.vSet(HIMASK);

    // lomask
    // default:  off

    if (KeySet("lomask"))
        m_Flags.vSet(LOMASK);

    // subrect
    // default:  off

    if (KeySet("subrect"))
        m_Flags.vSet(SUBRECT);

    // depth
    // default:  0 (no specified depth)

    iDefault = (int) 0;
    ReadInteger("depth", iDefault, &iResult);
    m_dwRequestedDepth = (DWORD) ((iResult < 0) ? 0 : iResult);
}

//******************************************************************************
BOOL CStencil::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CStencil::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CStencil::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\stencil.h ===
// FILE:        stencil.h
// DESC:        stencil class header for stencil conformance tests
// AUTHOR:      Todd M. Frost

//#include "CD3DTest.h"
//#include "flags.h"

//USETESTFRAME

const UINT MAXBUFFER = 128;

const UINT NMASKS = 2;

const DWORD VERBOSE = 0x00000001;
const DWORD SUBRECT = 0x00000002;
const DWORD HIMASK  = 0x00000004;
const DWORD LOMASK  = 0x00000008;

const FLOAT HALF_SUBRECT_WIDTH = 16.0f;
const FLOAT HALF_SUBRECT_HEIGHT = 16.0f;

typedef struct _Args
{
    D3DCOLOR dwClearColor; // clear color
    DWORD dwStencil;       // stencil clear
    DWORD dwReference[2];  // reference masks
} ARGS, *PARGS;

typedef struct _Buffer
{
    DWORD dwStencilBitMask; // stencil bit mask
    DWORD dwZBitMask;       // z bit mask
    struct _Buffer *pNext;  // address of BUFFER data
} BUFFER, *PBUFFER;

class CStencil: public CD3DTest
{
    public:
        CHAR m_szBuffer[MAXBUFFER];        // text buffer
        D3DCOLOR m_dwFailColor;            // fail color
        D3DCOLOR m_dwPassColor;            // pass color
        DWORD m_dwRedMask;                 // red mask for source render target
        DWORD m_dwRequestedDepth;          // requested stencil bit depth
        DWORD m_dwStencilBitDepth;         // stencil bit depth
        DWORD m_dwStencilBitDepthReported; // stencil bit depth reported
        DWORD m_dwStencilBitMask;          // stencil bit mask
        DWORD m_dwStencilCaps;             // stencil caps
        DWORD m_dwZCmpCaps;                // z compare caps
        UINT m_uRange;                     // test range
        CFlags m_Flags;                    // flags class

        BOOL            m_bExit;

	public:
    	CStencil();
    	~CStencil();
        virtual void CommandLineHelp(void);
//        virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
    	virtual UINT EmptyModeList(VOID);
//    	virtual bool PreModeSetup(void);
        virtual bool SetDefaultRenderStates(VOID);
    	virtual bool ClearFrame(VOID);
        virtual bool BeginScene(D3DVALUE dvZ, DWORD dwStencil, DWORD dwColor, DWORD dwFlags);
        virtual bool SetTestRange(UINT uStart, UINT uEnd);
    	virtual UINT TestInitialize(VOID);
    	virtual bool ExecuteTest(UINT uTest);
//        virtual bool CompareImages(CDirectDrawSurface *pSrc, CDirectDrawSurface *pRef, CDirectDrawSurface *pResult);
        virtual bool ProcessFrame(VOID);
        bool bCompare(VOID);
        bool bSupportedOperation(DWORD dwOp);
    	bool bUnique(PBUFFER *pBuffers);
        VOID vGetRange(INT nMin[2], INT nMax[2]);
        VOID vFlood(D3DVALUE dvDepth, D3DCOLOR dwColor);
        VOID vStipple(bool bEnable);
        VOID vProcessArgs(VOID);

        virtual BOOL    AbortedExit(void);

    protected:

        virtual void    ProcessInput();
        virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                            WPARAM wParam, LPARAM lParam);
};

class CStencilCap : public CStencil
{
    public:
        CStencilCap();
        ~CStencilCap();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CStencilClear : public CStencil
{
    public:
        UINT m_nStipple;

    public:
        CStencilClear();
        ~CStencilClear();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        VOID vTest(bool bStipple, DWORD dwClear, DWORD dwMask);
};

class CStencilFunc : public CStencil
{
    public:
        UINT m_nStipple;

    public:
        CStencilFunc();
        ~CStencilFunc();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        VOID vTest(PARGS pArgs);
        LPSTR lpszGetFunc(DWORD dwFunc);
};

class CStencilIgnore : public CStencil
{
    public:
        UINT m_nStipple;

    public:
        CStencilIgnore();
        ~CStencilIgnore();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        VOID vTest(bool bStipple, DWORD dwClear, DWORD dwMask);
};

class CStencilOp : public CStencil
{
    public:
        UINT m_nStipple;

    public:
        CStencilOp();
        ~CStencilOp();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
        VOID vTest(DWORD dwState, DWORD dwOp);
        LPSTR lpszGetOp(DWORD dwOp);
        LPSTR lpszGetState(DWORD dwState);
};

class CStencilSCorrupt : public CStencil 
{
    public:
        UINT m_nStipple;

    public:
        CStencilSCorrupt();
        ~CStencilSCorrupt();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};

class CStencilZCorrupt : public CStencil
{
    public:
        UINT m_nStipple;

    public:
        CStencilZCorrupt();
        ~CStencilZCorrupt();
        virtual void CommandLineHelp(void);
        virtual UINT TestInitialize(VOID);
        virtual bool ExecuteTest(UINT uTest);
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\scorrupt.cpp ===
// FILE:        scorrupt.cpp
// DESC:        stencil conformance tests
// AUTHOR:      Todd M. Frost
// COMMENTS:    tests for stencil corruption due to z clear/write operations

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "flags.h"
#include "stencil.h"

const UINT CLEAR2_ENABLED  = 0;
const UINT ZWRITE_ENABLED  = 1;
const UINT CLEAR2_DISABLED = 2;
const UINT ZWRITE_DISABLED = 3;

const UINT NCASES          = 4;

// NAME:        CStencilSCorrupt()
// DESC:        stencil s corrupt class constructor
// INPUT:       none
// OUTPUT:      none

CStencilSCorrupt::CStencilSCorrupt()
{
    m_szTestName = TEXT("Stencil corruption");
    m_szCommandKey = TEXT("SCorrupt");

    m_nStipple = (UINT) 0;
}

// NAME:        ~CStencilSCorrupt()
// DESC:        stencil s corrupt class destructor
// INPUT:       none
// OUTPUT:      none

CStencilSCorrupt::~CStencilSCorrupt()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CStencilSCorrupt::CommandLineHelp(void)
{
    CStencil::CommandLineHelp();
}

// NAME:        TestInitialize()
// DESC:        initialize test
// INPUT:       none
// OUTPUT:      uResult..result of test initialization

UINT CStencilSCorrupt::TestInitialize(VOID)
{
    UINT uResult = CStencil::TestInitialize();

    m_nStipple = (UINT) (m_dwVersion > 0x0600) ? 1 : 2;
    SetTestRange((UINT) 1, (UINT) (NCASES*NMASKS*m_nStipple*(m_dwStencilBitMask + 1)));
    return uResult;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test number
// OUTPUT:      true.....if test executed successfully
//              false....otherwise

bool CStencilSCorrupt::ExecuteTest(UINT uTest)
{
    bool bSuccess = false;
    CHAR szLabel[NCASES][19] = {
        "Clear2(), enabled",
        "Z write, enabled",
        "Clear2(), disabled",
        "Z write, disabled"
    };
    CHAR szStipple[2][13] = {
        "Non-Stippled",
        "    Stippled"
    };
    D3DVALUE dvDepth = 1.0f;
    DWORD dwCase, dwClear, dwFlags;
    DWORD dwEnable[NCASES] = {
        (DWORD) TRUE,
        (DWORD) TRUE,
        (DWORD) FALSE,
        (DWORD) FALSE
    };
    DWORD dwMasks[2];
    UINT i, j, k;

    CStencil::ExecuteTest(uTest);
    dwMasks[0] = m_dwStencilBitMask;
    dwMasks[1] = 0xffffffff;

    for (k = 1, i = 0; i < m_nStipple; i++)
        for (j = 0; j < NMASKS; j++)
            for (dwClear = (DWORD) 0; dwClear <= m_dwStencilBitMask; dwClear++)
                for (dwCase = (DWORD) 0; dwCase < NCASES; dwCase++, k++)
                    if (k == uTest)
                    {
                        sprintf(m_szBuffer, "%s:  0x%08X, 0x%08X, %s", szLabel[dwCase], dwClear, dwMasks[j], szStipple[i]);
                        BeginTestCase(m_szBuffer);
                        vStipple(((i == 0) ? false : true));
                        SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD) D3DCMP_ALWAYS);
                        SetRenderState(D3DRENDERSTATE_STENCILENABLE, (DWORD) TRUE);
                        SetRenderState(D3DRENDERSTATE_STENCILWRITEMASK, dwMasks[j]);
                        SetRenderState(D3DRENDERSTATE_STENCILFAIL, (DWORD) D3DSTENCILOP_KEEP);
                        SetRenderState(D3DRENDERSTATE_STENCILZFAIL, (DWORD) D3DSTENCILOP_KEEP);
                        SetRenderState(D3DRENDERSTATE_STENCILPASS, (DWORD) D3DSTENCILOP_KEEP);
                        dwFlags = D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER | D3DCLEAR_STENCIL;

                        if (BeginScene(dvDepth, dwClear, m_dwFailColor, dwFlags))
                        {
                            if (EndScene())
                            {
                                dwFlags = D3DCLEAR_TARGET;

                                if ((CLEAR2_ENABLED == dwCase) || (CLEAR2_DISABLED == dwCase))
                                    dwFlags |= D3DCLEAR_ZBUFFER;
                        
                                SetRenderState(D3DRENDERSTATE_STENCILENABLE, dwEnable[dwCase]);

                                if (BeginScene(dvDepth, dwClear, m_dwFailColor, dwFlags))
                                {
                                    if ((ZWRITE_ENABLED == dwCase) || (ZWRITE_DISABLED == dwCase))
                                        vFlood((D3DVALUE) 0.0, m_dwFailColor);

                                    SetRenderState(D3DRENDERSTATE_STENCILENABLE, (DWORD) TRUE);
                                    SetRenderState(D3DRENDERSTATE_STENCILFUNC, (DWORD) D3DCMP_EQUAL);
                                    SetRenderState(D3DRENDERSTATE_STENCILREF, dwClear);
                                    SetRenderState(D3DRENDERSTATE_STENCILMASK, dwMasks[j]);
                                    vFlood((D3DVALUE) 0.0, m_dwPassColor);

                                    if (EndScene())
                                    {
                                        if (bCompare())
                                            Pass();
                                        else
                                        {
                                            WriteToLog(_T("Invalid pixel detected."));
                                            Fail();
                                        }

                                        m_pDevice->Present(NULL, NULL, NULL, NULL);
                                    }
                                    else
                                    {
                                        WriteToLog(_T("Unable to end scene, blocked."));
                                        Fail();
                                    }
                                }
                                else
                                {
                                    WriteToLog(_T("Unable to begin scene, blocked."));
                                    Fail();
                                }
                            }
                            else
                            {
                                WriteToLog(_T("Unable to end scene, blocked."));
                                Fail();
                            }
                        }
                        else
                        {
                            WriteToLog(_T("Unable to begin scene, blocked."));
                            Fail();
                        }

                        bSuccess = true;
                    }

//    return bSuccess;
    return false;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=stencil
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_stncil.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\CTextureStage.cpp ===
////////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 1999.
//
// CTextureStage.cpp
//
// CTextureStage class - Tests many possible texture blend combinations
//
// History: 5/15/99 Jeff Vezina     - Created
//
////////////////////////////////////////////////////////////////////////////////////////////
//
// Test Description:
//    Tests many combinations of different stage tests with every supported texture format.
//    A stage test consists of a color op, 2 color arguments, alpha op, 2 alpha arguments,
//    and a texture depending on the arguments used.  Instead of doing a permutation with
//    every test on all stages, it limits the test permutation of lower stages to 2 (default).
//    So this results in running every test on all stage, and using common stage tests for
//    the lower stages (when testing stages above 0).
//
//    Here is an example of how the algorithm works with 4 stage tests on a card that
//    supports 2 blend stages.  This series of test would be repeated using all supported
//    texture formats (default).
//
//    Test #    Stage 0        Stage 1       Stage 2     ...    Stage 7
//       1    Stage test 1     Disabled      Disabled    ...    Disabled
//       2    Stage test 2     Disabled      Disabled    ...    Disabled
//       3    Stage test 3     Disabled      Disabled    ...    Disabled
//       4    Stage test 4     Disabled      Disabled    ...    Disabled
//       5    Stage test 1   Stage test 1    Disabled    ...    Disabled
//       6    Stage test 2   Stage test 1    Disabled    ...    Disabled
//       7    Stage test 3   Stage test 1    Disabled    ...    Disabled
//      ...       ...            ...           ...       ...      ...  
//      16    Stage test 4   Stage test 4    Disabled    ...    Disabled
//
////////////////////////////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "CStage.h"
#include "CTextureStage.h"
//#include "math.h"

//CD3DWindowFramework TheApp;
CTextureStage* g_pTextureStage;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CTextureStage*  TextureStage;
    BOOL      bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    TextureStage = new CTextureStage();
    if (!TextureStage) {
        return FALSE;
    }

    g_pTextureStage = TextureStage;

    // Initialize the scene
    if (!TextureStage->Create(pDisplay)) {
        TextureStage->Release();
        return FALSE;
    }

    bRet = TextureStage->Exhibit(pnExitCode);

    // Clean up the scene
    TextureStage->Release();

    return bRet;
}

void CTextureStage::CommandLineHelp()
{
/*
    WriteCommandLineHelp("$y-!ALLBLENDMODES\t$wRemove all blend modes from test");
    WriteCommandLineHelp("$y-!ALLTEXFORMATS\t$wRemove all texture formats from test");
    WriteCommandLineHelp("$y-!ALPHA\t\t$wTurns off alpha blending");
    WriteCommandLineHelp("$y-!SPECULAR\t\t$wTurns off specular");
    WriteCommandLineHelp("$y-PERSPECTIVE\t$wSets vertices to different depth");
    WriteCommandLineHelp("$y-FOG\t\t$wTurns on fog (detects drivers faking multitexture)");
    WriteCommandLineHelp("$y-MULTIPASS\t$wRenders using multiple passes");
    WriteCommandLineHelp("$y-STAGEMAX #\t$wTests all stages until #");
    WriteCommandLineHelp("$y-COMBINATION #\t$wCombinations to try with all texture ops");
    WriteCommandLineHelp("$y\t\t$wDefault is 2, must be within 1-%d",MAX_BLENDMODES);
    WriteCommandLineHelp("");

    // Pixel formats are not enumerated yet, so manually output all Ref pixel formats
    WriteCommandLineHelp("$y[+|!]32-0888 \t$w- Remove/Add 32 bit 888 from test");
    WriteCommandLineHelp("$y[+|!]32-8888 \t$w- Remove/Add 8 bit 8888 from test");
    WriteCommandLineHelp("$y[+|!]16-0565 \t$w- Remove/Add 8 bit 565 from test");
    WriteCommandLineHelp("$y[+|!]16-0555 \t$w- Remove/Add 8 bit 555 from test");
    WriteCommandLineHelp("$y[+|!]PAL4 \t$w- Remove/Add 4 bit PAL4 from test");
    WriteCommandLineHelp("$y[+|!]PAL8 \t$w- Remove/Add 8 bit PAL8 from test");
    WriteCommandLineHelp("$y[+|!]16-1555 \t$w- Remove/Add 16 bit 1555 from test");
    WriteCommandLineHelp("$y[+|!]16-4444 \t$w- Remove/Add 16 bit 4444 from test");
    WriteCommandLineHelp("$y[+|!]8-0332 \t$w- Remove/Add 8 bit 332 from test");
    WriteCommandLineHelp("$y[+|!]8-8000L \t$w- Remove/Add 8 bit 8 LUMINANCE from test");
    WriteCommandLineHelp("$y[+|!]16-8800L \t$w- Remove/Add 16 bit 88 LUMINANCE from test");
    WriteCommandLineHelp("$y[+|!]UYVY \t$w- Remove/Add UYVY from test");
    WriteCommandLineHelp("$y[+|!]YUY2 \t$w- Remove/Add YUY2 from test");
    WriteCommandLineHelp("$y[+|!]DXT1 \t$w- Remove/Add DXT1 from test");
    WriteCommandLineHelp("$y[+|!]DXT2 \t$w- Remove/Add DXT2 from test");
    WriteCommandLineHelp("$y[+|!]DXT3 \t$w- Remove/Add DXT3 from test");
    WriteCommandLineHelp("$y[+|!]DXT4 \t$w- Remove/Add DXT4 from test");
    WriteCommandLineHelp("$y[+|!]DXT5 \t$w- Remove/Add DXT5 from test");
    WriteCommandLineHelp("$y[+|!]16-8800B \t$w- Remove/Add 16 bit 88 BUMPDUDV from test");
    WriteCommandLineHelp("$y[+|!]16-0565B \t$w- Remove/Add 16 bit 565 BUMPDUDV from test");
    WriteCommandLineHelp("$y[+|!]24-0888B \t$w- Remove/Add 24 bit 888 BUMPDUDV from test");
    WriteCommandLineHelp("");

    for (UINT i=0;i<MAX_BLENDMODES;i++)
        WriteCommandLineHelp("$y[+|!]%s \t$w- Remove/Add %s from test",g_TextureStage.m_rgBlendModes[i].szShortName,
                                                                       g_TextureStage.m_rgBlendModes[i].szLongName);
*/
}

bool IsTextureOp(UINT i) {

    switch ((D3DTEXTUREOP)i) {

        case D3DTOP_DISABLE:
        case D3DTOP_SELECTARG1:
        case D3DTOP_SELECTARG2:
        case D3DTOP_MODULATE:
        case D3DTOP_MODULATE2X:
        case D3DTOP_MODULATE4X:
        case D3DTOP_ADD:
        case D3DTOP_ADDSIGNED:
        case D3DTOP_ADDSIGNED2X:
        case D3DTOP_SUBTRACT:
        case D3DTOP_ADDSMOOTH:
        case D3DTOP_BLENDDIFFUSEALPHA:
        case D3DTOP_BLENDTEXTUREALPHA:
        case D3DTOP_BLENDFACTORALPHA:
        case D3DTOP_BLENDTEXTUREALPHAPM:
        case D3DTOP_BLENDCURRENTALPHA:
        case D3DTOP_PREMODULATE:
        case D3DTOP_MODULATEALPHA_ADDCOLOR:
        case D3DTOP_MODULATECOLOR_ADDALPHA:
        case D3DTOP_MODULATEINVALPHA_ADDCOLOR:
        case D3DTOP_MODULATEINVCOLOR_ADDALPHA:
        case D3DTOP_BUMPENVMAP:
        case D3DTOP_BUMPENVMAPLUMINANCE:
//        case D3DTOP_DOTPRODUCT3:
//        case D3DTOP_MULTIPLYADD:
//        case D3DTOP_LERP:
            return true;
    }

    return false;
}

CTextureStage::CTextureStage()
{
    strcpy(m_rgBlendModes[D3DTOP_DISABLE-1].szShortName,"DISABLE"); strcpy(m_rgBlendModes[0].szLongName,"D3DTOP_DISABLE");
    strcpy(m_rgBlendModes[D3DTOP_SELECTARG1-1].szShortName,"SELECTARG1"); strcpy(m_rgBlendModes[1].szLongName,"D3DTOP_SELECTARG1");
    strcpy(m_rgBlendModes[D3DTOP_SELECTARG2-1].szShortName,"SELECTARG2"); strcpy(m_rgBlendModes[2].szLongName,"D3DTOP_SELECTARG2");
    strcpy(m_rgBlendModes[D3DTOP_MODULATE-1].szShortName,"MODULATE");   strcpy(m_rgBlendModes[3].szLongName,"D3DTOP_MODULATE");
    strcpy(m_rgBlendModes[D3DTOP_MODULATE2X-1].szShortName,"MODULATE2X"); strcpy(m_rgBlendModes[4].szLongName,"D3DTOP_MODULATE2X");
    strcpy(m_rgBlendModes[D3DTOP_MODULATE4X-1].szShortName,"MODULATE4X"); strcpy(m_rgBlendModes[5].szLongName,"D3DTOP_MODULATE4X");
    strcpy(m_rgBlendModes[D3DTOP_ADD-1].szShortName,"ADD");        strcpy(m_rgBlendModes[6].szLongName,"D3DTOP_ADD");
    strcpy(m_rgBlendModes[D3DTOP_ADDSIGNED-1].szShortName,"ADDSIGNED");  strcpy(m_rgBlendModes[7].szLongName,"D3DTOP_ADDSIGNED");
    strcpy(m_rgBlendModes[D3DTOP_ADDSIGNED2X-1].szShortName,"ADDSIGNED2X");strcpy(m_rgBlendModes[8].szLongName,"D3DTOP_ADDSIGNED2X");
    strcpy(m_rgBlendModes[D3DTOP_SUBTRACT-1].szShortName,"SUBTRACT");   strcpy(m_rgBlendModes[9].szLongName,"D3DTOP_SUBTRACT");
    strcpy(m_rgBlendModes[D3DTOP_ADDSMOOTH-1].szShortName,"ADDSMOOTH");  strcpy(m_rgBlendModes[10].szLongName,"D3DTOP_ADDSMOOTH");
    strcpy(m_rgBlendModes[D3DTOP_BLENDDIFFUSEALPHA-1].szShortName,"BLENDDIFFUSEALPHA");     strcpy(m_rgBlendModes[11].szLongName,"D3DTOP_BLENDDIFFUSEALPHA");
    strcpy(m_rgBlendModes[D3DTOP_BLENDTEXTUREALPHA-1].szShortName,"BLENDTEXTUREALPHA");     strcpy(m_rgBlendModes[12].szLongName,"D3DTOP_BLENDTEXTUREALPHA");
    strcpy(m_rgBlendModes[D3DTOP_BLENDFACTORALPHA-1].szShortName,"BLENDFACTORALPHA");      strcpy(m_rgBlendModes[13].szLongName,"D3DTOP_BLENDFACTORALPHA");
    strcpy(m_rgBlendModes[D3DTOP_BLENDTEXTUREALPHAPM-1].szShortName,"BLENDTEXTUREALPHAPM");   strcpy(m_rgBlendModes[14].szLongName,"D3DTOP_BLENDTEXTUREALPHAPM");
    strcpy(m_rgBlendModes[D3DTOP_BLENDCURRENTALPHA-1].szShortName,"BLENDCURRENTALPHA");     strcpy(m_rgBlendModes[15].szLongName,"D3DTOP_BLENDCURRENTALPHA");
    strcpy(m_rgBlendModes[D3DTOP_PREMODULATE-1].szShortName,"PREMODULATE");           strcpy(m_rgBlendModes[16].szLongName,"D3DTOP_PREMODULATE");
    strcpy(m_rgBlendModes[D3DTOP_MODULATEALPHA_ADDCOLOR-1].szShortName,"MODULATEALPHA_ADDCOLOR");    strcpy(m_rgBlendModes[17].szLongName,"D3DTOP_MODULATEALPHA_ADDCOLOR");
    strcpy(m_rgBlendModes[D3DTOP_MODULATECOLOR_ADDALPHA-1].szShortName,"MODULATECOLOR_ADDALPHA");    strcpy(m_rgBlendModes[18].szLongName,"D3DTOP_MODULATECOLOR_ADDALPHA");
    strcpy(m_rgBlendModes[D3DTOP_MODULATEINVALPHA_ADDCOLOR-1].szShortName,"MODULATEINVALPHA_ADDCOLOR"); strcpy(m_rgBlendModes[19].szLongName,"D3DTOP_MODULATEINVALPHA_ADDCOLOR");
    strcpy(m_rgBlendModes[D3DTOP_MODULATEINVCOLOR_ADDALPHA-1].szShortName,"MODULATEINVCOLOR_ADDALPHA"); strcpy(m_rgBlendModes[20].szLongName,"D3DTOP_MODULATEINVCOLOR_ADDALPHA");
    strcpy(m_rgBlendModes[D3DTOP_BUMPENVMAP-1].szShortName,"BUMPENVMAP");    strcpy(m_rgBlendModes[21].szLongName,"D3DTOP_BUMPENVMAP");
    strcpy(m_rgBlendModes[D3DTOP_BUMPENVMAPLUMINANCE-1].szShortName,"BUMPENVMAPLUMINANCE");   strcpy(m_rgBlendModes[22].szLongName,"D3DTOP_BUMPENVMAPLUMINANCE");
//    strcpy(m_rgBlendModes[D3DTOP_DOTPRODUCT3-1].szShortName,"DOTPRODUCT3");   strcpy(m_rgBlendModes[23].szLongName,"D3DTOP_DOTPRODUCT3");
//    strcpy(m_rgBlendModes[D3DTOP_MULTIPLYADD-1].szShortName,"MULTIPLYADD");   strcpy(m_rgBlendModes[23].szLongName,"D3DTOP_MULTIPLYADD");
//    strcpy(m_rgBlendModes[D3DTOP_LERP-1].szShortName,"LERP");   strcpy(m_rgBlendModes[23].szLongName,"D3DTOP_LERP");

    // By default, use all blend modes
    for (UINT i=0;i<MAX_BLENDMODES;i++)
        m_rgBlendModes[i].bUsed=IsTextureOp(i+1);

    // By default, use all texture formats
    for (i=0;i<MAX_D3D_TEXTURES;i++)
        m_rgTexFormats[i].bUsed=true;

    m_uTexFormatMax=0;
    m_uStageListMax=0;
    m_cStageMax=0;
    m_bMultiPass=false;
    m_bPassValidate=true;
    m_uLastFailedStage=0;

    m_bSpecular=true;
    m_bAlpha=true;
    m_bFog=false;

    // Reset all stages to DISABLED
    for (i=0;i<8;i++)
        m_rgpStage[i]=&m_StageList;

    m_szTestName=TEXT("TextureStage");
    m_szCommandKey=TEXT("Range");
}

CTextureStage::~CTextureStage()
{
}

bool CTextureStage::SetDefaultMaterials(void)
{
    return true;
}

bool CTextureStage::SetDefaultLights(void)
{
    return true;
}

bool CTextureStage::SetDefaultLightStates(void)
{
    return true;
}

bool CTextureStage::SetDefaultRenderStates(void)
{
//    DEVICEDESC SrcDesc=m_pAdapter->Devices[m_pMode->nSrcDevice].Desc;
    float flStart=0.6f;
    float flEnd=1.0f;
	int i;

//    SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE,(DWORD)TRUE);
    SetRenderState(D3DRENDERSTATE_TEXTUREFACTOR,(DWORD)0xAA005500);
    SetRenderState(D3DRENDERSTATE_LIGHTING,(DWORD)FALSE);
    SetRenderState(D3DRENDERSTATE_AMBIENT,(DWORD)0xFF000000);
    SetRenderState(D3DRENDERSTATE_DITHERENABLE,(DWORD)TRUE);

    if (KeySet("!SPECULAR"))
        m_bSpecular=false;
    else if (!(m_d3dcaps.ShadeCaps&D3DPSHADECAPS_SPECULARGOURAUDRGB))
    {
//        if (!(m_d3dcaps.ShadeCaps&D3DPSHADECAPS_SPECULARFLATRGB))
//        {
//            m_bSpecular=false;
//            WriteToLog("Gouraud and flat specular not supported, disabling specular");
//        }
//        else                        // Flat is supported, make all speculars the same
        {
            WriteToLog("Gouraud specular not supported, using flat specular");
            for (i=1;i<m_cVertexMax;i++)
                m_rgTLVertex[i].specular=m_rgTLVertex[0].specular;
        }
    }

    if (KeySet("FOG"))
    {
        if (m_d3dcaps.ShadeCaps&D3DPSHADECAPS_FOGGOURAUD)
            m_bFog=true;
        else
            WriteToLog("Gouraud fog not supported, disabling fog");
    }

    if (KeySet("!ALPHA"))
        m_bAlpha=false;
    else if (!(m_d3dcaps.ShadeCaps&D3DPSHADECAPS_ALPHAGOURAUDBLEND))
    {
//        if (!(m_d3dcaps.ShadeCaps&D3DPSHADECAPS_ALPHAFLATBLEND))
//        {
//            m_bAlpha=false;
//            WriteToLog("Gouraud and flat alpha blending not supported, disabling alpha blending");
//        }
//        else                        // Flat is supported, make all alphas the same
        {
            WriteToLog("Gouraud alpha blending not supported, using flat alpha blending");
            for (i=1;i<m_cVertexMax;i++)
            {
                m_rgTLVertex[i].specular=(m_rgTLVertex[0].specular&0xFF000000)|(m_rgTLVertex[i].specular&~0xFF000000);
                m_rgTLVertex[i].color=(m_rgTLVertex[0].color&0xFF000000)|(m_rgTLVertex[i].color&~0xFF000000);
            }
        }
    }

    if (m_bSpecular)
        SetRenderState(D3DRENDERSTATE_SPECULARENABLE,(DWORD)TRUE);
    else
        SetRenderState(D3DRENDERSTATE_SPECULARENABLE,(DWORD)FALSE);

    if (m_bAlpha)
    {
        SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,(DWORD)TRUE);
        SetRenderState(D3DRENDERSTATE_SRCBLEND,(DWORD)D3DBLEND_SRCALPHA);
        SetRenderState(D3DRENDERSTATE_DESTBLEND,(DWORD)D3DBLEND_INVSRCALPHA);
    }
	else
        SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,(DWORD)FALSE);

    if (m_bFog)
    {
        SetRenderState(D3DRENDERSTATE_FOGENABLE,(DWORD)TRUE);
#ifndef UNDER_XBOX
        SetRenderState(D3DRENDERSTATE_FOGTABLEMODE,(DWORD)D3DFOG_NONE);
        SetRenderState(D3DRENDERSTATE_FOGVERTEXMODE,(DWORD)D3DFOG_LINEAR);
#else
        SetRenderState(D3DRENDERSTATE_FOGTABLEMODE,(DWORD)D3DFOG_LINEAR);
#endif // UNDER_XBOX
        SetRenderState(D3DRENDERSTATE_FOGSTART,*((DWORD*)&flStart));
        SetRenderState(D3DRENDERSTATE_FOGEND,*((DWORD*)&flEnd));
        SetRenderState(D3DRENDERSTATE_FOGCOLOR,(DWORD)0xFFFFFFFF);
    }
	else
        SetRenderState(D3DRENDERSTATE_FOGENABLE,(DWORD)FALSE);

    return true;
}

UINT CTextureStage::TestInitialize(void)
{
    int i;
    char szStr[500];
//    DEVICEDESC SrcDesc=m_pAdapter->Devices[m_pMode->nSrcDevice].Desc;

    // Create top view of a pyramid, using first 5 vertices for fan, next 3 for list to cover special case
    m_cVertexMax=0;
    m_rgTLVertex[m_cVertexMax++]=cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 160.0f,(float)m_vpTest.Y + 140.0f,0.9f),1.0f/0.9f,0xFF4444FF,0xFF333333,0.5f,0.5f);
    m_rgTLVertex[m_cVertexMax++]=cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,(float)m_vpTest.Y +   9.5f,0.3f),1.0f/0.3f,0x55222222,0x55999999,0.0f,0.0f);
    m_rgTLVertex[m_cVertexMax++]=cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 309.5f,(float)m_vpTest.Y +   9.5f,0.3f),1.0f/0.3f,0x55222222,0x55999999,1.0f,0.0f);
    m_rgTLVertex[m_cVertexMax++]=cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 309.5f,(float)m_vpTest.Y + 269.5f,0.3f),1.0f/0.3f,0x55222222,0x55999999,1.0f,1.0f);
    m_rgTLVertex[m_cVertexMax++]=cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,(float)m_vpTest.Y + 269.5f,0.3f),1.0f/0.3f,0x55222222,0x55999999,0.0f,1.0f);

    m_rgTLVertex[m_cVertexMax++]=cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 160.0f,(float)m_vpTest.Y + 140.0f,0.9f),1.0f/0.9f,0xFF4444FF,0xFF333333,0.5f,0.5f);
    m_rgTLVertex[m_cVertexMax++]=cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,(float)m_vpTest.Y + 269.5f,0.3f),1.0f/0.3f,0x55222222,0x55999999,0.0f,1.0f);
    m_rgTLVertex[m_cVertexMax++]=cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   9.5f,(float)m_vpTest.Y +   9.5f,0.3f),1.0f/0.3f,0x55222222,0x55999999,0.0f,0.0f);

    // Create texture format short and long names
    CreateTexFormatNames();

    // Make sure we are on DX6
    if (m_dwVersion<0x0600)
    {
        WriteToLog("This test requires Dx6.\n");
        SetTestRange(1,1);
        return D3DTESTINIT_SKIPALL;
    }

    // Run ONLY 32bit 8888 format when src device is ref or rgb, to shorten test
/*
    if ((m_pAdapter->Devices[m_pMode->nSrcDevice].Guid==IID_IDirect3DRefDevice) ||
        (m_pAdapter->Devices[m_pMode->nSrcDevice].Guid==IID_IDirect3DRGBDevice))
    {
        for (i=0;i<m_uCommonTextureFormats;i++)
            m_rgTexFormats[i].bUsed=false;

        for (i=0;i<m_uCommonTextureFormats;i++)
        {
            if (strcmp(m_rgTexFormats[i].szShortName,"32-8888")==0)
                m_rgTexFormats[i].bUsed=true;
        }
    }
*/
    if (!KeySet("PERSPECTIVE") && !m_bFog)
    {
        for (i=1;i<m_cVertexMax;i++)
        {
            m_rgTLVertex[i].sz=m_rgTLVertex[0].sz;
            m_rgTLVertex[i].rhw=m_rgTLVertex[0].rhw;
        }
    }

    ReadInteger("STAGEMAX",-1,&m_cStageMax);
	if (m_cStageMax>8)
		m_cStageMax=8;
    if (m_cStageMax==-1)
    {
        // Make sure card supports at least 1 blend stage
#ifndef UNDER_XBOX
        m_cStageMax=m_d3dcaps.MaxTextureBlendStages;
        if (m_cStageMax<1)
        {
            WriteToLog("Driver does not support 1 blend stage.\n");
            SetTestRange(1,1);
            return D3DTESTINIT_SKIPALL;
        }
#else
        m_cStageMax = D3DTSS_MAXSTAGES;
#endif
    }

    if (KeySet("!ALLBLENDMODES"))
    {
        for (i=0;i<MAX_BLENDMODES;i++)
            m_rgBlendModes[i].bUsed=false;
    }

    if (KeySet("!ALLTEXFORMATS"))
    {
        for (i=0;i<(int)m_uCommonTextureFormats;i++)
            m_rgTexFormats[i].bUsed=false;
    }

    if (KeySet("MULTIPASS"))
        m_bMultiPass=true;

    // Check if COMBINATION was used, default is 2, min is 1, max is MAX_BLENDMODES
    ReadInteger("COMBINATION",2,&m_cCombinationMax);
    if (m_cCombinationMax<1)
        m_cCombinationMax=1;
    if (m_cCombinationMax>MAX_BLENDMODES)
        m_cCombinationMax=MAX_BLENDMODES;

    // Find out which texture formats will be used
    for (UINT iFormat=0;iFormat<m_uCommonTextureFormats;iFormat++)
    {
        // Check if removing a texture format
        strcpy(szStr,"!");
        strcat(szStr,m_rgTexFormats[iFormat].szShortName);
        if (KeySet(szStr))
            m_rgTexFormats[iFormat].bUsed=false;

        // Check if adding a texture format
        strcpy(szStr,"+");
        strcat(szStr,m_rgTexFormats[iFormat].szShortName);
        if (KeySet(szStr))
            m_rgTexFormats[iFormat].bUsed=true;
    }

    // Find out which texture blend modes will be used
    for (UINT iBlend=0;iBlend<MAX_BLENDMODES;iBlend++)
    {
        // Check if removing a texture blend mode, or remove it if not supported
        strcpy(szStr,"!");
        strcat(szStr,m_rgBlendModes[iBlend].szShortName);
        if (KeySet(szStr) || !(m_d3dcaps.TextureOpCaps&(DWORD)pow(2,iBlend)))
            m_rgBlendModes[iBlend].bUsed=false;

        // Check if adding a texture blend mode and check if it is supported
        strcpy(szStr,"+");
        strcat(szStr,m_rgBlendModes[iBlend].szShortName);
        if (KeySet(szStr) && (m_d3dcaps.TextureOpCaps&(DWORD)pow(2,iBlend)))
            m_rgBlendModes[iBlend].bUsed=true;
    }

    // Load all stages that will be used
    if (!LoadStages())
    {
        WriteToLog("Driver does not support enough blend stages.  Use a lower COMBINATION.\n");
        SetTestRange(1,1);
        return D3DTESTINIT_SKIPALL;
    }

    // Find out the # of tests per texture format
    m_uTestMax=0;
    for (i=0;i<m_cStageMax;i++)
        m_uTestMax+=m_uStageListMax*(UINT)pow(m_cCombinationMax,i);

    // Find out the # of texture formats used
    for (i=0;i<(int)m_uCommonTextureFormats;i++)
        if (m_rgTexFormats[i].bUsed)
            m_uTexFormatMax++;

    // Set Total # of tests
    m_uTestMax*=m_uTexFormatMax;
    SetTestRange(1,m_uTestMax);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

    return D3DTESTINIT_RUN;
}

bool CTextureStage::ExecuteTest(UINT uTestNum)
{
    UINT iStageList;
    UINT uTest=uTestNum-1;
    UINT uTexFormat;
    HRESULT hRes=NULL;
    DWORD dwPasses=0;
#if 0
    DEVICEDESC SrcDesc=m_pAdapter->Devices[m_pMode->nSrcDevice].Desc;
#endif
    char szBuffer[256];

#ifdef DEMO_HACK // The Win32 NV20 driver doesn't correctly handle D3DTA_SPECULAR as an alpha argument, causing verification to incorrectly report failure
    m_pDisplay->EnableFrameVerification(TRUE);
#endif

    // Find out which texture format # we are at
    uTexFormat=uTest/(m_uTestMax/m_uTexFormatMax);
    uTest-=uTexFormat*(m_uTestMax/m_uTexFormatMax);

    // Find the texture format that will be used
    for (UINT i=0;i<m_uCommonTextureFormats;i++)
    {
        if (m_rgTexFormats[i].bUsed)
        {
            if (uTexFormat==0)
            {
                nTextureFormat=i;
                break;
            }
            uTexFormat--;
        }
    }

    // Reset all stages to DISABLED
    for (int iStage=0;iStage<m_cStageMax;iStage++)
    {
        m_rgpStage[iStage]=&m_StageList;
        m_rgpStage[iStage]->SetStates(iStage);
    }

    // Find out which stage will be used and fill m_rgpStage[iStage]
    for (iStage=0;iStage<m_cStageMax;iStage++)
    {
        // Which stage are we testing?
        if (uTest>=(m_uStageListMax*(UINT)pow(m_cCombinationMax,iStage)))
        {
            uTest-=m_uStageListMax*(UINT)pow(m_cCombinationMax,iStage);
        }
        else
        {
            // Find out which CStage will be used
            iStageList=uTest/(UINT)pow(m_cCombinationMax,iStage)+1; // (+1) skip disabled test
            m_rgpStage[iStage]=m_StageList.GetStageList(iStageList);
            uTest=uTest%(UINT)pow(m_cCombinationMax,iStage);

            for (UINT i=0;i<(UINT)iStage;i++)
            {
                // For the previous stages, cycle thru the first m_cCombinationMax stages
                iStageList=(uTest%(UINT)pow(m_cCombinationMax,i+1))/(UINT)pow(m_cCombinationMax,i)+1; // (+1) skip disabled test
                m_rgpStage[i]=m_StageList.GetStageList(iStageList);
            }
            break;
        }
    }

    sprintf(szBuffer,"Texture blending with %d stage(s)",iStage+1);
//    BeginTestCase(szBuffer);
    WriteStatus("$gTexture format","$y%s",m_rgTexFormats[nTextureFormat].szLongName);

    m_bPassValidate=true;

    // Load textures, set states, and validate device
    for (iStage=0;iStage<m_cStageMax;iStage++)
    {
        m_uLastFailedStage=iStage;
        m_rgpStage[iStage]->WriteToStatus(iStage);
        m_rgpStage[iStage]->LoadTexture();
        if (m_bMultiPass)
            m_rgpStage[iStage]->SetStates(0);
        else
            m_rgpStage[iStage]->SetStates(iStage);

#if 0
        hRes=ValidateDevice(&dwPasses);
        if (FAILED(hRes))
        {
#if 0
            if ((hRes==D3DERR_UNSUPPORTEDCOLOROPERATION) &&
                (SrcDesc.dwTextureOpCaps&(DWORD)pow(2,m_rgpStage[iStage]->m_dwColorOp-1)) &&
                ((iStage==0) || (m_bMultiPass)))
            {
                // Error with ValidateDevice, should be supported
                WriteToLog("ValidateDevice should not have failed! On stage 0 and color op is supported in the caps.\n");
                m_bPassValidate=false;
                return true;                         // Do not skip the test so that it fails
            }
            else 
#endif
#if 0   // I don't know what brain death was going on here
        // but if the device says it cannot use the specified texture
        // format, then it's not a failure.
            if (hRes==D3DERR_WRONGTEXTUREFORMAT)
            {
                // Error with ValidateDevice or driver, texture format should be supported
                WriteToLog("ValidateDevice should not have failed! Texture format was enumerated.\n");
                m_bPassValidate=false;
                return true;                         // Do not skip the test so that it fails
            }
            else
#endif
            {
//                SkipTests(1);

                // Log test info
//                WriteToLog("Texture format: %s\n",m_rgTexFormats[m_pD3DMode->nTextureFormat].szLongName);
//                for (UINT i=0;i<=iStage;i++)
//                    m_rgpStage[i]->WriteToLog(i);

                return false;                        // Skip the test
            }
        }

        if (dwPasses>1)
        {
            WriteToLog("Skipping.. Test requires more than one pass\n");
            return false;
        }
#else
        dwPasses = 1;
#endif

#ifdef UNDER_XBOX
        // Using a disable texture op following a premodulate op is unsupported on Xbox
        if (iStage) {
            if (m_rgpStage[iStage-1]->m_dwColorOp == D3DTOP_PREMODULATE && m_rgpStage[iStage]->m_dwColorOp == D3DTOP_DISABLE) {
                m_pDevice->SetTextureStageState(iStage, D3DTSS_COLOROP, D3DTOP_SELECTARG1);
                m_pDevice->SetTextureStageState(iStage, D3DTSS_COLORARG1, D3DTA_DIFFUSE);
            }
            if (m_rgpStage[iStage-1]->m_dwAlphaOp == D3DTOP_PREMODULATE && m_rgpStage[iStage]->m_dwAlphaOp == D3DTOP_DISABLE) {
                m_pDevice->SetTextureStageState(iStage, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);
                m_pDevice->SetTextureStageState(iStage, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);
            }
        }
#endif
    }

    BeginTestCase(szBuffer);

    return true;
}

void CTextureStage::SceneRefresh()
{
    if (BeginScene())
    {
        Clear(0x00000000);

        if (m_bPassValidate)
        {
            if (m_bMultiPass)
            {
                for (int iStage=0;iStage<m_cStageMax;iStage++)
                {
                    if ((m_rgpStage[iStage]->m_dwColorOp!=D3DTOP_DISABLE) ||
                        (m_rgpStage[iStage]->m_dwAlphaOp!=D3DTOP_DISABLE))
                    {
                        m_rgpStage[iStage]->SetStates(0);
                        RenderPrimitive(D3DPT_TRIANGLEFAN,D3DFVF_TLVERTEX,m_rgTLVertex,5,NULL,0,0);
                        RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,&m_rgTLVertex[5],3,NULL,0,0);
                    }
                }
            }
            else
            {
                RenderPrimitive(D3DPT_TRIANGLEFAN,D3DFVF_TLVERTEX,m_rgTLVertex,5,NULL,0,0);
                RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,&m_rgTLVertex[5],3,NULL,0,0);
            }
        }

        EndScene();
    }
}

bool CTextureStage::TestTerminate()
{
#ifdef DEMO_HACK // The Win32 NV20 driver doesn't correctly handle D3DTA_SPECULAR as an alpha argument, causing verification to incorrectly report failure
    m_pDisplay->EnableFrameVerification(TRUE);
#endif
    return true;
}

bool CTextureStage::ProcessFrame(void)
{
    char    szBuffer[80];
    static  int nPass = 0;
    static  int nFail = 0;
    bool    bResult;

     // Use the standard 15%
    if (m_bPassValidate)
        bResult=GetCompareResult(0.15f, 0.85f, 0);
    else
        bResult=false;

    // Tell the logfile how the compare went
    if (bResult)
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? nFail++ : nFail--;
        sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();

        // Log test info
        WriteToLog("Texture format: %s\n",m_rgTexFormats[nTextureFormat].szLongName);
        for (UINT iStage=0;iStage<=m_uLastFailedStage;iStage++)
            m_rgpStage[iStage]->WriteToLog(iStage);
    }

//    for (UINT iStage=0;iStage<=m_uLastFailedStage;iStage++)
//        m_rgpStage[iStage]->WriteToStatus(iStage);

    WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

BOOL CTextureStage::LoadStages()
// Adds CStages into linked list
// NOTE: First node of linked list has ColorOp=DISABLED and AlphaOp=DISABLED
//       The first m_cCombinationMax nodes in the list will be repeated in all possible
//        combinations for every stage.
{
    CStage *pStage;
    DWORD rgdwColor1[4]={0x992222FF,0x99FF2222,0x9922FF22,0x99FF22FF};
    DWORD rgdwColor2[4]={0x77AAAA22,0x7722AAAA,0x77AA22AA,0x77222222};
    DWORD rgdwColor3[4]={0xFFAA2222,0x22AA2222,0xFF2222AA,0x222222AA};
    DWORD rgdwColor4[4]={0xFFFF2222,0x00FF2222,0xFF2222FF,0x002222FF};
    DWORD rgdwColor5[4]={0x0000FF00,0x0000FF00,0x0000FF00,0x0000FF00};
    DWORD rgdwColor6[4]={0xD00000FF,0xE000FFFF,0xF0FFFF00,0xFFFF0000};

    if (m_rgBlendModes[D3DTOP_ADDSIGNED-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_ADDSIGNED;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_ADDSIGNED;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor6,sizeof(rgdwColor6));
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATE-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_DIFFUSE;
            pStage->m_dwColorOp=D3DTOP_MODULATE;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_MODULATE;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATE-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_MODULATE;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_MODULATE;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor1,sizeof(rgdwColor1));
        }
    }

    if (m_rgBlendModes[D3DTOP_PREMODULATE-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_PREMODULATE;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_PREMODULATE;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor1,sizeof(rgdwColor4));
        }
    }

    if (m_rgBlendModes[D3DTOP_SELECTARG1-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_DIFFUSE;
            pStage->m_dwColorOp=D3DTOP_SELECTARG1;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG2;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor1,sizeof(rgdwColor1));
        }
    }

    if (m_rgBlendModes[D3DTOP_ADD-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_ADD;
            pStage->m_dwColorArg2=D3DTA_SPECULAR;
            pStage->m_dwAlphaArg1=D3DTA_SPECULAR;
            pStage->m_dwAlphaOp=D3DTOP_ADD;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor3,sizeof(rgdwColor3));
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATE-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_MODULATE;
            pStage->m_dwColorArg2=D3DTA_DIFFUSE;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG1;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor3,sizeof(rgdwColor3));
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATE2X-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_MODULATE2X;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG1;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor2,sizeof(rgdwColor2));
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATE4X-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_MODULATE4X;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG1;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor2,sizeof(rgdwColor2));
        }
    }

    if (m_rgBlendModes[D3DTOP_ADD-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TFACTOR;
            pStage->m_dwColorOp=D3DTOP_ADD;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TFACTOR;
            pStage->m_dwAlphaOp=D3DTOP_MODULATE;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor3,sizeof(rgdwColor3));
        }
    }

    if (m_rgBlendModes[D3DTOP_ADDSIGNED-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_ADDSIGNED;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_ADDSIGNED;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor2,sizeof(rgdwColor2));
        }
    }

    if (m_rgBlendModes[D3DTOP_ADDSIGNED2X-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_ADDSIGNED2X;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG1;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor2,sizeof(rgdwColor2));
        }
    }

    if (m_rgBlendModes[D3DTOP_SUBTRACT-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_SUBTRACT;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_ADD;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor2,sizeof(rgdwColor2));
        }
    }

    if (m_rgBlendModes[D3DTOP_ADDSMOOTH-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_ADDSMOOTH;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG1;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor2,sizeof(rgdwColor2));
        }
    }

    if (m_rgBlendModes[D3DTOP_BLENDDIFFUSEALPHA-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_BLENDDIFFUSEALPHA;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_ADD;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor3,sizeof(rgdwColor3));
        }
    }

    if (m_rgBlendModes[D3DTOP_BLENDTEXTUREALPHA-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_BLENDTEXTUREALPHA;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_BLENDTEXTUREALPHA;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor4,sizeof(rgdwColor4));
        }
    }

    if (m_rgBlendModes[D3DTOP_BLENDTEXTUREALPHA-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_BLENDTEXTUREALPHA;
            pStage->m_dwColorArg2=D3DTA_TFACTOR;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_BLENDTEXTUREALPHA;
            pStage->m_dwAlphaArg2=D3DTA_TFACTOR;
            memcpy(pStage->m_rgdwColor,rgdwColor4,sizeof(rgdwColor4));
        }
    }

    if (m_rgBlendModes[D3DTOP_BLENDFACTORALPHA-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_BLENDFACTORALPHA;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_ADD;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor4,sizeof(rgdwColor4));
        }
    }

    if (m_rgBlendModes[D3DTOP_BLENDTEXTUREALPHAPM-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_DIFFUSE;
            pStage->m_dwColorOp=D3DTOP_BLENDTEXTUREALPHAPM;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_ADD;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor4,sizeof(rgdwColor4));
        }
    }

    if (m_rgBlendModes[D3DTOP_BLENDCURRENTALPHA-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_BLENDCURRENTALPHA;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_MODULATE;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor5,sizeof(rgdwColor5));
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATEALPHA_ADDCOLOR-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_MODULATEALPHA_ADDCOLOR;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_MODULATE;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor3,sizeof(rgdwColor3));
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATECOLOR_ADDALPHA-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_MODULATECOLOR_ADDALPHA;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_MODULATE;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor3,sizeof(rgdwColor3));
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATEINVALPHA_ADDCOLOR-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_MODULATEINVALPHA_ADDCOLOR;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TEXTURE;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG1;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor6,sizeof(rgdwColor6));
        }
    }

    if (m_rgBlendModes[D3DTOP_MODULATEINVCOLOR_ADDALPHA-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TEXTURE;
            pStage->m_dwColorOp=D3DTOP_MODULATEINVCOLOR_ADDALPHA;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_DIFFUSE;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG1;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor5,sizeof(rgdwColor5));
        }
    }

    if (m_rgBlendModes[D3DTOP_SELECTARG1-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorArg1=D3DTA_TFACTOR;
            pStage->m_dwColorOp=D3DTOP_SELECTARG1;
            pStage->m_dwColorArg2=D3DTA_CURRENT;
            pStage->m_dwAlphaArg1=D3DTA_TFACTOR;
            pStage->m_dwAlphaOp=D3DTOP_SELECTARG1;
            pStage->m_dwAlphaArg2=D3DTA_CURRENT;
            memcpy(pStage->m_rgdwColor,rgdwColor3,sizeof(rgdwColor3));
        }
    }

    if (m_rgBlendModes[D3DTOP_DISABLE-1].bUsed)
    {
        pStage=m_StageList.Create();
        if (pStage!=NULL)
        {
            pStage->m_dwColorOp=D3DTOP_DISABLE;
            pStage->m_dwAlphaOp=D3DTOP_DISABLE;
            memcpy(pStage->m_rgdwColor,rgdwColor5,sizeof(rgdwColor5));
        }
    }

    m_uStageListMax=m_StageList.Count()-1;          // Don't count DISABLED CStage (fist CStage)
    if (m_uStageListMax<(UINT)m_cCombinationMax)          // Combination max must be > list max
        return false;

    return true;
}

void CTextureStage::CreateTexFormatNames()
// Creates texture format short name (code name), and long name
{
//    PIXELFORMAT *pDDPF;
    DWORD dwAlphaBitCount = 0;
    DWORD dwRedBitCount   = 0;
    DWORD dwGreenBitCount = 0;
    DWORD dwBlueBitCount  = 0;
    DWORD dwMask;
    char szStr[50];
    ARGBPIXELDESC pixd;

    for (UINT i=0;i<m_uCommonTextureFormats;i++)
    {
//        pDDPF=&m_pCommonTextureFormats[i].ddpfPixelFormat;

        GetARGBPixelDesc(m_fmtCommon[i], &pixd);

        // Count number of bits for each color component
        dwAlphaBitCount=0;
        dwRedBitCount=0;
        dwGreenBitCount=0;
        dwBlueBitCount=0;
        for (dwMask = pixd.dwAMask; dwMask; dwMask>>=1)
            dwAlphaBitCount += (dwMask & 0x1);
        for (dwMask = pixd.dwRMask; dwMask; dwMask>>=1)
            dwRedBitCount += (dwMask & 0x1);
        for (dwMask = pixd.dwGMask; dwMask; dwMask>>=1)
            dwGreenBitCount += (dwMask & 0x1);
        for (dwMask = pixd.dwBMask; dwMask; dwMask>>=1)
            dwBlueBitCount += (dwMask & 0x1);

//        if (pDDPF->dwFourCC==MAKEFOURCC('U','Y','V','Y'))
        if (m_fmtCommon[i] == D3DFMT_UYVY)
        {
            strcpy(m_rgTexFormats[i].szShortName,"UYVY");
            strcpy(m_rgTexFormats[i].szLongName,"UYVY");
        }
//        else if (pDDPF->dwFourCC==MAKEFOURCC('Y','U','Y','2'))
        else if (m_fmtCommon[i] == D3DFMT_YUY2)
        {
            strcpy(m_rgTexFormats[i].szShortName,"YUY2");
            strcpy(m_rgTexFormats[i].szLongName,"YUY2");
        }
//        else if (pDDPF->dwFourCC==MAKEFOURCC('D','X','T','1'))
        else if (m_fmtCommon[i] == D3DFMT_DXT1)
        {
            strcpy(m_rgTexFormats[i].szShortName,"DXT1");
            strcpy(m_rgTexFormats[i].szLongName,"DXT1");
        }
//        else if (pDDPF->dwFourCC==MAKEFOURCC('D','X','T','2'))
        else if (m_fmtCommon[i] == D3DFMT_DXT2)
        {
            strcpy(m_rgTexFormats[i].szShortName,"DXT2");
            strcpy(m_rgTexFormats[i].szLongName,"DXT2");
        }
//        else if (pDDPF->dwFourCC==MAKEFOURCC('D','X','T','3'))
        else if (m_fmtCommon[i] == D3DFMT_DXT3)
        {
            strcpy(m_rgTexFormats[i].szShortName,"DXT3");
            strcpy(m_rgTexFormats[i].szLongName,"DXT3");
        }
//        else if (pDDPF->dwFourCC==MAKEFOURCC('D','X','T','4'))
        else if (m_fmtCommon[i] == D3DFMT_DXT4)
        {
            strcpy(m_rgTexFormats[i].szShortName,"DXT4");
            strcpy(m_rgTexFormats[i].szLongName,"DXT4");
        }
//        else if (pDDPF->dwFourCC==MAKEFOURCC('D','X','T','5'))
        else if (m_fmtCommon[i] == D3DFMT_DXT5)
        {
            strcpy(m_rgTexFormats[i].szShortName,"DXT5");
            strcpy(m_rgTexFormats[i].szLongName,"DXT5");
        }
//        else if (pDDPF->dwFlags&DDPF_PALETTEINDEXED4)
//        {
//            strcpy(m_rgTexFormats[i].szShortName,"PAL4");
//            strcpy(m_rgTexFormats[i].szLongName,"4 bit PAL4");
//        }
//        else if (pDDPF->dwFlags&DDPF_PALETTEINDEXED8)
        else if (m_fmtCommon[i] == D3DFMT_P8)
        {
            strcpy(m_rgTexFormats[i].szShortName,"PAL8");
            strcpy(m_rgTexFormats[i].szLongName,"8 bit PAL8");
        }
        else
        {
//            _itoa(pDDPF->dwRGBBitCount,szStr,10);
            _itoa(FormatToBitDepth(m_fmtCommon[i]),szStr,10);
            strcpy(m_rgTexFormats[i].szShortName,szStr);
            strcpy(m_rgTexFormats[i].szLongName,szStr);
            strcat(m_rgTexFormats[i].szShortName,"-");
            strcat(m_rgTexFormats[i].szLongName," bit ");
            _itoa(dwAlphaBitCount,szStr,10);
            strcat(m_rgTexFormats[i].szShortName,szStr);
            strcat(m_rgTexFormats[i].szLongName,szStr);
            _itoa(dwRedBitCount,szStr,10);
            strcat(m_rgTexFormats[i].szShortName,szStr);
            strcat(m_rgTexFormats[i].szLongName,szStr);
            _itoa(dwGreenBitCount,szStr,10);
            strcat(m_rgTexFormats[i].szShortName,szStr);
            strcat(m_rgTexFormats[i].szLongName,szStr);
            _itoa(dwBlueBitCount,szStr,10);
            strcat(m_rgTexFormats[i].szShortName,szStr);
            strcat(m_rgTexFormats[i].szLongName,szStr);

//            if (pDDPF->dwFlags&DDPF_BUMPDUDV)
            switch (m_fmtCommon[i]) {
                case D3DFMT_V8U8:
                case D3DFMT_L6V5U5:
                case D3DFMT_X8L8V8U8:
                case D3DFMT_Q8W8V8U8:
                case D3DFMT_V16U16:
                case D3DFMT_W11V11U10:
                    strcat(m_rgTexFormats[i].szShortName,"B");
                    strcat(m_rgTexFormats[i].szLongName," BUMPDUDV");
            }
//            if (pDDPF->dwFlags&DDPF_LUMINANCE)
            switch (m_fmtCommon[i]) {
                case D3DFMT_L6V5U5:
                case D3DFMT_X8L8V8U8:
                case D3DFMT_L8:
                case D3DFMT_A8L8:
                case D3DFMT_A4L4:
                    strcat(m_rgTexFormats[i].szShortName,"L");
                    strcat(m_rgTexFormats[i].szLongName," LUMINANCE");
            }
        }
    }
}

CDisplay* CTextureStage::GetDisplay(void) {

    return m_pDisplay;
}

HRESULT CTextureStage::ValidateDevice(DWORD *pdwPasses)
{
//    HRESULT hRes=NULL;

    // Check appropriate ref device
//    if (m_dwVersion >= 0x0800)
        return m_pDevice->ValidateDevice( pdwPasses );
//    else if (g_TextureStage.m_pRefDevice7!=NULL)
//        hRes=g_TextureStage.m_pRefDevice7->ValidateDevice(pdwPasses);
//    else if (g_TextureStage.m_pRefDevice3!=NULL)
//        hRes=g_TextureStage.m_pRefDevice3->ValidateDevice(pdwPasses);
/*
    if (FAILED(hRes))
    {
#if 0
        switch (hRes)
        {
            case D3DERR_CONFLICTINGTEXTUREFILTER:   g_TextureStage.WriteToLog("Validate Ref: Conflicting texture filter\n"); break;
            case D3DERR_CONFLICTINGTEXTUREPALETTE:  g_TextureStage.WriteToLog("Validate Ref: Conflicting texture palette\n"); break;
            case D3DERR_TOOMANYOPERATIONS:          g_TextureStage.WriteToLog("Validate Ref: Too many operations\n"); break;
            case D3DERR_UNSUPPORTEDALPHAARG:        g_TextureStage.WriteToLog("Validate Ref: Unsupported alpha arg\n"); break;
            case D3DERR_UNSUPPORTEDALPHAOPERATION:  g_TextureStage.WriteToLog("Validate Ref: Unsupported alpha op\n"); break;
            case D3DERR_UNSUPPORTEDCOLORARG:        g_TextureStage.WriteToLog("Validate Ref: Unsupported color arg\n"); break;
            case D3DERR_UNSUPPORTEDCOLOROPERATION:  g_TextureStage.WriteToLog("Validate Ref: Unsupported color op\n"); break;
            case D3DERR_UNSUPPORTEDFACTORVALUE:     g_TextureStage.WriteToLog("Validate Ref: Unsupported factor value\n"); break;
            case D3DERR_UNSUPPORTEDTEXTUREFILTER:   g_TextureStage.WriteToLog("Validate Ref: Unsupported texture filter\n"); break;
            case D3DERR_WRONGTEXTUREFORMAT:         g_TextureStage.WriteToLog("Validate Ref: Wrong texture format\n"); break;
        }
#endif
        return hRes;
    }

    // Check appropriate src device
    if (g_TextureStage.m_pSrcDevice7!=NULL)
        hRes=g_TextureStage.m_pSrcDevice7->ValidateDevice(pdwPasses);
    else if (g_TextureStage.m_pSrcDevice3!=NULL)
        hRes=g_TextureStage.m_pSrcDevice3->ValidateDevice(pdwPasses);

    if (FAILED(hRes))
    {
#if 0
        switch (hRes)
        {
            case D3DERR_CONFLICTINGTEXTUREFILTER:  g_TextureStage.WriteToLog("Validate Src: Conflicting texture filter\n"); break;
            case D3DERR_CONFLICTINGTEXTUREPALETTE: g_TextureStage.WriteToLog("Validate Src: Conflicting texture palette\n"); break;
            case D3DERR_TOOMANYOPERATIONS:         g_TextureStage.WriteToLog("Validate Src: Too many operations\n"); break;
            case D3DERR_UNSUPPORTEDALPHAARG:       g_TextureStage.WriteToLog("Validate Src: Unsupported alpha arg\n"); break;
            case D3DERR_UNSUPPORTEDALPHAOPERATION: g_TextureStage.WriteToLog("Validate Src: Unsupported alpha op\n"); break;
            case D3DERR_UNSUPPORTEDCOLORARG:       g_TextureStage.WriteToLog("Validate Src: Unsupported color arg\n"); break;
            case D3DERR_UNSUPPORTEDCOLOROPERATION: g_TextureStage.WriteToLog("Validate Src: Unsupported color op\n"); break;
            case D3DERR_UNSUPPORTEDFACTORVALUE:    g_TextureStage.WriteToLog("Validate Src: Unsupported factor value\n"); break;
            case D3DERR_UNSUPPORTEDTEXTUREFILTER:  g_TextureStage.WriteToLog("Validate Src: Unsupported texture filter\n"); break;
            case D3DERR_WRONGTEXTUREFORMAT:        g_TextureStage.WriteToLog("Validate Src: Wrong texture format\n"); break;
        }
#endif
        return hRes;
    }

    return hRes;
*/
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\CTextureStage8.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
//#include "types.h"
#include "CStage.h"
#include "CTextureStage.h"
//#include "math.h"

extern CTextureStage* g_pTextureStage;

HRESULT CTextureStage::ValidateDevice8(DWORD *pdwPasses)
{
    HRESULT hRes=g_pTextureStage->m_pSrcDevice8->ValidateDevice(pdwPasses);

    if (FAILED(hRes))
    {
#if 0
        switch (hRes)
        {
            case D3DERR_CONFLICTINGTEXTUREFILTER:   g_TextureStage.WriteToLog("Validate Ref: Conflicting texture filter\n"); break;
            case D3DERR_CONFLICTINGTEXTUREPALETTE:  g_TextureStage.WriteToLog("Validate Ref: Conflicting texture palette\n"); break;
            case D3DERR_TOOMANYOPERATIONS:          g_TextureStage.WriteToLog("Validate Ref: Too many operations\n"); break;
            case D3DERR_UNSUPPORTEDALPHAARG:        g_TextureStage.WriteToLog("Validate Ref: Unsupported alpha arg\n"); break;
            case D3DERR_UNSUPPORTEDALPHAOPERATION:  g_TextureStage.WriteToLog("Validate Ref: Unsupported alpha op\n"); break;
            case D3DERR_UNSUPPORTEDCOLORARG:        g_TextureStage.WriteToLog("Validate Ref: Unsupported color arg\n"); break;
            case D3DERR_UNSUPPORTEDCOLOROPERATION:  g_TextureStage.WriteToLog("Validate Ref: Unsupported color op\n"); break;
            case D3DERR_UNSUPPORTEDFACTORVALUE:     g_TextureStage.WriteToLog("Validate Ref: Unsupported factor value\n"); break;
            case D3DERR_UNSUPPORTEDTEXTUREFILTER:   g_TextureStage.WriteToLog("Validate Ref: Unsupported texture filter\n"); break;
            case D3DERR_WRONGTEXTUREFORMAT:         g_TextureStage.WriteToLog("Validate Ref: Wrong texture format\n"); break;
        }
#endif
        return hRes;
    }

    hRes=g_pTextureStage->m_pSrcDevice8->ValidateDevice(pdwPasses);

    if (FAILED(hRes))
    {
#if 0
        switch (hRes)
        {
            case D3DERR_CONFLICTINGTEXTUREFILTER:  g_TextureStage.WriteToLog("Validate Src: Conflicting texture filter\n"); break;
            case D3DERR_CONFLICTINGTEXTUREPALETTE: g_TextureStage.WriteToLog("Validate Src: Conflicting texture palette\n"); break;
            case D3DERR_TOOMANYOPERATIONS:         g_TextureStage.WriteToLog("Validate Src: Too many operations\n"); break;
            case D3DERR_UNSUPPORTEDALPHAARG:       g_TextureStage.WriteToLog("Validate Src: Unsupported alpha arg\n"); break;
            case D3DERR_UNSUPPORTEDALPHAOPERATION: g_TextureStage.WriteToLog("Validate Src: Unsupported alpha op\n"); break;
            case D3DERR_UNSUPPORTEDCOLORARG:       g_TextureStage.WriteToLog("Validate Src: Unsupported color arg\n"); break;
            case D3DERR_UNSUPPORTEDCOLOROPERATION: g_TextureStage.WriteToLog("Validate Src: Unsupported color op\n"); break;
            case D3DERR_UNSUPPORTEDFACTORVALUE:    g_TextureStage.WriteToLog("Validate Src: Unsupported factor value\n"); break;
            case D3DERR_UNSUPPORTEDTEXTUREFILTER:  g_TextureStage.WriteToLog("Validate Src: Unsupported texture filter\n"); break;
            case D3DERR_WRONGTEXTUREFORMAT:        g_TextureStage.WriteToLog("Validate Src: Wrong texture format\n"); break;
        }
#endif
        return hRes;
    }

    return hRes;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\CStage.h ===
//////////////////////////////////////////////////////////////////////
// Copyright (C) Microsoft Corporation, 1999.
//
// CStage.h
//
// CStage class - Contains all information for a texture blend stage
//
// History: 5/15/99 Jeff Vezina     - Created
//
//////////////////////////////////////////////////////////////////////

#ifndef __CSTAGE_H__
#define __CSTAGE_H__

//#include "cd3dtest.h"
//#include "CImageloader.h"

//USETESTFRAME

class CStage  
{
public:
    CStage();
    virtual ~CStage();

    void SetStates(DWORD dwStage);                  // Sets all states for the specified stage
    void WriteToLog(UINT uStage);                   // Write to log current stage states
    void WriteToStatus(UINT uStage);                // Write to status current stage states

    void LogStage(BOOL bColor, DWORD dwStage);

    CStage *Create();                               // Creates a CStage at the end of the list
    void LoadTexture();                             // Creates texture, releases previous one
    UINT Count();                                   // Count the number of CStages in the list
    CStage *GetStageList(int n);                    // Get a CStage in the list

    DWORD m_dwColorOp,                              // D3D texture color operand
            m_dwColorArg1,                          // D3D texture color argument 1
            m_dwColorArg2,                          // D3D texture color argument 2
            m_dwAlphaOp,                            // D3D texture alpha operand
            m_dwAlphaArg1,                          // D3D texture alpha argument 1
            m_dwAlphaArg2;                          // D3D texture alpha argument 2

    DWORD m_rgdwColor[4];                           // Corner colors to use when creating texture
    CTexture8 *m_paTexture;

    CStage *m_paNext;                               // Next CStage in the list
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\CStage.cpp ===
//////////////////////////////////////////////////////////////////////
// Copyright (C) Microsoft Corporation, 1999.
//
// CStage.cpp
//
// CStage class - Contains all information for a texture blend stage
//
// History: 5/15/99 Jeff Vezina     - Created
//
//////////////////////////////////////////////////////////////////////

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "CStage.h"
#include "CTextureStage.h"

extern CTextureStage* g_pTextureStage;

CStage::CStage()
{
    // Set default color op and args
    m_dwColorOp=D3DTOP_DISABLE;
    m_dwColorArg1=D3DTA_TEXTURE;
    m_dwColorArg2=D3DTA_CURRENT;

    // Set default alpha op and args
    m_dwAlphaOp=D3DTOP_DISABLE;
    m_dwAlphaArg1=D3DTA_TEXTURE;
    m_dwAlphaArg2=D3DTA_CURRENT;

    m_paNext=NULL;

    ZeroMemory(m_rgdwColor,sizeof(m_rgdwColor));
    m_paTexture=NULL;
}

CStage::~CStage()
{
    if (m_paNext!=NULL) {
        delete m_paNext;
        m_paNext=NULL;
    }
    ReleaseTexture(m_paTexture);
}

CStage *CStage::Create()
{
    // If not last node of the list, move down the list
    if (m_paNext!=NULL) { return m_paNext->Create(); }

    m_paNext=new CStage;

    return m_paNext;
}

void CStage::LoadTexture()
{
//    CImageData *paImage;
//    CImageLoader Image;
//    DEVICEDESC SrcDesc=g_pTextureStage->m_pAdapter->Devices[g_pTextureStage->m_pMode->nSrcDevice].Desc;
    D3DCAPS8 d3dcaps;

    g_pTextureStage->m_pSrcDevice8->GetDeviceCaps(&d3dcaps);

    ReleaseTexture(m_paTexture);

    if (!(d3dcaps.ShadeCaps&D3DPSHADECAPS_ALPHAGOURAUDBLEND))
    {
        for (int i=1;i<4;i++)
            m_rgdwColor[i]=(m_rgdwColor[0]&0xFF000000)|(m_rgdwColor[i]&~0xFF000000);
    }

    if ((m_rgdwColor[0]!=0x00000000) || (m_rgdwColor[1]!=0x00000000) ||
        (m_rgdwColor[2]!=0x00000000) || (m_rgdwColor[3]!=0x00000000))
    {
//        paImage=Image.LoadGradient(128,128,m_rgdwColor);
//        m_paTexture=g_pTextureStage->CreateTexture(128,128,CDDS_TEXTURE_MANAGE,paImage);
        m_paTexture=(CTexture8*)CreateGradientTexture(g_pTextureStage->m_pSrcDevice8, 128, 128, m_rgdwColor);

//        RELEASE(paImage);
    }
}

void CStage::SetStates(DWORD dwStage)
{
    // Set color op and args states
    g_pTextureStage->SetTextureStageState(dwStage,D3DTSS_COLOROP,m_dwColorOp);
    g_pTextureStage->SetTextureStageState(dwStage,D3DTSS_COLORARG1,m_dwColorArg1);
    g_pTextureStage->SetTextureStageState(dwStage,D3DTSS_COLORARG2,m_dwColorArg2);

    LogStage(TRUE, dwStage);

    // Set alpha op and args states
    g_pTextureStage->SetTextureStageState(dwStage,D3DTSS_ALPHAOP,m_dwAlphaOp);
    g_pTextureStage->SetTextureStageState(dwStage,D3DTSS_ALPHAARG1,m_dwAlphaArg1);
    g_pTextureStage->SetTextureStageState(dwStage,D3DTSS_ALPHAARG2,m_dwAlphaArg2);

    LogStage(FALSE, dwStage);

    g_pTextureStage->SetTexture(dwStage,m_paTexture);

#ifdef DEMO_HACK // The Win32 NV20 driver doesn't correctly handle D3DTA_SPECULAR as an alpha argument, causing verification to incorrectly report failure
    if (m_dwAlphaArg1 == D3DTA_SPECULAR || m_dwAlphaArg2 == D3DTA_SPECULAR) {
        g_pTextureStage->GetDisplay()->EnableFrameVerification(FALSE);
    }
#endif
}

void CStage::LogStage(BOOL bColor, DWORD dwStage) {

    TCHAR szLog[512], *sz;
    DWORD dwOp, dwArg[2];
    UINT  i;

    _stprintf(szLog, TEXT("Stage %d - "), dwStage);

    if (bColor) {
        _tcscat(szLog, TEXT("Color op: "));
        dwOp = m_dwColorOp;
        dwArg[0] = m_dwColorArg1;
        dwArg[1] = m_dwColorArg2;
    }
    else {
        _tcscat(szLog, TEXT("Alpha op: "));
        dwOp = m_dwAlphaOp;
        dwArg[0] = m_dwAlphaArg1;
        dwArg[1] = m_dwAlphaArg2;
    }

//    sz = szLog + _tcslen(szLog);

    switch (dwOp) {

        case D3DTOP_DISABLE:
            _tcscat(szLog, TEXT("D3DTOP_DISABLE"));
            break;
        case D3DTOP_SELECTARG1:
            _tcscat(szLog, TEXT("D3DTOP_SELECTARG1"));
            break;
        case D3DTOP_SELECTARG2:
            _tcscat(szLog, TEXT("D3DTOP_SELECTARG2"));
            break;
        case D3DTOP_MODULATE:
            _tcscat(szLog, TEXT("D3DTOP_MODULATE"));
            break;
        case D3DTOP_MODULATE2X:
            _tcscat(szLog, TEXT("D3DTOP_MODULATE2X"));
            break;
        case D3DTOP_MODULATE4X:
            _tcscat(szLog, TEXT("D3DTOP_MODULATE4X"));
            break;
        case D3DTOP_ADD:
            _tcscat(szLog, TEXT("D3DTOP_ADD"));
            break;
        case D3DTOP_ADDSIGNED:
            _tcscat(szLog, TEXT("D3DTOP_ADDSIGNED"));
            break;
        case D3DTOP_ADDSIGNED2X:
            _tcscat(szLog, TEXT("D3DTOP_ADDSIGNED2X"));
            break;
        case D3DTOP_SUBTRACT:
            _tcscat(szLog, TEXT("D3DTOP_SUBTRACT"));
            break;
        case D3DTOP_ADDSMOOTH:
            _tcscat(szLog, TEXT("D3DTOP_ADDSMOOTH"));
            break;
        case D3DTOP_BLENDDIFFUSEALPHA:
            _tcscat(szLog, TEXT("D3DTOP_BLENDDIFFUSEALPHA"));
            break;
        case D3DTOP_BLENDTEXTUREALPHA:
            _tcscat(szLog, TEXT("D3DTOP_BLENDTEXTUREALPHA"));
            break;
        case D3DTOP_BLENDFACTORALPHA:
            _tcscat(szLog, TEXT("D3DTOP_BLENDFACTORALPHA"));
            break;
        case D3DTOP_BLENDTEXTUREALPHAPM:
            _tcscat(szLog, TEXT("D3DTOP_BLENDTEXTUREALPHAPM"));
            break;
        case D3DTOP_BLENDCURRENTALPHA:
            _tcscat(szLog, TEXT("D3DTOP_BLENDCURRENTALPHA"));
            break;
        case D3DTOP_PREMODULATE:
            _tcscat(szLog, TEXT("D3DTOP_PREMODULATE"));
            break;
        case D3DTOP_MODULATEALPHA_ADDCOLOR:
            _tcscat(szLog, TEXT("D3DTOP_MODULATEALPHA_ADDCOLOR"));
            break;
        case D3DTOP_MODULATECOLOR_ADDALPHA:
            _tcscat(szLog, TEXT("D3DTOP_MODULATECOLOR_ADDALPHA"));
            break;
        case D3DTOP_MODULATEINVALPHA_ADDCOLOR:
            _tcscat(szLog, TEXT("D3DTOP_MODULATEINVALPHA_ADDCOLOR"));
            break;
        case D3DTOP_MODULATEINVCOLOR_ADDALPHA:
            _tcscat(szLog, TEXT("D3DTOP_MODULATEINVCOLOR_ADDALPHA"));
            break;
        case D3DTOP_BUMPENVMAP:
            _tcscat(szLog, TEXT("D3DTOP_BUMPENVMAP"));
            break;
        case D3DTOP_BUMPENVMAPLUMINANCE:
            _tcscat(szLog, TEXT("D3DTOP_BUMPENVMAPLUMINANCE"));
            break;
        case D3DTOP_DOTPRODUCT3:
            _tcscat(szLog, TEXT("D3DTOP_DOTPRODUCT3"));
            break;
        case D3DTOP_MULTIPLYADD:
            _tcscat(szLog, TEXT("D3DTOP_MULTIPLYADD"));
            break;
        case D3DTOP_LERP:
            _tcscat(szLog, TEXT("D3DTOP_LERP"));
            break;
    }


    for (i = 0; i < 2; i++) {

        _stprintf(szLog+_tcslen(szLog), TEXT(", Arg %d: "), i+1);

        switch (dwArg[i]) {
            case D3DTA_DIFFUSE:
                _tcscat(szLog, TEXT("D3DTA_DIFFUSE"));
                break;
            case D3DTA_TEXTURE:
                _tcscat(szLog, TEXT("D3DTA_TEXTURE"));
                break;
            case D3DTA_CURRENT:
                _tcscat(szLog, TEXT("D3DTA_CURRENT"));
                break;
            case D3DTA_TFACTOR:
                _tcscat(szLog, TEXT("D3DTA_TFACTOR"));
                break;
            case D3DTA_SPECULAR:
                _tcscat(szLog, TEXT("D3DTA_SPECULAR"));
                break;
        }
    }

    Log(LOG_COMMENT, szLog);
}

void CStage::WriteToStatus(UINT uStage)
{
    char szStage[50];
    char *rgszTextureOp[21]={   "Disabled",
                                "Arg1",
                                "Arg2",
                                "Modulate",
                                "Modulate2X",
                                "Modulate4X",
                                "Add",
                                "AddSigned",
                                "AddSigned2X",
                                "Subtract",
                                "AddSmooth",
                                "BlendDiffuseAlpha",
                                "BlendTextureAlpha",
                                "BlendFactorAlpha",
                                "BlendTextureAlphaPM",
                                "BlendCurrentAlpha",
                                "Premodulate",
                                "ModulateAlphaAddColor",
                                "ModulateColorAddAlpha",
                                "ModulateInvAlphaAddColor",
                                "ModulateInvColorAddAlpha"};
    char *rgszTextureArg[5]={   "Diffuse",
                                "Current",
                                "Texture",
                                "TFactor",
                                "Specular"};

    if ((m_dwColorOp!=D3DTOP_DISABLE) || (m_dwAlphaOp!=D3DTOP_DISABLE) || (uStage==0))
    {
        sprintf(szStage,"$gStage %u Color",uStage);
        g_pTextureStage->WriteStatus(szStage,"$yOp=$c%s $yArg1=$c%s $yArg2=$c%s",
                                   rgszTextureOp[m_dwColorOp-1],rgszTextureArg[m_dwColorArg1],
                                   rgszTextureArg[m_dwColorArg2]);
        sprintf(szStage,"$gStage %u Alpha",uStage);
        g_pTextureStage->WriteStatus(szStage,"$yOp=$c%s $yArg1=$c%s $yArg2=$c%s",
                                   rgszTextureOp[m_dwAlphaOp-1],rgszTextureArg[m_dwAlphaArg1],
                                   rgszTextureArg[m_dwAlphaArg2]);

        sprintf(szStage,"$gStage %u Texture Top",uStage);
        g_pTextureStage->WriteStatus(szStage,"");
        sprintf(szStage,"$gStage %u Texture Bottom",uStage);
        g_pTextureStage->WriteStatus(szStage,"");

        // Was a texture loaded?
        if ((m_rgdwColor[0]!=0x00000000) || (m_rgdwColor[1]!=0x00000000) ||
            (m_rgdwColor[2]!=0x00000000) || (m_rgdwColor[3]!=0x00000000))
        {
            sprintf(szStage,"$gStage %u Texture Top",uStage);
            g_pTextureStage->WriteStatus(szStage,"$yLeft=$c0x%08X $yRight=$c0x%08X",m_rgdwColor[0],m_rgdwColor[1]);
            sprintf(szStage,"$gStage %u Texture Bottom",uStage);
            g_pTextureStage->WriteStatus(szStage,"$yLeft=$c0x%08X $yRight=$c0x%08X",m_rgdwColor[2],m_rgdwColor[3]);
        }
    }
}

void CStage::WriteToLog(UINT uStage)
{
    char *rgszTextureOp[21]={   "Disabled",
                                "Arg1",
                                "Arg2",
                                "Modulate",
                                "Modulate2X",
                                "Modulate4X",
                                "Add",
                                "AddSigned",
                                "AddSigned2X",
                                "Subtract",
                                "AddSmooth",
                                "BlendDiffuseAlpha",
                                "BlendTextureAlpha",
                                "BlendFactorAlpha",
                                "BlendTextureAlphaPM",
                                "BlendCurrentAlpha",
                                "Premodulate",
                                "ModulateAlphaAddColor",
                                "ModulateColorAddAlpha",
                                "ModulateInvAlphaAddColor",
                                "ModulateInvColorAddAlpha"};
    char *rgszTextureArg[5]={   "Diffuse",
                                "Current",
                                "Texture",
                                "TFactor",
                                "Specular"};

    if ((m_dwColorOp!=D3DTOP_DISABLE) || (m_dwAlphaOp!=D3DTOP_DISABLE) || (uStage==0))
    {
        // Was a texture loaded?
        if ((m_rgdwColor[0]!=0x00000000) || (m_rgdwColor[1]!=0x00000000) ||
            (m_rgdwColor[2]!=0x00000000) || (m_rgdwColor[3]!=0x00000000))
        {
            g_pTextureStage->WriteToLog("Stage %u\n"
                                      "\t\tColorOp=%s ColorArg1=%s ColorArg2=%s\n"
                                      "\t\tAlphaOp=%s AlphaArg1=%s AlphaArg2=%s\n"
                                      "\t\tTexture colors: (0,0)=0x%08X (1,0)=0x%08X (0,1)=0x%08X (1,1)=0x%08X\n\n",
                                      uStage,rgszTextureOp[m_dwColorOp-1],
                                      rgszTextureArg[m_dwColorArg1],
                                      rgszTextureArg[m_dwColorArg2],
                                      rgszTextureOp[m_dwAlphaOp-1],
                                      rgszTextureArg[m_dwAlphaArg1],
                                      rgszTextureArg[m_dwAlphaArg2],
                                      m_rgdwColor[0],m_rgdwColor[1],m_rgdwColor[2],m_rgdwColor[3]);
        }
        else
        {
            g_pTextureStage->WriteToLog("Stage %u\n"
                                      "\t\tColorOp=%s ColorArg1=%s ColorArg2=%s\n"
                                      "\t\tAlphaOp=%s AlphaArg1=%s AlphaArg2=%s\n\n",
                                      uStage,rgszTextureOp[m_dwColorOp-1],
                                      rgszTextureArg[m_dwColorArg1],
                                      rgszTextureArg[m_dwColorArg2],
                                      rgszTextureOp[m_dwAlphaOp-1],
                                      rgszTextureArg[m_dwAlphaArg1],
                                      rgszTextureArg[m_dwAlphaArg2]);
        }
    }
}

CStage *CStage::GetStageList(int n)
{
    if ((m_paNext!=NULL) && (n>0))
        return m_paNext->GetStageList(n-1);
    else
        return this;
}

UINT CStage::Count()
{
    if (m_paNext!=NULL) { return m_paNext->Count()+1; }

    return 1;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\CTextureStage.h ===
//////////////////////////////////////////////////////////////////////
// Copyright (C) Microsoft Corporation, 1999.
//
// CTextureStage.h
//
// CTextureStage class - Tests many possible texture blend combinations
//
// History: 5/15/99 Jeff Vezina     - Created
//
//////////////////////////////////////////////////////////////////////

#ifndef __CTEXTURESTAGE_H__
#define __CTEXTURESTAGE_H__

//#include "TestFrameBase.h"
//#include "cd3dtest.h"
//#include "CStage.h"

//USETESTFRAME

#define MAX_BLENDMODES D3DTOP_MAX

struct TName
{
    char szShortName[50];           // Code name
    char szLongName[50];            // Real name
    BOOL bUsed;                     // Is it being used?
};

class CTextureStage: public TESTFRAME(CD3DTest)
{
friend class CStage;

protected:
    D3DTLVERTEX m_rgTLVertex[8];
    int m_cVertexMax;

    UINT m_uStageListMax;           // Length of CStage list
    CStage m_StageList;             // CStage list - first node has both color and alpha DISABLED
    CStage *m_rgpStage[8];          // Array of CStages used for the current test

    UINT m_uTexFormatMax;           // Max texture formats used
    int m_cStageMax;			    // Max supported # of blend stages
    UINT m_uTestMax;                // Max # of tests
    int m_cCombinationMax;          // Number of different combinations to try on each stage
    BOOL m_bMultiPass;              // Render using multipass
    BOOL m_bPassValidate;           // Did ValidateDevice pass or failed correctly?
    UINT m_uLastFailedStage;        // Last stage that failed validate device

    BOOL m_bFog;                    // Use vertex fog?
    BOOL m_bAlpha;                  // Use alpha blending?
    BOOL m_bSpecular;               // Use specular lighting?

    int nTextureFormat;

public:
    TName m_rgTexFormats[MAX_D3D_TEXTURES];             // Array of all ref texture formats
    TName m_rgBlendModes[MAX_BLENDMODES];               // Array of all ref blend modes

    CTextureStage();
    ~CTextureStage();

    virtual void CommandLineHelp(void);
    virtual UINT TestInitialize(void);
    virtual bool ExecuteTest(UINT);
    virtual void SceneRefresh(void);
    virtual bool TestTerminate(void);

    virtual bool SetDefaultMaterials(void);
    virtual bool SetDefaultLightStates(void);
    virtual bool SetDefaultRenderStates(void);
    virtual bool SetDefaultLights(void);
    virtual bool ProcessFrame(void);

    virtual CDisplay* GetDisplay(void);

    BOOL LoadStages();              // Loads CStage list
    void CreateTexFormatNames();    // Creates texture format names, and stores it in m_rgTexFormats[]
    HRESULT ValidateDevice(DWORD *pdwPasses);           // Validates both ref and src devices
    HRESULT ValidateDevice8(DWORD *pdwPasses);          // Validates both ref and src devices on DX8 or higher
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_texstg
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    CTextureStage.cpp \
    CTextureStage8.cpp \
    CStage.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\modulex.h ===
#define PREPEND_MODULE(Suffix) texturestage##Suffix
#define MODULE_STRING "texturestage"
#pragma comment(linker, "/include:_texturestage_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\stencil\exe\sources.inc ===
TARGETNAME=stencil
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_stncil.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\exe\sources.inc ===
TARGETNAME=TexStage
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_texstg.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\TextureStage\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=TexStage
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_texstg.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\modulex.h ===
#define PREPEND_MODULE(Suffix) tlvertexclip##Suffix
#define MODULE_STRING "tlvertexclip"
#pragma comment(linker, "/include:_tlvertexclip_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\quad.cpp ===
// FILE:        quad.cpp
// DESC:        TL vertex clip conformance tests (quad)

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "TLVertexClip.h"

// NAME:        CTLVertexClipQuad()
// DESC:        TL vertex clip quad class constructor
// INPUT:       none
// OUTPUT:      none

CTLVertexClipQuad::CTLVertexClipQuad()
{
	m_nTests = QUAD_TESTS;
	m_szTestName = TEXT("TLVertexClip Quad");
	m_szCommandKey = TEXT("Quad");
}

// NAME:        ~CTLVertexClipQuad()
// DESC:        TL vertex clip quad class destructor
// INPUT:       none
// OUTPUT:      none

CTLVertexClipQuad::~CTLVertexClipQuad()
{
}

// NAME:        SetEndPoints()
// DESC:        set end points
// INPUT:       A........end point
//              B........end point
//              uTest....test index
// OUTPUT:      none
// COMMENTS:    end points define lines thru viewport from/to each quadrant

void CTLVertexClipQuad::SetEndPoints(D3DVECTOR *A, D3DVECTOR *B, UINT uTest)
{
	UINT i = uTest % (4*POINTS_PER_SIDE);
	UINT j = uTest / (4*POINTS_PER_SIDE);

	D3DVECTOR Start = cD3DVECTOR(PxFromTest(i), PyFromTest(i), 0.0f);
	D3DVECTOR End = cD3DVECTOR(PxFromTest(j), PyFromTest(j), 0.0f);

	*A = Start;
	*B = End;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\edge.cpp ===
// FILE:        edge.cpp
// DESC:        TL vertex clip conformance tests (edge)

//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "TLVertexClip.h"

// NAME:        CTLVertexClipEdge()
// DESC:        TL vertex clip edge class constructor
// INPUT:       none
// OUTPUT:      none

CTLVertexClipEdge::CTLVertexClipEdge()
{
	m_nTests = EDGE_TESTS;
	m_szTestName = TEXT("TLVertexClip Edge");
	m_szCommandKey = TEXT("Edge");
}

// NAME:        ~CTLVertexClipEdge()
// DESC:        TL vertex clip edge class destructor
// INPUT:       none
// OUTPUT:      none

CTLVertexClipEdge::~CTLVertexClipEdge()
{
}

// NAME:        SetEndPoints()
// DESC:        set end points
// INPUT:       A........end point
//              B........end point
//              uTest....test number
// OUTPUT:      none
// COMMENTS:    end points define lines around viewport edges

void CTLVertexClipEdge::SetEndPoints(D3DVECTOR *A, D3DVECTOR *B, UINT uTest)
{
	int	nOffset = (((int) uTest) % TESTS_PER_EDGE) - 1;

	A->z = 0;
	B->z = 0;

    switch (uTest/TESTS_PER_EDGE)
    {
        case 0:
            A->x = CLIP_X;
            A->y = (float)(m_Port.Top - nOffset);
            B->x = CLIP_WIDTH;
            B->y = (float)(m_Port.Top - nOffset);
        break; // draw a horizontal line at the top

        case 1:
            A->x = CLIP_X;
            A->y = (float)(m_Port.Bottom - nOffset);
            B->x = CLIP_WIDTH;
            B->y = (float)(m_Port.Bottom - nOffset);
        break; // draw a horizontal line at the bottom

        case 2:
            A->x = (float)(m_Port.Left - nOffset);
            A->y = CLIP_Y;
            B->x = (float)(m_Port.Left - nOffset);
            B->y = CLIP_HEIGHT;
        break; // draw a vertical line at the left

        case 3:
            A->x = (float)(m_Port.Right - nOffset);
            A->y = CLIP_Y;
            B->x = (float)(m_Port.Right - nOffset);
            B->y = CLIP_HEIGHT;
        break; // draw a vertical line at the right

        default:
            A->x = 0;
            A->y = 0;
            B->x = 0;
            B->y = 0;
        break;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_tlvclp
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    TLVertexClip.cpp \
    edge.cpp \
    quad.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\tlvertexclip.h ===
// FILE:        TLVertexClip.h
// DESC:        TL vertex clip class header for TL vertex clip conformance tests

#ifndef __TLVERTEXCLIP_H__
#define __TLVERTEXCLIP_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

const UINT MAXBUFFER = 1024;
const UINT NVERTICES = 10;
const UINT EDGES = 4;
const UINT POINTS_PER_SIDE = 5;
const UINT TESTS_PER_EDGE = 3;
const UINT EDGE_TESTS = (EDGES*TESTS_PER_EDGE);
const UINT QUAD_TESTS = ((4*POINTS_PER_SIDE)*(4*POINTS_PER_SIDE));

const long PORT_X = 20;
const long PORT_Y = 20;
const long PORT_WIDTH = 280;
const long PORT_HEIGHT = 240;

const long CLIP_X = 0;
const long CLIP_Y = 0;
const long CLIP_WIDTH = 320;
const long CLIP_HEIGHT = 280;
 
//USETESTFRAME

typedef struct
{
    BYTE    Red;
    BYTE    Green;
    BYTE    Blue;
} RGBSIZE, *PRGBSIZE;

struct CPort
{
	long Top;
    long Left;
    long Bottom;
    long Right;

	CPort(long x, long y, long Width, long Height)
    {
        Top = y;
        Left = x;
        Bottom = y + Height;
        Right = x + Width;
    }
	bool Inside(long x, long y)
    {
        if ((y >= Top) && (y < Bottom) && (x >= Left) && (x < Right))
            return true;
        else
            return false;
    }
    long Width(void)
    {
        return (Right - Left);
    }
    long Height(void)
    {
        return (Bottom - Top);
    }
};

class CTLVertexClip: public TESTFRAME(CD3DTest)
{
	public:
    	bool m_bShow;
        D3DTLVERTEX m_Vertices[NVERTICES];
    	D3DPRIMITIVETYPE m_Type;
    	DWORD m_dwPitch;
    	DWORD m_dwLineColor;
    	DWORD m_dwPortColor;
    	char  m_szBuffer[MAXBUFFER];
    	UINT m_nTests;
	    CPort m_Port;

        ARGBPIXELDESC pixd;
        BOOL            m_bExit;

	public:
       	CTLVertexClip();
       	~CTLVertexClip();
	    virtual void CommandLineHelp(void);
       	virtual bool SetupViewport();
       	virtual bool ClearFrame(void);
        virtual UINT TestInitialize(void);
       	virtual bool ExecuteTest(UINT);
       	virtual bool TestTerminate(void)
        {
            return true;
        }
//        virtual bool CompareImages(CDirectDrawSurface *pSrc, CDirectDrawSurface *pRef, CDirectDrawSurface *pResult)
//        {
//            return true;
//        }
       	virtual bool ProcessFrame(void);
       	virtual void SceneRefresh(void);
        bool AnyExtraPixels(void);
        int PixelCheckAtDepth(PWORD pBuffer, long *pdwDx, long *pdwDy);
        int PixelCheckAtDepth(PDWORD pBuffer, long *pdwDx, long *pdwDy);
        int PixelCheckAtDepth(PRGBSIZE pBuffer, long *pdwDx, long *pdwDy);
        float CTLVertexClip::PxFromTest(UINT nPoint);
        float CTLVertexClip::PyFromTest(UINT nPoint);
    	virtual void SetEndPoints(D3DVECTOR *A, D3DVECTOR *B, UINT uTest) {}

        virtual BOOL    AbortedExit(void);

    protected:

        virtual void    ProcessInput();
        virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                            WPARAM wParam, LPARAM lParam);
};

class CTLVertexClipQuad : public CTLVertexClip
{
    public:
        CTLVertexClipQuad();
        ~CTLVertexClipQuad();
        virtual void SetEndPoints(D3DVECTOR *A, D3DVECTOR *B, UINT uTest);
};

class CTLVertexClipEdge : public CTLVertexClip
{
    public:
        CTLVertexClipEdge();
        ~CTLVertexClipEdge();
        virtual void SetEndPoints(D3DVECTOR *A, D3DVECTOR *B, UINT uTest);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\tlvertexclip.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "TLVertexClip.h"

const D3DVALUE RHW = 1.0f;

const DWORD g_dwDX6APIListSize = 3;
const DWORD g_dwDX7APIListSize = 1;

RENDERPRIMITIVEAPI g_pDX6APIList[g_dwDX6APIListSize] =
{
    RP_BE,  // Begin/Vertex/End
    RP_DP,  // DrawPrimitive
    RP_DPS, // DrawPrimitiveStrided
};

RENDERPRIMITIVEAPI g_pDX7APIList[g_dwDX7APIListSize] =
{
    RP_DPVB, // DrawPrimitiveVB
};

//CD3DWindowFramework App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CTLVertexClip*  pTLVClipTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 2 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pTLVClipTest = new CTLVertexClipEdge();
                break;
            case 1:
                pTLVClipTest = new CTLVertexClipQuad();
                break;
        }

        if (!pTLVClipTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pTLVClipTest->Create(pDisplay)) {
            pTLVClipTest->Release();
            return FALSE;
        }

        bRet = pTLVClipTest->Exhibit(pnExitCode);

        bQuit = pTLVClipTest->AbortedExit();

        // Clean up the scene
        pTLVClipTest->Release();
    }

    return bRet;
}

// NAME:        CTLVertexClip()
// DESC:        TL vertex clip class constructor
// INPUT:       none
// OUTPUT:      none

CTLVertexClip::CTLVertexClip() : m_Port(PORT_X, PORT_Y, PORT_WIDTH, PORT_HEIGHT)
{
	m_bShow = false;

	m_nTests = (UINT) 0;
	m_Type = D3DPT_LINELIST;

	m_dwLineColor = RGBA_MAKE(0, 255, 255, 255);
	m_dwPortColor = RGBA_MAKE(0,   0,   0,   0);

    m_ModeOptions.fReference = false;

    m_bExit = FALSE;
}

// NAME:        ~CTLVertexClip()
// DESC:        TL vertex clip class destructor
// INPUT:       none
// OUTPUT:      none

CTLVertexClip::~CTLVertexClip()
{
}

// NAME:        CommandLineHelp()
// DESC:        command line help
// INPUT:       none
// OUTPUT:      none

void CTLVertexClip::CommandLineHelp(void)
{
//    WriteCommandLineHelp("$yline: $wline color $c(default(ARGB)=0x00FFFFFF)");
//    WriteCommandLineHelp("$yport: $wport color $c(default(ARGB)=0x00000000)");
//    WriteCommandLineHelp("$yshow: $wshow port $c($wOn$c/Off)");
}

// NAME:        SetupViewport()
// DESC:        set up viewport
// INPUT:       none
// OUTPUT:      none

bool CTLVertexClip::SetupViewport(void)
{
    return SetViewport(m_Port.Left, m_Port.Top, m_Port.Width(), m_Port.Height());
}

// NAME:        ClearFrame()
// DESC:        clear frame
// INPUT:       none
// OUTPUT:      Clear()

bool CTLVertexClip::ClearFrame(void)
{
    bool bResult;

    (void) SetViewport(0, 0, m_pDisplay->GetWidth(), m_pDisplay->GetHeight());
    bResult = Clear(RGBA_MAKE(0, 0, 0, 255));
    SetViewport(m_Port.Left, m_Port.Top, m_Port.Width(), m_Port.Height());

    return bResult;
}

// NAME:        TestInitialize()
// DESC:        test initialize
// INPUT:       none
// OUTPUT:      D3DTESTINIT_RUN

UINT CTLVertexClip::TestInitialize(void)
{
    CHAR szBuffer[32];
    UINT uTemp;
    CSurface8* pd3ds;
    D3DSURFACE_DESC d3dsd;

    if (0x0600 == m_dwVersion)
    {
        SetAPI(g_pDX6APIList, g_dwDX6APIListSize, 2);
    }
    else if (0x0700 == m_dwVersion)
    {
        SetAPI(g_pDX7APIList, g_dwDX7APIListSize, 2);
    }
    else
    {
    }

//    SetDisplayMode(DISPLAYMODE_WINDOW_SRCONLY);

    // line color
    // default:  white

//    lstrcpy(szBuffer, "");
//    ReadString("line", szBuffer);
//    m_dwLineColor = (DWORD) (sscanf(szBuffer, "%x", &uTemp) == 1) ? uTemp : 0x00FFFFFF;
//    m_dwLineColor &= 0x00ffffff;
    m_dwLineColor = 0x00ffffff;

    // port color
    // default:  black

//	lstrcpy(szBuffer, "");
//	ReadString("port", szBuffer);
//    m_dwPortColor = (DWORD) (sscanf(szBuffer, "%x", &uTemp) == 1) ? uTemp : 0x00000000;
//    m_dwPortColor &= 0x00ffffff;
    m_dwPortColor = 0;

    if (KeySet("show"))	
        m_bShow = true;

    if (FAILED(m_pDevice->GetRenderTarget(&pd3ds))) {
        return D3DTESTINIT_SKIPALL;
    }
    pd3ds->GetDesc(&d3dsd);
    pd3ds->Release();
    GetARGBPixelDesc(d3dsd.Format, &pixd);

//    WriteToLog("Alpha (%0x), Red (%0x), Green (%0x), Blue (%0x)\n",
//               m_pSrcTarget->m_dwAlphaMask,
//               m_pSrcTarget->m_dwRedMask,
//               m_pSrcTarget->m_dwGreenMask,
//               m_pSrcTarget->m_dwBlueMask);
    WriteToLog("Alpha (%0x), Red (%0x), Green (%0x), Blue (%0x)\n",
               pixd.dwAMask,
               pixd.dwRMask,
               pixd.dwGMask,
               pixd.dwBMask);

//    UINT n = m_pMode->nSrcDevice;

    // 2x, one for each primitive (D3DPT_LINELIST & D3DPT_LINESTRIP)
	SetTestRange((UINT) 1, (UINT) (2*m_nTests));

	DWORD dwDevCaps = m_d3dcaps.DevCaps;
	DWORD dwMinTextureWidth = 1;//m_d3dcaps.MinTextureWidth;
	DWORD dwMinTextureHeight = 1;//m_d3dcaps.MinTextureHeight;
	DWORD dwMaxTextureWidth = m_d3dcaps.MaxTextureWidth;
	DWORD dwMaxTextureHeight = m_d3dcaps.MaxTextureHeight;

    if (m_dwVersion >= 0x0700)
	    SetRenderState(D3DRENDERSTATE_LIGHTING, (DWORD) FALSE);

	// set up clip port

	D3DCOLOR dcDiffuse(m_dwPortColor);
	D3DCOLOR dcSpecular(0x00000000);
	D3DVECTOR A = cD3DVECTOR((float)m_Port.Left, (float)m_Port.Top, 0.0f);
	D3DVECTOR B = cD3DVECTOR((float)(m_Port.Right -1), (float)m_Port.Top, 0.0f);

	// since test line uses points [0] & [1], start clip port's line list at [2]

	m_Vertices[2] = cD3DTLVERTEX(A, RHW, dcDiffuse, dcSpecular, 0, 0);
	m_Vertices[3] = cD3DTLVERTEX(B, RHW, dcDiffuse, dcSpecular, 0, 0);
	A.x = (float)(m_Port.Right -1);
	A.y = (float)(m_Port.Bottom -1);
	m_Vertices[4] = cD3DTLVERTEX(B, RHW, dcDiffuse, dcSpecular, 0, 0);
	m_Vertices[5] = cD3DTLVERTEX(A, RHW, dcDiffuse, dcSpecular, 0, 0);
	B.x = (float)(m_Port.Left);
	B.y = (float)(m_Port.Bottom -1);
	m_Vertices[6] = cD3DTLVERTEX(B, RHW, dcDiffuse, dcSpecular, 0, 0);
	m_Vertices[7] = cD3DTLVERTEX(A, RHW, dcDiffuse, dcSpecular, 0, 0);
	A.x = (float)(m_Port.Left);
	A.y = (float)(m_Port.Top);
	m_Vertices[8] = cD3DTLVERTEX(A, RHW, dcDiffuse, dcSpecular, 0, 0);
	m_Vertices[9] = cD3DTLVERTEX(B, RHW, dcDiffuse, dcSpecular, 0, 0);

	WriteToLog("Using a clip rect of (Left, Top, Right, Bottom) (%ld, %ld, %ld, %ld).\n",
               m_Port.Left, m_Port.Top, m_Port.Right, m_Port.Bottom );

	return (UINT) D3DTESTINIT_RUN;
}

// NAME:        ExecuteTest()
// DESC:        execute test
// INPUT:       uTest....test index
// OUTPUT:      true

bool CTLVertexClip::ExecuteTest(UINT uTest)
{
	D3DCOLOR dcDiffuse(m_dwLineColor);
	D3DCOLOR dcSpecular(0x00000000);
	D3DVECTOR A, B;

	uTest--; // test coords are zero based

	if (m_nTests <= uTest)
	{
		m_Type = D3DPT_LINESTRIP;
		sprintf(m_szBuffer, "D3DPT_LINESTRIP" );
		uTest -= m_nTests; // so that the range is still 0..m_nTests
	}
	else
	{
		m_Type = D3DPT_LINELIST;
		sprintf(m_szBuffer, "D3DPT_LINELIST");
	}

	SetEndPoints(&A, &B, uTest);
	m_Vertices[0] = cD3DTLVERTEX(A, RHW, dcDiffuse, dcSpecular, 0, 0);
	m_Vertices[1] = cD3DTLVERTEX(B, RHW, dcDiffuse, dcSpecular, 0, 0);

	sprintf(m_szBuffer, "%s from %ld, %ld to %ld, %ld ", m_szBuffer, A.x, A.y, B.x, B.y);
	BeginTestCase(m_szBuffer);

    return true;
}

// NAME:        ProcessFrame()
// DESC:        process frame
// INPUT:       none
// OUTPUT:      true.....if any extra pixels are present
//              false....otherwise

bool CTLVertexClip::ProcessFrame(void)
{
    bool bResult;
    static int nPass = 0;
    static int nFail = 0;

    bResult = !AnyExtraPixels();

    if (bResult)
    {
        (m_fIncrementForward) ? nPass++ : nPass--;
        sprintf(m_szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
    else
    {
        (m_fIncrementForward) ? nFail++ : nFail--;
        sprintf(m_szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
    }

    WriteStatus("$gOverall Results", m_szBuffer);
    return bResult;
}

// NAME:        SceneRefresh()
// DESC:        scene refresh
// INPUT:       none
// OUTPUT:      none

void CTLVertexClip::SceneRefresh(void)
{
    if (BeginScene())
    {
        RenderPrimitive(m_Type, D3DFVF_TLVERTEX, m_Vertices, 2, NULL, 0, 0);

        if (m_bShow)
            RenderPrimitive(D3DPT_LINELIST, D3DFVF_TLVERTEX, &m_Vertices[2], 8, NULL, 0, 0);

        EndScene();
    }
}

// NAME:        PixelCheckAtDepth()
// DESC:        check for bad pixels
// INPUT:       pBuffer..pixel buffer
//              pdwDx....x error
//              pdwDy....y error
// OUTPUT:      nBad.....number of bad pixels

int CTLVertexClip::PixelCheckAtDepth(PWORD pBuffer, long *pdwDx, long *pdwDy)
{
    int nBad = 0;
    BYTE *pbTemp = (BYTE *) pBuffer;
//    DWORD dwFilter = (m_pSrcTarget->m_dwAlphaMask << m_pSrcTarget->m_nAlphaShift) | m_pSrcTarget
//->m_dwFilter;
    DWORD dwFilter = pixd.dwAMask;

    for (long y = 0; y < (long)m_pDisplay->GetHeight(); y++)
    {
        pBuffer = (PWORD) pbTemp;

        for (long x = 0; x < (long)m_pDisplay->GetWidth(); x++)
        {
            if (!m_Port.Inside(x, y))
            {
                if ((*pBuffer & dwFilter) != m_dwClearColor)
                {
                    nBad++;

                    if (x < m_Port.Left)
                    {
                        if (m_Port.Left - x > *pdwDx)
                            *pdwDx = m_Port.Left - x;
                    }
                    else
                    {
                        // we have to use -1 here because m_Port.Right is the first bad pixel,
                        // but we want the distance to the bad pixel to the last good one
                        if (x - (m_Port.Right-1) > *pdwDx)
                            *pdwDx = x - (m_Port.Right -1);
                    }

                    if (y < m_Port.Top)
                    {
                        if (m_Port.Top - y > *pdwDy)
                            *pdwDy = m_Port.Top - y;
                    }
                    else
                    {
                        // we have to use -1 here because m_Port.Bottom is the first bad pixel,
                        // but we want the distance to the bad pixel to the last good one
                        if (y - (m_Port.Bottom -1) > *pdwDy)
                            *pdwDy = y - (m_Port.Bottom -1);
                    }
                }
            }

            pBuffer++;
        }

        pbTemp += m_dwPitch;
    }

    return nBad;
}

// NAME:        PixelCheckAtDepth()
// DESC:        check for bad pixels
// INPUT:       pBuffer..pixel buffer
//              pdwDx....x error
//              pdwDy....y error
// OUTPUT:      nBad.....number of bad pixels

int CTLVertexClip::PixelCheckAtDepth(PDWORD pBuffer, long *pdwDx, long *pdwDy)
{
    int nBad = 0;
    BYTE *pbTemp = (BYTE *) pBuffer;
//    DWORD dwFilter = (m_pSrcTarget->m_dwAlphaMask << m_pSrcTarget->m_nAlphaShift) | m_pSrcTarget->m_dwFilter;
    DWORD dwFilter = pixd.dwAMask;

	for (long y = 0; y < (long)m_pDisplay->GetHeight(); y++)
	{
		pBuffer = (PDWORD) pbTemp;

		for (long x = 0; x < (long)m_pDisplay->GetWidth(); x++)
		{
			if (!m_Port.Inside(x, y))
			{
				if ((*pBuffer & dwFilter) != m_dwClearColor)
				{
					nBad++;

					if (x <= m_Port.Left)
					{
						if (m_Port.Left - x > *pdwDx)
							*pdwDx = m_Port.Left - x;
					}
					else
					{
						if (x - m_Port.Right > *pdwDx)
							*pdwDx = x - m_Port.Right;
					}

					if (y <= m_Port.Top)
					{
						if (m_Port.Top - y > *pdwDy)
							*pdwDy = m_Port.Top - y;
					}
					else
					{
						if (y - m_Port.Bottom > *pdwDy)
							*pdwDy = y - m_Port.Bottom;
					}
				}
			}

			pBuffer++;
		}

		pbTemp += m_dwPitch;
	}

	return nBad;
}

// NAME:        PixelCheckAtDepth()
// DESC:        check for bad pixels
// INPUT:       pBuffer..pixel buffer
//              pdwDx....x error
//              pdwDy....y error
// OUTPUT:      nBad.....number of bad pixels

int CTLVertexClip::PixelCheckAtDepth(PRGBSIZE pBuffer, long *pdwDx, long *pdwDy)
{
	int	nBad = 0;
	BYTE *pbTemp = (BYTE *) pBuffer;
	RGBSIZE	black= { 0, 0, 0 };

	for (long y = 0; y < (long)m_pDisplay->GetHeight(); y++)
	{
		pBuffer = (PRGBSIZE) pbTemp;

		for (long x = 0; x < (long)m_pDisplay->GetWidth(); x++)
		{
			if (!m_Port.Inside(x, y))
			{
				if (memcmp((void *) pBuffer, (void *) &black, sizeof(RGBSIZE)))
				{
					nBad++;

					if (x <= m_Port.Left)
					{
						if (m_Port.Left - x > *pdwDx)
							*pdwDx = m_Port.Left - x;
					}
					else
					{
						if (x - m_Port.Right > *pdwDx)
							*pdwDx = x - m_Port.Right;
					}

					if (y <= m_Port.Top)
					{
						if (m_Port.Top - y > *pdwDy)
							*pdwDy = m_Port.Top - y;
					}
					else
					{
						if (y - m_Port.Bottom > *pdwDy)
							*pdwDy = y - m_Port.Bottom;
					}
				}
			}

			pBuffer++;
		}

		pbTemp += m_dwPitch;
	}

	return nBad;
}

// NAME:        AnyExtraPixels()
// DESC:        extra pixel check
// INPUT:       none
// OUTPUT:      true.....if any extra pixels are present
//              false....otherwise

bool CTLVertexClip::AnyExtraPixels(void)
{
	int nBad = 0;
	long dwDx = 0, dwDy = 0;
	void *pSurfBuf;
    CSurface8* pd3ds;
    D3DSURFACE_DESC d3dsd;
    D3DLOCKED_RECT d3dlr;

    m_pDevice->GetRenderTarget(&pd3ds);
    pd3ds->GetDesc(&d3dsd);
//	pSurfBuf = m_pSrcTarget->Lock();
    pd3ds->LockRect(&d3dlr, NULL, 0);
    pSurfBuf = d3dlr.pBits;

	if (NULL == pSurfBuf)
	{
        pd3ds->Release();
		WriteToLog("AnyExtraPixels:  Could not lock image.\n");
		Fail();
		return false;
	}

//	m_dwPitch = m_pSrcTarget->m_lPitch;
    m_dwPitch = d3dlr.Pitch;

    switch(FormatToBitDepth(d3dsd.Format))
    {
        case 8:
        break;

        case 16:
            nBad = PixelCheckAtDepth((PWORD) pSurfBuf, &dwDx, &dwDy);
        break;

        case 24:
            nBad = PixelCheckAtDepth((PRGBSIZE) pSurfBuf, &dwDx, &dwDy);
        break;

        case 32:
            nBad = PixelCheckAtDepth((PDWORD) pSurfBuf, &dwDx, &dwDy);
        break;
    }

//	m_pSrcTarget->Unlock();
    pd3ds->UnlockRect();
    pd3ds->Release();

    if (0 != nBad)
        WriteToLog("\t%d bad pixels(s) with max distance of %ld, %ld\n", nBad, dwDx, dwDy);

	return (0 != nBad);
}

// NAME:        PxFromTest()
// DESC:        point x coord from test index
// INPUT:       nPoint...point index
// OUTPUT:      none

float CTLVertexClip::PxFromTest(UINT nPoint)
{
    switch(nPoint/POINTS_PER_SIDE)
    {
        case 0:
            return (float) ((500.0*(nPoint % POINTS_PER_SIDE)) / POINTS_PER_SIDE);
        case 1:
            return 500.0f;
        case 2:
            return (float) (500.0 - ((500.0*(nPoint % POINTS_PER_SIDE)) / POINTS_PER_SIDE));
        case 3:
            return 0.0f;
        default:
            return 325.0f;
    }

    return 0.0f;
}

// NAME:        PyFromTest()
// DESC:        point y from test index
// INPUT:       nPoint...point index
// OUTPUT:      none

float CTLVertexClip::PyFromTest(UINT nPoint)
{
    switch(nPoint/POINTS_PER_SIDE)
    {
        case 0:
            return 0.0f;
        case 1:
            return (float) ((500.0*(nPoint % POINTS_PER_SIDE)) / POINTS_PER_SIDE);
        case 2:
            return 500.0f;
        case 3:
            return (float) (500.0 - ((500.0*(nPoint % POINTS_PER_SIDE)) / POINTS_PER_SIDE));
        default:
            return 325.0f;
    }

    return 0.0f;
}

//******************************************************************************
BOOL CTLVertexClip::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CTLVertexClip::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CTLVertexClip::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=TLVClip
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_tlvclp.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\groups.cpp ===
// ======================================================================================
// 
//  Groups.cpp -- group definitions for vblend.exe
//
// ======================================================================================

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "CShapes.h"
#include "VBlend.h"
#include "Groups.h"

// --------------------------------------------------------------------------------------

BlendPos::BlendPos()
{
	m_wFlags = BLEND_POS;
	m_szTestName = _T("Blend Positions");
	m_szCommandKey = _T("Pos");
}

BlendPos::~BlendPos()
{
}

bool BlendPos::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_REG(0, D3DVSDT_FLOAT3),

		D3DVSD_STREAM(1),
		D3DVSD_REG(1, D3DVSDT_FLOAT3),

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                                        \n"
		"mul r0, v0, c4.x      ; Pos1 * B                           \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B            \n"
		"; transform                                                \n"
		"m4x4 r0, r0, c0                                            \n"
		"mov oPos, r0          ; write results to position register \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendNml::BlendNml()
{
	m_wFlags = BLEND_NML;
	m_szTestName = _T("Blend Normals");
	m_szCommandKey = _T("Nml");
}

BlendNml::~BlendNml()
{
}

bool BlendNml::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_SKIP(3),                  // skip pos info
		D3DVSD_REG(0, D3DVSDT_FLOAT3),

		D3DVSD_STREAM(1),
		D3DVSD_SKIP(3),                  // skip pos info
		D3DVSD_REG(1, D3DVSDT_FLOAT3),

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n"
		"mov oPos, r0                                      \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendClr::BlendClr()
{
	m_wFlags = BLEND_CLR;
	m_szTestName = _T("Blend Colors");
	m_szCommandKey = _T("Clr");
}

BlendClr::~BlendClr()
{
}

bool BlendClr::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_SKIP(6),                  // skip pos, normal info
		D3DVSD_REG(0, D3DVSDT_PACKEDBYTE),

		D3DVSD_STREAM(1),
		D3DVSD_SKIP(6),                  // skip pos, normal info
		D3DVSD_REG(1, D3DVSDT_PACKEDBYTE),

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                                     \n"
		"mul r0, v0, c4.x      ; Pos1 * B                        \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B         \n"
		"; transform                                             \n"
		"m4x4 r0, r0, c0                                         \n"
		"mov oD0, r0           ; write results to color register \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendTxc::BlendTxc()
{
	m_wFlags = BLEND_TXC;
	m_szTestName = _T("Blend Texture Coords");
	m_szCommandKey = _T("Txc");
}

BlendTxc::~BlendTxc()
{
}

bool BlendTxc::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_SKIP(7),                  // skip pos, normal, color info
		D3DVSD_REG(0, D3DVSDT_FLOAT2),

		D3DVSD_STREAM(1),
		D3DVSD_SKIP(7),                  // skip pos, normal, color info
		D3DVSD_REG(1, D3DVSDT_FLOAT2),

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendPosNml::BlendPosNml()
{
	m_wFlags = BLEND_POS | BLEND_NML;
	m_szTestName = _T("Blend Positions / Normals");
	m_szCommandKey = _T("PosNml");
}

BlendPosNml::~BlendPosNml()
{
}

bool BlendPosNml::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // pos
		D3DVSD_REG(1, D3DVSDT_FLOAT3),  // normal

		D3DVSD_STREAM(1),
		D3DVSD_REG(2, D3DVSDT_FLOAT3),  // pos
		D3DVSD_REG(3, D3DVSDT_FLOAT3),  // normal

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v2, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"mul r1, v1, c4.x      ; Pos1 * B                  \n"
		"mad r1, v3, c4.y, r1  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";
		"m4x4 r1, r1, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendPosClr::BlendPosClr()
{
	m_wFlags = BLEND_POS | BLEND_CLR;
	m_szTestName = _T("Blend Positions / Colors");
	m_szCommandKey = _T("PosClr");
}

BlendPosClr::~BlendPosClr()
{
}

bool BlendPosClr::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // pos
		D3DVSD_SKIP(3),                 // skip normal
		D3DVSD_REG(1, D3DVSDT_PACKEDBYTE),   // color

		D3DVSD_STREAM(1),
		D3DVSD_REG(2, D3DVSDT_FLOAT3),  // pos
		D3DVSD_SKIP(3),                 // skip normal
		D3DVSD_REG(3, D3DVSDT_PACKEDBYTE),   // color

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v2, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"mul r0, v1, c4.x      ; Pos1 * B                  \n"
		"mad r0, v3, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendPosTxc::BlendPosTxc()
{
	m_wFlags = BLEND_POS | BLEND_TXC;
	m_szTestName = _T("Blend Positions / Texture Coords");
	m_szCommandKey = _T("PosTxc");
}

BlendPosTxc::~BlendPosTxc()
{
}

bool BlendPosTxc::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // pos
		D3DVSD_SKIP(4),                 // skip normal, color
		D3DVSD_REG(1, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_STREAM(1),
		D3DVSD_REG(2, D3DVSDT_FLOAT3),  // pos
		D3DVSD_SKIP(4),                 // skip normal, color
		D3DVSD_REG(3, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v2, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"mul r0, v1, c4.x      ; Pos1 * B                  \n"
		"mad r0, v3, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendPosNmlClr::BlendPosNmlClr()
{
	m_wFlags = BLEND_POS | BLEND_NML | BLEND_CLR;
	m_szTestName = _T("Blend Positions / Normals / Colors");
	m_szCommandKey = _T("PosNmlClr");
}

BlendPosNmlClr::~BlendPosNmlClr()
{
}

bool BlendPosNmlClr::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // pos
		D3DVSD_REG(1, D3DVSDT_FLOAT3),  // normal
		D3DVSD_REG(2, D3DVSDT_PACKEDBYTE),   // color

		D3DVSD_STREAM(1),
		D3DVSD_REG(3, D3DVSDT_FLOAT3),  // pos
		D3DVSD_REG(4, D3DVSDT_FLOAT3),  // normal
		D3DVSD_REG(5, D3DVSDT_PACKEDBYTE),   // color

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v3, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"mul r0, v1, c4.x      ; Pos1 * B                  \n"
		"mad r0, v4, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"mul r0, v2, c4.x      ; Pos1 * B                  \n"
		"mad r0, v5, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendPosNmlTxc::BlendPosNmlTxc()
{
	m_wFlags = BLEND_POS | BLEND_NML | BLEND_TXC;
	m_szTestName = _T("Blend Positions / Normals / Texture Coords");
	m_szCommandKey = _T("PosNmlTxc");
}

BlendPosNmlTxc::~BlendPosNmlTxc()
{
}

bool BlendPosNmlTxc::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // pos
		D3DVSD_REG(1, D3DVSDT_FLOAT3),  // normal
		D3DVSD_SKIP(1),                 // skip color
		D3DVSD_REG(2, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_STREAM(1),
		D3DVSD_REG(3, D3DVSDT_FLOAT3),  // pos
		D3DVSD_REG(4, D3DVSDT_FLOAT3),  // normal
		D3DVSD_SKIP(1),                 // skip color
		D3DVSD_REG(5, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v3, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"mul r0, v1, c4.x      ; Pos1 * B                  \n"
		"mad r0, v4, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"mul r0, v2, c4.x      ; Pos1 * B                  \n"
		"mad r0, v5, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendPosNmlClrTxc::BlendPosNmlClrTxc()
{
	m_wFlags = BLEND_POS | BLEND_NML | BLEND_CLR | BLEND_TXC;
	m_szTestName = _T("Blend Positions / Normals / Colors / Texture Coords");
	m_szCommandKey = _T("PosNmlClrTxc");
}

BlendPosNmlClrTxc::~BlendPosNmlClrTxc()
{
}

bool BlendPosNmlClrTxc::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // pos
		D3DVSD_REG(1, D3DVSDT_FLOAT3),  // normal
		D3DVSD_REG(2, D3DVSDT_PACKEDBYTE),   // color
		D3DVSD_REG(3, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_STREAM(1),
		D3DVSD_REG(4, D3DVSDT_FLOAT3),  // pos
		D3DVSD_REG(5, D3DVSDT_FLOAT3),  // normal
		D3DVSD_REG(6, D3DVSDT_PACKEDBYTE),   // color
		D3DVSD_REG(7, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendNmlClr::BlendNmlClr()
{
	m_wFlags = BLEND_NML | BLEND_CLR;
	m_szTestName = _T("Blend Normals / Colors");
	m_szCommandKey = _T("NmlClr");
}

BlendNmlClr::~BlendNmlClr()
{
}

bool BlendNmlClr::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_SKIP(3),                 // skip pos
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // normal
		D3DVSD_REG(1, D3DVSDT_PACKEDBYTE),   // color

		D3DVSD_STREAM(1),
		D3DVSD_SKIP(3),                 // skip pos
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // normal
		D3DVSD_REG(1, D3DVSDT_PACKEDBYTE),   // color

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendNmlTxc::BlendNmlTxc()
{
	m_wFlags = BLEND_NML | BLEND_TXC;
	m_szTestName = _T("Blend Normals / Texture Coords");
	m_szCommandKey = _T("NmlTxc");
}

BlendNmlTxc::~BlendNmlTxc()
{
}

bool BlendNmlTxc::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_SKIP(3),                 // skip pos
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // normal
		D3DVSD_SKIP(1),                 // skip color
		D3DVSD_REG(1, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_STREAM(1),
		D3DVSD_SKIP(3),                 // skip pos
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // normal
		D3DVSD_SKIP(1),                 // skip color
		D3DVSD_REG(1, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendNmlClrTxc::BlendNmlClrTxc()
{
	m_wFlags = BLEND_NML | BLEND_CLR | BLEND_TXC;
	m_szTestName = _T("Blend Normals / Colors / Texture Coords");
	m_szCommandKey = _T("NmlClrTxc");
}

BlendNmlClrTxc::~BlendNmlClrTxc()
{
}

bool BlendNmlClrTxc::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_SKIP(3),                 // skip pos
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // normal
		D3DVSD_REG(1, D3DVSDT_PACKEDBYTE),   // color
		D3DVSD_REG(2, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_STREAM(1),
		D3DVSD_SKIP(3),                 // skip pos
		D3DVSD_REG(0, D3DVSDT_FLOAT3),  // normal
		D3DVSD_REG(1, D3DVSDT_PACKEDBYTE),   // color
		D3DVSD_REG(2, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------

BlendClrTxc::BlendClrTxc()
{
	m_wFlags = BLEND_CLR | BLEND_TXC;
	m_szTestName = _T("Blend Colors / Texture Coords");
	m_szCommandKey = _T("ClrTxc");
}

BlendClrTxc::~BlendClrTxc()
{
}

bool BlendClrTxc::CreateShader(void)
{
	DWORD decl[] = {
		D3DVSD_STREAM(0),
		D3DVSD_SKIP(6),                 // skip pos, normal
		D3DVSD_REG(0, D3DVSDT_PACKEDBYTE),   // color
		D3DVSD_REG(1, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_STREAM(1),
		D3DVSD_SKIP(6),                 // skip pos, normal
		D3DVSD_REG(0, D3DVSDT_PACKEDBYTE),   // color
		D3DVSD_REG(1, D3DVSDT_FLOAT2),  // texture coords

		D3DVSD_END()
	};

	char pShader[] =
		"; do blending first                               \n"
		"mul r0, v0, c4.x      ; Pos1 * B                  \n"
		"mad r0, v1, c4.y, r0  ; Pos2 * (1-B) + Pos1 * B   \n"
		"; transform                                       \n"
		"m4x4 r0, r0, c0                                   \n";

	return SetupShader(decl, pShader);
}

// --------------------------------------------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\vblend.h ===
// =======================================================================================
//
//  VBlend.h
//
//  Original Code: Eron Hennessey
//
//  Copyright (C) 2000 Microsoft Corporation.  All Rights Reserved.
//
//  -------------------------------------------------------------------------------------- 
// 
//  Minimun DX Version: 8
//
// ======================================================================================= 

#ifndef __VBLEND_H__
#define __VBLEND_H__

//#include "CD3DTest.h"
//#include <d3d8.h>

//USETESTFRAME

#define SPACING 50.0f

// ---------------------------------------------------------------------------------------
//  CVERTEX definition - this will be used to store the vertices
// ---------------------------------------------------------------------------------------

const DWORD FVF_CVERTEX_ = D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_TEX1|D3DFVF_DIFFUSE;
struct CVERTEX_ {
	D3DVALUE x, y, z;
	D3DVALUE nx, ny, nz;
	DWORD    color;
	D3DVALUE tu, tv;
};

//const DWORD FVF_VERTEX = D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_TEX1;
struct VERTEX_ {
	D3DVALUE x, y, z;
	D3DVALUE nx, ny, nz;
	D3DVALUE tu, tv;
};

// ---------------------------------------------------------------------------------------
//  Other constants
// ---------------------------------------------------------------------------------------

const int  MAX_TESTS = 20;

const WORD BLEND_POS = 0x0001;
const WORD BLEND_NML = 0x0002;
const WORD BLEND_CLR = 0x0004;
const WORD BLEND_TXC = 0x0008;

// ---------------------------------------------------------------------------------------
// Class definition
// ---------------------------------------------------------------------------------------

class CVBlend : public CD3DTest
{
protected:
	WORD          m_wFlags;

	DWORD         m_hShader;
	UINT          m_nVertices;
	UINT          m_nIndices;

	float         m_fBlendFactor;

	CVertexBuffer8 *m_pVBO_S, *m_pVBO_R;  // source and reference vertex buffers
	CVertexBuffer8 *m_pVBF_S, *m_pVBF_R;  // same here
	CIndexBuffer8  *m_pIB_S,  *m_pIB_R;   // and likewise for the index buffers

    BOOL            m_bExit;

public:
	CVBlend();
	~CVBlend();

	// Framework functions
	virtual bool SetDefaultMatrices();
	virtual bool SetDefaultMaterials();
	virtual bool SetDefaultLights();
	virtual bool SetDefaultLightStates();
	virtual bool SetDefaultRenderStates();
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
	virtual bool TestTerminate(void);

	virtual bool CreateShader() = 0; // pure virtual, will exist in derived classes

	// all derived classes will call this in CreateShader()
	bool SetupShader(DWORD *pDecl, char *pcsCode);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\modulex.h ===
#define PREPEND_MODULE(Suffix) vblend##Suffix
#define MODULE_STRING "vblend"
#pragma comment(linker, "/include:_vblend_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\tlvertexclip\exe\sources.inc ===
TARGETNAME=TLVClip
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_tlvclp.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_vblend
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    VBlend.cpp \
    groups.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\groups.h ===
// ======================================================================================
// 
//  Groups.h -- group declarations for vblend.exe
//
// ======================================================================================

#ifndef _GROUPS_H_
#define _GROUPS_H_

//#include "VBlend.h"

class BlendPos : public CVBlend
{
public:
	BlendPos();
	~BlendPos();

	virtual bool CreateShader();
};

class BlendNml : public CVBlend
{
public:
	BlendNml();
	~BlendNml();

	virtual bool CreateShader();
};

class BlendClr : public CVBlend
{
public:
	BlendClr();
	~BlendClr();

	virtual bool CreateShader();
};

class BlendTxc : public CVBlend
{
public:
	BlendTxc();
	~BlendTxc();

	virtual bool CreateShader();
};

class BlendPosNml : public CVBlend
{
public:
	BlendPosNml();
	~BlendPosNml();

	virtual bool CreateShader();
};

class BlendPosClr : public CVBlend
{
public:
	BlendPosClr();
	~BlendPosClr();

	virtual bool CreateShader();
};

class BlendPosTxc : public CVBlend
{
public:
	BlendPosTxc();
	~BlendPosTxc();

	bool CreateShader();
};

class BlendPosNmlClr : public CVBlend
{
public:
	BlendPosNmlClr();
	~BlendPosNmlClr();

	virtual bool CreateShader();
};

class BlendPosNmlTxc : public CVBlend
{
public:
	BlendPosNmlTxc();
	~BlendPosNmlTxc();

	virtual bool CreateShader();
};

class BlendPosNmlClrTxc : public CVBlend
{
public:
	BlendPosNmlClrTxc();
	~BlendPosNmlClrTxc();

	virtual bool CreateShader();
};

class BlendNmlClr : public CVBlend
{
public:
	BlendNmlClr();
	~BlendNmlClr(); 

	virtual bool CreateShader();
};

class BlendNmlTxc : public CVBlend
{
public:
	BlendNmlTxc();
	~BlendNmlTxc();

	virtual bool CreateShader();
};

class BlendNmlClrTxc : public CVBlend
{
public:
	BlendNmlClrTxc();
	~BlendNmlClrTxc();

	virtual bool CreateShader();
};

class BlendClrTxc : public CVBlend
{
public:
	BlendClrTxc();
	~BlendClrTxc();

	virtual bool CreateShader();
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\vblend.cpp ===
//#define D3D_OVERLOADS

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "CShapes.h"
#include "VBlend.h"
#include "Groups.h"

// ---------------------------------------------------------------------------------------
//  Global Test and App instance
// ---------------------------------------------------------------------------------------

//CD3DWindowFramework App;

// --------------------------------------------------------------------------------------- 
//  Helper functions
// --------------------------------------------------------------------------------------- 

//bool CopyVB(CVertexBuffer8 *pSrc, CVertexBuffer8 *pDst, DWORD dwSize, DWORD dwCount);
//bool CopyIB(CIndexBuffer8 *pSrc, CIndexBuffer8 *pDst, DWORD dwSize, DWORD dwCount);

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CVBlend*        pVBlend;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 1 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pVBlend = new BlendPos();
                break;
/*
            case 1:
                pVBlend = new BlendNml();
                break;
            case 2:
                pVBlend = new BlendClr();
                break;
            case 3:
                pVBlend = new BlendTxc();
                break;
            case 4:
                pVBlend = new BlendPosNml();
                break;
            case 5:
                pVBlend = new BlendPosClr();
                break;
            case 6:
                pVBlend = new BlendPosTxc();
                break;
            case 7:
                pVBlend = new BlendPosNmlClr();
                break;
            case 8:
                pVBlend = new BlendPosNmlTxc();
                break;
            case 9:
                pVBlend = new BlendPosNmlClrTxc();
                break;
            case 10:
                pVBlend = new BlendNmlClr();
                break;
            case 11:
                pVBlend = new BlendNmlTxc();
                break;
            case 12:
                pVBlend = new BlendNmlClrTxc();
                break;
            case 13:
                pVBlend = new BlendClrTxc();
                break;
*/
        }

        if (!pVBlend) {
            return FALSE;
        }

        // Initialize the scene
        if (!pVBlend->Create(pDisplay)) {
            pVBlend->Release();
            return FALSE;
        }

        bRet = pVBlend->Exhibit(pnExitCode);

        bQuit = pVBlend->AbortedExit();

        // Clean up the scene
        pVBlend->Release();
    }

    return bRet;
}

// --------------------------------------------------------------------------------------- 
//  CVBlend Functions
// ---------------------------------------------------------------------------------------  

CVBlend::CVBlend()
{
	m_wFlags    = 0;
	m_nVertices = 0;
	m_nIndices  = 0;
	m_pVBO_S    = 0; m_pVBO_R = 0;
	m_pVBF_S    = 0; m_pVBF_R = 0;
	m_pIB_S     = 0; m_pIB_R  = 0;

    m_bExit = FALSE;
}

// --------------------------------------------------------------------------------------- 

CVBlend::~CVBlend()
{
}
 
// --------------------------------------------------------------------------------------- 

bool CVBlend::SetDefaultMatrices(void)
{
	D3DMATRIX  Matrix;
	D3DVECTOR  from = { 0.0f, 0.0f, -250.0f };
	D3DVECTOR  at   = { 0.0f, 0.0f, 0.0f };
	D3DVECTOR  up   = { 0.0f, 1.0f, 0.0f };

	Matrix = ProjectionMatrix(1.0f, 1000.0f, TESTFRAME(pi)/4.0f);
	if(!SetTransform(D3DTS_PROJECTION,&Matrix))
		return false;

	Matrix = ViewMatrix(from,at,up);
	if(!SetTransform(D3DTS_VIEW, &Matrix))
		return false;

	Matrix = IdentityMatrix();
	if(!SetTransform(D3DTS_WORLD, &Matrix))
		return false;

	return true;
}

// ----------------------------------------------------------------------------

bool CVBlend::SetDefaultMaterials(void)
{
	D3DMATERIAL8 MaterialData;
    HRESULT hr;

//	pMaterial = CreateMaterial();

	memset(&MaterialData, 0, sizeof(D3DMATERIAL8));

	MaterialData.Diffuse.r  = 1.0f;
	MaterialData.Diffuse.g  = 1.0f;
	MaterialData.Diffuse.b  = 1.0f;
	MaterialData.Specular.r = 1.0f;
	MaterialData.Specular.g = 1.0f;
	MaterialData.Specular.b = 1.0f;
	MaterialData.Power      = 15.0f;

//	pMaterial->SetMaterial(&MaterialData);

//	if(!KeySet(_T("!Material"), true))
//		SetMaterial(pMaterial);
    
    hr = m_pDevice->SetMaterial(&MaterialData);
//	return true;
    return SUCCEEDED(hr);
}


// ----------------------------------------------------------------------------

bool CVBlend::SetDefaultLights(void)
{
	D3DLIGHT8  LightData;
    HRESULT hr1, hr2;

//	pLight1 = CreateLight();
//	pLight2 = CreateLight();
//	pLight3 = CreateLight();

//	if((!pLight1) || (!pLight2) || (!pLight3))
//		return false;

	memset(&LightData, 0, sizeof(D3DLIGHT8));
//	LightData.dwSize = sizeof(D3DLIGHT2);

	LightData.Type           = D3DLIGHT_POINT;
	LightData.Diffuse.r        = 1.0f;
	LightData.Diffuse.g        = 1.0f;
	LightData.Diffuse.b        = 1.0f;
	LightData.Diffuse.a        = 1.0f;
	LightData.Position.x      = -SPACING;
	LightData.Position.y      =  0.0f;
	LightData.Position.z      = -40.0f;
	LightData.Attenuation0    = 0.99f;
	LightData.Attenuation1    = 0.009f;
	LightData.Attenuation2    = 0.001f;
	LightData.Range           = 200.0f;
//	LightData.dwFlags           = D3DLIGHT_ACTIVE;

//	pLight1->SetLight(&LightData);

//	if(!SetLight(0, pLight1))
    hr1 = m_pDevice->SetLight(0, &LightData);
    hr2 = m_pDevice->LightEnable(0, TRUE);
    if (FAILED(hr1) || FAILED(hr2))
	{
		OutputDebugString(_T("CColVert::SetDefaultLights -- Setting light 0 failed\n"));
		Fail();
		return false;
	}

	LightData.Position.x = 0.0f;

//	pLight2->SetLight(&LightData);

//	if(!SetLight(1, pLight2))
    hr1 = m_pDevice->SetLight(1, &LightData);
    hr2 = m_pDevice->LightEnable(1, TRUE);
	{
		OutputDebugString(_T("CColVert::SetDefaultLights -- Setting light 1 failed\n"));
		Fail();
		return false;
	}

	LightData.Position.x = SPACING;

//	pLight3->SetLight(&LightData);

//	if(!SetLight(2, pLight3))
    hr1 = m_pDevice->SetLight(2, &LightData);
    hr2 = m_pDevice->LightEnable(2, TRUE);
	{
		OutputDebugString(_T("CColVert::SetDefaultLights -- Setting light 2 failed\n"));
		Fail();
		return false;
	}

	return true;
}

// ----------------------------------------------------------------------------

bool CVBlend::SetDefaultLightStates(void)
{
	return true;
}

// ----------------------------------------------------------------------------

bool CVBlend::SetDefaultRenderStates(void)
{
	SetRenderState(D3DRENDERSTATE_AMBIENT,RGBA_MAKE(50,50,50,255));
	SetRenderState(D3DRENDERSTATE_COLORVERTEX, (DWORD)true);
	SetRenderState(D3DRENDERSTATE_DIFFUSEMATERIALSOURCE, (DWORD)D3DMCS_COLOR1);
	SetRenderState(D3DRENDERSTATE_SPECULARMATERIALSOURCE, (DWORD)D3DMCS_COLOR2);

	return true;
}
// --------------------------------------------------------------------------------------- 

UINT CVBlend::TestInitialize(void)
{
	//
	// check to ensure the test can run on this config!
	// 

	if(m_dwVersion < 0x0800)
	{
		WriteToLog(_T("VBlend - Test Requires DX8 or better to run!\n"));
		return D3DTESTINIT_SKIPALL;
	}
	if(D3DSHADER_VERSION_MAJOR(m_d3dcaps.VertexShaderVersion) < 1)
	{
		WriteToLog(_T("VBlend - Vertex Shaders not supported by hardware!  Skipping all tests...\n"));
		return D3DTESTINIT_SKIPALL;
	}

	//
	// attempt to set up the test
	//

	SetTestRange(1, MAX_TESTS);

	// create a grid that we'll deform using vertex blending
	CShapes Shape;	

	if(!Shape.NewShape(CS_MESH, 20, 20))
	{
		WriteToLog(_T("Failed to create new grid!  Aborting test...\n"));
		return D3DTESTINIT_ABORT;
	}

	m_nVertices = Shape.m_nVertices;
	m_nIndices  = Shape.m_nIndices;

	// create 3 vertex buffers.  One for the initial state, one for the final state,
	// and one for the blended state.
//	m_pVBO_S = CreateVertexBuffer(FVF_CVERTEX, m_nVertices, 0, false);
	m_pVBO_S = CreateVertexBuffer(m_pDevice, NULL, m_nVertices * GetVertexSize(FVF_CVERTEX_), 0, FVF_CVERTEX_);
//	m_pVBO_R = CreateVertexBuffer(FVF_CVERTEX, m_nVertices, 0, true);
//	m_pVBF_S = CreateVertexBuffer(0, sizeof(CVERTEX) * m_nVertices, 0, false);
	m_pVBF_S = CreateVertexBuffer(m_pDevice, NULL, sizeof(CVERTEX_) * m_nVertices, 0, 0);
//	m_pVBF_R = CreateVertexBuffer(0, sizeof(CVERTEX) * m_nVertices, 0, true);
//	m_pIB_S  = CreateIndexBuffer(m_nIndices, D3DFMT_INDEX16, false);
	m_pIB_S  = CreateIndexBuffer(m_pDevice, Shape.m_pIndices, m_nIndices * sizeof(WORD));
//	m_pIB_R  = CreateIndexBuffer(m_nIndices, D3DFMT_INDEX16, true);

//	if(!m_pVBO_S || !m_pVBO_R || !m_pVBF_S || !m_pVBF_R || !m_pIB_S || !m_pIB_R)
	if(!m_pVBO_S || !m_pVBF_S || !m_pIB_S)
	{
		WriteToLog(_T("Failed to create vertex/index buffers!  Aborting test...\n"));
		return D3DTESTINIT_ABORT;
	}
/*
	// copy the index info into the index buffer
	WORD *pIndices  = 0;

	m_pIB_S->Lock((void**)&pIndices);

	if(pIndices)
	{
		memcpy(pIndices, Shape.m_pIndices, sizeof(WORD) * m_nIndices);
		m_pIB_S->Unlock();  pIndices = 0;
	}
	else
	{
		WriteToLog(_T("Failed to lock index buffer!  Aborting test...\n"));
		return D3DTESTINIT_ABORT;
	}
*/
//	CopyIB(m_pIB_S, m_pIB_R, sizeof(WORD), m_nIndices);

	// now copy the info from the shape into the first vertex buffer.
	CVERTEX_ *pVertices = 0;
	int nR = 255, nG = 0, nB = 0;

//	m_pVBO_S->Lock((void**)&pVertices);
	m_pVBO_S->Lock(0, 0, (BYTE**)&pVertices, 0);

	if(pVertices)
	{
		for(int i = 0; i < m_nVertices; i++)
		{
			nG = (0.5f + pVertices[i].x) * 255;
			nB = (0.5f + pVertices[i].y) * 255;

			pVertices[i].x     = ((VERTEX_*)Shape.m_pVertices)[i].x * 3.0f;
			pVertices[i].y     = ((VERTEX_*)Shape.m_pVertices)[i].y * 3.0f;
			pVertices[i].z     = ((VERTEX_*)Shape.m_pVertices)[i].z * 3.0f;
			pVertices[i].nx    = ((VERTEX_*)Shape.m_pVertices)[i].nx;
			pVertices[i].ny    = ((VERTEX_*)Shape.m_pVertices)[i].ny;
			pVertices[i].nz    = ((VERTEX_*)Shape.m_pVertices)[i].nz;
			pVertices[i].color = D3DCOLOR_RGBA(nR, nG, nB, 255); 
			pVertices[i].tu    = ((VERTEX_*)Shape.m_pVertices)[i].tu;
			pVertices[i].tv    = ((VERTEX_*)Shape.m_pVertices)[i].tv;
		}
		m_pVBO_S->Unlock(); pVertices = 0;
	}

	// copy info from source VB to ref VB.
//	CopyVB(m_pVBO_S, m_pVBO_R, sizeof(CVERTEX), m_nVertices);

	// change the ref VB
//	m_pVBF_S->Lock((void**)&pVertices);
	m_pVBF_S->Lock(0, 0, (BYTE**)&pVertices, 0);

	if(pVertices)
	{
		for(int i = 0; i < m_nVertices; i++)
		{
			nG = (0.5f + pVertices[i].x) * 255;
			nB = (0.5f + pVertices[i].y) * 255;

			pVertices[i].x     = ((VERTEX_*)Shape.m_pVertices)[i].x * 3.0f;
			pVertices[i].y     = ((VERTEX_*)Shape.m_pVertices)[i].y * 3.0f;
			pVertices[i].z     = ((VERTEX_*)Shape.m_pVertices)[i].z * 3.0f;
			pVertices[i].nx    = ((VERTEX_*)Shape.m_pVertices)[i].nx;
			pVertices[i].ny    = ((VERTEX_*)Shape.m_pVertices)[i].ny;
			pVertices[i].nz    = ((VERTEX_*)Shape.m_pVertices)[i].nz;
			pVertices[i].color = D3DCOLOR_RGBA(nR, nG, nB, 255); 
			pVertices[i].tu    = ((VERTEX_*)Shape.m_pVertices)[i].tu;
			pVertices[i].tv    = ((VERTEX_*)Shape.m_pVertices)[i].tv;
		}
		m_pVBF_S->Unlock(); pVertices = 0;
	}

	if(m_wFlags & BLEND_POS)  // blend vertex positions
	{
//		m_pVBF_S->Lock((void**)&pVertices);
		m_pVBF_S->Lock(0, 0, (BYTE**)&pVertices, 0);
		if(pVertices)
		{
			// apply a ripple to the mesh
			for(int i = 0; i < m_nVertices; i++) 
			{
				pVertices[i].z *= (float)cos(pVertices[i].x);
			}
			m_pVBF_S->Unlock(); pVertices = 0;
		}
	}

	if(m_wFlags & BLEND_NML)  // blend vertex normals
	{
//		m_pVBF_S->Lock((void**)&pVertices);
		m_pVBF_S->Lock(0, 0, (BYTE**)&pVertices, 0);
		if(pVertices)
		{
			m_pVBF_S->Unlock(); pVertices = 0;
		}
	}

	if(m_wFlags & BLEND_CLR)  // blend vertex colors
	{
//		m_pVBF_S->Lock((void**)&pVertices);
		m_pVBF_S->Lock(0, 0, (BYTE**)&pVertices, 0);
		if(pVertices)
		{
			m_pVBF_S->Unlock(); pVertices = 0;
		}
	}

	if(m_wFlags & BLEND_TXC)  // blend vertex texture coordinates
	{
//		m_pVBF_S->Lock((void**)&pVertices);
		m_pVBF_S->Lock(0, 0, (BYTE**)&pVertices, 0);
		if(pVertices)
		{
			m_pVBF_S->Unlock(); pVertices = 0;
		}
	}

	// now copy the source VB to the ref VB.
//	CopyVB(m_pVBF_S, m_pVBF_R, sizeof(CVERTEX), m_nVertices);

	if(!CreateShader())
		return D3DTESTINIT_ABORT;

	return D3DTESTINIT_RUN;
}

// --------------------------------------------------------------------------------------- 

bool CVBlend::ClearFrame(void)
{
	return Clear(D3DCOLOR_RGBA(0,0,0,255));
}

// --------------------------------------------------------------------------------------- 
#define TL_DESCWIDTH 256
bool CVBlend::ExecuteTest(UINT uTestNum)
{
	m_fBlendFactor = MAX_TESTS / uTestNum;

	TCHAR tcsTestCase[TL_DESCWIDTH] = {0};

	_stprintf(
		tcsTestCase, _T("%d%% VBO, %d%% VBF"),
		m_fBlendFactor * 100, (1.0f - m_fBlendFactor) * 100);

	// Tell the log that we are starting
	BeginTestCase(tcsTestCase);

	return true;
}

// --------------------------------------------------------------------------------------- 

void CVBlend::SceneRefresh(void)
{
//	DebugOut.Write(_T("CVBlend::SceneRefresh()\n"));

	if(BeginScene())
	{
		struct {
			float TransMatrix[16];
			float BlendConsts[4];
		} Consts = {
			(1, 0, 0, 0,
			 0, 1, 0, 0,
			 0, 0, 1, 0,
			 0, 0, 0, 1),
			(m_fBlendFactor, 1.0f - m_fBlendFactor, 0, 0)
		};

		SetIndices(m_pIB_S, m_pIB_R, 0, 0);
		SetVertexShaderConstant(0, &Consts, 1);
		SetVertexShader(m_hShader);
		m_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, m_nVertices, 0, m_nIndices/3);

		EndScene();
	}
}

// --------------------------------------------------------------------------------------- 

bool CVBlend::ProcessFrame(void)
{
	TCHAR	tcsResult[80] = { 0 };
	static	int nPass = 0;
	static  int nFail = 0;
	bool	bResult;

	// Use the standard 15% comparison
	bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how they did
	if (bResult)
	{
		(m_fIncrementForward) ? nPass++ : nPass--;
		_stprintf(tcsResult, _T("$yPass: %d, Fail: %d"), nPass, nFail);
		Pass();
	}
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		_stprintf(tcsResult, _T("$yPass: %d, Fail: %d"), nPass, nFail);
		Fail();
	}

	WriteStatus(_T("$gOverall Results"), tcsResult);

	EndTestCase();

	return bResult;
}

// --------------------------------------------------------------------------------------- 

bool CVBlend::TestTerminate(void)
{
	ReleaseVertexBuffer(m_pVBO_S); //RELEASE(m_pVBO_R);
	ReleaseVertexBuffer(m_pVBF_S); //RELEASE(m_pVBF_R);
	ReleaseIndexBuffer(m_pIB_S);  //RELEASE(m_pIB_R);

	return true;
}

// ---------------------------------------------------------------------------------------

bool CVBlend::SetupShader(DWORD *pDecl, char *pcsCode)
{
//	DebugOut.Write(_T("CVBlend::SetupShader(%p, %s)\n"), pDecl, pcsCode);

	if(!pcsCode)
	{
//		DebugOut.Write(1, _T("CVBlend::SetupShader - pcsCode is NULL!\n"));
		DebugString(_T("CVBlend::SetupShader - pcsCode is NULL!"));
		return false;
	}

#if 0

	HRESULT      hr        = 0;
	LPD3DXBUFFER pCompiled = 0;
	LPD3DXBUFFER pErrors   = 0;

	hr = D3DXAssembleVertexShader(pcsCode, strlen(pcsCode), &pCompiled, &pErrors);

	if(FAILED(hr))
	{
		WriteToLog(_T("D3DXAssembleVertexShader failed with HRESULT %X\n"), hr);

//		DebugOut.Write(2,
//			_T("CVBlend::SetupShader - D3DXAssembleVertexShader failed with HRESULT %X\n"),
//			hr);
		if(pErrors)
		{
//			DebugOut.Write(2, (char*)pErrors->GetBufferPointer());
			pErrors->Release();
		}

		if(pCompiled)
			pCompiled->Release();

		return false;
	}

	if(!CreateVertexShader(pDecl, (DWORD*)pCompiled->GetBufferPointer(), &m_hShader, 0))
	{
		HRESULT hr = GetLastError();

		WriteToLog(_T("CreateVertexShader failed with HRESULT %X\n"), hr);

//		DebugOut.Write(2,
//			_T("CVBlend::SetupShader - CreateVertexShader failed with HRESULT %X\n"),
//			hr);

		return false;
	}

#else

	HRESULT hr;

    hr = m_pDevice->CreateVertexShaderAsm(pDecl, pcsCode, strlen(pcsCode), &m_hShader, 0);
    if (FAILED(hr)) {
        return false;
    }

#endif // UNDER_XBOX
	
	SetStreamSource(0, m_pVBO_S, m_pVBO_R, sizeof(CVERTEX_), 0);
	SetStreamSource(1, m_pVBF_S, m_pVBF_R, sizeof(CVERTEX_), 0);

	return true;
}

//******************************************************************************
BOOL CVBlend::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CVBlend::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CVBlend::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}

// ---------------------------------------------------------------------------------------
/*
bool CopyVB(CVertexBuffer *pSrc, CVertexBuffer *pDst, DWORD dwSize, DWORD dwCount)
{
	VOID *pVB1 = 0, *pVB2 = 0;

	pSrc->Lock(&pVB1); pDst->Lock(&pVB2);

	if(!pVB1 || !pVB2)
		return false;

	memcpy(pVB2, pVB1, dwSize * dwCount);
	
	pSrc->Unlock(); pDst->Unlock();

	return true;
}

// ---------------------------------------------------------------------------------------

bool CopyIB(CIndexBuffer *pSrc, CIndexBuffer *pDst, DWORD dwSize, DWORD dwCount)
{
	VOID *pIB1 = 0, *pIB2 = 0;

	pSrc->Lock(&pIB1); pDst->Lock(&pIB2);

	if(!pIB1 || !pIB2)
		return false;

	memcpy(pIB2, pIB1, dwSize * dwCount);
	
	pSrc->Unlock(); pDst->Unlock();
	
	return true;
}
*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\vbuffer\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=VBlend
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_vblend.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\VBlend\exe\sources.inc ===
TARGETNAME=VBlend
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\cshapes.lib \
    $(TEST_LIB_PATH)\l_vblend.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\vbuffer\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\vbuffer\modulex.h ===
#define PREPEND_MODULE(Suffix) vbuffer##Suffix
#define MODULE_STRING "vbuffer"
#pragma comment(linker, "/include:_vbuffer_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\vbuffer\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_vbuffr
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    VBuffer.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\vbuffer\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=VBuffer
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_vbuffr.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\vbuffer\vbuffer.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	VBuffer.h
 *
 ***************************************************************************/

#ifndef __VBUFFER_H__
#define __VBUFFER_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

const int TL_NUMWIDTH  = 6;
const int TL_DESCWIDTH = 80;
const int TL_VALWIDTH  = 10;
const int TL_TOTALWIDTH = TL_NUMWIDTH + 3 + TL_DESCWIDTH + TL_VALWIDTH;

// constants
const int   NUMOBJECTS = 6;
const int   FRAMESPEROBJ = 16;
const int   NUMTESTS = (NUMOBJECTS * FRAMESPEROBJ);
const float ROTFACTOR = (2.0f * pi / FRAMESPEROBJ);

struct OBJINFO
{
	D3DPRIMITIVETYPE PrimType;   // primitive type
	UINT  nVertices;  // number of vertices in vertex buffer
	UINT  nStart;     // start of vertices in vertex buffer
	UINT  nIndices;   // number of indices in list
	WORD  *pIndices;  // pointer to indices
	TCHAR tcsName[17];
    CIndexBuffer8* pIBSrc;
};

// Class definition
class CVBufferTest: public TESTFRAME(CD3DTest)
{
private:
	OBJINFO   Objects[NUMOBJECTS];
	OBJINFO   Arrow;

	CVertexBuffer8 *pVBSrc;
	CVertexBuffer8 *pVBRef;

//    CLight        *pLight;
//	CMaterial     *pMaterial;

	UINT          nCurObj;
	UINT          nCurObjFrame;
	TCHAR         tcsTestDesc[TL_DESCWIDTH + 1];

public:
	CVBufferTest();
	~CVBufferTest();

	// Framework functions
	UINT TestInitialize(void);
	bool ClearFrame(void);
	bool ExecuteTest(UINT);
	void SceneRefresh(void);
	bool ProcessFrame(void);
	bool TestTerminate(void);
	bool SetDefaultMatrices(void);
	bool SetDefaultMaterials(void);
	bool SetDefaultLights(void);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\vbuffer\vbuffer.cpp ===
#define STRICT
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "VBuffer.h"
#include "TestShapes.h"

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CVBufferTest*   TestOne;
    BOOL            bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    TestOne = new CVBufferTest();
    if (!TestOne) {
        return FALSE;
    }

    // Initialize the scene
    if (!TestOne->Create(pDisplay)) {
        TestOne->Release();
        return FALSE;
    }

    bRet = TestOne->Exhibit(pnExitCode);

    // Clean up the scene
    TestOne->Release();

    return bRet;
}

// --------------------------------------------------------------------------------------

CVBufferTest::CVBufferTest()
{
	pVBSrc = 0;
	pVBRef = 0;
	nCurObjFrame = 0;
    m_szTestName = TEXT("VBufferTest");
}

// --------------------------------------------------------------------------------------

CVBufferTest::~CVBufferTest()
{
    UINT i;
//	delete pVBSrc;
//	delete pVBRef;
    ReleaseVertexBuffer(pVBSrc);
    for (i = 0; i < NUMOBJECTS; i++) {
        ReleaseIndexBuffer(Objects[i].pIBSrc);
    }
}

// --------------------------------------------------------------------------------------

bool CVBufferTest::SetDefaultMatrices(void)
{
	D3DMATRIX Matrix;
	D3DVECTOR from = cD3DVECTOR(0.0f, 1.5f, -3.0f);
	D3DVECTOR at = cD3DVECTOR(0.0f, 0.0f, 0.0f);
	D3DVECTOR up = cD3DVECTOR(0.0f, 1.0f, 0.0f);

 	Matrix = ProjectionMatrix(1.0f, 10.0f, pi/3.0f);
	SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix);
 
	Matrix = ViewMatrix(from,at,up);
    SetTransform(D3DTRANSFORMSTATE_VIEW, &Matrix);

	Matrix = IdentityMatrix();
    SetTransform(D3DTRANSFORMSTATE_WORLD, &Matrix);

	return true;
}

// --------------------------------------------------------------------------------------

bool CVBufferTest::SetDefaultMaterials(void)
{
	D3DMATERIAL8 MaterialData;
    HRESULT hr;

//	pMaterial = CreateMaterial();

	memset(&MaterialData, 0, sizeof(D3DMATERIAL8));

	MaterialData.Diffuse.r = 1.0f;
	MaterialData.Diffuse.g = 1.0f;
	MaterialData.Diffuse.b = 1.0f;
	MaterialData.Specular.r = 1.0f;
	MaterialData.Specular.g = 1.0f;
	MaterialData.Specular.b = 1.0f;
	MaterialData.Power = 15.0f;
//	MaterialData.dwRampSize = 16;

//	pMaterial->SetMaterial(&MaterialData);

//	SetMaterial(pMaterial);

//    return true;

    hr = m_pDevice->SetMaterial(&MaterialData);
    return (hr == D3D_OK);
}

// --------------------------------------------------------------------------------------

bool CVBufferTest::SetDefaultLights(void)
{
    D3DLIGHT8 LightData;
    HRESULT hr;

//    pLight = CreateLight();

//	if(!pLight)	return false;

    memset(&LightData, 0, sizeof(D3DLIGHT8));
//    LightData.dwSize = sizeof(D3DLIGHT8);

    LightData.Type           = D3DLIGHT_DIRECTIONAL;
    LightData.Diffuse.r        = 1.0f;
    LightData.Diffuse.g        = 1.0f;
    LightData.Diffuse.b        = 1.0f;
    LightData.Diffuse.a        = 0.0f;
	LightData.Direction.x     = 0.577735f;
	LightData.Direction.y     = -0.577735f;
	LightData.Direction.z     = -0.577735f;
//	LightData.Flags           = D3DLIGHT_ACTIVE;

//    pLight->SetLight(&LightData);

//    if(!SetLight(0, pLight))
//    {
//        OutputDebugString(_T("CColVert::SetDefaultLights -- Setting light 0 failed\n"));
//        Fail();
//        return false;
//    }

//    return true;

    hr = m_pDevice->SetLight(0, &LightData);
    if (FAILED(hr)) {
        return false;
    }

    hr = m_pDevice->LightEnable(0, TRUE);
	
	return (hr == D3D_OK);
}

// --------------------------------------------------------------------------------------

UINT CVBufferTest::TestInitialize(void)
{
	D3DVERTEX ArrowVtx[3] = {
		cD3DVERTEX(cD3DVECTOR(0.0f, 0.0f, 0.0f), cD3DVECTOR(0.0f, 0.0f, -1.0f), 0.5f, 0.0f),
		cD3DVERTEX(cD3DVECTOR(0.7f, -1.0f, 0.0f), cD3DVECTOR(0.0f, 0.0f, -1.0f), 1.0f, 1.0f),
		cD3DVERTEX(cD3DVECTOR(-0.7f, -1.0f, 0.0f), cD3DVECTOR(0.0f, 0.0f, -1.0f), 0.0f, 1.0f)
	};
	CTestShapes ts[NUMOBJECTS];
	int nTotalVertices = 3;

	// Setup the Test range 
	SetTestRange(1, NUMTESTS);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// make some shapes
	ts[0].NewShape(TS_POINTGRID);
	_tcscpy(Objects[0].tcsName, _T("point list"));
	ts[1].NewShape(TS_LINES);
	_tcscpy(Objects[1].tcsName, _T("line list"));
	ts[2].NewShape(TS_LINES);
	_tcscpy(Objects[2].tcsName, _T("line strip"));
	ts[3].NewShape(TS_RANDTRIS);
	_tcscpy(Objects[3].tcsName, _T("triangle list"));
	ts[4].NewShape(TS_FANBALL);
	_tcscpy(Objects[4].tcsName, _T("triangle fan"));
	ts[5].NewShape(TS_WAVESTRIP);
	_tcscpy(Objects[5].tcsName, _T("triangle strip"));

	// copy some of the shape info to the INFO structs
	for(int i = 0; i < NUMOBJECTS; i++)
	{
		Objects[i].nStart = nTotalVertices - 1;
		Objects[i].nVertices = ts[i].m_nVertices;
		Objects[i].PrimType = ts[i].m_Type;
		Objects[i].nIndices = ts[i].m_nIndices;
	
		Objects[i].pIndices = (WORD*)calloc(ts[i].m_nIndices, sizeof(WORD));
		if(!Objects[i].pIndices)
		{
			WriteToLog(_T("Failed to allocate memory!\n"));
			return D3DTESTINIT_ABORT;
		}
		else
			memcpy(Objects[i].pIndices, ts[i].m_pIndices, sizeof(WORD) * ts[i].m_nIndices);

        if (ts[i].m_nIndices) {
            Objects[i].pIBSrc = CreateIndexBuffer(m_pDevice, ts[i].m_pIndices, sizeof(WORD) * Objects[i].nVertices);
            if (!Objects[i].pIBSrc) {
                return D3DTESTINIT_ABORT;
            }
        }
        else {
            LPWORD pw;
            int j;
            Objects[i].pIBSrc = CreateIndexBuffer(m_pDevice, NULL, sizeof(WORD) * Objects[i].nVertices);
            if (!Objects[i].pIBSrc) {
                return D3DTESTINIT_ABORT;
            }
            Objects[i].pIBSrc->Lock(0, 0, (LPBYTE*)&pw, NULL);
            for (j = 0; j < Objects[i].nVertices; j++) {
                pw[j] = (WORD)j;
            }
            Objects[i].pIBSrc->Unlock();
        }

		nTotalVertices += ts[i].m_nVertices;
	}

	// setup the main vertex buffers
	{
		D3DVERTEX *pSrcVertices = NULL, *pRefVertices = NULL;
//		pVBSrc = CreateVertexBuffer(D3DFVF_VERTEX, nTotalVertices, 0);
        pVBSrc = CreateVertexBuffer(m_pDevice, NULL, sizeof(D3DVERTEX) * nTotalVertices, 0, D3DFVF_VERTEX);
//		pVBRef = CreateVertexBuffer(D3DFVF_VERTEX, nTotalVertices, D3DVBCAPS_SYSTEMMEMORY);

//		if(!pVBSrc || !pVBRef)
		if(!pVBSrc)
		{
			WriteToLog(_T("Failed to create vertex buffer!\n"));
			return D3DTESTINIT_ABORT;
		}

		nTotalVertices = 0;
//		if(pVBSrc->Lock((PVOID*)&pSrcVertices) && pVBRef->Lock((PVOID*)&pRefVertices))
        if (SUCCEEDED(pVBSrc->Lock(0, 0, (LPBYTE*)&pSrcVertices, 0)))
		{
			for(i = 0; i < NUMOBJECTS; i++)
			{
				memcpy(&(pSrcVertices[nTotalVertices]), ts[i].m_pVertices, sizeof(D3DVERTEX) * ts[i].m_nVertices);
//				memcpy(&(pRefVertices[nTotalVertices]), ts[i].m_pVertices, sizeof(D3DVERTEX) * ts[i].m_nVertices);
				nTotalVertices += ts[i].m_nVertices;
			}
			pVBSrc->Unlock();
//			pVBRef->Unlock();
		}
		else
		{
			WriteToLog(_T("Failed to lock vertex buffer!\n"));
			return D3DTESTINIT_ABORT;
		}
	}

	return D3DTESTINIT_RUN;
}

// --------------------------------------------------------------------------------------

bool CVBufferTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

// --------------------------------------------------------------------------------------

bool CVBufferTest::ExecuteTest(UINT uTestNum)
{
	float     fRot = ROTFACTOR * nCurObjFrame;
	D3DMATRIX Matrix;
	
	// Tell the log that we are starting
	_sntprintf(
		tcsTestDesc, TL_DESCWIDTH, _T("%s, rotated %0.3fr"),
		Objects[nCurObj].tcsName, fRot);

	Matrix = RotateYMatrix(fRot);
    SetTransform(D3DTRANSFORMSTATE_WORLD, &Matrix);

	BeginTestCase(tcsTestDesc);
    return true;
}

// --------------------------------------------------------------------------------------

void CVBufferTest::SceneRefresh(void)
{
    UINT uNumPrimitives;

    switch (Objects[nCurObj].PrimType) {
        case D3DPT_POINTLIST:
            uNumPrimitives = Objects[nCurObj].nIndices;
            break;
        case D3DPT_LINELIST:
            uNumPrimitives = Objects[nCurObj].nIndices / 2;
            break;
        case D3DPT_LINESTRIP:
            uNumPrimitives = Objects[nCurObj].nIndices - 1;
            break;
        case D3DPT_TRIANGLELIST:
            uNumPrimitives = Objects[nCurObj].nIndices / 3;
            break;
        case D3DPT_TRIANGLESTRIP:
        case D3DPT_TRIANGLEFAN:
            uNumPrimitives = Objects[nCurObj].nIndices - 2;
            break;
    }

	if(BeginScene())
	{
        m_pDevice->SetVertexShader(D3DFVF_VERTEX);

        m_pDevice->SetStreamSource(0, pVBSrc, sizeof(VERTEX));
        m_pDevice->SetIndices(Objects[nCurObj].pIBSrc, Objects[nCurObj].nStart);

        m_pDevice->DrawIndexedPrimitive(Objects[nCurObj].PrimType, 
            Objects[nCurObj].nStart, Objects[nCurObj].nVertices,
            0, uNumPrimitives);
/*
		m_pSrcDevice7->DrawIndexedPrimitiveVB(
			Objects[nCurObj].PrimType, pVBSrc->m_pVB7,
			Objects[nCurObj].nStart, Objects[nCurObj].nVertices,
			Objects[nCurObj].pIndices, Objects[nCurObj].nIndices, 0);

		m_pRefDevice7->DrawIndexedPrimitiveVB(
			Objects[nCurObj].PrimType, pVBRef->m_pVB7,
			Objects[nCurObj].nStart, Objects[nCurObj].nVertices,
			Objects[nCurObj].pIndices, Objects[nCurObj].nIndices, 0);
*/
		EndScene();
	}

	nCurObjFrame++;

	if(nCurObjFrame == FRAMESPEROBJ)
	{
		nCurObjFrame = 0;
		nCurObj++;
	}
}

// --------------------------------------------------------------------------------------

bool CVBufferTest::ProcessFrame(void)
{
	TCHAR	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

	// Use the standard 15% comparison
	bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how they did
	if (bResult)
	{
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
		Pass();
	}
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
		Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

	EndTestCase();

    return bResult;
}

// --------------------------------------------------------------------------------------

bool CVBufferTest::TestTerminate(void)
{
	// Cleanup texture & image data
	SetTexture(0, NULL);
//	RELEASE(pMaterial);
//	RELEASE(pLight);
	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\Matrix.h ===
//////////////////////////////////////////////////////////////////////
// Matrix.h: interface for the CMatrix class.
//////////////////////////////////////////////////////////////////////

//#include <windows.h>
//#define D3D_OVERLOADS
//#include <d3d.h>

#define PI ((float)3.14159265358979)

class CMatrix  
{
public:
	CMatrix();
	virtual ~CMatrix();

	void Clear();
	void Identity();
	void RotatePitch(float Deg);
	void RotateYaw(float Deg);
	void RotateRoll(float Deg);
	void Translate(D3DVECTOR Position);

	D3DXMATRIX m_Matrix;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\vbuffer\exe\sources.inc ===
TARGETNAME=VBuffer
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\cshapes.lib \
    $(TEST_LIB_PATH)\testshapes.lib \
    $(TEST_LIB_PATH)\l_vbuffr.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\modulex.h ===
#define PREPEND_MODULE(Suffix) volume##Suffix
#define MODULE_STRING "volume"
#pragma comment(linker, "/include:_volume_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\Matrix.cpp ===
//////////////////////////////////////////////////////////////////////
// Matrix.cpp: implementation of the CMatrix class.
//////////////////////////////////////////////////////////////////////

#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Matrix.h"

CMatrix::CMatrix()
{
	Clear();
}

CMatrix::~CMatrix()
{
}

void CMatrix::Clear()
{
	ZeroMemory(&m_Matrix,sizeof(m_Matrix));
}

void CMatrix::Identity()
{
	Clear();
	m_Matrix._11=m_Matrix._22=m_Matrix._33=m_Matrix._44=1.0f;
}

void CMatrix::RotatePitch(float Deg)
{
	CMatrix RotateMatrix;

	RotateMatrix.Identity();
	RotateMatrix.m_Matrix._22=(float)cos((double)Deg*PI/180);
	RotateMatrix.m_Matrix._23=(float)sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._32=(float)-sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._33=(float)cos((double)Deg*PI/180);

	D3DXMatrixMultiply((D3DXMATRIX*)&m_Matrix,(D3DXMATRIX*)&(RotateMatrix.m_Matrix),(D3DXMATRIX*)&m_Matrix);
}

void CMatrix::RotateYaw(float Deg)
{
	CMatrix RotateMatrix;

	RotateMatrix.Identity();
	RotateMatrix.m_Matrix._11=(float)cos((double)Deg*PI/180);
	RotateMatrix.m_Matrix._13=(float)-sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._31=(float)sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._33=(float)cos((double)Deg*PI/180);

	D3DXMatrixMultiply((D3DXMATRIX*)&m_Matrix,(D3DXMATRIX*)&(RotateMatrix.m_Matrix),(D3DXMATRIX*)&m_Matrix);
}

void CMatrix::RotateRoll(float Deg)
{
	CMatrix RotateMatrix;

	RotateMatrix.Identity();
	RotateMatrix.m_Matrix._11=(float)cos((double)Deg*PI/180);
	RotateMatrix.m_Matrix._12=(float)sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._21=(float)-sin((double)Deg*PI/180);
	RotateMatrix.m_Matrix._22=(float)cos((double)Deg*PI/180);

	D3DXMatrixMultiply((D3DXMATRIX*)&m_Matrix,(D3DXMATRIX*)&(RotateMatrix.m_Matrix),(D3DXMATRIX*)&m_Matrix);
}

void CMatrix::Translate(D3DVECTOR Position)
{
	CMatrix TranslateMatrix;

	TranslateMatrix.Identity();
	TranslateMatrix.m_Matrix._41=Position.x;
	TranslateMatrix.m_Matrix._42=Position.y;
	TranslateMatrix.m_Matrix._43=Position.z;

	D3DXMatrixMultiply((D3DXMATRIX*)&m_Matrix,(D3DXMATRIX*)&(TranslateMatrix.m_Matrix),(D3DXMATRIX*)&m_Matrix);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\draw.cpp ===
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Volume.h"

// Sphere information
#define SPH_NUM 20
#define PI ((float)3.14159265358979)
#define D2R ((float)0.0174532925199433)
#define R2D ((float)57.2957795130823)
#define SPH_TRIS (2*(SPH_NUM*2)+(SPH_NUM-2)*(SPH_NUM*4))
#define SPH_VTXS (SPH_TRIS*3)
#define SPH_RADIUS (2.0f)

//************************************************************************
// Internal API:    Draw
//
// Purpose:         
//
// Return:          None.
//************************************************************************
/*
void CVolumeTest::Init(void)
{
	VertexList[0].x = 0.0f;
	VertexList[0].y = 1.0f;
	VertexList[0].z = 0.0f;
	VertexList[0].color = 0xffff0000;
	VertexList[0].specular = 0x0;
	VertexList[0].tu = 0.0f;
	VertexList[0].tv = 0.0f;
	VertexList[0].tw = 1.0f;

	VertexList[1].x = 1.0f;
	VertexList[1].y = -1.0f;
	VertexList[1].z = 0.0f;
	VertexList[1].color = 0xff00ff00;
	VertexList[1].specular = 0x0;
	VertexList[1].tu = 1.0f;
	VertexList[1].tv = 0.0f;
	VertexList[1].tw = 0.5f;

	VertexList[2].x = -1.0f;
	VertexList[2].y = -1.0f;
	VertexList[2].z = 0.0f;
	VertexList[2].color = 0xff0000ff;
	VertexList[2].specular = 0x0;
	VertexList[2].tu = 1.0f;
	VertexList[2].tv = 1.0f;
	VertexList[2].tw = 0.0f;

    dwVertexCount = 3;
}
*/
bool CVolumeTest::LoadSphere(void)
{
    int iSph = 0;
    FLOAT fDAngY = ((180.0F/(FLOAT)SPH_NUM)*D2R);
    FLOAT fDAngX = ((360.0F/(FLOAT)(SPH_NUM*2))*D2R);
    FLOAT fDAngY0 = fDAngY;
    FLOAT fDAngY1 = fDAngY0 + fDAngY;

	nVertexMax=SPH_VTXS;
    pTVertex=new(TVertex[nVertexMax]);
    if (!pTVertex) {
        return false;
    }

    if (bTexGen) {
	    pTGVertex=new(TGVertex[nVertexMax]);
        if (!pTGVertex) {
            delete [] pTVertex;
            pTVertex = NULL;
            return false;
        }
    }

    // make middle
    int x, y;
    for(y = 0; y < (SPH_NUM-2); y++) {
        FLOAT y0 = (FLOAT)cos(fDAngY0);
        FLOAT y1 = (FLOAT)cos(fDAngY1);
        FLOAT Rad0 = (FLOAT)sin(fDAngY0);
        FLOAT Rad1 = (FLOAT)sin(fDAngY1);

        for(x = 0; x < (SPH_NUM*2); x++) {
            FLOAT fDAngX0 = (FLOAT)x*fDAngX;
            FLOAT fDAngX1;
            if (x == (SPH_NUM*2-1))
                fDAngX1 = 0.0;
            else
                fDAngX1 = (FLOAT)(x+1)*fDAngX;

            FLOAT x00 = Rad0*(FLOAT)sin(fDAngX0);
            FLOAT x01 = Rad0*(FLOAT)sin(fDAngX1);
            FLOAT x10 = Rad1*(FLOAT)sin(fDAngX0);
            FLOAT x11 = Rad1*(FLOAT)sin(fDAngX1);

            FLOAT z00 = Rad0*(FLOAT)cos(fDAngX0);
            FLOAT z01 = Rad0*(FLOAT)cos(fDAngX1);
            FLOAT z10 = Rad1*(FLOAT)cos(fDAngX0);
            FLOAT z11 = Rad1*(FLOAT)cos(fDAngX1);

            pTVertex[iSph].v.x = SPH_RADIUS*x00;  pTVertex[iSph].v.y = SPH_RADIUS*y0;  pTVertex[iSph].v.z = SPH_RADIUS*z00;
            pTVertex[iSph].n.x = x00; pTVertex[iSph].n.y = y0; pTVertex[iSph].n.z = z00;
            iSph++;

            pTVertex[iSph].v.x = SPH_RADIUS*x10;  pTVertex[iSph].v.y = SPH_RADIUS*y1;  pTVertex[iSph].v.z = SPH_RADIUS*z10;
            pTVertex[iSph].n.x = x10; pTVertex[iSph].n.y = y1; pTVertex[iSph].n.z = z10;
            iSph++;

            pTVertex[iSph].v.x = SPH_RADIUS*x11;  pTVertex[iSph].v.y = SPH_RADIUS*y1;  pTVertex[iSph].v.z = SPH_RADIUS*z11;
            pTVertex[iSph].n.x = x11; pTVertex[iSph].n.y = y1; pTVertex[iSph].n.z = z11;
            iSph++;


            pTVertex[iSph].v.x = SPH_RADIUS*x00;  pTVertex[iSph].v.y = SPH_RADIUS*y0;  pTVertex[iSph].v.z = SPH_RADIUS*z00;
            pTVertex[iSph].n.x = x00; pTVertex[iSph].n.y = y0; pTVertex[iSph].n.z = z00;
            iSph++;

            pTVertex[iSph].v.x = SPH_RADIUS*x11;  pTVertex[iSph].v.y = SPH_RADIUS*y1;  pTVertex[iSph].v.z = SPH_RADIUS*z11;
            pTVertex[iSph].n.x = x11; pTVertex[iSph].n.y = y1; pTVertex[iSph].n.z = z11;
            iSph++;

            pTVertex[iSph].v.x = SPH_RADIUS*x01;  pTVertex[iSph].v.y = SPH_RADIUS*y0;  pTVertex[iSph].v.z = SPH_RADIUS*z01;
            pTVertex[iSph].n.x = x01; pTVertex[iSph].n.y = y0; pTVertex[iSph].n.z = z01;
            iSph++;

        }
        fDAngY0 = fDAngY1;
        fDAngY1 += fDAngY;
    }

    // make top
    fDAngY1 = fDAngY;
    FLOAT y1 = (FLOAT)cos(fDAngY1);
    FLOAT Rad1 = (FLOAT)sin(fDAngY1);
    for(x = 0; x < (SPH_NUM*2); x++) {
        FLOAT fDAngX0 = (FLOAT)x*fDAngX;
        FLOAT fDAngX1;
        if (x == (SPH_NUM*2-1))
            fDAngX1 = 0.0F;
        else
            fDAngX1 = (FLOAT)(x+1)*fDAngX;

        FLOAT x10 = Rad1*(FLOAT)sin(fDAngX0);
        FLOAT x11 = Rad1*(FLOAT)sin(fDAngX1);

        FLOAT z10 = Rad1*(FLOAT)cos(fDAngX0);
        FLOAT z11 = Rad1*(FLOAT)cos(fDAngX1);

        pTVertex[iSph].v.x = 0.0;  pTVertex[iSph].v.y = SPH_RADIUS;  pTVertex[iSph].v.z = 0.0;
        pTVertex[iSph].n.x = 0.0; pTVertex[iSph].n.y = 1.0; pTVertex[iSph].n.z = 0.0;
        iSph++;

        pTVertex[iSph].v.x = SPH_RADIUS*x10;  pTVertex[iSph].v.y = SPH_RADIUS*y1;  pTVertex[iSph].v.z = SPH_RADIUS*z10;
        pTVertex[iSph].n.x = x10; pTVertex[iSph].n.y = y1; pTVertex[iSph].n.z = z10;
        iSph++;

        pTVertex[iSph].v.x = SPH_RADIUS*x11;  pTVertex[iSph].v.y = SPH_RADIUS*y1;  pTVertex[iSph].v.z = SPH_RADIUS*z11;
        pTVertex[iSph].n.x = x11; pTVertex[iSph].n.y = y1; pTVertex[iSph].n.z = z11;
        iSph++;
    }

    // make bottom
    fDAngY1 = fDAngY0;          // remember last value used, so there are no cracks
    y1 = (FLOAT)cos(fDAngY1);
    Rad1 = (FLOAT)sin(fDAngY1);
    for(x = 0; x < (SPH_NUM*2); x++) {
        FLOAT fDAngX0 = (FLOAT)x*fDAngX;
        FLOAT fDAngX1;
        if (x == (SPH_NUM*2-1))
            fDAngX1 = 0.0F;
        else
            fDAngX1 = (FLOAT)(x+1)*fDAngX;

        // to keep the same orientation
        FLOAT x11 = Rad1*(FLOAT)sin(fDAngX0);
        FLOAT x10 = Rad1*(FLOAT)sin(fDAngX1);

        FLOAT z11 = Rad1*(FLOAT)cos(fDAngX0);
        FLOAT z10 = Rad1*(FLOAT)cos(fDAngX1);

        pTVertex[iSph].v.x = 0.0;  pTVertex[iSph].v.y = -SPH_RADIUS;  pTVertex[iSph].v.z = 0.0;
        pTVertex[iSph].n.x = 0.0; pTVertex[iSph].n.y = -1.0; pTVertex[iSph].n.z = 0.0;
        iSph++;

        pTVertex[iSph].v.x = SPH_RADIUS*x10;  pTVertex[iSph].v.y = SPH_RADIUS*y1;  pTVertex[iSph].v.z = SPH_RADIUS*z10;
        pTVertex[iSph].n.x = x10; pTVertex[iSph].n.y = y1; pTVertex[iSph].n.z = z10;
        iSph++;

        pTVertex[iSph].v.x = SPH_RADIUS*x11;  pTVertex[iSph].v.y = SPH_RADIUS*y1;  pTVertex[iSph].v.z = SPH_RADIUS*z11;
        pTVertex[iSph].n.x = x11; pTVertex[iSph].n.y = y1; pTVertex[iSph].n.z = z11;
        iSph++;
    }

    if (bTexGen)
    {
    	for (int i=0;i<nVertexMax;i++)
        {
	    	pTGVertex[i].v = pTVertex[i].v;
	    	pTGVertex[i].n = pTVertex[i].n;
        }
    }
    else
    {
    	for (int i=0;i<nVertexMax;i++)
	    	pTVertex[i].t = pTVertex[i].n;
    }

    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\mipmap.cpp ===
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Volume.h"
#include "Matrix.h"
//#include "cimageloader.h"

//************************************************************************
// MipMap Test functions

CMipVolTest::CMipVolTest()
{
	m_szTestName = TEXT("Volume MipMap");
	m_szCommandKey = TEXT("MipMap");

	// Inidicate that we are a MipMap test
	bMipMap = true;
}

CMipVolTest::~CMipVolTest()
{
}

UINT CMipVolTest::TestInitialize(void)
{
    int i;
    bool bFormats = true;

    // Request all volume formats except bumpmap
//	if (!RequestVolumeFormats(PF_RGB))// | PF_FOURCC | PF_LUMINANCE))
//		bFormats = false;

	// Setup the Test range 
    SetTestRange(1, MAX_TESTS * m_uCommonVolumeFormats);

 	// Make sure we are on at lease DX8
	if (m_dwVersion <= 0x0700)
	{
		WriteToLog("This test requires at least Dx8.\n");
		return D3DTESTINIT_SKIPALL;
	}

    // Check if Volumes are available	
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;

	if (!(dwTextureCaps & D3DPTEXTURECAPS_VOLUMEMAP))
	{
		WriteToLog("Device capability not supported: Texture VolumeMap.\n");
		return D3DTESTINIT_SKIPALL;
	}

    // Check if MipVolumes are available	
	if (!(dwTextureCaps & D3DPTEXTURECAPS_MIPVOLUMEMAP)) //commmented out until framework is fixed
	{
		WriteToLog("Device capability not supported: Texture MipVolumeMap.\n");
		return D3DTESTINIT_SKIPALL;
	}
 
    // Check if any volume formats were available
	if (!bFormats) 
    {
		WriteToLog("No volume formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

    // Load sphere vertices
	if (!LoadSphere()) {
        return D3DTESTINIT_ABORT;
    }

	// Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = 0xffffffff;    // White
	Stripes[1] = 0xffff0000;	// Red
	Stripes[2] = 0xff00ff00;	// Green
	Stripes[3] = 0xff0000ff;	// Blue
	Stripes[4] = 0xffffff00;	// Yellow
	Stripes[5] = 0xffff00ff;	// Magenta
	Stripes[6] = 0xff00ffff;	// Cyan
	Stripes[7] = 0xff808080;    // Grey

	// Setup the colors for the Mip array
//	D3DCOLOR		RedStripes[4];

	RedStripes[0] = 0xffffffff; // White
	RedStripes[1] = 0xffff0000; // Red
	RedStripes[2] = 0xffffffff; // White
	RedStripes[3] = 0xffff0000; // Red

	// Setup the colors for the Mip array
//	D3DCOLOR		GreenStripes[4];

	GreenStripes[0] = 0xffffffff;   // White
	GreenStripes[1] = 0xff00ff00;	// Green
	GreenStripes[2] = 0xffffffff;   // White
	GreenStripes[3] = 0xff00ff00;   // Green

	// Setup the colors for the Mip array
//	D3DCOLOR		BlueStripes[4];

	BlueStripes[0] = 0xffffffff;    // White
	BlueStripes[1] = 0xff0000ff;    // Blue
	BlueStripes[2] = 0xffffffff;    // White
	BlueStripes[3] = 0xff0000ff;    // Blue

    // Setup volume depth
//    for (i=0; i < 3; i++)
//        MipVolImage[i].SetDepth(4);

    // Create the stripe image data
//    CImageLoader    Image;

//    for (i=0; i < MipVolImage[0].GetDepth(); i++)
//    {
//        MipVolImage[0].GetData()[i] = Image.LoadStripes(256,256,4,RedStripes,false); 
//        MipVolImage[1].GetData()[i] = Image.LoadStripes(128,128,4,GreenStripes,false); 
//        MipVolImage[2].GetData()[i] = Image.LoadStripes(64,64,4,BlueStripes,false); 
//    }

	return D3DTESTINIT_RUN;
}

bool CMipVolTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
	int nTest = ((uTestNum-1) / m_uCommonVolumeFormats) + 1;
	float flAngle = 15.0f * (float)nTest;				// Get angle for current test
    DWORD dwWidth, dwHeight, dwDepth, dwMipLevels;
    D3DVECTOR ZVector = {0.0f,0.0f,(nTest + 2 * 1.0f)};
	CMatrix Matrix;
    UINT i;
    CVolumeTexture8* pd3dtv;
    CVolume8 *pd3dvSrc, *pd3dvDst;
    D3DCOLOR* pcStripes[] = {
        RedStripes,
        GreenStripes,
        BlueStripes
    };

	msgString[0] = '\0';
	szStatus[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(pVolTexture);
    pVolTexture = NULL;

	// Cycle the common volume formats
	nVolumeFormat = (uTestNum-1) % m_uCommonVolumeFormats;

    sprintf(msgString,"%sTex: %s",msgString,D3DFmtToString(m_fmtvCommon[nVolumeFormat]));

	// Tell the log that we are starting
	BeginTestCase(msgString);

//    dwWidth = MipVolImage[0].GetSlice(0)->GetWidth();
//    dwHeight = MipVolImage[0].GetSlice(0)->GetHeight();
//    dwDepth = MipVolImage[0].GetDepth();
    dwMipLevels = 3;

	// Create the mipmap volume texture
//	pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,dwMipLevels,CDDS_TEXTURE_VIDEO,MipVolImage);

    pVolTexture = (CVolumeTexture8*)CreateTexture(m_pDevice, 256, 256, 4, m_fmtvCommon[nVolumeFormat], TTYPE_VOLUME | TTYPE_MIPLEVELS(dwMipLevels));
    if (!pVolTexture) {
        return false;
    }

    for (i = 0; i < dwMipLevels; i++) {

        pd3dtv = CreateStripedVolumeTexture(m_pDevice, 256 >> i, 256 >> i, 4, 4, pcStripes[i], 0, false, false, m_fmtvCommon[nVolumeFormat]);
        if (!pd3dtv) {
            return false;
        }

        if (FAILED(pd3dtv->GetVolumeLevel(0, &pd3dvSrc))) {
            ReleaseTexture(pd3dtv);
            return false;
        }

        if (FAILED(pVolTexture->GetVolumeLevel(i, &pd3dvDst))) {
            pd3dvSrc->Release();
            ReleaseTexture(pd3dtv);
            return false;
        }

        D3DXLoadVolumeFromVolume(pd3dvDst->GetIDirect3DVolume8(), NULL, NULL, pd3dvSrc->GetIDirect3DVolume8(), NULL, NULL, D3DX_FILTER_POINT, 0);

        pd3dvDst->Release();
        pd3dvSrc->Release();
        ReleaseTexture(pd3dtv);
    }

    SyncTexture(pVolTexture);

	// Tell log about CreateVolumeTexture failure
	if (NULL == pVolTexture) 
	{
		WriteToLog("CreateVolumeTexture() failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
		return false;
	}

    // Set the valid texture
	SetTexture(0,pVolTexture);
    SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_LINEAR);

    // Setup the world matrix for the translating/rotating sphere
    Matrix.Identity();									
	Matrix.Translate(ZVector);		                       
	Matrix.RotateYaw(flAngle);						
	if (!SetTransform(D3DTS_WORLD,&Matrix.m_Matrix))   
	{
        // Tell the logfile about the SetTransform failure
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
        return false;
	}

    return true;
}

bool CMipVolTest::TestTerminate(void)
{
    CVolumeTest::TestTerminate();

	// Cleanup mip image data
//    for (int i=0; i<3; i++)
//    {
//        for (int j=0; j<MipVolImage[i].GetDepth(); j++)
//        {
//            RELEASE(MipVolImage[i].GetData()[j]);
//        }
//    }

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\Filter.cpp ===
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Volume.h"
#include "Matrix.h"
//#include "cimageloader.h"

#define LEVELS      3   // Mipmap levels to create
#define NUM_TESTS   8

CVolFilter::CVolFilter()
{
	m_szTestName=TEXT("Volume Filter");
	m_szCommandKey=TEXT("Filter");
}

CVolFilter::~CVolFilter()
{
}

UINT CVolFilter::TestInitialize(void)
{
    int i;
    bool bFormats = true;

    // Setup the Test range
	SetTestRange(1, (int)((360.0f / 45.0f) * LEVELS * NUM_TESTS));

 	// Make sure we are on at lease DX8
	if (m_dwVersion <= 0x0700)
	{
		WriteToLog("This test requires at least Dx8.\n");
		return D3DTESTINIT_SKIPALL;
	}

    // Check if Volumes are available	
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;

	if (!(dwTextureCaps & D3DPTEXTURECAPS_VOLUMEMAP))
	{
		WriteToLog("Device capability not supported: Texture VolumeMap.\n");
		return D3DTESTINIT_SKIPALL;
	}
 
    // Check if any volume formats were available
	if (!bFormats) 
    {
		WriteToLog("No volume formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

    // Load sphere vertices
	if (!LoadSphere()) {
        return D3DTESTINIT_ABORT;
    }

    // Setup the colors for the RedStripes array
//	D3DCOLOR		RedStripes[8];

	RedStripes[0] = 0xffffffff; // White
	RedStripes[1] = 0xffff0000;	// Red
	RedStripes[2] = 0xffffffff; // White
	RedStripes[3] = 0xffff0000;	// Red
	RedStripes[4] = 0xffffffff; // White
	RedStripes[5] = 0xffff0000;	// Red
	RedStripes[6] = 0xffffffff; // White
	RedStripes[7] = 0xffff0000;	// Red

	// Setup the colors for the GreenStripes array
//	D3DCOLOR		GreenStripes[8];

	GreenStripes[0] = 0xffffffff;   // White
	GreenStripes[1] = 0xff00ff00;   // Green
	GreenStripes[2] = 0xffffffff;   // White
	GreenStripes[3] = 0xff00ff00;   // Green
	GreenStripes[4] = 0xffffffff;   // White
	GreenStripes[5] = 0xff00ff00;   // Green
	GreenStripes[6] = 0xffffffff;   // White
	GreenStripes[7] = 0xff00ff00;   // Green

	// Setup the colors for the BlueStripes array
//	D3DCOLOR		BlueStripes[8];

	BlueStripes[0] = 0xffffffff;    // White
	BlueStripes[1] = 0xff0000ff;	// Blue
	BlueStripes[2] = 0xffffffff;    // White
	BlueStripes[3] = 0xff0000ff;	// Blue
	BlueStripes[4] = 0xffffffff;    // White
	BlueStripes[5] = 0xff0000ff;	// Blue
	BlueStripes[6] = 0xffffffff;    // White
	BlueStripes[7] = 0xff0000ff;	// Blue

	// Setup the colors for the YellowStripes array
//	D3DCOLOR		YellowStripes[8];

	YellowStripes[0] = 0xffffffff;  // White
	YellowStripes[1] = 0xffffff00;  // Yellow
	YellowStripes[2] = 0xffffffff;  // White
	YellowStripes[3] = 0xffffff00;  // Yellow
	YellowStripes[4] = 0xffffffff;  // White
	YellowStripes[5] = 0xffffff00;  // Yellow
	YellowStripes[6] = 0xffffffff;  // White
	YellowStripes[7] = 0xffffff00;  // Yellow

	// Setup the colors for the MagentaStripes array
//	D3DCOLOR		MagentaStripes[8];

	MagentaStripes[0] = 0xffffffff; // White
	MagentaStripes[1] = 0xffff00ff;	// Magenta
	MagentaStripes[2] = 0xffffffff; // White
	MagentaStripes[3] = 0xffff00ff;	// Magenta
	MagentaStripes[4] = 0xffffffff; // White
	MagentaStripes[5] = 0xffff00ff;	// Magenta
	MagentaStripes[6] = 0xffffffff; // White
	MagentaStripes[7] = 0xffff00ff;	// Magenta

    // Setup volume depths
//    MinVolImage.SetDepth(4);
//    MagVolImage.SetDepth(4);

//    for (i=0; i < LEVELS; i++)
//        MipVolImage[i].SetDepth(4);

    // Create the stripe image data
//    CImageLoader    Image;

//    for (i=0; i < MinVolImage.GetDepth(); i++)
//    {
//        MinVolImage.GetData()[i] = Image.LoadStripes(16,16,8,RedStripes,false);
//    }

//    for (i=0; i < MagVolImage.GetDepth(); i++)
//    {
//        MagVolImage.GetData()[i] = Image.LoadStripes(256,256,8,GreenStripes,false);
//    }

//    for (i=0; i < MipVolImage[0].GetDepth(); i++)
//    {
//        MipVolImage[0].GetData()[i] = Image.LoadStripes(128,128,8,BlueStripes,false); 
//        MipVolImage[1].GetData()[i] = Image.LoadStripes(64,64,8,YellowStripes,false); 
//        MipVolImage[2].GetData()[i] = Image.LoadStripes(32,32,8,MagentaStripes,false); 
//    }

	return D3DTESTINIT_RUN;
}

bool CVolFilter::ExecuteTest(UINT uTestNum)
{
	CMatrix Matrix;
    UINT i;
	int iLevel;
	float flAngle;
    DWORD dwWidth, dwHeight, dwDepth;
    D3DVECTOR ZVector = {0.0f,0.0f,3.0f};
	int nTest = (uTestNum - 1) % (LEVELS * NUM_TESTS);
	int nGroup = (uTestNum - 1) / (LEVELS * NUM_TESTS);
	szStr[0] = '\0';

	// Get the Level
	iLevel = nTest / (UINT)(360.0f / 45.0f);

	// Get the Z distance of the current level
	ZVector.z = ((float)iLevel * LEVELS) + 3.0f;

	// Get the angle of the current test
	flAngle=45.0f*(float)nTest;
	while (flAngle>=360.0f) { flAngle-=360.0f; }

    // Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(pVolTexture);
    pVolTexture = NULL;

    // Check MipVolume cap for mipmap cases
    if (nGroup >= 4)
    {
    	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;

        // Check if MipVolumes are available	
    	if (!(dwTextureCaps & D3DPTEXTURECAPS_MIPVOLUMEMAP)) 
	    {
		    WriteToLog("\nDevice capability not supported: Texture MipVolumeMap.");
            TestFinish(D3DTESTFINISH_SKIPREMAINDER);
	    	return false;
	    }
    }

    // Setup the filter mode
    if (!SetupFilterMode(nGroup))
    {
        SkipTests((UINT)(360.0f / 45.0f) * LEVELS);
	    return false;
    }

	// Create the cubic environment mapping texture
    if (nGroup <= 3)
    {
        // Create the volume texture, using Min image data
        if (nGroup <= 1)
        {
//            dwWidth = MinVolImage.GetSlice(0)->GetWidth();
//            dwHeight = MinVolImage.GetSlice(0)->GetHeight();
//            dwDepth = MinVolImage.GetDepth();

//            pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,1,CDDS_TEXTURE_VIDEO,&MinVolImage);
            pVolTexture = CreateStripedVolumeTexture(m_pDevice, 16, 16, 4, 8, RedStripes, 0, false, false);//, m_fmtvCommon[nVolumeFormat]);
        }
        else    // Create the volume texture, using Mag image data
        {
//            dwWidth = MagVolImage.GetSlice(0)->GetWidth();
//            dwHeight = MagVolImage.GetSlice(0)->GetHeight();
//            dwDepth = MagVolImage.GetDepth();

//            pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,1,CDDS_TEXTURE_VIDEO,&MagVolImage);
            pVolTexture = CreateStripedVolumeTexture(m_pDevice, 256, 256, 4, 8, GreenStripes, 0, false, false);//, m_fmtvCommon[nVolumeFormat]);
        }

    	sprintf(szStr,"%sTexSize: %dx%dx%d, ",szStr,256,256,4);
    }
    else
    {
        CVolumeTexture8* pd3dtv;
        CVolume8 *pd3dvSrc, *pd3dvDst;
        D3DCOLOR* pcStripes[] = {
            BlueStripes,
            YellowStripes,
            MagentaStripes
        };

        // Create the volume texture, using Mip image data
//        dwWidth = MipVolImage[0].GetSlice(0)->GetWidth();
//        dwHeight = MipVolImage[0].GetSlice(0)->GetHeight();
//        dwDepth = MipVolImage[0].GetDepth();

//        pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,LEVELS,CDDS_TEXTURE_VIDEO,MipVolImage);
        pVolTexture = (CVolumeTexture8*)CreateTexture(m_pDevice, 128, 128, 4, D3DFMT_A8R8G8B8, TTYPE_VOLUME | TTYPE_MIPLEVELS(LEVELS));
        if (!pVolTexture) {
            return false;
        }

        for (i = 0; i < LEVELS; i++) {
            pd3dtv = CreateStripedVolumeTexture(m_pDevice, 128 >> i, 128 >> i, 4, 8, pcStripes[i], 0, false, false, D3DFMT_A8R8G8B8);
            if (!pd3dtv) {
                return false;
            }

            if (FAILED(pd3dtv->GetVolumeLevel(0, &pd3dvSrc))) {
                ReleaseTexture(pd3dtv);
                return false;
            }

            if (FAILED(pVolTexture->GetVolumeLevel(i, &pd3dvDst))) {
                pd3dvSrc->Release();
                ReleaseTexture(pd3dtv);
                return false;
            }

            D3DXLoadVolumeFromVolume(pd3dvDst->GetIDirect3DVolume8(), NULL, NULL, pd3dvSrc->GetIDirect3DVolume8(), NULL, NULL, D3DX_FILTER_POINT, 0);

            pd3dvDst->Release();
            pd3dvSrc->Release();
            ReleaseTexture(pd3dtv);
        }

        SyncTexture(pVolTexture);

        // Get the current mip levels dimensions
        dwWidth = 128 >> iLevel;//MipVolImage[iLevel].GetSlice(0)->GetWidth();
        dwHeight = 128 >> iLevel;//MipVolImage[iLevel].GetSlice(0)->GetHeight();
        dwDepth = 4;//MipVolImage[iLevel].GetDepth();

        sprintf(szStr,"%sMipTexSize: %dx%dx%d, ",szStr,dwWidth,dwHeight,dwDepth);
    }

    // Tell the log that we are starting
	sprintf(szStr,"%sLevel %d, Pitch %.2f degrees",szStr,iLevel,flAngle);
	BeginTestCase(szStr);

	// Tell log about CreateVolumeTexture failure
	if (NULL == pVolTexture) 
	{
		WriteToLog("CreateVolumeTexture() failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
		return false;
	}

    // Set the valid texture
	SetTexture(0, pVolTexture);

    // Setup the world matrix for the translating/rotating sphere
    Matrix.Identity();									
	Matrix.Translate(ZVector);		                        
	Matrix.RotatePitch(flAngle);								
	if (!SetTransform(D3DTS_WORLD,&Matrix.m_Matrix))
	{
        // Tell the logfile about the SetTransform failure
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
        return false;
	}

	return true;
}

bool CVolFilter::TestTerminate()
{
    int i, j;

    CVolumeTest::TestTerminate();

	// Cleanup min image data
//    for (i=0; i<MinVolImage.GetDepth(); i++)
//    {
//        RELEASE(MinVolImage.GetData()[i]); 
//    }

	// Cleanup mag image data
//    for (i=0; i<MagVolImage.GetDepth(); i++)
//    {
//        RELEASE(MagVolImage.GetData()[i]); 
//    }

	// Cleanup mip image data
//    for (i=0; i<LEVELS; i++)
//    {
//        for (j=0; j<MipVolImage[i].GetDepth(); j++)
//        {
//            RELEASE(MipVolImage[i].GetData()[j]);
//        }
//    }

	return true;
}

bool CVolFilter::SetupFilterMode(int nMode)
{
    DWORD dwVolumeTextureFilterCaps;

	// Check the caps we are interested in
   	dwVolumeTextureFilterCaps = m_d3dcaps.VolumeTextureFilterCaps;

    switch (nMode)
    {
        case 0:
        case 2:
            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MINFLINEAR))       
            {
                WriteToLog("\nDevice capability not supported: VolumeTextureFilter MinFLinear.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MAGFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MagFPoint.");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_NONE);
       	    sprintf(szStr,"%sFilter: LPN, ",szStr);
            break;
        case 1:
        case 3:
            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MINFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MinFPoint.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MAGFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MagFLinear.");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_NONE);
        	sprintf(szStr,"%sFilter: PLN, ",szStr);
            break;
        case 4:
            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MINFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MinFPoint.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MAGFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MagFPoint.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MIPFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MipFPoint.");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_POINT);
        	sprintf(szStr,"%sFilter: PPP, ",szStr);
            break;
        case 5:
            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MINFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MinFLinear.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MAGFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MagFLinear.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MIPFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MipFPoint.");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_POINT);
        	sprintf(szStr,"%sFilter: LLP, ",szStr);
            break;
        case 6:
            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MINFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MinFPoint.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MAGFPOINT))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MagFPoint.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MIPFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MipFLinear.");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_POINT);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_LINEAR);
        	sprintf(szStr,"%sFilter: PPL, ",szStr);
            break;
        case 7:
            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MINFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MinFLinear.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MAGFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MagFLinear.");
                return false;
            }

            if (!(dwVolumeTextureFilterCaps & D3DPTFILTERCAPS_MIPFLINEAR))       
            {
	            WriteToLog("\nDevice capability not supported: VolumeTextureFilter MipFLinear.");
                return false;
            }

            SetTextureStageState(0,D3DTSS_MINFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MAGFILTER,(DWORD)TEXF_LINEAR);
            SetTextureStageState(0,D3DTSS_MIPFILTER,(DWORD)TEXF_LINEAR);
        	sprintf(szStr,"%sFilter: LLL, ",szStr);
            break;
    }

    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\Blend.cpp ===
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Volume.h"
#include "Matrix.h"
//#include "cimageloader.h"

#define MAX_ANGLES      6
#define MAX_MATERIALS   3
#define BLEND_MODES     5
    
CVolBlend::CVolBlend()
{
	m_szTestName=TEXT("Volume Blend");
	m_szCommandKey=TEXT("Blend");
}

CVolBlend::~CVolBlend()
{
}

bool CVolBlend::SetDefaultRenderStates(void)
{
	SetRenderState(D3DRS_AMBIENT,(DWORD)0xFFFFFFFF);

	// Set the appropriate alpha blending renderstates
	SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
	SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
	SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);

    return true;
}

UINT CVolBlend::TestInitialize(void)
{
    int i;
    bool bFormats = true;
    
	// Request all volume formats except bumpmap
//	if (!RequestVolumeFormats(PF_RGB))// | PF_FOURCC | PF_LUMINANCE))
//		bFormats = false;

    // Setup the Test range
	SetTestRange(1, MAX_ANGLES * m_uCommonVolumeFormats * MAX_MATERIALS * BLEND_MODES);

 	// Make sure we are on at lease DX8
	if (m_dwVersion <= 0x0700)
	{
		WriteToLog("This test requires at least Dx8.\n");
		return D3DTESTINIT_SKIPALL;
	}

    // Check if Volumes are available	
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;

	if (!(dwTextureCaps & D3DPTEXTURECAPS_VOLUMEMAP))
	{
		WriteToLog("Device capability not supported: Texture VolumeMap.\n");
		return D3DTESTINIT_SKIPALL;
	}
 
    // Check if any volume formats were available
	if (!bFormats) 
    {
		WriteToLog("No volume formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

    // Load sphere vertices
	if (!LoadSphere()) {
        return D3DTESTINIT_ABORT;
    }

    // Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = 0xffffffff;    // White
	Stripes[1] = 0xffff0000;	// Red
	Stripes[2] = 0xff00ff00;	// Green
	Stripes[3] = 0xff0000ff;	// Blue
	Stripes[4] = 0xffffff00;	// Yellow
	Stripes[5] = 0xffff00ff;	// Magenta
	Stripes[6] = 0xff00ffff;	// Cyan
	Stripes[7] = 0xff808080;    // Grey

    // Setup volume depth
//    VolImage.SetDepth(8);

    // Create the stripe image data
//    CImageLoader    Image;

//    for (i=0; i<VolImage.GetDepth(); i++)
//    {
//        VolImage.GetData()[i] = Image.LoadStripes(64,64,1,&Stripes[i],false); 
//    }

    // Setup the colors for the AlphaStripes array
//	D3DCOLOR		AlphaStripes[8];

	AlphaStripes[0] = 0x00ffffff;    // White
	AlphaStripes[1] = 0x20ff0000;	// Red
	AlphaStripes[2] = 0x4000ff00;	// Green
	AlphaStripes[3] = 0x7f0000ff;	// Blue
	AlphaStripes[4] = 0x80ffff00;	// Yellow
	AlphaStripes[5] = 0xc0ff00ff;	// Magenta
	AlphaStripes[6] = 0xe000ffff;	// Cyan
	AlphaStripes[7] = 0xff808080;    // Grey

    // Setup volume depth
//    AlphaVolImage.SetDepth(8);

    // Create the AlphaStripe image data
//    CImageLoader    AlphaImage;

//    for (i=0; i<AlphaVolImage.GetDepth(); i++)
//    {
//        AlphaVolImage.GetData()[i] = AlphaImage.LoadStripes(64,64,1,&AlphaStripes[i],false); 
//    }

    return D3DTESTINIT_RUN;
}

bool CVolBlend::ExecuteTest(UINT uTestNum)
{
 	// Initialize some variables
	CMatrix Matrix;
//    CVolumeImage *pTempVolImage;
    D3DCOLOR* pcStripes;
    DWORD dwWidth, dwHeight, dwDepth;
    D3DVECTOR MinZ = {0.0f,0.0f,3.0f};
	int nTest = (uTestNum-1) / m_uCommonVolumeFormats;
    int nAngle = nTest % MAX_ANGLES;
	int nMaterial = nTest / MAX_ANGLES;
	int nBlendMode = nMaterial / MAX_MATERIALS;
	float flAngle = 135.0f * (float)nAngle;				// Get angle for current test
	while (flAngle>=360.0f) { flAngle-=360.0f; }
	szStr[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(pVolTexture);
    pVolTexture = NULL;

	// Cycle the common volume formats
	nVolumeFormat = (uTestNum-1) % m_uCommonVolumeFormats;

    if (!SetupBlendMode(nBlendMode))
    {
		SkipTests(MAX_ANGLES * m_uCommonVolumeFormats * MAX_MATERIALS);
        return false;
    }

    if (!ApplyMaterial((nMaterial % MAX_MATERIALS), (nBlendMode == 4)))
    {
  		TestFinish(D3DTESTFINISH_ABORT);
        return false;
    }

    sprintf(szStr,"%s%.2f degrees, Tex: %s",szStr,flAngle,D3DFmtToString(m_fmtvCommon[nVolumeFormat]));

    // Tell the log that we are starting
    BeginTestCase(szStr);

    // Determine which image data to use
    if ((nMaterial % MAX_MATERIALS) == 0)
        pcStripes = AlphaStripes;
//        pTempVolImage = &AlphaVolImage;
    else
        pcStripes = Stripes;
//        pTempVolImage = &VolImage;

//    dwWidth = pTempVolImage->GetSlice(0)->GetWidth();
//    dwHeight = pTempVolImage->GetSlice(0)->GetHeight();
//    dwDepth = pTempVolImage->GetDepth();
    
    // Create the volume texture
//	pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,1,CDDS_TEXTURE_VIDEO,pTempVolImage);
    pVolTexture = CreateStripedVolumeTexture(m_pDevice, 64, 64, 8, 1, pcStripes, 1, false, false, m_fmtvCommon[nVolumeFormat]);

	// Tell log about CreateVolumeTexture failure
	if (NULL == pVolTexture) 
	{
		WriteToLog("CreateVolumeTexture() failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
		return false;
	}

    // Set the valid texture
	SetTexture(0, pVolTexture);

    // Setup the world matrix for the rotating sphere
    Matrix.Identity();										
	Matrix.Translate(MinZ);		
	Matrix.RotatePitch(flAngle);								
	if (!SetTransform(D3DTS_WORLD,&Matrix.m_Matrix))
	{
        // Tell the logfile about the SetTransform failure
		WriteToLog("SetTransform(World) failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
        return false;
	}

	return true;
}

bool CVolBlend::TestTerminate()
{
    int i;

    CVolumeTest::TestTerminate();

	// Cleanup image data
//    for (i=0; i<VolImage.GetDepth(); i++)
//    {
//        RELEASE(VolImage.GetData()[i]); 
//    }

	// Cleanup alpha image data
//    for (i=0; i<AlphaVolImage.GetDepth(); i++)
//    {
//        RELEASE(AlphaVolImage.GetData()[i]); 
//    }

	return true;
}

bool CVolBlend::ApplyMaterial(int nMaterial, bool bBlack)
{
	D3DMATERIAL8 Material;
    HRESULT      hr;

    // Release previous material
//	RELEASE(pMaterial);

//	pMaterial = CreateMaterial();
//	if (pMaterial == NULL)
//	{
//		WriteToLog("CreateMaterial() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
//        return false;
//	}

	ZeroMemory(&Material,sizeof(D3DMATERIAL8));

    switch (nMaterial)
    {
        case 0:
            {   // Black with alpha
                if (bBlack)
                {
                    Material.Diffuse.a = 0.5f;
	                Material.Ambient.r = 0.0f;
	                Material.Ambient.g = 0.0f;
	                Material.Ambient.b = 0.0f;
            	    sprintf(szStr,"%sBlack (alpha=0.5), ",szStr);
                }
                else // White with alpha
                {
                    Material.Diffuse.a = 0.5f;
	                Material.Ambient.r = 1.0f;
	                Material.Ambient.g = 1.0f;
	                Material.Ambient.b = 1.0f;
            	    sprintf(szStr,"%sWhite (alpha=0.5), ",szStr);
                }
            }
            break;
        case 1:
            {   // Black with no alpha
                if (bBlack)
                {
                    Material.Diffuse.a = 1.0f;
	                Material.Ambient.r = 0.0f;
	                Material.Ambient.g = 0.0f;
	                Material.Ambient.b = 0.0f;
            	    sprintf(szStr,"%sBlack (alpha=1.0), ",szStr);
                }
                else // White with no alpha
                {
                    Material.Diffuse.a = 1.0f;
	                Material.Ambient.r = 1.0f;
	                Material.Ambient.g = 1.0f;
	                Material.Ambient.b = 1.0f;
            	    sprintf(szStr,"%sWhite (alpha=1.0), ",szStr);
                }
            }
            break;
        case 2:
            {   // Red with no alpha
                Material.Diffuse.a = 1.0f;
	            Material.Ambient.r = 1.0f;
	            Material.Ambient.g = 0.0f;
	            Material.Ambient.b = 0.0f;
            	sprintf(szStr,"%sRed (alpha=1.0), ",szStr);
            }
            break;
    }

//	if (!pMaterial->SetMaterial(&Material))
//	{
//		WriteToLog("SetMaterial() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
  //      return false;
//	}

//	if (!SetMaterial(pMaterial))
//	{
//		WriteToLog("SetMaterial() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
//        return false;
//	}

    hr = m_pDevice->SetMaterial(&Material);
    return (hr == D3D_OK);

//    return true;
}

bool CVolBlend::SetupBlendMode(int nMode)
{
	DWORD	dwPasses;
	HRESULT	hResult;

    switch (nMode)
    {
        case 0:
           	sprintf(szStr,"%sDecal, ",szStr);
            SetTextureStageState(0,D3DTSS_COLORARG1, (DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_COLOROP, (DWORD)D3DTOP_SELECTARG1);
            SetTextureStageState(0,D3DTSS_ALPHAARG1, (DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_ALPHAOP, (DWORD)D3DTOP_SELECTARG1);

#ifndef UNDER_XBOX
		    if (!ValidateDevice(&hResult,&dwPasses))
		    {
    		    WriteToLog("\nValidateDevice() failed: TextureOp SelectArg1, HResult = %X.",hResult);
			    return false;
		    }
#endif // !UNDER_XBOX

            break;
        case 1:
           	sprintf(szStr,"%sModulate, ",szStr);
            SetTextureStageState(0,D3DTSS_COLORARG1,(DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_COLORARG2,(DWORD)D3DTA_CURRENT);
            SetTextureStageState(0,D3DTSS_COLOROP,(DWORD)D3DTOP_MODULATE);
            SetTextureStageState(0,D3DTSS_ALPHAARG1,(DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_ALPHAOP,(DWORD)D3DTOP_SELECTARG1);

#ifndef UNDER_XBOX
		    if (!ValidateDevice(&hResult,&dwPasses))
		    {
    		    WriteToLog("\nValidateDevice() failed: TextureOp Modulate, HResult = %X.",hResult);
			    return false;
		    }
#endif // !UNDER_XBOX

            break;
        case 2:
           	sprintf(szStr,"%sDecalAlpha, ",szStr);
            SetTextureStageState(0,D3DTSS_COLORARG1,(DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_COLORARG2,(DWORD)D3DTA_CURRENT);
            SetTextureStageState(0,D3DTSS_COLOROP,  (DWORD)D3DTOP_BLENDTEXTUREALPHA);
            SetTextureStageState(0,D3DTSS_ALPHAARG1,(DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_ALPHAARG2,(DWORD)D3DTA_CURRENT);
            SetTextureStageState(0,D3DTSS_ALPHAOP,  (DWORD)D3DTOP_SELECTARG2);

#ifndef UNDER_XBOX
		    if (!ValidateDevice(&hResult,&dwPasses))
		    {
    		    WriteToLog("\nValidateDevice() failed: TextureOp BlendTextureAlpha, HResult = %X.",hResult);
			    return false;
		    }
#endif // !UNDER_XBOX

            break;
        case 3:
           	sprintf(szStr,"%sModulateAlpha, ",szStr);
            SetTextureStageState(0,D3DTSS_COLORARG1,(DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_COLORARG2,(DWORD)D3DTA_CURRENT);
            SetTextureStageState(0,D3DTSS_COLOROP,  (DWORD)D3DTOP_MODULATE);
            SetTextureStageState(0,D3DTSS_ALPHAARG1,(DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_ALPHAARG2,(DWORD)D3DTA_CURRENT);
            SetTextureStageState(0,D3DTSS_ALPHAOP,  (DWORD)D3DTOP_MODULATE);

#ifndef UNDER_XBOX
		    if (!ValidateDevice(&hResult,&dwPasses))
		    {
    		    WriteToLog("\nValidateDevice() failed: TextureOp Modulate, HResult = %X.",hResult);
			    return false;
		    }
#endif // !UNDER_XBOX

            break;
        case 4:
           	sprintf(szStr,"%sAdd, ",szStr);
            SetTextureStageState(0,D3DTSS_COLORARG1,(DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_COLORARG2,(DWORD)D3DTA_CURRENT);
            SetTextureStageState(0,D3DTSS_COLOROP,  (DWORD)D3DTOP_ADD);
            SetTextureStageState(0,D3DTSS_ALPHAARG1,(DWORD)D3DTA_TEXTURE);
            SetTextureStageState(0,D3DTSS_ALPHAARG2,(DWORD)D3DTA_CURRENT);
            SetTextureStageState(0,D3DTSS_ALPHAOP,  (DWORD)D3DTOP_SELECTARG2);

#ifndef UNDER_XBOX
		    if (!ValidateDevice(&hResult,&dwPasses))
		    {
    		    WriteToLog("\nValidateDevice() failed: TextureOp Add, HResult = %X.",hResult);
			    return false;
		    }
#endif // !UNDER_XBOX

            break;
    }

    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\texture.cpp ===
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Volume.h"
#include "Matrix.h"
//#include "cimageloader.h"

//************************************************************************
// Texture Test functions

CVolTexTest::CVolTexTest()
{
	m_szTestName = TEXT("Volume Texture");
	m_szCommandKey = TEXT("Texture");
}

CVolTexTest::~CVolTexTest()
{
}

UINT CVolTexTest::TestInitialize(void)
{
    bool bFormats = true;

    // Request all volume formats except bumpmap
//	if (!RequestVolumeFormats(PF_FOURCC))//PF_RGB | PF_FOURCC | PF_LUMINANCE))
//	if (!RequestVolumeFormats(PF_RGB))// | PF_FOURCC | PF_LUMINANCE))
//		bFormats = false;

	// Setup the Test range 
    SetTestRange(1, MAX_TESTS * m_uCommonVolumeFormats);

 	// Make sure we are on at lease DX8
	if (m_dwVersion <= 0x0700)
	{
		WriteToLog("This test requires at least Dx8.\n");
		return D3DTESTINIT_SKIPALL;
	}

    // Check if Volumes are available	
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;

	if (!(dwTextureCaps & D3DPTEXTURECAPS_VOLUMEMAP))
	{
		WriteToLog("Device capability not supported: Texture VolumeMap.\n");
		return D3DTESTINIT_SKIPALL;
	}
 
    // Check if any volume formats were available
	if (!bFormats) 
    {
		WriteToLog("No volume formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

    // Load sphere vertices
	if (!LoadSphere()) {
        return D3DTESTINIT_ABORT;
    }

    // Setup the colors for the Stripes array
//	D3DCOLOR		Stripes[8];

	Stripes[0] = 0xffffffff;    // White
	Stripes[1] = 0xffff0000;	// Red
	Stripes[2] = 0xff00ff00;	// Green
	Stripes[3] = 0xff0000ff;	// Blue
	Stripes[4] = 0xffffff00;	// Yellow
	Stripes[5] = 0xffff00ff;	// Magenta
	Stripes[6] = 0xff00ffff;	// Cyan
	Stripes[7] = 0xff808080;    // Grey

    // Setup volume depth
//    VolImage.SetDepth(8);

    // Create the stripe image data
//    CImageLoader    Image;

//    for (int i=0; i<VolImage.GetDepth(); i++)
//    {
//        VolImage.GetData()[i] = Image.LoadStripes(64,64,1,&Stripes[i],false); 
//    }

	return D3DTESTINIT_RUN;
}

bool CVolTexTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
	int nTest = ((uTestNum-1) / m_uCommonVolumeFormats) + 1;
	float flAngle = 15.0f * (float)nTest;				// Get angle for current test
    D3DVECTOR MinZ = {0.0f,0.0f,3.0f};
    DWORD dwWidth, dwHeight, dwDepth;
	CMatrix Matrix;
	msgString[0] = '\0';
	szStatus[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(pVolTexture);
    pVolTexture = NULL;

	// Cycle the common volume formats
	nVolumeFormat = (uTestNum-1) % m_uCommonVolumeFormats;

    sprintf(msgString,"%sTex: %s",msgString,D3DFmtToString(m_fmtvCommon[nVolumeFormat]));

    // Tell the log that we are starting
	BeginTestCase(msgString);

//    dwWidth = VolImage.GetSlice(0)->GetWidth();
//    dwHeight = VolImage.GetSlice(0)->GetHeight();
//    dwDepth = VolImage.GetDepth();

    // Create the volume texture
//	pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,1,CDDS_TEXTURE_VIDEO,&VolImage);

    pVolTexture = CreateStripedVolumeTexture(m_pDevice, 64, 64, 8, 1, Stripes, 1, false, false, m_fmtvCommon[nVolumeFormat]);

	// Tell log about CreateVolumeTexture failure
	if (NULL == pVolTexture) 
	{
		WriteToLog("CreateVolumeTexture() failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
		return false;
	}

    // Set the valid texture
	SetTexture(0, pVolTexture);

    // Setup the world matrix for the rotating sphere
    Matrix.Identity();									
	Matrix.Translate(MinZ);		                        
	Matrix.RotateYaw(flAngle);							
	if (!SetTransform(D3DTS_WORLD,&Matrix.m_Matrix))  
	{
        // Tell the logfile about the SetTransform failure
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
        return false;
	}

    return true;
}

bool CVolTexTest::TestTerminate(void)
{
    CVolumeTest::TestTerminate();

	// Cleanup image data
//    for (int i=0; i<VolImage.GetDepth(); i++)
//    {
//        RELEASE(VolImage.GetData()[i]); 
//    }

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_volume
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    blend.cpp \
    draw.cpp \
    filter.cpp \
    matrix.cpp \
    mipmap.cpp \
    texgen.cpp \
    texture.cpp \
    volume.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\TexGen.cpp ===
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "Volume.h"
#include "Matrix.h"
//#include "cimageloader.h"

CVolTexGen::CVolTexGen()
{
	m_szTestName = TEXT("Volume Texture Generation");
	m_szCommandKey = TEXT("TexGen");

	// Inidicate that we are a TexGen test
    bTexGen = true;
}

CVolTexGen::~CVolTexGen()
{
}

bool CVolTexGen::SetDefaultMatrices(void)
{
    D3DVECTOR MinZ = {0.0f,0.0f,3.0f};
    CMatrix Matrix;

    if (!CVolumeTest::SetDefaultMatrices())
        return false;

    // Translate sphere to min depth
    Matrix.Identity();
	Matrix.Translate(MinZ);		
	if (!SetTransform(D3DTS_WORLD,&Matrix.m_Matrix))
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CVolTexGen::TestInitialize(void)
{
    bool bFormats = true;

    // Setup the Test range
	SetTestRange(1, (int)(360.0f/30.0f) * 3);

 	// Make sure we are on at lease DX8
	if (m_dwVersion <= 0x0700)
	{
		WriteToLog("This test requires at least Dx8.\n");
		return D3DTESTINIT_SKIPALL;
	}

    // Check if Volumes are available	
	DWORD dwTextureCaps = m_d3dcaps.TextureCaps;

	if (!(dwTextureCaps & D3DPTEXTURECAPS_VOLUMEMAP))
	{
		WriteToLog("Device capability not supported: Texture VolumeMap.\n");
		return D3DTESTINIT_SKIPALL;
	}
 
	// Check for the TexGen cap
	DWORD dwVertexProcessingCaps = m_d3dcaps.VertexProcessingCaps;

    if (!(dwVertexProcessingCaps & D3DVTXPCAPS_TEXGEN))
    {
		WriteToLog("Device capability not supported: VertexProcessing TexGen.\n");
		return D3DTESTINIT_SKIPALL;
    }

    // Check if any volume formats were available
	if (!bFormats) 
    {
		WriteToLog("No volume formats found.\n");
		return D3DTESTINIT_SKIPALL;
    }

    // Load sphere vertices
	if (!LoadSphere()) {
        return D3DTESTINIT_ABORT;
    }

	// Setup the colors for the Stripes array
//	DWORD   dwColors[4][4];

//	dwColors[0][0] = 0xff0000ff;    // Blue
//	dwColors[0][1] = 0xffff0000;	// Red
//	dwColors[0][2] = 0xff00ff00;    // Green
//	dwColors[0][3] = 0xffffff00;	// Yellow

//	dwColors[1][0] = 0xffffffff;    // White
//	dwColors[1][1] = 0xffff00ff;	// Magenta
//	dwColors[1][2] = 0xff00ff00;    // Green
//	dwColors[1][3] = 0xff00ffff;	// Cyan

//	dwColors[2][0] = 0xff0000ff;    // Blue
//	dwColors[2][1] = 0xffff0000;	// Red
//	dwColors[2][2] = 0xff00ff00;    // Green
//	dwColors[2][3] = 0xffffff00;	// Yellow

//	dwColors[3][0] = 0xff0000ff;    // Blue
//	dwColors[3][1] = 0xffff0000;	// Red
//	dwColors[3][2] = 0xff00ff00;    // Green
//	dwColors[3][3] = 0xffffff00;	// Yellow

	dwColors[0][0] = 0xffff0000;    // Blue
	dwColors[0][1] = 0xffff0000;	// Red
	dwColors[0][2] = 0xffff0000;    // Green
	dwColors[0][3] = 0xffff0000;	// Yellow

	dwColors[1][0] = 0xff0000ff;    // White
	dwColors[1][1] = 0xff0000ff;	// Magenta
	dwColors[1][2] = 0xff0000ff;    // Green
	dwColors[1][3] = 0xff0000ff;	// Cyan

	dwColors[2][0] = 0xff00ff00;    // Blue
	dwColors[2][1] = 0xff00ff00;	// Red
	dwColors[2][2] = 0xff00ff00;    // Green
	dwColors[2][3] = 0xff00ff00;	// Yellow

	dwColors[3][0] = 0xffffff00;    // Blue
	dwColors[3][1] = 0xffffff00;	// Red
	dwColors[3][2] = 0xffffff00;    // Green
	dwColors[3][3] = 0xffffff00;	// Yellow

    // Setup volume depth
//    VolImage.SetDepth(4);

    // Create the stripe image data
//    CImageLoader    Image;

//    for (int i=0; i<VolImage.GetDepth(); i++)
//    {
//        VolImage.GetData()[i] = Image.LoadGradient(64,64,dwColors[i]); 
//    }

    return D3DTESTINIT_RUN;
}

bool CVolTexGen::ExecuteTest(UINT uTestNum)
{
 	// Initialize some variables
	char szStr[100];
    DWORD dwWidth, dwHeight,dwDepth;
	CMatrix Matrix;
	msgString[0] = '\0';
	szStatus[0] = '\0';
	int nTest = (uTestNum-1) % (int)(360.0f/30.0f);
	float flAngle = 30.0f * (float)nTest;				// Get angle for current test
	while (flAngle>=360.0f) { flAngle-=360.0f; }
	szStr[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	ReleaseTexture(pVolTexture);
    pVolTexture = NULL;

     // Tell the log that we are starting
	sprintf(szStr,"%sYaw %.2f degrees",szStr,flAngle);
 	BeginTestCase(szStr);

//    dwWidth = VolImage.GetSlice(0)->GetWidth();
//    dwHeight = VolImage.GetSlice(0)->GetHeight();
//    dwDepth = VolImage.GetDepth();

    // Create the volume texture
//	pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,1,CDDS_TEXTURE_VIDEO,&VolImage);

    pVolTexture = CreateGradientVolumeTexture(m_pDevice, 64, 64, 4, &dwColors[0][0], 4);

	// Tell log about CreateVolumeTexture failure
	if (NULL == pVolTexture) 
	{
		WriteToLog("CreateVolumeTexture() failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
		return false;
	}

    // Set the valid texture
	SetTexture(0,pVolTexture);

    // Setup the TextureTransform states
    switch ((uTestNum-1) / (int)(360.0f/30.0f))
    {
        case 0: SetTextureStageState(0,D3DTSS_TEXCOORDINDEX,(DWORD)D3DTSS_TCI_CAMERASPACENORMAL);
            	sprintf(szStr,"%sCameraSpaceNormal, ",szStr);
                break;
        case 1: SetTextureStageState(0,D3DTSS_TEXCOORDINDEX,(DWORD)D3DTSS_TCI_CAMERASPACEPOSITION);
            	sprintf(szStr,"%sCameraSpacePosition, ",szStr);
                break;
        case 2: SetTextureStageState(0,D3DTSS_TEXCOORDINDEX,(DWORD)D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR);
            	sprintf(szStr,"%sCameraSpaceReflectionVector, ",szStr);
                break;
    }

    SetTextureStageState(0,D3DTSS_TEXTURETRANSFORMFLAGS,(DWORD)D3DTTFF_COUNT3);

    // Setup the texture matrix for rotating 
    Matrix.Identity();											   
	Matrix.RotateYaw(flAngle);									
	if (!SetTransform(D3DTS_TEXTURE0,&Matrix.m_Matrix)) 
	{
        // Tell the logfile about the SetTransform failure
		WriteToLog("SetTransform(Texture0) failed with HResult = %X.\n",GetLastError());
        UpdateStatus(false);
        return false;
	}

	return true;
}

bool CVolTexGen::TestTerminate()
{
    CVolumeTest::TestTerminate();

	// Cleanup image data
//    for (int i=0; i<VolImage.GetDepth(); i++)
//    {
//        RELEASE(VolImage.GetData()[i]); 
//    }

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\Volume.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "Volume.h"

//#define FVF_LVERTEX ( D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1 | 0x00010000 )

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CVolumeTest*    pVolumeTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 5 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pVolumeTest = new CVolTexTest();    // Volume texture test cases
                break;
            case 1:
                pVolumeTest = new CMipVolTest();    // Volume mipmap texture test cases
                break;
            case 2:
                pVolumeTest = new CVolTexGen();     // Volume texture generation test cases
                break;
            case 3:
                pVolumeTest = new CVolFilter();     // Volume texture filtering test cases
                break;
            case 4:
                pVolumeTest = new CVolBlend();      // Volume texture blending test cases
                break;
        }

        if (!pVolumeTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pVolumeTest->Create(pDisplay)) {
            pVolumeTest->Release();
            return FALSE;
        }

        bRet = pVolumeTest->Exhibit(pnExitCode);

        bQuit = pVolumeTest->AbortedExit();

        // Clean up the scene
        pVolumeTest->Release();
    }

    return bRet;
}

CVolumeTest::CVolumeTest()
{
	// Initialize some variables
//	pMaterial = NULL;
	pTVertex = NULL;
	pTGVertex = NULL;
	pVolTexture = NULL;
	nVertexMax = 0;
    fAngle = 0.0f;
	bMipMap = false;
    bTexGen = false;

    // Disable textures
    m_ModeOptions.fTextures = false;

    // Enable volumes
    m_ModeOptions.fVolumes = true;

    m_bExit = FALSE;
}

CVolumeTest::~CVolumeTest()
{
}

bool CVolumeTest::SetDefaultMaterials(void)
{
	D3DMATERIAL8 Material;
    HRESULT hr;
/*
	pMaterial = CreateMaterial();
	if (pMaterial == NULL)
	{
		WriteToLog("CreateMaterial() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
        return false;
	}
*/
	ZeroMemory(&Material,sizeof(D3DMATERIAL8));

    // No alpha
	Material.Diffuse.a = 1.0f;

    // White 
    Material.Ambient.r = 1.0f;
	Material.Ambient.g = 1.0f;
	Material.Ambient.b = 1.0f;
/*
	if (!pMaterial->SetMaterial(&Material))
	{
		WriteToLog("SetMaterial() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
        return false;
	}

    // Now that the material data has been set,
    // re-set the material so the changes get picked up.
	if (!SetMaterial(pMaterial))
	{
		WriteToLog("SetMaterial() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
        return false;
	}
*/

    hr = m_pDevice->SetMaterial(&Material);
    return (hr == D3D_OK);

	return true;
}

bool CVolumeTest::SetDefaultRenderStates(void)
{
	SetRenderState(D3DRS_AMBIENT,(DWORD)0xFFFFFFFF);

    if (bTexGen)
        SetRenderState(D3DRS_NORMALIZENORMALS,(DWORD)TRUE);

/*
    SetRenderState(D3DRS_DITHERENABLE, (DWORD)FALSE);
    SetRenderState(D3DRS_CLIPPING, (DWORD)FALSE);
    SetRenderState(D3DRS_CULLMODE, (DWORD)D3DCULL_NONE);
    SetRenderState(D3DRS_LIGHTING, (DWORD)FALSE);
//    SetRenderState(D3DRS_ZENABLE, (DWORD)FALSE);
//    SetRenderState(D3DRS_ZWRITEENABLE, (DWORD)FALSE);

  //  SetStreamSource(0, m_pVB, sizeof(LVERTEX));
//    SetVertexShader( FVF_LVERTEX );

    SetTextureStageState(0, D3DTSS_COLOROP, (DWORD)D3DTOP_SELECTARG1);
    SetTextureStageState(0, D3DTSS_COLORARG1, (DWORD)D3DTA_TEXTURE);
    SetTextureStageState(0, D3DTSS_COLORARG2, (DWORD)D3DTA_DIFFUSE);
    SetTextureStageState(0, D3DTSS_ALPHAOP, (DWORD)D3DTOP_SELECTARG1);
    SetTextureStageState(0, D3DTSS_ALPHAARG1, (DWORD)D3DTA_TEXTURE);
    SetTextureStageState(0, D3DTSS_ALPHAARG2, (DWORD)D3DTA_DIFFUSE);

    if (bMipMap)
    {
        SetTextureStageState(0, D3DTSS_MIPFILTER, (DWORD)TEXF_POINT);
//        SetTextureStageState(0, D3DTSS_MINFILTER, (DWORD)TEXF_LINEAR);
//        SetTextureStageState(0, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
    }
*/
	return true;
}

bool CVolumeTest::SetDefaultMatrices(void)
{
	D3DMATRIX Matrix;

	Matrix=ProjectionMatrix(pi/2.0f,320.0f/280.0f,1.0f,50.0f);
	if (!SetTransform(D3DTS_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

	Matrix=IdentityMatrix();
	if (!SetTransform(D3DTS_WORLD,&Matrix))
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

	Matrix=IdentityMatrix();
	if (!SetTransform(D3DTS_VIEW,&Matrix))
	{
		WriteToLog("SetTransform(ViewMatrix) failed with HResult = %X.\n",GetLastError());
        return false;
	}

    if (bTexGen)
    {
	    Matrix=IdentityMatrix();
	    if (!SetTransform(D3DTS_TEXTURE0,&Matrix))
	    {
		    WriteToLog("SetTransform(Texture0) failed with HResult = %X.\n",GetLastError());
            return false;
	    }
    }

	return true;
}

//bool CVolumeTest::ClearFrame(void)
//{
//	return Clear(RGBA_MAKE(0,0,0,255));
//}
/*
bool CVolumeTest::ExecuteTest(UINT uTestNum)
{
	// Initialize some variables
	int nTest = ((uTestNum-1) / m_uCommonVolumeFormats) + 1;
	float flAngle = 15.0f * (float)nTest;				// Get angle for current test
    DWORD dwWidth, dwHeight, dwMipLevels;
    DWORD dwDepth = 4;
	CMatrix Matrix;
	msgString[0] = '\0';
	szStatus[0] = '\0';

	// Cleanup previous texture
	SetTexture(0, NULL);
	RELEASE(pVolTexture);

//    fAngle = (nTest-1) * (2.0f*3.141592654f / 90.0f);

	// Cycle the common volume formats
	m_pMode->nVolumeFormat = (uTestNum-1) % m_uCommonVolumeFormats;

    if (bMipMap)
    {
        dwWidth = pMipImage[0]->GetWidth();
        dwHeight = pMipImage[0]->GetHeight();
        dwMipLevels = 3;

	    // Create the mipmap texture
	    pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,dwMipLevels,CDDS_TEXTURE_VIDEO,pMipImage);
    }
    else
    {
        dwWidth = pImage->GetWidth();
        dwHeight = pImage->GetHeight();
        dwMipLevels = 1;

        // Create the texture
	    pVolTexture = CreateVolumeTexture8(dwWidth,dwHeight,dwDepth,dwMipLevels,CDDS_TEXTURE_VIDEO,&pImage);
    }

	// Tell the framework what texture to use
	if (NULL != pVolTexture) 
	{
        D3DVECTOR MinZ = {0.0f,0.0f,3.0f};

		SetTexture(0,pVolTexture);

        Matrix.Identity();									// Load Identity matrix
	    Matrix.Translate(MinZ);		                        // Translate sphere to min depth
	    Matrix.RotateYaw(flAngle);							// Rotate
	    if (!SetTransform(D3DTS_WORLD,&Matrix.m_Matrix))    // Set world matrix
	    {
		    WriteToLog("SetTransform(WorldMatrix) failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
		    TestFinish(D3DTESTFINISH_ABORT);
            return false;
	    }

        sprintf(msgString, "%sTex: ",msgString);
		GetTexFmtDesc(&m_pCommonVolumeFormats[m_pMode->nVolumeFormat].ddpfPixelFormat,msgString+strlen(msgString),60-strlen(msgString));
	}
	else
	{
		WriteToLog("CreateVolumeTexture() failed with HResult = %s.\n",GetHResultString(GetLastError()).c_str());
		TestFinish(D3DTESTFINISH_ABORT);
		return false;
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}
*/
void CVolumeTest::SceneRefresh(void)
{
	if (BeginScene())
	{
        // Rotate triangle about Y axis before drawing
/*        float fSin = (float) sin(fAngle);
        float fCos = (float) cos(fAngle);
        LVERTEX verts[3];
    
        memcpy( verts, VertexList, sizeof(LVERTEX)*dwVertexCount );
        
        for (int i = 0; i < dwVertexCount; i += 1)
        {
            verts[i].x = VertexList[i].x * fCos - VertexList[i].z * fSin;
            verts[i].y = VertexList[i].y;
            verts[i].z = VertexList[i].x * fSin + VertexList[i].z * fCos;

            verts[i].tu = VertexList[i].tu * fCos - VertexList[i].tw * fSin;
            verts[i].tv = VertexList[i].tv;
            verts[i].tw = VertexList[i].tu * fSin + VertexList[i].tw * fCos;

            // Push back the triangle by 0.5
            verts[i].z += 0.5f;
        }

        sprintf(szStatus, "%sZ: (%.2f, %.2f, %.2f), TW: (%.1f,%.1f,%.1f)",szStatus,verts[0].z,verts[1].z,verts[2].z,verts[0].tw,verts[1].tw,verts[2].tw);
     
        // Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,FVF_LVERTEX,verts,dwVertexCount,NULL,0,0);
*/
        if (bTexGen)
            RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_XYZ|D3DFVF_NORMAL,pTGVertex,nVertexMax,NULL,0,NULL);
        else     
            RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_TEX1|D3DFVF_TEXCOORDSIZE3(0),pTVertex,nVertexMax,NULL,0,NULL);

        EndScene();
	}	
}

bool CVolumeTest::ProcessFrame(void)
{
    bool	bResult;

	// Use the standard 15% comparison
	bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how they did
    UpdateStatus(bResult);

    return bResult;
}

bool CVolumeTest::TestTerminate(void)
{
    // Cleanup vertex data
	if (pTVertex!=NULL) 
		delete []pTVertex;

    if (pTGVertex!=NULL)
		delete []pTGVertex;

    // Cleanup material
//	RELEASE(pMaterial);

    // Cleanup texture
	SetTexture(0, NULL);
    ReleaseTexture(pVolTexture);

	return true;
}

void CVolumeTest::UpdateStatus(bool bResult)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;

	// Tell the logfile how they did
	if (bResult)
	{
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
		Pass();
	}
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
		Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);
}

//******************************************************************************
BOOL CVolumeTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CVolumeTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CVolumeTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=volume
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_volume.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\modulex.h ===
#define PREPEND_MODULE(Suffix) wbuffer##Suffix
#define MODULE_STRING "wbuffer"
#pragma comment(linker, "/include:_wbuffer_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\Volume.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	Volume.h
 *
 ***************************************************************************/

#ifndef __VOLUMETEST_H__
#define __VOLUMETEST_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

const int MAX_TESTS = 50;
const int MAX_MIP_TESTS = 100;

struct TVertex {									// Cubemap vertex with 3D texture coords
	D3DVECTOR v;
	D3DVECTOR n;
	D3DVECTOR t;
};

struct TGVertex {									// Cubemap vertex without 3D texture coords
	D3DVECTOR v;
	D3DVECTOR n;
};

// Class definition
class CVolumeTest: public TESTFRAME(CD3DTest)
{
    // Data
	public:

//    struct LVERTEX {
//        D3DVALUE     x;             /* Homogeneous coordinates */
//        D3DVALUE     y;
//        D3DVALUE     z;
//        D3DCOLOR     color;         /* Vertex color */
//        D3DCOLOR     specular;      /* Specular component of vertex */
//        D3DVALUE     tu;            /* Texture coordinates */
//        D3DVALUE     tv;
//        D3DVALUE     tw;
//    };

//	LVERTEX         VertexList[3];
//	CMaterial *     pMaterial;
	TVertex *       pTVertex;							// Sphere vertices with texture vectors
	TGVertex *      pTGVertex;							// Sphere vertices without texture vectors
	int             nVertexMax;
    DWORD           dwVertexCount;
	CVolumeTexture8 *pVolTexture;
	bool			bMipMap;
    bool            bTexGen;
    float           fAngle;
    char 	        msgString[80];
	char 			szStatus[80];

    int             nVolumeFormat;
	D3DCOLOR		Stripes[8];
	D3DCOLOR		AlphaStripes[8];
	D3DCOLOR		RedStripes[8];
	D3DCOLOR		GreenStripes[8];
	D3DCOLOR		BlueStripes[8];
	D3DCOLOR		YellowStripes[8];
	D3DCOLOR		MagentaStripes[8];
	DWORD           dwColors[4][4];

    BOOL            m_bExit;

	public:
	CVolumeTest();
	~CVolumeTest();

	// Framework functions
    virtual bool SetDefaultMaterials(void);
    virtual bool SetDefaultRenderStates(void);
    virtual bool SetDefaultMatrices(void);
//	virtual bool ClearFrame(void);
//	virtual bool ExecuteTest(UINT);
    virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
    virtual bool TestTerminate(void);

    // Helper functions
    bool LoadSphere(void);
    void UpdateStatus(bool);

    virtual BOOL    AbortedExit(void);

protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Texture Class definitions
class CVolTexTest: public CVolumeTest
{
    protected:
//	CVolumeImage VolImage;

    public:
	CVolTexTest();
	~CVolTexTest();

	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);
};

// MipMap Class definitions
class CMipVolTest: public CVolumeTest
{
    protected:
//	CVolumeImage MipVolImage[3];

	public:
	CMipVolTest();
	~CMipVolTest();

	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);
};

// TexGen Class definitions
class CVolTexGen: public CVolumeTest
{
    protected:
//	CVolumeImage VolImage;

    public:
	CVolTexGen();
	~CVolTexGen();

	virtual bool SetDefaultMatrices(void);
	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);
};

// Filter Class definitions
class CVolFilter: public CVolumeTest
{
    protected:
//	CVolumeImage MinVolImage;
//	CVolumeImage MagVolImage;
//	CVolumeImage MipVolImage[3];
	char szStr[100];

    public:
	CVolFilter();
	~CVolFilter();

	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);

    bool SetupFilterMode(int);
};

class CVolBlend: public CVolumeTest
{
    protected:
//	CVolumeImage VolImage;
//	CVolumeImage AlphaVolImage;
	char szStr[100];

    public:
	CVolBlend();
	~CVolBlend();

    virtual bool SetDefaultRenderStates(void);
	virtual UINT TestInitialize(void);
	virtual bool ExecuteTest(UINT);
	virtual bool TestTerminate(void);

    bool ApplyMaterial(int, bool);
    bool SetupBlendMode(int);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\volume\exe\sources.inc ===
TARGETNAME=volume
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_volume.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\wbuffer.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	WBuffer.h
 *
 ***************************************************************************/

#ifndef __WBUFFER_H__
#define __WBUFFER_H__

//include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

// Defines
#define MAX_TESTS	100

typedef struct _Buffer
{
    DWORD dwStencilBitMask; // stencil bit mask
    DWORD dwZBitMask;       // z bit mask
    struct _Buffer *pNext;  // address of BUFFER data
} BUFFER, *PBUFFER;

// Base Class definitions
class CWBufferTest: public CD3DTest
{
    struct LVERTEX_ {
        D3DVALUE     x;             /* Homogeneous coordinates */
        D3DVALUE     y;
        D3DVALUE     z;
        D3DCOLOR     color;         /* Vertex color */
        D3DCOLOR     specular;      /* Specular component of vertex */
        D3DVALUE     tu;            /* Texture coordinates */
        D3DVALUE     tv;

        LVERTEX_() { }
        LVERTEX_(const D3DVECTOR& v,
                    D3DCOLOR _color, D3DCOLOR _specular,
                    float _tu, float _tv)
            { x = v.x; y = v.y; z = v.z; 
              color = _color; specular = _specular;
              tu = _tu; tv = _tv;
            }
    };

    // Data
	LVERTEX_	WaffleList[2][42];
	LVERTEX_	PlaneList[4];
	char		msgString[80];

    CSurface8*  m_pd3dsOriginalZ;

    UINT        m_uZBufferFormats;
    D3DFORMAT   m_fmtd[4];

	public:
	CWBufferTest();
	~CWBufferTest();

	// Framework functions
//	virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	virtual bool SetDefaultRenderStates(void);
	virtual bool SetDefaultMatrices(void);
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT uTestNum);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_wbuffr
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    wbuffer.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\unique.cpp ===
#include <d3d.h>
#include "WBuffer.h"

bool Unique(DWORD dwVersion, PBUFFER *pBuffer, LPPIXELFORMAT pFormat)
{
    bool bFound = false;
    PBUFFER pTemp;

    if (dwVersion >= 0x0800)
        return true;

    for (pTemp = *pBuffer; pTemp && !bFound; pTemp = pTemp->pNext)
        if ((pFormat->dwStencilBitMask == pTemp->dwStencilBitMask) &&
            (pFormat->dwZBitMask == pTemp->dwZBitMask))
            bFound = true;

    if (!bFound)
    {
        pTemp = (PBUFFER) malloc(sizeof(BUFFER));
        pTemp->dwStencilBitMask = pFormat->dwStencilBitMask;
        pTemp->dwZBitMask = pFormat->dwZBitMask;
        pTemp->pNext = *pBuffer;
        *pBuffer = pTemp;
    }

    return !bFound;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=wbuffer
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_wbuffr.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\wbuffer.cpp ===
#define STRICT
#define BURN_IN_HELL
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "WBuffer.h"

#define FVF_LVERTEX_ ( D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | D3DFVF_TEX1 )

//extern bool Unique(DWORD dwVersion, PBUFFER *pBuffers, LPPIXELFORMAT pFormat);

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CWBufferTest*   WBuffer;
    BOOL            bRet;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    WBuffer = new CWBufferTest();
    if (!WBuffer) {
        return FALSE;
    }

    // Initialize the scene
    if (!WBuffer->Create(pDisplay)) {
        WBuffer->Release();
        return FALSE;
    }

    bRet = WBuffer->Exhibit(pnExitCode);

    // Clean up the scene
    WBuffer->Release();

    return bRet;
}

CWBufferTest::CWBufferTest()
{
    D3DFORMAT fmtd[] = {
#ifndef UNDER_XBOX
        D3DFMT_D16,
        D3DFMT_D16,
        D3DFMT_D24S8,
        D3DFMT_D24S8
#else
        D3DFMT_LIN_D16,
        D3DFMT_LIN_D24S8,
        D3DFMT_LIN_F16,
#endif // UNDER_XBOX
    };

    m_uZBufferFormats = countof(fmtd);
    memcpy(m_fmtd, fmtd, m_uZBufferFormats * sizeof(D3DFORMAT));

	m_szTestName = TEXT("W Buffer");
	m_szCommandKey = TEXT("WBuffer");

    // Disable textures
    m_ModeOptions.fTextures = false;

    m_pd3dsOriginalZ = NULL;
}

CWBufferTest::~CWBufferTest()
{
    // Restore the original depth buffer
    if (m_pd3dsOriginalZ) {
        m_pDevice->SetRenderTarget(NULL, m_pd3dsOriginalZ);
    }
}
/*
bool CWBufferTest::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
    PBUFFER pBuffers = NULL;

	// Test all of the common ZBuffer Formats
    if (IsConformance())
    {
        for (int i=0; i < m_uZBufferFormats; i++)
		{
            if (Unique(m_dwVersion, &pBuffers, &m_pCommonZBufferFormats[i].ddpfPixelFormat))
            {
				pMode->D3DMode.nZBufferFormat = i;

				CD3DTest::AddModeList(pMode,pData,dwDataSize);
			}
        }
    }
    else
    {
		// Let the framework handle stress mode
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
	}

    // Cleanup any memory that we alloc'd
    if (pBuffers)
    {
        PBUFFER pBuffer, pTemp;

        for (pBuffer = pBuffers; pBuffer; pBuffer = pTemp)
        {
            pTemp = pBuffer->pNext;
            free(pBuffer);
        }
    }

    return true;
}
*/
bool CWBufferTest::SetDefaultRenderStates(void)
{
	// Turn off Lighting for DX7
	if (m_dwVersion >= 0x0700)
		SetRenderState(D3DRENDERSTATE_LIGHTING, (DWORD)FALSE);

	// Make sure that we are using the W Buffer
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	return true;
}

bool CWBufferTest::SetDefaultMatrices(void)
{
    D3DMATRIX	Matrix;

	// Setup a Projection Matrix for W buffering
	Matrix = ProjectionMatrix(0.01f, 100.0f, pi/3);

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %s.\n",GetLastError());
        return false;
	}

	Matrix = IdentityMatrix();

    if (!SetTransform(D3DTRANSFORMSTATE_VIEW,&Matrix))
	{
		WriteToLog("SetTransform(ViewMatrix) failed with HResult = %s.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CWBufferTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

	// Setup the Test range
	SetTestRange(1,MAX_TESTS * m_uZBufferFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;
 
	// Make sure the driver supports W Buffering.
	if (!(dwRasterCaps & D3DPRASTERCAPS_WBUFFER))
	{
		WriteToLog("Capability not supported: W Buffer.\n");
		return D3DTESTINIT_SKIPALL;
	}

    // Save the original depth buffer
    m_pDevice->GetDepthStencilSurface(&m_pd3dsOriginalZ);

	// Initialize the Plane
	PlaneList[0] = LVERTEX_(cD3DVECTOR(-4.0f, -4.0f, +1.0f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
	PlaneList[1] = LVERTEX_(cD3DVECTOR(-4.0f, +4.0f, +1.0f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
	PlaneList[2] = LVERTEX_(cD3DVECTOR(+4.0f, +4.0f, +1.0f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
	PlaneList[3] = LVERTEX_(cD3DVECTOR(+4.0f, -4.0f, +1.0f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);

	// Initialize the Waffle
	for (int i=0; i < 40; i+=8)
	{
		WaffleList[0][i]   = LVERTEX_(cD3DVECTOR(-5.0f + (0.25f * i), -5.0f, +1.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
		WaffleList[0][i+1] = LVERTEX_(cD3DVECTOR(-5.0f + (0.25f * i), +5.0f, +1.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
		WaffleList[0][i+2] = LVERTEX_(cD3DVECTOR(-4.5f + (0.25f * i), -5.0f,  0.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
		WaffleList[0][i+3] = LVERTEX_(cD3DVECTOR(-4.5f + (0.25f * i), +5.0f,  0.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
		WaffleList[0][i+4] = LVERTEX_(cD3DVECTOR(-4.0f + (0.25f * i), -5.0f, -1.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
		WaffleList[0][i+5] = LVERTEX_(cD3DVECTOR(-4.0f + (0.25f * i), +5.0f, -1.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
		WaffleList[0][i+6] = LVERTEX_(cD3DVECTOR(-3.5f + (0.25f * i), -5.0f,  0.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
		WaffleList[0][i+7] = LVERTEX_(cD3DVECTOR(-3.5f + (0.25f * i), +5.0f,  0.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);

		WaffleList[1][i]   = LVERTEX_(cD3DVECTOR(-5.0f + (0.25f * i), -5.0f, -1.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
		WaffleList[1][i+1] = LVERTEX_(cD3DVECTOR(-5.0f + (0.25f * i), +5.0f, -1.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
		WaffleList[1][i+2] = LVERTEX_(cD3DVECTOR(-4.5f + (0.25f * i), -5.0f,  0.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
		WaffleList[1][i+3] = LVERTEX_(cD3DVECTOR(-4.5f + (0.25f * i), +5.0f,  0.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
		WaffleList[1][i+4] = LVERTEX_(cD3DVECTOR(-4.0f + (0.25f * i), -5.0f, +1.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
		WaffleList[1][i+5] = LVERTEX_(cD3DVECTOR(-4.0f + (0.25f * i), +5.0f, +1.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
		WaffleList[1][i+6] = LVERTEX_(cD3DVECTOR(-3.5f + (0.25f * i), -5.0f,  0.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
		WaffleList[1][i+7] = LVERTEX_(cD3DVECTOR(-3.5f + (0.25f * i), +5.0f,  0.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
	}

	WaffleList[0][i]   = LVERTEX_(cD3DVECTOR(-5.0f + (0.25f * i), -5.0f, +1.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
	WaffleList[0][i+1] = LVERTEX_(cD3DVECTOR(-5.0f + (0.25f * i), +5.0f, +1.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
	WaffleList[1][i]   = LVERTEX_(cD3DVECTOR(-5.0f + (0.25f * i), -5.0f, -1.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
	WaffleList[1][i+1] = LVERTEX_(cD3DVECTOR(-5.0f + (0.25f * i), +5.0f, -1.0f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Init the msgString to empty
//	msgString[0] = '\0';

	// Log the current W Buffer format
//    if (m_dwVersion <= 0x0700)
//    {
//        PIXELFORMAT Format;
//        memcpy(&Format, &m_pCommonZBufferFormats[m_pMode->nZBufferFormat].ddpfPixelFormat, sizeof(Format));

//	    sprintf(msgString, "%sW Buffer Format, Z: %d-bit (0x%x), Stencil: %d-bit (0x%x).\n",msgString,Format.dwZBufferBitDepth - Format.dwStencilBitDepth,Format.dwZBitMask,Format.dwStencilBitDepth,Format.dwStencilBitMask);
//    }
//    else
//	    sprintf(msgString, "%sW Buffer Format: %s.\n",msgString,D3DFmtToString(m_fmtd[nZBufferFormat]));

//    WriteToLog(msgString);

	return D3DTESTINIT_RUN;
}

bool CWBufferTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

bool CWBufferTest::ExecuteTest(UINT uTestNum)
{
	float		fRotate;
	D3DMATRIX	Matrix;
	char 		szBuffer[80];
    UINT        uTest = (uTestNum - 1) % MAX_TESTS + 1;

    if (uTest == 1) {
        CSurface8* pd3ds;
        CSurface8* pd3dsRT;
        D3DSURFACE_DESC d3dsd;
        int nZBufferFormat = (uTestNum - 1) / MAX_TESTS;
        if (FAILED(m_pDevice->GetRenderTarget(&pd3dsRT))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetRenderTarget failed"));
            SkipTests(MAX_TESTS);
            return false;
        }
        pd3dsRT->GetDesc(&d3dsd);
        pd3dsRT->Release();
        if (FAILED(m_pDevice->CreateDepthStencilSurface(d3dsd.Width, d3dsd.Height, m_fmtd[nZBufferFormat], D3DMULTISAMPLE_NONE, &pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::CreateDepthStencilSurface failed on format %s"), D3DFmtToString(m_fmtd[nZBufferFormat]));
            SkipTests(MAX_TESTS);
            return false;
        }
    	msgString[0] = '\0';
	    sprintf(msgString, "%sW Buffer Format: %s.\n",msgString,D3DFmtToString(m_fmtd[nZBufferFormat]));
        WriteToLog(msgString);
        if (FAILED(m_pDevice->SetRenderTarget(NULL, pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetRenderTarget failed on depth format %s"), D3DFmtToString(m_fmtd[nZBufferFormat]));
            SkipTests(MAX_TESTS);
            pd3ds->Release();
            return false;
        }
        pd3ds->Release();
    }

	// Initialize some variables
	msgString[0] = 0;
	sprintf(msgString, "");

	// Start with the identity matrix
	Matrix = IdentityMatrix();
 	Matrix = ScaleMatrix(0.5f, 0.5f, 1.0f);

	fRotate = 30.0f + (uTest - 1);

	if (fRotate > 360.0f ) 
		fRotate -= 360.0f;

	// Convert to radians and rotate around Z
	fRotate = (fRotate * 2 * pi) / 360.0f;
	Matrix = MatrixMult(Matrix, RotateZMatrix(fRotate));

	// Update the logfile and status window
	sprintf(msgString,"Depth: %0.2f, Rotation: %0.2f",(float)uTest, fRotate);

	szBuffer[0] = 0;
	sprintf(szBuffer,"$y%0.2f [0.01 - 100.00]",(float)uTest);
	WriteStatus("$gDepth [near - far]",szBuffer);

	szBuffer[0] = 0;
	sprintf(szBuffer,"$y%0.2f",fRotate);
	WriteStatus("$gRotation (radians)",szBuffer);

	// Finialy translate and set the world
	Matrix = MatrixMult(Matrix, TranslateMatrix(0.0f, 0.0f, ((float)uTest + 0.01f)));

    if (!SetTransform(D3DTRANSFORMSTATE_WORLD,&Matrix))
	{
		WriteToLog("SetTransform(WorldMatrix) failed with HResult = %s.\n",GetLastError());
		TestFinish(D3DTESTFINISH_ABORT);
        return false;
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CWBufferTest::SceneRefresh(void)
{
 	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,FVF_LVERTEX_,WaffleList[0],42,NULL,0,0);
		RenderPrimitive(D3DPT_TRIANGLESTRIP,FVF_LVERTEX_,WaffleList[1],42,NULL,0,0);
		RenderPrimitive(D3DPT_TRIANGLEFAN,FVF_LVERTEX_,PlaneList,4,NULL,0,0);

		EndScene();
	}
}

bool CWBufferTest::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\combo.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "WCmp.h"

//************************************************************************
// Internal API:    ComboTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************
void CWCmpTest::ComboTests(float Zval)
{
	// Red Triangle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,(float)m_vpTest.Y +  10.0f,0.0f),  0.015f, RGBA_MAKE(255,0,0,255),0, 0.5f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 210.0f,(float)m_vpTest.Y + 210.0f,0.0f),  1.0f,   RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,(float)m_vpTest.Y + 210.0f,0.0f),  1.0f,   RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
	// Green Triangle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,(float)m_vpTest.Y +  10.0f,Zval), (1.0f - Zval), RGBA_MAKE(0,255,0,255),0, 0.5f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 210.0f,(float)m_vpTest.Y + 210.0f,Zval), (1.0f - Zval), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,(float)m_vpTest.Y + 210.0f,Zval), (1.0f - Zval), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wbuffer\exe\sources.inc ===
TARGETNAME=wbuffer
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_wbuffr.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\always.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "WCmp.h"

//************************************************************************
// Never Test functions

CWNeverTest::CWNeverTest()
{
	m_szTestName = TEXT("W Compare Never");
	m_szCommandKey = TEXT("Never");

	// Tell parent class what cap to look for
	dwWCmpCap = D3DPCMPCAPS_NEVER;
}

CWNeverTest::~CWNeverTest()
{
}

bool CWNeverTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the W Buffer and compare func Never
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_NEVER);
	return true;
}

//************************************************************************
// Always Test functions

CWAlwaysTest::CWAlwaysTest()
{
	m_szTestName = TEXT("W Compare Always");
	m_szCommandKey = TEXT("Always");

	// Tell parent class what cap to look for
	dwWCmpCap = D3DPCMPCAPS_ALWAYS;
}

CWAlwaysTest::~CWAlwaysTest()
{
}

bool CWAlwaysTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the W Buffer and compare func Always
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_ALWAYS);
	return true;
}

//************************************************************************
// Internal API:    AlwaysTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CWCmpTest::AlwaysTests(int nTest)
{
	switch (nTest)
	{
		case (1):	// Left Handed Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour flat triangles (left), Visible: None",msgString);
			else
				sprintf(msgString, "%sFour flat triangles (left), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  90.0f, 45.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,255,0,255),0, 0.0f, 0.25f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f, 10.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 195.0f,150.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,255,0,255),0, 0.75f,1.0f);
			break;
		case (2):	// Right Handed Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour flat triangles (right), Visible: None",msgString);
			else
				sprintf(msgString, "%sFour flat triangles (right), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.35f),(1.0f - 0.35f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.35f),(1.0f - 0.35f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.35f),(1.0f - 0.35f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.4f),(1.0f - 0.4f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.4f),(1.0f - 0.4f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.4f),(1.0f - 0.4f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.3f),(1.0f - 0.3f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.3f),(1.0f - 0.3f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.3f),(1.0f - 0.3f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  45.0f, 90.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,255,0,255),0, 0.25f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,195.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.75f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,230.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,255,0,255),0, 0.0f, 1.0f);
			break;
		case (3):	// Single Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour flat triangles, Visible: None",msgString);
			else
				sprintf(msgString, "%sFour flat triangles, Visible: All",msgString);

			// Magenta Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y,0.01f),(1.0f - 0.01f), RGBA_MAKE(255,0,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 300.0f,270.0f + (float)m_vpTest.Y,0.01f),(1.0f - 0.01f), RGBA_MAKE(255,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,270.0f + (float)m_vpTest.Y,0.01f),(1.0f - 0.01f), RGBA_MAKE(255,0,255,255),0, 0.0f,1.0f);
			// Teal Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 20.0f + (float)m_vpTest.Y,0.0f),(1.0f - 0.0f), RGBA_MAKE(0,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,260.0f + (float)m_vpTest.Y,0.0f),(1.0f - 0.0f), RGBA_MAKE(0,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  20.0f,260.0f + (float)m_vpTest.Y,0.0f),(1.0f - 0.0f), RGBA_MAKE(0,255,255,255),0, 0.0f,1.0f);
			// White Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 30.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(255,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 260.0f,250.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(255,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  40.0f,250.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,1.0f);
			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 40.0f + (float)m_vpTest.Y,0.999f),0.01f, RGBA_MAKE(255,0,0,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.0f,240.0f + (float)m_vpTest.Y,0.999f),0.01f, RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  60.0f,240.0f + (float)m_vpTest.Y,0.999f),0.01f, RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			break;
		case (4):	// Left Handed Non-Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour non-flat triangles (left), Visible: None",msgString);
			else
				sprintf(msgString, "%sFour non-flat triangles (left), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.0f),(1.0f - 0.0f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.0f), (1.0f - 0.0f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.01f),(1.0f - 0.01f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.9f), (1.0f - 0.9f),  RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.2f),(1.0f - 0.2f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.3f),(1.0f - 0.3f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  90.0f, 45.0f + (float)m_vpTest.Y,0.25f), (1.0f - 0.25f), RGBA_MAKE(255,255,0,255),0, 0.0f, 0.25f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f, 10.0f + (float)m_vpTest.Y,0.55f), (1.0f - 0.55f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 195.0f,150.0f + (float)m_vpTest.Y,0.05f), (1.0f - 0.05f), RGBA_MAKE(255,255,0,255),0, 0.75f,1.0f);
			break;
		case (5):	// Right Handed Non-Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour non-flat triangles (right), Visible: None",msgString);
			else
				sprintf(msgString, "%sFour non-flat triangles (right), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.0805f), (1.0f - 0.0805f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.309f),  (1.0f - 0.309f),  RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.351f),  (1.0f - 0.351f),  RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.123f), (1.0f - 0.123f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.0987f),(1.0f - 0.0987f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.4444f),(1.0f - 0.4444f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.099f),(1.0f - 0.099f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.75f), (1.0f - 0.75f),  RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.4f),  (1.0f - 0.4f),   RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  45.0f, 90.0f + (float)m_vpTest.Y,0.5001f),(1.0f - 0.5001f), RGBA_MAKE(255,255,0,255),0, 0.25f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,195.0f + (float)m_vpTest.Y,0.07f),  (1.0f - 0.07f),   RGBA_MAKE(255,255,0,255),0, 1.0f, 0.75f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,230.0f + (float)m_vpTest.Y,0.2f),   (1.0f - 0.2f),    RGBA_MAKE(255,255,0,255),0, 0.0f, 1.0f);
			break;
		case (6):	// Combo Test: 0.0f
		case (7):	// Combo Test: 0.1f
		case (8):	// Combo Test: 0.2f
		case (9):	// Combo Test: 0.3f	
		case (10):	// Combo Test: 0.4f	
		case (11):	// Combo Test: 0.5f
		case (12):	// Combo Test: 0.6f
		case (13):	// Combo Test: 0.7f	
		case (14):	// Combo Test: 0.8f
		case (15):	// Combo Test: 0.9f
			if (dwWCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: None",msgString,10 * (nTest - 6));
			else
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Green",msgString,10 * (nTest - 6));

			ComboTests(0.1f * (nTest - 6));
			break;
		case (16):	// Combo Test: 0.99f
			if (dwWCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: None",msgString);
			else
				sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: 100%% Green",msgString);

			ComboTests(0.99f);
			break;
		default:
			break;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\modulex.h ===
#define PREPEND_MODULE(Suffix) wcmp##Suffix
#define MODULE_STRING "wcmp"
#pragma comment(linker, "/include:_wcmp_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\equal.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "WCmp.h"

//************************************************************************
// Equal Test functions

CWEqualTest::CWEqualTest()
{
	m_szTestName = TEXT("W Compare Equal");
	m_szCommandKey = TEXT("Equal");

	// Tell parent class what cap to look for
	dwWCmpCap = D3DPCMPCAPS_EQUAL;
}

CWEqualTest::~CWEqualTest()
{
}

bool CWEqualTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the W Buffer and compare func Equal
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_EQUAL);
	return true;
}

void CWEqualTest::SetupBackground(void)
{
	float Zval = 0.1f;
	float RHW  = 1.0f - Zval;
	float fWidth  = (float)m_vpTest.Width;//m_pSrcTarget->m_dwWidth - 1;
	float fHeight = (float)m_vpTest.Height;//m_pSrcTarget->m_dwHeight - 1;

	// Black Background Triangle
	BackgroundList[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y,    Zval), RHW, RGBA_MAKE(0,0,0,255),0, 1.0f,0.0f);
	BackgroundList[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + fHeight, Zval), RHW, RGBA_MAKE(0,0,0,255),0, 1.0f,1.0f);
	BackgroundList[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   (float)m_vpTest.Y,    Zval), RHW, RGBA_MAKE(0,0,0,255),0, 0.0f,0.0f);
	BackgroundList[3] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   (float)m_vpTest.Y + fHeight, Zval), RHW, RGBA_MAKE(0,0,0,255),0, 0.0f,1.0f);
}

void CWEqualTest::SceneRefresh(void)
{
	if (BeginScene())
	{
		// Special setup for initing the background
		SetupBackground();

		// Special render state needed
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,BackgroundList,4,NULL,0,0);

		// Set the appropriate renderstate
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_EQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

//************************************************************************
// NotEqual Test functions

CWNotEqualTest::CWNotEqualTest()
{
	m_szTestName = TEXT("W Compare NotEqual");
	m_szCommandKey = TEXT("NotEqual");

	// Tell parent class what cap to look for
	dwWCmpCap = D3DPCMPCAPS_NOTEQUAL;
}

CWNotEqualTest::~CWNotEqualTest()
{
}

bool CWNotEqualTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the W Buffer and compare func NotEqual
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_NOTEQUAL);
	return true;
}

void CWNotEqualTest::SetupBackground(void)
{
	float Zval = 0.1f;
	float RHW  = 1.0f - Zval;
	float fWidth  = (float)m_vpTest.Width;//m_pSrcTarget->m_dwWidth - 1;
	float fHeight = (float)m_vpTest.Height;//m_pSrcTarget->m_dwHeight - 1;

	// Black Background Triangle
	BackgroundList[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + 0.0f,    Zval), RHW, RGBA_MAKE(0,0,0,255),0, 1.0f,0.0f);
	BackgroundList[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + fHeight, Zval), RHW, RGBA_MAKE(0,0,0,255),0, 1.0f,1.0f);
	BackgroundList[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   (float)m_vpTest.Y + 0.0f,    Zval), RHW, RGBA_MAKE(0,0,0,255),0, 0.0f,0.0f);
	BackgroundList[3] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   (float)m_vpTest.Y + fHeight, Zval), RHW, RGBA_MAKE(0,0,0,255),0, 0.0f,1.0f);
}

void CWNotEqualTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Special setup for initing the background
		SetupBackground();

		// Special render state needed
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,BackgroundList,4,NULL,0,0);

		// Set the appropriate renderstate
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_NOTEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

//************************************************************************
// Internal API:    EqualTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

bool CWCmpTest::EqualTests(int nTest)
{
	switch (nTest)
	{
		case (1):	// Left Handed Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_EQUAL)
				sprintf(msgString, "%sFour flat triangles (left), Visible: Yellow & Green",msgString);
			else
				sprintf(msgString, "%sFour flat triangles (left), Visible: Red (g/y) & Blue (y)",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.0f),(1.0f - 0.0f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.0f),(1.0f - 0.0f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.0f),(1.0f - 0.0f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.2f),(1.0f - 0.2f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.2f),(1.0f - 0.2f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.2f),(1.0f - 0.2f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  90.0f, 45.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,255,0,255),0, 0.0f, 0.25f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f, 10.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 195.0f,150.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,255,0,255),0, 0.75f,1.0f);
			break;
		case (2):	// Right Handed Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_EQUAL)
				sprintf(msgString, "%sFour flat triangles (right), Visible: Blue & Green",msgString);
			else
				sprintf(msgString, "%sFour flat triangles (right), Visible: Red (g) & Yellow",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.05f),(1.0f - 0.05f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.05f),(1.0f - 0.05f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.05f),(1.0f - 0.05f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  45.0f, 90.0f + (float)m_vpTest.Y,0.05f),(1.0f - 0.05f), RGBA_MAKE(255,255,0,255),0, 0.25f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,195.0f + (float)m_vpTest.Y,0.05f),(1.0f - 0.05f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.75f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,230.0f + (float)m_vpTest.Y,0.05f),(1.0f - 0.05f), RGBA_MAKE(255,255,0,255),0, 0.0f, 1.0f);
			break;
		case (3):	// Single Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_EQUAL)
				sprintf(msgString, "%sFour flat triangles, Visible: Red & White",msgString);
			else
				sprintf(msgString, "%sFour flat triangles, Visible: White, Cyan, & Magenta",msgString);

			// Magenta Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y,0.11f),(1.0f - 0.11f), RGBA_MAKE(255,0,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 300.0f,270.0f + (float)m_vpTest.Y,0.11f),(1.0f - 0.11f), RGBA_MAKE(255,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,270.0f + (float)m_vpTest.Y,0.11f),(1.0f - 0.11f), RGBA_MAKE(255,0,255,255),0, 0.0f,1.0f);
			// Teal Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 20.0f + (float)m_vpTest.Y,0.09f),(1.0f - 0.09f), RGBA_MAKE(0,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,260.0f + (float)m_vpTest.Y,0.09f),(1.0f - 0.09f), RGBA_MAKE(0,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  20.0f,260.0f + (float)m_vpTest.Y,0.09f),(1.0f - 0.09f), RGBA_MAKE(0,255,255,255),0, 0.0f,1.0f);
			// White Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 30.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 260.0f,250.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  40.0f,250.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,255,255,255),0, 0.0f,1.0f);
			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 40.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,0,0,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.0f,240.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  60.0f,240.0f + (float)m_vpTest.Y,0.1f),(1.0f - 0.1f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			break;
		case (4):	// Combo Test: 0.0f
		case (5):	// Combo Test: 0.1f
		case (6):	// Combo Test: 0.2f
		case (7):	// Combo Test: 0.3f	
		case (8):	// Combo Test: 0.4f	
		case (9):	// Combo Test: 0.5f
		case (10):	// Combo Test: 0.6f
		case (11):	// Combo Test: 0.7f	
		case (12):	// Combo Test: 0.8f
		case (13):	// Combo Test: 0.9f
			if (dwWCmpCap == D3DPCMPCAPS_EQUAL)
			{
				if (nTest == 5)
					sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Green",msgString,10 * (nTest - 4));
				else
					sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: None",msgString,10 * (nTest - 4));
			}
			else
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Green",msgString,10 * (nTest - 4));

			ComboTests(0.1f * (nTest - 4));
			break;
		case (14):	// Combo Test: 0.99f
			if (dwWCmpCap == D3DPCMPCAPS_EQUAL)
				sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: None",msgString);
			else
				sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: 100%% Green",msgString);

			ComboTests(0.99f);
			break;
		default:
			break;
	}

	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\greater.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "WCmp.h"

//************************************************************************
// Greater Test functions

CWGreaterTest::CWGreaterTest()
{
	m_szTestName = TEXT("W Compare Greater");
	m_szCommandKey = TEXT("Greater");

	// Tell parent class what cap to look for
	dwWCmpCap = D3DPCMPCAPS_GREATER;
}

CWGreaterTest::~CWGreaterTest()
{
}

bool CWGreaterTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the W Buffer and compare func Greater
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_GREATER);
	return true;
}

void CWGreaterTest::SetupBackground(void)
{
	float Zval = 0.0f;
	float RHW  = (1.0f - 0.0f);
	float fWidth  = (float)m_vpTest.Width;//m_pSrcTarget->m_dwWidth - 1;
	float fHeight = (float)m_vpTest.Height;//m_pSrcTarget->m_dwHeight - 1;

	// Black Background Triangle
	BackgroundList[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + 0.0f,    Zval), RHW, RGBA_MAKE(0,0,0,255),0, 1.0f,0.0f);
	BackgroundList[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + fHeight, Zval), RHW, RGBA_MAKE(0,0,0,255),0, 1.0f,1.0f);
	BackgroundList[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   (float)m_vpTest.Y + 0.0f,    Zval), RHW, RGBA_MAKE(0,0,0,255),0, 0.0f,0.0f);
	BackgroundList[3] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   (float)m_vpTest.Y + fHeight, Zval), RHW, RGBA_MAKE(0,0,0,255),0, 0.0f,1.0f);
}

void CWGreaterTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Special setup for initing the background
		SetupBackground();

		// Special render state needed
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,BackgroundList,4,NULL,0,0);

		// Set the appropriate renderstate
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_GREATER);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

//************************************************************************
// GreaterEqual Test functions

CWGreaterEqualTest::CWGreaterEqualTest()
{
	m_szTestName = TEXT("W Compare GreaterEqual");
	m_szCommandKey = TEXT("GreaterEqual");

	// Tell parent class what cap to look for
	dwWCmpCap = D3DPCMPCAPS_GREATEREQUAL;
}

CWGreaterEqualTest::~CWGreaterEqualTest()
{
}

bool CWGreaterEqualTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the W Buffer and compare func GreaterEqual
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_GREATEREQUAL);
	return true;
}

void CWGreaterEqualTest::SetupBackground(void)
{
	float Zval = 0.0f;
	float RHW  = (1.0f - 0.0f);
	float fWidth  = (float)m_vpTest.Width;//m_pSrcTarget->m_dwWidth - 1;
	float fHeight = (float)m_vpTest.Height;//m_pSrcTarget->m_dwHeight - 1;

	// Black Background Triangle
	BackgroundList[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + 0.0f,    Zval), RHW, RGBA_MAKE(0,0,0,255),0, 1.0f,0.0f);
	BackgroundList[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, (float)m_vpTest.Y + fHeight, Zval), RHW, RGBA_MAKE(0,0,0,255),0, 1.0f,1.0f);
	BackgroundList[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   (float)m_vpTest.Y + 0.0f,    Zval), RHW, RGBA_MAKE(0,0,0,255),0, 0.0f,0.0f);
	BackgroundList[3] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   (float)m_vpTest.Y + fHeight, Zval), RHW, RGBA_MAKE(0,0,0,255),0, 0.0f,1.0f);
}

void CWGreaterEqualTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Special setup for initing the background
		SetupBackground();

		// Special render state needed
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,BackgroundList,4,NULL,0,0);

		// Set the appropriate renderstate
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_GREATEREQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}


//************************************************************************
// Internal API:    GreaterTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CWCmpTest::GreaterTests(int nTest)
{
	switch (nTest)
	{
		case (1):	// Left Handed Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_GREATER)
				sprintf(msgString, "%sThree flat triangles (left), Visible: Green, Red, & Blue",msgString);
			else
				sprintf(msgString, "%sThree flat triangles (left), Visible: Blue, Green, & Red",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.5f),(1.0f - 0.5f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.9f),(1.0f - 0.9f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			break;
		case (2):	// Right Handed Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_GREATER)
				sprintf(msgString, "%sThree flat triangles (right), Visible: Green, Red, & Blue",msgString);
			else
				sprintf(msgString, "%sThree flat triangles (right), Visible: Blue, Green, & Red",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.7f),(1.0f - 0.7f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.7f),(1.0f - 0.7f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.7f),(1.0f - 0.7f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			break;
		case (3):	// Single Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_GREATER)
				sprintf(msgString, "%sThree flat triangles, Visible: Cyan & Magenta",msgString);
			else
				sprintf(msgString, "%sThree flat triangles, Visible: White, Cyan, & Magenta",msgString);

			// Magenta Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y,0.11f),(1.0f - 0.11f), RGBA_MAKE(255,0,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 300.0f,270.0f + (float)m_vpTest.Y,0.11f),(1.0f - 0.11f), RGBA_MAKE(255,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,270.0f + (float)m_vpTest.Y,0.11f),(1.0f - 0.11f), RGBA_MAKE(255,0,255,255),0, 0.0f,1.0f);
			// Teal Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 20.0f + (float)m_vpTest.Y,0.12f),(1.0f - 0.12f), RGBA_MAKE(0,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,260.0f + (float)m_vpTest.Y,0.12f),(1.0f - 0.12f), RGBA_MAKE(0,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  20.0f,260.0f + (float)m_vpTest.Y,0.12f),(1.0f - 0.12f), RGBA_MAKE(0,255,255,255),0, 0.0f,1.0f);
			// White Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 30.0f + (float)m_vpTest.Y,0.12f),(1.0f - 0.12f), RGBA_MAKE(255,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 260.0f,250.0f + (float)m_vpTest.Y,0.12f),(1.0f - 0.12f), RGBA_MAKE(255,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  40.0f,250.0f + (float)m_vpTest.Y,0.12f),(1.0f - 0.12f), RGBA_MAKE(255,255,255,255),0, 0.0f,1.0f);
			break;
		case (4):	// Left Handed Non-Flat Triangles
			sprintf(msgString, "%sThree intersecting triangles (left), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.8f), (1.0f - 0.8f),  RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.8f), (1.0f - 0.8f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.65f),(1.0f - 0.65f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.65f),(1.0f - 0.65f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.7f), (1.0f - 0.7f),  RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.65f),(1.0f - 0.65f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.65f),(1.0f - 0.65f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			break;
		case (5):	// Right Handed Non-Flat Triangles
			sprintf(msgString, "%sThree intersecting triangles (right), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.8f), (1.0f - 0.8f),  RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.75f),(1.0f - 0.75f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.8f), (1.0f - 0.8f),  RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.8f), (1.0f - 0.8f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.65f),(1.0f - 0.65f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.7f), (1.0f - 0.7f),  RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.7f), (1.0f - 0.7f),  RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.65f),(1.0f - 0.65f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.65f),(1.0f - 0.65f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			break;
		case (6):	// Combo Test: 0.0f
		case (7):	// Combo Test: 0.1f
		case (8):	// Combo Test: 0.2f
		case (9):	// Combo Test: 0.3f	
		case (10):	// Combo Test: 0.4f	
		case (11):	// Combo Test: 0.5f
		case (12):	// Combo Test: 0.6f
		case (13):	// Combo Test: 0.7f	
		case (14):	// Combo Test: 0.8f
		case (15):	// Combo Test: 0.9f
			if (nTest == 6)
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Red",msgString,10 * (nTest - 6));
			else
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: %d%% Green & %d%% Red",msgString,(10 * (nTest - 6)),(10 * (nTest - 6)),100 - (10 * (nTest - 6)));

			ComboTests(0.1f * (nTest - 6));
			break;
		case (16):	// Combo Test: 0.99f
			sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: 100%% Green",msgString);

			ComboTests(0.99f);
			break;
		default:
			break;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\unique.cpp ===
#include <d3d.h>
#include "WCmp.h"

bool Unique(DWORD dwVersion, PBUFFER *pBuffer, LPPIXELFORMAT pFormat)
{
    bool bFound = false;
    PBUFFER pTemp;

    if (dwVersion >= 0x0800)
        return true;

    for (pTemp = *pBuffer; pTemp && !bFound; pTemp = pTemp->pNext)
        if ((pFormat->dwStencilBitMask == pTemp->dwStencilBitMask) &&
            (pFormat->dwZBitMask == pTemp->dwZBitMask))
            bFound = true;

    if (!bFound)
    {
        pTemp = (PBUFFER) malloc(sizeof(BUFFER));
        pTemp->dwStencilBitMask = pFormat->dwStencilBitMask;
        pTemp->dwZBitMask = pFormat->dwZBitMask;
        pTemp->pNext = *pBuffer;
        *pBuffer = pTemp;
    }

    return !bFound;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_wcmp
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
        wcmp.cpp \
        always.cpp \
        combo.cpp \
        equal.cpp \
        greater.cpp \
        less.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\less.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "WCmp.h"

//************************************************************************
// Less Test functions

CWLessTest::CWLessTest()
{
	m_szTestName = TEXT("W Compare Less");
	m_szCommandKey = TEXT("Less");

	// Tell parent class what cap to look for
	dwWCmpCap = D3DPCMPCAPS_LESS;
}

CWLessTest::~CWLessTest()
{
}

bool CWLessTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the W Buffer and compare func Less
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESS);
	return true;
}

//************************************************************************
// LessEqual Test functions

CWLessEqualTest::CWLessEqualTest()
{
	m_szTestName = TEXT("W Compare LessEqual");
	m_szCommandKey = TEXT("LessEqual");

	// Tell parent class what cap to look for
	dwWCmpCap = D3DPCMPCAPS_LESSEQUAL;
}

CWLessEqualTest::~CWLessEqualTest()
{
}

bool CWLessEqualTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the W Buffer and compare func LessEqual
//	SetRenderState(D3DRENDERSTATE_TEXTUREPERSPECTIVE, (DWORD)TRUE);
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_USEW);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);
	return true;
}

//************************************************************************
// Internal API:    LessTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CWCmpTest::LessTests(int nTest)
{
	switch (nTest)
	{
		case (1):	// Left Handed Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_LESS)
				sprintf(msgString, "%sThree flat triangles (left), Visible: Green, Red, & Blue",msgString);
			else
				sprintf(msgString, "%sThree flat triangles (left), Visible: Blue, Green, & Red",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f), (1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.9f), (1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.9f), (1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.5f), (1.0f - 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.5f), (1.0f - 0.5f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.5f), (1.0f - 0.5f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.5f), (1.0f - 0.5f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.5f), (1.0f - 0.5f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.5f), (1.0f - 0.5f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			break;
		case (2):	// Right Handed Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_LESS)
				sprintf(msgString, "%sThree flat triangles (right), Visible: Green, Red, & Blue",msgString);
			else
				sprintf(msgString, "%sThree flat triangles (right), Visible: Blue, Green, & Red",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.2f), (1.0f - 0.2f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.2f), (1.0f - 0.2f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.2f), (1.0f - 0.2f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.1f), (1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.1f), (1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.1f), (1.0f - 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.1f), (1.0f - 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.1f), (1.0f - 0.1f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.1f), (1.0f - 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			break;
		case (3):	// Single Flat Triangles
			if (dwWCmpCap == D3DPCMPCAPS_LESS)
				sprintf(msgString, "%sThree flat triangles, Visible: Cyan & Magenta",msgString);
			else
				sprintf(msgString, "%sThree flat triangles, Visible: White, Cyan, & Magenta",msgString);

			// Magenta Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y,0.01f), (1.0f - 0.01f), RGBA_MAKE(255,0,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 300.0f,270.0f + (float)m_vpTest.Y,0.01f), (1.0f - 0.01f), RGBA_MAKE(255,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,270.0f + (float)m_vpTest.Y,0.01f), (1.0f - 0.01f), RGBA_MAKE(255,0,255,255),0, 0.0f,1.0f);
			// Teal Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 20.0f + (float)m_vpTest.Y,0.0f), (1.0f - 0.0f), RGBA_MAKE(0,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,260.0f + (float)m_vpTest.Y,0.0f), (1.0f - 0.0f), RGBA_MAKE(0,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  20.0f,260.0f + (float)m_vpTest.Y,0.0f), (1.0f - 0.0f), RGBA_MAKE(0,255,255,255),0, 0.0f,1.0f);
			// White Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 30.0f + (float)m_vpTest.Y,0.0f), (1.0f - 0.0f), RGBA_MAKE(255,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 260.0f,250.0f + (float)m_vpTest.Y,0.0f), (1.0f - 0.0f), RGBA_MAKE(255,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  40.0f,250.0f + (float)m_vpTest.Y,0.0f), (1.0f - 0.0f), RGBA_MAKE(255,255,255,255),0, 0.0f,1.0f);
			break;
		case (4):	// Left Handed Non-Flat Triangles
			sprintf(msgString, "%sThree intersecting triangles (left), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f), (1.0f - 0.9f),   RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.6f), (1.0f - 0.625f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.6f), (1.0f - 0.625f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.7f),  (1.0f - 0.7f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.55f), (1.0f - 0.55f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.55f), (1.0f - 0.55f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.6f),  (1.0f - 0.575f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.55f), (1.0f - 0.55f),  RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.55f), (1.0f - 0.55f),  RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			break;
		case (5):	// Right Handed Non-Flat Triangles
			sprintf(msgString, "%sThree intersecting triangles (right), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f), (1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.6f), (1.0f - 0.6f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.9f), (1.0f - 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.7f),  (1.0f - 0.7f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.55f), (1.0f - 0.55f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.6f),  (1.0f - 0.6f),  RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.6f),  (1.0f - 0.58f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.55f), (1.0f - 0.55f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.55f), (1.0f - 0.55f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			break;
		case (6):	// Combo Test: 0.0f
		case (7):	// Combo Test: 0.1f
		case (8):	// Combo Test: 0.2f
		case (9):	// Combo Test: 0.3f	
		case (10):	// Combo Test: 0.4f	
		case (11):	// Combo Test: 0.5f
		case (12):	// Combo Test: 0.6f
		case (13):	// Combo Test: 0.7f	
		case (14):	// Combo Test: 0.8f
		case (15):	// Combo Test: 0.9f
			if (nTest == 6)
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Green",msgString,10 * (nTest - 6));
			else
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: %d%% Red & %d%% Green",msgString,(10 * (nTest - 6)),(10 * (nTest - 6)),100 - (10 * (nTest - 6)));

			ComboTests(0.1f * (nTest - 6));
			break;
		case (16):	// Combo Test: 0.99f
			sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: 100%% Red",msgString);

			ComboTests(0.99f);
			break;
		default:
			break;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\wcmp.cpp ===
#define STRICT
#define BURN_IN_HELL
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "3dmath.h"
#include "WCmp.h"

//extern bool Unique(DWORD dwVersion, PBUFFER *pBuffers, LPPIXELFORMAT pFormat);

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CWCmpTest*      pWCmpTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 8 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pWCmpTest = new CWNeverTest();
                break;
            case 1:
                pWCmpTest = new CWLessTest();
                break;
            case 2:
                pWCmpTest = new CWEqualTest();
                break;
            case 3:
                pWCmpTest = new CWLessEqualTest();
                break;
            case 4:
                pWCmpTest = new CWGreaterTest();
                break;
            case 5:
                pWCmpTest = new CWNotEqualTest();
                break;
            case 6:
                pWCmpTest = new CWGreaterEqualTest();
                break;
            case 7:
                pWCmpTest = new CWAlwaysTest();
                break;
        }

        if (!pWCmpTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pWCmpTest->Create(pDisplay)) {
            pWCmpTest->Release();
            return FALSE;
        }

        bRet = pWCmpTest->Exhibit(pnExitCode);

        bQuit = pWCmpTest->AbortedExit();

        // Clean up the scene
        pWCmpTest->Release();
    }

    return bRet;
}

CWCmpTest::CWCmpTest()
{
    D3DFORMAT fmtd[] = {
#ifndef UNDER_XBOX
        D3DFMT_D16,
        D3DFMT_D16,
        D3DFMT_D24S8,
        D3DFMT_D24S8
#else
        D3DFMT_LIN_D16,
        D3DFMT_LIN_D24S8,
        D3DFMT_LIN_F16,
#endif // UNDER_XBOX
    };

    m_uZBufferFormats = countof(fmtd);
    memcpy(m_fmtd, fmtd, m_uZBufferFormats * sizeof(D3DFORMAT));

    // Disable textures
    m_ModeOptions.fTextures = false;

    m_pd3dsOriginalZ = NULL;
    m_bExit = FALSE;
}

CWCmpTest::~CWCmpTest()
{
    // Restore the original depth buffer
    if (m_pd3dsOriginalZ) {
        m_pDevice->SetRenderTarget(NULL, m_pd3dsOriginalZ);
    }
}
/*
bool CWCmpTest::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
    PBUFFER pBuffers = NULL;

	// Test all of the common ZBuffer Formats
    if (IsConformance())
    {
        for (int i=0; i < m_uZBufferFormats; i++)
		{
            if (Unique(m_dwVersion, &pBuffers, &m_pCommonZBufferFormats[i].ddpfPixelFormat))
            {
				pMode->D3DMode.nZBufferFormat = i;

				CD3DTest::AddModeList(pMode,pData,dwDataSize);
			}
        }
    }
    else
    {
		// Let the framework handle stress mode
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
	}

    // Cleanup any memory that we alloc'd
    if (pBuffers)
    {
        PBUFFER pBuffer, pTemp;

        for (pBuffer = pBuffers; pBuffer; pBuffer = pTemp)
        {
            pTemp = pBuffer->pNext;
            free(pBuffer);
        }
    }

    return true;
}
*/
bool CWCmpTest::SetDefaultMatrices(void)
{
    D3DMATRIX	Matrix;

	// Setup a dummy Projection Matrix for W buffering
	Matrix = ProjectionMatrix(1.0f, 100.0f, pi/3);

	Matrix = MatrixMult(Matrix, 2.0f);

    if (!SetTransform(D3DTRANSFORMSTATE_PROJECTION,&Matrix))
	{
		WriteToLog("SetTransform(ProjectionMatrix) failed with HResult = %s.\n",GetLastError());
        return false;
	}

    return true;
}

UINT CWCmpTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

    // Save the original depth buffer
    m_pDevice->GetDepthStencilSurface(&m_pd3dsOriginalZ);

	// Setup the Test range
	if ((dwWCmpCap == D3DPCMPCAPS_EQUAL) || (dwWCmpCap == D3DPCMPCAPS_NOTEQUAL)) {
        m_uMaxTests = MAX_TESTS-2;
    }
	else {
        m_uMaxTests = MAX_TESTS;
    }
	SetTestRange(1,m_uMaxTests * m_uZBufferFormats);

	// Check the caps we are interested in
	DWORD dwRasterCaps = m_d3dcaps.RasterCaps;
	DWORD dwZCmpCaps = m_d3dcaps.ZCmpCaps;

	// Make sure the driver supports W Buffering.
	if (!(dwRasterCaps & D3DPRASTERCAPS_WBUFFER))
	{
		WriteToLog("Capability not supported: W Buffer.\n");
		return D3DTESTINIT_SKIPALL;
	}

	// Check the appropriate Z Compare caps
	if (!(dwZCmpCaps & dwWCmpCap))
	{
		WriteToLog("Device capability not supported: %s.\n",m_szTestName);
		return D3DTESTINIT_SKIPALL;
	}

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Init the msgString to empty
	msgString[0] = '\0';

	// Log the current W Buffer format
//    if (m_dwVersion <= 0x0700)
//    {
//        PIXELFORMAT Format;
//        memcpy(&Format, &m_pCommonZBufferFormats[m_pMode->nZBufferFormat].ddpfPixelFormat, sizeof(Format));

//	    sprintf(msgString, "%sW Buffer Format, Z: %d-bit (0x%x), Stencil: %d-bit (0x%x).\n",msgString,Format.dwZBufferBitDepth - Format.dwStencilBitDepth,Format.dwZBitMask,Format.dwStencilBitDepth,Format.dwStencilBitMask);
//    }
//    else
//	    sprintf(msgString, "%sW Buffer Format: %s.\n",msgString,D3DFmtToString(m_pCommonZBufferFormats[m_pMode->nZBufferFormat].d3dfFormat));

//    WriteToLog(msgString);

	return D3DTESTINIT_RUN;
}

bool CWCmpTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

bool CWCmpTest::ExecuteTest(UINT uTestNum)
{
    UINT uTest = (uTestNum - 1) % m_uMaxTests + 1;

	// Initialize some variables
 	dwVertexCount = 0;
	msgString[0] = '\0';

    if (uTest == 1) {
        CSurface8* pd3ds;
        CSurface8* pd3dsRT;
        D3DSURFACE_DESC d3dsd;
        int nZBufferFormat = (uTestNum - 1) / m_uMaxTests;
        if (FAILED(m_pDevice->GetRenderTarget(&pd3dsRT))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetRenderTarget failed"));
            SkipTests(m_uMaxTests);
            return false;
        }
        pd3dsRT->GetDesc(&d3dsd);
        pd3dsRT->Release();
        if (FAILED(m_pDevice->CreateDepthStencilSurface(d3dsd.Width, d3dsd.Height, m_fmtd[nZBufferFormat], D3DMULTISAMPLE_NONE, &pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::CreateDepthStencilSurface failed on format %s"), D3DFmtToString(m_fmtd[nZBufferFormat]));
            SkipTests(m_uMaxTests);
            return false;
        }
    	msgString[0] = '\0';
	    sprintf(msgString, "%sW Buffer Format: %s.\n",msgString,D3DFmtToString(m_fmtd[nZBufferFormat]));
        WriteToLog(msgString);
        if (FAILED(m_pDevice->SetRenderTarget(NULL, pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetRenderTarget failed on depth format %s"), D3DFmtToString(m_fmtd[nZBufferFormat]));
            SkipTests(m_uMaxTests);
            pd3ds->Release();
            return false;
        }
        pd3ds->Release();

    	msgString[0] = '\0';
    }

	// Let's build some triangles.
	switch (dwWCmpCap)
	{
		case D3DPCMPCAPS_NEVER:
			AlwaysTests((int)uTest);
			break;
		case D3DPCMPCAPS_LESS:
			LessTests((int)uTest);
			break;
		case D3DPCMPCAPS_EQUAL:
			EqualTests((int)uTest);
			break;
		case D3DPCMPCAPS_LESSEQUAL:
			LessTests((int)uTest);
			break;
		case D3DPCMPCAPS_GREATER:
			GreaterTests((int)uTest);
			break;
		case D3DPCMPCAPS_NOTEQUAL:
			EqualTests((int)uTest);
			break;
		case D3DPCMPCAPS_GREATEREQUAL:
			GreaterTests((int)uTest);
			break;
		case D3DPCMPCAPS_ALWAYS:
			AlwaysTests((int)uTest);
			break;
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CWCmpTest::SceneRefresh(void)
{
	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CWCmpTest::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

//******************************************************************************
BOOL CWCmpTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CWCmpTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CWCmpTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\wcmp.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	WCmp.h
 *
 ***************************************************************************/

#ifndef __WCMP_H__
#define __WCMP_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

// Defines
#define MAX_TESTS	16

typedef struct _Buffer
{
    DWORD dwStencilBitMask; // stencil bit mask
    DWORD dwZBitMask;       // z bit mask
    struct _Buffer *pNext;  // address of BUFFER data
} BUFFER, *PBUFFER;

// Base Class definitions
class CWCmpTest: public CD3DTest
{
    // Data
	public:
    D3DTLVERTEX     VertexList[24];
    DWORD           dwVertexCount;
	DWORD			dwWCmpCap;
	char			msgString[80];

    // Hack Data
	D3DVERTEX	D3DVertexList[100];
// 	CMaterial   *pMaterial;

    CSurface8*  m_pd3dsOriginalZ;
    UINT        m_uMaxTests;
    BOOL            m_bExit;

    UINT        m_uZBufferFormats;
    D3DFORMAT   m_fmtd[4];

	public:
	CWCmpTest();
	~CWCmpTest();

	// Framework functions
//	virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	virtual bool SetDefaultMatrices(void);
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT uTestNum);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);

	// Helper functions
	void ComboTests(float Zval);
	void AlwaysTests(int nTest);
	void LessTests(int nTest);
	bool EqualTests(int nTest);
	void GreaterTests(int nTest);

    virtual BOOL    AbortedExit(void);

    protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Never Class definitions
class CWNeverTest: public CWCmpTest
{
	public:
	CWNeverTest();
	~CWNeverTest();

	bool SetDefaultRenderStates(void);
};

// Less Class definitions
class CWLessTest: public CWCmpTest
{
	public:
	CWLessTest();
	~CWLessTest();

	bool SetDefaultRenderStates(void);
};

// Equal Class definitions
class CWEqualTest: public CWCmpTest
{
    // Data
    D3DTLVERTEX     BackgroundList[4];

	public:
	CWEqualTest();
	~CWEqualTest();

	bool SetDefaultRenderStates(void);
	void SceneRefresh(void);

	// Helper functions
	void SetupBackground(void);
};

// LessEqual Class definitions
class CWLessEqualTest: public CWCmpTest
{
	public:
	CWLessEqualTest();
	~CWLessEqualTest();

	bool SetDefaultRenderStates(void);
};

// Greater Class definitions
class CWGreaterTest: public CWCmpTest
{
    // Data
    D3DTLVERTEX     BackgroundList[4];

	public:
	CWGreaterTest();
	~CWGreaterTest();

	bool SetDefaultRenderStates(void);
	void SceneRefresh(void);

	// Helper functions
	void SetupBackground(void);
};

// NotEqual Class definitions
class CWNotEqualTest: public CWCmpTest
{
    // Data
    D3DTLVERTEX     BackgroundList[4];

	public:
	CWNotEqualTest();
	~CWNotEqualTest();

	bool SetDefaultRenderStates(void);
	void SceneRefresh(void);

	// Helper functions
	void SetupBackground(void);
};

// GreaterEqual Class definitions
class CWGreaterEqualTest: public CWCmpTest
{
    // Data
    D3DTLVERTEX     BackgroundList[4];

	public:
	CWGreaterEqualTest();
	~CWGreaterEqualTest();

	bool SetDefaultRenderStates(void);
	void SceneRefresh(void);

	// Helper functions
	void SetupBackground(void);
};

// Always Class definitions
class CWAlwaysTest: public CWCmpTest
{
	public:
	CWAlwaysTest();
	~CWAlwaysTest();

	bool SetDefaultRenderStates(void);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\exe\sources.inc ===
TARGETNAME=wcmp
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_wcmp.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\wcmp\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=wcmp
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_wcmp.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\modulex.h ===
#define PREPEND_MODULE(Suffix) zbuffer##Suffix
#define MODULE_STRING "zbuffer"
#pragma comment(linker, "/include:_zbuffer_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_zbuffr
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
        zbuffer.cpp \
        enable.cpp \
        print.cpp \
        verify.cpp \
        verify8.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\print.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZBuffer.h"

//************************************************************************
// Print Test functions

CZPrintTest::CZPrintTest()
{
	m_szTestName = TEXT("Print Z Buffer Formats");
	m_szCommandKey = TEXT("Print");

    // Tell Parent that we are the Print class
    bPrint = true;
}

CZPrintTest::~CZPrintTest()
{
}

UINT CZPrintTest::TestInitialize(void)
{
	// Reset the Test range 
	SetTestRange(1, m_uCommonZBufferFormats);

	// Print out all source Z buffer formats
	for (int i=0; i < (int)m_uCommonZBufferFormats; i++)
	{
//        if (m_dwVersion <= 0x0700)
//    		PrintFormat(&m_pAdapter->Devices[m_pMode->nSrcDevice].ZBufferFormat[i].ddpfPixelFormat, i+1);
//        else
            WriteToLog("Z Buffer Format %02d: %s\n",i+1,D3DFmtToString(m_fmtdCommon[i]));
	}

	return D3DTESTINIT_SKIPALL;
}
/*
void CZPrintTest::PrintFormat(const PIXELFORMAT *pDDPF, int nFormat)
{
    DWORD dwFlags			= pDDPF->dwFlags;
    DWORD dwTotalBitDepth	= pDDPF->dwZBufferBitDepth;
    DWORD dwStencilBitDepth	= pDDPF->dwStencilBitDepth;
    DWORD dwZBitMask		= pDDPF->dwZBitMask;
    DWORD dwStencilBitMask	= pDDPF->dwStencilBitMask;
	DWORD dwZBitCount		= 0;
	DWORD dwStencilBitCount	= 0;
	TCHAR szBuffer[80];
    DWORD mask;

    // Count number of bits for each component
    for (mask = pDDPF->dwZBitMask; mask; mask>>=1)
        dwZBitCount += (mask & 0x1);
    for (mask = pDDPF->dwStencilBitMask; mask; mask>>=1)
        dwStencilBitCount += (mask & 0x1);

	// Report the format
	sprintf(szBuffer,"Z Buffer Format %02d, Z: %d-bit (0x%x)",nFormat,dwZBitCount,dwZBitMask);

    if (dwFlags & PF_STENCILBUFFER)
	{
		sprintf(szBuffer,"%s, Stencil: %d-bit (0x%x)",szBuffer,dwStencilBitCount,dwStencilBitMask);
	}

	sprintf(szBuffer, "%s.\n", szBuffer);
	WriteToLog(szBuffer);

    // Check for invalid fields
    if (dwZBitCount != (dwTotalBitDepth - dwStencilBitDepth))
	{
		WriteToLog("Error: ZBitMask inconsistant with bit depth value!\n");
	}
    if (dwStencilBitCount != dwStencilBitDepth)
	{
		WriteToLog("Error: StencilBitMask inconsistant with bit depth value!\n");
	}
    if (!(dwFlags & PF_ZBUFFER))
	{
		WriteToLog("Error: DDPF_ZBUFFER not set on enumerated Z buffer!\n");
	}

	// Print the pixel description
	WriteToLog("PixelFormat:\n");
	WriteToLog("\tdwSize: %d.\n",pDDPF->dwSize);
	WriteToLog("\tdwFlags: 0x%x.\n",pDDPF->dwFlags);
	WriteToLog("\tdwZBufferBitDepth: %d.\n",pDDPF->dwZBufferBitDepth);
	WriteToLog("\tdwStencilBitDepth: %d.\n",pDDPF->dwStencilBitDepth);
	WriteToLog("\tdwZBitMask: %#010x.\n",pDDPF->dwZBitMask);
	WriteToLog("\tdwStencilBitMask: %#010x.\n\n",pDDPF->dwStencilBitMask);
}
*/
bool CZPrintTest::ExecuteTest(UINT uTestNum)
{
    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\verify.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZBuffer.h"

//************************************************************************
// Verify Test functions

CZVerifyTest::CZVerifyTest()
{
	m_szTestName = TEXT("Verify Z Buffer Formats");
	m_szCommandKey = TEXT("Verify");
}

CZVerifyTest::~CZVerifyTest()
{
}

bool CZVerifyTest::ExecuteTest(UINT uTestNum)
{
    UINT uTest = (uTestNum - 1) % m_uMaxTests + 1;

	// Initialize some variables
	errString[0] = '\0';
	msgString[0] = '\0';

    if (uTest == 1) {
        CSurface8* pd3ds;
        CSurface8* pd3dsRT;
        D3DSURFACE_DESC d3dsd;
        int nZBufferFormat = (uTestNum - 1) / m_uMaxTests;
        if (FAILED(m_pDevice->GetRenderTarget(&pd3dsRT))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetRenderTarget failed"));
            SkipTests(m_uMaxTests);
            return false;
        }
        pd3dsRT->GetDesc(&d3dsd);
        pd3dsRT->Release();
        if (FAILED(m_pDevice->CreateDepthStencilSurface(d3dsd.Width, d3dsd.Height, m_fmtdCommon[nZBufferFormat], D3DMULTISAMPLE_NONE, &pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::CreateDepthStencilSurface failed on format %s"), D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
            SkipTests(m_uMaxTests);
            return false;
        }
    	msgString[0] = '\0';
	    sprintf(msgString, "%sZ Buffer Format: %s.\n",msgString,D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
        WriteToLog(msgString);
        if (FAILED(m_pDevice->SetRenderTarget(NULL, pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetRenderTarget failed on depth format %s"), D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
            SkipTests(m_uMaxTests);
            pd3ds->Release();
            return false;
        }
        pd3ds->Release();
    	msgString[0] = '\0';
    }

//    if (m_dwVersion <= 0x0700)
//    {
	    // Perform some Z buffer validation
//	    bValidFormat = VerifyFormat();
//    }
//    else
//    {
	    // Perform Dx8 Z buffer validation
	    bValidFormat = VerifyFormat8(); 
//    }

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CZVerifyTest::SceneRefresh(void)
{
}

bool CZVerifyTest::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;

	// Tell the logfile how they did
	if (bValidFormat)
	{
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
		m_fPassPercentage = 1.0;
		Pass();
	}
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
		m_fPassPercentage = 0.0;
		Fail();

		// Print any errors to the log
		if (errString[0] != '\0')
			WriteToLog(errString);
	}

	WriteStatus("$gTest Options$y",msgString);
	WriteStatus("$gOverall Results",szBuffer);

    return bValidFormat;
}
/*
bool CZVerifyTest::VerifyFormat(void)
{
    DDSURFACEDESC2	ddsd2;
	m_pSrcZBuffer->GetSurfaceDescription(&ddsd2);

	DDPIXELFORMAT *pDDPF;
	pDDPF = &(ddsd2.ddpfPixelFormat);

    bool bError				= false;
    DWORD dwFlags			= pDDPF->dwFlags;
    DWORD dwTotalBitDepth	= pDDPF->dwZBufferBitDepth;
    DWORD dwStencilBitDepth	= pDDPF->dwStencilBitDepth;
    DWORD dwZBitMask		= pDDPF->dwZBitMask;
    DWORD dwStencilBitMask	= pDDPF->dwStencilBitMask;
	DWORD dwZBitCount		= 0;
	DWORD dwStencilBitCount	= 0;
    DWORD mask;

    // Count number of bits for each component
    for (mask = pDDPF->dwZBitMask; mask; mask>>=1)
        dwZBitCount += (mask & 0x1);
    for (mask = pDDPF->dwStencilBitMask; mask; mask>>=1)
        dwStencilBitCount += (mask & 0x1);

   	// Report the format
	sprintf(msgString,"%s%d-bit Z Buffer, Z: %d-bit (0x%x)",msgString,dwTotalBitDepth,dwZBitCount,dwZBitMask);

    if (dwFlags & PF_STENCILBUFFER)
	{
		sprintf(msgString,"%s, Stencil: %d-bit (0x%x)",msgString,dwStencilBitCount,dwStencilBitMask);
	}

	// Check for invalid formats
    if (dwZBitCount != (dwTotalBitDepth - dwStencilBitDepth))
	{
		sprintf(errString,"%sError: ZBitMask inconsistant with bit depth value!\n",errString);
		bError = true;
	}
    if (dwStencilBitCount != dwStencilBitDepth)
	{
		sprintf(errString,"%sError: StencilBitMask inconsistant with bit depth value!\n",errString);
		bError = true;
	}
    if (!(dwFlags & PF_ZBUFFER))
	{
		sprintf(errString,"%sError: DDPF_ZBUFFER not set on enumerated Z buffer!\n",errString);
		bError = true;
	}

	return (!bError);
}
*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\enable.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZBuffer.h"

//************************************************************************
// ZEnable Test functions

CZEnableTest::CZEnableTest()
{
	m_szTestName = TEXT("Z Buffer Enable");
	m_szCommandKey = TEXT("Enable");

	bEnable = true;
}

CZEnableTest::~CZEnableTest()
{
}

bool CZEnableTest::ExecuteTest(UINT uTestNum)
{
    UINT uTest = (uTestNum - 1) % m_uMaxTests + 1;

	// Initialize some variables
 	dwVertexCount = 0;
	msgString[0] = '\0';

    if (uTest == 1) {
        CSurface8* pd3ds;
        CSurface8* pd3dsRT;
        D3DSURFACE_DESC d3dsd;
        int nZBufferFormat = (uTestNum - 1) / m_uMaxTests;
        if (FAILED(m_pDevice->GetRenderTarget(&pd3dsRT))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetRenderTarget failed"));
            SkipTests(m_uMaxTests);
            return false;
        }
        pd3dsRT->GetDesc(&d3dsd);
        pd3dsRT->Release();
        if (FAILED(m_pDevice->CreateDepthStencilSurface(d3dsd.Width, d3dsd.Height, m_fmtdCommon[nZBufferFormat], D3DMULTISAMPLE_NONE, &pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::CreateDepthStencilSurface failed on format %s"), D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
            SkipTests(m_uMaxTests);
            return false;
        }
    	msgString[0] = '\0';
	    sprintf(msgString, "%sZ Buffer Format: %s.\n",msgString,D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
        WriteToLog(msgString);
        if (FAILED(m_pDevice->SetRenderTarget(NULL, pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetRenderTarget failed on depth format %s"), D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
            SkipTests(m_uMaxTests);
            pd3ds->Release();
            return false;
        }
        pd3ds->Release();
    	msgString[0] = '\0';
    }

	// Let's build a triangle.
	DrawTriangle();

	// Set the appropriate renderstate
	switch (uTest)
	{
		case (1):
            // Force culling of triangle on Dx7 (Manbug #26983 not being fixed on Dx7)
//            if (m_dwVersion == 0x0700)
//                SetRenderState(D3DRS_CULLMODE, (DWORD)D3DCULL_CW, CD3D_REF);

            // On Dx8, check for TL clip cap
            if (m_dwVersion >= 0x0800)
            {
            	DWORD dwPrimitiveMiscCaps = m_d3dcaps.PrimitiveMiscCaps;

	            if (!(dwPrimitiveMiscCaps & D3DPMISCCAPS_CLIPTLVERTS))
	            {
		            WriteToLog("\nDevice capability not supported: Misc ClipTLVerts.");  
#ifndef DEMO_HACK
                    SkipTests(1);
		            return false;
#endif
	            }
            }

            sprintf(msgString, "%sZEnable: True, Green Triangle Visible: No", msgString);
			SetRenderState(D3DRS_ZENABLE, (DWORD)D3DZB_TRUE);
			break;
		case (2):
            // Reset culling to default value
//            if (m_dwVersion == 0x0700)
//                SetRenderState(D3DRS_CULLMODE, (DWORD)D3DCULL_CCW, CD3D_REF);

			sprintf(msgString, "%sZEnable: False, Green Triangle Visible: Yes", msgString);
			SetRenderState(D3DRS_ZENABLE, (DWORD)D3DZB_FALSE);
            break;
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

//************************************************************************
// Internal API:    DrawTriangle
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CZEnableTest::DrawTriangle(void)
{
    D3DVECTOR v0 = {(float)m_vpTest.X + 115.0f, (float)m_vpTest.Y +  40.0f, 0.7f};
    D3DVECTOR v1 = {(float)m_vpTest.X + 205.0f, (float)m_vpTest.Y + 225.0f, 0.7f};
    D3DVECTOR v2 = {(float)m_vpTest.X +  25.0f, (float)m_vpTest.Y + 225.0f, 0.7f};

    // Green Triangle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(v0, (1.0f / 0.7f), RGBA_MAKE(0,255,0,255), 0, 0.5f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(v1, (1.0f / 0.7f), RGBA_MAKE(0,255,0,255), 0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(v2, (1.0f / 0.7f), RGBA_MAKE(0,255,0,255), 0, 0.0f,1.0f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\unique.cpp ===
#include <d3d.h>
#include "ZBuffer.h"

bool Unique(DWORD dwVersion, PBUFFER *pBuffer, LPPIXELFORMAT pFormat)
{
    bool bFound = false;
    PBUFFER pTemp;

    if (dwVersion >= 0x0800)
        return true;

    for (pTemp = *pBuffer; pTemp && !bFound; pTemp = pTemp->pNext)
        if ((pFormat->dwStencilBitMask == pTemp->dwStencilBitMask) &&
            (pFormat->dwZBitMask == pTemp->dwZBitMask))
            bFound = true;

    if (!bFound)
    {
        pTemp = (PBUFFER) malloc(sizeof(BUFFER));
        pTemp->dwStencilBitMask = pFormat->dwStencilBitMask;
        pTemp->dwZBitMask = pFormat->dwZBitMask;
        pTemp->pNext = *pBuffer;
        *pBuffer = pTemp;
    }

    return !bFound;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\zbuffer.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	ZBuffer.h
 *
 ***************************************************************************/

#ifndef __ZBUFFER_H__
#define __ZBUFFER_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

// Defines
const int MAX_TESTS = 1;

typedef struct _Buffer
{
    DWORD dwStencilBitMask; // stencil bit mask
    DWORD dwZBitMask;       // z bit mask
    struct _Buffer *pNext;  // address of BUFFER data
} BUFFER, *PBUFFER;

// Base Class definitions
class CZBufferTest: public CD3DTest
{
    // Data
	public:
    D3DTLVERTEX     VertexList[3];
    DWORD           dwVertexCount;
	bool			bEnable;
	bool			bPrint;
	char			msgString[80];

    CSurface8*      m_pd3dsOriginalZ;
    UINT            m_uMaxTests;
    BOOL            m_bExit;

	public:
	CZBufferTest();
	~CZBufferTest();

	// Framework functions
//	virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);

    virtual BOOL    AbortedExit(void);

    protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Verify Class definitions
class CZVerifyTest: public CZBufferTest
{
	// Private Data
	bool	bValidFormat;
	char 	errString[1024];

	public:
	CZVerifyTest();
	~CZVerifyTest();

	// Framework functions
	bool ExecuteTest(UINT);
	void SceneRefresh(void);
	bool ProcessFrame(void);

	// Helper functions
	bool VerifyFormat(void);
    bool VerifyFormat8(void);
};

// Print Class definitions
class CZPrintTest: public CZBufferTest
{
	public:
	CZPrintTest();
	~CZPrintTest();

	// Framework functions
	UINT TestInitialize(void);
	bool ExecuteTest(UINT uTestNum);

	// Helper functions
//	void PrintFormat(const PIXELFORMAT *pDDPF, int nFormat);
};

// Enable Class definitions
class CZEnableTest: public CZBufferTest
{
	public:
	CZEnableTest();
	~CZEnableTest();

	// Framework functions
	bool ExecuteTest(UINT uTestNum);

	// Helper functions
	void DrawTriangle(void);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\zbuffer.cpp ===
#define STRICT
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZBuffer.h"

//extern bool Unique(DWORD dwVersion, PBUFFER *pBuffers, LPPIXELFORMAT pFormat);

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CZBufferTest*   pZBufferTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 3 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pZBufferTest = new CZVerifyTest();
                break;
            case 1:
                pZBufferTest = new CZEnableTest();
                break;
            case 2:
                pZBufferTest = new CZPrintTest();
                break;
        }

        if (!pZBufferTest) {
            return FALSE;
        }

        // Initialize the scene
        if (pZBufferTest->Create(pDisplay)) {

            bRet = pZBufferTest->Exhibit(pnExitCode);

            bQuit = pZBufferTest->AbortedExit();
        }

        // Clean up the scene
        pZBufferTest->Release();
    }

    return bRet;
}

CZBufferTest::CZBufferTest()
{
	// Init variables
	bEnable = false;
	bPrint = false;

    // Disable textures
    m_ModeOptions.fTextures = false;

    m_pd3dsOriginalZ = NULL;
    m_bExit = FALSE;
}

CZBufferTest::~CZBufferTest()
{
    // Restore the original depth buffer
    if (m_pd3dsOriginalZ) {
        m_pDevice->SetRenderTarget(NULL, m_pd3dsOriginalZ);
    }
}
/*
bool CZBufferTest::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
    PBUFFER pBuffers = NULL;

	// Test all of the common ZBuffer Formats
    if (IsConformance() && !bPrint)
    {
        for (int i=0; i < m_uCommonZBufferFormats; i++)
		{
            if (Unique(m_dwVersion, &pBuffers, &m_pCommonZBufferFormats[i].ddpfPixelFormat))
            {
				pMode->D3DMode.nZBufferFormat = i;

				CD3DTest::AddModeList(pMode,pData,dwDataSize);
			}
        }
    }
    else
    {
		// Let the framework handle stress mode
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
	}

    // Cleanup any memory that we alloc'd
    if (pBuffers)
    {
        PBUFFER pBuffer, pTemp;

        for (pBuffer = pBuffers; pBuffer; pBuffer = pTemp)
        {
            pTemp = pBuffer->pNext;
            free(pBuffer);
        }
    }

    return true;
}
*/
UINT CZBufferTest::TestInitialize(void)
{
	// Setup the Test range
	if (bEnable)
        m_uMaxTests = MAX_TESTS + 1;
	else
        m_uMaxTests = MAX_TESTS;

	SetTestRange(1, m_uMaxTests * m_uCommonZBufferFormats);

    // Save the original depth buffer
    m_pDevice->GetDepthStencilSurface(&m_pd3dsOriginalZ);

    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Init the msgString to empty
	msgString[0] = '\0';

	// Log the current Z Buffer format
//    if (m_dwVersion <= 0x0700)
//    {
//        PIXELFORMAT Format;
//        memcpy(&Format, &m_pCommonZBufferFormats[m_pMode->nZBufferFormat].ddpfPixelFormat, sizeof(Format));

//	    sprintf(msgString, "%sZ Buffer Format, Z: %d-bit (0x%x), Stencil: %d-bit (0x%x).\n",msgString,Format.dwZBufferBitDepth - Format.dwStencilBitDepth,Format.dwZBitMask,Format.dwStencilBitDepth,Format.dwStencilBitMask);
//    }
//    else
//	    sprintf(msgString, "%sZ Buffer Format: %s.\n",msgString,D3DFmtToString(m_pCommonZBufferFormats[m_pMode->nZBufferFormat].d3dfFormat));

//    WriteToLog(msgString);

	return D3DTESTINIT_RUN;
}

bool CZBufferTest::ClearFrame(void)
{
    return Clear(RGBA_MAKE(0,0,0,255), 0.5f);
//	return Clear(RGBA_MAKE(0,0,0,255));
}

void CZBufferTest::SceneRefresh(void)
{
	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CZBufferTest::ProcessFrame(void)
{
	char 	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gTest Options$y",msgString);
	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

//******************************************************************************
BOOL CZBufferTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CZBufferTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CZBufferTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\verify8.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZBuffer.h"

bool CZVerifyTest::VerifyFormat8(void)
{
    CSurface8* pd3ds;
    bool bError	= false;

    D3DSURFACE_DESC  Desc;
//	m_pSrcZBuffer->GetSurfaceDescription(&Desc);
    m_pDevice->GetDepthStencilSurface(&pd3ds);
    pd3ds->GetDesc(&Desc);
    pd3ds->Release();

   	// Report the format
    switch (Desc.Format)
    {
        case D3DFMT_D16:
            sprintf(msgString,"%sFormat: D3DFMT_D16, ",msgString);
            break;
        case D3DFMT_D24S8:
            sprintf(msgString,"%sFormat: D3DFMT_D24S8, ",msgString);
            break;
#ifndef UNDER_XBOX
        case D3DFMT_D16_LOCKABLE:  
            sprintf(msgString,"%sFormat: D3DFMT_D16_LOCKABLE, ",msgString);
            break;
        case D3DFMT_D32:
            sprintf(msgString,"%sFormat: D3DFMT_D32, ",msgString);
            break;
        case D3DFMT_D15S1:
            sprintf(msgString,"%sFormat: D3DFMT_D15S1, ",msgString);
            break;
        case D3DFMT_D24X4S4:
            sprintf(msgString,"%sFormat: D3DFMT_D24X4S4, ",msgString);
            break;
        case D3DFMT_D24X8:
            sprintf(msgString,"%sFormat: D3DFMT_D24X8, ",msgString);
            break;
#else
        case D3DFMT_F16:
            sprintf(msgString,"%sFormat: D3DFMT_F16, ",msgString);
            break;
        case D3DFMT_F24S8:
            sprintf(msgString,"%sFormat: D3DFMT_F24S8, ",msgString);
            break;
        case D3DFMT_LIN_D16:
            sprintf(msgString,"%sFormat: D3DFMT_LIN_D16, ",msgString);
            break;
        case D3DFMT_LIN_D24S8:
            sprintf(msgString,"%sFormat: D3DFMT_LIN_D24S8, ",msgString);
            break;
        case D3DFMT_LIN_F16:
            sprintf(msgString,"%sFormat: D3DFMT_LIN_F16, ",msgString);
            break;
        case D3DFMT_LIN_F24S8:
            sprintf(msgString,"%sFormat: D3DFMT_LIN_F24S8, ",msgString);
            break;
#endif
        default: 
            sprintf(msgString,"%sFormat: %d, ",msgString,Desc.Format);
            break;
    };

    sprintf(msgString,"%sUsage: 0x%x",msgString,Desc.Usage);

	// Check for invalid usage
    if (!(Desc.Usage & D3DUSAGE_DEPTHSTENCIL))
	{
		sprintf(errString,"%sError: D3DUSAGE_DEPTHSTENCIL not set on Z Buffer Usage!\n",errString);
		bError = true;
	}

	// Check for invalid formats
    if ((Desc.Format != D3DFMT_D16)     &&
#ifndef UNDER_XBOX
        (Desc.Format != D3DFMT_D16_LOCKABLE) &&
        (Desc.Format != D3DFMT_D32) &&
        (Desc.Format != D3DFMT_D15S1) &&
        (Desc.Format != D3DFMT_D24X4S4) &&
        (Desc.Format != D3DFMT_D24X8) &&
#else
        (Desc.Format != D3DFMT_F16) &&
        (Desc.Format != D3DFMT_F24S8) &&
        (Desc.Format != D3DFMT_LIN_D16) &&
        (Desc.Format != D3DFMT_LIN_D24S8) &&
        (Desc.Format != D3DFMT_LIN_F16) &&
        (Desc.Format != D3DFMT_LIN_F24S8) &&
#endif
        (Desc.Format != D3DFMT_D24S8))
	{
		sprintf(errString,"%sError: %d is an unknown Z Buffer Format!\n",errString,Desc.Format);
		bError = true;
	}

	return (!bError);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=zbuffer
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_zbuffr.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zbuffer\exe\sources.inc ===
TARGETNAME=zbuffer
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_zbuffr.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\combo.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZCmp.h"

//************************************************************************
// Internal API:    ComboTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CZCmpTest::ComboTests(float Zval)
{
	Zval = (!Zval ? 0.01f : Zval);

	// Red Triangle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.9999999f),(1.0f / 0.9999999f), RGBA_MAKE(255,0,0,255),0, 0.5f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 210.0f,210.0f + (float)m_vpTest.Y,0.01f),     (1.0f / 0.01f),      RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,210.0f + (float)m_vpTest.Y,0.01f),     (1.0f / 0.01f),      RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
	// Green Triangle
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,Zval),(1.0f / Zval), RGBA_MAKE(0,255,0,255),0, 0.5f,0.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 210.0f,210.0f + (float)m_vpTest.Y,Zval),(1.0f / Zval), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
	VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,210.0f + (float)m_vpTest.Y,Zval),(1.0f / Zval), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\equal.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZCmp.h"

//************************************************************************
// Equal Test functions

CZEqualTest::CZEqualTest()
{
	m_szTestName = TEXT("Z Compare Equal");
	m_szCommandKey = TEXT("Equal");

	// Tell parent class what cap to look for
	dwZCmpCap = D3DPCMPCAPS_EQUAL;
}

CZEqualTest::~CZEqualTest()
{
}

bool CZEqualTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the Z Buffer and compare func Equal
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_EQUAL);
	return true;
}

bool CZEqualTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255), 0.1f);
}

/*
void CZEqualTest::SetupBackground(void)
{
	float Zval = 0.1f;
	float RHW  = 0.1f;
	float fWidth  = (float)m_pSrcTarget->m_dwWidth;
	float fHeight = (float)m_pSrcTarget->m_dwHeight;

	// Black Background Triangle
	BackgroundList[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, 0.0f,    Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 1.0f,0.0f);
	BackgroundList[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, fHeight, Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 1.0f,1.0f);
	BackgroundList[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   0.0f,    Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 0.0f,0.0f);
	BackgroundList[3] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   fHeight, Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 0.0f,1.0f);
}

void CZEqualTest::SceneRefresh(void)
{
	if (BeginScene())
	{
		// Special setup for initing the background
		SetupBackground();

		// Special render state needed
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,BackgroundList,4,NULL,0,0);

		// Set the appropriate renderstate
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_EQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}
*/
//************************************************************************
// NotEqual Test functions

CZNotEqualTest::CZNotEqualTest()
{
	m_szTestName = TEXT("Z Compare NotEqual");
	m_szCommandKey = TEXT("NotEqual");

	// Tell parent class what cap to look for
	dwZCmpCap = D3DPCMPCAPS_NOTEQUAL;
}

CZNotEqualTest::~CZNotEqualTest()
{
}

bool CZNotEqualTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the Z Buffer and compare func NotEqual
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_NOTEQUAL);
	return true;
}

bool CZNotEqualTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255), 0.1f);
}
/*
void CZNotEqualTest::SetupBackground(void)
{
	float Zval = 0.1f;
	float RHW  = 0.1f;
	float fWidth  = (float)m_pSrcTarget->m_dwWidth;
	float fHeight = (float)m_pSrcTarget->m_dwHeight;

	// Black Background Triangle
	BackgroundList[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, 0.0f,    Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 1.0f,0.0f);
	BackgroundList[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, fHeight, Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 1.0f,1.0f);
	BackgroundList[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   0.0f,    Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 0.0f,0.0f);
	BackgroundList[3] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   fHeight, Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 0.0f,1.0f);

//    Clear(RGBA_MAKE(0,0,0,255), 0.1f);
}

void CZNotEqualTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Special setup for initing the background
		SetupBackground();

		// Special render state needed
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,BackgroundList,4,NULL,0,0);

		// Set the appropriate renderstate
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_NOTEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}
*/
//************************************************************************
// Internal API:    EqualTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

bool CZCmpTest::EqualTests(int nTest)
{
	switch (nTest)
	{
		case (1):	// Left Handed Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_EQUAL)
				sprintf(msgString, "%sFour flat triangles (left), Visible: Yellow & Green",msgString);
			else
				sprintf(msgString, "%sFour flat triangles (left), Visible: Red (g/y) & Blue (y)",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.2f),(1.0f / 0.2f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.2f),(1.0f / 0.2f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.2f),(1.0f / 0.2f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  90.0f, 45.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,255,0,255),0, 0.0f, 0.25f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f, 10.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 195.0f,150.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,255,0,255),0, 0.75f,1.0f);
			break;
		case (2):	// Right Handed Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_EQUAL)
				sprintf(msgString, "%sFour flat triangles (right), Visible: Blue & Green",msgString);
			else
				sprintf(msgString, "%sFour flat triangles (right), Visible: Red (g) & Yellow",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.05f),(1.0f / 0.05f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.05f),(1.0f / 0.05f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.05f),(1.0f / 0.05f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  45.0f, 90.0f + (float)m_vpTest.Y,0.05f),(1.0f / 0.05f), RGBA_MAKE(255,255,0,255),0, 0.25f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,195.0f + (float)m_vpTest.Y,0.05f),(1.0f / 0.05f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.75f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,230.0f + (float)m_vpTest.Y,0.05f),(1.0f / 0.05f), RGBA_MAKE(255,255,0,255),0, 0.0f, 1.0f);
			break;
		case (3):	// Single Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_EQUAL)
				sprintf(msgString, "%sFour flat triangles, Visible: Red & White",msgString);
			else
				sprintf(msgString, "%sFour flat triangles, Visible: White, Cyan, & Magenta",msgString);

			// Magenta Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y,0.1001f),(1.0f / 0.1001f), RGBA_MAKE(255,0,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 300.0f,270.0f + (float)m_vpTest.Y,0.1001f),(1.0f / 0.1001f), RGBA_MAKE(255,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,270.0f + (float)m_vpTest.Y,0.1001f),(1.0f / 0.1001f), RGBA_MAKE(255,0,255,255),0, 0.0f,1.0f);
			// Teal Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 20.0f + (float)m_vpTest.Y,0.0999f),(1.0f / 0.0999f), RGBA_MAKE(0,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,260.0f + (float)m_vpTest.Y,0.0999f),(1.0f / 0.0999f), RGBA_MAKE(0,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  20.0f,260.0f + (float)m_vpTest.Y,0.0999f),(1.0f / 0.0999f), RGBA_MAKE(0,255,255,255),0, 0.0f,1.0f);
			// White Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 30.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 260.0f,250.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  40.0f,250.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,255,255,255),0, 0.0f,1.0f);
			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 40.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,0,0,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.0f,240.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  60.0f,240.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			break;
		case (4):	// Combo Test: 0.0f
		case (5):	// Combo Test: 0.1f
		case (6):	// Combo Test: 0.2f
		case (7):	// Combo Test: 0.3f	
		case (8):	// Combo Test: 0.4f	
		case (9):	// Combo Test: 0.5f
		case (10):	// Combo Test: 0.6f
		case (11):	// Combo Test: 0.7f	
		case (12):	// Combo Test: 0.8f
		case (13):	// Combo Test: 0.9f
			if (dwZCmpCap == D3DPCMPCAPS_EQUAL)
			{
				if (nTest == 5)
					sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Green",msgString,10 * (nTest - 4));
				else
					sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: None",msgString,10 * (nTest - 4));
			}
			else
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Green",msgString,10 * (nTest - 4));

			ComboTests(0.1f * (nTest - 4));
			break;
		case (14):	// Combo Test: 0.9999999f
			if (dwZCmpCap == D3DPCMPCAPS_EQUAL)
				sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: None",msgString);
			else
				sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: 100%% Green",msgString);

			ComboTests(0.9999999f);
			break;
		default:
			break;
	}

	return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\modulex.h ===
#define PREPEND_MODULE(Suffix) zcmp##Suffix
#define MODULE_STRING "zcmp"
#pragma comment(linker, "/include:_zcmp_ExhibitScene@8")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\sources.inc ===
!include ..\..\..\sources.inc

TARGETNAME=l_zcmp
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

SYNCHRONIZE_BLOCK=1

SOURCES=\
    zcmp.cpp \
    always.cpp \
    combo.cpp \
    equal.cpp \
    greater.cpp \
    less.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\always.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZCmp.h"

//************************************************************************
// Never Test functions

CZNeverTest::CZNeverTest()
{
	m_szTestName = TEXT("Z Compare Never");
	m_szCommandKey = TEXT("Never");

	// Tell parent class what cap to look for
	dwZCmpCap = D3DPCMPCAPS_NEVER;
}

CZNeverTest::~CZNeverTest()
{
}

bool CZNeverTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the Z Buffer and compare func Never
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_NEVER);
	return true;
}

//************************************************************************
// Always Test functions

CZAlwaysTest::CZAlwaysTest()
{
	m_szTestName = TEXT("Z Compare Always");
	m_szCommandKey = TEXT("Always");

	// Tell parent class what cap to look for
	dwZCmpCap = D3DPCMPCAPS_ALWAYS;
}

CZAlwaysTest::~CZAlwaysTest()
{
}

bool CZAlwaysTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the Z Buffer and compare func Always
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_ALWAYS);
	return true;
}

//************************************************************************
// Internal API:    AlwaysTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CZCmpTest::AlwaysTests(int nTest)
{
	switch (nTest)
	{
		case (1):	// Left Handed Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour flat triangles (left), Visible: None",msgString);
			else
				sprintf(msgString, "%sFour flat triangles (left), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  90.0f, 45.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,255,0,255),0, 0.0f, 0.25f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f, 10.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 195.0f,150.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,255,0,255),0, 0.75f,1.0f);
			break;
		case (2):	// Right Handed Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour flat triangles (right), Visible: None",msgString);
			else
				sprintf(msgString, "%sFour flat triangles (right), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.35f),(1.0f / 0.35f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.35f),(1.0f / 0.35f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.35f),(1.0f / 0.35f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.4f),(1.0f / 0.4f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.4f),(1.0f / 0.4f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.4f),(1.0f / 0.4f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.3f),(1.0f / 0.3f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.3f),(1.0f / 0.3f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.3f),(1.0f / 0.3f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  45.0f, 90.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,255,0,255),0, 0.25f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,195.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,255,0,255),0, 1.0f, 0.75f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,230.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,255,0,255),0, 0.0f, 1.0f);
			break;
		case (3):	// Single Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour flat triangles, Visible: None",msgString);
			else
				sprintf(msgString, "%sFour flat triangles, Visible: All",msgString);

			// Magenta Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y,0.0001f),(1.0f / 0.0001f), RGBA_MAKE(255,0,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 300.0f,270.0f + (float)m_vpTest.Y,0.0001f),(1.0f / 0.0001f), RGBA_MAKE(255,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,270.0f + (float)m_vpTest.Y,0.0001f),(1.0f / 0.0001f), RGBA_MAKE(255,0,255,255),0, 0.0f,1.0f);
			// Teal Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 20.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(0,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,260.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(0,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  20.0f,260.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(0,255,255,255),0, 0.0f,1.0f);
			// White Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 30.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 260.0f,250.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  40.0f,250.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,255,255,255),0, 0.0f,1.0f);
			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 40.0f + (float)m_vpTest.Y,0.9999f),(1.0f / 0.9999f), RGBA_MAKE(255,0,0,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 240.0f,240.0f + (float)m_vpTest.Y,0.9999f),(1.0f / 0.9999f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  60.0f,240.0f + (float)m_vpTest.Y,0.9999f),(1.0f / 0.9999f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			break;
		case (4):	// Left Handed Non-Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour non-flat triangles (left), Visible: None",msgString);
			else
				sprintf(msgString, "%sFour non-flat triangles (left), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f),     RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f),     RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.0f),    (1.0f / 0.00001f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.00001f),(1.0f / 0.00001f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.9f),    (1.0f / 0.9f),     RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.2f),(1.0f / 0.2f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.3f),(1.0f / 0.3f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  90.0f, 45.0f + (float)m_vpTest.Y,0.25f), (1.0f / 0.25f),  RGBA_MAKE(255,255,0,255),0, 0.0f, 0.25f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f, 10.0f + (float)m_vpTest.Y,0.55f), (1.0f / 0.55f),  RGBA_MAKE(255,255,0,255),0, 1.0f, 0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 195.0f,150.0f + (float)m_vpTest.Y,0.005f),(1.0f / 0.005f), RGBA_MAKE(255,255,0,255),0, 0.75f,1.0f);
			break;
		case (5):	// Right Handed Non-Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sFour non-flat triangles (right), Visible: None",msgString);
			else
				sprintf(msgString, "%sFour non-flat triangles (right), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.00805f),(1.0f / 0.00805f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.309f),  (1.0f / 0.309f),   RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.351f),  (1.0f / 0.351f),   RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.123f), (1.0f / 0.123f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.0987f),(1.0f / 0.0987f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.4444f),(1.0f / 0.4444f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.099f),(1.0f / 0.099f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.75f), (1.0f / 0.75f),  RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.4f),  (1.0f / 0.4f),   RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			// Yellow Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  45.0f, 90.0f + (float)m_vpTest.Y,0.5001f),(1.0f / 0.5001f), RGBA_MAKE(255,255,0,255),0, 0.25f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f,195.0f + (float)m_vpTest.Y,0.007f), (1.0f / 0.007f),  RGBA_MAKE(255,255,0,255),0, 1.0f, 0.75f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,230.0f + (float)m_vpTest.Y,0.2f),   (1.0f / 0.2f),    RGBA_MAKE(255,255,0,255),0, 0.0f, 1.0f);
			break;
		case (6):	// Combo Test: 0.0f
		case (7):	// Combo Test: 0.1f
		case (8):	// Combo Test: 0.2f
		case (9):	// Combo Test: 0.3f	
		case (10):	// Combo Test: 0.4f	
		case (11):	// Combo Test: 0.5f
		case (12):	// Combo Test: 0.6f
		case (13):	// Combo Test: 0.7f	
		case (14):	// Combo Test: 0.8f
		case (15):	// Combo Test: 0.9f
			if (dwZCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: None",msgString,10 * (nTest - 6));
			else
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Green",msgString,10 * (nTest - 6));

			ComboTests(0.1f * (nTest - 6));
			break;
		case (16):	// Combo Test: 0.9999999f
			if (dwZCmpCap == D3DPCMPCAPS_NEVER)
				sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: None",msgString);
			else
				sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: 100%% Green",msgString);

			ComboTests(0.9999999f);
			break;
		default:
			break;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\less.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZCmp.h"

//************************************************************************
// Less Test functions

CZLessTest::CZLessTest()
{
	m_szTestName = TEXT("Z Compare Less");
	m_szCommandKey = TEXT("Less");

	// Tell parent class what cap to look for
	dwZCmpCap = D3DPCMPCAPS_LESS;
}

CZLessTest::~CZLessTest()
{
}

bool CZLessTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the Z Buffer and compare func Less
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESS);
	return true;
}

//************************************************************************
// LessEqual Test functions

CZLessEqualTest::CZLessEqualTest()
{
	m_szTestName = TEXT("Z Compare LessEqual");
	m_szCommandKey = TEXT("LessEqual");

	// Tell parent class what cap to look for
	dwZCmpCap = D3DPCMPCAPS_LESSEQUAL;
}

CZLessEqualTest::~CZLessEqualTest()
{
}

bool CZLessEqualTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the Z Buffer and compare func LessEqual
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);
	return true;
}

//************************************************************************
// Internal API:    LessTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CZCmpTest::LessTests(int nTest)
{
	switch (nTest)
	{
		case (1):	// Left Handed Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_LESS)
				sprintf(msgString, "%sThree flat triangles (left), Visible: Green, Red, & Blue",msgString);
			else
				sprintf(msgString, "%sThree flat triangles (left), Visible: Blue, Green, & Red",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			break;
		case (2):	// Right Handed Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_LESS)
				sprintf(msgString, "%sThree flat triangles (right), Visible: Green, Red, & Blue",msgString);
			else
				sprintf(msgString, "%sThree flat triangles (right), Visible: Blue, Green, & Red",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.2f),(1.0f / 0.2f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.2f),(1.0f / 0.2f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.2f),(1.0f / 0.2f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.1f),(1.0f / 0.1f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			break;
		case (3):	// Single Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_LESS)
				sprintf(msgString, "%sThree flat triangles, Visible: Cyan & Magenta",msgString);
			else
				sprintf(msgString, "%sThree flat triangles, Visible: White, Cyan, & Magenta",msgString);

			// Magenta Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y,0.0001f),(1.0f / 0.0001f), RGBA_MAKE(255,0,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 300.0f,270.0f + (float)m_vpTest.Y,0.0001f),(1.0f / 0.0001f), RGBA_MAKE(255,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,270.0f + (float)m_vpTest.Y,0.0001f),(1.0f / 0.0001f), RGBA_MAKE(255,0,255,255),0, 0.0f,1.0f);
			// Teal Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 20.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(0,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,260.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(0,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  20.0f,260.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(0,255,255,255),0, 0.0f,1.0f);
			// White Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 30.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(255,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 260.0f,250.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(255,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  40.0f,250.0f + (float)m_vpTest.Y,0.0f),(1.0f / 0.00001f), RGBA_MAKE(255,255,255,255),0, 0.0f,1.0f);
			break;
		case (4):	// Left Handed Non-Flat Triangles
			sprintf(msgString, "%sThree intersecting triangles (left), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.6f),(1.0f / 0.6f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.6f),(1.0f / 0.6f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.7f), (1.0f / 0.7f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.55f),(1.0f / 0.55f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.55f),(1.0f / 0.55f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.6f), (1.0f / 0.6f),  RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.55f),(1.0f / 0.55f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.55f),(1.0f / 0.55f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			break;
		case (5):	// Right Handed Non-Flat Triangles
			sprintf(msgString, "%sThree intersecting triangles (right), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.6f),(1.0f / 0.6f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.7f), (1.0f / 0.7f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.55f),(1.0f / 0.55f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.6f), (1.0f / 0.6f),  RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.6f), (1.0f / 0.6f),  RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.55f),(1.0f / 0.55f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.55f),(1.0f / 0.55f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			break;
		case (6):	// Combo Test: 0.0f
		case (7):	// Combo Test: 0.1f
		case (8):	// Combo Test: 0.2f
		case (9):	// Combo Test: 0.3f	
		case (10):	// Combo Test: 0.4f	
		case (11):	// Combo Test: 0.5f
		case (12):	// Combo Test: 0.6f
		case (13):	// Combo Test: 0.7f	
		case (14):	// Combo Test: 0.8f
		case (15):	// Combo Test: 0.9f
			if (nTest == 6)
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Green",msgString,10 * (nTest - 6));
			else
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: %d%% Red & %d%% Green",msgString,(10 * (nTest - 6)),(10 * (nTest - 6)),100 - (10 * (nTest - 6)));

			ComboTests(0.1f * (nTest - 6));
			break;
		case (16):	// Combo Test: 0.9999999f
			sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: 100%% Red",msgString);

			ComboTests(0.9999999f);
			break;
		default:
			break;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\unique.cpp ===
#include <d3d.h>
#include "ZCmp.h"

bool Unique(DWORD dwVersion, PBUFFER *pBuffer, LPPIXELFORMAT pFormat)
{
    bool bFound = false;
    PBUFFER pTemp;

    if (dwVersion >= 0x0800)
        return true;

    for (pTemp = *pBuffer; pTemp && !bFound; pTemp = pTemp->pNext)
        if ((pFormat->dwStencilBitMask == pTemp->dwStencilBitMask) &&
            (pFormat->dwZBitMask == pTemp->dwZBitMask))
            bFound = true;

    if (!bFound)
    {
        pTemp = (PBUFFER) malloc(sizeof(BUFFER));
        pTemp->dwStencilBitMask = pFormat->dwStencilBitMask;
        pTemp->dwZBitMask = pFormat->dwZBitMask;
        pTemp->pNext = *pBuffer;
        *pBuffer = pTemp;
    }

    return !bFound;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\dll\include.cpp ===
#include "dll\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\exe\include.cpp ===
#include "exe\main.cpp"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\greater.cpp ===
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZCmp.h"

//************************************************************************
// Greater Test functions

CZGreaterTest::CZGreaterTest()
{
	m_szTestName = TEXT("Z Compare Greater");
	m_szCommandKey = TEXT("Greater");

	// Tell parent class what cap to look for
	dwZCmpCap = D3DPCMPCAPS_GREATER;
}

CZGreaterTest::~CZGreaterTest()
{
}

bool CZGreaterTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the Z Buffer and compare func Greater
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_GREATER);
	return true;
}

bool CZGreaterTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255), 0.0f);
}
/*
void CZGreaterTest::SetupBackground(void)
{
	float Zval = 0.0f;
	float RHW  = 0.00001f;
	float fWidth  = (float)m_pSrcTarget->m_dwWidth;
	float fHeight = (float)m_pSrcTarget->m_dwHeight;

	// Black Background Triangle
	BackgroundList[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, 0.0f,    Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 1.0f,0.0f);
	BackgroundList[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, fHeight, Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 1.0f,1.0f);
	BackgroundList[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   0.0f,    Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 0.0f,0.0f);
	BackgroundList[3] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   fHeight, Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 0.0f,1.0f);
}

void CZGreaterTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Special setup for initing the background
		SetupBackground();

		// Special render state needed
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,BackgroundList,4,NULL,0,0);

		// Set the appropriate renderstate
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_GREATER);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}
*/
//************************************************************************
// GreaterEqual Test functions

CZGreaterEqualTest::CZGreaterEqualTest()
{
	m_szTestName = TEXT("Z Compare GreaterEqual");
	m_szCommandKey = TEXT("GreaterEqual");

	// Tell parent class what cap to look for
	dwZCmpCap = D3DPCMPCAPS_GREATEREQUAL;
}

CZGreaterEqualTest::~CZGreaterEqualTest()
{
}

bool CZGreaterEqualTest::SetDefaultRenderStates(void)
{
	// Make sure that we are using the Z Buffer and compare func GreaterEqual
	SetRenderState(D3DRENDERSTATE_ZENABLE, (DWORD)D3DZB_TRUE);
	SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_GREATEREQUAL);
	return true;
}

bool CZGreaterEqualTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255), 0.0f);
}
/*
void CZGreaterEqualTest::SetupBackground(void)
{
	float Zval = 0.0f;
	float RHW  = 0.00001f;
	float fWidth  = (float)m_pSrcTarget->m_dwWidth;
	float fHeight = (float)m_pSrcTarget->m_dwHeight;

	// Black Background Triangle
	BackgroundList[0] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, 0.0f,    Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 1.0f,0.0f);
	BackgroundList[1] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + fWidth, fHeight, Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 1.0f,1.0f);
	BackgroundList[2] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   0.0f,    Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 0.0f,0.0f);
	BackgroundList[3] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 0.0f,   fHeight, Zval),(1.0f / RHW), RGBA_MAKE(0,0,0,255),0, 0.0f,1.0f);
}

void CZGreaterEqualTest::SceneRefresh()
{
	if (BeginScene())
	{
		// Special setup for initing the background
		SetupBackground();

		// Special render state needed
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_LESSEQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLESTRIP,D3DFVF_TLVERTEX,BackgroundList,4,NULL,0,0);

		// Set the appropriate renderstate
		SetRenderState(D3DRENDERSTATE_ZFUNC, (DWORD)D3DCMP_GREATEREQUAL);

		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}
*/

//************************************************************************
// Internal API:    GreaterTests
//
// Purpose:         
//
// Return:          None.
//************************************************************************

void CZCmpTest::GreaterTests(int nTest)
{
	switch (nTest)
	{
		case (1):	// Left Handed Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_GREATER)
				sprintf(msgString, "%sThree flat triangles (left), Visible: Green, Red, & Blue",msgString);
			else
				sprintf(msgString, "%sThree flat triangles (left), Visible: Blue, Green, & Red",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.5f),(1.0f / 0.5f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.9f),(1.0f / 0.9f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			break;
		case (2):	// Right Handed Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_GREATER)
				sprintf(msgString, "%sThree flat triangles (right), Visible: Green, Red, & Blue",msgString);
			else
				sprintf(msgString, "%sThree flat triangles (right), Visible: Blue, Green, & Red",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.7f),(1.0f / 0.7f), RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.7f),(1.0f / 0.7f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.7f),(1.0f / 0.7f), RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			break;
		case (3):	// Single Flat Triangles
			if (dwZCmpCap == D3DPCMPCAPS_GREATER)
				sprintf(msgString, "%sThree flat triangles, Visible: Cyan & Magenta",msgString);
			else
				sprintf(msgString, "%sThree flat triangles, Visible: White, Cyan, & Magenta",msgString);

			// Magenta Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 10.0f + (float)m_vpTest.Y,0.1001f),(1.0f / 0.1001f), RGBA_MAKE(255,0,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 300.0f,270.0f + (float)m_vpTest.Y,0.1001f),(1.0f / 0.1001f), RGBA_MAKE(255,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +   0.0f,270.0f + (float)m_vpTest.Y,0.1001f),(1.0f / 0.1001f), RGBA_MAKE(255,0,255,255),0, 0.0f,1.0f);
			// Cyan Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 20.0f + (float)m_vpTest.Y,0.1002f),(1.0f / 0.1002f), RGBA_MAKE(0,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 280.0f,260.0f + (float)m_vpTest.Y,0.1002f),(1.0f / 0.1002f), RGBA_MAKE(0,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  20.0f,260.0f + (float)m_vpTest.Y,0.1002f),(1.0f / 0.1002f), RGBA_MAKE(0,255,255,255),0, 0.0f,1.0f);
			// White Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 150.0f, 30.0f + (float)m_vpTest.Y,0.1002f),(1.0f / 0.1002f), RGBA_MAKE(255,255,255,255),0, 0.5f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 260.0f,250.0f + (float)m_vpTest.Y,0.1002f),(1.0f / 0.1002f), RGBA_MAKE(255,255,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  40.0f,250.0f + (float)m_vpTest.Y,0.1002f),(1.0f / 0.1002f), RGBA_MAKE(255,255,255,255),0, 0.0f,1.0f);
			break;
		case (4):	// Left Handed Non-Flat Triangles
			sprintf(msgString, "%sThree intersecting triangles (left), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.8f), (1.0f / 0.8f),  RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f, 10.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(255,0,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.8f), (1.0f / 0.8f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f, 70.0f + (float)m_vpTest.Y,0.65f),(1.0f / 0.65f), RGBA_MAKE(0,255,0,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.65f),(1.0f / 0.65f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.7f), (1.0f / 0.7f),  RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,130.0f + (float)m_vpTest.Y,0.65f),(1.0f / 0.65f), RGBA_MAKE(0,0,255,255),0, 1.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.65f),(1.0f / 0.65f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			break;
		case (5):	// Right Handed Non-Flat Triangles
			sprintf(msgString, "%sThree intersecting triangles (right), Visible: All",msgString);

			// Red Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f, 10.0f + (float)m_vpTest.Y,0.8f), (1.0f / 0.8f),  RGBA_MAKE(255,0,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 110.0f,110.0f + (float)m_vpTest.Y,0.75f),(1.0f / 0.75f), RGBA_MAKE(255,0,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  10.0f,110.0f + (float)m_vpTest.Y,0.8f), (1.0f / 0.8f),  RGBA_MAKE(255,0,0,255),0, 0.0f,1.0f);
			// Green Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f, 70.0f + (float)m_vpTest.Y,0.8f), (1.0f / 0.8f),  RGBA_MAKE(0,255,0,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 170.0f,170.0f + (float)m_vpTest.Y,0.65f),(1.0f / 0.65f), RGBA_MAKE(0,255,0,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X +  70.0f,170.0f + (float)m_vpTest.Y,0.7f), (1.0f / 0.7f),  RGBA_MAKE(0,255,0,255),0, 0.0f,1.0f);
			// Blue Triangle
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,130.0f + (float)m_vpTest.Y,0.7f), (1.0f / 0.7f),  RGBA_MAKE(0,0,255,255),0, 0.0f,0.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 230.0f,230.0f + (float)m_vpTest.Y,0.65f),(1.0f / 0.65f), RGBA_MAKE(0,0,255,255),0, 1.0f,1.0f);
			VertexList[dwVertexCount++] = cD3DTLVERTEX(cD3DVECTOR((float)m_vpTest.X + 130.0f,230.0f + (float)m_vpTest.Y,0.65f),(1.0f / 0.65f), RGBA_MAKE(0,0,255,255),0, 0.0f,1.0f);
			break;
		case (6):	// Combo Test: 0.0f
		case (7):	// Combo Test: 0.1f
		case (8):	// Combo Test: 0.2f
		case (9):	// Combo Test: 0.3f	
		case (10):	// Combo Test: 0.4f	
		case (11):	// Combo Test: 0.5f
		case (12):	// Combo Test: 0.6f
		case (13):	// Combo Test: 0.7f	
		case (14):	// Combo Test: 0.8f
		case (15):	// Combo Test: 0.9f
			if (nTest == 6)
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: 100%% Red",msgString,10 * (nTest - 6));
			else
				sprintf(msgString, "%sTwo triangles (%d%% overlap), Visible: %d%% Green & %d%% Red",msgString,(10 * (nTest - 6)),(10 * (nTest - 6)),100 - (10 * (nTest - 6)));

			ComboTests(0.1f * (nTest - 6));
			break;
		case (16):	// Combo Test: 0.9999999f
			sprintf(msgString, "%sTwo triangles (100%% overlap), Visible: 100%% Green",msgString);

			ComboTests(0.9999999f);
			break;
		default:
			break;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\dll\sources.inc ===
!include ..\..\..\..\sources.inc

TARGETNAME=zcmp
TARGETTYPE=LIBRARY
TARGETPATH=$(TEST_LIB_DEST)

OBJLIBFILES=\
    $(OBJLIBFILES) \
    $(TEST_LIB_PATH)\l_zcmp.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\zcmp.cpp ===
#define STRICT
#define BURN_IN_HELL
//#define D3D_OVERLOADS
#include "d3dlocus.h"
#include "cd3dtest.h"
#include "ZCmp.h"

//extern bool Unique(DWORD dwVersion, PBUFFER *pBuffers, LPPIXELFORMAT pFormat);

// Global Test and App instance
//CD3DWindowFramework	App;

//******************************************************************************
//
// Function:
//
//     ValidateDisplay
//
// Description:
//
//     Evaluate the given display information in order to determine whether or
//     not the display is capable of rendering the scene.  If not, the given 
//     display will not be included in the display list.
//
// Arguments:
//
//     CDirect3D8* pd3d                 - Pointer to the Direct3D object
//
//     D3DCAPS8* pd3dcaps               - Capabilities of the device
//
//     D3DDISPLAYMODE*                  - Display mode into which the device
//                                        will be placed
//
// Return Value:
//
//     TRUE if the scene can be rendered using the given display, FALSE if
//     it cannot.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ValidateDisplay)(CDirect3D8* pd3d, D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm) {

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ExhibitScene
//
// Description:
//
//     Create the scene, pump messages, process user input,
//     update the scene, render the scene, and release the scene when finished.
//
// Arguments:
//
//     CDisplay* pDisplay           - Pointer to the Display object
//
//     int* pnExitCode              - Optional pointer to an integer that will
//                                    be set to the exit value contained in the 
//                                    wParam parameter of the WM_QUIT message 
//                                    (if received)
//
// Return Value:
//
//     TRUE if the display remains functional on exit, FALSE otherwise.
//
//******************************************************************************
extern "C" BOOL PREPEND_MODULE(_ExhibitScene)(CDisplay* pDisplay, int* pnExitCode) {

    CZCmpTest*      pZCmpTest;
    BOOL            bQuit = FALSE, bRet = TRUE;
    UINT            i;

    // Verify that the display has been initialized
    if (!pDisplay) {
        return FALSE;
    }

    for (i = 0; i < 8 && !bQuit && bRet; i++) {

        // Create the scene
        switch (i) {
            case 0:
                pZCmpTest = new CZNeverTest();
                break;
            case 1:
                pZCmpTest = new CZLessTest();
                break;
            case 2:
                pZCmpTest = new CZEqualTest();
                break;
            case 3:
                pZCmpTest = new CZLessEqualTest();
                break;
            case 4:
                pZCmpTest = new CZGreaterTest();
                break;
            case 5:
                pZCmpTest = new CZNotEqualTest();
                break;
            case 6:
                pZCmpTest = new CZGreaterEqualTest();
                break;
            case 7:
                pZCmpTest = new CZAlwaysTest();
                break;
        }

        if (!pZCmpTest) {
            return FALSE;
        }

        // Initialize the scene
        if (!pZCmpTest->Create(pDisplay)) {
            pZCmpTest->Release();
            return FALSE;
        }

        bRet = pZCmpTest->Exhibit(pnExitCode);

        bQuit = pZCmpTest->AbortedExit();

        // Clean up the scene
        pZCmpTest->Release();
    }

    return bRet;
}

CZCmpTest::CZCmpTest()
{
    // Disable textures
    m_ModeOptions.fTextures = false;

    m_pd3dsOriginalZ = NULL;
    m_bExit = FALSE;
}

CZCmpTest::~CZCmpTest()
{
    // Restore the original depth buffer
    if (m_pd3dsOriginalZ) {
        m_pDevice->SetRenderTarget(NULL, m_pd3dsOriginalZ);
    }
}
/*
bool CZCmpTest::AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize)
{
    PBUFFER pBuffers = NULL;

	// Test all of the common ZBuffer Formats
    if (IsConformance())
    {
        for (int i=0; i < m_uCommonZBufferFormats; i++)
		{
            if (Unique(m_dwVersion, &pBuffers, &m_pCommonZBufferFormats[i].ddpfPixelFormat))
            {
				pMode->D3DMode.nZBufferFormat = i;

				CD3DTest::AddModeList(pMode,pData,dwDataSize);
			}
        }
    }
    else
    {
		// Let the framework handle stress mode
		CD3DTest::AddModeList(pMode,pData,dwDataSize);
	}

    // Cleanup any memory that we alloc'd
    if (pBuffers)
    {
        PBUFFER pBuffer, pTemp;

        for (pBuffer = pBuffers; pBuffer; pBuffer = pTemp)
        {
            pTemp = pBuffer->pNext;
            free(pBuffer);
        }
    }

    return true;
}
*/
UINT CZCmpTest::TestInitialize(void)
{
//    UINT n = m_pMode->nSrcDevice;

    // Save the original depth buffer
    m_pDevice->GetDepthStencilSurface(&m_pd3dsOriginalZ);

	// Setup the Test range
	if ((dwZCmpCap == D3DPCMPCAPS_EQUAL) || (dwZCmpCap == D3DPCMPCAPS_NOTEQUAL))
        m_uMaxTests = MAX_TESTS-2;
	else
        m_uMaxTests = MAX_TESTS;

	SetTestRange(1,m_uMaxTests * m_uCommonZBufferFormats);

	// Check the caps we are interested in
	DWORD dwZCmpCaps = m_d3dcaps.ZCmpCaps;

	// Check the appropriate Z Compare caps
	if (!(dwZCmpCaps & dwZCmpCap))
	{
		WriteToLog("Device capability not supported: %s.\n",m_szTestName);
		return D3DTESTINIT_ABORT;
	}
  
    // Tell RenderPrimitive disable API cycling
    // m_dwPrimitives = 1; should be changed to something like 
    // SetAPI(RP_DP);

	// Init the msgString to empty
	msgString[0] = '\0';

	// Log the current Z Buffer format
//    if (m_dwVersion <= 0x0700)
//    {
//        PIXELFORMAT Format;
//        memcpy(&Format, &m_pCommonZBufferFormats[m_pMode->nZBufferFormat].ddpfPixelFormat, sizeof(Format));

//	    sprintf(msgString, "%sZ Buffer Format, Z: %d-bit (0x%x), Stencil: %d-bit (0x%x).\n",msgString,Format.dwZBufferBitDepth - Format.dwStencilBitDepth,Format.dwZBitMask,Format.dwStencilBitDepth,Format.dwStencilBitMask);
//    }
//    else
//	    sprintf(msgString, "%sZ Buffer Format: %s.\n",msgString,D3DFmtToString(m_pCommonZBufferFormats[m_pMode->nZBufferFormat].d3dfFormat));

//    WriteToLog(msgString);

	return D3DTESTINIT_RUN;
}

bool CZCmpTest::ClearFrame(void)
{
	return Clear(RGBA_MAKE(0,0,0,255));
}

bool CZCmpTest::ExecuteTest(UINT uTestNum)
{
    UINT uTest = (uTestNum - 1) % m_uMaxTests + 1;

	// Initialize some variables
 	dwVertexCount = 0;
	msgString[0] = '\0';

    if (uTest == 1) {
        CSurface8* pd3ds;
        CSurface8* pd3dsRT;
        D3DSURFACE_DESC d3dsd;
        int nZBufferFormat = (uTestNum - 1) / m_uMaxTests;
        if (FAILED(m_pDevice->GetRenderTarget(&pd3dsRT))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::GetRenderTarget failed"));
            SkipTests(m_uMaxTests);
            return false;
        }
        pd3dsRT->GetDesc(&d3dsd);
        pd3dsRT->Release();
        if (FAILED(m_pDevice->CreateDepthStencilSurface(d3dsd.Width, d3dsd.Height, m_fmtdCommon[nZBufferFormat], D3DMULTISAMPLE_NONE, &pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::CreateDepthStencilSurface failed on format %s"), D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
            SkipTests(m_uMaxTests);
            return false;
        }
    	msgString[0] = '\0';
	    sprintf(msgString, "%sZ Buffer Format: %s.\n",msgString,D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
        WriteToLog(msgString);
        if (FAILED(m_pDevice->SetRenderTarget(NULL, pd3ds))) {
            Log(LOG_FAIL, TEXT("IDirect3DDevice8::SetRenderTarget failed on depth format %s"), D3DFmtToString(m_fmtdCommon[nZBufferFormat]));
            SkipTests(m_uMaxTests);
            pd3ds->Release();
            return false;
        }
        pd3ds->Release();

    	msgString[0] = '\0';
    }

	// Let's build some triangles.
	switch (dwZCmpCap)
	{
		case D3DPCMPCAPS_NEVER:
			AlwaysTests((int)uTest);
			break;
		case D3DPCMPCAPS_LESS:
			LessTests((int)uTest);
			break;
		case D3DPCMPCAPS_EQUAL:
			EqualTests((int)uTest);
			break;
		case D3DPCMPCAPS_LESSEQUAL:
			LessTests((int)uTest);
			break;
		case D3DPCMPCAPS_GREATER:
			GreaterTests((int)uTest);
			break;
		case D3DPCMPCAPS_NOTEQUAL:
			EqualTests((int)uTest);
			break;
		case D3DPCMPCAPS_GREATEREQUAL:
			GreaterTests((int)uTest);
			break;
		case D3DPCMPCAPS_ALWAYS:
			AlwaysTests((int)uTest);
			break;
	}

	// Tell the log that we are starting
	BeginTestCase(msgString);

    return true;
}

void CZCmpTest::SceneRefresh(void)
{
	if (BeginScene())
	{
		// Render the data.
		RenderPrimitive(D3DPT_TRIANGLELIST,D3DFVF_TLVERTEX,VertexList,dwVertexCount,NULL,0,0);

		EndScene();
	}	
}

bool CZCmpTest::ProcessFrame(void)
{
	char	szBuffer[80];
	static	int nPass = 0;
	static  int nFail = 0;
    bool	bResult;

     // Use the standard 15%
    bResult = GetCompareResult(0.15f, 0.78f, 0);

	// Tell the logfile how the compare went
    if (bResult)
    {
		(m_fIncrementForward) ? nPass++ : nPass--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Pass();
    }
	else
	{
		(m_fIncrementForward) ? nFail++ : nFail--;
		sprintf(szBuffer,"$yPass: %d, Fail: %d", nPass, nFail);
        Fail();
	}

	WriteStatus("$gOverall Results",szBuffer);

    return bResult;
}

//******************************************************************************
BOOL CZCmpTest::AbortedExit(void) {

    return m_bExit;
}

//******************************************************************************
void CZCmpTest::ProcessInput() {

    CD3DTest::ProcessInput();

    if (BUTTON_PRESSED(m_jsJoys, JOYBUTTON_BACK)) {
        m_bExit = TRUE;
    }
}

//******************************************************************************
BOOL CZCmpTest::WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

    *plr = 0;

#ifndef UNDER_XBOX

    switch (uMsg) {

        case WM_KEYDOWN:

            switch (wParam) {

                case VK_ESCAPE: // Exit
                    m_bExit = TRUE;
            }

            break;
    }

#endif // !UNDER_XBOX

    return CD3DTest::WndProc(plr, hWnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\exe\sources.inc ===
TARGETNAME=zcmp
TARGETTYPE=PROGRAM
TARGETPATH=obj

!include ..\..\..\..\sources.inc

#UMRES=$(TEST_RES_PATH)\test.res

TARGETLIBS=\
    $(TARGETLIBS) \
    $(TEST_LIB_PATH)\d3dlocus.lib \
    $(TEST_LIB_PATH)\d3dftest.lib \
    $(TEST_LIB_PATH)\3dmath.lib \
    $(TEST_LIB_PATH)\l_zcmp.lib

SOURCES=\
    include.cpp
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\conio.h ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    conio.h

Author:

    Matt Bronder

Description:

    Console and text output functions.

*******************************************************************************/

#ifndef __CONIO_H__
#define __CONIO_H__

//******************************************************************************
// Function prototypes
//******************************************************************************

BOOL LoadConsole();
void UnloadConsole();

#endif //__CONIO_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\conf\zcmp\zcmp.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1994-1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	ZCmp.h
 *
 ***************************************************************************/

#ifndef __ZCMP_H__
#define __ZCMP_H__

//#include "TestFrameBase.h"
//#include "CD3DTest.h"

//USETESTFRAME

// Defines
const int MAX_TESTS = 16;

typedef struct _Buffer
{
    DWORD dwStencilBitMask; // stencil bit mask
    DWORD dwZBitMask;       // z bit mask
    struct _Buffer *pNext;  // address of BUFFER data
} BUFFER, *PBUFFER;

// Base Class definitions
class CZCmpTest: public CD3DTest
{
    // Data
	public:
    D3DTLVERTEX     VertexList[24];
    DWORD           dwVertexCount;
	DWORD			dwZCmpCap;
	char			msgString[80];

    CSurface8*  m_pd3dsOriginalZ;
    UINT        m_uMaxTests;
    BOOL            m_bExit;

	public:
	CZCmpTest();
	~CZCmpTest();

	// Framework functions
//	virtual bool AddModeList(PMODELIST pMode, PVOID pData, DWORD dwDataSize);
	virtual UINT TestInitialize(void);
	virtual bool ClearFrame(void);
	virtual bool ExecuteTest(UINT uTestNum);
	virtual void SceneRefresh(void);
	virtual bool ProcessFrame(void);

	// Helper functions
	void ComboTests(float Zval);
	void AlwaysTests(int nTest);
	void LessTests(int nTest);
	bool EqualTests(int nTest);
	void GreaterTests(int nTest);

    virtual BOOL    AbortedExit(void);

    protected:

    virtual void    ProcessInput();
    virtual BOOL    WndProc(LRESULT* plr, HWND hWnd, UINT uMsg, 
                        WPARAM wParam, LPARAM lParam);
};

// Never Class definitions
class CZNeverTest: public CZCmpTest
{
	public:
	CZNeverTest();
	~CZNeverTest();

	bool SetDefaultRenderStates(void);
};

// Less Class definitions
class CZLessTest: public CZCmpTest
{
	public:
	CZLessTest();
	~CZLessTest();

	bool SetDefaultRenderStates(void);
};

// Equal Class definitions
class CZEqualTest: public CZCmpTest
{
    // Data
//    D3DTLVERTEX     BackgroundList[4];

	public:
	CZEqualTest();
	~CZEqualTest();

	bool SetDefaultRenderStates(void);
    bool ClearFrame(void);
//	void SceneRefresh(void);

	// Helper functions
//	void SetupBackground(void);
};

// LessEqual Class definitions
class CZLessEqualTest: public CZCmpTest
{
	public:
	CZLessEqualTest();
	~CZLessEqualTest();

	bool SetDefaultRenderStates(void);
};

// Greater Class definitions
class CZGreaterTest: public CZCmpTest
{
    // Data
//    D3DTLVERTEX     BackgroundList[4];

	public:
	CZGreaterTest();
	~CZGreaterTest();

	bool SetDefaultRenderStates(void);
    bool ClearFrame(void);
//	void SceneRefresh(void);

	// Helper functions
//	void SetupBackground(void);
};

// NotEqual Class definitions
class CZNotEqualTest: public CZCmpTest
{
    // Data
//    D3DTLVERTEX     BackgroundList[4];

	public:
	CZNotEqualTest();
	~CZNotEqualTest();

	bool SetDefaultRenderStates(void);
    bool ClearFrame(void);
//	void SceneRefresh(void);

	// Helper functions
//	void SetupBackground(void);
};

// GreaterEqual Class definitions
class CZGreaterEqualTest: public CZCmpTest
{
    // Data
//    D3DTLVERTEX     BackgroundList[4];

	public:
	CZGreaterEqualTest();
	~CZGreaterEqualTest();

	bool SetDefaultRenderStates(void);
    bool ClearFrame(void);
//	void SceneRefresh(void);

	// Helper functions
//	void SetupBackground(void);
};

// Always Class definitions
class CZAlwaysTest: public CZCmpTest
{
	public:
	CZAlwaysTest();
	~CZAlwaysTest();

	bool SetDefaultRenderStates(void);
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\conio.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    conio.cpp

Author:

    Matt Bronder

Description:

    Console and text output functions.

*******************************************************************************/

#define DXCONIO_NO_OVERRIDES

#include "d3dbase.h"
#include "fontmap.h"
#include "conio.h"
#ifdef UNDER_XBOX
#include <xboxverp.h>
#endif

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#define TAB_LENGTH          8

#define BORDER_LEFT         10.0f
#define BORDER_RIGHT        10.0f
#define BORDER_TOP          10.0f
#define BORDER_BOTTOM       10.0f

#define SHADOW_OFFSET_X     4.0f
#define SHADOW_OFFSET_Y     4.0f
#define SHADOW_INTENSITY    191.0f

#define BACKTEX_WIDTH       256
#define BACKTEX_HEIGHT      256

#define MAX_TEXTOUT_LENGTH  256

#define POS_BLANK           -3.402823466e+36F

//******************************************************************************
// Globals
//******************************************************************************

LPDIRECT3DDEVICE8           g_pDevice = NULL;

// Console text output buffer
LPSTR                       g_pchOut = NULL;
UINT                        g_uOutSize = 4096;
UINT                        g_uOutHead = 0;
UINT                        g_uOutTail = 0;
UINT                        g_uOutWidth = 80;

// Console text vertex layout
UINT                        g_uTextSize = 0;
UINT                        g_uTextHead = 0;
UINT                        g_uTextTail = 0;
UINT                        g_uTextLine = 0;
UINT                        g_uTextHeight = 1;
UINT                        g_uTextCol = 0;
UINT                        g_uTextCursor = 0;
float                       g_fTextX;

// Visible console text vertices
UINT                        g_uVStart1;
UINT                        g_uVStart2;
UINT                        g_uVCount1;
UINT                        g_uVCount2;

// xTextOut vertices
PTLVERTEX                   g_prTextOut = NULL;
LPWORD                      g_pwTextOut = NULL;

// Console vertices
LPDIRECT3DVERTEXBUFFER8     g_pd3drPosition = NULL;
UINT                        g_uVBPositionSize;
LPDIRECT3DVERTEXBUFFER8     g_pd3drTexCoord = NULL;
UINT                        g_uVBTexCoordSize;
LPDIRECT3DINDEXBUFFER8      g_pd3diText = NULL;
UINT                        g_uIBTextSize;
// ##DELETE
LPDIRECT3DVERTEXBUFFER8     g_pd3drDeleteMe = NULL;
UINT                        g_uVBDeleteMeSize;
// ##END DELETE

// Console background
LPDIRECT3DVERTEXBUFFER8     g_pd3drBack = NULL;
LPDIRECT3DTEXTURE8          g_pd3dtBackBase = NULL;
LPDIRECT3DTEXTURE8          g_pd3dtBackBump = NULL;
LPDIRECT3DTEXTURE8          g_pd3dtBackEnv = NULL;
CPerlinNoise2D*             g_pNoise = NULL;

// Console state
float                       g_fCharWidth = 8.0f;
float                       g_fCharHeight = 15.0f; //(CHAR_ASPECT * g_fCharWidth);
DWORD                       g_dwTextColor = 0xFFFFFFFF;
//DWORD                       g_dwBackgroundColor = 0xBFFFFF00;
DWORD                       g_dwBackgroundColor = 0xBF7F7F00;
//DWORD                       g_dwBackgroundColor = 0xBF44FF44;
TCHAR                       g_szBackImage[MAX_PATH] = {0};
BOOL                        g_bUseBackground = TRUE;
BOOL                        g_bInScene = FALSE;
BOOL                        g_bDoConsoleUpdate = TRUE;

// Device information
float                       g_fTargetWidth;
float                       g_fTargetHeight;
ADAPTERDESC                 g_adpd;
DEVICEDESC                  g_devd;
DISPLAYMODE                 g_dm;

// Console scrolling
D3DVECTOR                   g_vTranslate;

float                       g_fMaxRowScroll = 0.0f;
float                       g_fMaxColScroll = 0.0f;
float                       g_fCurrentRow = 0.0f;
float                       g_fCurrentCol = 0.0f;

// Serial access to dxconio functions
CRITICAL_SECTION            g_csConsoleLock;

BOOL                        g_bInitialized = FALSE;

//******************************************************************************
// Function prototypes
//******************************************************************************

void                        PutStringA(LPCSTR pszString);
void                        PutStringW(LPCWSTR pszString);

BOOL                        InitConsole();
void                        EffaceConsole();

static void                 UpdateConsole(UINT uStart);
static void                 RefreshConsole();
static void                 DrawConsole();

static BOOL                 UpdateVisibility();

static BOOL                 CreateGeometry(UINT uNumChars);
static void                 ReleaseGeometry();

static BOOL                 SetBackgroundImage(LPCTSTR pszImage);

static void                 UpdateConsoleScrollY();

static BOOL                 BeginConsoleScene();
static void                 EndConsoleScene();
static void                 DrawConsoleBackground();
static void                 DrawConsoleText();

static void                 DrawTextQuads(LPCSTR szText, UINT uCount, float fX, 
                                float fY, float fHeight, float fWidth, 
                                D3DCOLOR c, float fLeftMargin);

BOOL                        ValidateDisplay(LPDIRECT3D8 pd3d, 
                                    D3DCAPS8* pd3dcaps, D3DDISPLAYMODE* pd3ddm);

inline void                 LockConsole() { EnterCriticalSection(&g_csConsoleLock); }
inline void                 UnlockConsole() { LeaveCriticalSection(&g_csConsoleLock); }

//******************************************************************************
// Console management functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     LoadConsole
//
// Description:
//
//     Create a heap for the console and allocate a buffer to contain the
//     output stream.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL LoadConsole() {

#ifndef UNDER_XBOX
    OSVERSIONINFO osvi;
#else
//    extern PULONG NtBuildVersion
#endif

    // Initialize the critical section
    InitializeCriticalSection(&g_csConsoleLock);

    g_uOutHead = 0;
    g_uOutTail = 0;

    // Allocate a buffer for the output stream
    g_pchOut = (LPSTR)MemAlloc(g_uOutSize);
    if (!g_pchOut) {
        xReleaseConsole();
        return FALSE;
    }

#ifndef UNDER_XBOX
    memset(&osvi, 0, sizeof(OSVERSIONINFO));
    osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
    GetVersionEx(&osvi);

    xprintf("Microsoft Windows 2000 [Version %d.%02d.%04d]\n", 
            osvi.dwMajorVersion, osvi.dwMinorVersion, osvi.dwBuildNumber);
    xputs("(C) Copyright 1985-1999 Microsoft Corp.\n");
#else
//    xprintf("Microsoft Xbox OS [Version %08x]\n", *NtBuildVersion);
    xprintf("Microsoft Xbox OS [Version %02d.%02d.%04d.%02d]\n", VER_PRODUCTVERSION);
    xputs("(C) Copyright 1999-2000 Microsoft Corp.\n");
#endif // UNDER_XBOX

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     UnloadConsole
//
// Description:
//
//     Free the console output buffer and release the heap.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void UnloadConsole() {

    if (g_pchOut) {
        MemFree(g_pchOut);
        g_pchOut = NULL;
    }

    // Release the critical section
    DeleteCriticalSection(&g_csConsoleLock);
}

//******************************************************************************
//
// Function:
//
//     xCreateConsole
//
// Description:
//
//     Create all Direct3D and related objects necessary for rendering the
//     console output stream to the screen.
//
// Arguments:
//
//     LPVOID pvDevice                - Pointer to the device object
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xCreateConsole(LPVOID pvDevice) {

    USHORT i, j, k;

    if (!pvDevice) {
        return FALSE;
    }

    LockConsole();

    xReleaseConsole();

    g_pDevice = (LPDIRECT3DDEVICE8)pvDevice;

    // Create a perlin noise object
    g_pNoise = new CPerlinNoise2D(0.5f, 5, GetTickCount(), INTERPOLATE_COSINE, FALSE, FALSE);
    if (!g_pNoise) {
        UnlockConsole();
        return FALSE;
    }

    g_uTextHead = 0;
    g_uTextTail = 0;
    g_uTextLine = 0;
    g_uTextHeight = 1;
    g_uTextCol = 0;
    g_uTextCursor = 0;
    g_fTextX = 0.0f;

    // Initialize the device objects for the console
    if (!InitConsole()) {
        xReleaseConsole();
        UnlockConsole();
        return FALSE;
    }

    // Allocate memory for the xTextOut vertices
    g_prTextOut = (PTLVERTEX)MemAlloc32(MAX_TEXTOUT_LENGTH * 2 * 4 * sizeof(TLVERTEX));
    if (!g_prTextOut) {
        xReleaseConsole();
        UnlockConsole();
        return FALSE;
    }
    memset(g_prTextOut, 0, MAX_TEXTOUT_LENGTH * 2 * 4 * sizeof(TLVERTEX));
    for (i = 0; i < MAX_TEXTOUT_LENGTH * 2 * 4; i++) {
        g_prTextOut[i].vPosition.z = 0.00001f;
        g_prTextOut[i].fRHW = 100000.0f;
    }

    // Allocate memory for the xTextOut indices
    g_pwTextOut = (LPWORD)MemAlloc32(MAX_TEXTOUT_LENGTH * 6 * sizeof(WORD));
    if (!g_pwTextOut) {
        xReleaseConsole();
        UnlockConsole();
        return FALSE;
    }

    // Initialize the xTextOut indices
    for (i = 0, j = 0, k = 0; i < MAX_TEXTOUT_LENGTH; i++, j += 4, k += 6) {
        g_pwTextOut[k]   = j;
        g_pwTextOut[k+1] = j + 2;
        g_pwTextOut[k+2] = j + 1;
        g_pwTextOut[k+3] = j + 1;
        g_pwTextOut[k+4] = j + 2;
        g_pwTextOut[k+5] = j + 3;
    }

    g_bInitialized = TRUE;

    RefreshConsole();

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xReleaseConsole
//
// Description:
//
//     Release all Direct3D and related objects created by the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xReleaseConsole() {

    if (g_bInitialized) {

        LockConsole();

        EffaceConsole();

        if (g_pNoise) {
            delete g_pNoise;
            g_pNoise = NULL;
        }

        g_bInitialized = FALSE;

        UnlockConsole();
    }
}

//******************************************************************************
//
// Function:
//
//     xClearScreen
//
// Description:
//
//     Clear the console output stream buffer of its contents.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xClearScreen(void) {

    LockConsole();

    g_uOutHead = 0;
    g_uOutTail = 0;

    if (g_bInitialized) {

        g_fCurrentRow = 0.0f;
        g_fCurrentCol = 0.0f;

        RefreshConsole();
    }

    UnlockConsole();
}

//******************************************************************************
//
// Function:
//
//     xSetCharSize
//
// Description:
//
//     Set the width and height of the characters used in outputting the console
//     text.
//
// Arguments:
//
//     float fWidth             - Width of a console character in pixels
//
//     float fHeight            - Height of a console character in pixels
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xSetCharSize(float fWidth, float fHeight) {

    LockConsole();

    g_fCharWidth = fWidth;
    g_fCharHeight = fHeight;
    if (g_bInitialized) {
        xResetConsole();
    }

    UnlockConsole();
}

//******************************************************************************
//
// Function:
//
//     xSetTextColor
//
// Description:
//
//     Set the color of the console text.
//
// Arguments:
//
//     BYTE red                 - Red intensity of the text color
//
//     BYTE green               - Green intensity of the text color
//
//     BYTE blue                - Blue intensity of the text color
//
//     BYTE alpha               - Alpha intensity of the text color (where
//                                0 indicates transparent and 255 indicates
//                                opaque)
//
// Return Value:
//
//     The old color of the console text.
//
//******************************************************************************
XCOLOR DXCIOAPI xSetTextColor(BYTE red, BYTE green, BYTE blue, BYTE alpha) {

    DWORD dwColor;

    LockConsole();

    dwColor = g_dwTextColor;
    g_dwTextColor = RGBA_MAKE(red, green, blue, alpha);

    UnlockConsole();

    return dwColor;
}

//******************************************************************************
//
// Function:
//
//     xSetBackgroundColor
//
// Description:
//
//     Set the background color of the console.  If a background texture has
//     been specified, the background color will be modulated with it.
//
// Arguments:
//
//     BYTE red                 - Red intensity of the background color
//
//     BYTE green               - Green intensity of the background color
//
//     BYTE blue                - Blue intensity of the background color
//
//     BYTE alpha               - Alpha intensity of the background color (where
//                                0 indicates transparent and 255 indicates
//                                opaque).  This value will be ignored if
//                                the console is managing Direct3D
//
// Return Value:
//
//     The old background color of the console.
//
//******************************************************************************
XCOLOR DXCIOAPI xSetBackgroundColor(BYTE red, BYTE green, BYTE blue, BYTE alpha) {

    PTLBVERTEX prBack;
    DWORD      dwColor;
    UINT       i;
    HRESULT    hr;

    LockConsole();

    dwColor = g_dwBackgroundColor;
    g_dwBackgroundColor = RGBA_MAKE(red, green, blue, alpha);

    if (g_bInitialized) {

        if (g_pd3drBack) {

            hr = g_pd3drBack->Lock(0, 4 * sizeof(TLBVERTEX), (LPBYTE*)&prBack, 0);
            if (SUCCEEDED(hr)) {
                for (i = 0; i < 4; i++) {
                    prBack[i].cDiffuse = g_dwBackgroundColor;
                }
                g_pd3drBack->Unlock();
            }
        }
    }

    UnlockConsole();

    return dwColor;
}

//******************************************************************************
//
// Function:
//
//     xSetBackgroundImageA
//
// Description:
//
//     Set the background texture for the console.
//
// Arguments:
//
//     LPCSTR pszImage          - A string containing the file or resource
//                                name of the image to use as the background
//                                texture.  If set to NULL, the current
//                                background texture will be released and
//                                no background texture will be used
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xSetBackgroundImageA(LPCSTR pszImage) {

    BOOL bRet;

    LockConsole();

    if (!pszImage) {
        bRet = SetBackgroundImage(NULL);
    }
    else {
#ifndef UNICODE
        bRet = SetBackgroundImage(pszImage);
#else
        WCHAR wszImage[MAX_PATH];
        mbstowcs(wszImage, pszImage, MAX_PATH);
        bRet = SetBackgroundImage(wszImage);
#endif // !UNICODE
    }

    UnlockConsole();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     xSetBackgroundImageW
//
// Description:
//
//     Set the background texture for the console.
//
// Arguments:
//
//     LPCWSTR pszImage         - A string containing the file or resource
//                                name of the image to use as the background
//                                texture.  If set to NULL, the current
//                                background texture will be released and
//                                no background texture will be used
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xSetBackgroundImageW(LPCWSTR pszImage) {

    BOOL bRet;

    LockConsole();

    if (!pszImage) {
        bRet = SetBackgroundImage(NULL);
    }
    else {
#ifndef UNICODE
        char szImage[MAX_PATH];
        wcstombs(szImage, pszImage, MAX_PATH);
        bRet = SetBackgroundImage(szImage);
#else
        bRet = SetBackgroundImage(pszImage);
#endif // !UNICODE
    }

    UnlockConsole();

    return bRet;
}

//******************************************************************************
//
// Function:
//
//     SetBackgroundImage
//
// Description:
//
//     Set the background texture for the console.
//
// Arguments:
//
//     LPCTSTR pszImage         - A string containing the file or resource
//                                name of the image to use as the background
//                                texture.  If set to NULL, the current
//                                background texture will be released and
//                                no background texture will be used
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL SetBackgroundImage(LPCTSTR pszImage) {

    LPDIRECT3DTEXTURE8 pd3dt = NULL;

    if (!pszImage) {
        g_bUseBackground = FALSE;
    }
    else {
        _tcscpy(g_szBackImage, pszImage);
    }

    if (!g_bInitialized) {
        return TRUE;
    }

    if (pszImage) {

        pd3dt = (LPDIRECT3DTEXTURE8)CreateTexture(g_pDevice, pszImage, D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
        if (!pd3dt) {
            return FALSE;
        }
        RemoveTexture(pd3dt);
        g_bUseBackground = TRUE;
    }

    if (!pszImage || pd3dt) {
        if (g_pd3dtBackEnv) {
            ReleaseTexture(g_pd3dtBackEnv);
            g_pd3dtBackEnv = NULL;
        }
        if (g_pd3dtBackBump) {
            ReleaseTexture(g_pd3dtBackBump);
            g_pd3dtBackBump = NULL;
        }
        if (g_pd3dtBackBase) {
            ReleaseTexture(g_pd3dtBackBase);
            g_pd3dtBackBase = NULL;
        }
        g_pd3dtBackBase = pd3dt;
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xScrollConsole
//
// Description:
//
//     Scroll the console according to the scroll flag(s) specified.
//
// Arguments:
//
//     DWORD dwScroll           - Scrolling flags that indicate the direction
//                                and amount to scroll the console
//
//     float* pfHorz            - Pointer to a floating point value indicating 
//                                the amount to scroll the console horizontally
//                                in pixels if the XSCROLL_HORZ flag has been 
//                                specified.  On return, this value will contain 
//                                the horizontal amount the console has been 
//                                scrolled.
//
//     float* pfVert            - Pointer to a floating point value indicating 
//                                the amount to scroll the console vertically
//                                in pixels if the XSCROLL_VERT flag has been 
//                                specified.  On return, this value will contain 
//                                the vertical amount the console has been 
//                                scrolled.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xScrollConsole(DWORD dwScroll, float* pfHorz, float* pfVert) {

    float fX = 0.0f, 
          fY = 0.0f;

    if (!g_bInitialized) {
        return;
    }

    LockConsole();

    if (dwScroll & XSCROLL_LINEUP) {
        fY -= 1.0f;
    }
    if (dwScroll & XSCROLL_LINEDOWN) {
        fY += 1.0f;
    }
    if (dwScroll & XSCROLL_LINELEFT) {
        fX -= 1.0f;
    }
    if (dwScroll & XSCROLL_LINERIGHT) {
        fX += 1.0f;
    }
    if (dwScroll & XSCROLL_PAGEUP) {
        fY -= (g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight - 1.0f;
    }
    if (dwScroll & XSCROLL_PAGEDOWN) {
        fY += (g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight - 1.0f;
    }
    if (dwScroll & XSCROLL_PAGELEFT) {
        fX -= (g_fTargetWidth - BORDER_LEFT - BORDER_RIGHT) / g_fCharWidth;
    }
    if (dwScroll & XSCROLL_PAGERIGHT) {
        fX += (g_fTargetWidth - BORDER_LEFT - BORDER_RIGHT) / g_fCharWidth;
    }
    if (dwScroll & XSCROLL_HORZ && pfHorz) {
        fX += *pfHorz;
    }
    if (dwScroll & XSCROLL_VERT && pfVert) {
        fY += *pfVert;
    }

    fX = (float)(int)(fX * 100.0f) / 100.0f;
    fY = (float)(int)(fY * 100.0f) / 100.0f;

    if (g_fMaxColScroll > 0.0f) {

        if (dwScroll & XSCROLL_LEFT) {
            g_fCurrentCol = 0.0f;
        }
        else if (dwScroll & XSCROLL_RIGHT) {
            g_fCurrentCol = g_fMaxColScroll;
        }
        else {
            g_fCurrentCol += fX;

            if (g_fCurrentCol < 0.0f) {
                g_fCurrentCol = 0.0f;
            }
            else if (g_fCurrentCol > g_fMaxColScroll) {
                g_fCurrentCol = g_fMaxColScroll;
            }
        }

        g_vTranslate.x = BORDER_LEFT - g_fCurrentCol * g_fCharWidth;
    }

    if (g_fMaxRowScroll > 0.0f) {

        if (dwScroll & XSCROLL_TOP) {
            g_fCurrentRow = g_fMaxRowScroll;
        }
        else if (dwScroll & XSCROLL_BOTTOM) {
            g_fCurrentRow = 0.0f;
        }
        else {
            g_fCurrentRow -= fY;
        }

        UpdateConsoleScrollY();

        UpdateVisibility();
    }

    if (pfHorz) {
        *pfHorz = g_fCurrentCol;
    }
    if (pfVert) {
        *pfVert = g_fMaxRowScroll - g_fCurrentRow;
    }

    UnlockConsole();
}

//******************************************************************************
//
// Function:
//
//     UpdateConsoleScrollY
//
// Description:
//
//     Update the vertical translation value for the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void UpdateConsoleScrollY() {

    if (g_fCurrentRow < 0.0f) {
        g_fCurrentRow = 0.0f;
    }
    else if (g_fMaxRowScroll > 0.0f && g_fCurrentRow > g_fMaxRowScroll) {
        g_fCurrentRow = g_fMaxRowScroll;
    }

    if (g_fMaxRowScroll <= 0.0f) {
        g_vTranslate.y = g_fTargetHeight - BORDER_BOTTOM + g_fMaxRowScroll * g_fCharHeight;
    }
    else {
        g_vTranslate.y = g_fTargetHeight - BORDER_BOTTOM + g_fCurrentRow * g_fCharHeight;
    }
}

//******************************************************************************
//
// Function:
//
//     xSetOutputBufferSize
//
// Description:
//
//     Set the size of the console output stream buffer.
//
// Arguments:
//
//     UINT uBytes              - Size of the output stream buffer in bytes
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xSetOutputBufferSize(UINT uBytes) {

    LPDIRECT3DVERTEXBUFFER8 pd3drPos;
    LPDIRECT3DVERTEXBUFFER8 pd3drTC;
    LPDIRECT3DINDEXBUFFER8  pd3diText;
    LPSTR                   pchNewOut;

    LockConsole();

    pchNewOut = (LPSTR)MemAlloc(uBytes);
    if (!pchNewOut) {
        UnlockConsole();
        return FALSE;
    }

    if (g_bInitialized) {

        pd3drPos = g_pd3drPosition;
        pd3drTC = g_pd3drTexCoord;
        pd3diText = g_pd3diText;

        pd3drPos->AddRef();
        pd3drTC->AddRef();
        pd3diText->AddRef();
        ReleaseGeometry();

        if (!CreateGeometry(uBytes)) {
            MemFree(pchNewOut);
            g_pd3drPosition = pd3drPos;
            g_pd3drTexCoord = pd3drTC;
            g_pd3diText = pd3diText;
            UnlockConsole();
            return FALSE;
        }
    }

    xClearScreen();

    if (g_pchOut) {
        MemFree(g_pchOut);
    }

    if (g_bInitialized) {    
        pd3drPos->Release();
        pd3drTC->Release();
        pd3diText->Release();
    }

    g_pchOut = pchNewOut;
    g_uOutSize = uBytes;

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xSetDisplayWidth
//
// Description:
//
//     Set the width of the console display, in characters.  This width will
//     determine how long a line of console text can be before it is wrapped
//     to the next line.
//
// Arguments:
//
//     UINT uWidth              - Width of the console in characters
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xSetDisplayWidth(UINT uWidth) {

    if (uWidth == 0) {
        return FALSE;
    }

    LockConsole();

    xClearScreen();

    if (g_bInitialized) {
        g_fMaxColScroll = (float)uWidth - ((g_fTargetWidth - BORDER_LEFT - BORDER_RIGHT) / g_fCharWidth);
    }

    g_uOutWidth = uWidth;

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xDisplayConsole
//
// Description:
//
//     Draw the console on the screen.  If the console manages Direct3D and
//     text has been drawn to the frame buffer using xTextOut, the console
//     will be overlayed in the scene and the frame buffer will be presented.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xDisplayConsole(void) {

    LockConsole();
    DrawConsole();
    UnlockConsole();
}

//******************************************************************************
//
// Function:
//
//     xResetConsole
//
// Description:
//
//     Reset the console in response to a device loss or change.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xResetConsole(void) {

    LockConsole();

    EffaceConsole();

    if (!InitConsole()) {
        UnlockConsole();
        return FALSE;
    }

    RefreshConsole();

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xTextOutA
//
// Description:
//
//     Draw the given text string on the frame buffer.
//
// Arguments:
//
//     float fXStart            - x screen coordinate of the upper left corner 
//                                of the start of the string
//
//     float fYStart            - y screen coordinate of the upper left corner
//                                of the start of the string
//
//     float fCWidth            - Width in pixels of the characters to be used
//                                to display the string
//
//     float fCHeight           - Height in pixels of the characters to be used
//                                to display the string
//
//     XCOLOR xcColor           - Text color used to display the string
//
//     LPCSTR pszString         - String to output on the screen
//
//     UINT uCount              - Number of characters in the string
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xTextOutA(float fXStart, float fYStart, float fCWidth, 
                        float fCHeight, XCOLOR xcColor, LPCSTR pszString, 
                        UINT uCount)
{
/*
    CBaseTexture8*  pd3dt;
    CVertexBuffer8* pd3dr;
    CIndexBuffer8*  pd3di;
    UINT            uStride;
    UINT            uBaseIndex;
    DWORD           dwSrcBlend, dwDstBlend, dwAlphaBlend, dwColorOp0, 
                    dwColorOp1, dwAlphaOp0, dwColorArg1, dwColorArg2, 
                    dwAlphaArg1, dwAlphaArg2, dwAlphaTest, dwShader;
*/
    DWORD dwBlock;
    HRESULT hr;

    if (!g_bInitialized) {
        return FALSE;
    }

    LockConsole();

    // Save the device state
    hr = g_pDevice->CreateStateBlock(D3DSBT_ALL, &dwBlock);
    if (FAILED(hr)) {
        UnlockConsole();
        return FALSE;
    }
/*
    g_pDevice->GetRenderState(D3DRS_SRCBLEND, &dwSrcBlend);
    g_pDevice->GetRenderState(D3DRS_DESTBLEND, &dwDstBlend);
    g_pDevice->GetRenderState(D3DRS_ALPHABLENDENABLE, &dwAlphaBlend);
    g_pDevice->GetRenderState(D3DRS_ALPHATESTENABLE, &dwAlphaTest);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLOROP, &dwColorOp0);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLORARG1, &dwColorArg1);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLORARG2, &dwColorArg2);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAOP, &dwAlphaOp0);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG1, &dwAlphaArg1);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG2, &dwAlphaArg2);
    g_pDevice->GetTextureStageState(1, D3DTSS_COLOROP, &dwColorOp1);
    g_pDevice->GetStreamSource(0, &pd3dr, &uStride);
    g_pDevice->GetIndices(&pd3di, &uBaseIndex);
    g_pDevice->GetTexture(0, &pd3dt);
    g_pDevice->GetVertexShader(&dwShader);
*/
    // Prepare to render the text
    g_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    g_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, (DWORD)FALSE);

    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    g_pDevice->SetTexture(0, g_pd3dtFontMap);
    g_pDevice->SetVertexShader(FVF_TLVERTEX);

    // Draw the text
    DrawTextQuads(pszString, uCount, fXStart, fYStart, fCWidth, 
                  fCHeight, (D3DCOLOR)xcColor, fXStart);

    // Restore the device state
/*
    g_pDevice->SetVertexShader(dwShader);
    if (pd3di) {
        g_pDevice->SetIndices(pd3di, uBaseIndex);
    }
    if (pd3dr) {
        g_pDevice->SetStreamSource(0, pd3dr, uStride);
    }
    g_pDevice->SetTexture(0, pd3dt);
    SetColorStage(g_pDevice, 0, dwColorArg1, dwColorArg2, (D3DTEXTUREOP)dwColorOp0);
    SetAlphaStage(g_pDevice, 0, dwAlphaArg1, dwAlphaArg2, (D3DTEXTUREOP)dwAlphaOp0);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, dwColorOp1);
    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, dwAlphaBlend);
    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, dwAlphaTest);
    g_pDevice->SetRenderState(D3DRS_SRCBLEND, dwSrcBlend);
    g_pDevice->SetRenderState(D3DRS_DESTBLEND, dwDstBlend);
*/
    g_pDevice->ApplyStateBlock(dwBlock);
    g_pDevice->DeleteStateBlock(dwBlock);

    UnlockConsole();

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     xTextOutW
//
// Description:
//
//     Draw the given text string on the frame buffer.
//
// Arguments:
//
//     float fXStart            - x screen coordinate of the upper left corner 
//                                of the start of the string
//
//     float fYStart            - y screen coordinate of the upper left corner
//                                of the start of the string
//
//     float fCWidth            - Width in pixels of the characters to be used
//                                to display the string
//
//     float fCHeight           - Height in pixels of the characters to be used
//                                to display the string
//
//     XCOLOR xcColor           - Text color used to display the string
//
//     LPCWSTR pszString        - String to output on the screen
//
//     UINT uCount              - Number of characters in the string
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL DXCIOAPI xTextOutW(float fXStart, float fYStart, float fCWidth,
                        float fCHeight, XCOLOR xcColor, LPCWSTR pszString, 
                        UINT uCount) 
{
    char szBuffer[MAX_TCHAR_OUTPUT];
    wcstombs(szBuffer, pszString, MAX_TCHAR_OUTPUT);
    return xTextOutA(fXStart, fYStart, fCWidth, fCHeight, xcColor, szBuffer, uCount);
}

//******************************************************************************
//
// Function:
//
//     xDebugStringA
//
// Description:
//
//     Take the formatted output and send it to both the console output stream
//     and to the debugger.
//
// Arguments:
//
//     LPCSTR pszFormat         - Formatted string describing the output
//
//     Varaiable argument list  - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xDebugStringA(const char* pszFormat, ...) {

    char szBuffer[MAX_TCHAR_OUTPUT];
    va_list vl;
    va_start(vl, pszFormat);
    xvprintf(pszFormat, vl);
    vsprintf(szBuffer, pszFormat, vl);
    va_end(vl);
    OutputDebugStringA(szBuffer);
}

//******************************************************************************
//
// Function:
//
//     xDebugStringW
//
// Description:
//
//     Take the formatted output and send it to both the console output stream
//     and to the debugger.
//
// Arguments:
//
//     LPCWSTR pszFormat        - Formatted string describing the output
//
//     Varaiable argument list  - Data to be placed in the output string
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DXCIOAPI xDebugStringW(const wchar_t* pszFormat, ...) {

    wchar_t wszBuffer[MAX_TCHAR_OUTPUT];
    va_list vl;
    va_start(vl, pszFormat);
    xvwprintf(pszFormat, vl);
    vswprintf(wszBuffer, pszFormat, vl);
    va_end(vl);
    OutputDebugStringW(wszBuffer);
}

//******************************************************************************
// stdio functions
//******************************************************************************

//******************************************************************************
int DXCIOAPI xprintf(const char* format, ...) {

    va_list vl;
    int     nPrinted;

    va_start(vl, format);
    nPrinted = xvprintf(format, vl);
    va_end(vl);

    return nPrinted;
}

//******************************************************************************
int DXCIOAPI xwprintf(const wchar_t* format, ...) {

    va_list vl;
    int     nPrinted;

    va_start(vl, format);
    nPrinted = xvwprintf(format, vl);
    va_end(vl);

    return nPrinted;
}

//******************************************************************************
int DXCIOAPI xvprintf(const char* format, va_list argptr) {

    char szBuffer[MAX_TCHAR_OUTPUT];
    int  nWritten;
    
    nWritten = vsprintf(szBuffer, format, argptr);
    LockConsole();
    PutStringA(szBuffer);
    UnlockConsole();

    return nWritten;
}

//******************************************************************************
int DXCIOAPI xvwprintf(const wchar_t* format, va_list argptr) {

    wchar_t wszBuffer[MAX_TCHAR_OUTPUT];
    int     nWritten;

    nWritten = vswprintf(wszBuffer, format, argptr);
    LockConsole();
    PutStringW(wszBuffer);
    UnlockConsole();

    return nWritten;
}

//******************************************************************************
int DXCIOAPI xputchar(int c) {

    char sz[2];

    sz[0] = (char)c;
    sz[1] = '\0';
    LockConsole();
    PutStringA(sz);
    UnlockConsole();

    return (int)sz[0];
}

//******************************************************************************
wint_t DXCIOAPI xputwchar(wint_t c) {

    wchar_t wsz[2];

    wsz[0] = c;
    wsz[1] = L'\0';
    LockConsole();
    PutStringW(wsz);
    UnlockConsole();

    return wsz[0];
}

//******************************************************************************
int DXCIOAPI xputs(const char* string) {

    LockConsole();
    PutStringA(string);
    PutStringA("\n");
    UnlockConsole();
    return 0;
}

//******************************************************************************
int DXCIOAPI xputws(const wchar_t* string) {

    LockConsole();
    PutStringW(string);
    PutStringW(L"\n");
    UnlockConsole();
    return 0;
}

//******************************************************************************
// Output buffer functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     PutStringA
//
// Description:
//
//     Append the given string to the end of the output stream buffer.
//
// Arguments:
//
//     LPCSTR                   - Null-terminated string to add to the stream
//
// Return Value:
//
//     None.
//
//******************************************************************************
void PutStringA(LPCSTR pszString) {

    LPCSTR psz;
    UINT   uStart;
    UINT   i;

    if (!pszString) {
        return;
    }

    uStart = g_uOutTail;

    for (psz = pszString; *psz; psz++) {

        g_pchOut[g_uOutTail++] = *psz;
        if (g_uOutTail == g_uOutSize) {
            g_uOutTail = 0;
        }
        if (g_uOutTail == g_uOutHead) {
            for (i = 0; g_pchOut[g_uOutHead] != '\n'; ) {
                switch (g_pchOut[g_uOutHead]) {
                    case '\t':
                        i += (i / TAB_LENGTH + 1) * TAB_LENGTH - i;
                        break;
                    case '\r':
                        i = 0;
                        break;
                    case '\b':
                        if (i > 0) i--;
                        break;
                    default:
                        i++;
                        break;
                }
                if (i >= g_uOutWidth) {
                    break;
                }
                if (++g_uOutHead == g_uOutSize) {
                    g_uOutHead = 0;
                }
                if (g_uOutHead == g_uOutTail) {
                    // Complete wraparound (the buffer is too small
                    // relative to the width of the margin and the length
                    // of the line.
                    uStart = g_uOutHead + 1;
                    if (uStart == g_uOutSize) {
                        uStart = 0;
                    }
                    if (g_bInitialized) {
                        g_uTextHead = 0;
                        g_uTextTail = 0;
                        g_uTextLine = 0;
                        g_uTextCol = 0;
                        g_uTextCursor = 0;
                    }
                    break;
                }
            }
            if (++g_uOutHead == g_uOutSize) {
                g_uOutHead = 0;
            }
        }
    }

    if (g_bInitialized) {
        UpdateConsole(uStart);
    }
}

//******************************************************************************
//
// Function:
//
//     PutStringW
//
// Description:
//
//     Append the given string to the end of the output stream buffer.
//
// Arguments:
//
//     LPCWSTR                  - Null-terminated string to add to the stream
//
// Return Value:
//
//     None.
//
//******************************************************************************
void PutStringW(LPCWSTR pszString) {

    char szBuffer[MAX_TCHAR_OUTPUT];
    wcstombs(szBuffer, pszString, MAX_TCHAR_OUTPUT);
    PutStringA(szBuffer);
}

//******************************************************************************
// Display functions
//******************************************************************************

//******************************************************************************
//
// Function:
//
//     InitConsole
//
// Description:
//
//     Initialize the console's textures, vertex buffers, and index buffers.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL InitConsole() {

    LPDIRECT3DSURFACE8  pd3ds;
    D3DSURFACE_DESC     d3dsd;
// ##TODO: Switch to bump mapping a noise background when DX8 supports it on the GeForce2
    D3DLOCKED_RECT      d3dlr;
    LPDWORD             pdwPixel;
    DWORD               dwPitch;
    UINT                i, j;
    float               fX, fY, fDX, fDY, fIntensity;
    HRESULT             hr;

#ifndef UNDER_XBOX
    hr = g_pDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &pd3ds);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::GetBackBuffer"));
        xReleaseConsole();
        return FALSE;
    }
    hr = pd3ds->GetDesc(&d3dsd);
    pd3ds->Release();
    if (ResultFailed(hr, TEXT("IDirect3DSurface8::GetDesc"))) {
        xReleaseConsole();
        return FALSE;
    }
#else
    d3dsd.Width = 640;
    d3dsd.Height = 480;
#endif // UNDER_XBOX

    g_fTargetWidth = (float)d3dsd.Width;
    g_fTargetHeight = (float)d3dsd.Height;

    g_fMaxColScroll = (float)g_uOutWidth - ((g_fTargetWidth - BORDER_LEFT - BORDER_RIGHT) / g_fCharWidth);
    g_fMaxRowScroll = (float)g_uTextHeight - ((g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight);
    g_fCurrentRow = 0.0f;
    g_fCurrentCol = 0.0f;

    g_vTranslate.x = BORDER_LEFT;
    g_vTranslate.y = g_fTargetHeight - BORDER_BOTTOM - g_fMaxRowScroll * g_fCharHeight;

    // Create a font map to use in displaying the output text on the screen
    if (!CreateFontMap(g_pDevice)) {
        return FALSE;
    }

    if (!CreateGeometry(g_uOutSize)) {
        EffaceConsole();
        return FALSE;
    }

    if (g_bUseBackground) {

        if (*g_szBackImage) {
            g_pd3dtBackBase = (LPDIRECT3DTEXTURE8)CreateTexture(g_pDevice, g_szBackImage, D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
            if (!g_pd3dtBackBase) {
                g_bUseBackground = FALSE;
            }
            else {
                RemoveTexture(g_pd3dtBackBase);
            }
        }

        else {

#ifdef UNDER_XBOX
            Swizzler swz(BACKTEX_WIDTH, BACKTEX_HEIGHT, 1);
#endif
            g_pd3dtBackBase = (LPDIRECT3DTEXTURE8)CreateTexture(g_pDevice, TEXT("T_XBump"), D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
            if (!g_pd3dtBackBase) {
//##DELETE
                g_pd3dtBackBase = (LPDIRECT3DTEXTURE8)CreateTexture(g_pDevice, BACKTEX_WIDTH, BACKTEX_HEIGHT, D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
                if (!g_pd3dtBackBase) {
                    EffaceConsole();
                    return FALSE;
                }
                RemoveTexture(g_pd3dtBackBase);

                hr = g_pd3dtBackBase->LockRect(0, &d3dlr, NULL, 0);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                    EffaceConsole();
                    return FALSE;
                }

                pdwPixel = (LPDWORD)d3dlr.pBits;

                dwPitch = d3dlr.Pitch >> 2;

                g_pNoise->SetRange(0.0f, 255.0f);

                fDX = 1.0f / (float)(BACKTEX_WIDTH - 1) * g_fTargetWidth / ((float)BACKTEX_WIDTH / 4.0f);
                fDY = 1.0f / (float)(BACKTEX_HEIGHT - 1) * g_fTargetHeight / ((float)BACKTEX_HEIGHT / 4.0f);

#ifdef UNDER_XBOX
                swz.SetU(0);
                swz.SetV(0);
#endif

                for (i = 0, fY = 0.0f; i < BACKTEX_HEIGHT; i++, fY += fDY) {

                    for (j = 0, fX = 0.0f; j < BACKTEX_WIDTH; j++, fX += fDX) {

                        fIntensity = g_pNoise->GetIntensity(fX, fY);
#ifndef UNDER_XBOX
                        pdwPixel[j] = RGBA_MAKE((BYTE)fIntensity, (BYTE)fIntensity, (BYTE)fIntensity, 255);
#else
                        pdwPixel[swz.Get2D()] = RGBA_MAKE((BYTE)fIntensity, (BYTE)fIntensity, (BYTE)fIntensity, 255);
                        swz.IncU();
#endif
                    }

#ifndef UNDER_XBOX
                    pdwPixel += dwPitch;
#else
                    swz.IncV();
#endif
                }

                hr = g_pd3dtBackBase->UnlockRect(0);
                if (FAILED(hr)) {
                    ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                    EffaceConsole();
                    return FALSE;
                }
//##END DELETE
//                g_bUseBackground = FALSE;
            }
            else {
                RemoveTexture(g_pd3dtBackBase);
            }
/*
            // ##TODO: Switch to bump mapping a noise background when DX8 supports it on the GeForce2

            g_pd3dtBackBase = (LPDIRECT3DTEXTURE8)CreateTexture(g_pDevice, BACKTEX_WIDTH, BACKTEX_HEIGHT, D3DFMT_A8R8G8B8, TTYPE_TEXTURE);
            if (!g_pd3dtBackBase) {
                EffaceConsole();
                return FALSE;
            }
            RemoveTexture(g_pd3dtBackBase);

            hr = g_pd3dtBackBase->LockRect(0, &d3dlr, NULL, 0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                EffaceConsole();
                return FALSE;
            }

            pdwPixel = (LPDWORD)d3dlr.pBits;

            dwPitch = d3dlr.Pitch >> 2;

            g_pNoise->SetRange(0.0f, 255.0f);

            fDX = 1.0f / (float)(BACKTEX_WIDTH - 1) * g_fTargetWidth / ((float)BACKTEX_WIDTH / 4.0f);
            fDY = 1.0f / (float)(BACKTEX_HEIGHT - 1) * g_fTargetHeight / ((float)BACKTEX_HEIGHT / 4.0f);

#ifdef UNDER_XBOX
            swz.SetU(0);
            swz.SetV(0);
#endif

            for (i = 0, fY = 0.0f; i < BACKTEX_HEIGHT; i++, fY += fDY) {

                for (j = 0, fX = 0.0f; j < BACKTEX_WIDTH; j++, fX += fDX) {

                    fIntensity = g_pNoise->GetIntensity(fX, fY);
#ifndef UNDER_XBOX
                    pdwPixel[j] = RGBA_MAKE((BYTE)fIntensity, (BYTE)fIntensity, (BYTE)fIntensity, 255);
#else
                    pdwPixel[swz.Get2D()] = RGBA_MAKE((BYTE)fIntensity, (BYTE)fIntensity, (BYTE)fIntensity, 255);
                    swz.IncU();
#endif
                }

#ifndef UNDER_XBOX
                pdwPixel += dwPitch;
#else
                swz.IncV();
#endif
            }

            hr = g_pd3dtBackBase->UnlockRect(0);
            if (FAILED(hr)) {
                ResultFailed(hr, TEXT("IDirect3DTexture8::LockRect"));
                EffaceConsole();
                return FALSE;
            }

            g_pd3dtBackBump = (LPDIRECT3DTEXTURE8)CreateTexture(g_pDevice, TEXT("T_XBump"), D3DFMT_V8U8, TTYPE_BUMPMAP);
            if (!g_pd3dtBackBump) {
                EffaceConsole();
                return FALSE;
            }
            RemoveTexture(g_pd3dtBackBump);

            g_pd3dtBackEnv = (LPDIRECT3DTEXTURE8)CreateDiffuseMap(g_pDevice, BACKTEX_WIDTH, BACKTEX_HEIGHT, RGBA_MAKE(255, 255, 255, 255), D3DFMT_A8R8G8B8, FALSE);
            if (!g_pd3dtBackEnv) {
                EffaceConsole();
                return FALSE;
            }
            RemoveTexture(g_pd3dtBackEnv);
*/
        }
    }

    g_bInScene = FALSE;

    g_bDoConsoleUpdate = TRUE;

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     EffaceConsole
//
// Description:
//
//     Release the textures, vertex buffers, and index buffers used by the 
//     console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void EffaceConsole() {

    g_bDoConsoleUpdate = FALSE;

    if (g_pd3dtBackEnv) {
        ReleaseTexture(g_pd3dtBackEnv);
        g_pd3dtBackEnv = NULL;
    }
    if (g_pd3dtBackBump) {
        ReleaseTexture(g_pd3dtBackBump);
        g_pd3dtBackBump = NULL;
    }
    if (g_pd3dtBackBase) {
        ReleaseTexture(g_pd3dtBackBase);
        g_pd3dtBackBase = NULL;
    }

    ReleaseGeometry();

    ReleaseFontMap();
}

//******************************************************************************
//
// Function:
//
//     CreateGeometry
//
// Description:
//
//     Create and initialize the vertex and index buffers used by the console
//     in drawing the background and outputting text.
//
// Arguments:
//
//     UINT uNumChars           - Number of quads to be used in displaying
//                                output stream text on the screen
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateGeometry(UINT uNumChars) {

    LPBYTE     pData;
    D3DVECTOR* pvPos;
    PTLBVERTEX prBack;
    D3DXMATRIX mIdentity;
    LPWORD     pwText;
    USHORT     i, j, k;
    HRESULT    hr;

// ##DELETE: Until support for vertex shaders is introduced, use a temporary vertex buffer to hold transformed vertices
// Create a vertex buffer to hold the positions of text quads
g_uVBDeleteMeSize = uNumChars * 4 * sizeof(TLVERTEX);
hr = g_pDevice->CreateVertexBuffer(g_uVBDeleteMeSize,
                                        0, 0, POOL_DEFAULT, 
                                        &g_pd3drDeleteMe);
if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
    return FALSE;
}
// ##END DELETE

    // Create a vertex buffer to hold the positions of text quads
    g_uVBPositionSize = uNumChars * 4 * sizeof(D3DVECTOR);
    hr = g_pDevice->CreateVertexBuffer(g_uVBPositionSize,
                                            0, 0, POOL_DEFAULT, 
                                            &g_pd3drPosition);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        return FALSE;
    }

    // Initialize position vertices to zero so nothing will be initially drawn
    hr = g_pd3drPosition->Lock(0, g_uVBPositionSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        ReleaseGeometry();
        return FALSE;
    }
    pvPos = (D3DVECTOR*)pData;

    for (i = 0; i < uNumChars * 4; i++) {
        pvPos[i].x = POS_BLANK;
        pvPos[i].y = POS_BLANK;
        pvPos[i].z = 0.0f;
    }

    hr = g_pd3drPosition->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        ReleaseGeometry();
        return FALSE;
    }

    // Create a vertex buffer to hold the texture coordinates of text quads
    g_uVBTexCoordSize = uNumChars * 4 * sizeof(TCOORD2);
    hr = g_pDevice->CreateVertexBuffer(g_uVBTexCoordSize,
                                            0, 0, POOL_DEFAULT, 
                                            &g_pd3drTexCoord);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        ReleaseGeometry();
        return FALSE;
    }

    // Create an index buffer for the text geometry
    g_uIBTextSize = uNumChars * 6 * sizeof(WORD);
    hr = g_pDevice->CreateIndexBuffer(g_uIBTextSize,
                                            0, D3DFMT_INDEX16, POOL_DEFAULT,
                                            &g_pd3diText);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateIndexBuffer"))) {
        ReleaseGeometry();
        return FALSE;
    }

    hr = g_pd3diText->Lock(0, g_uIBTextSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DIndexBuffer8::Lock"));
        ReleaseGeometry();
        return FALSE;
    }

    // Initialize the indices
    for (pwText = (LPWORD)pData, i = 0, j = 0, k = 0; i < uNumChars; i++, j += 4, k += 6) {
        pwText[k]   = j;
        pwText[k+1] = j + 2;
        pwText[k+2] = j + 1;
        pwText[k+3] = j + 1;
        pwText[k+4] = j + 2;
        pwText[k+5] = j + 3;
    }

    hr = g_pd3diText->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DIndexBuffer8::Unlock"));
        ReleaseGeometry();
        return FALSE;
    }

    // Create a vertex buffer the hold the background vertices
    hr = g_pDevice->CreateVertexBuffer(4 * sizeof(TLBVERTEX),
                                            0, FVF_TLBVERTEX, POOL_DEFAULT, 
                                            &g_pd3drBack);
    if (ResultFailed(hr, TEXT("IDirect3DDevice8::CreateVertexBuffer"))) {
        ReleaseGeometry();
        return FALSE;
    }

    // Initialize the background vertices
    hr = g_pd3drBack->Lock(0, 4 * sizeof(TLBVERTEX), &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        ReleaseGeometry();
        return FALSE;
    }

    prBack = (PTLBVERTEX)pData;
    *prBack++ = TLBVERTEX(D3DXVECTOR3(0.0f, g_fTargetHeight, 0.9999f), 0.0001f, g_dwBackgroundColor, 0, 0.0f, 1.0f, 0.0f, 0.0f);
    *prBack++ = TLBVERTEX(D3DXVECTOR3(0.0f, 0.0f, 0.9999f), 0.0001f, g_dwBackgroundColor, 0, 0.0f, 0.0f, 0.0f, 0.0f);
    *prBack++ = TLBVERTEX(D3DXVECTOR3(g_fTargetWidth, 0.0f, 0.9999f), 0.0001f, g_dwBackgroundColor, 0, 1.0f, 0.0f, 0.0f, 0.0f);
    *prBack   = TLBVERTEX(D3DXVECTOR3(g_fTargetWidth, g_fTargetHeight, 0.9999f), 0.0001f, g_dwBackgroundColor, 0, 1.0f, 1.0f, 0.0f, 0.0f);

    prBack = (PTLBVERTEX)pData;
    D3DXMatrixIdentity(&mIdentity);
//    SetDiffuseMapCoords(&D3DXVECTOR3(0.0f, 0.0f, -1.0f), 0, 
//                       (PTCOORD2)&prBack[0].u1, sizeof(TLBVERTEX), 
//                       4, &mIdentity, &D3DXVECTOR3(0.0f, 1.0f, 0.5f), M_3PIDIV2);

    hr = g_pd3drBack->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        ReleaseGeometry();
        return FALSE;
    }

    g_uTextSize = uNumChars;

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseGeometry
//
// Description:
//
//     Release the vertex and index buffers used by the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseGeometry() {

// ##DELETE: Until support for vertex shaders is introduced, use a temporary vertex buffer to hold transformed vertices
if (g_pd3drDeleteMe){
g_pd3drDeleteMe->Release();
g_pd3drDeleteMe = NULL;
}
// ##END DELETE

    if (g_pd3drBack) {
        g_pd3drBack->Release();
        g_pd3drBack = NULL;
    }

    if (g_pd3drPosition) {
        g_pd3drPosition->Release();
        g_pd3drPosition = NULL;
    }

    if (g_pd3drTexCoord) {
        g_pd3drTexCoord->Release();
        g_pd3drTexCoord = NULL;
    }

    if (g_pd3diText) {
        g_pd3diText->Release();
        g_pd3diText = NULL;
    }
}

//******************************************************************************
//
// Function:
//
//     RefreshConsole
//
// Description:
//
//     Recalculate all vertex data pertaining to the display of text for the 
//     console from the output stream buffer.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void RefreshConsole() {

    LPBYTE      pData;
    D3DVECTOR*  pvPos;
    HRESULT     hr;
    UINT        i;

    g_uTextHead = 0;
    g_uTextTail = 0;
    g_uTextLine = 0;
    g_uTextHeight = 1;
    g_uTextCol = 0;
    g_uTextCursor = 0;
    g_fTextX = 0.0f;

    // Clear the position buffer (such that it won't get displayed)
    hr = g_pd3drPosition->Lock(0, g_uVBPositionSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        return;
    }
    pvPos = (D3DVECTOR*)pData;

    for (i = 0; i < g_uTextSize * 4; i++) {
        pvPos[i].x = POS_BLANK;
        pvPos[i].y = POS_BLANK;
        pvPos[i].z = 0.0f;
    }

    hr = g_pd3drPosition->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        return;
    }

    UpdateConsole(g_uOutHead);
}

//******************************************************************************
//
// Function:
//
//     UpdateConsole
//
// Description:
//
//     Update the vertex buffers with new data from the console output stream.
//
// Arguments:
//
//     UINT uStart              - Starting index into the console output buffer
//                                from which to update the console with new text
//
// Return Value:
//
//     None.
//
//******************************************************************************
void UpdateConsole(UINT uStart) {

    UINT  src;
    LPBYTE pData;
    D3DVECTOR* pvPos;
    PTCOORD2   ptcUV, ptcChar;
    UINT i, j;
    UINT uSpaces;
    HRESULT hr;

    if (!g_bDoConsoleUpdate) {
        return;
    }

    g_bDoConsoleUpdate = FALSE;

    // Lock the vertex buffers
    hr = g_pd3drPosition->Lock(0, g_uVBPositionSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        g_bDoConsoleUpdate = TRUE;
        return;
    }
    pvPos = (D3DVECTOR*)pData;

    hr = g_pd3drTexCoord->Lock(0, g_uVBTexCoordSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        g_bDoConsoleUpdate = TRUE;
        return;
    }
    ptcUV = (PTCOORD2)pData;

    for (src = uStart; src != g_uOutTail; ) {

        if (g_pchOut[src] == '\n' || g_uTextCol >= g_uOutWidth) {
            g_fTextX = 0.0f;
            g_uTextLine = g_uTextTail;
            g_uTextCursor = g_uTextTail;
            g_uTextCol = 0;
            for (i = g_uTextHead; i != g_uTextTail; ) {
                pvPos[i * 4].y     -= g_fCharHeight;
                pvPos[i * 4 + 1].y -= g_fCharHeight;
                pvPos[i * 4 + 2].y -= g_fCharHeight;
                pvPos[i * 4 + 3].y -= g_fCharHeight;

                if (++i == g_uTextSize) {
                    i = 0;
                }
            }
            g_uTextHeight++;
            g_fMaxRowScroll = (float)g_uTextHeight - ((g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight);
            if (g_fCurrentRow != 0.0f) {
                g_fCurrentRow += 1.0f;
            }
            UpdateConsoleScrollY();
        }

        uSpaces = 0;

        switch (g_pchOut[src]) {

            case '\r':
                g_uTextCursor = g_uTextLine;
                g_uTextCol = 0;
                g_fTextX = 0.0f;
                break;

            case '\b':
                if (g_uTextCursor != g_uTextLine) {
                    if (g_uTextCursor > 0) {
                        g_uTextCursor--;
                    }
                    else {
                        g_uTextCursor = g_uTextSize - 1;
                    }
                    g_uTextCol--;
                    g_fTextX -= g_fCharWidth;
                }
                break;

            case '\n':
                // Already handled
                break;

            case '\t':
                uSpaces = (g_uTextCol / TAB_LENGTH + 1) * TAB_LENGTH - g_uTextCol;
                if (g_uTextCol + uSpaces >= g_uOutWidth) {
                    uSpaces = g_uOutWidth - g_uTextCol;
                }
                // Fall through

            default:
                if (uSpaces) {
                    ptcChar = CHAR_TO_TCOORD(' ');
                    i = 1;
                }
                else {
                    ptcChar = CHAR_TO_TCOORD(g_pchOut[src]);
                    i = 0;
                }

                for (; i <= uSpaces; i++) {

                    pvPos[g_uTextCursor * 4].x        = g_fTextX;
                    pvPos[g_uTextCursor * 4].y        = -g_fCharHeight;
                    ptcUV[g_uTextCursor * 4].u        = ptcChar->u;
                    ptcUV[g_uTextCursor * 4].v        = ptcChar->v;

                    pvPos[g_uTextCursor * 4 + 1].x    = g_fTextX;
                    pvPos[g_uTextCursor * 4 + 1].y    = 0.0f;
                    ptcUV[g_uTextCursor * 4 + 1].u    = ptcChar->u;
                    ptcUV[g_uTextCursor * 4 + 1].v    = ptcChar->v + FONT_TCOORD_HEIGHT;

                    pvPos[g_uTextCursor * 4 + 2].x    = g_fTextX + g_fCharWidth;
                    pvPos[g_uTextCursor * 4 + 2].y    = -g_fCharHeight;
                    ptcUV[g_uTextCursor * 4 + 2].u    = ptcChar->u + FONT_TCOORD_WIDTH;
                    ptcUV[g_uTextCursor * 4 + 2].v    = ptcChar->v;

                    pvPos[g_uTextCursor * 4 + 3].x    = g_fTextX + g_fCharWidth;
                    pvPos[g_uTextCursor * 4 + 3].y    = 0.0f;
                    ptcUV[g_uTextCursor * 4 + 3].u    = ptcChar->u + FONT_TCOORD_WIDTH;
                    ptcUV[g_uTextCursor * 4 + 3].v    = ptcChar->v + FONT_TCOORD_HEIGHT;

                    if (g_uTextCursor == g_uTextTail) {
                        if (++g_uTextTail == g_uTextSize) {
                            g_uTextTail = 0;
                        }
                        if (g_uTextTail == g_uTextHead) {

                            float       y;
                            D3DVECTOR*  pv;

                            // Advance the head of the list to the start of the 
                            // next line, clearing the text in between
                            for (y = pvPos[g_uTextHead * 4].y; y == pvPos[g_uTextHead * 4].y; ) {
                                for (j = 0, pv = pvPos + g_uTextHead * 4; j < 4; j++, pv++) {
                                    pv->x = POS_BLANK;
                                    pv->y = POS_BLANK;
                                    pv->z = 0.0f;
                                }

                                if (++g_uTextHead == g_uTextSize) {
                                    g_uTextHead = 0;
                                }
                            }

                            g_uTextHeight -= (UINT)((pvPos[g_uTextHead * 4].y - y) / g_fCharHeight + 0.5f);
                            g_fMaxRowScroll = (float)g_uTextHeight - ((g_fTargetHeight - BORDER_TOP - BORDER_BOTTOM) / g_fCharHeight);
                            UpdateConsoleScrollY();
                        }
                    }
                    if (++g_uTextCursor == g_uTextSize) {
                        g_uTextCursor = 0;
                    }

                    g_fTextX += g_fCharWidth;
                    g_uTextCol++;
                }
                break;
        }

        if (++src == g_uOutSize) {
            src = 0;
        }
    }

    // Unlock the vertex buffers
    hr = g_pd3drPosition->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        g_bDoConsoleUpdate = TRUE;
        return;
    }

    hr = g_pd3drTexCoord->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        g_bDoConsoleUpdate = TRUE;
        return;
    }

    // Calculate the visible portions of the vertex buffer
    UpdateVisibility();

    g_bDoConsoleUpdate = TRUE;
}

//******************************************************************************
//
// Function:
//
//     BeginConsoleScene
//
// Description:
//
//     Pump messages, check for a lost device, clear the background, and begin a 
//     new scene for the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
static BOOL BeginConsoleScene() {

    HRESULT hr;
#ifndef UNDER_XBOX
    MSG     msg;

    while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {

        // If a message is ready, process it and proceed to
        // check for another message
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    hr = g_pDevice->TestCooperativeLevel();
    if (FAILED(hr)) {
        if (hr == D3DERR_DEVICELOST) {
            return FALSE;
        }
        if (hr == D3DERR_DEVICENOTRESET) {
            if (!xResetConsole()) {
                return FALSE;
            }
        }
    }

#endif // !UNDER_XBOX

    // Clear the rendering target
    if (!g_bUseBackground) {
        g_pDevice->Clear(0, NULL, D3DCLEAR_TARGET, g_dwBackgroundColor, 1.0f, 0);
    }

    // Begin the scene
    g_pDevice->BeginScene();

    g_bInScene = TRUE;

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     EndConsoleScene
//
// Description:
//
//     End a console scene and present the frame buffer.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void EndConsoleScene() {

    // End the scene
    g_pDevice->EndScene();

    // Update the screen
    g_pDevice->Present(NULL, NULL, NULL, NULL);

    g_bInScene = FALSE;
}

//******************************************************************************
//
// Function:
//
//     DrawConsoleBackground
//
// Description:
//
//     Draw the background for the console.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void DrawConsoleBackground() {

    g_pDevice->SetVertexShader(FVF_TLBVERTEX);

    // Set textures
/*
    // ##TODO: Switch to bump mapping a noise background when DX8 supports it on the GeForce2

    g_pDevice->SetTexture(0, g_pd3dtBackBase);
    g_pDevice->SetTexture(1, g_pd3dtBackBump);
    g_pDevice->SetTexture(2, g_pd3dtBackEnv);

    g_pDevice->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0);
    g_pDevice->SetTextureStageState(1, D3DTSS_TEXCOORDINDEX, 0);
    g_pDevice->SetTextureStageState(2, D3DTSS_TEXCOORDINDEX, 1);

    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    if (g_pd3dtBackBump) {
        SetColorStage(g_pDevice, 1, D3DTA_TEXTURE, D3DTA_CURRENT, D3DTOP_BUMPENVMAP);
        SetColorStage(g_pDevice, 2, D3DTA_TEXTURE, D3DTA_CURRENT, D3DTOP_MODULATE4X);
    }
    else {
        g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    }

    g_pDevice->SetTextureStageState(1, D3DTSS_BUMPENVMAT00, F2DW(1.0f));
    g_pDevice->SetTextureStageState(1, D3DTSS_BUMPENVMAT01, F2DW(0.0f));
    g_pDevice->SetTextureStageState(1, D3DTSS_BUMPENVMAT10, F2DW(0.0f));
    g_pDevice->SetTextureStageState(1, D3DTSS_BUMPENVMAT11, F2DW(1.0f));

    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)FALSE);
//    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
//    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
//    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
//    g_pDevice->SetTexture(0, g_pd3dtBackBase);
*/

    g_pDevice->SetTextureStageState(0, D3DTSS_MINFILTER, (DWORD)D3DTEXF_LINEAR);
    g_pDevice->SetTextureStageState(0, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_LINEAR);
    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    g_pDevice->SetTexture(0, g_pd3dtBackBase);

    g_pDevice->SetStreamSource(0, g_pd3drBack, sizeof(TLBVERTEX));

    g_pDevice->DrawPrimitive(D3DPT_TRIANGLEFAN, 0, 2);

    g_pDevice->SetTextureStageState(0, D3DTSS_MINFILTER, (DWORD)D3DTEXF_POINT);
    g_pDevice->SetTextureStageState(0, D3DTSS_MAGFILTER, (DWORD)D3DTEXF_POINT);
}

//******************************************************************************
//
// Function:
//
//     DrawConsoleText
//
// Description:
//
//     Draw the console text.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void DrawConsoleText() {

    D3DCOLOR    cShadow;
// ##DELETE: Until support for vertex shaders is introduced, transform the vertices
LPBYTE pData, pPos, pTex;
D3DVECTOR* pvPos;
PTCOORD2 ptc;
PTLVERTEX pr;
UINT    i;
// ##END DELETE

    // ##REVIEW: When supported, switch to using vertex shaders to translate the vertices.
    // The output from the shader must be in clip-space
    // (0.0f to 1.0f) and will later be mapped to the viewport.  Any
    // clipping will be performed by d3d after shading.

    g_pDevice->SetVertexShader(FVF_TLVERTEX);

    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    g_pDevice->SetTexture(0, g_pd3dtFontMap);
    g_pDevice->SetTexture(1, NULL);
    g_pDevice->SetTexture(2, NULL);

    g_pDevice->SetIndices(g_pd3diText, 0);

    cShadow = RGBA_MAKE(0, 0, 0, (BYTE)((float)RGBA_GETALPHA(g_dwTextColor) / 255.0f * SHADOW_INTENSITY));

// ##DELETE: Until support for vertex shaders is introduced, transform the vertices
// Transform the vertices
g_pd3drDeleteMe->Lock(0, g_uVBDeleteMeSize, &pData, 0);
g_pd3drPosition->Lock(0, g_uVBPositionSize, &pPos, 0);
g_pd3drTexCoord->Lock(0, g_uVBTexCoordSize, &pTex, 0);
//pr = (PTLVERTEX)pData;
//pvPos = (D3DVECTOR*)pPos;
//ptc = (PTCOORD2)pTex;

for (i = 0, pvPos = ((D3DVECTOR*)pPos) + g_uVStart1, pr = ((PTLVERTEX)pData) + g_uVStart1, ptc = ((PTCOORD2)pTex) + g_uVStart1; i < g_uVCount1; i++, pr++, pvPos++, ptc++) {

    pr->fRHW = 110000.0f;
    pr->vPosition.x = pvPos->x + g_vTranslate.x + SHADOW_OFFSET_X;
    pr->vPosition.y = pvPos->y + g_vTranslate.y + SHADOW_OFFSET_Y;
    pr->vPosition.z = 0.000009f;
    pr->cDiffuse = cShadow;
    pr->cSpecular = 0;
    pr->u0 = ptc->u;
    pr->v0 = ptc->v;
}
for (i = 0, pvPos = ((D3DVECTOR*)pPos) + g_uVStart2, pr = ((PTLVERTEX)pData) + g_uVStart2, ptc = ((PTCOORD2)pTex) + g_uVStart2; i < g_uVCount2; i++, pr++, pvPos++, ptc++) {

    pr->fRHW = 110000.0f;
    pr->vPosition.x = pvPos->x + g_vTranslate.x + SHADOW_OFFSET_X;
    pr->vPosition.y = pvPos->y + g_vTranslate.y + SHADOW_OFFSET_Y;
    pr->vPosition.z = 0.000009f;
    pr->cDiffuse = cShadow;
    pr->cSpecular = 0;
    pr->u0 = ptc->u;
    pr->v0 = ptc->v;
}

g_pd3drTexCoord->Unlock();
g_pd3drPosition->Unlock();
g_pd3drDeleteMe->Unlock();
// ##END DELETE

    g_pDevice->SetStreamSource(0, g_pd3drDeleteMe, sizeof(TLVERTEX));

    if (g_uVCount1) {
        g_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, g_uVStart1, g_uVCount1, g_uVStart1 / 4 * 6, g_uVCount1 / 2);
    }
    if (g_uVCount2) {
        g_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, g_uVStart2, g_uVCount2, g_uVStart2 / 4 * 6, g_uVCount2 / 2);
    }

// ##DELETE: Until support for vertex shaders is introduced, transform the vertices
// Transform the vertices
g_pd3drDeleteMe->Lock(0, g_uVBDeleteMeSize, &pData, 0);
g_pd3drPosition->Lock(0, g_uVBPositionSize, &pPos, 0);
g_pd3drTexCoord->Lock(0, g_uVBTexCoordSize, &pTex, 0);
pr = (PTLVERTEX)pData;
pvPos = (D3DVECTOR*)pPos;
ptc = (PTCOORD2)pTex;

for (i = 0, pvPos = ((D3DVECTOR*)pPos) + g_uVStart1, pr = ((PTLVERTEX)pData) + g_uVStart1, ptc = ((PTCOORD2)pTex) + g_uVStart1; i < g_uVCount1; i++, pr++, pvPos++, ptc++) {

    pr->fRHW = 120000.0f;
    pr->vPosition.x = pvPos->x + g_vTranslate.x;
    pr->vPosition.y = pvPos->y + g_vTranslate.y;
    pr->vPosition.z = 0.000008f;
    pr->cDiffuse = g_dwTextColor;
    pr->cSpecular = 0;
    pr->u0 = ptc->u;
    pr->v0 = ptc->v;
}
for (i = 0, pvPos = ((D3DVECTOR*)pPos) + g_uVStart2, pr = ((PTLVERTEX)pData) + g_uVStart2, ptc = ((PTCOORD2)pTex) + g_uVStart2; i < g_uVCount2; i++, pr++, pvPos++, ptc++) {

    pr->fRHW = 120000.0f;
    pr->vPosition.x = pvPos->x + g_vTranslate.x;
    pr->vPosition.y = pvPos->y + g_vTranslate.y;
    pr->vPosition.z = 0.000008f;
    pr->cDiffuse = g_dwTextColor;
    pr->cSpecular = 0;
    pr->u0 = ptc->u;
    pr->v0 = ptc->v;
}
g_pd3drTexCoord->Unlock();
g_pd3drPosition->Unlock();
g_pd3drDeleteMe->Unlock();
// ##END DELETE

    g_pDevice->SetStreamSource(0, g_pd3drDeleteMe, sizeof(TLVERTEX));

    if (g_uVCount1) {
        g_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, g_uVStart1, g_uVCount1, g_uVStart1 / 4 * 6, g_uVCount1 / 2);
    }
    if (g_uVCount2) {
        g_pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, g_uVStart2, g_uVCount2, g_uVStart2 / 4 * 6, g_uVCount2 / 2);
    }
}

//******************************************************************************
//
// Function:
//
//     DrawConsole
//
// Description:
//
//     Draw the console to the screen.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void DrawConsole() {

/*
    CBaseTexture8*  pd3dt;
    CVertexBuffer8* pd3dr;
    CIndexBuffer8*  pd3di;
    UINT            uStride;
    UINT            uBaseIndex;
    DWORD           dwSrcBlend, dwDstBlend, dwAlphaBlend, dwColorOp0, 
                    dwColorOp1, dwAlphaOp0, dwColorArg1, dwColorArg2, 
                    dwAlphaArg1, dwAlphaArg2, dwAlphaTest, dwShader;
    DWORD           dwZCmp, dwTexFMin, dwTexFMag;
*/
    DWORD           dwBlock;
    HRESULT         hr;

    if (!g_bInitialized) {
        return;
    }

    if (g_bInScene) {
        return;
    }

    // Save the device state
    hr = g_pDevice->CreateStateBlock(D3DSBT_ALL, &dwBlock);
    if (FAILED(hr)) {
        return;
    }
/*
    g_pDevice->GetRenderState(D3DRS_SRCBLEND, &dwSrcBlend);
    g_pDevice->GetRenderState(D3DRS_DESTBLEND, &dwDstBlend);
    g_pDevice->GetRenderState(D3DRS_ALPHABLENDENABLE, &dwAlphaBlend);
    g_pDevice->GetRenderState(D3DRS_ALPHATESTENABLE, &dwAlphaTest);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLOROP, &dwColorOp0);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLORARG1, &dwColorArg1);
    g_pDevice->GetTextureStageState(0, D3DTSS_COLORARG2, &dwColorArg2);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAOP, &dwAlphaOp0);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG1, &dwAlphaArg1);
    g_pDevice->GetTextureStageState(0, D3DTSS_ALPHAARG2, &dwAlphaArg2);
    g_pDevice->GetTextureStageState(1, D3DTSS_COLOROP, &dwColorOp1);
    g_pDevice->GetStreamSource(0, &pd3dr, &uStride);
    g_pDevice->GetIndices(&pd3di, &uBaseIndex);
    g_pDevice->GetTexture(0, &pd3dt);
    g_pDevice->GetVertexShader(&dwShader);

    // Prepare to render the text
    g_pDevice->SetRenderState(D3DRS_SRCBLEND, (DWORD)D3DBLEND_SRCALPHA);
    g_pDevice->SetRenderState(D3DRS_DESTBLEND, (DWORD)D3DBLEND_INVSRCALPHA);
    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, (DWORD)FALSE);

    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, (DWORD)TRUE);
    SetColorStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    SetAlphaStage(g_pDevice, 0, D3DTA_TEXTURE, D3DTA_DIFFUSE, D3DTOP_MODULATE);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);
    g_pDevice->SetTexture(0, g_pd3dtFontMap);
    g_pDevice->SetVertexShader(FVF_TLVERTEX);
*/

    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, (DWORD)FALSE);
//    g_pDevice->GetRenderState(D3DRS_ZFUNC, &dwZCmp);
    g_pDevice->SetRenderState(D3DRS_ZFUNC, D3DCMP_ALWAYS);
//    g_pDevice->GetTextureStageState(0, D3DTSS_MINFILTER, &dwTexFMin);
//    g_pDevice->GetTextureStageState(0, D3DTSS_MAGFILTER, &dwTexFMag);

    DrawConsoleBackground();
    DrawConsoleText();

/*
    g_pDevice->SetTexture(1, NULL);
    g_pDevice->SetTexture(2, NULL);
    g_pDevice->SetRenderState(D3DRS_ZFUNC, dwZCmp);
    g_pDevice->SetTextureStageState(0, D3DTSS_MINFILTER, dwTexFMin);
    g_pDevice->SetTextureStageState(0, D3DTSS_MAGFILTER, dwTexFMag);

    // Restore the device state
    g_pDevice->SetVertexShader(dwShader);
    if (pd3di) {
        g_pDevice->SetIndices(pd3di, uBaseIndex);
    }
    if (pd3dr) {
        g_pDevice->SetStreamSource(0, pd3dr, uStride);
    }
    g_pDevice->SetTexture(0, pd3dt);
    SetColorStage(g_pDevice, 0, dwColorArg1, dwColorArg2, (D3DTEXTUREOP)dwColorOp0);
    SetAlphaStage(g_pDevice, 0, dwAlphaArg1, dwAlphaArg2, (D3DTEXTUREOP)dwAlphaOp0);
    g_pDevice->SetTextureStageState(1, D3DTSS_COLOROP, dwColorOp1);
    g_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, dwAlphaBlend);
    g_pDevice->SetRenderState(D3DRS_ALPHATESTENABLE, dwAlphaTest);
    g_pDevice->SetRenderState(D3DRS_SRCBLEND, dwSrcBlend);
    g_pDevice->SetRenderState(D3DRS_DESTBLEND, dwDstBlend);
*/
    g_pDevice->ApplyStateBlock(dwBlock);
    g_pDevice->DeleteStateBlock(dwBlock);
}

//******************************************************************************
//
// Function:
//
//     DrawTextQuads
//
// Description:
//
//     Draw the given text string on the frame buffer.
//
// Arguments:
//
//     LPCSTR szText            - String to output on the screen
//
//     UINT uCount              - Number of characters in the string
//
//     float fXStart            - x screen coordinate of the upper left corner 
//                                of the start of the string
//
//     float fYStart            - y screen coordinate of the upper left corner
//                                of the start of the string
//
//     float fWidth             - Width in pixels of the characters to be used
//                                to display the string
//
//     float fHeight            - Height in pixels of the characters to be used
//                                to display the string
//
//     D3DCOLOR c               - Text color used to display the string
//
//     float fLeftMargin        - Location of the left margin for the text in
//                                screen coordinates.  If a newline character
//                                is encountered the continuation of the
//                                string will begin at this point.
//
// Return Value:
//
//     None.
//
//******************************************************************************
static void DrawTextQuads(LPCSTR szText, UINT uCount, float fX, float fY, 
                          float fWidth, float fHeight, D3DCOLOR c,
                          float fLeftMargin)
{
    PTCOORD2 ptcChar;
    UINT uLen = uCount;
//    D3DCOLOR cShadow;
    UINT i, j;

    if (uCount > MAX_TEXTOUT_LENGTH) {
        uLen = MAX_TEXTOUT_LENGTH;
    }

    for (i = 0, j = 0; i < uLen; i++) {

        if (szText[i] == '\n') {
            fX = fLeftMargin;
            fY += fHeight;
            continue;
        }

        ptcChar = CHAR_TO_TCOORD(szText[i]);

        g_prTextOut[j].vPosition.x     = fX;
        g_prTextOut[j].vPosition.y     = fY;
        g_prTextOut[j].cDiffuse        = c;
        g_prTextOut[j].u0              = ptcChar->u;
        g_prTextOut[j].v0              = ptcChar->v;

        g_prTextOut[j+1].vPosition.x   = fX;
        g_prTextOut[j+1].vPosition.y   = fY + fHeight;
        g_prTextOut[j+1].cDiffuse      = c;
        g_prTextOut[j+1].u0            = ptcChar->u;
        g_prTextOut[j+1].v0            = ptcChar->v + FONT_TCOORD_HEIGHT;

        g_prTextOut[j+2].vPosition.x   = fX + fWidth;
        g_prTextOut[j+2].vPosition.y   = fY;
        g_prTextOut[j+2].cDiffuse      = c;
        g_prTextOut[j+2].u0            = ptcChar->u + FONT_TCOORD_WIDTH;
        g_prTextOut[j+2].v0            = ptcChar->v;

        g_prTextOut[j+3].vPosition.x   = fX + fWidth;
        g_prTextOut[j+3].vPosition.y   = fY + fHeight;
        g_prTextOut[j+3].cDiffuse      = c;
        g_prTextOut[j+3].u0            = ptcChar->u + FONT_TCOORD_WIDTH;
        g_prTextOut[j+3].v0            = ptcChar->v + FONT_TCOORD_HEIGHT;

        fX += fWidth;

        j += 4;
    }

/*
    if (!g_bAttached) {

        cShadow = RGBA_MAKE(0, 0, 0, (BYTE)((float)RGBA_GETALPHA(c) / 255.0f * SHADOW_INTENSITY));

        for (i = 0; i < j; i++) {
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].vPosition.x = g_prTextOut[i].vPosition.x + SHADOW_OFFSET_X;
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].vPosition.y = g_prTextOut[i].vPosition.y - SHADOW_OFFSET_Y;
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].cDiffuse = cShadow;
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].u0 = g_prTextOut[i].u0;
            g_prTextOut[MAX_TEXTOUT_LENGTH+i].v0 = g_prTextOut[i].v0;
        }

        if (j) {
            g_pDevice->DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 
                            j, j / 2, g_pwTextOut, D3DFMT_INDEX16, 
                            g_prTextOut + MAX_TEXTOUT_LENGTH, sizeof(TLVERTEX));
        }
    }
*/

    if (j) {
        g_pDevice->DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 
                        j, j / 2, g_pwTextOut, 
                        D3DFMT_INDEX16, g_prTextOut, sizeof(TLVERTEX));
    }

    if (uCount > MAX_TEXTOUT_LENGTH) {
        DrawTextQuads(szText + MAX_TEXTOUT_LENGTH, uCount - MAX_TEXTOUT_LENGTH, fX, fY, fWidth, 
                        fHeight, c, fLeftMargin);
    }
}

//******************************************************************************
//
// Function:
//
//     UpdateVisibility
//
// Description:
//
//     Update the visibility information for the console so only the visible
//     text will be drawn.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL UpdateVisibility() {

    LPBYTE      pData;
    D3DVECTOR*  pvPos;
    float       fTop, fBottom;
    UINT        uTextVertices;
    UINT        i;
    HRESULT     hr;

    // Lock the position buffer
    hr = g_pd3drPosition->Lock(0, g_uVBPositionSize, &pData, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Lock"));
        return FALSE;
    }
    pvPos = (D3DVECTOR*)pData;

    fTop = -g_fTargetHeight - g_fCurrentRow * g_fCharHeight - g_fCharHeight;
    fBottom = -g_fCurrentRow * g_fCharHeight + g_fCharHeight;

    // Identify the visible text vertices
    uTextVertices = g_uTextSize * 4;
    for (i = 0; i < uTextVertices; i += 4) {
        if (pvPos[i].y > fTop && pvPos[i].y < fBottom) {
            g_uVStart1 = i;
            break;
        }
    }
    for (g_uVCount1 = 0; i < uTextVertices && (pvPos[i].y > fTop && pvPos[i].y < fBottom); i += 4, g_uVCount1 += 4);
    for (i += 4; i < uTextVertices; i += 4) {
        if (pvPos[i].y > fTop && pvPos[i].y < fBottom) {
            g_uVStart2 = i;
            break;
        }
    }
    for (g_uVCount2 = 0; i < uTextVertices && (pvPos[i].y > fTop && pvPos[i].y < fBottom); i += 4, g_uVCount2 += 4);

    hr = g_pd3drPosition->Unlock();
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DVertexBuffer8::Unlock"));
        return FALSE;
    }

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\test\directx\d3d\frame\d3dbase\consolbk.bmp.cpp ===
/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    consolbk.bmp.cpp

Description

    Data file for the resource consolbk.bmp.

*******************************************************************************/

#include "d3dlocus.h"

static BYTE g_consolbk[] = {

   0x42, 0x4D, 0x38, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 
   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x0E, 0x00, 0x00, 0xC3, 0x0E, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x40, 0x3D, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x41, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x41, 0x3F, 0x41, 0x3F, 0x3E, 0x3F, 0x3C, 0x3B, 
   0x3C, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2B, 0x2C, 0x2B, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x22, 0x23, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x27, 
   0x26, 0x27, 0x26, 0x25, 0x26, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 
   0x21, 0x22, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x21, 0x21, 0x21, 0x22, 
   0x23, 0x22, 0x25, 0x24, 0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 
   0x27, 0x26, 0x27, 0x23, 0x24, 0x23, 0x23, 0x22, 0x23, 0x20, 0x20, 0x20, 0x1E, 0x1D, 0x1E, 0x1B, 
   0x1A, 0x1B, 0x1A, 0x19, 0x1A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x15, 0x16, 0x15, 0x14, 0x15, 
   0x14, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x12, 0x14, 0x12, 
   0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x15, 0x15, 0x15, 0x19, 
   0x18, 0x19, 0x1B, 0x1B, 0x1B, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 0x21, 0x20, 
   0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x29, 0x28, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2F, 0x2E, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 
   0x3E, 0x3D, 0x3E, 0x41, 0x3F, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 
   0x44, 0x42, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4C, 0x4A, 0x4C, 0x4D, 0x4C, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4D, 0x4E, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 
   0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x43, 
   0x44, 0x42, 0x42, 0x42, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 
   0x3C, 0x3B, 0x3C, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 
   0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 
   0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x3E, 
   0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x41, 0x41, 0x41, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x23, 0x25, 0x23, 0x23, 0x23, 0x23, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x24, 0x23, 
   0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 
   0x22, 0x23, 0x22, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x24, 
   0x23, 0x24, 0x25, 0x24, 0x25, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 
   0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x22, 0x22, 0x22, 0x20, 0x1F, 0x20, 0x1C, 0x1E, 0x1C, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x19, 0x1A, 0x18, 0x19, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x15, 0x16, 
   0x15, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 
   0x13, 0x14, 0x13, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x15, 0x14, 0x15, 0x17, 0x17, 0x17, 0x19, 
   0x19, 0x19, 0x1D, 0x1C, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x22, 
   0x21, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x29, 0x2B, 0x29, 
   0x2B, 0x2D, 0x2B, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3D, 0x3B, 0x3D, 
   0x3F, 0x3D, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x4A, 
   0x49, 0x4C, 0x4B, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4E, 0x4C, 0x4E, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 
   0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 
   0x46, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x42, 
   0x43, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 
   0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x37, 0x35, 0x37, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3E, 0x3C, 0x3E, 
   0x40, 0x3F, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x42, 0x41, 0x42, 0x41, 
   0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x40, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 
   0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3A, 
   0x3B, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x24, 0x23, 0x24, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x28, 0x26, 0x28, 0x27, 0x26, 0x27, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x25, 0x24, 
   0x23, 0x24, 0x23, 0x22, 0x23, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 
   0x23, 0x22, 0x23, 0x25, 0x23, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 
   0x26, 0x26, 0x26, 0x23, 0x24, 0x23, 0x23, 0x22, 0x23, 0x20, 0x1F, 0x20, 0x1E, 0x1D, 0x1E, 0x1C, 
   0x1B, 0x1C, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x17, 0x19, 0x17, 0x18, 0x18, 0x18, 0x16, 0x17, 
   0x16, 0x14, 0x16, 0x14, 0x16, 0x15, 0x16, 0x16, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x16, 0x17, 
   0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x1A, 
   0x1A, 0x1A, 0x1D, 0x1D, 0x1D, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2C, 0x2B, 
   0x2E, 0x2E, 0x2E, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x35, 0x34, 0x36, 0x36, 0x36, 0x39, 
   0x37, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x41, 0x3F, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x44, 
   0x45, 0x44, 0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4B, 0x4D, 0x4B, 0x4A, 0x4C, 0x4A, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 
   0x49, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 
   0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3C, 0x3D, 0x3C, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x33, 0x31, 0x35, 0x33, 0x35, 
   0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x41, 
   0x42, 0x41, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3E, 0x3B, 0x3E, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3B, 0x3E, 0x3A, 0x3A, 
   0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2A, 0x2B, 0x2A, 0x28, 0x28, 0x28, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x23, 
   0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 
   0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 
   0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x27, 0x25, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 
   0x23, 0x24, 0x23, 0x25, 0x23, 0x25, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x23, 
   0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x24, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x22, 0x21, 0x22, 0x20, 0x1F, 0x20, 0x1C, 0x1E, 0x1C, 0x1A, 
   0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x17, 0x19, 0x17, 0x16, 0x17, 
   0x16, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 
   0x16, 0x18, 0x16, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x19, 0x18, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 
   0x1C, 0x1B, 0x1E, 0x1D, 0x1E, 0x20, 0x1F, 0x20, 0x22, 0x21, 0x22, 0x22, 0x23, 0x22, 0x24, 0x23, 
   0x24, 0x25, 0x24, 0x25, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x2A, 0x2A, 0x2A, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x30, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x39, 
   0x39, 0x39, 0x37, 0x39, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3C, 
   0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x49, 
   0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4E, 0x4C, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 
   0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4A, 0x49, 
   0x4A, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 
   0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x45, 0x47, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 0x41, 
   0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3E, 0x3F, 0x3C, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3E, 0x3E, 0x3E, 
   0x40, 0x40, 0x40, 0x44, 0x42, 0x44, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x41, 
   0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x40, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 
   0x3E, 0x3D, 0x3F, 0x3D, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3E, 0x3C, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 
   0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x30, 0x32, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 0x23, 0x24, 0x23, 0x25, 0x24, 
   0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x23, 0x22, 0x23, 
   0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 
   0x28, 0x29, 0x27, 0x29, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x26, 0x26, 0x26, 0x23, 0x24, 0x23, 0x22, 0x22, 0x22, 0x20, 0x1F, 0x20, 0x1E, 0x1D, 0x1E, 0x1C, 
   0x1B, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x18, 
   0x18, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 
   0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1F, 
   0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x28, 0x29, 0x28, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x39, 0x3A, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3B, 0x39, 0x3B, 0x3C, 0x3B, 0x40, 0x3E, 0x40, 
   0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x49, 0x4B, 0x49, 0x4B, 0x4B, 0x4B, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x48, 
   0x48, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4A, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x45, 0x44, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x37, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 
   0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x37, 0x35, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 
   0x41, 0x42, 0x41, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x40, 0x41, 0x40, 0x3D, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 
   0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 
   0x38, 0x38, 0x38, 0x3A, 0x38, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 0x3E, 0x3B, 
   0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 
   0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2B, 0x2B, 0x2B, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x23, 
   0x25, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x25, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x23, 0x25, 0x23, 0x25, 0x23, 0x25, 0x23, 
   0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 
   0x26, 0x27, 0x26, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x1F, 0x20, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x19, 0x1A, 0x18, 0x19, 
   0x18, 0x18, 0x18, 0x18, 0x17, 0x18, 0x17, 0x1A, 0x19, 0x1A, 0x19, 0x1B, 0x19, 0x1A, 0x1A, 0x1A, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1C, 0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x20, 
   0x20, 0x20, 0x22, 0x20, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x2B, 0x2A, 0x2B, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x32, 0x31, 0x32, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 
   0x3A, 0x39, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 0x37, 0x3B, 0x3B, 0x3B, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x46, 0x45, 0x46, 0x44, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 
   0x48, 0x4A, 0x4B, 0x4A, 0x4C, 0x4D, 0x4C, 0x4C, 0x4E, 0x4C, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x43, 
   0x43, 0x43, 0x41, 0x42, 0x41, 0x40, 0x41, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x28, 0x28, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2D, 
   0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 
   0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x44, 
   0x43, 0x44, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x38, 0x3A, 0x38, 
   0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x38, 0x38, 0x37, 0x38, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 
   0x3D, 0x3E, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3E, 0x3C, 0x3E, 0x3A, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x33, 0x35, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2F, 
   0x2C, 0x2B, 0x2C, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x25, 
   0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x2B, 0x29, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x28, 0x27, 0x28, 0x26, 0x25, 0x26, 0x24, 0x23, 0x24, 0x20, 0x21, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 
   0x19, 0x18, 0x19, 0x18, 0x19, 0x19, 0x19, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1B, 0x1C, 0x1C, 0x1D, 0x1C, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 
   0x20, 0x20, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x28, 0x27, 0x28, 0x2B, 0x29, 0x2B, 0x2E, 0x2B, 0x2E, 0x2D, 0x2D, 0x2D, 0x31, 0x30, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x35, 0x32, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3D, 0x3C, 0x40, 0x3E, 0x40, 
   0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x49, 0x49, 
   0x49, 0x4B, 0x4B, 0x4B, 0x4C, 0x4E, 0x4C, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4C, 0x4D, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x48, 0x46, 0x46, 0x47, 0x46, 
   0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 
   0x43, 0x43, 0x40, 0x42, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 
   0x3D, 0x3A, 0x3C, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 
   0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 
   0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x3A, 
   0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x40, 0x40, 0x40, 0x41, 0x43, 0x41, 
   0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 
   0x43, 0x44, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 0x3E, 0x3B, 0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 
   0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 
   0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 
   0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x35, 0x33, 0x35, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 
   0x26, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x26, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x28, 0x2A, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x22, 0x22, 0x22, 0x1F, 0x20, 0x1F, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x19, 0x19, 0x19, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x22, 0x20, 0x22, 0x22, 0x22, 0x22, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 
   0x27, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2D, 0x2B, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x32, 0x32, 0x32, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3E, 0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x4A, 0x49, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4D, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 
   0x47, 0x46, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4B, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x4B, 0x49, 0x49, 0x49, 0x46, 0x49, 0x46, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 
   0x42, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x38, 0x3A, 0x38, 0x38, 0x3A, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 
   0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 
   0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x44, 0x43, 0x44, 0x41, 0x40, 0x41, 0x40, 0x3E, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3F, 0x3E, 0x3D, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x39, 0x3A, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3A, 
   0x3C, 0x3A, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 
   0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x27, 0x29, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x26, 0x25, 
   0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x29, 0x27, 0x29, 0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 
   0x2B, 0x29, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 
   0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 
   0x25, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x23, 0x23, 0x23, 0x21, 0x20, 0x21, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1C, 0x1E, 0x1C, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 
   0x1A, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 
   0x20, 0x20, 0x20, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x29, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 
   0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x46, 0x46, 0x46, 0x46, 
   0x47, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x49, 0x4A, 
   0x49, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x51, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4A, 0x4B, 0x4A, 0x48, 0x48, 0x48, 0x48, 
   0x47, 0x48, 0x47, 0x47, 0x47, 0x4A, 0x49, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x49, 0x4A, 0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x40, 
   0x41, 0x40, 0x3F, 0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x3B, 0x3A, 0x3B, 0x3B, 0x39, 0x3B, 0x39, 0x39, 
   0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3F, 0x3E, 0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 
   0x44, 0x44, 0x43, 0x43, 0x43, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3C, 0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3A, 0x39, 0x3A, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x38, 0x37, 0x39, 0x3A, 0x39, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3A, 0x3C, 0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x2E, 0x2E, 0x2E, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x26, 
   0x26, 0x26, 0x27, 0x25, 0x27, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 
   0x25, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x23, 0x23, 0x23, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1F, 0x1D, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 
   0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 
   0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 
   0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4A, 0x4A, 
   0x4A, 0x4C, 0x4D, 0x4C, 0x4F, 0x4E, 0x4F, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4B, 0x4C, 0x4B, 0x48, 0x49, 0x48, 0x48, 
   0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x3F, 0x3F, 0x40, 
   0x3F, 0x40, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 
   0x34, 0x33, 0x34, 0x32, 0x31, 0x32, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x2F, 
   0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x43, 
   0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x40, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x39, 0x38, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3A, 0x3C, 0x3A, 
   0x39, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x38, 0x3A, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x29, 0x29, 0x29, 0x27, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x29, 0x27, 0x29, 
   0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 
   0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 
   0x29, 0x2B, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 
   0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x22, 0x23, 0x22, 0x21, 0x21, 0x21, 0x1F, 
   0x21, 0x1F, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x20, 0x22, 
   0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 
   0x3F, 0x42, 0x3F, 0x43, 0x44, 0x43, 0x42, 0x43, 0x42, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x52, 0x51, 0x52, 0x51, 0x50, 0x51, 
   0x51, 0x50, 0x51, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x48, 
   0x4A, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x4C, 0x4B, 0x4C, 0x4A, 0x49, 0x4A, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 
   0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3D, 
   0x3C, 0x3D, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x37, 
   0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 
   0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 
   0x3B, 0x3E, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x44, 0x41, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3A, 0x3B, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2C, 0x2C, 0x2C, 0x2A, 0x29, 0x2A, 0x29, 
   0x29, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x29, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 
   0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x22, 
   0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 
   0x27, 0x28, 0x2A, 0x29, 0x2A, 0x2C, 0x2A, 0x2C, 0x2B, 0x2D, 0x2B, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x37, 0x35, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 
   0x39, 0x39, 0x3B, 0x39, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 
   0x40, 0x41, 0x40, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x46, 0x45, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x48, 0x4A, 0x48, 0x4A, 0x4B, 
   0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x4E, 0x50, 0x4E, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4A, 0x4B, 0x4A, 0x48, 0x49, 0x48, 0x47, 0x47, 0x47, 0x45, 0x44, 0x45, 0x44, 0x43, 0x44, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3A, 
   0x3A, 0x3A, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x32, 0x34, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x36, 0x37, 0x36, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x39, 0x3D, 0x3D, 
   0x3D, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0x42, 0x3F, 0x3F, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x37, 0x39, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 
   0x28, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x2B, 0x28, 0x2B, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x22, 
   0x23, 0x22, 0x23, 0x21, 0x23, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x1F, 
   0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x2B, 0x29, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 
   0x40, 0x40, 0x40, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 
   0x4F, 0x50, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 
   0x4A, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x47, 0x46, 0x47, 0x45, 0x44, 0x45, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x3D, 0x39, 0x3A, 0x39, 0x37, 
   0x39, 0x37, 0x39, 0x37, 0x39, 0x37, 0x37, 0x37, 0x35, 0x37, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 
   0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x36, 0x35, 0x36, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 
   0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x35, 
   0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 
   0x3E, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x3F, 0x3F, 
   0x3F, 0x3D, 0x3D, 0x3D, 0x3B, 0x3B, 0x3B, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x31, 0x34, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x31, 
   0x33, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 
   0x36, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x36, 0x37, 
   0x36, 0x39, 0x37, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x37, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x37, 0x35, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 
   0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 
   0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 
   0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x24, 0x22, 0x24, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 
   0x28, 0x29, 0x29, 0x2A, 0x29, 0x2C, 0x2C, 0x2C, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x36, 0x35, 0x36, 0x38, 0x37, 0x38, 0x39, 0x39, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 
   0x40, 0x3F, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 
   0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4C, 0x4B, 
   0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 0x4F, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 
   0x4F, 0x50, 0x4F, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 
   0x4A, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x45, 0x45, 0x45, 0x42, 0x44, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x37, 0x35, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 
   0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x35, 0x36, 0x35, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 
   0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 
   0x42, 0x43, 0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x41, 0x41, 0x41, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3C, 0x3D, 0x3B, 0x3D, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x35, 0x34, 0x35, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x32, 0x33, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x26, 0x26, 
   0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x23, 0x24, 0x23, 0x23, 0x23, 0x21, 0x20, 0x21, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x1F, 0x20, 
   0x1F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 
   0x24, 0x26, 0x24, 0x26, 0x26, 0x26, 0x29, 0x27, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 
   0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2D, 0x2B, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 
   0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x39, 
   0x38, 0x3B, 0x3B, 0x3B, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3F, 0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 
   0x45, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x49, 0x48, 0x4B, 0x4B, 0x4B, 0x4A, 0x4C, 
   0x4A, 0x4D, 0x4E, 0x4D, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 
   0x48, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 
   0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3B, 0x3A, 0x3B, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x35, 0x36, 
   0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x36, 0x35, 0x36, 0x37, 
   0x36, 0x37, 0x39, 0x38, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x33, 0x35, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x34, 0x35, 0x34, 
   0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 
   0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x32, 0x30, 0x32, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x44, 
   0x44, 0x44, 0x46, 0x46, 0x46, 0x48, 0x47, 0x48, 0x48, 0x49, 0x48, 0x4A, 0x4B, 0x4A, 0x4B, 0x4D, 
   0x4B, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x48, 0x49, 0x48, 0x48, 
   0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 
   0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 
   0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 
   0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x37, 0x36, 0x37, 0x34, 0x36, 0x34, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x33, 
   0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x30, 0x32, 0x2F, 0x30, 0x2F, 0x39, 0x3B, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x38, 
   0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x42, 0x42, 0x42, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x34, 0x34, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x38, 0x38, 
   0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x3B, 0x3A, 0x3C, 0x3C, 
   0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x35, 0x37, 0x35, 
   0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x27, 
   0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x24, 
   0x24, 0x24, 0x25, 0x23, 0x25, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x27, 0x25, 0x27, 0x26, 0x27, 0x26, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 
   0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x3E, 0x3E, 0x3E, 0x40, 0x41, 0x40, 0x43, 0x42, 0x43, 0x45, 
   0x44, 0x45, 0x46, 0x45, 0x46, 0x46, 0x47, 0x46, 0x48, 0x48, 0x48, 0x4B, 0x4A, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4F, 0x4F, 0x4F, 0x4D, 0x4F, 0x4D, 0x4C, 0x4C, 0x4C, 0x49, 0x4A, 0x49, 0x48, 0x49, 0x48, 0x46, 
   0x47, 0x46, 0x44, 0x46, 0x44, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x46, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x3F, 0x40, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x31, 
   0x33, 0x31, 0x32, 0x33, 0x32, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x31, 
   0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x39, 0x3B, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x37, 0x38, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 
   0x37, 0x36, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3D, 0x3C, 0x3E, 0x3F, 
   0x3E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x42, 0x43, 0x42, 
   0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
   0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x43, 0x41, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 
   0x40, 0x3E, 0x3E, 0x3E, 0x3B, 0x3B, 0x3B, 0x38, 0x39, 0x38, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 
   0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 
   0x3E, 0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3B, 0x3A, 0x3B, 0x37, 0x37, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 
   0x32, 0x33, 0x31, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 
   0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 0x23, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x23, 0x22, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 
   0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 
   0x30, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3F, 0x3E, 0x40, 0x40, 0x40, 0x41, 0x42, 0x41, 0x44, 
   0x44, 0x44, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x49, 0x4A, 0x49, 0x4C, 0x4C, 
   0x4C, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x50, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4C, 0x4C, 0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x46, 
   0x46, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x46, 0x45, 
   0x46, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x40, 0x40, 0x40, 
   0x3D, 0x3D, 0x3D, 0x3B, 0x3A, 0x3B, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3E, 
   0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 
   0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 
   0x3E, 0x3C, 0x3C, 0x3C, 0x3A, 0x3A, 0x3A, 0x37, 0x38, 0x37, 0x34, 0x35, 0x34, 0x31, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x32, 0x2F, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x35, 0x37, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 
   0x39, 0x37, 0x3A, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3F, 0x3D, 0x3F, 0x3F, 0x3F, 
   0x3F, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3F, 0x3C, 0x3C, 0x3C, 0x38, 0x39, 0x38, 
   0x36, 0x36, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 
   0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 
   0x30, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x40, 0x40, 0x40, 0x41, 0x41, 0x41, 0x43, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x47, 0x49, 0x47, 0x4B, 0x4A, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4C, 0x4C, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x47, 
   0x47, 0x47, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 
   0x43, 0x44, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x3E, 0x3F, 0x3E, 
   0x3C, 0x3D, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x38, 0x37, 0x38, 0x35, 0x34, 0x35, 0x33, 
   0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x32, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x35, 0x33, 0x37, 0x35, 0x37, 0x36, 0x35, 0x36, 
   0x37, 0x35, 0x37, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x37, 0x37, 0x37, 0x38, 0x36, 0x38, 0x37, 0x37, 0x37, 0x36, 
   0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x35, 0x33, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 
   0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3C, 0x3E, 0x3D, 0x3B, 
   0x3D, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x35, 0x33, 0x35, 0x33, 0x34, 0x33, 0x35, 
   0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x34, 0x36, 0x34, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x39, 
   0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x42, 0x41, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x40, 0x41, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 0x3B, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x35, 
   0x33, 0x35, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x35, 0x33, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 
   0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x26, 0x26, 0x26, 
   0x27, 0x26, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x31, 0x30, 
   0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x2F, 0x32, 0x31, 0x32, 0x34, 0x34, 0x34, 0x36, 0x36, 0x36, 0x38, 0x37, 0x38, 0x37, 0x37, 
   0x37, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x41, 0x41, 0x41, 0x42, 
   0x42, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x4A, 0x49, 
   0x4A, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4C, 0x4D, 
   0x4B, 0x4C, 0x4B, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x48, 0x49, 0x47, 0x48, 0x47, 0x45, 
   0x47, 0x45, 0x45, 0x45, 0x45, 0x45, 0x43, 0x45, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x41, 0x43, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3A, 0x3A, 0x3A, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2E, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3C, 0x3A, 0x3C, 0x3A, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 
   0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3C, 
   0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 
   0x3A, 0x38, 0x3A, 0x38, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 
   0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 
   0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x36, 0x34, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x30, 0x32, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x27, 0x25, 0x27, 0x25, 0x24, 0x25, 0x23, 
   0x25, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x24, 0x25, 0x24, 
   0x27, 0x26, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x32, 0x31, 0x32, 0x35, 0x33, 0x35, 0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x41, 
   0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x47, 0x46, 0x47, 0x47, 0x48, 
   0x47, 0x49, 0x49, 0x49, 0x4C, 0x4B, 0x4C, 0x4C, 0x4B, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x47, 
   0x47, 0x47, 0x46, 0x44, 0x46, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x41, 0x41, 
   0x41, 0x41, 0x40, 0x41, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3D, 0x3E, 
   0x3B, 0x3B, 0x3B, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 0x32, 0x32, 0x32, 0x33, 
   0x31, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x35, 0x35, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 
   0x36, 0x35, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 
   0x3D, 0x3C, 0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x37, 0x38, 0x37, 0x38, 0x37, 
   0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x32, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 
   0x38, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x39, 0x3B, 0x39, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3E, 0x3F, 0x40, 0x3F, 0x40, 0x42, 0x41, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x44, 0x42, 0x43, 0x42, 0x41, 0x41, 0x41, 0x3F, 0x3F, 0x3F, 
   0x3E, 0x3C, 0x3E, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 
   0x37, 0x38, 0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x36, 0x34, 0x36, 0x36, 0x36, 0x39, 0x37, 
   0x39, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x36, 0x38, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x2E, 0x2F, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x26, 0x28, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x26, 0x24, 0x26, 
   0x27, 0x26, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x30, 
   0x2F, 0x30, 0x32, 0x31, 0x32, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x40, 0x40, 0x40, 
   0x41, 0x40, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x45, 0x43, 0x47, 0x47, 
   0x47, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4B, 0x49, 0x4A, 0x49, 
   0x49, 0x4A, 0x49, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x49, 0x47, 0x49, 0x48, 0x47, 0x48, 0x45, 
   0x47, 0x45, 0x44, 0x45, 0x44, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x3F, 
   0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3C, 0x3E, 0x3C, 0x3B, 0x3C, 
   0x3A, 0x39, 0x3A, 0x38, 0x37, 0x38, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 0x31, 0x31, 0x31, 0x2F, 
   0x31, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 
   0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x39, 0x38, 
   0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 
   0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3B, 
   0x3A, 0x3B, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 0x33, 0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 
   0x3C, 0x3B, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 
   0x40, 0x40, 0x42, 0x40, 0x42, 0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x42, 0x40, 0x42, 
   0x3F, 0x3F, 0x3F, 0x3D, 0x3D, 0x3D, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x36, 
   0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x35, 0x35, 0x35, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x23, 
   0x24, 0x23, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 
   0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x28, 0x25, 0x28, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x31, 0x32, 0x31, 0x35, 0x33, 0x35, 0x37, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3F, 0x3D, 0x3F, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x43, 0x44, 0x43, 0x45, 0x46, 
   0x45, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x49, 0x49, 0x49, 
   0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x44, 
   0x45, 0x44, 0x44, 0x44, 0x44, 0x42, 0x42, 0x42, 0x3F, 0x40, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3D, 
   0x3E, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x39, 0x3A, 
   0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 
   0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x30, 0x2E, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 
   0x36, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 
   0x3A, 0x3A, 0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x36, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x30, 0x32, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x38, 0x38, 
   0x38, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3B, 0x3C, 0x3B, 0x3D, 0x3C, 0x3D, 
   0x3D, 0x3D, 0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x41, 0x42, 0x41, 
   0x42, 0x41, 0x44, 0x43, 0x44, 0x43, 0x45, 0x43, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x46, 0x47, 
   0x46, 0x46, 0x47, 0x46, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x44, 0x42, 
   0x41, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x3A, 
   0x3B, 0x3A, 0x39, 0x3B, 0x39, 0x39, 0x39, 0x39, 0x38, 0x3A, 0x38, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 
   0x39, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 
   0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 
   0x37, 0x38, 0x37, 0x37, 0x37, 0x39, 0x37, 0x39, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 0x33, 0x34, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 
   0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2B, 
   0x2D, 0x2A, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 
   0x27, 0x25, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x33, 0x31, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 
   0x36, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3E, 
   0x3D, 0x3E, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x3F, 0x40, 0x42, 0x41, 0x42, 0x42, 0x44, 
   0x42, 0x45, 0x46, 0x45, 0x47, 0x46, 0x47, 0x48, 0x47, 0x48, 0x49, 0x47, 0x49, 0x48, 0x48, 0x48, 
   0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x42, 0x41, 0x42, 0x40, 0x40, 0x40, 0x3F, 0x3E, 0x3F, 0x3D, 0x3C, 
   0x3D, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3B, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 
   0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x38, 
   0x39, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 
   0x33, 0x34, 0x34, 0x33, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x39, 0x38, 
   0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 
   0x3F, 0x3F, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x44, 
   0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x48, 0x47, 0x46, 0x47, 0x46, 
   0x45, 0x45, 0x45, 0x43, 0x44, 0x43, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x3E, 
   0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3C, 0x3B, 0x3C, 0x3D, 0x3B, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3D, 0x3B, 0x3D, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3B, 0x3A, 0x39, 0x39, 
   0x39, 0x38, 0x38, 0x38, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x33, 0x32, 0x33, 0x30, 0x30, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x23, 
   0x25, 0x23, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 
   0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x36, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 
   0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 
   0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 
   0x41, 0x41, 0x3F, 0x41, 0x3F, 0x3E, 0x3F, 0x3E, 0x40, 0x3F, 0x40, 0x3E, 0x3C, 0x3E, 0x3B, 0x3B, 
   0x3B, 0x38, 0x3A, 0x38, 0x39, 0x39, 0x39, 0x36, 0x37, 0x36, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 
   0x34, 0x31, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2D, 0x2C, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 
   0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 
   0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x37, 
   0x39, 0x37, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x35, 0x34, 
   0x35, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 
   0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 
   0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x38, 0x37, 
   0x38, 0x3C, 0x3A, 0x3C, 0x3B, 0x3D, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x40, 0x40, 0x3F, 0x41, 0x3F, 
   0x40, 0x40, 0x40, 0x43, 0x42, 0x43, 0x42, 0x44, 0x42, 0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x48, 0x49, 0x4A, 0x49, 0x4A, 0x49, 0x49, 
   0x49, 0x49, 0x4A, 0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4B, 0x49, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 
   0x45, 0x47, 0x45, 0x46, 0x46, 0x46, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x42, 0x41, 0x42, 0x40, 
   0x3F, 0x40, 0x40, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3E, 0x3F, 
   0x3E, 0x3D, 0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3D, 0x3C, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3D, 0x3B, 0x3D, 0x3C, 0x3E, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 0x3D, 0x3D, 0x3C, 0x3D, 0x3A, 0x3B, 
   0x3A, 0x38, 0x39, 0x38, 0x36, 0x36, 0x36, 0x34, 0x35, 0x34, 0x33, 0x33, 0x33, 0x31, 0x30, 0x31, 
   0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 
   0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x38, 0x37, 
   0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x38, 0x37, 0x38, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x3D, 0x3E, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 
   0x43, 0x44, 0x43, 0x44, 0x43, 0x44, 0x42, 0x43, 0x42, 0x40, 0x42, 0x40, 0x42, 0x40, 0x42, 0x3F, 
   0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3E, 0x3C, 0x3B, 0x3C, 0x39, 0x39, 
   0x39, 0x37, 0x39, 0x37, 0x38, 0x38, 0x38, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 
   0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2E, 0x2C, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x2E, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x35, 0x33, 0x35, 
   0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x36, 
   0x36, 0x36, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2E, 0x30, 
   0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x30, 0x2E, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x36, 0x34, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x39, 
   0x39, 0x3B, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 
   0x41, 0x42, 0x41, 0x43, 0x43, 0x43, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 
   0x46, 0x46, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4B, 0x4A, 0x49, 0x48, 0x49, 
   0x47, 0x48, 0x47, 0x48, 0x47, 0x48, 0x46, 0x46, 0x46, 0x45, 0x45, 0x45, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x42, 0x43, 0x42, 0x43, 0x41, 0x41, 0x41, 0x40, 0x41, 0x40, 0x40, 0x41, 0x40, 0x40, 0x40, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x40, 0x3F, 0x40, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x3D, 0x3C, 0x3D, 0x3B, 0x3B, 
   0x3B, 0x39, 0x39, 0x39, 0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 
   0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2C, 0x2D, 0x2C, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x39, 0x37, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x40, 0x40, 0x40, 0x40, 0x42, 0x40, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x3F, 0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 
   0x3E, 0x3D, 0x3D, 0x3D, 0x3D, 0x3C, 0x3C, 0x3C, 0x3C, 0x3B, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 
   0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x33, 0x35, 0x33, 0x34, 0x32, 0x34, 0x30, 0x31, 0x30, 
   0x2E, 0x30, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2D, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2A, 0x2C, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x2F, 
   0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 
   0x2B, 0x29, 0x2A, 0x29, 0x29, 0x28, 0x29, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x29, 0x29, 0x2C, 0x2A, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x2F, 0x2E, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x31, 0x33, 0x31, 0x33, 0x31, 0x35, 
   0x33, 0x35, 0x34, 0x35, 0x34, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x39, 0x3B, 0x3C, 0x3B, 0x3F, 0x3D, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 
   0x43, 0x42, 0x43, 0x43, 0x44, 0x43, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x48, 
   0x48, 0x48, 0x49, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 
   0x48, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 0x46, 0x45, 0x46, 0x45, 0x46, 0x43, 
   0x44, 0x43, 0x43, 0x44, 0x43, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 
   0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x40, 
   0x40, 0x40, 0x41, 0x40, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3C, 
   0x3C, 0x3A, 0x3B, 0x3A, 0x39, 0x38, 0x39, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x31, 0x32, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x29, 0x27, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x27, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x21, 0x23, 0x21, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x28, 
   0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x29, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 0x35, 0x35, 0x35, 
   0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 
   0x39, 0x37, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 
   0x3C, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x40, 0x3F, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 
   0x41, 0x40, 0x41, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3E, 0x3E, 0x3E, 0x3C, 0x3D, 0x3C, 0x3B, 
   0x3C, 0x3B, 0x3B, 0x3A, 0x3B, 0x38, 0x3A, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 
   0x37, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 
   0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2A, 0x29, 
   0x2A, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x25, 0x25, 0x25, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 
   0x23, 0x23, 0x23, 0x24, 0x22, 0x24, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x2F, 0x30, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 
   0x31, 0x33, 0x31, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x35, 0x34, 0x36, 0x35, 0x36, 0x37, 0x36, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 
   0x3B, 0x3D, 0x3B, 0x3D, 0x3F, 0x3E, 0x3F, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x42, 0x44, 0x42, 0x45, 0x44, 0x45, 0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4C, 0x4D, 0x4B, 0x4C, 0x4B, 
   0x4A, 0x4C, 0x4A, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x45, 0x47, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x44, 
   0x44, 0x45, 0x44, 0x45, 0x45, 0x43, 0x45, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 
   0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x42, 
   0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x41, 0x43, 0x40, 0x40, 0x40, 0x3D, 0x3E, 
   0x3D, 0x3B, 0x3C, 0x3B, 0x39, 0x3A, 0x39, 0x37, 0x38, 0x37, 0x36, 0x35, 0x36, 0x34, 0x33, 0x34, 
   0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x26, 0x27, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 
   0x23, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 
   0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x36, 
   0x34, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 
   0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3C, 0x3C, 0x3D, 0x3F, 0x3D, 0x40, 0x3F, 0x40, 0x3F, 0x3E, 0x3F, 
   0x3F, 0x3F, 0x3F, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 
   0x3A, 0x3C, 0x39, 0x3A, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 
   0x36, 0x34, 0x35, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 
   0x2C, 0x2E, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x29, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x29, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2F, 0x2C, 0x2E, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 
   0x28, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x27, 
   0x25, 0x27, 0x27, 0x27, 0x27, 0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x31, 0x30, 0x31, 
   0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 
   0x36, 0x34, 0x37, 0x35, 0x37, 0x38, 0x37, 0x38, 0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3D, 0x3C, 
   0x3D, 0x3E, 0x3D, 0x3E, 0x3F, 0x3F, 0x3F, 0x42, 0x42, 0x42, 0x44, 0x43, 0x44, 0x42, 0x45, 0x42, 
   0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x47, 0x45, 0x48, 0x48, 0x48, 0x4A, 0x49, 0x4A, 0x4A, 
   0x4B, 0x4A, 0x4C, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 
   0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x47, 0x48, 0x47, 0x48, 
   0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45, 0x44, 0x45, 0x46, 
   0x45, 0x46, 0x47, 0x46, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x47, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x43, 
   0x43, 0x43, 0x44, 0x44, 0x44, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x3F, 
   0x3F, 0x3C, 0x3C, 0x3C, 0x3A, 0x3B, 0x3A, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x34, 0x33, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x2B, 0x28, 0x2B, 0x29, 0x29, 0x29, 
   0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x21, 
   0x22, 0x23, 0x21, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 
   0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 
   0x34, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 
   0x38, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3E, 0x3E, 0x3D, 0x3C, 0x3D, 
   0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3D, 0x3C, 0x3B, 0x3C, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x3A, 0x38, 0x37, 0x38, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x33, 0x34, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 
   0x2C, 0x2D, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x26, 0x27, 0x26, 0x27, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x27, 0x29, 0x27, 0x26, 
   0x27, 0x26, 0x25, 0x26, 0x24, 0x23, 0x24, 0x22, 0x21, 0x22, 0x21, 0x1F, 0x21, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x24, 
   0x24, 0x24, 0x26, 0x26, 0x26, 0x28, 0x28, 0x28, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x2F, 0x30, 
   0x2F, 0x2F, 0x30, 0x2F, 0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x30, 0x32, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x34, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x36, 
   0x36, 0x36, 0x35, 0x36, 0x35, 0x38, 0x38, 0x38, 0x3A, 0x39, 0x3A, 0x3C, 0x3A, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3F, 0x3E, 0x3F, 0x40, 0x40, 0x40, 0x43, 0x41, 0x43, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 
   0x45, 0x45, 0x45, 0x45, 0x46, 0x45, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 0x4C, 0x4A, 0x4C, 0x4B, 
   0x4C, 0x4B, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4F, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 
   0x49, 0x48, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x46, 0x46, 0x46, 0x45, 0x47, 0x45, 0x47, 0x47, 
   0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x49, 0x49, 0x4A, 0x49, 0x4A, 
   0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x44, 
   0x45, 0x44, 0x45, 0x44, 0x45, 0x44, 0x44, 0x44, 0x45, 0x43, 0x45, 0x42, 0x42, 0x42, 0x40, 0x40, 
   0x40, 0x3E, 0x3D, 0x3E, 0x3B, 0x3B, 0x3B, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 0x33, 0x34, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x26, 0x28, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x27, 0x26, 0x27, 0x27, 
   0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x27, 
   0x25, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3B, 0x3C, 
   0x3B, 0x3B, 0x3B, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x31, 0x32, 0x31, 0x32, 0x30, 0x32, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x28, 0x27, 0x28, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x25, 
   0x27, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 
   0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x23, 
   0x23, 0x23, 0x25, 0x24, 0x25, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2B, 0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 
   0x2A, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 
   0x32, 0x31, 0x33, 0x31, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x37, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 
   0x3C, 0x40, 0x3E, 0x40, 0x42, 0x41, 0x42, 0x44, 0x42, 0x44, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 0x4C, 0x4A, 0x4C, 0x4C, 0x4D, 0x4C, 0x4D, 
   0x4F, 0x4D, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 
   0x4F, 0x4E, 0x4F, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 
   0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4D, 0x4D, 0x4B, 0x4B, 0x4B, 0x4B, 
   0x4A, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x48, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x49, 0x49, 
   0x49, 0x4A, 0x4A, 0x4A, 0x49, 0x4A, 0x49, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4A, 0x4B, 0x4A, 
   0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x47, 0x47, 0x47, 0x45, 
   0x46, 0x45, 0x45, 0x46, 0x45, 0x45, 0x45, 0x45, 0x45, 0x44, 0x45, 0x43, 0x42, 0x43, 0x40, 0x41, 
   0x40, 0x3E, 0x3E, 0x3E, 0x3D, 0x3B, 0x3D, 0x38, 0x39, 0x38, 0x37, 0x36, 0x37, 0x34, 0x33, 0x34, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x25, 0x26, 0x25, 0x26, 0x26, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x31, 0x30, 0x31, 0x30, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x34, 0x35, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 
   0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x2A, 0x28, 0x2A, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x24, 
   0x24, 0x24, 0x22, 0x24, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 
   0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x22, 
   0x21, 0x22, 0x22, 0x22, 0x22, 0x26, 0x24, 0x26, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2D, 0x2B, 0x2D, 0x2C, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2B, 0x29, 0x2B, 0x28, 0x28, 
   0x28, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2C, 0x2C, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2F, 
   0x30, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3E, 0x3D, 
   0x3E, 0x41, 0x40, 0x41, 0x43, 0x42, 0x43, 0x45, 0x45, 0x45, 0x47, 0x46, 0x47, 0x47, 0x47, 0x47, 
   0x48, 0x48, 0x48, 0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4D, 0x4D, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 
   0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x52, 0x52, 
   0x52, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x51, 0x52, 0x51, 0x4E, 0x50, 0x4E, 0x4D, 0x4D, 0x4D, 0x4C, 
   0x4D, 0x4C, 0x4A, 0x4C, 0x4A, 0x4B, 0x4B, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4B, 0x4B, 
   0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4C, 0x4A, 0x4C, 0x4A, 0x4A, 0x4B, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x49, 0x48, 0x47, 
   0x48, 0x47, 0x47, 0x47, 0x47, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x41, 0x42, 
   0x41, 0x3F, 0x3E, 0x3F, 0x3B, 0x3B, 0x3B, 0x38, 0x39, 0x38, 0x36, 0x36, 0x36, 0x34, 0x32, 0x34, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 0x25, 
   0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x21, 0x23, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 
   0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 
   0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x36, 
   0x35, 0x36, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x2B, 
   0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 
   0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x24, 0x25, 0x24, 0x23, 0x23, 
   0x23, 0x22, 0x21, 0x22, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1C, 0x1C, 0x1C, 0x1A, 0x1B, 0x1A, 
   0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1D, 0x1E, 0x1D, 0x20, 
   0x20, 0x20, 0x20, 0x22, 0x20, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x26, 0x26, 0x26, 0x29, 0x28, 
   0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2C, 0x2A, 0x2C, 0x2C, 0x2A, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x2B, 0x2A, 0x2B, 
   0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 
   0x32, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x35, 0x33, 0x35, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x37, 0x36, 0x37, 0x36, 0x37, 0x36, 0x37, 
   0x37, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x39, 0x37, 0x3A, 0x3B, 0x3A, 0x3E, 0x3E, 
   0x3E, 0x41, 0x40, 0x41, 0x43, 0x43, 0x43, 0x45, 0x46, 0x45, 0x48, 0x47, 0x48, 0x47, 0x48, 0x47, 
   0x48, 0x4A, 0x48, 0x4B, 0x4C, 0x4B, 0x4D, 0x4C, 0x4D, 0x4E, 0x4E, 0x4E, 0x4F, 0x51, 0x4F, 0x51, 
   0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x52, 0x52, 0x52, 0x52, 0x53, 
   0x52, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x50, 0x51, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4B, 0x4D, 0x4B, 0x4D, 0x4D, 
   0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4D, 
   0x4C, 0x4D, 0x4C, 0x4B, 0x4D, 0x4B, 0x4A, 0x4C, 0x4A, 0x4C, 0x4A, 0x4C, 0x4A, 0x49, 0x4A, 0x48, 
   0x48, 0x48, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x47, 0x48, 0x47, 0x46, 0x46, 0x46, 0x42, 0x43, 
   0x42, 0x40, 0x3F, 0x40, 0x3D, 0x3B, 0x3D, 0x38, 0x39, 0x38, 0x36, 0x35, 0x36, 0x31, 0x32, 0x31, 
   0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2B, 
   0x2D, 0x2B, 0x2C, 0x2C, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x27, 0x25, 0x27, 0x26, 0x25, 0x26, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x24, 0x23, 0x24, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 
   0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 
   0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 
   0x34, 0x33, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
   0x35, 0x37, 0x35, 0x37, 0x35, 0x36, 0x35, 0x38, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 
   0x35, 0x37, 0x34, 0x34, 0x34, 0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 
   0x27, 0x27, 0x27, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x24, 
   0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x27, 0x26, 0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x28, 
   0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x25, 0x27, 0x24, 0x23, 0x24, 0x22, 0x21, 
   0x22, 0x21, 0x20, 0x21, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x18, 0x1A, 0x18, 
   0x16, 0x19, 0x16, 0x18, 0x17, 0x18, 0x19, 0x1A, 0x19, 0x1B, 0x1C, 0x1B, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1E, 0x1E, 0x21, 0x21, 0x21, 0x22, 0x23, 0x22, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 
   0x27, 0x2A, 0x28, 0x2A, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x27, 0x28, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 
   0x2E, 0x2D, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 
   0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 
   0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x34, 
   0x33, 0x35, 0x34, 0x35, 0x33, 0x34, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x35, 0x34, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x37, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 
   0x3F, 0x41, 0x42, 0x41, 0x44, 0x44, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 
   0x48, 0x4A, 0x48, 0x4C, 0x4C, 0x4C, 0x4E, 0x4D, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x52, 0x50, 0x51, 
   0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 
   0x53, 0x55, 0x54, 0x55, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 
   0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x53, 0x54, 0x53, 0x51, 0x52, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 
   0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 
   0x4E, 0x4F, 0x4F, 0x4F, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x46, 0x45, 0x46, 0x44, 0x43, 
   0x44, 0x41, 0x3F, 0x41, 0x3B, 0x3B, 0x3B, 0x38, 0x38, 0x38, 0x35, 0x35, 0x35, 0x33, 0x32, 0x33, 
   0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x26, 0x27, 0x26, 0x24, 
   0x25, 0x24, 0x23, 0x23, 0x23, 0x22, 0x21, 0x22, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x25, 
   0x24, 0x25, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 
   0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 
   0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 
   0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x26, 0x26, 0x26, 0x22, 0x24, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 
   0x23, 0x22, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x22, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 
   0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x27, 
   0x28, 0x27, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x18, 0x19, 0x18, 
   0x17, 0x18, 0x17, 0x17, 0x16, 0x17, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1D, 0x1C, 0x1D, 0x20, 
   0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x26, 0x25, 0x26, 0x25, 0x26, 
   0x25, 0x28, 0x26, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 
   0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x2A, 0x28, 0x2A, 0x2D, 0x2A, 0x2D, 
   0x2C, 0x2D, 0x2C, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 
   0x33, 0x35, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x33, 0x35, 0x33, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3A, 0x3B, 0x3E, 0x3C, 0x3E, 0x3E, 0x3F, 
   0x3E, 0x43, 0x43, 0x43, 0x44, 0x45, 0x44, 0x44, 0x46, 0x44, 0x48, 0x47, 0x48, 0x49, 0x49, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4B, 0x4B, 0x4D, 0x4E, 0x4D, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x52, 
   0x52, 0x52, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x54, 0x54, 
   0x54, 0x54, 0x56, 0x54, 0x56, 0x56, 0x56, 0x54, 0x56, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x4F, 
   0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 
   0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 
   0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4D, 0x4D, 0x4D, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x4A, 0x4B, 
   0x4A, 0x4B, 0x48, 0x4A, 0x48, 0x49, 0x49, 0x49, 0x48, 0x48, 0x48, 0x45, 0x46, 0x45, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3C, 0x3E, 0x3A, 0x39, 0x3A, 0x36, 0x36, 0x36, 0x33, 0x31, 0x33, 
   0x2E, 0x2F, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 
   0x2D, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x28, 0x28, 0x28, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x26, 
   0x25, 0x26, 0x24, 0x23, 0x24, 0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x20, 0x22, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 0x25, 0x23, 0x25, 0x23, 
   0x23, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 
   0x23, 0x24, 0x22, 0x24, 0x24, 0x25, 0x24, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 
   0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2A, 0x2C, 0x2B, 0x2A, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2E, 0x2C, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 
   0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 
   0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x35, 0x37, 0x35, 0x35, 0x35, 0x33, 
   0x34, 0x33, 0x33, 0x32, 0x33, 0x30, 0x31, 0x30, 0x2E, 0x2F, 0x2E, 0x2C, 0x2E, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 
   0x27, 0x25, 0x27, 0x25, 0x23, 0x25, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 
   0x23, 0x24, 0x24, 0x22, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x25, 0x23, 0x25, 0x22, 0x22, 
   0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 
   0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x27, 0x26, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 
   0x21, 0x20, 0x1F, 0x20, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x18, 0x18, 
   0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x1A, 0x1A, 0x1A, 0x1C, 0x1A, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 
   0x1F, 0x1E, 0x21, 0x20, 0x21, 0x22, 0x22, 0x22, 0x25, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 
   0x25, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2C, 0x2C, 0x2C, 
   0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 
   0x30, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x34, 0x32, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x41, 
   0x40, 0x44, 0x43, 0x44, 0x44, 0x45, 0x44, 0x46, 0x47, 0x46, 0x46, 0x47, 0x46, 0x49, 0x48, 0x49, 
   0x49, 0x4A, 0x49, 0x4B, 0x4C, 0x4B, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x4E, 0x51, 0x52, 0x51, 0x52, 
   0x53, 0x52, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 
   0x54, 0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 
   0x56, 0x54, 0x56, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 
   0x50, 0x51, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4F, 0x4E, 0x4E, 0x4F, 0x4E, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 
   0x51, 0x50, 0x51, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4C, 
   0x4C, 0x4C, 0x4A, 0x4B, 0x4A, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x47, 0x46, 0x47, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3C, 0x3E, 0x3A, 0x3A, 0x3A, 0x37, 0x36, 0x37, 0x34, 0x33, 0x34, 
   0x30, 0x2F, 0x30, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x24, 
   0x26, 0x24, 0x22, 0x23, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 
   0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 
   0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x22, 0x22, 0x22, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x28, 0x27, 0x28, 
   0x29, 0x2A, 0x29, 0x29, 0x2B, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x35, 
   0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x35, 
   0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x29, 0x2A, 0x29, 0x27, 0x28, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x25, 
   0x26, 0x25, 0x25, 0x24, 0x25, 0x24, 0x23, 0x24, 0x21, 0x23, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x1F, 
   0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 0x1C, 0x1D, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x17, 0x18, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1D, 0x1C, 0x1D, 0x20, 
   0x1E, 0x20, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x27, 0x25, 0x27, 0x25, 0x26, 0x25, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 
   0x28, 0x29, 0x28, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x28, 0x29, 0x28, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x28, 0x26, 
   0x28, 0x27, 0x27, 0x27, 0x28, 0x29, 0x28, 0x2A, 0x29, 0x2A, 0x29, 0x2B, 0x29, 0x2C, 0x2D, 0x2C, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x2F, 0x30, 0x30, 0x2F, 0x30, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x31, 0x30, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x33, 0x35, 0x33, 0x35, 0x34, 0x35, 0x36, 0x36, 0x36, 
   0x36, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x37, 
   0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3F, 0x3F, 0x3F, 0x41, 0x42, 
   0x41, 0x43, 0x44, 0x43, 0x46, 0x45, 0x46, 0x44, 0x45, 0x44, 0x46, 0x46, 0x46, 0x46, 0x47, 0x46, 
   0x49, 0x49, 0x49, 0x4B, 0x4B, 0x4B, 0x4D, 0x4E, 0x4D, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 
   0x53, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x55, 0x55, 
   0x55, 0x55, 0x55, 0x55, 0x56, 0x57, 0x56, 0x57, 0x57, 0x57, 0x55, 0x57, 0x55, 0x55, 0x56, 0x55, 
   0x54, 0x55, 0x54, 0x56, 0x55, 0x56, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x4F, 
   0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 
   0x4E, 0x50, 0x50, 0x50, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x50, 0x50, 0x50, 
   0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x4E, 0x4F, 0x4E, 0x50, 0x4F, 0x50, 0x4E, 0x4F, 0x4E, 0x4C, 
   0x4E, 0x4C, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x47, 0x49, 0x47, 0x45, 0x47, 0x45, 0x44, 0x44, 
   0x44, 0x41, 0x41, 0x41, 0x3D, 0x3E, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x34, 0x33, 0x34, 
   0x30, 0x30, 0x30, 0x2E, 0x2D, 0x2E, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x28, 0x26, 0x28, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x21, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x28, 0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x34, 0x33, 0x35, 0x34, 0x35, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x35, 
   0x34, 0x37, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x37, 0x36, 0x36, 0x35, 0x36, 0x35, 0x35, 0x35, 0x33, 0x35, 0x33, 0x35, 0x33, 0x35, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 
   0x2D, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 
   0x25, 0x25, 0x25, 0x25, 0x23, 0x25, 0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x25, 0x23, 0x25, 0x23, 
   0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 
   0x23, 0x25, 0x23, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x19, 0x1A, 0x19, 0x17, 0x18, 0x17, 0x16, 0x15, 0x16, 
   0x15, 0x16, 0x15, 0x15, 0x16, 0x15, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1E, 
   0x1E, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x28, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 
   0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x35, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x38, 0x38, 
   0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3C, 0x3A, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 
   0x48, 0x48, 0x48, 0x4C, 0x4B, 0x4C, 0x4E, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 0x51, 0x51, 0x51, 0x51, 
   0x52, 0x51, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x55, 0x53, 0x55, 0x55, 
   0x55, 0x55, 0x57, 0x55, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x56, 0x56, 0x56, 
   0x56, 0x56, 0x56, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x52, 0x52, 0x52, 0x50, 
   0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x51, 0x50, 0x51, 0x50, 0x50, 
   0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 
   0x50, 0x50, 0x50, 0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 
   0x4E, 0x4E, 0x4C, 0x4B, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x44, 0x44, 
   0x44, 0x41, 0x41, 0x41, 0x3D, 0x3D, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x33, 0x34, 0x33, 
   0x30, 0x30, 0x30, 0x2E, 0x2D, 0x2E, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 
   0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 
   0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 0x2B, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 
   0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 
   0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x35, 0x34, 
   0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 
   0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 
   0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 
   0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x20, 
   0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x23, 
   0x22, 0x23, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 
   0x1F, 0x1D, 0x1D, 0x1D, 0x1B, 0x1C, 0x1B, 0x19, 0x19, 0x19, 0x17, 0x17, 0x17, 0x16, 0x17, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1C, 
   0x1D, 0x1C, 0x1F, 0x1F, 0x1F, 0x21, 0x22, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x27, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x39, 
   0x38, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3B, 0x3C, 0x3D, 0x3D, 0x3D, 0x3F, 0x40, 0x3F, 0x42, 0x42, 
   0x42, 0x43, 0x44, 0x43, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x47, 0x46, 
   0x49, 0x48, 0x49, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 0x4F, 0x52, 
   0x51, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x55, 0x56, 
   0x55, 0x57, 0x56, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x56, 0x57, 0x56, 
   0x56, 0x56, 0x56, 0x55, 0x56, 0x55, 0x54, 0x55, 0x54, 0x52, 0x54, 0x52, 0x52, 0x52, 0x52, 0x51, 
   0x51, 0x51, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x4F, 0x50, 0x51, 
   0x50, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 
   0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 0x49, 0x49, 0x48, 0x49, 0x48, 0x46, 0x46, 0x46, 0x44, 0x44, 
   0x44, 0x40, 0x41, 0x40, 0x3E, 0x3C, 0x3E, 0x39, 0x3A, 0x39, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 
   0x31, 0x30, 0x31, 0x2D, 0x2D, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x24, 0x26, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 
   0x28, 0x26, 0x28, 0x27, 0x28, 0x27, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 
   0x2F, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 
   0x34, 0x37, 0x35, 0x37, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
   0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2A, 0x2A, 0x2A, 0x27, 0x28, 0x27, 0x27, 0x26, 0x27, 
   0x26, 0x24, 0x26, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x23, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x25, 0x23, 0x25, 
   0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 
   0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1D, 0x1F, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1B, 0x1A, 0x1B, 0x19, 0x18, 0x19, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 
   0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x18, 0x1A, 0x18, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1B, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1F, 0x1E, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 
   0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 
   0x29, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2D, 0x2B, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x30, 0x30, 
   0x30, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 0x33, 0x34, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x35, 0x34, 0x35, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 
   0x38, 0x37, 0x3B, 0x39, 0x3B, 0x3B, 0x3C, 0x3B, 0x3D, 0x3E, 0x3D, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 0x43, 0x44, 0x43, 0x44, 0x45, 0x44, 
   0x47, 0x47, 0x47, 0x4A, 0x4A, 0x4A, 0x4A, 0x4C, 0x4A, 0x4D, 0x4E, 0x4D, 0x4E, 0x4E, 0x4E, 0x50, 
   0x50, 0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x55, 0x53, 0x56, 0x57, 
   0x56, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 
   0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x54, 0x56, 0x54, 0x54, 0x55, 0x54, 0x52, 0x53, 0x52, 0x51, 
   0x52, 0x51, 0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x50, 0x51, 0x51, 
   0x51, 0x51, 0x52, 0x51, 0x52, 0x52, 0x52, 0x51, 0x53, 0x51, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3C, 0x3E, 0x3A, 0x3A, 0x3A, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x2F, 0x30, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2C, 
   0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x29, 0x28, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x25, 
   0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x30, 0x2F, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x34, 
   0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 
   0x35, 0x34, 0x33, 0x33, 0x33, 0x32, 0x31, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x27, 0x27, 0x27, 
   0x27, 0x25, 0x27, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x26, 0x25, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x22, 0x23, 
   0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 
   0x1E, 0x1D, 0x1C, 0x1D, 0x1B, 0x1A, 0x1B, 0x19, 0x19, 0x19, 0x17, 0x18, 0x17, 0x16, 0x17, 0x16, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1D, 
   0x1C, 0x1D, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 
   0x22, 0x23, 0x24, 0x23, 0x26, 0x25, 0x26, 0x26, 0x25, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2A, 
   0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x30, 
   0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x34, 0x33, 0x34, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x39, 
   0x39, 0x39, 0x39, 0x3A, 0x39, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x45, 0x44, 0x45, 
   0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4D, 0x4E, 0x4D, 0x50, 
   0x50, 0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x55, 0x55, 0x55, 0x56, 0x56, 
   0x56, 0x58, 0x59, 0x58, 0x58, 0x59, 0x58, 0x59, 0x59, 0x59, 0x58, 0x59, 0x58, 0x58, 0x59, 0x58, 
   0x57, 0x58, 0x57, 0x57, 0x58, 0x57, 0x56, 0x57, 0x56, 0x54, 0x55, 0x54, 0x53, 0x53, 0x53, 0x52, 
   0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 
   0x52, 0x51, 0x52, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4D, 0x4E, 0x4D, 
   0x4C, 0x4D, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x46, 0x46, 0x44, 0x43, 
   0x44, 0x41, 0x3F, 0x41, 0x3E, 0x3C, 0x3E, 0x3A, 0x39, 0x3A, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 
   0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x23, 0x24, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 
   0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x23, 0x23, 0x23, 0x24, 0x22, 0x24, 
   0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2A, 
   0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x37, 0x38, 0x37, 0x37, 0x37, 0x37, 0x36, 
   0x37, 0x36, 0x34, 0x33, 0x34, 0x33, 0x31, 0x33, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x28, 0x27, 0x28, 
   0x27, 0x26, 0x27, 0x24, 0x25, 0x24, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 
   0x1E, 0x1C, 0x1C, 0x1C, 0x19, 0x1A, 0x19, 0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 
   0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x22, 0x21, 0x22, 0x21, 0x22, 
   0x21, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x29, 0x27, 0x29, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 
   0x29, 0x2A, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x2B, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 
   0x2F, 0x2F, 0x2F, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x30, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x34, 0x32, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x37, 
   0x39, 0x37, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3D, 0x3C, 0x3F, 0x40, 0x3F, 0x41, 0x40, 
   0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 0x43, 0x42, 0x43, 0x43, 0x45, 0x43, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x4A, 0x49, 0x4D, 0x4B, 0x4D, 0x4D, 0x4D, 0x4D, 0x4F, 
   0x50, 0x4F, 0x52, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x55, 0x53, 0x57, 0x56, 
   0x57, 0x58, 0x58, 0x58, 0x5A, 0x5A, 0x5A, 0x58, 0x5A, 0x58, 0x59, 0x5A, 0x59, 0x59, 0x59, 0x59, 
   0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x55, 0x56, 0x55, 0x55, 0x54, 0x55, 0x53, 
   0x53, 0x53, 0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x52, 0x51, 0x51, 0x53, 
   0x51, 0x54, 0x52, 0x54, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 
   0x50, 0x52, 0x50, 0x50, 0x51, 0x50, 0x4F, 0x50, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4A, 
   0x4D, 0x4A, 0x4C, 0x4B, 0x4C, 0x4B, 0x4A, 0x4B, 0x49, 0x48, 0x49, 0x46, 0x45, 0x46, 0x43, 0x43, 
   0x43, 0x40, 0x3F, 0x40, 0x3C, 0x3C, 0x3C, 0x39, 0x39, 0x39, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 
   0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2B, 0x29, 0x2B, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x25, 
   0x25, 0x25, 0x25, 0x23, 0x25, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 
   0x21, 0x23, 0x21, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 
   0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x26, 
   0x25, 0x26, 0x26, 0x26, 0x26, 0x28, 0x26, 0x28, 0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x30, 0x31, 0x2F, 
   0x30, 0x2F, 0x33, 0x31, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x36, 
   0x37, 0x36, 0x34, 0x34, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x28, 0x2A, 
   0x28, 0x27, 0x28, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 
   0x26, 0x26, 0x26, 0x25, 0x26, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x23, 
   0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1C, 0x1D, 
   0x1C, 0x19, 0x1B, 0x19, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x17, 0x17, 0x17, 0x15, 0x17, 0x15, 
   0x16, 0x17, 0x16, 0x16, 0x17, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 
   0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x34, 0x35, 0x36, 0x34, 0x36, 
   0x36, 0x35, 0x36, 0x35, 0x36, 0x35, 0x35, 0x36, 0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 
   0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3E, 0x40, 0x3F, 0x40, 0x40, 0x41, 
   0x40, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x45, 0x44, 0x45, 
   0x45, 0x45, 0x45, 0x47, 0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4C, 0x4C, 0x4C, 0x4E, 0x4E, 0x4E, 0x50, 
   0x50, 0x50, 0x51, 0x51, 0x51, 0x52, 0x52, 0x52, 0x53, 0x54, 0x53, 0x55, 0x56, 0x55, 0x56, 0x57, 
   0x56, 0x59, 0x58, 0x59, 0x5A, 0x5B, 0x5A, 0x5A, 0x5B, 0x5A, 0x5A, 0x5A, 0x5A, 0x59, 0x5A, 0x59, 
   0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 0x56, 0x56, 0x56, 0x55, 0x55, 0x55, 0x52, 
   0x53, 0x52, 0x52, 0x52, 0x52, 0x50, 0x52, 0x50, 0x51, 0x51, 0x51, 0x52, 0x53, 0x52, 0x52, 0x53, 
   0x52, 0x52, 0x54, 0x52, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 
   0x52, 0x52, 0x52, 0x50, 0x51, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 
   0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x46, 0x45, 0x46, 0x44, 0x42, 
   0x44, 0x41, 0x40, 0x41, 0x3D, 0x3C, 0x3D, 0x39, 0x39, 0x39, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x31, 0x31, 0x31, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 
   0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 
   0x25, 0x26, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x23, 0x22, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1D, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 
   0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x27, 0x25, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 
   0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2B, 0x2A, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 
   0x2C, 0x2A, 0x2C, 0x2C, 0x2B, 0x2C, 0x2C, 0x2D, 0x2C, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 
   0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x38, 0x38, 0x38, 0x37, 0x37, 0x37, 0x36, 
   0x36, 0x36, 0x34, 0x34, 0x34, 0x32, 0x31, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x24, 0x24, 
   0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x23, 0x24, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x20, 0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1B, 0x1C, 
   0x1B, 0x19, 0x1A, 0x19, 0x18, 0x19, 0x18, 0x18, 0x18, 0x18, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 
   0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1D, 0x1C, 0x1E, 
   0x1D, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2A, 
   0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x33, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 0x34, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x31, 0x32, 
   0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 
   0x36, 0x35, 0x36, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 
   0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3E, 0x3E, 0x3E, 0x40, 0x3F, 0x40, 0x3F, 0x40, 0x3F, 0x41, 0x41, 
   0x41, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x44, 0x43, 
   0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x4B, 0x4B, 0x4B, 0x4C, 0x4D, 0x4C, 0x4F, 0x4F, 0x4F, 0x51, 
   0x50, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x52, 0x54, 0x54, 0x54, 0x56, 0x55, 0x56, 0x58, 0x57, 
   0x58, 0x59, 0x5A, 0x59, 0x5A, 0x5B, 0x5A, 0x59, 0x5A, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 
   0x59, 0x59, 0x59, 0x58, 0x59, 0x58, 0x57, 0x57, 0x57, 0x55, 0x57, 0x55, 0x56, 0x55, 0x56, 0x55, 
   0x54, 0x55, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x53, 0x54, 
   0x53, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 
   0x52, 0x52, 0x52, 0x52, 0x51, 0x52, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x42, 0x43, 
   0x42, 0x41, 0x40, 0x41, 0x3E, 0x3C, 0x3E, 0x39, 0x39, 0x39, 0x37, 0x36, 0x37, 0x33, 0x34, 0x33, 
   0x2F, 0x31, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 
   0x2D, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 
   0x2C, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x28, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x26, 
   0x26, 0x26, 0x24, 0x25, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 
   0x22, 0x22, 0x23, 0x22, 0x22, 0x23, 0x22, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 
   0x1C, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 
   0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x23, 
   0x23, 0x23, 0x23, 0x24, 0x23, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 0x28, 0x27, 
   0x28, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 
   0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x2F, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 0x32, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 
   0x35, 0x35, 0x35, 0x35, 0x36, 0x37, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x38, 0x38, 0x38, 0x38, 
   0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 0x38, 0x38, 0x37, 0x38, 0x36, 0x37, 0x36, 0x36, 
   0x35, 0x36, 0x34, 0x33, 0x34, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x30, 0x31, 0x2E, 0x2F, 
   0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 
   0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 0x26, 
   0x25, 0x26, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x24, 0x23, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x21, 0x23, 0x21, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1D, 0x1D, 0x1D, 0x1D, 0x1A, 0x1B, 
   0x1A, 0x19, 0x19, 0x19, 0x18, 0x18, 0x18, 0x16, 0x17, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 
   0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1F, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x20, 0x1F, 
   0x20, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 
   0x27, 0x25, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2A, 
   0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x34, 0x32, 0x34, 0x33, 0x32, 
   0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x36, 0x35, 
   0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x3A, 
   0x3B, 0x3A, 0x3D, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x41, 
   0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x44, 0x44, 0x44, 
   0x46, 0x46, 0x46, 0x48, 0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4D, 0x4C, 0x4D, 0x4F, 0x4F, 0x4F, 0x52, 
   0x51, 0x52, 0x52, 0x53, 0x52, 0x54, 0x53, 0x54, 0x54, 0x53, 0x54, 0x56, 0x56, 0x56, 0x58, 0x59, 
   0x58, 0x5A, 0x5A, 0x5A, 0x5A, 0x5B, 0x5A, 0x5A, 0x5B, 0x5A, 0x5A, 0x5A, 0x5A, 0x59, 0x5A, 0x59, 
   0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 0x57, 0x57, 0x57, 0x56, 0x57, 0x56, 0x56, 
   0x56, 0x56, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 0x52, 0x53, 0x52, 
   0x52, 0x53, 0x52, 0x50, 0x52, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4D, 0x4D, 0x4B, 
   0x4B, 0x4B, 0x48, 0x49, 0x48, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x42, 0x42, 
   0x42, 0x41, 0x40, 0x41, 0x3E, 0x3D, 0x3E, 0x3A, 0x39, 0x3A, 0x35, 0x36, 0x35, 0x33, 0x32, 0x33, 
   0x31, 0x30, 0x31, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2C, 0x2D, 0x2C, 0x2C, 0x2B, 
   0x2C, 0x2B, 0x2A, 0x2B, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 
   0x25, 0x26, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 
   0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x21, 0x23, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 
   0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1D, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x21, 0x23, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 
   0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x26, 0x26, 
   0x26, 0x28, 0x28, 0x28, 0x29, 0x28, 0x29, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 
   0x29, 0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x31, 
   0x30, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 
   0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 0x39, 0x38, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x34, 
   0x35, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 
   0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x24, 
   0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 
   0x23, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x20, 0x1F, 0x1E, 
   0x1F, 0x1E, 0x1F, 0x1D, 0x1F, 0x1D, 0x1D, 0x1D, 0x1C, 0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x18, 0x19, 0x18, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 
   0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1E, 0x1D, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1D, 0x1E, 0x1D, 0x20, 0x1F, 
   0x20, 0x21, 0x20, 0x21, 0x22, 0x22, 0x22, 0x23, 0x24, 0x23, 0x25, 0x25, 0x25, 0x26, 0x25, 0x26, 
   0x26, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x24, 0x25, 0x26, 0x26, 0x26, 0x29, 0x29, 0x29, 0x29, 
   0x2A, 0x29, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 
   0x2E, 0x2F, 0x2F, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x31, 0x2F, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 
   0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x31, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 
   0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 0x3C, 
   0x3A, 0x3C, 0x3D, 0x3D, 0x3D, 0x40, 0x3F, 0x40, 0x42, 0x43, 0x42, 0x44, 0x43, 0x44, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 
   0x46, 0x46, 0x46, 0x48, 0x49, 0x48, 0x4A, 0x4C, 0x4A, 0x4D, 0x4E, 0x4D, 0x4F, 0x51, 0x4F, 0x52, 
   0x53, 0x52, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x57, 0x58, 0x57, 0x59, 0x59, 
   0x59, 0x5A, 0x5A, 0x5A, 0x5B, 0x5B, 0x5B, 0x5B, 0x5A, 0x5B, 0x59, 0x5A, 0x59, 0x59, 0x59, 0x59, 
   0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x57, 0x58, 0x57, 0x58, 0x56, 0x58, 0x56, 0x57, 0x56, 0x55, 
   0x56, 0x55, 0x55, 0x56, 0x55, 0x55, 0x56, 0x55, 0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x55, 0x55, 
   0x55, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53, 0x54, 0x53, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 
   0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 0x50, 0x51, 0x50, 0x50, 0x4F, 0x50, 0x4E, 0x4D, 0x4E, 0x4B, 
   0x4B, 0x4B, 0x49, 0x49, 0x49, 0x46, 0x47, 0x46, 0x45, 0x45, 0x45, 0x44, 0x44, 0x44, 0x43, 0x42, 
   0x43, 0x40, 0x41, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x39, 0x3A, 0x36, 0x35, 0x36, 0x31, 0x31, 0x31, 
   0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2C, 0x2C, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 
   0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x29, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 
   0x25, 0x26, 0x23, 0x24, 0x23, 0x21, 0x22, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x1F, 
   0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1A, 0x1C, 
   0x1A, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 0x1C, 0x1E, 0x1C, 0x1E, 0x1C, 
   0x1E, 0x1F, 0x1E, 0x23, 0x21, 0x23, 0x22, 0x21, 0x22, 0x23, 0x21, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x26, 0x26, 
   0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x29, 0x27, 0x29, 
   0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x31, 0x2F, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x33, 
   0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 0x32, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2C, 0x2D, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 
   0x27, 0x27, 0x27, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 0x23, 
   0x25, 0x23, 0x24, 0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x23, 0x21, 0x23, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x1F, 0x21, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x18, 0x1A, 
   0x18, 0x17, 0x18, 0x17, 0x16, 0x16, 0x16, 0x15, 0x14, 0x15, 0x12, 0x13, 0x12, 0x10, 0x12, 0x10, 
   0x11, 0x12, 0x11, 0x11, 0x12, 0x11, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 0x1E, 
   0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 
   0x1E, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 
   0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 0x2A, 
   0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2D, 0x2C, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 
   0x31, 0x31, 0x32, 0x30, 0x32, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32, 0x30, 0x32, 0x31, 0x31, 
   0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x34, 0x34, 0x35, 0x36, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3A, 0x3C, 0x3E, 0x3E, 0x3E, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 0x42, 0x44, 0x44, 0x44, 
   0x46, 0x47, 0x46, 0x48, 0x49, 0x48, 0x4B, 0x4B, 0x4B, 0x4E, 0x4F, 0x4E, 0x50, 0x52, 0x50, 0x53, 
   0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x56, 0x56, 0x56, 0x58, 0x58, 0x58, 0x5A, 0x59, 
   0x5A, 0x5A, 0x5B, 0x5A, 0x5B, 0x5B, 0x5B, 0x5A, 0x5B, 0x5A, 0x5A, 0x5A, 0x5A, 0x59, 0x5A, 0x59, 
   0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x55, 0x57, 0x55, 0x56, 0x57, 0x56, 0x56, 
   0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x57, 0x57, 0x57, 0x56, 0x56, 0x56, 0x55, 0x56, 
   0x55, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 
   0x52, 0x52, 0x52, 0x50, 0x52, 0x50, 0x50, 0x51, 0x50, 0x4D, 0x4E, 0x4D, 0x4B, 0x4D, 0x4B, 0x4A, 
   0x4A, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x46, 0x45, 0x46, 0x43, 0x43, 0x43, 0x42, 0x42, 
   0x42, 0x40, 0x41, 0x40, 0x3E, 0x3D, 0x3E, 0x39, 0x39, 0x39, 0x36, 0x35, 0x36, 0x33, 0x32, 0x33, 
   0x30, 0x30, 0x30, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2D, 0x2F, 0x2C, 0x2D, 
   0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x24, 
   0x25, 0x24, 0x23, 0x23, 0x23, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1C, 0x1E, 0x1C, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 
   0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1C, 
   0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x22, 0x20, 0x22, 0x21, 0x20, 0x21, 0x21, 
   0x20, 0x21, 0x22, 0x20, 0x22, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
   0x29, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x31, 
   0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x38, 0x37, 0x39, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
   0x39, 0x39, 0x39, 0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x33, 
   0x33, 0x33, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x28, 0x29, 
   0x29, 0x28, 0x29, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1D, 0x1E, 0x1D, 0x1C, 0x1E, 0x1C, 0x1D, 0x1C, 0x1D, 0x1B, 0x1A, 0x1B, 0x1A, 0x19, 
   0x1A, 0x17, 0x18, 0x17, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x12, 0x13, 0x12, 0x12, 0x12, 0x12, 
   0x10, 0x12, 0x10, 0x10, 0x11, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x19, 0x1B, 0x19, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 
   0x1C, 0x1F, 0x1F, 0x1F, 0x22, 0x21, 0x22, 0x24, 0x23, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 
   0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 
   0x33, 0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x33, 0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 
   0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3D, 0x3C, 
   0x3D, 0x3C, 0x3F, 0x3F, 0x3F, 0x42, 0x40, 0x42, 0x43, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 0x43, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x43, 0x44, 0x44, 0x44, 
   0x45, 0x46, 0x45, 0x47, 0x47, 0x47, 0x4B, 0x4B, 0x4B, 0x4E, 0x4F, 0x4E, 0x51, 0x52, 0x51, 0x53, 
   0x54, 0x53, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x56, 0x56, 0x56, 0x58, 0x59, 0x58, 0x59, 0x5B, 
   0x59, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5A, 0x5C, 0x5A, 0x5B, 0x5B, 0x5B, 0x5A, 0x59, 0x5A, 
   0x57, 0x58, 0x57, 0x57, 0x58, 0x57, 0x56, 0x56, 0x56, 0x54, 0x56, 0x54, 0x55, 0x56, 0x55, 0x56, 
   0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x57, 0x57, 0x57, 0x56, 0x57, 0x56, 0x55, 0x56, 
   0x55, 0x55, 0x55, 0x55, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x51, 0x52, 0x51, 0x51, 0x51, 0x51, 0x50, 0x50, 0x50, 0x4C, 0x4E, 0x4C, 0x4B, 0x4C, 0x4B, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x45, 0x46, 0x45, 0x44, 0x45, 0x44, 0x42, 0x42, 
   0x42, 0x40, 0x40, 0x40, 0x3E, 0x3E, 0x3E, 0x39, 0x3A, 0x39, 0x37, 0x37, 0x37, 0x34, 0x34, 0x34, 
   0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x29, 0x29, 
   0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x26, 0x27, 0x26, 0x26, 0x25, 0x26, 0x25, 0x25, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 
   0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 
   0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x25, 0x24, 
   0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 0x39, 
   0x39, 0x39, 0x39, 0x39, 0x38, 0x39, 0x36, 0x36, 0x36, 0x35, 0x35, 0x35, 0x34, 0x34, 0x34, 0x32, 
   0x32, 0x32, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 
   0x2B, 0x28, 0x2B, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x25, 0x26, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x23, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x22, 0x21, 0x22, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x1F, 
   0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1D, 0x1C, 0x1B, 0x1C, 0x19, 0x19, 
   0x19, 0x17, 0x17, 0x17, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15, 0x13, 0x13, 0x13, 0x11, 0x12, 0x11, 
   0x11, 0x10, 0x11, 0x10, 0x10, 0x10, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1A, 0x1B, 0x1C, 0x1C, 
   0x1C, 0x1F, 0x1E, 0x1F, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 
   0x29, 0x29, 0x29, 0x2A, 0x29, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 
   0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 
   0x34, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x34, 0x32, 
   0x32, 0x32, 0x32, 0x2F, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x34, 0x33, 0x34, 
   0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 0x3E, 0x3C, 0x3F, 
   0x3E, 0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x42, 0x41, 0x42, 0x43, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0x42, 
   0x45, 0x46, 0x45, 0x48, 0x48, 0x48, 0x4A, 0x4B, 0x4A, 0x4D, 0x4D, 0x4D, 0x51, 0x50, 0x51, 0x53, 
   0x53, 0x53, 0x55, 0x55, 0x55, 0x56, 0x56, 0x56, 0x57, 0x57, 0x57, 0x58, 0x5A, 0x58, 0x5A, 0x5B, 
   0x5A, 0x5C, 0x5C, 0x5C, 0x5D, 0x5D, 0x5D, 0x5C, 0x5D, 0x5C, 0x5B, 0x5C, 0x5B, 0x59, 0x5A, 0x59, 
   0x58, 0x58, 0x58, 0x57, 0x57, 0x57, 0x54, 0x56, 0x54, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x56, 
   0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 
   0x56, 0x55, 0x55, 0x55, 0x53, 0x54, 0x53, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4E, 0x4E, 0x4E, 0x4B, 0x4C, 0x4B, 0x49, 
   0x4A, 0x49, 0x48, 0x48, 0x48, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3A, 0x3A, 0x38, 0x37, 0x38, 0x34, 0x34, 0x34, 
   0x32, 0x32, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x28, 0x27, 0x28, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1E, 0x1C, 0x1D, 0x1B, 0x1D, 0x1B, 0x19, 0x1B, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 
   0x18, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1B, 0x1A, 
   0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 
   0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x22, 0x23, 0x22, 0x25, 0x24, 
   0x25, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2C, 0x2C, 0x2C, 0x2E, 0x2D, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x33, 0x35, 0x36, 
   0x35, 0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x37, 0x36, 0x37, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 0x32, 
   0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 
   0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x23, 0x22, 
   0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x1C, 0x1E, 0x1C, 0x1B, 0x1C, 0x1B, 0x18, 0x19, 
   0x18, 0x15, 0x17, 0x15, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x12, 0x12, 0x12, 
   0x10, 0x11, 0x10, 0x10, 0x10, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 
   0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1B, 0x1C, 
   0x1B, 0x1E, 0x1E, 0x1E, 0x21, 0x20, 0x21, 0x23, 0x23, 0x23, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x28, 
   0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2C, 0x2C, 0x2C, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x33, 0x32, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 
   0x33, 0x32, 0x32, 0x33, 0x32, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x34, 0x35, 0x34, 0x34, 0x33, 
   0x34, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x33, 0x33, 0x33, 
   0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x30, 0x30, 0x30, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 
   0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3F, 0x3D, 0x3F, 0x3F, 
   0x3F, 0x3F, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x42, 
   0x43, 0x41, 0x42, 0x41, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x44, 0x44, 0x47, 0x47, 0x47, 0x49, 0x4A, 0x49, 0x4E, 0x4C, 0x4E, 0x51, 0x51, 0x51, 0x52, 
   0x53, 0x52, 0x53, 0x55, 0x53, 0x56, 0x57, 0x56, 0x57, 0x58, 0x57, 0x59, 0x59, 0x59, 0x5A, 0x5A, 
   0x5A, 0x5C, 0x5C, 0x5C, 0x5E, 0x5D, 0x5E, 0x5C, 0x5C, 0x5C, 0x5C, 0x5B, 0x5C, 0x59, 0x5A, 0x59, 
   0x57, 0x58, 0x57, 0x55, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x53, 0x55, 0x53, 0x54, 
   0x55, 0x54, 0x55, 0x56, 0x55, 0x55, 0x57, 0x55, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x55, 0x56, 
   0x55, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x4E, 0x50, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 0x4B, 0x4B, 0x49, 
   0x49, 0x49, 0x48, 0x47, 0x48, 0x46, 0x47, 0x46, 0x48, 0x47, 0x48, 0x45, 0x45, 0x45, 0x42, 0x42, 
   0x42, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x35, 0x35, 0x35, 
   0x32, 0x33, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2C, 0x2D, 0x2B, 0x2A, 0x2B, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x2A, 
   0x29, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x26, 0x28, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1D, 0x1E, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 
   0x18, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x19, 0x1B, 0x1A, 0x1B, 
   0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x20, 0x1E, 0x20, 0x1F, 0x20, 0x1F, 0x22, 0x22, 0x22, 0x24, 0x25, 
   0x24, 0x28, 0x26, 0x28, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x27, 0x25, 0x27, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2B, 0x2A, 0x2E, 0x2C, 0x2E, 0x30, 
   0x2F, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x33, 0x32, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 0x3A, 
   0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x35, 0x35, 0x35, 0x33, 0x34, 0x33, 0x34, 0x34, 0x34, 0x33, 
   0x32, 0x33, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2A, 0x2B, 
   0x2A, 0x29, 0x2A, 0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x25, 0x26, 0x25, 0x24, 
   0x24, 0x24, 0x24, 0x22, 0x24, 0x23, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x21, 0x1F, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x18, 0x19, 
   0x18, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 0x13, 0x14, 0x13, 0x12, 0x13, 0x12, 
   0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1D, 0x1C, 
   0x1D, 0x1D, 0x1E, 0x1D, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x25, 0x26, 0x25, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 
   0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2D, 0x2C, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x32, 
   0x33, 0x32, 0x34, 0x33, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x34, 0x33, 0x34, 
   0x31, 0x32, 0x31, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x32, 0x31, 0x32, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3D, 0x3B, 0x3D, 0x3D, 0x3D, 0x3D, 0x3F, 
   0x3F, 0x3F, 0x40, 0x41, 0x40, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43, 0x43, 0x43, 
   0x43, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x42, 0x43, 0x42, 
   0x44, 0x45, 0x44, 0x47, 0x47, 0x47, 0x49, 0x4A, 0x49, 0x4E, 0x4D, 0x4E, 0x50, 0x51, 0x50, 0x52, 
   0x54, 0x52, 0x55, 0x55, 0x55, 0x56, 0x57, 0x56, 0x56, 0x58, 0x56, 0x59, 0x5A, 0x59, 0x5A, 0x5B, 
   0x5A, 0x5C, 0x5C, 0x5C, 0x5D, 0x5D, 0x5D, 0x5C, 0x5C, 0x5C, 0x5B, 0x5B, 0x5B, 0x59, 0x5A, 0x59, 
   0x58, 0x57, 0x58, 0x57, 0x56, 0x57, 0x55, 0x55, 0x55, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x55, 
   0x55, 0x55, 0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x57, 0x56, 
   0x57, 0x55, 0x55, 0x55, 0x54, 0x54, 0x54, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 0x4C, 0x4B, 0x49, 
   0x49, 0x49, 0x48, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x48, 0x46, 0x44, 0x46, 0x44, 0x43, 0x43, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x35, 0x36, 0x35, 
   0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2B, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
   0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x23, 0x24, 0x23, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1C, 
   0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x1A, 0x18, 0x18, 0x19, 0x18, 0x18, 0x19, 
   0x18, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 
   0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x22, 0x22, 0x22, 0x25, 0x24, 
   0x25, 0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2C, 0x2A, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 
   0x2E, 0x2E, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 
   0x35, 0x37, 0x38, 0x37, 0x39, 0x3A, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x39, 0x3A, 
   0x39, 0x39, 0x39, 0x38, 0x37, 0x38, 0x36, 0x35, 0x36, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 
   0x29, 0x2A, 0x29, 0x29, 0x29, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x20, 0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1C, 0x1E, 0x1C, 0x1A, 0x1C, 0x1A, 0x1A, 0x19, 
   0x1A, 0x17, 0x17, 0x17, 0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 
   0x10, 0x12, 0x10, 0x10, 0x10, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1D, 
   0x1B, 0x1E, 0x1F, 0x1E, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x29, 0x29, 0x29, 0x2D, 0x2C, 0x2D, 0x2F, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F, 0x31, 0x31, 
   0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x33, 0x32, 0x31, 0x32, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x33, 0x31, 0x33, 0x33, 0x32, 0x33, 0x33, 
   0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x33, 0x35, 0x33, 0x34, 0x35, 0x34, 0x34, 0x34, 
   0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x34, 0x33, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 
   0x32, 0x31, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2E, 0x2D, 0x2F, 0x2D, 0x2F, 0x2E, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x31, 0x2F, 0x32, 0x32, 0x32, 0x35, 0x34, 0x35, 
   0x38, 0x37, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3B, 0x3B, 0x3B, 0x3D, 0x3D, 0x3D, 0x3E, 
   0x3D, 0x3E, 0x3F, 0x40, 0x3F, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x42, 0x42, 0x42, 
   0x42, 0x42, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x42, 0x41, 0x43, 0x41, 0x43, 0x42, 0x43, 0x42, 
   0x44, 0x46, 0x44, 0x47, 0x48, 0x47, 0x4A, 0x4A, 0x4A, 0x4D, 0x4D, 0x4D, 0x4F, 0x4F, 0x4F, 0x52, 
   0x52, 0x52, 0x54, 0x55, 0x54, 0x56, 0x57, 0x56, 0x57, 0x58, 0x57, 0x58, 0x59, 0x58, 0x5A, 0x5A, 
   0x5A, 0x5C, 0x5D, 0x5C, 0x5F, 0x5D, 0x5F, 0x5D, 0x5D, 0x5D, 0x5A, 0x5B, 0x5A, 0x59, 0x5A, 0x59, 
   0x57, 0x58, 0x57, 0x55, 0x57, 0x55, 0x55, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x55, 0x54, 
   0x56, 0x54, 0x55, 0x55, 0x55, 0x55, 0x56, 0x55, 0x56, 0x57, 0x56, 0x55, 0x57, 0x55, 0x55, 0x56, 
   0x55, 0x56, 0x55, 0x56, 0x54, 0x55, 0x54, 0x52, 0x53, 0x52, 0x51, 0x52, 0x51, 0x51, 0x52, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4D, 0x4E, 0x4D, 0x4C, 0x4C, 0x4C, 0x4A, 
   0x49, 0x4A, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x45, 0x46, 0x43, 0x42, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3A, 0x3A, 0x38, 0x39, 0x38, 0x35, 0x36, 0x35, 
   0x33, 0x32, 0x33, 0x31, 0x30, 0x31, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 0x2A, 
   0x28, 0x29, 0x28, 0x28, 0x27, 0x28, 0x25, 0x26, 0x25, 0x23, 0x25, 0x23, 0x25, 0x24, 0x25, 0x23, 
   0x23, 0x23, 0x23, 0x22, 0x23, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x1E, 0x1B, 0x1B, 0x1B, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x18, 0x18, 0x19, 0x18, 0x18, 0x1A, 
   0x18, 0x19, 0x1A, 0x19, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 
   0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x20, 0x20, 0x20, 0x22, 0x23, 0x22, 0x24, 0x24, 
   0x24, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x27, 0x26, 0x27, 0x27, 0x27, 0x27, 0x29, 0x29, 0x29, 0x2A, 0x2C, 0x2A, 0x2E, 0x2D, 0x2E, 0x2F, 
   0x2E, 0x2F, 0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x33, 0x32, 0x33, 0x35, 0x33, 0x35, 0x35, 0x35, 
   0x35, 0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3A, 0x3A, 0x3A, 
   0x38, 0x39, 0x38, 0x37, 0x37, 0x37, 0x36, 0x35, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 
   0x32, 0x33, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2E, 
   0x2F, 0x2F, 0x2D, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2C, 0x2B, 0x2C, 0x2A, 0x2B, 0x2A, 
   0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 0x27, 0x27, 0x27, 0x25, 0x26, 0x25, 0x23, 
   0x25, 0x23, 0x25, 0x23, 0x25, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x21, 0x22, 0x21, 0x22, 0x21, 
   0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x16, 0x17, 0x16, 0x14, 0x16, 0x14, 0x15, 0x16, 0x15, 0x13, 0x13, 0x13, 0x12, 0x13, 0x12, 
   0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 
   0x1C, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 
   0x1C, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x25, 0x25, 0x25, 0x27, 0x26, 0x27, 
   0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 0x26, 0x27, 0x27, 
   0x27, 0x27, 0x29, 0x29, 0x29, 0x2B, 0x2A, 0x2B, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 0x30, 
   0x2F, 0x30, 0x32, 0x30, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x31, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 
   0x32, 0x32, 0x33, 0x32, 0x33, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x34, 0x33, 0x34, 0x35, 0x33, 
   0x35, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x32, 0x33, 0x32, 0x31, 0x31, 0x31, 
   0x32, 0x30, 0x32, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x30, 0x31, 0x30, 0x32, 0x32, 0x32, 0x34, 0x34, 0x34, 
   0x36, 0x36, 0x36, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x39, 0x3B, 0x3A, 0x3B, 0x3B, 0x3C, 0x3B, 0x3E, 
   0x3E, 0x3E, 0x3E, 0x3F, 0x3E, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
   0x42, 0x40, 0x41, 0x40, 0x41, 0x42, 0x41, 0x40, 0x42, 0x40, 0x44, 0x43, 0x44, 0x43, 0x45, 0x43, 
   0x46, 0x46, 0x46, 0x49, 0x48, 0x49, 0x4A, 0x4B, 0x4A, 0x4E, 0x4D, 0x4E, 0x50, 0x50, 0x50, 0x50, 
   0x52, 0x50, 0x53, 0x54, 0x53, 0x55, 0x57, 0x55, 0x57, 0x58, 0x57, 0x5A, 0x5A, 0x5A, 0x5A, 0x5B, 
   0x5A, 0x5C, 0x5D, 0x5C, 0x5D, 0x5D, 0x5D, 0x5B, 0x5C, 0x5B, 0x5A, 0x5B, 0x5A, 0x59, 0x5A, 0x59, 
   0x59, 0x59, 0x59, 0x57, 0x57, 0x57, 0x55, 0x56, 0x55, 0x56, 0x56, 0x56, 0x54, 0x56, 0x54, 0x56, 
   0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x56, 0x57, 
   0x56, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x54, 0x53, 0x54, 0x51, 0x53, 0x51, 0x52, 0x53, 0x52, 
   0x51, 0x52, 0x51, 0x50, 0x51, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4E, 0x4C, 0x4D, 0x4C, 0x4B, 
   0x4B, 0x4B, 0x4A, 0x49, 0x4A, 0x48, 0x48, 0x48, 0x46, 0x47, 0x46, 0x44, 0x45, 0x44, 0x42, 0x43, 
   0x42, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x34, 0x35, 0x34, 
   0x32, 0x33, 0x32, 0x2F, 0x30, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x30, 0x2E, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x27, 0x28, 0x27, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x25, 0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
   0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1C, 
   0x1D, 0x1C, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x1A, 
   0x19, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 
   0x1C, 0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1F, 0x21, 0x21, 0x21, 0x23, 0x23, 
   0x23, 0x24, 0x24, 0x24, 0x26, 0x25, 0x26, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x2C, 0x2B, 0x2C, 0x2E, 0x2D, 0x2E, 0x30, 
   0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x37, 0x36, 0x37, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x39, 0x3B, 0x39, 0x39, 0x39, 
   0x37, 0x39, 0x37, 0x36, 0x36, 0x36, 0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x31, 
   0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 
   0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 
   0x2A, 0x29, 0x2A, 0x28, 0x28, 0x28, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x24, 
   0x24, 0x24, 0x23, 0x23, 0x23, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x21, 0x23, 0x21, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x23, 0x21, 0x23, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1C, 0x1E, 0x1C, 0x1D, 0x1D, 0x1D, 0x19, 0x1A, 
   0x19, 0x17, 0x17, 0x17, 0x15, 0x17, 0x15, 0x13, 0x15, 0x13, 0x14, 0x13, 0x14, 0x13, 0x13, 0x13, 
   0x11, 0x12, 0x11, 0x10, 0x11, 0x10, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 
   0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 
   0x1D, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 
   0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x26, 0x26, 0x26, 0x27, 0x26, 0x27, 0x26, 0x26, 0x26, 0x28, 
   0x27, 0x28, 0x28, 0x28, 0x28, 0x2A, 0x29, 0x2A, 0x2B, 0x2B, 0x2B, 0x2E, 0x2C, 0x2E, 0x30, 0x2F, 
   0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x31, 0x32, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 
   0x33, 0x33, 0x32, 0x33, 0x33, 0x32, 0x33, 0x33, 0x31, 0x33, 0x30, 0x32, 0x30, 0x30, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2B, 
   0x2C, 0x2B, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x31, 0x31, 0x31, 0x32, 0x33, 0x32, 0x34, 0x36, 0x34, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3B, 0x3B, 0x3C, 
   0x3C, 0x3C, 0x3D, 0x3E, 0x3D, 0x3E, 0x40, 0x3E, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 0x41, 0x42, 
   0x41, 0x3F, 0x41, 0x3F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x43, 0x42, 0x45, 0x45, 0x45, 
   0x48, 0x47, 0x48, 0x49, 0x48, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4B, 0x4E, 0x4E, 0x4E, 0x51, 
   0x51, 0x51, 0x51, 0x53, 0x51, 0x56, 0x55, 0x56, 0x56, 0x57, 0x56, 0x56, 0x59, 0x56, 0x59, 0x5A, 
   0x59, 0x5B, 0x5B, 0x5B, 0x5C, 0x5D, 0x5C, 0x5B, 0x5C, 0x5B, 0x59, 0x5B, 0x59, 0x59, 0x5A, 0x59, 
   0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x56, 0x58, 0x56, 0x58, 0x57, 0x58, 0x56, 0x57, 0x56, 0x54, 
   0x56, 0x54, 0x55, 0x56, 0x55, 0x55, 0x57, 0x55, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x55, 0x56, 
   0x55, 0x55, 0x55, 0x55, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x53, 0x53, 0x53, 0x52, 0x53, 0x52, 
   0x52, 0x52, 0x52, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4D, 0x4E, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x49, 0x48, 0x49, 0x47, 0x47, 0x47, 0x46, 0x46, 0x46, 0x43, 0x42, 
   0x43, 0x40, 0x40, 0x40, 0x3E, 0x3D, 0x3E, 0x3A, 0x3A, 0x3A, 0x37, 0x37, 0x37, 0x35, 0x35, 0x35, 
   0x32, 0x33, 0x32, 0x2F, 0x31, 0x2F, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 
   0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 
   0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x26, 0x26, 0x26, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 
   0x21, 0x22, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x1F, 0x1F, 0x1F, 0x1C, 0x1D, 0x1C, 0x1A, 
   0x1C, 0x1A, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1A, 
   0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 
   0x1E, 0x1E, 0x1E, 0x1B, 0x1D, 0x1B, 0x1B, 0x1C, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1D, 0x1F, 0x1F, 0x1F, 0x21, 0x21, 0x21, 0x22, 0x21, 
   0x22, 0x23, 0x23, 0x23, 0x25, 0x24, 0x25, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x26, 0x25, 
   0x27, 0x26, 0x27, 0x28, 0x27, 0x28, 0x29, 0x29, 0x29, 0x2B, 0x2B, 0x2B, 0x2D, 0x2E, 0x2D, 0x30, 
   0x30, 0x30, 0x32, 0x32, 0x32, 0x35, 0x33, 0x35, 0x33, 0x35, 0x33, 0x36, 0x35, 0x36, 0x35, 0x36, 
   0x35, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x39, 0x38, 0x39, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 
   0x37, 0x38, 0x37, 0x35, 0x36, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2C, 0x2D, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2A, 0x29, 0x2A, 
   0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x26, 0x25, 
   0x25, 0x25, 0x22, 0x23, 0x22, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x18, 0x19, 0x18, 0x17, 0x17, 0x17, 0x15, 0x14, 0x15, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 
   0x10, 0x11, 0x10, 0x10, 0x11, 0x10, 0x1A, 0x1A, 0x1A, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 
   0x1D, 0x1C, 0x1C, 0x1D, 0x1C, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 0x23, 0x22, 0x23, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 
   0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 
   0x27, 0x27, 0x28, 0x27, 0x28, 0x28, 0x27, 0x28, 0x2A, 0x2A, 0x2A, 0x2B, 0x2C, 0x2B, 0x2F, 0x2E, 
   0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 
   0x2F, 0x30, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 
   0x2C, 0x2D, 0x2D, 0x2C, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x30, 0x2F, 0x33, 0x32, 0x33, 0x35, 0x34, 0x35, 
   0x37, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x3C, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 
   0x3B, 0x3C, 0x3C, 0x3D, 0x3C, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x3F, 0x40, 
   0x3F, 0x3F, 0x40, 0x3F, 0x41, 0x40, 0x41, 0x45, 0x46, 0x45, 0x47, 0x48, 0x47, 0x49, 0x49, 0x49, 
   0x4C, 0x4B, 0x4C, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4F, 0x4E, 0x4F, 0x52, 0x52, 0x52, 0x51, 
   0x51, 0x51, 0x51, 0x52, 0x51, 0x54, 0x55, 0x54, 0x58, 0x59, 0x58, 0x5B, 0x5C, 0x5B, 0x5C, 0x5D, 
   0x5C, 0x5F, 0x5E, 0x5F, 0x5C, 0x5D, 0x5C, 0x5B, 0x5B, 0x5B, 0x59, 0x5A, 0x59, 0x59, 0x59, 0x59, 
   0x59, 0x59, 0x59, 0x5A, 0x59, 0x5A, 0x58, 0x59, 0x58, 0x58, 0x58, 0x58, 0x57, 0x57, 0x57, 0x56, 
   0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x55, 0x56, 0x55, 0x56, 0x55, 
   0x56, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 
   0x50, 0x52, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4E, 0x4F, 0x4E, 0x4E, 0x4D, 0x4E, 0x4B, 
   0x4B, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x49, 0x47, 0x47, 0x47, 0x47, 0x44, 0x45, 0x44, 0x42, 0x43, 
   0x42, 0x40, 0x40, 0x40, 0x3C, 0x3D, 0x3C, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x34, 0x35, 0x34, 
   0x32, 0x33, 0x32, 0x31, 0x30, 0x31, 0x2F, 0x2F, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 
   0x2E, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2C, 
   0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2A, 0x2C, 0x2A, 0x2A, 0x2A, 0x2A, 0x29, 0x2A, 0x29, 0x29, 0x29, 
   0x28, 0x29, 0x28, 0x28, 0x28, 0x28, 0x27, 0x26, 0x27, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x22, 
   0x21, 0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23, 0x22, 0x23, 0x21, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x1F, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 0x1B, 
   0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 0x1B, 0x1B, 0x1D, 0x1C, 
   0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1D, 0x1D, 0x1C, 0x1D, 0x1B, 0x1C, 0x1B, 0x1C, 
   0x1C, 0x1C, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1F, 0x1E, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x23, 0x24, 0x23, 0x25, 0x24, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x27, 0x26, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0x2C, 0x2C, 0x2C, 0x2F, 0x2E, 0x2F, 0x2F, 
   0x30, 0x2F, 0x33, 0x31, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 
   0x35, 0x36, 0x36, 0x36, 0x37, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x39, 0x38, 0x37, 0x38, 0x37, 
   0x35, 0x37, 0x35, 0x35, 0x35, 0x35, 0x34, 0x33, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x32, 
   0x31, 0x32, 0x2F, 0x31, 0x2F, 0x30, 0x30, 0x30, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 0x2E, 
   0x2F, 0x2D, 0x2D, 0x2D, 0x2C, 0x2C, 0x2C, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x29, 0x29, 0x29, 
   0x27, 0x28, 0x27, 0x27, 0x27, 0x27, 0x27, 0x26, 0x27, 0x25, 0x26, 0x25, 0x25, 0x25, 0x25, 0x25, 
   0x24, 0x25, 0x23, 0x23, 0x23, 0x21, 0x20, 0x21, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x1F, 
   0x1F, 0x21, 0x20, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x23, 0x22, 0x22, 0x22, 
   0x23, 0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x1C, 0x1E, 0x1C, 0x1C, 0x1D, 0x1C, 0x1B, 0x1B, 
   0x1B, 0x18, 0x19, 0x18, 0x17, 0x17, 0x17, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x12, 0x13, 0x12, 
   0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1A, 0x1D, 0x1C, 0x1D, 0x1E, 
   0x1C, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 
   0x20, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x23, 0x22, 0x23, 
   0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 
   0x25, 0x25, 0x27, 0x27, 0x27, 0x29, 0x27, 0x29, 0x28, 0x28, 0x28, 0x2A, 0x2A, 0x2A, 0x2C, 0x2B, 
   0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2F, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2F, 0x30, 0x2F, 0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x31, 
   0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 
   0x32, 0x30, 0x32, 0x30, 0x31, 0x31, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2F, 0x2E, 0x2F, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2F, 0x2D, 0x2F, 0x2F, 0x2E, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 
   0x37, 0x38, 0x37, 0x39, 0x3B, 0x39, 0x47, 0x48, 0x47, 0x45, 0x46, 0x45, 0x40, 0x40, 0x40, 0x3C, 
   0x3B, 0x3C, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3A, 0x3B, 0x3F, 0x3E, 0x3F, 0x3E, 0x3E, 
   0x3E, 0x3B, 0x3B, 0x3B, 0x41, 0x41, 0x41, 0x65, 0x66, 0x65, 0x6F, 0x6F, 0x6F, 0x6F, 0x6E, 0x6F, 
   0x7A, 0x7C, 0x7A, 0x59, 0x59, 0x59, 0x55, 0x54, 0x55, 0x75, 0x75, 0x75, 0x77, 0x77, 0x77, 0x58, 
   0x5A, 0x58, 0x5D, 0x5E, 0x5D, 0x6C, 0x6F, 0x6C, 0x86, 0x85, 0x86, 0x89, 0x88, 0x89, 0x89, 0x8B, 
   0x89, 0x8B, 0x8A, 0x8B, 0x64, 0x64, 0x64, 0x5A, 0x5D, 0x5A, 0x59, 0x59, 0x59, 0x58, 0x58, 0x58, 
   0x57, 0x58, 0x57, 0x59, 0x59, 0x59, 0x58, 0x58, 0x58, 0x56, 0x57, 0x56, 0x56, 0x57, 0x56, 0x57, 
   0x56, 0x57, 0x55, 0x56, 0x55, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x55, 0x54, 0x54, 0x54, 
   0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 
   0x52, 0x52, 0x52, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x4F, 0x4F, 0x4E, 0x4F, 0x4E, 0x4E, 0x4E, 0x4C, 
   0x4C, 0x4C, 0x4A, 0x4A, 0x4A, 0x49, 0x49, 0x49, 0x44, 0x46, 0x44, 0x43, 0x44, 0x43, 0x40, 0x42, 
   0x40, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x37, 0x37, 0x37, 0x34, 0x35, 0x34, 
   0x34, 0x33, 0x34, 0x32, 0x31, 0x32, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 
   0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2E, 0x2E, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2A, 0x2B, 0x2A, 0x2B, 0x2A, 0x2A, 0x29, 0x2A, 
   0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x26, 0x26, 0x26, 0x23, 0x24, 0x23, 0x22, 0x22, 0x22, 0x21, 
   0x21, 0x21, 0x21, 0x22, 0x21, 0x23, 0x22, 0x23, 0x23, 0x23, 0x23, 0x21, 0x22, 0x21, 0x21, 0x22, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x1F, 0x20, 0x1F, 0x1D, 0x1E, 0x1D, 0x1D, 
   0x1D, 0x1D, 0x1D, 0x1C, 0x1D, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 
   0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 
   0x1F, 0x1D, 0x1F, 0x1C, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x1B, 0x1A, 0x1B, 
   0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1D, 0x1C, 0x1F, 0x1D, 0x1F, 0x1E, 0x1F, 0x1E, 0x21, 0x21, 
   0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x25, 
   0x27, 0x27, 0x27, 0x27, 0x29, 0x27, 0x2B, 0x29, 0x2B, 0x2B, 0x2B, 0x2B, 0x2E, 0x2E, 0x2E, 0x30, 
   0x31, 0x30, 0x31, 0x31, 0x31, 0x33, 0x32, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x37, 0x36, 0x37, 0x35, 0x36, 0x35, 
   0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x34, 0x34, 0x34, 0x33, 0x34, 0x32, 0x32, 0x32, 0x30, 
   0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2C, 0x2B, 0x2C, 0x2A, 0x2A, 0x2A, 0x28, 0x29, 0x28, 0x29, 0x29, 0x29, 0x28, 0x28, 0x28, 
   0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 
   0x23, 0x24, 0x21, 0x22, 0x21, 0x1F, 0x20, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
   0x1F, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x23, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x24, 
   0x24, 0x22, 0x24, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x20, 0x20, 0x1E, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1C, 0x1C, 0x1C, 0x1A, 0x1A, 
   0x1A, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x14, 0x16, 0x14, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 
   0x12, 0x12, 0x12, 0x12, 0x11, 0x12, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1D, 0x1D, 0x1D, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x21, 0x20, 0x21, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 
   0x20, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1F, 0x1F, 0x21, 0x20, 0x21, 0x21, 0x20, 0x21, 
   0x22, 0x21, 0x22, 0x22, 0x21, 0x22, 0x23, 0x22, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x25, 
   0x25, 0x25, 0x25, 0x26, 0x25, 0x29, 0x28, 0x29, 0x27, 0x27, 0x27, 0x2A, 0x29, 0x2A, 0x2A, 0x29, 
   0x2A, 0x2B, 0x2A, 0x2B, 0x2B, 0x2C, 0x2B, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x2F, 0x31, 
   0x2F, 0x2F, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x32, 0x32, 0x32, 0x32, 0x32, 
   0x32, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x31, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x31, 0x31, 
   0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 
   0x2D, 0x2E, 0x2D, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 0x2C, 0x2D, 0x2C, 0x2E, 
   0x2E, 0x2E, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x2F, 0x33, 0x34, 0x33, 0x35, 0x36, 0x35, 
   0x37, 0x38, 0x37, 0x38, 0x39, 0x38, 0x50, 0x51, 0x50, 0x4A, 0x49, 0x4A, 0x3B, 0x3D, 0x3B, 0x41, 
   0x40, 0x41, 0x42, 0x41, 0x42, 0x4B, 0x49, 0x4B, 0x5A, 0x58, 0x5A, 0x47, 0x47, 0x47, 0x41, 0x42, 
   0x41, 0x53, 0x52, 0x53, 0x64, 0x65, 0x64, 0x6E, 0x6E, 0x6E, 0x83, 0x83, 0x83, 0x8A, 0x8B, 0x8A, 
   0x8D, 0x8D, 0x8D, 0x59, 0x59, 0x59, 0x56, 0x58, 0x56, 0x97, 0x98, 0x97, 0x86, 0x86, 0x86, 0x52, 
   0x52, 0x52, 0x8C, 0x8B, 0x8C, 0x97, 0x97, 0x97, 0xA4, 0xA4, 0xA4, 0xA6, 0xA6, 0xA6, 0xAC, 0xAD, 
   0xAC, 0x9A, 0x9A, 0x9A, 0x59, 0x5B, 0x59, 0x55, 0x56, 0x55, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 
   0x60, 0x63, 0x60, 0x62, 0x63, 0x62, 0x64, 0x63, 0x64, 0x64, 0x67, 0x64, 0x5C, 0x5D, 0x5C, 0x5A, 
   0x58, 0x5A, 0x56, 0x56, 0x56, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 0x54, 0x54, 0x55, 
   0x54, 0x54, 0x55, 0x54, 0x54, 0x54, 0x54, 0x52, 0x53, 0x52, 0x53, 0x52, 0x53, 0x52, 0x52, 0x52, 
   0x50, 0x51, 0x50, 0x51, 0x51, 0x51, 0x4F, 0x50, 0x4F, 0x4F, 0x4F, 0x4F, 0x4E, 0x4E, 0x4E, 0x4B, 
   0x4C, 0x4B, 0x49, 0x4A, 0x49, 0x47, 0x47, 0x47, 0x43, 0x44, 0x43, 0x41, 0x42, 0x41, 0x3F, 0x41, 
   0x3F, 0x3F, 0x3F, 0x3F, 0x3D, 0x3C, 0x3D, 0x3A, 0x3A, 0x3A, 0x38, 0x38, 0x38, 0x36, 0x36, 0x36, 
   0x34, 0x34, 0x34, 0x33, 0x33, 0x33, 0x32, 0x32, 0x32, 0x2F, 0x30, 0x2F, 0x31, 0x30, 0x31, 0x2F, 
   0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 
   0x2E, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 0x29, 0x2A, 0x29, 
   0x29, 0x28, 0x29, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 0x25, 0x25, 0x25, 0x23, 0x22, 0x23, 0x22, 
   0x21, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x21, 0x22, 0x21, 0x22, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x22, 0x21, 0x21, 0x21, 
   0x23, 0x21, 0x23, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x1F, 0x20, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 
   0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1C, 0x1D, 
   0x1C, 0x1E, 0x1D, 0x1E, 0x1E, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1E, 0x1E, 0x1E, 
   0x1E, 0x1E, 0x1E, 0x1E, 0x1D, 0x1E, 0x1B, 0x1C, 0x1B, 0x1A, 0x1B, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
   0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1B, 0x1C, 0x1E, 0x1D, 0x1E, 0x21, 0x1F, 0x21, 0x21, 0x21, 
   0x21, 0x23, 0x22, 0x23, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x27, 0x26, 
   0x27, 0x27, 0x27, 0x2A, 0x28, 0x2A, 0x29, 0x2B, 0x29, 0x2C, 0x2C, 0x2C, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x30, 0x2F, 0x31, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 
   0x35, 0x34, 0x34, 0x34, 0x34, 0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 
   0x35, 0x34, 0x35, 0x35, 0x35, 0x35, 0x34, 0x35, 0x34, 0x33, 0x34, 0x33, 0x31, 0x32, 0x31, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x30, 0x2D, 0x2D, 0x2D, 0x2E, 0x2C, 0x2E, 0x2B, 0x2C, 0x2B, 0x2B, 0x2B, 
   0x2B, 0x2B, 0x2A, 0x2B, 0x29, 0x29, 0x29, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x26, 0x27, 
   0x26, 0x25, 0x26, 0x23, 0x24, 0x23, 0x24, 0x24, 0x24, 0x23, 0x23, 0x23, 0x24, 0x22, 0x24, 0x22, 
   0x22, 0x22, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1F, 0x1E, 0x20, 0x20, 
   0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x24, 0x23, 0x24, 0x25, 0x24, 0x25, 0x24, 0x24, 0x24, 
   0x23, 0x24, 0x23, 0x23, 0x23, 0x23, 0x22, 0x22, 0x22, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 
   0x1F, 0x20, 0x20, 0x1F, 0x20, 0x1E, 0x1E, 0x1E, 0x1E, 0x1C, 0x1E, 0x1B, 0x1B, 0x1B, 0x18, 0x1A, 
   0x18, 0x16, 0x18, 0x16, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x14, 0x15, 0x14, 
   0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x1B, 0x1C, 0x1B, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1F, 
   0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x1F, 
   0x21, 0x1E, 0x1F, 0x1E, 0x1E, 0x1F, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x1F, 0x20, 0x21, 0x20, 0x21, 
   0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x21, 0x23, 0x24, 0x23, 0x24, 0x24, 0x22, 0x24, 0x24, 
   0x25, 0x24, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27, 0x27, 0x29, 0x28, 0x29, 0x29, 0x29, 
   0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2B, 0x2A, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x2D, 
   0x2F, 0x30, 0x2F, 0x31, 0x31, 0x31, 0x33, 0x31, 0x33, 0x31, 0x32, 0x31, 0x33, 0x33, 0x33, 0x33, 
   0x33, 0x33, 0x31, 0x32, 0x31, 0x30, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
   0x30, 0x30, 0x30, 0x30, 0x2F, 0x2F, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2F, 0x2E, 0x2D, 0x2E, 
   0x2C, 0x2E, 0x2C, 0x2C, 0x2D, 0x2C, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2F, 
   0x2F, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2D, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2C, 0x2D, 0x2D, 0x2D, 
   0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2E, 0x32, 0x31, 0x32, 0x33, 0x33, 0x33, 0x35, 0x36, 0x35, 
   0x3A, 0x3A, 0x3A, 0x31, 0x31, 0x31, 0x3C, 0x3D, 0x3C, 0x59, 0x59, 0x59, 0x39, 0x3A, 0x39, 0x3A, 
   0x39, 0x3A, 0x45, 0x46, 0x45, 0x61, 0x61, 0x61, 0x89, 0x89, 0x89, 0x4F, 0x4F, 0x4F, 0x4B, 0x4B, 
   0x4B, 0x80, 0x81, 0x80, 0x86, 0x87, 0x86, 0x77, 0x75, 0x77, 0x82, 0x81, 0x82, 0x89, 0x8B, 0x89, 
   0x80, 0x80, 0x80, 0x59, 0x5A, 0x59, 0x67, 0x69, 0x67, 0x96, 0x98, 0x96, 0x87, 0x86, 0x87, 0x5C, 
   0x5B, 0x5C, 0xA6, 0xA3, 0xA6, 0xA5, 0xA6, 0xA5, 0x9E, 0x9F, 0x9E, 0xA1, 0xA2, 0xA1, 0xA7, 0xA7, 
   0xA7, 0xA1, 0xA3, 0xA1, 0x6F, 0x71, 0x6F, 0x52, 0x54, 0x52, 0x51, 0x50, 0x51, 0x6D, 0x6B, 0x6D, 
   0x86, 0x86, 0x86, 0x8C, 0x8B, 0x8C, 0x90, 0x8F, 0x90, 0x79, 0x7A, 0x79, 0x61, 0x60, 0x61, 0x5C, 
   0x5E, 0x5C, 0x55, 0x56, 0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x55, 
   0x54, 0x54, 0x55, 0x54, 0x55, 0x55, 0x55, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x51, 0x51, 0x51, 
   0x50, 0x51, 0x50, 0x50, 0x51, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x4F, 0x4F, 0x4E, 0x4D, 0x4E, 0x4C, 
   0x4B, 0x4C, 0x4A, 0x49,