MFPKEY_CLIP_YORIG = { { 0x716fe5c8, 0x755c, 0x482f, { 0x8d, 0xf3, 0xb3, 0x1d, 0x53, 0x59, 0xf0, 0xd6 } }, 0x02 }; 
static const PROPERTYKEY MFPKEY_CLIP_WIDTH = { { 0x716fe5c8, 0x755c, 0x482f, { 0x8d, 0xf3, 0xb3, 0x1d, 0x53, 0x59, 0xf0, 0xd6 } }, 0x03 }; 
static const PROPERTYKEY MFPKEY_CLIP_HEIGHT = { { 0x716fe5c8, 0x755c, 0x482f, { 0x8d, 0xf3, 0xb3, 0x1d, 0x53, 0x59, 0xf0, 0xd6 } }, 0x04 }; 
static const PROPERTYKEY MFPKEY_FI_FRAMERATE_VALU_SRC = { { 0x305bca55, 0x1e5b, 0x428e, { 0xa9, 0x4c, 0x65, 0xb9, 0x4d, 0x2, 0x64, 0xed } }, 0x01 }; 
static const PROPERTYKEY MFPKEY_FI_FRAMERATE_SCAL_SRC = { { 0x305bca55, 0x1e5b, 0x428e, { 0xa9, 0x4c, 0x65, 0xb9, 0x4d, 0x2, 0x64, 0xed } }, 0x02 }; 
static const PROPERTYKEY MFPKEY_FI_FRAMERATE_VALU_DST = { { 0x305bca55, 0x1e5b, 0x428e, { 0xa9, 0x4c, 0x65, 0xb9, 0x4d, 0x2, 0x64, 0xed } }, 0x03 }; 
static const PROPERTYKEY MFPKEY_FI_FRAMERATE_SCAL_DST = { { 0x305bca55, 0x1e5b, 0x428e, { 0xa9, 0x4c, 0x65, 0xb9, 0x4d, 0x2, 0x64, 0xed } }, 0x04 }; 
static const PROPERTYKEY MFPKEY_FI_ALLOWED = { { 0x305bca55, 0x1e5b, 0x428e, { 0xa9, 0x4c, 0x65, 0xb9, 0x4d, 0x2, 0x64, 0xed } }, 0x05 }; 
static const PROPERTYKEY MFPKEY_FI_COMPLEXITY = { { 0x305bca55, 0x1e5b, 0x428e, { 0xa9, 0x4c, 0x65, 0xb9, 0x4d, 0x2, 0x64, 0xed } }, 0x06 }; 
static const PROPERTYKEY MFPKEY_RESIZE_SRC_LEFT   = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x01 }; 
static const PROPERTYKEY MFPKEY_RESIZE_SRC_TOP    = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x02 }; 
static const PROPERTYKEY MFPKEY_RESIZE_SRC_WIDTH  = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x03 }; 
static const PROPERTYKEY MFPKEY_RESIZE_SRC_HEIGHT = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x04 }; 
static const PROPERTYKEY MFPKEY_RESIZE_DST_LEFT   = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x05 }; 
static const PROPERTYKEY MFPKEY_RESIZE_DST_TOP    = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x06 }; 
static const PROPERTYKEY MFPKEY_RESIZE_DST_WIDTH  = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x07 }; 
static const PROPERTYKEY MFPKEY_RESIZE_DST_HEIGHT = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x08 }; 
static const PROPERTYKEY MFPKEY_RESIZE_QUALITY    = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x09 }; 
static const PROPERTYKEY MFPKEY_RESIZE_INTERLACE  = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x0a }; 
static const PROPERTYKEY MFPKEY_RESIZE_PANSCANAPX      = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x0b }; 
static const PROPERTYKEY MFPKEY_RESIZE_PANSCANAPY      = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x0c }; 
static const PROPERTYKEY MFPKEY_RESIZE_PANSCANAPWIDTH  = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x0d }; 
static const PROPERTYKEY MFPKEY_RESIZE_PANSCANAPHEIGHT = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x0e }; 
static const PROPERTYKEY MFPKEY_RESIZE_GEOMAPX      = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x0f }; 
static const PROPERTYKEY MFPKEY_RESIZE_GEOMAPY      = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x10 }; 
static const PROPERTYKEY MFPKEY_RESIZE_GEOMAPWIDTH  = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x11 }; 
static const PROPERTYKEY MFPKEY_RESIZE_GEOMAPHEIGHT = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x12 }; 
static const PROPERTYKEY MFPKEY_RESIZE_MINAPX      = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x13 }; 
static const PROPERTYKEY MFPKEY_RESIZE_MINAPY      = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x14 }; 
static const PROPERTYKEY MFPKEY_RESIZE_MINAPWIDTH  = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x15 }; 
static const PROPERTYKEY MFPKEY_RESIZE_MINAPHEIGHT = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x16 }; 
static const PROPERTYKEY MFPKEY_PIXELASPECTRATIO = { { 0x6612a6bc, 0xe57d, 0x407d, { 0xa9, 0x58, 0x28, 0x5d, 0xf0, 0xd9, 0xb4, 0x0 } }, 0x17 }; 
static const PROPERTYKEY MFPKEY_COLORCONV_SRCLEFT = { { 0xdc9100be, 0x1228, 0x416c, { 0x99, 0x48, 0x6f, 0x38, 0xf4, 0x79, 0x65, 0x4f } }, 0x01 }; 
static const PROPERTYKEY MFPKEY_COLORCONV_SRCTOP  = { { 0xdc9100be, 0x1228, 0x416c, { 0x99, 0x48, 0x6f, 0x38, 0xf4, 0x79, 0x65, 0x4f } }, 0x02 }; 
static const PROPERTYKEY MFPKEY_COLORCONV_DSTLEFT = { { 0xdc9100be, 0x1228, 0x416c, { 0x99, 0x48, 0x6f, 0x38, 0xf4, 0x79, 0x65, 0x4f } }, 0x03 }; 
static const PROPERTYKEY MFPKEY_COLORCONV_DSTTOP  = { { 0xdc9100be, 0x1228, 0x416c, { 0x99, 0x48, 0x6f, 0x38, 0xf4, 0x79, 0x65, 0x4f } }, 0x04 }; 
static const PROPERTYKEY MFPKEY_COLORCONV_WIDTH   = { { 0xdc9100be, 0x1228, 0x416c, { 0x99, 0x48, 0x6f, 0x38, 0xf4, 0x79, 0x65, 0x4f } }, 0x05 }; 
static const PROPERTYKEY MFPKEY_COLORCONV_HEIGHT  = { { 0xdc9100be, 0x1228, 0x416c, { 0x99, 0x48, 0x6f, 0x38, 0xf4, 0x79, 0x65, 0x4f } }, 0x06 }; 
static const PROPERTYKEY MFPKEY_COLORCONV_MODE    = { { 0xdc9100be, 0x1228, 0x416c, { 0x99, 0x48, 0x6f, 0x38, 0xf4, 0x79, 0x65, 0x4f } }, 0x07 }; 
static const PROPERTYKEY MFPKEY_DEINTERLACE_PROCESSTYPE     = { { 0x6141f4c3, 0xd3a2, 0x48a9, { 0x96, 0xac, 0x2f, 0x0, 0x14, 0x17, 0x6c, 0x26 } }, 0x01 }; 
static const PROPERTYKEY MFPKEY_DEINTERLACE_TELECINEPATTERN = { { 0x6141f4c3, 0xd3a2, 0x48a9, { 0x96, 0xac, 0x2f, 0x0, 0x14, 0x17, 0x6c, 0x26 } }, 0x02 }; 
static const PROPERTYKEY MFPKEY_DEINTERLACE_LASTFRAME       = { { 0x6141f4c3, 0xd3a2, 0x48a9, { 0x96, 0xac, 0x2f, 0x0, 0x14, 0x17, 0x6c, 0x26 } }, 0x03 }; 
static const PROPERTYKEY MFPKEY_DEINTERLACE_DETELECINE_FLAG = { { 0x6141f4c3, 0xd3a2, 0x48a9, { 0x96, 0xac, 0x2f, 0x0, 0x14, 0x17, 0x6c, 0x26 } }, 0x04 }; 
static const PROPERTYKEY MFPKEY_DEINTERLACE_SMOOTHLEVEL     = { { 0x6141f4c3, 0xd3a2, 0x48a9, { 0x96, 0xac, 0x2f, 0x0, 0x14, 0x17, 0x6c, 0x26 } }, 0x05 }; 
static const PROPERTYKEY MFPKEY_DEINTERLACE_EDGETHRESHOLD   = { { 0x6141f4c3, 0xd3a2, 0x48a9, { 0x96, 0xac, 0x2f, 0x0, 0x14, 0x17, 0x6c, 0x26 } }, 0x06 }; 
static const PROPERTYKEY MFPKEY_DVDEC_SIZE = { { 0x75f2421a, 0xe73a, 0x45b3, { 0xae, 0xf0, 0x91, 0x3c, 0x66, 0x84, 0x64, 0x61 } }, 0x00 }; 
static const PROPERTYKEY MFPKEY_DVENC_FORMAT = { { 0xf449a927, 0x7b22, 0x46ef, {0xb2, 0xe7, 0x4d, 0x2b, 0x72, 0x8b, 0x69, 0x9c } }, 0x00 }; 
#endif // NO_MF_PROPKEYS
#define	g_wszWMVCDatarate	( L"_DATARATE" )

#define	g_wszWMVCKeyframeDistance	( L"_KEYDIST" )

#define	g_wszWMVCCrisp	( L"_CRISP" )

#define	g_wszWMVCDefaultCrisp	( L"_DEFAULTCRISP" )

#define	g_wszWMVCFOURCC	( L"_FOURCC" )

#define	g_wszWMVCTotalWindow	( L"_TOTALWINDOW" )

#define	g_wszWMVCVideoWIndow	( L"_VIDEOWINDOW" )

#define	g_wszWMVCFrameCount	( L"_FRAMECOUNT" )

#define	g_wszWMVCLiveEncode	( L"_LIVEENCODE" )

#define	g_wszWMVCComplexityMode	( L"_COMPLEXITY" )

#define	g_wszWMVCComplexityEx	( L"_COMPLEXITYEX" )

#define	g_wszWMVCComplexityMax	( L"_COMPLEXITYEXMAX" )

#define	g_wszWMVCComplexityLive	( L"_COMPLEXITYEXLIVE" )

#define	g_wszWMVCComplexityOffline	( L"_COMPLEXITYEXOFFLINE" )

#define	g_wszWMVCPacketOverhead	( L"_ASFOVERHEADPERFRAME" )

#define	g_wszWMVCLegacy411InterlacedFormat	( L"_LEGACY411INTERLACEDFORMAT" )

#define	g_wszWMVCPassesRecommended	( L"_PASSESRECOMMENDED" )

#define	g_wszWMVCPassesUsed	( L"_PASSESUSED" )

#define	g_wszWMVCEndOfPass	( L"_ENDOFPASS" )

#define	g_wszWMVCFrameInterpolationSupported	( L"_FRAMEINTERPOLATIONSUPPORTED" )

#define	g_wszWMVCFrameInterpolationEnabled	( L"_FRAMEINTERPOLATIONENABLED" )

#define	g_wszWMVCQPPerFrame	( L"_QPPERFRAME" )

#define	g_wszWMVCReencDuration	( L"_REENCDURATION" )

#define	g_wszWMVCReencStartBufferSize	( L"_REENCSTARTBUFFERSIZE" )

#define	g_wszWMVCReencEndBufferSize	( L"_REENCENDBUFFERSIZE" )

#define	g_wszWMVCReencQPRef	( L"_REENCQPREF" )

#define	g_wszWMVCDenoiseOption	( L"_DENOISEOPTION" )

#define	g_wszWMVCMirrorDisplayOn	( L"_MIRRORDISPLAYON" )

#define	g_wszWMVCChangeFrameRate	( L"_CHANGEFRAMERATE" )

#define	g_wszWMVCChangeBitRate	( L"_CHANGEBITRATE" )

#define	g_wszWMVCChangeMaxBitRate	( L"_CHANGEMAXBITRATE" )

#define	g_wszWMVCLostFrameTimeStamp	( L"_LOSTFRAMETIMESTAMP" )

#define	g_wszWMVCPacketLossRate	( L"_PACKETLOSSRATE" )

#define	g_wszWMVCFullFrameRate	( L"_FULLFRAMERATE" )

#define	g_wszWMVCMotionSearchRange	( L"_MOTIONSEARCHRANGE" )

#define	g_wszWMVCDeltaMVRangeIndex	( L"_DELTAMVRANGEINDEX" )

#define	g_wszWMVCNumBFrames	( L"_NUMBFRAMES" )

#define	g_wszWMVCRDSubpixelSearch	( L"_RDSUBPIXELSEARCH" )

#define	g_wszWMVCBDeltaQP	( L"_BDELTAQP" )

#define	g_wszWMVCForceFrameWidth	( L"_FORCEFRAMEWIDTH" )

#define	g_wszWMVCForceFrameHeight	( L"_FORCEFRAMEHEIGHT" )

#define	g_wszWMVCRangeRedux	( L"_RANGEREDUX" )

#define	g_wszWMVCLookAhead	( L"_LOOKAHEAD" )

#define	g_wszWMVCVideoScaling	( L"_VIDEOSCALING" )

#define	g_wszWMVCPerceptualOptLevel	( L"_PERCEPTUALOPTLEVEL" )

#define	g_wszWMVCForceMedianSetting	( L"_FORCEMEDIANSETTING" )

#define	g_wszWMVCNumThreads	( L"_NUMTHREADS" )

#define	g_wszWMVCLoopFilter	( L"_LOOPFILTER" )

#define	g_wszWMVCNoiseEdgeRemoval	( L"_NOISEEDGEREMOVAL" )

#define	g_wszWMVCVType	( L"_VTYPE" )

#define	g_wszWMVCMaxBitrateRTC	( L"_RMAXRTC" )

#define	g_wszWMVCMotionSearchLevel	( L"_MOTIONSEARCHLEVEL" )

#define	g_wszWMVCMotionMatchMethod	( L"_MOTIONMATCHMETHOD" )

#define	g_wszWMVCMacroblockModeCostMethod	( L"_MACROBLOCKMODECOSTMETHOD" )

#define	g_wszWMVCCompressionOptimizationType	( L"_COMPRESSIONOPTIMIZATIONTYPE" )

#define	g_wszWMVCQueryRecoveryFrametype	( L"_QUERYRECOVERYFRAMETYPE" )

#define	g_wszWMVCRTMode	( L"_RTMODE" )

#define	g_wszWMVCPeriodicalSPDistance	( L"_PERIODICALSPDISTANCE" )

#define	g_wszWMACInputFormatName	( L"_INPUTFORMATNAME" )

#define	g_wszWMACSourceFormatTag	( L"_SOURCEFORMATTAG" )

#define	g_wszWMVCVBREnabled	( L"_VBRENABLED" )

#define	g_wszWMVCVBRQuality	( L"_VBRQUALITY" )

#define	g_wszWMVCAvgBitrate	( L"_RAVG" )

#define	g_wszWMVCMaxBitrate	( L"_RMAX" )

#define	g_wszWMVCBAvg	( L"_BAVG" )

#define	g_wszWMVCBMax	( L"_BMAX" )

#define	g_wszWMVCTotalFrames	( L"_TOTALFRAMES" )

#define	g_wszWMVCCodedFrames	( L"_CODEDFRAMES" )

#define	g_wszWMVCAvgFrameRate	( L"_AVGFRAMERATE" )

#define	g_wszWMVCDecoderComplexityProfile	( L"_DECODERCOMPLEXITYPROFILE" )

#define	g_wszWMVCDecoderComplexityRequested	( L"_DECODERCOMPLEXITYREQUESTED" )

#define	g_wszWMVCBufferFullnessInFirstByte	( L"_BUFFERFULLNESSINFIRSTBYTE" )

#define	g_wszWMACPeakPCMValue	( L"PeakValue" )

#define	g_wszWMACAvgPCMValue	( L"AverageLevel" )

#define	g_wszWMADRCAverageReference	( L"WMADRCAverageReference" )

#define	g_wszWMADRCPeakReference	( L"WMADRCPeakReference" )

#define	g_wszWMADRCAverageTarget	( L"WMADRCAverageTarget" )

#define	g_wszWMADRCPeakTarget	( L"WMADRCPeakTarget" )

#define	g_wszWMACHiResOutput	( L"_HIRESOUTPUT" )

#define	g_wszWMACAvgBytesPerSec	( L"AvgBytesPerSec" )

#define	g_wszWMACSpeakerConfig	( L"SpeakerConfig" )

#define	g_wszWMACMixTable	( L"MixTable" )

#define	g_wszWMACDRCSetting	( L"DynamicRangeControl" )

#define	g_wszWMVCWatermarkConfig	( L"WatermarkConfig" )

#define	g_wszWMVCWatermarkDelay	( L"WatermarkDelay" )

#define	g_wszWMVCInterlacedCodingEnabled	( L"_INTERLACEDCODINGENABLED" )

#define	g_wszWMVCProduceDummyFrames	( L"_PRODUCEDUMMYFRAMES" )

#define	g_wszWMVCDecoderDeinterlacing	( L"_DECODERDEINTERLACING" )

#define	g_wszWMACOriginalWaveFormat	( L"_ORIGINALWAVEFORMAT" )

#define	g_wszWMACIncludeNumPasses	( L"_INCLUDENUMPASSES" )

#define	g_wszWMVCInverseTelecinedInput	( L"_INVERSETELECINEDINPUT" )

#define	g_wszWMVCForcePostProcessMode	( L"_POSTPROCESSMODE" )

#define	g_wszWMVCNumThreadsDec	( L"_NUMTHREADSDEC" )

#define	g_wszWMVCClosedEntryPoint	( L"_CLOSEDENTRYPOINT" )

#define	g_wszWMVCRecoveryFrametype_RTC	( L"_RECOVERYFRAMETYPE_RTC" )

#define	g_wszWMVCEncodercomplexity	( L"_ENCODERCOMPLEXITY" )

#define	g_wszWMVCUserdatasize	( L"_USERDATASIZE" )

#define	g_wszWMVCLetterboxpresent	( L"_LETTERBOXPRESENT" )

#define	g_wszWMVCScenechange	( L"_SCENECHANGE" )

typedef 
enum MF_AUVRHP_ROOMMODEL
    {	VRHP_SMALLROOM	= 0,
	VRHP_MEDIUMROOM	= ( VRHP_SMALLROOM + 1 ) ,
	VRHP_BIGROOM	= ( VRHP_MEDIUMROOM + 1 ) ,
	VRHP_CUSTUMIZEDROOM	= ( VRHP_BIGROOM + 1 ) 
    } 	MF_AUVRHP_ROOMMODEL;

#define AEC_MAX_SYSTEM_MODES 6
typedef 
enum AEC_SYSTEM_MODE
    {	SINGLE_CHANNEL_AEC	= 0,
	ADAPTIVE_ARRAY_ONLY	= ( SINGLE_CHANNEL_AEC + 1 ) ,
	OPTIBEAM_ARRAY_ONLY	= ( ADAPTIVE_ARRAY_ONLY + 1 ) ,
	ADAPTIVE_ARRAY_AND_AEC	= ( OPTIBEAM_ARRAY_ONLY + 1 ) ,
	OPTIBEAM_ARRAY_AND_AEC	= ( ADAPTIVE_ARRAY_AND_AEC + 1 ) ,
	SINGLE_CHANNEL_NSAGC	= ( OPTIBEAM_ARRAY_AND_AEC + 1 ) ,
	MODE_NOT_SET	= ( SINGLE_CHANNEL_NSAGC + 1 ) 
    } 	AEC_SYSTEM_MODE;

typedef struct tagAecQualityMetrics_Struct
    {
    LONGLONG i64Timestamp;
    BYTE ConvergenceFlag;
    BYTE MicClippedFlag;
    BYTE MicSilenceFlag;
    BYTE PstvFeadbackFlag;
    BYTE SpkClippedFlag;
    BYTE SpkMuteFlag;
    BYTE GlitchFlag;
    BYTE DoubleTalkFlag;
    ULONG uGlitchCount;
    ULONG uMicClipCount;
    float fDuration;
    float fTSVariance;
    float fTSDriftRate;
    float fVoiceLevel;
    float fNoiseLevel;
    float fERLE;
    float fAvgERLE;
    DWORD dwReserved;
    } 	AecQualityMetrics_Struct;

typedef 
enum AEC_VAD_MODE
    {	AEC_VAD_DISABLED	= 0,
	AEC_VAD_NORMAL	= ( AEC_VAD_DISABLED + 1 ) ,
	AEC_VAD_FOR_AGC	= ( AEC_VAD_NORMAL + 1 ) ,
	AEC_VAD_FOR_SILENCE_SUPPRESSION	= ( AEC_VAD_FOR_AGC + 1 ) 
    } 	AEC_VAD_MODE;

typedef 
enum AEC_INPUT_STREAM
    {	AEC_CAPTURE_STREAM	= 0,
	AEC_REFERENCE_STREAM	= 1
    } 	AEC_INPUT_STREAM;

typedef 
enum MIC_ARRAY_MODE
    {	MICARRAY_SINGLE_CHAN	= 0,
	MICARRAY_SIMPLE_SUM	= 0x100,
	MICARRAY_SINGLE_BEAM	= 0x200,
	MICARRAY_FIXED_BEAM	= 0x400,
	MICARRAY_EXTERN_BEAM	= 0x800
    } 	MIC_ARRAY_MODE;

#define FACILITY_WMAAECMA  0x7CC
#define WMAAECMA_E_NO_ACTIVE_RENDER_STREAM 0x87CC000A
DEFINE_GUID(MEDIASUBTYPE_Y41T, 0x54313459, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_Y42T, 0x54323459, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_NV11, 0x3131564E, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_V216, 0x36313256, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_V410, 0x30313456, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_v210, 0x30313276, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_I420, 0x30323449, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WVC1, 0x31435657, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wvc1, 0x31637677, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMVA, 0x41564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wmva, 0x61766D77, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMVB, 0x42564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wmvb, 0x62766D77, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMVR, 0x52564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wmvr, 0x72766D77, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMVP, 0x50564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wmvp, 0x70766D77, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WVP2, 0x32505657, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wvp2, 0x32707677, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMV3, 0x33564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wmv3, 0x33766D77, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMV2, 0x32564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wmv2, 0x32766D77, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMV1, 0x31564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_wmv1, 0x31766D77, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MPG4, 0x3447504D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_mpg4, 0x3467706D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MP42, 0x3234504D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_mp42, 0x3234706D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MP43, 0x3334504D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_mp43, 0x3334706D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MP4S, 0x5334504D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_mp4s, 0x7334706D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_M4S2, 0x3253344D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_m4s2, 0x3273346D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MSS1, 0x3153534D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MSS2, 0x3253534D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MSAUDIO1, 0x00000160, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMAUDIO2, 0x00000161, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMAUDIO3, 0x00000162, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMAUDIO_LOSSLESS, 0x00000163, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_WMASPDIF, 0x00000164, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MPEG_ADTS_AAC, 0x00001600, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_MPEG_RAW_AAC,  0x00001601, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_NOKIA_MPEG_ADTS_AAC, 0x00001608, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_NOKIA_MPEG_RAW_AAC,  0x00001609, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_VODAFONE_MPEG_ADTS_AAC, 0x0000160A, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_VODAFONE_MPEG_RAW_AAC,  0x0000160B, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_DOLBY_DDPLUS,  0xa7fb87af, 0x2d02, 0x42fb, 0xa4, 0xd4, 0x5, 0xcd, 0x93, 0x84, 0x3b, 0xdd);
DEFINE_GUID(MEDIASUBTYPE_DOLBY_TRUEHD,  0xeb27cec4, 0x163e, 0x4ca3, 0x8b, 0x74, 0x8e, 0x25, 0xf9, 0x1b, 0x51, 0x7e);
DEFINE_GUID(MEDIASUBTYPE_DTS_HD,        0xa2e58eb7, 0xfa9, 0x48bb, 0xa4, 0xc, 0xfa, 0xe, 0x15, 0x6d, 0x6, 0x45);


extern RPC_IF_HANDLE __MIDL_itf_wmcodecdsp_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmcodecdsp_0000_0017_v0_0_s_ifspec;


#ifndef __WMCodecDSPCLSIDTypeLib_LIBRARY_DEFINED__
#define __WMCodecDSPCLSIDTypeLib_LIBRARY_DEFINED__

/* library WMCodecDSPCLSIDTypeLib */
/* [uuid] */ 


EXTERN_C const IID LIBID_WMCodecDSPCLSIDTypeLib;

EXTERN_C const CLSID CLSID_CMpeg4DecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("f371728a-6052-4d47-827c-d039335dfe0a")
CMpeg4DecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMpeg43DecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("cba9e78b-49a3-49ea-93d4-6bcba8c4de07")
CMpeg43DecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMpeg4sDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("2a11bae2-fe6e-4249-864b-9e9ed6e8dbc2")
CMpeg4sDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMpeg4EncMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("24f258d8-c651-4042-93e4-ca654abb682c")
CMpeg4EncMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMpeg4sEncMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("6ec5a7be-d81e-4f9e-ada3-cd1bf262b6d8")
CMpeg4sEncMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMSSCDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("7bafb3b1-d8f4-4279-9253-27da423108de")
CMSSCDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMSSCEncMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("8cb9cc06-d139-4ae6-8bb4-41e612e141d5")
CMSSCEncMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMSSCEncMediaObject2;

#ifdef __cplusplus

class DECLSPEC_UUID("f7ffe0a0-a4f5-44b5-949e-15ed2bc66f9d")
CMSSCEncMediaObject2;
#endif

EXTERN_C const CLSID CLSID_CWMADecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("2eeb4adf-4578-4d10-bca7-bb955f56320a")
CWMADecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWMAEncMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("70f598e9-f4ab-495a-99e2-a7c4d3d89abf")
CWMAEncMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWMSPDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("874131cb-4ecc-443b-8948-746b89595d20")
CWMSPDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWMSPEncMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("67841b03-c689-4188-ad3f-4c9ebeec710b")
CWMSPEncMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWMSPEncMediaObject2;

#ifdef __cplusplus

class DECLSPEC_UUID("1f1f4e1a-2252-4063-84bb-eee75f8856d5")
CWMSPEncMediaObject2;
#endif

EXTERN_C const CLSID CLSID_CWMVDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("82d353df-90bd-4382-8bc2-3f6192b76e34")
CWMVDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWMVEncMediaObject2;

#ifdef __cplusplus

class DECLSPEC_UUID("96b57cdd-8966-410c-bb1f-c97eea765c04")
CWMVEncMediaObject2;
#endif

EXTERN_C const CLSID CLSID_CWMVXEncMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("7e320092-596a-41b2-bbeb-175d10504eb6")
CWMVXEncMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWMV9EncMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("d23b90d0-144f-46bd-841d-59e4eb19dc59")
CWMV9EncMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWVC1DecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("c9bfbccf-e60e-4588-a3df-5a03b1fd9585")
CWVC1DecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWVC1EncMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("44653D0D-8CCA-41e7-BACA-884337B747AC")
CWVC1EncMediaObject;
#endif

EXTERN_C const CLSID CLSID_CDeColorConvMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("49034c05-f43c-400f-84c1-90a683195a3a")
CDeColorConvMediaObject;
#endif

EXTERN_C const CLSID CLSID_CDVDecoderMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("e54709c5-1e17-4c8d-94e7-478940433584")
CDVDecoderMediaObject;
#endif

EXTERN_C const CLSID CLSID_CDVEncoderMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("c82ae729-c327-4cce-914d-8171fefebefb")
CDVEncoderMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMpeg2DecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("863d66cd-cdce-4617-b47f-c8929cfc28a6")
CMpeg2DecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CPK_DS_MPEG2Decoder;

#ifdef __cplusplus

class DECLSPEC_UUID("9910c5cd-95c9-4e06-865a-efa1c8016bf4")
CPK_DS_MPEG2Decoder;
#endif

EXTERN_C const CLSID CLSID_CAC3DecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("03d7c802-ecfa-47d9-b268-5fb3e310dee4")
CAC3DecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CPK_DS_AC3Decoder;

#ifdef __cplusplus

class DECLSPEC_UUID("6c9c69d6-0ffc-4481-afdb-cdf1c79c6f3e")
CPK_DS_AC3Decoder;
#endif

EXTERN_C const CLSID CLSID_CMP3DecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("bbeea841-0a63-4f52-a7ab-a9b3a84ed38a")
CMP3DecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CResamplerMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("f447b69e-1884-4a7e-8055-346f74d6edb3")
CResamplerMediaObject;
#endif

EXTERN_C const CLSID CLSID_CResizerMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("d3ec8b8b-7728-4fd8-9fe0-7b67d19f73a3")
CResizerMediaObject;
#endif

EXTERN_C const CLSID CLSID_CInterlaceMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("b5a89c80-4901-407b-9abc-90d9a644bb46")
CInterlaceMediaObject;
#endif

EXTERN_C const CLSID CLSID_CWMAudioLFXAPO;

#ifdef __cplusplus

class DECLSPEC_UUID("62dc1a93-ae24-464c-a43e-452f824c4250")
CWMAudioLFXAPO;
#endif

EXTERN_C const CLSID CLSID_CWMAudioGFXAPO;

#ifdef __cplusplus

class DECLSPEC_UUID("637c490d-eee3-4c0a-973f-371958802da2")
CWMAudioGFXAPO;
#endif

EXTERN_C const CLSID CLSID_CWMAudioSpdTxDMO;

#ifdef __cplusplus

class DECLSPEC_UUID("5210f8e4-b0bb-47c3-a8d9-7b2282cc79ed")
CWMAudioSpdTxDMO;
#endif

EXTERN_C const CLSID CLSID_CWMAudioAEC;

#ifdef __cplusplus

class DECLSPEC_UUID("745057c7-f353-4f2d-a7ee-58434477730e")
CWMAudioAEC;
#endif

EXTERN_C const CLSID CLSID_CClusterDetectorDmo;

#ifdef __cplusplus

class DECLSPEC_UUID("36e820c4-165a-4521-863c-619e1160d4d4")
CClusterDetectorDmo;
#endif

EXTERN_C const CLSID CLSID_CColorControlDmo;

#ifdef __cplusplus

class DECLSPEC_UUID("798059f0-89ca-4160-b325-aeb48efe4f9a")
CColorControlDmo;
#endif

EXTERN_C const CLSID CLSID_CColorConvertDMO;

#ifdef __cplusplus

class DECLSPEC_UUID("98230571-0087-4204-b020-3282538e57d3")
CColorConvertDMO;
#endif

EXTERN_C const CLSID CLSID_CColorLegalizerDmo;

#ifdef __cplusplus

class DECLSPEC_UUID("fdfaa753-e48e-4e33-9c74-98a27fc6726a")
CColorLegalizerDmo;
#endif

EXTERN_C const CLSID CLSID_CFrameInterpDMO;

#ifdef __cplusplus

class DECLSPEC_UUID("0a7cfe1b-6ab5-4334-9ed8-3f97cb37daa1")
CFrameInterpDMO;
#endif

EXTERN_C const CLSID CLSID_CFrameRateConvertDmo;

#ifdef __cplusplus

class DECLSPEC_UUID("01f36ce2-0907-4d8b-979d-f151be91c883")
CFrameRateConvertDmo;
#endif

EXTERN_C const CLSID CLSID_CResizerDMO;

#ifdef __cplusplus

class DECLSPEC_UUID("1ea1ea14-48f4-4054-ad1a-e8aee10ac805")
CResizerDMO;
#endif

EXTERN_C const CLSID CLSID_CShotDetectorDmo;

#ifdef __cplusplus

class DECLSPEC_UUID("56aefacd-110c-4397-9292-b0a0c61b6750")
CShotDetectorDmo;
#endif

EXTERN_C const CLSID CLSID_CSmpteTransformsDmo;

#ifdef __cplusplus

class DECLSPEC_UUID("bde6388b-da25-485d-ba7f-fabc28b20318")
CSmpteTransformsDmo;
#endif

EXTERN_C const CLSID CLSID_CThumbnailGeneratorDmo;

#ifdef __cplusplus

class DECLSPEC_UUID("559c6bad-1ea8-4963-a087-8a6810f9218b")
CThumbnailGeneratorDmo;
#endif

EXTERN_C const CLSID CLSID_CTocGeneratorDmo;

#ifdef __cplusplus

class DECLSPEC_UUID("4dda1941-77a0-4fb1-a518-e2185041d70c")
CTocGeneratorDmo;
#endif

EXTERN_C const CLSID CLSID_CMPEGAACDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("8DDE1772-EDAD-41c3-B4BE-1F30FB4EE0D6")
CMPEGAACDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CNokiaAACDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("3CB2BDE4-4E29-4c44-A73E-2D7C2C46D6EC")
CNokiaAACDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CVodafoneAACDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("7F36F942-DCF3-4d82-9289-5B1820278F7C")
CVodafoneAACDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CXeonAACCCDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("A74E98F2-52D6-4b4e-885B-E0A6CA4F187A")
CXeonAACCCDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CNokiaAACCCDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("EABF7A6F-CCBA-4d60-8620-B152CC977263")
CNokiaAACCCDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CVodafoneAACCCDecMediaObject;

#ifdef __cplusplus

class DECLSPEC_UUID("7E76BF7F-C993-4e26-8FAB-470A70C0D59C")
CVodafoneAACCCDecMediaObject;
#endif

EXTERN_C const CLSID CLSID_CMPEG2EncoderDS;

#ifdef __cplusplus

class DECLSPEC_UUID("5F5AFF4A-2F7F-4279-88C2-CD88EB39D144")
CMPEG2EncoderDS;
#endif

EXTERN_C const CLSID CLSID_CMPEG2EncoderVideoDS;

#ifdef __cplusplus

class DECLSPEC_UUID("42150cd9-ca9a-4ea5-9939-30ee037f6e74")
CMPEG2EncoderVideoDS;
#endif

EXTERN_C const CLSID CLSID_CMPEG2EncoderAudioDS;

#ifdef __cplusplus

class DECLSPEC_UUID("acd453bc-c58a-44d1-bbf5-bfb325be2d78")
CMPEG2EncoderAudioDS;
#endif

EXTERN_C const CLSID CLSID_CMPEG2AudDecoderDS;

#ifdef __cplusplus

class DECLSPEC_UUID("E1F1A0B8-BEEE-490d-BA7C-066C40B5E2B9")
CMPEG2AudDecoderDS;
#endif

EXTERN_C const CLSID CLSID_CMPEG2VidDecoderDS;

#ifdef __cplusplus

class DECLSPEC_UUID("212690FB-83E5-4526-8FD7-74478B7939CD")
CMPEG2VidDecoderDS;
#endif

EXTERN_C const CLSID CLSID_CMSAC3Enc;

#ifdef __cplusplus

class DECLSPEC_UUID("C6B400E2-20A7-4e58-A2FE-24619682CE6C")
CMSAC3Enc;
#endif
#endif /* __WMCodecDSPCLSIDTypeLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmdmlog_i.c ===
/* this file contains the actual definitions of */
/* the IIDs and CLSIDs */

/* link this file in with the server and any clients */


/* File created by MIDL compiler version 5.01.0164 */
/* at Mon Mar 26 01:45:23 2001
 */
/* Compiler settings for .\wmdmlog.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32, ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
*/
//@@MIDL_FILE_HEADING(  )
#ifdef __cplusplus
extern "C"{
#endif 


#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

const IID IID_IWMDMLogger = {0x110A3200,0x5A79,0x11d3,{0x8D,0x78,0x44,0x45,0x53,0x54,0x00,0x00}};


const IID LIBID_WMDMLogLib = {0x110A3201,0x5A79,0x11d3,{0x8D,0x78,0x44,0x45,0x53,0x54,0x00,0x00}};


const CLSID CLSID_WMDMLogger = {0x110A3202,0x5A79,0x11d3,{0x8D,0x78,0x44,0x45,0x53,0x54,0x00,0x00}};


#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmdrmdeviceapp.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0365 */
/* Compiler settings for wmdrmdeviceapp.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmdrmdeviceapp_h__
#define __wmdrmdeviceapp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMDRMDeviceApp_FWD_DEFINED__
#define __IWMDRMDeviceApp_FWD_DEFINED__
typedef interface IWMDRMDeviceApp IWMDRMDeviceApp;
#endif 	/* __IWMDRMDeviceApp_FWD_DEFINED__ */


#ifndef __IWMDRMDeviceApp2_FWD_DEFINED__
#define __IWMDRMDeviceApp2_FWD_DEFINED__
typedef interface IWMDRMDeviceApp2 IWMDRMDeviceApp2;
#endif 	/* __IWMDRMDeviceApp2_FWD_DEFINED__ */


#ifndef __WMDRMDeviceApp_FWD_DEFINED__
#define __WMDRMDeviceApp_FWD_DEFINED__

#ifdef __cplusplus
typedef class WMDRMDeviceApp WMDRMDeviceApp;
#else
typedef struct WMDRMDeviceApp WMDRMDeviceApp;
#endif /* __cplusplus */

#endif 	/* __WMDRMDeviceApp_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "wmdm.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_wmdrmdeviceapp_0000 */
/* [local] */ 

#include <mswmdm.h>
// WMDRM Device status flags
#define WMDRM_DEVICE_ISWMDRM                 0x00000001L
#define WMDRM_DEVICE_NEEDCLOCK               0x00000002L
#define WMDRM_DEVICE_REVOKED                 0x00000004L
#define WMDRM_CLIENT_NEEDINDIV               0x00000008L
#define WMDRM_DEVICE_REFRESHCLOCK            0x00000010L
// WMDRM Query Device flags
#define WMDRM_QUERY_DEVICE_ISWMDRM           0x00000001L
#define WMDRM_QUERY_DEVICE_CLOCKSTATUS       0x00000002L
#define WMDRM_QUERY_DEVICE_ISREVOKED         0x00000004L
#define WMDRM_QUERY_CLIENT_INDIVSTATUS       0x00000008L
// ProcessMeterResponse flags
#define WMDRM_METER_RESPONSE_ALL             0x00000000L
#define WMDRM_METER_RESPONSE_PARTIAL         0x00000001L


extern RPC_IF_HANDLE __MIDL_itf_wmdrmdeviceapp_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmdrmdeviceapp_0000_v0_0_s_ifspec;

#ifndef __IWMDRMDeviceApp_INTERFACE_DEFINED__
#define __IWMDRMDeviceApp_INTERFACE_DEFINED__

/* interface IWMDRMDeviceApp */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMDeviceApp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("93AFDB44-B1E1-411d-B89B-75AD4F97882B")
    IWMDRMDeviceApp : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GenerateMeterChallenge( 
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ BSTR bstrMeterCert,
            /* [out] */ BSTR *pbstrMeterURL,
            /* [out] */ BSTR *pbstrMeterData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProcessMeterResponse( 
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ BYTE *pbResponse,
            /* [in] */ DWORD cbResponse,
            /* [out] */ DWORD *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryDeviceStatus( 
            /* [in] */ IWMDMDevice *pDevice,
            /* [out] */ DWORD *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AcquireDeviceData( 
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ IWMDMProgress3 *pProgressCallback,
            /* [in] */ DWORD dwFlags,
            /* [out] */ DWORD *pdwStatus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SynchronizeLicenses( 
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ IWMDMProgress3 *pProgressCallback,
            /* [in] */ DWORD cMinCountThreshold,
            /* [in] */ DWORD cMinHoursThreshold) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMDeviceAppVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMDeviceApp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMDeviceApp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMDeviceApp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateMeterChallenge )( 
            IWMDRMDeviceApp * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ BSTR bstrMeterCert,
            /* [out] */ BSTR *pbstrMeterURL,
            /* [out] */ BSTR *pbstrMeterData);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessMeterResponse )( 
            IWMDRMDeviceApp * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ BYTE *pbResponse,
            /* [in] */ DWORD cbResponse,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *QueryDeviceStatus )( 
            IWMDRMDeviceApp * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [out] */ DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *AcquireDeviceData )( 
            IWMDRMDeviceApp * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ IWMDMProgress3 *pProgressCallback,
            /* [in] */ DWORD dwFlags,
            /* [out] */ DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *SynchronizeLicenses )( 
            IWMDRMDeviceApp * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ IWMDMProgress3 *pProgressCallback,
            /* [in] */ DWORD cMinCountThreshold,
            /* [in] */ DWORD cMinHoursThreshold);
        
        END_INTERFACE
    } IWMDRMDeviceAppVtbl;

    interface IWMDRMDeviceApp
    {
        CONST_VTBL struct IWMDRMDeviceAppVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMDeviceApp_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IWMDRMDeviceApp_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IWMDRMDeviceApp_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IWMDRMDeviceApp_GenerateMeterChallenge(This,pDevice,bstrMeterCert,pbstrMeterURL,pbstrMeterData)	\
    (This)->lpVtbl -> GenerateMeterChallenge(This,pDevice,bstrMeterCert,pbstrMeterURL,pbstrMeterData)

#define IWMDRMDeviceApp_ProcessMeterResponse(This,pDevice,pbResponse,cbResponse,pdwFlags)	\
    (This)->lpVtbl -> ProcessMeterResponse(This,pDevice,pbResponse,cbResponse,pdwFlags)

#define IWMDRMDeviceApp_QueryDeviceStatus(This,pDevice,pdwStatus)	\
    (This)->lpVtbl -> QueryDeviceStatus(This,pDevice,pdwStatus)

#define IWMDRMDeviceApp_AcquireDeviceData(This,pDevice,pProgressCallback,dwFlags,pdwStatus)	\
    (This)->lpVtbl -> AcquireDeviceData(This,pDevice,pProgressCallback,dwFlags,pdwStatus)

#define IWMDRMDeviceApp_SynchronizeLicenses(This,pDevice,pProgressCallback,cMinCountThreshold,cMinHoursThreshold)	\
    (This)->lpVtbl -> SynchronizeLicenses(This,pDevice,pProgressCallback,cMinCountThreshold,cMinHoursThreshold)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMDRMDeviceApp_GenerateMeterChallenge_Proxy( 
    IWMDRMDeviceApp * This,
    /* [in] */ IWMDMDevice *pDevice,
    /* [in] */ BSTR bstrMeterCert,
    /* [out] */ BSTR *pbstrMeterURL,
    /* [out] */ BSTR *pbstrMeterData);


void __RPC_STUB IWMDRMDeviceApp_GenerateMeterChallenge_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMDRMDeviceApp_ProcessMeterResponse_Proxy( 
    IWMDRMDeviceApp * This,
    /* [in] */ IWMDMDevice *pDevice,
    /* [in] */ BYTE *pbResponse,
    /* [in] */ DWORD cbResponse,
    /* [out] */ DWORD *pdwFlags);


void __RPC_STUB IWMDRMDeviceApp_ProcessMeterResponse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMDRMDeviceApp_QueryDeviceStatus_Proxy( 
    IWMDRMDeviceApp * This,
    /* [in] */ IWMDMDevice *pDevice,
    /* [out] */ DWORD *pdwStatus);


void __RPC_STUB IWMDRMDeviceApp_QueryDeviceStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMDRMDeviceApp_AcquireDeviceData_Proxy( 
    IWMDRMDeviceApp * This,
    /* [in] */ IWMDMDevice *pDevice,
    /* [in] */ IWMDMProgress3 *pProgressCallback,
    /* [in] */ DWORD dwFlags,
    /* [out] */ DWORD *pdwStatus);


void __RPC_STUB IWMDRMDeviceApp_AcquireDeviceData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMDRMDeviceApp_SynchronizeLicenses_Proxy( 
    IWMDRMDeviceApp * This,
    /* [in] */ IWMDMDevice *pDevice,
    /* [in] */ IWMDMProgress3 *pProgressCallback,
    /* [in] */ DWORD cMinCountThreshold,
    /* [in] */ DWORD cMinHoursThreshold);


void __RPC_STUB IWMDRMDeviceApp_SynchronizeLicenses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMDRMDeviceApp_INTERFACE_DEFINED__ */


#ifndef __IWMDRMDeviceApp2_INTERFACE_DEFINED__
#define __IWMDRMDeviceApp2_INTERFACE_DEFINED__

/* interface IWMDRMDeviceApp2 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMDeviceApp2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("600D6E55-DEA5-4e4c-9C3A-6BD642A45B9D")
    IWMDRMDeviceApp2 : public IWMDRMDeviceApp
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryDeviceStatus2( 
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ DWORD dwFlags,
            /* [out] */ DWORD *pdwStatus) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMDeviceApp2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMDeviceApp2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMDeviceApp2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMDeviceApp2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateMeterChallenge )( 
            IWMDRMDeviceApp2 * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ BSTR bstrMeterCert,
            /* [out] */ BSTR *pbstrMeterURL,
            /* [out] */ BSTR *pbstrMeterData);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessMeterResponse )( 
            IWMDRMDeviceApp2 * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ BYTE *pbResponse,
            /* [in] */ DWORD cbResponse,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *QueryDeviceStatus )( 
            IWMDRMDeviceApp2 * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [out] */ DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *AcquireDeviceData )( 
            IWMDRMDeviceApp2 * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ IWMDMProgress3 *pProgressCallback,
            /* [in] */ DWORD dwFlags,
            /* [out] */ DWORD *pdwStatus);
        
        HRESULT ( STDMETHODCALLTYPE *SynchronizeLicenses )( 
            IWMDRMDeviceApp2 * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ IWMDMProgress3 *pProgressCallback,
            /* [in] */ DWORD cMinCountThreshold,
            /* [in] */ DWORD cMinHoursThreshold);
        
        HRESULT ( STDMETHODCALLTYPE *QueryDeviceStatus2 )( 
            IWMDRMDeviceApp2 * This,
            /* [in] */ IWMDMDevice *pDevice,
            /* [in] */ DWORD dwFlags,
            /* [out] */ DWORD *pdwStatus);
        
        END_INTERFACE
    } IWMDRMDeviceApp2Vtbl;

    interface IWMDRMDeviceApp2
    {
        CONST_VTBL struct IWMDRMDeviceApp2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMDeviceApp2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IWMDRMDeviceApp2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IWMDRMDeviceApp2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IWMDRMDeviceApp2_GenerateMeterChallenge(This,pDevice,bstrMeterCert,pbstrMeterURL,pbstrMeterData)	\
    (This)->lpVtbl -> GenerateMeterChallenge(This,pDevice,bstrMeterCert,pbstrMeterURL,pbstrMeterData)

#define IWMDRMDeviceApp2_ProcessMeterResponse(This,pDevice,pbResponse,cbResponse,pdwFlags)	\
    (This)->lpVtbl -> ProcessMeterResponse(This,pDevice,pbResponse,cbResponse,pdwFlags)

#define IWMDRMDeviceApp2_QueryDeviceStatus(This,pDevice,pdwStatus)	\
    (This)->lpVtbl -> QueryDeviceStatus(This,pDevice,pdwStatus)

#define IWMDRMDeviceApp2_AcquireDeviceData(This,pDevice,pProgressCallback,dwFlags,pdwStatus)	\
    (This)->lpVtbl -> AcquireDeviceData(This,pDevice,pProgressCallback,dwFlags,pdwStatus)

#define IWMDRMDeviceApp2_SynchronizeLicenses(This,pDevice,pProgressCallback,cMinCountThreshold,cMinHoursThreshold)	\
    (This)->lpVtbl -> SynchronizeLicenses(This,pDevice,pProgressCallback,cMinCountThreshold,cMinHoursThreshold)


#define IWMDRMDeviceApp2_QueryDeviceStatus2(This,pDevice,dwFlags,pdwStatus)	\
    (This)->lpVtbl -> QueryDeviceStatus2(This,pDevice,dwFlags,pdwStatus)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMDRMDeviceApp2_QueryDeviceStatus2_Proxy( 
    IWMDRMDeviceApp2 * This,
    /* [in] */ IWMDMDevice *pDevice,
    /* [in] */ DWORD dwFlags,
    /* [out] */ DWORD *pdwStatus);


void __RPC_STUB IWMDRMDeviceApp2_QueryDeviceStatus2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMDRMDeviceApp2_INTERFACE_DEFINED__ */



#ifndef __WMDRMDeviceAppLib_LIBRARY_DEFINED__
#define __WMDRMDeviceAppLib_LIBRARY_DEFINED__

/* library WMDRMDeviceAppLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_WMDRMDeviceAppLib;

EXTERN_C const CLSID CLSID_WMDRMDeviceApp;

#ifdef __cplusplus

class DECLSPEC_UUID("5C140836-43DE-11d3-847D-00C04F79DBC0")
WMDRMDeviceApp;
#endif
#endif /* __WMDRMDeviceAppLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmdxva.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0416 */
/* Compiler settings for wmdxva.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmdxva_h__
#define __wmdxva_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMPlayerTimestampHook_FWD_DEFINED__
#define __IWMPlayerTimestampHook_FWD_DEFINED__
typedef interface IWMPlayerTimestampHook IWMPlayerTimestampHook;
#endif 	/* __IWMPlayerTimestampHook_FWD_DEFINED__ */


#ifndef __IWMCodecAMVideoAccelerator_FWD_DEFINED__
#define __IWMCodecAMVideoAccelerator_FWD_DEFINED__
typedef interface IWMCodecAMVideoAccelerator IWMCodecAMVideoAccelerator;
#endif 	/* __IWMCodecAMVideoAccelerator_FWD_DEFINED__ */


#ifndef __IWMCodecVideoAccelerator_FWD_DEFINED__
#define __IWMCodecVideoAccelerator_FWD_DEFINED__
typedef interface IWMCodecVideoAccelerator IWMCodecVideoAccelerator;
#endif 	/* __IWMCodecVideoAccelerator_FWD_DEFINED__ */


/* header files for imported files */
#include "mediaobj.h"
#include "videoacc.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_wmdxva_0000 */
/* [local] */ 

//=========================================================================
//
// Microsoft Windows Media Technologies
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//=========================================================================
EXTERN_GUID( IID_IWMPlayerTimestampHook,   0x28580dda, 0xd98e, 0x48d0, 0xb7, 0xae, 0x69, 0xe4, 0x73, 0xa0, 0x28, 0x25);
EXTERN_GUID( IID_IWMCodecVideoAccelerator, 0x990641b0, 0x739f, 0x4e94, 0xa8, 0x08, 0x98, 0x88, 0xda, 0x8f, 0x75, 0xaf);
EXTERN_GUID( IID_IWMCodecAMVideoAccelerator, 0xd98ee251, 0x34e0, 0x4a2d, 0x93, 0x12, 0x9b, 0x4c, 0x78, 0x8d, 0x9f, 0xa1);


extern RPC_IF_HANDLE __MIDL_itf_wmdxva_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmdxva_0000_v0_0_s_ifspec;

#ifndef __IWMPlayerTimestampHook_INTERFACE_DEFINED__
#define __IWMPlayerTimestampHook_INTERFACE_DEFINED__

/* interface IWMPlayerTimestampHook */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPlayerTimestampHook;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("28580dda-d98e-48d0-b7ae-69e473a02825")
    IWMPlayerTimestampHook : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE MapTimestamp( 
            /* [in] */ REFERENCE_TIME rtIn,
            /* [out] */ REFERENCE_TIME *prtOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPlayerTimestampHookVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPlayerTimestampHook * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPlayerTimestampHook * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPlayerTimestampHook * This);
        
        HRESULT ( STDMETHODCALLTYPE *MapTimestamp )( 
            IWMPlayerTimestampHook * This,
            /* [in] */ REFERENCE_TIME rtIn,
            /* [out] */ REFERENCE_TIME *prtOut);
        
        END_INTERFACE
    } IWMPlayerTimestampHookVtbl;

    interface IWMPlayerTimestampHook
    {
        CONST_VTBL struct IWMPlayerTimestampHookVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPlayerTimestampHook_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPlayerTimestampHook_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPlayerTimestampHook_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPlayerTimestampHook_MapTimestamp(This,rtIn,prtOut)	\
    ( (This)->lpVtbl -> MapTimestamp(This,rtIn,prtOut) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMPlayerTimestampHook_MapTimestamp_Proxy( 
    IWMPlayerTimestampHook * This,
    /* [in] */ REFERENCE_TIME rtIn,
    /* [out] */ REFERENCE_TIME *prtOut);


void __RPC_STUB IWMPlayerTimestampHook_MapTimestamp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMPlayerTimestampHook_INTERFACE_DEFINED__ */


#ifndef __IWMCodecAMVideoAccelerator_INTERFACE_DEFINED__
#define __IWMCodecAMVideoAccelerator_INTERFACE_DEFINED__

/* interface IWMCodecAMVideoAccelerator */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMCodecAMVideoAccelerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d98ee251-34e0-4a2d-9312-9b4c788d9fa1")
    IWMCodecAMVideoAccelerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetAcceleratorInterface( 
            /* [in] */ IAMVideoAccelerator *pIAMVA) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NegotiateConnection( 
            /* [in] */ DMO_MEDIA_TYPE *pMediaType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPlayerNotify( 
            /* [in] */ IWMPlayerTimestampHook *pHook) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMCodecAMVideoAcceleratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMCodecAMVideoAccelerator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMCodecAMVideoAccelerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMCodecAMVideoAccelerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAcceleratorInterface )( 
            IWMCodecAMVideoAccelerator * This,
            /* [in] */ IAMVideoAccelerator *pIAMVA);
        
        HRESULT ( STDMETHODCALLTYPE *NegotiateConnection )( 
            IWMCodecAMVideoAccelerator * This,
            /* [in] */ DMO_MEDIA_TYPE *pMediaType);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayerNotify )( 
            IWMCodecAMVideoAccelerator * This,
            /* [in] */ IWMPlayerTimestampHook *pHook);
        
        END_INTERFACE
    } IWMCodecAMVideoAcceleratorVtbl;

    interface IWMCodecAMVideoAccelerator
    {
        CONST_VTBL struct IWMCodecAMVideoAcceleratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMCodecAMVideoAccelerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMCodecAMVideoAccelerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMCodecAMVideoAccelerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMCodecAMVideoAccelerator_SetAcceleratorInterface(This,pIAMVA)	\
    ( (This)->lpVtbl -> SetAcceleratorInterface(This,pIAMVA) ) 

#define IWMCodecAMVideoAccelerator_NegotiateConnection(This,pMediaType)	\
    ( (This)->lpVtbl -> NegotiateConnection(This,pMediaType) ) 

#define IWMCodecAMVideoAccelerator_SetPlayerNotify(This,pHook)	\
    ( (This)->lpVtbl -> SetPlayerNotify(This,pHook) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMCodecAMVideoAccelerator_SetAcceleratorInterface_Proxy( 
    IWMCodecAMVideoAccelerator * This,
    /* [in] */ IAMVideoAccelerator *pIAMVA);


void __RPC_STUB IWMCodecAMVideoAccelerator_SetAcceleratorInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMCodecAMVideoAccelerator_NegotiateConnection_Proxy( 
    IWMCodecAMVideoAccelerator * This,
    /* [in] */ DMO_MEDIA_TYPE *pMediaType);


void __RPC_STUB IWMCodecAMVideoAccelerator_NegotiateConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMCodecAMVideoAccelerator_SetPlayerNotify_Proxy( 
    IWMCodecAMVideoAccelerator * This,
    /* [in] */ IWMPlayerTimestampHook *pHook);


void __RPC_STUB IWMCodecAMVideoAccelerator_SetPlayerNotify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMCodecAMVideoAccelerator_INTERFACE_DEFINED__ */


#ifndef __IWMCodecVideoAccelerator_INTERFACE_DEFINED__
#define __IWMCodecVideoAccelerator_INTERFACE_DEFINED__

/* interface IWMCodecVideoAccelerator */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMCodecVideoAccelerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("990641b0-739f-4e94-a808-9888da8f75af")
    IWMCodecVideoAccelerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NegotiateConnection( 
            /* [in] */ IAMVideoAccelerator *pIAMVA,
            /* [in] */ DMO_MEDIA_TYPE *pMediaType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPlayerNotify( 
            /* [in] */ IWMPlayerTimestampHook *pHook) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMCodecVideoAcceleratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMCodecVideoAccelerator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMCodecVideoAccelerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMCodecVideoAccelerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *NegotiateConnection )( 
            IWMCodecVideoAccelerator * This,
            /* [in] */ IAMVideoAccelerator *pIAMVA,
            /* [in] */ DMO_MEDIA_TYPE *pMediaType);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayerNotify )( 
            IWMCodecVideoAccelerator * This,
            /* [in] */ IWMPlayerTimestampHook *pHook);
        
        END_INTERFACE
    } IWMCodecVideoAcceleratorVtbl;

    interface IWMCodecVideoAccelerator
    {
        CONST_VTBL struct IWMCodecVideoAcceleratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMCodecVideoAccelerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMCodecVideoAccelerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMCodecVideoAccelerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMCodecVideoAccelerator_NegotiateConnection(This,pIAMVA,pMediaType)	\
    ( (This)->lpVtbl -> NegotiateConnection(This,pIAMVA,pMediaType) ) 

#define IWMCodecVideoAccelerator_SetPlayerNotify(This,pHook)	\
    ( (This)->lpVtbl -> SetPlayerNotify(This,pHook) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMCodecVideoAccelerator_NegotiateConnection_Proxy( 
    IWMCodecVideoAccelerator * This,
    /* [in] */ IAMVideoAccelerator *pIAMVA,
    /* [in] */ DMO_MEDIA_TYPE *pMediaType);


void __RPC_STUB IWMCodecVideoAccelerator_NegotiateConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMCodecVideoAccelerator_SetPlayerNotify_Proxy( 
    IWMCodecVideoAccelerator * This,
    /* [in] */ IWMPlayerTimestampHook *pHook);


void __RPC_STUB IWMCodecVideoAccelerator_SetPlayerNotify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMCodecVideoAccelerator_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmdrmsdk.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmdrmsdk.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmdrmsdk_h__
#define __wmdrmsdk_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDRMStatusCallback_FWD_DEFINED__
#define __IDRMStatusCallback_FWD_DEFINED__
typedef interface IDRMStatusCallback IDRMStatusCallback;
#endif 	/* __IDRMStatusCallback_FWD_DEFINED__ */


#ifndef __IWMDRMEventGenerator_FWD_DEFINED__
#define __IWMDRMEventGenerator_FWD_DEFINED__
typedef interface IWMDRMEventGenerator IWMDRMEventGenerator;
#endif 	/* __IWMDRMEventGenerator_FWD_DEFINED__ */


#ifndef __IWMDRMProvider_FWD_DEFINED__
#define __IWMDRMProvider_FWD_DEFINED__
typedef interface IWMDRMProvider IWMDRMProvider;
#endif 	/* __IWMDRMProvider_FWD_DEFINED__ */


#ifndef __IWMDRMSecurity_FWD_DEFINED__
#define __IWMDRMSecurity_FWD_DEFINED__
typedef interface IWMDRMSecurity IWMDRMSecurity;
#endif 	/* __IWMDRMSecurity_FWD_DEFINED__ */


#ifndef __IWMDRMEncrypt_FWD_DEFINED__
#define __IWMDRMEncrypt_FWD_DEFINED__
typedef interface IWMDRMEncrypt IWMDRMEncrypt;
#endif 	/* __IWMDRMEncrypt_FWD_DEFINED__ */


#ifndef __IWMDRMEncryptScatter_FWD_DEFINED__
#define __IWMDRMEncryptScatter_FWD_DEFINED__
typedef interface IWMDRMEncryptScatter IWMDRMEncryptScatter;
#endif 	/* __IWMDRMEncryptScatter_FWD_DEFINED__ */


#ifndef __IWMDRMDecrypt_FWD_DEFINED__
#define __IWMDRMDecrypt_FWD_DEFINED__
typedef interface IWMDRMDecrypt IWMDRMDecrypt;
#endif 	/* __IWMDRMDecrypt_FWD_DEFINED__ */


#ifndef __IWMDRMLicense_FWD_DEFINED__
#define __IWMDRMLicense_FWD_DEFINED__
typedef interface IWMDRMLicense IWMDRMLicense;
#endif 	/* __IWMDRMLicense_FWD_DEFINED__ */


#ifndef __IWMDRMLicenseQuery_FWD_DEFINED__
#define __IWMDRMLicenseQuery_FWD_DEFINED__
typedef interface IWMDRMLicenseQuery IWMDRMLicenseQuery;
#endif 	/* __IWMDRMLicenseQuery_FWD_DEFINED__ */


#ifndef __IWMDRMLicenseManagement_FWD_DEFINED__
#define __IWMDRMLicenseManagement_FWD_DEFINED__
typedef interface IWMDRMLicenseManagement IWMDRMLicenseManagement;
#endif 	/* __IWMDRMLicenseManagement_FWD_DEFINED__ */


#ifndef __IWMDRMNetReceiver_FWD_DEFINED__
#define __IWMDRMNetReceiver_FWD_DEFINED__
typedef interface IWMDRMNetReceiver IWMDRMNetReceiver;
#endif 	/* __IWMDRMNetReceiver_FWD_DEFINED__ */


#ifndef __IWMDRMNetTransmitter_FWD_DEFINED__
#define __IWMDRMNetTransmitter_FWD_DEFINED__
typedef interface IWMDRMNetTransmitter IWMDRMNetTransmitter;
#endif 	/* __IWMDRMNetTransmitter_FWD_DEFINED__ */


#ifndef __IWMDRMIndividualizationStatus_FWD_DEFINED__
#define __IWMDRMIndividualizationStatus_FWD_DEFINED__
typedef interface IWMDRMIndividualizationStatus IWMDRMIndividualizationStatus;
#endif 	/* __IWMDRMIndividualizationStatus_FWD_DEFINED__ */


#ifndef __IWMDRMLicenseBackupRestoreStatus_FWD_DEFINED__
#define __IWMDRMLicenseBackupRestoreStatus_FWD_DEFINED__
typedef interface IWMDRMLicenseBackupRestoreStatus IWMDRMLicenseBackupRestoreStatus;
#endif 	/* __IWMDRMLicenseBackupRestoreStatus_FWD_DEFINED__ */


#ifndef __IWMDRMNonSilentLicenseAquisition_FWD_DEFINED__
#define __IWMDRMNonSilentLicenseAquisition_FWD_DEFINED__
typedef interface IWMDRMNonSilentLicenseAquisition IWMDRMNonSilentLicenseAquisition;
#endif 	/* __IWMDRMNonSilentLicenseAquisition_FWD_DEFINED__ */


#ifndef __WMDRMContentEnablerActivate_FWD_DEFINED__
#define __WMDRMContentEnablerActivate_FWD_DEFINED__

#ifdef __cplusplus
typedef class WMDRMContentEnablerActivate WMDRMContentEnablerActivate;
#else
typedef struct WMDRMContentEnablerActivate WMDRMContentEnablerActivate;
#endif /* __cplusplus */

#endif 	/* __WMDRMContentEnablerActivate_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "mfobjects.h"
#include "mfidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmdrmsdk_0000_0000 */
/* [local] */ 

static const WCHAR *g_wszWMDRM_ACTIONLIST_TAG                   = L"ACTIONLIST";
static const WCHAR *g_wszWMDRM_ACTION_TAG                       = L"ACTION";
static const WCHAR *g_wszWMDRM_RIGHT_PLAYBACK                   = L"Play";
static const WCHAR *g_wszWMDRM_RIGHT_COPY                       = L"Copy";
static const WCHAR *g_wszWMDRM_RIGHT_PLAYLIST_BURN              = L"PlaylistBurn";
static const WCHAR *g_wszWMDRM_RIGHT_CREATE_THUMBNAIL_IMAGE     = L"CreateThumbnailImage";
static const WCHAR *g_wszWMDRM_RIGHT_COPY_TO_CD                 = L"Print.redbook";
static const WCHAR *g_wszWMDRM_RIGHT_COPY_TO_SDMI_DEVICE        = L"Transfer.SDMI";
static const WCHAR *g_wszWMDRM_RIGHT_COPY_TO_NON_SDMI_DEVICE    = L"Transfer.NONSDMI";
static const WCHAR *g_wszWMDRM_RIGHT_BACKUP                     = L"Backup";
static const WCHAR *g_wszWMDRM_RIGHT_COLLABORATIVE_PLAY         = L"CollaborativePlay";
static const WCHAR *g_wszWMDRM_ActionAllowed                        = L"ActionAllowed.";
static const WCHAR *g_wszWMDRM_ActionAllowed_Playback               = L"ActionAllowed.Play";
static const WCHAR *g_wszWMDRM_ActionAllowed_Copy                   = L"ActionAllowed.Copy";
static const WCHAR *g_wszWMDRM_ActionAllowed_PlaylistBurn           = L"ActionAllowed.PlaylistBurn";
static const WCHAR *g_wszWMDRM_ActionAllowed_CreateThumbnailImage   = L"ActionAllowed.CreateThumbnailImage";
static const WCHAR *g_wszWMDRM_ActionAllowed_CopyToCD               = L"ActionAllowed.Print.redbook";
static const WCHAR *g_wszWMDRM_ActionAllowed_CopyToSDMIDevice       = L"ActionAllowed.Transfer.SDMI";
static const WCHAR *g_wszWMDRM_ActionAllowed_CopyToNonSDMIDevice    = L"ActionAllowed.Transfer.NONSDMI";
static const WCHAR *g_wszWMDRM_ActionAllowed_Backup                 = L"ActionAllowed.Backup";
static const WCHAR *g_wszWMDRM_ActionAllowed_CollaborativePlay      = L"ActionAllowed.CollaborativePlay";
static const WCHAR *g_wszWMDRM_LicenseState                      = L"LicenseStateData.";
static const WCHAR *g_wszWMDRM_LicenseState_Playback             = L"LicenseStateData.Play";
static const WCHAR *g_wszWMDRM_LicenseState_Copy                 = L"LicenseStateData.Copy";
static const WCHAR *g_wszWMDRM_LicenseState_PlaylistBurn         = L"LicenseStateData.PlaylistBurn";
static const WCHAR *g_wszWMDRM_LicenseState_CreateThumbnailImage = L"LicenseStateData.CreateThumbnailImage";
static const WCHAR *g_wszWMDRM_LicenseState_CopyToCD             = L"LicenseStateData.Print.redbook";
static const WCHAR *g_wszWMDRM_LicenseState_CopyToSDMIDevice     = L"LicenseStateData.Transfer.SDMI";
static const WCHAR *g_wszWMDRM_LicenseState_CopyToNonSDMIDevice  = L"LicenseStateData.Transfer.NONSDMI";
static const WCHAR *g_wszWMDRM_LicenseState_Backup               = L"LicenseStateData.Backup";
static const WCHAR *g_wszWMDRM_LicenseState_CollaborativePlay    = L"LicenseStateData.CollaborativePlay";
static const WCHAR *g_wszWMDRMNET_Revocation                     = L"WMDRMNET_REVOCATION";
static const WCHAR *g_wszWMDRM_SAPLEVEL                          = L"SAPLEVEL";
static const WCHAR *g_wszWMDRM_SAPRequired                       = L"SAPRequired";
static const WCHAR *g_wszWMDRM_SOURCEID                          = L"SOURCEID";
static const WCHAR *g_wszWMDRM_PRIORITY                          = L"PRIORITY";
static const WCHAR *g_wszWMDRM_ISSUEDATE                         = L"ISSUEDATE";
static const WCHAR *g_wszWMDRM_UplinkID                          = L"UplinkID";
static const WCHAR *g_wszWMDRM_REVINFOVERSION                    = L"REVINFOVERSION";
#define DRM_LICENSE_STATE_DATA_VAGUE       1
#define DRM_LICENSE_STATE_DATA_OPL_PRESENT 2
#define DRM_LICENSE_STATE_DATA_SAP_PRESENT 4
#define WMDRM_BACKUP_OVERWRITE       ((DWORD) 0x00000001)
#define WMDRM_RESTORE_INDIVIDUALIZE  ((DWORD) 0x00000002)
#define WMDRM_SECURITY_PERFORM_INDIV               0x00000001L
#define WMDRM_SECURITY_PERFORM_REVOCATION_REFRESH  0x00000002L
#define WMDRM_SECURITY_PERFORM_FORCE_INDIV         0x00000004L
#define WMDRM_LICENSE_TYPE_XML       0x00000001L
#define WMDRM_LICENSE_TYPE_XMR       0x00000002L
#define WMDRM_CERTIFICATE_TYPE_V1       0x00000001L
#define WMDRM_CERTIFICATE_TYPE_V2       0x00000002L
#define WMDRM_ACQUIRE_LICENSE_SILENT              0x00000001L
#define WMDRM_ACQUIRE_LICENSE_NONSILENT           0x00000002L
#define WMDRM_ACQUIRE_LICENSE_LEGACY_NONSILENT    0x00000004L
#define WMDRM_DELETE_LICENSE_IMMEDIATELY    0x00000001L
#define WMDRM_DELETE_LICENSE_MARK_FOR_PURGE 0x00000002L
#define WMDRM_CLEAN_LICENSE_STORE_SYNC  0x00000001L
#define WMDRM_CLEAN_LICENSE_STORE_ASYNC 0x00000002L
#define WMDRM_CERTIFICATE_TYPE_XML 1
#define WMDRM_PROTECTION_TYPE_RC4        1
EXTERN_GUID( WMDRM_REVOCATIONTYPE_APP,          0x90A37313, 0x0ECF, 0x4CAA, 0xA9, 0x06, 0xB1, 0x88, 0xF6, 0x12, 0x93, 0x00 );
EXTERN_GUID( WMDRM_REVOCATIONTYPE_DEVICE,       0x3129E375, 0xCEB0, 0x47D5, 0x9C, 0xCA, 0x9D, 0xB7, 0x4C, 0xFD, 0x43, 0x32 );
EXTERN_GUID( WMDRM_REVOCATIONTYPE_CARDEA,       0xCD75E604, 0x543D, 0x4A9C, 0x9F, 0x09, 0xFE, 0x6D, 0x24, 0xE8, 0xBF, 0x90 );
EXTERN_GUID( WMDRM_REVOCATIONTYPE_REVINFO,      0xCCDE5A55, 0xA688, 0x4405, 0xA8, 0x8B, 0xD1, 0x3F, 0x90, 0xD5, 0xBA, 0x3E );
EXTERN_GUID( WMDRM_REVOCATIONTYPE_GRL,          0xa2190240, 0xb2ca, 0x40b3, 0xb4, 0x8d, 0x9b, 0xc4, 0xc2, 0xdc, 0x42, 0x8d );
EXTERN_GUID( WMDRM_REVOCATIONTYPE_HDCP,         0xe627553a, 0x820f, 0x40fd, 0xb4, 0x65, 0xa4, 0x28, 0x30, 0xa5, 0x74, 0xc9 );
typedef 
enum DRM_CRYPTO_TYPE
    {	CRYPTO_TYPE_MCE	= 0
    } 	DRM_CRYPTO_TYPE;

#if !DRM_LICENSE_STATE_TYPES_DEFINED
#define DRM_LICENSE_STATE_TYPES_DEFINED 1
typedef 
enum DRM_LICENSE_STATE_CATEGORY
    {	WM_DRM_LICENSE_STATE_NORIGHT	= 0,
	WM_DRM_LICENSE_STATE_UNLIM	= ( WM_DRM_LICENSE_STATE_NORIGHT + 1 ) ,
	WM_DRM_LICENSE_STATE_COUNT	= ( WM_DRM_LICENSE_STATE_UNLIM + 1 ) ,
	WM_DRM_LICENSE_STATE_FROM	= ( WM_DRM_LICENSE_STATE_COUNT + 1 ) ,
	WM_DRM_LICENSE_STATE_UNTIL	= ( WM_DRM_LICENSE_STATE_FROM + 1 ) ,
	WM_DRM_LICENSE_STATE_FROM_UNTIL	= ( WM_DRM_LICENSE_STATE_UNTIL + 1 ) ,
	WM_DRM_LICENSE_STATE_COUNT_FROM	= ( WM_DRM_LICENSE_STATE_FROM_UNTIL + 1 ) ,
	WM_DRM_LICENSE_STATE_COUNT_UNTIL	= ( WM_DRM_LICENSE_STATE_COUNT_FROM + 1 ) ,
	WM_DRM_LICENSE_STATE_COUNT_FROM_UNTIL	= ( WM_DRM_LICENSE_STATE_COUNT_UNTIL + 1 ) ,
	WM_DRM_LICENSE_STATE_EXPIRATION_AFTER_FIRSTUSE	= ( WM_DRM_LICENSE_STATE_COUNT_FROM_UNTIL + 1 ) 
    } 	DRM_LICENSE_STATE_CATEGORY;

typedef struct _DRM_LICENSE_STATE_DATA
    {
    DWORD dwStreamId;
    DRM_LICENSE_STATE_CATEGORY dwCategory;
    DWORD dwNumCounts;
    DWORD dwCount[ 4 ];
    DWORD dwNumDates;
    FILETIME datetime[ 4 ];
    DWORD dwVague;
    } 	DRM_LICENSE_STATE_DATA;

#endif
typedef 
enum MSDRM_STATUS
    {	DRM_ERROR	= 0,
	DRM_INFORMATION	= 1,
	DRM_BACKUPRESTORE_BEGIN	= 2,
	DRM_BACKUPRESTORE_END	= 3,
	DRM_BACKUPRESTORE_CONNECTING	= 4,
	DRM_BACKUPRESTORE_DISCONNECTING	= 5,
	DRM_ERROR_WITHURL	= 6,
	DRM_RESTRICTED_LICENSE	= 7,
	DRM_NEEDS_INDIVIDUALIZATION	= 8,
	DRM_PLAY_OPL_NOTIFICATION	= 9,
	DRM_COPY_OPL_NOTIFICATION	= 10,
	DRM_REFRESHCRL_COMPLETE	= 11
    } 	MSDRM_STATUS;

typedef 
enum DRM_ATTR_DATATYPE
    {	DRM_TYPE_DWORD	= 0,
	DRM_TYPE_STRING	= 1,
	DRM_TYPE_BINARY	= 2,
	DRM_TYPE_BOOL	= 3,
	DRM_TYPE_QWORD	= 4,
	DRM_TYPE_WORD	= 5,
	DRM_TYPE_GUID	= 6
    } 	DRM_ATTR_DATATYPE;

typedef 
enum DRM_HTTP_STATUS
    {	HTTP_NOTINITIATED	= 0,
	HTTP_CONNECTING	= ( HTTP_NOTINITIATED + 1 ) ,
	HTTP_REQUESTING	= ( HTTP_CONNECTING + 1 ) ,
	HTTP_RECEIVING	= ( HTTP_REQUESTING + 1 ) ,
	HTTP_COMPLETED	= ( HTTP_RECEIVING + 1 ) 
    } 	DRM_HTTP_STATUS;

typedef 
enum DRM_INDIVIDUALIZATION_STATUS
    {	INDI_UNDEFINED	= 0,
	INDI_BEGIN	= 0x1,
	INDI_SUCCEED	= 0x2,
	INDI_FAIL	= 0x4,
	INDI_CANCEL	= 0x8,
	INDI_DOWNLOAD	= 0x10,
	INDI_INSTALL	= 0x20
    } 	DRM_INDIVIDUALIZATION_STATUS;

typedef 
enum _DRM_ACTION_ALLOWED_QUERY_RESULTS
    {	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED	= 0x1,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_NO_LICENSE	= 0x2,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_NO_RIGHT	= 0x4,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_EXHAUSTED	= 0x8,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_EXPIRED	= 0x10,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_NOT_STARTED	= 0x20,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_APPSEC_TOO_LOW	= 0x40,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_REQ_INDIV	= 0x80,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_COPY_OPL_TOO_LOW	= 0x100,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_COPY_OPL_EXCLUDED	= 0x200,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_NO_CLOCK_SUPPORT	= 0x400,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_NO_METERING_SUPPORT	= 0x800,
	DRM_ACTION_ALLOWED_QUERY_NOT_ENABLED_CHAIN_DEPTH_TOO_HIGH	= 0x1000
    } 	DRM_ACTION_ALLOWED_QUERY_RESULTS;

typedef struct _WMDRMCryptoData
    {
    DRM_CRYPTO_TYPE cryptoType;
    unsigned __int64 qwCounterID;
    unsigned __int64 qwOffset;
    } 	WMDRMCryptoData;

typedef struct _WMIndividualizeStatus
    {
    HRESULT hr;
    DRM_INDIVIDUALIZATION_STATUS enIndiStatus;
    LPSTR pszIndiRespUrl;
    DWORD dwHTTPRequest;
    DRM_HTTP_STATUS enHTTPStatus;
    DWORD dwHTTPReadProgress;
    DWORD dwHTTPReadTotal;
    } 	WM_INDIVIDUALIZE_STATUS;

typedef struct _WMBackupRestoreData
    {
    MSDRM_STATUS eStatus;
    BSTR bstrError;
    } 	WM_BACKUP_RESTORE_STATUS;

#ifndef DRM_OPL_TYPES
#define DRM_OPL_TYPES 1
#define WMDRM_OPL_PLAY              ((DWORD) 0x00000001)
#define WMDRM_OPL_COPY              ((DWORD) 0x00000002)
typedef struct __tagDRM_MINIMUM_OUTPUT_PROTECTION_LEVELS
    {
    WORD wCompressedDigitalVideo;
    WORD wUncompressedDigitalVideo;
    WORD wAnalogVideo;
    WORD wCompressedDigitalAudio;
    WORD wUncompressedDigitalAudio;
    } 	DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS;

typedef struct __tagDRM_OPL_OUTPUT_IDS
    {
    WORD cIds;
    GUID *rgIds;
    } 	DRM_OPL_OUTPUT_IDS;

#define VER_DRM_PLAY_OPL_V1                 1
#define VER_DRM_PLAY_OPL                    2
#define VER_DRM_VIDEO_OUTPUT_PROTECTION     2
typedef struct __tagDRM_OUTPUT_PROTECTION
    {
    GUID guidId;
    BYTE bConfigData;
    } 	DRM_OUTPUT_PROTECTION;

typedef struct __tagDRM_OUTPUT_PROTECTION_EX
    {
    DWORD dwVersion;
    GUID guidId;
    DWORD dwConfigData;
    } 	DRM_OUTPUT_PROTECTION_EX;

typedef DRM_OUTPUT_PROTECTION DRM_AUDIO_OUTPUT_PROTECTION;

typedef DRM_OUTPUT_PROTECTION DRM_VIDEO_OUTPUT_PROTECTION;

typedef DRM_OUTPUT_PROTECTION_EX DRM_AUDIO_OUTPUT_PROTECTION_EX;

typedef DRM_OUTPUT_PROTECTION_EX DRM_VIDEO_OUTPUT_PROTECTION_EX;

typedef struct __tagDRM_VIDEO_OUTPUT_PROTECTION_IDS
    {
    WORD cEntries;
    DRM_VIDEO_OUTPUT_PROTECTION *rgVop;
    } 	DRM_VIDEO_OUTPUT_PROTECTION_IDS;

typedef struct __tagDRM_VIDEO_OUTPUT_PROTECTION_IDS_EX
    {
    DWORD dwVersion;
    WORD cEntries;
    DRM_VIDEO_OUTPUT_PROTECTION_EX *rgVop;
    } 	DRM_VIDEO_OUTPUT_PROTECTION_IDS_EX;

typedef struct __tagDRM_AUDIO_OUTPUT_PROTECTION_IDS
    {
    WORD cEntries;
    DRM_AUDIO_OUTPUT_PROTECTION *rgAop;
    } 	DRM_AUDIO_OUTPUT_PROTECTION_IDS;

typedef struct __tagDRM_AUDIO_OUTPUT_PROTECTION_IDS_EX
    {
    DWORD dwVersion;
    WORD cEntries;
    DRM_AUDIO_OUTPUT_PROTECTION_EX *rgAop;
    } 	DRM_AUDIO_OUTPUT_PROTECTION_IDS_EX;

typedef struct __tagDRM_PLAY_OPL
    {
    DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS minOPL;
    DRM_OPL_OUTPUT_IDS oplIdReserved;
    DRM_VIDEO_OUTPUT_PROTECTION_IDS vopi;
    } 	DRM_PLAY_OPL;

typedef struct __tagDRM_PLAY_OPL_EX
    {
    DWORD dwVersion;
    DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS minOPL;
    DRM_OPL_OUTPUT_IDS oplIdReserved;
    DRM_VIDEO_OUTPUT_PROTECTION_IDS_EX vopi;
    } 	DRM_PLAY_OPL_EX;

typedef struct __tagDRM_COPY_OPL
    {
    WORD wMinimumCopyLevel;
    DRM_OPL_OUTPUT_IDS oplIdIncludes;
    DRM_OPL_OUTPUT_IDS oplIdExcludes;
    } 	DRM_COPY_OPL;

#endif // DRM_OPL_TYPES
typedef struct _WMDRMOutputProtectionLevels
    {
    WORD wCompressedDigitalVideo;
    WORD wUncompressedDigitalVideo;
    WORD wAnalogVideo;
    WORD wCompressedDigitalAudio;
    WORD wUncompressedDigitalAudio;
    WORD wMinimumCopyProtectionLevel;
    } 	WMDRM_OUTPUT_PROTECTION_LEVELS;

typedef struct _WMDRMAnalogVideoRestrictions
    {
    GUID guidRestrictionID;
    DWORD dwRestrictionData;
    } 	WMDRM_ANALOG_VIDEO_RESTRICTIONS;

typedef struct _WMDRMAnalogVideoRestrictionsEx
    {
    DWORD dwVersion;
    GUID guidRestrictionID;
    DWORD cbRestrictionData;
    BYTE *pbRestrictionData;
    } 	WMDRM_ANALOG_VIDEO_RESTRICTIONS_EX;

typedef 
enum _WMDRMNET_POLICY_TYPE
    {	WMDRMNET_POLICY_TYPE_UNDEFINED	= 0,
	WMDRMNET_POLICY_TYPE_TRANSCRYPTPLAY	= 0x1
    } 	WMDRMNET_POLICY_TYPE;

typedef struct _tagWMDRMNET_POLICY
    {
    WMDRMNET_POLICY_TYPE ePolicyType;
    BYTE *pbPolicy;
    } 	WMDRMNET_POLICY;

typedef struct _WMDRMNET_POLICY_TRANSCRYPTPLAY
    {
    DWORD cbData;
    BYTE *pbData;
    } 	WMDRMNET_POLICY_TRANSCRYPTPLAY;

typedef struct _WMDRM_ENCRYPT_SCATTER_INFO
    {
    DWORD dwStreamID;
    DWORD dwSampleProtectionVersion;
    DWORD cbProtectionInfo;
    BYTE *pbProtectionInfo;
    } 	WMDRM_ENCRYPT_SCATTER_INFO;

typedef struct WMDRM_ENCRYPT_SCATTER_BLOCK
    {
    DWORD dwStreamID;
    DWORD cbBlock;
    BYTE *pbBlock;
    } 	WMDRM_ENCRYPT_SCATTER_BLOCK;

EXTERN_C HRESULT STDMETHODCALLTYPE WMDRMStartup( );
EXTERN_C HRESULT STDMETHODCALLTYPE WMDRMShutdown( );
EXTERN_C HRESULT STDMETHODCALLTYPE WMDRMCreateProvider( OUT IWMDRMProvider **ppDRMProvider );
//
// WMDRMCreateProtectedProvider is only available via a Microsoft issued WMDRMSDK stub library
//
EXTERN_C HRESULT STDMETHODCALLTYPE WMDRMCreateProtectedProvider( OUT IWMDRMProvider **ppDRMProvider );


extern RPC_IF_HANDLE __MIDL_itf_wmdrmsdk_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmdrmsdk_0000_0000_v0_0_s_ifspec;

#ifndef __IDRMStatusCallback_INTERFACE_DEFINED__
#define __IDRMStatusCallback_INTERFACE_DEFINED__

/* interface IDRMStatusCallback */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IDRMStatusCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("08548704-75B1-4982-9B26-FB385DEE741D")
    IDRMStatusCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStatus( 
            /* [in] */ MSDRM_STATUS Status,
            /* [in] */ HRESULT hr,
            /* [in] */ DRM_ATTR_DATATYPE dwType,
            /* [in] */ BYTE *pValue,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDRMStatusCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDRMStatusCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDRMStatusCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDRMStatusCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStatus )( 
            IDRMStatusCallback * This,
            /* [in] */ MSDRM_STATUS Status,
            /* [in] */ HRESULT hr,
            /* [in] */ DRM_ATTR_DATATYPE dwType,
            /* [in] */ BYTE *pValue,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IDRMStatusCallbackVtbl;

    interface IDRMStatusCallback
    {
        CONST_VTBL struct IDRMStatusCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDRMStatusCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDRMStatusCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDRMStatusCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDRMStatusCallback_OnStatus(This,Status,hr,dwType,pValue,pvContext)	\
    ( (This)->lpVtbl -> OnStatus(This,Status,hr,dwType,pValue,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDRMStatusCallback_INTERFACE_DEFINED__ */


#ifndef __IWMDRMEventGenerator_INTERFACE_DEFINED__
#define __IWMDRMEventGenerator_INTERFACE_DEFINED__

/* interface IWMDRMEventGenerator */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMEventGenerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CE11CC91-E615-4E0B-BE1F-09B5AEC033F2")
    IWMDRMEventGenerator : public IMFMediaEventGenerator
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CancelAsyncOperation( 
            /* [in] */ IUnknown *punkCancelationCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Shutdown( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMEventGeneratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMEventGenerator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMEventGenerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMEventGenerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEvent )( 
            IWMDRMEventGenerator * This,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IMFMediaEvent **ppEvent);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *BeginGetEvent )( 
            IWMDRMEventGenerator * This,
            /* [in] */ IMFAsyncCallback *pCallback,
            /* [in] */ IUnknown *punkState);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *EndGetEvent )( 
            IWMDRMEventGenerator * This,
            /* [in] */ IMFAsyncResult *pResult,
            /* [out] */ 
            __out  IMFMediaEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *QueueEvent )( 
            IWMDRMEventGenerator * This,
            /* [in] */ MediaEventType met,
            /* [in] */ REFGUID guidExtendedType,
            /* [in] */ HRESULT hrStatus,
            /* [unique][in] */ const PROPVARIANT *pvValue);
        
        HRESULT ( STDMETHODCALLTYPE *CancelAsyncOperation )( 
            IWMDRMEventGenerator * This,
            /* [in] */ IUnknown *punkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IWMDRMEventGenerator * This);
        
        END_INTERFACE
    } IWMDRMEventGeneratorVtbl;

    interface IWMDRMEventGenerator
    {
        CONST_VTBL struct IWMDRMEventGeneratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMEventGenerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMEventGenerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMEventGenerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMEventGenerator_GetEvent(This,dwFlags,ppEvent)	\
    ( (This)->lpVtbl -> GetEvent(This,dwFlags,ppEvent) ) 

#define IWMDRMEventGenerator_BeginGetEvent(This,pCallback,punkState)	\
    ( (This)->lpVtbl -> BeginGetEvent(This,pCallback,punkState) ) 

#define IWMDRMEventGenerator_EndGetEvent(This,pResult,ppEvent)	\
    ( (This)->lpVtbl -> EndGetEvent(This,pResult,ppEvent) ) 

#define IWMDRMEventGenerator_QueueEvent(This,met,guidExtendedType,hrStatus,pvValue)	\
    ( (This)->lpVtbl -> QueueEvent(This,met,guidExtendedType,hrStatus,pvValue) ) 


#define IWMDRMEventGenerator_CancelAsyncOperation(This,punkCancelationCookie)	\
    ( (This)->lpVtbl -> CancelAsyncOperation(This,punkCancelationCookie) ) 

#define IWMDRMEventGenerator_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMEventGenerator_INTERFACE_DEFINED__ */


#ifndef __IWMDRMProvider_INTERFACE_DEFINED__
#define __IWMDRMProvider_INTERFACE_DEFINED__

/* interface IWMDRMProvider */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("98DC8917-8640-4b1d-9F1E-A590D40357EE")
    IWMDRMProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateObject( 
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateObject )( 
            IWMDRMProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        END_INTERFACE
    } IWMDRMProviderVtbl;

    interface IWMDRMProvider
    {
        CONST_VTBL struct IWMDRMProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMProvider_CreateObject(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> CreateObject(This,riid,ppvObject) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMProvider_INTERFACE_DEFINED__ */


#ifndef __IWMDRMSecurity_INTERFACE_DEFINED__
#define __IWMDRMSecurity_INTERFACE_DEFINED__

/* interface IWMDRMSecurity */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMSecurity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70800F56-5239-4a0b-A8B8-D53C6BAE4171")
    IWMDRMSecurity : public IWMDRMEventGenerator
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSecurityVersion( 
            /* [out] */ BSTR *pbstrVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMachineCertificate( 
            /* [in] */ DWORD dwCertificateType,
            /* [out] */ BYTE rgbVersion[ 4 ],
            /* [size_is][size_is][out] */ BYTE **ppbCertificate,
            /* [out] */ DWORD *pcbCertificate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PerformSecurityUpdate( 
            /* [in] */ DWORD dwFlags,
            /* [out] */ IUnknown **ppunkCancelationCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRevocationData( 
            /* [in] */ REFGUID guidRevocationType,
            /* [size_is][in] */ BYTE *pbCRL,
            /* [in] */ DWORD cbCRL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRevocationData( 
            /* [in] */ REFGUID guidRevocationType,
            /* [size_is][out] */ BYTE *pbCRL,
            /* [out][in] */ DWORD *pcbCRL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRevocationDataVersion( 
            /* [in] */ REFGUID guidRevocationType,
            /* [out] */ ULONGLONG *pdwCRLVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CheckCertForRevocation( 
            /* [in] */ REFGUID rguidRevocationList,
            /* [size_is][in] */ BYTE *pbCert,
            /* [in] */ DWORD cbCert,
            /* [out] */ BOOL *pfRevoked) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContentEnablersForRevocations( 
            /* [size_is][in] */ BYTE **rgpbCerts,
            /* [size_is][in] */ DWORD *rgpdwCertSizes,
            /* [size_is][in] */ GUID **rgpguidCerts,
            /* [in] */ DWORD cCerts,
            /* [in] */ HRESULT hResultHint,
            /* [size_is][out] */ IMFContentEnabler **prgContentEnablers,
            /* [out][in] */ DWORD *pcContentEnablers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContentEnablersFromHashes( 
            /* [size_is][in] */ BSTR *rgpbCertHashes,
            /* [in] */ DWORD cCerts,
            /* [in] */ HRESULT hResultHint,
            /* [size_is][out] */ IMFContentEnabler **prgContentEnablers,
            /* [out][in] */ DWORD *pcContentEnablers) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMSecurityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMSecurity * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMSecurity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMSecurity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEvent )( 
            IWMDRMSecurity * This,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IMFMediaEvent **ppEvent);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *BeginGetEvent )( 
            IWMDRMSecurity * This,
            /* [in] */ IMFAsyncCallback *pCallback,
            /* [in] */ IUnknown *punkState);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *EndGetEvent )( 
            IWMDRMSecurity * This,
            /* [in] */ IMFAsyncResult *pResult,
            /* [out] */ 
            __out  IMFMediaEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *QueueEvent )( 
            IWMDRMSecurity * This,
            /* [in] */ MediaEventType met,
            /* [in] */ REFGUID guidExtendedType,
            /* [in] */ HRESULT hrStatus,
            /* [unique][in] */ const PROPVARIANT *pvValue);
        
        HRESULT ( STDMETHODCALLTYPE *CancelAsyncOperation )( 
            IWMDRMSecurity * This,
            /* [in] */ IUnknown *punkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IWMDRMSecurity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecurityVersion )( 
            IWMDRMSecurity * This,
            /* [out] */ BSTR *pbstrVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetMachineCertificate )( 
            IWMDRMSecurity * This,
            /* [in] */ DWORD dwCertificateType,
            /* [out] */ BYTE rgbVersion[ 4 ],
            /* [size_is][size_is][out] */ BYTE **ppbCertificate,
            /* [out] */ DWORD *pcbCertificate);
        
        HRESULT ( STDMETHODCALLTYPE *PerformSecurityUpdate )( 
            IWMDRMSecurity * This,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IUnknown **ppunkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *SetRevocationData )( 
            IWMDRMSecurity * This,
            /* [in] */ REFGUID guidRevocationType,
            /* [size_is][in] */ BYTE *pbCRL,
            /* [in] */ DWORD cbCRL);
        
        HRESULT ( STDMETHODCALLTYPE *GetRevocationData )( 
            IWMDRMSecurity * This,
            /* [in] */ REFGUID guidRevocationType,
            /* [size_is][out] */ BYTE *pbCRL,
            /* [out][in] */ DWORD *pcbCRL);
        
        HRESULT ( STDMETHODCALLTYPE *GetRevocationDataVersion )( 
            IWMDRMSecurity * This,
            /* [in] */ REFGUID guidRevocationType,
            /* [out] */ ULONGLONG *pdwCRLVersion);
        
        HRESULT ( STDMETHODCALLTYPE *CheckCertForRevocation )( 
            IWMDRMSecurity * This,
            /* [in] */ REFGUID rguidRevocationList,
            /* [size_is][in] */ BYTE *pbCert,
            /* [in] */ DWORD cbCert,
            /* [out] */ BOOL *pfRevoked);
        
        HRESULT ( STDMETHODCALLTYPE *GetContentEnablersForRevocations )( 
            IWMDRMSecurity * This,
            /* [size_is][in] */ BYTE **rgpbCerts,
            /* [size_is][in] */ DWORD *rgpdwCertSizes,
            /* [size_is][in] */ GUID **rgpguidCerts,
            /* [in] */ DWORD cCerts,
            /* [in] */ HRESULT hResultHint,
            /* [size_is][out] */ IMFContentEnabler **prgContentEnablers,
            /* [out][in] */ DWORD *pcContentEnablers);
        
        HRESULT ( STDMETHODCALLTYPE *GetContentEnablersFromHashes )( 
            IWMDRMSecurity * This,
            /* [size_is][in] */ BSTR *rgpbCertHashes,
            /* [in] */ DWORD cCerts,
            /* [in] */ HRESULT hResultHint,
            /* [size_is][out] */ IMFContentEnabler **prgContentEnablers,
            /* [out][in] */ DWORD *pcContentEnablers);
        
        END_INTERFACE
    } IWMDRMSecurityVtbl;

    interface IWMDRMSecurity
    {
        CONST_VTBL struct IWMDRMSecurityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMSecurity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMSecurity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMSecurity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMSecurity_GetEvent(This,dwFlags,ppEvent)	\
    ( (This)->lpVtbl -> GetEvent(This,dwFlags,ppEvent) ) 

#define IWMDRMSecurity_BeginGetEvent(This,pCallback,punkState)	\
    ( (This)->lpVtbl -> BeginGetEvent(This,pCallback,punkState) ) 

#define IWMDRMSecurity_EndGetEvent(This,pResult,ppEvent)	\
    ( (This)->lpVtbl -> EndGetEvent(This,pResult,ppEvent) ) 

#define IWMDRMSecurity_QueueEvent(This,met,guidExtendedType,hrStatus,pvValue)	\
    ( (This)->lpVtbl -> QueueEvent(This,met,guidExtendedType,hrStatus,pvValue) ) 


#define IWMDRMSecurity_CancelAsyncOperation(This,punkCancelationCookie)	\
    ( (This)->lpVtbl -> CancelAsyncOperation(This,punkCancelationCookie) ) 

#define IWMDRMSecurity_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 


#define IWMDRMSecurity_GetSecurityVersion(This,pbstrVersion)	\
    ( (This)->lpVtbl -> GetSecurityVersion(This,pbstrVersion) ) 

#define IWMDRMSecurity_GetMachineCertificate(This,dwCertificateType,rgbVersion,ppbCertificate,pcbCertificate)	\
    ( (This)->lpVtbl -> GetMachineCertificate(This,dwCertificateType,rgbVersion,ppbCertificate,pcbCertificate) ) 

#define IWMDRMSecurity_PerformSecurityUpdate(This,dwFlags,ppunkCancelationCookie)	\
    ( (This)->lpVtbl -> PerformSecurityUpdate(This,dwFlags,ppunkCancelationCookie) ) 

#define IWMDRMSecurity_SetRevocationData(This,guidRevocationType,pbCRL,cbCRL)	\
    ( (This)->lpVtbl -> SetRevocationData(This,guidRevocationType,pbCRL,cbCRL) ) 

#define IWMDRMSecurity_GetRevocationData(This,guidRevocationType,pbCRL,pcbCRL)	\
    ( (This)->lpVtbl -> GetRevocationData(This,guidRevocationType,pbCRL,pcbCRL) ) 

#define IWMDRMSecurity_GetRevocationDataVersion(This,guidRevocationType,pdwCRLVersion)	\
    ( (This)->lpVtbl -> GetRevocationDataVersion(This,guidRevocationType,pdwCRLVersion) ) 

#define IWMDRMSecurity_CheckCertForRevocation(This,rguidRevocationList,pbCert,cbCert,pfRevoked)	\
    ( (This)->lpVtbl -> CheckCertForRevocation(This,rguidRevocationList,pbCert,cbCert,pfRevoked) ) 

#define IWMDRMSecurity_GetContentEnablersForRevocations(This,rgpbCerts,rgpdwCertSizes,rgpguidCerts,cCerts,hResultHint,prgContentEnablers,pcContentEnablers)	\
    ( (This)->lpVtbl -> GetContentEnablersForRevocations(This,rgpbCerts,rgpdwCertSizes,rgpguidCerts,cCerts,hResultHint,prgContentEnablers,pcContentEnablers) ) 

#define IWMDRMSecurity_GetContentEnablersFromHashes(This,rgpbCertHashes,cCerts,hResultHint,prgContentEnablers,pcContentEnablers)	\
    ( (This)->lpVtbl -> GetContentEnablersFromHashes(This,rgpbCertHashes,cCerts,hResultHint,prgContentEnablers,pcContentEnablers) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMSecurity_INTERFACE_DEFINED__ */


#ifndef __IWMDRMEncrypt_INTERFACE_DEFINED__
#define __IWMDRMEncrypt_INTERFACE_DEFINED__

/* interface IWMDRMEncrypt */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMEncrypt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C9E0A5F4-DD22-4dc4-B795-88FA91F0516B")
    IWMDRMEncrypt : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Encrypt( 
            /* [size_is][out][in] */ BYTE *pbData,
            /* [in] */ DWORD cbData,
            /* [in] */ WMDRMCryptoData *pWMCryptoData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMEncryptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMEncrypt * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMEncrypt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMEncrypt * This);
        
        HRESULT ( STDMETHODCALLTYPE *Encrypt )( 
            IWMDRMEncrypt * This,
            /* [size_is][out][in] */ BYTE *pbData,
            /* [in] */ DWORD cbData,
            /* [in] */ WMDRMCryptoData *pWMCryptoData);
        
        END_INTERFACE
    } IWMDRMEncryptVtbl;

    interface IWMDRMEncrypt
    {
        CONST_VTBL struct IWMDRMEncryptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMEncrypt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMEncrypt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMEncrypt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMEncrypt_Encrypt(This,pbData,cbData,pWMCryptoData)	\
    ( (This)->lpVtbl -> Encrypt(This,pbData,cbData,pWMCryptoData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMEncrypt_INTERFACE_DEFINED__ */


#ifndef __IWMDRMEncryptScatter_INTERFACE_DEFINED__
#define __IWMDRMEncryptScatter_INTERFACE_DEFINED__

/* interface IWMDRMEncryptScatter */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMEncryptScatter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2662fa39-4c62-481a-956c-7bfcb33c2888")
    IWMDRMEncryptScatter : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitEncryptScatter( 
            /* [in] */ DWORD cStreams,
            /* [size_is][in] */ WMDRM_ENCRYPT_SCATTER_INFO *rgInfos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EncryptScatter( 
            /* [in] */ DWORD cBlocks,
            /* [size_is][in] */ WMDRM_ENCRYPT_SCATTER_BLOCK *rgBlocks,
            /* [in] */ WMDRMCryptoData *pWMCryptoData,
            /* [in] */ DWORD cbOutput,
            /* [size_is][out] */ BYTE *pbOutput) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMEncryptScatterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMEncryptScatter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMEncryptScatter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMEncryptScatter * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitEncryptScatter )( 
            IWMDRMEncryptScatter * This,
            /* [in] */ DWORD cStreams,
            /* [size_is][in] */ WMDRM_ENCRYPT_SCATTER_INFO *rgInfos);
        
        HRESULT ( STDMETHODCALLTYPE *EncryptScatter )( 
            IWMDRMEncryptScatter * This,
            /* [in] */ DWORD cBlocks,
            /* [size_is][in] */ WMDRM_ENCRYPT_SCATTER_BLOCK *rgBlocks,
            /* [in] */ WMDRMCryptoData *pWMCryptoData,
            /* [in] */ DWORD cbOutput,
            /* [size_is][out] */ BYTE *pbOutput);
        
        END_INTERFACE
    } IWMDRMEncryptScatterVtbl;

    interface IWMDRMEncryptScatter
    {
        CONST_VTBL struct IWMDRMEncryptScatterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMEncryptScatter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMEncryptScatter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMEncryptScatter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMEncryptScatter_InitEncryptScatter(This,cStreams,rgInfos)	\
    ( (This)->lpVtbl -> InitEncryptScatter(This,cStreams,rgInfos) ) 

#define IWMDRMEncryptScatter_EncryptScatter(This,cBlocks,rgBlocks,pWMCryptoData,cbOutput,pbOutput)	\
    ( (This)->lpVtbl -> EncryptScatter(This,cBlocks,rgBlocks,pWMCryptoData,cbOutput,pbOutput) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMEncryptScatter_INTERFACE_DEFINED__ */


#ifndef __IWMDRMDecrypt_INTERFACE_DEFINED__
#define __IWMDRMDecrypt_INTERFACE_DEFINED__

/* interface IWMDRMDecrypt */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMDecrypt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C9E0A5F5-DD22-4dc4-B795-88FA91F0516B")
    IWMDRMDecrypt : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Decrypt( 
            /* [size_is][out][in] */ BYTE *pbData,
            /* [in] */ DWORD cbData,
            /* [in] */ WMDRMCryptoData *pWMCryptoData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMDecryptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMDecrypt * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMDecrypt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMDecrypt * This);
        
        HRESULT ( STDMETHODCALLTYPE *Decrypt )( 
            IWMDRMDecrypt * This,
            /* [size_is][out][in] */ BYTE *pbData,
            /* [in] */ DWORD cbData,
            /* [in] */ WMDRMCryptoData *pWMCryptoData);
        
        END_INTERFACE
    } IWMDRMDecryptVtbl;

    interface IWMDRMDecrypt
    {
        CONST_VTBL struct IWMDRMDecryptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMDecrypt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMDecrypt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMDecrypt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMDecrypt_Decrypt(This,pbData,cbData,pWMCryptoData)	\
    ( (This)->lpVtbl -> Decrypt(This,pbData,cbData,pWMCryptoData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMDecrypt_INTERFACE_DEFINED__ */


#ifndef __IWMDRMLicense_INTERFACE_DEFINED__
#define __IWMDRMLicense_INTERFACE_DEFINED__

/* interface IWMDRMLicense */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMLicense;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C9E0A5F3-DD22-4dc4-B795-88FA91F0516B")
    IWMDRMLicense : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ResetEnumeration( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNext( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLicense( 
            /* [size_is][size_is][out] */ BYTE **ppbLicense,
            /* [out] */ DWORD *pcbLicense,
            /* [out] */ DWORD *pdwLicenseType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLicenseProperty( 
            /* [in] */ BSTR bstrName,
            /* [out] */ PROPVARIANT *ppropVariant) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDecryptor( 
            /* [out] */ IWMDRMDecrypt **ppDecryptor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateSecureDecryptor( 
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DWORD dwCertificateType,
            /* [in] */ DWORD dwFlags,
            /* [out] */ BYTE *pbInitializationVector,
            /* [out] */ DWORD *pcbInitializationVector,
            /* [out] */ IWMDRMDecrypt **ppDecryptor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateEncryptor( 
            /* [out] */ IWMDRMEncrypt **ppEncryptor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PersistLicense( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanPersist( 
            /* [out] */ BOOL *pfCanPersist) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAnalogVideoRestrictionLevels( 
            /* [size_is][out] */ WMDRM_ANALOG_VIDEO_RESTRICTIONS rgAnalogVideoRestrictions[  ],
            /* [out][in] */ DWORD *pcRestrictions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputProtectionLevels( 
            /* [out] */ WMDRM_OUTPUT_PROTECTION_LEVELS *pOPLs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInclusionList( 
            /* [size_is][size_is][out] */ GUID **ppGuids,
            /* [out] */ DWORD *pcGuids) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPolicy( 
            /* [size_is][size_is][out] */ BYTE **ppbPolicy,
            /* [out] */ DWORD *pcbPolicy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMLicenseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMLicense * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMLicense * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMLicense * This);
        
        HRESULT ( STDMETHODCALLTYPE *ResetEnumeration )( 
            IWMDRMLicense * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetNext )( 
            IWMDRMLicense * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLicense )( 
            IWMDRMLicense * This,
            /* [size_is][size_is][out] */ BYTE **ppbLicense,
            /* [out] */ DWORD *pcbLicense,
            /* [out] */ DWORD *pdwLicenseType);
        
        HRESULT ( STDMETHODCALLTYPE *GetLicenseProperty )( 
            IWMDRMLicense * This,
            /* [in] */ BSTR bstrName,
            /* [out] */ PROPVARIANT *ppropVariant);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDecryptor )( 
            IWMDRMLicense * This,
            /* [out] */ IWMDRMDecrypt **ppDecryptor);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSecureDecryptor )( 
            IWMDRMLicense * This,
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DWORD dwCertificateType,
            /* [in] */ DWORD dwFlags,
            /* [out] */ BYTE *pbInitializationVector,
            /* [out] */ DWORD *pcbInitializationVector,
            /* [out] */ IWMDRMDecrypt **ppDecryptor);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEncryptor )( 
            IWMDRMLicense * This,
            /* [out] */ IWMDRMEncrypt **ppEncryptor);
        
        HRESULT ( STDMETHODCALLTYPE *PersistLicense )( 
            IWMDRMLicense * This);
        
        HRESULT ( STDMETHODCALLTYPE *CanPersist )( 
            IWMDRMLicense * This,
            /* [out] */ BOOL *pfCanPersist);
        
        HRESULT ( STDMETHODCALLTYPE *GetAnalogVideoRestrictionLevels )( 
            IWMDRMLicense * This,
            /* [size_is][out] */ WMDRM_ANALOG_VIDEO_RESTRICTIONS rgAnalogVideoRestrictions[  ],
            /* [out][in] */ DWORD *pcRestrictions);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputProtectionLevels )( 
            IWMDRMLicense * This,
            /* [out] */ WMDRM_OUTPUT_PROTECTION_LEVELS *pOPLs);
        
        HRESULT ( STDMETHODCALLTYPE *GetInclusionList )( 
            IWMDRMLicense * This,
            /* [size_is][size_is][out] */ GUID **ppGuids,
            /* [out] */ DWORD *pcGuids);
        
        HRESULT ( STDMETHODCALLTYPE *GetPolicy )( 
            IWMDRMLicense * This,
            /* [size_is][size_is][out] */ BYTE **ppbPolicy,
            /* [out] */ DWORD *pcbPolicy);
        
        END_INTERFACE
    } IWMDRMLicenseVtbl;

    interface IWMDRMLicense
    {
        CONST_VTBL struct IWMDRMLicenseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMLicense_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMLicense_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMLicense_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMLicense_ResetEnumeration(This)	\
    ( (This)->lpVtbl -> ResetEnumeration(This) ) 

#define IWMDRMLicense_GetNext(This)	\
    ( (This)->lpVtbl -> GetNext(This) ) 

#define IWMDRMLicense_GetLicense(This,ppbLicense,pcbLicense,pdwLicenseType)	\
    ( (This)->lpVtbl -> GetLicense(This,ppbLicense,pcbLicense,pdwLicenseType) ) 

#define IWMDRMLicense_GetLicenseProperty(This,bstrName,ppropVariant)	\
    ( (This)->lpVtbl -> GetLicenseProperty(This,bstrName,ppropVariant) ) 

#define IWMDRMLicense_CreateDecryptor(This,ppDecryptor)	\
    ( (This)->lpVtbl -> CreateDecryptor(This,ppDecryptor) ) 

#define IWMDRMLicense_CreateSecureDecryptor(This,pbCertificate,cbCertificate,dwCertificateType,dwFlags,pbInitializationVector,pcbInitializationVector,ppDecryptor)	\
    ( (This)->lpVtbl -> CreateSecureDecryptor(This,pbCertificate,cbCertificate,dwCertificateType,dwFlags,pbInitializationVector,pcbInitializationVector,ppDecryptor) ) 

#define IWMDRMLicense_CreateEncryptor(This,ppEncryptor)	\
    ( (This)->lpVtbl -> CreateEncryptor(This,ppEncryptor) ) 

#define IWMDRMLicense_PersistLicense(This)	\
    ( (This)->lpVtbl -> PersistLicense(This) ) 

#define IWMDRMLicense_CanPersist(This,pfCanPersist)	\
    ( (This)->lpVtbl -> CanPersist(This,pfCanPersist) ) 

#define IWMDRMLicense_GetAnalogVideoRestrictionLevels(This,rgAnalogVideoRestrictions,pcRestrictions)	\
    ( (This)->lpVtbl -> GetAnalogVideoRestrictionLevels(This,rgAnalogVideoRestrictions,pcRestrictions) ) 

#define IWMDRMLicense_GetOutputProtectionLevels(This,pOPLs)	\
    ( (This)->lpVtbl -> GetOutputProtectionLevels(This,pOPLs) ) 

#define IWMDRMLicense_GetInclusionList(This,ppGuids,pcGuids)	\
    ( (This)->lpVtbl -> GetInclusionList(This,ppGuids,pcGuids) ) 

#define IWMDRMLicense_GetPolicy(This,ppbPolicy,pcbPolicy)	\
    ( (This)->lpVtbl -> GetPolicy(This,ppbPolicy,pcbPolicy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMLicense_INTERFACE_DEFINED__ */


#ifndef __IWMDRMLicenseQuery_INTERFACE_DEFINED__
#define __IWMDRMLicenseQuery_INTERFACE_DEFINED__

/* interface IWMDRMLicenseQuery */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMLicenseQuery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("20B970DF-0A58-4d3c-817C-4E3CCBB253AC")
    IWMDRMLicenseQuery : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryLicenseState( 
            /* [in] */ __RPC__in BSTR bstrKID,
            /* [in] */ DWORD cActionsToQuery,
            /* [size_is][in] */ __RPC__in_ecount_full(cActionsToQuery) BSTR rgbstrActionsToQuery[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(cActionsToQuery) DRM_LICENSE_STATE_DATA rgResultStateData[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetActionAllowedQueryParams( 
            /* [in] */ BOOL fIsMF,
            /* [in] */ DWORD dwAppSecLevel,
            /* [in] */ BOOL fHasSerialNumber,
            /* [in] */ __RPC__in BSTR bstrDeviceCert) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryActionAllowed( 
            /* [in] */ __RPC__in BSTR bstrKID,
            /* [in] */ __RPC__in BSTR bstrMinReqIndivVersion,
            /* [in] */ DWORD cActionsToQuery,
            /* [size_is][in] */ __RPC__in_ecount_full(cActionsToQuery) BSTR rgbstrActionsToQuery[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(cActionsToQuery) DWORD rgdwQueryResult[  ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMLicenseQueryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMLicenseQuery * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMLicenseQuery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMLicenseQuery * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueryLicenseState )( 
            IWMDRMLicenseQuery * This,
            /* [in] */ __RPC__in BSTR bstrKID,
            /* [in] */ DWORD cActionsToQuery,
            /* [size_is][in] */ __RPC__in_ecount_full(cActionsToQuery) BSTR rgbstrActionsToQuery[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(cActionsToQuery) DRM_LICENSE_STATE_DATA rgResultStateData[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *SetActionAllowedQueryParams )( 
            IWMDRMLicenseQuery * This,
            /* [in] */ BOOL fIsMF,
            /* [in] */ DWORD dwAppSecLevel,
            /* [in] */ BOOL fHasSerialNumber,
            /* [in] */ __RPC__in BSTR bstrDeviceCert);
        
        HRESULT ( STDMETHODCALLTYPE *QueryActionAllowed )( 
            IWMDRMLicenseQuery * This,
            /* [in] */ __RPC__in BSTR bstrKID,
            /* [in] */ __RPC__in BSTR bstrMinReqIndivVersion,
            /* [in] */ DWORD cActionsToQuery,
            /* [size_is][in] */ __RPC__in_ecount_full(cActionsToQuery) BSTR rgbstrActionsToQuery[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(cActionsToQuery) DWORD rgdwQueryResult[  ]);
        
        END_INTERFACE
    } IWMDRMLicenseQueryVtbl;

    interface IWMDRMLicenseQuery
    {
        CONST_VTBL struct IWMDRMLicenseQueryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMLicenseQuery_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMLicenseQuery_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMLicenseQuery_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMLicenseQuery_QueryLicenseState(This,bstrKID,cActionsToQuery,rgbstrActionsToQuery,rgResultStateData)	\
    ( (This)->lpVtbl -> QueryLicenseState(This,bstrKID,cActionsToQuery,rgbstrActionsToQuery,rgResultStateData) ) 

#define IWMDRMLicenseQuery_SetActionAllowedQueryParams(This,fIsMF,dwAppSecLevel,fHasSerialNumber,bstrDeviceCert)	\
    ( (This)->lpVtbl -> SetActionAllowedQueryParams(This,fIsMF,dwAppSecLevel,fHasSerialNumber,bstrDeviceCert) ) 

#define IWMDRMLicenseQuery_QueryActionAllowed(This,bstrKID,bstrMinReqIndivVersion,cActionsToQuery,rgbstrActionsToQuery,rgdwQueryResult)	\
    ( (This)->lpVtbl -> QueryActionAllowed(This,bstrKID,bstrMinReqIndivVersion,cActionsToQuery,rgbstrActionsToQuery,rgdwQueryResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMLicenseQuery_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmdrmsdk_0000_0009 */
/* [local] */ 

typedef struct WMDRM_LICENSE_FILTER
    {
    DWORD dwVersion;
    BSTR bstrKID;
    BSTR bstrRights;
    BSTR bstrAllowedSourceIDs;
    } 	WMDRM_LICENSE_FILTER;



extern RPC_IF_HANDLE __MIDL_itf_wmdrmsdk_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmdrmsdk_0000_0009_v0_0_s_ifspec;

#ifndef __IWMDRMLicenseManagement_INTERFACE_DEFINED__
#define __IWMDRMLicenseManagement_INTERFACE_DEFINED__

/* interface IWMDRMLicenseManagement */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMLicenseManagement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F4828DC7-8945-4D05-AB05-667AB99D29EE")
    IWMDRMLicenseManagement : public IWMDRMEventGenerator
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateLicenseEnumeration( 
            /* [in] */ __RPC__in WMDRM_LICENSE_FILTER *pLicenseFilter,
            /* [out] */ __RPC__deref_out_opt IWMDRMLicense **pEnumerator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteLicense( 
            /* [in] */ __RPC__in BSTR bstrKID,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CleanLicenseStore( 
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StoreLicense( 
            /* [in] */ __RPC__in BSTR bstrLicenseResponse) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AcquireLicense( 
            /* [in] */ __RPC__in BSTR bstrURL,
            /* [in] */ __RPC__in BSTR bstrHeaderData,
            /* [in] */ __RPC__in BSTR bstrActions,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MonitorLicenseAcquisition( 
            /* [in] */ __RPC__in BSTR bstrKID,
            /* [in] */ __RPC__in BSTR bstrHeader,
            /* [in] */ __RPC__in BSTR bstrActions,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BackupLicenses( 
            /* [in] */ __RPC__in BSTR bstrBackupDirectory,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RestoreLicenses( 
            /* [in] */ __RPC__in BSTR bstrBackupDirectory,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateLicenseRevocationChallenge( 
            /* [size_is][in] */ __RPC__in_ecount_full(cbMachineID) BYTE *pbMachineID,
            /* [in] */ DWORD cbMachineID,
            /* [size_is][in] */ __RPC__in_ecount_full(cbChallenge) BYTE *pbChallenge,
            /* [in] */ DWORD cbChallenge,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbChallengeOutput) BYTE **ppbChallengeOutput,
            /* [out] */ __RPC__out DWORD *pcbChallengeOutput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProcessLicenseRevocationResponse( 
            /* [size_is][in] */ __RPC__in_ecount_full(cbSignedLRB) BYTE *pbSignedLRB,
            /* [in] */ DWORD cbSignedLRB,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbSignedACK) BYTE **ppbSignedACK,
            /* [out] */ __RPC__out DWORD *pcbSignedACK) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProcessLicenseDeletionMessage( 
            /* [in] */ __RPC__in BSTR bstrDeletionMessage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMLicenseManagementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMLicenseManagement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMLicenseManagement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEvent )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IMFMediaEvent **ppEvent);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *BeginGetEvent )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ IMFAsyncCallback *pCallback,
            /* [in] */ IUnknown *punkState);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *EndGetEvent )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ IMFAsyncResult *pResult,
            /* [out] */ 
            __out  IMFMediaEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *QueueEvent )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ MediaEventType met,
            /* [in] */ __RPC__in REFGUID guidExtendedType,
            /* [in] */ HRESULT hrStatus,
            /* [unique][in] */ __RPC__in_opt const PROPVARIANT *pvValue);
        
        HRESULT ( STDMETHODCALLTYPE *CancelAsyncOperation )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in_opt IUnknown *punkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IWMDRMLicenseManagement * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLicenseEnumeration )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in WMDRM_LICENSE_FILTER *pLicenseFilter,
            /* [out] */ __RPC__deref_out_opt IWMDRMLicense **pEnumerator);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteLicense )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in BSTR bstrKID,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *CleanLicenseStore )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *StoreLicense )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in BSTR bstrLicenseResponse);
        
        HRESULT ( STDMETHODCALLTYPE *AcquireLicense )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in BSTR bstrURL,
            /* [in] */ __RPC__in BSTR bstrHeaderData,
            /* [in] */ __RPC__in BSTR bstrActions,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *MonitorLicenseAcquisition )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in BSTR bstrKID,
            /* [in] */ __RPC__in BSTR bstrHeader,
            /* [in] */ __RPC__in BSTR bstrActions,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *BackupLicenses )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in BSTR bstrBackupDirectory,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreLicenses )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in BSTR bstrBackupDirectory,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt IUnknown **ppunkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLicenseRevocationChallenge )( 
            IWMDRMLicenseManagement * This,
            /* [size_is][in] */ __RPC__in_ecount_full(cbMachineID) BYTE *pbMachineID,
            /* [in] */ DWORD cbMachineID,
            /* [size_is][in] */ __RPC__in_ecount_full(cbChallenge) BYTE *pbChallenge,
            /* [in] */ DWORD cbChallenge,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbChallengeOutput) BYTE **ppbChallengeOutput,
            /* [out] */ __RPC__out DWORD *pcbChallengeOutput);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessLicenseRevocationResponse )( 
            IWMDRMLicenseManagement * This,
            /* [size_is][in] */ __RPC__in_ecount_full(cbSignedLRB) BYTE *pbSignedLRB,
            /* [in] */ DWORD cbSignedLRB,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pcbSignedACK) BYTE **ppbSignedACK,
            /* [out] */ __RPC__out DWORD *pcbSignedACK);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessLicenseDeletionMessage )( 
            IWMDRMLicenseManagement * This,
            /* [in] */ __RPC__in BSTR bstrDeletionMessage);
        
        END_INTERFACE
    } IWMDRMLicenseManagementVtbl;

    interface IWMDRMLicenseManagement
    {
        CONST_VTBL struct IWMDRMLicenseManagementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMLicenseManagement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMLicenseManagement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMLicenseManagement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMLicenseManagement_GetEvent(This,dwFlags,ppEvent)	\
    ( (This)->lpVtbl -> GetEvent(This,dwFlags,ppEvent) ) 

#define IWMDRMLicenseManagement_BeginGetEvent(This,pCallback,punkState)	\
    ( (This)->lpVtbl -> BeginGetEvent(This,pCallback,punkState) ) 

#define IWMDRMLicenseManagement_EndGetEvent(This,pResult,ppEvent)	\
    ( (This)->lpVtbl -> EndGetEvent(This,pResult,ppEvent) ) 

#define IWMDRMLicenseManagement_QueueEvent(This,met,guidExtendedType,hrStatus,pvValue)	\
    ( (This)->lpVtbl -> QueueEvent(This,met,guidExtendedType,hrStatus,pvValue) ) 


#define IWMDRMLicenseManagement_CancelAsyncOperation(This,punkCancelationCookie)	\
    ( (This)->lpVtbl -> CancelAsyncOperation(This,punkCancelationCookie) ) 

#define IWMDRMLicenseManagement_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 


#define IWMDRMLicenseManagement_CreateLicenseEnumeration(This,pLicenseFilter,pEnumerator)	\
    ( (This)->lpVtbl -> CreateLicenseEnumeration(This,pLicenseFilter,pEnumerator) ) 

#define IWMDRMLicenseManagement_DeleteLicense(This,bstrKID,dwFlags)	\
    ( (This)->lpVtbl -> DeleteLicense(This,bstrKID,dwFlags) ) 

#define IWMDRMLicenseManagement_CleanLicenseStore(This,dwFlags,ppunkCancelationCookie)	\
    ( (This)->lpVtbl -> CleanLicenseStore(This,dwFlags,ppunkCancelationCookie) ) 

#define IWMDRMLicenseManagement_StoreLicense(This,bstrLicenseResponse)	\
    ( (This)->lpVtbl -> StoreLicense(This,bstrLicenseResponse) ) 

#define IWMDRMLicenseManagement_AcquireLicense(This,bstrURL,bstrHeaderData,bstrActions,dwFlags,ppunkCancelationCookie)	\
    ( (This)->lpVtbl -> AcquireLicense(This,bstrURL,bstrHeaderData,bstrActions,dwFlags,ppunkCancelationCookie) ) 

#define IWMDRMLicenseManagement_MonitorLicenseAcquisition(This,bstrKID,bstrHeader,bstrActions,ppunkCancelationCookie)	\
    ( (This)->lpVtbl -> MonitorLicenseAcquisition(This,bstrKID,bstrHeader,bstrActions,ppunkCancelationCookie) ) 

#define IWMDRMLicenseManagement_BackupLicenses(This,bstrBackupDirectory,dwFlags,ppunkCancelationCookie)	\
    ( (This)->lpVtbl -> BackupLicenses(This,bstrBackupDirectory,dwFlags,ppunkCancelationCookie) ) 

#define IWMDRMLicenseManagement_RestoreLicenses(This,bstrBackupDirectory,dwFlags,ppunkCancelationCookie)	\
    ( (This)->lpVtbl -> RestoreLicenses(This,bstrBackupDirectory,dwFlags,ppunkCancelationCookie) ) 

#define IWMDRMLicenseManagement_CreateLicenseRevocationChallenge(This,pbMachineID,cbMachineID,pbChallenge,cbChallenge,ppbChallengeOutput,pcbChallengeOutput)	\
    ( (This)->lpVtbl -> CreateLicenseRevocationChallenge(This,pbMachineID,cbMachineID,pbChallenge,cbChallenge,ppbChallengeOutput,pcbChallengeOutput) ) 

#define IWMDRMLicenseManagement_ProcessLicenseRevocationResponse(This,pbSignedLRB,cbSignedLRB,ppbSignedACK,pcbSignedACK)	\
    ( (This)->lpVtbl -> ProcessLicenseRevocationResponse(This,pbSignedLRB,cbSignedLRB,ppbSignedACK,pcbSignedACK) ) 

#define IWMDRMLicenseManagement_ProcessLicenseDeletionMessage(This,bstrDeletionMessage)	\
    ( (This)->lpVtbl -> ProcessLicenseDeletionMessage(This,bstrDeletionMessage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMLicenseManagement_INTERFACE_DEFINED__ */


#ifndef __IWMDRMNetReceiver_INTERFACE_DEFINED__
#define __IWMDRMNetReceiver_INTERFACE_DEFINED__

/* interface IWMDRMNetReceiver */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMNetReceiver;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F9C074A4-15D6-44C0-8A6D-2446ACC109AE")
    IWMDRMNetReceiver : public IWMDRMEventGenerator
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRegistrationChallenge( 
            /* [size_is][size_is][out] */ BYTE **ppbRegistrationChallenge,
            /* [out] */ DWORD *pcbRegistrationChallenge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProcessRegistrationResponse( 
            /* [size_is][in] */ BYTE *pbRegistrationResponse,
            /* [in] */ DWORD cbRegistrationResponse,
            /* [out] */ IUnknown **ppunkCancellationCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLicenseChallenge( 
            /* [in] */ BSTR bstrAction,
            /* [size_is][size_is][out] */ BYTE **ppbLicenseChallenge,
            /* [out] */ DWORD *pcbLicenseChallenge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProcessLicenseResponse( 
            /* [size_is][in] */ BYTE *pbLicenseResponse,
            /* [in] */ DWORD cbLicenseResponse,
            /* [size_is][size_is][out] */ BYTE **ppbWMDRMNetLicenseRepresentation,
            /* [out] */ DWORD *pcbWMDRMNetLicenseRepresentation) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMNetReceiverVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMNetReceiver * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMNetReceiver * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMNetReceiver * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEvent )( 
            IWMDRMNetReceiver * This,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IMFMediaEvent **ppEvent);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *BeginGetEvent )( 
            IWMDRMNetReceiver * This,
            /* [in] */ IMFAsyncCallback *pCallback,
            /* [in] */ IUnknown *punkState);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *EndGetEvent )( 
            IWMDRMNetReceiver * This,
            /* [in] */ IMFAsyncResult *pResult,
            /* [out] */ 
            __out  IMFMediaEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *QueueEvent )( 
            IWMDRMNetReceiver * This,
            /* [in] */ MediaEventType met,
            /* [in] */ REFGUID guidExtendedType,
            /* [in] */ HRESULT hrStatus,
            /* [unique][in] */ const PROPVARIANT *pvValue);
        
        HRESULT ( STDMETHODCALLTYPE *CancelAsyncOperation )( 
            IWMDRMNetReceiver * This,
            /* [in] */ IUnknown *punkCancelationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IWMDRMNetReceiver * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRegistrationChallenge )( 
            IWMDRMNetReceiver * This,
            /* [size_is][size_is][out] */ BYTE **ppbRegistrationChallenge,
            /* [out] */ DWORD *pcbRegistrationChallenge);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessRegistrationResponse )( 
            IWMDRMNetReceiver * This,
            /* [size_is][in] */ BYTE *pbRegistrationResponse,
            /* [in] */ DWORD cbRegistrationResponse,
            /* [out] */ IUnknown **ppunkCancellationCookie);
        
        HRESULT ( STDMETHODCALLTYPE *GetLicenseChallenge )( 
            IWMDRMNetReceiver * This,
            /* [in] */ BSTR bstrAction,
            /* [size_is][size_is][out] */ BYTE **ppbLicenseChallenge,
            /* [out] */ DWORD *pcbLicenseChallenge);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessLicenseResponse )( 
            IWMDRMNetReceiver * This,
            /* [size_is][in] */ BYTE *pbLicenseResponse,
            /* [in] */ DWORD cbLicenseResponse,
            /* [size_is][size_is][out] */ BYTE **ppbWMDRMNetLicenseRepresentation,
            /* [out] */ DWORD *pcbWMDRMNetLicenseRepresentation);
        
        END_INTERFACE
    } IWMDRMNetReceiverVtbl;

    interface IWMDRMNetReceiver
    {
        CONST_VTBL struct IWMDRMNetReceiverVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMNetReceiver_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMNetReceiver_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMNetReceiver_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMNetReceiver_GetEvent(This,dwFlags,ppEvent)	\
    ( (This)->lpVtbl -> GetEvent(This,dwFlags,ppEvent) ) 

#define IWMDRMNetReceiver_BeginGetEvent(This,pCallback,punkState)	\
    ( (This)->lpVtbl -> BeginGetEvent(This,pCallback,punkState) ) 

#define IWMDRMNetReceiver_EndGetEvent(This,pResult,ppEvent)	\
    ( (This)->lpVtbl -> EndGetEvent(This,pResult,ppEvent) ) 

#define IWMDRMNetReceiver_QueueEvent(This,met,guidExtendedType,hrStatus,pvValue)	\
    ( (This)->lpVtbl -> QueueEvent(This,met,guidExtendedType,hrStatus,pvValue) ) 


#define IWMDRMNetReceiver_CancelAsyncOperation(This,punkCancelationCookie)	\
    ( (This)->lpVtbl -> CancelAsyncOperation(This,punkCancelationCookie) ) 

#define IWMDRMNetReceiver_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 


#define IWMDRMNetReceiver_GetRegistrationChallenge(This,ppbRegistrationChallenge,pcbRegistrationChallenge)	\
    ( (This)->lpVtbl -> GetRegistrationChallenge(This,ppbRegistrationChallenge,pcbRegistrationChallenge) ) 

#define IWMDRMNetReceiver_ProcessRegistrationResponse(This,pbRegistrationResponse,cbRegistrationResponse,ppunkCancellationCookie)	\
    ( (This)->lpVtbl -> ProcessRegistrationResponse(This,pbRegistrationResponse,cbRegistrationResponse,ppunkCancellationCookie) ) 

#define IWMDRMNetReceiver_GetLicenseChallenge(This,bstrAction,ppbLicenseChallenge,pcbLicenseChallenge)	\
    ( (This)->lpVtbl -> GetLicenseChallenge(This,bstrAction,ppbLicenseChallenge,pcbLicenseChallenge) ) 

#define IWMDRMNetReceiver_ProcessLicenseResponse(This,pbLicenseResponse,cbLicenseResponse,ppbWMDRMNetLicenseRepresentation,pcbWMDRMNetLicenseRepresentation)	\
    ( (This)->lpVtbl -> ProcessLicenseResponse(This,pbLicenseResponse,cbLicenseResponse,ppbWMDRMNetLicenseRepresentation,pcbWMDRMNetLicenseRepresentation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMNetReceiver_INTERFACE_DEFINED__ */


#ifndef __IWMDRMNetTransmitter_INTERFACE_DEFINED__
#define __IWMDRMNetTransmitter_INTERFACE_DEFINED__

/* interface IWMDRMNetTransmitter */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMNetTransmitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F040C12B-4415-4F20-93F0-453EB519A756")
    IWMDRMNetTransmitter : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetLicenseChallenge( 
            /* [size_is][in] */ BYTE *pbLicenseChallenge,
            /* [in] */ DWORD cbLicenseChallenge) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRootLicenseResponse( 
            /* [in] */ BSTR bstrKID,
            /* [size_is][size_is][out] */ BYTE **ppbLicenseResponse,
            /* [out] */ DWORD *pcbLicenseResponse) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLeafLicenseResponse( 
            /* [in] */ BSTR bstrKID,
            /* [in] */ WMDRMNET_POLICY *pPolicy,
            /* [out] */ IWMDRMEncrypt **ppIWMDRMEncrypt,
            /* [size_is][size_is][out] */ BYTE **ppbLicenseResponse,
            /* [out] */ DWORD *pcbLicenseResponse) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMNetTransmitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMNetTransmitter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMNetTransmitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMNetTransmitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetLicenseChallenge )( 
            IWMDRMNetTransmitter * This,
            /* [size_is][in] */ BYTE *pbLicenseChallenge,
            /* [in] */ DWORD cbLicenseChallenge);
        
        HRESULT ( STDMETHODCALLTYPE *GetRootLicenseResponse )( 
            IWMDRMNetTransmitter * This,
            /* [in] */ BSTR bstrKID,
            /* [size_is][size_is][out] */ BYTE **ppbLicenseResponse,
            /* [out] */ DWORD *pcbLicenseResponse);
        
        HRESULT ( STDMETHODCALLTYPE *GetLeafLicenseResponse )( 
            IWMDRMNetTransmitter * This,
            /* [in] */ BSTR bstrKID,
            /* [in] */ WMDRMNET_POLICY *pPolicy,
            /* [out] */ IWMDRMEncrypt **ppIWMDRMEncrypt,
            /* [size_is][size_is][out] */ BYTE **ppbLicenseResponse,
            /* [out] */ DWORD *pcbLicenseResponse);
        
        END_INTERFACE
    } IWMDRMNetTransmitterVtbl;

    interface IWMDRMNetTransmitter
    {
        CONST_VTBL struct IWMDRMNetTransmitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMNetTransmitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMNetTransmitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMNetTransmitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMNetTransmitter_SetLicenseChallenge(This,pbLicenseChallenge,cbLicenseChallenge)	\
    ( (This)->lpVtbl -> SetLicenseChallenge(This,pbLicenseChallenge,cbLicenseChallenge) ) 

#define IWMDRMNetTransmitter_GetRootLicenseResponse(This,bstrKID,ppbLicenseResponse,pcbLicenseResponse)	\
    ( (This)->lpVtbl -> GetRootLicenseResponse(This,bstrKID,ppbLicenseResponse,pcbLicenseResponse) ) 

#define IWMDRMNetTransmitter_GetLeafLicenseResponse(This,bstrKID,pPolicy,ppIWMDRMEncrypt,ppbLicenseResponse,pcbLicenseResponse)	\
    ( (This)->lpVtbl -> GetLeafLicenseResponse(This,bstrKID,pPolicy,ppIWMDRMEncrypt,ppbLicenseResponse,pcbLicenseResponse) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMNetTransmitter_INTERFACE_DEFINED__ */


#ifndef __IWMDRMIndividualizationStatus_INTERFACE_DEFINED__
#define __IWMDRMIndividualizationStatus_INTERFACE_DEFINED__

/* interface IWMDRMIndividualizationStatus */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMIndividualizationStatus;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7DB091BD-DB6A-4FA4-BCBF-0783E256C78C")
    IWMDRMIndividualizationStatus : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ WM_INDIVIDUALIZE_STATUS *pStatus) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMIndividualizationStatusVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMIndividualizationStatus * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMIndividualizationStatus * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMIndividualizationStatus * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            IWMDRMIndividualizationStatus * This,
            /* [out] */ WM_INDIVIDUALIZE_STATUS *pStatus);
        
        END_INTERFACE
    } IWMDRMIndividualizationStatusVtbl;

    interface IWMDRMIndividualizationStatus
    {
        CONST_VTBL struct IWMDRMIndividualizationStatusVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMIndividualizationStatus_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMIndividualizationStatus_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMIndividualizationStatus_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMIndividualizationStatus_GetStatus(This,pStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pStatus) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMIndividualizationStatus_INTERFACE_DEFINED__ */


#ifndef __IWMDRMLicenseBackupRestoreStatus_INTERFACE_DEFINED__
#define __IWMDRMLicenseBackupRestoreStatus_INTERFACE_DEFINED__

/* interface IWMDRMLicenseBackupRestoreStatus */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMLicenseBackupRestoreStatus;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F653C5A2-0EB3-4503-9D88-C200552D0D55")
    IWMDRMLicenseBackupRestoreStatus : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ WM_BACKUP_RESTORE_STATUS *pStatus) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMLicenseBackupRestoreStatusVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMLicenseBackupRestoreStatus * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMLicenseBackupRestoreStatus * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMLicenseBackupRestoreStatus * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            IWMDRMLicenseBackupRestoreStatus * This,
            /* [out] */ WM_BACKUP_RESTORE_STATUS *pStatus);
        
        END_INTERFACE
    } IWMDRMLicenseBackupRestoreStatusVtbl;

    interface IWMDRMLicenseBackupRestoreStatus
    {
        CONST_VTBL struct IWMDRMLicenseBackupRestoreStatusVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMLicenseBackupRestoreStatus_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMLicenseBackupRestoreStatus_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMLicenseBackupRestoreStatus_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMLicenseBackupRestoreStatus_GetStatus(This,pStatus)	\
    ( (This)->lpVtbl -> GetStatus(This,pStatus) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMLicenseBackupRestoreStatus_INTERFACE_DEFINED__ */


#ifndef __IWMDRMNonSilentLicenseAquisition_INTERFACE_DEFINED__
#define __IWMDRMNonSilentLicenseAquisition_INTERFACE_DEFINED__

/* interface IWMDRMNonSilentLicenseAquisition */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMNonSilentLicenseAquisition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8AE059DD-BE6B-481A-863A-59056B50B748")
    IWMDRMNonSilentLicenseAquisition : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetURL( 
            /* [out] */ BSTR *pbstrURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetChallenge( 
            /* [out] */ BSTR *pbstrChallenge) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMNonSilentLicenseAquisitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMNonSilentLicenseAquisition * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMNonSilentLicenseAquisition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMNonSilentLicenseAquisition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetURL )( 
            IWMDRMNonSilentLicenseAquisition * This,
            /* [out] */ BSTR *pbstrURL);
        
        HRESULT ( STDMETHODCALLTYPE *GetChallenge )( 
            IWMDRMNonSilentLicenseAquisition * This,
            /* [out] */ BSTR *pbstrChallenge);
        
        END_INTERFACE
    } IWMDRMNonSilentLicenseAquisitionVtbl;

    interface IWMDRMNonSilentLicenseAquisition
    {
        CONST_VTBL struct IWMDRMNonSilentLicenseAquisitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMNonSilentLicenseAquisition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMNonSilentLicenseAquisition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMNonSilentLicenseAquisition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMNonSilentLicenseAquisition_GetURL(This,pbstrURL)	\
    ( (This)->lpVtbl -> GetURL(This,pbstrURL) ) 

#define IWMDRMNonSilentLicenseAquisition_GetChallenge(This,pbstrChallenge)	\
    ( (This)->lpVtbl -> GetChallenge(This,pbstrChallenge) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMNonSilentLicenseAquisition_INTERFACE_DEFINED__ */



#ifndef __WMDRMContentEnablerLib_LIBRARY_DEFINED__
#define __WMDRMContentEnablerLib_LIBRARY_DEFINED__

/* library WMDRMContentEnablerLib */
/* [version][uuid] */ 


EXTERN_C const IID LIBID_WMDRMContentEnablerLib;

EXTERN_C const CLSID CLSID_WMDRMContentEnablerActivate;

#ifdef __cplusplus

class DECLSPEC_UUID("82435bdf-f7c1-4df9-8103-eeabebf3d6e1")
WMDRMContentEnablerActivate;
#endif
#endif /* __WMDRMContentEnablerLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\Wmistr.h ===
/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    Wmistr.h

Abstract:

    WMI structure definitions

--*/

#ifndef _WMISTR_
#define _WMISTR_

#pragma once

#if _MSC_VER >= 1200
#pragma warning(push)
#endif
#pragma warning(disable: 4200) // nonstandard extension used : zero-sized array in struct/union
#pragma warning(disable: 4201) // nonstandard extension used : nameless struct/union

//
// WNODE definition
typedef struct _WNODE_HEADER
{
    ULONG BufferSize;        // Size of entire buffer inclusive of this ULONG
    ULONG ProviderId;    // Provider Id of driver returning this buffer
    union
    {
        ULONG64 HistoricalContext;  // Logger use
        struct
            {
            ULONG Version;           // Reserved
            ULONG Linkage;           // Linkage field reserved for WMI
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;

    union
    {
        ULONG CountLost;         // Reserved
        HANDLE KernelHandle;     // Kernel handle for data block
        LARGE_INTEGER TimeStamp; // Timestamp as returned in units of 100ns
                                 // since 1/1/1601
    } DUMMYUNIONNAME2;
    GUID Guid;                  // Guid for data block returned with results
    ULONG ClientContext;
    ULONG Flags;             // Flags, see below
} WNODE_HEADER, *PWNODE_HEADER;

//
// WNODE_HEADER flags are defined as follows
#define WNODE_FLAG_ALL_DATA        0x00000001 // set for WNODE_ALL_DATA
#define WNODE_FLAG_SINGLE_INSTANCE 0x00000002 // set for WNODE_SINGLE_INSTANCE
#define WNODE_FLAG_SINGLE_ITEM     0x00000004 // set for WNODE_SINGLE_ITEM
#define WNODE_FLAG_EVENT_ITEM      0x00000008 // set for WNODE_EVENT_ITEM

                                              // Set if data block size is
                                              // identical for all instances
                                              // (used with  WNODE_ALL_DATA
                                              // only)
#define WNODE_FLAG_FIXED_INSTANCE_SIZE 0x00000010

#define WNODE_FLAG_TOO_SMALL           0x00000020 // set for WNODE_TOO_SMALL

                                 // Set when a data provider returns a
                                 // WNODE_ALL_DATA in which the number of
                                 // instances and their names returned
                                 // are identical to those returned from the
                                 // previous WNODE_ALL_DATA query. Only data
                                 // blocks registered with dynamic instance
                                 // names should use this flag.
#define WNODE_FLAG_INSTANCES_SAME  0x00000040

                                 // Instance names are not specified in
                                 // WNODE_ALL_DATA; values specified at
                                 // registration are used instead. Always
                                 // set for guids registered with static
                                 // instance names
#define WNODE_FLAG_STATIC_INSTANCE_NAMES 0x00000080

#define WNODE_FLAG_INTERNAL      0x00000100  // Used internally by WMI

                                 // timestamp should not be modified by
                                 // a historical logger
#define WNODE_FLAG_USE_TIMESTAMP 0x00000200

#if (NTDDI_VERSION >= NTDDI_WINXP)
#define WNODE_FLAG_PERSIST_EVENT 0x00000400
#endif

#define WNODE_FLAG_EVENT_REFERENCE 0x00002000

// Set if Instance names are ansi. Only set when returning from
// WMIQuerySingleInstanceA and WMIQueryAllDataA
#define WNODE_FLAG_ANSI_INSTANCENAMES 0x00004000

// Set if WNODE is a method call
#define WNODE_FLAG_METHOD_ITEM     0x00008000

// Set if instance names originated from a PDO
#define WNODE_FLAG_PDO_INSTANCE_NAMES  0x00010000

// The second byte, except the first bit is used exclusively for tracing
#define WNODE_FLAG_TRACED_GUID   0x00020000 // denotes a trace

#define WNODE_FLAG_LOG_WNODE     0x00040000 // request to log Wnode

#define WNODE_FLAG_USE_GUID_PTR  0x00080000 // Guid is actually a pointer

#define WNODE_FLAG_USE_MOF_PTR   0x00100000 // MOF data are dereferenced

#if (NTDDI_VERSION >= NTDDI_WINXP)
#define WNODE_FLAG_NO_HEADER     0x00200000 // Trace without header
#endif

#if (NTDDI_VERSION >= NTDDI_VISTA)
#define WNODE_FLAG_SEND_DATA_BLOCK  0x00400000 // Data Block delivery
#endif

// Set for events that are WNODE_EVENT_REFERENCE
// Mask for event severity level. Level 0xff is the most severe type of event
#define WNODE_FLAG_SEVERITY_MASK 0xff000000


//
// This structure is used within the WNODE_ALL_DATA when the data blocks
// for the different instances are different lengths. If the data blocks
// for the different instances are identical lengths then
// WNODE_FLAG_FIXED_INSTANCE_SIZE should be set and FixedInstanceSize
// set to the common data block size.
typedef struct
{
    ULONG OffsetInstanceData;   // Offset from beginning of WNODE_ALL_DATA
                                // to Data block for instance
    ULONG LengthInstanceData;   // Length of data block for instance
} OFFSETINSTANCEDATAANDLENGTH, *POFFSETINSTANCEDATAANDLENGTH;

typedef struct tagWNODE_ALL_DATA
{
    struct _WNODE_HEADER WnodeHeader;

    ULONG DataBlockOffset;// Offset from begin of WNODE to first data block

    ULONG InstanceCount;  // Count of instances whose data follows.

                      // Offset to an array of offsets to the instance names
    ULONG OffsetInstanceNameOffsets;

    // If WNODE_FLAG_FIXED_INSTANCE_SIZE is set in Flags then
    // FixedInstanceSize specifies the size of each data block. In this case
    // there is one ULONG followed by the data blocks.
    // If WNODE_FLAG_FIXED_INSTANCE_SIZE is not set
    // then OffsetInstanceDataAndLength
    // is an array of OFFSETINSTANCEDATAANDLENGTH that specifies the
    // offsets and lengths of the data blocks for each instance.
    union
    {
        ULONG FixedInstanceSize;
        OFFSETINSTANCEDATAANDLENGTH OffsetInstanceDataAndLength[];
                                    /* [InstanceCount] */
    } DUMMYUNIONNAME;

    // padding so that first data block begins on a 8 byte boundry

    // data blocks and instance names for all instances

} WNODE_ALL_DATA, *PWNODE_ALL_DATA;


typedef struct tagWNODE_SINGLE_INSTANCE
{
    struct _WNODE_HEADER WnodeHeader;

                            // Offset from beginning of WNODE_SINGLE_INSTANCE
                            // to instance name. Use when
                            // WNODE_FLAG_STATIC_INSTANCE_NAMES is reset
                            // (Dynamic instance names)
    ULONG OffsetInstanceName;

                            // Instance index when
                            // WNODE_FLAG_STATIC_INSTANCE_NAME is set
    ULONG InstanceIndex;    // (Static Instance Names)

    ULONG DataBlockOffset;  // offset from beginning of WNODE to data block
    ULONG SizeDataBlock;    // Size of data block for instance

    UCHAR VariableData[];
    // instance names and padding so data block begins on 8 byte boundry

    // data block
} WNODE_SINGLE_INSTANCE, *PWNODE_SINGLE_INSTANCE;


typedef struct tagWNODE_SINGLE_ITEM
{
    struct _WNODE_HEADER WnodeHeader;

                            // Offset from beginning of WNODE_SINGLE_INSTANCE
                            // to instance name. Examine when
                            // WNODE_FLAG_STATIC_INSTANCE_NAME is reset
                            // (Dynamic instance names)
    ULONG OffsetInstanceName;

                            // Instance index when
                            // WNODE_FLAG_STATIC_INSTANCE_NAME
    ULONG InstanceIndex;    //  set (Static Instance Names)

    ULONG ItemId;           // Item Id for data item being set

    ULONG DataBlockOffset;  // offset from WNODE begin to data item value
    ULONG SizeDataItem;     // Size of data item

    UCHAR VariableData[];
    // instance names and padding so data value begins on 8 byte boundry

    // data item value
} WNODE_SINGLE_ITEM, *PWNODE_SINGLE_ITEM;

typedef struct tagWNODE_METHOD_ITEM
{
    struct _WNODE_HEADER WnodeHeader;

                            // Offset from beginning of WNODE_METHOD_ITEM
                            // to instance name. Examine when
                            // WNODE_FLAG_STATIC_INSTANCE_NAME is reset
                            // (Dynamic instance names)
    ULONG OffsetInstanceName;

                            // Instance index when
                            // WNODE_FLAG_STATIC_INSTANCE_NAME
    ULONG InstanceIndex;    //  set (Static Instance Names)

    ULONG MethodId;         // Method id of method being called

    ULONG DataBlockOffset;  // On Entry: offset from WNODE to input data
                            // On Return: offset from WNODE to input and
                            //            output data blocks
    ULONG SizeDataBlock;    // On Entry: Size of input data, 0 if no input
                            //           data
                            // On Return: Size of output data, 0 if no output
                            //            data

    UCHAR VariableData[];
    // instance names and padding so data value begins on 8 byte boundry

    // data item value
} WNODE_METHOD_ITEM, *PWNODE_METHOD_ITEM;

typedef struct tagWNODE_EVENT_ITEM
{
    struct _WNODE_HEADER WnodeHeader;

    // Different data could be here depending upon the flags set in the
    // WNODE_HEADER above. If the WNODE_FLAG_ALL_DATA flag is set then the
    // contents of a WNODE_ALL_DATA  (excluding WNODE_HEADER) is here. If the
    // WNODE_FLAG_SINGLE_INSTANCE flag is set then a WNODE_SINGLE_INSTANCE
    // (excluding WNODE_HEADER) is here. Lastly if the  WNODE_FLAG_SINGLE_ITEM
    // flag is set then a WNODE_SINGLE_ITEM (excluding WNODE_HEADER) is here.
} WNODE_EVENT_ITEM, *PWNODE_EVENT_ITEM;


//
// If a KM data provider needs to fire an event that is larger than the
// maximum size that WMI allows then it should fire a WNODE_EVENT_REFERENCE
// that specifies which guid and instance name to query for the actual data
// that should be part of the event.
typedef struct tagWNODE_EVENT_REFERENCE
{
    struct _WNODE_HEADER WnodeHeader;
    GUID TargetGuid;
    ULONG TargetDataBlockSize;
    union
    {
        ULONG TargetInstanceIndex;
        WCHAR TargetInstanceName[];
    } DUMMYUNIONNAME;
} WNODE_EVENT_REFERENCE, *PWNODE_EVENT_REFERENCE;


typedef struct tagWNODE_TOO_SMALL
{
    struct _WNODE_HEADER WnodeHeader;
    ULONG SizeNeeded;                   // Size needed to build WNODE result
} WNODE_TOO_SMALL, *PWNODE_TOO_SMALL;


typedef struct
{
    GUID Guid;             // Guid of data block being registered or updated
    ULONG Flags;         // Flags

    ULONG InstanceCount; // Count of static instances names for the guid

    union
    {
                     // If WMIREG_FLAG_INSTANCE_LIST then this has the offset
                     // to a list of InstanceCount counted UNICODE
                     // strings placed end to end.
        ULONG InstanceNameList;
                        
                     // If WMIREG_FLAG_INSTANCE_BASENAME then this has the
                     // offset to a single counted UNICODE string that
                     // has the basename for the instance names.
                        
        ULONG BaseNameOffset;
                        
                     // If WMIREG_FLAG_INSTANCE_PDO is set then InstanceInfo
                     // has the PDO whose device instance path will
                     // become the instance name
        ULONG_PTR Pdo;
                        
                     // If WMIREG_FLAG_INSTANCE_REFERENCE then this points to
                     // a WMIREGINSTANCEREF structure.
                        
        ULONG_PTR InstanceInfo;// Offset from beginning of the WMIREGINFO structure to
    } DUMMYUNIONNAME;

} WMIREGGUIDW, *PWMIREGGUIDW;

typedef WMIREGGUIDW WMIREGGUID;
typedef PWMIREGGUIDW PWMIREGGUID;

// Set if collection must be enabled for the guid before the data provider
// can be queried for data.
#define WMIREG_FLAG_EXPENSIVE          0x00000001

// Set if instance names for this guid are specified in a static list within
// the WMIREGINFO
#define WMIREG_FLAG_INSTANCE_LIST      0x00000004

// Set if instance names are to be static and generated by WMI using a
// base name in the WMIREGINFO and an index
#define WMIREG_FLAG_INSTANCE_BASENAME  0x00000008

// Set if WMI should do automatic mapping of a PDO to device instance name
// as the instance name for the guid. This flag should only be used by
// kernel mode data providers.
#define WMIREG_FLAG_INSTANCE_PDO       0x00000020

// Note the flags WMIREG_FLAG_INSTANCE_LIST, WMIREG_FLAG_INSTANCE_BASENAME,
// WMIREG_FLAG_INSTANCE_REFERENCE and WMIREG_FLAG_INSTANCE_PDO are mutually
// exclusive.

//
// These flags are only valid in a response to WMI_GUID_REGUPDATE
#define WMIREG_FLAG_REMOVE_GUID       0x00010000 // Remove support for  guid
#define WMIREG_FLAG_RESERVED1         0x00020000 // Reserved by WMI
#define WMIREG_FLAG_RESERVED2         0x00040000 // Reserved by WMI

// Set if guid is one that is written to trace log.
// This guid cannot be queried directly via WMI, but must be read using
// logger apis.
#define WMIREG_FLAG_TRACED_GUID        0x00080000

//
// Only those Trace Guids that have this bit set can receive
// Enable/Disable Notifications.
//
#define WMIREG_FLAG_TRACE_CONTROL_GUID 0x00001000

//
// Set if the guid is only used for firing events. Guids that can be queried
// and that fire events should not have this bit set.
#define WMIREG_FLAG_EVENT_ONLY_GUID    0x00000040

typedef struct
{
// Size of entire WMIREGINFO structure including this ULONG     
// and any static instance names that follow
    ULONG BufferSize;

    ULONG NextWmiRegInfo;         // Offset to next WMIREGINFO structure

    ULONG RegistryPath; // Offset from beginning of WMIREGINFO structure to a
                        // counted Unicode string containing
                        // the driver registry path (under HKLM\CCS\Services)
                        // This must be filled only by kernel mode data
                                                // providers
                                                        
// Offset from beginning of WMIREGINFO structure to a
// counted Unicode string containing
// the name of resource in driver file containing MOF info
    ULONG MofResourceName;

// Count of WMIREGGUID structures immediately following
    ULONG GuidCount;
    WMIREGGUIDW WmiRegGuid[];  // array of GuidCount WMIREGGUID structures
    // Variable length data including :
    //     Instance Names
} WMIREGINFOW, *PWMIREGINFOW;

typedef WMIREGINFOW WMIREGINFO;
typedef PWMIREGINFOW PWMIREGINFO;

//
// WMI request codes
typedef enum
{
#ifndef _WMIKM_
    WMI_GET_ALL_DATA = 0,
    WMI_GET_SINGLE_INSTANCE = 1,
    WMI_SET_SINGLE_INSTANCE = 2,
    WMI_SET_SINGLE_ITEM = 3,
    WMI_ENABLE_EVENTS = 4,
    WMI_DISABLE_EVENTS  = 5,
    WMI_ENABLE_COLLECTION = 6,
    WMI_DISABLE_COLLECTION = 7,
    WMI_REGINFO = 8,
    WMI_EXECUTE_METHOD = 9
#endif
} WMIDPREQUESTCODE;

#if defined(_WINNT_) || defined(WINNT)
//
// WMI guid objects have the following rights
// WMIGUID_QUERY
// WMIGUID_SET
// WMIGUID_NOTIFICATION
// WMIGUID_READ_DESCRIPTION
// WMIGUID_EXECUTE
// TRACELOG_CREATE_REALTIME
// TRACELOG_CREATE_ONDISK
// TRACELOG_GUID_ENABLE
// TRACELOG_ACCESS_KERNEL_LOGGER
// TRACELOG_LOG_EVENT or TRACELOG_CREATE_INPROC
// TRACELOG_ACCESS_REALTIME
// TRACELOG_REGISTER_GUIDS

//
// GuidTypes 
//
//#ifndef _WMIKM_
#define WMI_GUIDTYPE_TRACECONTROL 0
#define WMI_GUIDTYPE_TRACE        1
#define WMI_GUIDTYPE_DATA         2
#define WMI_GUIDTYPE_EVENT        3
//#endif

//
// Specific rights for WMI guid objects. These are available from 0x0001 to
// 0xffff (ie up to 16 rights)
//
#define WMIGUID_QUERY                 0x0001
#define WMIGUID_SET                   0x0002
#define WMIGUID_NOTIFICATION          0x0004
#define WMIGUID_READ_DESCRIPTION      0x0008
#define WMIGUID_EXECUTE               0x0010
#define TRACELOG_CREATE_REALTIME      0x0020
#define TRACELOG_CREATE_ONDISK        0x0040
#define TRACELOG_GUID_ENABLE          0x0080
#define TRACELOG_ACCESS_KERNEL_LOGGER 0x0100
#define TRACELOG_LOG_EVENT            0x0200 // used on Vista and greater
#define TRACELOG_CREATE_INPROC        0x0200 // used pre-Vista
#define TRACELOG_ACCESS_REALTIME      0x0400
#define TRACELOG_REGISTER_GUIDS       0x0800

#define WMIGUID_ALL_ACCESS_WIN2K (STANDARD_RIGHTS_READ | \
                                  WMIGUID_QUERY | \
                                  WMIGUID_SET | \
                                  WMIGUID_NOTIFICATION | \
                                  WMIGUID_READ_DESCRIPTION | \
                                  WMIGUID_EXECUTE | \
                                  TRACELOG_CREATE_REALTIME | \
                                  TRACELOG_CREATE_ONDISK | \
                                  TRACELOG_GUID_ENABLE | \
                                  TRACELOG_ACCESS_KERNEL_LOGGER | \
                                  TRACELOG_CREATE_INPROC | \
                                  TRACELOG_ACCESS_REALTIME)
                                  
#define WMIGUID_ALL_ACCESS_WINXP (WMIGUID_ALL_ACCESS_WIN2K | \
                                  SYNCHRONIZE | \
                                  TRACELOG_REGISTER_GUIDS)
                                  
#if (NTDDI_VERSION >= NTDDI_WINXP)

#define WMIGUID_ALL_ACCESS WMIGUID_ALL_ACCESS_WINXP

#else

#define WMIGUID_ALL_ACCESS WMIGUID_ALL_ACCESS_WIN2K

#endif

#define WMI_GLOBAL_LOGGER_ID          0x0001
#endif

#if _MSC_VER >= 1200
#pragma warning(pop)
#else
#pragma warning(default: 4200) // nonstandard extension used : zero-sized array in struct/union
#pragma warning(default: 4201) // nonstandard extension used : nameless struct/union
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmdmlog.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmdmlog.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmdmlog_h__
#define __wmdmlog_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMDMLogger_FWD_DEFINED__
#define __IWMDMLogger_FWD_DEFINED__
typedef interface IWMDMLogger IWMDMLogger;
#endif 	/* __IWMDMLogger_FWD_DEFINED__ */


#ifndef __WMDMLogger_FWD_DEFINED__
#define __WMDMLogger_FWD_DEFINED__

#ifdef __cplusplus
typedef class WMDMLogger WMDMLogger;
#else
typedef struct WMDMLogger WMDMLogger;
#endif /* __cplusplus */

#endif 	/* __WMDMLogger_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmdmlog_0000_0000 */
/* [local] */ 

#define WMDM_LOG_SEV_INFO             0x00000001 
#define WMDM_LOG_SEV_WARN             0x00000002 
#define WMDM_LOG_SEV_ERROR            0x00000004 
#define WMDM_LOG_NOTIMESTAMP          0x00000010 


extern RPC_IF_HANDLE __MIDL_itf_wmdmlog_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmdmlog_0000_0000_v0_0_s_ifspec;

#ifndef __IWMDMLogger_INTERFACE_DEFINED__
#define __IWMDMLogger_INTERFACE_DEFINED__

/* interface IWMDMLogger */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IWMDMLogger;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("110A3200-5A79-11d3-8D78-444553540000")
    IWMDMLogger : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsEnabled( 
            /* [out] */ __RPC__out BOOL *pfEnabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Enable( 
            /* [in] */ BOOL fEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLogFileName( 
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPSTR pszFilename,
            /* [in] */ UINT nMaxChars) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLogFileName( 
            /* [string][in] */ __RPC__in LPSTR pszFilename) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LogString( 
            /* [in] */ DWORD dwFlags,
            /* [string][in] */ __RPC__in LPSTR pszSrcName,
            /* [string][in] */ __RPC__in LPSTR pszLog) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LogDword( 
            /* [in] */ DWORD dwFlags,
            /* [string][in] */ __RPC__in LPSTR pszSrcName,
            /* [string][in] */ __RPC__in LPSTR pszLogFormat,
            /* [in] */ DWORD dwLog) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSizeParams( 
            /* [out] */ __RPC__out LPDWORD pdwMaxSize,
            /* [out] */ __RPC__out LPDWORD pdwShrinkToSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSizeParams( 
            /* [in] */ DWORD dwMaxSize,
            /* [in] */ DWORD dwShrinkToSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDMLoggerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDMLogger * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDMLogger * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDMLogger * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsEnabled )( 
            IWMDMLogger * This,
            /* [out] */ __RPC__out BOOL *pfEnabled);
        
        HRESULT ( STDMETHODCALLTYPE *Enable )( 
            IWMDMLogger * This,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *GetLogFileName )( 
            IWMDMLogger * This,
            /* [size_is][string][out] */ __RPC__out_ecount_full_string(nMaxChars) LPSTR pszFilename,
            /* [in] */ UINT nMaxChars);
        
        HRESULT ( STDMETHODCALLTYPE *SetLogFileName )( 
            IWMDMLogger * This,
            /* [string][in] */ __RPC__in LPSTR pszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *LogString )( 
            IWMDMLogger * This,
            /* [in] */ DWORD dwFlags,
            /* [string][in] */ __RPC__in LPSTR pszSrcName,
            /* [string][in] */ __RPC__in LPSTR pszLog);
        
        HRESULT ( STDMETHODCALLTYPE *LogDword )( 
            IWMDMLogger * This,
            /* [in] */ DWORD dwFlags,
            /* [string][in] */ __RPC__in LPSTR pszSrcName,
            /* [string][in] */ __RPC__in LPSTR pszLogFormat,
            /* [in] */ DWORD dwLog);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMDMLogger * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSizeParams )( 
            IWMDMLogger * This,
            /* [out] */ __RPC__out LPDWORD pdwMaxSize,
            /* [out] */ __RPC__out LPDWORD pdwShrinkToSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetSizeParams )( 
            IWMDMLogger * This,
            /* [in] */ DWORD dwMaxSize,
            /* [in] */ DWORD dwShrinkToSize);
        
        END_INTERFACE
    } IWMDMLoggerVtbl;

    interface IWMDMLogger
    {
        CONST_VTBL struct IWMDMLoggerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDMLogger_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDMLogger_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDMLogger_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDMLogger_IsEnabled(This,pfEnabled)	\
    ( (This)->lpVtbl -> IsEnabled(This,pfEnabled) ) 

#define IWMDMLogger_Enable(This,fEnable)	\
    ( (This)->lpVtbl -> Enable(This,fEnable) ) 

#define IWMDMLogger_GetLogFileName(This,pszFilename,nMaxChars)	\
    ( (This)->lpVtbl -> GetLogFileName(This,pszFilename,nMaxChars) ) 

#define IWMDMLogger_SetLogFileName(This,pszFilename)	\
    ( (This)->lpVtbl -> SetLogFileName(This,pszFilename) ) 

#define IWMDMLogger_LogString(This,dwFlags,pszSrcName,pszLog)	\
    ( (This)->lpVtbl -> LogString(This,dwFlags,pszSrcName,pszLog) ) 

#define IWMDMLogger_LogDword(This,dwFlags,pszSrcName,pszLogFormat,dwLog)	\
    ( (This)->lpVtbl -> LogDword(This,dwFlags,pszSrcName,pszLogFormat,dwLog) ) 

#define IWMDMLogger_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMDMLogger_GetSizeParams(This,pdwMaxSize,pdwShrinkToSize)	\
    ( (This)->lpVtbl -> GetSizeParams(This,pdwMaxSize,pdwShrinkToSize) ) 

#define IWMDMLogger_SetSizeParams(This,dwMaxSize,dwShrinkToSize)	\
    ( (This)->lpVtbl -> SetSizeParams(This,dwMaxSize,dwShrinkToSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDMLogger_INTERFACE_DEFINED__ */



#ifndef __WMDMLogLib_LIBRARY_DEFINED__
#define __WMDMLogLib_LIBRARY_DEFINED__

/* library WMDMLogLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_WMDMLogLib;

EXTERN_C const CLSID CLSID_WMDMLogger;

#ifdef __cplusplus

class DECLSPEC_UUID("110A3202-5A79-11d3-8D78-444553540000")
WMDMLogger;
#endif
#endif /* __WMDMLogLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\WMIUtils.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmiutils.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmiutils_h__
#define __wmiutils_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWbemPathKeyList_FWD_DEFINED__
#define __IWbemPathKeyList_FWD_DEFINED__
typedef interface IWbemPathKeyList IWbemPathKeyList;
#endif 	/* __IWbemPathKeyList_FWD_DEFINED__ */


#ifndef __IWbemPath_FWD_DEFINED__
#define __IWbemPath_FWD_DEFINED__
typedef interface IWbemPath IWbemPath;
#endif 	/* __IWbemPath_FWD_DEFINED__ */


#ifndef __WbemDefPath_FWD_DEFINED__
#define __WbemDefPath_FWD_DEFINED__

#ifdef __cplusplus
typedef class WbemDefPath WbemDefPath;
#else
typedef struct WbemDefPath WbemDefPath;
#endif /* __cplusplus */

#endif 	/* __WbemDefPath_FWD_DEFINED__ */


#ifndef __IWbemQuery_FWD_DEFINED__
#define __IWbemQuery_FWD_DEFINED__
typedef interface IWbemQuery IWbemQuery;
#endif 	/* __IWbemQuery_FWD_DEFINED__ */


#ifndef __WbemQuery_FWD_DEFINED__
#define __WbemQuery_FWD_DEFINED__

#ifdef __cplusplus
typedef class WbemQuery WbemQuery;
#else
typedef struct WbemQuery WbemQuery;
#endif /* __cplusplus */

#endif 	/* __WbemQuery_FWD_DEFINED__ */


#ifndef __IWbemQuery_FWD_DEFINED__
#define __IWbemQuery_FWD_DEFINED__
typedef interface IWbemQuery IWbemQuery;
#endif 	/* __IWbemQuery_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmiutils_0000_0000 */
/* [local] */ 

/*******************************************************************************/
/*                                                                             */
/*    Copyright (c) Microsoft Corporation.  All rights reserved.               */
/*                                                                             */
/*******************************************************************************/


extern RPC_IF_HANDLE __MIDL_itf_wmiutils_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmiutils_0000_0000_v0_0_s_ifspec;


#ifndef __WbemUtilities_v1_LIBRARY_DEFINED__
#define __WbemUtilities_v1_LIBRARY_DEFINED__

/* library WbemUtilities_v1 */
/* [uuid] */ 

typedef /* [v1_enum] */ 
enum tag_WBEM_PATH_STATUS_FLAG
    {	WBEMPATH_INFO_ANON_LOCAL_MACHINE	= 0x1,
	WBEMPATH_INFO_HAS_MACHINE_NAME	= 0x2,
	WBEMPATH_INFO_IS_CLASS_REF	= 0x4,
	WBEMPATH_INFO_IS_INST_REF	= 0x8,
	WBEMPATH_INFO_HAS_SUBSCOPES	= 0x10,
	WBEMPATH_INFO_IS_COMPOUND	= 0x20,
	WBEMPATH_INFO_HAS_V2_REF_PATHS	= 0x40,
	WBEMPATH_INFO_HAS_IMPLIED_KEY	= 0x80,
	WBEMPATH_INFO_CONTAINS_SINGLETON	= 0x100,
	WBEMPATH_INFO_V1_COMPLIANT	= 0x200,
	WBEMPATH_INFO_V2_COMPLIANT	= 0x400,
	WBEMPATH_INFO_CIM_COMPLIANT	= 0x800,
	WBEMPATH_INFO_IS_SINGLETON	= 0x1000,
	WBEMPATH_INFO_IS_PARENT	= 0x2000,
	WBEMPATH_INFO_SERVER_NAMESPACE_ONLY	= 0x4000,
	WBEMPATH_INFO_NATIVE_PATH	= 0x8000,
	WBEMPATH_INFO_WMI_PATH	= 0x10000,
	WBEMPATH_INFO_PATH_HAD_SERVER	= 0x20000
    } 	tag_WBEM_PATH_STATUS_FLAG;

typedef /* [v1_enum] */ 
enum tag_WBEM_PATH_CREATE_FLAG
    {	WBEMPATH_CREATE_ACCEPT_RELATIVE	= 0x1,
	WBEMPATH_CREATE_ACCEPT_ABSOLUTE	= 0x2,
	WBEMPATH_CREATE_ACCEPT_ALL	= 0x4,
	WBEMPATH_TREAT_SINGLE_IDENT_AS_NS	= 0x8
    } 	tag_WBEM_PATH_CREATE_FLAG;

typedef /* [v1_enum] */ 
enum tag_WBEM_GET_TEXT_FLAGS
    {	WBEMPATH_COMPRESSED	= 0x1,
	WBEMPATH_GET_RELATIVE_ONLY	= 0x2,
	WBEMPATH_GET_SERVER_TOO	= 0x4,
	WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY	= 0x8,
	WBEMPATH_GET_NAMESPACE_ONLY	= 0x10,
	WBEMPATH_GET_ORIGINAL	= 0x20
    } 	tag_WBEM_GET_TEXT_FLAGS;

typedef /* [v1_enum] */ 
enum tag_WBEM_GET_KEY_FLAGS
    {	WBEMPATH_TEXT	= 0x1,
	WBEMPATH_QUOTEDTEXT	= 0x2
    } 	tag_WBEM_GET_KEY_FLAGS;



EXTERN_C const IID LIBID_WbemUtilities_v1;

#ifndef __IWbemPathKeyList_INTERFACE_DEFINED__
#define __IWbemPathKeyList_INTERFACE_DEFINED__

/* interface IWbemPathKeyList */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IWbemPathKeyList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9AE62877-7544-4bb0-AA26-A13824659ED6")
    IWbemPathKeyList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *puKeyCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetKey( 
            /* [string][in] */ LPCWSTR wszName,
            /* [in] */ ULONG uFlags,
            /* [in] */ ULONG uCimType,
            /* [in] */ LPVOID pKeyVal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetKey2( 
            /* [string][in] */ LPCWSTR wszName,
            /* [in] */ ULONG uFlags,
            /* [in] */ ULONG uCimType,
            /* [in] */ VARIANT *pKeyVal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetKey( 
            /* [in] */ ULONG uKeyIx,
            /* [in] */ ULONG uFlags,
            /* [out][in] */ ULONG *puNameBufSize,
            /* [out][in] */ 
            __out_ecount_opt(*puNameBufSize)  LPWSTR pszKeyName,
            /* [out][in] */ ULONG *puKeyValBufSize,
            /* [out][in] */ LPVOID pKeyVal,
            /* [out] */ ULONG *puApparentCimType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetKey2( 
            /* [in] */ ULONG uKeyIx,
            /* [in] */ ULONG uFlags,
            /* [out][in] */ ULONG *puNameBufSize,
            /* [out][in] */ 
            __out_ecount_opt(*puNameBufSize)  LPWSTR pszKeyName,
            /* [out][in] */ VARIANT *pKeyValue,
            /* [out] */ ULONG *puApparentCimType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveKey( 
            /* [string][in] */ LPCWSTR wszName,
            /* [in] */ ULONG uFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAllKeys( 
            /* [in] */ ULONG uFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MakeSingleton( 
            /* [in] */ boolean bSet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ ULONG uRequestedInfo,
            /* [out] */ ULONGLONG *puResponse) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetText( 
            /* [in] */ long lFlags,
            /* [out][in] */ ULONG *puBuffLength,
            /* [string][out][in] */ 
            __out_ecount(*puBuffLength)  LPWSTR pszText) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWbemPathKeyListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWbemPathKeyList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWbemPathKeyList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWbemPathKeyList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IWbemPathKeyList * This,
            /* [out] */ ULONG *puKeyCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetKey )( 
            IWbemPathKeyList * This,
            /* [string][in] */ LPCWSTR wszName,
            /* [in] */ ULONG uFlags,
            /* [in] */ ULONG uCimType,
            /* [in] */ LPVOID pKeyVal);
        
        HRESULT ( STDMETHODCALLTYPE *SetKey2 )( 
            IWbemPathKeyList * This,
            /* [string][in] */ LPCWSTR wszName,
            /* [in] */ ULONG uFlags,
            /* [in] */ ULONG uCimType,
            /* [in] */ VARIANT *pKeyVal);
        
        HRESULT ( STDMETHODCALLTYPE *GetKey )( 
            IWbemPathKeyList * This,
            /* [in] */ ULONG uKeyIx,
            /* [in] */ ULONG uFlags,
            /* [out][in] */ ULONG *puNameBufSize,
            /* [out][in] */ 
            __out_ecount_opt(*puNameBufSize)  LPWSTR pszKeyName,
            /* [out][in] */ ULONG *puKeyValBufSize,
            /* [out][in] */ LPVOID pKeyVal,
            /* [out] */ ULONG *puApparentCimType);
        
        HRESULT ( STDMETHODCALLTYPE *GetKey2 )( 
            IWbemPathKeyList * This,
            /* [in] */ ULONG uKeyIx,
            /* [in] */ ULONG uFlags,
            /* [out][in] */ ULONG *puNameBufSize,
            /* [out][in] */ 
            __out_ecount_opt(*puNameBufSize)  LPWSTR pszKeyName,
            /* [out][in] */ VARIANT *pKeyValue,
            /* [out] */ ULONG *puApparentCimType);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveKey )( 
            IWbemPathKeyList * This,
            /* [string][in] */ LPCWSTR wszName,
            /* [in] */ ULONG uFlags);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAllKeys )( 
            IWbemPathKeyList * This,
            /* [in] */ ULONG uFlags);
        
        HRESULT ( STDMETHODCALLTYPE *MakeSingleton )( 
            IWbemPathKeyList * This,
            /* [in] */ boolean bSet);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IWbemPathKeyList * This,
            /* [in] */ ULONG uRequestedInfo,
            /* [out] */ ULONGLONG *puResponse);
        
        HRESULT ( STDMETHODCALLTYPE *GetText )( 
            IWbemPathKeyList * This,
            /* [in] */ long lFlags,
            /* [out][in] */ ULONG *puBuffLength,
            /* [string][out][in] */ 
            __out_ecount(*puBuffLength)  LPWSTR pszText);
        
        END_INTERFACE
    } IWbemPathKeyListVtbl;

    interface IWbemPathKeyList
    {
        CONST_VTBL struct IWbemPathKeyListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWbemPathKeyList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWbemPathKeyList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWbemPathKeyList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWbemPathKeyList_GetCount(This,puKeyCount)	\
    ( (This)->lpVtbl -> GetCount(This,puKeyCount) ) 

#define IWbemPathKeyList_SetKey(This,wszName,uFlags,uCimType,pKeyVal)	\
    ( (This)->lpVtbl -> SetKey(This,wszName,uFlags,uCimType,pKeyVal) ) 

#define IWbemPathKeyList_SetKey2(This,wszName,uFlags,uCimType,pKeyVal)	\
    ( (This)->lpVtbl -> SetKey2(This,wszName,uFlags,uCimType,pKeyVal) ) 

#define IWbemPathKeyList_GetKey(This,uKeyIx,uFlags,puNameBufSize,pszKeyName,puKeyValBufSize,pKeyVal,puApparentCimType)	\
    ( (This)->lpVtbl -> GetKey(This,uKeyIx,uFlags,puNameBufSize,pszKeyName,puKeyValBufSize,pKeyVal,puApparentCimType) ) 

#define IWbemPathKeyList_GetKey2(This,uKeyIx,uFlags,puNameBufSize,pszKeyName,pKeyValue,puApparentCimType)	\
    ( (This)->lpVtbl -> GetKey2(This,uKeyIx,uFlags,puNameBufSize,pszKeyName,pKeyValue,puApparentCimType) ) 

#define IWbemPathKeyList_RemoveKey(This,wszName,uFlags)	\
    ( (This)->lpVtbl -> RemoveKey(This,wszName,uFlags) ) 

#define IWbemPathKeyList_RemoveAllKeys(This,uFlags)	\
    ( (This)->lpVtbl -> RemoveAllKeys(This,uFlags) ) 

#define IWbemPathKeyList_MakeSingleton(This,bSet)	\
    ( (This)->lpVtbl -> MakeSingleton(This,bSet) ) 

#define IWbemPathKeyList_GetInfo(This,uRequestedInfo,puResponse)	\
    ( (This)->lpVtbl -> GetInfo(This,uRequestedInfo,puResponse) ) 

#define IWbemPathKeyList_GetText(This,lFlags,puBuffLength,pszText)	\
    ( (This)->lpVtbl -> GetText(This,lFlags,puBuffLength,pszText) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWbemPathKeyList_INTERFACE_DEFINED__ */


#ifndef __IWbemPath_INTERFACE_DEFINED__
#define __IWbemPath_INTERFACE_DEFINED__

/* interface IWbemPath */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IWbemPath;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3BC15AF2-736C-477e-9E51-238AF8667DCC")
    IWbemPath : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetText( 
            /* [in] */ ULONG uMode,
            /* [in] */ LPCWSTR pszPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetText( 
            /* [in] */ long lFlags,
            /* [out][in] */ ULONG *puBuffLength,
            /* [string][out][in] */ 
            __out_ecount(*puBuffLength)  LPWSTR pszText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ ULONG uRequestedInfo,
            /* [out] */ ULONGLONG *puResponse) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetServer( 
            /* [string][in] */ LPCWSTR Name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetServer( 
            /* [out][in] */ ULONG *puNameBufLength,
            /* [string][out][in] */ 
            __out_ecount(*puNameBufLength)  LPWSTR pName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNamespaceCount( 
            /* [out] */ ULONG *puCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetNamespaceAt( 
            /* [in] */ ULONG uIndex,
            /* [string][in] */ LPCWSTR pszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNamespaceAt( 
            /* [in] */ ULONG uIndex,
            /* [out][in] */ ULONG *puNameBufLength,
            /* [string][out][in] */ 
            __out_ecount(*puNameBufLength)  LPWSTR pName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveNamespaceAt( 
            /* [in] */ ULONG uIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAllNamespaces( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScopeCount( 
            /* [out] */ ULONG *puCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetScope( 
            /* [in] */ ULONG uIndex,
            /* [in] */ 
            __in  LPWSTR pszClass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetScopeFromText( 
            /* [in] */ ULONG uIndex,
            /* [in] */ 
            __in  LPWSTR pszText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScope( 
            /* [in] */ ULONG uIndex,
            /* [out][in] */ ULONG *puClassNameBufSize,
            /* [out][in] */ 
            __out_ecount(*puClassNameBufSize)  LPWSTR pszClass,
            /* [out] */ IWbemPathKeyList **pKeyList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScopeAsText( 
            /* [in] */ ULONG uIndex,
            /* [out][in] */ ULONG *puTextBufSize,
            /* [out][in] */ 
            __out_ecount(*puTextBufSize)  LPWSTR pszText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveScope( 
            /* [in] */ ULONG uIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAllScopes( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClassName( 
            /* [string][in] */ LPCWSTR Name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClassName( 
            /* [out][in] */ ULONG *puBuffLength,
            /* [string][out][in] */ 
            __out_ecount(*puBuffLength)  LPWSTR pszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetKeyList( 
            /* [out] */ IWbemPathKeyList **pOut) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateClassPart( 
            /* [in] */ long lFlags,
            /* [string][in] */ LPCWSTR Name) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteClassPart( 
            /* [in] */ long lFlags) = 0;
        
        virtual BOOL STDMETHODCALLTYPE IsRelative( 
            /* [string][in] */ 
            __in  LPWSTR wszMachine,
            /* [string][in] */ 
            __in  LPWSTR wszNamespace) = 0;
        
        virtual BOOL STDMETHODCALLTYPE IsRelativeOrChild( 
            /* [string][in] */ 
            __in  LPWSTR wszMachine,
            /* [string][in] */ 
            __in  LPWSTR wszNamespace,
            /* [in] */ long lFlags) = 0;
        
        virtual BOOL STDMETHODCALLTYPE IsLocal( 
            /* [string][in] */ LPCWSTR wszMachine) = 0;
        
        virtual BOOL STDMETHODCALLTYPE IsSameClassName( 
            /* [string][in] */ LPCWSTR wszClass) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWbemPathVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWbemPath * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWbemPath * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWbemPath * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetText )( 
            IWbemPath * This,
            /* [in] */ ULONG uMode,
            /* [in] */ LPCWSTR pszPath);
        
        HRESULT ( STDMETHODCALLTYPE *GetText )( 
            IWbemPath * This,
            /* [in] */ long lFlags,
            /* [out][in] */ ULONG *puBuffLength,
            /* [string][out][in] */ 
            __out_ecount(*puBuffLength)  LPWSTR pszText);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IWbemPath * This,
            /* [in] */ ULONG uRequestedInfo,
            /* [out] */ ULONGLONG *puResponse);
        
        HRESULT ( STDMETHODCALLTYPE *SetServer )( 
            IWbemPath * This,
            /* [string][in] */ LPCWSTR Name);
        
        HRESULT ( STDMETHODCALLTYPE *GetServer )( 
            IWbemPath * This,
            /* [out][in] */ ULONG *puNameBufLength,
            /* [string][out][in] */ 
            __out_ecount(*puNameBufLength)  LPWSTR pName);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespaceCount )( 
            IWbemPath * This,
            /* [out] */ ULONG *puCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetNamespaceAt )( 
            IWbemPath * This,
            /* [in] */ ULONG uIndex,
            /* [string][in] */ LPCWSTR pszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespaceAt )( 
            IWbemPath * This,
            /* [in] */ ULONG uIndex,
            /* [out][in] */ ULONG *puNameBufLength,
            /* [string][out][in] */ 
            __out_ecount(*puNameBufLength)  LPWSTR pName);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveNamespaceAt )( 
            IWbemPath * This,
            /* [in] */ ULONG uIndex);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAllNamespaces )( 
            IWbemPath * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetScopeCount )( 
            IWbemPath * This,
            /* [out] */ ULONG *puCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetScope )( 
            IWbemPath * This,
            /* [in] */ ULONG uIndex,
            /* [in] */ 
            __in  LPWSTR pszClass);
        
        HRESULT ( STDMETHODCALLTYPE *SetScopeFromText )( 
            IWbemPath * This,
            /* [in] */ ULONG uIndex,
            /* [in] */ 
            __in  LPWSTR pszText);
        
        HRESULT ( STDMETHODCALLTYPE *GetScope )( 
            IWbemPath * This,
            /* [in] */ ULONG uIndex,
            /* [out][in] */ ULONG *puClassNameBufSize,
            /* [out][in] */ 
            __out_ecount(*puClassNameBufSize)  LPWSTR pszClass,
            /* [out] */ IWbemPathKeyList **pKeyList);
        
        HRESULT ( STDMETHODCALLTYPE *GetScopeAsText )( 
            IWbemPath * This,
            /* [in] */ ULONG uIndex,
            /* [out][in] */ ULONG *puTextBufSize,
            /* [out][in] */ 
            __out_ecount(*puTextBufSize)  LPWSTR pszText);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveScope )( 
            IWbemPath * This,
            /* [in] */ ULONG uIndex);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAllScopes )( 
            IWbemPath * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetClassName )( 
            IWbemPath * This,
            /* [string][in] */ LPCWSTR Name);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IWbemPath * This,
            /* [out][in] */ ULONG *puBuffLength,
            /* [string][out][in] */ 
            __out_ecount(*puBuffLength)  LPWSTR pszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetKeyList )( 
            IWbemPath * This,
            /* [out] */ IWbemPathKeyList **pOut);
        
        HRESULT ( STDMETHODCALLTYPE *CreateClassPart )( 
            IWbemPath * This,
            /* [in] */ long lFlags,
            /* [string][in] */ LPCWSTR Name);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteClassPart )( 
            IWbemPath * This,
            /* [in] */ long lFlags);
        
        BOOL ( STDMETHODCALLTYPE *IsRelative )( 
            IWbemPath * This,
            /* [string][in] */ 
            __in  LPWSTR wszMachine,
            /* [string][in] */ 
            __in  LPWSTR wszNamespace);
        
        BOOL ( STDMETHODCALLTYPE *IsRelativeOrChild )( 
            IWbemPath * This,
            /* [string][in] */ 
            __in  LPWSTR wszMachine,
            /* [string][in] */ 
            __in  LPWSTR wszNamespace,
            /* [in] */ long lFlags);
        
        BOOL ( STDMETHODCALLTYPE *IsLocal )( 
            IWbemPath * This,
            /* [string][in] */ LPCWSTR wszMachine);
        
        BOOL ( STDMETHODCALLTYPE *IsSameClassName )( 
            IWbemPath * This,
            /* [string][in] */ LPCWSTR wszClass);
        
        END_INTERFACE
    } IWbemPathVtbl;

    interface IWbemPath
    {
        CONST_VTBL struct IWbemPathVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWbemPath_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWbemPath_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWbemPath_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWbemPath_SetText(This,uMode,pszPath)	\
    ( (This)->lpVtbl -> SetText(This,uMode,pszPath) ) 

#define IWbemPath_GetText(This,lFlags,puBuffLength,pszText)	\
    ( (This)->lpVtbl -> GetText(This,lFlags,puBuffLength,pszText) ) 

#define IWbemPath_GetInfo(This,uRequestedInfo,puResponse)	\
    ( (This)->lpVtbl -> GetInfo(This,uRequestedInfo,puResponse) ) 

#define IWbemPath_SetServer(This,Name)	\
    ( (This)->lpVtbl -> SetServer(This,Name) ) 

#define IWbemPath_GetServer(This,puNameBufLength,pName)	\
    ( (This)->lpVtbl -> GetServer(This,puNameBufLength,pName) ) 

#define IWbemPath_GetNamespaceCount(This,puCount)	\
    ( (This)->lpVtbl -> GetNamespaceCount(This,puCount) ) 

#define IWbemPath_SetNamespaceAt(This,uIndex,pszName)	\
    ( (This)->lpVtbl -> SetNamespaceAt(This,uIndex,pszName) ) 

#define IWbemPath_GetNamespaceAt(This,uIndex,puNameBufLength,pName)	\
    ( (This)->lpVtbl -> GetNamespaceAt(This,uIndex,puNameBufLength,pName) ) 

#define IWbemPath_RemoveNamespaceAt(This,uIndex)	\
    ( (This)->lpVtbl -> RemoveNamespaceAt(This,uIndex) ) 

#define IWbemPath_RemoveAllNamespaces(This)	\
    ( (This)->lpVtbl -> RemoveAllNamespaces(This) ) 

#define IWbemPath_GetScopeCount(This,puCount)	\
    ( (This)->lpVtbl -> GetScopeCount(This,puCount) ) 

#define IWbemPath_SetScope(This,uIndex,pszClass)	\
    ( (This)->lpVtbl -> SetScope(This,uIndex,pszClass) ) 

#define IWbemPath_SetScopeFromText(This,uIndex,pszText)	\
    ( (This)->lpVtbl -> SetScopeFromText(This,uIndex,pszText) ) 

#define IWbemPath_GetScope(This,uIndex,puClassNameBufSize,pszClass,pKeyList)	\
    ( (This)->lpVtbl -> GetScope(This,uIndex,puClassNameBufSize,pszClass,pKeyList) ) 

#define IWbemPath_GetScopeAsText(This,uIndex,puTextBufSize,pszText)	\
    ( (This)->lpVtbl -> GetScopeAsText(This,uIndex,puTextBufSize,pszText) ) 

#define IWbemPath_RemoveScope(This,uIndex)	\
    ( (This)->lpVtbl -> RemoveScope(This,uIndex) ) 

#define IWbemPath_RemoveAllScopes(This)	\
    ( (This)->lpVtbl -> RemoveAllScopes(This) ) 

#define IWbemPath_SetClassName(This,Name)	\
    ( (This)->lpVtbl -> SetClassName(This,Name) ) 

#define IWbemPath_GetClassName(This,puBuffLength,pszName)	\
    ( (This)->lpVtbl -> GetClassName(This,puBuffLength,pszName) ) 

#define IWbemPath_GetKeyList(This,pOut)	\
    ( (This)->lpVtbl -> GetKeyList(This,pOut) ) 

#define IWbemPath_CreateClassPart(This,lFlags,Name)	\
    ( (This)->lpVtbl -> CreateClassPart(This,lFlags,Name) ) 

#define IWbemPath_DeleteClassPart(This,lFlags)	\
    ( (This)->lpVtbl -> DeleteClassPart(This,lFlags) ) 

#define IWbemPath_IsRelative(This,wszMachine,wszNamespace)	\
    ( (This)->lpVtbl -> IsRelative(This,wszMachine,wszNamespace) ) 

#define IWbemPath_IsRelativeOrChild(This,wszMachine,wszNamespace,lFlags)	\
    ( (This)->lpVtbl -> IsRelativeOrChild(This,wszMachine,wszNamespace,lFlags) ) 

#define IWbemPath_IsLocal(This,wszMachine)	\
    ( (This)->lpVtbl -> IsLocal(This,wszMachine) ) 

#define IWbemPath_IsSameClassName(This,wszClass)	\
    ( (This)->lpVtbl -> IsSameClassName(This,wszClass) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWbemPath_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WbemDefPath;

#ifdef __cplusplus

class DECLSPEC_UUID("cf4cc405-e2c5-4ddd-b3ce-5e7582d8c9fa")
WbemDefPath;
#endif

#ifndef __IWbemQuery_INTERFACE_DEFINED__
#define __IWbemQuery_INTERFACE_DEFINED__

/* interface IWbemQuery */
/* [uuid][object][local] */ 


EXTERN_C const IID IID_IWbemQuery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("81166f58-dd98-11d3-a120-00105a1f515a")
    IWbemQuery : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Empty( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLanguageFeatures( 
            /* [in] */ ULONG uFlags,
            /* [in] */ ULONG uArraySize,
            /* [in] */ ULONG *puFeatures) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TestLanguageFeatures( 
            /* [in] */ ULONG uFlags,
            /* [out][in] */ ULONG *uArraySize,
            /* [out] */ ULONG *puFeatures) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Parse( 
            /* [in] */ LPCWSTR pszLang,
            /* [in] */ LPCWSTR pszQuery,
            /* [in] */ ULONG uFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAnalysis( 
            /* [in] */ ULONG uAnalysisType,
            /* [in] */ ULONG uFlags,
            /* [out] */ LPVOID *pAnalysis) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FreeMemory( 
            /* [in] */ LPVOID pMem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetQueryInfo( 
            /* [in] */ ULONG uAnalysisType,
            /* [in] */ ULONG uInfoId,
            /* [in] */ ULONG uBufSize,
            /* [out] */ LPVOID pDestBuf) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWbemQueryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWbemQuery * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWbemQuery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWbemQuery * This);
        
        HRESULT ( STDMETHODCALLTYPE *Empty )( 
            IWbemQuery * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetLanguageFeatures )( 
            IWbemQuery * This,
            /* [in] */ ULONG uFlags,
            /* [in] */ ULONG uArraySize,
            /* [in] */ ULONG *puFeatures);
        
        HRESULT ( STDMETHODCALLTYPE *TestLanguageFeatures )( 
            IWbemQuery * This,
            /* [in] */ ULONG uFlags,
            /* [out][in] */ ULONG *uArraySize,
            /* [out] */ ULONG *puFeatures);
        
        HRESULT ( STDMETHODCALLTYPE *Parse )( 
            IWbemQuery * This,
            /* [in] */ LPCWSTR pszLang,
            /* [in] */ LPCWSTR pszQuery,
            /* [in] */ ULONG uFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetAnalysis )( 
            IWbemQuery * This,
            /* [in] */ ULONG uAnalysisType,
            /* [in] */ ULONG uFlags,
            /* [out] */ LPVOID *pAnalysis);
        
        HRESULT ( STDMETHODCALLTYPE *FreeMemory )( 
            IWbemQuery * This,
            /* [in] */ LPVOID pMem);
        
        HRESULT ( STDMETHODCALLTYPE *GetQueryInfo )( 
            IWbemQuery * This,
            /* [in] */ ULONG uAnalysisType,
            /* [in] */ ULONG uInfoId,
            /* [in] */ ULONG uBufSize,
            /* [out] */ LPVOID pDestBuf);
        
        END_INTERFACE
    } IWbemQueryVtbl;

    interface IWbemQuery
    {
        CONST_VTBL struct IWbemQueryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWbemQuery_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWbemQuery_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWbemQuery_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWbemQuery_Empty(This)	\
    ( (This)->lpVtbl -> Empty(This) ) 

#define IWbemQuery_SetLanguageFeatures(This,uFlags,uArraySize,puFeatures)	\
    ( (This)->lpVtbl -> SetLanguageFeatures(This,uFlags,uArraySize,puFeatures) ) 

#define IWbemQuery_TestLanguageFeatures(This,uFlags,uArraySize,puFeatures)	\
    ( (This)->lpVtbl -> TestLanguageFeatures(This,uFlags,uArraySize,puFeatures) ) 

#define IWbemQuery_Parse(This,pszLang,pszQuery,uFlags)	\
    ( (This)->lpVtbl -> Parse(This,pszLang,pszQuery,uFlags) ) 

#define IWbemQuery_GetAnalysis(This,uAnalysisType,uFlags,pAnalysis)	\
    ( (This)->lpVtbl -> GetAnalysis(This,uAnalysisType,uFlags,pAnalysis) ) 

#define IWbemQuery_FreeMemory(This,pMem)	\
    ( (This)->lpVtbl -> FreeMemory(This,pMem) ) 

#define IWbemQuery_GetQueryInfo(This,uAnalysisType,uInfoId,uBufSize,pDestBuf)	\
    ( (This)->lpVtbl -> GetQueryInfo(This,uAnalysisType,uInfoId,uBufSize,pDestBuf) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWbemQuery_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WbemQuery;

#ifdef __cplusplus

class DECLSPEC_UUID("EAC8A024-21E2-4523-AD73-A71A0AA2F56A")
WbemQuery;
#endif
#endif /* __WbemUtilities_v1_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_wmiutils_0001_0001 */
/* [local] */ 

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wmiutils_0001_0001_0001
    {	WMIQ_ANALYSIS_RPN_SEQUENCE	= 0x1,
	WMIQ_ANALYSIS_ASSOC_QUERY	= 0x2,
	WMIQ_ANALYSIS_PROP_ANALYSIS_MATRIX	= 0x3,
	WMIQ_ANALYSIS_QUERY_TEXT	= 0x4,
	WMIQ_ANALYSIS_RESERVED	= 0x8000000
    } 	WMIQ_ANALYSIS_TYPE;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wmiutils_0001_0001_0002
    {	WMIQ_RPN_TOKEN_EXPRESSION	= 1,
	WMIQ_RPN_TOKEN_AND	= 2,
	WMIQ_RPN_TOKEN_OR	= 3,
	WMIQ_RPN_TOKEN_NOT	= 4,
	WMIQ_RPN_OP_UNDEFINED	= 0,
	WMIQ_RPN_OP_EQ	= 1,
	WMIQ_RPN_OP_NE	= 2,
	WMIQ_RPN_OP_GE	= 3,
	WMIQ_RPN_OP_LE	= 4,
	WMIQ_RPN_OP_LT	= 5,
	WMIQ_RPN_OP_GT	= 6,
	WMIQ_RPN_OP_LIKE	= 7,
	WMIQ_RPN_OP_ISA	= 8,
	WMIQ_RPN_OP_ISNOTA	= 9,
	WMIQ_RPN_OP_ISNULL	= 10,
	WMIQ_RPN_OP_ISNOTNULL	= 11,
	WMIQ_RPN_LEFT_PROPERTY_NAME	= 0x1,
	WMIQ_RPN_RIGHT_PROPERTY_NAME	= 0x2,
	WMIQ_RPN_CONST2	= 0x4,
	WMIQ_RPN_CONST	= 0x8,
	WMIQ_RPN_RELOP	= 0x10,
	WMIQ_RPN_LEFT_FUNCTION	= 0x20,
	WMIQ_RPN_RIGHT_FUNCTION	= 0x40,
	WMIQ_RPN_GET_TOKEN_TYPE	= 1,
	WMIQ_RPN_GET_EXPR_SHAPE	= 2,
	WMIQ_RPN_GET_LEFT_FUNCTION	= 3,
	WMIQ_RPN_GET_RIGHT_FUNCTION	= 4,
	WMIQ_RPN_GET_RELOP	= 5,
	WMIQ_RPN_NEXT_TOKEN	= 1,
	WMIQ_RPN_FROM_UNARY	= 0x1,
	WMIQ_RPN_FROM_PATH	= 0x2,
	WMIQ_RPN_FROM_CLASS_LIST	= 0x4,
	WMIQ_RPN_FROM_MULTIPLE	= 0x8
    } 	WMIQ_RPN_TOKEN_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_wmiutils_0001_0001_0003
    {	WMIQ_ASSOCQ_ASSOCIATORS	= 0x1,
	WMIQ_ASSOCQ_REFERENCES	= 0x2,
	WMIQ_ASSOCQ_RESULTCLASS	= 0x4,
	WMIQ_ASSOCQ_ASSOCCLASS	= 0x8,
	WMIQ_ASSOCQ_ROLE	= 0x10,
	WMIQ_ASSOCQ_RESULTROLE	= 0x20,
	WMIQ_ASSOCQ_REQUIREDQUALIFIER	= 0x40,
	WMIQ_ASSOCQ_REQUIREDASSOCQUALIFIER	= 0x80,
	WMIQ_ASSOCQ_CLASSDEFSONLY	= 0x100,
	WMIQ_ASSOCQ_KEYSONLY	= 0x200,
	WMIQ_ASSOCQ_SCHEMAONLY	= 0x400,
	WMIQ_ASSOCQ_CLASSREFSONLY	= 0x800
    } 	WMIQ_ASSOCQ_FLAGS;

typedef struct tag_SWbemQueryQualifiedName
    {
    ULONG m_uVersion;
    ULONG m_uTokenType;
    ULONG m_uNameListSize;
    LPCWSTR *m_ppszNameList;
    BOOL m_bArraysUsed;
    BOOL *m_pbArrayElUsed;
    ULONG *m_puArrayIndex;
    } 	SWbemQueryQualifiedName;

typedef union tag_SWbemRpnConst
    {
    LPCWSTR m_pszStrVal;
    BOOL m_bBoolVal;
    LONG m_lLongVal;
    ULONG m_uLongVal;
    double m_dblVal;
    __int64 m_lVal64;
    __int64 m_uVal64;
    } 	SWbemRpnConst;

typedef struct tag_SWbemRpnQueryToken
    {
    ULONG m_uVersion;
    ULONG m_uTokenType;
    ULONG m_uSubexpressionShape;
    ULONG m_uOperator;
    SWbemQueryQualifiedName *m_pRightIdent;
    SWbemQueryQualifiedName *m_pLeftIdent;
    ULONG m_uConstApparentType;
    SWbemRpnConst m_Const;
    ULONG m_uConst2ApparentType;
    SWbemRpnConst m_Const2;
    LPCWSTR m_pszRightFunc;
    LPCWSTR m_pszLeftFunc;
    } 	SWbemRpnQueryToken;

typedef struct tag_SWbemRpnTokenList
    {
    ULONG m_uVersion;
    ULONG m_uTokenType;
    ULONG m_uNumTokens;
    } 	SWbemRpnTokenList;

typedef 
enum tag_WMIQ_LANGUAGE_FEATURES
    {	WMIQ_LF1_BASIC_SELECT	= 1,
	WMIQ_LF2_CLASS_NAME_IN_QUERY	= 2,
	WMIQ_LF3_STRING_CASE_FUNCTIONS	= 3,
	WMIQ_LF4_PROP_TO_PROP_TESTS	= 4,
	WMIQ_LF5_COUNT_STAR	= 5,
	WMIQ_LF6_ORDER_BY	= 6,
	WMIQ_LF7_DISTINCT	= 7,
	WMIQ_LF8_ISA	= 8,
	WMIQ_LF9_THIS	= 9,
	WMIQ_LF10_COMPEX_SUBEXPRESSIONS	= 10,
	WMIQ_LF11_ALIASING	= 11,
	WMIQ_LF12_GROUP_BY_HAVING	= 12,
	WMIQ_LF13_WMI_WITHIN	= 13,
	WMIQ_LF14_SQL_WRITE_OPERATIONS	= 14,
	WMIQ_LF15_GO	= 15,
	WMIQ_LF16_SINGLE_LEVEL_TRANSACTIONS	= 16,
	WMIQ_LF17_QUALIFIED_NAMES	= 17,
	WMIQ_LF18_ASSOCIATONS	= 18,
	WMIQ_LF19_SYSTEM_PROPERTIES	= 19,
	WMIQ_LF20_EXTENDED_SYSTEM_PROPERTIES	= 20,
	WMIQ_LF21_SQL89_JOINS	= 21,
	WMIQ_LF22_SQL92_JOINS	= 22,
	WMIQ_LF23_SUBSELECTS	= 23,
	WMIQ_LF24_UMI_EXTENSIONS	= 24,
	WMIQ_LF25_DATEPART	= 25,
	WMIQ_LF26_LIKE	= 26,
	WMIQ_LF27_CIM_TEMPORAL_CONSTRUCTS	= 27,
	WMIQ_LF28_STANDARD_AGGREGATES	= 28,
	WMIQ_LF29_MULTI_LEVEL_ORDER_BY	= 29,
	WMIQ_LF30_WMI_PRAGMAS	= 30,
	WMIQ_LF31_QUALIFIER_TESTS	= 31,
	WMIQ_LF32_SP_EXECUTE	= 32,
	WMIQ_LF33_ARRAY_ACCESS	= 33,
	WMIQ_LF34_UNION	= 34,
	WMIQ_LF35_COMPLEX_SELECT_TARGET	= 35,
	WMIQ_LF36_REFERENCE_TESTS	= 36,
	WMIQ_LF37_SELECT_INTO	= 37,
	WMIQ_LF38_BASIC_DATETIME_TESTS	= 38,
	WMIQ_LF39_COUNT_COLUMN	= 39,
	WMIQ_LF40_BETWEEN	= 40,
	WMIQ_LF_LAST	= 40
    } 	WMIQ_LANGUAGE_FEATURES;

typedef 
enum tag_WMIQ_RPNQ_FEATURE
    {	WMIQ_RPNF_WHERE_CLAUSE_PRESENT	= 0x1,
	WMIQ_RPNF_QUERY_IS_CONJUNCTIVE	= 0x2,
	WMIQ_RPNF_QUERY_IS_DISJUNCTIVE	= 0x4,
	WMIQ_RPNF_PROJECTION	= 0x8,
	WMIQ_RPNF_FEATURE_SELECT_STAR	= 0x10,
	WMIQ_RPNF_EQUALITY_TESTS_ONLY	= 0x20,
	WMIQ_RPNF_COUNT_STAR	= 0x40,
	WMIQ_RPNF_QUALIFIED_NAMES_USED	= 0x80,
	WMIQ_RPNF_SYSPROP_CLASS_USED	= 0x100,
	WMIQ_RPNF_PROP_TO_PROP_TESTS	= 0x200,
	WMIQ_RPNF_ORDER_BY	= 0x400,
	WMIQ_RPNF_ISA_USED	= 0x800,
	WMIQ_RPNF_GROUP_BY_HAVING	= 0x1000,
	WMIQ_RPNF_ARRAY_ACCESS_USED	= 0x2000
    } 	WMIQ_RPNF_FEATURE;

typedef struct tag_SWbemRpnEncodedQuery
    {
    ULONG m_uVersion;
    ULONG m_uTokenType;
    unsigned __int64 m_uParsedFeatureMask;
    ULONG m_uDetectedArraySize;
    ULONG *m_puDetectedFeatures;
    ULONG m_uSelectListSize;
    SWbemQueryQualifiedName **m_ppSelectList;
    ULONG m_uFromTargetType;
    LPCWSTR m_pszOptionalFromPath;
    ULONG m_uFromListSize;
    LPCWSTR *m_ppszFromList;
    ULONG m_uWhereClauseSize;
    SWbemRpnQueryToken **m_ppRpnWhereClause;
    double m_dblWithinPolling;
    double m_dblWithinWindow;
    ULONG m_uOrderByListSize;
    LPCWSTR *m_ppszOrderByList;
    ULONG *m_uOrderDirectionEl;
    } 	SWbemRpnEncodedQuery;

typedef struct tag_SWbemAnalysisMatrix
    {
    ULONG m_uVersion;
    ULONG m_uMatrixType;
    LPCWSTR m_pszProperty;
    ULONG m_uPropertyType;
    ULONG m_uEntries;
    LPVOID *m_pValues;
    BOOL *m_pbTruthTable;
    } 	SWbemAnalysisMatrix;

typedef struct tag_SWbemAnalysisMatrixList
    {
    ULONG m_uVersion;
    ULONG m_uMatrixType;
    ULONG m_uNumMatrices;
    SWbemAnalysisMatrix *m_pMatrices;
    } 	SWbemAnalysisMatrixList;

typedef struct tag_SWbemAssocQueryInf
    {
    ULONG m_uVersion;
    ULONG m_uAnalysisType;
    ULONG m_uFeatureMask;
    IWbemPath *m_pPath;
    LPWSTR m_pszPath;
    LPWSTR m_pszQueryText;
    LPWSTR m_pszResultClass;
    LPWSTR m_pszAssocClass;
    LPWSTR m_pszRole;
    LPWSTR m_pszResultRole;
    LPWSTR m_pszRequiredQualifier;
    LPWSTR m_pszRequiredAssocQualifier;
    } 	SWbemAssocQueryInf;



extern RPC_IF_HANDLE __MIDL_itf_wmiutils_0001_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmiutils_0001_0001_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmnetsourcecreator.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0416 */
/* Compiler settings for wmnetsourcecreator.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmnetsourcecreator_h__
#define __wmnetsourcecreator_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __INSNetSourceCreator_FWD_DEFINED__
#define __INSNetSourceCreator_FWD_DEFINED__
typedef interface INSNetSourceCreator INSNetSourceCreator;
#endif 	/* __INSNetSourceCreator_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_wmnetsourcecreator_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows Media
//  Copyright (C) Microsoft Corporation. All rights reserved
//
//  Automatically generated by Midl from WMNetSourceCreator.idl
//
// DO NOT EDIT THIS FILE.
//
//--------------------------------------------------------------------------
EXTERN_GUID( CLSID_ClientNetManager, 0xCD12A3CE,0x9C42,0x11D2,0xBE,0xED,0x00,0x60,0x08,0x2F,0x20,0x54  );
EXTERN_GUID( IID_INSNetSourceCreator, 0x0C0E4080,0x9081,0x11d2,0xBE,0xEC,0x00,0x60,0x08,0x2F,0x20,0x54  );

typedef unsigned __int64 QWORD;



extern RPC_IF_HANDLE __MIDL_itf_wmnetsourcecreator_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmnetsourcecreator_0000_v0_0_s_ifspec;

#ifndef __INSNetSourceCreator_INTERFACE_DEFINED__
#define __INSNetSourceCreator_INTERFACE_DEFINED__

/* interface INSNetSourceCreator */
/* [unique][version][uuid][object] */ 


EXTERN_C const IID IID_INSNetSourceCreator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0C0E4080-9081-11d2-BEEC-0060082F2054")
    INSNetSourceCreator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateNetSource( 
            /* [in] */ LPCWSTR pszStreamName,
            /* [in] */ IUnknown *pMonitor,
            /* [in] */ BYTE *pData,
            /* [in] */ IUnknown *pUserContext,
            /* [in] */ IUnknown *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNetSourceProperties( 
            /* [in] */ LPCWSTR pszStreamName,
            /* [out] */ IUnknown **ppPropertiesNode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNetSourceSharedNamespace( 
            /* [out] */ IUnknown **ppSharedNamespace) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNetSourceAdminInterface( 
            /* [in] */ LPCWSTR pszStreamName,
            /* [out] */ VARIANT *pVal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNumProtocolsSupported( 
            /* [out] */ DWORD *pcProtocols) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProtocolName( 
            /* [in] */ DWORD dwProtocolNum,
            /* [out] */ WCHAR *pwszProtocolName,
            /* [out][in] */ WORD *pcchProtocolName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Shutdown( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INSNetSourceCreatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INSNetSourceCreator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INSNetSourceCreator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INSNetSourceCreator * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            INSNetSourceCreator * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNetSource )( 
            INSNetSourceCreator * This,
            /* [in] */ LPCWSTR pszStreamName,
            /* [in] */ IUnknown *pMonitor,
            /* [in] */ BYTE *pData,
            /* [in] */ IUnknown *pUserContext,
            /* [in] */ IUnknown *pCallback,
            /* [in] */ QWORD qwContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetNetSourceProperties )( 
            INSNetSourceCreator * This,
            /* [in] */ LPCWSTR pszStreamName,
            /* [out] */ IUnknown **ppPropertiesNode);
        
        HRESULT ( STDMETHODCALLTYPE *GetNetSourceSharedNamespace )( 
            INSNetSourceCreator * This,
            /* [out] */ IUnknown **ppSharedNamespace);
        
        HRESULT ( STDMETHODCALLTYPE *GetNetSourceAdminInterface )( 
            INSNetSourceCreator * This,
            /* [in] */ LPCWSTR pszStreamName,
            /* [out] */ VARIANT *pVal);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumProtocolsSupported )( 
            INSNetSourceCreator * This,
            /* [out] */ DWORD *pcProtocols);
        
        HRESULT ( STDMETHODCALLTYPE *GetProtocolName )( 
            INSNetSourceCreator * This,
            /* [in] */ DWORD dwProtocolNum,
            /* [out] */ WCHAR *pwszProtocolName,
            /* [out][in] */ WORD *pcchProtocolName);
        
        HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            INSNetSourceCreator * This);
        
        END_INTERFACE
    } INSNetSourceCreatorVtbl;

    interface INSNetSourceCreator
    {
        CONST_VTBL struct INSNetSourceCreatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INSNetSourceCreator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INSNetSourceCreator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INSNetSourceCreator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INSNetSourceCreator_Initialize(This)	\
    ( (This)->lpVtbl -> Initialize(This) ) 

#define INSNetSourceCreator_CreateNetSource(This,pszStreamName,pMonitor,pData,pUserContext,pCallback,qwContext)	\
    ( (This)->lpVtbl -> CreateNetSource(This,pszStreamName,pMonitor,pData,pUserContext,pCallback,qwContext) ) 

#define INSNetSourceCreator_GetNetSourceProperties(This,pszStreamName,ppPropertiesNode)	\
    ( (This)->lpVtbl -> GetNetSourceProperties(This,pszStreamName,ppPropertiesNode) ) 

#define INSNetSourceCreator_GetNetSourceSharedNamespace(This,ppSharedNamespace)	\
    ( (This)->lpVtbl -> GetNetSourceSharedNamespace(This,ppSharedNamespace) ) 

#define INSNetSourceCreator_GetNetSourceAdminInterface(This,pszStreamName,pVal)	\
    ( (This)->lpVtbl -> GetNetSourceAdminInterface(This,pszStreamName,pVal) ) 

#define INSNetSourceCreator_GetNumProtocolsSupported(This,pcProtocols)	\
    ( (This)->lpVtbl -> GetNumProtocolsSupported(This,pcProtocols) ) 

#define INSNetSourceCreator_GetProtocolName(This,dwProtocolNum,pwszProtocolName,pcchProtocolName)	\
    ( (This)->lpVtbl -> GetProtocolName(This,dwProtocolNum,pwszProtocolName,pcchProtocolName) ) 

#define INSNetSourceCreator_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE INSNetSourceCreator_Initialize_Proxy( 
    INSNetSourceCreator * This);


void __RPC_STUB INSNetSourceCreator_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSNetSourceCreator_CreateNetSource_Proxy( 
    INSNetSourceCreator * This,
    /* [in] */ LPCWSTR pszStreamName,
    /* [in] */ IUnknown *pMonitor,
    /* [in] */ BYTE *pData,
    /* [in] */ IUnknown *pUserContext,
    /* [in] */ IUnknown *pCallback,
    /* [in] */ QWORD qwContext);


void __RPC_STUB INSNetSourceCreator_CreateNetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSNetSourceCreator_GetNetSourceProperties_Proxy( 
    INSNetSourceCreator * This,
    /* [in] */ LPCWSTR pszStreamName,
    /* [out] */ IUnknown **ppPropertiesNode);


void __RPC_STUB INSNetSourceCreator_GetNetSourceProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSNetSourceCreator_GetNetSourceSharedNamespace_Proxy( 
    INSNetSourceCreator * This,
    /* [out] */ IUnknown **ppSharedNamespace);


void __RPC_STUB INSNetSourceCreator_GetNetSourceSharedNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSNetSourceCreator_GetNetSourceAdminInterface_Proxy( 
    INSNetSourceCreator * This,
    /* [in] */ LPCWSTR pszStreamName,
    /* [out] */ VARIANT *pVal);


void __RPC_STUB INSNetSourceCreator_GetNetSourceAdminInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSNetSourceCreator_GetNumProtocolsSupported_Proxy( 
    INSNetSourceCreator * This,
    /* [out] */ DWORD *pcProtocols);


void __RPC_STUB INSNetSourceCreator_GetNumProtocolsSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSNetSourceCreator_GetProtocolName_Proxy( 
    INSNetSourceCreator * This,
    /* [in] */ DWORD dwProtocolNum,
    /* [out] */ WCHAR *pwszProtocolName,
    /* [out][in] */ WORD *pcchProtocolName);


void __RPC_STUB INSNetSourceCreator_GetProtocolName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSNetSourceCreator_Shutdown_Proxy( 
    INSNetSourceCreator * This);


void __RPC_STUB INSNetSourceCreator_Shutdown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INSNetSourceCreator_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmpdevices.h ===
///////////////////////////////////////////////////////////////////////////////
//
// Microsoft Windows Media Player
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Filename: WMPDevices.h
//
// Structures and constants needed by a device implementer to support
// Windows Media Player device extension.
//
/////////////////////////////////////////////////////////////////////////////////

#pragma once

// This file defines Windows Media Player support for WMDM
// service providers.
//

//
// defines used to encode/decode WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC::dwFlags
//
#define WMP_MDRT_FLAGS_UNREPORTED_DELETED_ITEMS     0x00000001  // bit 0
#define WMP_MDRT_FLAGS_UNREPORTED_ADDED_ITEMS       0x00000002  // bit 1
// all other bits are reserved for future use and should be returned as 0 (zero) for now

#pragma pack(push, Old, 1)

#define IOCTL_WMP_METADATA_ROUND_TRIP       0x31504d57  // 'W' 'M' 'P' '1'

// Windows Media Player sends and retrieves these structures using code similar to this:
//   IWMDMDevice3 *pDevice3;
//   WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE PC2Device = {0,0};
//   DWORD dwSizeDevice2PC = sizeof(WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC) + 0x50000;
//   WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC *pDevice2PC = (WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC *) new BYTE[dwSizeDevice2PC];
//   HRESULT hr = pDevice3->DeviceIoControl(IOCTL_WMP_METADATA_ROUND_TRIP,
//                                  &PC2Device, sizeof(WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE),
//                                  pDevice2PC, &dwSizeDevice2PC);

//
// Structure sent by Windows Media Player to WMDM SP
//

typedef struct _WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE
{
    DWORD   dwChangesSinceTransactionID;    // 0 on first call ever to device (return all changes),
                                            //   value of WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC::dwCurrentTransactionID
                                            //   from last sync session
    DWORD   dwResultSetStartingIndex;       // 0 based starting index into result set that should
                                            //   be returned, always zero on first call

    // WMDM SP should check the passed buffer size is at least sizeof(WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE).
    // Future versions of WMP may pass larger structures which enable new functionality but these
    //   first 2 DWORDs would always remain the same.
} WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE;

//
// Response structure sent by WMDM SP to Windows Media Player
//

typedef struct _WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC
{
    DWORD   dwCurrentTransactionID;         // Device's current transaction ID (WMP will pass this
                                            //   value as WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE::dwChangesSinceTransactionID
                                            //   during the next sync session)
    DWORD   dwReturnedObjectCount;          // how many object pathnames are in wsObjectPathnameList
    DWORD   dwUnretrievedObjectCount;       // how many objects have changes that were not returned in
                                            //   this response (non-zero value implies at least one more
                                            //   request must be made by WMP)
    DWORD   dwDeletedObjectStartingOffset;  // wsObjectPathnameList[dwDeletedObjectStartingOffset] is
                                            //   first character of first deleted object pathname
                                            // pass 0 if wsObjectPathnameList only contains deleted
                                            //   objects (contains no updated or added objects)
                                            // pass the character offset of the last nul in
                                            //   wsObjectPathnameList if the list only contains updated
                                            //   or added objects (no deleted objects)
    DWORD   dwFlags;                        // bit 0 (0==false, 1==true) indicating some items were
                                            //   deleted before the first PUOID being reported
                                            //   (normally means device was reformatted)
                                            // bit 1 (0==false, 1==true) indicating some additional items
                                            //   were added that were not returned in the list of PUOIDs
                                            // bits 2-31 - reserved for future use
                                            //   (must be returned as 0 for now)
    WCHAR   wsObjectPathnameList[1];        // list of null terminated unicode pathname strings, one after
                                            //   another, terminated with an extra null
                                            // All the objects that have been added or have their
                                            //   playcount, user rating or BuyNow properties changed come
                                            //   first.  Then all the objects that have been deleted come
                                            //   next.  This second set of objects starts at
                                            //   dwDeletedObjectStartingOffset.
                                            // The WMDM SP should return as many object pathnames as will
                                            //   fit in the buffer passed to IMDSPDevice3::DeviceIoControl()
                                            //   whose size is passed in *pnOutBufferSize.  If there isn't
                                            //   enough room return what you can and set the
                                            //   dwUnretrievedObjectCount to a non-zero value appropriately.
} WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC;

#define IOCTL_WMP_DEVICE_CAN_SYNC           0x32504d57  // 'W' 'M' 'P' '2'
//
// This IOCTL will pass no parameters and expects a DWORD return value (1 for able to sync, 
// 0 for not able to sync)
//

#pragma pack(pop, Old)

//
// Macros for notifying WMP that a device has arrived or been removed
//
__inline BOOL WMPNotifyDeviceArrival()
{
    return( ::PostMessage( HWND_BROADCAST, ::RegisterWindowMessageA( "WMPlayer_PluginAddRemove" ), 2, 0 ) );
}

__inline BOOL WMPNotifyDeviceRemoval()
{
    return( ::PostMessage( HWND_BROADCAST, ::RegisterWindowMessageA( "WMPlayer_PluginAddRemove" ), 3, 0 ) );
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmprealestate.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmprealestatepri.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmprealestatepri_h__
#define __wmprealestatepri_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMPNodeRealEstate_FWD_DEFINED__
#define __IWMPNodeRealEstate_FWD_DEFINED__
typedef interface IWMPNodeRealEstate IWMPNodeRealEstate;
#endif 	/* __IWMPNodeRealEstate_FWD_DEFINED__ */


#ifndef __IWMPNodeRealEstateHost_FWD_DEFINED__
#define __IWMPNodeRealEstateHost_FWD_DEFINED__
typedef interface IWMPNodeRealEstateHost IWMPNodeRealEstateHost;
#endif 	/* __IWMPNodeRealEstateHost_FWD_DEFINED__ */


#ifndef __IWMPNodeWindowed_FWD_DEFINED__
#define __IWMPNodeWindowed_FWD_DEFINED__
typedef interface IWMPNodeWindowed IWMPNodeWindowed;
#endif 	/* __IWMPNodeWindowed_FWD_DEFINED__ */


#ifndef __IWMPNodeWindowedHost_FWD_DEFINED__
#define __IWMPNodeWindowedHost_FWD_DEFINED__
typedef interface IWMPNodeWindowedHost IWMPNodeWindowedHost;
#endif 	/* __IWMPNodeWindowedHost_FWD_DEFINED__ */


#ifndef __IWMPWindowMessageSink_FWD_DEFINED__
#define __IWMPWindowMessageSink_FWD_DEFINED__
typedef interface IWMPWindowMessageSink IWMPWindowMessageSink;
#endif 	/* __IWMPWindowMessageSink_FWD_DEFINED__ */


#ifndef __IWMPNodeWindowless_FWD_DEFINED__
#define __IWMPNodeWindowless_FWD_DEFINED__
typedef interface IWMPNodeWindowless IWMPNodeWindowless;
#endif 	/* __IWMPNodeWindowless_FWD_DEFINED__ */


#ifndef __IWMPNodeWindowlessHost_FWD_DEFINED__
#define __IWMPNodeWindowlessHost_FWD_DEFINED__
typedef interface IWMPNodeWindowlessHost IWMPNodeWindowlessHost;
#endif 	/* __IWMPNodeWindowlessHost_FWD_DEFINED__ */


#ifndef __IWMPVideoRenderConfig_FWD_DEFINED__
#define __IWMPVideoRenderConfig_FWD_DEFINED__
typedef interface IWMPVideoRenderConfig IWMPVideoRenderConfig;
#endif 	/* __IWMPVideoRenderConfig_FWD_DEFINED__ */


#ifndef __IWMPRenderConfig_FWD_DEFINED__
#define __IWMPRenderConfig_FWD_DEFINED__
typedef interface IWMPRenderConfig IWMPRenderConfig;
#endif 	/* __IWMPRenderConfig_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"
#include "ocidl.h"
#include "mfidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmprealestatepri_0000_0000 */
/* [local] */ 

//=========================================================================
//
// Microsoft Windows Media Technologies
// Copyright (C) Microsoft Corporation. All rights reserved.
//
//=========================================================================


extern RPC_IF_HANDLE __MIDL_itf_wmprealestatepri_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmprealestatepri_0000_0000_v0_0_s_ifspec;

#ifndef __IWMPNodeRealEstate_INTERFACE_DEFINED__
#define __IWMPNodeRealEstate_INTERFACE_DEFINED__

/* interface IWMPNodeRealEstate */
/* [oleautomation][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPNodeRealEstate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42751198-5A50-4460-BCB4-709F8BDC8E59")
    IWMPNodeRealEstate : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDesiredSize( 
            /* [out] */ LPSIZE pSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRects( 
            /* [in] */ const RECT *pSrc,
            /* [in] */ const RECT *pDest,
            /* [in] */ const RECT *pClip) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRects( 
            /* [out] */ RECT *pSrc,
            /* [out] */ RECT *pDest,
            /* [out] */ RECT *pClip) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetWindowless( 
            /* [in] */ BOOL fWindowless) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWindowless( 
            /* [out] */ BOOL *pfWindowless) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetFullScreen( 
            /* [in] */ BOOL fFullScreen) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFullScreen( 
            /* [out] */ BOOL *pfFullScreen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPNodeRealEstateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPNodeRealEstate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPNodeRealEstate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPNodeRealEstate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDesiredSize )( 
            IWMPNodeRealEstate * This,
            /* [out] */ LPSIZE pSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetRects )( 
            IWMPNodeRealEstate * This,
            /* [in] */ const RECT *pSrc,
            /* [in] */ const RECT *pDest,
            /* [in] */ const RECT *pClip);
        
        HRESULT ( STDMETHODCALLTYPE *GetRects )( 
            IWMPNodeRealEstate * This,
            /* [out] */ RECT *pSrc,
            /* [out] */ RECT *pDest,
            /* [out] */ RECT *pClip);
        
        HRESULT ( STDMETHODCALLTYPE *SetWindowless )( 
            IWMPNodeRealEstate * This,
            /* [in] */ BOOL fWindowless);
        
        HRESULT ( STDMETHODCALLTYPE *GetWindowless )( 
            IWMPNodeRealEstate * This,
            /* [out] */ BOOL *pfWindowless);
        
        HRESULT ( STDMETHODCALLTYPE *SetFullScreen )( 
            IWMPNodeRealEstate * This,
            /* [in] */ BOOL fFullScreen);
        
        HRESULT ( STDMETHODCALLTYPE *GetFullScreen )( 
            IWMPNodeRealEstate * This,
            /* [out] */ BOOL *pfFullScreen);
        
        END_INTERFACE
    } IWMPNodeRealEstateVtbl;

    interface IWMPNodeRealEstate
    {
        CONST_VTBL struct IWMPNodeRealEstateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPNodeRealEstate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPNodeRealEstate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPNodeRealEstate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPNodeRealEstate_GetDesiredSize(This,pSize)	\
    ( (This)->lpVtbl -> GetDesiredSize(This,pSize) ) 

#define IWMPNodeRealEstate_SetRects(This,pSrc,pDest,pClip)	\
    ( (This)->lpVtbl -> SetRects(This,pSrc,pDest,pClip) ) 

#define IWMPNodeRealEstate_GetRects(This,pSrc,pDest,pClip)	\
    ( (This)->lpVtbl -> GetRects(This,pSrc,pDest,pClip) ) 

#define IWMPNodeRealEstate_SetWindowless(This,fWindowless)	\
    ( (This)->lpVtbl -> SetWindowless(This,fWindowless) ) 

#define IWMPNodeRealEstate_GetWindowless(This,pfWindowless)	\
    ( (This)->lpVtbl -> GetWindowless(This,pfWindowless) ) 

#define IWMPNodeRealEstate_SetFullScreen(This,fFullScreen)	\
    ( (This)->lpVtbl -> SetFullScreen(This,fFullScreen) ) 

#define IWMPNodeRealEstate_GetFullScreen(This,pfFullScreen)	\
    ( (This)->lpVtbl -> GetFullScreen(This,pfFullScreen) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPNodeRealEstate_INTERFACE_DEFINED__ */


#ifndef __IWMPNodeRealEstateHost_INTERFACE_DEFINED__
#define __IWMPNodeRealEstateHost_INTERFACE_DEFINED__

/* interface IWMPNodeRealEstateHost */
/* [oleautomation][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPNodeRealEstateHost;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1491087D-2C6B-44c8-B019-B3C929D2ADA9")
    IWMPNodeRealEstateHost : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnDesiredSizeChange( 
            /* [in] */ LPSIZE pSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnFullScreenTransition( 
            /* [in] */ BOOL fFullScreen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPNodeRealEstateHostVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPNodeRealEstateHost * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPNodeRealEstateHost * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPNodeRealEstateHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnDesiredSizeChange )( 
            IWMPNodeRealEstateHost * This,
            /* [in] */ LPSIZE pSize);
        
        HRESULT ( STDMETHODCALLTYPE *OnFullScreenTransition )( 
            IWMPNodeRealEstateHost * This,
            /* [in] */ BOOL fFullScreen);
        
        END_INTERFACE
    } IWMPNodeRealEstateHostVtbl;

    interface IWMPNodeRealEstateHost
    {
        CONST_VTBL struct IWMPNodeRealEstateHostVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPNodeRealEstateHost_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPNodeRealEstateHost_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPNodeRealEstateHost_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPNodeRealEstateHost_OnDesiredSizeChange(This,pSize)	\
    ( (This)->lpVtbl -> OnDesiredSizeChange(This,pSize) ) 

#define IWMPNodeRealEstateHost_OnFullScreenTransition(This,fFullScreen)	\
    ( (This)->lpVtbl -> OnFullScreenTransition(This,fFullScreen) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPNodeRealEstateHost_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmprealestatepri_0000_0002 */
/* [local] */ 

typedef LONG_PTR OLE_HWND;



extern RPC_IF_HANDLE __MIDL_itf_wmprealestatepri_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmprealestatepri_0000_0002_v0_0_s_ifspec;

#ifndef __IWMPNodeWindowed_INTERFACE_DEFINED__
#define __IWMPNodeWindowed_INTERFACE_DEFINED__

/* interface IWMPNodeWindowed */
/* [oleautomation][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPNodeWindowed;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96740BFA-C56A-45d1-A3A4-762914D4ADE9")
    IWMPNodeWindowed : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetOwnerWindow( 
            /* [in] */ OLE_HWND hwnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOwnerWindow( 
            /* [out] */ OLE_HWND *phwnd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPNodeWindowedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPNodeWindowed * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPNodeWindowed * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPNodeWindowed * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetOwnerWindow )( 
            IWMPNodeWindowed * This,
            /* [in] */ OLE_HWND hwnd);
        
        HRESULT ( STDMETHODCALLTYPE *GetOwnerWindow )( 
            IWMPNodeWindowed * This,
            /* [out] */ OLE_HWND *phwnd);
        
        END_INTERFACE
    } IWMPNodeWindowedVtbl;

    interface IWMPNodeWindowed
    {
        CONST_VTBL struct IWMPNodeWindowedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPNodeWindowed_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPNodeWindowed_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPNodeWindowed_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPNodeWindowed_SetOwnerWindow(This,hwnd)	\
    ( (This)->lpVtbl -> SetOwnerWindow(This,hwnd) ) 

#define IWMPNodeWindowed_GetOwnerWindow(This,phwnd)	\
    ( (This)->lpVtbl -> GetOwnerWindow(This,phwnd) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPNodeWindowed_INTERFACE_DEFINED__ */


#ifndef __IWMPNodeWindowedHost_INTERFACE_DEFINED__
#define __IWMPNodeWindowedHost_INTERFACE_DEFINED__

/* interface IWMPNodeWindowedHost */
/* [oleautomation][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPNodeWindowedHost;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A300415A-54AA-4081-ADBF-3B13610D8958")
    IWMPNodeWindowedHost : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnWindowMessageFromRenderer( 
            /* [in] */ UINT uMsg,
            /* [in] */ WPARAM wparam,
            /* [in] */ LPARAM lparam,
            /* [out] */ LRESULT *plRet,
            /* [out] */ BOOL *pfHandled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPNodeWindowedHostVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPNodeWindowedHost * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPNodeWindowedHost * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPNodeWindowedHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnWindowMessageFromRenderer )( 
            IWMPNodeWindowedHost * This,
            /* [in] */ UINT uMsg,
            /* [in] */ WPARAM wparam,
            /* [in] */ LPARAM lparam,
            /* [out] */ LRESULT *plRet,
            /* [out] */ BOOL *pfHandled);
        
        END_INTERFACE
    } IWMPNodeWindowedHostVtbl;

    interface IWMPNodeWindowedHost
    {
        CONST_VTBL struct IWMPNodeWindowedHostVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPNodeWindowedHost_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPNodeWindowedHost_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPNodeWindowedHost_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPNodeWindowedHost_OnWindowMessageFromRenderer(This,uMsg,wparam,lparam,plRet,pfHandled)	\
    ( (This)->lpVtbl -> OnWindowMessageFromRenderer(This,uMsg,wparam,lparam,plRet,pfHandled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPNodeWindowedHost_INTERFACE_DEFINED__ */


#ifndef __IWMPWindowMessageSink_INTERFACE_DEFINED__
#define __IWMPWindowMessageSink_INTERFACE_DEFINED__

/* interface IWMPWindowMessageSink */
/* [oleautomation][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPWindowMessageSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3A0DAA30-908D-4789-BA87-AED879B5C49B")
    IWMPWindowMessageSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnWindowMessage( 
            UINT uMsg,
            WPARAM wparam,
            LPARAM lparam,
            LRESULT *plRet,
            BOOL *pfHandled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPWindowMessageSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPWindowMessageSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPWindowMessageSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPWindowMessageSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnWindowMessage )( 
            IWMPWindowMessageSink * This,
            UINT uMsg,
            WPARAM wparam,
            LPARAM lparam,
            LRESULT *plRet,
            BOOL *pfHandled);
        
        END_INTERFACE
    } IWMPWindowMessageSinkVtbl;

    interface IWMPWindowMessageSink
    {
        CONST_VTBL struct IWMPWindowMessageSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPWindowMessageSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPWindowMessageSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPWindowMessageSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPWindowMessageSink_OnWindowMessage(This,uMsg,wparam,lparam,plRet,pfHandled)	\
    ( (This)->lpVtbl -> OnWindowMessage(This,uMsg,wparam,lparam,plRet,pfHandled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPWindowMessageSink_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmprealestatepri_0000_0005 */
/* [local] */ 

typedef LONG_PTR OLE_HDC;



extern RPC_IF_HANDLE __MIDL_itf_wmprealestatepri_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmprealestatepri_0000_0005_v0_0_s_ifspec;

#ifndef __IWMPNodeWindowless_INTERFACE_DEFINED__
#define __IWMPNodeWindowless_INTERFACE_DEFINED__

/* interface IWMPNodeWindowless */
/* [oleautomation][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPNodeWindowless;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9B9199AD-780C-4eda-B816-261EBA5D1575")
    IWMPNodeWindowless : public IWMPWindowMessageSink
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnDraw( 
            /* [in] */ OLE_HDC hdc,
            /* [in] */ const RECT *prcDraw) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPNodeWindowlessVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPNodeWindowless * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPNodeWindowless * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPNodeWindowless * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnWindowMessage )( 
            IWMPNodeWindowless * This,
            UINT uMsg,
            WPARAM wparam,
            LPARAM lparam,
            LRESULT *plRet,
            BOOL *pfHandled);
        
        HRESULT ( STDMETHODCALLTYPE *OnDraw )( 
            IWMPNodeWindowless * This,
            /* [in] */ OLE_HDC hdc,
            /* [in] */ const RECT *prcDraw);
        
        END_INTERFACE
    } IWMPNodeWindowlessVtbl;

    interface IWMPNodeWindowless
    {
        CONST_VTBL struct IWMPNodeWindowlessVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPNodeWindowless_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPNodeWindowless_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPNodeWindowless_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPNodeWindowless_OnWindowMessage(This,uMsg,wparam,lparam,plRet,pfHandled)	\
    ( (This)->lpVtbl -> OnWindowMessage(This,uMsg,wparam,lparam,plRet,pfHandled) ) 


#define IWMPNodeWindowless_OnDraw(This,hdc,prcDraw)	\
    ( (This)->lpVtbl -> OnDraw(This,hdc,prcDraw) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPNodeWindowless_INTERFACE_DEFINED__ */


#ifndef __IWMPNodeWindowlessHost_INTERFACE_DEFINED__
#define __IWMPNodeWindowlessHost_INTERFACE_DEFINED__

/* interface IWMPNodeWindowlessHost */
/* [oleautomation][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPNodeWindowlessHost;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BE7017C6-CE34-4901-8106-770381AA6E3E")
    IWMPNodeWindowlessHost : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InvalidateRect( 
            /* [in] */ const RECT *prc,
            /* [in] */ BOOL fErase) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPNodeWindowlessHostVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPNodeWindowlessHost * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPNodeWindowlessHost * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPNodeWindowlessHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *InvalidateRect )( 
            IWMPNodeWindowlessHost * This,
            /* [in] */ const RECT *prc,
            /* [in] */ BOOL fErase);
        
        END_INTERFACE
    } IWMPNodeWindowlessHostVtbl;

    interface IWMPNodeWindowlessHost
    {
        CONST_VTBL struct IWMPNodeWindowlessHostVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPNodeWindowlessHost_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPNodeWindowlessHost_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPNodeWindowlessHost_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPNodeWindowlessHost_InvalidateRect(This,prc,fErase)	\
    ( (This)->lpVtbl -> InvalidateRect(This,prc,fErase) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPNodeWindowlessHost_INTERFACE_DEFINED__ */


#ifndef __IWMPVideoRenderConfig_INTERFACE_DEFINED__
#define __IWMPVideoRenderConfig_INTERFACE_DEFINED__

/* interface IWMPVideoRenderConfig */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPVideoRenderConfig;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6D6CF803-1EC0-4c8d-B3CA-F18E27282074")
    IWMPVideoRenderConfig : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE put_presenterActivate( 
            /* [in] */ IMFActivate *pActivate) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPVideoRenderConfigVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPVideoRenderConfig * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPVideoRenderConfig * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPVideoRenderConfig * This);
        
        HRESULT ( STDMETHODCALLTYPE *put_presenterActivate )( 
            IWMPVideoRenderConfig * This,
            /* [in] */ IMFActivate *pActivate);
        
        END_INTERFACE
    } IWMPVideoRenderConfigVtbl;

    interface IWMPVideoRenderConfig
    {
        CONST_VTBL struct IWMPVideoRenderConfigVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPVideoRenderConfig_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPVideoRenderConfig_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPVideoRenderConfig_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPVideoRenderConfig_put_presenterActivate(This,pActivate)	\
    ( (This)->lpVtbl -> put_presenterActivate(This,pActivate) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPVideoRenderConfig_INTERFACE_DEFINED__ */


#ifndef __IWMPRenderConfig_INTERFACE_DEFINED__
#define __IWMPRenderConfig_INTERFACE_DEFINED__

/* interface IWMPRenderConfig */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPRenderConfig;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("959506C1-0314-4EC5-9E61-8528DB5E5478")
    IWMPRenderConfig : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE put_inProcOnly( 
            /* [in] */ BOOL fInProc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_inProcOnly( 
            /* [out] */ BOOL *pfInProc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPRenderConfigVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPRenderConfig * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPRenderConfig * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPRenderConfig * This);
        
        HRESULT ( STDMETHODCALLTYPE *put_inProcOnly )( 
            IWMPRenderConfig * This,
            /* [in] */ BOOL fInProc);
        
        HRESULT ( STDMETHODCALLTYPE *get_inProcOnly )( 
            IWMPRenderConfig * This,
            /* [out] */ BOOL *pfInProc);
        
        END_INTERFACE
    } IWMPRenderConfigVtbl;

    interface IWMPRenderConfig
    {
        CONST_VTBL struct IWMPRenderConfigVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPRenderConfig_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPRenderConfig_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPRenderConfig_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPRenderConfig_put_inProcOnly(This,fInProc)	\
    ( (This)->lpVtbl -> put_inProcOnly(This,fInProc) ) 

#define IWMPRenderConfig_get_inProcOnly(This,pfInProc)	\
    ( (This)->lpVtbl -> get_inProcOnly(This,pfInProc) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPRenderConfig_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmp.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmp.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmp_h__
#define __wmp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMPErrorItem_FWD_DEFINED__
#define __IWMPErrorItem_FWD_DEFINED__
typedef interface IWMPErrorItem IWMPErrorItem;
#endif 	/* __IWMPErrorItem_FWD_DEFINED__ */


#ifndef __IWMPError_FWD_DEFINED__
#define __IWMPError_FWD_DEFINED__
typedef interface IWMPError IWMPError;
#endif 	/* __IWMPError_FWD_DEFINED__ */


#ifndef __IWMPMedia_FWD_DEFINED__
#define __IWMPMedia_FWD_DEFINED__
typedef interface IWMPMedia IWMPMedia;
#endif 	/* __IWMPMedia_FWD_DEFINED__ */


#ifndef __IWMPControls_FWD_DEFINED__
#define __IWMPControls_FWD_DEFINED__
typedef interface IWMPControls IWMPControls;
#endif 	/* __IWMPControls_FWD_DEFINED__ */


#ifndef __IWMPSettings_FWD_DEFINED__
#define __IWMPSettings_FWD_DEFINED__
typedef interface IWMPSettings IWMPSettings;
#endif 	/* __IWMPSettings_FWD_DEFINED__ */


#ifndef __IWMPClosedCaption_FWD_DEFINED__
#define __IWMPClosedCaption_FWD_DEFINED__
typedef interface IWMPClosedCaption IWMPClosedCaption;
#endif 	/* __IWMPClosedCaption_FWD_DEFINED__ */


#ifndef __IWMPPlaylist_FWD_DEFINED__
#define __IWMPPlaylist_FWD_DEFINED__
typedef interface IWMPPlaylist IWMPPlaylist;
#endif 	/* __IWMPPlaylist_FWD_DEFINED__ */


#ifndef __IWMPCdrom_FWD_DEFINED__
#define __IWMPCdrom_FWD_DEFINED__
typedef interface IWMPCdrom IWMPCdrom;
#endif 	/* __IWMPCdrom_FWD_DEFINED__ */


#ifndef __IWMPCdromCollection_FWD_DEFINED__
#define __IWMPCdromCollection_FWD_DEFINED__
typedef interface IWMPCdromCollection IWMPCdromCollection;
#endif 	/* __IWMPCdromCollection_FWD_DEFINED__ */


#ifndef __IWMPStringCollection_FWD_DEFINED__
#define __IWMPStringCollection_FWD_DEFINED__
typedef interface IWMPStringCollection IWMPStringCollection;
#endif 	/* __IWMPStringCollection_FWD_DEFINED__ */


#ifndef __IWMPMediaCollection_FWD_DEFINED__
#define __IWMPMediaCollection_FWD_DEFINED__
typedef interface IWMPMediaCollection IWMPMediaCollection;
#endif 	/* __IWMPMediaCollection_FWD_DEFINED__ */


#ifndef __IWMPPlaylistArray_FWD_DEFINED__
#define __IWMPPlaylistArray_FWD_DEFINED__
typedef interface IWMPPlaylistArray IWMPPlaylistArray;
#endif 	/* __IWMPPlaylistArray_FWD_DEFINED__ */


#ifndef __IWMPPlaylistCollection_FWD_DEFINED__
#define __IWMPPlaylistCollection_FWD_DEFINED__
typedef interface IWMPPlaylistCollection IWMPPlaylistCollection;
#endif 	/* __IWMPPlaylistCollection_FWD_DEFINED__ */


#ifndef __IWMPNetwork_FWD_DEFINED__
#define __IWMPNetwork_FWD_DEFINED__
typedef interface IWMPNetwork IWMPNetwork;
#endif 	/* __IWMPNetwork_FWD_DEFINED__ */


#ifndef __IWMPCore_FWD_DEFINED__
#define __IWMPCore_FWD_DEFINED__
typedef interface IWMPCore IWMPCore;
#endif 	/* __IWMPCore_FWD_DEFINED__ */


#ifndef __IWMPPlayer_FWD_DEFINED__
#define __IWMPPlayer_FWD_DEFINED__
typedef interface IWMPPlayer IWMPPlayer;
#endif 	/* __IWMPPlayer_FWD_DEFINED__ */


#ifndef __IWMPPlayer2_FWD_DEFINED__
#define __IWMPPlayer2_FWD_DEFINED__
typedef interface IWMPPlayer2 IWMPPlayer2;
#endif 	/* __IWMPPlayer2_FWD_DEFINED__ */


#ifndef __IWMPMedia2_FWD_DEFINED__
#define __IWMPMedia2_FWD_DEFINED__
typedef interface IWMPMedia2 IWMPMedia2;
#endif 	/* __IWMPMedia2_FWD_DEFINED__ */


#ifndef __IWMPControls2_FWD_DEFINED__
#define __IWMPControls2_FWD_DEFINED__
typedef interface IWMPControls2 IWMPControls2;
#endif 	/* __IWMPControls2_FWD_DEFINED__ */


#ifndef __IWMPDVD_FWD_DEFINED__
#define __IWMPDVD_FWD_DEFINED__
typedef interface IWMPDVD IWMPDVD;
#endif 	/* __IWMPDVD_FWD_DEFINED__ */


#ifndef __IWMPCore2_FWD_DEFINED__
#define __IWMPCore2_FWD_DEFINED__
typedef interface IWMPCore2 IWMPCore2;
#endif 	/* __IWMPCore2_FWD_DEFINED__ */


#ifndef __IWMPPlayer3_FWD_DEFINED__
#define __IWMPPlayer3_FWD_DEFINED__
typedef interface IWMPPlayer3 IWMPPlayer3;
#endif 	/* __IWMPPlayer3_FWD_DEFINED__ */


#ifndef __IWMPErrorItem2_FWD_DEFINED__
#define __IWMPErrorItem2_FWD_DEFINED__
typedef interface IWMPErrorItem2 IWMPErrorItem2;
#endif 	/* __IWMPErrorItem2_FWD_DEFINED__ */


#ifndef __IWMPRemoteMediaServices_FWD_DEFINED__
#define __IWMPRemoteMediaServices_FWD_DEFINED__
typedef interface IWMPRemoteMediaServices IWMPRemoteMediaServices;
#endif 	/* __IWMPRemoteMediaServices_FWD_DEFINED__ */


#ifndef __IWMPSkinManager_FWD_DEFINED__
#define __IWMPSkinManager_FWD_DEFINED__
typedef interface IWMPSkinManager IWMPSkinManager;
#endif 	/* __IWMPSkinManager_FWD_DEFINED__ */


#ifndef __IWMPMetadataPicture_FWD_DEFINED__
#define __IWMPMetadataPicture_FWD_DEFINED__
typedef interface IWMPMetadataPicture IWMPMetadataPicture;
#endif 	/* __IWMPMetadataPicture_FWD_DEFINED__ */


#ifndef __IWMPMetadataText_FWD_DEFINED__
#define __IWMPMetadataText_FWD_DEFINED__
typedef interface IWMPMetadataText IWMPMetadataText;
#endif 	/* __IWMPMetadataText_FWD_DEFINED__ */


#ifndef __IWMPMedia3_FWD_DEFINED__
#define __IWMPMedia3_FWD_DEFINED__
typedef interface IWMPMedia3 IWMPMedia3;
#endif 	/* __IWMPMedia3_FWD_DEFINED__ */


#ifndef __IWMPSettings2_FWD_DEFINED__
#define __IWMPSettings2_FWD_DEFINED__
typedef interface IWMPSettings2 IWMPSettings2;
#endif 	/* __IWMPSettings2_FWD_DEFINED__ */


#ifndef __IWMPControls3_FWD_DEFINED__
#define __IWMPControls3_FWD_DEFINED__
typedef interface IWMPControls3 IWMPControls3;
#endif 	/* __IWMPControls3_FWD_DEFINED__ */


#ifndef __IWMPClosedCaption2_FWD_DEFINED__
#define __IWMPClosedCaption2_FWD_DEFINED__
typedef interface IWMPClosedCaption2 IWMPClosedCaption2;
#endif 	/* __IWMPClosedCaption2_FWD_DEFINED__ */


#ifndef __IWMPPlayerApplication_FWD_DEFINED__
#define __IWMPPlayerApplication_FWD_DEFINED__
typedef interface IWMPPlayerApplication IWMPPlayerApplication;
#endif 	/* __IWMPPlayerApplication_FWD_DEFINED__ */


#ifndef __IWMPCore3_FWD_DEFINED__
#define __IWMPCore3_FWD_DEFINED__
typedef interface IWMPCore3 IWMPCore3;
#endif 	/* __IWMPCore3_FWD_DEFINED__ */


#ifndef __IWMPPlayer4_FWD_DEFINED__
#define __IWMPPlayer4_FWD_DEFINED__
typedef interface IWMPPlayer4 IWMPPlayer4;
#endif 	/* __IWMPPlayer4_FWD_DEFINED__ */


#ifndef __IWMPPlayerServices_FWD_DEFINED__
#define __IWMPPlayerServices_FWD_DEFINED__
typedef interface IWMPPlayerServices IWMPPlayerServices;
#endif 	/* __IWMPPlayerServices_FWD_DEFINED__ */


#ifndef __IWMPSyncDevice_FWD_DEFINED__
#define __IWMPSyncDevice_FWD_DEFINED__
typedef interface IWMPSyncDevice IWMPSyncDevice;
#endif 	/* __IWMPSyncDevice_FWD_DEFINED__ */


#ifndef __IWMPSyncServices_FWD_DEFINED__
#define __IWMPSyncServices_FWD_DEFINED__
typedef interface IWMPSyncServices IWMPSyncServices;
#endif 	/* __IWMPSyncServices_FWD_DEFINED__ */


#ifndef __IWMPPlayerServices2_FWD_DEFINED__
#define __IWMPPlayerServices2_FWD_DEFINED__
typedef interface IWMPPlayerServices2 IWMPPlayerServices2;
#endif 	/* __IWMPPlayerServices2_FWD_DEFINED__ */


#ifndef __IWMPCdromRip_FWD_DEFINED__
#define __IWMPCdromRip_FWD_DEFINED__
typedef interface IWMPCdromRip IWMPCdromRip;
#endif 	/* __IWMPCdromRip_FWD_DEFINED__ */


#ifndef __IWMPCdromBurn_FWD_DEFINED__
#define __IWMPCdromBurn_FWD_DEFINED__
typedef interface IWMPCdromBurn IWMPCdromBurn;
#endif 	/* __IWMPCdromBurn_FWD_DEFINED__ */


#ifndef __IWMPQuery_FWD_DEFINED__
#define __IWMPQuery_FWD_DEFINED__
typedef interface IWMPQuery IWMPQuery;
#endif 	/* __IWMPQuery_FWD_DEFINED__ */


#ifndef __IWMPMediaCollection2_FWD_DEFINED__
#define __IWMPMediaCollection2_FWD_DEFINED__
typedef interface IWMPMediaCollection2 IWMPMediaCollection2;
#endif 	/* __IWMPMediaCollection2_FWD_DEFINED__ */


#ifndef __IWMPStringCollection2_FWD_DEFINED__
#define __IWMPStringCollection2_FWD_DEFINED__
typedef interface IWMPStringCollection2 IWMPStringCollection2;
#endif 	/* __IWMPStringCollection2_FWD_DEFINED__ */


#ifndef __IWMPLibrary_FWD_DEFINED__
#define __IWMPLibrary_FWD_DEFINED__
typedef interface IWMPLibrary IWMPLibrary;
#endif 	/* __IWMPLibrary_FWD_DEFINED__ */


#ifndef __IWMPLibraryServices_FWD_DEFINED__
#define __IWMPLibraryServices_FWD_DEFINED__
typedef interface IWMPLibraryServices IWMPLibraryServices;
#endif 	/* __IWMPLibraryServices_FWD_DEFINED__ */


#ifndef __IWMPLibrarySharingServices_FWD_DEFINED__
#define __IWMPLibrarySharingServices_FWD_DEFINED__
typedef interface IWMPLibrarySharingServices IWMPLibrarySharingServices;
#endif 	/* __IWMPLibrarySharingServices_FWD_DEFINED__ */


#ifndef __IWMPFolderMonitorServices_FWD_DEFINED__
#define __IWMPFolderMonitorServices_FWD_DEFINED__
typedef interface IWMPFolderMonitorServices IWMPFolderMonitorServices;
#endif 	/* __IWMPFolderMonitorServices_FWD_DEFINED__ */


#ifndef __IWMPSyncDevice2_FWD_DEFINED__
#define __IWMPSyncDevice2_FWD_DEFINED__
typedef interface IWMPSyncDevice2 IWMPSyncDevice2;
#endif 	/* __IWMPSyncDevice2_FWD_DEFINED__ */


#ifndef __IWMPEvents_FWD_DEFINED__
#define __IWMPEvents_FWD_DEFINED__
typedef interface IWMPEvents IWMPEvents;
#endif 	/* __IWMPEvents_FWD_DEFINED__ */


#ifndef __IWMPEvents2_FWD_DEFINED__
#define __IWMPEvents2_FWD_DEFINED__
typedef interface IWMPEvents2 IWMPEvents2;
#endif 	/* __IWMPEvents2_FWD_DEFINED__ */


#ifndef __IWMPEvents3_FWD_DEFINED__
#define __IWMPEvents3_FWD_DEFINED__
typedef interface IWMPEvents3 IWMPEvents3;
#endif 	/* __IWMPEvents3_FWD_DEFINED__ */


#ifndef ___WMPOCXEvents_FWD_DEFINED__
#define ___WMPOCXEvents_FWD_DEFINED__
typedef interface _WMPOCXEvents _WMPOCXEvents;
#endif 	/* ___WMPOCXEvents_FWD_DEFINED__ */


#ifndef __WindowsMediaPlayer_FWD_DEFINED__
#define __WindowsMediaPlayer_FWD_DEFINED__

#ifdef __cplusplus
typedef class WindowsMediaPlayer WindowsMediaPlayer;
#else
typedef struct WindowsMediaPlayer WindowsMediaPlayer;
#endif /* __cplusplus */

#endif 	/* __WindowsMediaPlayer_FWD_DEFINED__ */


#ifndef __IWMPPlayerServices_FWD_DEFINED__
#define __IWMPPlayerServices_FWD_DEFINED__
typedef interface IWMPPlayerServices IWMPPlayerServices;
#endif 	/* __IWMPPlayerServices_FWD_DEFINED__ */


#ifndef __IWMPPlayerServices2_FWD_DEFINED__
#define __IWMPPlayerServices2_FWD_DEFINED__
typedef interface IWMPPlayerServices2 IWMPPlayerServices2;
#endif 	/* __IWMPPlayerServices2_FWD_DEFINED__ */


#ifndef __IWMPRemoteMediaServices_FWD_DEFINED__
#define __IWMPRemoteMediaServices_FWD_DEFINED__
typedef interface IWMPRemoteMediaServices IWMPRemoteMediaServices;
#endif 	/* __IWMPRemoteMediaServices_FWD_DEFINED__ */


#ifndef __IWMPSyncServices_FWD_DEFINED__
#define __IWMPSyncServices_FWD_DEFINED__
typedef interface IWMPSyncServices IWMPSyncServices;
#endif 	/* __IWMPSyncServices_FWD_DEFINED__ */


#ifndef __IWMPLibraryServices_FWD_DEFINED__
#define __IWMPLibraryServices_FWD_DEFINED__
typedef interface IWMPLibraryServices IWMPLibraryServices;
#endif 	/* __IWMPLibraryServices_FWD_DEFINED__ */


#ifndef __IWMPLibrarySharingServices_FWD_DEFINED__
#define __IWMPLibrarySharingServices_FWD_DEFINED__
typedef interface IWMPLibrarySharingServices IWMPLibrarySharingServices;
#endif 	/* __IWMPLibrarySharingServices_FWD_DEFINED__ */


#ifndef __IWMPFolderMonitorServices_FWD_DEFINED__
#define __IWMPFolderMonitorServices_FWD_DEFINED__
typedef interface IWMPFolderMonitorServices IWMPFolderMonitorServices;
#endif 	/* __IWMPFolderMonitorServices_FWD_DEFINED__ */


#ifndef __IWMPSyncDevice_FWD_DEFINED__
#define __IWMPSyncDevice_FWD_DEFINED__
typedef interface IWMPSyncDevice IWMPSyncDevice;
#endif 	/* __IWMPSyncDevice_FWD_DEFINED__ */


#ifndef __IWMPSyncDevice2_FWD_DEFINED__
#define __IWMPSyncDevice2_FWD_DEFINED__
typedef interface IWMPSyncDevice2 IWMPSyncDevice2;
#endif 	/* __IWMPSyncDevice2_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmp_0000_0000 */
/* [local] */ 

//=========================================================================
//
// Microsoft Windows Media Technologies
// Copyright (C) Microsoft Corporation. All rights reserved.
//
//=========================================================================
typedef /* [public][helpstring] */ 
enum WMPOpenState
    {	wmposUndefined	= 0,
	wmposPlaylistChanging	= ( wmposUndefined + 1 ) ,
	wmposPlaylistLocating	= ( wmposPlaylistChanging + 1 ) ,
	wmposPlaylistConnecting	= ( wmposPlaylistLocating + 1 ) ,
	wmposPlaylistLoading	= ( wmposPlaylistConnecting + 1 ) ,
	wmposPlaylistOpening	= ( wmposPlaylistLoading + 1 ) ,
	wmposPlaylistOpenNoMedia	= ( wmposPlaylistOpening + 1 ) ,
	wmposPlaylistChanged	= ( wmposPlaylistOpenNoMedia + 1 ) ,
	wmposMediaChanging	= ( wmposPlaylistChanged + 1 ) ,
	wmposMediaLocating	= ( wmposMediaChanging + 1 ) ,
	wmposMediaConnecting	= ( wmposMediaLocating + 1 ) ,
	wmposMediaLoading	= ( wmposMediaConnecting + 1 ) ,
	wmposMediaOpening	= ( wmposMediaLoading + 1 ) ,
	wmposMediaOpen	= ( wmposMediaOpening + 1 ) ,
	wmposBeginCodecAcquisition	= ( wmposMediaOpen + 1 ) ,
	wmposEndCodecAcquisition	= ( wmposBeginCodecAcquisition + 1 ) ,
	wmposBeginLicenseAcquisition	= ( wmposEndCodecAcquisition + 1 ) ,
	wmposEndLicenseAcquisition	= ( wmposBeginLicenseAcquisition + 1 ) ,
	wmposBeginIndividualization	= ( wmposEndLicenseAcquisition + 1 ) ,
	wmposEndIndividualization	= ( wmposBeginIndividualization + 1 ) ,
	wmposMediaWaiting	= ( wmposEndIndividualization + 1 ) ,
	wmposOpeningUnknownURL	= ( wmposMediaWaiting + 1 ) 
    } 	WMPOpenState;

typedef /* [public][helpstring] */ 
enum WMPPlayState
    {	wmppsUndefined	= 0,
	wmppsStopped	= ( wmppsUndefined + 1 ) ,
	wmppsPaused	= ( wmppsStopped + 1 ) ,
	wmppsPlaying	= ( wmppsPaused + 1 ) ,
	wmppsScanForward	= ( wmppsPlaying + 1 ) ,
	wmppsScanReverse	= ( wmppsScanForward + 1 ) ,
	wmppsBuffering	= ( wmppsScanReverse + 1 ) ,
	wmppsWaiting	= ( wmppsBuffering + 1 ) ,
	wmppsMediaEnded	= ( wmppsWaiting + 1 ) ,
	wmppsTransitioning	= ( wmppsMediaEnded + 1 ) ,
	wmppsReady	= ( wmppsTransitioning + 1 ) ,
	wmppsReconnecting	= ( wmppsReady + 1 ) ,
	wmppsLast	= ( wmppsReconnecting + 1 ) 
    } 	WMPPlayState;

typedef /* [public][helpstring] */ 
enum WMPPlaylistChangeEventType
    {	wmplcUnknown	= 0,
	wmplcClear	= ( wmplcUnknown + 1 ) ,
	wmplcInfoChange	= ( wmplcClear + 1 ) ,
	wmplcMove	= ( wmplcInfoChange + 1 ) ,
	wmplcDelete	= ( wmplcMove + 1 ) ,
	wmplcInsert	= ( wmplcDelete + 1 ) ,
	wmplcAppend	= ( wmplcInsert + 1 ) ,
	wmplcPrivate	= ( wmplcAppend + 1 ) ,
	wmplcNameChange	= ( wmplcPrivate + 1 ) ,
	wmplcMorph	= ( wmplcNameChange + 1 ) ,
	wmplcSort	= ( wmplcMorph + 1 ) ,
	wmplcLast	= ( wmplcSort + 1 ) 
    } 	WMPPlaylistChangeEventType;




extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0000_v0_0_s_ifspec;

#ifndef __IWMPErrorItem_INTERFACE_DEFINED__
#define __IWMPErrorItem_INTERFACE_DEFINED__

/* interface IWMPErrorItem */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPErrorItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3614C646-3B3B-4de7-A81E-930E3F2127B3")
    IWMPErrorItem : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_errorCode( 
            /* [retval][out] */ long *phr) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_errorDescription( 
            /* [retval][out] */ BSTR *pbstrDescription) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_errorContext( 
            /* [retval][out] */ VARIANT *pvarContext) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_remedy( 
            /* [retval][out] */ long *plRemedy) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_customUrl( 
            /* [retval][out] */ BSTR *pbstrCustomUrl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPErrorItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPErrorItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPErrorItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPErrorItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPErrorItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPErrorItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPErrorItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPErrorItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_errorCode )( 
            IWMPErrorItem * This,
            /* [retval][out] */ long *phr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_errorDescription )( 
            IWMPErrorItem * This,
            /* [retval][out] */ BSTR *pbstrDescription);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_errorContext )( 
            IWMPErrorItem * This,
            /* [retval][out] */ VARIANT *pvarContext);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_remedy )( 
            IWMPErrorItem * This,
            /* [retval][out] */ long *plRemedy);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_customUrl )( 
            IWMPErrorItem * This,
            /* [retval][out] */ BSTR *pbstrCustomUrl);
        
        END_INTERFACE
    } IWMPErrorItemVtbl;

    interface IWMPErrorItem
    {
        CONST_VTBL struct IWMPErrorItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPErrorItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPErrorItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPErrorItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPErrorItem_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPErrorItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPErrorItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPErrorItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPErrorItem_get_errorCode(This,phr)	\
    ( (This)->lpVtbl -> get_errorCode(This,phr) ) 

#define IWMPErrorItem_get_errorDescription(This,pbstrDescription)	\
    ( (This)->lpVtbl -> get_errorDescription(This,pbstrDescription) ) 

#define IWMPErrorItem_get_errorContext(This,pvarContext)	\
    ( (This)->lpVtbl -> get_errorContext(This,pvarContext) ) 

#define IWMPErrorItem_get_remedy(This,plRemedy)	\
    ( (This)->lpVtbl -> get_remedy(This,plRemedy) ) 

#define IWMPErrorItem_get_customUrl(This,pbstrCustomUrl)	\
    ( (This)->lpVtbl -> get_customUrl(This,pbstrCustomUrl) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPErrorItem_INTERFACE_DEFINED__ */


#ifndef __IWMPError_INTERFACE_DEFINED__
#define __IWMPError_INTERFACE_DEFINED__

/* interface IWMPError */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPError;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A12DCF7D-14AB-4c1b-A8CD-63909F06025B")
    IWMPError : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE clearErrorQueue( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_errorCount( 
            /* [retval][out] */ long *plNumErrors) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_item( 
            /* [in] */ long dwIndex,
            /* [retval][out] */ IWMPErrorItem **ppErrorItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE webHelp( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPErrorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPError * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPError * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPError * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPError * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPError * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPError * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPError * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *clearErrorQueue )( 
            IWMPError * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_errorCount )( 
            IWMPError * This,
            /* [retval][out] */ long *plNumErrors);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_item )( 
            IWMPError * This,
            /* [in] */ long dwIndex,
            /* [retval][out] */ IWMPErrorItem **ppErrorItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *webHelp )( 
            IWMPError * This);
        
        END_INTERFACE
    } IWMPErrorVtbl;

    interface IWMPError
    {
        CONST_VTBL struct IWMPErrorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPError_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPError_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPError_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPError_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPError_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPError_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPError_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPError_clearErrorQueue(This)	\
    ( (This)->lpVtbl -> clearErrorQueue(This) ) 

#define IWMPError_get_errorCount(This,plNumErrors)	\
    ( (This)->lpVtbl -> get_errorCount(This,plNumErrors) ) 

#define IWMPError_get_item(This,dwIndex,ppErrorItem)	\
    ( (This)->lpVtbl -> get_item(This,dwIndex,ppErrorItem) ) 

#define IWMPError_webHelp(This)	\
    ( (This)->lpVtbl -> webHelp(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPError_INTERFACE_DEFINED__ */


#ifndef __IWMPMedia_INTERFACE_DEFINED__
#define __IWMPMedia_INTERFACE_DEFINED__

/* interface IWMPMedia */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPMedia;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("94D55E95-3FAC-11d3-B155-00C04F79FAA6")
    IWMPMedia : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_isIdentical( 
            /* [in] */ IWMPMedia *pIWMPMedia,
            /* [retval][out] */ VARIANT_BOOL *pvbool) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_sourceURL( 
            /* [retval][out] */ BSTR *pbstrSourceURL) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_imageSourceWidth( 
            /* [retval][out] */ long *pWidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_imageSourceHeight( 
            /* [retval][out] */ long *pHeight) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_markerCount( 
            /* [retval][out] */ long *pMarkerCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getMarkerTime( 
            /* [in] */ long MarkerNum,
            /* [retval][out] */ double *pMarkerTime) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getMarkerName( 
            /* [in] */ long MarkerNum,
            /* [retval][out] */ BSTR *pbstrMarkerName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_duration( 
            /* [retval][out] */ double *pDuration) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_durationString( 
            /* [retval][out] */ BSTR *pbstrDuration) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_attributeCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAttributeName( 
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrItemName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getItemInfo( 
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setItemInfo( 
            /* [in] */ BSTR bstrItemName,
            /* [in] */ BSTR bstrVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getItemInfoByAtom( 
            /* [in] */ long lAtom,
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE isMemberOf( 
            /* [in] */ IWMPPlaylist *pPlaylist,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsMemberOf) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE isReadOnlyItem( 
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsReadOnly) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPMediaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPMedia * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPMedia * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPMedia * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPMedia * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPMedia * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPMedia * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPMedia * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isIdentical )( 
            IWMPMedia * This,
            /* [in] */ IWMPMedia *pIWMPMedia,
            /* [retval][out] */ VARIANT_BOOL *pvbool);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_sourceURL )( 
            IWMPMedia * This,
            /* [retval][out] */ BSTR *pbstrSourceURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IWMPMedia * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IWMPMedia * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_imageSourceWidth )( 
            IWMPMedia * This,
            /* [retval][out] */ long *pWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_imageSourceHeight )( 
            IWMPMedia * This,
            /* [retval][out] */ long *pHeight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_markerCount )( 
            IWMPMedia * This,
            /* [retval][out] */ long *pMarkerCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMarkerTime )( 
            IWMPMedia * This,
            /* [in] */ long MarkerNum,
            /* [retval][out] */ double *pMarkerTime);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMarkerName )( 
            IWMPMedia * This,
            /* [in] */ long MarkerNum,
            /* [retval][out] */ BSTR *pbstrMarkerName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_duration )( 
            IWMPMedia * This,
            /* [retval][out] */ double *pDuration);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_durationString )( 
            IWMPMedia * This,
            /* [retval][out] */ BSTR *pbstrDuration);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_attributeCount )( 
            IWMPMedia * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeName )( 
            IWMPMedia * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrItemName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfo )( 
            IWMPMedia * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setItemInfo )( 
            IWMPMedia * This,
            /* [in] */ BSTR bstrItemName,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfoByAtom )( 
            IWMPMedia * This,
            /* [in] */ long lAtom,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isMemberOf )( 
            IWMPMedia * This,
            /* [in] */ IWMPPlaylist *pPlaylist,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsMemberOf);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isReadOnlyItem )( 
            IWMPMedia * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsReadOnly);
        
        END_INTERFACE
    } IWMPMediaVtbl;

    interface IWMPMedia
    {
        CONST_VTBL struct IWMPMediaVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPMedia_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPMedia_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPMedia_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPMedia_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPMedia_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPMedia_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPMedia_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPMedia_get_isIdentical(This,pIWMPMedia,pvbool)	\
    ( (This)->lpVtbl -> get_isIdentical(This,pIWMPMedia,pvbool) ) 

#define IWMPMedia_get_sourceURL(This,pbstrSourceURL)	\
    ( (This)->lpVtbl -> get_sourceURL(This,pbstrSourceURL) ) 

#define IWMPMedia_get_name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_name(This,pbstrName) ) 

#define IWMPMedia_put_name(This,bstrName)	\
    ( (This)->lpVtbl -> put_name(This,bstrName) ) 

#define IWMPMedia_get_imageSourceWidth(This,pWidth)	\
    ( (This)->lpVtbl -> get_imageSourceWidth(This,pWidth) ) 

#define IWMPMedia_get_imageSourceHeight(This,pHeight)	\
    ( (This)->lpVtbl -> get_imageSourceHeight(This,pHeight) ) 

#define IWMPMedia_get_markerCount(This,pMarkerCount)	\
    ( (This)->lpVtbl -> get_markerCount(This,pMarkerCount) ) 

#define IWMPMedia_getMarkerTime(This,MarkerNum,pMarkerTime)	\
    ( (This)->lpVtbl -> getMarkerTime(This,MarkerNum,pMarkerTime) ) 

#define IWMPMedia_getMarkerName(This,MarkerNum,pbstrMarkerName)	\
    ( (This)->lpVtbl -> getMarkerName(This,MarkerNum,pbstrMarkerName) ) 

#define IWMPMedia_get_duration(This,pDuration)	\
    ( (This)->lpVtbl -> get_duration(This,pDuration) ) 

#define IWMPMedia_get_durationString(This,pbstrDuration)	\
    ( (This)->lpVtbl -> get_durationString(This,pbstrDuration) ) 

#define IWMPMedia_get_attributeCount(This,plCount)	\
    ( (This)->lpVtbl -> get_attributeCount(This,plCount) ) 

#define IWMPMedia_getAttributeName(This,lIndex,pbstrItemName)	\
    ( (This)->lpVtbl -> getAttributeName(This,lIndex,pbstrItemName) ) 

#define IWMPMedia_getItemInfo(This,bstrItemName,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfo(This,bstrItemName,pbstrVal) ) 

#define IWMPMedia_setItemInfo(This,bstrItemName,bstrVal)	\
    ( (This)->lpVtbl -> setItemInfo(This,bstrItemName,bstrVal) ) 

#define IWMPMedia_getItemInfoByAtom(This,lAtom,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfoByAtom(This,lAtom,pbstrVal) ) 

#define IWMPMedia_isMemberOf(This,pPlaylist,pvarfIsMemberOf)	\
    ( (This)->lpVtbl -> isMemberOf(This,pPlaylist,pvarfIsMemberOf) ) 

#define IWMPMedia_isReadOnlyItem(This,bstrItemName,pvarfIsReadOnly)	\
    ( (This)->lpVtbl -> isReadOnlyItem(This,bstrItemName,pvarfIsReadOnly) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPMedia_INTERFACE_DEFINED__ */


#ifndef __IWMPControls_INTERFACE_DEFINED__
#define __IWMPControls_INTERFACE_DEFINED__

/* interface IWMPControls */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPControls;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74C09E02-F828-11d2-A74B-00A0C905F36E")
    IWMPControls : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_isAvailable( 
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE play( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE stop( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE pause( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE fastForward( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE fastReverse( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentPosition( 
            /* [retval][out] */ double *pdCurrentPosition) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_currentPosition( 
            /* [in] */ double dCurrentPosition) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentPositionString( 
            /* [retval][out] */ BSTR *pbstrCurrentPosition) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE next( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE previous( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentItem( 
            /* [retval][out] */ IWMPMedia **ppIWMPMedia) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_currentItem( 
            /* [in] */ IWMPMedia *pIWMPMedia) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentMarker( 
            /* [retval][out] */ long *plMarker) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_currentMarker( 
            /* [in] */ long lMarker) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE playItem( 
            /* [in] */ IWMPMedia *pIWMPMedia) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPControlsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPControls * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPControls * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPControls * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPControls * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPControls * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPControls * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPControls * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isAvailable )( 
            IWMPControls * This,
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *play )( 
            IWMPControls * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *stop )( 
            IWMPControls * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *pause )( 
            IWMPControls * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *fastForward )( 
            IWMPControls * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *fastReverse )( 
            IWMPControls * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPosition )( 
            IWMPControls * This,
            /* [retval][out] */ double *pdCurrentPosition);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPosition )( 
            IWMPControls * This,
            /* [in] */ double dCurrentPosition);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPositionString )( 
            IWMPControls * This,
            /* [retval][out] */ BSTR *pbstrCurrentPosition);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *next )( 
            IWMPControls * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *previous )( 
            IWMPControls * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentItem )( 
            IWMPControls * This,
            /* [retval][out] */ IWMPMedia **ppIWMPMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentItem )( 
            IWMPControls * This,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMarker )( 
            IWMPControls * This,
            /* [retval][out] */ long *plMarker);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMarker )( 
            IWMPControls * This,
            /* [in] */ long lMarker);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *playItem )( 
            IWMPControls * This,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        END_INTERFACE
    } IWMPControlsVtbl;

    interface IWMPControls
    {
        CONST_VTBL struct IWMPControlsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPControls_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPControls_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPControls_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPControls_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPControls_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPControls_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPControls_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPControls_get_isAvailable(This,bstrItem,pIsAvailable)	\
    ( (This)->lpVtbl -> get_isAvailable(This,bstrItem,pIsAvailable) ) 

#define IWMPControls_play(This)	\
    ( (This)->lpVtbl -> play(This) ) 

#define IWMPControls_stop(This)	\
    ( (This)->lpVtbl -> stop(This) ) 

#define IWMPControls_pause(This)	\
    ( (This)->lpVtbl -> pause(This) ) 

#define IWMPControls_fastForward(This)	\
    ( (This)->lpVtbl -> fastForward(This) ) 

#define IWMPControls_fastReverse(This)	\
    ( (This)->lpVtbl -> fastReverse(This) ) 

#define IWMPControls_get_currentPosition(This,pdCurrentPosition)	\
    ( (This)->lpVtbl -> get_currentPosition(This,pdCurrentPosition) ) 

#define IWMPControls_put_currentPosition(This,dCurrentPosition)	\
    ( (This)->lpVtbl -> put_currentPosition(This,dCurrentPosition) ) 

#define IWMPControls_get_currentPositionString(This,pbstrCurrentPosition)	\
    ( (This)->lpVtbl -> get_currentPositionString(This,pbstrCurrentPosition) ) 

#define IWMPControls_next(This)	\
    ( (This)->lpVtbl -> next(This) ) 

#define IWMPControls_previous(This)	\
    ( (This)->lpVtbl -> previous(This) ) 

#define IWMPControls_get_currentItem(This,ppIWMPMedia)	\
    ( (This)->lpVtbl -> get_currentItem(This,ppIWMPMedia) ) 

#define IWMPControls_put_currentItem(This,pIWMPMedia)	\
    ( (This)->lpVtbl -> put_currentItem(This,pIWMPMedia) ) 

#define IWMPControls_get_currentMarker(This,plMarker)	\
    ( (This)->lpVtbl -> get_currentMarker(This,plMarker) ) 

#define IWMPControls_put_currentMarker(This,lMarker)	\
    ( (This)->lpVtbl -> put_currentMarker(This,lMarker) ) 

#define IWMPControls_playItem(This,pIWMPMedia)	\
    ( (This)->lpVtbl -> playItem(This,pIWMPMedia) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPControls_INTERFACE_DEFINED__ */


#ifndef __IWMPSettings_INTERFACE_DEFINED__
#define __IWMPSettings_INTERFACE_DEFINED__

/* interface IWMPSettings */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9104D1AB-80C9-4fed-ABF0-2E6417A6DF14")
    IWMPSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_isAvailable( 
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_autoStart( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoStart) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_autoStart( 
            /* [in] */ VARIANT_BOOL fAutoStart) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_baseURL( 
            /* [retval][out] */ BSTR *pbstrBaseURL) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_baseURL( 
            /* [in] */ BSTR bstrBaseURL) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_defaultFrame( 
            /* [retval][out] */ BSTR *pbstrDefaultFrame) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_defaultFrame( 
            /* [in] */ BSTR bstrDefaultFrame) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_invokeURLs( 
            /* [retval][out] */ VARIANT_BOOL *pfInvokeURLs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_invokeURLs( 
            /* [in] */ VARIANT_BOOL fInvokeURLs) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_mute( 
            /* [retval][out] */ VARIANT_BOOL *pfMute) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_mute( 
            /* [in] */ VARIANT_BOOL fMute) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_playCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_playCount( 
            /* [in] */ long lCount) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_rate( 
            /* [retval][out] */ double *pdRate) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_rate( 
            /* [in] */ double dRate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_balance( 
            /* [retval][out] */ long *plBalance) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_balance( 
            /* [in] */ long lBalance) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_volume( 
            /* [retval][out] */ long *plVolume) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_volume( 
            /* [in] */ long lVolume) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getMode( 
            /* [in] */ BSTR bstrMode,
            /* [retval][out] */ VARIANT_BOOL *pvarfMode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setMode( 
            /* [in] */ BSTR bstrMode,
            /* [in] */ VARIANT_BOOL varfMode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enableErrorDialogs( 
            /* [retval][out] */ VARIANT_BOOL *pfEnableErrorDialogs) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enableErrorDialogs( 
            /* [in] */ VARIANT_BOOL fEnableErrorDialogs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPSettings * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isAvailable )( 
            IWMPSettings * This,
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_autoStart )( 
            IWMPSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoStart);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_autoStart )( 
            IWMPSettings * This,
            /* [in] */ VARIANT_BOOL fAutoStart);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_baseURL )( 
            IWMPSettings * This,
            /* [retval][out] */ BSTR *pbstrBaseURL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_baseURL )( 
            IWMPSettings * This,
            /* [in] */ BSTR bstrBaseURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_defaultFrame )( 
            IWMPSettings * This,
            /* [retval][out] */ BSTR *pbstrDefaultFrame);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_defaultFrame )( 
            IWMPSettings * This,
            /* [in] */ BSTR bstrDefaultFrame);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_invokeURLs )( 
            IWMPSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pfInvokeURLs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_invokeURLs )( 
            IWMPSettings * This,
            /* [in] */ VARIANT_BOOL fInvokeURLs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mute )( 
            IWMPSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pfMute);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            IWMPSettings * This,
            /* [in] */ VARIANT_BOOL fMute);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playCount )( 
            IWMPSettings * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_playCount )( 
            IWMPSettings * This,
            /* [in] */ long lCount);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_rate )( 
            IWMPSettings * This,
            /* [retval][out] */ double *pdRate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_rate )( 
            IWMPSettings * This,
            /* [in] */ double dRate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_balance )( 
            IWMPSettings * This,
            /* [retval][out] */ long *plBalance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_balance )( 
            IWMPSettings * This,
            /* [in] */ long lBalance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            IWMPSettings * This,
            /* [retval][out] */ long *plVolume);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            IWMPSettings * This,
            /* [in] */ long lVolume);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMode )( 
            IWMPSettings * This,
            /* [in] */ BSTR bstrMode,
            /* [retval][out] */ VARIANT_BOOL *pvarfMode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setMode )( 
            IWMPSettings * This,
            /* [in] */ BSTR bstrMode,
            /* [in] */ VARIANT_BOOL varfMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enableErrorDialogs )( 
            IWMPSettings * This,
            /* [retval][out] */ VARIANT_BOOL *pfEnableErrorDialogs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enableErrorDialogs )( 
            IWMPSettings * This,
            /* [in] */ VARIANT_BOOL fEnableErrorDialogs);
        
        END_INTERFACE
    } IWMPSettingsVtbl;

    interface IWMPSettings
    {
        CONST_VTBL struct IWMPSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPSettings_get_isAvailable(This,bstrItem,pIsAvailable)	\
    ( (This)->lpVtbl -> get_isAvailable(This,bstrItem,pIsAvailable) ) 

#define IWMPSettings_get_autoStart(This,pfAutoStart)	\
    ( (This)->lpVtbl -> get_autoStart(This,pfAutoStart) ) 

#define IWMPSettings_put_autoStart(This,fAutoStart)	\
    ( (This)->lpVtbl -> put_autoStart(This,fAutoStart) ) 

#define IWMPSettings_get_baseURL(This,pbstrBaseURL)	\
    ( (This)->lpVtbl -> get_baseURL(This,pbstrBaseURL) ) 

#define IWMPSettings_put_baseURL(This,bstrBaseURL)	\
    ( (This)->lpVtbl -> put_baseURL(This,bstrBaseURL) ) 

#define IWMPSettings_get_defaultFrame(This,pbstrDefaultFrame)	\
    ( (This)->lpVtbl -> get_defaultFrame(This,pbstrDefaultFrame) ) 

#define IWMPSettings_put_defaultFrame(This,bstrDefaultFrame)	\
    ( (This)->lpVtbl -> put_defaultFrame(This,bstrDefaultFrame) ) 

#define IWMPSettings_get_invokeURLs(This,pfInvokeURLs)	\
    ( (This)->lpVtbl -> get_invokeURLs(This,pfInvokeURLs) ) 

#define IWMPSettings_put_invokeURLs(This,fInvokeURLs)	\
    ( (This)->lpVtbl -> put_invokeURLs(This,fInvokeURLs) ) 

#define IWMPSettings_get_mute(This,pfMute)	\
    ( (This)->lpVtbl -> get_mute(This,pfMute) ) 

#define IWMPSettings_put_mute(This,fMute)	\
    ( (This)->lpVtbl -> put_mute(This,fMute) ) 

#define IWMPSettings_get_playCount(This,plCount)	\
    ( (This)->lpVtbl -> get_playCount(This,plCount) ) 

#define IWMPSettings_put_playCount(This,lCount)	\
    ( (This)->lpVtbl -> put_playCount(This,lCount) ) 

#define IWMPSettings_get_rate(This,pdRate)	\
    ( (This)->lpVtbl -> get_rate(This,pdRate) ) 

#define IWMPSettings_put_rate(This,dRate)	\
    ( (This)->lpVtbl -> put_rate(This,dRate) ) 

#define IWMPSettings_get_balance(This,plBalance)	\
    ( (This)->lpVtbl -> get_balance(This,plBalance) ) 

#define IWMPSettings_put_balance(This,lBalance)	\
    ( (This)->lpVtbl -> put_balance(This,lBalance) ) 

#define IWMPSettings_get_volume(This,plVolume)	\
    ( (This)->lpVtbl -> get_volume(This,plVolume) ) 

#define IWMPSettings_put_volume(This,lVolume)	\
    ( (This)->lpVtbl -> put_volume(This,lVolume) ) 

#define IWMPSettings_getMode(This,bstrMode,pvarfMode)	\
    ( (This)->lpVtbl -> getMode(This,bstrMode,pvarfMode) ) 

#define IWMPSettings_setMode(This,bstrMode,varfMode)	\
    ( (This)->lpVtbl -> setMode(This,bstrMode,varfMode) ) 

#define IWMPSettings_get_enableErrorDialogs(This,pfEnableErrorDialogs)	\
    ( (This)->lpVtbl -> get_enableErrorDialogs(This,pfEnableErrorDialogs) ) 

#define IWMPSettings_put_enableErrorDialogs(This,fEnableErrorDialogs)	\
    ( (This)->lpVtbl -> put_enableErrorDialogs(This,fEnableErrorDialogs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPSettings_INTERFACE_DEFINED__ */


#ifndef __IWMPClosedCaption_INTERFACE_DEFINED__
#define __IWMPClosedCaption_INTERFACE_DEFINED__

/* interface IWMPClosedCaption */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPClosedCaption;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4F2DF574-C588-11d3-9ED0-00C04FB6E937")
    IWMPClosedCaption : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SAMIStyle( 
            /* [retval][out] */ BSTR *pbstrSAMIStyle) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SAMIStyle( 
            /* [in] */ BSTR bstrSAMIStyle) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SAMILang( 
            /* [retval][out] */ BSTR *pbstrSAMILang) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SAMILang( 
            /* [in] */ BSTR bstrSAMILang) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SAMIFileName( 
            /* [retval][out] */ BSTR *pbstrSAMIFileName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_SAMIFileName( 
            /* [in] */ BSTR bstrSAMIFileName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_captioningId( 
            /* [retval][out] */ BSTR *pbstrCaptioningID) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_captioningId( 
            /* [in] */ BSTR bstrCaptioningID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPClosedCaptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPClosedCaption * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPClosedCaption * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPClosedCaption * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPClosedCaption * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPClosedCaption * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPClosedCaption * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPClosedCaption * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SAMIStyle )( 
            IWMPClosedCaption * This,
            /* [retval][out] */ BSTR *pbstrSAMIStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SAMIStyle )( 
            IWMPClosedCaption * This,
            /* [in] */ BSTR bstrSAMIStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SAMILang )( 
            IWMPClosedCaption * This,
            /* [retval][out] */ BSTR *pbstrSAMILang);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SAMILang )( 
            IWMPClosedCaption * This,
            /* [in] */ BSTR bstrSAMILang);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SAMIFileName )( 
            IWMPClosedCaption * This,
            /* [retval][out] */ BSTR *pbstrSAMIFileName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SAMIFileName )( 
            IWMPClosedCaption * This,
            /* [in] */ BSTR bstrSAMIFileName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_captioningId )( 
            IWMPClosedCaption * This,
            /* [retval][out] */ BSTR *pbstrCaptioningID);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_captioningId )( 
            IWMPClosedCaption * This,
            /* [in] */ BSTR bstrCaptioningID);
        
        END_INTERFACE
    } IWMPClosedCaptionVtbl;

    interface IWMPClosedCaption
    {
        CONST_VTBL struct IWMPClosedCaptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPClosedCaption_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPClosedCaption_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPClosedCaption_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPClosedCaption_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPClosedCaption_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPClosedCaption_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPClosedCaption_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPClosedCaption_get_SAMIStyle(This,pbstrSAMIStyle)	\
    ( (This)->lpVtbl -> get_SAMIStyle(This,pbstrSAMIStyle) ) 

#define IWMPClosedCaption_put_SAMIStyle(This,bstrSAMIStyle)	\
    ( (This)->lpVtbl -> put_SAMIStyle(This,bstrSAMIStyle) ) 

#define IWMPClosedCaption_get_SAMILang(This,pbstrSAMILang)	\
    ( (This)->lpVtbl -> get_SAMILang(This,pbstrSAMILang) ) 

#define IWMPClosedCaption_put_SAMILang(This,bstrSAMILang)	\
    ( (This)->lpVtbl -> put_SAMILang(This,bstrSAMILang) ) 

#define IWMPClosedCaption_get_SAMIFileName(This,pbstrSAMIFileName)	\
    ( (This)->lpVtbl -> get_SAMIFileName(This,pbstrSAMIFileName) ) 

#define IWMPClosedCaption_put_SAMIFileName(This,bstrSAMIFileName)	\
    ( (This)->lpVtbl -> put_SAMIFileName(This,bstrSAMIFileName) ) 

#define IWMPClosedCaption_get_captioningId(This,pbstrCaptioningID)	\
    ( (This)->lpVtbl -> get_captioningId(This,pbstrCaptioningID) ) 

#define IWMPClosedCaption_put_captioningId(This,bstrCaptioningID)	\
    ( (This)->lpVtbl -> put_captioningId(This,bstrCaptioningID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPClosedCaption_INTERFACE_DEFINED__ */


#ifndef __IWMPPlaylist_INTERFACE_DEFINED__
#define __IWMPPlaylist_INTERFACE_DEFINED__

/* interface IWMPPlaylist */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlaylist;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D5F0F4F1-130C-11d3-B14E-00C04F79FAA6")
    IWMPPlaylist : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_attributeCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_attributeName( 
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrAttributeName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_item( 
            long lIndex,
            /* [retval][out] */ IWMPMedia **ppIWMPMedia) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getItemInfo( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setItemInfo( 
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrValue) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_isIdentical( 
            /* [in] */ IWMPPlaylist *pIWMPPlaylist,
            /* [retval][out] */ VARIANT_BOOL *pvbool) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE clear( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE insertItem( 
            /* [in] */ long lIndex,
            /* [in] */ IWMPMedia *pIWMPMedia) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE appendItem( 
            /* [in] */ IWMPMedia *pIWMPMedia) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE removeItem( 
            /* [in] */ IWMPMedia *pIWMPMedia) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE moveItem( 
            long lIndexOld,
            long lIndexNew) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlaylistVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlaylist * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlaylist * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlaylist * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPPlaylist * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPPlaylist * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPPlaylist * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPPlaylist * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_count )( 
            IWMPPlaylist * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IWMPPlaylist * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IWMPPlaylist * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_attributeCount )( 
            IWMPPlaylist * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_attributeName )( 
            IWMPPlaylist * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrAttributeName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_item )( 
            IWMPPlaylist * This,
            long lIndex,
            /* [retval][out] */ IWMPMedia **ppIWMPMedia);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfo )( 
            IWMPPlaylist * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setItemInfo )( 
            IWMPPlaylist * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrValue);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isIdentical )( 
            IWMPPlaylist * This,
            /* [in] */ IWMPPlaylist *pIWMPPlaylist,
            /* [retval][out] */ VARIANT_BOOL *pvbool);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *clear )( 
            IWMPPlaylist * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertItem )( 
            IWMPPlaylist * This,
            /* [in] */ long lIndex,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendItem )( 
            IWMPPlaylist * This,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeItem )( 
            IWMPPlaylist * This,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *moveItem )( 
            IWMPPlaylist * This,
            long lIndexOld,
            long lIndexNew);
        
        END_INTERFACE
    } IWMPPlaylistVtbl;

    interface IWMPPlaylist
    {
        CONST_VTBL struct IWMPPlaylistVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlaylist_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlaylist_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlaylist_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlaylist_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPPlaylist_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPPlaylist_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPPlaylist_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPPlaylist_get_count(This,plCount)	\
    ( (This)->lpVtbl -> get_count(This,plCount) ) 

#define IWMPPlaylist_get_name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_name(This,pbstrName) ) 

#define IWMPPlaylist_put_name(This,bstrName)	\
    ( (This)->lpVtbl -> put_name(This,bstrName) ) 

#define IWMPPlaylist_get_attributeCount(This,plCount)	\
    ( (This)->lpVtbl -> get_attributeCount(This,plCount) ) 

#define IWMPPlaylist_get_attributeName(This,lIndex,pbstrAttributeName)	\
    ( (This)->lpVtbl -> get_attributeName(This,lIndex,pbstrAttributeName) ) 

#define IWMPPlaylist_get_item(This,lIndex,ppIWMPMedia)	\
    ( (This)->lpVtbl -> get_item(This,lIndex,ppIWMPMedia) ) 

#define IWMPPlaylist_getItemInfo(This,bstrName,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfo(This,bstrName,pbstrVal) ) 

#define IWMPPlaylist_setItemInfo(This,bstrName,bstrValue)	\
    ( (This)->lpVtbl -> setItemInfo(This,bstrName,bstrValue) ) 

#define IWMPPlaylist_get_isIdentical(This,pIWMPPlaylist,pvbool)	\
    ( (This)->lpVtbl -> get_isIdentical(This,pIWMPPlaylist,pvbool) ) 

#define IWMPPlaylist_clear(This)	\
    ( (This)->lpVtbl -> clear(This) ) 

#define IWMPPlaylist_insertItem(This,lIndex,pIWMPMedia)	\
    ( (This)->lpVtbl -> insertItem(This,lIndex,pIWMPMedia) ) 

#define IWMPPlaylist_appendItem(This,pIWMPMedia)	\
    ( (This)->lpVtbl -> appendItem(This,pIWMPMedia) ) 

#define IWMPPlaylist_removeItem(This,pIWMPMedia)	\
    ( (This)->lpVtbl -> removeItem(This,pIWMPMedia) ) 

#define IWMPPlaylist_moveItem(This,lIndexOld,lIndexNew)	\
    ( (This)->lpVtbl -> moveItem(This,lIndexOld,lIndexNew) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlaylist_INTERFACE_DEFINED__ */


#ifndef __IWMPCdrom_INTERFACE_DEFINED__
#define __IWMPCdrom_INTERFACE_DEFINED__

/* interface IWMPCdrom */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPCdrom;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cfab6e98-8730-11d3-b388-00c04f68574b")
    IWMPCdrom : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_driveSpecifier( 
            /* [retval][out] */ BSTR *pbstrDrive) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_playlist( 
            /* [retval][out] */ IWMPPlaylist **ppPlaylist) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE eject( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPCdromVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPCdrom * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPCdrom * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPCdrom * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPCdrom * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPCdrom * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPCdrom * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPCdrom * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_driveSpecifier )( 
            IWMPCdrom * This,
            /* [retval][out] */ BSTR *pbstrDrive);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playlist )( 
            IWMPCdrom * This,
            /* [retval][out] */ IWMPPlaylist **ppPlaylist);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *eject )( 
            IWMPCdrom * This);
        
        END_INTERFACE
    } IWMPCdromVtbl;

    interface IWMPCdrom
    {
        CONST_VTBL struct IWMPCdromVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPCdrom_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPCdrom_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPCdrom_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPCdrom_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPCdrom_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPCdrom_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPCdrom_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPCdrom_get_driveSpecifier(This,pbstrDrive)	\
    ( (This)->lpVtbl -> get_driveSpecifier(This,pbstrDrive) ) 

#define IWMPCdrom_get_playlist(This,ppPlaylist)	\
    ( (This)->lpVtbl -> get_playlist(This,ppPlaylist) ) 

#define IWMPCdrom_eject(This)	\
    ( (This)->lpVtbl -> eject(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPCdrom_INTERFACE_DEFINED__ */


#ifndef __IWMPCdromCollection_INTERFACE_DEFINED__
#define __IWMPCdromCollection_INTERFACE_DEFINED__

/* interface IWMPCdromCollection */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPCdromCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EE4C8FE2-34B2-11d3-A3BF-006097C9B344")
    IWMPCdromCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long lIndex,
            /* [retval][out] */ IWMPCdrom **ppItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getByDriveSpecifier( 
            /* [in] */ BSTR bstrDriveSpecifier,
            /* [retval][out] */ IWMPCdrom **ppCdrom) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPCdromCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPCdromCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPCdromCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPCdromCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPCdromCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPCdromCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPCdromCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPCdromCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_count )( 
            IWMPCdromCollection * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IWMPCdromCollection * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ IWMPCdrom **ppItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByDriveSpecifier )( 
            IWMPCdromCollection * This,
            /* [in] */ BSTR bstrDriveSpecifier,
            /* [retval][out] */ IWMPCdrom **ppCdrom);
        
        END_INTERFACE
    } IWMPCdromCollectionVtbl;

    interface IWMPCdromCollection
    {
        CONST_VTBL struct IWMPCdromCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPCdromCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPCdromCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPCdromCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPCdromCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPCdromCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPCdromCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPCdromCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPCdromCollection_get_count(This,plCount)	\
    ( (This)->lpVtbl -> get_count(This,plCount) ) 

#define IWMPCdromCollection_item(This,lIndex,ppItem)	\
    ( (This)->lpVtbl -> item(This,lIndex,ppItem) ) 

#define IWMPCdromCollection_getByDriveSpecifier(This,bstrDriveSpecifier,ppCdrom)	\
    ( (This)->lpVtbl -> getByDriveSpecifier(This,bstrDriveSpecifier,ppCdrom) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPCdromCollection_INTERFACE_DEFINED__ */


#ifndef __IWMPStringCollection_INTERFACE_DEFINED__
#define __IWMPStringCollection_INTERFACE_DEFINED__

/* interface IWMPStringCollection */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPStringCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4a976298-8c0d-11d3-b389-00c04f68574b")
    IWMPStringCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPStringCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPStringCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPStringCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPStringCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPStringCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPStringCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPStringCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPStringCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_count )( 
            IWMPStringCollection * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IWMPStringCollection * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrString);
        
        END_INTERFACE
    } IWMPStringCollectionVtbl;

    interface IWMPStringCollection
    {
        CONST_VTBL struct IWMPStringCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPStringCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPStringCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPStringCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPStringCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPStringCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPStringCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPStringCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPStringCollection_get_count(This,plCount)	\
    ( (This)->lpVtbl -> get_count(This,plCount) ) 

#define IWMPStringCollection_item(This,lIndex,pbstrString)	\
    ( (This)->lpVtbl -> item(This,lIndex,pbstrString) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPStringCollection_INTERFACE_DEFINED__ */


#ifndef __IWMPMediaCollection_INTERFACE_DEFINED__
#define __IWMPMediaCollection_INTERFACE_DEFINED__

/* interface IWMPMediaCollection */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPMediaCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8363BC22-B4B4-4b19-989D-1CD765749DD1")
    IWMPMediaCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPMedia **ppItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAll( 
            /* [retval][out] */ IWMPPlaylist **ppMediaItems) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getByName( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getByGenre( 
            /* [in] */ BSTR bstrGenre,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getByAuthor( 
            /* [in] */ BSTR bstrAuthor,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getByAlbum( 
            /* [in] */ BSTR bstrAlbum,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getByAttribute( 
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrValue,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in] */ IWMPMedia *pItem,
            /* [in] */ VARIANT_BOOL varfDeleteFile) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAttributeStringCollection( 
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrMediaType,
            /* [retval][out] */ IWMPStringCollection **ppStringCollection) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getMediaAtom( 
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ long *plAtom) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setDeleted( 
            /* [in] */ IWMPMedia *pItem,
            /* [in] */ VARIANT_BOOL varfIsDeleted) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE isDeleted( 
            /* [in] */ IWMPMedia *pItem,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsDeleted) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPMediaCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPMediaCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPMediaCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPMediaCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPMediaCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPMediaCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPMediaCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPMediaCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *add )( 
            IWMPMediaCollection * This,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPMedia **ppItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAll )( 
            IWMPMediaCollection * This,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByName )( 
            IWMPMediaCollection * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByGenre )( 
            IWMPMediaCollection * This,
            /* [in] */ BSTR bstrGenre,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByAuthor )( 
            IWMPMediaCollection * This,
            /* [in] */ BSTR bstrAuthor,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByAlbum )( 
            IWMPMediaCollection * This,
            /* [in] */ BSTR bstrAlbum,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByAttribute )( 
            IWMPMediaCollection * This,
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrValue,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *remove )( 
            IWMPMediaCollection * This,
            /* [in] */ IWMPMedia *pItem,
            /* [in] */ VARIANT_BOOL varfDeleteFile);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeStringCollection )( 
            IWMPMediaCollection * This,
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrMediaType,
            /* [retval][out] */ IWMPStringCollection **ppStringCollection);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMediaAtom )( 
            IWMPMediaCollection * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ long *plAtom);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setDeleted )( 
            IWMPMediaCollection * This,
            /* [in] */ IWMPMedia *pItem,
            /* [in] */ VARIANT_BOOL varfIsDeleted);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isDeleted )( 
            IWMPMediaCollection * This,
            /* [in] */ IWMPMedia *pItem,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsDeleted);
        
        END_INTERFACE
    } IWMPMediaCollectionVtbl;

    interface IWMPMediaCollection
    {
        CONST_VTBL struct IWMPMediaCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPMediaCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPMediaCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPMediaCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPMediaCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPMediaCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPMediaCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPMediaCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPMediaCollection_add(This,bstrURL,ppItem)	\
    ( (This)->lpVtbl -> add(This,bstrURL,ppItem) ) 

#define IWMPMediaCollection_getAll(This,ppMediaItems)	\
    ( (This)->lpVtbl -> getAll(This,ppMediaItems) ) 

#define IWMPMediaCollection_getByName(This,bstrName,ppMediaItems)	\
    ( (This)->lpVtbl -> getByName(This,bstrName,ppMediaItems) ) 

#define IWMPMediaCollection_getByGenre(This,bstrGenre,ppMediaItems)	\
    ( (This)->lpVtbl -> getByGenre(This,bstrGenre,ppMediaItems) ) 

#define IWMPMediaCollection_getByAuthor(This,bstrAuthor,ppMediaItems)	\
    ( (This)->lpVtbl -> getByAuthor(This,bstrAuthor,ppMediaItems) ) 

#define IWMPMediaCollection_getByAlbum(This,bstrAlbum,ppMediaItems)	\
    ( (This)->lpVtbl -> getByAlbum(This,bstrAlbum,ppMediaItems) ) 

#define IWMPMediaCollection_getByAttribute(This,bstrAttribute,bstrValue,ppMediaItems)	\
    ( (This)->lpVtbl -> getByAttribute(This,bstrAttribute,bstrValue,ppMediaItems) ) 

#define IWMPMediaCollection_remove(This,pItem,varfDeleteFile)	\
    ( (This)->lpVtbl -> remove(This,pItem,varfDeleteFile) ) 

#define IWMPMediaCollection_getAttributeStringCollection(This,bstrAttribute,bstrMediaType,ppStringCollection)	\
    ( (This)->lpVtbl -> getAttributeStringCollection(This,bstrAttribute,bstrMediaType,ppStringCollection) ) 

#define IWMPMediaCollection_getMediaAtom(This,bstrItemName,plAtom)	\
    ( (This)->lpVtbl -> getMediaAtom(This,bstrItemName,plAtom) ) 

#define IWMPMediaCollection_setDeleted(This,pItem,varfIsDeleted)	\
    ( (This)->lpVtbl -> setDeleted(This,pItem,varfIsDeleted) ) 

#define IWMPMediaCollection_isDeleted(This,pItem,pvarfIsDeleted)	\
    ( (This)->lpVtbl -> isDeleted(This,pItem,pvarfIsDeleted) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPMediaCollection_INTERFACE_DEFINED__ */


#ifndef __IWMPPlaylistArray_INTERFACE_DEFINED__
#define __IWMPPlaylistArray_INTERFACE_DEFINED__

/* interface IWMPPlaylistArray */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlaylistArray;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("679409c0-99f7-11d3-9fb7-00105aa620bb")
    IWMPPlaylistArray : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long lIndex,
            /* [retval][out] */ IWMPPlaylist **ppItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlaylistArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlaylistArray * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlaylistArray * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlaylistArray * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPPlaylistArray * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPPlaylistArray * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPPlaylistArray * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPPlaylistArray * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_count )( 
            IWMPPlaylistArray * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IWMPPlaylistArray * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ IWMPPlaylist **ppItem);
        
        END_INTERFACE
    } IWMPPlaylistArrayVtbl;

    interface IWMPPlaylistArray
    {
        CONST_VTBL struct IWMPPlaylistArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlaylistArray_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlaylistArray_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlaylistArray_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlaylistArray_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPPlaylistArray_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPPlaylistArray_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPPlaylistArray_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPPlaylistArray_get_count(This,plCount)	\
    ( (This)->lpVtbl -> get_count(This,plCount) ) 

#define IWMPPlaylistArray_item(This,lIndex,ppItem)	\
    ( (This)->lpVtbl -> item(This,lIndex,ppItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlaylistArray_INTERFACE_DEFINED__ */


#ifndef __IWMPPlaylistCollection_INTERFACE_DEFINED__
#define __IWMPPlaylistCollection_INTERFACE_DEFINED__

/* interface IWMPPlaylistCollection */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlaylistCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("10A13217-23A7-439b-B1C0-D847C79B7774")
    IWMPPlaylistCollection : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE newPlaylist( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IWMPPlaylist **ppItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAll( 
            /* [retval][out] */ IWMPPlaylistArray **ppPlaylistArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getByName( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IWMPPlaylistArray **ppPlaylistArray) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in] */ IWMPPlaylist *pItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setDeleted( 
            /* [in] */ IWMPPlaylist *pItem,
            /* [in] */ VARIANT_BOOL varfIsDeleted) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE isDeleted( 
            /* [in] */ IWMPPlaylist *pItem,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsDeleted) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE importPlaylist( 
            /* [in] */ IWMPPlaylist *pItem,
            /* [retval][out] */ IWMPPlaylist **ppImportedItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlaylistCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlaylistCollection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlaylistCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlaylistCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPPlaylistCollection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPPlaylistCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPPlaylistCollection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPPlaylistCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *newPlaylist )( 
            IWMPPlaylistCollection * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IWMPPlaylist **ppItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAll )( 
            IWMPPlaylistCollection * This,
            /* [retval][out] */ IWMPPlaylistArray **ppPlaylistArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByName )( 
            IWMPPlaylistCollection * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IWMPPlaylistArray **ppPlaylistArray);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *remove )( 
            IWMPPlaylistCollection * This,
            /* [in] */ IWMPPlaylist *pItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setDeleted )( 
            IWMPPlaylistCollection * This,
            /* [in] */ IWMPPlaylist *pItem,
            /* [in] */ VARIANT_BOOL varfIsDeleted);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isDeleted )( 
            IWMPPlaylistCollection * This,
            /* [in] */ IWMPPlaylist *pItem,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsDeleted);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *importPlaylist )( 
            IWMPPlaylistCollection * This,
            /* [in] */ IWMPPlaylist *pItem,
            /* [retval][out] */ IWMPPlaylist **ppImportedItem);
        
        END_INTERFACE
    } IWMPPlaylistCollectionVtbl;

    interface IWMPPlaylistCollection
    {
        CONST_VTBL struct IWMPPlaylistCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlaylistCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlaylistCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlaylistCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlaylistCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPPlaylistCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPPlaylistCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPPlaylistCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPPlaylistCollection_newPlaylist(This,bstrName,ppItem)	\
    ( (This)->lpVtbl -> newPlaylist(This,bstrName,ppItem) ) 

#define IWMPPlaylistCollection_getAll(This,ppPlaylistArray)	\
    ( (This)->lpVtbl -> getAll(This,ppPlaylistArray) ) 

#define IWMPPlaylistCollection_getByName(This,bstrName,ppPlaylistArray)	\
    ( (This)->lpVtbl -> getByName(This,bstrName,ppPlaylistArray) ) 

#define IWMPPlaylistCollection_remove(This,pItem)	\
    ( (This)->lpVtbl -> remove(This,pItem) ) 

#define IWMPPlaylistCollection_setDeleted(This,pItem,varfIsDeleted)	\
    ( (This)->lpVtbl -> setDeleted(This,pItem,varfIsDeleted) ) 

#define IWMPPlaylistCollection_isDeleted(This,pItem,pvarfIsDeleted)	\
    ( (This)->lpVtbl -> isDeleted(This,pItem,pvarfIsDeleted) ) 

#define IWMPPlaylistCollection_importPlaylist(This,pItem,ppImportedItem)	\
    ( (This)->lpVtbl -> importPlaylist(This,pItem,ppImportedItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlaylistCollection_INTERFACE_DEFINED__ */


#ifndef __IWMPNetwork_INTERFACE_DEFINED__
#define __IWMPNetwork_INTERFACE_DEFINED__

/* interface IWMPNetwork */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPNetwork;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EC21B779-EDEF-462d-BBA4-AD9DDE2B29A7")
    IWMPNetwork : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_bandWidth( 
            /* [retval][out] */ long *plBandwidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_recoveredPackets( 
            /* [retval][out] */ long *plRecoveredPackets) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_sourceProtocol( 
            /* [retval][out] */ BSTR *pbstrSourceProtocol) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_receivedPackets( 
            /* [retval][out] */ long *plReceivedPackets) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_lostPackets( 
            /* [retval][out] */ long *plLostPackets) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_receptionQuality( 
            /* [retval][out] */ long *plReceptionQuality) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_bufferingCount( 
            /* [retval][out] */ long *plBufferingCount) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_bufferingProgress( 
            /* [retval][out] */ long *plBufferingProgress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_bufferingTime( 
            /* [retval][out] */ long *plBufferingTime) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_bufferingTime( 
            /* [in] */ long lBufferingTime) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_frameRate( 
            /* [retval][out] */ long *plFrameRate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_maxBitRate( 
            /* [retval][out] */ long *plBitRate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_bitRate( 
            /* [retval][out] */ long *plBitRate) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getProxySettings( 
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ long *plProxySetting) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setProxySettings( 
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ long lProxySetting) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getProxyName( 
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ BSTR *pbstrProxyName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setProxyName( 
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrProxyName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getProxyPort( 
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ long *lProxyPort) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setProxyPort( 
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ long lProxyPort) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getProxyExceptionList( 
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ BSTR *pbstrExceptionList) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setProxyExceptionList( 
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR pbstrExceptionList) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getProxyBypassForLocal( 
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ VARIANT_BOOL *pfBypassForLocal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE setProxyBypassForLocal( 
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ VARIANT_BOOL fBypassForLocal) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_maxBandwidth( 
            /* [retval][out] */ long *lMaxBandwidth) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_maxBandwidth( 
            /* [in] */ long lMaxBandwidth) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_downloadProgress( 
            /* [retval][out] */ long *plDownloadProgress) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_encodedFrameRate( 
            /* [retval][out] */ long *plFrameRate) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_framesSkipped( 
            /* [retval][out] */ long *plFrames) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPNetworkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPNetwork * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPNetwork * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPNetwork * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPNetwork * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPNetwork * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPNetwork * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPNetwork * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_bandWidth )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plBandwidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_recoveredPackets )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plRecoveredPackets);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_sourceProtocol )( 
            IWMPNetwork * This,
            /* [retval][out] */ BSTR *pbstrSourceProtocol);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_receivedPackets )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plReceivedPackets);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_lostPackets )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plLostPackets);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_receptionQuality )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plReceptionQuality);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_bufferingCount )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plBufferingCount);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_bufferingProgress )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plBufferingProgress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_bufferingTime )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plBufferingTime);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_bufferingTime )( 
            IWMPNetwork * This,
            /* [in] */ long lBufferingTime);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_frameRate )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plFrameRate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_maxBitRate )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plBitRate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_bitRate )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plBitRate);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getProxySettings )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ long *plProxySetting);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setProxySettings )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ long lProxySetting);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getProxyName )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ BSTR *pbstrProxyName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setProxyName )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrProxyName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getProxyPort )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ long *lProxyPort);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setProxyPort )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ long lProxyPort);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getProxyExceptionList )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ BSTR *pbstrExceptionList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setProxyExceptionList )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR pbstrExceptionList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getProxyBypassForLocal )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [retval][out] */ VARIANT_BOOL *pfBypassForLocal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setProxyBypassForLocal )( 
            IWMPNetwork * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ VARIANT_BOOL fBypassForLocal);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_maxBandwidth )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *lMaxBandwidth);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_maxBandwidth )( 
            IWMPNetwork * This,
            /* [in] */ long lMaxBandwidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_downloadProgress )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plDownloadProgress);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_encodedFrameRate )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plFrameRate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_framesSkipped )( 
            IWMPNetwork * This,
            /* [retval][out] */ long *plFrames);
        
        END_INTERFACE
    } IWMPNetworkVtbl;

    interface IWMPNetwork
    {
        CONST_VTBL struct IWMPNetworkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPNetwork_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPNetwork_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPNetwork_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPNetwork_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPNetwork_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPNetwork_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPNetwork_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPNetwork_get_bandWidth(This,plBandwidth)	\
    ( (This)->lpVtbl -> get_bandWidth(This,plBandwidth) ) 

#define IWMPNetwork_get_recoveredPackets(This,plRecoveredPackets)	\
    ( (This)->lpVtbl -> get_recoveredPackets(This,plRecoveredPackets) ) 

#define IWMPNetwork_get_sourceProtocol(This,pbstrSourceProtocol)	\
    ( (This)->lpVtbl -> get_sourceProtocol(This,pbstrSourceProtocol) ) 

#define IWMPNetwork_get_receivedPackets(This,plReceivedPackets)	\
    ( (This)->lpVtbl -> get_receivedPackets(This,plReceivedPackets) ) 

#define IWMPNetwork_get_lostPackets(This,plLostPackets)	\
    ( (This)->lpVtbl -> get_lostPackets(This,plLostPackets) ) 

#define IWMPNetwork_get_receptionQuality(This,plReceptionQuality)	\
    ( (This)->lpVtbl -> get_receptionQuality(This,plReceptionQuality) ) 

#define IWMPNetwork_get_bufferingCount(This,plBufferingCount)	\
    ( (This)->lpVtbl -> get_bufferingCount(This,plBufferingCount) ) 

#define IWMPNetwork_get_bufferingProgress(This,plBufferingProgress)	\
    ( (This)->lpVtbl -> get_bufferingProgress(This,plBufferingProgress) ) 

#define IWMPNetwork_get_bufferingTime(This,plBufferingTime)	\
    ( (This)->lpVtbl -> get_bufferingTime(This,plBufferingTime) ) 

#define IWMPNetwork_put_bufferingTime(This,lBufferingTime)	\
    ( (This)->lpVtbl -> put_bufferingTime(This,lBufferingTime) ) 

#define IWMPNetwork_get_frameRate(This,plFrameRate)	\
    ( (This)->lpVtbl -> get_frameRate(This,plFrameRate) ) 

#define IWMPNetwork_get_maxBitRate(This,plBitRate)	\
    ( (This)->lpVtbl -> get_maxBitRate(This,plBitRate) ) 

#define IWMPNetwork_get_bitRate(This,plBitRate)	\
    ( (This)->lpVtbl -> get_bitRate(This,plBitRate) ) 

#define IWMPNetwork_getProxySettings(This,bstrProtocol,plProxySetting)	\
    ( (This)->lpVtbl -> getProxySettings(This,bstrProtocol,plProxySetting) ) 

#define IWMPNetwork_setProxySettings(This,bstrProtocol,lProxySetting)	\
    ( (This)->lpVtbl -> setProxySettings(This,bstrProtocol,lProxySetting) ) 

#define IWMPNetwork_getProxyName(This,bstrProtocol,pbstrProxyName)	\
    ( (This)->lpVtbl -> getProxyName(This,bstrProtocol,pbstrProxyName) ) 

#define IWMPNetwork_setProxyName(This,bstrProtocol,bstrProxyName)	\
    ( (This)->lpVtbl -> setProxyName(This,bstrProtocol,bstrProxyName) ) 

#define IWMPNetwork_getProxyPort(This,bstrProtocol,lProxyPort)	\
    ( (This)->lpVtbl -> getProxyPort(This,bstrProtocol,lProxyPort) ) 

#define IWMPNetwork_setProxyPort(This,bstrProtocol,lProxyPort)	\
    ( (This)->lpVtbl -> setProxyPort(This,bstrProtocol,lProxyPort) ) 

#define IWMPNetwork_getProxyExceptionList(This,bstrProtocol,pbstrExceptionList)	\
    ( (This)->lpVtbl -> getProxyExceptionList(This,bstrProtocol,pbstrExceptionList) ) 

#define IWMPNetwork_setProxyExceptionList(This,bstrProtocol,pbstrExceptionList)	\
    ( (This)->lpVtbl -> setProxyExceptionList(This,bstrProtocol,pbstrExceptionList) ) 

#define IWMPNetwork_getProxyBypassForLocal(This,bstrProtocol,pfBypassForLocal)	\
    ( (This)->lpVtbl -> getProxyBypassForLocal(This,bstrProtocol,pfBypassForLocal) ) 

#define IWMPNetwork_setProxyBypassForLocal(This,bstrProtocol,fBypassForLocal)	\
    ( (This)->lpVtbl -> setProxyBypassForLocal(This,bstrProtocol,fBypassForLocal) ) 

#define IWMPNetwork_get_maxBandwidth(This,lMaxBandwidth)	\
    ( (This)->lpVtbl -> get_maxBandwidth(This,lMaxBandwidth) ) 

#define IWMPNetwork_put_maxBandwidth(This,lMaxBandwidth)	\
    ( (This)->lpVtbl -> put_maxBandwidth(This,lMaxBandwidth) ) 

#define IWMPNetwork_get_downloadProgress(This,plDownloadProgress)	\
    ( (This)->lpVtbl -> get_downloadProgress(This,plDownloadProgress) ) 

#define IWMPNetwork_get_encodedFrameRate(This,plFrameRate)	\
    ( (This)->lpVtbl -> get_encodedFrameRate(This,plFrameRate) ) 

#define IWMPNetwork_get_framesSkipped(This,plFrames)	\
    ( (This)->lpVtbl -> get_framesSkipped(This,plFrames) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPNetwork_INTERFACE_DEFINED__ */


#ifndef __IWMPCore_INTERFACE_DEFINED__
#define __IWMPCore_INTERFACE_DEFINED__

/* interface IWMPCore */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPCore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D84CCA99-CCE2-11d2-9ECC-0000F8085981")
    IWMPCore : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE close( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_URL( 
            /* [retval][out] */ BSTR *pbstrURL) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_URL( 
            /* [in] */ BSTR bstrURL) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_openState( 
            /* [retval][out] */ WMPOpenState *pwmpos) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_playState( 
            /* [retval][out] */ WMPPlayState *pwmpps) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_controls( 
            /* [retval][out] */ IWMPControls **ppControl) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_settings( 
            /* [retval][out] */ IWMPSettings **ppSettings) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentMedia( 
            /* [retval][out] */ IWMPMedia **ppMedia) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_currentMedia( 
            /* [in] */ IWMPMedia *pMedia) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_mediaCollection( 
            /* [retval][out] */ IWMPMediaCollection **ppMediaCollection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_playlistCollection( 
            /* [retval][out] */ IWMPPlaylistCollection **ppPlaylistCollection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_versionInfo( 
            /* [retval][out] */ BSTR *pbstrVersionInfo) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE launchURL( 
            /* [in] */ BSTR bstrURL) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_network( 
            /* [retval][out] */ IWMPNetwork **ppQNI) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentPlaylist( 
            /* [retval][out] */ IWMPPlaylist **ppPL) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_currentPlaylist( 
            /* [in] */ IWMPPlaylist *pPL) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_cdromCollection( 
            /* [retval][out] */ IWMPCdromCollection **ppCdromCollection) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_closedCaption( 
            /* [retval][out] */ IWMPClosedCaption **ppClosedCaption) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_isOnline( 
            /* [retval][out] */ VARIANT_BOOL *pfOnline) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_error( 
            /* [retval][out] */ IWMPError **ppError) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [retval][out] */ BSTR *pbstrStatus) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPCoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPCore * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPCore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPCore * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPCore * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPCore * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPCore * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPCore * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IWMPCore * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWMPCore * This,
            /* [retval][out] */ BSTR *pbstrURL);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IWMPCore * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_openState )( 
            IWMPCore * This,
            /* [retval][out] */ WMPOpenState *pwmpos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playState )( 
            IWMPCore * This,
            /* [retval][out] */ WMPPlayState *pwmpps);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_controls )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPControls **ppControl);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_settings )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPSettings **ppSettings);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMedia )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMedia )( 
            IWMPCore * This,
            /* [in] */ IWMPMedia *pMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mediaCollection )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPMediaCollection **ppMediaCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playlistCollection )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPPlaylistCollection **ppPlaylistCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_versionInfo )( 
            IWMPCore * This,
            /* [retval][out] */ BSTR *pbstrVersionInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *launchURL )( 
            IWMPCore * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_network )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPNetwork **ppQNI);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPlaylist )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPPlaylist **ppPL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPlaylist )( 
            IWMPCore * This,
            /* [in] */ IWMPPlaylist *pPL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_cdromCollection )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPCdromCollection **ppCdromCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_closedCaption )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPClosedCaption **ppClosedCaption);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isOnline )( 
            IWMPCore * This,
            /* [retval][out] */ VARIANT_BOOL *pfOnline);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPCore * This,
            /* [retval][out] */ IWMPError **ppError);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPCore * This,
            /* [retval][out] */ BSTR *pbstrStatus);
        
        END_INTERFACE
    } IWMPCoreVtbl;

    interface IWMPCore
    {
        CONST_VTBL struct IWMPCoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPCore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPCore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPCore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPCore_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPCore_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPCore_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPCore_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPCore_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IWMPCore_get_URL(This,pbstrURL)	\
    ( (This)->lpVtbl -> get_URL(This,pbstrURL) ) 

#define IWMPCore_put_URL(This,bstrURL)	\
    ( (This)->lpVtbl -> put_URL(This,bstrURL) ) 

#define IWMPCore_get_openState(This,pwmpos)	\
    ( (This)->lpVtbl -> get_openState(This,pwmpos) ) 

#define IWMPCore_get_playState(This,pwmpps)	\
    ( (This)->lpVtbl -> get_playState(This,pwmpps) ) 

#define IWMPCore_get_controls(This,ppControl)	\
    ( (This)->lpVtbl -> get_controls(This,ppControl) ) 

#define IWMPCore_get_settings(This,ppSettings)	\
    ( (This)->lpVtbl -> get_settings(This,ppSettings) ) 

#define IWMPCore_get_currentMedia(This,ppMedia)	\
    ( (This)->lpVtbl -> get_currentMedia(This,ppMedia) ) 

#define IWMPCore_put_currentMedia(This,pMedia)	\
    ( (This)->lpVtbl -> put_currentMedia(This,pMedia) ) 

#define IWMPCore_get_mediaCollection(This,ppMediaCollection)	\
    ( (This)->lpVtbl -> get_mediaCollection(This,ppMediaCollection) ) 

#define IWMPCore_get_playlistCollection(This,ppPlaylistCollection)	\
    ( (This)->lpVtbl -> get_playlistCollection(This,ppPlaylistCollection) ) 

#define IWMPCore_get_versionInfo(This,pbstrVersionInfo)	\
    ( (This)->lpVtbl -> get_versionInfo(This,pbstrVersionInfo) ) 

#define IWMPCore_launchURL(This,bstrURL)	\
    ( (This)->lpVtbl -> launchURL(This,bstrURL) ) 

#define IWMPCore_get_network(This,ppQNI)	\
    ( (This)->lpVtbl -> get_network(This,ppQNI) ) 

#define IWMPCore_get_currentPlaylist(This,ppPL)	\
    ( (This)->lpVtbl -> get_currentPlaylist(This,ppPL) ) 

#define IWMPCore_put_currentPlaylist(This,pPL)	\
    ( (This)->lpVtbl -> put_currentPlaylist(This,pPL) ) 

#define IWMPCore_get_cdromCollection(This,ppCdromCollection)	\
    ( (This)->lpVtbl -> get_cdromCollection(This,ppCdromCollection) ) 

#define IWMPCore_get_closedCaption(This,ppClosedCaption)	\
    ( (This)->lpVtbl -> get_closedCaption(This,ppClosedCaption) ) 

#define IWMPCore_get_isOnline(This,pfOnline)	\
    ( (This)->lpVtbl -> get_isOnline(This,pfOnline) ) 

#define IWMPCore_get_error(This,ppError)	\
    ( (This)->lpVtbl -> get_error(This,ppError) ) 

#define IWMPCore_get_status(This,pbstrStatus)	\
    ( (This)->lpVtbl -> get_status(This,pbstrStatus) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPCore_INTERFACE_DEFINED__ */


#ifndef __IWMPPlayer_INTERFACE_DEFINED__
#define __IWMPPlayer_INTERFACE_DEFINED__

/* interface IWMPPlayer */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlayer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6BF52A4F-394A-11d3-B153-00C04F79FAA6")
    IWMPPlayer : public IWMPCore
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enabled( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_fullScreen( 
            /* [retval][out] */ VARIANT_BOOL *pbFullScreen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_fullScreen( 
            VARIANT_BOOL bFullScreen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enableContextMenu( 
            /* [retval][out] */ VARIANT_BOOL *pbEnableContextMenu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enableContextMenu( 
            VARIANT_BOOL bEnableContextMenu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_uiMode( 
            /* [in] */ BSTR bstrMode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_uiMode( 
            /* [retval][out] */ BSTR *pbstrMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlayer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlayer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlayer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPPlayer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPPlayer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPPlayer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPPlayer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IWMPPlayer * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWMPPlayer * This,
            /* [retval][out] */ BSTR *pbstrURL);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IWMPPlayer * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_openState )( 
            IWMPPlayer * This,
            /* [retval][out] */ WMPOpenState *pwmpos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playState )( 
            IWMPPlayer * This,
            /* [retval][out] */ WMPPlayState *pwmpps);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_controls )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPControls **ppControl);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_settings )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPSettings **ppSettings);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMedia )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMedia )( 
            IWMPPlayer * This,
            /* [in] */ IWMPMedia *pMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mediaCollection )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPMediaCollection **ppMediaCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playlistCollection )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPPlaylistCollection **ppPlaylistCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_versionInfo )( 
            IWMPPlayer * This,
            /* [retval][out] */ BSTR *pbstrVersionInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *launchURL )( 
            IWMPPlayer * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_network )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPNetwork **ppQNI);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPlaylist )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPPlaylist **ppPL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPlaylist )( 
            IWMPPlayer * This,
            /* [in] */ IWMPPlaylist *pPL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_cdromCollection )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPCdromCollection **ppCdromCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_closedCaption )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPClosedCaption **ppClosedCaption);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isOnline )( 
            IWMPPlayer * This,
            /* [retval][out] */ VARIANT_BOOL *pfOnline);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPPlayer * This,
            /* [retval][out] */ IWMPError **ppError);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPPlayer * This,
            /* [retval][out] */ BSTR *pbstrStatus);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enabled )( 
            IWMPPlayer * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enabled )( 
            IWMPPlayer * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_fullScreen )( 
            IWMPPlayer * This,
            /* [retval][out] */ VARIANT_BOOL *pbFullScreen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_fullScreen )( 
            IWMPPlayer * This,
            VARIANT_BOOL bFullScreen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enableContextMenu )( 
            IWMPPlayer * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnableContextMenu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enableContextMenu )( 
            IWMPPlayer * This,
            VARIANT_BOOL bEnableContextMenu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_uiMode )( 
            IWMPPlayer * This,
            /* [in] */ BSTR bstrMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_uiMode )( 
            IWMPPlayer * This,
            /* [retval][out] */ BSTR *pbstrMode);
        
        END_INTERFACE
    } IWMPPlayerVtbl;

    interface IWMPPlayer
    {
        CONST_VTBL struct IWMPPlayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlayer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlayer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlayer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlayer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPPlayer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPPlayer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPPlayer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPPlayer_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IWMPPlayer_get_URL(This,pbstrURL)	\
    ( (This)->lpVtbl -> get_URL(This,pbstrURL) ) 

#define IWMPPlayer_put_URL(This,bstrURL)	\
    ( (This)->lpVtbl -> put_URL(This,bstrURL) ) 

#define IWMPPlayer_get_openState(This,pwmpos)	\
    ( (This)->lpVtbl -> get_openState(This,pwmpos) ) 

#define IWMPPlayer_get_playState(This,pwmpps)	\
    ( (This)->lpVtbl -> get_playState(This,pwmpps) ) 

#define IWMPPlayer_get_controls(This,ppControl)	\
    ( (This)->lpVtbl -> get_controls(This,ppControl) ) 

#define IWMPPlayer_get_settings(This,ppSettings)	\
    ( (This)->lpVtbl -> get_settings(This,ppSettings) ) 

#define IWMPPlayer_get_currentMedia(This,ppMedia)	\
    ( (This)->lpVtbl -> get_currentMedia(This,ppMedia) ) 

#define IWMPPlayer_put_currentMedia(This,pMedia)	\
    ( (This)->lpVtbl -> put_currentMedia(This,pMedia) ) 

#define IWMPPlayer_get_mediaCollection(This,ppMediaCollection)	\
    ( (This)->lpVtbl -> get_mediaCollection(This,ppMediaCollection) ) 

#define IWMPPlayer_get_playlistCollection(This,ppPlaylistCollection)	\
    ( (This)->lpVtbl -> get_playlistCollection(This,ppPlaylistCollection) ) 

#define IWMPPlayer_get_versionInfo(This,pbstrVersionInfo)	\
    ( (This)->lpVtbl -> get_versionInfo(This,pbstrVersionInfo) ) 

#define IWMPPlayer_launchURL(This,bstrURL)	\
    ( (This)->lpVtbl -> launchURL(This,bstrURL) ) 

#define IWMPPlayer_get_network(This,ppQNI)	\
    ( (This)->lpVtbl -> get_network(This,ppQNI) ) 

#define IWMPPlayer_get_currentPlaylist(This,ppPL)	\
    ( (This)->lpVtbl -> get_currentPlaylist(This,ppPL) ) 

#define IWMPPlayer_put_currentPlaylist(This,pPL)	\
    ( (This)->lpVtbl -> put_currentPlaylist(This,pPL) ) 

#define IWMPPlayer_get_cdromCollection(This,ppCdromCollection)	\
    ( (This)->lpVtbl -> get_cdromCollection(This,ppCdromCollection) ) 

#define IWMPPlayer_get_closedCaption(This,ppClosedCaption)	\
    ( (This)->lpVtbl -> get_closedCaption(This,ppClosedCaption) ) 

#define IWMPPlayer_get_isOnline(This,pfOnline)	\
    ( (This)->lpVtbl -> get_isOnline(This,pfOnline) ) 

#define IWMPPlayer_get_error(This,ppError)	\
    ( (This)->lpVtbl -> get_error(This,ppError) ) 

#define IWMPPlayer_get_status(This,pbstrStatus)	\
    ( (This)->lpVtbl -> get_status(This,pbstrStatus) ) 


#define IWMPPlayer_get_enabled(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_enabled(This,pbEnabled) ) 

#define IWMPPlayer_put_enabled(This,bEnabled)	\
    ( (This)->lpVtbl -> put_enabled(This,bEnabled) ) 

#define IWMPPlayer_get_fullScreen(This,pbFullScreen)	\
    ( (This)->lpVtbl -> get_fullScreen(This,pbFullScreen) ) 

#define IWMPPlayer_put_fullScreen(This,bFullScreen)	\
    ( (This)->lpVtbl -> put_fullScreen(This,bFullScreen) ) 

#define IWMPPlayer_get_enableContextMenu(This,pbEnableContextMenu)	\
    ( (This)->lpVtbl -> get_enableContextMenu(This,pbEnableContextMenu) ) 

#define IWMPPlayer_put_enableContextMenu(This,bEnableContextMenu)	\
    ( (This)->lpVtbl -> put_enableContextMenu(This,bEnableContextMenu) ) 

#define IWMPPlayer_put_uiMode(This,bstrMode)	\
    ( (This)->lpVtbl -> put_uiMode(This,bstrMode) ) 

#define IWMPPlayer_get_uiMode(This,pbstrMode)	\
    ( (This)->lpVtbl -> get_uiMode(This,pbstrMode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlayer_INTERFACE_DEFINED__ */


#ifndef __IWMPPlayer2_INTERFACE_DEFINED__
#define __IWMPPlayer2_INTERFACE_DEFINED__

/* interface IWMPPlayer2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlayer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0E6B01D1-D407-4c85-BF5F-1C01F6150280")
    IWMPPlayer2 : public IWMPCore
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enabled( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_fullScreen( 
            /* [retval][out] */ VARIANT_BOOL *pbFullScreen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_fullScreen( 
            VARIANT_BOOL bFullScreen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enableContextMenu( 
            /* [retval][out] */ VARIANT_BOOL *pbEnableContextMenu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enableContextMenu( 
            VARIANT_BOOL bEnableContextMenu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_uiMode( 
            /* [in] */ BSTR bstrMode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_uiMode( 
            /* [retval][out] */ BSTR *pbstrMode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_stretchToFit( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_stretchToFit( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_windowlessVideo( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_windowlessVideo( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlayer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlayer2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlayer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlayer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPPlayer2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPPlayer2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPPlayer2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPPlayer2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IWMPPlayer2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ BSTR *pbstrURL);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IWMPPlayer2 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_openState )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ WMPOpenState *pwmpos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playState )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ WMPPlayState *pwmpps);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_controls )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPControls **ppControl);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_settings )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPSettings **ppSettings);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMedia )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMedia )( 
            IWMPPlayer2 * This,
            /* [in] */ IWMPMedia *pMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mediaCollection )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPMediaCollection **ppMediaCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playlistCollection )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPPlaylistCollection **ppPlaylistCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_versionInfo )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ BSTR *pbstrVersionInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *launchURL )( 
            IWMPPlayer2 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_network )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPNetwork **ppQNI);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPlaylist )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPPlaylist **ppPL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPlaylist )( 
            IWMPPlayer2 * This,
            /* [in] */ IWMPPlaylist *pPL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_cdromCollection )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPCdromCollection **ppCdromCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_closedCaption )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPClosedCaption **ppClosedCaption);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isOnline )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfOnline);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ IWMPError **ppError);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ BSTR *pbstrStatus);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enabled )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enabled )( 
            IWMPPlayer2 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_fullScreen )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ VARIANT_BOOL *pbFullScreen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_fullScreen )( 
            IWMPPlayer2 * This,
            VARIANT_BOOL bFullScreen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enableContextMenu )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnableContextMenu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enableContextMenu )( 
            IWMPPlayer2 * This,
            VARIANT_BOOL bEnableContextMenu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_uiMode )( 
            IWMPPlayer2 * This,
            /* [in] */ BSTR bstrMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_uiMode )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ BSTR *pbstrMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_stretchToFit )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_stretchToFit )( 
            IWMPPlayer2 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_windowlessVideo )( 
            IWMPPlayer2 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_windowlessVideo )( 
            IWMPPlayer2 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        END_INTERFACE
    } IWMPPlayer2Vtbl;

    interface IWMPPlayer2
    {
        CONST_VTBL struct IWMPPlayer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlayer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlayer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlayer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlayer2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPPlayer2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPPlayer2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPPlayer2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPPlayer2_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IWMPPlayer2_get_URL(This,pbstrURL)	\
    ( (This)->lpVtbl -> get_URL(This,pbstrURL) ) 

#define IWMPPlayer2_put_URL(This,bstrURL)	\
    ( (This)->lpVtbl -> put_URL(This,bstrURL) ) 

#define IWMPPlayer2_get_openState(This,pwmpos)	\
    ( (This)->lpVtbl -> get_openState(This,pwmpos) ) 

#define IWMPPlayer2_get_playState(This,pwmpps)	\
    ( (This)->lpVtbl -> get_playState(This,pwmpps) ) 

#define IWMPPlayer2_get_controls(This,ppControl)	\
    ( (This)->lpVtbl -> get_controls(This,ppControl) ) 

#define IWMPPlayer2_get_settings(This,ppSettings)	\
    ( (This)->lpVtbl -> get_settings(This,ppSettings) ) 

#define IWMPPlayer2_get_currentMedia(This,ppMedia)	\
    ( (This)->lpVtbl -> get_currentMedia(This,ppMedia) ) 

#define IWMPPlayer2_put_currentMedia(This,pMedia)	\
    ( (This)->lpVtbl -> put_currentMedia(This,pMedia) ) 

#define IWMPPlayer2_get_mediaCollection(This,ppMediaCollection)	\
    ( (This)->lpVtbl -> get_mediaCollection(This,ppMediaCollection) ) 

#define IWMPPlayer2_get_playlistCollection(This,ppPlaylistCollection)	\
    ( (This)->lpVtbl -> get_playlistCollection(This,ppPlaylistCollection) ) 

#define IWMPPlayer2_get_versionInfo(This,pbstrVersionInfo)	\
    ( (This)->lpVtbl -> get_versionInfo(This,pbstrVersionInfo) ) 

#define IWMPPlayer2_launchURL(This,bstrURL)	\
    ( (This)->lpVtbl -> launchURL(This,bstrURL) ) 

#define IWMPPlayer2_get_network(This,ppQNI)	\
    ( (This)->lpVtbl -> get_network(This,ppQNI) ) 

#define IWMPPlayer2_get_currentPlaylist(This,ppPL)	\
    ( (This)->lpVtbl -> get_currentPlaylist(This,ppPL) ) 

#define IWMPPlayer2_put_currentPlaylist(This,pPL)	\
    ( (This)->lpVtbl -> put_currentPlaylist(This,pPL) ) 

#define IWMPPlayer2_get_cdromCollection(This,ppCdromCollection)	\
    ( (This)->lpVtbl -> get_cdromCollection(This,ppCdromCollection) ) 

#define IWMPPlayer2_get_closedCaption(This,ppClosedCaption)	\
    ( (This)->lpVtbl -> get_closedCaption(This,ppClosedCaption) ) 

#define IWMPPlayer2_get_isOnline(This,pfOnline)	\
    ( (This)->lpVtbl -> get_isOnline(This,pfOnline) ) 

#define IWMPPlayer2_get_error(This,ppError)	\
    ( (This)->lpVtbl -> get_error(This,ppError) ) 

#define IWMPPlayer2_get_status(This,pbstrStatus)	\
    ( (This)->lpVtbl -> get_status(This,pbstrStatus) ) 


#define IWMPPlayer2_get_enabled(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_enabled(This,pbEnabled) ) 

#define IWMPPlayer2_put_enabled(This,bEnabled)	\
    ( (This)->lpVtbl -> put_enabled(This,bEnabled) ) 

#define IWMPPlayer2_get_fullScreen(This,pbFullScreen)	\
    ( (This)->lpVtbl -> get_fullScreen(This,pbFullScreen) ) 

#define IWMPPlayer2_put_fullScreen(This,bFullScreen)	\
    ( (This)->lpVtbl -> put_fullScreen(This,bFullScreen) ) 

#define IWMPPlayer2_get_enableContextMenu(This,pbEnableContextMenu)	\
    ( (This)->lpVtbl -> get_enableContextMenu(This,pbEnableContextMenu) ) 

#define IWMPPlayer2_put_enableContextMenu(This,bEnableContextMenu)	\
    ( (This)->lpVtbl -> put_enableContextMenu(This,bEnableContextMenu) ) 

#define IWMPPlayer2_put_uiMode(This,bstrMode)	\
    ( (This)->lpVtbl -> put_uiMode(This,bstrMode) ) 

#define IWMPPlayer2_get_uiMode(This,pbstrMode)	\
    ( (This)->lpVtbl -> get_uiMode(This,pbstrMode) ) 

#define IWMPPlayer2_get_stretchToFit(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_stretchToFit(This,pbEnabled) ) 

#define IWMPPlayer2_put_stretchToFit(This,bEnabled)	\
    ( (This)->lpVtbl -> put_stretchToFit(This,bEnabled) ) 

#define IWMPPlayer2_get_windowlessVideo(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_windowlessVideo(This,pbEnabled) ) 

#define IWMPPlayer2_put_windowlessVideo(This,bEnabled)	\
    ( (This)->lpVtbl -> put_windowlessVideo(This,bEnabled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlayer2_INTERFACE_DEFINED__ */


#ifndef __IWMPMedia2_INTERFACE_DEFINED__
#define __IWMPMedia2_INTERFACE_DEFINED__

/* interface IWMPMedia2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPMedia2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AB7C88BB-143E-4ea4-ACC3-E4350B2106C3")
    IWMPMedia2 : public IWMPMedia
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_error( 
            /* [retval][out] */ IWMPErrorItem **ppIWMPErrorItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPMedia2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPMedia2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPMedia2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPMedia2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPMedia2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPMedia2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPMedia2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPMedia2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isIdentical )( 
            IWMPMedia2 * This,
            /* [in] */ IWMPMedia *pIWMPMedia,
            /* [retval][out] */ VARIANT_BOOL *pvbool);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_sourceURL )( 
            IWMPMedia2 * This,
            /* [retval][out] */ BSTR *pbstrSourceURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IWMPMedia2 * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IWMPMedia2 * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_imageSourceWidth )( 
            IWMPMedia2 * This,
            /* [retval][out] */ long *pWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_imageSourceHeight )( 
            IWMPMedia2 * This,
            /* [retval][out] */ long *pHeight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_markerCount )( 
            IWMPMedia2 * This,
            /* [retval][out] */ long *pMarkerCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMarkerTime )( 
            IWMPMedia2 * This,
            /* [in] */ long MarkerNum,
            /* [retval][out] */ double *pMarkerTime);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMarkerName )( 
            IWMPMedia2 * This,
            /* [in] */ long MarkerNum,
            /* [retval][out] */ BSTR *pbstrMarkerName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_duration )( 
            IWMPMedia2 * This,
            /* [retval][out] */ double *pDuration);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_durationString )( 
            IWMPMedia2 * This,
            /* [retval][out] */ BSTR *pbstrDuration);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_attributeCount )( 
            IWMPMedia2 * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeName )( 
            IWMPMedia2 * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrItemName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfo )( 
            IWMPMedia2 * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setItemInfo )( 
            IWMPMedia2 * This,
            /* [in] */ BSTR bstrItemName,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfoByAtom )( 
            IWMPMedia2 * This,
            /* [in] */ long lAtom,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isMemberOf )( 
            IWMPMedia2 * This,
            /* [in] */ IWMPPlaylist *pPlaylist,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsMemberOf);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isReadOnlyItem )( 
            IWMPMedia2 * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPMedia2 * This,
            /* [retval][out] */ IWMPErrorItem **ppIWMPErrorItem);
        
        END_INTERFACE
    } IWMPMedia2Vtbl;

    interface IWMPMedia2
    {
        CONST_VTBL struct IWMPMedia2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPMedia2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPMedia2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPMedia2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPMedia2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPMedia2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPMedia2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPMedia2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPMedia2_get_isIdentical(This,pIWMPMedia,pvbool)	\
    ( (This)->lpVtbl -> get_isIdentical(This,pIWMPMedia,pvbool) ) 

#define IWMPMedia2_get_sourceURL(This,pbstrSourceURL)	\
    ( (This)->lpVtbl -> get_sourceURL(This,pbstrSourceURL) ) 

#define IWMPMedia2_get_name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_name(This,pbstrName) ) 

#define IWMPMedia2_put_name(This,bstrName)	\
    ( (This)->lpVtbl -> put_name(This,bstrName) ) 

#define IWMPMedia2_get_imageSourceWidth(This,pWidth)	\
    ( (This)->lpVtbl -> get_imageSourceWidth(This,pWidth) ) 

#define IWMPMedia2_get_imageSourceHeight(This,pHeight)	\
    ( (This)->lpVtbl -> get_imageSourceHeight(This,pHeight) ) 

#define IWMPMedia2_get_markerCount(This,pMarkerCount)	\
    ( (This)->lpVtbl -> get_markerCount(This,pMarkerCount) ) 

#define IWMPMedia2_getMarkerTime(This,MarkerNum,pMarkerTime)	\
    ( (This)->lpVtbl -> getMarkerTime(This,MarkerNum,pMarkerTime) ) 

#define IWMPMedia2_getMarkerName(This,MarkerNum,pbstrMarkerName)	\
    ( (This)->lpVtbl -> getMarkerName(This,MarkerNum,pbstrMarkerName) ) 

#define IWMPMedia2_get_duration(This,pDuration)	\
    ( (This)->lpVtbl -> get_duration(This,pDuration) ) 

#define IWMPMedia2_get_durationString(This,pbstrDuration)	\
    ( (This)->lpVtbl -> get_durationString(This,pbstrDuration) ) 

#define IWMPMedia2_get_attributeCount(This,plCount)	\
    ( (This)->lpVtbl -> get_attributeCount(This,plCount) ) 

#define IWMPMedia2_getAttributeName(This,lIndex,pbstrItemName)	\
    ( (This)->lpVtbl -> getAttributeName(This,lIndex,pbstrItemName) ) 

#define IWMPMedia2_getItemInfo(This,bstrItemName,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfo(This,bstrItemName,pbstrVal) ) 

#define IWMPMedia2_setItemInfo(This,bstrItemName,bstrVal)	\
    ( (This)->lpVtbl -> setItemInfo(This,bstrItemName,bstrVal) ) 

#define IWMPMedia2_getItemInfoByAtom(This,lAtom,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfoByAtom(This,lAtom,pbstrVal) ) 

#define IWMPMedia2_isMemberOf(This,pPlaylist,pvarfIsMemberOf)	\
    ( (This)->lpVtbl -> isMemberOf(This,pPlaylist,pvarfIsMemberOf) ) 

#define IWMPMedia2_isReadOnlyItem(This,bstrItemName,pvarfIsReadOnly)	\
    ( (This)->lpVtbl -> isReadOnlyItem(This,bstrItemName,pvarfIsReadOnly) ) 


#define IWMPMedia2_get_error(This,ppIWMPErrorItem)	\
    ( (This)->lpVtbl -> get_error(This,ppIWMPErrorItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPMedia2_INTERFACE_DEFINED__ */


#ifndef __IWMPControls2_INTERFACE_DEFINED__
#define __IWMPControls2_INTERFACE_DEFINED__

/* interface IWMPControls2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPControls2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6F030D25-0890-480f-9775-1F7E40AB5B8E")
    IWMPControls2 : public IWMPControls
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE step( 
            /* [in] */ long lStep) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPControls2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPControls2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPControls2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPControls2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPControls2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPControls2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPControls2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPControls2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isAvailable )( 
            IWMPControls2 * This,
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *play )( 
            IWMPControls2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *stop )( 
            IWMPControls2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *pause )( 
            IWMPControls2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *fastForward )( 
            IWMPControls2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *fastReverse )( 
            IWMPControls2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPosition )( 
            IWMPControls2 * This,
            /* [retval][out] */ double *pdCurrentPosition);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPosition )( 
            IWMPControls2 * This,
            /* [in] */ double dCurrentPosition);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPositionString )( 
            IWMPControls2 * This,
            /* [retval][out] */ BSTR *pbstrCurrentPosition);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *next )( 
            IWMPControls2 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *previous )( 
            IWMPControls2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentItem )( 
            IWMPControls2 * This,
            /* [retval][out] */ IWMPMedia **ppIWMPMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentItem )( 
            IWMPControls2 * This,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMarker )( 
            IWMPControls2 * This,
            /* [retval][out] */ long *plMarker);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMarker )( 
            IWMPControls2 * This,
            /* [in] */ long lMarker);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *playItem )( 
            IWMPControls2 * This,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *step )( 
            IWMPControls2 * This,
            /* [in] */ long lStep);
        
        END_INTERFACE
    } IWMPControls2Vtbl;

    interface IWMPControls2
    {
        CONST_VTBL struct IWMPControls2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPControls2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPControls2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPControls2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPControls2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPControls2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPControls2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPControls2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPControls2_get_isAvailable(This,bstrItem,pIsAvailable)	\
    ( (This)->lpVtbl -> get_isAvailable(This,bstrItem,pIsAvailable) ) 

#define IWMPControls2_play(This)	\
    ( (This)->lpVtbl -> play(This) ) 

#define IWMPControls2_stop(This)	\
    ( (This)->lpVtbl -> stop(This) ) 

#define IWMPControls2_pause(This)	\
    ( (This)->lpVtbl -> pause(This) ) 

#define IWMPControls2_fastForward(This)	\
    ( (This)->lpVtbl -> fastForward(This) ) 

#define IWMPControls2_fastReverse(This)	\
    ( (This)->lpVtbl -> fastReverse(This) ) 

#define IWMPControls2_get_currentPosition(This,pdCurrentPosition)	\
    ( (This)->lpVtbl -> get_currentPosition(This,pdCurrentPosition) ) 

#define IWMPControls2_put_currentPosition(This,dCurrentPosition)	\
    ( (This)->lpVtbl -> put_currentPosition(This,dCurrentPosition) ) 

#define IWMPControls2_get_currentPositionString(This,pbstrCurrentPosition)	\
    ( (This)->lpVtbl -> get_currentPositionString(This,pbstrCurrentPosition) ) 

#define IWMPControls2_next(This)	\
    ( (This)->lpVtbl -> next(This) ) 

#define IWMPControls2_previous(This)	\
    ( (This)->lpVtbl -> previous(This) ) 

#define IWMPControls2_get_currentItem(This,ppIWMPMedia)	\
    ( (This)->lpVtbl -> get_currentItem(This,ppIWMPMedia) ) 

#define IWMPControls2_put_currentItem(This,pIWMPMedia)	\
    ( (This)->lpVtbl -> put_currentItem(This,pIWMPMedia) ) 

#define IWMPControls2_get_currentMarker(This,plMarker)	\
    ( (This)->lpVtbl -> get_currentMarker(This,plMarker) ) 

#define IWMPControls2_put_currentMarker(This,lMarker)	\
    ( (This)->lpVtbl -> put_currentMarker(This,lMarker) ) 

#define IWMPControls2_playItem(This,pIWMPMedia)	\
    ( (This)->lpVtbl -> playItem(This,pIWMPMedia) ) 


#define IWMPControls2_step(This,lStep)	\
    ( (This)->lpVtbl -> step(This,lStep) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPControls2_INTERFACE_DEFINED__ */


#ifndef __IWMPDVD_INTERFACE_DEFINED__
#define __IWMPDVD_INTERFACE_DEFINED__

/* interface IWMPDVD */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPDVD;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8DA61686-4668-4a5c-AE5D-803193293DBE")
    IWMPDVD : public IDispatch
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_isAvailable( 
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_domain( 
            /* [retval][out] */ BSTR *strDomain) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE topMenu( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE titleMenu( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE back( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE resume( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPDVDVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPDVD * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPDVD * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPDVD * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPDVD * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPDVD * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPDVD * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPDVD * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isAvailable )( 
            IWMPDVD * This,
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_domain )( 
            IWMPDVD * This,
            /* [retval][out] */ BSTR *strDomain);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *topMenu )( 
            IWMPDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *titleMenu )( 
            IWMPDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *back )( 
            IWMPDVD * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *resume )( 
            IWMPDVD * This);
        
        END_INTERFACE
    } IWMPDVDVtbl;

    interface IWMPDVD
    {
        CONST_VTBL struct IWMPDVDVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPDVD_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPDVD_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPDVD_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPDVD_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPDVD_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPDVD_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPDVD_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPDVD_get_isAvailable(This,bstrItem,pIsAvailable)	\
    ( (This)->lpVtbl -> get_isAvailable(This,bstrItem,pIsAvailable) ) 

#define IWMPDVD_get_domain(This,strDomain)	\
    ( (This)->lpVtbl -> get_domain(This,strDomain) ) 

#define IWMPDVD_topMenu(This)	\
    ( (This)->lpVtbl -> topMenu(This) ) 

#define IWMPDVD_titleMenu(This)	\
    ( (This)->lpVtbl -> titleMenu(This) ) 

#define IWMPDVD_back(This)	\
    ( (This)->lpVtbl -> back(This) ) 

#define IWMPDVD_resume(This)	\
    ( (This)->lpVtbl -> resume(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPDVD_INTERFACE_DEFINED__ */


#ifndef __IWMPCore2_INTERFACE_DEFINED__
#define __IWMPCore2_INTERFACE_DEFINED__

/* interface IWMPCore2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPCore2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BC17E5B7-7561-4c18-BB90-17D485775659")
    IWMPCore2 : public IWMPCore
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_dvd( 
            /* [retval][out] */ IWMPDVD **ppDVD) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPCore2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPCore2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPCore2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPCore2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPCore2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPCore2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPCore2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPCore2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IWMPCore2 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWMPCore2 * This,
            /* [retval][out] */ BSTR *pbstrURL);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IWMPCore2 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_openState )( 
            IWMPCore2 * This,
            /* [retval][out] */ WMPOpenState *pwmpos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playState )( 
            IWMPCore2 * This,
            /* [retval][out] */ WMPPlayState *pwmpps);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_controls )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPControls **ppControl);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_settings )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPSettings **ppSettings);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMedia )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMedia )( 
            IWMPCore2 * This,
            /* [in] */ IWMPMedia *pMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mediaCollection )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPMediaCollection **ppMediaCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playlistCollection )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPPlaylistCollection **ppPlaylistCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_versionInfo )( 
            IWMPCore2 * This,
            /* [retval][out] */ BSTR *pbstrVersionInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *launchURL )( 
            IWMPCore2 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_network )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPNetwork **ppQNI);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPlaylist )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPPlaylist **ppPL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPlaylist )( 
            IWMPCore2 * This,
            /* [in] */ IWMPPlaylist *pPL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_cdromCollection )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPCdromCollection **ppCdromCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_closedCaption )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPClosedCaption **ppClosedCaption);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isOnline )( 
            IWMPCore2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfOnline);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPError **ppError);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPCore2 * This,
            /* [retval][out] */ BSTR *pbstrStatus);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_dvd )( 
            IWMPCore2 * This,
            /* [retval][out] */ IWMPDVD **ppDVD);
        
        END_INTERFACE
    } IWMPCore2Vtbl;

    interface IWMPCore2
    {
        CONST_VTBL struct IWMPCore2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPCore2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPCore2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPCore2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPCore2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPCore2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPCore2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPCore2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPCore2_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IWMPCore2_get_URL(This,pbstrURL)	\
    ( (This)->lpVtbl -> get_URL(This,pbstrURL) ) 

#define IWMPCore2_put_URL(This,bstrURL)	\
    ( (This)->lpVtbl -> put_URL(This,bstrURL) ) 

#define IWMPCore2_get_openState(This,pwmpos)	\
    ( (This)->lpVtbl -> get_openState(This,pwmpos) ) 

#define IWMPCore2_get_playState(This,pwmpps)	\
    ( (This)->lpVtbl -> get_playState(This,pwmpps) ) 

#define IWMPCore2_get_controls(This,ppControl)	\
    ( (This)->lpVtbl -> get_controls(This,ppControl) ) 

#define IWMPCore2_get_settings(This,ppSettings)	\
    ( (This)->lpVtbl -> get_settings(This,ppSettings) ) 

#define IWMPCore2_get_currentMedia(This,ppMedia)	\
    ( (This)->lpVtbl -> get_currentMedia(This,ppMedia) ) 

#define IWMPCore2_put_currentMedia(This,pMedia)	\
    ( (This)->lpVtbl -> put_currentMedia(This,pMedia) ) 

#define IWMPCore2_get_mediaCollection(This,ppMediaCollection)	\
    ( (This)->lpVtbl -> get_mediaCollection(This,ppMediaCollection) ) 

#define IWMPCore2_get_playlistCollection(This,ppPlaylistCollection)	\
    ( (This)->lpVtbl -> get_playlistCollection(This,ppPlaylistCollection) ) 

#define IWMPCore2_get_versionInfo(This,pbstrVersionInfo)	\
    ( (This)->lpVtbl -> get_versionInfo(This,pbstrVersionInfo) ) 

#define IWMPCore2_launchURL(This,bstrURL)	\
    ( (This)->lpVtbl -> launchURL(This,bstrURL) ) 

#define IWMPCore2_get_network(This,ppQNI)	\
    ( (This)->lpVtbl -> get_network(This,ppQNI) ) 

#define IWMPCore2_get_currentPlaylist(This,ppPL)	\
    ( (This)->lpVtbl -> get_currentPlaylist(This,ppPL) ) 

#define IWMPCore2_put_currentPlaylist(This,pPL)	\
    ( (This)->lpVtbl -> put_currentPlaylist(This,pPL) ) 

#define IWMPCore2_get_cdromCollection(This,ppCdromCollection)	\
    ( (This)->lpVtbl -> get_cdromCollection(This,ppCdromCollection) ) 

#define IWMPCore2_get_closedCaption(This,ppClosedCaption)	\
    ( (This)->lpVtbl -> get_closedCaption(This,ppClosedCaption) ) 

#define IWMPCore2_get_isOnline(This,pfOnline)	\
    ( (This)->lpVtbl -> get_isOnline(This,pfOnline) ) 

#define IWMPCore2_get_error(This,ppError)	\
    ( (This)->lpVtbl -> get_error(This,ppError) ) 

#define IWMPCore2_get_status(This,pbstrStatus)	\
    ( (This)->lpVtbl -> get_status(This,pbstrStatus) ) 


#define IWMPCore2_get_dvd(This,ppDVD)	\
    ( (This)->lpVtbl -> get_dvd(This,ppDVD) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPCore2_INTERFACE_DEFINED__ */


#ifndef __IWMPPlayer3_INTERFACE_DEFINED__
#define __IWMPPlayer3_INTERFACE_DEFINED__

/* interface IWMPPlayer3 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlayer3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("54062B68-052A-4c25-A39F-8B63346511D4")
    IWMPPlayer3 : public IWMPCore2
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enabled( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_fullScreen( 
            /* [retval][out] */ VARIANT_BOOL *pbFullScreen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_fullScreen( 
            VARIANT_BOOL bFullScreen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enableContextMenu( 
            /* [retval][out] */ VARIANT_BOOL *pbEnableContextMenu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enableContextMenu( 
            VARIANT_BOOL bEnableContextMenu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_uiMode( 
            /* [in] */ BSTR bstrMode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_uiMode( 
            /* [retval][out] */ BSTR *pbstrMode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_stretchToFit( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_stretchToFit( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_windowlessVideo( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_windowlessVideo( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlayer3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlayer3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlayer3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlayer3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPPlayer3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPPlayer3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPPlayer3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPPlayer3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IWMPPlayer3 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ BSTR *pbstrURL);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IWMPPlayer3 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_openState )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ WMPOpenState *pwmpos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playState )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ WMPPlayState *pwmpps);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_controls )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPControls **ppControl);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_settings )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPSettings **ppSettings);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMedia )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMedia )( 
            IWMPPlayer3 * This,
            /* [in] */ IWMPMedia *pMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mediaCollection )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPMediaCollection **ppMediaCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playlistCollection )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPPlaylistCollection **ppPlaylistCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_versionInfo )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ BSTR *pbstrVersionInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *launchURL )( 
            IWMPPlayer3 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_network )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPNetwork **ppQNI);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPlaylist )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPPlaylist **ppPL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPlaylist )( 
            IWMPPlayer3 * This,
            /* [in] */ IWMPPlaylist *pPL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_cdromCollection )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPCdromCollection **ppCdromCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_closedCaption )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPClosedCaption **ppClosedCaption);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isOnline )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ VARIANT_BOOL *pfOnline);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPError **ppError);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ BSTR *pbstrStatus);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_dvd )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ IWMPDVD **ppDVD);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enabled )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enabled )( 
            IWMPPlayer3 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_fullScreen )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ VARIANT_BOOL *pbFullScreen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_fullScreen )( 
            IWMPPlayer3 * This,
            VARIANT_BOOL bFullScreen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enableContextMenu )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnableContextMenu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enableContextMenu )( 
            IWMPPlayer3 * This,
            VARIANT_BOOL bEnableContextMenu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_uiMode )( 
            IWMPPlayer3 * This,
            /* [in] */ BSTR bstrMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_uiMode )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ BSTR *pbstrMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_stretchToFit )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_stretchToFit )( 
            IWMPPlayer3 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_windowlessVideo )( 
            IWMPPlayer3 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_windowlessVideo )( 
            IWMPPlayer3 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        END_INTERFACE
    } IWMPPlayer3Vtbl;

    interface IWMPPlayer3
    {
        CONST_VTBL struct IWMPPlayer3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlayer3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlayer3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlayer3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlayer3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPPlayer3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPPlayer3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPPlayer3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPPlayer3_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IWMPPlayer3_get_URL(This,pbstrURL)	\
    ( (This)->lpVtbl -> get_URL(This,pbstrURL) ) 

#define IWMPPlayer3_put_URL(This,bstrURL)	\
    ( (This)->lpVtbl -> put_URL(This,bstrURL) ) 

#define IWMPPlayer3_get_openState(This,pwmpos)	\
    ( (This)->lpVtbl -> get_openState(This,pwmpos) ) 

#define IWMPPlayer3_get_playState(This,pwmpps)	\
    ( (This)->lpVtbl -> get_playState(This,pwmpps) ) 

#define IWMPPlayer3_get_controls(This,ppControl)	\
    ( (This)->lpVtbl -> get_controls(This,ppControl) ) 

#define IWMPPlayer3_get_settings(This,ppSettings)	\
    ( (This)->lpVtbl -> get_settings(This,ppSettings) ) 

#define IWMPPlayer3_get_currentMedia(This,ppMedia)	\
    ( (This)->lpVtbl -> get_currentMedia(This,ppMedia) ) 

#define IWMPPlayer3_put_currentMedia(This,pMedia)	\
    ( (This)->lpVtbl -> put_currentMedia(This,pMedia) ) 

#define IWMPPlayer3_get_mediaCollection(This,ppMediaCollection)	\
    ( (This)->lpVtbl -> get_mediaCollection(This,ppMediaCollection) ) 

#define IWMPPlayer3_get_playlistCollection(This,ppPlaylistCollection)	\
    ( (This)->lpVtbl -> get_playlistCollection(This,ppPlaylistCollection) ) 

#define IWMPPlayer3_get_versionInfo(This,pbstrVersionInfo)	\
    ( (This)->lpVtbl -> get_versionInfo(This,pbstrVersionInfo) ) 

#define IWMPPlayer3_launchURL(This,bstrURL)	\
    ( (This)->lpVtbl -> launchURL(This,bstrURL) ) 

#define IWMPPlayer3_get_network(This,ppQNI)	\
    ( (This)->lpVtbl -> get_network(This,ppQNI) ) 

#define IWMPPlayer3_get_currentPlaylist(This,ppPL)	\
    ( (This)->lpVtbl -> get_currentPlaylist(This,ppPL) ) 

#define IWMPPlayer3_put_currentPlaylist(This,pPL)	\
    ( (This)->lpVtbl -> put_currentPlaylist(This,pPL) ) 

#define IWMPPlayer3_get_cdromCollection(This,ppCdromCollection)	\
    ( (This)->lpVtbl -> get_cdromCollection(This,ppCdromCollection) ) 

#define IWMPPlayer3_get_closedCaption(This,ppClosedCaption)	\
    ( (This)->lpVtbl -> get_closedCaption(This,ppClosedCaption) ) 

#define IWMPPlayer3_get_isOnline(This,pfOnline)	\
    ( (This)->lpVtbl -> get_isOnline(This,pfOnline) ) 

#define IWMPPlayer3_get_error(This,ppError)	\
    ( (This)->lpVtbl -> get_error(This,ppError) ) 

#define IWMPPlayer3_get_status(This,pbstrStatus)	\
    ( (This)->lpVtbl -> get_status(This,pbstrStatus) ) 


#define IWMPPlayer3_get_dvd(This,ppDVD)	\
    ( (This)->lpVtbl -> get_dvd(This,ppDVD) ) 


#define IWMPPlayer3_get_enabled(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_enabled(This,pbEnabled) ) 

#define IWMPPlayer3_put_enabled(This,bEnabled)	\
    ( (This)->lpVtbl -> put_enabled(This,bEnabled) ) 

#define IWMPPlayer3_get_fullScreen(This,pbFullScreen)	\
    ( (This)->lpVtbl -> get_fullScreen(This,pbFullScreen) ) 

#define IWMPPlayer3_put_fullScreen(This,bFullScreen)	\
    ( (This)->lpVtbl -> put_fullScreen(This,bFullScreen) ) 

#define IWMPPlayer3_get_enableContextMenu(This,pbEnableContextMenu)	\
    ( (This)->lpVtbl -> get_enableContextMenu(This,pbEnableContextMenu) ) 

#define IWMPPlayer3_put_enableContextMenu(This,bEnableContextMenu)	\
    ( (This)->lpVtbl -> put_enableContextMenu(This,bEnableContextMenu) ) 

#define IWMPPlayer3_put_uiMode(This,bstrMode)	\
    ( (This)->lpVtbl -> put_uiMode(This,bstrMode) ) 

#define IWMPPlayer3_get_uiMode(This,pbstrMode)	\
    ( (This)->lpVtbl -> get_uiMode(This,pbstrMode) ) 

#define IWMPPlayer3_get_stretchToFit(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_stretchToFit(This,pbEnabled) ) 

#define IWMPPlayer3_put_stretchToFit(This,bEnabled)	\
    ( (This)->lpVtbl -> put_stretchToFit(This,bEnabled) ) 

#define IWMPPlayer3_get_windowlessVideo(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_windowlessVideo(This,pbEnabled) ) 

#define IWMPPlayer3_put_windowlessVideo(This,bEnabled)	\
    ( (This)->lpVtbl -> put_windowlessVideo(This,bEnabled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlayer3_INTERFACE_DEFINED__ */


#ifndef __IWMPErrorItem2_INTERFACE_DEFINED__
#define __IWMPErrorItem2_INTERFACE_DEFINED__

/* interface IWMPErrorItem2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPErrorItem2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F75CCEC0-C67C-475c-931E-8719870BEE7D")
    IWMPErrorItem2 : public IWMPErrorItem
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_condition( 
            /* [retval][out] */ long *plCondition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPErrorItem2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPErrorItem2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPErrorItem2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPErrorItem2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPErrorItem2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPErrorItem2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPErrorItem2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPErrorItem2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_errorCode )( 
            IWMPErrorItem2 * This,
            /* [retval][out] */ long *phr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_errorDescription )( 
            IWMPErrorItem2 * This,
            /* [retval][out] */ BSTR *pbstrDescription);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_errorContext )( 
            IWMPErrorItem2 * This,
            /* [retval][out] */ VARIANT *pvarContext);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_remedy )( 
            IWMPErrorItem2 * This,
            /* [retval][out] */ long *plRemedy);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_customUrl )( 
            IWMPErrorItem2 * This,
            /* [retval][out] */ BSTR *pbstrCustomUrl);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_condition )( 
            IWMPErrorItem2 * This,
            /* [retval][out] */ long *plCondition);
        
        END_INTERFACE
    } IWMPErrorItem2Vtbl;

    interface IWMPErrorItem2
    {
        CONST_VTBL struct IWMPErrorItem2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPErrorItem2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPErrorItem2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPErrorItem2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPErrorItem2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPErrorItem2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPErrorItem2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPErrorItem2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPErrorItem2_get_errorCode(This,phr)	\
    ( (This)->lpVtbl -> get_errorCode(This,phr) ) 

#define IWMPErrorItem2_get_errorDescription(This,pbstrDescription)	\
    ( (This)->lpVtbl -> get_errorDescription(This,pbstrDescription) ) 

#define IWMPErrorItem2_get_errorContext(This,pvarContext)	\
    ( (This)->lpVtbl -> get_errorContext(This,pvarContext) ) 

#define IWMPErrorItem2_get_remedy(This,plRemedy)	\
    ( (This)->lpVtbl -> get_remedy(This,plRemedy) ) 

#define IWMPErrorItem2_get_customUrl(This,pbstrCustomUrl)	\
    ( (This)->lpVtbl -> get_customUrl(This,pbstrCustomUrl) ) 


#define IWMPErrorItem2_get_condition(This,plCondition)	\
    ( (This)->lpVtbl -> get_condition(This,plCondition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPErrorItem2_INTERFACE_DEFINED__ */


#ifndef __IWMPRemoteMediaServices_INTERFACE_DEFINED__
#define __IWMPRemoteMediaServices_INTERFACE_DEFINED__

/* interface IWMPRemoteMediaServices */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPRemoteMediaServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CBB92747-741F-44fe-AB5B-F1A48F3B2A59")
    IWMPRemoteMediaServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetServiceType( 
            /* [out] */ BSTR *pbstrType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetApplicationName( 
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScriptableObject( 
            /* [out] */ BSTR *pbstrName,
            /* [out] */ IDispatch **ppDispatch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCustomUIMode( 
            /* [out] */ BSTR *pbstrFile) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPRemoteMediaServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPRemoteMediaServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPRemoteMediaServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPRemoteMediaServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetServiceType )( 
            IWMPRemoteMediaServices * This,
            /* [out] */ BSTR *pbstrType);
        
        HRESULT ( STDMETHODCALLTYPE *GetApplicationName )( 
            IWMPRemoteMediaServices * This,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptableObject )( 
            IWMPRemoteMediaServices * This,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ IDispatch **ppDispatch);
        
        HRESULT ( STDMETHODCALLTYPE *GetCustomUIMode )( 
            IWMPRemoteMediaServices * This,
            /* [out] */ BSTR *pbstrFile);
        
        END_INTERFACE
    } IWMPRemoteMediaServicesVtbl;

    interface IWMPRemoteMediaServices
    {
        CONST_VTBL struct IWMPRemoteMediaServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPRemoteMediaServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPRemoteMediaServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPRemoteMediaServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPRemoteMediaServices_GetServiceType(This,pbstrType)	\
    ( (This)->lpVtbl -> GetServiceType(This,pbstrType) ) 

#define IWMPRemoteMediaServices_GetApplicationName(This,pbstrName)	\
    ( (This)->lpVtbl -> GetApplicationName(This,pbstrName) ) 

#define IWMPRemoteMediaServices_GetScriptableObject(This,pbstrName,ppDispatch)	\
    ( (This)->lpVtbl -> GetScriptableObject(This,pbstrName,ppDispatch) ) 

#define IWMPRemoteMediaServices_GetCustomUIMode(This,pbstrFile)	\
    ( (This)->lpVtbl -> GetCustomUIMode(This,pbstrFile) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPRemoteMediaServices_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmp_0000_0024 */
/* [local] */ 

EXTERN_GUID( CLSID_WMPSkinManager, 0xB2A7FD52,0x301F,0x4348, 0xB9, 0x3A, 0x63, 0x8C, 0x6D, 0xE4, 0x92, 0x29 );


extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0024_v0_0_s_ifspec;

#ifndef __IWMPSkinManager_INTERFACE_DEFINED__
#define __IWMPSkinManager_INTERFACE_DEFINED__

/* interface IWMPSkinManager */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPSkinManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("076F2FA6-ED30-448B-8CC5-3F3EF3529C7A")
    IWMPSkinManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetVisualStyle( 
            /* [in] */ BSTR bstrPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPSkinManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPSkinManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPSkinManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPSkinManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetVisualStyle )( 
            IWMPSkinManager * This,
            /* [in] */ BSTR bstrPath);
        
        END_INTERFACE
    } IWMPSkinManagerVtbl;

    interface IWMPSkinManager
    {
        CONST_VTBL struct IWMPSkinManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPSkinManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPSkinManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPSkinManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPSkinManager_SetVisualStyle(This,bstrPath)	\
    ( (This)->lpVtbl -> SetVisualStyle(This,bstrPath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPSkinManager_INTERFACE_DEFINED__ */


#ifndef __IWMPMetadataPicture_INTERFACE_DEFINED__
#define __IWMPMetadataPicture_INTERFACE_DEFINED__

/* interface IWMPMetadataPicture */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPMetadataPicture;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5C29BBE0-F87D-4c45-AA28-A70F0230FFA9")
    IWMPMetadataPicture : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_mimeType( 
            /* [retval][out] */ BSTR *pbstrMimeType) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_pictureType( 
            /* [retval][out] */ BSTR *pbstrPictureType) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_description( 
            /* [retval][out] */ BSTR *pbstrDescription) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_URL( 
            /* [retval][out] */ BSTR *pbstrURL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPMetadataPictureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPMetadataPicture * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPMetadataPicture * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPMetadataPicture * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPMetadataPicture * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPMetadataPicture * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPMetadataPicture * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPMetadataPicture * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mimeType )( 
            IWMPMetadataPicture * This,
            /* [retval][out] */ BSTR *pbstrMimeType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_pictureType )( 
            IWMPMetadataPicture * This,
            /* [retval][out] */ BSTR *pbstrPictureType);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_description )( 
            IWMPMetadataPicture * This,
            /* [retval][out] */ BSTR *pbstrDescription);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWMPMetadataPicture * This,
            /* [retval][out] */ BSTR *pbstrURL);
        
        END_INTERFACE
    } IWMPMetadataPictureVtbl;

    interface IWMPMetadataPicture
    {
        CONST_VTBL struct IWMPMetadataPictureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPMetadataPicture_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPMetadataPicture_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPMetadataPicture_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPMetadataPicture_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPMetadataPicture_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPMetadataPicture_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPMetadataPicture_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPMetadataPicture_get_mimeType(This,pbstrMimeType)	\
    ( (This)->lpVtbl -> get_mimeType(This,pbstrMimeType) ) 

#define IWMPMetadataPicture_get_pictureType(This,pbstrPictureType)	\
    ( (This)->lpVtbl -> get_pictureType(This,pbstrPictureType) ) 

#define IWMPMetadataPicture_get_description(This,pbstrDescription)	\
    ( (This)->lpVtbl -> get_description(This,pbstrDescription) ) 

#define IWMPMetadataPicture_get_URL(This,pbstrURL)	\
    ( (This)->lpVtbl -> get_URL(This,pbstrURL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPMetadataPicture_INTERFACE_DEFINED__ */


#ifndef __IWMPMetadataText_INTERFACE_DEFINED__
#define __IWMPMetadataText_INTERFACE_DEFINED__

/* interface IWMPMetadataText */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPMetadataText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("769A72DB-13D2-45e2-9C48-53CA9D5B7450")
    IWMPMetadataText : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_description( 
            /* [retval][out] */ BSTR *pbstrDescription) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [retval][out] */ BSTR *pbstrText) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPMetadataTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPMetadataText * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPMetadataText * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPMetadataText * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPMetadataText * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPMetadataText * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPMetadataText * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPMetadataText * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_description )( 
            IWMPMetadataText * This,
            /* [retval][out] */ BSTR *pbstrDescription);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IWMPMetadataText * This,
            /* [retval][out] */ BSTR *pbstrText);
        
        END_INTERFACE
    } IWMPMetadataTextVtbl;

    interface IWMPMetadataText
    {
        CONST_VTBL struct IWMPMetadataTextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPMetadataText_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPMetadataText_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPMetadataText_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPMetadataText_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPMetadataText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPMetadataText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPMetadataText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPMetadataText_get_description(This,pbstrDescription)	\
    ( (This)->lpVtbl -> get_description(This,pbstrDescription) ) 

#define IWMPMetadataText_get_text(This,pbstrText)	\
    ( (This)->lpVtbl -> get_text(This,pbstrText) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPMetadataText_INTERFACE_DEFINED__ */


#ifndef __IWMPMedia3_INTERFACE_DEFINED__
#define __IWMPMedia3_INTERFACE_DEFINED__

/* interface IWMPMedia3 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPMedia3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F118EFC7-F03A-4fb4-99C9-1C02A5C1065B")
    IWMPMedia3 : public IWMPMedia2
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getAttributeCountByType( 
            /* [in] */ BSTR bstrType,
            /* [in] */ BSTR bstrLanguage,
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getItemInfoByType( 
            /* [in] */ BSTR bstrType,
            /* [in] */ BSTR bstrLanguage,
            /* [in] */ long lIndex,
            /* [retval][out] */ VARIANT *pvarValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPMedia3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPMedia3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPMedia3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPMedia3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPMedia3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPMedia3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPMedia3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPMedia3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isIdentical )( 
            IWMPMedia3 * This,
            /* [in] */ IWMPMedia *pIWMPMedia,
            /* [retval][out] */ VARIANT_BOOL *pvbool);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_sourceURL )( 
            IWMPMedia3 * This,
            /* [retval][out] */ BSTR *pbstrSourceURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IWMPMedia3 * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_name )( 
            IWMPMedia3 * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_imageSourceWidth )( 
            IWMPMedia3 * This,
            /* [retval][out] */ long *pWidth);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_imageSourceHeight )( 
            IWMPMedia3 * This,
            /* [retval][out] */ long *pHeight);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_markerCount )( 
            IWMPMedia3 * This,
            /* [retval][out] */ long *pMarkerCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMarkerTime )( 
            IWMPMedia3 * This,
            /* [in] */ long MarkerNum,
            /* [retval][out] */ double *pMarkerTime);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMarkerName )( 
            IWMPMedia3 * This,
            /* [in] */ long MarkerNum,
            /* [retval][out] */ BSTR *pbstrMarkerName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_duration )( 
            IWMPMedia3 * This,
            /* [retval][out] */ double *pDuration);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_durationString )( 
            IWMPMedia3 * This,
            /* [retval][out] */ BSTR *pbstrDuration);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_attributeCount )( 
            IWMPMedia3 * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeName )( 
            IWMPMedia3 * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrItemName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfo )( 
            IWMPMedia3 * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setItemInfo )( 
            IWMPMedia3 * This,
            /* [in] */ BSTR bstrItemName,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfoByAtom )( 
            IWMPMedia3 * This,
            /* [in] */ long lAtom,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isMemberOf )( 
            IWMPMedia3 * This,
            /* [in] */ IWMPPlaylist *pPlaylist,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsMemberOf);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isReadOnlyItem )( 
            IWMPMedia3 * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsReadOnly);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPMedia3 * This,
            /* [retval][out] */ IWMPErrorItem **ppIWMPErrorItem);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeCountByType )( 
            IWMPMedia3 * This,
            /* [in] */ BSTR bstrType,
            /* [in] */ BSTR bstrLanguage,
            /* [retval][out] */ long *plCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfoByType )( 
            IWMPMedia3 * This,
            /* [in] */ BSTR bstrType,
            /* [in] */ BSTR bstrLanguage,
            /* [in] */ long lIndex,
            /* [retval][out] */ VARIANT *pvarValue);
        
        END_INTERFACE
    } IWMPMedia3Vtbl;

    interface IWMPMedia3
    {
        CONST_VTBL struct IWMPMedia3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPMedia3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPMedia3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPMedia3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPMedia3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPMedia3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPMedia3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPMedia3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPMedia3_get_isIdentical(This,pIWMPMedia,pvbool)	\
    ( (This)->lpVtbl -> get_isIdentical(This,pIWMPMedia,pvbool) ) 

#define IWMPMedia3_get_sourceURL(This,pbstrSourceURL)	\
    ( (This)->lpVtbl -> get_sourceURL(This,pbstrSourceURL) ) 

#define IWMPMedia3_get_name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_name(This,pbstrName) ) 

#define IWMPMedia3_put_name(This,bstrName)	\
    ( (This)->lpVtbl -> put_name(This,bstrName) ) 

#define IWMPMedia3_get_imageSourceWidth(This,pWidth)	\
    ( (This)->lpVtbl -> get_imageSourceWidth(This,pWidth) ) 

#define IWMPMedia3_get_imageSourceHeight(This,pHeight)	\
    ( (This)->lpVtbl -> get_imageSourceHeight(This,pHeight) ) 

#define IWMPMedia3_get_markerCount(This,pMarkerCount)	\
    ( (This)->lpVtbl -> get_markerCount(This,pMarkerCount) ) 

#define IWMPMedia3_getMarkerTime(This,MarkerNum,pMarkerTime)	\
    ( (This)->lpVtbl -> getMarkerTime(This,MarkerNum,pMarkerTime) ) 

#define IWMPMedia3_getMarkerName(This,MarkerNum,pbstrMarkerName)	\
    ( (This)->lpVtbl -> getMarkerName(This,MarkerNum,pbstrMarkerName) ) 

#define IWMPMedia3_get_duration(This,pDuration)	\
    ( (This)->lpVtbl -> get_duration(This,pDuration) ) 

#define IWMPMedia3_get_durationString(This,pbstrDuration)	\
    ( (This)->lpVtbl -> get_durationString(This,pbstrDuration) ) 

#define IWMPMedia3_get_attributeCount(This,plCount)	\
    ( (This)->lpVtbl -> get_attributeCount(This,plCount) ) 

#define IWMPMedia3_getAttributeName(This,lIndex,pbstrItemName)	\
    ( (This)->lpVtbl -> getAttributeName(This,lIndex,pbstrItemName) ) 

#define IWMPMedia3_getItemInfo(This,bstrItemName,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfo(This,bstrItemName,pbstrVal) ) 

#define IWMPMedia3_setItemInfo(This,bstrItemName,bstrVal)	\
    ( (This)->lpVtbl -> setItemInfo(This,bstrItemName,bstrVal) ) 

#define IWMPMedia3_getItemInfoByAtom(This,lAtom,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfoByAtom(This,lAtom,pbstrVal) ) 

#define IWMPMedia3_isMemberOf(This,pPlaylist,pvarfIsMemberOf)	\
    ( (This)->lpVtbl -> isMemberOf(This,pPlaylist,pvarfIsMemberOf) ) 

#define IWMPMedia3_isReadOnlyItem(This,bstrItemName,pvarfIsReadOnly)	\
    ( (This)->lpVtbl -> isReadOnlyItem(This,bstrItemName,pvarfIsReadOnly) ) 


#define IWMPMedia3_get_error(This,ppIWMPErrorItem)	\
    ( (This)->lpVtbl -> get_error(This,ppIWMPErrorItem) ) 


#define IWMPMedia3_getAttributeCountByType(This,bstrType,bstrLanguage,plCount)	\
    ( (This)->lpVtbl -> getAttributeCountByType(This,bstrType,bstrLanguage,plCount) ) 

#define IWMPMedia3_getItemInfoByType(This,bstrType,bstrLanguage,lIndex,pvarValue)	\
    ( (This)->lpVtbl -> getItemInfoByType(This,bstrType,bstrLanguage,lIndex,pvarValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPMedia3_INTERFACE_DEFINED__ */


#ifndef __IWMPSettings2_INTERFACE_DEFINED__
#define __IWMPSettings2_INTERFACE_DEFINED__

/* interface IWMPSettings2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPSettings2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FDA937A4-EECE-4da5-A0B6-39BF89ADE2C2")
    IWMPSettings2 : public IWMPSettings
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_defaultAudioLanguage( 
            /* [retval][out] */ long *plLangID) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_mediaAccessRights( 
            /* [retval][out] */ BSTR *pbstrRights) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE requestMediaAccessRights( 
            /* [in] */ BSTR bstrDesiredAccess,
            /* [retval][out] */ VARIANT_BOOL *pvbAccepted) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPSettings2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPSettings2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPSettings2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPSettings2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPSettings2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPSettings2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPSettings2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPSettings2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isAvailable )( 
            IWMPSettings2 * This,
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_autoStart )( 
            IWMPSettings2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoStart);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_autoStart )( 
            IWMPSettings2 * This,
            /* [in] */ VARIANT_BOOL fAutoStart);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_baseURL )( 
            IWMPSettings2 * This,
            /* [retval][out] */ BSTR *pbstrBaseURL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_baseURL )( 
            IWMPSettings2 * This,
            /* [in] */ BSTR bstrBaseURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_defaultFrame )( 
            IWMPSettings2 * This,
            /* [retval][out] */ BSTR *pbstrDefaultFrame);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_defaultFrame )( 
            IWMPSettings2 * This,
            /* [in] */ BSTR bstrDefaultFrame);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_invokeURLs )( 
            IWMPSettings2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfInvokeURLs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_invokeURLs )( 
            IWMPSettings2 * This,
            /* [in] */ VARIANT_BOOL fInvokeURLs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mute )( 
            IWMPSettings2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfMute);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_mute )( 
            IWMPSettings2 * This,
            /* [in] */ VARIANT_BOOL fMute);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playCount )( 
            IWMPSettings2 * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_playCount )( 
            IWMPSettings2 * This,
            /* [in] */ long lCount);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_rate )( 
            IWMPSettings2 * This,
            /* [retval][out] */ double *pdRate);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_rate )( 
            IWMPSettings2 * This,
            /* [in] */ double dRate);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_balance )( 
            IWMPSettings2 * This,
            /* [retval][out] */ long *plBalance);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_balance )( 
            IWMPSettings2 * This,
            /* [in] */ long lBalance);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_volume )( 
            IWMPSettings2 * This,
            /* [retval][out] */ long *plVolume);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_volume )( 
            IWMPSettings2 * This,
            /* [in] */ long lVolume);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMode )( 
            IWMPSettings2 * This,
            /* [in] */ BSTR bstrMode,
            /* [retval][out] */ VARIANT_BOOL *pvarfMode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setMode )( 
            IWMPSettings2 * This,
            /* [in] */ BSTR bstrMode,
            /* [in] */ VARIANT_BOOL varfMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enableErrorDialogs )( 
            IWMPSettings2 * This,
            /* [retval][out] */ VARIANT_BOOL *pfEnableErrorDialogs);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enableErrorDialogs )( 
            IWMPSettings2 * This,
            /* [in] */ VARIANT_BOOL fEnableErrorDialogs);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_defaultAudioLanguage )( 
            IWMPSettings2 * This,
            /* [retval][out] */ long *plLangID);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mediaAccessRights )( 
            IWMPSettings2 * This,
            /* [retval][out] */ BSTR *pbstrRights);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *requestMediaAccessRights )( 
            IWMPSettings2 * This,
            /* [in] */ BSTR bstrDesiredAccess,
            /* [retval][out] */ VARIANT_BOOL *pvbAccepted);
        
        END_INTERFACE
    } IWMPSettings2Vtbl;

    interface IWMPSettings2
    {
        CONST_VTBL struct IWMPSettings2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPSettings2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPSettings2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPSettings2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPSettings2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPSettings2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPSettings2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPSettings2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPSettings2_get_isAvailable(This,bstrItem,pIsAvailable)	\
    ( (This)->lpVtbl -> get_isAvailable(This,bstrItem,pIsAvailable) ) 

#define IWMPSettings2_get_autoStart(This,pfAutoStart)	\
    ( (This)->lpVtbl -> get_autoStart(This,pfAutoStart) ) 

#define IWMPSettings2_put_autoStart(This,fAutoStart)	\
    ( (This)->lpVtbl -> put_autoStart(This,fAutoStart) ) 

#define IWMPSettings2_get_baseURL(This,pbstrBaseURL)	\
    ( (This)->lpVtbl -> get_baseURL(This,pbstrBaseURL) ) 

#define IWMPSettings2_put_baseURL(This,bstrBaseURL)	\
    ( (This)->lpVtbl -> put_baseURL(This,bstrBaseURL) ) 

#define IWMPSettings2_get_defaultFrame(This,pbstrDefaultFrame)	\
    ( (This)->lpVtbl -> get_defaultFrame(This,pbstrDefaultFrame) ) 

#define IWMPSettings2_put_defaultFrame(This,bstrDefaultFrame)	\
    ( (This)->lpVtbl -> put_defaultFrame(This,bstrDefaultFrame) ) 

#define IWMPSettings2_get_invokeURLs(This,pfInvokeURLs)	\
    ( (This)->lpVtbl -> get_invokeURLs(This,pfInvokeURLs) ) 

#define IWMPSettings2_put_invokeURLs(This,fInvokeURLs)	\
    ( (This)->lpVtbl -> put_invokeURLs(This,fInvokeURLs) ) 

#define IWMPSettings2_get_mute(This,pfMute)	\
    ( (This)->lpVtbl -> get_mute(This,pfMute) ) 

#define IWMPSettings2_put_mute(This,fMute)	\
    ( (This)->lpVtbl -> put_mute(This,fMute) ) 

#define IWMPSettings2_get_playCount(This,plCount)	\
    ( (This)->lpVtbl -> get_playCount(This,plCount) ) 

#define IWMPSettings2_put_playCount(This,lCount)	\
    ( (This)->lpVtbl -> put_playCount(This,lCount) ) 

#define IWMPSettings2_get_rate(This,pdRate)	\
    ( (This)->lpVtbl -> get_rate(This,pdRate) ) 

#define IWMPSettings2_put_rate(This,dRate)	\
    ( (This)->lpVtbl -> put_rate(This,dRate) ) 

#define IWMPSettings2_get_balance(This,plBalance)	\
    ( (This)->lpVtbl -> get_balance(This,plBalance) ) 

#define IWMPSettings2_put_balance(This,lBalance)	\
    ( (This)->lpVtbl -> put_balance(This,lBalance) ) 

#define IWMPSettings2_get_volume(This,plVolume)	\
    ( (This)->lpVtbl -> get_volume(This,plVolume) ) 

#define IWMPSettings2_put_volume(This,lVolume)	\
    ( (This)->lpVtbl -> put_volume(This,lVolume) ) 

#define IWMPSettings2_getMode(This,bstrMode,pvarfMode)	\
    ( (This)->lpVtbl -> getMode(This,bstrMode,pvarfMode) ) 

#define IWMPSettings2_setMode(This,bstrMode,varfMode)	\
    ( (This)->lpVtbl -> setMode(This,bstrMode,varfMode) ) 

#define IWMPSettings2_get_enableErrorDialogs(This,pfEnableErrorDialogs)	\
    ( (This)->lpVtbl -> get_enableErrorDialogs(This,pfEnableErrorDialogs) ) 

#define IWMPSettings2_put_enableErrorDialogs(This,fEnableErrorDialogs)	\
    ( (This)->lpVtbl -> put_enableErrorDialogs(This,fEnableErrorDialogs) ) 


#define IWMPSettings2_get_defaultAudioLanguage(This,plLangID)	\
    ( (This)->lpVtbl -> get_defaultAudioLanguage(This,plLangID) ) 

#define IWMPSettings2_get_mediaAccessRights(This,pbstrRights)	\
    ( (This)->lpVtbl -> get_mediaAccessRights(This,pbstrRights) ) 

#define IWMPSettings2_requestMediaAccessRights(This,bstrDesiredAccess,pvbAccepted)	\
    ( (This)->lpVtbl -> requestMediaAccessRights(This,bstrDesiredAccess,pvbAccepted) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPSettings2_INTERFACE_DEFINED__ */


#ifndef __IWMPControls3_INTERFACE_DEFINED__
#define __IWMPControls3_INTERFACE_DEFINED__

/* interface IWMPControls3 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPControls3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A1D1110E-D545-476a-9A78-AC3E4CB1E6BD")
    IWMPControls3 : public IWMPControls2
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_audioLanguageCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAudioLanguageID( 
            /* [in] */ long lIndex,
            /* [retval][out] */ long *plLangID) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAudioLanguageDescription( 
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrLangDesc) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentAudioLanguage( 
            /* [retval][out] */ long *plLangID) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_currentAudioLanguage( 
            /* [in] */ long lLangID) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentAudioLanguageIndex( 
            /* [retval][out] */ long *plIndex) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_currentAudioLanguageIndex( 
            /* [in] */ long lIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getLanguageName( 
            /* [in] */ long lLangID,
            /* [retval][out] */ BSTR *pbstrLangName) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_currentPositionTimecode( 
            /* [retval][out] */ BSTR *bstrTimecode) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_currentPositionTimecode( 
            /* [in] */ BSTR bstrTimecode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPControls3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPControls3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPControls3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPControls3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPControls3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPControls3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPControls3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPControls3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isAvailable )( 
            IWMPControls3 * This,
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *play )( 
            IWMPControls3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *stop )( 
            IWMPControls3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *pause )( 
            IWMPControls3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *fastForward )( 
            IWMPControls3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *fastReverse )( 
            IWMPControls3 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPosition )( 
            IWMPControls3 * This,
            /* [retval][out] */ double *pdCurrentPosition);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPosition )( 
            IWMPControls3 * This,
            /* [in] */ double dCurrentPosition);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPositionString )( 
            IWMPControls3 * This,
            /* [retval][out] */ BSTR *pbstrCurrentPosition);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *next )( 
            IWMPControls3 * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *previous )( 
            IWMPControls3 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentItem )( 
            IWMPControls3 * This,
            /* [retval][out] */ IWMPMedia **ppIWMPMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentItem )( 
            IWMPControls3 * This,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMarker )( 
            IWMPControls3 * This,
            /* [retval][out] */ long *plMarker);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMarker )( 
            IWMPControls3 * This,
            /* [in] */ long lMarker);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *playItem )( 
            IWMPControls3 * This,
            /* [in] */ IWMPMedia *pIWMPMedia);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *step )( 
            IWMPControls3 * This,
            /* [in] */ long lStep);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_audioLanguageCount )( 
            IWMPControls3 * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAudioLanguageID )( 
            IWMPControls3 * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ long *plLangID);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAudioLanguageDescription )( 
            IWMPControls3 * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrLangDesc);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentAudioLanguage )( 
            IWMPControls3 * This,
            /* [retval][out] */ long *plLangID);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentAudioLanguage )( 
            IWMPControls3 * This,
            /* [in] */ long lLangID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentAudioLanguageIndex )( 
            IWMPControls3 * This,
            /* [retval][out] */ long *plIndex);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentAudioLanguageIndex )( 
            IWMPControls3 * This,
            /* [in] */ long lIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getLanguageName )( 
            IWMPControls3 * This,
            /* [in] */ long lLangID,
            /* [retval][out] */ BSTR *pbstrLangName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPositionTimecode )( 
            IWMPControls3 * This,
            /* [retval][out] */ BSTR *bstrTimecode);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPositionTimecode )( 
            IWMPControls3 * This,
            /* [in] */ BSTR bstrTimecode);
        
        END_INTERFACE
    } IWMPControls3Vtbl;

    interface IWMPControls3
    {
        CONST_VTBL struct IWMPControls3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPControls3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPControls3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPControls3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPControls3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPControls3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPControls3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPControls3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPControls3_get_isAvailable(This,bstrItem,pIsAvailable)	\
    ( (This)->lpVtbl -> get_isAvailable(This,bstrItem,pIsAvailable) ) 

#define IWMPControls3_play(This)	\
    ( (This)->lpVtbl -> play(This) ) 

#define IWMPControls3_stop(This)	\
    ( (This)->lpVtbl -> stop(This) ) 

#define IWMPControls3_pause(This)	\
    ( (This)->lpVtbl -> pause(This) ) 

#define IWMPControls3_fastForward(This)	\
    ( (This)->lpVtbl -> fastForward(This) ) 

#define IWMPControls3_fastReverse(This)	\
    ( (This)->lpVtbl -> fastReverse(This) ) 

#define IWMPControls3_get_currentPosition(This,pdCurrentPosition)	\
    ( (This)->lpVtbl -> get_currentPosition(This,pdCurrentPosition) ) 

#define IWMPControls3_put_currentPosition(This,dCurrentPosition)	\
    ( (This)->lpVtbl -> put_currentPosition(This,dCurrentPosition) ) 

#define IWMPControls3_get_currentPositionString(This,pbstrCurrentPosition)	\
    ( (This)->lpVtbl -> get_currentPositionString(This,pbstrCurrentPosition) ) 

#define IWMPControls3_next(This)	\
    ( (This)->lpVtbl -> next(This) ) 

#define IWMPControls3_previous(This)	\
    ( (This)->lpVtbl -> previous(This) ) 

#define IWMPControls3_get_currentItem(This,ppIWMPMedia)	\
    ( (This)->lpVtbl -> get_currentItem(This,ppIWMPMedia) ) 

#define IWMPControls3_put_currentItem(This,pIWMPMedia)	\
    ( (This)->lpVtbl -> put_currentItem(This,pIWMPMedia) ) 

#define IWMPControls3_get_currentMarker(This,plMarker)	\
    ( (This)->lpVtbl -> get_currentMarker(This,plMarker) ) 

#define IWMPControls3_put_currentMarker(This,lMarker)	\
    ( (This)->lpVtbl -> put_currentMarker(This,lMarker) ) 

#define IWMPControls3_playItem(This,pIWMPMedia)	\
    ( (This)->lpVtbl -> playItem(This,pIWMPMedia) ) 


#define IWMPControls3_step(This,lStep)	\
    ( (This)->lpVtbl -> step(This,lStep) ) 


#define IWMPControls3_get_audioLanguageCount(This,plCount)	\
    ( (This)->lpVtbl -> get_audioLanguageCount(This,plCount) ) 

#define IWMPControls3_getAudioLanguageID(This,lIndex,plLangID)	\
    ( (This)->lpVtbl -> getAudioLanguageID(This,lIndex,plLangID) ) 

#define IWMPControls3_getAudioLanguageDescription(This,lIndex,pbstrLangDesc)	\
    ( (This)->lpVtbl -> getAudioLanguageDescription(This,lIndex,pbstrLangDesc) ) 

#define IWMPControls3_get_currentAudioLanguage(This,plLangID)	\
    ( (This)->lpVtbl -> get_currentAudioLanguage(This,plLangID) ) 

#define IWMPControls3_put_currentAudioLanguage(This,lLangID)	\
    ( (This)->lpVtbl -> put_currentAudioLanguage(This,lLangID) ) 

#define IWMPControls3_get_currentAudioLanguageIndex(This,plIndex)	\
    ( (This)->lpVtbl -> get_currentAudioLanguageIndex(This,plIndex) ) 

#define IWMPControls3_put_currentAudioLanguageIndex(This,lIndex)	\
    ( (This)->lpVtbl -> put_currentAudioLanguageIndex(This,lIndex) ) 

#define IWMPControls3_getLanguageName(This,lLangID,pbstrLangName)	\
    ( (This)->lpVtbl -> getLanguageName(This,lLangID,pbstrLangName) ) 

#define IWMPControls3_get_currentPositionTimecode(This,bstrTimecode)	\
    ( (This)->lpVtbl -> get_currentPositionTimecode(This,bstrTimecode) ) 

#define IWMPControls3_put_currentPositionTimecode(This,bstrTimecode)	\
    ( (This)->lpVtbl -> put_currentPositionTimecode(This,bstrTimecode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPControls3_INTERFACE_DEFINED__ */


#ifndef __IWMPClosedCaption2_INTERFACE_DEFINED__
#define __IWMPClosedCaption2_INTERFACE_DEFINED__

/* interface IWMPClosedCaption2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPClosedCaption2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("350BA78B-6BC8-4113-A5F5-312056934EB6")
    IWMPClosedCaption2 : public IWMPClosedCaption
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SAMILangCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getSAMILangName( 
            /* [in] */ long nIndex,
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getSAMILangID( 
            /* [in] */ long nIndex,
            /* [retval][out] */ long *plLangID) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_SAMIStyleCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getSAMIStyleName( 
            /* [in] */ long nIndex,
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPClosedCaption2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPClosedCaption2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPClosedCaption2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPClosedCaption2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPClosedCaption2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPClosedCaption2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPClosedCaption2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPClosedCaption2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SAMIStyle )( 
            IWMPClosedCaption2 * This,
            /* [retval][out] */ BSTR *pbstrSAMIStyle);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SAMIStyle )( 
            IWMPClosedCaption2 * This,
            /* [in] */ BSTR bstrSAMIStyle);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SAMILang )( 
            IWMPClosedCaption2 * This,
            /* [retval][out] */ BSTR *pbstrSAMILang);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SAMILang )( 
            IWMPClosedCaption2 * This,
            /* [in] */ BSTR bstrSAMILang);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SAMIFileName )( 
            IWMPClosedCaption2 * This,
            /* [retval][out] */ BSTR *pbstrSAMIFileName);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SAMIFileName )( 
            IWMPClosedCaption2 * This,
            /* [in] */ BSTR bstrSAMIFileName);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_captioningId )( 
            IWMPClosedCaption2 * This,
            /* [retval][out] */ BSTR *pbstrCaptioningID);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_captioningId )( 
            IWMPClosedCaption2 * This,
            /* [in] */ BSTR bstrCaptioningID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SAMILangCount )( 
            IWMPClosedCaption2 * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getSAMILangName )( 
            IWMPClosedCaption2 * This,
            /* [in] */ long nIndex,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getSAMILangID )( 
            IWMPClosedCaption2 * This,
            /* [in] */ long nIndex,
            /* [retval][out] */ long *plLangID);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SAMIStyleCount )( 
            IWMPClosedCaption2 * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getSAMIStyleName )( 
            IWMPClosedCaption2 * This,
            /* [in] */ long nIndex,
            /* [retval][out] */ BSTR *pbstrName);
        
        END_INTERFACE
    } IWMPClosedCaption2Vtbl;

    interface IWMPClosedCaption2
    {
        CONST_VTBL struct IWMPClosedCaption2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPClosedCaption2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPClosedCaption2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPClosedCaption2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPClosedCaption2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPClosedCaption2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPClosedCaption2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPClosedCaption2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPClosedCaption2_get_SAMIStyle(This,pbstrSAMIStyle)	\
    ( (This)->lpVtbl -> get_SAMIStyle(This,pbstrSAMIStyle) ) 

#define IWMPClosedCaption2_put_SAMIStyle(This,bstrSAMIStyle)	\
    ( (This)->lpVtbl -> put_SAMIStyle(This,bstrSAMIStyle) ) 

#define IWMPClosedCaption2_get_SAMILang(This,pbstrSAMILang)	\
    ( (This)->lpVtbl -> get_SAMILang(This,pbstrSAMILang) ) 

#define IWMPClosedCaption2_put_SAMILang(This,bstrSAMILang)	\
    ( (This)->lpVtbl -> put_SAMILang(This,bstrSAMILang) ) 

#define IWMPClosedCaption2_get_SAMIFileName(This,pbstrSAMIFileName)	\
    ( (This)->lpVtbl -> get_SAMIFileName(This,pbstrSAMIFileName) ) 

#define IWMPClosedCaption2_put_SAMIFileName(This,bstrSAMIFileName)	\
    ( (This)->lpVtbl -> put_SAMIFileName(This,bstrSAMIFileName) ) 

#define IWMPClosedCaption2_get_captioningId(This,pbstrCaptioningID)	\
    ( (This)->lpVtbl -> get_captioningId(This,pbstrCaptioningID) ) 

#define IWMPClosedCaption2_put_captioningId(This,bstrCaptioningID)	\
    ( (This)->lpVtbl -> put_captioningId(This,bstrCaptioningID) ) 


#define IWMPClosedCaption2_get_SAMILangCount(This,plCount)	\
    ( (This)->lpVtbl -> get_SAMILangCount(This,plCount) ) 

#define IWMPClosedCaption2_getSAMILangName(This,nIndex,pbstrName)	\
    ( (This)->lpVtbl -> getSAMILangName(This,nIndex,pbstrName) ) 

#define IWMPClosedCaption2_getSAMILangID(This,nIndex,plLangID)	\
    ( (This)->lpVtbl -> getSAMILangID(This,nIndex,plLangID) ) 

#define IWMPClosedCaption2_get_SAMIStyleCount(This,plCount)	\
    ( (This)->lpVtbl -> get_SAMIStyleCount(This,plCount) ) 

#define IWMPClosedCaption2_getSAMIStyleName(This,nIndex,pbstrName)	\
    ( (This)->lpVtbl -> getSAMIStyleName(This,nIndex,pbstrName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPClosedCaption2_INTERFACE_DEFINED__ */


#ifndef __IWMPPlayerApplication_INTERFACE_DEFINED__
#define __IWMPPlayerApplication_INTERFACE_DEFINED__

/* interface IWMPPlayerApplication */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlayerApplication;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("40897764-CEAB-47be-AD4A-8E28537F9BBF")
    IWMPPlayerApplication : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE switchToPlayerApplication( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE switchToControl( void) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_playerDocked( 
            /* [retval][out] */ VARIANT_BOOL *pbPlayerDocked) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_hasDisplay( 
            /* [retval][out] */ VARIANT_BOOL *pbHasDisplay) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlayerApplicationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlayerApplication * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlayerApplication * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlayerApplication * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPPlayerApplication * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPPlayerApplication * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPPlayerApplication * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPPlayerApplication * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *switchToPlayerApplication )( 
            IWMPPlayerApplication * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *switchToControl )( 
            IWMPPlayerApplication * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playerDocked )( 
            IWMPPlayerApplication * This,
            /* [retval][out] */ VARIANT_BOOL *pbPlayerDocked);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_hasDisplay )( 
            IWMPPlayerApplication * This,
            /* [retval][out] */ VARIANT_BOOL *pbHasDisplay);
        
        END_INTERFACE
    } IWMPPlayerApplicationVtbl;

    interface IWMPPlayerApplication
    {
        CONST_VTBL struct IWMPPlayerApplicationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlayerApplication_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlayerApplication_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlayerApplication_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlayerApplication_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPPlayerApplication_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPPlayerApplication_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPPlayerApplication_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPPlayerApplication_switchToPlayerApplication(This)	\
    ( (This)->lpVtbl -> switchToPlayerApplication(This) ) 

#define IWMPPlayerApplication_switchToControl(This)	\
    ( (This)->lpVtbl -> switchToControl(This) ) 

#define IWMPPlayerApplication_get_playerDocked(This,pbPlayerDocked)	\
    ( (This)->lpVtbl -> get_playerDocked(This,pbPlayerDocked) ) 

#define IWMPPlayerApplication_get_hasDisplay(This,pbHasDisplay)	\
    ( (This)->lpVtbl -> get_hasDisplay(This,pbHasDisplay) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlayerApplication_INTERFACE_DEFINED__ */


#ifndef __IWMPCore3_INTERFACE_DEFINED__
#define __IWMPCore3_INTERFACE_DEFINED__

/* interface IWMPCore3 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPCore3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7587C667-628F-499f-88E7-6A6F4E888464")
    IWMPCore3 : public IWMPCore2
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE newPlaylist( 
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPPlaylist **ppPlaylist) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE newMedia( 
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPMedia **ppMedia) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPCore3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPCore3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPCore3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPCore3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPCore3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPCore3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPCore3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPCore3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IWMPCore3 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWMPCore3 * This,
            /* [retval][out] */ BSTR *pbstrURL);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IWMPCore3 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_openState )( 
            IWMPCore3 * This,
            /* [retval][out] */ WMPOpenState *pwmpos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playState )( 
            IWMPCore3 * This,
            /* [retval][out] */ WMPPlayState *pwmpps);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_controls )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPControls **ppControl);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_settings )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPSettings **ppSettings);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMedia )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMedia )( 
            IWMPCore3 * This,
            /* [in] */ IWMPMedia *pMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mediaCollection )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPMediaCollection **ppMediaCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playlistCollection )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPPlaylistCollection **ppPlaylistCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_versionInfo )( 
            IWMPCore3 * This,
            /* [retval][out] */ BSTR *pbstrVersionInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *launchURL )( 
            IWMPCore3 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_network )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPNetwork **ppQNI);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPlaylist )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPPlaylist **ppPL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPlaylist )( 
            IWMPCore3 * This,
            /* [in] */ IWMPPlaylist *pPL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_cdromCollection )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPCdromCollection **ppCdromCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_closedCaption )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPClosedCaption **ppClosedCaption);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isOnline )( 
            IWMPCore3 * This,
            /* [retval][out] */ VARIANT_BOOL *pfOnline);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPError **ppError);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPCore3 * This,
            /* [retval][out] */ BSTR *pbstrStatus);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_dvd )( 
            IWMPCore3 * This,
            /* [retval][out] */ IWMPDVD **ppDVD);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *newPlaylist )( 
            IWMPCore3 * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPPlaylist **ppPlaylist);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *newMedia )( 
            IWMPCore3 * This,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        END_INTERFACE
    } IWMPCore3Vtbl;

    interface IWMPCore3
    {
        CONST_VTBL struct IWMPCore3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPCore3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPCore3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPCore3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPCore3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPCore3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPCore3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPCore3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPCore3_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IWMPCore3_get_URL(This,pbstrURL)	\
    ( (This)->lpVtbl -> get_URL(This,pbstrURL) ) 

#define IWMPCore3_put_URL(This,bstrURL)	\
    ( (This)->lpVtbl -> put_URL(This,bstrURL) ) 

#define IWMPCore3_get_openState(This,pwmpos)	\
    ( (This)->lpVtbl -> get_openState(This,pwmpos) ) 

#define IWMPCore3_get_playState(This,pwmpps)	\
    ( (This)->lpVtbl -> get_playState(This,pwmpps) ) 

#define IWMPCore3_get_controls(This,ppControl)	\
    ( (This)->lpVtbl -> get_controls(This,ppControl) ) 

#define IWMPCore3_get_settings(This,ppSettings)	\
    ( (This)->lpVtbl -> get_settings(This,ppSettings) ) 

#define IWMPCore3_get_currentMedia(This,ppMedia)	\
    ( (This)->lpVtbl -> get_currentMedia(This,ppMedia) ) 

#define IWMPCore3_put_currentMedia(This,pMedia)	\
    ( (This)->lpVtbl -> put_currentMedia(This,pMedia) ) 

#define IWMPCore3_get_mediaCollection(This,ppMediaCollection)	\
    ( (This)->lpVtbl -> get_mediaCollection(This,ppMediaCollection) ) 

#define IWMPCore3_get_playlistCollection(This,ppPlaylistCollection)	\
    ( (This)->lpVtbl -> get_playlistCollection(This,ppPlaylistCollection) ) 

#define IWMPCore3_get_versionInfo(This,pbstrVersionInfo)	\
    ( (This)->lpVtbl -> get_versionInfo(This,pbstrVersionInfo) ) 

#define IWMPCore3_launchURL(This,bstrURL)	\
    ( (This)->lpVtbl -> launchURL(This,bstrURL) ) 

#define IWMPCore3_get_network(This,ppQNI)	\
    ( (This)->lpVtbl -> get_network(This,ppQNI) ) 

#define IWMPCore3_get_currentPlaylist(This,ppPL)	\
    ( (This)->lpVtbl -> get_currentPlaylist(This,ppPL) ) 

#define IWMPCore3_put_currentPlaylist(This,pPL)	\
    ( (This)->lpVtbl -> put_currentPlaylist(This,pPL) ) 

#define IWMPCore3_get_cdromCollection(This,ppCdromCollection)	\
    ( (This)->lpVtbl -> get_cdromCollection(This,ppCdromCollection) ) 

#define IWMPCore3_get_closedCaption(This,ppClosedCaption)	\
    ( (This)->lpVtbl -> get_closedCaption(This,ppClosedCaption) ) 

#define IWMPCore3_get_isOnline(This,pfOnline)	\
    ( (This)->lpVtbl -> get_isOnline(This,pfOnline) ) 

#define IWMPCore3_get_error(This,ppError)	\
    ( (This)->lpVtbl -> get_error(This,ppError) ) 

#define IWMPCore3_get_status(This,pbstrStatus)	\
    ( (This)->lpVtbl -> get_status(This,pbstrStatus) ) 


#define IWMPCore3_get_dvd(This,ppDVD)	\
    ( (This)->lpVtbl -> get_dvd(This,ppDVD) ) 


#define IWMPCore3_newPlaylist(This,bstrName,bstrURL,ppPlaylist)	\
    ( (This)->lpVtbl -> newPlaylist(This,bstrName,bstrURL,ppPlaylist) ) 

#define IWMPCore3_newMedia(This,bstrURL,ppMedia)	\
    ( (This)->lpVtbl -> newMedia(This,bstrURL,ppMedia) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPCore3_INTERFACE_DEFINED__ */


#ifndef __IWMPPlayer4_INTERFACE_DEFINED__
#define __IWMPPlayer4_INTERFACE_DEFINED__

/* interface IWMPPlayer4 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlayer4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6C497D62-8919-413c-82DB-E935FB3EC584")
    IWMPPlayer4 : public IWMPCore3
    {
    public:
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enabled( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enabled( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_fullScreen( 
            /* [retval][out] */ VARIANT_BOOL *pbFullScreen) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_fullScreen( 
            VARIANT_BOOL bFullScreen) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_enableContextMenu( 
            /* [retval][out] */ VARIANT_BOOL *pbEnableContextMenu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_enableContextMenu( 
            VARIANT_BOOL bEnableContextMenu) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_uiMode( 
            /* [in] */ BSTR bstrMode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_uiMode( 
            /* [retval][out] */ BSTR *pbstrMode) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_stretchToFit( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_stretchToFit( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_windowlessVideo( 
            /* [retval][out] */ VARIANT_BOOL *pbEnabled) = 0;
        
        virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_windowlessVideo( 
            /* [in] */ VARIANT_BOOL bEnabled) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_isRemote( 
            /* [retval][out] */ VARIANT_BOOL *pvarfIsRemote) = 0;
        
        virtual /* [helpstring][propget][id] */ HRESULT STDMETHODCALLTYPE get_playerApplication( 
            /* [retval][out] */ IWMPPlayerApplication **ppIWMPPlayerApplication) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE openPlayer( 
            /* [in] */ BSTR bstrURL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlayer4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlayer4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlayer4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlayer4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPPlayer4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPPlayer4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPPlayer4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPPlayer4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *close )( 
            IWMPPlayer4 * This);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URL )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ BSTR *pbstrURL);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_URL )( 
            IWMPPlayer4 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_openState )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ WMPOpenState *pwmpos);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playState )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ WMPPlayState *pwmpps);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_controls )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPControls **ppControl);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_settings )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPSettings **ppSettings);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentMedia )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentMedia )( 
            IWMPPlayer4 * This,
            /* [in] */ IWMPMedia *pMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_mediaCollection )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPMediaCollection **ppMediaCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playlistCollection )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPPlaylistCollection **ppPlaylistCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_versionInfo )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ BSTR *pbstrVersionInfo);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *launchURL )( 
            IWMPPlayer4 * This,
            /* [in] */ BSTR bstrURL);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_network )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPNetwork **ppQNI);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_currentPlaylist )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPPlaylist **ppPL);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_currentPlaylist )( 
            IWMPPlayer4 * This,
            /* [in] */ IWMPPlaylist *pPL);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_cdromCollection )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPCdromCollection **ppCdromCollection);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_closedCaption )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPClosedCaption **ppClosedCaption);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isOnline )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ VARIANT_BOOL *pfOnline);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_error )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPError **ppError);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ BSTR *pbstrStatus);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_dvd )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPDVD **ppDVD);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *newPlaylist )( 
            IWMPPlayer4 * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPPlaylist **ppPlaylist);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *newMedia )( 
            IWMPPlayer4 * This,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPMedia **ppMedia);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enabled )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enabled )( 
            IWMPPlayer4 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_fullScreen )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ VARIANT_BOOL *pbFullScreen);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_fullScreen )( 
            IWMPPlayer4 * This,
            VARIANT_BOOL bFullScreen);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_enableContextMenu )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnableContextMenu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_enableContextMenu )( 
            IWMPPlayer4 * This,
            VARIANT_BOOL bEnableContextMenu);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_uiMode )( 
            IWMPPlayer4 * This,
            /* [in] */ BSTR bstrMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_uiMode )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ BSTR *pbstrMode);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_stretchToFit )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_stretchToFit )( 
            IWMPPlayer4 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_windowlessVideo )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ VARIANT_BOOL *pbEnabled);
        
        /* [helpstring][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_windowlessVideo )( 
            IWMPPlayer4 * This,
            /* [in] */ VARIANT_BOOL bEnabled);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_isRemote )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsRemote);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_playerApplication )( 
            IWMPPlayer4 * This,
            /* [retval][out] */ IWMPPlayerApplication **ppIWMPPlayerApplication);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *openPlayer )( 
            IWMPPlayer4 * This,
            /* [in] */ BSTR bstrURL);
        
        END_INTERFACE
    } IWMPPlayer4Vtbl;

    interface IWMPPlayer4
    {
        CONST_VTBL struct IWMPPlayer4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlayer4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlayer4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlayer4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlayer4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPPlayer4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPPlayer4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPPlayer4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPPlayer4_close(This)	\
    ( (This)->lpVtbl -> close(This) ) 

#define IWMPPlayer4_get_URL(This,pbstrURL)	\
    ( (This)->lpVtbl -> get_URL(This,pbstrURL) ) 

#define IWMPPlayer4_put_URL(This,bstrURL)	\
    ( (This)->lpVtbl -> put_URL(This,bstrURL) ) 

#define IWMPPlayer4_get_openState(This,pwmpos)	\
    ( (This)->lpVtbl -> get_openState(This,pwmpos) ) 

#define IWMPPlayer4_get_playState(This,pwmpps)	\
    ( (This)->lpVtbl -> get_playState(This,pwmpps) ) 

#define IWMPPlayer4_get_controls(This,ppControl)	\
    ( (This)->lpVtbl -> get_controls(This,ppControl) ) 

#define IWMPPlayer4_get_settings(This,ppSettings)	\
    ( (This)->lpVtbl -> get_settings(This,ppSettings) ) 

#define IWMPPlayer4_get_currentMedia(This,ppMedia)	\
    ( (This)->lpVtbl -> get_currentMedia(This,ppMedia) ) 

#define IWMPPlayer4_put_currentMedia(This,pMedia)	\
    ( (This)->lpVtbl -> put_currentMedia(This,pMedia) ) 

#define IWMPPlayer4_get_mediaCollection(This,ppMediaCollection)	\
    ( (This)->lpVtbl -> get_mediaCollection(This,ppMediaCollection) ) 

#define IWMPPlayer4_get_playlistCollection(This,ppPlaylistCollection)	\
    ( (This)->lpVtbl -> get_playlistCollection(This,ppPlaylistCollection) ) 

#define IWMPPlayer4_get_versionInfo(This,pbstrVersionInfo)	\
    ( (This)->lpVtbl -> get_versionInfo(This,pbstrVersionInfo) ) 

#define IWMPPlayer4_launchURL(This,bstrURL)	\
    ( (This)->lpVtbl -> launchURL(This,bstrURL) ) 

#define IWMPPlayer4_get_network(This,ppQNI)	\
    ( (This)->lpVtbl -> get_network(This,ppQNI) ) 

#define IWMPPlayer4_get_currentPlaylist(This,ppPL)	\
    ( (This)->lpVtbl -> get_currentPlaylist(This,ppPL) ) 

#define IWMPPlayer4_put_currentPlaylist(This,pPL)	\
    ( (This)->lpVtbl -> put_currentPlaylist(This,pPL) ) 

#define IWMPPlayer4_get_cdromCollection(This,ppCdromCollection)	\
    ( (This)->lpVtbl -> get_cdromCollection(This,ppCdromCollection) ) 

#define IWMPPlayer4_get_closedCaption(This,ppClosedCaption)	\
    ( (This)->lpVtbl -> get_closedCaption(This,ppClosedCaption) ) 

#define IWMPPlayer4_get_isOnline(This,pfOnline)	\
    ( (This)->lpVtbl -> get_isOnline(This,pfOnline) ) 

#define IWMPPlayer4_get_error(This,ppError)	\
    ( (This)->lpVtbl -> get_error(This,ppError) ) 

#define IWMPPlayer4_get_status(This,pbstrStatus)	\
    ( (This)->lpVtbl -> get_status(This,pbstrStatus) ) 


#define IWMPPlayer4_get_dvd(This,ppDVD)	\
    ( (This)->lpVtbl -> get_dvd(This,ppDVD) ) 


#define IWMPPlayer4_newPlaylist(This,bstrName,bstrURL,ppPlaylist)	\
    ( (This)->lpVtbl -> newPlaylist(This,bstrName,bstrURL,ppPlaylist) ) 

#define IWMPPlayer4_newMedia(This,bstrURL,ppMedia)	\
    ( (This)->lpVtbl -> newMedia(This,bstrURL,ppMedia) ) 


#define IWMPPlayer4_get_enabled(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_enabled(This,pbEnabled) ) 

#define IWMPPlayer4_put_enabled(This,bEnabled)	\
    ( (This)->lpVtbl -> put_enabled(This,bEnabled) ) 

#define IWMPPlayer4_get_fullScreen(This,pbFullScreen)	\
    ( (This)->lpVtbl -> get_fullScreen(This,pbFullScreen) ) 

#define IWMPPlayer4_put_fullScreen(This,bFullScreen)	\
    ( (This)->lpVtbl -> put_fullScreen(This,bFullScreen) ) 

#define IWMPPlayer4_get_enableContextMenu(This,pbEnableContextMenu)	\
    ( (This)->lpVtbl -> get_enableContextMenu(This,pbEnableContextMenu) ) 

#define IWMPPlayer4_put_enableContextMenu(This,bEnableContextMenu)	\
    ( (This)->lpVtbl -> put_enableContextMenu(This,bEnableContextMenu) ) 

#define IWMPPlayer4_put_uiMode(This,bstrMode)	\
    ( (This)->lpVtbl -> put_uiMode(This,bstrMode) ) 

#define IWMPPlayer4_get_uiMode(This,pbstrMode)	\
    ( (This)->lpVtbl -> get_uiMode(This,pbstrMode) ) 

#define IWMPPlayer4_get_stretchToFit(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_stretchToFit(This,pbEnabled) ) 

#define IWMPPlayer4_put_stretchToFit(This,bEnabled)	\
    ( (This)->lpVtbl -> put_stretchToFit(This,bEnabled) ) 

#define IWMPPlayer4_get_windowlessVideo(This,pbEnabled)	\
    ( (This)->lpVtbl -> get_windowlessVideo(This,pbEnabled) ) 

#define IWMPPlayer4_put_windowlessVideo(This,bEnabled)	\
    ( (This)->lpVtbl -> put_windowlessVideo(This,bEnabled) ) 

#define IWMPPlayer4_get_isRemote(This,pvarfIsRemote)	\
    ( (This)->lpVtbl -> get_isRemote(This,pvarfIsRemote) ) 

#define IWMPPlayer4_get_playerApplication(This,ppIWMPPlayerApplication)	\
    ( (This)->lpVtbl -> get_playerApplication(This,ppIWMPPlayerApplication) ) 

#define IWMPPlayer4_openPlayer(This,bstrURL)	\
    ( (This)->lpVtbl -> openPlayer(This,bstrURL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlayer4_INTERFACE_DEFINED__ */


#ifndef __IWMPPlayerServices_INTERFACE_DEFINED__
#define __IWMPPlayerServices_INTERFACE_DEFINED__

/* interface IWMPPlayerServices */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlayerServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1D01FBDB-ADE2-4c8d-9842-C190B95C3306")
    IWMPPlayerServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE activateUIPlugin( 
            /* [in] */ BSTR bstrPlugin) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTaskPane( 
            /* [in] */ BSTR bstrTaskPane) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setTaskPaneURL( 
            /* [in] */ BSTR bstrTaskPane,
            /* [in] */ BSTR bstrURL,
            /* [in] */ BSTR bstrFriendlyName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlayerServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlayerServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlayerServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlayerServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *activateUIPlugin )( 
            IWMPPlayerServices * This,
            /* [in] */ BSTR bstrPlugin);
        
        HRESULT ( STDMETHODCALLTYPE *setTaskPane )( 
            IWMPPlayerServices * This,
            /* [in] */ BSTR bstrTaskPane);
        
        HRESULT ( STDMETHODCALLTYPE *setTaskPaneURL )( 
            IWMPPlayerServices * This,
            /* [in] */ BSTR bstrTaskPane,
            /* [in] */ BSTR bstrURL,
            /* [in] */ BSTR bstrFriendlyName);
        
        END_INTERFACE
    } IWMPPlayerServicesVtbl;

    interface IWMPPlayerServices
    {
        CONST_VTBL struct IWMPPlayerServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlayerServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlayerServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlayerServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlayerServices_activateUIPlugin(This,bstrPlugin)	\
    ( (This)->lpVtbl -> activateUIPlugin(This,bstrPlugin) ) 

#define IWMPPlayerServices_setTaskPane(This,bstrTaskPane)	\
    ( (This)->lpVtbl -> setTaskPane(This,bstrTaskPane) ) 

#define IWMPPlayerServices_setTaskPaneURL(This,bstrTaskPane,bstrURL,bstrFriendlyName)	\
    ( (This)->lpVtbl -> setTaskPaneURL(This,bstrTaskPane,bstrURL,bstrFriendlyName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlayerServices_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmp_0000_0035 */
/* [local] */ 

typedef /* [public][helpstring] */ 
enum WMPSyncState
    {	wmpssUnknown	= 0,
	wmpssSynchronizing	= ( wmpssUnknown + 1 ) ,
	wmpssStopped	= ( wmpssSynchronizing + 1 ) ,
	wmpssLast	= ( wmpssStopped + 1 ) 
    } 	WMPSyncState;

typedef /* [public][helpstring] */ 
enum WMPDeviceStatus
    {	wmpdsUnknown	= 0,
	wmpdsPartnershipExists	= ( wmpdsUnknown + 1 ) ,
	wmpdsPartnershipDeclined	= ( wmpdsPartnershipExists + 1 ) ,
	wmpdsPartnershipAnother	= ( wmpdsPartnershipDeclined + 1 ) ,
	wmpdsManualDevice	= ( wmpdsPartnershipAnother + 1 ) ,
	wmpdsNewDevice	= ( wmpdsManualDevice + 1 ) ,
	wmpdsLast	= ( wmpdsNewDevice + 1 ) 
    } 	WMPDeviceStatus;



extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0035_v0_0_s_ifspec;

#ifndef __IWMPSyncDevice_INTERFACE_DEFINED__
#define __IWMPSyncDevice_INTERFACE_DEFINED__

/* interface IWMPSyncDevice */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPSyncDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("82A2986C-0293-4fd0-B279-B21B86C058BE")
    IWMPSyncDevice : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_friendlyName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_friendlyName( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_deviceName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_deviceId( 
            /* [retval][out] */ BSTR *pbstrDeviceId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_partnershipIndex( 
            /* [retval][out] */ long *plIndex) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_connected( 
            /* [retval][out] */ VARIANT_BOOL *pvbConnected) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_status( 
            /* [retval][out] */ WMPDeviceStatus *pwmpds) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_syncState( 
            /* [retval][out] */ WMPSyncState *pwmpss) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_progress( 
            /* [retval][out] */ long *plProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getItemInfo( 
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE createPartnership( 
            /* [in] */ VARIANT_BOOL vbShowUI) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE deletePartnership( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE start( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE showSettings( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isIdentical( 
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [retval][out] */ VARIANT_BOOL *pvbool) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPSyncDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPSyncDevice * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPSyncDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPSyncDevice * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_friendlyName )( 
            IWMPSyncDevice * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_friendlyName )( 
            IWMPSyncDevice * This,
            /* [in] */ BSTR bstrName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_deviceName )( 
            IWMPSyncDevice * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_deviceId )( 
            IWMPSyncDevice * This,
            /* [retval][out] */ BSTR *pbstrDeviceId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_partnershipIndex )( 
            IWMPSyncDevice * This,
            /* [retval][out] */ long *plIndex);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_connected )( 
            IWMPSyncDevice * This,
            /* [retval][out] */ VARIANT_BOOL *pvbConnected);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPSyncDevice * This,
            /* [retval][out] */ WMPDeviceStatus *pwmpds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncState )( 
            IWMPSyncDevice * This,
            /* [retval][out] */ WMPSyncState *pwmpss);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_progress )( 
            IWMPSyncDevice * This,
            /* [retval][out] */ long *plProgress);
        
        HRESULT ( STDMETHODCALLTYPE *getItemInfo )( 
            IWMPSyncDevice * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrVal);
        
        HRESULT ( STDMETHODCALLTYPE *createPartnership )( 
            IWMPSyncDevice * This,
            /* [in] */ VARIANT_BOOL vbShowUI);
        
        HRESULT ( STDMETHODCALLTYPE *deletePartnership )( 
            IWMPSyncDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *start )( 
            IWMPSyncDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *stop )( 
            IWMPSyncDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *showSettings )( 
            IWMPSyncDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *isIdentical )( 
            IWMPSyncDevice * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [retval][out] */ VARIANT_BOOL *pvbool);
        
        END_INTERFACE
    } IWMPSyncDeviceVtbl;

    interface IWMPSyncDevice
    {
        CONST_VTBL struct IWMPSyncDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPSyncDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPSyncDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPSyncDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPSyncDevice_get_friendlyName(This,pbstrName)	\
    ( (This)->lpVtbl -> get_friendlyName(This,pbstrName) ) 

#define IWMPSyncDevice_put_friendlyName(This,bstrName)	\
    ( (This)->lpVtbl -> put_friendlyName(This,bstrName) ) 

#define IWMPSyncDevice_get_deviceName(This,pbstrName)	\
    ( (This)->lpVtbl -> get_deviceName(This,pbstrName) ) 

#define IWMPSyncDevice_get_deviceId(This,pbstrDeviceId)	\
    ( (This)->lpVtbl -> get_deviceId(This,pbstrDeviceId) ) 

#define IWMPSyncDevice_get_partnershipIndex(This,plIndex)	\
    ( (This)->lpVtbl -> get_partnershipIndex(This,plIndex) ) 

#define IWMPSyncDevice_get_connected(This,pvbConnected)	\
    ( (This)->lpVtbl -> get_connected(This,pvbConnected) ) 

#define IWMPSyncDevice_get_status(This,pwmpds)	\
    ( (This)->lpVtbl -> get_status(This,pwmpds) ) 

#define IWMPSyncDevice_get_syncState(This,pwmpss)	\
    ( (This)->lpVtbl -> get_syncState(This,pwmpss) ) 

#define IWMPSyncDevice_get_progress(This,plProgress)	\
    ( (This)->lpVtbl -> get_progress(This,plProgress) ) 

#define IWMPSyncDevice_getItemInfo(This,bstrItemName,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfo(This,bstrItemName,pbstrVal) ) 

#define IWMPSyncDevice_createPartnership(This,vbShowUI)	\
    ( (This)->lpVtbl -> createPartnership(This,vbShowUI) ) 

#define IWMPSyncDevice_deletePartnership(This)	\
    ( (This)->lpVtbl -> deletePartnership(This) ) 

#define IWMPSyncDevice_start(This)	\
    ( (This)->lpVtbl -> start(This) ) 

#define IWMPSyncDevice_stop(This)	\
    ( (This)->lpVtbl -> stop(This) ) 

#define IWMPSyncDevice_showSettings(This)	\
    ( (This)->lpVtbl -> showSettings(This) ) 

#define IWMPSyncDevice_isIdentical(This,pDevice,pvbool)	\
    ( (This)->lpVtbl -> isIdentical(This,pDevice,pvbool) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPSyncDevice_INTERFACE_DEFINED__ */


#ifndef __IWMPSyncServices_INTERFACE_DEFINED__
#define __IWMPSyncServices_INTERFACE_DEFINED__

/* interface IWMPSyncServices */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPSyncServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8B5050FF-E0A4-4808-B3A8-893A9E1ED894")
    IWMPSyncServices : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_deviceCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getDevice( 
            /* [in] */ long lIndex,
            /* [retval][out] */ IWMPSyncDevice **ppDevice) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPSyncServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPSyncServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPSyncServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPSyncServices * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_deviceCount )( 
            IWMPSyncServices * This,
            /* [retval][out] */ long *plCount);
        
        HRESULT ( STDMETHODCALLTYPE *getDevice )( 
            IWMPSyncServices * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ IWMPSyncDevice **ppDevice);
        
        END_INTERFACE
    } IWMPSyncServicesVtbl;

    interface IWMPSyncServices
    {
        CONST_VTBL struct IWMPSyncServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPSyncServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPSyncServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPSyncServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPSyncServices_get_deviceCount(This,plCount)	\
    ( (This)->lpVtbl -> get_deviceCount(This,plCount) ) 

#define IWMPSyncServices_getDevice(This,lIndex,ppDevice)	\
    ( (This)->lpVtbl -> getDevice(This,lIndex,ppDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPSyncServices_INTERFACE_DEFINED__ */


#ifndef __IWMPPlayerServices2_INTERFACE_DEFINED__
#define __IWMPPlayerServices2_INTERFACE_DEFINED__

/* interface IWMPPlayerServices2 */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlayerServices2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1BB1592F-F040-418a-9F71-17C7512B4D70")
    IWMPPlayerServices2 : public IWMPPlayerServices
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE setBackgroundProcessingPriority( 
            /* [in] */ BSTR bstrPriority) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPlayerServices2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlayerServices2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlayerServices2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlayerServices2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *activateUIPlugin )( 
            IWMPPlayerServices2 * This,
            /* [in] */ BSTR bstrPlugin);
        
        HRESULT ( STDMETHODCALLTYPE *setTaskPane )( 
            IWMPPlayerServices2 * This,
            /* [in] */ BSTR bstrTaskPane);
        
        HRESULT ( STDMETHODCALLTYPE *setTaskPaneURL )( 
            IWMPPlayerServices2 * This,
            /* [in] */ BSTR bstrTaskPane,
            /* [in] */ BSTR bstrURL,
            /* [in] */ BSTR bstrFriendlyName);
        
        HRESULT ( STDMETHODCALLTYPE *setBackgroundProcessingPriority )( 
            IWMPPlayerServices2 * This,
            /* [in] */ BSTR bstrPriority);
        
        END_INTERFACE
    } IWMPPlayerServices2Vtbl;

    interface IWMPPlayerServices2
    {
        CONST_VTBL struct IWMPPlayerServices2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlayerServices2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlayerServices2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlayerServices2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlayerServices2_activateUIPlugin(This,bstrPlugin)	\
    ( (This)->lpVtbl -> activateUIPlugin(This,bstrPlugin) ) 

#define IWMPPlayerServices2_setTaskPane(This,bstrTaskPane)	\
    ( (This)->lpVtbl -> setTaskPane(This,bstrTaskPane) ) 

#define IWMPPlayerServices2_setTaskPaneURL(This,bstrTaskPane,bstrURL,bstrFriendlyName)	\
    ( (This)->lpVtbl -> setTaskPaneURL(This,bstrTaskPane,bstrURL,bstrFriendlyName) ) 


#define IWMPPlayerServices2_setBackgroundProcessingPriority(This,bstrPriority)	\
    ( (This)->lpVtbl -> setBackgroundProcessingPriority(This,bstrPriority) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlayerServices2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmp_0000_0038 */
/* [local] */ 

typedef /* [public][helpstring] */ 
enum WMPRipState
    {	wmprsUnknown	= 0,
	wmprsRipping	= ( wmprsUnknown + 1 ) ,
	wmprsStopped	= ( wmprsRipping + 1 ) 
    } 	WMPRipState;

typedef /* [public][helpstring] */ 
enum WMPBurnFormat
    {	wmpbfAudioCD	= 0,
	wmpbfDataCD	= ( wmpbfAudioCD + 1 ) 
    } 	WMPBurnFormat;

typedef /* [public][helpstring] */ 
enum WMPBurnState
    {	wmpbsUnknown	= 0,
	wmpbsBusy	= ( wmpbsUnknown + 1 ) ,
	wmpbsReady	= ( wmpbsBusy + 1 ) ,
	wmpbsWaitingForDisc	= ( wmpbsReady + 1 ) ,
	wmpbsRefreshStatusPending	= ( wmpbsWaitingForDisc + 1 ) ,
	wmpbsPreparingToBurn	= ( wmpbsRefreshStatusPending + 1 ) ,
	wmpbsBurning	= ( wmpbsPreparingToBurn + 1 ) ,
	wmpbsStopped	= ( wmpbsBurning + 1 ) ,
	wmpbsErasing	= ( wmpbsStopped + 1 ) ,
	wmpbsDownloading	= ( wmpbsErasing + 1 ) 
    } 	WMPBurnState;

typedef /* [public][helpstring] */ 
enum WMPStringCollectionChangeEventType
    {	wmpsccetUnknown	= 0,
	wmpsccetInsert	= ( wmpsccetUnknown + 1 ) ,
	wmpsccetChange	= ( wmpsccetInsert + 1 ) ,
	wmpsccetDelete	= ( wmpsccetChange + 1 ) ,
	wmpsccetClear	= ( wmpsccetDelete + 1 ) ,
	wmpsccetBeginUpdates	= ( wmpsccetClear + 1 ) ,
	wmpsccetEndUpdates	= ( wmpsccetBeginUpdates + 1 ) 
    } 	WMPStringCollectionChangeEventType;



extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0038_v0_0_s_ifspec;

#ifndef __IWMPCdromRip_INTERFACE_DEFINED__
#define __IWMPCdromRip_INTERFACE_DEFINED__

/* interface IWMPCdromRip */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPCdromRip;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56E2294F-69ED-4629-A869-AEA72C0DCC2C")
    IWMPCdromRip : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ripState( 
            /* [retval][out] */ WMPRipState *pwmprs) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ripProgress( 
            /* [retval][out] */ long *plProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startRip( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stopRip( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPCdromRipVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPCdromRip * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPCdromRip * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPCdromRip * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ripState )( 
            IWMPCdromRip * This,
            /* [retval][out] */ WMPRipState *pwmprs);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ripProgress )( 
            IWMPCdromRip * This,
            /* [retval][out] */ long *plProgress);
        
        HRESULT ( STDMETHODCALLTYPE *startRip )( 
            IWMPCdromRip * This);
        
        HRESULT ( STDMETHODCALLTYPE *stopRip )( 
            IWMPCdromRip * This);
        
        END_INTERFACE
    } IWMPCdromRipVtbl;

    interface IWMPCdromRip
    {
        CONST_VTBL struct IWMPCdromRipVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPCdromRip_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPCdromRip_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPCdromRip_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPCdromRip_get_ripState(This,pwmprs)	\
    ( (This)->lpVtbl -> get_ripState(This,pwmprs) ) 

#define IWMPCdromRip_get_ripProgress(This,plProgress)	\
    ( (This)->lpVtbl -> get_ripProgress(This,plProgress) ) 

#define IWMPCdromRip_startRip(This)	\
    ( (This)->lpVtbl -> startRip(This) ) 

#define IWMPCdromRip_stopRip(This)	\
    ( (This)->lpVtbl -> stopRip(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPCdromRip_INTERFACE_DEFINED__ */


#ifndef __IWMPCdromBurn_INTERFACE_DEFINED__
#define __IWMPCdromBurn_INTERFACE_DEFINED__

/* interface IWMPCdromBurn */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPCdromBurn;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BD94DBEB-417F-4928-AA06-087D56ED9B59")
    IWMPCdromBurn : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE isAvailable( 
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getItemInfo( 
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_label( 
            /* [retval][out] */ BSTR *pbstrLabel) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_label( 
            /* [in] */ BSTR bstrLabel) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_burnFormat( 
            /* [retval][out] */ WMPBurnFormat *pwmpbf) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_burnFormat( 
            /* [in] */ WMPBurnFormat wmpbf) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_burnPlaylist( 
            /* [retval][out] */ IWMPPlaylist **ppPlaylist) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_burnPlaylist( 
            /* [in] */ IWMPPlaylist *pPlaylist) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE refreshStatus( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_burnState( 
            /* [retval][out] */ WMPBurnState *pwmpbs) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_burnProgress( 
            /* [retval][out] */ long *plProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startBurn( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stopBurn( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE erase( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPCdromBurnVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPCdromBurn * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPCdromBurn * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPCdromBurn * This);
        
        HRESULT ( STDMETHODCALLTYPE *isAvailable )( 
            IWMPCdromBurn * This,
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ VARIANT_BOOL *pIsAvailable);
        
        HRESULT ( STDMETHODCALLTYPE *getItemInfo )( 
            IWMPCdromBurn * This,
            /* [in] */ BSTR bstrItem,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_label )( 
            IWMPCdromBurn * This,
            /* [retval][out] */ BSTR *pbstrLabel);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_label )( 
            IWMPCdromBurn * This,
            /* [in] */ BSTR bstrLabel);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_burnFormat )( 
            IWMPCdromBurn * This,
            /* [retval][out] */ WMPBurnFormat *pwmpbf);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_burnFormat )( 
            IWMPCdromBurn * This,
            /* [in] */ WMPBurnFormat wmpbf);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_burnPlaylist )( 
            IWMPCdromBurn * This,
            /* [retval][out] */ IWMPPlaylist **ppPlaylist);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_burnPlaylist )( 
            IWMPCdromBurn * This,
            /* [in] */ IWMPPlaylist *pPlaylist);
        
        HRESULT ( STDMETHODCALLTYPE *refreshStatus )( 
            IWMPCdromBurn * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_burnState )( 
            IWMPCdromBurn * This,
            /* [retval][out] */ WMPBurnState *pwmpbs);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_burnProgress )( 
            IWMPCdromBurn * This,
            /* [retval][out] */ long *plProgress);
        
        HRESULT ( STDMETHODCALLTYPE *startBurn )( 
            IWMPCdromBurn * This);
        
        HRESULT ( STDMETHODCALLTYPE *stopBurn )( 
            IWMPCdromBurn * This);
        
        HRESULT ( STDMETHODCALLTYPE *erase )( 
            IWMPCdromBurn * This);
        
        END_INTERFACE
    } IWMPCdromBurnVtbl;

    interface IWMPCdromBurn
    {
        CONST_VTBL struct IWMPCdromBurnVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPCdromBurn_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPCdromBurn_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPCdromBurn_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPCdromBurn_isAvailable(This,bstrItem,pIsAvailable)	\
    ( (This)->lpVtbl -> isAvailable(This,bstrItem,pIsAvailable) ) 

#define IWMPCdromBurn_getItemInfo(This,bstrItem,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfo(This,bstrItem,pbstrVal) ) 

#define IWMPCdromBurn_get_label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_label(This,pbstrLabel) ) 

#define IWMPCdromBurn_put_label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_label(This,bstrLabel) ) 

#define IWMPCdromBurn_get_burnFormat(This,pwmpbf)	\
    ( (This)->lpVtbl -> get_burnFormat(This,pwmpbf) ) 

#define IWMPCdromBurn_put_burnFormat(This,wmpbf)	\
    ( (This)->lpVtbl -> put_burnFormat(This,wmpbf) ) 

#define IWMPCdromBurn_get_burnPlaylist(This,ppPlaylist)	\
    ( (This)->lpVtbl -> get_burnPlaylist(This,ppPlaylist) ) 

#define IWMPCdromBurn_put_burnPlaylist(This,pPlaylist)	\
    ( (This)->lpVtbl -> put_burnPlaylist(This,pPlaylist) ) 

#define IWMPCdromBurn_refreshStatus(This)	\
    ( (This)->lpVtbl -> refreshStatus(This) ) 

#define IWMPCdromBurn_get_burnState(This,pwmpbs)	\
    ( (This)->lpVtbl -> get_burnState(This,pwmpbs) ) 

#define IWMPCdromBurn_get_burnProgress(This,plProgress)	\
    ( (This)->lpVtbl -> get_burnProgress(This,plProgress) ) 

#define IWMPCdromBurn_startBurn(This)	\
    ( (This)->lpVtbl -> startBurn(This) ) 

#define IWMPCdromBurn_stopBurn(This)	\
    ( (This)->lpVtbl -> stopBurn(This) ) 

#define IWMPCdromBurn_erase(This)	\
    ( (This)->lpVtbl -> erase(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPCdromBurn_INTERFACE_DEFINED__ */


#ifndef __IWMPQuery_INTERFACE_DEFINED__
#define __IWMPQuery_INTERFACE_DEFINED__

/* interface IWMPQuery */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPQuery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a00918f3-a6b0-4bfb-9189-fd834c7bc5a5")
    IWMPQuery : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE addCondition( 
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrOperator,
            /* [in] */ BSTR bstrValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE beginNextGroup( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPQueryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPQuery * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPQuery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPQuery * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPQuery * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPQuery * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPQuery * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPQuery * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *addCondition )( 
            IWMPQuery * This,
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrOperator,
            /* [in] */ BSTR bstrValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *beginNextGroup )( 
            IWMPQuery * This);
        
        END_INTERFACE
    } IWMPQueryVtbl;

    interface IWMPQuery
    {
        CONST_VTBL struct IWMPQueryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPQuery_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPQuery_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPQuery_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPQuery_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPQuery_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPQuery_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPQuery_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPQuery_addCondition(This,bstrAttribute,bstrOperator,bstrValue)	\
    ( (This)->lpVtbl -> addCondition(This,bstrAttribute,bstrOperator,bstrValue) ) 

#define IWMPQuery_beginNextGroup(This)	\
    ( (This)->lpVtbl -> beginNextGroup(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPQuery_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmp_0000_0041 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0041_v0_0_s_ifspec;

#ifndef __IWMPMediaCollection2_INTERFACE_DEFINED__
#define __IWMPMediaCollection2_INTERFACE_DEFINED__

/* interface IWMPMediaCollection2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPMediaCollection2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8BA957F5-FD8C-4791-B82D-F840401EE474")
    IWMPMediaCollection2 : public IWMPMediaCollection
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE createQuery( 
            /* [retval][out] */ IWMPQuery **ppQuery) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getPlaylistByQuery( 
            /* [in] */ IWMPQuery *pQuery,
            /* [in] */ BSTR bstrMediaType,
            /* [in] */ BSTR bstrSortAttribute,
            /* [in] */ VARIANT_BOOL fSortAscending,
            /* [retval][out] */ IWMPPlaylist **ppPlaylist) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getStringCollectionByQuery( 
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ IWMPQuery *pQuery,
            /* [in] */ BSTR bstrMediaType,
            /* [in] */ BSTR bstrSortAttribute,
            /* [in] */ VARIANT_BOOL fSortAscending,
            /* [retval][out] */ IWMPStringCollection **ppStringCollection) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getByAttributeAndMediaType( 
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrValue,
            /* [in] */ BSTR bstrMediaType,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPMediaCollection2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPMediaCollection2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPMediaCollection2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPMediaCollection2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPMediaCollection2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPMediaCollection2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPMediaCollection2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPMediaCollection2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *add )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ IWMPMedia **ppItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAll )( 
            IWMPMediaCollection2 * This,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByName )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByGenre )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrGenre,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByAuthor )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrAuthor,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByAlbum )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrAlbum,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByAttribute )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrValue,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *remove )( 
            IWMPMediaCollection2 * This,
            /* [in] */ IWMPMedia *pItem,
            /* [in] */ VARIANT_BOOL varfDeleteFile);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeStringCollection )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrMediaType,
            /* [retval][out] */ IWMPStringCollection **ppStringCollection);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getMediaAtom )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ long *plAtom);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *setDeleted )( 
            IWMPMediaCollection2 * This,
            /* [in] */ IWMPMedia *pItem,
            /* [in] */ VARIANT_BOOL varfIsDeleted);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isDeleted )( 
            IWMPMediaCollection2 * This,
            /* [in] */ IWMPMedia *pItem,
            /* [retval][out] */ VARIANT_BOOL *pvarfIsDeleted);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createQuery )( 
            IWMPMediaCollection2 * This,
            /* [retval][out] */ IWMPQuery **ppQuery);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getPlaylistByQuery )( 
            IWMPMediaCollection2 * This,
            /* [in] */ IWMPQuery *pQuery,
            /* [in] */ BSTR bstrMediaType,
            /* [in] */ BSTR bstrSortAttribute,
            /* [in] */ VARIANT_BOOL fSortAscending,
            /* [retval][out] */ IWMPPlaylist **ppPlaylist);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getStringCollectionByQuery )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ IWMPQuery *pQuery,
            /* [in] */ BSTR bstrMediaType,
            /* [in] */ BSTR bstrSortAttribute,
            /* [in] */ VARIANT_BOOL fSortAscending,
            /* [retval][out] */ IWMPStringCollection **ppStringCollection);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getByAttributeAndMediaType )( 
            IWMPMediaCollection2 * This,
            /* [in] */ BSTR bstrAttribute,
            /* [in] */ BSTR bstrValue,
            /* [in] */ BSTR bstrMediaType,
            /* [retval][out] */ IWMPPlaylist **ppMediaItems);
        
        END_INTERFACE
    } IWMPMediaCollection2Vtbl;

    interface IWMPMediaCollection2
    {
        CONST_VTBL struct IWMPMediaCollection2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPMediaCollection2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPMediaCollection2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPMediaCollection2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPMediaCollection2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPMediaCollection2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPMediaCollection2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPMediaCollection2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPMediaCollection2_add(This,bstrURL,ppItem)	\
    ( (This)->lpVtbl -> add(This,bstrURL,ppItem) ) 

#define IWMPMediaCollection2_getAll(This,ppMediaItems)	\
    ( (This)->lpVtbl -> getAll(This,ppMediaItems) ) 

#define IWMPMediaCollection2_getByName(This,bstrName,ppMediaItems)	\
    ( (This)->lpVtbl -> getByName(This,bstrName,ppMediaItems) ) 

#define IWMPMediaCollection2_getByGenre(This,bstrGenre,ppMediaItems)	\
    ( (This)->lpVtbl -> getByGenre(This,bstrGenre,ppMediaItems) ) 

#define IWMPMediaCollection2_getByAuthor(This,bstrAuthor,ppMediaItems)	\
    ( (This)->lpVtbl -> getByAuthor(This,bstrAuthor,ppMediaItems) ) 

#define IWMPMediaCollection2_getByAlbum(This,bstrAlbum,ppMediaItems)	\
    ( (This)->lpVtbl -> getByAlbum(This,bstrAlbum,ppMediaItems) ) 

#define IWMPMediaCollection2_getByAttribute(This,bstrAttribute,bstrValue,ppMediaItems)	\
    ( (This)->lpVtbl -> getByAttribute(This,bstrAttribute,bstrValue,ppMediaItems) ) 

#define IWMPMediaCollection2_remove(This,pItem,varfDeleteFile)	\
    ( (This)->lpVtbl -> remove(This,pItem,varfDeleteFile) ) 

#define IWMPMediaCollection2_getAttributeStringCollection(This,bstrAttribute,bstrMediaType,ppStringCollection)	\
    ( (This)->lpVtbl -> getAttributeStringCollection(This,bstrAttribute,bstrMediaType,ppStringCollection) ) 

#define IWMPMediaCollection2_getMediaAtom(This,bstrItemName,plAtom)	\
    ( (This)->lpVtbl -> getMediaAtom(This,bstrItemName,plAtom) ) 

#define IWMPMediaCollection2_setDeleted(This,pItem,varfIsDeleted)	\
    ( (This)->lpVtbl -> setDeleted(This,pItem,varfIsDeleted) ) 

#define IWMPMediaCollection2_isDeleted(This,pItem,pvarfIsDeleted)	\
    ( (This)->lpVtbl -> isDeleted(This,pItem,pvarfIsDeleted) ) 


#define IWMPMediaCollection2_createQuery(This,ppQuery)	\
    ( (This)->lpVtbl -> createQuery(This,ppQuery) ) 

#define IWMPMediaCollection2_getPlaylistByQuery(This,pQuery,bstrMediaType,bstrSortAttribute,fSortAscending,ppPlaylist)	\
    ( (This)->lpVtbl -> getPlaylistByQuery(This,pQuery,bstrMediaType,bstrSortAttribute,fSortAscending,ppPlaylist) ) 

#define IWMPMediaCollection2_getStringCollectionByQuery(This,bstrAttribute,pQuery,bstrMediaType,bstrSortAttribute,fSortAscending,ppStringCollection)	\
    ( (This)->lpVtbl -> getStringCollectionByQuery(This,bstrAttribute,pQuery,bstrMediaType,bstrSortAttribute,fSortAscending,ppStringCollection) ) 

#define IWMPMediaCollection2_getByAttributeAndMediaType(This,bstrAttribute,bstrValue,bstrMediaType,ppMediaItems)	\
    ( (This)->lpVtbl -> getByAttributeAndMediaType(This,bstrAttribute,bstrValue,bstrMediaType,ppMediaItems) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPMediaCollection2_INTERFACE_DEFINED__ */


#ifndef __IWMPStringCollection2_INTERFACE_DEFINED__
#define __IWMPStringCollection2_INTERFACE_DEFINED__

/* interface IWMPStringCollection2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMPStringCollection2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46ad648d-53f1-4a74-92e2-2a1b68d63fd4")
    IWMPStringCollection2 : public IWMPStringCollection
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE isIdentical( 
            /* [in] */ IWMPStringCollection2 *pIWMPStringCollection2,
            /* [retval][out] */ VARIANT_BOOL *pvbool) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getItemInfo( 
            /* [in] */ long lCollectionIndex,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getAttributeCountByType( 
            /* [in] */ long lCollectionIndex,
            /* [in] */ BSTR bstrType,
            /* [in] */ BSTR bstrLanguage,
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE getItemInfoByType( 
            /* [in] */ long lCollectionIndex,
            /* [in] */ BSTR bstrType,
            /* [in] */ BSTR bstrLanguage,
            /* [in] */ long lAttributeIndex,
            /* [retval][out] */ VARIANT *pvarValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPStringCollection2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPStringCollection2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPStringCollection2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPStringCollection2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMPStringCollection2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMPStringCollection2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMPStringCollection2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMPStringCollection2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_count )( 
            IWMPStringCollection2 * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *item )( 
            IWMPStringCollection2 * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *isIdentical )( 
            IWMPStringCollection2 * This,
            /* [in] */ IWMPStringCollection2 *pIWMPStringCollection2,
            /* [retval][out] */ VARIANT_BOOL *pvbool);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfo )( 
            IWMPStringCollection2 * This,
            /* [in] */ long lCollectionIndex,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getAttributeCountByType )( 
            IWMPStringCollection2 * This,
            /* [in] */ long lCollectionIndex,
            /* [in] */ BSTR bstrType,
            /* [in] */ BSTR bstrLanguage,
            /* [retval][out] */ long *plCount);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getItemInfoByType )( 
            IWMPStringCollection2 * This,
            /* [in] */ long lCollectionIndex,
            /* [in] */ BSTR bstrType,
            /* [in] */ BSTR bstrLanguage,
            /* [in] */ long lAttributeIndex,
            /* [retval][out] */ VARIANT *pvarValue);
        
        END_INTERFACE
    } IWMPStringCollection2Vtbl;

    interface IWMPStringCollection2
    {
        CONST_VTBL struct IWMPStringCollection2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPStringCollection2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPStringCollection2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPStringCollection2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPStringCollection2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMPStringCollection2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMPStringCollection2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMPStringCollection2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMPStringCollection2_get_count(This,plCount)	\
    ( (This)->lpVtbl -> get_count(This,plCount) ) 

#define IWMPStringCollection2_item(This,lIndex,pbstrString)	\
    ( (This)->lpVtbl -> item(This,lIndex,pbstrString) ) 


#define IWMPStringCollection2_isIdentical(This,pIWMPStringCollection2,pvbool)	\
    ( (This)->lpVtbl -> isIdentical(This,pIWMPStringCollection2,pvbool) ) 

#define IWMPStringCollection2_getItemInfo(This,lCollectionIndex,bstrItemName,pbstrValue)	\
    ( (This)->lpVtbl -> getItemInfo(This,lCollectionIndex,bstrItemName,pbstrValue) ) 

#define IWMPStringCollection2_getAttributeCountByType(This,lCollectionIndex,bstrType,bstrLanguage,plCount)	\
    ( (This)->lpVtbl -> getAttributeCountByType(This,lCollectionIndex,bstrType,bstrLanguage,plCount) ) 

#define IWMPStringCollection2_getItemInfoByType(This,lCollectionIndex,bstrType,bstrLanguage,lAttributeIndex,pvarValue)	\
    ( (This)->lpVtbl -> getItemInfoByType(This,lCollectionIndex,bstrType,bstrLanguage,lAttributeIndex,pvarValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPStringCollection2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmp_0000_0043 */
/* [local] */ 

typedef /* [public][helpstring] */ 
enum WMPLibraryType
    {	wmpltUnknown	= 0,
	wmpltAll	= ( wmpltUnknown + 1 ) ,
	wmpltLocal	= ( wmpltAll + 1 ) ,
	wmpltRemote	= ( wmpltLocal + 1 ) ,
	wmpltDisc	= ( wmpltRemote + 1 ) ,
	wmpltPortableDevice	= ( wmpltDisc + 1 ) 
    } 	WMPLibraryType;



extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0043_v0_0_s_ifspec;

#ifndef __IWMPLibrary_INTERFACE_DEFINED__
#define __IWMPLibrary_INTERFACE_DEFINED__

/* interface IWMPLibrary */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPLibrary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3DF47861-7DF1-4c1f-A81B-4C26F0F7A7C6")
    IWMPLibrary : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [retval][out] */ WMPLibraryType *pwmplt) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_mediaCollection( 
            /* [retval][out] */ IWMPMediaCollection **ppIWMPMediaCollection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isIdentical( 
            /* [in] */ IWMPLibrary *pIWMPLibrary,
            /* [retval][out] */ VARIANT_BOOL *pvbool) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPLibraryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPLibrary * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPLibrary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPLibrary * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_name )( 
            IWMPLibrary * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_type )( 
            IWMPLibrary * This,
            /* [retval][out] */ WMPLibraryType *pwmplt);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_mediaCollection )( 
            IWMPLibrary * This,
            /* [retval][out] */ IWMPMediaCollection **ppIWMPMediaCollection);
        
        HRESULT ( STDMETHODCALLTYPE *isIdentical )( 
            IWMPLibrary * This,
            /* [in] */ IWMPLibrary *pIWMPLibrary,
            /* [retval][out] */ VARIANT_BOOL *pvbool);
        
        END_INTERFACE
    } IWMPLibraryVtbl;

    interface IWMPLibrary
    {
        CONST_VTBL struct IWMPLibraryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPLibrary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPLibrary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPLibrary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPLibrary_get_name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_name(This,pbstrName) ) 

#define IWMPLibrary_get_type(This,pwmplt)	\
    ( (This)->lpVtbl -> get_type(This,pwmplt) ) 

#define IWMPLibrary_get_mediaCollection(This,ppIWMPMediaCollection)	\
    ( (This)->lpVtbl -> get_mediaCollection(This,ppIWMPMediaCollection) ) 

#define IWMPLibrary_isIdentical(This,pIWMPLibrary,pvbool)	\
    ( (This)->lpVtbl -> isIdentical(This,pIWMPLibrary,pvbool) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPLibrary_INTERFACE_DEFINED__ */


#ifndef __IWMPLibraryServices_INTERFACE_DEFINED__
#define __IWMPLibraryServices_INTERFACE_DEFINED__

/* interface IWMPLibraryServices */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPLibraryServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("39C2F8D5-1CF2-4d5e-AE09-D73492CF9EAA")
    IWMPLibraryServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE getCountByType( 
            /* [in] */ WMPLibraryType wmplt,
            /* [retval][out] */ long *plCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getLibraryByType( 
            /* [in] */ WMPLibraryType wmplt,
            /* [in] */ long lIndex,
            /* [retval][out] */ IWMPLibrary **ppIWMPLibrary) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPLibraryServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPLibraryServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPLibraryServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPLibraryServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *getCountByType )( 
            IWMPLibraryServices * This,
            /* [in] */ WMPLibraryType wmplt,
            /* [retval][out] */ long *plCount);
        
        HRESULT ( STDMETHODCALLTYPE *getLibraryByType )( 
            IWMPLibraryServices * This,
            /* [in] */ WMPLibraryType wmplt,
            /* [in] */ long lIndex,
            /* [retval][out] */ IWMPLibrary **ppIWMPLibrary);
        
        END_INTERFACE
    } IWMPLibraryServicesVtbl;

    interface IWMPLibraryServices
    {
        CONST_VTBL struct IWMPLibraryServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPLibraryServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPLibraryServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPLibraryServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPLibraryServices_getCountByType(This,wmplt,plCount)	\
    ( (This)->lpVtbl -> getCountByType(This,wmplt,plCount) ) 

#define IWMPLibraryServices_getLibraryByType(This,wmplt,lIndex,ppIWMPLibrary)	\
    ( (This)->lpVtbl -> getLibraryByType(This,wmplt,lIndex,ppIWMPLibrary) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPLibraryServices_INTERFACE_DEFINED__ */


#ifndef __IWMPLibrarySharingServices_INTERFACE_DEFINED__
#define __IWMPLibrarySharingServices_INTERFACE_DEFINED__

/* interface IWMPLibrarySharingServices */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPLibrarySharingServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("82CBA86B-9F04-474b-A365-D6DD1466E541")
    IWMPLibrarySharingServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE isLibraryShared( 
            /* [retval][out] */ VARIANT_BOOL *pvbShared) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE isLibrarySharingEnabled( 
            /* [retval][out] */ VARIANT_BOOL *pvbEnabled) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE showLibrarySharing( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPLibrarySharingServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPLibrarySharingServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPLibrarySharingServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPLibrarySharingServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *isLibraryShared )( 
            IWMPLibrarySharingServices * This,
            /* [retval][out] */ VARIANT_BOOL *pvbShared);
        
        HRESULT ( STDMETHODCALLTYPE *isLibrarySharingEnabled )( 
            IWMPLibrarySharingServices * This,
            /* [retval][out] */ VARIANT_BOOL *pvbEnabled);
        
        HRESULT ( STDMETHODCALLTYPE *showLibrarySharing )( 
            IWMPLibrarySharingServices * This);
        
        END_INTERFACE
    } IWMPLibrarySharingServicesVtbl;

    interface IWMPLibrarySharingServices
    {
        CONST_VTBL struct IWMPLibrarySharingServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPLibrarySharingServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPLibrarySharingServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPLibrarySharingServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPLibrarySharingServices_isLibraryShared(This,pvbShared)	\
    ( (This)->lpVtbl -> isLibraryShared(This,pvbShared) ) 

#define IWMPLibrarySharingServices_isLibrarySharingEnabled(This,pvbEnabled)	\
    ( (This)->lpVtbl -> isLibrarySharingEnabled(This,pvbEnabled) ) 

#define IWMPLibrarySharingServices_showLibrarySharing(This)	\
    ( (This)->lpVtbl -> showLibrarySharing(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPLibrarySharingServices_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmp_0000_0046 */
/* [local] */ 

typedef /* [public][helpstring] */ 
enum WMPFolderScanState
    {	wmpfssUnknown	= 0,
	wmpfssScanning	= ( wmpfssUnknown + 1 ) ,
	wmpfssUpdating	= ( wmpfssScanning + 1 ) ,
	wmpfssStopped	= ( wmpfssUpdating + 1 ) 
    } 	WMPFolderScanState;



extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0046_v0_0_s_ifspec;

#ifndef __IWMPFolderMonitorServices_INTERFACE_DEFINED__
#define __IWMPFolderMonitorServices_INTERFACE_DEFINED__

/* interface IWMPFolderMonitorServices */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPFolderMonitorServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("788C8743-E57F-439d-A468-5BC77F2E59C6")
    IWMPFolderMonitorServices : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE item( 
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ BSTR bstrFolder) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE remove( 
            /* [in] */ long lIndex) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_scanState( 
            /* [retval][out] */ WMPFolderScanState *pwmpfss) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_currentFolder( 
            /* [retval][out] */ BSTR *pbstrFolder) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_scannedFilesCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_addedFilesCount( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_updateProgress( 
            /* [retval][out] */ long *plProgress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE startScan( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stopScan( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPFolderMonitorServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPFolderMonitorServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPFolderMonitorServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPFolderMonitorServices * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_count )( 
            IWMPFolderMonitorServices * This,
            /* [retval][out] */ long *plCount);
        
        HRESULT ( STDMETHODCALLTYPE *item )( 
            IWMPFolderMonitorServices * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ BSTR *pbstrFolder);
        
        HRESULT ( STDMETHODCALLTYPE *add )( 
            IWMPFolderMonitorServices * This,
            /* [in] */ BSTR bstrFolder);
        
        HRESULT ( STDMETHODCALLTYPE *remove )( 
            IWMPFolderMonitorServices * This,
            /* [in] */ long lIndex);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_scanState )( 
            IWMPFolderMonitorServices * This,
            /* [retval][out] */ WMPFolderScanState *pwmpfss);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_currentFolder )( 
            IWMPFolderMonitorServices * This,
            /* [retval][out] */ BSTR *pbstrFolder);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_scannedFilesCount )( 
            IWMPFolderMonitorServices * This,
            /* [retval][out] */ long *plCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_addedFilesCount )( 
            IWMPFolderMonitorServices * This,
            /* [retval][out] */ long *plCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_updateProgress )( 
            IWMPFolderMonitorServices * This,
            /* [retval][out] */ long *plProgress);
        
        HRESULT ( STDMETHODCALLTYPE *startScan )( 
            IWMPFolderMonitorServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *stopScan )( 
            IWMPFolderMonitorServices * This);
        
        END_INTERFACE
    } IWMPFolderMonitorServicesVtbl;

    interface IWMPFolderMonitorServices
    {
        CONST_VTBL struct IWMPFolderMonitorServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPFolderMonitorServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPFolderMonitorServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPFolderMonitorServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPFolderMonitorServices_get_count(This,plCount)	\
    ( (This)->lpVtbl -> get_count(This,plCount) ) 

#define IWMPFolderMonitorServices_item(This,lIndex,pbstrFolder)	\
    ( (This)->lpVtbl -> item(This,lIndex,pbstrFolder) ) 

#define IWMPFolderMonitorServices_add(This,bstrFolder)	\
    ( (This)->lpVtbl -> add(This,bstrFolder) ) 

#define IWMPFolderMonitorServices_remove(This,lIndex)	\
    ( (This)->lpVtbl -> remove(This,lIndex) ) 

#define IWMPFolderMonitorServices_get_scanState(This,pwmpfss)	\
    ( (This)->lpVtbl -> get_scanState(This,pwmpfss) ) 

#define IWMPFolderMonitorServices_get_currentFolder(This,pbstrFolder)	\
    ( (This)->lpVtbl -> get_currentFolder(This,pbstrFolder) ) 

#define IWMPFolderMonitorServices_get_scannedFilesCount(This,plCount)	\
    ( (This)->lpVtbl -> get_scannedFilesCount(This,plCount) ) 

#define IWMPFolderMonitorServices_get_addedFilesCount(This,plCount)	\
    ( (This)->lpVtbl -> get_addedFilesCount(This,plCount) ) 

#define IWMPFolderMonitorServices_get_updateProgress(This,plProgress)	\
    ( (This)->lpVtbl -> get_updateProgress(This,plProgress) ) 

#define IWMPFolderMonitorServices_startScan(This)	\
    ( (This)->lpVtbl -> startScan(This) ) 

#define IWMPFolderMonitorServices_stopScan(This)	\
    ( (This)->lpVtbl -> stopScan(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPFolderMonitorServices_INTERFACE_DEFINED__ */


#ifndef __IWMPSyncDevice2_INTERFACE_DEFINED__
#define __IWMPSyncDevice2_INTERFACE_DEFINED__

/* interface IWMPSyncDevice2 */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPSyncDevice2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("88AFB4B2-140A-44d2-91E6-4543DA467CD1")
    IWMPSyncDevice2 : public IWMPSyncDevice
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE setItemInfo( 
            /* [in] */ BSTR bstrItemName,
            /* [in] */ BSTR bstrVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPSyncDevice2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPSyncDevice2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPSyncDevice2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPSyncDevice2 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_friendlyName )( 
            IWMPSyncDevice2 * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_friendlyName )( 
            IWMPSyncDevice2 * This,
            /* [in] */ BSTR bstrName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_deviceName )( 
            IWMPSyncDevice2 * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_deviceId )( 
            IWMPSyncDevice2 * This,
            /* [retval][out] */ BSTR *pbstrDeviceId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_partnershipIndex )( 
            IWMPSyncDevice2 * This,
            /* [retval][out] */ long *plIndex);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_connected )( 
            IWMPSyncDevice2 * This,
            /* [retval][out] */ VARIANT_BOOL *pvbConnected);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_status )( 
            IWMPSyncDevice2 * This,
            /* [retval][out] */ WMPDeviceStatus *pwmpds);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_syncState )( 
            IWMPSyncDevice2 * This,
            /* [retval][out] */ WMPSyncState *pwmpss);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_progress )( 
            IWMPSyncDevice2 * This,
            /* [retval][out] */ long *plProgress);
        
        HRESULT ( STDMETHODCALLTYPE *getItemInfo )( 
            IWMPSyncDevice2 * This,
            /* [in] */ BSTR bstrItemName,
            /* [retval][out] */ BSTR *pbstrVal);
        
        HRESULT ( STDMETHODCALLTYPE *createPartnership )( 
            IWMPSyncDevice2 * This,
            /* [in] */ VARIANT_BOOL vbShowUI);
        
        HRESULT ( STDMETHODCALLTYPE *deletePartnership )( 
            IWMPSyncDevice2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *start )( 
            IWMPSyncDevice2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *stop )( 
            IWMPSyncDevice2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *showSettings )( 
            IWMPSyncDevice2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *isIdentical )( 
            IWMPSyncDevice2 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [retval][out] */ VARIANT_BOOL *pvbool);
        
        HRESULT ( STDMETHODCALLTYPE *setItemInfo )( 
            IWMPSyncDevice2 * This,
            /* [in] */ BSTR bstrItemName,
            /* [in] */ BSTR bstrVal);
        
        END_INTERFACE
    } IWMPSyncDevice2Vtbl;

    interface IWMPSyncDevice2
    {
        CONST_VTBL struct IWMPSyncDevice2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPSyncDevice2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPSyncDevice2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPSyncDevice2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPSyncDevice2_get_friendlyName(This,pbstrName)	\
    ( (This)->lpVtbl -> get_friendlyName(This,pbstrName) ) 

#define IWMPSyncDevice2_put_friendlyName(This,bstrName)	\
    ( (This)->lpVtbl -> put_friendlyName(This,bstrName) ) 

#define IWMPSyncDevice2_get_deviceName(This,pbstrName)	\
    ( (This)->lpVtbl -> get_deviceName(This,pbstrName) ) 

#define IWMPSyncDevice2_get_deviceId(This,pbstrDeviceId)	\
    ( (This)->lpVtbl -> get_deviceId(This,pbstrDeviceId) ) 

#define IWMPSyncDevice2_get_partnershipIndex(This,plIndex)	\
    ( (This)->lpVtbl -> get_partnershipIndex(This,plIndex) ) 

#define IWMPSyncDevice2_get_connected(This,pvbConnected)	\
    ( (This)->lpVtbl -> get_connected(This,pvbConnected) ) 

#define IWMPSyncDevice2_get_status(This,pwmpds)	\
    ( (This)->lpVtbl -> get_status(This,pwmpds) ) 

#define IWMPSyncDevice2_get_syncState(This,pwmpss)	\
    ( (This)->lpVtbl -> get_syncState(This,pwmpss) ) 

#define IWMPSyncDevice2_get_progress(This,plProgress)	\
    ( (This)->lpVtbl -> get_progress(This,plProgress) ) 

#define IWMPSyncDevice2_getItemInfo(This,bstrItemName,pbstrVal)	\
    ( (This)->lpVtbl -> getItemInfo(This,bstrItemName,pbstrVal) ) 

#define IWMPSyncDevice2_createPartnership(This,vbShowUI)	\
    ( (This)->lpVtbl -> createPartnership(This,vbShowUI) ) 

#define IWMPSyncDevice2_deletePartnership(This)	\
    ( (This)->lpVtbl -> deletePartnership(This) ) 

#define IWMPSyncDevice2_start(This)	\
    ( (This)->lpVtbl -> start(This) ) 

#define IWMPSyncDevice2_stop(This)	\
    ( (This)->lpVtbl -> stop(This) ) 

#define IWMPSyncDevice2_showSettings(This)	\
    ( (This)->lpVtbl -> showSettings(This) ) 

#define IWMPSyncDevice2_isIdentical(This,pDevice,pvbool)	\
    ( (This)->lpVtbl -> isIdentical(This,pDevice,pvbool) ) 


#define IWMPSyncDevice2_setItemInfo(This,bstrItemName,bstrVal)	\
    ( (This)->lpVtbl -> setItemInfo(This,bstrItemName,bstrVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPSyncDevice2_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmp_0000_0048 */
/* [local] */ 

struct DECLSPEC_UUID("6BF52A50-394A-11d3-B153-00C04F79FAA6") WMPLib;
struct DECLSPEC_UUID("DF333473-2CF7-4be2-907F-9AAD5661364F") WMPRemoteMediaServices;


extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmp_0000_0048_v0_0_s_ifspec;


#ifndef __WMPLib_LIBRARY_DEFINED__
#define __WMPLib_LIBRARY_DEFINED__

/* library WMPLib */
/* [helpstring][version][uuid] */ 










EXTERN_C const IID LIBID_WMPLib;

#ifndef __IWMPEvents_INTERFACE_DEFINED__
#define __IWMPEvents_INTERFACE_DEFINED__

/* interface IWMPEvents */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("19A6627B-DA9E-47c1-BB23-00B5E668236A")
    IWMPEvents : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE OpenStateChange( 
            /* [in] */ long NewState) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PlayStateChange( 
            /* [in] */ long NewState) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE AudioLanguageChange( 
            /* [in] */ long LangID) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE StatusChange( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE ScriptCommand( 
            /* [in] */ BSTR scType,
            /* [in] */ BSTR Param) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE NewStream( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE Disconnect( 
            /* [in] */ long Result) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE Buffering( 
            /* [in] */ VARIANT_BOOL Start) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE Error( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE Warning( 
            /* [in] */ long WarningType,
            /* [in] */ long Param,
            /* [in] */ BSTR Description) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE EndOfStream( 
            /* [in] */ long Result) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PositionChange( 
            /* [in] */ double oldPosition,
            /* [in] */ double newPosition) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MarkerHit( 
            /* [in] */ long MarkerNum) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE DurationUnitChange( 
            /* [in] */ long NewDurationUnit) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CdromMediaChange( 
            /* [in] */ long CdromNum) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PlaylistChange( 
            /* [in] */ IDispatch *Playlist,
            /* [in] */ WMPPlaylistChangeEventType change) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CurrentPlaylistChange( 
            /* [in] */ WMPPlaylistChangeEventType change) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CurrentPlaylistItemAvailable( 
            /* [in] */ BSTR bstrItemName) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MediaChange( 
            /* [in] */ IDispatch *Item) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CurrentMediaItemAvailable( 
            /* [in] */ BSTR bstrItemName) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CurrentItemChange( 
            /* [in] */ IDispatch *pdispMedia) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MediaCollectionChange( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MediaCollectionAttributeStringAdded( 
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrAttribVal) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MediaCollectionAttributeStringRemoved( 
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrAttribVal) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MediaCollectionAttributeStringChanged( 
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrOldAttribVal,
            /* [in] */ BSTR bstrNewAttribVal) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PlaylistCollectionChange( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PlaylistCollectionPlaylistAdded( 
            /* [in] */ BSTR bstrPlaylistName) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PlaylistCollectionPlaylistRemoved( 
            /* [in] */ BSTR bstrPlaylistName) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PlaylistCollectionPlaylistSetAsDeleted( 
            /* [in] */ BSTR bstrPlaylistName,
            /* [in] */ VARIANT_BOOL varfIsDeleted) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE ModeChange( 
            /* [in] */ BSTR ModeName,
            /* [in] */ VARIANT_BOOL NewValue) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MediaError( 
            /* [in] */ IDispatch *pMediaObject) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE OpenPlaylistSwitch( 
            /* [in] */ IDispatch *pItem) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE DomainChange( 
            /* [in] */ BSTR strDomain) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE SwitchedToPlayerApplication( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE SwitchedToControl( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PlayerDockedStateChange( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE PlayerReconnect( void) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE Click( 
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE DoubleClick( 
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE KeyDown( 
            /* [in] */ short nKeyCode,
            /* [in] */ short nShiftState) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE KeyPress( 
            /* [in] */ short nKeyAscii) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE KeyUp( 
            /* [in] */ short nKeyCode,
            /* [in] */ short nShiftState) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MouseDown( 
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MouseMove( 
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MouseUp( 
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *OpenStateChange )( 
            IWMPEvents * This,
            /* [in] */ long NewState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayStateChange )( 
            IWMPEvents * This,
            /* [in] */ long NewState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *AudioLanguageChange )( 
            IWMPEvents * This,
            /* [in] */ long LangID);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *StatusChange )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *ScriptCommand )( 
            IWMPEvents * This,
            /* [in] */ BSTR scType,
            /* [in] */ BSTR Param);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *NewStream )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Disconnect )( 
            IWMPEvents * This,
            /* [in] */ long Result);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Buffering )( 
            IWMPEvents * This,
            /* [in] */ VARIANT_BOOL Start);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Error )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Warning )( 
            IWMPEvents * This,
            /* [in] */ long WarningType,
            /* [in] */ long Param,
            /* [in] */ BSTR Description);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *EndOfStream )( 
            IWMPEvents * This,
            /* [in] */ long Result);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PositionChange )( 
            IWMPEvents * This,
            /* [in] */ double oldPosition,
            /* [in] */ double newPosition);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MarkerHit )( 
            IWMPEvents * This,
            /* [in] */ long MarkerNum);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DurationUnitChange )( 
            IWMPEvents * This,
            /* [in] */ long NewDurationUnit);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CdromMediaChange )( 
            IWMPEvents * This,
            /* [in] */ long CdromNum);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistChange )( 
            IWMPEvents * This,
            /* [in] */ IDispatch *Playlist,
            /* [in] */ WMPPlaylistChangeEventType change);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentPlaylistChange )( 
            IWMPEvents * This,
            /* [in] */ WMPPlaylistChangeEventType change);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentPlaylistItemAvailable )( 
            IWMPEvents * This,
            /* [in] */ BSTR bstrItemName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaChange )( 
            IWMPEvents * This,
            /* [in] */ IDispatch *Item);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentMediaItemAvailable )( 
            IWMPEvents * This,
            /* [in] */ BSTR bstrItemName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentItemChange )( 
            IWMPEvents * This,
            /* [in] */ IDispatch *pdispMedia);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionChange )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringAdded )( 
            IWMPEvents * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringRemoved )( 
            IWMPEvents * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringChanged )( 
            IWMPEvents * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrOldAttribVal,
            /* [in] */ BSTR bstrNewAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionChange )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistAdded )( 
            IWMPEvents * This,
            /* [in] */ BSTR bstrPlaylistName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistRemoved )( 
            IWMPEvents * This,
            /* [in] */ BSTR bstrPlaylistName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistSetAsDeleted )( 
            IWMPEvents * This,
            /* [in] */ BSTR bstrPlaylistName,
            /* [in] */ VARIANT_BOOL varfIsDeleted);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *ModeChange )( 
            IWMPEvents * This,
            /* [in] */ BSTR ModeName,
            /* [in] */ VARIANT_BOOL NewValue);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaError )( 
            IWMPEvents * This,
            /* [in] */ IDispatch *pMediaObject);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *OpenPlaylistSwitch )( 
            IWMPEvents * This,
            /* [in] */ IDispatch *pItem);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DomainChange )( 
            IWMPEvents * This,
            /* [in] */ BSTR strDomain);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *SwitchedToPlayerApplication )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *SwitchedToControl )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayerDockedStateChange )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayerReconnect )( 
            IWMPEvents * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Click )( 
            IWMPEvents * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DoubleClick )( 
            IWMPEvents * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyDown )( 
            IWMPEvents * This,
            /* [in] */ short nKeyCode,
            /* [in] */ short nShiftState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyPress )( 
            IWMPEvents * This,
            /* [in] */ short nKeyAscii);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyUp )( 
            IWMPEvents * This,
            /* [in] */ short nKeyCode,
            /* [in] */ short nShiftState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseDown )( 
            IWMPEvents * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseMove )( 
            IWMPEvents * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseUp )( 
            IWMPEvents * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        END_INTERFACE
    } IWMPEventsVtbl;

    interface IWMPEvents
    {
        CONST_VTBL struct IWMPEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPEvents_OpenStateChange(This,NewState)	\
    ( (This)->lpVtbl -> OpenStateChange(This,NewState) ) 

#define IWMPEvents_PlayStateChange(This,NewState)	\
    ( (This)->lpVtbl -> PlayStateChange(This,NewState) ) 

#define IWMPEvents_AudioLanguageChange(This,LangID)	\
    ( (This)->lpVtbl -> AudioLanguageChange(This,LangID) ) 

#define IWMPEvents_StatusChange(This)	\
    ( (This)->lpVtbl -> StatusChange(This) ) 

#define IWMPEvents_ScriptCommand(This,scType,Param)	\
    ( (This)->lpVtbl -> ScriptCommand(This,scType,Param) ) 

#define IWMPEvents_NewStream(This)	\
    ( (This)->lpVtbl -> NewStream(This) ) 

#define IWMPEvents_Disconnect(This,Result)	\
    ( (This)->lpVtbl -> Disconnect(This,Result) ) 

#define IWMPEvents_Buffering(This,Start)	\
    ( (This)->lpVtbl -> Buffering(This,Start) ) 

#define IWMPEvents_Error(This)	\
    ( (This)->lpVtbl -> Error(This) ) 

#define IWMPEvents_Warning(This,WarningType,Param,Description)	\
    ( (This)->lpVtbl -> Warning(This,WarningType,Param,Description) ) 

#define IWMPEvents_EndOfStream(This,Result)	\
    ( (This)->lpVtbl -> EndOfStream(This,Result) ) 

#define IWMPEvents_PositionChange(This,oldPosition,newPosition)	\
    ( (This)->lpVtbl -> PositionChange(This,oldPosition,newPosition) ) 

#define IWMPEvents_MarkerHit(This,MarkerNum)	\
    ( (This)->lpVtbl -> MarkerHit(This,MarkerNum) ) 

#define IWMPEvents_DurationUnitChange(This,NewDurationUnit)	\
    ( (This)->lpVtbl -> DurationUnitChange(This,NewDurationUnit) ) 

#define IWMPEvents_CdromMediaChange(This,CdromNum)	\
    ( (This)->lpVtbl -> CdromMediaChange(This,CdromNum) ) 

#define IWMPEvents_PlaylistChange(This,Playlist,change)	\
    ( (This)->lpVtbl -> PlaylistChange(This,Playlist,change) ) 

#define IWMPEvents_CurrentPlaylistChange(This,change)	\
    ( (This)->lpVtbl -> CurrentPlaylistChange(This,change) ) 

#define IWMPEvents_CurrentPlaylistItemAvailable(This,bstrItemName)	\
    ( (This)->lpVtbl -> CurrentPlaylistItemAvailable(This,bstrItemName) ) 

#define IWMPEvents_MediaChange(This,Item)	\
    ( (This)->lpVtbl -> MediaChange(This,Item) ) 

#define IWMPEvents_CurrentMediaItemAvailable(This,bstrItemName)	\
    ( (This)->lpVtbl -> CurrentMediaItemAvailable(This,bstrItemName) ) 

#define IWMPEvents_CurrentItemChange(This,pdispMedia)	\
    ( (This)->lpVtbl -> CurrentItemChange(This,pdispMedia) ) 

#define IWMPEvents_MediaCollectionChange(This)	\
    ( (This)->lpVtbl -> MediaCollectionChange(This) ) 

#define IWMPEvents_MediaCollectionAttributeStringAdded(This,bstrAttribName,bstrAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringAdded(This,bstrAttribName,bstrAttribVal) ) 

#define IWMPEvents_MediaCollectionAttributeStringRemoved(This,bstrAttribName,bstrAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringRemoved(This,bstrAttribName,bstrAttribVal) ) 

#define IWMPEvents_MediaCollectionAttributeStringChanged(This,bstrAttribName,bstrOldAttribVal,bstrNewAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringChanged(This,bstrAttribName,bstrOldAttribVal,bstrNewAttribVal) ) 

#define IWMPEvents_PlaylistCollectionChange(This)	\
    ( (This)->lpVtbl -> PlaylistCollectionChange(This) ) 

#define IWMPEvents_PlaylistCollectionPlaylistAdded(This,bstrPlaylistName)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistAdded(This,bstrPlaylistName) ) 

#define IWMPEvents_PlaylistCollectionPlaylistRemoved(This,bstrPlaylistName)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistRemoved(This,bstrPlaylistName) ) 

#define IWMPEvents_PlaylistCollectionPlaylistSetAsDeleted(This,bstrPlaylistName,varfIsDeleted)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistSetAsDeleted(This,bstrPlaylistName,varfIsDeleted) ) 

#define IWMPEvents_ModeChange(This,ModeName,NewValue)	\
    ( (This)->lpVtbl -> ModeChange(This,ModeName,NewValue) ) 

#define IWMPEvents_MediaError(This,pMediaObject)	\
    ( (This)->lpVtbl -> MediaError(This,pMediaObject) ) 

#define IWMPEvents_OpenPlaylistSwitch(This,pItem)	\
    ( (This)->lpVtbl -> OpenPlaylistSwitch(This,pItem) ) 

#define IWMPEvents_DomainChange(This,strDomain)	\
    ( (This)->lpVtbl -> DomainChange(This,strDomain) ) 

#define IWMPEvents_SwitchedToPlayerApplication(This)	\
    ( (This)->lpVtbl -> SwitchedToPlayerApplication(This) ) 

#define IWMPEvents_SwitchedToControl(This)	\
    ( (This)->lpVtbl -> SwitchedToControl(This) ) 

#define IWMPEvents_PlayerDockedStateChange(This)	\
    ( (This)->lpVtbl -> PlayerDockedStateChange(This) ) 

#define IWMPEvents_PlayerReconnect(This)	\
    ( (This)->lpVtbl -> PlayerReconnect(This) ) 

#define IWMPEvents_Click(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> Click(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents_DoubleClick(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> DoubleClick(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents_KeyDown(This,nKeyCode,nShiftState)	\
    ( (This)->lpVtbl -> KeyDown(This,nKeyCode,nShiftState) ) 

#define IWMPEvents_KeyPress(This,nKeyAscii)	\
    ( (This)->lpVtbl -> KeyPress(This,nKeyAscii) ) 

#define IWMPEvents_KeyUp(This,nKeyCode,nShiftState)	\
    ( (This)->lpVtbl -> KeyUp(This,nKeyCode,nShiftState) ) 

#define IWMPEvents_MouseDown(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseDown(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents_MouseMove(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseMove(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents_MouseUp(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseUp(This,nButton,nShiftState,fX,fY) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPEvents_INTERFACE_DEFINED__ */


#ifndef __IWMPEvents2_INTERFACE_DEFINED__
#define __IWMPEvents2_INTERFACE_DEFINED__

/* interface IWMPEvents2 */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1E7601FA-47EA-4107-9EA9-9004ED9684FF")
    IWMPEvents2 : public IWMPEvents
    {
    public:
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE DeviceConnect( 
            /* [in] */ IWMPSyncDevice *pDevice) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE DeviceDisconnect( 
            /* [in] */ IWMPSyncDevice *pDevice) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE DeviceStatusChange( 
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ WMPDeviceStatus NewStatus) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE DeviceSyncStateChange( 
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ WMPSyncState NewState) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE DeviceSyncError( 
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ IDispatch *pMedia) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CreatePartnershipComplete( 
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ HRESULT hrResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPEvents2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *OpenStateChange )( 
            IWMPEvents2 * This,
            /* [in] */ long NewState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayStateChange )( 
            IWMPEvents2 * This,
            /* [in] */ long NewState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *AudioLanguageChange )( 
            IWMPEvents2 * This,
            /* [in] */ long LangID);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *StatusChange )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *ScriptCommand )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR scType,
            /* [in] */ BSTR Param);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *NewStream )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Disconnect )( 
            IWMPEvents2 * This,
            /* [in] */ long Result);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Buffering )( 
            IWMPEvents2 * This,
            /* [in] */ VARIANT_BOOL Start);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Error )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Warning )( 
            IWMPEvents2 * This,
            /* [in] */ long WarningType,
            /* [in] */ long Param,
            /* [in] */ BSTR Description);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *EndOfStream )( 
            IWMPEvents2 * This,
            /* [in] */ long Result);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PositionChange )( 
            IWMPEvents2 * This,
            /* [in] */ double oldPosition,
            /* [in] */ double newPosition);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MarkerHit )( 
            IWMPEvents2 * This,
            /* [in] */ long MarkerNum);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DurationUnitChange )( 
            IWMPEvents2 * This,
            /* [in] */ long NewDurationUnit);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CdromMediaChange )( 
            IWMPEvents2 * This,
            /* [in] */ long CdromNum);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistChange )( 
            IWMPEvents2 * This,
            /* [in] */ IDispatch *Playlist,
            /* [in] */ WMPPlaylistChangeEventType change);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentPlaylistChange )( 
            IWMPEvents2 * This,
            /* [in] */ WMPPlaylistChangeEventType change);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentPlaylistItemAvailable )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR bstrItemName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaChange )( 
            IWMPEvents2 * This,
            /* [in] */ IDispatch *Item);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentMediaItemAvailable )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR bstrItemName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentItemChange )( 
            IWMPEvents2 * This,
            /* [in] */ IDispatch *pdispMedia);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionChange )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringAdded )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringRemoved )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringChanged )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrOldAttribVal,
            /* [in] */ BSTR bstrNewAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionChange )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistAdded )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR bstrPlaylistName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistRemoved )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR bstrPlaylistName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistSetAsDeleted )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR bstrPlaylistName,
            /* [in] */ VARIANT_BOOL varfIsDeleted);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *ModeChange )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR ModeName,
            /* [in] */ VARIANT_BOOL NewValue);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaError )( 
            IWMPEvents2 * This,
            /* [in] */ IDispatch *pMediaObject);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *OpenPlaylistSwitch )( 
            IWMPEvents2 * This,
            /* [in] */ IDispatch *pItem);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DomainChange )( 
            IWMPEvents2 * This,
            /* [in] */ BSTR strDomain);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *SwitchedToPlayerApplication )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *SwitchedToControl )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayerDockedStateChange )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayerReconnect )( 
            IWMPEvents2 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Click )( 
            IWMPEvents2 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DoubleClick )( 
            IWMPEvents2 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyDown )( 
            IWMPEvents2 * This,
            /* [in] */ short nKeyCode,
            /* [in] */ short nShiftState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyPress )( 
            IWMPEvents2 * This,
            /* [in] */ short nKeyAscii);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyUp )( 
            IWMPEvents2 * This,
            /* [in] */ short nKeyCode,
            /* [in] */ short nShiftState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseDown )( 
            IWMPEvents2 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseMove )( 
            IWMPEvents2 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseUp )( 
            IWMPEvents2 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceConnect )( 
            IWMPEvents2 * This,
            /* [in] */ IWMPSyncDevice *pDevice);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceDisconnect )( 
            IWMPEvents2 * This,
            /* [in] */ IWMPSyncDevice *pDevice);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceStatusChange )( 
            IWMPEvents2 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ WMPDeviceStatus NewStatus);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceSyncStateChange )( 
            IWMPEvents2 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ WMPSyncState NewState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceSyncError )( 
            IWMPEvents2 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ IDispatch *pMedia);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CreatePartnershipComplete )( 
            IWMPEvents2 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ HRESULT hrResult);
        
        END_INTERFACE
    } IWMPEvents2Vtbl;

    interface IWMPEvents2
    {
        CONST_VTBL struct IWMPEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPEvents2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPEvents2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPEvents2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPEvents2_OpenStateChange(This,NewState)	\
    ( (This)->lpVtbl -> OpenStateChange(This,NewState) ) 

#define IWMPEvents2_PlayStateChange(This,NewState)	\
    ( (This)->lpVtbl -> PlayStateChange(This,NewState) ) 

#define IWMPEvents2_AudioLanguageChange(This,LangID)	\
    ( (This)->lpVtbl -> AudioLanguageChange(This,LangID) ) 

#define IWMPEvents2_StatusChange(This)	\
    ( (This)->lpVtbl -> StatusChange(This) ) 

#define IWMPEvents2_ScriptCommand(This,scType,Param)	\
    ( (This)->lpVtbl -> ScriptCommand(This,scType,Param) ) 

#define IWMPEvents2_NewStream(This)	\
    ( (This)->lpVtbl -> NewStream(This) ) 

#define IWMPEvents2_Disconnect(This,Result)	\
    ( (This)->lpVtbl -> Disconnect(This,Result) ) 

#define IWMPEvents2_Buffering(This,Start)	\
    ( (This)->lpVtbl -> Buffering(This,Start) ) 

#define IWMPEvents2_Error(This)	\
    ( (This)->lpVtbl -> Error(This) ) 

#define IWMPEvents2_Warning(This,WarningType,Param,Description)	\
    ( (This)->lpVtbl -> Warning(This,WarningType,Param,Description) ) 

#define IWMPEvents2_EndOfStream(This,Result)	\
    ( (This)->lpVtbl -> EndOfStream(This,Result) ) 

#define IWMPEvents2_PositionChange(This,oldPosition,newPosition)	\
    ( (This)->lpVtbl -> PositionChange(This,oldPosition,newPosition) ) 

#define IWMPEvents2_MarkerHit(This,MarkerNum)	\
    ( (This)->lpVtbl -> MarkerHit(This,MarkerNum) ) 

#define IWMPEvents2_DurationUnitChange(This,NewDurationUnit)	\
    ( (This)->lpVtbl -> DurationUnitChange(This,NewDurationUnit) ) 

#define IWMPEvents2_CdromMediaChange(This,CdromNum)	\
    ( (This)->lpVtbl -> CdromMediaChange(This,CdromNum) ) 

#define IWMPEvents2_PlaylistChange(This,Playlist,change)	\
    ( (This)->lpVtbl -> PlaylistChange(This,Playlist,change) ) 

#define IWMPEvents2_CurrentPlaylistChange(This,change)	\
    ( (This)->lpVtbl -> CurrentPlaylistChange(This,change) ) 

#define IWMPEvents2_CurrentPlaylistItemAvailable(This,bstrItemName)	\
    ( (This)->lpVtbl -> CurrentPlaylistItemAvailable(This,bstrItemName) ) 

#define IWMPEvents2_MediaChange(This,Item)	\
    ( (This)->lpVtbl -> MediaChange(This,Item) ) 

#define IWMPEvents2_CurrentMediaItemAvailable(This,bstrItemName)	\
    ( (This)->lpVtbl -> CurrentMediaItemAvailable(This,bstrItemName) ) 

#define IWMPEvents2_CurrentItemChange(This,pdispMedia)	\
    ( (This)->lpVtbl -> CurrentItemChange(This,pdispMedia) ) 

#define IWMPEvents2_MediaCollectionChange(This)	\
    ( (This)->lpVtbl -> MediaCollectionChange(This) ) 

#define IWMPEvents2_MediaCollectionAttributeStringAdded(This,bstrAttribName,bstrAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringAdded(This,bstrAttribName,bstrAttribVal) ) 

#define IWMPEvents2_MediaCollectionAttributeStringRemoved(This,bstrAttribName,bstrAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringRemoved(This,bstrAttribName,bstrAttribVal) ) 

#define IWMPEvents2_MediaCollectionAttributeStringChanged(This,bstrAttribName,bstrOldAttribVal,bstrNewAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringChanged(This,bstrAttribName,bstrOldAttribVal,bstrNewAttribVal) ) 

#define IWMPEvents2_PlaylistCollectionChange(This)	\
    ( (This)->lpVtbl -> PlaylistCollectionChange(This) ) 

#define IWMPEvents2_PlaylistCollectionPlaylistAdded(This,bstrPlaylistName)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistAdded(This,bstrPlaylistName) ) 

#define IWMPEvents2_PlaylistCollectionPlaylistRemoved(This,bstrPlaylistName)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistRemoved(This,bstrPlaylistName) ) 

#define IWMPEvents2_PlaylistCollectionPlaylistSetAsDeleted(This,bstrPlaylistName,varfIsDeleted)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistSetAsDeleted(This,bstrPlaylistName,varfIsDeleted) ) 

#define IWMPEvents2_ModeChange(This,ModeName,NewValue)	\
    ( (This)->lpVtbl -> ModeChange(This,ModeName,NewValue) ) 

#define IWMPEvents2_MediaError(This,pMediaObject)	\
    ( (This)->lpVtbl -> MediaError(This,pMediaObject) ) 

#define IWMPEvents2_OpenPlaylistSwitch(This,pItem)	\
    ( (This)->lpVtbl -> OpenPlaylistSwitch(This,pItem) ) 

#define IWMPEvents2_DomainChange(This,strDomain)	\
    ( (This)->lpVtbl -> DomainChange(This,strDomain) ) 

#define IWMPEvents2_SwitchedToPlayerApplication(This)	\
    ( (This)->lpVtbl -> SwitchedToPlayerApplication(This) ) 

#define IWMPEvents2_SwitchedToControl(This)	\
    ( (This)->lpVtbl -> SwitchedToControl(This) ) 

#define IWMPEvents2_PlayerDockedStateChange(This)	\
    ( (This)->lpVtbl -> PlayerDockedStateChange(This) ) 

#define IWMPEvents2_PlayerReconnect(This)	\
    ( (This)->lpVtbl -> PlayerReconnect(This) ) 

#define IWMPEvents2_Click(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> Click(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents2_DoubleClick(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> DoubleClick(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents2_KeyDown(This,nKeyCode,nShiftState)	\
    ( (This)->lpVtbl -> KeyDown(This,nKeyCode,nShiftState) ) 

#define IWMPEvents2_KeyPress(This,nKeyAscii)	\
    ( (This)->lpVtbl -> KeyPress(This,nKeyAscii) ) 

#define IWMPEvents2_KeyUp(This,nKeyCode,nShiftState)	\
    ( (This)->lpVtbl -> KeyUp(This,nKeyCode,nShiftState) ) 

#define IWMPEvents2_MouseDown(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseDown(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents2_MouseMove(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseMove(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents2_MouseUp(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseUp(This,nButton,nShiftState,fX,fY) ) 


#define IWMPEvents2_DeviceConnect(This,pDevice)	\
    ( (This)->lpVtbl -> DeviceConnect(This,pDevice) ) 

#define IWMPEvents2_DeviceDisconnect(This,pDevice)	\
    ( (This)->lpVtbl -> DeviceDisconnect(This,pDevice) ) 

#define IWMPEvents2_DeviceStatusChange(This,pDevice,NewStatus)	\
    ( (This)->lpVtbl -> DeviceStatusChange(This,pDevice,NewStatus) ) 

#define IWMPEvents2_DeviceSyncStateChange(This,pDevice,NewState)	\
    ( (This)->lpVtbl -> DeviceSyncStateChange(This,pDevice,NewState) ) 

#define IWMPEvents2_DeviceSyncError(This,pDevice,pMedia)	\
    ( (This)->lpVtbl -> DeviceSyncError(This,pDevice,pMedia) ) 

#define IWMPEvents2_CreatePartnershipComplete(This,pDevice,hrResult)	\
    ( (This)->lpVtbl -> CreatePartnershipComplete(This,pDevice,hrResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPEvents2_INTERFACE_DEFINED__ */


#ifndef __IWMPEvents3_INTERFACE_DEFINED__
#define __IWMPEvents3_INTERFACE_DEFINED__

/* interface IWMPEvents3 */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPEvents3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1F504270-A66B-4223-8E96-26A06C63D69F")
    IWMPEvents3 : public IWMPEvents2
    {
    public:
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CdromRipStateChange( 
            /* [in] */ IWMPCdromRip *pCdromRip,
            /* [in] */ WMPRipState wmprs) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CdromRipMediaError( 
            /* [in] */ IWMPCdromRip *pCdromRip,
            /* [in] */ IDispatch *pMedia) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CdromBurnStateChange( 
            /* [in] */ IWMPCdromBurn *pCdromBurn,
            /* [in] */ WMPBurnState wmpbs) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CdromBurnMediaError( 
            /* [in] */ IWMPCdromBurn *pCdromBurn,
            /* [in] */ IDispatch *pMedia) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE CdromBurnError( 
            /* [in] */ IWMPCdromBurn *pCdromBurn,
            /* [in] */ HRESULT hrError) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE LibraryConnect( 
            /* [in] */ IWMPLibrary *pLibrary) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE LibraryDisconnect( 
            /* [in] */ IWMPLibrary *pLibrary) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE FolderScanStateChange( 
            /* [in] */ WMPFolderScanState wmpfss) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE StringCollectionChange( 
            /* [in] */ IDispatch *pdispStringCollection,
            /* [in] */ WMPStringCollectionChangeEventType change,
            /* [in] */ long lCollectionIndex) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MediaCollectionMediaAdded( 
            /* [in] */ IDispatch *pdispMedia) = 0;
        
        virtual /* [helpstring][id] */ void STDMETHODCALLTYPE MediaCollectionMediaRemoved( 
            /* [in] */ IDispatch *pdispMedia) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPEvents3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPEvents3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPEvents3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *OpenStateChange )( 
            IWMPEvents3 * This,
            /* [in] */ long NewState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayStateChange )( 
            IWMPEvents3 * This,
            /* [in] */ long NewState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *AudioLanguageChange )( 
            IWMPEvents3 * This,
            /* [in] */ long LangID);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *StatusChange )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *ScriptCommand )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR scType,
            /* [in] */ BSTR Param);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *NewStream )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Disconnect )( 
            IWMPEvents3 * This,
            /* [in] */ long Result);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Buffering )( 
            IWMPEvents3 * This,
            /* [in] */ VARIANT_BOOL Start);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Error )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Warning )( 
            IWMPEvents3 * This,
            /* [in] */ long WarningType,
            /* [in] */ long Param,
            /* [in] */ BSTR Description);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *EndOfStream )( 
            IWMPEvents3 * This,
            /* [in] */ long Result);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PositionChange )( 
            IWMPEvents3 * This,
            /* [in] */ double oldPosition,
            /* [in] */ double newPosition);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MarkerHit )( 
            IWMPEvents3 * This,
            /* [in] */ long MarkerNum);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DurationUnitChange )( 
            IWMPEvents3 * This,
            /* [in] */ long NewDurationUnit);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CdromMediaChange )( 
            IWMPEvents3 * This,
            /* [in] */ long CdromNum);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistChange )( 
            IWMPEvents3 * This,
            /* [in] */ IDispatch *Playlist,
            /* [in] */ WMPPlaylistChangeEventType change);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentPlaylistChange )( 
            IWMPEvents3 * This,
            /* [in] */ WMPPlaylistChangeEventType change);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentPlaylistItemAvailable )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR bstrItemName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaChange )( 
            IWMPEvents3 * This,
            /* [in] */ IDispatch *Item);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentMediaItemAvailable )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR bstrItemName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CurrentItemChange )( 
            IWMPEvents3 * This,
            /* [in] */ IDispatch *pdispMedia);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionChange )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringAdded )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringRemoved )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionAttributeStringChanged )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR bstrAttribName,
            /* [in] */ BSTR bstrOldAttribVal,
            /* [in] */ BSTR bstrNewAttribVal);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionChange )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistAdded )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR bstrPlaylistName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistRemoved )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR bstrPlaylistName);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlaylistCollectionPlaylistSetAsDeleted )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR bstrPlaylistName,
            /* [in] */ VARIANT_BOOL varfIsDeleted);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *ModeChange )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR ModeName,
            /* [in] */ VARIANT_BOOL NewValue);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaError )( 
            IWMPEvents3 * This,
            /* [in] */ IDispatch *pMediaObject);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *OpenPlaylistSwitch )( 
            IWMPEvents3 * This,
            /* [in] */ IDispatch *pItem);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DomainChange )( 
            IWMPEvents3 * This,
            /* [in] */ BSTR strDomain);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *SwitchedToPlayerApplication )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *SwitchedToControl )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayerDockedStateChange )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *PlayerReconnect )( 
            IWMPEvents3 * This);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *Click )( 
            IWMPEvents3 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DoubleClick )( 
            IWMPEvents3 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyDown )( 
            IWMPEvents3 * This,
            /* [in] */ short nKeyCode,
            /* [in] */ short nShiftState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyPress )( 
            IWMPEvents3 * This,
            /* [in] */ short nKeyAscii);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *KeyUp )( 
            IWMPEvents3 * This,
            /* [in] */ short nKeyCode,
            /* [in] */ short nShiftState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseDown )( 
            IWMPEvents3 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseMove )( 
            IWMPEvents3 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MouseUp )( 
            IWMPEvents3 * This,
            /* [in] */ short nButton,
            /* [in] */ short nShiftState,
            /* [in] */ long fX,
            /* [in] */ long fY);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceConnect )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPSyncDevice *pDevice);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceDisconnect )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPSyncDevice *pDevice);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceStatusChange )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ WMPDeviceStatus NewStatus);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceSyncStateChange )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ WMPSyncState NewState);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *DeviceSyncError )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ IDispatch *pMedia);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CreatePartnershipComplete )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPSyncDevice *pDevice,
            /* [in] */ HRESULT hrResult);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CdromRipStateChange )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPCdromRip *pCdromRip,
            /* [in] */ WMPRipState wmprs);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CdromRipMediaError )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPCdromRip *pCdromRip,
            /* [in] */ IDispatch *pMedia);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CdromBurnStateChange )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPCdromBurn *pCdromBurn,
            /* [in] */ WMPBurnState wmpbs);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CdromBurnMediaError )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPCdromBurn *pCdromBurn,
            /* [in] */ IDispatch *pMedia);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *CdromBurnError )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPCdromBurn *pCdromBurn,
            /* [in] */ HRESULT hrError);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *LibraryConnect )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPLibrary *pLibrary);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *LibraryDisconnect )( 
            IWMPEvents3 * This,
            /* [in] */ IWMPLibrary *pLibrary);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *FolderScanStateChange )( 
            IWMPEvents3 * This,
            /* [in] */ WMPFolderScanState wmpfss);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *StringCollectionChange )( 
            IWMPEvents3 * This,
            /* [in] */ IDispatch *pdispStringCollection,
            /* [in] */ WMPStringCollectionChangeEventType change,
            /* [in] */ long lCollectionIndex);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionMediaAdded )( 
            IWMPEvents3 * This,
            /* [in] */ IDispatch *pdispMedia);
        
        /* [helpstring][id] */ void ( STDMETHODCALLTYPE *MediaCollectionMediaRemoved )( 
            IWMPEvents3 * This,
            /* [in] */ IDispatch *pdispMedia);
        
        END_INTERFACE
    } IWMPEvents3Vtbl;

    interface IWMPEvents3
    {
        CONST_VTBL struct IWMPEvents3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPEvents3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPEvents3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPEvents3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPEvents3_OpenStateChange(This,NewState)	\
    ( (This)->lpVtbl -> OpenStateChange(This,NewState) ) 

#define IWMPEvents3_PlayStateChange(This,NewState)	\
    ( (This)->lpVtbl -> PlayStateChange(This,NewState) ) 

#define IWMPEvents3_AudioLanguageChange(This,LangID)	\
    ( (This)->lpVtbl -> AudioLanguageChange(This,LangID) ) 

#define IWMPEvents3_StatusChange(This)	\
    ( (This)->lpVtbl -> StatusChange(This) ) 

#define IWMPEvents3_ScriptCommand(This,scType,Param)	\
    ( (This)->lpVtbl -> ScriptCommand(This,scType,Param) ) 

#define IWMPEvents3_NewStream(This)	\
    ( (This)->lpVtbl -> NewStream(This) ) 

#define IWMPEvents3_Disconnect(This,Result)	\
    ( (This)->lpVtbl -> Disconnect(This,Result) ) 

#define IWMPEvents3_Buffering(This,Start)	\
    ( (This)->lpVtbl -> Buffering(This,Start) ) 

#define IWMPEvents3_Error(This)	\
    ( (This)->lpVtbl -> Error(This) ) 

#define IWMPEvents3_Warning(This,WarningType,Param,Description)	\
    ( (This)->lpVtbl -> Warning(This,WarningType,Param,Description) ) 

#define IWMPEvents3_EndOfStream(This,Result)	\
    ( (This)->lpVtbl -> EndOfStream(This,Result) ) 

#define IWMPEvents3_PositionChange(This,oldPosition,newPosition)	\
    ( (This)->lpVtbl -> PositionChange(This,oldPosition,newPosition) ) 

#define IWMPEvents3_MarkerHit(This,MarkerNum)	\
    ( (This)->lpVtbl -> MarkerHit(This,MarkerNum) ) 

#define IWMPEvents3_DurationUnitChange(This,NewDurationUnit)	\
    ( (This)->lpVtbl -> DurationUnitChange(This,NewDurationUnit) ) 

#define IWMPEvents3_CdromMediaChange(This,CdromNum)	\
    ( (This)->lpVtbl -> CdromMediaChange(This,CdromNum) ) 

#define IWMPEvents3_PlaylistChange(This,Playlist,change)	\
    ( (This)->lpVtbl -> PlaylistChange(This,Playlist,change) ) 

#define IWMPEvents3_CurrentPlaylistChange(This,change)	\
    ( (This)->lpVtbl -> CurrentPlaylistChange(This,change) ) 

#define IWMPEvents3_CurrentPlaylistItemAvailable(This,bstrItemName)	\
    ( (This)->lpVtbl -> CurrentPlaylistItemAvailable(This,bstrItemName) ) 

#define IWMPEvents3_MediaChange(This,Item)	\
    ( (This)->lpVtbl -> MediaChange(This,Item) ) 

#define IWMPEvents3_CurrentMediaItemAvailable(This,bstrItemName)	\
    ( (This)->lpVtbl -> CurrentMediaItemAvailable(This,bstrItemName) ) 

#define IWMPEvents3_CurrentItemChange(This,pdispMedia)	\
    ( (This)->lpVtbl -> CurrentItemChange(This,pdispMedia) ) 

#define IWMPEvents3_MediaCollectionChange(This)	\
    ( (This)->lpVtbl -> MediaCollectionChange(This) ) 

#define IWMPEvents3_MediaCollectionAttributeStringAdded(This,bstrAttribName,bstrAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringAdded(This,bstrAttribName,bstrAttribVal) ) 

#define IWMPEvents3_MediaCollectionAttributeStringRemoved(This,bstrAttribName,bstrAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringRemoved(This,bstrAttribName,bstrAttribVal) ) 

#define IWMPEvents3_MediaCollectionAttributeStringChanged(This,bstrAttribName,bstrOldAttribVal,bstrNewAttribVal)	\
    ( (This)->lpVtbl -> MediaCollectionAttributeStringChanged(This,bstrAttribName,bstrOldAttribVal,bstrNewAttribVal) ) 

#define IWMPEvents3_PlaylistCollectionChange(This)	\
    ( (This)->lpVtbl -> PlaylistCollectionChange(This) ) 

#define IWMPEvents3_PlaylistCollectionPlaylistAdded(This,bstrPlaylistName)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistAdded(This,bstrPlaylistName) ) 

#define IWMPEvents3_PlaylistCollectionPlaylistRemoved(This,bstrPlaylistName)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistRemoved(This,bstrPlaylistName) ) 

#define IWMPEvents3_PlaylistCollectionPlaylistSetAsDeleted(This,bstrPlaylistName,varfIsDeleted)	\
    ( (This)->lpVtbl -> PlaylistCollectionPlaylistSetAsDeleted(This,bstrPlaylistName,varfIsDeleted) ) 

#define IWMPEvents3_ModeChange(This,ModeName,NewValue)	\
    ( (This)->lpVtbl -> ModeChange(This,ModeName,NewValue) ) 

#define IWMPEvents3_MediaError(This,pMediaObject)	\
    ( (This)->lpVtbl -> MediaError(This,pMediaObject) ) 

#define IWMPEvents3_OpenPlaylistSwitch(This,pItem)	\
    ( (This)->lpVtbl -> OpenPlaylistSwitch(This,pItem) ) 

#define IWMPEvents3_DomainChange(This,strDomain)	\
    ( (This)->lpVtbl -> DomainChange(This,strDomain) ) 

#define IWMPEvents3_SwitchedToPlayerApplication(This)	\
    ( (This)->lpVtbl -> SwitchedToPlayerApplication(This) ) 

#define IWMPEvents3_SwitchedToControl(This)	\
    ( (This)->lpVtbl -> SwitchedToControl(This) ) 

#define IWMPEvents3_PlayerDockedStateChange(This)	\
    ( (This)->lpVtbl -> PlayerDockedStateChange(This) ) 

#define IWMPEvents3_PlayerReconnect(This)	\
    ( (This)->lpVtbl -> PlayerReconnect(This) ) 

#define IWMPEvents3_Click(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> Click(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents3_DoubleClick(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> DoubleClick(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents3_KeyDown(This,nKeyCode,nShiftState)	\
    ( (This)->lpVtbl -> KeyDown(This,nKeyCode,nShiftState) ) 

#define IWMPEvents3_KeyPress(This,nKeyAscii)	\
    ( (This)->lpVtbl -> KeyPress(This,nKeyAscii) ) 

#define IWMPEvents3_KeyUp(This,nKeyCode,nShiftState)	\
    ( (This)->lpVtbl -> KeyUp(This,nKeyCode,nShiftState) ) 

#define IWMPEvents3_MouseDown(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseDown(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents3_MouseMove(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseMove(This,nButton,nShiftState,fX,fY) ) 

#define IWMPEvents3_MouseUp(This,nButton,nShiftState,fX,fY)	\
    ( (This)->lpVtbl -> MouseUp(This,nButton,nShiftState,fX,fY) ) 


#define IWMPEvents3_DeviceConnect(This,pDevice)	\
    ( (This)->lpVtbl -> DeviceConnect(This,pDevice) ) 

#define IWMPEvents3_DeviceDisconnect(This,pDevice)	\
    ( (This)->lpVtbl -> DeviceDisconnect(This,pDevice) ) 

#define IWMPEvents3_DeviceStatusChange(This,pDevice,NewStatus)	\
    ( (This)->lpVtbl -> DeviceStatusChange(This,pDevice,NewStatus) ) 

#define IWMPEvents3_DeviceSyncStateChange(This,pDevice,NewState)	\
    ( (This)->lpVtbl -> DeviceSyncStateChange(This,pDevice,NewState) ) 

#define IWMPEvents3_DeviceSyncError(This,pDevice,pMedia)	\
    ( (This)->lpVtbl -> DeviceSyncError(This,pDevice,pMedia) ) 

#define IWMPEvents3_CreatePartnershipComplete(This,pDevice,hrResult)	\
    ( (This)->lpVtbl -> CreatePartnershipComplete(This,pDevice,hrResult) ) 


#define IWMPEvents3_CdromRipStateChange(This,pCdromRip,wmprs)	\
    ( (This)->lpVtbl -> CdromRipStateChange(This,pCdromRip,wmprs) ) 

#define IWMPEvents3_CdromRipMediaError(This,pCdromRip,pMedia)	\
    ( (This)->lpVtbl -> CdromRipMediaError(This,pCdromRip,pMedia) ) 

#define IWMPEvents3_CdromBurnStateChange(This,pCdromBurn,wmpbs)	\
    ( (This)->lpVtbl -> CdromBurnStateChange(This,pCdromBurn,wmpbs) ) 

#define IWMPEvents3_CdromBurnMediaError(This,pCdromBurn,pMedia)	\
    ( (This)->lpVtbl -> CdromBurnMediaError(This,pCdromBurn,pMedia) ) 

#define IWMPEvents3_CdromBurnError(This,pCdromBurn,hrError)	\
    ( (This)->lpVtbl -> CdromBurnError(This,pCdromBurn,hrError) ) 

#define IWMPEvents3_LibraryConnect(This,pLibrary)	\
    ( (This)->lpVtbl -> LibraryConnect(This,pLibrary) ) 

#define IWMPEvents3_LibraryDisconnect(This,pLibrary)	\
    ( (This)->lpVtbl -> LibraryDisconnect(This,pLibrary) ) 

#define IWMPEvents3_FolderScanStateChange(This,wmpfss)	\
    ( (This)->lpVtbl -> FolderScanStateChange(This,wmpfss) ) 

#define IWMPEvents3_StringCollectionChange(This,pdispStringCollection,change,lCollectionIndex)	\
    ( (This)->lpVtbl -> StringCollectionChange(This,pdispStringCollection,change,lCollectionIndex) ) 

#define IWMPEvents3_MediaCollectionMediaAdded(This,pdispMedia)	\
    ( (This)->lpVtbl -> MediaCollectionMediaAdded(This,pdispMedia) ) 

#define IWMPEvents3_MediaCollectionMediaRemoved(This,pdispMedia)	\
    ( (This)->lpVtbl -> MediaCollectionMediaRemoved(This,pdispMedia) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPEvents3_INTERFACE_DEFINED__ */


#ifndef ___WMPOCXEvents_DISPINTERFACE_DEFINED__
#define ___WMPOCXEvents_DISPINTERFACE_DEFINED__

/* dispinterface _WMPOCXEvents */
/* [hidden][helpstring][uuid] */ 


EXTERN_C const IID DIID__WMPOCXEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("6BF52A51-394A-11d3-B153-00C04F79FAA6")
    _WMPOCXEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _WMPOCXEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _WMPOCXEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _WMPOCXEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _WMPOCXEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _WMPOCXEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _WMPOCXEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _WMPOCXEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _WMPOCXEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _WMPOCXEventsVtbl;

    interface _WMPOCXEvents
    {
        CONST_VTBL struct _WMPOCXEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _WMPOCXEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _WMPOCXEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _WMPOCXEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _WMPOCXEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _WMPOCXEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _WMPOCXEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _WMPOCXEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___WMPOCXEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WindowsMediaPlayer;

#ifdef __cplusplus

class DECLSPEC_UUID("6BF52A52-394A-11d3-B153-00C04F79FAA6")
WindowsMediaPlayer;
#endif
#endif /* __WMPLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmscatid.h ===
//***************************************************************************** 
// 
// Microsoft Windows Media 
// Copyright (C) Microsoft Corporation. All rights reserved. 
//
// FileName:            wmscatid.h
//
// Abstract:
//
//*****************************************************************************

#pragma once

EXTERN_GUID( CATID_IWMSControlProtocols, 0x3A0C5690,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6); 
EXTERN_GUID( CATID_IWMSAuthentication,   0x3A0C5691,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSEventPlugins,     0x3A0C5692,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSDataProtocols,    0x3A0C5693,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSFeedbackProtocols,0xc8636de0,0x0d9b,0x11d3,0xae,0x82,0x00,0xa0,0xc9,0x5e,0xc3,0xf0);
EXTERN_GUID( CATID_IWMSUnicastDataSinks, 0x3A0C5694,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6 );
EXTERN_GUID( CATID_IWMSAuthenticationResponse, 0x3A0C5695,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6 );
EXTERN_GUID( CATID_IWMSCredentialPlugins,0x3A0C5696,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSPlaylistParsers,  0x3A0C5697,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSStorageSystem,    0x3A0C5698,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSNetworkSource,    0x3A0C5699,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSMediaParsers,    0x3A0C569A,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSCacheProxyPlugins,    0x3A0C569B,0x6F51,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6);
EXTERN_GUID( CATID_IWMSBroadcastDataSinks, 0x87179b6c, 0x395a, 0x11d3, 0xae, 0x82, 0x0, 0xc0, 0x4f, 0x61, 0xd, 0x61);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmpservices.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmpservices.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmpservices_h__
#define __wmpservices_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMPServices_FWD_DEFINED__
#define __IWMPServices_FWD_DEFINED__
typedef interface IWMPServices IWMPServices;
#endif 	/* __IWMPServices_FWD_DEFINED__ */


#ifndef __IWMPMediaPluginRegistrar_FWD_DEFINED__
#define __IWMPMediaPluginRegistrar_FWD_DEFINED__
typedef interface IWMPMediaPluginRegistrar IWMPMediaPluginRegistrar;
#endif 	/* __IWMPMediaPluginRegistrar_FWD_DEFINED__ */


#ifndef __IWMPPlugin_FWD_DEFINED__
#define __IWMPPlugin_FWD_DEFINED__
typedef interface IWMPPlugin IWMPPlugin;
#endif 	/* __IWMPPlugin_FWD_DEFINED__ */


#ifndef __IWMPPluginEnable_FWD_DEFINED__
#define __IWMPPluginEnable_FWD_DEFINED__
typedef interface IWMPPluginEnable IWMPPluginEnable;
#endif 	/* __IWMPPluginEnable_FWD_DEFINED__ */


#ifndef __IWMPGraphCreation_FWD_DEFINED__
#define __IWMPGraphCreation_FWD_DEFINED__
typedef interface IWMPGraphCreation IWMPGraphCreation;
#endif 	/* __IWMPGraphCreation_FWD_DEFINED__ */


#ifndef __IWMPConvert_FWD_DEFINED__
#define __IWMPConvert_FWD_DEFINED__
typedef interface IWMPConvert IWMPConvert;
#endif 	/* __IWMPConvert_FWD_DEFINED__ */


#ifndef __IWMPTranscodePolicy_FWD_DEFINED__
#define __IWMPTranscodePolicy_FWD_DEFINED__
typedef interface IWMPTranscodePolicy IWMPTranscodePolicy;
#endif 	/* __IWMPTranscodePolicy_FWD_DEFINED__ */


#ifndef __IWMPUserEventSink_FWD_DEFINED__
#define __IWMPUserEventSink_FWD_DEFINED__
typedef interface IWMPUserEventSink IWMPUserEventSink;
#endif 	/* __IWMPUserEventSink_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmpservices_0000_0000 */
/* [local] */ 

//=========================================================================
//
// Microsoft Windows Media Technologies
// Copyright (C) Microsoft Corporation. All rights reserved.
//
//=========================================================================
typedef /* [public][helpstring] */ 
enum WMPServices_StreamState
    {	WMPServices_StreamState_Stop	= 0,
	WMPServices_StreamState_Pause	= ( WMPServices_StreamState_Stop + 1 ) ,
	WMPServices_StreamState_Play	= ( WMPServices_StreamState_Pause + 1 ) 
    } 	WMPServices_StreamState;



extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0000_v0_0_s_ifspec;

#ifndef __IWMPServices_INTERFACE_DEFINED__
#define __IWMPServices_INTERFACE_DEFINED__

/* interface IWMPServices */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AFB6B76B-1E20-4198-83B3-191DB6E0B149")
    IWMPServices : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetStreamTime( 
            /* [retval][out] */ LONGLONG *prt) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetStreamState( 
            /* [retval][out] */ WMPServices_StreamState *pState) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPServices * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStreamTime )( 
            IWMPServices * This,
            /* [retval][out] */ LONGLONG *prt);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStreamState )( 
            IWMPServices * This,
            /* [retval][out] */ WMPServices_StreamState *pState);
        
        END_INTERFACE
    } IWMPServicesVtbl;

    interface IWMPServices
    {
        CONST_VTBL struct IWMPServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPServices_GetStreamTime(This,prt)	\
    ( (This)->lpVtbl -> GetStreamTime(This,prt) ) 

#define IWMPServices_GetStreamState(This,pState)	\
    ( (This)->lpVtbl -> GetStreamState(This,pState) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPServices_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmpservices_0000_0001 */
/* [local] */ 

EXTERN_GUID( CLSID_WMPMediaPluginRegistrar, 0x5569e7f5,0x424b,0x4b93, 0x89, 0xca, 0x79, 0xd1, 0x79, 0x24, 0x68, 0x9a );
EXTERN_GUID( WMP_PLUGINTYPE_DSP, 0x6434baea, 0x4954, 0x498d, 0xab, 0xd5, 0x2b, 0x7, 0x12, 0x3e, 0x1f, 0x4 );
EXTERN_GUID( WMP_PLUGINTYPE_DSP_OUTOFPROC, 0xef29b174, 0xc347, 0x44cc, 0x9a, 0x4f, 0x23, 0x99, 0x11, 0x8f, 0xf3, 0x8c );
EXTERN_GUID( WMP_PLUGINTYPE_RENDERING, 0xa8554541, 0x115d, 0x406a, 0xa4, 0xc7, 0x51, 0x11, 0x1c, 0x33, 0x1, 0x83 );


extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0001_v0_0_s_ifspec;

#ifndef __IWMPMediaPluginRegistrar_INTERFACE_DEFINED__
#define __IWMPMediaPluginRegistrar_INTERFACE_DEFINED__

/* interface IWMPMediaPluginRegistrar */
/* [unique][helpstring][uuid][object][local] */ 


EXTERN_C const IID IID_IWMPMediaPluginRegistrar;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("68E27045-05BD-40b2-9720-23088C78E390")
    IWMPMediaPluginRegistrar : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE WMPRegisterPlayerPlugin( 
            /* [in] */ LPWSTR pwszFriendlyName,
            /* [in] */ LPWSTR pwszDescription,
            /* [in] */ LPWSTR pwszUninstallString,
            DWORD dwPriority,
            GUID guidPluginType,
            CLSID clsid,
            UINT cMediaTypes,
            LPVOID pMediaTypes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMPUnRegisterPlayerPlugin( 
            GUID guidPluginType,
            CLSID clsid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPMediaPluginRegistrarVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPMediaPluginRegistrar * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPMediaPluginRegistrar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPMediaPluginRegistrar * This);
        
        HRESULT ( STDMETHODCALLTYPE *WMPRegisterPlayerPlugin )( 
            IWMPMediaPluginRegistrar * This,
            /* [in] */ LPWSTR pwszFriendlyName,
            /* [in] */ LPWSTR pwszDescription,
            /* [in] */ LPWSTR pwszUninstallString,
            DWORD dwPriority,
            GUID guidPluginType,
            CLSID clsid,
            UINT cMediaTypes,
            LPVOID pMediaTypes);
        
        HRESULT ( STDMETHODCALLTYPE *WMPUnRegisterPlayerPlugin )( 
            IWMPMediaPluginRegistrar * This,
            GUID guidPluginType,
            CLSID clsid);
        
        END_INTERFACE
    } IWMPMediaPluginRegistrarVtbl;

    interface IWMPMediaPluginRegistrar
    {
        CONST_VTBL struct IWMPMediaPluginRegistrarVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPMediaPluginRegistrar_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPMediaPluginRegistrar_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPMediaPluginRegistrar_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPMediaPluginRegistrar_WMPRegisterPlayerPlugin(This,pwszFriendlyName,pwszDescription,pwszUninstallString,dwPriority,guidPluginType,clsid,cMediaTypes,pMediaTypes)	\
    ( (This)->lpVtbl -> WMPRegisterPlayerPlugin(This,pwszFriendlyName,pwszDescription,pwszUninstallString,dwPriority,guidPluginType,clsid,cMediaTypes,pMediaTypes) ) 

#define IWMPMediaPluginRegistrar_WMPUnRegisterPlayerPlugin(This,guidPluginType,clsid)	\
    ( (This)->lpVtbl -> WMPUnRegisterPlayerPlugin(This,guidPluginType,clsid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPMediaPluginRegistrar_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmpservices_0000_0002 */
/* [local] */ 

typedef /* [public][helpstring] */ 
enum WMPPlugin_Caps
    {	WMPPlugin_Caps_CannotConvertFormats	= 1
    } 	WMPPlugin_Caps;



extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0002_v0_0_s_ifspec;

#ifndef __IWMPPlugin_INTERFACE_DEFINED__
#define __IWMPPlugin_INTERFACE_DEFINED__

/* interface IWMPPlugin */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPPlugin;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f1392a70-024c-42bb-a998-73dfdfe7d5a7")
    IWMPPlugin : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Init( 
            DWORD_PTR dwPlaybackContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Shutdown( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetID( 
            /* [retval][out] */ GUID *pGUID) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetCaps( 
            /* [retval][out] */ DWORD *pdwFlags) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AdviseWMPServices( 
            /* [in] */ IWMPServices *pWMPServices) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE UnAdviseWMPServices( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPluginVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPlugin * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPlugin * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPlugin * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Init )( 
            IWMPPlugin * This,
            DWORD_PTR dwPlaybackContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IWMPPlugin * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetID )( 
            IWMPPlugin * This,
            /* [retval][out] */ GUID *pGUID);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCaps )( 
            IWMPPlugin * This,
            /* [retval][out] */ DWORD *pdwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AdviseWMPServices )( 
            IWMPPlugin * This,
            /* [in] */ IWMPServices *pWMPServices);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *UnAdviseWMPServices )( 
            IWMPPlugin * This);
        
        END_INTERFACE
    } IWMPPluginVtbl;

    interface IWMPPlugin
    {
        CONST_VTBL struct IWMPPluginVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPlugin_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPlugin_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPlugin_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPlugin_Init(This,dwPlaybackContext)	\
    ( (This)->lpVtbl -> Init(This,dwPlaybackContext) ) 

#define IWMPPlugin_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 

#define IWMPPlugin_GetID(This,pGUID)	\
    ( (This)->lpVtbl -> GetID(This,pGUID) ) 

#define IWMPPlugin_GetCaps(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetCaps(This,pdwFlags) ) 

#define IWMPPlugin_AdviseWMPServices(This,pWMPServices)	\
    ( (This)->lpVtbl -> AdviseWMPServices(This,pWMPServices) ) 

#define IWMPPlugin_UnAdviseWMPServices(This)	\
    ( (This)->lpVtbl -> UnAdviseWMPServices(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPlugin_INTERFACE_DEFINED__ */


#ifndef __IWMPPluginEnable_INTERFACE_DEFINED__
#define __IWMPPluginEnable_INTERFACE_DEFINED__

/* interface IWMPPluginEnable */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPPluginEnable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5FCA444C-7AD1-479d-A4EF-40566A5309D6")
    IWMPPluginEnable : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetEnable( 
            /* [in] */ BOOL fEnable) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetEnable( 
            /* [out] */ BOOL *pfEnable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPluginEnableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPluginEnable * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPluginEnable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPluginEnable * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetEnable )( 
            IWMPPluginEnable * This,
            /* [in] */ BOOL fEnable);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetEnable )( 
            IWMPPluginEnable * This,
            /* [out] */ BOOL *pfEnable);
        
        END_INTERFACE
    } IWMPPluginEnableVtbl;

    interface IWMPPluginEnable
    {
        CONST_VTBL struct IWMPPluginEnableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPluginEnable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPluginEnable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPluginEnable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPluginEnable_SetEnable(This,fEnable)	\
    ( (This)->lpVtbl -> SetEnable(This,fEnable) ) 

#define IWMPPluginEnable_GetEnable(This,pfEnable)	\
    ( (This)->lpVtbl -> GetEnable(This,pfEnable) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPluginEnable_INTERFACE_DEFINED__ */


#ifndef __IWMPGraphCreation_INTERFACE_DEFINED__
#define __IWMPGraphCreation_INTERFACE_DEFINED__

/* interface IWMPGraphCreation */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPGraphCreation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bfb377e5-c594-4369-a970-de896d5ece74")
    IWMPGraphCreation : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GraphCreationPreRender( 
            /* [in] */ IUnknown *pFilterGraph,
            /* [in] */ IUnknown *pReserved) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GraphCreationPostRender( 
            /* [in] */ IUnknown *pFilterGraph) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGraphCreationFlags( 
            /* [out] */ DWORD *pdwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPGraphCreationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPGraphCreation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPGraphCreation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPGraphCreation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GraphCreationPreRender )( 
            IWMPGraphCreation * This,
            /* [in] */ IUnknown *pFilterGraph,
            /* [in] */ IUnknown *pReserved);
        
        HRESULT ( STDMETHODCALLTYPE *GraphCreationPostRender )( 
            IWMPGraphCreation * This,
            /* [in] */ IUnknown *pFilterGraph);
        
        HRESULT ( STDMETHODCALLTYPE *GetGraphCreationFlags )( 
            IWMPGraphCreation * This,
            /* [out] */ DWORD *pdwFlags);
        
        END_INTERFACE
    } IWMPGraphCreationVtbl;

    interface IWMPGraphCreation
    {
        CONST_VTBL struct IWMPGraphCreationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPGraphCreation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPGraphCreation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPGraphCreation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPGraphCreation_GraphCreationPreRender(This,pFilterGraph,pReserved)	\
    ( (This)->lpVtbl -> GraphCreationPreRender(This,pFilterGraph,pReserved) ) 

#define IWMPGraphCreation_GraphCreationPostRender(This,pFilterGraph)	\
    ( (This)->lpVtbl -> GraphCreationPostRender(This,pFilterGraph) ) 

#define IWMPGraphCreation_GetGraphCreationFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetGraphCreationFlags(This,pdwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPGraphCreation_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmpservices_0000_0005 */
/* [local] */ 

#define WMPGC_FLAGS_ALLOW_PREROLL    0x00000001
#define WMPGC_FLAGS_SUPPRESS_DIALOGS 0x00000002
#define WMPGC_FLAGS_IGNORE_AV_SYNC   0x00000004
#define WMPGC_FLAGS_DISABLE_PLUGINS  0x00000008


extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0005_v0_0_s_ifspec;

#ifndef __IWMPConvert_INTERFACE_DEFINED__
#define __IWMPConvert_INTERFACE_DEFINED__

/* interface IWMPConvert */
/* [oleautomation][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPConvert;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D683162F-57D4-4108-8373-4A9676D1C2E9")
    IWMPConvert : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ConvertFile( 
            /* [in] */ BSTR bstrInputFile,
            /* [in] */ BSTR bstrDestinationFolder,
            /* [out] */ BSTR *pbstrOutputFile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetErrorURL( 
            /* [out] */ BSTR *pbstrURL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPConvertVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPConvert * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPConvert * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPConvert * This);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertFile )( 
            IWMPConvert * This,
            /* [in] */ BSTR bstrInputFile,
            /* [in] */ BSTR bstrDestinationFolder,
            /* [out] */ BSTR *pbstrOutputFile);
        
        HRESULT ( STDMETHODCALLTYPE *GetErrorURL )( 
            IWMPConvert * This,
            /* [out] */ BSTR *pbstrURL);
        
        END_INTERFACE
    } IWMPConvertVtbl;

    interface IWMPConvert
    {
        CONST_VTBL struct IWMPConvertVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPConvert_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPConvert_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPConvert_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPConvert_ConvertFile(This,bstrInputFile,bstrDestinationFolder,pbstrOutputFile)	\
    ( (This)->lpVtbl -> ConvertFile(This,bstrInputFile,bstrDestinationFolder,pbstrOutputFile) ) 

#define IWMPConvert_GetErrorURL(This,pbstrURL)	\
    ( (This)->lpVtbl -> GetErrorURL(This,pbstrURL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPConvert_INTERFACE_DEFINED__ */


#ifndef __IWMPTranscodePolicy_INTERFACE_DEFINED__
#define __IWMPTranscodePolicy_INTERFACE_DEFINED__

/* interface IWMPTranscodePolicy */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPTranscodePolicy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B64CBAC3-401C-4327-A3E8-B9FEB3A8C25C")
    IWMPTranscodePolicy : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE allowTranscode( 
            /* [out] */ VARIANT_BOOL *pvbAllow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPTranscodePolicyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPTranscodePolicy * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPTranscodePolicy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPTranscodePolicy * This);
        
        HRESULT ( STDMETHODCALLTYPE *allowTranscode )( 
            IWMPTranscodePolicy * This,
            /* [out] */ VARIANT_BOOL *pvbAllow);
        
        END_INTERFACE
    } IWMPTranscodePolicyVtbl;

    interface IWMPTranscodePolicy
    {
        CONST_VTBL struct IWMPTranscodePolicyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPTranscodePolicy_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPTranscodePolicy_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPTranscodePolicy_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPTranscodePolicy_allowTranscode(This,pvbAllow)	\
    ( (This)->lpVtbl -> allowTranscode(This,pvbAllow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPTranscodePolicy_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmpservices_0000_0007 */
/* [local] */ 

#define WMPUE_EC_USER   EC_USER + 0x100


extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmpservices_0000_0007_v0_0_s_ifspec;

#ifndef __IWMPUserEventSink_INTERFACE_DEFINED__
#define __IWMPUserEventSink_INTERFACE_DEFINED__

/* interface IWMPUserEventSink */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPUserEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CFCCFA72-C343-48C3-A2DE-B7A4402E39F2")
    IWMPUserEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NotifyUserEvent( 
            /* [in] */ long EventCode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPUserEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPUserEventSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPUserEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPUserEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyUserEvent )( 
            IWMPUserEventSink * This,
            /* [in] */ long EventCode);
        
        END_INTERFACE
    } IWMPUserEventSinkVtbl;

    interface IWMPUserEventSink
    {
        CONST_VTBL struct IWMPUserEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPUserEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPUserEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPUserEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPUserEventSink_NotifyUserEvent(This,EventCode)	\
    ( (This)->lpVtbl -> NotifyUserEvent(This,EventCode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPUserEventSink_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmpids.h ===
//*****************************************************************************
//
// Microsoft Windows Media Technologies
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// FileName:            wmpids.h
//
// Abstract:            Dispatch ID definitions for all public Windows Media
//                      Player Interfaces
//
//*****************************************************************************



//////////////////////////////////////////////////////////////////////
// Definitions
//////////////////////////////////////////////////////////////////////
#define DISPID_DELTA                            50


//////////////////////////////////////////////////////////////////////
// IWMPCore
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPCORE_BASE                     0
#define DISPID_WMPCORE_URL                      DISPID_WMPCORE_BASE + 1
#define DISPID_WMPCORE_OPENSTATE                DISPID_WMPCORE_BASE + 2
#define DISPID_WMPCORE_CLOSE                    DISPID_WMPCORE_BASE + 3
#define DISPID_WMPCORE_CONTROLS                 DISPID_WMPCORE_BASE + 4
#define DISPID_WMPCORE_SETTINGS                 DISPID_WMPCORE_BASE + 5
#define DISPID_WMPCORE_CURRENTMEDIA             DISPID_WMPCORE_BASE + 6
#define DISPID_WMPCORE_NETWORK                  DISPID_WMPCORE_BASE + 7
#define DISPID_WMPCORE_MEDIACOLLECTION          DISPID_WMPCORE_BASE + 8
#define DISPID_WMPCORE_PLAYLISTCOLLECTION       DISPID_WMPCORE_BASE + 9
#define DISPID_WMPCORE_PLAYSTATE                DISPID_WMPCORE_BASE + 10
#define DISPID_WMPCORE_VERSIONINFO              DISPID_WMPCORE_BASE + 11
#define DISPID_WMPCORE_LAUNCHURL                DISPID_WMPCORE_BASE + 12
#define DISPID_WMPCORE_CURRENTPLAYLIST          DISPID_WMPCORE_BASE + 13
#define DISPID_WMPCORE_CDROMCOLLECTION          DISPID_WMPCORE_BASE + 14
#define DISPID_WMPCORE_CLOSEDCAPTION            DISPID_WMPCORE_BASE + 15
#define DISPID_WMPCORE_ISONLINE                 DISPID_WMPCORE_BASE + 16
#define DISPID_WMPCORE_ERROR                    DISPID_WMPCORE_BASE + 17
#define DISPID_WMPCORE_STATUS                   DISPID_WMPCORE_BASE + 18
#define DISPID_WMPCORE_LAST                     DISPID_WMPCORE_STATUS

//////////////////////////////////////////////////////////////////////
// IPlayer
//////////////////////////////////////////////////////////////////////

#define DISPID_WMPOCX_BASE                  (DISPID_WMPCORE_LAST)
#define DISPID_WMPOCX_ENABLED               (DISPID_WMPOCX_BASE + 1)
#define DISPID_WMPOCX_TRANSPARENTATSTART    (DISPID_WMPOCX_BASE + 2)
#define DISPID_WMPOCX_FULLSCREEN            (DISPID_WMPOCX_BASE + 3)
#define DISPID_WMPOCX_ENABLECONTEXTMENU     (DISPID_WMPOCX_BASE + 4)
#define DISPID_WMPOCX_UIMODE                (DISPID_WMPOCX_BASE + 5)
#define DISPID_WMPOCX_LAST                  DISPID_WMPOCX_UIMODE

#define DISPID_WMPOCX2_BASE                 (DISPID_WMPOCX_LAST)
#define DISPID_WMPOCX2_STRETCHTOFIT         (DISPID_WMPOCX2_BASE + 1)
#define DISPID_WMPOCX2_WINDOWLESSVIDEO      (DISPID_WMPOCX2_BASE + 2)
#define DISPID_WMPOCX4_ISREMOTE             (DISPID_WMPOCX2_BASE + 3)
#define DISPID_WMPOCX4_PLAYERAPPLICATION    (DISPID_WMPOCX2_BASE + 4)
#define DISPID_WMPOCX4_OPENPLAYER           (DISPID_WMPOCX2_BASE + 5)


//////////////////////////////////////////////////////////////////////
// IWMPCore2
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPCORE2_BASE                    (DISPID_WMPCORE_BASE + 39)
#define DISPID_WMPCORE2_DVD                     (DISPID_WMPCORE2_BASE + 1)
#define DISPID_WMPCORE3_NEWPLAYLIST             (DISPID_WMPCORE2_BASE + 2)
#define DISPID_WMPCORE3_NEWMEDIA                (DISPID_WMPCORE2_BASE + 3)

//////////////////////////////////////////////////////////////////////
// IWMPControl
//////////////////////////////////////////////////////////////////////
//
// Note: These DISPIDs need to be contiguous
//
#define DISPID_WMPCONTROLS_BASE                 DISPID_WMPCORE_BASE + DISPID_DELTA
#define DISPID_WMPCONTROLS_PLAY                 DISPID_WMPCONTROLS_BASE + 1
#define DISPID_WMPCONTROLS_STOP                 DISPID_WMPCONTROLS_BASE + 2
#define DISPID_WMPCONTROLS_PAUSE                DISPID_WMPCONTROLS_BASE + 3
#define DISPID_WMPCONTROLS_FASTFORWARD          DISPID_WMPCONTROLS_BASE + 4
#define DISPID_WMPCONTROLS_FASTREVERSE          DISPID_WMPCONTROLS_BASE + 5
#define DISPID_WMPCONTROLS_CURRENTPOSITION      DISPID_WMPCONTROLS_BASE + 6
#define DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING DISPID_WMPCONTROLS_BASE + 7
#define DISPID_WMPCONTROLS_NEXT                 DISPID_WMPCONTROLS_BASE + 8
#define DISPID_WMPCONTROLS_PREVIOUS             DISPID_WMPCONTROLS_BASE + 9
#define DISPID_WMPCONTROLS_CURRENTITEM          DISPID_WMPCONTROLS_BASE + 10
#define DISPID_WMPCONTROLS_CURRENTMARKER        DISPID_WMPCONTROLS_BASE + 11
#define DISPID_WMPCONTROLS_ISAVAILABLE          DISPID_WMPCONTROLS_BASE + 12
#define DISPID_WMPCONTROLS_PLAYITEM             DISPID_WMPCONTROLS_BASE + 13
#define DISPID_WMPCONTROLS2_STEP                DISPID_WMPCONTROLS_BASE + 14
#define DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT  DISPID_WMPCONTROLS_BASE + 15
#define DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID  DISPID_WMPCONTROLS_BASE + 16
#define DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC DISPID_WMPCONTROLS_BASE + 17
#define DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE DISPID_WMPCONTROLS_BASE + 18
#define DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX DISPID_WMPCONTROLS_BASE + 19
#define DISPID_WMPCONTROLS3_GETLANGUAGENAME     DISPID_WMPCONTROLS_BASE + 20
#define DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE DISPID_WMPCONTROLS_BASE + 21
#define DISPID_WMPCONTROLSFAKE_TIMECOMPRESSION DISPID_WMPCONTROLS_BASE + 22

//////////////////////////////////////////////////////////////////////
// IWMPSettings
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPSETTINGS_BASE                 DISPID_WMPCONTROLS_BASE + DISPID_DELTA
#define DISPID_WMPSETTINGS_AUTOSTART            DISPID_WMPSETTINGS_BASE + 1
#define DISPID_WMPSETTINGS_BALANCE              DISPID_WMPSETTINGS_BASE + 2
#define DISPID_WMPSETTINGS_INVOKEURLS           DISPID_WMPSETTINGS_BASE + 3
#define DISPID_WMPSETTINGS_MUTE                 DISPID_WMPSETTINGS_BASE + 4
#define DISPID_WMPSETTINGS_PLAYCOUNT            DISPID_WMPSETTINGS_BASE + 5
#define DISPID_WMPSETTINGS_RATE                 DISPID_WMPSETTINGS_BASE + 6
#define DISPID_WMPSETTINGS_VOLUME               DISPID_WMPSETTINGS_BASE + 7
#define DISPID_WMPSETTINGS_BASEURL              DISPID_WMPSETTINGS_BASE + 8
#define DISPID_WMPSETTINGS_DEFAULTFRAME         DISPID_WMPSETTINGS_BASE + 9
#define DISPID_WMPSETTINGS_GETMODE              DISPID_WMPSETTINGS_BASE + 10
#define DISPID_WMPSETTINGS_SETMODE              DISPID_WMPSETTINGS_BASE + 11
#define DISPID_WMPSETTINGS_ENABLEERRORDIALOGS   DISPID_WMPSETTINGS_BASE + 12
#define DISPID_WMPSETTINGS_ISAVAILABLE          DISPID_WMPSETTINGS_BASE + 13
#define DISPID_WMPSETTINGS2_DEFAULTAUDIOLANGUAGE DISPID_WMPSETTINGS_BASE + 14
#define DISPID_WMPSETTINGS2_LIBRARYACCESSRIGHTS DISPID_WMPSETTINGS_BASE + 15
#define DISPID_WMPSETTINGS2_REQUESTLIBRARYACCESSRIGHTS DISPID_WMPSETTINGS_BASE + 16

//////////////////////////////////////////////////////////////////////
// IWMPPlayList
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPPLAYLIST_BASE                 DISPID_WMPSETTINGS_BASE + DISPID_DELTA + DISPID_DELTA
#define DISPID_WMPPLAYLIST_COUNT                DISPID_WMPPLAYLIST_BASE + 1
#define DISPID_WMPPLAYLIST_NAME                 DISPID_WMPPLAYLIST_BASE + 2
#define DISPID_WMPPLAYLIST_GETITEMINFO          DISPID_WMPPLAYLIST_BASE + 3
#define DISPID_WMPPLAYLIST_SETITEMINFO          DISPID_WMPPLAYLIST_BASE + 4
#define DISPID_WMPPLAYLIST_CLEAR                DISPID_WMPPLAYLIST_BASE + 5
#define DISPID_WMPPLAYLIST_INSERTITEM           DISPID_WMPPLAYLIST_BASE + 6
#define DISPID_WMPPLAYLIST_APPENDITEM           DISPID_WMPPLAYLIST_BASE + 7
#define DISPID_WMPPLAYLIST_REMOVEITEM           DISPID_WMPPLAYLIST_BASE + 8
#define DISPID_WMPPLAYLIST_MOVEITEM             DISPID_WMPPLAYLIST_BASE + 9
#define DISPID_WMPPLAYLIST_ATTRIBUTECOUNT       DISPID_WMPPLAYLIST_BASE + 10
#define DISPID_WMPPLAYLIST_ATTRIBUTENAME        DISPID_WMPPLAYLIST_BASE + 11
#define DISPID_WMPPLAYLIST_ITEM                 DISPID_WMPPLAYLIST_BASE + 12
#define DISPID_WMPPLAYLIST_ISIDENTICAL          DISPID_WMPPLAYLIST_BASE + 13

//////////////////////////////////////////////////////////////////////
// IWMPCdrom
//////////////////////////////////////////////////////////////////////

#define DISPID_WMPCDROM_BASE                    DISPID_WMPPLAYLIST_BASE + DISPID_DELTA
#define DISPID_WMPCDROM_DRIVESPECIFIER          DISPID_WMPCDROM_BASE + 1
#define DISPID_WMPCDROM_PLAYLIST                DISPID_WMPCDROM_BASE + 2
#define DISPID_WMPCDROM_EJECT                   DISPID_WMPCDROM_BASE + 3

//////////////////////////////////////////////////////////////////////
// IWMPCdromCollection
//////////////////////////////////////////////////////////////////////

#define DISPID_WMPCDROMCOLLECTION_BASE                   DISPID_WMPCDROM_BASE + DISPID_DELTA
#define DISPID_WMPCDROMCOLLECTION_COUNT                  DISPID_WMPCDROMCOLLECTION_BASE + 1
#define DISPID_WMPCDROMCOLLECTION_ITEM                   DISPID_WMPCDROMCOLLECTION_BASE + 2
#define DISPID_WMPCDROMCOLLECTION_GETBYDRIVESPECIFIER    DISPID_WMPCDROMCOLLECTION_BASE + 3
#define DISPID_WMPCDROMCOLLECTION_STARTMONITORINGCDROMS  DISPID_WMPCDROMCOLLECTION_BASE + 4
#define DISPID_WMPCDROMCOLLECTION_STOPMONITORINGCDROMS   DISPID_WMPCDROMCOLLECTION_BASE + 5

//////////////////////////////////////////////////////////////////////
// IWMPStringCollection
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPSTRINGCOLLECTION_BASE                  (DISPID_WMPCDROMCOLLECTION_BASE + DISPID_DELTA + DISPID_DELTA)
#define DISPID_WMPSTRINGCOLLECTION_COUNT                 DISPID_WMPSTRINGCOLLECTION_BASE + 1
#define DISPID_WMPSTRINGCOLLECTION_ITEM                  DISPID_WMPSTRINGCOLLECTION_BASE + 2

//////////////////////////////////////////////////////////////////////
// IWMPMediaCollection
//////////////////////////////////////////////////////////////////////

#define DISPID_WMPMEDIACOLLECTION_BASE              DISPID_WMPSTRINGCOLLECTION_BASE + DISPID_DELTA
#define DISPID_WMPMEDIACOLLECTION_ADD               DISPID_WMPMEDIACOLLECTION_BASE + 2
#define DISPID_WMPMEDIACOLLECTION_GETALL            DISPID_WMPMEDIACOLLECTION_BASE + 3
#define DISPID_WMPMEDIACOLLECTION_GETBYNAME         DISPID_WMPMEDIACOLLECTION_BASE + 4
#define DISPID_WMPMEDIACOLLECTION_GETBYGENRE        DISPID_WMPMEDIACOLLECTION_BASE + 5
#define DISPID_WMPMEDIACOLLECTION_GETBYAUTHOR       DISPID_WMPMEDIACOLLECTION_BASE + 6
#define DISPID_WMPMEDIACOLLECTION_GETBYALBUM        DISPID_WMPMEDIACOLLECTION_BASE + 7
#define DISPID_WMPMEDIACOLLECTION_GETBYATTRIBUTE    DISPID_WMPMEDIACOLLECTION_BASE + 8
#define DISPID_WMPMEDIACOLLECTION_REMOVE            DISPID_WMPMEDIACOLLECTION_BASE + 9
#define DISPID_WMPMEDIACOLLECTION_GETATTRIBUTESTRINGCOLLECTION DISPID_WMPMEDIACOLLECTION_BASE + 11
#define DISPID_WMPMEDIACOLLECTION_NEWQUERY          DISPID_WMPMEDIACOLLECTION_BASE + 12
#define DISPID_WMPMEDIACOLLECTION_STARTMONITORING   DISPID_WMPMEDIACOLLECTION_BASE + 13
#define DISPID_WMPMEDIACOLLECTION_STOPMONITORING    DISPID_WMPMEDIACOLLECTION_BASE + 14
#define DISPID_WMPMEDIACOLLECTION_STARTCONTENTSCAN  DISPID_WMPMEDIACOLLECTION_BASE + 15
#define DISPID_WMPMEDIACOLLECTION_STOPCONTENTSCAN   DISPID_WMPMEDIACOLLECTION_BASE + 16
#define DISPID_WMPMEDIACOLLECTION_STARTSEARCH       DISPID_WMPMEDIACOLLECTION_BASE + 17
#define DISPID_WMPMEDIACOLLECTION_STOPSEARCH        DISPID_WMPMEDIACOLLECTION_BASE + 18
#define DISPID_WMPMEDIACOLLECTION_UPDATEMETADATA    DISPID_WMPMEDIACOLLECTION_BASE + 19
#define DISPID_WMPMEDIACOLLECTION_GETMEDIAATOM      DISPID_WMPMEDIACOLLECTION_BASE + 20
#define DISPID_WMPMEDIACOLLECTION_SETDELETED        DISPID_WMPMEDIACOLLECTION_BASE + 21
#define DISPID_WMPMEDIACOLLECTION_ISDELETED         DISPID_WMPMEDIACOLLECTION_BASE + 22
#define DISPID_WMPMEDIACOLLECTION_GETBYQUERYDESCRIPTION DISPID_WMPMEDIACOLLECTION_BASE + 23
#define DISPID_WMPMEDIACOLLECTION_FREEZECOLLECTIONCHANGE  DISPID_WMPMEDIACOLLECTION_BASE + 24
#define DISPID_WMPMEDIACOLLECTION_UNFREEZECOLLECTIONCHANGE DISPID_WMPMEDIACOLLECTION_BASE + 25
#define DISPID_WMPMEDIACOLLECTION_POSTCOLLECTIONCHANGE DISPID_WMPMEDIACOLLECTION_BASE + 26

//////////////////////////////////////////////////////////////////////
// IWMPPlaylistCollection
//////////////////////////////////////////////////////////////////////

#define DISPID_WMPPLAYLISTARRAY_BASE                DISPID_WMPMEDIACOLLECTION_BASE + DISPID_DELTA
#define DISPID_WMPPLAYLISTARRAY_COUNT               DISPID_WMPPLAYLISTARRAY_BASE + 1
#define DISPID_WMPPLAYLISTARRAY_ITEM                DISPID_WMPPLAYLISTARRAY_BASE + 2

//////////////////////////////////////////////////////////////////////
// IWMPPlaylistCollection
//////////////////////////////////////////////////////////////////////

#define DISPID_WMPPLAYLISTCOLLECTION_BASE           DISPID_WMPPLAYLISTARRAY_BASE + DISPID_DELTA
#define DISPID_WMPPLAYLISTCOLLECTION_NEWPLAYLIST    DISPID_WMPPLAYLISTCOLLECTION_BASE + 2
#define DISPID_WMPPLAYLISTCOLLECTION_GETALL         DISPID_WMPPLAYLISTCOLLECTION_BASE + 3
#define DISPID_WMPPLAYLISTCOLLECTION_GETBYNAME      DISPID_WMPPLAYLISTCOLLECTION_BASE + 4
#define DISPID_WMPPLAYLISTCOLLECTION_GETBYQUERYDESCRIPTION DISPID_WMPPLAYLISTCOLLECTION_BASE + 5
#define DISPID_WMPPLAYLISTCOLLECTION_REMOVE         DISPID_WMPPLAYLISTCOLLECTION_BASE + 6
#define DISPID_WMPPLAYLISTCOLLECTION_NEWQUERY       DISPID_WMPPLAYLISTCOLLECTION_BASE + 7
#define DISPID_WMPPLAYLISTCOLLECTION_STARTMONITORING DISPID_WMPPLAYLISTCOLLECTION_BASE + 8
#define DISPID_WMPPLAYLISTCOLLECTION_STOPMONITORING DISPID_WMPPLAYLISTCOLLECTION_BASE + 9
#define DISPID_WMPPLAYLISTCOLLECTION_SETDELETED     DISPID_WMPPLAYLISTCOLLECTION_BASE + 10
#define DISPID_WMPPLAYLISTCOLLECTION_ISDELETED      DISPID_WMPPLAYLISTCOLLECTION_BASE + 11
#define DISPID_WMPPLAYLISTCOLLECTION_IMPORTPLAYLIST DISPID_WMPPLAYLISTCOLLECTION_BASE + 12

//////////////////////////////////////////////////////////////////////
//  IWMPMedia
//////////////////////////////////////////////////////////////////////

#define DISPID_WMPMEDIA_BASE                            (DISPID_WMPPLAYLISTCOLLECTION_BASE + (4 * DISPID_DELTA))
#define DISPID_WMPMEDIA_SOURCEURL                       DISPID_WMPMEDIA_BASE + 1
#define DISPID_WMPMEDIA_IMAGESOURCEWIDTH                DISPID_WMPMEDIA_BASE + 2
#define DISPID_WMPMEDIA_IMAGESOURCEHEIGHT               DISPID_WMPMEDIA_BASE + 3
#define DISPID_WMPMEDIA_MARKERCOUNT                     DISPID_WMPMEDIA_BASE + 4
#define DISPID_WMPMEDIA_GETMARKERTIME                   DISPID_WMPMEDIA_BASE + 5
#define DISPID_WMPMEDIA_GETMARKERNAME                   DISPID_WMPMEDIA_BASE + 6
#define DISPID_WMPMEDIA_DURATION                        DISPID_WMPMEDIA_BASE + 7
#define DISPID_WMPMEDIA_DURATIONSTRING                  DISPID_WMPMEDIA_BASE + 8
#define DISPID_WMPMEDIA_ATTRIBUTECOUNT                  DISPID_WMPMEDIA_BASE + 9
#define DISPID_WMPMEDIA_GETATTRIBUTENAME                DISPID_WMPMEDIA_BASE + 10
#define DISPID_WMPMEDIA_GETITEMINFO                     DISPID_WMPMEDIA_BASE + 11
#define DISPID_WMPMEDIA_SETITEMINFO                     DISPID_WMPMEDIA_BASE + 12
#define DISPID_WMPMEDIA_ISIDENTICAL                     DISPID_WMPMEDIA_BASE + 13
#define DISPID_WMPMEDIA_NAME                            DISPID_WMPMEDIA_BASE + 14
#define DISPID_WMPMEDIA_GETITEMINFOBYATOM               DISPID_WMPMEDIA_BASE + 15
#define DISPID_WMPMEDIA_ISMEMBEROF                      DISPID_WMPMEDIA_BASE + 16
#define DISPID_WMPMEDIA_ISREADONLYITEM                  DISPID_WMPMEDIA_BASE + 17
#define DISPID_WMPMEDIA2_ERROR                          DISPID_WMPMEDIA_BASE + 18
#define DISPID_WMPMEDIA3_GETATTRIBUTECOUNTBYTYPE        DISPID_WMPMEDIA_BASE + 19
#define DISPID_WMPMEDIA3_GETITEMINFOBYTYPE              DISPID_WMPMEDIA_BASE + 20

//////////////////////////////////////////////////////////////////////
//  IWMPNetwork
//////////////////////////////////////////////////////////////////////

#define DISPID_WMPNETWORK_BASE                            DISPID_WMPMEDIA_BASE + DISPID_DELTA
#define DISPID_WMPNETWORK_BANDWIDTH                       DISPID_WMPNETWORK_BASE + 1
#define DISPID_WMPNETWORK_RECOVEREDPACKETS                DISPID_WMPNETWORK_BASE + 2
#define DISPID_WMPNETWORK_SOURCEPROTOCOL                  DISPID_WMPNETWORK_BASE + 3
#define DISPID_WMPNETWORK_RECEIVEDPACKETS                 DISPID_WMPNETWORK_BASE + 4
#define DISPID_WMPNETWORK_LOSTPACKETS                     DISPID_WMPNETWORK_BASE + 5
#define DISPID_WMPNETWORK_RECEPTIONQUALITY                DISPID_WMPNETWORK_BASE + 6
#define DISPID_WMPNETWORK_BUFFERINGCOUNT                  DISPID_WMPNETWORK_BASE + 7
#define DISPID_WMPNETWORK_BUFFERINGPROGRESS               DISPID_WMPNETWORK_BASE + 8
#define DISPID_WMPNETWORK_BUFFERINGTIME                   DISPID_WMPNETWORK_BASE + 9
#define DISPID_WMPNETWORK_FRAMERATE                       DISPID_WMPNETWORK_BASE + 10
#define DISPID_WMPNETWORK_MAXBITRATE                      DISPID_WMPNETWORK_BASE + 11
#define DISPID_WMPNETWORK_BITRATE                         DISPID_WMPNETWORK_BASE + 12
#define DISPID_WMPNETWORK_GETPROXYSETTINGS                DISPID_WMPNETWORK_BASE + 13
#define DISPID_WMPNETWORK_SETPROXYSETTINGS                DISPID_WMPNETWORK_BASE + 14
#define DISPID_WMPNETWORK_GETPROXYNAME                    DISPID_WMPNETWORK_BASE + 15
#define DISPID_WMPNETWORK_SETPROXYNAME                    DISPID_WMPNETWORK_BASE + 16
#define DISPID_WMPNETWORK_GETPROXYPORT                    DISPID_WMPNETWORK_BASE + 17
#define DISPID_WMPNETWORK_SETPROXYPORT                    DISPID_WMPNETWORK_BASE + 18
#define DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST           DISPID_WMPNETWORK_BASE + 19
#define DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST           DISPID_WMPNETWORK_BASE + 20
#define DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL          DISPID_WMPNETWORK_BASE + 21
#define DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL          DISPID_WMPNETWORK_BASE + 22
#define DISPID_WMPNETWORK_MAXBANDWIDTH                    DISPID_WMPNETWORK_BASE + 23
#define DISPID_WMPNETWORK_DOWNLOADPROGRESS                DISPID_WMPNETWORK_BASE + 24
#define DISPID_WMPNETWORK_ENCODEDFRAMERATE                DISPID_WMPNETWORK_BASE + 25
#define DISPID_WMPNETWORK_FRAMESSKIPPED                   DISPID_WMPNETWORK_BASE + 26

//////////////////////////////////////////////////////////////////////
// IWMPError
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPERROR_BASE                            DISPID_WMPNETWORK_BASE + DISPID_DELTA
#define DISPID_WMPERROR_CLEARERRORQUEUE                 DISPID_WMPERROR_BASE + 1
#define DISPID_WMPERROR_ERRORCOUNT                      DISPID_WMPERROR_BASE + 2
#define DISPID_WMPERROR_ITEM                            DISPID_WMPERROR_BASE + 3
#define DISPID_WMPERROR_WEBHELP                         DISPID_WMPERROR_BASE + 4

//////////////////////////////////////////////////////////////////////
// IWMPErrorItem
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPERRORITEM_BASE                    DISPID_WMPERROR_BASE + DISPID_DELTA
#define DISPID_WMPERRORITEM_ERRORCODE               DISPID_WMPERRORITEM_BASE + 1
#define DISPID_WMPERRORITEM_ERRORDESCRIPTION        DISPID_WMPERRORITEM_BASE + 2
#define DISPID_WMPERRORITEM_ERRORCONTEXT            DISPID_WMPERRORITEM_BASE + 3
#define DISPID_WMPERRORITEM_REMEDY                  DISPID_WMPERRORITEM_BASE + 4
#define DISPID_WMPERRORITEM_CUSTOMURL               DISPID_WMPERRORITEM_BASE + 5
#define DISPID_WMPERRORITEM2_CONDITION              DISPID_WMPERRORITEM_BASE + 6

/////////////////////////////////////////////////////////////////////////
// IWMPClosedCaption
/////////////////////////////////////////////////////////////////////////
#define DISPID_WMPCLOSEDCAPTION_BASE                   DISPID_WMPERRORITEM_BASE + DISPID_DELTA
#define DISPID_WMPCLOSEDCAPTION_SAMISTYLE              DISPID_WMPCLOSEDCAPTION_BASE + 1
#define DISPID_WMPCLOSEDCAPTION_SAMILANG               DISPID_WMPCLOSEDCAPTION_BASE + 2
#define DISPID_WMPCLOSEDCAPTION_SAMIFILENAME           DISPID_WMPCLOSEDCAPTION_BASE + 3
#define DISPID_WMPCLOSEDCAPTION_CAPTIONINGID           DISPID_WMPCLOSEDCAPTION_BASE + 4
#define DISPID_WMPCLOSEDCAPTION2_GETLANGCOUNT          DISPID_WMPCLOSEDCAPTION_BASE + 5
#define DISPID_WMPCLOSEDCAPTION2_GETLANGNAME           DISPID_WMPCLOSEDCAPTION_BASE + 6
#define DISPID_WMPCLOSEDCAPTION2_GETLANGID             DISPID_WMPCLOSEDCAPTION_BASE + 7
#define DISPID_WMPCLOSEDCAPTION2_GETSTYLECOUNT         DISPID_WMPCLOSEDCAPTION_BASE + 8
#define DISPID_WMPCLOSEDCAPTION2_GETSTYLENAME          DISPID_WMPCLOSEDCAPTION_BASE + 9

/////////////////////////////////////////////////////////////////////////
// IWMPDVD
/////////////////////////////////////////////////////////////////////////
#define DISPID_WMPDVD_BASE                              DISPID_WMPCLOSEDCAPTION_BASE + DISPID_DELTA
#define DISPID_WMPDVD_ISAVAILABLE                       DISPID_WMPDVD_BASE + 1
#define DISPID_WMPDVD_DOMAIN                            DISPID_WMPDVD_BASE + 2
#define DISPID_WMPDVD_TOPMENU                           DISPID_WMPDVD_BASE + 3
#define DISPID_WMPDVD_TITLEMENU                         DISPID_WMPDVD_BASE + 4
#define DISPID_WMPDVD_BACK                              DISPID_WMPDVD_BASE + 5
#define DISPID_WMPDVD_RESUME                            DISPID_WMPDVD_BASE + 6

//////////////////////////////////////////////////////////////////////
// IWMPMetadata* interfaces
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPMETADATA_BASE                                 DISPID_WMPDVD_BASE + DISPID_DELTA
#define DISPID_WMPMETADATA_PICTURE_MIMETYPE                     DISPID_WMPMETADATA_BASE + 1
#define DISPID_WMPMETADATA_PICTURE_PICTURETYPE                  DISPID_WMPMETADATA_BASE + 2
#define DISPID_WMPMETADATA_PICTURE_DESCRIPTION                  DISPID_WMPMETADATA_BASE + 3
#define DISPID_WMPMETADATA_PICTURE_URL                          DISPID_WMPMETADATA_BASE + 4
#define DISPID_WMPMETADATA_TEXT_TEXT                            DISPID_WMPMETADATA_BASE + 5
#define DISPID_WMPMETADATA_TEXT_DESCRIPTION                     DISPID_WMPMETADATA_BASE + 6

//////////////////////////////////////////////////////////////////////
// IWMPPlayerApplication
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPPLAYERAPP_BASE                        DISPID_WMPMETADATA_BASE + DISPID_DELTA
#define DISPID_WMPPLAYERAPP_SWITCHTOPLAYERAPPLICATION   DISPID_WMPPLAYERAPP_BASE + 1
#define DISPID_WMPPLAYERAPP_SWITCHTOCONTROL             DISPID_WMPPLAYERAPP_BASE + 2
#define DISPID_WMPPLAYERAPP_PLAYERDOCKED                DISPID_WMPPLAYERAPP_BASE + 3
#define DISPID_WMPPLAYERAPP_HASDISPLAY                  DISPID_WMPPLAYERAPP_BASE + 4
#define DISPID_WMPPLAYERAPP_REMOTESTATUS                DISPID_WMPPLAYERAPP_BASE + 5

//////////////////////////////////////////////////////////////////////
// IWMPDownloadManager
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPDOWNLOADMANAGER_BASE                      DISPID_WMPPLAYERAPP_BASE + DISPID_DELTA
#define DISPID_WMPDOWNLOADMANAGER_GETDOWNLOADCOLLECTION     DISPID_WMPDOWNLOADMANAGER_BASE + 1
#define DISPID_WMPDOWNLOADMANAGER_CREATEDOWNLOADCOLLECTION  DISPID_WMPDOWNLOADMANAGER_BASE + 2

//////////////////////////////////////////////////////////////////////
// IWMPDownloadCollection
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPDOWNLOADCOLLECTION_BASE               DISPID_WMPDOWNLOADMANAGER_BASE + DISPID_DELTA
#define DISPID_WMPDOWNLOADCOLLECTION_ID                 DISPID_WMPDOWNLOADCOLLECTION_BASE + 1
#define DISPID_WMPDOWNLOADCOLLECTION_COUNT              DISPID_WMPDOWNLOADCOLLECTION_BASE + 2
#define DISPID_WMPDOWNLOADCOLLECTION_ITEM               DISPID_WMPDOWNLOADCOLLECTION_BASE + 3
#define DISPID_WMPDOWNLOADCOLLECTION_STARTDOWNLOAD      DISPID_WMPDOWNLOADCOLLECTION_BASE + 4
#define DISPID_WMPDOWNLOADCOLLECTION_REMOVEITEM         DISPID_WMPDOWNLOADCOLLECTION_BASE + 5
#define DISPID_WMPDOWNLOADCOLLECTION_CLEAR              DISPID_WMPDOWNLOADCOLLECTION_BASE + 6

//////////////////////////////////////////////////////////////////////
// IWMPDownloadItem
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPDOWNLOADITEM_BASE                     DISPID_WMPDOWNLOADCOLLECTION_BASE + DISPID_DELTA
#define DISPID_WMPDOWNLOADITEM_SOURCEURL                DISPID_WMPDOWNLOADITEM_BASE + 1
#define DISPID_WMPDOWNLOADITEM_SIZE                     DISPID_WMPDOWNLOADITEM_BASE + 2
#define DISPID_WMPDOWNLOADITEM_TYPE                     DISPID_WMPDOWNLOADITEM_BASE + 3
#define DISPID_WMPDOWNLOADITEM_PROGRESS                 DISPID_WMPDOWNLOADITEM_BASE + 4
#define DISPID_WMPDOWNLOADITEM_DOWNLOADSTATE            DISPID_WMPDOWNLOADITEM_BASE + 5
#define DISPID_WMPDOWNLOADITEM_PAUSE                    DISPID_WMPDOWNLOADITEM_BASE + 6
#define DISPID_WMPDOWNLOADITEM_RESUME                   DISPID_WMPDOWNLOADITEM_BASE + 7
#define DISPID_WMPDOWNLOADITEM_CANCEL                   DISPID_WMPDOWNLOADITEM_BASE + 8

//////////////////////////////////////////////////////////////////////
// IWMPDownloadItem2
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPDOWNLOADITEM2_BASE                    DISPID_WMPDOWNLOADITEM_BASE + DISPID_DELTA
#define DISPID_WMPDOWNLOADITEM2_GETITEMINFO             DISPID_WMPDOWNLOADITEM2_BASE + 1

//////////////////////////////////////////////////////////////////////
// IWMPQuery
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPQUERY_BASE                            DISPID_WMPDOWNLOADITEM2_BASE + DISPID_DELTA
#define DISPID_WMPQUERY_ADDCONDITION                    DISPID_WMPQUERY_BASE + 1
#define DISPID_WMPQUERY_BEGINNEXTGROUP                  DISPID_WMPQUERY_BASE + 2

//////////////////////////////////////////////////////////////////////
// IWMPMediaCollection2
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPMEDIACOLLECTION2_BASE                     DISPID_WMPQUERY_BASE + DISPID_DELTA
#define DISPID_WMPMEDIACOLLECTION2_CREATEQUERY              DISPID_WMPMEDIACOLLECTION2_BASE + 1
#define DISPID_WMPMEDIACOLLECTION2_GETPLAYLISTBYQUERY       DISPID_WMPMEDIACOLLECTION2_BASE + 2
#define DISPID_WMPMEDIACOLLECTION2_GETSTRINGCOLLBYQUERY     DISPID_WMPMEDIACOLLECTION2_BASE + 3
#define DISPID_WMPMEDIACOLLECTION2_GETBYATTRANDMEDIATYPE    DISPID_WMPMEDIACOLLECTION2_BASE + 4

//////////////////////////////////////////////////////////////////////
// IWMPStringCollection2
//////////////////////////////////////////////////////////////////////
#define DISPID_WMPSTRINGCOLLECTION2_BASE                 DISPID_WMPMEDIACOLLECTION2_BASE + DISPID_DELTA
#define DISPID_WMPSTRINGCOLLECTION2_ISIDENTICAL          DISPID_WMPSTRINGCOLLECTION2_BASE + 1
#define DISPID_WMPSTRINGCOLLECTION2_GETITEMINFO          DISPID_WMPSTRINGCOLLECTION2_BASE + 2
#define DISPID_WMPSTRINGCOLLECTION2_GETATTRCOUNTBYTYPE   DISPID_WMPSTRINGCOLLECTION2_BASE + 3
#define DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE    DISPID_WMPSTRINGCOLLECTION2_BASE + 4


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
#define DISPID_WMPCORE_MIN                      1
#define DISPID_WMPCORE_MAX                      DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE


//////////////////////////////////////////////////////////////////////
// DIID_WMPCoreEvents
//////////////////////////////////////////////////////////////////////
#define WMPCOREEVENT_BASE                       5000
#define DISPID_WMPCOREEVENT_OPENSTATECHANGE     (WMPCOREEVENT_BASE + 1)
#define DISPID_WMPCOREEVENT_STATUSCHANGE        (WMPCOREEVENT_BASE + 2)


#define WMPCOREEVENT_CONTROL_BASE               5100
#define DISPID_WMPCOREEVENT_PLAYSTATECHANGE     (WMPCOREEVENT_CONTROL_BASE + 1)
#define DISPID_WMPCOREEVENT_AUDIOLANGUAGECHANGE (WMPCOREEVENT_CONTROL_BASE + 2)

#define WMPCOREEVENT_SEEK_BASE                  5200
#define DISPID_WMPCOREEVENT_ENDOFSTREAM         (WMPCOREEVENT_SEEK_BASE + 1)
#define DISPID_WMPCOREEVENT_POSITIONCHANGE      (WMPCOREEVENT_SEEK_BASE + 2)
#define DISPID_WMPCOREEVENT_MARKERHIT           (WMPCOREEVENT_SEEK_BASE + 3)
#define DISPID_WMPCOREEVENT_DURATIONUNITCHANGE  (WMPCOREEVENT_SEEK_BASE + 4)

#define WMPCOREEVENT_CONTENT_BASE               5300
#define DISPID_WMPCOREEVENT_SCRIPTCOMMAND       (WMPCOREEVENT_CONTENT_BASE + 1)

#define WMPCOREEVENT_NETWORK_BASE               5400
#define DISPID_WMPCOREEVENT_DISCONNECT          (WMPCOREEVENT_NETWORK_BASE + 1)
#define DISPID_WMPCOREEVENT_BUFFERING           (WMPCOREEVENT_NETWORK_BASE + 2)
#define DISPID_WMPCOREEVENT_NEWSTREAM           (WMPCOREEVENT_NETWORK_BASE + 3)

#define WMPCOREEVENT_ERROR_BASE                 5500
#define DISPID_WMPCOREEVENT_ERROR               (WMPCOREEVENT_ERROR_BASE + 1)

#define WMPCOREEVENT_WARNING_BASE               5600
#define DISPID_WMPCOREEVENT_WARNING             (WMPCOREEVENT_WARNING_BASE + 1)

#define WMPCOREEVENT_CDROM_BASE                 5700
#define DISPID_WMPCOREEVENT_CDROMMEDIACHANGE    (WMPCOREEVENT_CDROM_BASE + 1)

#define WMPCOREEVENT_PLAYLIST_BASE                                      5800
#define DISPID_WMPCOREEVENT_PLAYLISTCHANGE                              (WMPCOREEVENT_PLAYLIST_BASE + 1)
#define DISPID_WMPCOREEVENT_MEDIACHANGE                                 (WMPCOREEVENT_PLAYLIST_BASE + 2)
#define DISPID_WMPCOREEVENT_CURRENTMEDIAITEMAVAILABLE                   (WMPCOREEVENT_PLAYLIST_BASE + 3)
#define DISPID_WMPCOREEVENT_CURRENTPLAYLISTCHANGE                       (WMPCOREEVENT_PLAYLIST_BASE + 4)
#define DISPID_WMPCOREEVENT_CURRENTPLAYLISTITEMAVAILABLE                (WMPCOREEVENT_PLAYLIST_BASE + 5)
#define DISPID_WMPCOREEVENT_CURRENTITEMCHANGE                           (WMPCOREEVENT_PLAYLIST_BASE + 6)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONCHANGE                       (WMPCOREEVENT_PLAYLIST_BASE + 7)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGADDED         (WMPCOREEVENT_PLAYLIST_BASE + 8)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGREMOVED       (WMPCOREEVENT_PLAYLIST_BASE + 9)
#define DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONCHANGE                    (WMPCOREEVENT_PLAYLIST_BASE + 10)
#define DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTADDED             (WMPCOREEVENT_PLAYLIST_BASE + 11)
#define DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTREMOVED           (WMPCOREEVENT_PLAYLIST_BASE + 12)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANADDEDITEM         (WMPCOREEVENT_PLAYLIST_BASE + 13)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANPROGRESS          (WMPCOREEVENT_PLAYLIST_BASE + 14)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHFOUNDITEM              (WMPCOREEVENT_PLAYLIST_BASE + 15)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHPROGRESS               (WMPCOREEVENT_PLAYLIST_BASE + 16)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHCOMPLETE               (WMPCOREEVENT_PLAYLIST_BASE + 17)
#define DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTSETASDELETED      (WMPCOREEVENT_PLAYLIST_BASE + 18)
#define DISPID_WMPCOREEVENT_MODECHANGE                                  (WMPCOREEVENT_PLAYLIST_BASE + 19)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGCHANGED       (WMPCOREEVENT_PLAYLIST_BASE + 20)
#define DISPID_WMPCOREEVENT_MEDIAERROR                                  (WMPCOREEVENT_PLAYLIST_BASE + 21)
#define DISPID_WMPCOREEVENT_DOMAINCHANGE                                (WMPCOREEVENT_PLAYLIST_BASE + 22)
#define DISPID_WMPCOREEVENT_OPENPLAYLISTSWITCH                          (WMPCOREEVENT_PLAYLIST_BASE + 23)
#define DISPID_WMPCOREEVENT_STRINGCOLLECTIONCHANGE                      (WMPCOREEVENT_PLAYLIST_BASE + 24)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAADDED                   (WMPCOREEVENT_PLAYLIST_BASE + 25)
#define DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAREMOVED                 (WMPCOREEVENT_PLAYLIST_BASE + 26)



//////////////////////////////////////////////////////////////////////
// DIID_WMPOCXEvents
//
// These are the events that will be fired from OCX itself
//////////////////////////////////////////////////////////////////////
#define WMPOCXEVENT_BASE                        6500
#define DISPID_WMPOCXEVENT_SWITCHEDTOPLAYERAPPLICATION      (WMPOCXEVENT_BASE + 1)
#define DISPID_WMPOCXEVENT_SWITCHEDTOCONTROL                (WMPOCXEVENT_BASE + 2)
#define DISPID_WMPOCXEVENT_PLAYERDOCKEDSTATECHANGE          (WMPOCXEVENT_BASE + 3)
#define DISPID_WMPOCXEVENT_PLAYERRECONNECT                  (WMPOCXEVENT_BASE + 4)
#define DISPID_WMPOCXEVENT_CLICK                            (WMPOCXEVENT_BASE + 5)
#define DISPID_WMPOCXEVENT_DOUBLECLICK                      (WMPOCXEVENT_BASE + 6)
#define DISPID_WMPOCXEVENT_KEYDOWN                          (WMPOCXEVENT_BASE + 7)
#define DISPID_WMPOCXEVENT_KEYPRESS                         (WMPOCXEVENT_BASE + 8)
#define DISPID_WMPOCXEVENT_KEYUP                            (WMPOCXEVENT_BASE + 9)
#define DISPID_WMPOCXEVENT_MOUSEDOWN                        (WMPOCXEVENT_BASE + 10)
#define DISPID_WMPOCXEVENT_MOUSEMOVE                        (WMPOCXEVENT_BASE + 11)
#define DISPID_WMPOCXEVENT_MOUSEUP                          (WMPOCXEVENT_BASE + 12)
#define DISPID_WMPOCXEVENT_DEVICECONNECT                    (WMPOCXEVENT_BASE + 13)
#define DISPID_WMPOCXEVENT_DEVICEDISCONNECT                 (WMPOCXEVENT_BASE + 14)
#define DISPID_WMPOCXEVENT_DEVICESTATUSCHANGE               (WMPOCXEVENT_BASE + 15)
#define DISPID_WMPOCXEVENT_DEVICESYNCSTATECHANGE            (WMPOCXEVENT_BASE + 16)
#define DISPID_WMPOCXEVENT_DEVICESYNCERROR                  (WMPOCXEVENT_BASE + 17)
#define DISPID_WMPOCXEVENT_CREATEPARTNERSHIPCOMPLETE        (WMPOCXEVENT_BASE + 18)
#define DISPID_WMPOCXEVENT_CDROMRIPSTATECHANGE              (WMPOCXEVENT_BASE + 19)
#define DISPID_WMPOCXEVENT_CDROMRIPMEDIAERROR               (WMPOCXEVENT_BASE + 20)
#define DISPID_WMPOCXEVENT_CDROMBURNSTATECHANGE             (WMPOCXEVENT_BASE + 21)
#define DISPID_WMPOCXEVENT_CDROMBURNMEDIAERROR              (WMPOCXEVENT_BASE + 22)
#define DISPID_WMPOCXEVENT_CDROMBURNERROR                   (WMPOCXEVENT_BASE + 23)
#define DISPID_WMPOCXEVENT_LIBRARYCONNECT                   (WMPOCXEVENT_BASE + 24)
#define DISPID_WMPOCXEVENT_LIBRARYDISCONNECT                (WMPOCXEVENT_BASE + 25)
#define DISPID_WMPOCXEVENT_FOLDERSCANSTATECHANGE            (WMPOCXEVENT_BASE + 26)



//*****************************************************************************
//
//  End of File
//
//*****************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmpplug.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmpplugpri.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmpplugpri_h__
#define __wmpplugpri_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMPPluginUI_FWD_DEFINED__
#define __IWMPPluginUI_FWD_DEFINED__
typedef interface IWMPPluginUI IWMPPluginUI;
#endif 	/* __IWMPPluginUI_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "wmp.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmpplugpri_0000_0000 */
/* [local] */ 

//=========================================================================
//
// Microsoft Windows Media Technologies
// Copyright (C) Microsoft Corporation. All rights reserved.
//
//=========================================================================
#define PLUGIN_INSTALLREGKEY                L"Software\\Microsoft\\MediaPlayer\\UIPlugins"
#define PLUGIN_INSTALLREGKEY_FRIENDLYNAME   L"FriendlyName"
#define PLUGIN_INSTALLREGKEY_DESCRIPTION    L"Description"
#define PLUGIN_INSTALLREGKEY_CAPABILITIES   L"Capabilities"
#define PLUGIN_INSTALLREGKEY_UNINSTALL      L"UninstallPath"
#define	PLUGIN_TYPE_BACKGROUND	( 0x1 )

#define	PLUGIN_TYPE_SEPARATEWINDOW	( 0x2 )

#define	PLUGIN_TYPE_DISPLAYAREA	( 0x3 )

#define	PLUGIN_TYPE_SETTINGSAREA	( 0x4 )

#define	PLUGIN_TYPE_METADATAAREA	( 0x5 )

#define	PLUGIN_FLAGS_HASPROPERTYPAGE	( 0x80000000 )

#define	PLUGIN_FLAGS_INSTALLAUTORUN	( 0x40000000 )

#define	PLUGIN_FLAGS_LAUNCHPROPERTYPAGE	( 0x20000000 )

#define	PLUGIN_FLAGS_ACCEPTSMEDIA	( 0x10000000 )

#define	PLUGIN_FLAGS_ACCEPTSPLAYLISTS	( 0x8000000 )

#define	PLUGIN_FLAGS_HASPRESETS	( 0x4000000 )

#define	PLUGIN_FLAGS_HIDDEN	( 0x2000000 )

#define PLUGIN_MISC_PRESETCOUNT      L"PresetCount"
#define PLUGIN_MISC_PRESETNAMES      L"PresetNames"
#define PLUGIN_MISC_CURRENTPRESET    L"CurrentPreset"
#define PLUGIN_SEPARATEWINDOW_RESIZABLE     L"Resizable"
#define PLUGIN_SEPARATEWINDOW_DEFAULTWIDTH  L"DefaultWidth"
#define PLUGIN_SEPARATEWINDOW_DEFAULTHEIGHT L"DefaultHeight"
#define PLUGIN_SEPARATEWINDOW_MINWIDTH      L"MinWidth"
#define PLUGIN_SEPARATEWINDOW_MINHEIGHT     L"MinHeight"
#define PLUGIN_SEPARATEWINDOW_MAXWIDTH      L"MaxWidth"
#define PLUGIN_SEPARATEWINDOW_MAXHEIGHT     L"MaxHeight"
#define PLUGIN_MISC_QUERYDESTROY            L"QueryDestroy"
#define PLUGIN_ALL_MEDIASENDTO              L"MediaSendTo"
#define PLUGIN_ALL_PLAYLISTSENDTO           L"PlaylistSendTo"
__inline BOOL WMPNotifyPluginAddRemove()
{
    return( ::PostMessage( HWND_BROADCAST, ::RegisterWindowMessageA( "WMPlayer_PluginAddRemove" ), 0, 0 ) );
}


extern RPC_IF_HANDLE __MIDL_itf_wmpplugpri_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmpplugpri_0000_0000_v0_0_s_ifspec;

#ifndef __IWMPPluginUI_INTERFACE_DEFINED__
#define __IWMPPluginUI_INTERFACE_DEFINED__

/* interface IWMPPluginUI */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPPluginUI;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4C5E8F9F-AD3E-4bf9-9753-FCD30D6D38DD")
    IWMPPluginUI : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetCore( 
            /* [in] */ IWMPCore *pCore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ HWND hwndParent,
            /* [out] */ HWND *phwndWindow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Destroy( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DisplayPropertyPage( 
            /* [in] */ HWND hwndParent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ const WCHAR *pwszName,
            /* [out] */ VARIANT *pvarProperty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [in] */ const WCHAR *pwszName,
            /* [in] */ const VARIANT *pvarProperty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
            /* [in] */ LPMSG lpmsg) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPPluginUIVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPPluginUI * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPPluginUI * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPPluginUI * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetCore )( 
            IWMPPluginUI * This,
            /* [in] */ IWMPCore *pCore);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            IWMPPluginUI * This,
            /* [in] */ HWND hwndParent,
            /* [out] */ HWND *phwndWindow);
        
        HRESULT ( STDMETHODCALLTYPE *Destroy )( 
            IWMPPluginUI * This);
        
        HRESULT ( STDMETHODCALLTYPE *DisplayPropertyPage )( 
            IWMPPluginUI * This,
            /* [in] */ HWND hwndParent);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            IWMPPluginUI * This,
            /* [in] */ const WCHAR *pwszName,
            /* [out] */ VARIANT *pvarProperty);
        
        HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            IWMPPluginUI * This,
            /* [in] */ const WCHAR *pwszName,
            /* [in] */ const VARIANT *pvarProperty);
        
        HRESULT ( STDMETHODCALLTYPE *TranslateAccelerator )( 
            IWMPPluginUI * This,
            /* [in] */ LPMSG lpmsg);
        
        END_INTERFACE
    } IWMPPluginUIVtbl;

    interface IWMPPluginUI
    {
        CONST_VTBL struct IWMPPluginUIVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPPluginUI_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPPluginUI_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPPluginUI_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPPluginUI_SetCore(This,pCore)	\
    ( (This)->lpVtbl -> SetCore(This,pCore) ) 

#define IWMPPluginUI_Create(This,hwndParent,phwndWindow)	\
    ( (This)->lpVtbl -> Create(This,hwndParent,phwndWindow) ) 

#define IWMPPluginUI_Destroy(This)	\
    ( (This)->lpVtbl -> Destroy(This) ) 

#define IWMPPluginUI_DisplayPropertyPage(This,hwndParent)	\
    ( (This)->lpVtbl -> DisplayPropertyPage(This,hwndParent) ) 

#define IWMPPluginUI_GetProperty(This,pwszName,pvarProperty)	\
    ( (This)->lpVtbl -> GetProperty(This,pwszName,pvarProperty) ) 

#define IWMPPluginUI_SetProperty(This,pwszName,pvarProperty)	\
    ( (This)->lpVtbl -> SetProperty(This,pwszName,pvarProperty) ) 

#define IWMPPluginUI_TranslateAccelerator(This,lpmsg)	\
    ( (This)->lpVtbl -> TranslateAccelerator(This,lpmsg) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPPluginUI_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsdk.h ===
//*@@@+++@@@@******************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
//*@@@---@@@@******************************************************************
//
#pragma once
//
// Hi!  If you're thinking of modifying this file, consider the following:
// This is our INTERNAL version of the file.  That's why you see wmsdkidl2.h
// here.  If you're looking for the one that we ship in our Format SDK setup 
// package, look for a wmsdk.h in the SDK\samples directory. 
//

#include "wmsdkidl.h"


#include "asferr.h"
#include "nserror.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsbuffer.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0416 */
/* Compiler settings for wmsbuffer.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsbuffer_h__
#define __wmsbuffer_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __INSSBuffer_FWD_DEFINED__
#define __INSSBuffer_FWD_DEFINED__
typedef interface INSSBuffer INSSBuffer;
#endif 	/* __INSSBuffer_FWD_DEFINED__ */


#ifndef __INSSBuffer2_FWD_DEFINED__
#define __INSSBuffer2_FWD_DEFINED__
typedef interface INSSBuffer2 INSSBuffer2;
#endif 	/* __INSSBuffer2_FWD_DEFINED__ */


#ifndef __INSSBuffer3_FWD_DEFINED__
#define __INSSBuffer3_FWD_DEFINED__
typedef interface INSSBuffer3 INSSBuffer3;
#endif 	/* __INSSBuffer3_FWD_DEFINED__ */


#ifndef __INSSBuffer4_FWD_DEFINED__
#define __INSSBuffer4_FWD_DEFINED__
typedef interface INSSBuffer4 INSSBuffer4;
#endif 	/* __INSSBuffer4_FWD_DEFINED__ */


#ifndef __IWMSBufferAllocator_FWD_DEFINED__
#define __IWMSBufferAllocator_FWD_DEFINED__
typedef interface IWMSBufferAllocator IWMSBufferAllocator;
#endif 	/* __IWMSBufferAllocator_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_wmsbuffer_0000 */
/* [local] */ 

//=========================================================================
//
// Microsoft Windows Media Technologies
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//=========================================================================
#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
EXTERN_GUID( IID_INSSBuffer, 0xE1CD3524,0x03D7,0x11d2,0x9E,0xED,0x00,0x60,0x97,0xD2,0xD7,0xCF );
EXTERN_GUID( IID_IWMSBuffer, 0xE1CD3524,0x03D7,0x11d2,0x9E,0xED,0x00,0x60,0x97,0xD2,0xD7,0xCF );
EXTERN_GUID( IID_INSSBuffer2,0x4f528693,0x1035,0x43fe,0xb4,0x28,0x75,0x75,0x61,0xad,0x3a,0x68 );
EXTERN_GUID( IID_INSSBuffer3,0xc87ceaaf,0x75be,0x4bc4,0x84,0xeb,0xac,0x27,0x98,0x50,0x76,0x72 );
EXTERN_GUID( IID_INSSBuffer4,0xb6b8fd5a,0x32e2,0x49d4,0xa9,0x10,0xc2,0x6c,0xc8,0x54,0x65,0xed );
EXTERN_GUID( IID_IWMSBufferAllocator, 0x61103CA4,0x2033,0x11d2,0x9E,0xF1,0x00,0x60,0x97,0xD2,0xD7,0xCF );
#define IWMSBuffer INSSBuffer



extern RPC_IF_HANDLE __MIDL_itf_wmsbuffer_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsbuffer_0000_v0_0_s_ifspec;

#ifndef __INSSBuffer_INTERFACE_DEFINED__
#define __INSSBuffer_INTERFACE_DEFINED__

/* interface INSSBuffer */
/* [version][uuid][unique][object][local] */ 


EXTERN_C const IID IID_INSSBuffer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E1CD3524-03D7-11d2-9EED-006097D2D7CF")
    INSSBuffer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLength( 
            /* [out] */ DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLength( 
            /* [in] */ DWORD dwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxLength( 
            /* [out] */ DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBuffer( 
            /* [out] */ BYTE **ppdwBuffer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBufferAndLength( 
            /* [out] */ BYTE **ppdwBuffer,
            /* [out] */ DWORD *pdwLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INSSBufferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INSSBuffer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INSSBuffer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INSSBuffer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLength )( 
            INSSBuffer * This,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetLength )( 
            INSSBuffer * This,
            /* [in] */ DWORD dwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxLength )( 
            INSSBuffer * This,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetBuffer )( 
            INSSBuffer * This,
            /* [out] */ BYTE **ppdwBuffer);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferAndLength )( 
            INSSBuffer * This,
            /* [out] */ BYTE **ppdwBuffer,
            /* [out] */ DWORD *pdwLength);
        
        END_INTERFACE
    } INSSBufferVtbl;

    interface INSSBuffer
    {
        CONST_VTBL struct INSSBufferVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INSSBuffer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INSSBuffer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INSSBuffer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INSSBuffer_GetLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetLength(This,pdwLength) ) 

#define INSSBuffer_SetLength(This,dwLength)	\
    ( (This)->lpVtbl -> SetLength(This,dwLength) ) 

#define INSSBuffer_GetMaxLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetMaxLength(This,pdwLength) ) 

#define INSSBuffer_GetBuffer(This,ppdwBuffer)	\
    ( (This)->lpVtbl -> GetBuffer(This,ppdwBuffer) ) 

#define INSSBuffer_GetBufferAndLength(This,ppdwBuffer,pdwLength)	\
    ( (This)->lpVtbl -> GetBufferAndLength(This,ppdwBuffer,pdwLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE INSSBuffer_GetLength_Proxy( 
    INSSBuffer * This,
    /* [out] */ DWORD *pdwLength);


void __RPC_STUB INSSBuffer_GetLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSSBuffer_SetLength_Proxy( 
    INSSBuffer * This,
    /* [in] */ DWORD dwLength);


void __RPC_STUB INSSBuffer_SetLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSSBuffer_GetMaxLength_Proxy( 
    INSSBuffer * This,
    /* [out] */ DWORD *pdwLength);


void __RPC_STUB INSSBuffer_GetMaxLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSSBuffer_GetBuffer_Proxy( 
    INSSBuffer * This,
    /* [out] */ BYTE **ppdwBuffer);


void __RPC_STUB INSSBuffer_GetBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSSBuffer_GetBufferAndLength_Proxy( 
    INSSBuffer * This,
    /* [out] */ BYTE **ppdwBuffer,
    /* [out] */ DWORD *pdwLength);


void __RPC_STUB INSSBuffer_GetBufferAndLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INSSBuffer_INTERFACE_DEFINED__ */


#ifndef __INSSBuffer2_INTERFACE_DEFINED__
#define __INSSBuffer2_INTERFACE_DEFINED__

/* interface INSSBuffer2 */
/* [version][uuid][unique][object][local] */ 


EXTERN_C const IID IID_INSSBuffer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4F528693-1035-43fe-B428-757561AD3A68")
    INSSBuffer2 : public INSSBuffer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSampleProperties( 
            /* [in] */ DWORD cbProperties,
            /* [out] */ BYTE *pbProperties) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSampleProperties( 
            /* [in] */ DWORD cbProperties,
            /* [in] */ BYTE *pbProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INSSBuffer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INSSBuffer2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INSSBuffer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INSSBuffer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLength )( 
            INSSBuffer2 * This,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetLength )( 
            INSSBuffer2 * This,
            /* [in] */ DWORD dwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxLength )( 
            INSSBuffer2 * This,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetBuffer )( 
            INSSBuffer2 * This,
            /* [out] */ BYTE **ppdwBuffer);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferAndLength )( 
            INSSBuffer2 * This,
            /* [out] */ BYTE **ppdwBuffer,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleProperties )( 
            INSSBuffer2 * This,
            /* [in] */ DWORD cbProperties,
            /* [out] */ BYTE *pbProperties);
        
        HRESULT ( STDMETHODCALLTYPE *SetSampleProperties )( 
            INSSBuffer2 * This,
            /* [in] */ DWORD cbProperties,
            /* [in] */ BYTE *pbProperties);
        
        END_INTERFACE
    } INSSBuffer2Vtbl;

    interface INSSBuffer2
    {
        CONST_VTBL struct INSSBuffer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INSSBuffer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INSSBuffer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INSSBuffer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INSSBuffer2_GetLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetLength(This,pdwLength) ) 

#define INSSBuffer2_SetLength(This,dwLength)	\
    ( (This)->lpVtbl -> SetLength(This,dwLength) ) 

#define INSSBuffer2_GetMaxLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetMaxLength(This,pdwLength) ) 

#define INSSBuffer2_GetBuffer(This,ppdwBuffer)	\
    ( (This)->lpVtbl -> GetBuffer(This,ppdwBuffer) ) 

#define INSSBuffer2_GetBufferAndLength(This,ppdwBuffer,pdwLength)	\
    ( (This)->lpVtbl -> GetBufferAndLength(This,ppdwBuffer,pdwLength) ) 


#define INSSBuffer2_GetSampleProperties(This,cbProperties,pbProperties)	\
    ( (This)->lpVtbl -> GetSampleProperties(This,cbProperties,pbProperties) ) 

#define INSSBuffer2_SetSampleProperties(This,cbProperties,pbProperties)	\
    ( (This)->lpVtbl -> SetSampleProperties(This,cbProperties,pbProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE INSSBuffer2_GetSampleProperties_Proxy( 
    INSSBuffer2 * This,
    /* [in] */ DWORD cbProperties,
    /* [out] */ BYTE *pbProperties);


void __RPC_STUB INSSBuffer2_GetSampleProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSSBuffer2_SetSampleProperties_Proxy( 
    INSSBuffer2 * This,
    /* [in] */ DWORD cbProperties,
    /* [in] */ BYTE *pbProperties);


void __RPC_STUB INSSBuffer2_SetSampleProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INSSBuffer2_INTERFACE_DEFINED__ */


#ifndef __INSSBuffer3_INTERFACE_DEFINED__
#define __INSSBuffer3_INTERFACE_DEFINED__

/* interface INSSBuffer3 */
/* [version][uuid][unique][object][local] */ 


EXTERN_C const IID IID_INSSBuffer3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C87CEAAF-75BE-4bc4-84EB-AC2798507672")
    INSSBuffer3 : public INSSBuffer2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [in] */ GUID guidBufferProperty,
            /* [in] */ void *pvBufferProperty,
            /* [in] */ DWORD dwBufferPropertySize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ GUID guidBufferProperty,
            /* [out] */ void *pvBufferProperty,
            /* [out][in] */ DWORD *pdwBufferPropertySize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INSSBuffer3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INSSBuffer3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INSSBuffer3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INSSBuffer3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLength )( 
            INSSBuffer3 * This,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetLength )( 
            INSSBuffer3 * This,
            /* [in] */ DWORD dwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxLength )( 
            INSSBuffer3 * This,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetBuffer )( 
            INSSBuffer3 * This,
            /* [out] */ BYTE **ppdwBuffer);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferAndLength )( 
            INSSBuffer3 * This,
            /* [out] */ BYTE **ppdwBuffer,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleProperties )( 
            INSSBuffer3 * This,
            /* [in] */ DWORD cbProperties,
            /* [out] */ BYTE *pbProperties);
        
        HRESULT ( STDMETHODCALLTYPE *SetSampleProperties )( 
            INSSBuffer3 * This,
            /* [in] */ DWORD cbProperties,
            /* [in] */ BYTE *pbProperties);
        
        HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            INSSBuffer3 * This,
            /* [in] */ GUID guidBufferProperty,
            /* [in] */ void *pvBufferProperty,
            /* [in] */ DWORD dwBufferPropertySize);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            INSSBuffer3 * This,
            /* [in] */ GUID guidBufferProperty,
            /* [out] */ void *pvBufferProperty,
            /* [out][in] */ DWORD *pdwBufferPropertySize);
        
        END_INTERFACE
    } INSSBuffer3Vtbl;

    interface INSSBuffer3
    {
        CONST_VTBL struct INSSBuffer3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INSSBuffer3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INSSBuffer3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INSSBuffer3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INSSBuffer3_GetLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetLength(This,pdwLength) ) 

#define INSSBuffer3_SetLength(This,dwLength)	\
    ( (This)->lpVtbl -> SetLength(This,dwLength) ) 

#define INSSBuffer3_GetMaxLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetMaxLength(This,pdwLength) ) 

#define INSSBuffer3_GetBuffer(This,ppdwBuffer)	\
    ( (This)->lpVtbl -> GetBuffer(This,ppdwBuffer) ) 

#define INSSBuffer3_GetBufferAndLength(This,ppdwBuffer,pdwLength)	\
    ( (This)->lpVtbl -> GetBufferAndLength(This,ppdwBuffer,pdwLength) ) 


#define INSSBuffer3_GetSampleProperties(This,cbProperties,pbProperties)	\
    ( (This)->lpVtbl -> GetSampleProperties(This,cbProperties,pbProperties) ) 

#define INSSBuffer3_SetSampleProperties(This,cbProperties,pbProperties)	\
    ( (This)->lpVtbl -> SetSampleProperties(This,cbProperties,pbProperties) ) 


#define INSSBuffer3_SetProperty(This,guidBufferProperty,pvBufferProperty,dwBufferPropertySize)	\
    ( (This)->lpVtbl -> SetProperty(This,guidBufferProperty,pvBufferProperty,dwBufferPropertySize) ) 

#define INSSBuffer3_GetProperty(This,guidBufferProperty,pvBufferProperty,pdwBufferPropertySize)	\
    ( (This)->lpVtbl -> GetProperty(This,guidBufferProperty,pvBufferProperty,pdwBufferPropertySize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE INSSBuffer3_SetProperty_Proxy( 
    INSSBuffer3 * This,
    /* [in] */ GUID guidBufferProperty,
    /* [in] */ void *pvBufferProperty,
    /* [in] */ DWORD dwBufferPropertySize);


void __RPC_STUB INSSBuffer3_SetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSSBuffer3_GetProperty_Proxy( 
    INSSBuffer3 * This,
    /* [in] */ GUID guidBufferProperty,
    /* [out] */ void *pvBufferProperty,
    /* [out][in] */ DWORD *pdwBufferPropertySize);


void __RPC_STUB INSSBuffer3_GetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INSSBuffer3_INTERFACE_DEFINED__ */


#ifndef __INSSBuffer4_INTERFACE_DEFINED__
#define __INSSBuffer4_INTERFACE_DEFINED__

/* interface INSSBuffer4 */
/* [version][uuid][unique][object][local] */ 


EXTERN_C const IID IID_INSSBuffer4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B6B8FD5A-32E2-49d4-A910-C26CC85465ED")
    INSSBuffer4 : public INSSBuffer3
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropertyCount( 
            /* [out] */ DWORD *pcBufferProperties) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyByIndex( 
            /* [in] */ DWORD dwBufferPropertyIndex,
            /* [out] */ GUID *pguidBufferProperty,
            /* [out] */ void *pvBufferProperty,
            /* [out][in] */ DWORD *pdwBufferPropertySize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INSSBuffer4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            INSSBuffer4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            INSSBuffer4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            INSSBuffer4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLength )( 
            INSSBuffer4 * This,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetLength )( 
            INSSBuffer4 * This,
            /* [in] */ DWORD dwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxLength )( 
            INSSBuffer4 * This,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetBuffer )( 
            INSSBuffer4 * This,
            /* [out] */ BYTE **ppdwBuffer);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferAndLength )( 
            INSSBuffer4 * This,
            /* [out] */ BYTE **ppdwBuffer,
            /* [out] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleProperties )( 
            INSSBuffer4 * This,
            /* [in] */ DWORD cbProperties,
            /* [out] */ BYTE *pbProperties);
        
        HRESULT ( STDMETHODCALLTYPE *SetSampleProperties )( 
            INSSBuffer4 * This,
            /* [in] */ DWORD cbProperties,
            /* [in] */ BYTE *pbProperties);
        
        HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            INSSBuffer4 * This,
            /* [in] */ GUID guidBufferProperty,
            /* [in] */ void *pvBufferProperty,
            /* [in] */ DWORD dwBufferPropertySize);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            INSSBuffer4 * This,
            /* [in] */ GUID guidBufferProperty,
            /* [out] */ void *pvBufferProperty,
            /* [out][in] */ DWORD *pdwBufferPropertySize);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyCount )( 
            INSSBuffer4 * This,
            /* [out] */ DWORD *pcBufferProperties);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyByIndex )( 
            INSSBuffer4 * This,
            /* [in] */ DWORD dwBufferPropertyIndex,
            /* [out] */ GUID *pguidBufferProperty,
            /* [out] */ void *pvBufferProperty,
            /* [out][in] */ DWORD *pdwBufferPropertySize);
        
        END_INTERFACE
    } INSSBuffer4Vtbl;

    interface INSSBuffer4
    {
        CONST_VTBL struct INSSBuffer4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INSSBuffer4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define INSSBuffer4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define INSSBuffer4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define INSSBuffer4_GetLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetLength(This,pdwLength) ) 

#define INSSBuffer4_SetLength(This,dwLength)	\
    ( (This)->lpVtbl -> SetLength(This,dwLength) ) 

#define INSSBuffer4_GetMaxLength(This,pdwLength)	\
    ( (This)->lpVtbl -> GetMaxLength(This,pdwLength) ) 

#define INSSBuffer4_GetBuffer(This,ppdwBuffer)	\
    ( (This)->lpVtbl -> GetBuffer(This,ppdwBuffer) ) 

#define INSSBuffer4_GetBufferAndLength(This,ppdwBuffer,pdwLength)	\
    ( (This)->lpVtbl -> GetBufferAndLength(This,ppdwBuffer,pdwLength) ) 


#define INSSBuffer4_GetSampleProperties(This,cbProperties,pbProperties)	\
    ( (This)->lpVtbl -> GetSampleProperties(This,cbProperties,pbProperties) ) 

#define INSSBuffer4_SetSampleProperties(This,cbProperties,pbProperties)	\
    ( (This)->lpVtbl -> SetSampleProperties(This,cbProperties,pbProperties) ) 


#define INSSBuffer4_SetProperty(This,guidBufferProperty,pvBufferProperty,dwBufferPropertySize)	\
    ( (This)->lpVtbl -> SetProperty(This,guidBufferProperty,pvBufferProperty,dwBufferPropertySize) ) 

#define INSSBuffer4_GetProperty(This,guidBufferProperty,pvBufferProperty,pdwBufferPropertySize)	\
    ( (This)->lpVtbl -> GetProperty(This,guidBufferProperty,pvBufferProperty,pdwBufferPropertySize) ) 


#define INSSBuffer4_GetPropertyCount(This,pcBufferProperties)	\
    ( (This)->lpVtbl -> GetPropertyCount(This,pcBufferProperties) ) 

#define INSSBuffer4_GetPropertyByIndex(This,dwBufferPropertyIndex,pguidBufferProperty,pvBufferProperty,pdwBufferPropertySize)	\
    ( (This)->lpVtbl -> GetPropertyByIndex(This,dwBufferPropertyIndex,pguidBufferProperty,pvBufferProperty,pdwBufferPropertySize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE INSSBuffer4_GetPropertyCount_Proxy( 
    INSSBuffer4 * This,
    /* [out] */ DWORD *pcBufferProperties);


void __RPC_STUB INSSBuffer4_GetPropertyCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE INSSBuffer4_GetPropertyByIndex_Proxy( 
    INSSBuffer4 * This,
    /* [in] */ DWORD dwBufferPropertyIndex,
    /* [out] */ GUID *pguidBufferProperty,
    /* [out] */ void *pvBufferProperty,
    /* [out][in] */ DWORD *pdwBufferPropertySize);


void __RPC_STUB INSSBuffer4_GetPropertyByIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INSSBuffer4_INTERFACE_DEFINED__ */


#ifndef __IWMSBufferAllocator_INTERFACE_DEFINED__
#define __IWMSBufferAllocator_INTERFACE_DEFINED__

/* interface IWMSBufferAllocator */
/* [version][uuid][unique][object][local] */ 


EXTERN_C const IID IID_IWMSBufferAllocator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61103CA4-2033-11d2-9EF1-006097D2D7CF")
    IWMSBufferAllocator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AllocateBuffer( 
            /* [in] */ DWORD dwMaxBufferSize,
            /* [out] */ INSSBuffer **ppBuffer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AllocatePageSizeBuffer( 
            /* [in] */ DWORD dwMaxBufferSize,
            /* [out] */ INSSBuffer **ppBuffer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSBufferAllocatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSBufferAllocator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSBufferAllocator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSBufferAllocator * This);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateBuffer )( 
            IWMSBufferAllocator * This,
            /* [in] */ DWORD dwMaxBufferSize,
            /* [out] */ INSSBuffer **ppBuffer);
        
        HRESULT ( STDMETHODCALLTYPE *AllocatePageSizeBuffer )( 
            IWMSBufferAllocator * This,
            /* [in] */ DWORD dwMaxBufferSize,
            /* [out] */ INSSBuffer **ppBuffer);
        
        END_INTERFACE
    } IWMSBufferAllocatorVtbl;

    interface IWMSBufferAllocator
    {
        CONST_VTBL struct IWMSBufferAllocatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSBufferAllocator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSBufferAllocator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSBufferAllocator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSBufferAllocator_AllocateBuffer(This,dwMaxBufferSize,ppBuffer)	\
    ( (This)->lpVtbl -> AllocateBuffer(This,dwMaxBufferSize,ppBuffer) ) 

#define IWMSBufferAllocator_AllocatePageSizeBuffer(This,dwMaxBufferSize,ppBuffer)	\
    ( (This)->lpVtbl -> AllocatePageSizeBuffer(This,dwMaxBufferSize,ppBuffer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMSBufferAllocator_AllocateBuffer_Proxy( 
    IWMSBufferAllocator * This,
    /* [in] */ DWORD dwMaxBufferSize,
    /* [out] */ INSSBuffer **ppBuffer);


void __RPC_STUB IWMSBufferAllocator_AllocateBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSBufferAllocator_AllocatePageSizeBuffer_Proxy( 
    IWMSBufferAllocator * This,
    /* [in] */ DWORD dwMaxBufferSize,
    /* [out] */ INSSBuffer **ppBuffer);


void __RPC_STUB IWMSBufferAllocator_AllocatePageSizeBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMSBufferAllocator_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsbasicplugin.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsbasicplugin.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsbasicplugin_h__
#define __wmsbasicplugin_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSBasicPlugin_FWD_DEFINED__
#define __IWMSBasicPlugin_FWD_DEFINED__
typedef interface IWMSBasicPlugin IWMSBasicPlugin;
#endif 	/* __IWMSBasicPlugin_FWD_DEFINED__ */


/* header files for imported files */
#include "WMSNamedValues.h"
#include "nsscore.h"
#include "WMSEventLog.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsbasicplugin_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from WMSBasicPlugin.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
EXTERN_GUID( IID_IWMSBasicPlugin, 0x66E6CE48,0xF8BB,0x4bcc,0x8F,0xD6,0x42,0xA9,0xD5,0xD3,0x28,0x71 );


extern RPC_IF_HANDLE __MIDL_itf_wmsbasicplugin_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsbasicplugin_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSBasicPlugin_INTERFACE_DEFINED__
#define __IWMSBasicPlugin_INTERFACE_DEFINED__

/* interface IWMSBasicPlugin */
/* [unique][version][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMSBasicPlugin;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("66E6CE48-F8BB-4bcc-8FD6-42A9D5D32871")
    IWMSBasicPlugin : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE InitializePlugin( 
            /* [in] */ __RPC__in_opt IWMSContext *pServerContext,
            /* [in] */ __RPC__in_opt IWMSNamedValues *pNamedValues,
            /* [in] */ __RPC__in_opt IWMSClassObject *pClassFactory) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnHeartbeat( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetCustomAdminInterface( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppValue) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ShutdownPlugin( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE EnablePlugin( 
            /* [out][in] */ __RPC__inout long *plFlags,
            /* [out][in] */ __RPC__inout long *plHeartbeatPeriod) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DisablePlugin( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSBasicPluginVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSBasicPlugin * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSBasicPlugin * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSBasicPlugin * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *InitializePlugin )( 
            IWMSBasicPlugin * This,
            /* [in] */ __RPC__in_opt IWMSContext *pServerContext,
            /* [in] */ __RPC__in_opt IWMSNamedValues *pNamedValues,
            /* [in] */ __RPC__in_opt IWMSClassObject *pClassFactory);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnHeartbeat )( 
            IWMSBasicPlugin * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCustomAdminInterface )( 
            IWMSBasicPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppValue);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ShutdownPlugin )( 
            IWMSBasicPlugin * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *EnablePlugin )( 
            IWMSBasicPlugin * This,
            /* [out][in] */ __RPC__inout long *plFlags,
            /* [out][in] */ __RPC__inout long *plHeartbeatPeriod);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DisablePlugin )( 
            IWMSBasicPlugin * This);
        
        END_INTERFACE
    } IWMSBasicPluginVtbl;

    interface IWMSBasicPlugin
    {
        CONST_VTBL struct IWMSBasicPluginVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSBasicPlugin_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSBasicPlugin_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSBasicPlugin_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSBasicPlugin_InitializePlugin(This,pServerContext,pNamedValues,pClassFactory)	\
    ( (This)->lpVtbl -> InitializePlugin(This,pServerContext,pNamedValues,pClassFactory) ) 

#define IWMSBasicPlugin_OnHeartbeat(This)	\
    ( (This)->lpVtbl -> OnHeartbeat(This) ) 

#define IWMSBasicPlugin_GetCustomAdminInterface(This,ppValue)	\
    ( (This)->lpVtbl -> GetCustomAdminInterface(This,ppValue) ) 

#define IWMSBasicPlugin_ShutdownPlugin(This)	\
    ( (This)->lpVtbl -> ShutdownPlugin(This) ) 

#define IWMSBasicPlugin_EnablePlugin(This,plFlags,plHeartbeatPeriod)	\
    ( (This)->lpVtbl -> EnablePlugin(This,plFlags,plHeartbeatPeriod) ) 

#define IWMSBasicPlugin_DisablePlugin(This)	\
    ( (This)->lpVtbl -> DisablePlugin(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSBasicPlugin_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsdatapath.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsdatapath.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsdatapath_h__
#define __wmsdatapath_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSPacketStreamer_FWD_DEFINED__
#define __IWMSPacketStreamer_FWD_DEFINED__
typedef interface IWMSPacketStreamer IWMSPacketStreamer;
#endif 	/* __IWMSPacketStreamer_FWD_DEFINED__ */


#ifndef __IWMSPacketStreamerCallback_FWD_DEFINED__
#define __IWMSPacketStreamerCallback_FWD_DEFINED__
typedef interface IWMSPacketStreamerCallback IWMSPacketStreamerCallback;
#endif 	/* __IWMSPacketStreamerCallback_FWD_DEFINED__ */


#ifndef __IWMSPacketStreamDataContainer_FWD_DEFINED__
#define __IWMSPacketStreamDataContainer_FWD_DEFINED__
typedef interface IWMSPacketStreamDataContainer IWMSPacketStreamDataContainer;
#endif 	/* __IWMSPacketStreamDataContainer_FWD_DEFINED__ */


#ifndef __IWMSPushSource_FWD_DEFINED__
#define __IWMSPushSource_FWD_DEFINED__
typedef interface IWMSPushSource IWMSPushSource;
#endif 	/* __IWMSPushSource_FWD_DEFINED__ */


#ifndef __IWMSPushSourceCallback_FWD_DEFINED__
#define __IWMSPushSourceCallback_FWD_DEFINED__
typedef interface IWMSPushSourceCallback IWMSPushSourceCallback;
#endif 	/* __IWMSPushSourceCallback_FWD_DEFINED__ */


#ifndef __IWMSPushSink_FWD_DEFINED__
#define __IWMSPushSink_FWD_DEFINED__
typedef interface IWMSPushSink IWMSPushSink;
#endif 	/* __IWMSPushSink_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "nsscore.h"
#include "DataContainer.h"
#include "StreamDescription.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsdatapath_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmsdatapath.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************






EXTERN_GUID( IID_IWMSPacketStreamer, 0x72527A81,0x1119,0x11d2,0x9E,0xEE,0x00,0x60,0x97,0xD2,0xD7,0xCF );
EXTERN_GUID( IID_IWMSPacketStreamerCallback, 0x72527A82,0x1119,0x11d2,0x9E,0xEE,0x00,0x60,0x97,0xD2,0xD7,0xCF );
EXTERN_GUID( IID_IWMSPushSource, 0x0B840593,0x115C,0x11d2,0x9E,0xEE,0x00,0x60,0x97,0xD2,0xD7,0xCF );
EXTERN_GUID( IID_IWMSPushSourceCallback, 0xead035e4, 0xbe4a, 0x4a7a, 0xbc, 0x19, 0x5b, 0xb, 0x9e, 0x9, 0xd7, 0x4c );
EXTERN_GUID( IID_IWMSPushSink, 0x0B840594,0x115C,0x11d2,0x9E,0xEE,0x00,0x60,0x97,0xD2,0xD7,0xCF );
EXTERN_GUID( IID_IWMSPacketStreamDataContainer, 0xb1b6039, 0x572c, 0x11d2, 0x9e, 0xff, 0x0, 0x60, 0x97, 0xd2, 0xd7, 0xcf );
typedef /* [public] */ 
enum WMS_SEEK_AND_PLAY_TYPE
    {	WMSPlayFromCurrentPosition	= 0,
	WMSSeekToIFrameAndPlay	= ( WMSPlayFromCurrentPosition + 1 ) ,
	WMSSeekToPositionAndPlay	= ( WMSSeekToIFrameAndPlay + 1 ) 
    } 	WMS_SEEK_AND_PLAY_TYPE;

#define WMS_SEEK_TO_IFRAME           0x0001


extern RPC_IF_HANDLE __MIDL_itf_wmsdatapath_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsdatapath_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSPacketStreamer_INTERFACE_DEFINED__
#define __IWMSPacketStreamer_INTERFACE_DEFINED__

/* interface IWMSPacketStreamer */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPacketStreamer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72527A81-1119-11d2-9EEE-006097D2D7CF")
    IWMSPacketStreamer : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetStreamInfo( 
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SelectStream( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSStreamSwitchDescriptionList *pStreamSwitchDescList,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ DWORD dwOffsetType,
            /* [in] */ QWORD qwOffset,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ChangeStreamFormat( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Interrupt( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ DWORD dwOptions,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DoExtendedCommand( 
            /* [in] */ __RPC__in LPWSTR szCommandName,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Shutdown( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPacketStreamerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPacketStreamer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPacketStreamer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPacketStreamer * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStreamInfo )( 
            IWMSPacketStreamer * This,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SelectStream )( 
            IWMSPacketStreamer * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSStreamSwitchDescriptionList *pStreamSwitchDescList,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Seek )( 
            IWMSPacketStreamer * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ DWORD dwOffsetType,
            /* [in] */ QWORD qwOffset,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ChangeStreamFormat )( 
            IWMSPacketStreamer * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Interrupt )( 
            IWMSPacketStreamer * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ DWORD dwOptions,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DoExtendedCommand )( 
            IWMSPacketStreamer * This,
            /* [in] */ __RPC__in LPWSTR szCommandName,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSPacketStreamerCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IWMSPacketStreamer * This);
        
        END_INTERFACE
    } IWMSPacketStreamerVtbl;

    interface IWMSPacketStreamer
    {
        CONST_VTBL struct IWMSPacketStreamerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPacketStreamer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPacketStreamer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPacketStreamer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPacketStreamer_GetStreamInfo(This,pCallback,qwContext)	\
    ( (This)->lpVtbl -> GetStreamInfo(This,pCallback,qwContext) ) 

#define IWMSPacketStreamer_SelectStream(This,pCommand,pStreamSwitchDescList,pCallback,qwContext)	\
    ( (This)->lpVtbl -> SelectStream(This,pCommand,pStreamSwitchDescList,pCallback,qwContext) ) 

#define IWMSPacketStreamer_Seek(This,pCommand,dwOffsetType,qwOffset,dwFlags,pCallback,qwContext)	\
    ( (This)->lpVtbl -> Seek(This,pCommand,dwOffsetType,qwOffset,dwFlags,pCallback,qwContext) ) 

#define IWMSPacketStreamer_ChangeStreamFormat(This,pCommand,pCallback,qwContext)	\
    ( (This)->lpVtbl -> ChangeStreamFormat(This,pCommand,pCallback,qwContext) ) 

#define IWMSPacketStreamer_Interrupt(This,pCommand,dwOptions,pCallback,qwContext)	\
    ( (This)->lpVtbl -> Interrupt(This,pCommand,dwOptions,pCallback,qwContext) ) 

#define IWMSPacketStreamer_DoExtendedCommand(This,szCommandName,pCommand,pCallback,qwContext)	\
    ( (This)->lpVtbl -> DoExtendedCommand(This,szCommandName,pCommand,pCallback,qwContext) ) 

#define IWMSPacketStreamer_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPacketStreamer_INTERFACE_DEFINED__ */


#ifndef __IWMSPacketStreamerCallback_INTERFACE_DEFINED__
#define __IWMSPacketStreamerCallback_INTERFACE_DEFINED__

/* interface IWMSPacketStreamerCallback */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPacketStreamerCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72527A82-1119-11d2-9EEE-006097D2D7CF")
    IWMSPacketStreamerCallback : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnGetStreamInfo( 
            /* [in] */ HRESULT hr,
            /* [in] */ __RPC__in_opt IWMSStreamHeaderList *pHeaderList,
            /* [in] */ __RPC__in_opt IWMSContentDescriptionList *pContentDescription,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnSeek( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwActualPosition,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnSelectStream( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnChangeStreamFormat( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnInterrupt( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnDoExtendedCommand( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPacketStreamerCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPacketStreamerCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPacketStreamerCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPacketStreamerCallback * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnGetStreamInfo )( 
            IWMSPacketStreamerCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ __RPC__in_opt IWMSStreamHeaderList *pHeaderList,
            /* [in] */ __RPC__in_opt IWMSContentDescriptionList *pContentDescription,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnSeek )( 
            IWMSPacketStreamerCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwActualPosition,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnSelectStream )( 
            IWMSPacketStreamerCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnChangeStreamFormat )( 
            IWMSPacketStreamerCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnInterrupt )( 
            IWMSPacketStreamerCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnDoExtendedCommand )( 
            IWMSPacketStreamerCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext);
        
        END_INTERFACE
    } IWMSPacketStreamerCallbackVtbl;

    interface IWMSPacketStreamerCallback
    {
        CONST_VTBL struct IWMSPacketStreamerCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPacketStreamerCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPacketStreamerCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPacketStreamerCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPacketStreamerCallback_OnGetStreamInfo(This,hr,pHeaderList,pContentDescription,qwContext)	\
    ( (This)->lpVtbl -> OnGetStreamInfo(This,hr,pHeaderList,pContentDescription,qwContext) ) 

#define IWMSPacketStreamerCallback_OnSeek(This,hr,qwActualPosition,qwContext)	\
    ( (This)->lpVtbl -> OnSeek(This,hr,qwActualPosition,qwContext) ) 

#define IWMSPacketStreamerCallback_OnSelectStream(This,hr,qwContext)	\
    ( (This)->lpVtbl -> OnSelectStream(This,hr,qwContext) ) 

#define IWMSPacketStreamerCallback_OnChangeStreamFormat(This,hr,qwContext)	\
    ( (This)->lpVtbl -> OnChangeStreamFormat(This,hr,qwContext) ) 

#define IWMSPacketStreamerCallback_OnInterrupt(This,hr,qwContext)	\
    ( (This)->lpVtbl -> OnInterrupt(This,hr,qwContext) ) 

#define IWMSPacketStreamerCallback_OnDoExtendedCommand(This,hr,qwContext)	\
    ( (This)->lpVtbl -> OnDoExtendedCommand(This,hr,qwContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPacketStreamerCallback_INTERFACE_DEFINED__ */


#ifndef __IWMSPacketStreamDataContainer_INTERFACE_DEFINED__
#define __IWMSPacketStreamDataContainer_INTERFACE_DEFINED__

/* interface IWMSPacketStreamDataContainer */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPacketStreamDataContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0B1B6039-572C-11d2-9EFF-006097D2D7CF")
    IWMSPacketStreamDataContainer : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetStreamSignalHandler( 
            /* [in] */ __RPC__in_opt IWMSStreamSignalHandler *pStreamSignalHandler) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetMaxPacketSize( 
            /* [out] */ __RPC__out DWORD *pdwMaxPacketSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPacketStreamDataContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPacketStreamDataContainer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPacketStreamDataContainer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPacketStreamDataContainer * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetStreamSignalHandler )( 
            IWMSPacketStreamDataContainer * This,
            /* [in] */ __RPC__in_opt IWMSStreamSignalHandler *pStreamSignalHandler);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetMaxPacketSize )( 
            IWMSPacketStreamDataContainer * This,
            /* [out] */ __RPC__out DWORD *pdwMaxPacketSize);
        
        END_INTERFACE
    } IWMSPacketStreamDataContainerVtbl;

    interface IWMSPacketStreamDataContainer
    {
        CONST_VTBL struct IWMSPacketStreamDataContainerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPacketStreamDataContainer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPacketStreamDataContainer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPacketStreamDataContainer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPacketStreamDataContainer_SetStreamSignalHandler(This,pStreamSignalHandler)	\
    ( (This)->lpVtbl -> SetStreamSignalHandler(This,pStreamSignalHandler) ) 

#define IWMSPacketStreamDataContainer_GetMaxPacketSize(This,pdwMaxPacketSize)	\
    ( (This)->lpVtbl -> GetMaxPacketSize(This,pdwMaxPacketSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPacketStreamDataContainer_INTERFACE_DEFINED__ */


#ifndef __IWMSPushSource_INTERFACE_DEFINED__
#define __IWMSPushSource_INTERFACE_DEFINED__

/* interface IWMSPushSource */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPushSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0B840593-115C-11d2-9EEE-006097D2D7CF")
    IWMSPushSource : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ConnectSink( 
            /* [in] */ __RPC__in_opt IWMSPushSink *pDataOutput) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DisconnectSink( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE StartPushing( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ double dblRate,
            /* [in] */ __RPC__in_opt IWMSPushSourceCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE StopPushing( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSPushSourceCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE PausePushing( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSPushSourceCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ResendPacket( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ DWORD dwPacketNum,
            /* [in] */ DWORD dwStreamNum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPushSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPushSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPushSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPushSource * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ConnectSink )( 
            IWMSPushSource * This,
            /* [in] */ __RPC__in_opt IWMSPushSink *pDataOutput);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DisconnectSink )( 
            IWMSPushSource * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *StartPushing )( 
            IWMSPushSource * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ double dblRate,
            /* [in] */ __RPC__in_opt IWMSPushSourceCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *StopPushing )( 
            IWMSPushSource * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSPushSourceCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *PausePushing )( 
            IWMSPushSource * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ __RPC__in_opt IWMSPushSourceCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ResendPacket )( 
            IWMSPushSource * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommand,
            /* [in] */ DWORD dwPacketNum,
            /* [in] */ DWORD dwStreamNum);
        
        END_INTERFACE
    } IWMSPushSourceVtbl;

    interface IWMSPushSource
    {
        CONST_VTBL struct IWMSPushSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPushSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPushSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPushSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPushSource_ConnectSink(This,pDataOutput)	\
    ( (This)->lpVtbl -> ConnectSink(This,pDataOutput) ) 

#define IWMSPushSource_DisconnectSink(This)	\
    ( (This)->lpVtbl -> DisconnectSink(This) ) 

#define IWMSPushSource_StartPushing(This,pCommand,dblRate,pCallback,qwContext)	\
    ( (This)->lpVtbl -> StartPushing(This,pCommand,dblRate,pCallback,qwContext) ) 

#define IWMSPushSource_StopPushing(This,pCommand,pCallback,qwContext)	\
    ( (This)->lpVtbl -> StopPushing(This,pCommand,pCallback,qwContext) ) 

#define IWMSPushSource_PausePushing(This,pCommand,pCallback,qwContext)	\
    ( (This)->lpVtbl -> PausePushing(This,pCommand,pCallback,qwContext) ) 

#define IWMSPushSource_ResendPacket(This,pCommand,dwPacketNum,dwStreamNum)	\
    ( (This)->lpVtbl -> ResendPacket(This,pCommand,dwPacketNum,dwStreamNum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPushSource_INTERFACE_DEFINED__ */


#ifndef __IWMSPushSourceCallback_INTERFACE_DEFINED__
#define __IWMSPushSourceCallback_INTERFACE_DEFINED__

/* interface IWMSPushSourceCallback */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPushSourceCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EAD035E4-BE4A-4a7a-BC19-5B0B9E09D74C")
    IWMSPushSourceCallback : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnStartPushing( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnStopPushing( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnPausePushing( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPushSourceCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPushSourceCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPushSourceCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPushSourceCallback * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnStartPushing )( 
            IWMSPushSourceCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnStopPushing )( 
            IWMSPushSourceCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnPausePushing )( 
            IWMSPushSourceCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext);
        
        END_INTERFACE
    } IWMSPushSourceCallbackVtbl;

    interface IWMSPushSourceCallback
    {
        CONST_VTBL struct IWMSPushSourceCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPushSourceCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPushSourceCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPushSourceCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPushSourceCallback_OnStartPushing(This,hr,qwContext)	\
    ( (This)->lpVtbl -> OnStartPushing(This,hr,qwContext) ) 

#define IWMSPushSourceCallback_OnStopPushing(This,hr,qwContext)	\
    ( (This)->lpVtbl -> OnStopPushing(This,hr,qwContext) ) 

#define IWMSPushSourceCallback_OnPausePushing(This,hr,qwContext)	\
    ( (This)->lpVtbl -> OnPausePushing(This,hr,qwContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPushSourceCallback_INTERFACE_DEFINED__ */


#ifndef __IWMSPushSink_INTERFACE_DEFINED__
#define __IWMSPushSink_INTERFACE_DEFINED__

/* interface IWMSPushSink */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPushSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0B840594-115C-11d2-9EEE-006097D2D7CF")
    IWMSPushSink : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ConnectSource( 
            /* [in] */ __RPC__in_opt IWMSPushSource *pDataInput) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DisconnectSource( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ProcessPackets( 
            /* [in] */ __RPC__in_opt IWMSPacketList *pPacketList) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPushSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPushSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPushSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPushSink * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ConnectSource )( 
            IWMSPushSink * This,
            /* [in] */ __RPC__in_opt IWMSPushSource *pDataInput);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DisconnectSource )( 
            IWMSPushSink * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ProcessPackets )( 
            IWMSPushSink * This,
            /* [in] */ __RPC__in_opt IWMSPacketList *pPacketList);
        
        END_INTERFACE
    } IWMSPushSinkVtbl;

    interface IWMSPushSink
    {
        CONST_VTBL struct IWMSPushSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPushSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPushSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPushSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPushSink_ConnectSource(This,pDataInput)	\
    ( (This)->lpVtbl -> ConnectSource(This,pDataInput) ) 

#define IWMSPushSink_DisconnectSource(This)	\
    ( (This)->lpVtbl -> DisconnectSource(This) ) 

#define IWMSPushSink_ProcessPackets(This,pPacketList)	\
    ( (This)->lpVtbl -> ProcessPackets(This,pPacketList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPushSink_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmseventlog.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmseventlog.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmseventlog_h__
#define __wmseventlog_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSEventLog_FWD_DEFINED__
#define __IWMSEventLog_FWD_DEFINED__
typedef interface IWMSEventLog IWMSEventLog;
#endif 	/* __IWMSEventLog_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "WMSNamedValues.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmseventlog_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmseventlog.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
EXTERN_GUID( IID_IWMSEventLog, 0x7a0dcfb1, 0x47af, 0x11d2, 0x9e, 0xff, 0x00, 0x60, 0x97, 0xd2, 0xd7, 0xcf );


extern RPC_IF_HANDLE __MIDL_itf_wmseventlog_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmseventlog_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSEventLog_INTERFACE_DEFINED__
#define __IWMSEventLog_INTERFACE_DEFINED__

/* interface IWMSEventLog */
/* [unique][version][helpstring][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("940488C2-8F93-41c1-BBEB-43D1B48D084B") 
enum WMS_EVENT_LOG_LEVEL
    {	WMS_EVENT_LOG_LEVEL_ERROR	= 0x1,
	WMS_EVENT_LOG_LEVEL_WARNING	= 0x2,
	WMS_EVENT_LOG_LEVEL_INFORMATION	= 0x4
    } 	WMS_EVENT_LOG_LEVEL;


EXTERN_C const IID IID_IWMSEventLog;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7A0DCFB1-47AF-11d2-9EFF-006097D2D7CF")
    IWMSEventLog : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE LogEvent( 
            /* [in] */ __RPC__in_opt IWMSNamedValues *pPluginNamedValues,
            /* [in] */ WMS_EVENT_LOG_LEVEL ErrorLevel,
            /* [in] */ long lErrorCode,
            /* [in] */ __RPC__in BSTR bstrAdditionalInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSEventLogVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSEventLog * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSEventLog * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSEventLog * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSEventLog * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSEventLog * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSEventLog * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSEventLog * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *LogEvent )( 
            IWMSEventLog * This,
            /* [in] */ __RPC__in_opt IWMSNamedValues *pPluginNamedValues,
            /* [in] */ WMS_EVENT_LOG_LEVEL ErrorLevel,
            /* [in] */ long lErrorCode,
            /* [in] */ __RPC__in BSTR bstrAdditionalInfo);
        
        END_INTERFACE
    } IWMSEventLogVtbl;

    interface IWMSEventLog
    {
        CONST_VTBL struct IWMSEventLogVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSEventLog_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSEventLog_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSEventLog_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSEventLog_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSEventLog_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSEventLog_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSEventLog_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSEventLog_LogEvent(This,pPluginNamedValues,ErrorLevel,lErrorCode,bstrAdditionalInfo)	\
    ( (This)->lpVtbl -> LogEvent(This,pPluginNamedValues,ErrorLevel,lErrorCode,bstrAdditionalInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSEventLog_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmscontext.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmscontext.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmscontext_h__
#define __wmscontext_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSContext_FWD_DEFINED__
#define __IWMSContext_FWD_DEFINED__
typedef interface IWMSContext IWMSContext;
#endif 	/* __IWMSContext_FWD_DEFINED__ */


#ifndef __IWMSCommandContext_FWD_DEFINED__
#define __IWMSCommandContext_FWD_DEFINED__
typedef interface IWMSCommandContext IWMSCommandContext;
#endif 	/* __IWMSCommandContext_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmscontext_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmscontext.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
#ifndef _WMSContext
#define _WMSContext
typedef unsigned __int64 QWORD;

EXTERN_GUID( IID_IWMSContext, 0x4f1a1421, 0x5cd5, 0x11d2, 0x9f, 0x5, 0x0, 0x60, 0x97, 0xd2, 0xd7, 0xcf );
EXTERN_GUID( IID_IWMSCommandContext, 0x75554931, 0x5f0e, 0x11d2, 0x9f, 0xe, 0x0, 0x60, 0x97, 0xd2, 0xd7, 0xcf );
typedef /* [public] */ 
enum WMS_CONTEXT_OPTIONS
    {	WMS_CONTEXT_SET_PROPERTY_NAME_BY_VALUE	= 0x1,
	WMS_CONTEXT_SET_PROPERTY_STRING_BY_REFERENCE	= 0x2,
	WMS_CONTEXT_GET_PROPERTY_STRING_BY_REFERENCE	= 0x4
    } 	WMS_CONTEXT_OPTIONS;

typedef /* [public] */ 
enum WMS_CONTEXT_HINT_CONSTANTS
    {	WMS_CONTEXT_NO_NAME_HINT	= 0xffffffff
    } 	WMS_CONTEXT_HINT_CONSTANTS;





extern RPC_IF_HANDLE __MIDL_itf_wmscontext_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmscontext_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSContext_INTERFACE_DEFINED__
#define __IWMSContext_INTERFACE_DEFINED__

/* interface IWMSContext */
/* [helpstring][unique][uuid][object] */ 

typedef /* [public] */ 
enum WMS_CONTEXT_TYPE
    {	WMS_UNKNOWN_CONTEXT_TYPE	= 0,
	WMS_SERVER_CONTEXT_TYPE	= ( WMS_UNKNOWN_CONTEXT_TYPE + 1 ) ,
	WMS_USER_CONTEXT_TYPE	= ( WMS_SERVER_CONTEXT_TYPE + 1 ) ,
	WMS_PRESENTATION_CONTEXT_TYPE	= ( WMS_USER_CONTEXT_TYPE + 1 ) ,
	WMS_CONTENT_DESCRIPTION_CONTEXT_TYPE	= ( WMS_PRESENTATION_CONTEXT_TYPE + 1 ) ,
	WMS_COMMAND_REQUEST_CONTEXT_TYPE	= ( WMS_CONTENT_DESCRIPTION_CONTEXT_TYPE + 1 ) ,
	WMS_COMMAND_RESPONSE_CONTEXT_TYPE	= ( WMS_COMMAND_REQUEST_CONTEXT_TYPE + 1 ) ,
	WMS_TRANSPORT_SPEC_CONTEXT_TYPE	= ( WMS_COMMAND_RESPONSE_CONTEXT_TYPE + 1 ) ,
	WMS_PACKETIZER_CONTEXT_TYPE	= ( WMS_TRANSPORT_SPEC_CONTEXT_TYPE + 1 ) ,
	WMS_CACHE_CONTENT_INFORMATION_CONTEXT_TYPE	= ( WMS_PACKETIZER_CONTEXT_TYPE + 1 ) ,
	WMS_ARCHIVE_CONTEXT_TYPE	= ( WMS_CACHE_CONTENT_INFORMATION_CONTEXT_TYPE + 1 ) ,
	WMS_NUM_CONTEXT_TYPE	= ( WMS_ARCHIVE_CONTEXT_TYPE + 1 ) 
    } 	WMS_CONTEXT_TYPE;


EXTERN_C const IID IID_IWMSContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4F1A1421-5CD5-11d2-9F05-006097D2D7CF")
    IWMSContext : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetLongValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ long lValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetStringValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ __RPC__in LPCWSTR pstrValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetIUnknownValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ __RPC__in_opt IUnknown *pValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetQwordValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ CURRENCY qwValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetDateValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ DATE dateValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetArrayValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ __RPC__deref_in_opt SAFEARRAY * psaValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetLongValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__out long *plValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetStringValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__deref_out_opt LPWSTR *pstrValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetIUnknownValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__deref_out_opt IUnknown **pValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetQwordValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__out CURRENCY *pqwValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetDateValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__out DATE *pdateValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetArrayValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ VARIANT Value,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__out VARIANT *pValue,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetValueCount( 
            /* [out] */ __RPC__out long *pCount) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetIndexedValue( 
            /* [in] */ long lIndex,
            /* [out] */ __RPC__deref_out_opt LPWSTR *pstrName,
            /* [out] */ __RPC__out long *plNameHint,
            /* [out] */ __RPC__out VARIANT *pValue,
            /* [out] */ __RPC__out long *pdwResultOptions,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RemoveAllValues( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetContextType( 
            /* [out] */ __RPC__out WMS_CONTEXT_TYPE *pType) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetAndQueryIUnknownValue( 
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **pResult,
            /* [in] */ long lOptions) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CopyValues( 
            /* [in] */ __RPC__in_opt IWMSContext *pDest,
            /* [in] */ __RPC__deref_in_opt LPCWSTR *pstrName,
            /* [in] */ __RPC__in long *lNameHint,
            /* [in] */ long lNames) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSContext * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSContext * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetLongValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ long lValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetStringValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ __RPC__in LPCWSTR pstrValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetIUnknownValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ __RPC__in_opt IUnknown *pValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetQwordValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ CURRENCY qwValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetDateValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ DATE dateValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetArrayValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ __RPC__deref_in_opt SAFEARRAY * psaValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetLongValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__out long *plValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStringValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__deref_out_opt LPWSTR *pstrValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetIUnknownValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__deref_out_opt IUnknown **pValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetQwordValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__out CURRENCY *pqwValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDateValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__out DATE *pdateValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetArrayValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ VARIANT Value,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [out] */ __RPC__out VARIANT *pValue,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValueCount )( 
            IWMSContext * This,
            /* [out] */ __RPC__out long *pCount);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetIndexedValue )( 
            IWMSContext * This,
            /* [in] */ long lIndex,
            /* [out] */ __RPC__deref_out_opt LPWSTR *pstrName,
            /* [out] */ __RPC__out long *plNameHint,
            /* [out] */ __RPC__out VARIANT *pValue,
            /* [out] */ __RPC__out long *pdwResultOptions,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RemoveAllValues )( 
            IWMSContext * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetContextType )( 
            IWMSContext * This,
            /* [out] */ __RPC__out WMS_CONTEXT_TYPE *pType);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetAndQueryIUnknownValue )( 
            IWMSContext * This,
            /* [in] */ __RPC__in LPCWSTR pstrName,
            /* [in] */ long lNameHint,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **pResult,
            /* [in] */ long lOptions);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CopyValues )( 
            IWMSContext * This,
            /* [in] */ __RPC__in_opt IWMSContext *pDest,
            /* [in] */ __RPC__deref_in_opt LPCWSTR *pstrName,
            /* [in] */ __RPC__in long *lNameHint,
            /* [in] */ long lNames);
        
        END_INTERFACE
    } IWMSContextVtbl;

    interface IWMSContext
    {
        CONST_VTBL struct IWMSContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSContext_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSContext_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSContext_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSContext_SetLongValue(This,pstrName,lNameHint,lValue,lOptions)	\
    ( (This)->lpVtbl -> SetLongValue(This,pstrName,lNameHint,lValue,lOptions) ) 

#define IWMSContext_SetStringValue(This,pstrName,lNameHint,pstrValue,lOptions)	\
    ( (This)->lpVtbl -> SetStringValue(This,pstrName,lNameHint,pstrValue,lOptions) ) 

#define IWMSContext_SetIUnknownValue(This,pstrName,lNameHint,pValue,lOptions)	\
    ( (This)->lpVtbl -> SetIUnknownValue(This,pstrName,lNameHint,pValue,lOptions) ) 

#define IWMSContext_SetQwordValue(This,pstrName,lNameHint,qwValue,lOptions)	\
    ( (This)->lpVtbl -> SetQwordValue(This,pstrName,lNameHint,qwValue,lOptions) ) 

#define IWMSContext_SetDateValue(This,pstrName,lNameHint,dateValue,lOptions)	\
    ( (This)->lpVtbl -> SetDateValue(This,pstrName,lNameHint,dateValue,lOptions) ) 

#define IWMSContext_SetArrayValue(This,pstrName,lNameHint,psaValue,lOptions)	\
    ( (This)->lpVtbl -> SetArrayValue(This,pstrName,lNameHint,psaValue,lOptions) ) 

#define IWMSContext_GetLongValue(This,pstrName,lNameHint,plValue,lOptions)	\
    ( (This)->lpVtbl -> GetLongValue(This,pstrName,lNameHint,plValue,lOptions) ) 

#define IWMSContext_GetStringValue(This,pstrName,lNameHint,pstrValue,lOptions)	\
    ( (This)->lpVtbl -> GetStringValue(This,pstrName,lNameHint,pstrValue,lOptions) ) 

#define IWMSContext_GetIUnknownValue(This,pstrName,lNameHint,pValue,lOptions)	\
    ( (This)->lpVtbl -> GetIUnknownValue(This,pstrName,lNameHint,pValue,lOptions) ) 

#define IWMSContext_GetQwordValue(This,pstrName,lNameHint,pqwValue,lOptions)	\
    ( (This)->lpVtbl -> GetQwordValue(This,pstrName,lNameHint,pqwValue,lOptions) ) 

#define IWMSContext_GetDateValue(This,pstrName,lNameHint,pdateValue,lOptions)	\
    ( (This)->lpVtbl -> GetDateValue(This,pstrName,lNameHint,pdateValue,lOptions) ) 

#define IWMSContext_GetArrayValue(This,pstrName,lNameHint,ppsaValue,lOptions)	\
    ( (This)->lpVtbl -> GetArrayValue(This,pstrName,lNameHint,ppsaValue,lOptions) ) 

#define IWMSContext_SetValue(This,pstrName,lNameHint,Value,lOptions)	\
    ( (This)->lpVtbl -> SetValue(This,pstrName,lNameHint,Value,lOptions) ) 

#define IWMSContext_GetValue(This,pstrName,lNameHint,pValue,lOptions)	\
    ( (This)->lpVtbl -> GetValue(This,pstrName,lNameHint,pValue,lOptions) ) 

#define IWMSContext_GetValueCount(This,pCount)	\
    ( (This)->lpVtbl -> GetValueCount(This,pCount) ) 

#define IWMSContext_GetIndexedValue(This,lIndex,pstrName,plNameHint,pValue,pdwResultOptions,lOptions)	\
    ( (This)->lpVtbl -> GetIndexedValue(This,lIndex,pstrName,plNameHint,pValue,pdwResultOptions,lOptions) ) 

#define IWMSContext_RemoveValue(This,pstrName,lNameHint,lOptions)	\
    ( (This)->lpVtbl -> RemoveValue(This,pstrName,lNameHint,lOptions) ) 

#define IWMSContext_RemoveAllValues(This)	\
    ( (This)->lpVtbl -> RemoveAllValues(This) ) 

#define IWMSContext_GetContextType(This,pType)	\
    ( (This)->lpVtbl -> GetContextType(This,pType) ) 

#define IWMSContext_GetAndQueryIUnknownValue(This,pstrName,lNameHint,riid,pResult,lOptions)	\
    ( (This)->lpVtbl -> GetAndQueryIUnknownValue(This,pstrName,lNameHint,riid,pResult,lOptions) ) 

#define IWMSContext_CopyValues(This,pDest,pstrName,lNameHint,lNames)	\
    ( (This)->lpVtbl -> CopyValues(This,pDest,pstrName,lNameHint,lNames) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSContext_INTERFACE_DEFINED__ */


#ifndef __IWMSCommandContext_INTERFACE_DEFINED__
#define __IWMSCommandContext_INTERFACE_DEFINED__

/* interface IWMSCommandContext */
/* [helpstring][unique][version][uuid][object] */ 


EXTERN_C const IID IID_IWMSCommandContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("75554931-5F0E-11d2-9F0E-006097D2D7CF")
    IWMSCommandContext : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetCommandRequest( 
            /* [out] */ __RPC__deref_out_opt IWMSContext **ppProps) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetCommandResponse( 
            /* [out] */ __RPC__deref_out_opt IWMSContext **ppProps) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE EraseCommandRequest( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE EraseCommandResponse( void) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SetPlaylistGenerationId( 
            /* [in] */ DWORD dwId) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetPlaylistGenerationId( 
            /* [out] */ __RPC__out DWORD *pdwId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSCommandContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSCommandContext * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSCommandContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSCommandContext * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCommandRequest )( 
            IWMSCommandContext * This,
            /* [out] */ __RPC__deref_out_opt IWMSContext **ppProps);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCommandResponse )( 
            IWMSCommandContext * This,
            /* [out] */ __RPC__deref_out_opt IWMSContext **ppProps);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *EraseCommandRequest )( 
            IWMSCommandContext * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *EraseCommandResponse )( 
            IWMSCommandContext * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SetPlaylistGenerationId )( 
            IWMSCommandContext * This,
            /* [in] */ DWORD dwId);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetPlaylistGenerationId )( 
            IWMSCommandContext * This,
            /* [out] */ __RPC__out DWORD *pdwId);
        
        END_INTERFACE
    } IWMSCommandContextVtbl;

    interface IWMSCommandContext
    {
        CONST_VTBL struct IWMSCommandContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSCommandContext_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSCommandContext_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSCommandContext_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSCommandContext_GetCommandRequest(This,ppProps)	\
    ( (This)->lpVtbl -> GetCommandRequest(This,ppProps) ) 

#define IWMSCommandContext_GetCommandResponse(This,ppProps)	\
    ( (This)->lpVtbl -> GetCommandResponse(This,ppProps) ) 

#define IWMSCommandContext_EraseCommandRequest(This)	\
    ( (This)->lpVtbl -> EraseCommandRequest(This) ) 

#define IWMSCommandContext_EraseCommandResponse(This)	\
    ( (This)->lpVtbl -> EraseCommandResponse(This) ) 

#define IWMSCommandContext_SetPlaylistGenerationId(This,dwId)	\
    ( (This)->lpVtbl -> SetPlaylistGenerationId(This,dwId) ) 

#define IWMSCommandContext_GetPlaylistGenerationId(This,pdwId)	\
    ( (This)->lpVtbl -> GetPlaylistGenerationId(This,pdwId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSCommandContext_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmscontext_0000_0002 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_wmscontext_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmscontext_0000_0002_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize(     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal(  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree(     unsigned long *, LPSAFEARRAY * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

unsigned long             __RPC_USER  LPSAFEARRAY_UserSize64(     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserMarshal64(  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
unsigned char * __RPC_USER  LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY * ); 
void                      __RPC_USER  LPSAFEARRAY_UserFree64(     unsigned long *, LPSAFEARRAY * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsdefs.h ===
//***************************************************************************** 
// 
// Microsoft Windows Media 
// Copyright (C) Microsoft Corporation. All rights reserved. 
//
// FileName:            wmsdefs.h
//
// Abstract:
//
//*****************************************************************************

#pragma once

#include "WMSContextNames.h"
#include "WMSCatID.h"

// WMSServer Defines
#define WMS_VER_MAJOR   9
#define WMS_VER_MINOR   0

// GUIDS needed in both core and server
EXTERN_GUID( LIBID_WMSServerLib, 0xD71E02C2,0x41EF,0x11D2,0xBF,0x23,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( CLSID_WMSServer, 0x845FB959,0x4279,0x11D2,0xBF,0x23,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( CLSID_WMSNamedValues, 0x072AC7C7,0xBC7D,0x11d2,0xB5,0x49,0x00,0x60,0x97,0xD2,0xE4,0x6A  );
EXTERN_GUID( DIID_DWMSNamedValuesEvents, 0xD75C4175,0xBC7B,0x11d2,0xB5,0x49,0x00,0x60,0x97,0xD2,0xE4,0x6A  );
EXTERN_GUID( IID_IWMSNamedValue , 0x18812741,0x4BEC,0x11D2,0xBF,0x25,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( IID_IWMSNamedValues , 0x18812743,0x4BEC,0x11D2,0xBF,0x25,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( IID_IWMSDiagnosticEvents , 0x5AC19D61, 0x6057, 0x4431, 0xBE, 0x7E, 0x21, 0x53, 0xFD, 0xF9, 0x13, 0x97 );
EXTERN_GUID( IID_IWMSDiagnosticEvent , 0x5AC19D62, 0x6057, 0x4431, 0xBE, 0x7E, 0x21, 0x53, 0xFD, 0xF9, 0x13, 0x97 );
EXTERN_GUID( IID_IWMSFileDescriptions , 0x4124B8B2, 0xBCE4, 0x41C8, 0xB4, 0x9A, 0xDA, 0x98, 0xC1, 0x40, 0x1D, 0x3B );
EXTERN_GUID( IID_IWMSFileDescription , 0x4124B8B3, 0xBCE4, 0x41C8, 0xB4, 0x9A, 0xDA, 0x98, 0xC1, 0x40, 0x1D, 0x3B );
EXTERN_GUID( IID_IWMSPlugins , 0x517758ec,0x603c,0x4b98,0x82,0xC1,0x4B,0x2F,0xA7,0x78,0x71,0x66  );
EXTERN_GUID( IID_IWMSCacheProxyPlugin , 0x517758eb,0x603c,0x4b98,0x82,0xC1,0x4B,0x2F,0xA7,0x78,0x71,0x66  );
EXTERN_GUID( IID_IWMSCacheProxyPlugins , 0x517758ea,0x603c,0x4b98,0x82,0xC1,0x4B,0x2F,0xA7,0x78,0x71,0x66  );
EXTERN_GUID( IID_IWMSCacheItem, 0x517758e8,0x603c,0x4b98,0x82,0xC1,0x4B,0x2F,0xA7,0x78,0x71,0x66  );
EXTERN_GUID( IID_IWMSCacheItems, 0x517758e9,0x603c,0x4b98,0x82,0xC1,0x4B,0x2F,0xA7,0x78,0x71,0x66  );
EXTERN_GUID( IID_IWMSOutgoingDistributionConnection , 0x60f2ee54,0xdcaa,0x4cb6,0xa6,0xd2,0x12,0xbc,0x23,0xac,0x9d,0xf0  );
EXTERN_GUID( IID_IWMSOutgoingDistributionConnections , 0x60f2ee53,0xdcaa,0x4cb6,0xa6,0xd2,0x12,0xbc,0x23,0xac,0x9d,0xf0  );
EXTERN_GUID( IID_IWMSPlayer , 0x18812736,0x4BEC,0x11D2,0xBF,0x25,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( IID_IWMSPlayers , 0x18812738,0x4BEC,0x11D2,0xBF,0x25,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( IID_INSInstalledPlugin , 0x40C238AA,0x701A,0x11D2,0xBF,0x2F,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( IID_IWMSPublishingPoint , 0x1881273F,0x4BEC,0x11D2,0xBF,0x25,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( IID_IWMSPublishingPoint2 , 0x770e846b,0xde39,0x4d72,0xA2,0x9F,0x1B,0x63,0x1C,0xA6,0x60,0xB4  );
EXTERN_GUID( IID_IWMSOnDemandPublishingPoint , 0x6ca388b3,0xeaee,0x492f,0xa8,0xd6,0x87,0x58,0xeF,0xc7,0x2d,0x76  );
EXTERN_GUID(IID_IWMSOnDemandPublishingPoint2 , 0x3abbf960,0x54e5,0x40be,0x86,0x77,0xC1,0x75,0x8B,0x12,0x39,0xEB  );
EXTERN_GUID( IID_IWMSBroadcastPublishingPoint , 0x6ca388b4,0xeaee,0x492f,0xa8,0xd6,0x87,0x58,0xeF,0xc7,0x2d,0x76  );
EXTERN_GUID( IID_IWMSBroadcastPublishingPoint2 , 0xc94e9af0,0xf12d,0x4bff,0xB0,0x1A,0x1C,0xE6,0xD7,0xF5,0xD3,0x03  );
EXTERN_GUID( IID_IWMSPublishingPoints , 0x1881274D,0x4BEC,0x11D2,0xBF,0x25,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( IID_IWMSServer , 0x845FB958,0x4279,0x11D2,0xBF,0x23,0x00,0x80,0x5F,0xBE,0x84,0xA6  );
EXTERN_GUID( IID_IWMSServerCurrentCounters, 0x18fa53cd, 0x8eb9, 0x4b5f, 0xb7, 0x50, 0x65, 0x9d, 0x9b, 0x96, 0xdb, 0x9f );
EXTERN_GUID( IID_IWMSServerPeakCounters, 0x66f2d385, 0x7081, 0x40b9, 0x86, 0x3c, 0xaf, 0xa4, 0xe5, 0x61, 0x2c, 0xd3 );
EXTERN_GUID( IID_IWMSServerLimits, 0xd06ccfbb, 0x994d, 0x45f8, 0x88, 0x6e, 0x81, 0xe9, 0xb7, 0xfa, 0xed, 0xf1 );
EXTERN_GUID( IID_IWMSServerTotalCounters, 0xDAA2A1BB, 0xBC91, 0x438d, 0xBF, 0x33, 0xBD, 0xE1, 0x1D, 0x23, 0x48, 0xD5 );
EXTERN_GUID( IID_IWMSPublishingPointCurrentCounters, 0x638dfa30, 0x1054, 0x48bd, 0xb0, 0x30, 0xc3, 0xda, 0x1f, 0xc1, 0x81, 0x54 );
EXTERN_GUID( IID_IWMSPublishingPointPeakCounters, 0x43b20cc5, 0xca36, 0x4e7b, 0xad, 0xaf, 0xc9, 0xc6, 0xd, 0x0, 0xbb, 0xe );
EXTERN_GUID( IID_IWMSPublishingPointLimits, 0x6cd5bc19, 0x35fd, 0x4501, 0xa9, 0x53, 0xfe, 0xb5, 0x7a, 0xae, 0x9c, 0x13 );
EXTERN_GUID( IID_IWMSPublishingPointTotalCounters, 0x240d0c87, 0x309a, 0x4126, 0xbf, 0x14, 0xb5, 0x2a, 0x62, 0x2e, 0x95, 0xa9 );
EXTERN_GUID( IID_IWMSPlaylist, 0xee1f2e7, 0x48ef, 0x11d2, 0x9e, 0xff, 0x0, 0x60, 0x97, 0xd2, 0xd7, 0xcf );
EXTERN_GUID( IID_IWMSPlugin , 0x517758ed,0x603c,0x4b98,0x82,0xC1,0x4B,0x2F,0xA7,0x78,0x71,0x66  );
EXTERN_GUID( IID_IWMSActiveStream , 0x165FC383,0xB494,0x4465,0xAD,0x08,0x4A,0x73,0xCE,0xDF,0x87,0x91  );
EXTERN_GUID( IID_IWMSActiveStreams , 0x5F248EA2,0xC018,0x466c,0x9A,0xD7,0x20,0x86,0xCF,0xB9,0xA5,0xD3  );
EXTERN_GUID( IID_IWMSActiveMedia , 0x9D07EE1C,0x798F,0x4a28,0x85,0xFA,0x23,0x06,0x64,0x65,0x0B,0x7C  );
EXTERN_GUID( IID_IWMSCertificate, 0x901447DA, 0x8C5D, 0x48b7, 0xA5, 0xF9, 0xD2, 0x38, 0x09, 0x32, 0x2B, 0xC0  );
EXTERN_GUID( IID_IWMSCertificates, 0x7B8585BF, 0x9FB8, 0x4132, 0xAC, 0xD3, 0x3E, 0x61, 0xCA, 0x4C, 0x30, 0xDB  );
EXTERN_GUID( IID_IWMSAvailableIPAddresses , 0x3FC1A813,0x759F,0x4441,0xBA,0x48,0x21,0x88,0x9E,0xC8,0xAC,0x20  );
EXTERN_GUID( IID_IWMSRootDirectories , 0xDFC750A9,0xF846,0x48BE,0x87,0xAE,0x79,0xF8,0x51,0xC9,0xCD,0x92  );
EXTERN_GUID( IID_IWMSAnnouncementStreamFormats , 0x55DDB8E9,0x05A3,0x4666,0x9E,0x20,0x55,0x0F,0x94,0x58,0x1B,0x06  );

EXTERN_GUID( IID_IWMSServerCurrentCounters2, 0x3e061553, 0x1a6e, 0x405f, 0xad, 0xff, 0x6b, 0x1b, 0xef, 0x58, 0xec, 0xfb);
EXTERN_GUID( IID_IWMSServerPeakCounters2, 0xf09dbb46, 0x19c0, 0x4fb7, 0xba, 0x22, 0xb3, 0x89, 0x94, 0xfb, 0xb2, 0x93);
EXTERN_GUID( IID_IWMSServerTotalCounters2, 0x3e10c815, 0xc2cf, 0x4d47, 0xbb, 0x11, 0x82, 0x51, 0x24, 0x47, 0x12, 0xf2);
EXTERN_GUID( IID_IWMSPublishingPointCurrentCounters2, 0x406aec46, 0x7318, 0x4860, 0x80, 0x8c, 0x2f, 0x8e, 0xb0, 0x6e, 0xc7, 0x65);
EXTERN_GUID( IID_IWMSPublishingPointPeakCounters2, 0x22101970, 0x6bf1, 0x43e3, 0xbf, 0xf4, 0x6b, 0xf5, 0x70, 0x44, 0xfc, 0x4c);
EXTERN_GUID( IID_IWMSPublishingPointTotalCounters2, 0xfdfabb7f, 0x759a, 0x44da, 0x8b, 0x62, 0xea, 0x84, 0x8c, 0x59, 0x51, 0x58);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsContextNames.h ===
//***************************************************************************** 
// 
// Microsoft Windows Media 
// Copyright (C) Microsoft Corporation. All rights reserved. 
//
// FileName:            wmsContextNames.h
//
// Abstract:
//
//*****************************************************************************

#ifndef _WMS_CONTEXT_NAMES_h_
#define _WMS_CONTEXT_NAMES_h_


enum CONTEXT_NAME_TYPE
{
    WMS_UNKNOWN_CONTEXT_NAME_TYPE = 0,
    WMS_SERVER_CONTEXT_NAME_TYPE,
    WMS_USER_CONTEXT_NAME_TYPE,
    WMS_PRESENTATION_CONTEXT_NAME_TYPE,
    WMS_COMMAND_CONTEXT_NAME_TYPE,
    WMS_TRANSPORT_CONTEXT_NAME_TYPE,
    WMS_CONTENT_DESCRIPTION_CONTEXT_NAME_TYPE,
    WMS_PACKETIZER_CONTEXT_NAME_TYPE,
    WMS_CACHE_CONTENT_INFORMATION_CONTEXT_NAME_TYPE,
    WMS_ARCHIVE_CONTEXT_NAME_TYPE,

    WMS_NUM_CONTEXT_NAME_TYPES
};


//
// The DEFINE_NAME macro is used for defining context names.
//
#define DEFINE_NAME( name, value )  \
    extern __declspec(selectany) LPCWSTR name = L ## value;

//
// The DEFINE_HINT macro is used to declare a "hint" that can be used with
// the methods in IWMSContext that use hint values.
//
#define DEFINE_HINT( name, value )  \
    enum { name = value };


#if BUILD_HINT_TO_NAME_TABLES

// BUILD_HINT_TO_NAME_TABLES should not be defined; it is used internally 
// by the WMSServer to initialize internal tables.
void MapContextHintToName( DWORD dwContextType, LPCWSTR szwName, long dwHint );

// This class lets us run some code when we declare a variable.
class CContextNamesTableInitializer
{
public:
    CContextNamesTableInitializer( DWORD dwContextType, LPCWSTR szwName, long dwHint )
    {
        MapContextHintToName( dwContextType, szwName, dwHint );
    }
};

#define DEFINE_NAME_AND_HINT( name, value, id )  \
    DEFINE_NAME( name, value )                   \
    DEFINE_HINT( name ## _ID, id )              \
    CContextNamesTableInitializer name ## _Decl( CURRENT_CONTEXT_TYPE, name, id );

#else

#define DEFINE_NAME_AND_HINT( name, value, id )  \
    DEFINE_NAME( name, value )                   \
    DEFINE_HINT( name ## _ID, id )

#endif // BUILD_HINT_TO_NAME_TABLES





/////////////////////////////////////////////////////////////////////////////
//
//                              SERVER CONTEXT
//
/////////////////////////////////////////////////////////////////////////////
#undef CURRENT_CONTEXT_TYPE
#define CURRENT_CONTEXT_TYPE     WMS_SERVER_CONTEXT_NAME_TYPE


// Type: String
// Description: This is the server's domain name.
DEFINE_NAME_AND_HINT( WMS_SERVER_DOMAIN_NAME, "WMS_SERVER_DOMAIN_NAME", 3 )

// Type: Long
// Description: This is the major version of the server. The format of the version number
// is as follows: major.minor.minor-minor.build.
DEFINE_NAME_AND_HINT( WMS_SERVER_VERSION_MAJOR, "WMS_SERVER_VERSION_MAJOR", 4 )

// Type: Long
// Description: This is the minor version of the server. The format of the version number
// is as follows: major.minor.minor-minor.build.
DEFINE_NAME_AND_HINT( WMS_SERVER_VERSION_MINOR, "WMS_SERVER_VERSION_MINOR", 5 )

// Type: Long
// Description: This is the minor-minor version of the server. The format of the version number
// is as follows: major.minor.minor-minor.build.
DEFINE_NAME_AND_HINT( WMS_SERVER_VERSION_MINOR_MINOR, "WMS_SERVER_VERSION_MINOR_MINOR", 6 )

// Type: IDispatch
// Description: This is the pointer to the IWMSServer object.
DEFINE_NAME_AND_HINT( WMS_SERVER, "WMS_SERVER", 7 )

// Type: IDispatch
// Description: This is the pointer to the IWMSEventLog object.
DEFINE_NAME_AND_HINT( WMS_SERVER_EVENT_LOG, "WMS_SERVER_EVENT_LOG", 17 )

// Type: Long
// Description: This boolean is set to true when server is shutting down.
DEFINE_NAME_AND_HINT( WMS_SERVER_SHUTTING_DOWN, "WMS_SERVER_SHUTTING_DOWN", 18 )

// Type: IUnknown
// Description: This is the pointer to the server's cache manager (IWMSCacheProxyServer) object.
DEFINE_NAME_AND_HINT( WMS_SERVER_CACHE_MANAGER, "WMS_SERVER_CACHE_MANAGER", 19 )

// Type: Long
// Description: This is the build version of the server. The format of the version number
// is as follows: major.minor.minor-minor.build.
DEFINE_NAME_AND_HINT( WMS_SERVER_VERSION_BUILD, "WMS_SERVER_VERSION_BUILD", 26 )


// Type: String
// Description: This is the server's name.
DEFINE_NAME_AND_HINT( WMS_SERVER_NAME, "WMS_SERVER_NAME", 27 )



/////////////////////////////////////////////////////////////////////////////
//
//                              USER CONTEXT
//
/////////////////////////////////////////////////////////////////////////////
#undef CURRENT_CONTEXT_TYPE
#define CURRENT_CONTEXT_TYPE     WMS_USER_CONTEXT_NAME_TYPE


// Type: String
// Description: This is the user agent for the client.
DEFINE_NAME_AND_HINT( WMS_USER_AGENT,           "WMS_USER_AGENT", 1 )

// Type: String
// Description: This identifies an instance of the player software. This GUID
// is normally generated on the player when it is installed, although users
// may explicitly conceal their GUID for privacy.
DEFINE_NAME_AND_HINT( WMS_USER_GUID,            "WMS_USER_GUID", 2 )

// Type: String
// Description: This is the user name for the client.
DEFINE_NAME_AND_HINT( WMS_USER_NAME,            "WMS_USER_NAME", 3 )

// Type: Long
// Description: This is the IP address for the client. This is a 32-bit number
// in network byte order.
DEFINE_NAME_AND_HINT( WMS_USER_IP_ADDRESS,      "WMS_USER_IP_ADDRESS", 4 )

// Type: String
// Description: This is the IP address for the client.  This is a string 
// (e.g "127.0.0.1" ). This string can also specify an IPv6 address.
DEFINE_NAME_AND_HINT( WMS_USER_IP_ADDRESS_STRING,   "WMS_USER_IP_ADDRESS_STRING", 5 )

// Type: String
// Description: This is the control protocol used to communicate with the client.
// This may only be one of the values described below.
DEFINE_NAME_AND_HINT( WMS_USER_CONTROL_PROTOCOL, "WMS_USER_CONTROL_PROTOCOL", 6 )
// Values for the WMS_USER_CONTROL_PROTOCOL property.
DEFINE_NAME( WMS_MMS_PROTOCOL_NAME,    "MMS" )
DEFINE_NAME( WMS_RTSP_PROTOCOL_NAME,   "RTSP" )
DEFINE_NAME( WMS_HTTP_PROTOCOL_NAME,   "HTTP" )
DEFINE_NAME( WMS_UNKNOWN_PROTOCOL_NAME,"UNKNOWN" )

// Type: IUnknown
// Description: This is the pointer to the user authentication context (IWMSAuthenticationContext) object.
DEFINE_NAME_AND_HINT( WMS_USER_AUTHENTICATOR,   "WMS_USER_AUTHENTICATOR", 7 )

// Type: Long
// Description: This is the identification number for the client.
DEFINE_NAME_AND_HINT( WMS_USER_ID,              "WMS_USER_ID", 8 )

// Type: Long
// Description: This is the remote port number in host byte order.
DEFINE_NAME_AND_HINT( WMS_USER_PORT, "WMS_USER_PORT", 12 )

// Type: IUnknown
// Description: This is the current presentation context object (IWMSContext) for this client.
DEFINE_NAME_AND_HINT( WMS_USER_PRESENTATION_CONTEXT, "WMS_USER_PRESENTATION_CONTEXT", 13 )

// Type: Long
// Description: This is the link bandwidth supplied by the client during the play command.
DEFINE_NAME_AND_HINT( WMS_USER_LINK_BANDWIDTH, "WMS_USER_LINK_BANDWIDTH", 20 )

// Type: String
// Description: This is the referer URL for the client.
DEFINE_NAME_AND_HINT( WMS_USER_REFERER, "WMS_USER_REFERER", 26 )

// Type: String
// Description: The server's network address
DEFINE_NAME_AND_HINT( WMS_USER_SERVER_IP_ADDRESS_STRING,   "WMS_USER_SERVER_IP_ADDRESS", 30 )

// Type: String
// Description: This specifies a comma delimited list of upstream proxy servers.  This is taken from the "Via:" header.
// For HTTP and RTSP, this is updated for each response received.  For MMS, this is
// never set, as this protocol does not support this header.  The Via string will have this format:
// "1.0 MSISA/3.0, HTTP/1.1 NetApp/2.1.2, RTSP/1.0 NSServer/9.0.0.200"
DEFINE_NAME_AND_HINT( WMS_USER_VIA_UPSTREAM_PROXIES, "WMS_USER_VIA_UPSTREAM_PROXIES", 36 )

// Type: String
// Description: This Specifies a comma delimited list of downstream proxy servers.  This is taken from the "Via:" header.  
// For HTTP and RTSP, this is updated for each request received.  For MMS, this is
// set only once when the LinkMacToViewerReportConnectedExMessage is received.  The Vis string will have
// this format: "1.0 MSISA/3.0, HTTP/1.1 NetApp/2.1.2, RTSP/1.0 NSServer/9.0.0.200"
DEFINE_NAME_AND_HINT( WMS_USER_VIA_DOWNSTREAM_PROXIES, "WMS_USER_VIA_DOWNSTREAM_PROXIES", 37 )

// Type: String
// Description: This specifies the cookie sent by the client to the proxy.
// The server will propagate this cookie upstream.
DEFINE_NAME_AND_HINT( WMS_USER_CACHE_CLIENT_COOKIE, "WMS_USER_CACHE_CLIENT_COOKIE", 45 )

// Type: String
// Description: This specifies the value of the "Set-Cookie" headers sent by the
// upstream server to the proxy.  The server will propagate this value downstream.
DEFINE_NAME_AND_HINT( WMS_USER_CACHE_SERVER_COOKIE, "WMS_USER_CACHE_SERVER_COOKIE", 46 )

// Type: String
// Description: This is the user agent of the original requesting client. When a WMS Cache/Proxy server
// connects to an origin server it will provide the original client's user agent in the header.
// This value is stored here so that the appropriate limits and actions can be applied based on the
// original client type i.e. player vs server.
DEFINE_NAME_AND_HINT( WMS_USER_PROXY_CLIENT_AGENT, "WMS_USER_PROXY_CLIENT_AGENT", 47 )


/////////////////////////////////////////////////////////////////////////////
//
//                           PRESENTATION CONTEXT
//
/////////////////////////////////////////////////////////////////////////////
#undef CURRENT_CONTEXT_TYPE
#define CURRENT_CONTEXT_TYPE     WMS_PRESENTATION_CONTEXT_NAME_TYPE

// Type: IUnknown
// Description: This is the pointer to an IWMSStreamHeaderList object.
DEFINE_NAME_AND_HINT( WMS_PRESENT_STREAM_HEADERS,   "WMS_PRESENT_STREAM_HEADERS", 2)

// Type: IUnknown
// Description: This is the pointer to an IWMSContentDescriptionList object.
DEFINE_NAME_AND_HINT( WMS_PRESENT_CONTENT_DESCRIPTION,"WMS_PRESENT_CONTENT_DESCRIPTION", 3 )

// Type: String
// Description: This is the physical URL that is retrieved after the URL requested by a client 
// is resolved to a publishing point.
DEFINE_NAME_AND_HINT( WMS_PRESENT_PHYSICAL_NAME,    "WMS_PRESENT_PHYSICAL_NAME", 4 )

// Type: String
// Description: This is the URL requested by the client.
DEFINE_NAME_AND_HINT( WMS_PRESENT_REQUEST_NAME,     "WMS_PRESENT_REQUEST_NAME", 5 )

// Type: Long
// Description: This specifies if the multimedia stream is a broadcast stream.  This is a flag 
// with a value of 1 for TRUE and 0 for FALSE.
DEFINE_NAME_AND_HINT( WMS_PRESENT_BROADCAST,        "WMS_PRESENT_BROADCAST", 6 )

// Type: Long
// Description: This specifies if the multimedia stream supports seeking to a specific time offset.
// This is a flag.  Its value is 1 for True and 0 for False.
DEFINE_NAME_AND_HINT( WMS_PRESENT_SEEKABLE,         "WMS_PRESENT_SEEKABLE", 7 )

// Type: Long
// Description: This specifies if the multimedia stream should be carried over a reliable data communications 
// transport mechanism.  This is a flag.  Its value is 1 for True and 0 for False.
DEFINE_NAME_AND_HINT( WMS_PRESENT_RELIABLE,         "WMS_PRESENT_RELIABLE", 8 )

// Type: Long
// Description: This is the maximum instantaneous bit rate for the current multimedia stream 
// being sent to the client.
DEFINE_NAME_AND_HINT( WMS_PRESENT_BITRATE,          "WMS_PRESENT_BITRATE", 11 )

// Type: Long
// Description: This is the high-order 32 bits of a 64 bit integer indicating the time needed
// to play the multimedia stream in milliseconds.
DEFINE_NAME_AND_HINT( WMS_PRESENT_DURATION_HI,      "WMS_PRESENT_DURATION_HI", 12 )

// Type: Long
// Description: This is the low-order 32 bits of a 64 bit integer indicating the time needed
// to play the multimedia stream in milliseconds.
DEFINE_NAME_AND_HINT( WMS_PRESENT_DURATION_LO,      "WMS_PRESENT_DURATION_LO", 13 )

// Type: Long
// Description: This is the play rate for the multimedia stream.
DEFINE_NAME_AND_HINT( WMS_PRESENT_PLAY_RATE,        "WMS_PRESENT_PLAY_RATE", 14 )

// Type: QWORD
// Description: This is the start time of the play request in milliseconds.
// This might not be present in all play requests.
DEFINE_NAME_AND_HINT( WMS_PRESENT_START_TIME,     "WMS_PRESENT_START_TIME", 15 )

// Type: String
// Description: This is the physical URL that is retrieved after the URL requested by a client 
// is resolved to a publishing point. This is the physical URL before a physical URL transform is performed.
DEFINE_NAME_AND_HINT( WMS_PRESENT_ORIGINAL_PHYSICAL_NAME,    "WMS_PRESENT_ORIGINAL_PHYSICAL_NAME", 16 )

// Type: String
// Description: This is the original URL requested by the client before a logical URL transform is performed.
DEFINE_NAME_AND_HINT( WMS_PRESENT_ORIGINAL_REQUEST_NAME,     "WMS_PRESENT_ORIGINAL_REQUEST_NAME", 17 )

// Type: Long
// Description: This is the high-order 32 bits of a 64 bit integer indicating the total number of bytes
// that have been sent to the client.
DEFINE_NAME_AND_HINT( WMS_PRESENT_TOTAL_BYTES_SENT_HI, "WMS_PRESENT_TOTAL_BYTES_SENT_HI", 18 )

// Type: Long
// Description: This is the low-order 32 bits of a 64 bit integer indicating the total number of bytes
// that have been sent to the client.
DEFINE_NAME_AND_HINT( WMS_PRESENT_TOTAL_BYTES_SENT_LO, "WMS_PRESENT_TOTAL_BYTES_SENT_LO", 19 )

// Type: Long
// Description: This is the high-order 32 bits of a 64 bit integer indicating the total time in seconds
// of the multimedia stream that has been sent to the client.
DEFINE_NAME_AND_HINT( WMS_PRESENT_TOTAL_PLAY_TIME_HI,  "WMS_PRESENT_TOTAL_PLAY_TIME_HI", 20 )

// Type: Long
// Description: This is the low-order 32 bits of a 64 bit integer indicating the total time in seconds 
// of the multimedia stream that has been sent to the client.
DEFINE_NAME_AND_HINT( WMS_PRESENT_TOTAL_PLAY_TIME_LO,  "WMS_PRESENT_TOTAL_PLAY_TIME_LO", 21 )

// Type: Long
// Set By: Op Center
// Supported Versions: V5
// Description: Bandwidth allocated (must be decremented before client goes away).
DEFINE_NAME_AND_HINT( WMS_PRESENT_ALLOCATED_BANDWIDTH,  "WMS_PRESENT_ALLOCATED_BANDWIDTH", 30 )

// Type: String
// Description: This is the value specified for the role attribute in a playlist.
// This is an optional attribute.
DEFINE_NAME_AND_HINT( WMS_PRESENT_PLAYLIST_ENTRY_ROLE, "WMS_PRESENT_PLAYLIST_ENTRY_ROLE", 45 )

// Type: LONG
// Set By: Network Sink
// Supported Versions: V5
// Description: Bandwidth allocated by network sink.
DEFINE_NAME_AND_HINT( WMS_PRESENT_BANDWIDTH_ALLOCATED_BY_NETWORKSINK, "WMS_PRESENT_BANDWIDTH_ALLOCATED_BY_NETWORKSINK", 48 )

// Type: DWORD
// Description: This is the currently selected bitrate, by the sink used for predict stream selection
DEFINE_NAME_AND_HINT( WMS_PRESENT_WMSSINK_SELECTED_BITRATE, "WMS_PRESENT_WMSSINK_SELECTED_BITRATE", 51 )

// Type: String
// Description: This is the URL of the origin server that the WMS cache/proxy server was redirected to.
DEFINE_NAME_AND_HINT( WMS_PRESENT_REDIRECT_LOCATION, "WMS_PRESENT_REDIRECT_LOCATION", 70 )

// Type: Long
// Description:  For an ASF file, this specifies the amount of time in milliseconds that a player
// should buffer data before starting to play the file.
DEFINE_NAME_AND_HINT( WMS_PRESENT_PREROLL_TIME, "WMS_PRESENT_PREROLL_TIME", 81 )



/////////////////////////////////////////////////////////////////////////////
//
//                           COMMAND CONTEXT
//
/////////////////////////////////////////////////////////////////////////////
#undef CURRENT_CONTEXT_TYPE
#define CURRENT_CONTEXT_TYPE     WMS_COMMAND_CONTEXT_NAME_TYPE


//
// Each RTSP and HTTP header line gets an entry in the command context.
// In order to prevent name clashes between the header lines and additional
// command context properties that we define, our properties always begin
// with "@ ".  This is guaranteed to avoid clashes, because the '@' character 
// is not valid in header line names. 
//


// Type: String
// Description: This is the complete URL requested by the client.
// E.g., "rtsp://foo.com/bar" for RTSP, and "/bar" for HTTP.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_URL,                    "@WMS_COMMAND_CONTEXT_URL", 2 )

// Type:  String
// Description: When an absolute URL is available, (e.g., "rtsp://foo.com/bar") its
// individual components are available in several properties. This property is the URL scheme.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_URL_SCHEME,             "@WMS_COMMAND_CONTEXT_URL_SCHEME", 3 )

// Type:  String
// Description: When an absolute URL is available, (e.g., "rtsp://foo.com/bar") its
// individual components are available in several properties. This property is the URL host name.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_URL_HOSTNAME,           "@WMS_COMMAND_CONTEXT_URL_HOSTNAME", 4 )

// Type: Long
// Description: When an absolute URL is available, (e.g., "rtsp://foo.com/bar") its
// individual components are available in several properties. This property is the URL port.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_URL_PORT,               "@WMS_COMMAND_CONTEXT_URL_PORT", 5 )

// Type: String
// Description: When an absolute URL is available, (e.g., "rtsp://foo.com/bar") its
// individual components are available in several properties. This property is the URL path.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_URL_PATH,               "@WMS_COMMAND_CONTEXT_URL_PATH", 6 )

// Type: String
// Description: When an absolute URL is available, (e.g., "rtsp://foo.com/bar") its
// individual components are available in several properties. This property is the URL extension (which
// includes the fragment and query).
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_URL_EXTRAINFO,          "@WMS_COMMAND_CONTEXT_URL_EXTRAINFO", 7 )

// Type: String or IUnknown
// Description: This is the body (payload) of this command. This may be a String, or an IUnknown pointer
// to an INSSBuffer object.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_BODY,                   "@WMS_COMMAND_CONTEXT_BODY", 11 )

// Type: String
// Description: This is the MIME type of the payload specified by WMS_COMMAND_CONTEXT_BODY.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_BODY_TYPE,               "@WMS_COMMAND_CONTEXT_BODY_TYPE", 12 )

// Type: IUnknown
// Description: IUnknown of IWMSTransportProperties (Transport Properties Object)
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_TRANSPORT,                "@ TRANSPORT PROPERTIES", 13 )

// Type: CURRENCY
// Description: This specifies an offset from which the server should start playing a multimedia stream.
// The format of the offset is specified by WMS_COMMAND_CONTEXT_START_OFFSET_TYPE.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_START_OFFSET,           "@WMS_COMMAND_CONTEXT_START_OFFSET", 16 )

// Type: Long
// Description: This is a WMS_SEEK_TYPE constant which specifies how to interpret WMS_COMMAND_CONTEXT_START_OFFSET.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_START_OFFSET_TYPE,   "@WMS_COMMAND_CONTEXT_START_OFFSET_TYPE", 17 )

// Type: double (variant type VT_R8)
// Description: This is the rate at which the stream should be played.
// The value may be negative for rewind.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_RATE,                   "@WMS_COMMAND_CONTEXT_RATE", 21 )

// Type: IUnknown
// Description: IUknown of IWMSStreamSwitchDescriptionList
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_STREAM_SWITCH,          "@ STREAM SWITCH", 25 )

// Type: String
// Description: This specifies the GUID that identifies the publishing point.  
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PUBPOINT_IDENTIFIER,            "@WMS_COMMAND_CONTEXT_PUBPOINT_IDENTIFIER", 40 )

// Type: Long
// Description: This specifies an eunumeration value defined in event.idl that identifies the 
// specific event that occurred.  
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_EVENT,            "@WMS_COMMAND_CONTEXT_EVENT", 52 )

// Type: String
// Description: This is the name of the administrator who caused the event.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_EVENT_ADMINNAME,            "@WMS_COMMAND_CONTEXT_EVENT_ADMINNAME", 53 )

// Type: Long
// Description: This is the ID of the client that was disconnected due to a limit being hit that was specified
// by either an IWMSServerLimits or IWMSpublishingPointLimits object.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_LIMIT_CLIENTID,            "@WMS_COMMAND_CONTEXT_LIMIT_CLIENTID", 55 )

// Type: String
// Description: The is the IP address of the client that was disconnected due to a limit being hit that was specified
// by either an IWMSServerLimits or IWMSpublishingPointLimits object.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_LIMIT_CLIENTIP,            "@WMS_COMMAND_CONTEXT_LIMIT_CLIENTIP", 56 )

// Type: Long
// Description: This is the previous value of the limit that was changed.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_LIMIT_OLD_VALUE,            "@WMS_COMMAND_CONTEXT_LIMIT_OLD_VALUE", 57 )

// Type: IDispatch
// Description: This is a pointer to an IWMSPlaylist object associated with the event.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PLAYLIST_OBJECT,            "@WMS_COMMAND_CONTEXT_PLAYLIST_OBJECT", 59 )

// Type: String
// Description: This is the name of the publishing point associated with the event.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PUBPOINT_NAME,       "@WMS_COMMAND_CONTEXT_PUBPOINT_NAME", 62 )

// Type: String
// Description: This is the moniker for the publishing point associated with the event.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PUBPOINT_MONIKER,    "@WMS_COMMAND_CONTEXT_PUBPOINT_MONIKER", 63 )

// Type: VARIANT
// Description: This is the old value for the property that was changed.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_EVENT_OLD_VALUE,     "@WMS_COMMAND_CONTEXT_EVENT_OLD_VALUE", 64 )

// Type: VARIANT
// Description: This is the new value for the property that was changed or added.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_EVENT_NEW_VALUE,     "@WMS_COMMAND_CONTEXT_EVENT_NEW_VALUE", 65 )

// Type: String
// Description: This is the name of the property that was changed.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_EVENT_PROPERTY_NAME, "@WMS_COMMAND_CONTEXT_EVENT_PROPERTY_NAME", 66 )

// Type: String
// Description: This is the name of the plugin associated with the event.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PLUGIN_NAME,         "@WMS_COMMAND_CONTEXT_PLUGIN_NAME", 69 )

// Type: String
// Description: This is the moniker for the plugin associated with the event.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PLUGIN_MONIKER,      "@WMS_COMMAND_CONTEXT_PLUGIN_MONIKER", 70 )

// Type: Long
// Description: This is the new value of the limit that was changed.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_LIMIT_NEW_VALUE,     "@WMS_COMMAND_CONTEXT_LIMIT_NEW_VALUE", 72 )

// Type: String
// Description: This is the moniker for an IWMSCacheProxyPlugin object associated with the event. 
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_CACHE_MONIKER,      "@WMS_COMMAND_CONTEXT_CACHE_MONIKER", 87 )

// Type: String
// Description: This specifies where the content is stored locally for cache download and prestuff events.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_DOWNLOAD_URL,      "@WMS_COMMAND_CONTEXT_DOWNLOAD_URL", 88 )

// Type: String
// Description: This specifies the URL that a client was redirected to.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_REDIRECT_URL,      "@WMS_COMMAND_CONTEXT_REDIRECT_URL", 89 )

// Type: String
// Description: The Template publishing point name for push distribution
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PUSH_DISTRIBUTION_TEMPLATE, "@WMS_COMMAND_CONTEXT_PUSH_DISTRIBUTION_TEMPLATE", 97 )

// Type: DWORD
// Description: This indicates that a new publishing point will be created by this push command
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PUSH_CREATING_NEW_PUBLISHING_POINT, "@WMS_COMMAND_CONTEXT_PUSH_CREATING_NEW_PUBLISHING_POINT", 99 )

// Type: Long
// Description: This is the unique identifier for the playlist element associated with the event.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_PLAYLIST_ENTRY_UNIQUE_RUNTIME_ID, "@WMS_COMMAND_CONTEXT_PLAYLIST_ENTRY_UNIQUE_RUNTIME_ID", 100 )

// Type: String
// Description: This is an URL used for rtsp TEARDOWN and SET_PARAMETER commands.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_REQUEST_URL, "@WMS_COMMAND_CONTEXT_REQUEST_URL", 105 )

// Type: String
// Description: This indicates the active entry that is being played after a startpushing call.
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_ACTIVE_ENTRY_URL, "@WMS_COMMAND_CONTEXT_ACTIVE_ENTRY_URL", 164 )

// Type: String
// Description: This is the complete original MMS URL requested by the client.
// E.g., "mms://foo.com:1755/bar".
DEFINE_NAME_AND_HINT( WMS_COMMAND_CONTEXT_ORIGINAL_MMS_URL, "@WMS_COMMAND_CONTEXT_ORIGINAL_MMS_URL", 165 )

/////////////////////////////////////////////////////////////////////////////
//
//                           TRANSPORT PARAMETERS CONTEXT
//
/////////////////////////////////////////////////////////////////////////////
#undef CURRENT_CONTEXT_TYPE
#define CURRENT_CONTEXT_TYPE     WMS_TRANSPORT_CONTEXT_NAME_TYPE

// Type: String
// Description: This is the name of the lower transport protcol.
// Values: "UDP", "TCP" (not supported) or "Interleaved".
// ("Interleaved" means that that the data is sent over the control connection.)
// ("UDP" and "TCP" imply that the data and control commands are sent over
// separate connections.)
DEFINE_NAME_AND_HINT( WMS_TRANSPORT_CONTEXT_DATA_TRANSPORT,         "TRANSPORT PROTOCOL", 5 )

// Type: Long
// Description: This is the port number that the client has bound to.  The client is
// expecting to receive data on this port. 
DEFINE_NAME_AND_HINT( WMS_TRANSPORT_CONTEXT_CLIENT_PORT,            "DESTINATION PORT", 7 )

// Type: Long
// Description: This is the port number that the client has bound to.  The client is
// expecting to receive feedback messages on this port.
DEFINE_NAME_AND_HINT( WMS_TRANSPORT_CONTEXT_CLIENT_FEEDBACK_PORT,   "CLIENT FEEDBACK PORT", 16 )

/////////////////////////////////////////////////////////////////////////////
//
//                          CONTENT DESCRIPTION
//
/////////////////////////////////////////////////////////////////////////////
#undef CURRENT_CONTEXT_TYPE
#define CURRENT_CONTEXT_TYPE     WMS_CONTENT_DESCRIPTION_CONTEXT_NAME_TYPE

// Type: String
// Description:  This is the title for the current multimedia stream.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_TITLE,            "title", 1 )

// Type: String
// Description:  This is the author for the current multimedia stream.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_AUTHOR,           "author", 2 )

// Type: String
// Description:  This is the copyright for the current multimedia stream.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_COPYRIGHT,        "copyright", 3 )

// Type: String
// Description:  This is the description for the current multimedia stream.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_DESCRIPTION,      "WMS_CONTENT_DESCRIPTION_DESCRIPTION", 4 )

// Type: String
// Description:  This is the rating for the current multimedia stream.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_RATING,           "WMS_CONTENT_DESCRIPTION_RATING", 5 )

// Type: String
// Description:  This is the URL for the current multimedia stream.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_PLAYLIST_ENTRY_URL, "WMS_CONTENT_DESCRIPTION_PLAYLIST_ENTRY_URL", 6 )

// Type: String
// Description:  This is the value for the role attribute in the playlist for the current multimedia stream.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_ROLE,             "WMS_CONTENT_DESCRIPTION_ROLE", 7 )

// Type: Long
// Description: This specifies if a client is allowed to seek, fast forward, rewind, or skip the multimedia stream.  This is a flag
// with a value of 1 for True and 0 for False.  A value of True indicates that these actions are not allowed.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_NO_SKIP,          "WMS_CONTENT_DESCRIPTION_NO_SKIP", 11 )

// Type: String
// Description:  Defines the album name for the media file.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_ALBUM,            "album", 14 )

// Type: String
// Description:  Defines the artist of the media file.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_ARTIST,           "artist", 15 )

// Type: String
// Description:  Defines the text that is displayed as a ToolTip for the banner graphic defined by the bannerURL attribute.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_BANNERABSTRACT,   "bannerAbstract", 16 )

// Type: String
// Description:  Defines an URL that a user can access by clicking the banner graphic defined by the bannerURL attribute.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_BANNERINFOURL,    "bannerInfoURL", 17 )

// Type: String
// Description:  Defines an URL to a graphic file that appears in the Windows Media Players display panel, beneath the video content.  
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_BANNERURL,        "bannerURL", 18 )

// Type: String
// Description:  Defines the genre for the playlist or media file.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_GENRE,            "genre", 19 )

// Type: String
// Description:  Defines the URL that is used to post log statistics to either the origin server or any arbitrary location on the web.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_LOGURL,           "logURL", 20 )

// Type: String
// Description:  provides server info for branding
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_SERVER_BRANDING_INFO,      "WMS_CONTENT_DESCRIPTION_SERVER_BRANDING_INFO", 22 )

// Type: Long
// Description: This specifies if a client is allowed to seek backward, rewind or skip to the previous multimedia stream.  This is a flag
// with a value of 1 for True and 0 for False.  A value of True indicates that these actions are not allowed.
DEFINE_NAME_AND_HINT( WMS_CONTENT_DESCRIPTION_NO_RECEDE,          "WMS_CONTENT_DESCRIPTION_NO_RECEDE", 24 )


/////////////////////////////////////////////////////////////////////////////
//
//                              CACHE CONTENT INFORMATION
//
/////////////////////////////////////////////////////////////////////////////
#undef CURRENT_CONTEXT_TYPE
#define CURRENT_CONTEXT_TYPE     WMS_CACHE_CONTENT_INFORMATION_CONTEXT_NAME_TYPE

// Type: Long 
// Description: This specifies flags defined by WMS_CACHE_CONTENT_TYPE that describe the type of content.
DEFINE_NAME_AND_HINT( WMS_CACHE_CONTENT_INFORMATION_CONTENT_TYPE, "WMS_CACHE_CONTENT_INFORMATION_CONTENT_TYPE", 1 )

// Type: Long 
// Description: This specifies flags defined by WMS_CACHE_REMOTE_EVENT_FLAGS that describe the remote cache events
// that the origin server requested.
DEFINE_NAME_AND_HINT( WMS_CACHE_CONTENT_INFORMATION_EVENT_SUBSCRIPTIONS, "WMS_CACHE_CONTENT_INFORMATION_EVENT_SUBSCRIPTIONS", 2 )

// Type: IUnknown 
// Description: This is a pointer to an IWMSDataContainerVersion object.
DEFINE_NAME_AND_HINT( WMS_CACHE_CONTENT_INFORMATION_DATA_CONTAINER_VERSION, "WMS_CACHE_CONTENT_INFORMATION_DATA_CONTAINER_VERSION", 3 )

// Type: DWORD 
// Description: Pointer to a context that contains the Content Description Lists provided by
// a cache plugin in for a cache-hit.
DEFINE_NAME_AND_HINT( WMS_CACHE_CONTENT_INFORMATION_CONTENT_DESCRIPTION_LISTS, "WMS_CACHE_CONTENT_INFORMATION_CONTENT_DESCRIPTION_LISTS", 4 )

/////////////////////////////////////////////////////////////////////////////
//
//                              ARCHIVE CONTEXT
//
/////////////////////////////////////////////////////////////////////////////
#undef CURRENT_CONTEXT_TYPE
#define CURRENT_CONTEXT_TYPE     WMS_ARCHIVE_CONTEXT_NAME_TYPE

// Type: String
// Description: This is the name of the archive file.
DEFINE_NAME_AND_HINT( WMS_ARCHIVE_FILENAME, "WMS_ARCHIVE_FILENAME", 1 )

// Type: String
// Description: This is the format type of the archived file.
DEFINE_NAME_AND_HINT( WMS_ARCHIVE_FORMAT_TYPE, "WMS_ARCHIVE_FORMAT_TYPE", 2 )

// Type: IUnknown
// Description: This is a pointer to the IWMSStreamHeaderList object associated with the archived file.
DEFINE_NAME_AND_HINT( WMS_ARCHIVE_STREAM_HEADERS, "WMS_ARCHIVE_STREAM_HEADERS", 3 )

// Type: Long
// Description: This is an HRESULT indicating the result of downloading the requested content.
DEFINE_NAME_AND_HINT( WMS_ARCHIVE_STATUS_CODE, "WMS_ARCHIVE_STATUS_CODE", 4 )

// Type: CURRENCY
// Description: This is the size of the archived file.
DEFINE_NAME_AND_HINT( WMS_ARCHIVE_FILE_SIZE, "WMS_ARCHIVE_FILE_SIZE", 5 )

// Type: long
// description: This is the percentage of packets lost.
DEFINE_NAME_AND_HINT( WMS_ARCHIVE_PACKET_LOSS_PERCENTAGE, "WMS_ARCHIVE_PACKET_LOSS_PERCENTAGE", 6 )

// Type: IWMSBuffer
// description: pointer to a buffer that contains the serialized representation of a Content Description List.
DEFINE_NAME_AND_HINT( WMS_ARCHIVE_CONTENT_DESCRIPTION_LIST_BUFFER, "WMS_ARCHIVE_CONTENT_DESCRIPTION_LIST_BUFFER", 7 )


#endif // _WMS_CONTEXT_NAMES_h_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsdkidl.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsdkidl.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsdkidl_h__
#define __wmsdkidl_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMMediaProps_FWD_DEFINED__
#define __IWMMediaProps_FWD_DEFINED__
typedef interface IWMMediaProps IWMMediaProps;
#endif 	/* __IWMMediaProps_FWD_DEFINED__ */


#ifndef __IWMVideoMediaProps_FWD_DEFINED__
#define __IWMVideoMediaProps_FWD_DEFINED__
typedef interface IWMVideoMediaProps IWMVideoMediaProps;
#endif 	/* __IWMVideoMediaProps_FWD_DEFINED__ */


#ifndef __IWMWriter_FWD_DEFINED__
#define __IWMWriter_FWD_DEFINED__
typedef interface IWMWriter IWMWriter;
#endif 	/* __IWMWriter_FWD_DEFINED__ */


#ifndef __IWMDRMWriter_FWD_DEFINED__
#define __IWMDRMWriter_FWD_DEFINED__
typedef interface IWMDRMWriter IWMDRMWriter;
#endif 	/* __IWMDRMWriter_FWD_DEFINED__ */


#ifndef __IWMDRMWriter2_FWD_DEFINED__
#define __IWMDRMWriter2_FWD_DEFINED__
typedef interface IWMDRMWriter2 IWMDRMWriter2;
#endif 	/* __IWMDRMWriter2_FWD_DEFINED__ */


#ifndef __IWMDRMWriter3_FWD_DEFINED__
#define __IWMDRMWriter3_FWD_DEFINED__
typedef interface IWMDRMWriter3 IWMDRMWriter3;
#endif 	/* __IWMDRMWriter3_FWD_DEFINED__ */


#ifndef __IWMInputMediaProps_FWD_DEFINED__
#define __IWMInputMediaProps_FWD_DEFINED__
typedef interface IWMInputMediaProps IWMInputMediaProps;
#endif 	/* __IWMInputMediaProps_FWD_DEFINED__ */


#ifndef __IWMPropertyVault_FWD_DEFINED__
#define __IWMPropertyVault_FWD_DEFINED__
typedef interface IWMPropertyVault IWMPropertyVault;
#endif 	/* __IWMPropertyVault_FWD_DEFINED__ */


#ifndef __IWMIStreamProps_FWD_DEFINED__
#define __IWMIStreamProps_FWD_DEFINED__
typedef interface IWMIStreamProps IWMIStreamProps;
#endif 	/* __IWMIStreamProps_FWD_DEFINED__ */


#ifndef __IWMReader_FWD_DEFINED__
#define __IWMReader_FWD_DEFINED__
typedef interface IWMReader IWMReader;
#endif 	/* __IWMReader_FWD_DEFINED__ */


#ifndef __IWMSyncReader_FWD_DEFINED__
#define __IWMSyncReader_FWD_DEFINED__
typedef interface IWMSyncReader IWMSyncReader;
#endif 	/* __IWMSyncReader_FWD_DEFINED__ */


#ifndef __IWMSyncReader2_FWD_DEFINED__
#define __IWMSyncReader2_FWD_DEFINED__
typedef interface IWMSyncReader2 IWMSyncReader2;
#endif 	/* __IWMSyncReader2_FWD_DEFINED__ */


#ifndef __IWMOutputMediaProps_FWD_DEFINED__
#define __IWMOutputMediaProps_FWD_DEFINED__
typedef interface IWMOutputMediaProps IWMOutputMediaProps;
#endif 	/* __IWMOutputMediaProps_FWD_DEFINED__ */


#ifndef __IWMStatusCallback_FWD_DEFINED__
#define __IWMStatusCallback_FWD_DEFINED__
typedef interface IWMStatusCallback IWMStatusCallback;
#endif 	/* __IWMStatusCallback_FWD_DEFINED__ */


#ifndef __IWMReaderCallback_FWD_DEFINED__
#define __IWMReaderCallback_FWD_DEFINED__
typedef interface IWMReaderCallback IWMReaderCallback;
#endif 	/* __IWMReaderCallback_FWD_DEFINED__ */


#ifndef __IWMCredentialCallback_FWD_DEFINED__
#define __IWMCredentialCallback_FWD_DEFINED__
typedef interface IWMCredentialCallback IWMCredentialCallback;
#endif 	/* __IWMCredentialCallback_FWD_DEFINED__ */


#ifndef __IWMMetadataEditor_FWD_DEFINED__
#define __IWMMetadataEditor_FWD_DEFINED__
typedef interface IWMMetadataEditor IWMMetadataEditor;
#endif 	/* __IWMMetadataEditor_FWD_DEFINED__ */


#ifndef __IWMMetadataEditor2_FWD_DEFINED__
#define __IWMMetadataEditor2_FWD_DEFINED__
typedef interface IWMMetadataEditor2 IWMMetadataEditor2;
#endif 	/* __IWMMetadataEditor2_FWD_DEFINED__ */


#ifndef __IWMDRMEditor_FWD_DEFINED__
#define __IWMDRMEditor_FWD_DEFINED__
typedef interface IWMDRMEditor IWMDRMEditor;
#endif 	/* __IWMDRMEditor_FWD_DEFINED__ */


#ifndef __IWMHeaderInfo_FWD_DEFINED__
#define __IWMHeaderInfo_FWD_DEFINED__
typedef interface IWMHeaderInfo IWMHeaderInfo;
#endif 	/* __IWMHeaderInfo_FWD_DEFINED__ */


#ifndef __IWMHeaderInfo2_FWD_DEFINED__
#define __IWMHeaderInfo2_FWD_DEFINED__
typedef interface IWMHeaderInfo2 IWMHeaderInfo2;
#endif 	/* __IWMHeaderInfo2_FWD_DEFINED__ */


#ifndef __IWMHeaderInfo3_FWD_DEFINED__
#define __IWMHeaderInfo3_FWD_DEFINED__
typedef interface IWMHeaderInfo3 IWMHeaderInfo3;
#endif 	/* __IWMHeaderInfo3_FWD_DEFINED__ */


#ifndef __IWMProfileManager_FWD_DEFINED__
#define __IWMProfileManager_FWD_DEFINED__
typedef interface IWMProfileManager IWMProfileManager;
#endif 	/* __IWMProfileManager_FWD_DEFINED__ */


#ifndef __IWMProfileManager2_FWD_DEFINED__
#define __IWMProfileManager2_FWD_DEFINED__
typedef interface IWMProfileManager2 IWMProfileManager2;
#endif 	/* __IWMProfileManager2_FWD_DEFINED__ */


#ifndef __IWMProfileManagerLanguage_FWD_DEFINED__
#define __IWMProfileManagerLanguage_FWD_DEFINED__
typedef interface IWMProfileManagerLanguage IWMProfileManagerLanguage;
#endif 	/* __IWMProfileManagerLanguage_FWD_DEFINED__ */


#ifndef __IWMProfile_FWD_DEFINED__
#define __IWMProfile_FWD_DEFINED__
typedef interface IWMProfile IWMProfile;
#endif 	/* __IWMProfile_FWD_DEFINED__ */


#ifndef __IWMProfile2_FWD_DEFINED__
#define __IWMProfile2_FWD_DEFINED__
typedef interface IWMProfile2 IWMProfile2;
#endif 	/* __IWMProfile2_FWD_DEFINED__ */


#ifndef __IWMProfile3_FWD_DEFINED__
#define __IWMProfile3_FWD_DEFINED__
typedef interface IWMProfile3 IWMProfile3;
#endif 	/* __IWMProfile3_FWD_DEFINED__ */


#ifndef __IWMStreamConfig_FWD_DEFINED__
#define __IWMStreamConfig_FWD_DEFINED__
typedef interface IWMStreamConfig IWMStreamConfig;
#endif 	/* __IWMStreamConfig_FWD_DEFINED__ */


#ifndef __IWMStreamConfig2_FWD_DEFINED__
#define __IWMStreamConfig2_FWD_DEFINED__
typedef interface IWMStreamConfig2 IWMStreamConfig2;
#endif 	/* __IWMStreamConfig2_FWD_DEFINED__ */


#ifndef __IWMStreamConfig3_FWD_DEFINED__
#define __IWMStreamConfig3_FWD_DEFINED__
typedef interface IWMStreamConfig3 IWMStreamConfig3;
#endif 	/* __IWMStreamConfig3_FWD_DEFINED__ */


#ifndef __IWMPacketSize_FWD_DEFINED__
#define __IWMPacketSize_FWD_DEFINED__
typedef interface IWMPacketSize IWMPacketSize;
#endif 	/* __IWMPacketSize_FWD_DEFINED__ */


#ifndef __IWMPacketSize2_FWD_DEFINED__
#define __IWMPacketSize2_FWD_DEFINED__
typedef interface IWMPacketSize2 IWMPacketSize2;
#endif 	/* __IWMPacketSize2_FWD_DEFINED__ */


#ifndef __IWMStreamList_FWD_DEFINED__
#define __IWMStreamList_FWD_DEFINED__
typedef interface IWMStreamList IWMStreamList;
#endif 	/* __IWMStreamList_FWD_DEFINED__ */


#ifndef __IWMMutualExclusion_FWD_DEFINED__
#define __IWMMutualExclusion_FWD_DEFINED__
typedef interface IWMMutualExclusion IWMMutualExclusion;
#endif 	/* __IWMMutualExclusion_FWD_DEFINED__ */


#ifndef __IWMMutualExclusion2_FWD_DEFINED__
#define __IWMMutualExclusion2_FWD_DEFINED__
typedef interface IWMMutualExclusion2 IWMMutualExclusion2;
#endif 	/* __IWMMutualExclusion2_FWD_DEFINED__ */


#ifndef __IWMBandwidthSharing_FWD_DEFINED__
#define __IWMBandwidthSharing_FWD_DEFINED__
typedef interface IWMBandwidthSharing IWMBandwidthSharing;
#endif 	/* __IWMBandwidthSharing_FWD_DEFINED__ */


#ifndef __IWMStreamPrioritization_FWD_DEFINED__
#define __IWMStreamPrioritization_FWD_DEFINED__
typedef interface IWMStreamPrioritization IWMStreamPrioritization;
#endif 	/* __IWMStreamPrioritization_FWD_DEFINED__ */


#ifndef __IWMWriterAdvanced_FWD_DEFINED__
#define __IWMWriterAdvanced_FWD_DEFINED__
typedef interface IWMWriterAdvanced IWMWriterAdvanced;
#endif 	/* __IWMWriterAdvanced_FWD_DEFINED__ */


#ifndef __IWMWriterAdvanced2_FWD_DEFINED__
#define __IWMWriterAdvanced2_FWD_DEFINED__
typedef interface IWMWriterAdvanced2 IWMWriterAdvanced2;
#endif 	/* __IWMWriterAdvanced2_FWD_DEFINED__ */


#ifndef __IWMWriterAdvanced3_FWD_DEFINED__
#define __IWMWriterAdvanced3_FWD_DEFINED__
typedef interface IWMWriterAdvanced3 IWMWriterAdvanced3;
#endif 	/* __IWMWriterAdvanced3_FWD_DEFINED__ */


#ifndef __IWMWriterPreprocess_FWD_DEFINED__
#define __IWMWriterPreprocess_FWD_DEFINED__
typedef interface IWMWriterPreprocess IWMWriterPreprocess;
#endif 	/* __IWMWriterPreprocess_FWD_DEFINED__ */


#ifndef __IWMWriterPostViewCallback_FWD_DEFINED__
#define __IWMWriterPostViewCallback_FWD_DEFINED__
typedef interface IWMWriterPostViewCallback IWMWriterPostViewCallback;
#endif 	/* __IWMWriterPostViewCallback_FWD_DEFINED__ */


#ifndef __IWMWriterPostView_FWD_DEFINED__
#define __IWMWriterPostView_FWD_DEFINED__
typedef interface IWMWriterPostView IWMWriterPostView;
#endif 	/* __IWMWriterPostView_FWD_DEFINED__ */


#ifndef __IWMWriterSink_FWD_DEFINED__
#define __IWMWriterSink_FWD_DEFINED__
typedef interface IWMWriterSink IWMWriterSink;
#endif 	/* __IWMWriterSink_FWD_DEFINED__ */


#ifndef __IWMRegisterCallback_FWD_DEFINED__
#define __IWMRegisterCallback_FWD_DEFINED__
typedef interface IWMRegisterCallback IWMRegisterCallback;
#endif 	/* __IWMRegisterCallback_FWD_DEFINED__ */


#ifndef __IWMWriterFileSink_FWD_DEFINED__
#define __IWMWriterFileSink_FWD_DEFINED__
typedef interface IWMWriterFileSink IWMWriterFileSink;
#endif 	/* __IWMWriterFileSink_FWD_DEFINED__ */


#ifndef __IWMWriterFileSink2_FWD_DEFINED__
#define __IWMWriterFileSink2_FWD_DEFINED__
typedef interface IWMWriterFileSink2 IWMWriterFileSink2;
#endif 	/* __IWMWriterFileSink2_FWD_DEFINED__ */


#ifndef __IWMWriterFileSink3_FWD_DEFINED__
#define __IWMWriterFileSink3_FWD_DEFINED__
typedef interface IWMWriterFileSink3 IWMWriterFileSink3;
#endif 	/* __IWMWriterFileSink3_FWD_DEFINED__ */


#ifndef __IWMWriterNetworkSink_FWD_DEFINED__
#define __IWMWriterNetworkSink_FWD_DEFINED__
typedef interface IWMWriterNetworkSink IWMWriterNetworkSink;
#endif 	/* __IWMWriterNetworkSink_FWD_DEFINED__ */


#ifndef __IWMClientConnections_FWD_DEFINED__
#define __IWMClientConnections_FWD_DEFINED__
typedef interface IWMClientConnections IWMClientConnections;
#endif 	/* __IWMClientConnections_FWD_DEFINED__ */


#ifndef __IWMClientConnections2_FWD_DEFINED__
#define __IWMClientConnections2_FWD_DEFINED__
typedef interface IWMClientConnections2 IWMClientConnections2;
#endif 	/* __IWMClientConnections2_FWD_DEFINED__ */


#ifndef __IWMReaderAdvanced_FWD_DEFINED__
#define __IWMReaderAdvanced_FWD_DEFINED__
typedef interface IWMReaderAdvanced IWMReaderAdvanced;
#endif 	/* __IWMReaderAdvanced_FWD_DEFINED__ */


#ifndef __IWMReaderAdvanced2_FWD_DEFINED__
#define __IWMReaderAdvanced2_FWD_DEFINED__
typedef interface IWMReaderAdvanced2 IWMReaderAdvanced2;
#endif 	/* __IWMReaderAdvanced2_FWD_DEFINED__ */


#ifndef __IWMReaderAdvanced3_FWD_DEFINED__
#define __IWMReaderAdvanced3_FWD_DEFINED__
typedef interface IWMReaderAdvanced3 IWMReaderAdvanced3;
#endif 	/* __IWMReaderAdvanced3_FWD_DEFINED__ */


#ifndef __IWMReaderAdvanced4_FWD_DEFINED__
#define __IWMReaderAdvanced4_FWD_DEFINED__
typedef interface IWMReaderAdvanced4 IWMReaderAdvanced4;
#endif 	/* __IWMReaderAdvanced4_FWD_DEFINED__ */


#ifndef __IWMReaderAdvanced5_FWD_DEFINED__
#define __IWMReaderAdvanced5_FWD_DEFINED__
typedef interface IWMReaderAdvanced5 IWMReaderAdvanced5;
#endif 	/* __IWMReaderAdvanced5_FWD_DEFINED__ */


#ifndef __IWMReaderAdvanced6_FWD_DEFINED__
#define __IWMReaderAdvanced6_FWD_DEFINED__
typedef interface IWMReaderAdvanced6 IWMReaderAdvanced6;
#endif 	/* __IWMReaderAdvanced6_FWD_DEFINED__ */


#ifndef __IWMPlayerHook_FWD_DEFINED__
#define __IWMPlayerHook_FWD_DEFINED__
typedef interface IWMPlayerHook IWMPlayerHook;
#endif 	/* __IWMPlayerHook_FWD_DEFINED__ */


#ifndef __IWMReaderAllocatorEx_FWD_DEFINED__
#define __IWMReaderAllocatorEx_FWD_DEFINED__
typedef interface IWMReaderAllocatorEx IWMReaderAllocatorEx;
#endif 	/* __IWMReaderAllocatorEx_FWD_DEFINED__ */


#ifndef __IWMReaderTypeNegotiation_FWD_DEFINED__
#define __IWMReaderTypeNegotiation_FWD_DEFINED__
typedef interface IWMReaderTypeNegotiation IWMReaderTypeNegotiation;
#endif 	/* __IWMReaderTypeNegotiation_FWD_DEFINED__ */


#ifndef __IWMReaderCallbackAdvanced_FWD_DEFINED__
#define __IWMReaderCallbackAdvanced_FWD_DEFINED__
typedef interface IWMReaderCallbackAdvanced IWMReaderCallbackAdvanced;
#endif 	/* __IWMReaderCallbackAdvanced_FWD_DEFINED__ */


#ifndef __IWMDRMReader_FWD_DEFINED__
#define __IWMDRMReader_FWD_DEFINED__
typedef interface IWMDRMReader IWMDRMReader;
#endif 	/* __IWMDRMReader_FWD_DEFINED__ */


#ifndef __IWMDRMReader2_FWD_DEFINED__
#define __IWMDRMReader2_FWD_DEFINED__
typedef interface IWMDRMReader2 IWMDRMReader2;
#endif 	/* __IWMDRMReader2_FWD_DEFINED__ */


#ifndef __IWMDRMReader3_FWD_DEFINED__
#define __IWMDRMReader3_FWD_DEFINED__
typedef interface IWMDRMReader3 IWMDRMReader3;
#endif 	/* __IWMDRMReader3_FWD_DEFINED__ */


#ifndef __IWMReaderPlaylistBurn_FWD_DEFINED__
#define __IWMReaderPlaylistBurn_FWD_DEFINED__
typedef interface IWMReaderPlaylistBurn IWMReaderPlaylistBurn;
#endif 	/* __IWMReaderPlaylistBurn_FWD_DEFINED__ */


#ifndef __IWMReaderNetworkConfig_FWD_DEFINED__
#define __IWMReaderNetworkConfig_FWD_DEFINED__
typedef interface IWMReaderNetworkConfig IWMReaderNetworkConfig;
#endif 	/* __IWMReaderNetworkConfig_FWD_DEFINED__ */


#ifndef __IWMReaderNetworkConfig2_FWD_DEFINED__
#define __IWMReaderNetworkConfig2_FWD_DEFINED__
typedef interface IWMReaderNetworkConfig2 IWMReaderNetworkConfig2;
#endif 	/* __IWMReaderNetworkConfig2_FWD_DEFINED__ */


#ifndef __IWMReaderStreamClock_FWD_DEFINED__
#define __IWMReaderStreamClock_FWD_DEFINED__
typedef interface IWMReaderStreamClock IWMReaderStreamClock;
#endif 	/* __IWMReaderStreamClock_FWD_DEFINED__ */


#ifndef __IWMIndexer_FWD_DEFINED__
#define __IWMIndexer_FWD_DEFINED__
typedef interface IWMIndexer IWMIndexer;
#endif 	/* __IWMIndexer_FWD_DEFINED__ */


#ifndef __IWMIndexer2_FWD_DEFINED__
#define __IWMIndexer2_FWD_DEFINED__
typedef interface IWMIndexer2 IWMIndexer2;
#endif 	/* __IWMIndexer2_FWD_DEFINED__ */


#ifndef __IWMLicenseBackup_FWD_DEFINED__
#define __IWMLicenseBackup_FWD_DEFINED__
typedef interface IWMLicenseBackup IWMLicenseBackup;
#endif 	/* __IWMLicenseBackup_FWD_DEFINED__ */


#ifndef __IWMLicenseRestore_FWD_DEFINED__
#define __IWMLicenseRestore_FWD_DEFINED__
typedef interface IWMLicenseRestore IWMLicenseRestore;
#endif 	/* __IWMLicenseRestore_FWD_DEFINED__ */


#ifndef __IWMBackupRestoreProps_FWD_DEFINED__
#define __IWMBackupRestoreProps_FWD_DEFINED__
typedef interface IWMBackupRestoreProps IWMBackupRestoreProps;
#endif 	/* __IWMBackupRestoreProps_FWD_DEFINED__ */


#ifndef __IWMCodecInfo_FWD_DEFINED__
#define __IWMCodecInfo_FWD_DEFINED__
typedef interface IWMCodecInfo IWMCodecInfo;
#endif 	/* __IWMCodecInfo_FWD_DEFINED__ */


#ifndef __IWMCodecInfo2_FWD_DEFINED__
#define __IWMCodecInfo2_FWD_DEFINED__
typedef interface IWMCodecInfo2 IWMCodecInfo2;
#endif 	/* __IWMCodecInfo2_FWD_DEFINED__ */


#ifndef __IWMCodecInfo3_FWD_DEFINED__
#define __IWMCodecInfo3_FWD_DEFINED__
typedef interface IWMCodecInfo3 IWMCodecInfo3;
#endif 	/* __IWMCodecInfo3_FWD_DEFINED__ */


#ifndef __IWMLanguageList_FWD_DEFINED__
#define __IWMLanguageList_FWD_DEFINED__
typedef interface IWMLanguageList IWMLanguageList;
#endif 	/* __IWMLanguageList_FWD_DEFINED__ */


#ifndef __IWMWriterPushSink_FWD_DEFINED__
#define __IWMWriterPushSink_FWD_DEFINED__
typedef interface IWMWriterPushSink IWMWriterPushSink;
#endif 	/* __IWMWriterPushSink_FWD_DEFINED__ */


#ifndef __IWMDeviceRegistration_FWD_DEFINED__
#define __IWMDeviceRegistration_FWD_DEFINED__
typedef interface IWMDeviceRegistration IWMDeviceRegistration;
#endif 	/* __IWMDeviceRegistration_FWD_DEFINED__ */


#ifndef __IWMRegisteredDevice_FWD_DEFINED__
#define __IWMRegisteredDevice_FWD_DEFINED__
typedef interface IWMRegisteredDevice IWMRegisteredDevice;
#endif 	/* __IWMRegisteredDevice_FWD_DEFINED__ */


#ifndef __IWMProximityDetection_FWD_DEFINED__
#define __IWMProximityDetection_FWD_DEFINED__
typedef interface IWMProximityDetection IWMProximityDetection;
#endif 	/* __IWMProximityDetection_FWD_DEFINED__ */


#ifndef __IWMDRMMessageParser_FWD_DEFINED__
#define __IWMDRMMessageParser_FWD_DEFINED__
typedef interface IWMDRMMessageParser IWMDRMMessageParser;
#endif 	/* __IWMDRMMessageParser_FWD_DEFINED__ */


#ifndef __IWMDRMTranscryptor_FWD_DEFINED__
#define __IWMDRMTranscryptor_FWD_DEFINED__
typedef interface IWMDRMTranscryptor IWMDRMTranscryptor;
#endif 	/* __IWMDRMTranscryptor_FWD_DEFINED__ */


#ifndef __IWMDRMTranscryptor2_FWD_DEFINED__
#define __IWMDRMTranscryptor2_FWD_DEFINED__
typedef interface IWMDRMTranscryptor2 IWMDRMTranscryptor2;
#endif 	/* __IWMDRMTranscryptor2_FWD_DEFINED__ */


#ifndef __IWMDRMTranscryptionManager_FWD_DEFINED__
#define __IWMDRMTranscryptionManager_FWD_DEFINED__
typedef interface IWMDRMTranscryptionManager IWMDRMTranscryptionManager;
#endif 	/* __IWMDRMTranscryptionManager_FWD_DEFINED__ */


#ifndef __IWMWatermarkInfo_FWD_DEFINED__
#define __IWMWatermarkInfo_FWD_DEFINED__
typedef interface IWMWatermarkInfo IWMWatermarkInfo;
#endif 	/* __IWMWatermarkInfo_FWD_DEFINED__ */


#ifndef __IWMReaderAccelerator_FWD_DEFINED__
#define __IWMReaderAccelerator_FWD_DEFINED__
typedef interface IWMReaderAccelerator IWMReaderAccelerator;
#endif 	/* __IWMReaderAccelerator_FWD_DEFINED__ */


#ifndef __IWMReaderTimecode_FWD_DEFINED__
#define __IWMReaderTimecode_FWD_DEFINED__
typedef interface IWMReaderTimecode IWMReaderTimecode;
#endif 	/* __IWMReaderTimecode_FWD_DEFINED__ */


#ifndef __IWMAddressAccess_FWD_DEFINED__
#define __IWMAddressAccess_FWD_DEFINED__
typedef interface IWMAddressAccess IWMAddressAccess;
#endif 	/* __IWMAddressAccess_FWD_DEFINED__ */


#ifndef __IWMAddressAccess2_FWD_DEFINED__
#define __IWMAddressAccess2_FWD_DEFINED__
typedef interface IWMAddressAccess2 IWMAddressAccess2;
#endif 	/* __IWMAddressAccess2_FWD_DEFINED__ */


#ifndef __IWMImageInfo_FWD_DEFINED__
#define __IWMImageInfo_FWD_DEFINED__
typedef interface IWMImageInfo IWMImageInfo;
#endif 	/* __IWMImageInfo_FWD_DEFINED__ */


#ifndef __IWMLicenseRevocationAgent_FWD_DEFINED__
#define __IWMLicenseRevocationAgent_FWD_DEFINED__
typedef interface IWMLicenseRevocationAgent IWMLicenseRevocationAgent;
#endif 	/* __IWMLicenseRevocationAgent_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "wmsbuffer.h"
#include "drmexternals.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsdkidl_0000_0000 */
/* [local] */ 

//=========================================================================
//
// Microsoft Windows Media Technologies
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//=========================================================================
typedef unsigned __int64 QWORD;

































































////////////////////////////////////////////////////////////////
//
// These are the special case attributes that give information 
// about the Windows Media file.
//
static const DWORD g_dwWMSpecialAttributes = 20;
static const WCHAR g_wszWMDuration[] =L"Duration";
static const WCHAR g_wszWMBitrate[] =L"Bitrate";
static const WCHAR g_wszWMSeekable[] =L"Seekable";
static const WCHAR g_wszWMStridable[] =L"Stridable";
static const WCHAR g_wszWMBroadcast[] =L"Broadcast";
static const WCHAR g_wszWMProtected[] =L"Is_Protected";
static const WCHAR g_wszWMTrusted[] =L"Is_Trusted";
static const WCHAR g_wszWMSignature_Name[] =L"Signature_Name";
static const WCHAR g_wszWMHasAudio[] =L"HasAudio";
static const WCHAR g_wszWMHasImage[] =L"HasImage";
static const WCHAR g_wszWMHasScript[] =L"HasScript";
static const WCHAR g_wszWMHasVideo[] =L"HasVideo";
static const WCHAR g_wszWMCurrentBitrate[] =L"CurrentBitrate";
static const WCHAR g_wszWMOptimalBitrate[] =L"OptimalBitrate";
static const WCHAR g_wszWMHasAttachedImages[] =L"HasAttachedImages";
static const WCHAR g_wszWMSkipBackward[] =L"Can_Skip_Backward";
static const WCHAR g_wszWMSkipForward[] =L"Can_Skip_Forward";
static const WCHAR g_wszWMNumberOfFrames[] =L"NumberOfFrames";
static const WCHAR g_wszWMFileSize[] =L"FileSize";
static const WCHAR g_wszWMHasArbitraryDataStream[] =L"HasArbitraryDataStream";
static const WCHAR g_wszWMHasFileTransferStream[] =L"HasFileTransferStream";
static const WCHAR g_wszWMContainerFormat[] =L"WM/ContainerFormat";

////////////////////////////////////////////////////////////////
//
// The content description object supports 5 basic attributes.
//
static const DWORD g_dwWMContentAttributes = 5;
static const WCHAR g_wszWMTitle[] =L"Title";
static const WCHAR g_wszWMAuthor[] =L"Author";
static const WCHAR g_wszWMDescription[] =L"Description";
static const WCHAR g_wszWMRating[] =L"Rating";
static const WCHAR g_wszWMCopyright[] =L"Copyright";

////////////////////////////////////////////////////////////////
//
// These attributes are used to configure and query DRM settings in the reader and writer.
//
static const WCHAR g_wszWMUse_DRM[] = L"Use_DRM";
static const WCHAR g_wszWMDRM_Flags[] = L"DRM_Flags";
static const WCHAR g_wszWMDRM_Level[] = L"DRM_Level";
static const WCHAR g_wszWMUse_Advanced_DRM[] = L"Use_Advanced_DRM";
static const WCHAR g_wszWMDRM_KeySeed[] = L"DRM_KeySeed";
static const WCHAR g_wszWMDRM_KeyID[] = L"DRM_KeyID";
static const WCHAR g_wszWMDRM_ContentID[] = L"DRM_ContentID";
static const WCHAR g_wszWMDRM_SourceID[] = L"DRM_SourceID";
static const WCHAR g_wszWMDRM_IndividualizedVersion[] = L"DRM_IndividualizedVersion";
static const WCHAR g_wszWMDRM_LicenseAcqURL[] = L"DRM_LicenseAcqURL";
static const WCHAR g_wszWMDRM_V1LicenseAcqURL[] = L"DRM_V1LicenseAcqURL";
static const WCHAR g_wszWMDRM_HeaderSignPrivKey[] = L"DRM_HeaderSignPrivKey";
static const WCHAR g_wszWMDRM_LASignaturePrivKey[] = L"DRM_LASignaturePrivKey";
static const WCHAR g_wszWMDRM_LASignatureCert[] = L"DRM_LASignatureCert";
static const WCHAR g_wszWMDRM_LASignatureLicSrvCert[] = L"DRM_LASignatureLicSrvCert";
static const WCHAR g_wszWMDRM_LASignatureRootCert[] = L"DRM_LASignatureRootCert";

////////////////////////////////////////////////////////////////
//
// These are the additional attributes defined in the WM attribute
// namespace that give information about the content.
//
static const WCHAR g_wszWMAlbumTitle[] =L"WM/AlbumTitle";
static const WCHAR g_wszWMTrack[] =L"WM/Track";
static const WCHAR g_wszWMPromotionURL[] =L"WM/PromotionURL";
static const WCHAR g_wszWMAlbumCoverURL[] =L"WM/AlbumCoverURL";
static const WCHAR g_wszWMGenre[] =L"WM/Genre";
static const WCHAR g_wszWMYear[] =L"WM/Year";
static const WCHAR g_wszWMGenreID[] =L"WM/GenreID";
static const WCHAR g_wszWMMCDI[] =L"WM/MCDI";
static const WCHAR g_wszWMComposer[] =L"WM/Composer";
static const WCHAR g_wszWMLyrics[] =L"WM/Lyrics";
static const WCHAR g_wszWMTrackNumber[] =L"WM/TrackNumber";
static const WCHAR g_wszWMToolName[] =L"WM/ToolName";
static const WCHAR g_wszWMToolVersion[] =L"WM/ToolVersion";
static const WCHAR g_wszWMIsVBR[] =L"IsVBR";
static const WCHAR g_wszWMAlbumArtist[] =L"WM/AlbumArtist";

////////////////////////////////////////////////////////////////
//
// These optional attributes may be used to give information 
// about the branding of the content.
//
static const WCHAR g_wszWMBannerImageType[] =L"BannerImageType";
static const WCHAR g_wszWMBannerImageData[] =L"BannerImageData";
static const WCHAR g_wszWMBannerImageURL[] =L"BannerImageURL";
static const WCHAR g_wszWMCopyrightURL[] =L"CopyrightURL";
////////////////////////////////////////////////////////////////
//
// Optional attributes, used to give information 
// about video stream properties.
//
static const WCHAR g_wszWMAspectRatioX[] =L"AspectRatioX";
static const WCHAR g_wszWMAspectRatioY[] =L"AspectRatioY";
////////////////////////////////////////////////////////////////
//
// Optional attributes, used to give information 
// about the overall streaming properties of VBR files.
// This attribute takes the format:
//  WORD wReserved (must be 0)
//  WM_LEAKY_BUCKET_PAIR pair1
//  WM_LEAKY_BUCKET_PAIR pair2
//  ...
//
static const WCHAR g_wszASFLeakyBucketPairs[] =L"ASFLeakyBucketPairs";
////////////////////////////////////////////////////////////////
//
// The NSC file supports the following attributes.
//
static const DWORD g_dwWMNSCAttributes = 5;
static const WCHAR g_wszWMNSCName[] =L"NSC_Name";
static const WCHAR g_wszWMNSCAddress[] =L"NSC_Address";
static const WCHAR g_wszWMNSCPhone[] =L"NSC_Phone";
static const WCHAR g_wszWMNSCEmail[] =L"NSC_Email";
static const WCHAR g_wszWMNSCDescription[] =L"NSC_Description";

////////////////////////////////////////////////////////////////
//
// Attributes introduced in V9
//
static const WCHAR g_wszWMWriter[] =L"WM/Writer";
static const WCHAR g_wszWMConductor[] =L"WM/Conductor";
static const WCHAR g_wszWMProducer[] =L"WM/Producer";
static const WCHAR g_wszWMDirector[] =L"WM/Director";
static const WCHAR g_wszWMContentGroupDescription[] =L"WM/ContentGroupDescription";
static const WCHAR g_wszWMSubTitle[] =L"WM/SubTitle";
static const WCHAR g_wszWMPartOfSet[] =L"WM/PartOfSet";
static const WCHAR g_wszWMProtectionType[] =L"WM/ProtectionType";
static const WCHAR g_wszWMVideoHeight[] =L"WM/VideoHeight";
static const WCHAR g_wszWMVideoWidth[] =L"WM/VideoWidth";
static const WCHAR g_wszWMVideoFrameRate[] =L"WM/VideoFrameRate";
static const WCHAR g_wszWMMediaClassPrimaryID[] =L"WM/MediaClassPrimaryID";
static const WCHAR g_wszWMMediaClassSecondaryID[] =L"WM/MediaClassSecondaryID";
static const WCHAR g_wszWMPeriod[] = L"WM/Period";
static const WCHAR g_wszWMCategory[] = L"WM/Category";
static const WCHAR g_wszWMPicture[] =L"WM/Picture";
static const WCHAR g_wszWMLyrics_Synchronised[] =L"WM/Lyrics_Synchronised";
static const WCHAR g_wszWMOriginalLyricist[] =L"WM/OriginalLyricist";
static const WCHAR g_wszWMOriginalArtist[] =L"WM/OriginalArtist";
static const WCHAR g_wszWMOriginalAlbumTitle[] =L"WM/OriginalAlbumTitle";
static const WCHAR g_wszWMOriginalReleaseYear[] =L"WM/OriginalReleaseYear";
static const WCHAR g_wszWMOriginalFilename[] =L"WM/OriginalFilename";
static const WCHAR g_wszWMPublisher[] =L"WM/Publisher";
static const WCHAR g_wszWMEncodedBy[] =L"WM/EncodedBy";
static const WCHAR g_wszWMEncodingSettings[] =L"WM/EncodingSettings";
static const WCHAR g_wszWMEncodingTime[] =L"WM/EncodingTime";
static const WCHAR g_wszWMAuthorURL[] =L"WM/AuthorURL";
static const WCHAR g_wszWMUserWebURL[] =L"WM/UserWebURL";
static const WCHAR g_wszWMAudioFileURL[] =L"WM/AudioFileURL";
static const WCHAR g_wszWMAudioSourceURL[] =L"WM/AudioSourceURL";
static const WCHAR g_wszWMLanguage[] =L"WM/Language";
static const WCHAR g_wszWMParentalRating[] =L"WM/ParentalRating";
static const WCHAR g_wszWMBeatsPerMinute[] =L"WM/BeatsPerMinute";
static const WCHAR g_wszWMInitialKey[] =L"WM/InitialKey";
static const WCHAR g_wszWMMood[] =L"WM/Mood";
static const WCHAR g_wszWMText[] =L"WM/Text";
static const WCHAR g_wszWMDVDID[] =L"WM/DVDID";
static const WCHAR g_wszWMWMContentID[] =L"WM/WMContentID";
static const WCHAR g_wszWMWMCollectionID[] =L"WM/WMCollectionID";
static const WCHAR g_wszWMWMCollectionGroupID[] =L"WM/WMCollectionGroupID";
static const WCHAR g_wszWMUniqueFileIdentifier[] =L"WM/UniqueFileIdentifier";
static const WCHAR g_wszWMModifiedBy[] =L"WM/ModifiedBy";
static const WCHAR g_wszWMRadioStationName[] =L"WM/RadioStationName";
static const WCHAR g_wszWMRadioStationOwner[] =L"WM/RadioStationOwner";
static const WCHAR g_wszWMPlaylistDelay[] =L"WM/PlaylistDelay";
static const WCHAR g_wszWMCodec[] =L"WM/Codec";
static const WCHAR g_wszWMDRM[] =L"WM/DRM";
static const WCHAR g_wszWMISRC[] =L"WM/ISRC";
static const WCHAR g_wszWMProvider[] =L"WM/Provider";
static const WCHAR g_wszWMProviderRating[] =L"WM/ProviderRating";
static const WCHAR g_wszWMProviderStyle[] =L"WM/ProviderStyle";
static const WCHAR g_wszWMContentDistributor[] =L"WM/ContentDistributor";
static const WCHAR g_wszWMSubscriptionContentID[] =L"WM/SubscriptionContentID";
static const WCHAR g_wszWMWMADRCPeakReference[] =L"WM/WMADRCPeakReference";
static const WCHAR g_wszWMWMADRCPeakTarget[] =L"WM/WMADRCPeakTarget";
static const WCHAR g_wszWMWMADRCAverageReference[] =L"WM/WMADRCAverageReference";
static const WCHAR g_wszWMWMADRCAverageTarget[] =L"WM/WMADRCAverageTarget";
////////////////////////////////////////////////////////////////
//
// Attributes introduced in V10
//
static const WCHAR g_wszWMStreamTypeInfo[] = L"WM/StreamTypeInfo";
static const WCHAR g_wszWMPeakBitrate[] = L"WM/PeakBitrate";
static const WCHAR g_wszWMASFPacketCount[] = L"WM/ASFPacketCount";
static const WCHAR g_wszWMASFSecurityObjectsSize[] = L"WM/ASFSecurityObjectsSize";
static const WCHAR g_wszWMSharedUserRating[] = L"WM/SharedUserRating";
static const WCHAR g_wszWMSubTitleDescription[] = L"WM/SubTitleDescription";
static const WCHAR g_wszWMMediaCredits[] = L"WM/MediaCredits";
static const WCHAR g_wszWMParentalRatingReason[] = L"WM/ParentalRatingReason";
static const WCHAR g_wszWMOriginalReleaseTime[] = L"WM/OriginalReleaseTime";
static const WCHAR g_wszWMMediaStationCallSign[] = L"WM/MediaStationCallSign";
static const WCHAR g_wszWMMediaStationName[] = L"WM/MediaStationName";
static const WCHAR g_wszWMMediaNetworkAffiliation[] = L"WM/MediaNetworkAffiliation";
static const WCHAR g_wszWMMediaOriginalChannel[] = L"WM/MediaOriginalChannel";
static const WCHAR g_wszWMMediaOriginalBroadcastDateTime[] = L"WM/MediaOriginalBroadcastDateTime";
static const WCHAR g_wszWMMediaIsStereo[] = L"WM/MediaIsStereo";
static const WCHAR g_wszWMVideoClosedCaptioning[] = L"WM/VideoClosedCaptioning";
static const WCHAR g_wszWMMediaIsRepeat[] = L"WM/MediaIsRepeat";
static const WCHAR g_wszWMMediaIsLive[] = L"WM/MediaIsLive";
static const WCHAR g_wszWMMediaIsTape[] = L"WM/MediaIsTape";
static const WCHAR g_wszWMMediaIsDelay[] = L"WM/MediaIsDelay";
static const WCHAR g_wszWMMediaIsSubtitled[] = L"WM/MediaIsSubtitled";
static const WCHAR g_wszWMMediaIsPremiere[] = L"WM/MediaIsPremiere";
static const WCHAR g_wszWMMediaIsFinale[] = L"WM/MediaIsFinale";
static const WCHAR g_wszWMMediaIsSAP[] = L"WM/MediaIsSAP";
static const WCHAR g_wszWMProviderCopyright[] = L"WM/ProviderCopyright";
////////////////////////////////////////////////////////////////
//
// Attributes introduced in V11
//
static const WCHAR g_wszWMISAN[] = L"WM/ISAN";
static const WCHAR g_wszWMADID[] = L"WM/ADID";
static const WCHAR g_wszWMWMShadowFileSourceFileType[] = L"WM/WMShadowFileSourceFileType";
static const WCHAR g_wszWMWMShadowFileSourceDRMType[] = L"WM/WMShadowFileSourceDRMType";
static const WCHAR g_wszWMWMCPDistributor[] =L"WM/WMCPDistributor";
static const WCHAR g_wszWMWMCPDistributorID[] =L"WM/WMCPDistributorID";
////////////////////////////////////////////////////////////////
//
// These are setting names for use in Get/SetOutputSetting
//
static const WCHAR g_wszEarlyDataDelivery[] =L"EarlyDataDelivery";
static const WCHAR g_wszJustInTimeDecode[] =L"JustInTimeDecode";
static const WCHAR g_wszSingleOutputBuffer[] =L"SingleOutputBuffer";
static const WCHAR g_wszSoftwareScaling[] =L"SoftwareScaling";
static const WCHAR g_wszDeliverOnReceive[] =L"DeliverOnReceive";
static const WCHAR g_wszScrambledAudio[] =L"ScrambledAudio";
static const WCHAR g_wszDedicatedDeliveryThread[] =L"DedicatedDeliveryThread";
static const WCHAR g_wszEnableDiscreteOutput[] = L"EnableDiscreteOutput";
static const WCHAR g_wszSpeakerConfig[] = L"SpeakerConfig";
static const WCHAR g_wszDynamicRangeControl[] = L"DynamicRangeControl";
static const WCHAR g_wszAllowInterlacedOutput[] = L"AllowInterlacedOutput";
static const WCHAR g_wszVideoSampleDurations[] =L"VideoSampleDurations";
static const WCHAR g_wszStreamLanguage[] =L"StreamLanguage";
static const WCHAR g_wszEnableWMAProSPDIFOutput[] = L"EnableWMAProSPDIFOutput";

////////////////////////////////////////////////////////////////
//
// These are setting names for use in Get/SetInputSetting
//
static const WCHAR g_wszDeinterlaceMode[] =L"DeinterlaceMode";
static const WCHAR g_wszInitialPatternForInverseTelecine[] =L"InitialPatternForInverseTelecine";
static const WCHAR g_wszJPEGCompressionQuality[] =L"JPEGCompressionQuality";
static const WCHAR g_wszWatermarkCLSID[] =L"WatermarkCLSID";
static const WCHAR g_wszWatermarkConfig[] =L"WatermarkConfig";
static const WCHAR g_wszInterlacedCoding[] =L"InterlacedCoding";
static const WCHAR g_wszFixedFrameRate[] =L"FixedFrameRate";

////////////////////////////////////////////////////////////////
//
// All known IWMPropertyVault property names
//
// g_wszOriginalSourceFormatTag is obsolete and has been superceded by g_wszOriginalWaveFormat
static const WCHAR g_wszOriginalSourceFormatTag[] =L"_SOURCEFORMATTAG";
static const WCHAR g_wszOriginalWaveFormat[] =L"_ORIGINALWAVEFORMAT";
static const WCHAR g_wszEDL[] =L"_EDL";
static const WCHAR g_wszComplexity[] =L"_COMPLEXITYEX";
static const WCHAR g_wszDecoderComplexityRequested[] =L"_DECODERCOMPLEXITYPROFILE";

////////////////////////////////////////////////////////////////
//
// All known IWMIStreamProps property names
//
static const WCHAR g_wszReloadIndexOnSeek[] =L"ReloadIndexOnSeek";
static const WCHAR g_wszStreamNumIndexObjects[] =L"StreamNumIndexObjects";
static const WCHAR g_wszFailSeekOnError[] =L"FailSeekOnError";
static const WCHAR g_wszPermitSeeksBeyondEndOfStream[] =L"PermitSeeksBeyondEndOfStream";
static const WCHAR g_wszUsePacketAtSeekPoint[] =L"UsePacketAtSeekPoint";
static const WCHAR g_wszSourceBufferTime[] =L"SourceBufferTime";
static const WCHAR g_wszSourceMaxBytesAtOnce[] =L"SourceMaxBytesAtOnce";

////////////////////////////////////////////////////////////////
//
// VBR encoding settings
//
static const WCHAR g_wszVBREnabled[] =L"_VBRENABLED";
static const WCHAR g_wszVBRQuality[] =L"_VBRQUALITY";
static const WCHAR g_wszVBRBitrateMax[] =L"_RMAX";
static const WCHAR g_wszVBRBufferWindowMax[] =L"_BMAX";

////////////////////////////////////////////////////////////////
//
// VBR Video settings
//
static const WCHAR g_wszVBRPeak[] = L"VBR Peak";
static const WCHAR g_wszBufferAverage[] = L"Buffer Average";

////////////////////////////////////////////////////////////////
//
// Codec encoding complexity settings
//
// g_wszComplexity should be used to set desired encoding complexity on the
// stream's IWMPropertyVault (see above for definition) 
// The below settings can be queried from IWMCodecInfo3::GetCodecProp()
//
static const WCHAR g_wszComplexityMax[] =L"_COMPLEXITYEXMAX";
static const WCHAR g_wszComplexityOffline[] =L"_COMPLEXITYEXOFFLINE";
static const WCHAR g_wszComplexityLive[] =L"_COMPLEXITYEXLIVE";
static const WCHAR g_wszIsVBRSupported[] =L"_ISVBRSUPPORTED";
////////////////////////////////////////////////////////////////
//
// Codec enumeration settings
//
// g_wszVBREnabled can be used as a codec enumeration setting (see above for definition)
static const WCHAR g_wszNumPasses[] = L"_PASSESUSED";

////////////////////////////////////////////////////////////////
//
// These are WMA Voice V9 attribute names and values
//
static const WCHAR g_wszMusicSpeechClassMode[] = L"MusicSpeechClassMode";
static const WCHAR g_wszMusicClassMode[] = L"MusicClassMode";
static const WCHAR g_wszSpeechClassMode[] = L"SpeechClassMode";
static const WCHAR g_wszMixedClassMode[] = L"MixedClassMode";

////////////////////////////////////////////////////////////////
//
// The WMA Voice V9 supports the following format property.
//
static const WCHAR g_wszSpeechCaps[] = L"SpeechFormatCap";

////////////////////////////////////////////////////////////////
//
// Multi-channel WMA properties
//
static const WCHAR g_wszPeakValue[] = L"PeakValue";
static const WCHAR g_wszAverageLevel[] = L"AverageLevel";
static const WCHAR g_wszFold6To2Channels3[] = L"Fold6To2Channels3";
static const WCHAR g_wszFoldToChannelsTemplate[] = L"Fold%luTo%luChannels%lu";

////////////////////////////////////////////////////////////////
//
// Complexity profile description strings
//
static const WCHAR g_wszDeviceConformanceTemplate[] = L"DeviceConformanceTemplate";

////////////////////////////////////////////////////////////////
//
// Frame interpolation on video decode
//
static const WCHAR g_wszEnableFrameInterpolation[] =L"EnableFrameInterpolation";

////////////////////////////////////////////////////////////////
//
// Needs previous sample for Delta frame on video decode
//
static const WCHAR g_wszNeedsPreviousSample[] =L"NeedsPreviousSample";

////////////////////////////////////////////////////////////////
//
// Flags that can be passed into the Start method of IWMReader
//
#define WM_START_CURRENTPOSITION     ( ( QWORD )-1 )

#define WM_BACKUP_OVERWRITE    ((DWORD) 0x00000001)
#define WM_RESTORE_INDIVIDUALIZE    ((DWORD) 0x00000002)
#define WAVE_FORMAT_DRM            0x0009
typedef LPCWSTR LPCWSTR_WMSDK_TYPE_SAFE;

#ifdef WMSDK_TYPE_SAFE
#define LPCWSTR_WMSDK_TYPE_SAFE LPCWSTR
#else
#define LPCWSTR_WMSDK_TYPE_SAFE LPWSTR
#endif

enum __MIDL___MIDL_itf_wmsdkidl_0000_0000_0001
    {	WEBSTREAM_SAMPLE_TYPE_FILE	= 0x1,
	WEBSTREAM_SAMPLE_TYPE_RENDER	= 0x2
    } ;

enum __MIDL___MIDL_itf_wmsdkidl_0000_0000_0002
    {	WM_SF_CLEANPOINT	= 0x1,
	WM_SF_DISCONTINUITY	= 0x2,
	WM_SF_DATALOSS	= 0x4
    } ;

enum __MIDL___MIDL_itf_wmsdkidl_0000_0000_0003
    {	WM_SFEX_NOTASYNCPOINT	= 0x2,
	WM_SFEX_DATALOSS	= 0x4
    } ;
typedef 
enum WMT_STATUS
    {	WMT_ERROR	= 0,
	WMT_OPENED	= 1,
	WMT_BUFFERING_START	= 2,
	WMT_BUFFERING_STOP	= 3,
	WMT_EOF	= 4,
	WMT_END_OF_FILE	= 4,
	WMT_END_OF_SEGMENT	= 5,
	WMT_END_OF_STREAMING	= 6,
	WMT_LOCATING	= 7,
	WMT_CONNECTING	= 8,
	WMT_NO_RIGHTS	= 9,
	WMT_MISSING_CODEC	= 10,
	WMT_STARTED	= 11,
	WMT_STOPPED	= 12,
	WMT_CLOSED	= 13,
	WMT_STRIDING	= 14,
	WMT_TIMER	= 15,
	WMT_INDEX_PROGRESS	= 16,
	WMT_SAVEAS_START	= 17,
	WMT_SAVEAS_STOP	= 18,
	WMT_NEW_SOURCEFLAGS	= 19,
	WMT_NEW_METADATA	= 20,
	WMT_BACKUPRESTORE_BEGIN	= 21,
	WMT_SOURCE_SWITCH	= 22,
	WMT_ACQUIRE_LICENSE	= 23,
	WMT_INDIVIDUALIZE	= 24,
	WMT_NEEDS_INDIVIDUALIZATION	= 25,
	WMT_NO_RIGHTS_EX	= 26,
	WMT_BACKUPRESTORE_END	= 27,
	WMT_BACKUPRESTORE_CONNECTING	= 28,
	WMT_BACKUPRESTORE_DISCONNECTING	= 29,
	WMT_ERROR_WITHURL	= 30,
	WMT_RESTRICTED_LICENSE	= 31,
	WMT_CLIENT_CONNECT	= 32,
	WMT_CLIENT_DISCONNECT	= 33,
	WMT_NATIVE_OUTPUT_PROPS_CHANGED	= 34,
	WMT_RECONNECT_START	= 35,
	WMT_RECONNECT_END	= 36,
	WMT_CLIENT_CONNECT_EX	= 37,
	WMT_CLIENT_DISCONNECT_EX	= 38,
	WMT_SET_FEC_SPAN	= 39,
	WMT_PREROLL_READY	= 40,
	WMT_PREROLL_COMPLETE	= 41,
	WMT_CLIENT_PROPERTIES	= 42,
	WMT_LICENSEURL_SIGNATURE_STATE	= 43,
	WMT_INIT_PLAYLIST_BURN	= 44,
	WMT_TRANSCRYPTOR_INIT	= 45,
	WMT_TRANSCRYPTOR_SEEKED	= 46,
	WMT_TRANSCRYPTOR_READ	= 47,
	WMT_TRANSCRYPTOR_CLOSED	= 48,
	WMT_PROXIMITY_RESULT	= 49,
	WMT_PROXIMITY_COMPLETED	= 50,
	WMT_CONTENT_ENABLER	= 51
    } 	WMT_STATUS;

typedef 
enum WMT_STREAM_SELECTION
    {	WMT_OFF	= 0,
	WMT_CLEANPOINT_ONLY	= 1,
	WMT_ON	= 2
    } 	WMT_STREAM_SELECTION;

typedef 
enum WMT_IMAGE_TYPE
    {	WMT_IT_NONE	= 0,
	WMT_IT_BITMAP	= 1,
	WMT_IT_JPEG	= 2,
	WMT_IT_GIF	= 3
    } 	WMT_IMAGE_TYPE;

typedef 
enum WMT_ATTR_DATATYPE
    {	WMT_TYPE_DWORD	= 0,
	WMT_TYPE_STRING	= 1,
	WMT_TYPE_BINARY	= 2,
	WMT_TYPE_BOOL	= 3,
	WMT_TYPE_QWORD	= 4,
	WMT_TYPE_WORD	= 5,
	WMT_TYPE_GUID	= 6
    } 	WMT_ATTR_DATATYPE;

typedef 
enum WMT_ATTR_IMAGETYPE
    {	WMT_IMAGETYPE_BITMAP	= 1,
	WMT_IMAGETYPE_JPEG	= 2,
	WMT_IMAGETYPE_GIF	= 3
    } 	WMT_ATTR_IMAGETYPE;

typedef 
enum WMT_VERSION
    {	WMT_VER_4_0	= 0x40000,
	WMT_VER_7_0	= 0x70000,
	WMT_VER_8_0	= 0x80000,
	WMT_VER_9_0	= 0x90000
    } 	WMT_VERSION;

typedef 
enum tagWMT_STORAGE_FORMAT
    {	WMT_Storage_Format_MP3	= 0,
	WMT_Storage_Format_V1	= ( WMT_Storage_Format_MP3 + 1 ) 
    } 	WMT_STORAGE_FORMAT;

typedef 
enum tagWMT_DRMLA_TRUST
    {	WMT_DRMLA_UNTRUSTED	= 0,
	WMT_DRMLA_TRUSTED	= ( WMT_DRMLA_UNTRUSTED + 1 ) ,
	WMT_DRMLA_TAMPERED	= ( WMT_DRMLA_TRUSTED + 1 ) 
    } 	WMT_DRMLA_TRUST;

typedef 
enum tagWMT_TRANSPORT_TYPE
    {	WMT_Transport_Type_Unreliable	= 0,
	WMT_Transport_Type_Reliable	= ( WMT_Transport_Type_Unreliable + 1 ) 
    } 	WMT_TRANSPORT_TYPE;

typedef 
enum WMT_NET_PROTOCOL
    {	WMT_PROTOCOL_HTTP	= 0
    } 	WMT_NET_PROTOCOL;

typedef 
enum WMT_PLAY_MODE
    {	WMT_PLAY_MODE_AUTOSELECT	= 0,
	WMT_PLAY_MODE_LOCAL	= 1,
	WMT_PLAY_MODE_DOWNLOAD	= 2,
	WMT_PLAY_MODE_STREAMING	= 3
    } 	WMT_PLAY_MODE;

typedef 
enum WMT_PROXY_SETTINGS
    {	WMT_PROXY_SETTING_NONE	= 0,
	WMT_PROXY_SETTING_MANUAL	= 1,
	WMT_PROXY_SETTING_AUTO	= 2,
	WMT_PROXY_SETTING_BROWSER	= 3,
	WMT_PROXY_SETTING_MAX	= ( WMT_PROXY_SETTING_BROWSER + 1 ) 
    } 	WMT_PROXY_SETTINGS;

typedef 
enum WMT_CODEC_INFO_TYPE
    {	WMT_CODECINFO_AUDIO	= 0,
	WMT_CODECINFO_VIDEO	= 1,
	WMT_CODECINFO_UNKNOWN	= 0xffffffff
    } 	WMT_CODEC_INFO_TYPE;


enum __MIDL___MIDL_itf_wmsdkidl_0000_0000_0004
    {	WM_DM_NOTINTERLACED	= 0,
	WM_DM_DEINTERLACE_NORMAL	= 1,
	WM_DM_DEINTERLACE_HALFSIZE	= 2,
	WM_DM_DEINTERLACE_HALFSIZEDOUBLERATE	= 3,
	WM_DM_DEINTERLACE_INVERSETELECINE	= 4,
	WM_DM_DEINTERLACE_VERTICALHALFSIZEDOUBLERATE	= 5
    } ;

enum __MIDL___MIDL_itf_wmsdkidl_0000_0000_0005
    {	WM_DM_IT_DISABLE_COHERENT_MODE	= 0,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_TOP	= 1,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_TOP	= 2,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_TOP	= 3,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_TOP	= 4,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_TOP	= 5,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM	= 6,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM	= 7,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM	= 8,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM	= 9,
	WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM	= 10
    } ;
typedef 
enum tagWMT_OFFSET_FORMAT
    {	WMT_OFFSET_FORMAT_100NS	= 0,
	WMT_OFFSET_FORMAT_FRAME_NUMBERS	= ( WMT_OFFSET_FORMAT_100NS + 1 ) ,
	WMT_OFFSET_FORMAT_PLAYLIST_OFFSET	= ( WMT_OFFSET_FORMAT_FRAME_NUMBERS + 1 ) ,
	WMT_OFFSET_FORMAT_TIMECODE	= ( WMT_OFFSET_FORMAT_PLAYLIST_OFFSET + 1 ) ,
	WMT_OFFSET_FORMAT_100NS_APPROXIMATE	= ( WMT_OFFSET_FORMAT_TIMECODE + 1 ) 
    } 	WMT_OFFSET_FORMAT;

typedef 
enum tagWMT_INDEXER_TYPE
    {	WMT_IT_PRESENTATION_TIME	= 0,
	WMT_IT_FRAME_NUMBERS	= ( WMT_IT_PRESENTATION_TIME + 1 ) ,
	WMT_IT_TIMECODE	= ( WMT_IT_FRAME_NUMBERS + 1 ) 
    } 	WMT_INDEXER_TYPE;

typedef 
enum tagWMT_INDEX_TYPE
    {	WMT_IT_NEAREST_DATA_UNIT	= 1,
	WMT_IT_NEAREST_OBJECT	= ( WMT_IT_NEAREST_DATA_UNIT + 1 ) ,
	WMT_IT_NEAREST_CLEAN_POINT	= ( WMT_IT_NEAREST_OBJECT + 1 ) 
    } 	WMT_INDEX_TYPE;

typedef 
enum tagWMT_FILESINK_MODE
    {	WMT_FM_SINGLE_BUFFERS	= 0x1,
	WMT_FM_FILESINK_DATA_UNITS	= 0x2,
	WMT_FM_FILESINK_UNBUFFERED	= 0x4
    } 	WMT_FILESINK_MODE;

typedef 
enum tagWMT_MUSICSPEECH_CLASS_MODE
    {	WMT_MS_CLASS_MUSIC	= 0,
	WMT_MS_CLASS_SPEECH	= 1,
	WMT_MS_CLASS_MIXED	= 2
    } 	WMT_MUSICSPEECH_CLASS_MODE;

typedef 
enum tagWMT_WATERMARK_ENTRY_TYPE
    {	WMT_WMETYPE_AUDIO	= 1,
	WMT_WMETYPE_VIDEO	= 2
    } 	WMT_WATERMARK_ENTRY_TYPE;


enum __MIDL___MIDL_itf_wmsdkidl_0000_0000_0006
    {	WM_PLAYBACK_DRC_HIGH	= 0,
	WM_PLAYBACK_DRC_MEDIUM	= ( WM_PLAYBACK_DRC_HIGH + 1 ) ,
	WM_PLAYBACK_DRC_LOW	= ( WM_PLAYBACK_DRC_MEDIUM + 1 ) 
    } ;

enum __MIDL___MIDL_itf_wmsdkidl_0000_0000_0007
    {	WMT_TIMECODE_FRAMERATE_30	= 0,
	WMT_TIMECODE_FRAMERATE_30DROP	= ( WMT_TIMECODE_FRAMERATE_30 + 1 ) ,
	WMT_TIMECODE_FRAMERATE_25	= ( WMT_TIMECODE_FRAMERATE_30DROP + 1 ) ,
	WMT_TIMECODE_FRAMERATE_24	= ( WMT_TIMECODE_FRAMERATE_25 + 1 ) 
    } ;
typedef 
enum WMT_CREDENTIAL_FLAGS
    {	WMT_CREDENTIAL_SAVE	= 0x1,
	WMT_CREDENTIAL_DONT_CACHE	= 0x2,
	WMT_CREDENTIAL_CLEAR_TEXT	= 0x4,
	WMT_CREDENTIAL_PROXY	= 0x8,
	WMT_CREDENTIAL_ENCRYPT	= 0x10
    } 	WMT_CREDENTIAL_FLAGS;

typedef 
enum WM_AETYPE
    {	WM_AETYPE_INCLUDE	= 0x69,
	WM_AETYPE_EXCLUDE	= 0x65
    } 	WM_AETYPE;


#pragma pack(push)

#pragma pack(2)
typedef struct _WMStreamPrioritizationRecord
    {
    WORD wStreamNumber;
    BOOL fMandatory;
    } 	WM_STREAM_PRIORITY_RECORD;


#pragma pack(pop)
typedef struct _WMWriterStatistics
    {
    QWORD qwSampleCount;
    QWORD qwByteCount;
    QWORD qwDroppedSampleCount;
    QWORD qwDroppedByteCount;
    DWORD dwCurrentBitrate;
    DWORD dwAverageBitrate;
    DWORD dwExpectedBitrate;
    DWORD dwCurrentSampleRate;
    DWORD dwAverageSampleRate;
    DWORD dwExpectedSampleRate;
    } 	WM_WRITER_STATISTICS;

typedef struct _WMWriterStatisticsEx
    {
    DWORD dwBitratePlusOverhead;
    DWORD dwCurrentSampleDropRateInQueue;
    DWORD dwCurrentSampleDropRateInCodec;
    DWORD dwCurrentSampleDropRateInMultiplexer;
    DWORD dwTotalSampleDropsInQueue;
    DWORD dwTotalSampleDropsInCodec;
    DWORD dwTotalSampleDropsInMultiplexer;
    } 	WM_WRITER_STATISTICS_EX;

typedef struct _WMReaderStatistics
    {
    DWORD cbSize;
    DWORD dwBandwidth;
    DWORD cPacketsReceived;
    DWORD cPacketsRecovered;
    DWORD cPacketsLost;
    WORD wQuality;
    } 	WM_READER_STATISTICS;

typedef struct _WMReaderClientInfo
    {
    DWORD cbSize;
    WCHAR *wszLang;
    WCHAR *wszBrowserUserAgent;
    WCHAR *wszBrowserWebPage;
    QWORD qwReserved;
    LPARAM *pReserved;
    WCHAR *wszHostExe;
    QWORD qwHostVersion;
    WCHAR *wszPlayerUserAgent;
    } 	WM_READER_CLIENTINFO;

typedef struct _WMClientProperties
    {
    DWORD dwIPAddress;
    DWORD dwPort;
    } 	WM_CLIENT_PROPERTIES;

typedef struct _WMClientPropertiesEx
    {
    DWORD cbSize;
    LPCWSTR pwszIPAddress;
    LPCWSTR pwszPort;
    LPCWSTR pwszDNSName;
    } 	WM_CLIENT_PROPERTIES_EX;

typedef struct _WMPortNumberRange
    {
    WORD wPortBegin;
    WORD wPortEnd;
    } 	WM_PORT_NUMBER_RANGE;

typedef struct _WMT_BUFFER_SEGMENT
    {
    INSSBuffer *pBuffer;
    DWORD cbOffset;
    DWORD cbLength;
    } 	WMT_BUFFER_SEGMENT;

typedef struct _WMT_PAYLOAD_FRAGMENT
    {
    DWORD dwPayloadIndex;
    WMT_BUFFER_SEGMENT segmentData;
    } 	WMT_PAYLOAD_FRAGMENT;

typedef struct _WMT_FILESINK_DATA_UNIT
    {
    WMT_BUFFER_SEGMENT packetHeaderBuffer;
    DWORD cPayloads;
    WMT_BUFFER_SEGMENT *pPayloadHeaderBuffers;
    DWORD cPayloadDataFragments;
    WMT_PAYLOAD_FRAGMENT *pPayloadDataFragments;
    } 	WMT_FILESINK_DATA_UNIT;

typedef struct _WMT_WEBSTREAM_FORMAT
    {
    WORD cbSize;
    WORD cbSampleHeaderFixedData;
    WORD wVersion;
    WORD wReserved;
    } 	WMT_WEBSTREAM_FORMAT;

typedef struct _WMT_WEBSTREAM_SAMPLE_HEADER
    {
    WORD cbLength;
    WORD wPart;
    WORD cTotalParts;
    WORD wSampleType;
    WCHAR wszURL[ 1 ];
    } 	WMT_WEBSTREAM_SAMPLE_HEADER;

typedef struct _WMAddressAccessEntry
    {
    DWORD dwIPAddress;
    DWORD dwMask;
    } 	WM_ADDRESS_ACCESSENTRY;


#pragma pack(push)

#pragma pack(1)
typedef struct _WMPicture
    {
    LPWSTR pwszMIMEType;
    BYTE bPictureType;
    LPWSTR pwszDescription;
    DWORD dwDataLen;
    BYTE *pbData;
    } 	WM_PICTURE;

typedef struct _WMSynchronisedLyrics
    {
    BYTE bTimeStampFormat;
    BYTE bContentType;
    LPWSTR pwszContentDescriptor;
    DWORD dwLyricsLen;
    BYTE *pbLyrics;
    } 	WM_SYNCHRONISED_LYRICS;

typedef struct _WMUserWebURL
    {
    LPWSTR pwszDescription;
    LPWSTR pwszURL;
    } 	WM_USER_WEB_URL;

typedef struct _WMUserText
    {
    LPWSTR pwszDescription;
    LPWSTR pwszText;
    } 	WM_USER_TEXT;

typedef struct _WMLeakyBucketPair
    {
    DWORD dwBitrate;
    DWORD msBufferWindow;
    } 	WM_LEAKY_BUCKET_PAIR;

typedef struct _WMStreamTypeInfo
    {
    GUID guidMajorType;
    DWORD cbFormat;
    } 	WM_STREAM_TYPE_INFO;


#pragma pack(pop)
typedef struct _WM_LICENSE_STATE_DATA
    {
    DWORD dwSize;
    DWORD dwNumStates;
    DRM_LICENSE_STATE_DATA stateData[ 1 ];
    } 	WM_LICENSE_STATE_DATA;

typedef struct __WMT_WATERMARK_ENTRY
    {
    WMT_WATERMARK_ENTRY_TYPE wmetType;
    CLSID clsid;
    UINT cbDisplayName;
    LPWSTR pwszDisplayName;
    } 	WMT_WATERMARK_ENTRY;

#define WMT_VIDEOIMAGE_SAMPLE_INPUT_FRAME      1 // sample has input frame 
#define WMT_VIDEOIMAGE_SAMPLE_OUTPUT_FRAME     2 // sample produces output frame 
#define WMT_VIDEOIMAGE_SAMPLE_USES_CURRENT_INPUT_FRAME  4 
#define WMT_VIDEOIMAGE_SAMPLE_USES_PREVIOUS_INPUT_FRAME 8 
#define WMT_VIDEOIMAGE_SAMPLE_MOTION       1 // acef used (includes resizing) 
#define WMT_VIDEOIMAGE_SAMPLE_ROTATION     2 // bd also used (not valid without acef) 
#define WMT_VIDEOIMAGE_SAMPLE_BLENDING     4 // BlendCoef1 used 
#define WMT_VIDEOIMAGE_SAMPLE_ADV_BLENDING 8 // BlendCoef2 also used (not valid without BlendCoef1) 
#define WMT_VIDEOIMAGE_INTEGER_DENOMINATOR 65536L 
#define WMT_VIDEOIMAGE_MAGIC_NUMBER 0x1d4a45f2 
#define WMT_VIDEOIMAGE_MAGIC_NUMBER_2 0x1d4a45f3 
typedef struct __WMT_VIDEOIMAGE_SAMPLE
    {
    DWORD dwMagic;
    ULONG cbStruct;
    DWORD dwControlFlags;
    DWORD dwInputFlagsCur;
    LONG lCurMotionXtoX;
    LONG lCurMotionYtoX;
    LONG lCurMotionXoffset;
    LONG lCurMotionXtoY;
    LONG lCurMotionYtoY;
    LONG lCurMotionYoffset;
    LONG lCurBlendCoef1;
    LONG lCurBlendCoef2;
    DWORD dwInputFlagsPrev;
    LONG lPrevMotionXtoX;
    LONG lPrevMotionYtoX;
    LONG lPrevMotionXoffset;
    LONG lPrevMotionXtoY;
    LONG lPrevMotionYtoY;
    LONG lPrevMotionYoffset;
    LONG lPrevBlendCoef1;
    LONG lPrevBlendCoef2;
    } 	WMT_VIDEOIMAGE_SAMPLE;

#define WMT_VIDEOIMAGE_TRANSITION_BOW_TIE           11
#define WMT_VIDEOIMAGE_TRANSITION_CIRCLE            12
#define WMT_VIDEOIMAGE_TRANSITION_CROSS_FADE        13
#define WMT_VIDEOIMAGE_TRANSITION_DIAGONAL          14
#define WMT_VIDEOIMAGE_TRANSITION_DIAMOND           15
#define WMT_VIDEOIMAGE_TRANSITION_FADE_TO_COLOR     16
#define WMT_VIDEOIMAGE_TRANSITION_FILLED_V          17
#define WMT_VIDEOIMAGE_TRANSITION_FLIP              18
#define WMT_VIDEOIMAGE_TRANSITION_INSET             19
#define WMT_VIDEOIMAGE_TRANSITION_IRIS              20
#define WMT_VIDEOIMAGE_TRANSITION_PAGE_ROLL         21
#define WMT_VIDEOIMAGE_TRANSITION_RECTANGLE         23
#define WMT_VIDEOIMAGE_TRANSITION_REVEAL            24
#define WMT_VIDEOIMAGE_TRANSITION_SLIDE             27
#define WMT_VIDEOIMAGE_TRANSITION_SPLIT             29
#define WMT_VIDEOIMAGE_TRANSITION_STAR              30
#define WMT_VIDEOIMAGE_TRANSITION_WHEEL             31
typedef struct __WMT_VIDEOIMAGE_SAMPLE2
    {
    DWORD dwMagic;
    DWORD dwStructSize;
    DWORD dwControlFlags;
    DWORD dwViewportWidth;
    DWORD dwViewportHeight;
    DWORD dwCurrImageWidth;
    DWORD dwCurrImageHeight;
    FLOAT fCurrRegionX0;
    FLOAT fCurrRegionY0;
    FLOAT fCurrRegionWidth;
    FLOAT fCurrRegionHeight;
    FLOAT fCurrBlendCoef;
    DWORD dwPrevImageWidth;
    DWORD dwPrevImageHeight;
    FLOAT fPrevRegionX0;
    FLOAT fPrevRegionY0;
    FLOAT fPrevRegionWidth;
    FLOAT fPrevRegionHeight;
    FLOAT fPrevBlendCoef;
    DWORD dwEffectType;
    DWORD dwNumEffectParas;
    FLOAT fEffectPara0;
    FLOAT fEffectPara1;
    FLOAT fEffectPara2;
    FLOAT fEffectPara3;
    FLOAT fEffectPara4;
    BOOL bKeepPrevImage;
    } 	WMT_VIDEOIMAGE_SAMPLE2;

typedef struct _WMMediaType
    {
    GUID majortype;
    GUID subtype;
    BOOL bFixedSizeSamples;
    BOOL bTemporalCompression;
    ULONG lSampleSize;
    GUID formattype;
    IUnknown *pUnk;
    ULONG cbFormat;
    BYTE *pbFormat;
    } 	WM_MEDIA_TYPE;

typedef struct tagWMVIDEOINFOHEADER
{
    //
    // The bit we really want to use.
    //
    RECT rcSource;

    //
    // Where the video should go.
    //
    RECT rcTarget;

    //
    // Approximate bit data rate.
    //
    DWORD dwBitRate;

    //
    // Bit error rate for this stream.
    //
    DWORD dwBitErrorRate;

    //
    // Average time per frame (100ns units).
    //
    LONGLONG AvgTimePerFrame;

    BITMAPINFOHEADER bmiHeader;
} WMVIDEOINFOHEADER;
typedef struct tagWMVIDEOINFOHEADER2
{
    //
    // The bit we really want to use.
    //
    RECT rcSource;

    //
    // Where the video should go.
    //
    RECT rcTarget;

    //
    // Approximate bit data rate.
    //
    DWORD dwBitRate;

    //
    // Bit error rate for this stream.
    //
    DWORD dwBitErrorRate;

    //
    // Average time per frame (100ns units).
    //
    LONGLONG AvgTimePerFrame;

    //
    // Use AMINTERLACE_* defines. Reject connection if undefined bits are not 0.
    //
    DWORD dwInterlaceFlags;

    //
    // use AMCOPYPROTECT_* defines. Reject connection if undefined bits are not 0.
    //
    DWORD dwCopyProtectFlags;

    //
    // X dimension of picture aspect ratio, e.g. 16 for 16x9 display.
    //
    DWORD dwPictAspectRatioX;

    //
    // Y dimension of picture aspect ratio, e.g.  9 for 16x9 display.
    //
    DWORD dwPictAspectRatioY;

    //
    // Must be 0; reject connection otherwise.
    //
    DWORD dwReserved1;

    //
    // Must be 0; reject connection otherwise.
    //
    DWORD dwReserved2;

    BITMAPINFOHEADER bmiHeader;
} WMVIDEOINFOHEADER2;
typedef struct tagWMMPEG2VIDEOINFO
{
    //
    // Video info header2.
    //
    WMVIDEOINFOHEADER2 hdr;

    //
    // Not used for DVD.
    //
    DWORD dwStartTimeCode;

    //
    // Is 0 for DVD (no sequence header).
    //
    DWORD cbSequenceHeader;

    //
    // Use enum MPEG2Profile.
    //
    DWORD dwProfile;

    //
    // Use enum MPEG2Level.
    //
    DWORD dwLevel;

    //
    // Use AMMPEG2_* defines.  Reject connection if undefined bits are not 0.
    //
    DWORD dwFlags;

    //
    // Sequence header.
    //
    DWORD dwSequenceHeader[1];

} WMMPEG2VIDEOINFO;
typedef struct tagWMSCRIPTFORMAT
{
    GUID    scriptType; 
} WMSCRIPTFORMAT;
// 00000000-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_Base 
EXTERN_GUID(WMMEDIASUBTYPE_Base, 
0x00000000, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 73646976-0000-0010-8000-00AA00389B71  'vids' == WMMEDIATYPE_Video 
EXTERN_GUID(WMMEDIATYPE_Video, 
0x73646976, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// e436eb78-524f-11ce-9f53-0020af0ba770            MEDIASUBTYPE_RGB1 
EXTERN_GUID(WMMEDIASUBTYPE_RGB1, 
0xe436eb78, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70); 
// e436eb79-524f-11ce-9f53-0020af0ba770            MEDIASUBTYPE_RGB4 
EXTERN_GUID(WMMEDIASUBTYPE_RGB4, 
0xe436eb79, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70); 
// e436eb7a-524f-11ce-9f53-0020af0ba770            MEDIASUBTYPE_RGB8 
EXTERN_GUID(WMMEDIASUBTYPE_RGB8, 
0xe436eb7a, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70); 
// e436eb7b-524f-11ce-9f53-0020af0ba770            MEDIASUBTYPE_RGB565 
EXTERN_GUID(WMMEDIASUBTYPE_RGB565, 
0xe436eb7b, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70); 
// e436eb7c-524f-11ce-9f53-0020af0ba770            MEDIASUBTYPE_RGB555 
EXTERN_GUID(WMMEDIASUBTYPE_RGB555, 
0xe436eb7c, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70); 
// e436eb7d-524f-11ce-9f53-0020af0ba770            MEDIASUBTYPE_RGB24 
EXTERN_GUID(WMMEDIASUBTYPE_RGB24, 
0xe436eb7d, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70); 
// e436eb7e-524f-11ce-9f53-0020af0ba770            MEDIASUBTYPE_RGB32 
EXTERN_GUID(WMMEDIASUBTYPE_RGB32, 
0xe436eb7e, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70); 
// 30323449-0000-0010-8000-00AA00389B71  'I420' ==  MEDIASUBTYPE_I420 
EXTERN_GUID(WMMEDIASUBTYPE_I420, 
0x30323449, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 56555949-0000-0010-8000-00AA00389B71  'IYUV' ==  MEDIASUBTYPE_IYUV 
EXTERN_GUID(WMMEDIASUBTYPE_IYUV, 
0x56555949, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 32315659-0000-0010-8000-00AA00389B71  'YV12' ==  MEDIASUBTYPE_YV12 
EXTERN_GUID(WMMEDIASUBTYPE_YV12, 
0x32315659, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 32595559-0000-0010-8000-00AA00389B71  'YUY2' == MEDIASUBTYPE_YUY2 
EXTERN_GUID(WMMEDIASUBTYPE_YUY2, 
0x32595559, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 32323450-0000-0010-8000-00AA00389B71  'P422' == MEDIASUBTYPE_P422 
EXTERN_GUID(WMMEDIASUBTYPE_P422, 
0x32323450, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 59565955-0000-0010-8000-00AA00389B71  'UYVY' ==  MEDIASUBTYPE_UYVY 
EXTERN_GUID(WMMEDIASUBTYPE_UYVY, 
0x59565955, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 55595659-0000-0010-8000-00AA00389B71  'YVYU' == MEDIASUBTYPE_YVYU 
EXTERN_GUID(WMMEDIASUBTYPE_YVYU, 
0x55595659, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 39555659-0000-0010-8000-00AA00389B71  'YVU9' == MEDIASUBTYPE_YVU9 
EXTERN_GUID(WMMEDIASUBTYPE_YVU9, 
0x39555659, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 1d4a45f2-e5f6-4b44-8388-f0ae5c0e0c37            MEDIASUBTYPE_VIDEOIMAGE 
EXTERN_GUID(WMMEDIASUBTYPE_VIDEOIMAGE,  
0x1d4a45f2, 0xe5f6, 0x4b44, 0x83, 0x88, 0xf0, 0xae, 0x5c, 0x0e, 0x0c, 0x37); 
// 3334504D-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_MP43 
EXTERN_GUID(WMMEDIASUBTYPE_MP43, 
0x3334504D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 5334504D-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_MP4S 
EXTERN_GUID(WMMEDIASUBTYPE_MP4S, 
0x5334504D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 3253344D-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_M4S2 
EXTERN_GUID(WMMEDIASUBTYPE_M4S2, 
0x3253344D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 31564D57-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMV1 
EXTERN_GUID(WMMEDIASUBTYPE_WMV1, 
0x31564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 32564D57-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMV2 
EXTERN_GUID(WMMEDIASUBTYPE_WMV2, 
0x32564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 3153534D-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_MSS1 
EXTERN_GUID(WMMEDIASUBTYPE_MSS1, 
0x3153534D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// E06D8026-DB46-11CF-B4D1-00805F6CBBEA            WMMEDIASUBTYPE_MPEG2_VIDEO 
EXTERN_GUID(WMMEDIASUBTYPE_MPEG2_VIDEO, 
0xe06d8026, 0xdb46, 0x11cf, 0xb4, 0xd1, 0x00, 0x80, 0x5f, 0x6c, 0xbb, 0xea); 
// 73647561-0000-0010-8000-00AA00389B71  'auds' == WMMEDIATYPE_Audio 
EXTERN_GUID(WMMEDIATYPE_Audio, 
0x73647561, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 00000001-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_PCM 
EXTERN_GUID(WMMEDIASUBTYPE_PCM, 
0x00000001, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 00000009-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_DRM 
EXTERN_GUID(WMMEDIASUBTYPE_DRM, 
0x00000009, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 00000162-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMAudioV9 
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioV9, 
0x00000162, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 00000163-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMAudio_Lossless 
EXTERN_GUID(WMMEDIASUBTYPE_WMAudio_Lossless, 
0x00000163, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 3253534D-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_MSS2 
EXTERN_GUID(WMMEDIASUBTYPE_MSS2, 
0x3253534D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 0000000A-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMSP1 
EXTERN_GUID( WMMEDIASUBTYPE_WMSP1, 
0x0000000A,0x0000,0x0010,0x80,0x00,0x00,0xAA,0x00,0x38,0x9B,0x71); 
// 0000000B-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMSP2 
EXTERN_GUID( WMMEDIASUBTYPE_WMSP2, 
0x0000000B,0x0000,0x0010,0x80,0x00,0x00,0xAA,0x00,0x38,0x9B,0x71); 
// 33564D57-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMV3 
EXTERN_GUID(WMMEDIASUBTYPE_WMV3, 
0x33564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 50564D57-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMVP 
EXTERN_GUID(WMMEDIASUBTYPE_WMVP, 
0x50564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 32505657-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WVP2 
EXTERN_GUID(WMMEDIASUBTYPE_WVP2, 
0x32505657, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 41564D57-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMVA 
EXTERN_GUID(WMMEDIASUBTYPE_WMVA, 
0x41564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 31435657-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WVC1 
EXTERN_GUID(WMMEDIASUBTYPE_WVC1, 
0x31435657, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 00000161-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMAudioV8 
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioV8, 
0x00000161, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 00000161-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMAudioV7 
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioV7, 
0x00000161, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 00000161-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMAudioV2 
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioV2, 
0x00000161, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 00000130-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_ACELPnet 
EXTERN_GUID(WMMEDIASUBTYPE_ACELPnet, 
0x00000130, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 00000055-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_MP3 
EXTERN_GUID(WMMEDIASUBTYPE_MP3, 
0x00000055, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71); 
// 776257D4-C627-41CB-8F81-7AC7FF1C40CC            WMMEDIASUBTYPE_WebStream 
EXTERN_GUID(WMMEDIASUBTYPE_WebStream, 
0x776257d4, 0xc627, 0x41cb, 0x8f, 0x81, 0x7a, 0xc7, 0xff, 0x1c, 0x40, 0xcc); 
// 73636d64-0000-0010-8000-00AA00389B71  'scmd' == WMMEDIATYPE_Script 
EXTERN_GUID(WMMEDIATYPE_Script, 
0x73636d64, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71); 
// 34A50FD8-8AA5-4386-81FE-A0EFE0488E31  'imag' == WMMEDIATYPE_Image 
EXTERN_GUID(WMMEDIATYPE_Image, 
0x34a50fd8, 0x8aa5, 0x4386, 0x81, 0xfe, 0xa0, 0xef, 0xe0, 0x48, 0x8e, 0x31); 
// D9E47579-930E-4427-ADFC-AD80F290E470  'fxfr' == WMMEDIATYPE_FileTransfer 
EXTERN_GUID(WMMEDIATYPE_FileTransfer, 
0xd9e47579, 0x930e, 0x4427, 0xad, 0xfc, 0xad, 0x80, 0xf2, 0x90, 0xe4, 0x70); 
// 9BBA1EA7-5AB2-4829-BA57-0940209BCF3E      'text' == WMMEDIATYPE_Text 
EXTERN_GUID(WMMEDIATYPE_Text, 
0x9bba1ea7, 0x5ab2, 0x4829, 0xba, 0x57, 0x9, 0x40, 0x20, 0x9b, 0xcf, 0x3e); 
// 05589F80-C356-11CE-BF01-00AA0055595A        WMFORMAT_VideoInfo 
EXTERN_GUID(WMFORMAT_VideoInfo, 
0x05589f80, 0xc356, 0x11ce, 0xbf, 0x01, 0x00, 0xaa, 0x00, 0x55, 0x59, 0x5a); 
// E06D80E3-DB46-11CF-B4D1-00805F6CBBEA        WMFORMAT_MPEG2Video 
EXTERN_GUID(WMFORMAT_MPEG2Video, 
0xe06d80e3, 0xdb46, 0x11cf, 0xb4, 0xd1, 0x00, 0x80, 0x05f, 0x6c, 0xbb, 0xea); 
// 05589F81-C356-11CE-BF01-00AA0055595A        WMFORMAT_WaveFormatEx 
EXTERN_GUID(WMFORMAT_WaveFormatEx, 
0x05589f81, 0xc356, 0x11ce, 0xbf, 0x01, 0x00, 0xaa, 0x00, 0x55, 0x59, 0x5a); 
// 5C8510F2-DEBE-4CA7-BBA5-F07A104F8DFF        WMFORMAT_Script 
EXTERN_GUID(WMFORMAT_Script, 
0x5c8510f2, 0xdebe, 0x4ca7, 0xbb, 0xa5, 0xf0, 0x7a, 0x10, 0x4f, 0x8d, 0xff); 
// DA1E6B13-8359-4050-B398-388E965BF00C        WMFORMAT_WebStream 
EXTERN_GUID(WMFORMAT_WebStream, 
0xda1e6b13, 0x8359, 0x4050, 0xb3, 0x98, 0x38, 0x8e, 0x96, 0x5b, 0xf0, 0x0c); 
// 82F38A70-C29F-11D1-97AD-00A0C95EA850        WMSCRIPTTYPE_TwoStrings 
EXTERN_GUID( WMSCRIPTTYPE_TwoStrings, 
0x82f38a70,0xc29f,0x11d1,0x97,0xad,0x00,0xa0,0xc9,0x5e,0xa8,0x50); 
EXTERN_GUID( WM_SampleExtensionGUID_OutputCleanPoint, 0xf72a3c6f, 0x6eb4, 0x4ebc, 0xb1, 0x92, 0x9, 0xad, 0x97, 0x59, 0xe8, 0x28 );
EXTERN_GUID( WM_SampleExtensionGUID_Timecode, 0x399595ec, 0x8667, 0x4e2d, 0x8f, 0xdb, 0x98, 0x81, 0x4c, 0xe7, 0x6c, 0x1e);
EXTERN_GUID( WM_SampleExtensionGUID_ChromaLocation, 0x4c5acca0, 0x9276, 0x4b2c, 0x9e, 0x4c, 0xa0, 0xed, 0xef, 0xdd, 0x21, 0x7e);
EXTERN_GUID( WM_SampleExtensionGUID_ColorSpaceInfo, 0xf79ada56, 0x30eb, 0x4f2b, 0x9f, 0x7a, 0xf2, 0x4b, 0x13, 0x9a, 0x11, 0x57 );
EXTERN_GUID( WM_SampleExtensionGUID_UserDataInfo, 0x732bb4fa, 0x78be, 0x4549, 0x99, 0xbd, 0x2, 0xdb, 0x1a, 0x55, 0xb7, 0xa8 );
EXTERN_GUID( WM_SampleExtensionGUID_FileName, 0xe165ec0e, 0x19ed, 0x45d7, 0xb4, 0xa7, 0x25, 0xcb, 0xd1, 0xe2, 0x8e, 0x9b);
EXTERN_GUID( WM_SampleExtensionGUID_ContentType, 0xd590dc20, 0x07bc, 0x436c, 0x9c, 0xf7, 0xf3, 0xbb, 0xfb, 0xf1, 0xa4, 0xdc );
EXTERN_GUID( WM_SampleExtensionGUID_PixelAspectRatio, 0x1b1ee554, 0xf9ea, 0x4bc8, 0x82, 0x1a, 0x37, 0x6b, 0x74, 0xe4, 0xc4, 0xb8 );
EXTERN_GUID( WM_SampleExtensionGUID_SampleDuration, 0xc6bd9450, 0x867f, 0x4907, 0x83, 0xa3, 0xc7, 0x79, 0x21, 0xb7, 0x33, 0xad );
EXTERN_GUID( WM_SampleExtensionGUID_SampleProtectionSalt, 0x5403deee, 0xb9ee, 0x438f, 0xaa, 0x83, 0x38, 0x4, 0x99, 0x7e, 0x56, 0x9d );
#define WM_SampleExtension_ContentType_Size         1
#define WM_SampleExtension_PixelAspectRatio_Size    2
#define WM_SampleExtension_Timecode_Size           14
#define WM_SampleExtension_SampleDuration_Size      2
#define WM_SampleExtension_ChromaLocation_Size      1
#define WM_SampleExtension_ColorSpaceInfo_Size      3
#define WM_CT_REPEAT_FIRST_FIELD 0x10
#define WM_CT_BOTTOM_FIELD_FIRST 0x20
#define WM_CT_TOP_FIELD_FIRST    0x40
#define WM_CT_INTERLACED         0x80
#define WM_CL_INTERLACED420   0
#define WM_CL_PROGRESSIVE420  1

#pragma pack(push)

#pragma pack(1)
typedef struct _WMT_COLORSPACEINFO_EXTENSION_DATA
    {
    BYTE ucColorPrimaries;
    BYTE ucColorTransferChar;
    BYTE ucColorMatrixCoef;
    } 	WMT_COLORSPACEINFO_EXTENSION_DATA;


#pragma pack(pop)

#pragma pack(push)

#pragma pack(2)
typedef struct _WMT_TIMECODE_EXTENSION_DATA
    {
    WORD wRange;
    DWORD dwTimecode;
    DWORD dwUserbits;
    DWORD dwAmFlags;
    } 	WMT_TIMECODE_EXTENSION_DATA;


#pragma pack(pop)
typedef struct _DRM_VAL16
    {
    BYTE val[ 16 ];
    } 	DRM_VAL16;

EXTERN_GUID( IID_IWMMediaProps,         0x96406bce,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMVideoMediaProps,    0x96406bcf,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMWriter,             0x96406bd4,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMInputMediaProps,    0x96406bd5,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMReader,             0x96406bd6,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMSyncReader,         0x9397f121,0x7705,0x4dc9,0xb0,0x49,0x98,0xb6,0x98,0x18,0x84,0x14 );
EXTERN_GUID( IID_IWMSyncReader2,        0xfaed3d21,0x1b6b,0x4af7,0x8c,0xb6,0x3e,0x18,0x9b,0xbc,0x18,0x7b );
EXTERN_GUID( IID_IWMOutputMediaProps,   0x96406bd7,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMStatusCallback,     0x6d7cdc70,0x9888,0x11d3,0x8e,0xdc,0x00,0xc0,0x4f,0x61,0x09,0xcf );
EXTERN_GUID( IID_IWMReaderCallback,     0x96406bd8,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMCredentialCallback, 0x342e0eb7,0xe651,0x450c,0x97,0x5b,0x2a,0xce,0x2c,0x90,0xc4,0x8e );
EXTERN_GUID( IID_IWMMetadataEditor,     0x96406bd9,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMMetadataEditor2,    0x203cffe3,0x2e18,0x4fdf,0xb5,0x9d,0x6e,0x71,0x53,0x05,0x34,0xcf );
EXTERN_GUID( IID_IWMDRMEditor,          0xFF130EBC,0xA6C3,0x42A6,0xB4,0x01,0xC3,0x38,0x2C,0x3E,0x08,0xB3 );
EXTERN_GUID( IID_IWMHeaderInfo,         0x96406bda,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMHeaderInfo2,        0x15cf9781,0x454e,0x482e,0xb3,0x93,0x85,0xfa,0xe4,0x87,0xa8,0x10 );
EXTERN_GUID( IID_IWMHeaderInfo3,        0x15CC68E3,0x27CC,0x4ecd,0xB2,0x22,0x3F,0x5D,0x02,0xD8,0x0B,0xD5 );
EXTERN_GUID( IID_IWMProfileManager,     0xd16679f2,0x6ca0,0x472d,0x8d,0x31,0x2f,0x5d,0x55,0xae,0xe1,0x55 );
EXTERN_GUID( IID_IWMProfileManager2,    0x7a924e51,0x73c1,0x494d,0x80,0x19,0x23,0xd3,0x7e,0xd9,0xb8,0x9a );
EXTERN_GUID( IID_IWMProfileManagerLanguage, 0xba4dcc78,0x7ee0,0x4ab8,0xb2,0x7a,0xdb,0xce,0x8b,0xc5,0x14,0x54 );
EXTERN_GUID( IID_IWMProfile,            0x96406bdb,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMProfile2,           0x07e72d33,0xd94e,0x4be7,0x88,0x43,0x60,0xae,0x5f,0xf7,0xe5,0xf5 );
EXTERN_GUID( IID_IWMProfile3,           0x00ef96cc,0xa461,0x4546,0x8b,0xcd,0xc9,0xa2,0x8f,0x0e,0x06,0xf5 );
EXTERN_GUID( IID_IWMStreamConfig,       0x96406bdc,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMStreamConfig2,      0x7688d8cb,0xfc0d,0x43bd,0x94,0x59,0x5a,0x8d,0xec,0x20,0x0c,0xfa );
EXTERN_GUID( IID_IWMStreamConfig3,      0xcb164104,0x3aa9,0x45a7,0x9a,0xc9,0x4d,0xae,0xe1,0x31,0xd6,0xe1 );
EXTERN_GUID( IID_IWMStreamList,         0x96406bdd,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMMutualExclusion,    0x96406bde,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMMutualExclusion2,   0x302b57d,0x89d1,0x4ba2,0x85,0xc9,0x16,0x6f,0x2c,0x53,0xeb,0x91 );
EXTERN_GUID( IID_IWMBandwidthSharing,   0xad694af1,0xf8d9,0x42f8,0xbc,0x47,0x70,0x31,0x1b,0x0c,0x4f,0x9e );
EXTERN_GUID( IID_IWMStreamPrioritization, 0x8c1c6090,0xf9a8,0x4748,0x8e,0xc3,0xdd,0x11,0x08,0xba,0x1e,0x77 );
EXTERN_GUID( IID_IWMWriterAdvanced,     0x96406be3,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMWriterAdvanced2,    0x962dc1ec,0xc046,0x4db8,0x9c,0xc7,0x26,0xce,0xae,0x50,0x08,0x17 );
EXTERN_GUID( IID_IWMWriterAdvanced3,    0x2cd6492d,0x7c37,0x4e76,0x9d,0x3b,0x59,0x26,0x11,0x83,0xa2,0x2e );
EXTERN_GUID( IID_IWMWriterPreprocess,   0xfc54a285,0x38c4,0x45b5,0xaa,0x23,0x85,0xb9,0xf7,0xcb,0x42,0x4b );
EXTERN_GUID( IID_IWMWriterSink,         0x96406be4,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMWriterFileSink,     0x96406be5,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMWriterFileSink2,    0x14282ba7,0x4aef,0x4205,0x8c,0xe5,0xc2,0x29,0x03,0x5a,0x05,0xbc );
EXTERN_GUID( IID_IWMWriterFileSink3,    0x3fea4feb,0x2945,0x47a7,0xa1,0xdd,0xc5,0x3a,0x8f,0xc4,0xc4,0x5c );
EXTERN_GUID( IID_IWMWriterNetworkSink,  0x96406be7,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMClientConnections,  0x73c66010,0xa299,0x41df,0xb1,0xf0,0xcc,0xf0,0x3b,0x09,0xc1,0xc6 );
EXTERN_GUID( IID_IWMClientConnections2, 0x4091571e,0x4701,0x4593,0xbb,0x3d,0xd5,0xf5,0xf0,0xc7,0x42,0x46 ); 
EXTERN_GUID( IID_IWMReaderAdvanced,     0x96406bea,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMReaderAdvanced2,    0xae14a945,0xb90c,0x4d0d,0x91,0x27,0x80,0xd6,0x65,0xf7,0xd7,0x3e );
EXTERN_GUID( IID_IWMReaderAdvanced3,    0x5dc0674b,0xf04b,0x4a4e,0x9f,0x2a,0xb1,0xaf,0xde,0x2c,0x81,0x00 );
EXTERN_GUID( IID_IWMReaderAdvanced4,    0x945a76a2,0x12ae,0x4d48,0xbd,0x3c,0xcd,0x1d,0x90,0x39,0x9b,0x85 );
EXTERN_GUID( IID_IWMReaderAdvanced5,    0x24c44db0,0x55d1,0x49ae,0xa5,0xcc,0xf1,0x38,0x15,0xe3,0x63,0x63 );
EXTERN_GUID( IID_IWMReaderAdvanced6,    0x18a2e7f8,0x428f,0x4acd,0x8a,0x00,0xe6,0x46,0x39,0xbc,0x93,0xde );
EXTERN_GUID( IID_IWMPlayerHook,         0xe5b7ca9a,0x0f1c,0x4f66,0x90,0x02,0x74,0xec,0x50,0xd8,0xb3,0x04 );
EXTERN_GUID( IID_IWMDRMReader,          0xd2827540,0x3ee7,0x432c,0xb1,0x4c,0xdc,0x17,0xf0,0x85,0xd3,0xb3 );
EXTERN_GUID( IID_IWMDRMReader2,         0xbefe7a75,0x9f1d,0x4075,0xb9,0xd9,0xa3,0xc3,0x7b,0xda,0x49,0xa0 );
EXTERN_GUID( IID_IWMDRMReader3,         0xe08672de,0xf1e7,0x4ff4,0xa0,0xa3,0xfc,0x4b,0x08,0xe4,0xca,0xf8 );
EXTERN_GUID( IID_IWMReaderPlaylistBurn, 0xf28c0300,0x9baa,0x4477,0xa8,0x46,0x17,0x44,0xd9,0xcb,0xf5,0x33 );
EXTERN_GUID( IID_IWMReaderCallbackAdvanced, 0x96406beb,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMReaderNetworkConfig,0x96406bec,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMReaderStreamClock,  0x96406bed,0x2b2b,0x11d3,0xb3,0x6b,0x00,0xc0,0x4f,0x61,0x08,0xff );
EXTERN_GUID( IID_IWMIndexer,            0x6d7cdc71,0x9888,0x11d3,0x8e,0xdc,0x00,0xc0,0x4f,0x61,0x09,0xcf );
EXTERN_GUID( IID_IWMIndexer2,           0xb70f1e42,0x6255,0x4df0,0xa6,0xb9,0x02,0xb2,0x12,0xd9,0xe2,0xbb );
EXTERN_GUID( IID_IWMReaderAllocatorEx,  0x9f762fa7,0xa22e,0x428d,0x93,0xc9,0xac,0x82,0xf3,0xaa,0xfe,0x5a );
EXTERN_GUID( IID_IWMReaderTypeNegotiation, 0xfdbe5592,0x81a1,0x41ea,0x93,0xbd,0x73,0x5c,0xad,0x1a,0xdc,0x5 );
EXTERN_GUID( IID_IWMLicenseBackup,      0x05E5AC9F,0x3FB6,0x4508,0xBB,0x43,0xA4,0x06,0x7B,0xA1,0xEB,0xE8);
EXTERN_GUID( IID_IWMLicenseRestore,     0xC70B6334,0xa22e,0x4efb,0xA2,0x45,0x15,0xE6,0x5A,0x00,0x4A,0x13);
EXTERN_GUID( IID_IWMBackupRestoreProps, 0x3C8E0DA6,0x996F,0x4ff3,0xA1,0xAF,0x48,0x38,0xF9,0x37,0x7e,0x2e);
EXTERN_GUID( IID_IWMPacketSize,         0xcdfb97ab,0x188f,0x40b3,0xb6,0x43,0x5b,0x79,0x03,0x97,0x5c,0x59);
EXTERN_GUID( IID_IWMPacketSize2,        0x8bfc2b9e,0xb646,0x4233,0xa8,0x77,0x1c,0x6a,0x7,0x96,0x69,0xdc);
EXTERN_GUID( IID_IWMRegisterCallback,   0xcf4b1f99,0x4de2,0x4e49,0xa3,0x63,0x25,0x27,0x40,0xd9,0x9b,0xc1);
EXTERN_GUID( IID_IWMWriterPostView,     0x81e20ce4,0x75ef,0x491a,0x80,0x04,0xfc,0x53,0xc4,0x5b,0xdc,0x3e);
EXTERN_GUID( IID_IWMWriterPostViewCallback, 0xd9d6549d,0xa193,0x4f24,0xb3,0x08,0x03,0x12,0x3d,0x9b,0x7f,0x8d);
EXTERN_GUID( IID_IWMCodecInfo,          0xa970f41e,0x34de,0x4a98,0xb3,0xba,0xe4,0xb3,0xca,0x75,0x28,0xf0);
EXTERN_GUID( IID_IWMCodecInfo2,         0xaa65e273,0xb686,0x4056,0x91,0xec,0xdd,0x76,0x8d,0x4d,0xf7,0x10);
EXTERN_GUID( IID_IWMCodecInfo3,         0x7e51f487,0x4d93,0x4f98,0x8a,0xb4,0x27,0xd0,0x56,0x5a,0xdc,0x51);
EXTERN_GUID( IID_IWMPropertyVault,      0x72995A79,0x5090,0x42a4,0x9C,0x8C,0xD9,0xD0,0xB6,0xD3,0x4B,0xE5 );
EXTERN_GUID( IID_IWMIStreamProps,       0x6816dad3,0x2b4b,0x4c8e,0x81,0x49,0x87,0x4c,0x34,0x83,0xa7,0x53 );
EXTERN_GUID( IID_IWMLanguageList,       0xdf683f00,0x2d49,0x4d8e,0x92,0xb7,0xfb,0x19,0xf6,0xa0,0xdc,0x57 );
EXTERN_GUID( IID_IWMDRMWriter,          0xd6ea5dd0,0x12a0,0x43f4,0x90,0xab,0xa3,0xfd,0x45,0x1e,0x6a,0x07 );
EXTERN_GUID( IID_IWMDRMWriter2,         0x38ee7a94,0x40e2,0x4e10,0xaa,0x3f,0x33,0xfd,0x32,0x10,0xed,0x5b );
EXTERN_GUID( IID_IWMDRMWriter3,         0xa7184082,0xa4aa,0x4dde,0xac,0x9c,0xe7,0x5d,0xbd,0x11,0x17,0xce );
EXTERN_GUID( IID_IWMWriterPushSink,      0xdc10e6a5,0x072c,0x467d,0xbf,0x57,0x63,0x30,0xa9,0xdd,0xe1,0x2a );
EXTERN_GUID( IID_IWMReaderNetworkConfig2,0xd979a853,0x042b,0x4050,0x83,0x87,0xc9,0x39,0xdb,0x22,0x01,0x3f );
EXTERN_GUID( IID_IWMWatermarkInfo,       0x6f497062,0xf2e2,0x4624,0x8e,0xa7,0x9d,0xd4,0x0d,0x81,0xfc,0x8d );
EXTERN_GUID( IID_IWMReaderAccelerator,   0xbddc4d08,0x944d,0x4d52,0xa6,0x12,0x46,0xc3,0xfd,0xa0,0x7d,0xd4 );
EXTERN_GUID( IID_IWMReaderTimecode,        0xf369e2f0,0xe081,0x4fe6,0x84,0x50,0xb8,0x10,0xb2,0xf4,0x10,0xd1 );
EXTERN_GUID( IID_IWMImageInfo,            0x9f0aa3b6,0x7267,0x4d89,0x88,0xf2,0xba,0x91,0x5a,0xa5,0xc4,0xc6);
EXTERN_GUID( IID_IWMAddressAccess,        0xBB3C6389,0x1633,0x4e92,0xAF,0x14,0x9F,0x31,0x73,0xBA,0x39,0xD0 );
EXTERN_GUID( IID_IWMAddressAccess2,       0x65a83fc2,0x3e98,0x4d4d,0x81,0xb5,0x2a,0x74,0x28,0x86,0xb3,0x3d );
EXTERN_GUID( IID_IWMDeviceRegistration,   0xf6211f03,0x8d21,0x4e94,0x93,0xe6,0x85,0x10,0x80,0x5f,0x2d,0x99 );
EXTERN_GUID( IID_IWMRegisteredDevice,     0xa4503bec,0x5508,0x4148,0x97,0xac,0xbf,0xa7,0x57,0x60,0xa7,0x0d );
EXTERN_GUID( IID_IWMProximityDetection,   0x6A9FD8EE,0xB651,0x4bf0,0xB8,0x49,0x7D,0x4E,0xCE,0x79,0xA2,0xB1 );
EXTERN_GUID( IID_IWMDRMMessageParser,     0xa73a0072,0x25a0,0x4c99,0xb4,0xa5,0xed,0xe8,0x10,0x1a,0x6c,0x39 );
EXTERN_GUID( IID_IWMDRMTranscryptor,      0x69059850,0x6e6f,0x4bb2,0x80,0x6f,0x71,0x86,0x3d,0xdf,0xc4,0x71 );
EXTERN_GUID( IID_IWMDRMTranscryptor2,     0xe0da439f,0xd331,0x496a,0xbe,0xce,0x18,0xe5,0xba,0xc5,0xdd,0x23 );
EXTERN_GUID( IID_IWMDRMTranscryptionManager, 0xb1a887b2,0xa4f0,0x407a,0xb0,0x2e,0xef,0xbd,0x23,0xbb,0xec,0xdf );
EXTERN_GUID( IID_IWMLicenseRevocationAgent, 0x6967f2c9,0x4e26,0x4b57,0x88,0x94,0x79,0x98,0x80,0xf7,0xac,0x7b );
EXTERN_GUID( CLSID_WMMUTEX_Language, 0xD6E22A00,0x35DA,0x11D1,0x90,0x34,0x00,0xA0,0xC9,0x03,0x49,0xBE );
EXTERN_GUID( CLSID_WMMUTEX_Bitrate, 0xD6E22A01,0x35DA,0x11D1,0x90,0x34,0x00,0xA0,0xC9,0x03,0x49,0xBE );
EXTERN_GUID( CLSID_WMMUTEX_Presentation, 0xD6E22A02,0x35DA,0x11D1,0x90,0x34,0x00,0xA0,0xC9,0x03,0x49,0xBE );
EXTERN_GUID( CLSID_WMMUTEX_Unknown, 0xD6E22A03,0x35DA,0x11D1,0x90,0x34,0x00,0xA0,0xC9,0x03,0x49,0xBE );
EXTERN_GUID( CLSID_WMBandwidthSharing_Exclusive, 0xaf6060aa,0x5197,0x11d2,0xb6,0xaf,0x00,0xc0,0x4f,0xd9,0x08,0xe9 );
EXTERN_GUID( CLSID_WMBandwidthSharing_Partial, 0xaf6060ab,0x5197,0x11d2,0xb6,0xaf,0x00,0xc0,0x4f,0xd9,0x08,0xe9 );
// {B42CDE2B-6178-4a2c-A375-89DD3FD7F497}
EXTERN_GUID( WMT_DMOCATEGORY_AUDIO_WATERMARK, 0x65221c5a, 0xfa75, 0x4b39, 0xb5, 0x0c, 0x06, 0xc3, 0x36, 0xb6, 0xa3, 0xef );
// {E77797C6-18AF-4458-BBDD-492D3F78FC8F}
EXTERN_GUID( WMT_DMOCATEGORY_VIDEO_WATERMARK, 0x187cc922, 0x8efc, 0x4404, 0x9d, 0xaf, 0x63, 0xf4, 0x83, 0x0d, 0xf1, 0xbc );
#define WM_MAX_VIDEO_STREAMS            0x3f
#define WM_MAX_STREAMS                  0x3f
HRESULT STDMETHODCALLTYPE WMIsContentProtected( const WCHAR *pwszFileName, BOOL *pfIsProtected );
HRESULT STDMETHODCALLTYPE WMCreateCertificate( IUnknown** pUnkCert );
HRESULT STDMETHODCALLTYPE WMCreateWriter( IUnknown* pUnkCert, IWMWriter **ppWriter );
HRESULT STDMETHODCALLTYPE WMCreateReader( IUnknown* pUnkCert, DWORD dwRights, IWMReader **ppReader );
HRESULT STDMETHODCALLTYPE WMCreateSyncReader( IUnknown* pUnkCert, DWORD dwRights, IWMSyncReader **ppSyncReader );
HRESULT STDMETHODCALLTYPE WMCreateEditor( IWMMetadataEditor **ppEditor );
HRESULT STDMETHODCALLTYPE WMCreateIndexer( IWMIndexer **ppIndexer );
HRESULT STDMETHODCALLTYPE WMCreateBackupRestorer( IUnknown *pCallback, IWMLicenseBackup **ppBackup );
HRESULT STDMETHODCALLTYPE WMCreateProfileManager( IWMProfileManager **ppProfileManager );
HRESULT STDMETHODCALLTYPE WMCreateWriterFileSink( IWMWriterFileSink **ppSink );
HRESULT STDMETHODCALLTYPE WMCreateWriterNetworkSink( IWMWriterNetworkSink **ppSink );
HRESULT STDMETHODCALLTYPE WMCreateWriterPushSink( IWMWriterPushSink **ppSink );
HRESULT STDMETHODCALLTYPE WMCreateDeviceRegistration( IWMDeviceRegistration **ppDevReg );
HRESULT STDMETHODCALLTYPE WMCreateDRMTranscryptor( IWMDRMTranscryptor **ppTranscryptor );
HRESULT STDMETHODCALLTYPE WMCreateDRMTranscryptionManager( IWMDRMTranscryptionManager **ppTranscryptionManager );
HRESULT STDMETHODCALLTYPE WMCreateLicenseRevocationAgent( IUnknown *pCallback, IWMLicenseRevocationAgent ** ppLicenseRevocationAgent );


extern RPC_IF_HANDLE __MIDL_itf_wmsdkidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsdkidl_0000_0000_v0_0_s_ifspec;

#ifndef __IWMMediaProps_INTERFACE_DEFINED__
#define __IWMMediaProps_INTERFACE_DEFINED__

/* interface IWMMediaProps */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMMediaProps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BCE-2B2B-11d3-B36B-00C04F6108FF")
    IWMMediaProps : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ GUID *pguidType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMediaType( 
            /* [out] */ WM_MEDIA_TYPE *pType,
            /* [out][in] */ DWORD *pcbType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMediaType( 
            /* [in] */ WM_MEDIA_TYPE *pType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMMediaPropsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMMediaProps * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMMediaProps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMMediaProps * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IWMMediaProps * This,
            /* [out] */ GUID *pguidType);
        
        HRESULT ( STDMETHODCALLTYPE *GetMediaType )( 
            IWMMediaProps * This,
            /* [out] */ WM_MEDIA_TYPE *pType,
            /* [out][in] */ DWORD *pcbType);
        
        HRESULT ( STDMETHODCALLTYPE *SetMediaType )( 
            IWMMediaProps * This,
            /* [in] */ WM_MEDIA_TYPE *pType);
        
        END_INTERFACE
    } IWMMediaPropsVtbl;

    interface IWMMediaProps
    {
        CONST_VTBL struct IWMMediaPropsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMMediaProps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMMediaProps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMMediaProps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMMediaProps_GetType(This,pguidType)	\
    ( (This)->lpVtbl -> GetType(This,pguidType) ) 

#define IWMMediaProps_GetMediaType(This,pType,pcbType)	\
    ( (This)->lpVtbl -> GetMediaType(This,pType,pcbType) ) 

#define IWMMediaProps_SetMediaType(This,pType)	\
    ( (This)->lpVtbl -> SetMediaType(This,pType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMMediaProps_INTERFACE_DEFINED__ */


#ifndef __IWMVideoMediaProps_INTERFACE_DEFINED__
#define __IWMVideoMediaProps_INTERFACE_DEFINED__

/* interface IWMVideoMediaProps */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMVideoMediaProps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BCF-2B2B-11d3-B36B-00C04F6108FF")
    IWMVideoMediaProps : public IWMMediaProps
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMaxKeyFrameSpacing( 
            /* [out] */ LONGLONG *pllTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMaxKeyFrameSpacing( 
            /* [in] */ LONGLONG llTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetQuality( 
            /* [out] */ DWORD *pdwQuality) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetQuality( 
            /* [in] */ DWORD dwQuality) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMVideoMediaPropsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMVideoMediaProps * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMVideoMediaProps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMVideoMediaProps * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IWMVideoMediaProps * This,
            /* [out] */ GUID *pguidType);
        
        HRESULT ( STDMETHODCALLTYPE *GetMediaType )( 
            IWMVideoMediaProps * This,
            /* [out] */ WM_MEDIA_TYPE *pType,
            /* [out][in] */ DWORD *pcbType);
        
        HRESULT ( STDMETHODCALLTYPE *SetMediaType )( 
            IWMVideoMediaProps * This,
            /* [in] */ WM_MEDIA_TYPE *pType);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxKeyFrameSpacing )( 
            IWMVideoMediaProps * This,
            /* [out] */ LONGLONG *pllTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetMaxKeyFrameSpacing )( 
            IWMVideoMediaProps * This,
            /* [in] */ LONGLONG llTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetQuality )( 
            IWMVideoMediaProps * This,
            /* [out] */ DWORD *pdwQuality);
        
        HRESULT ( STDMETHODCALLTYPE *SetQuality )( 
            IWMVideoMediaProps * This,
            /* [in] */ DWORD dwQuality);
        
        END_INTERFACE
    } IWMVideoMediaPropsVtbl;

    interface IWMVideoMediaProps
    {
        CONST_VTBL struct IWMVideoMediaPropsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMVideoMediaProps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMVideoMediaProps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMVideoMediaProps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMVideoMediaProps_GetType(This,pguidType)	\
    ( (This)->lpVtbl -> GetType(This,pguidType) ) 

#define IWMVideoMediaProps_GetMediaType(This,pType,pcbType)	\
    ( (This)->lpVtbl -> GetMediaType(This,pType,pcbType) ) 

#define IWMVideoMediaProps_SetMediaType(This,pType)	\
    ( (This)->lpVtbl -> SetMediaType(This,pType) ) 


#define IWMVideoMediaProps_GetMaxKeyFrameSpacing(This,pllTime)	\
    ( (This)->lpVtbl -> GetMaxKeyFrameSpacing(This,pllTime) ) 

#define IWMVideoMediaProps_SetMaxKeyFrameSpacing(This,llTime)	\
    ( (This)->lpVtbl -> SetMaxKeyFrameSpacing(This,llTime) ) 

#define IWMVideoMediaProps_GetQuality(This,pdwQuality)	\
    ( (This)->lpVtbl -> GetQuality(This,pdwQuality) ) 

#define IWMVideoMediaProps_SetQuality(This,dwQuality)	\
    ( (This)->lpVtbl -> SetQuality(This,dwQuality) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMVideoMediaProps_INTERFACE_DEFINED__ */


#ifndef __IWMWriter_INTERFACE_DEFINED__
#define __IWMWriter_INTERFACE_DEFINED__

/* interface IWMWriter */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BD4-2B2B-11d3-B36B-00C04F6108FF")
    IWMWriter : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetProfileByID( 
            /* [in] */ REFGUID guidProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProfile( 
            /* [in] */ IWMProfile *pProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOutputFilename( 
            /* [in] */ const WCHAR *pwszFilename) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInputCount( 
            /* [out] */ DWORD *pcInputs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInputProps( 
            /* [in] */ DWORD dwInputNum,
            /* [out] */ IWMInputMediaProps **ppInput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetInputProps( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ IWMInputMediaProps *pInput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInputFormatCount( 
            /* [in] */ DWORD dwInputNumber,
            /* [out] */ DWORD *pcFormats) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInputFormat( 
            /* [in] */ DWORD dwInputNumber,
            /* [in] */ DWORD dwFormatNumber,
            /* [out] */ IWMInputMediaProps **pProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginWriting( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndWriting( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AllocateSample( 
            /* [in] */ DWORD dwSampleSize,
            /* [out] */ INSSBuffer **ppSample) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteSample( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Flush( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriter * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetProfileByID )( 
            IWMWriter * This,
            /* [in] */ REFGUID guidProfile);
        
        HRESULT ( STDMETHODCALLTYPE *SetProfile )( 
            IWMWriter * This,
            /* [in] */ IWMProfile *pProfile);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputFilename )( 
            IWMWriter * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *GetInputCount )( 
            IWMWriter * This,
            /* [out] */ DWORD *pcInputs);
        
        HRESULT ( STDMETHODCALLTYPE *GetInputProps )( 
            IWMWriter * This,
            /* [in] */ DWORD dwInputNum,
            /* [out] */ IWMInputMediaProps **ppInput);
        
        HRESULT ( STDMETHODCALLTYPE *SetInputProps )( 
            IWMWriter * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ IWMInputMediaProps *pInput);
        
        HRESULT ( STDMETHODCALLTYPE *GetInputFormatCount )( 
            IWMWriter * This,
            /* [in] */ DWORD dwInputNumber,
            /* [out] */ DWORD *pcFormats);
        
        HRESULT ( STDMETHODCALLTYPE *GetInputFormat )( 
            IWMWriter * This,
            /* [in] */ DWORD dwInputNumber,
            /* [in] */ DWORD dwFormatNumber,
            /* [out] */ IWMInputMediaProps **pProps);
        
        HRESULT ( STDMETHODCALLTYPE *BeginWriting )( 
            IWMWriter * This);
        
        HRESULT ( STDMETHODCALLTYPE *EndWriting )( 
            IWMWriter * This);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateSample )( 
            IWMWriter * This,
            /* [in] */ DWORD dwSampleSize,
            /* [out] */ INSSBuffer **ppSample);
        
        HRESULT ( STDMETHODCALLTYPE *WriteSample )( 
            IWMWriter * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample);
        
        HRESULT ( STDMETHODCALLTYPE *Flush )( 
            IWMWriter * This);
        
        END_INTERFACE
    } IWMWriterVtbl;

    interface IWMWriter
    {
        CONST_VTBL struct IWMWriterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriter_SetProfileByID(This,guidProfile)	\
    ( (This)->lpVtbl -> SetProfileByID(This,guidProfile) ) 

#define IWMWriter_SetProfile(This,pProfile)	\
    ( (This)->lpVtbl -> SetProfile(This,pProfile) ) 

#define IWMWriter_SetOutputFilename(This,pwszFilename)	\
    ( (This)->lpVtbl -> SetOutputFilename(This,pwszFilename) ) 

#define IWMWriter_GetInputCount(This,pcInputs)	\
    ( (This)->lpVtbl -> GetInputCount(This,pcInputs) ) 

#define IWMWriter_GetInputProps(This,dwInputNum,ppInput)	\
    ( (This)->lpVtbl -> GetInputProps(This,dwInputNum,ppInput) ) 

#define IWMWriter_SetInputProps(This,dwInputNum,pInput)	\
    ( (This)->lpVtbl -> SetInputProps(This,dwInputNum,pInput) ) 

#define IWMWriter_GetInputFormatCount(This,dwInputNumber,pcFormats)	\
    ( (This)->lpVtbl -> GetInputFormatCount(This,dwInputNumber,pcFormats) ) 

#define IWMWriter_GetInputFormat(This,dwInputNumber,dwFormatNumber,pProps)	\
    ( (This)->lpVtbl -> GetInputFormat(This,dwInputNumber,dwFormatNumber,pProps) ) 

#define IWMWriter_BeginWriting(This)	\
    ( (This)->lpVtbl -> BeginWriting(This) ) 

#define IWMWriter_EndWriting(This)	\
    ( (This)->lpVtbl -> EndWriting(This) ) 

#define IWMWriter_AllocateSample(This,dwSampleSize,ppSample)	\
    ( (This)->lpVtbl -> AllocateSample(This,dwSampleSize,ppSample) ) 

#define IWMWriter_WriteSample(This,dwInputNum,cnsSampleTime,dwFlags,pSample)	\
    ( (This)->lpVtbl -> WriteSample(This,dwInputNum,cnsSampleTime,dwFlags,pSample) ) 

#define IWMWriter_Flush(This)	\
    ( (This)->lpVtbl -> Flush(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriter_INTERFACE_DEFINED__ */


#ifndef __IWMDRMWriter_INTERFACE_DEFINED__
#define __IWMDRMWriter_INTERFACE_DEFINED__

/* interface IWMDRMWriter */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMWriter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d6ea5dd0-12a0-43f4-90ab-a3fd451e6a07")
    IWMDRMWriter : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GenerateKeySeed( 
            /* [size_is][out] */ WCHAR *pwszKeySeed,
            /* [out][in] */ DWORD *pcwchLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GenerateKeyID( 
            /* [size_is][out] */ WCHAR *pwszKeyID,
            /* [out][in] */ DWORD *pcwchLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GenerateSigningKeyPair( 
            /* [size_is][out] */ WCHAR *pwszPrivKey,
            /* [out][in] */ DWORD *pcwchPrivKeyLength,
            /* [size_is][out] */ WCHAR *pwszPubKey,
            /* [out][in] */ DWORD *pcwchPubKeyLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDRMAttribute( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMWriterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMWriter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMWriter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMWriter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateKeySeed )( 
            IWMDRMWriter * This,
            /* [size_is][out] */ WCHAR *pwszKeySeed,
            /* [out][in] */ DWORD *pcwchLength);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateKeyID )( 
            IWMDRMWriter * This,
            /* [size_is][out] */ WCHAR *pwszKeyID,
            /* [out][in] */ DWORD *pcwchLength);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateSigningKeyPair )( 
            IWMDRMWriter * This,
            /* [size_is][out] */ WCHAR *pwszPrivKey,
            /* [out][in] */ DWORD *pcwchPrivKeyLength,
            /* [size_is][out] */ WCHAR *pwszPubKey,
            /* [out][in] */ DWORD *pcwchPubKeyLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetDRMAttribute )( 
            IWMDRMWriter * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        END_INTERFACE
    } IWMDRMWriterVtbl;

    interface IWMDRMWriter
    {
        CONST_VTBL struct IWMDRMWriterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMWriter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMWriter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMWriter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMWriter_GenerateKeySeed(This,pwszKeySeed,pcwchLength)	\
    ( (This)->lpVtbl -> GenerateKeySeed(This,pwszKeySeed,pcwchLength) ) 

#define IWMDRMWriter_GenerateKeyID(This,pwszKeyID,pcwchLength)	\
    ( (This)->lpVtbl -> GenerateKeyID(This,pwszKeyID,pcwchLength) ) 

#define IWMDRMWriter_GenerateSigningKeyPair(This,pwszPrivKey,pcwchPrivKeyLength,pwszPubKey,pcwchPubKeyLength)	\
    ( (This)->lpVtbl -> GenerateSigningKeyPair(This,pwszPrivKey,pcwchPrivKeyLength,pwszPubKey,pcwchPubKeyLength) ) 

#define IWMDRMWriter_SetDRMAttribute(This,wStreamNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetDRMAttribute(This,wStreamNum,pszName,Type,pValue,cbLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMWriter_INTERFACE_DEFINED__ */


#ifndef __IWMDRMWriter2_INTERFACE_DEFINED__
#define __IWMDRMWriter2_INTERFACE_DEFINED__

/* interface IWMDRMWriter2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMWriter2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("38ee7a94-40e2-4e10-aa3f-33fd3210ed5b")
    IWMDRMWriter2 : public IWMDRMWriter
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetWMDRMNetEncryption( 
            /* [in] */ BOOL fSamplesEncrypted,
            /* [in] */ BYTE *pbKeyID,
            /* [in] */ DWORD cbKeyID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMWriter2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMWriter2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMWriter2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMWriter2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateKeySeed )( 
            IWMDRMWriter2 * This,
            /* [size_is][out] */ WCHAR *pwszKeySeed,
            /* [out][in] */ DWORD *pcwchLength);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateKeyID )( 
            IWMDRMWriter2 * This,
            /* [size_is][out] */ WCHAR *pwszKeyID,
            /* [out][in] */ DWORD *pcwchLength);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateSigningKeyPair )( 
            IWMDRMWriter2 * This,
            /* [size_is][out] */ WCHAR *pwszPrivKey,
            /* [out][in] */ DWORD *pcwchPrivKeyLength,
            /* [size_is][out] */ WCHAR *pwszPubKey,
            /* [out][in] */ DWORD *pcwchPubKeyLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetDRMAttribute )( 
            IWMDRMWriter2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetWMDRMNetEncryption )( 
            IWMDRMWriter2 * This,
            /* [in] */ BOOL fSamplesEncrypted,
            /* [in] */ BYTE *pbKeyID,
            /* [in] */ DWORD cbKeyID);
        
        END_INTERFACE
    } IWMDRMWriter2Vtbl;

    interface IWMDRMWriter2
    {
        CONST_VTBL struct IWMDRMWriter2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMWriter2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMWriter2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMWriter2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMWriter2_GenerateKeySeed(This,pwszKeySeed,pcwchLength)	\
    ( (This)->lpVtbl -> GenerateKeySeed(This,pwszKeySeed,pcwchLength) ) 

#define IWMDRMWriter2_GenerateKeyID(This,pwszKeyID,pcwchLength)	\
    ( (This)->lpVtbl -> GenerateKeyID(This,pwszKeyID,pcwchLength) ) 

#define IWMDRMWriter2_GenerateSigningKeyPair(This,pwszPrivKey,pcwchPrivKeyLength,pwszPubKey,pcwchPubKeyLength)	\
    ( (This)->lpVtbl -> GenerateSigningKeyPair(This,pwszPrivKey,pcwchPrivKeyLength,pwszPubKey,pcwchPubKeyLength) ) 

#define IWMDRMWriter2_SetDRMAttribute(This,wStreamNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetDRMAttribute(This,wStreamNum,pszName,Type,pValue,cbLength) ) 


#define IWMDRMWriter2_SetWMDRMNetEncryption(This,fSamplesEncrypted,pbKeyID,cbKeyID)	\
    ( (This)->lpVtbl -> SetWMDRMNetEncryption(This,fSamplesEncrypted,pbKeyID,cbKeyID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMWriter2_INTERFACE_DEFINED__ */


#ifndef __IWMDRMWriter3_INTERFACE_DEFINED__
#define __IWMDRMWriter3_INTERFACE_DEFINED__

/* interface IWMDRMWriter3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMWriter3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a7184082-a4aa-4dde-ac9c-e75dbd1117ce")
    IWMDRMWriter3 : public IWMDRMWriter2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetProtectStreamSamples( 
            /* [in] */ WMDRM_IMPORT_INIT_STRUCT *pImportInitStruct) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMWriter3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMWriter3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMWriter3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMWriter3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateKeySeed )( 
            IWMDRMWriter3 * This,
            /* [size_is][out] */ WCHAR *pwszKeySeed,
            /* [out][in] */ DWORD *pcwchLength);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateKeyID )( 
            IWMDRMWriter3 * This,
            /* [size_is][out] */ WCHAR *pwszKeyID,
            /* [out][in] */ DWORD *pcwchLength);
        
        HRESULT ( STDMETHODCALLTYPE *GenerateSigningKeyPair )( 
            IWMDRMWriter3 * This,
            /* [size_is][out] */ WCHAR *pwszPrivKey,
            /* [out][in] */ DWORD *pcwchPrivKeyLength,
            /* [size_is][out] */ WCHAR *pwszPubKey,
            /* [out][in] */ DWORD *pcwchPubKeyLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetDRMAttribute )( 
            IWMDRMWriter3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetWMDRMNetEncryption )( 
            IWMDRMWriter3 * This,
            /* [in] */ BOOL fSamplesEncrypted,
            /* [in] */ BYTE *pbKeyID,
            /* [in] */ DWORD cbKeyID);
        
        HRESULT ( STDMETHODCALLTYPE *SetProtectStreamSamples )( 
            IWMDRMWriter3 * This,
            /* [in] */ WMDRM_IMPORT_INIT_STRUCT *pImportInitStruct);
        
        END_INTERFACE
    } IWMDRMWriter3Vtbl;

    interface IWMDRMWriter3
    {
        CONST_VTBL struct IWMDRMWriter3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMWriter3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMWriter3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMWriter3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMWriter3_GenerateKeySeed(This,pwszKeySeed,pcwchLength)	\
    ( (This)->lpVtbl -> GenerateKeySeed(This,pwszKeySeed,pcwchLength) ) 

#define IWMDRMWriter3_GenerateKeyID(This,pwszKeyID,pcwchLength)	\
    ( (This)->lpVtbl -> GenerateKeyID(This,pwszKeyID,pcwchLength) ) 

#define IWMDRMWriter3_GenerateSigningKeyPair(This,pwszPrivKey,pcwchPrivKeyLength,pwszPubKey,pcwchPubKeyLength)	\
    ( (This)->lpVtbl -> GenerateSigningKeyPair(This,pwszPrivKey,pcwchPrivKeyLength,pwszPubKey,pcwchPubKeyLength) ) 

#define IWMDRMWriter3_SetDRMAttribute(This,wStreamNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetDRMAttribute(This,wStreamNum,pszName,Type,pValue,cbLength) ) 


#define IWMDRMWriter3_SetWMDRMNetEncryption(This,fSamplesEncrypted,pbKeyID,cbKeyID)	\
    ( (This)->lpVtbl -> SetWMDRMNetEncryption(This,fSamplesEncrypted,pbKeyID,cbKeyID) ) 


#define IWMDRMWriter3_SetProtectStreamSamples(This,pImportInitStruct)	\
    ( (This)->lpVtbl -> SetProtectStreamSamples(This,pImportInitStruct) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMWriter3_INTERFACE_DEFINED__ */


#ifndef __IWMInputMediaProps_INTERFACE_DEFINED__
#define __IWMInputMediaProps_INTERFACE_DEFINED__

/* interface IWMInputMediaProps */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMInputMediaProps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BD5-2B2B-11d3-B36B-00C04F6108FF")
    IWMInputMediaProps : public IWMMediaProps
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetConnectionName( 
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGroupName( 
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMInputMediaPropsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMInputMediaProps * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMInputMediaProps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMInputMediaProps * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IWMInputMediaProps * This,
            /* [out] */ GUID *pguidType);
        
        HRESULT ( STDMETHODCALLTYPE *GetMediaType )( 
            IWMInputMediaProps * This,
            /* [out] */ WM_MEDIA_TYPE *pType,
            /* [out][in] */ DWORD *pcbType);
        
        HRESULT ( STDMETHODCALLTYPE *SetMediaType )( 
            IWMInputMediaProps * This,
            /* [in] */ WM_MEDIA_TYPE *pType);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectionName )( 
            IWMInputMediaProps * This,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName);
        
        HRESULT ( STDMETHODCALLTYPE *GetGroupName )( 
            IWMInputMediaProps * This,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName);
        
        END_INTERFACE
    } IWMInputMediaPropsVtbl;

    interface IWMInputMediaProps
    {
        CONST_VTBL struct IWMInputMediaPropsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMInputMediaProps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMInputMediaProps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMInputMediaProps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMInputMediaProps_GetType(This,pguidType)	\
    ( (This)->lpVtbl -> GetType(This,pguidType) ) 

#define IWMInputMediaProps_GetMediaType(This,pType,pcbType)	\
    ( (This)->lpVtbl -> GetMediaType(This,pType,pcbType) ) 

#define IWMInputMediaProps_SetMediaType(This,pType)	\
    ( (This)->lpVtbl -> SetMediaType(This,pType) ) 


#define IWMInputMediaProps_GetConnectionName(This,pwszName,pcchName)	\
    ( (This)->lpVtbl -> GetConnectionName(This,pwszName,pcchName) ) 

#define IWMInputMediaProps_GetGroupName(This,pwszName,pcchName)	\
    ( (This)->lpVtbl -> GetGroupName(This,pwszName,pcchName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMInputMediaProps_INTERFACE_DEFINED__ */


#ifndef __IWMPropertyVault_INTERFACE_DEFINED__
#define __IWMPropertyVault_INTERFACE_DEFINED__

/* interface IWMPropertyVault */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPropertyVault;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72995A79-5090-42a4-9C8C-D9D0B6D34BE5")
    IWMPropertyVault : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropertyCount( 
            /* [in] */ DWORD *pdwCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyByName( 
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE pType,
            /* [in] */ BYTE *pValue,
            /* [in] */ DWORD dwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyByIndex( 
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ LPWSTR pszName,
            /* [out][in] */ DWORD *pdwNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CopyPropertiesFrom( 
            /* [in] */ IWMPropertyVault *pIWMPropertyVault) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPropertyVaultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPropertyVault * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPropertyVault * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPropertyVault * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyCount )( 
            IWMPropertyVault * This,
            /* [in] */ DWORD *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyByName )( 
            IWMPropertyVault * This,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            IWMPropertyVault * This,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE pType,
            /* [in] */ BYTE *pValue,
            /* [in] */ DWORD dwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyByIndex )( 
            IWMPropertyVault * This,
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ LPWSTR pszName,
            /* [out][in] */ DWORD *pdwNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *CopyPropertiesFrom )( 
            IWMPropertyVault * This,
            /* [in] */ IWMPropertyVault *pIWMPropertyVault);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            IWMPropertyVault * This);
        
        END_INTERFACE
    } IWMPropertyVaultVtbl;

    interface IWMPropertyVault
    {
        CONST_VTBL struct IWMPropertyVaultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPropertyVault_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPropertyVault_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPropertyVault_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPropertyVault_GetPropertyCount(This,pdwCount)	\
    ( (This)->lpVtbl -> GetPropertyCount(This,pdwCount) ) 

#define IWMPropertyVault_GetPropertyByName(This,pszName,pType,pValue,pdwSize)	\
    ( (This)->lpVtbl -> GetPropertyByName(This,pszName,pType,pValue,pdwSize) ) 

#define IWMPropertyVault_SetProperty(This,pszName,pType,pValue,dwSize)	\
    ( (This)->lpVtbl -> SetProperty(This,pszName,pType,pValue,dwSize) ) 

#define IWMPropertyVault_GetPropertyByIndex(This,dwIndex,pszName,pdwNameLen,pType,pValue,pdwSize)	\
    ( (This)->lpVtbl -> GetPropertyByIndex(This,dwIndex,pszName,pdwNameLen,pType,pValue,pdwSize) ) 

#define IWMPropertyVault_CopyPropertiesFrom(This,pIWMPropertyVault)	\
    ( (This)->lpVtbl -> CopyPropertiesFrom(This,pIWMPropertyVault) ) 

#define IWMPropertyVault_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPropertyVault_INTERFACE_DEFINED__ */


#ifndef __IWMIStreamProps_INTERFACE_DEFINED__
#define __IWMIStreamProps_INTERFACE_DEFINED__

/* interface IWMIStreamProps */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMIStreamProps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6816dad3-2b4b-4c8e-8149-874c3483a753")
    IWMIStreamProps : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMIStreamPropsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMIStreamProps * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMIStreamProps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMIStreamProps * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            IWMIStreamProps * This,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize);
        
        END_INTERFACE
    } IWMIStreamPropsVtbl;

    interface IWMIStreamProps
    {
        CONST_VTBL struct IWMIStreamPropsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMIStreamProps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMIStreamProps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMIStreamProps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMIStreamProps_GetProperty(This,pszName,pType,pValue,pdwSize)	\
    ( (This)->lpVtbl -> GetProperty(This,pszName,pType,pValue,pdwSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMIStreamProps_INTERFACE_DEFINED__ */


#ifndef __IWMReader_INTERFACE_DEFINED__
#define __IWMReader_INTERFACE_DEFINED__

/* interface IWMReader */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BD6-2B2B-11d3-B36B-00C04F6108FF")
    IWMReader : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ const WCHAR *pwszURL,
            /* [in] */ IWMReaderCallback *pCallback,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputCount( 
            /* [out] */ DWORD *pcOutputs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputProps( 
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ IWMOutputMediaProps **ppOutput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOutputProps( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMOutputMediaProps *pOutput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputFormatCount( 
            /* [in] */ DWORD dwOutputNumber,
            /* [out] */ DWORD *pcFormats) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputFormat( 
            /* [in] */ DWORD dwOutputNumber,
            /* [in] */ DWORD dwFormatNumber,
            /* [out] */ IWMOutputMediaProps **ppProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ QWORD cnsStart,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReader * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMReader * This,
            /* [in] */ const WCHAR *pwszURL,
            /* [in] */ IWMReaderCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputCount )( 
            IWMReader * This,
            /* [out] */ DWORD *pcOutputs);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputProps )( 
            IWMReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ IWMOutputMediaProps **ppOutput);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputProps )( 
            IWMReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMOutputMediaProps *pOutput);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputFormatCount )( 
            IWMReader * This,
            /* [in] */ DWORD dwOutputNumber,
            /* [out] */ DWORD *pcFormats);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputFormat )( 
            IWMReader * This,
            /* [in] */ DWORD dwOutputNumber,
            /* [in] */ DWORD dwFormatNumber,
            /* [out] */ IWMOutputMediaProps **ppProps);
        
        HRESULT ( STDMETHODCALLTYPE *Start )( 
            IWMReader * This,
            /* [in] */ QWORD cnsStart,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IWMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IWMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IWMReader * This);
        
        END_INTERFACE
    } IWMReaderVtbl;

    interface IWMReader
    {
        CONST_VTBL struct IWMReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReader_Open(This,pwszURL,pCallback,pvContext)	\
    ( (This)->lpVtbl -> Open(This,pwszURL,pCallback,pvContext) ) 

#define IWMReader_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWMReader_GetOutputCount(This,pcOutputs)	\
    ( (This)->lpVtbl -> GetOutputCount(This,pcOutputs) ) 

#define IWMReader_GetOutputProps(This,dwOutputNum,ppOutput)	\
    ( (This)->lpVtbl -> GetOutputProps(This,dwOutputNum,ppOutput) ) 

#define IWMReader_SetOutputProps(This,dwOutputNum,pOutput)	\
    ( (This)->lpVtbl -> SetOutputProps(This,dwOutputNum,pOutput) ) 

#define IWMReader_GetOutputFormatCount(This,dwOutputNumber,pcFormats)	\
    ( (This)->lpVtbl -> GetOutputFormatCount(This,dwOutputNumber,pcFormats) ) 

#define IWMReader_GetOutputFormat(This,dwOutputNumber,dwFormatNumber,ppProps)	\
    ( (This)->lpVtbl -> GetOutputFormat(This,dwOutputNumber,dwFormatNumber,ppProps) ) 

#define IWMReader_Start(This,cnsStart,cnsDuration,fRate,pvContext)	\
    ( (This)->lpVtbl -> Start(This,cnsStart,cnsDuration,fRate,pvContext) ) 

#define IWMReader_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define IWMReader_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IWMReader_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReader_INTERFACE_DEFINED__ */


#ifndef __IWMSyncReader_INTERFACE_DEFINED__
#define __IWMSyncReader_INTERFACE_DEFINED__

/* interface IWMSyncReader */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMSyncReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9397F121-7705-4dc9-B049-98B698188414")
    IWMSyncReader : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ const WCHAR *pwszFilename) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRange( 
            /* [in] */ QWORD cnsStartTime,
            /* [in] */ LONGLONG cnsDuration) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRangeByFrame( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD qwFrameNumber,
            /* [in] */ LONGLONG cFramesToRead) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNextSample( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ INSSBuffer **ppSample,
            /* [out] */ QWORD *pcnsSampleTime,
            /* [out] */ QWORD *pcnsDuration,
            /* [out] */ DWORD *pdwFlags,
            /* [out] */ DWORD *pdwOutputNum,
            /* [out] */ WORD *pwStreamNum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStreamsSelected( 
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamSelected( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetReadStreamSamples( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fCompressed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReadStreamSamples( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfCompressed) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputSetting( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOutputSetting( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputCount( 
            /* [out] */ DWORD *pcOutputs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputProps( 
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ IWMOutputMediaProps **ppOutput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOutputProps( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMOutputMediaProps *pOutput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputFormatCount( 
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ DWORD *pcFormats) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputFormat( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ DWORD dwFormatNum,
            /* [out] */ IWMOutputMediaProps **ppProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputNumberForStream( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ DWORD *pdwOutputNum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamNumberForOutput( 
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ WORD *pwStreamNum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxOutputSampleSize( 
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxStreamSampleSize( 
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpenStream( 
            /* [in] */ IStream *pStream) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSyncReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSyncReader * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSyncReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSyncReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMSyncReader * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMSyncReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetRange )( 
            IWMSyncReader * This,
            /* [in] */ QWORD cnsStartTime,
            /* [in] */ LONGLONG cnsDuration);
        
        HRESULT ( STDMETHODCALLTYPE *SetRangeByFrame )( 
            IWMSyncReader * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD qwFrameNumber,
            /* [in] */ LONGLONG cFramesToRead);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextSample )( 
            IWMSyncReader * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ INSSBuffer **ppSample,
            /* [out] */ QWORD *pcnsSampleTime,
            /* [out] */ QWORD *pcnsDuration,
            /* [out] */ DWORD *pdwFlags,
            /* [out] */ DWORD *pdwOutputNum,
            /* [out] */ WORD *pwStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamsSelected )( 
            IWMSyncReader * This,
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamSelected )( 
            IWMSyncReader * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetReadStreamSamples )( 
            IWMSyncReader * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fCompressed);
        
        HRESULT ( STDMETHODCALLTYPE *GetReadStreamSamples )( 
            IWMSyncReader * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfCompressed);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputSetting )( 
            IWMSyncReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputSetting )( 
            IWMSyncReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputCount )( 
            IWMSyncReader * This,
            /* [out] */ DWORD *pcOutputs);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputProps )( 
            IWMSyncReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ IWMOutputMediaProps **ppOutput);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputProps )( 
            IWMSyncReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMOutputMediaProps *pOutput);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputFormatCount )( 
            IWMSyncReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ DWORD *pcFormats);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputFormat )( 
            IWMSyncReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ DWORD dwFormatNum,
            /* [out] */ IWMOutputMediaProps **ppProps);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputNumberForStream )( 
            IWMSyncReader * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ DWORD *pdwOutputNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamNumberForOutput )( 
            IWMSyncReader * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ WORD *pwStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxOutputSampleSize )( 
            IWMSyncReader * This,
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxStreamSampleSize )( 
            IWMSyncReader * This,
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *OpenStream )( 
            IWMSyncReader * This,
            /* [in] */ IStream *pStream);
        
        END_INTERFACE
    } IWMSyncReaderVtbl;

    interface IWMSyncReader
    {
        CONST_VTBL struct IWMSyncReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSyncReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSyncReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSyncReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSyncReader_Open(This,pwszFilename)	\
    ( (This)->lpVtbl -> Open(This,pwszFilename) ) 

#define IWMSyncReader_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWMSyncReader_SetRange(This,cnsStartTime,cnsDuration)	\
    ( (This)->lpVtbl -> SetRange(This,cnsStartTime,cnsDuration) ) 

#define IWMSyncReader_SetRangeByFrame(This,wStreamNum,qwFrameNumber,cFramesToRead)	\
    ( (This)->lpVtbl -> SetRangeByFrame(This,wStreamNum,qwFrameNumber,cFramesToRead) ) 

#define IWMSyncReader_GetNextSample(This,wStreamNum,ppSample,pcnsSampleTime,pcnsDuration,pdwFlags,pdwOutputNum,pwStreamNum)	\
    ( (This)->lpVtbl -> GetNextSample(This,wStreamNum,ppSample,pcnsSampleTime,pcnsDuration,pdwFlags,pdwOutputNum,pwStreamNum) ) 

#define IWMSyncReader_SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections)	\
    ( (This)->lpVtbl -> SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections) ) 

#define IWMSyncReader_GetStreamSelected(This,wStreamNum,pSelection)	\
    ( (This)->lpVtbl -> GetStreamSelected(This,wStreamNum,pSelection) ) 

#define IWMSyncReader_SetReadStreamSamples(This,wStreamNum,fCompressed)	\
    ( (This)->lpVtbl -> SetReadStreamSamples(This,wStreamNum,fCompressed) ) 

#define IWMSyncReader_GetReadStreamSamples(This,wStreamNum,pfCompressed)	\
    ( (This)->lpVtbl -> GetReadStreamSamples(This,wStreamNum,pfCompressed) ) 

#define IWMSyncReader_GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMSyncReader_SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength) ) 

#define IWMSyncReader_GetOutputCount(This,pcOutputs)	\
    ( (This)->lpVtbl -> GetOutputCount(This,pcOutputs) ) 

#define IWMSyncReader_GetOutputProps(This,dwOutputNum,ppOutput)	\
    ( (This)->lpVtbl -> GetOutputProps(This,dwOutputNum,ppOutput) ) 

#define IWMSyncReader_SetOutputProps(This,dwOutputNum,pOutput)	\
    ( (This)->lpVtbl -> SetOutputProps(This,dwOutputNum,pOutput) ) 

#define IWMSyncReader_GetOutputFormatCount(This,dwOutputNum,pcFormats)	\
    ( (This)->lpVtbl -> GetOutputFormatCount(This,dwOutputNum,pcFormats) ) 

#define IWMSyncReader_GetOutputFormat(This,dwOutputNum,dwFormatNum,ppProps)	\
    ( (This)->lpVtbl -> GetOutputFormat(This,dwOutputNum,dwFormatNum,ppProps) ) 

#define IWMSyncReader_GetOutputNumberForStream(This,wStreamNum,pdwOutputNum)	\
    ( (This)->lpVtbl -> GetOutputNumberForStream(This,wStreamNum,pdwOutputNum) ) 

#define IWMSyncReader_GetStreamNumberForOutput(This,dwOutputNum,pwStreamNum)	\
    ( (This)->lpVtbl -> GetStreamNumberForOutput(This,dwOutputNum,pwStreamNum) ) 

#define IWMSyncReader_GetMaxOutputSampleSize(This,dwOutput,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxOutputSampleSize(This,dwOutput,pcbMax) ) 

#define IWMSyncReader_GetMaxStreamSampleSize(This,wStream,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxStreamSampleSize(This,wStream,pcbMax) ) 

#define IWMSyncReader_OpenStream(This,pStream)	\
    ( (This)->lpVtbl -> OpenStream(This,pStream) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSyncReader_INTERFACE_DEFINED__ */


#ifndef __IWMSyncReader2_INTERFACE_DEFINED__
#define __IWMSyncReader2_INTERFACE_DEFINED__

/* interface IWMSyncReader2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMSyncReader2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("faed3d21-1b6b-4af7-8cb6-3e189bbc187b")
    IWMSyncReader2 : public IWMSyncReader
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetRangeByTimecode( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ WMT_TIMECODE_EXTENSION_DATA *pStart,
            /* [in] */ WMT_TIMECODE_EXTENSION_DATA *pEnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRangeByFrameEx( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD qwFrameNumber,
            /* [in] */ LONGLONG cFramesToRead,
            /* [out] */ QWORD *pcnsStartTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAllocateForOutput( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMReaderAllocatorEx *pAllocator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAllocateForOutput( 
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ IWMReaderAllocatorEx **ppAllocator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAllocateForStream( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ IWMReaderAllocatorEx *pAllocator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAllocateForStream( 
            /* [in] */ WORD dwSreamNum,
            /* [out] */ IWMReaderAllocatorEx **ppAllocator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSyncReader2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSyncReader2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSyncReader2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSyncReader2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMSyncReader2 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMSyncReader2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetRange )( 
            IWMSyncReader2 * This,
            /* [in] */ QWORD cnsStartTime,
            /* [in] */ LONGLONG cnsDuration);
        
        HRESULT ( STDMETHODCALLTYPE *SetRangeByFrame )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD qwFrameNumber,
            /* [in] */ LONGLONG cFramesToRead);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextSample )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ INSSBuffer **ppSample,
            /* [out] */ QWORD *pcnsSampleTime,
            /* [out] */ QWORD *pcnsDuration,
            /* [out] */ DWORD *pdwFlags,
            /* [out] */ DWORD *pdwOutputNum,
            /* [out] */ WORD *pwStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamsSelected )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamSelected )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetReadStreamSamples )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fCompressed);
        
        HRESULT ( STDMETHODCALLTYPE *GetReadStreamSamples )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfCompressed);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputSetting )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputSetting )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputCount )( 
            IWMSyncReader2 * This,
            /* [out] */ DWORD *pcOutputs);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputProps )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ IWMOutputMediaProps **ppOutput);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputProps )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMOutputMediaProps *pOutput);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputFormatCount )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ DWORD *pcFormats);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputFormat )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ DWORD dwFormatNum,
            /* [out] */ IWMOutputMediaProps **ppProps);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputNumberForStream )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ DWORD *pdwOutputNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamNumberForOutput )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ WORD *pwStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxOutputSampleSize )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxStreamSampleSize )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *OpenStream )( 
            IWMSyncReader2 * This,
            /* [in] */ IStream *pStream);
        
        HRESULT ( STDMETHODCALLTYPE *SetRangeByTimecode )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ WMT_TIMECODE_EXTENSION_DATA *pStart,
            /* [in] */ WMT_TIMECODE_EXTENSION_DATA *pEnd);
        
        HRESULT ( STDMETHODCALLTYPE *SetRangeByFrameEx )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD qwFrameNumber,
            /* [in] */ LONGLONG cFramesToRead,
            /* [out] */ QWORD *pcnsStartTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForOutput )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMReaderAllocatorEx *pAllocator);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForOutput )( 
            IWMSyncReader2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ IWMReaderAllocatorEx **ppAllocator);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForStream )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ IWMReaderAllocatorEx *pAllocator);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForStream )( 
            IWMSyncReader2 * This,
            /* [in] */ WORD dwSreamNum,
            /* [out] */ IWMReaderAllocatorEx **ppAllocator);
        
        END_INTERFACE
    } IWMSyncReader2Vtbl;

    interface IWMSyncReader2
    {
        CONST_VTBL struct IWMSyncReader2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSyncReader2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSyncReader2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSyncReader2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSyncReader2_Open(This,pwszFilename)	\
    ( (This)->lpVtbl -> Open(This,pwszFilename) ) 

#define IWMSyncReader2_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWMSyncReader2_SetRange(This,cnsStartTime,cnsDuration)	\
    ( (This)->lpVtbl -> SetRange(This,cnsStartTime,cnsDuration) ) 

#define IWMSyncReader2_SetRangeByFrame(This,wStreamNum,qwFrameNumber,cFramesToRead)	\
    ( (This)->lpVtbl -> SetRangeByFrame(This,wStreamNum,qwFrameNumber,cFramesToRead) ) 

#define IWMSyncReader2_GetNextSample(This,wStreamNum,ppSample,pcnsSampleTime,pcnsDuration,pdwFlags,pdwOutputNum,pwStreamNum)	\
    ( (This)->lpVtbl -> GetNextSample(This,wStreamNum,ppSample,pcnsSampleTime,pcnsDuration,pdwFlags,pdwOutputNum,pwStreamNum) ) 

#define IWMSyncReader2_SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections)	\
    ( (This)->lpVtbl -> SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections) ) 

#define IWMSyncReader2_GetStreamSelected(This,wStreamNum,pSelection)	\
    ( (This)->lpVtbl -> GetStreamSelected(This,wStreamNum,pSelection) ) 

#define IWMSyncReader2_SetReadStreamSamples(This,wStreamNum,fCompressed)	\
    ( (This)->lpVtbl -> SetReadStreamSamples(This,wStreamNum,fCompressed) ) 

#define IWMSyncReader2_GetReadStreamSamples(This,wStreamNum,pfCompressed)	\
    ( (This)->lpVtbl -> GetReadStreamSamples(This,wStreamNum,pfCompressed) ) 

#define IWMSyncReader2_GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMSyncReader2_SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength) ) 

#define IWMSyncReader2_GetOutputCount(This,pcOutputs)	\
    ( (This)->lpVtbl -> GetOutputCount(This,pcOutputs) ) 

#define IWMSyncReader2_GetOutputProps(This,dwOutputNum,ppOutput)	\
    ( (This)->lpVtbl -> GetOutputProps(This,dwOutputNum,ppOutput) ) 

#define IWMSyncReader2_SetOutputProps(This,dwOutputNum,pOutput)	\
    ( (This)->lpVtbl -> SetOutputProps(This,dwOutputNum,pOutput) ) 

#define IWMSyncReader2_GetOutputFormatCount(This,dwOutputNum,pcFormats)	\
    ( (This)->lpVtbl -> GetOutputFormatCount(This,dwOutputNum,pcFormats) ) 

#define IWMSyncReader2_GetOutputFormat(This,dwOutputNum,dwFormatNum,ppProps)	\
    ( (This)->lpVtbl -> GetOutputFormat(This,dwOutputNum,dwFormatNum,ppProps) ) 

#define IWMSyncReader2_GetOutputNumberForStream(This,wStreamNum,pdwOutputNum)	\
    ( (This)->lpVtbl -> GetOutputNumberForStream(This,wStreamNum,pdwOutputNum) ) 

#define IWMSyncReader2_GetStreamNumberForOutput(This,dwOutputNum,pwStreamNum)	\
    ( (This)->lpVtbl -> GetStreamNumberForOutput(This,dwOutputNum,pwStreamNum) ) 

#define IWMSyncReader2_GetMaxOutputSampleSize(This,dwOutput,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxOutputSampleSize(This,dwOutput,pcbMax) ) 

#define IWMSyncReader2_GetMaxStreamSampleSize(This,wStream,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxStreamSampleSize(This,wStream,pcbMax) ) 

#define IWMSyncReader2_OpenStream(This,pStream)	\
    ( (This)->lpVtbl -> OpenStream(This,pStream) ) 


#define IWMSyncReader2_SetRangeByTimecode(This,wStreamNum,pStart,pEnd)	\
    ( (This)->lpVtbl -> SetRangeByTimecode(This,wStreamNum,pStart,pEnd) ) 

#define IWMSyncReader2_SetRangeByFrameEx(This,wStreamNum,qwFrameNumber,cFramesToRead,pcnsStartTime)	\
    ( (This)->lpVtbl -> SetRangeByFrameEx(This,wStreamNum,qwFrameNumber,cFramesToRead,pcnsStartTime) ) 

#define IWMSyncReader2_SetAllocateForOutput(This,dwOutputNum,pAllocator)	\
    ( (This)->lpVtbl -> SetAllocateForOutput(This,dwOutputNum,pAllocator) ) 

#define IWMSyncReader2_GetAllocateForOutput(This,dwOutputNum,ppAllocator)	\
    ( (This)->lpVtbl -> GetAllocateForOutput(This,dwOutputNum,ppAllocator) ) 

#define IWMSyncReader2_SetAllocateForStream(This,wStreamNum,pAllocator)	\
    ( (This)->lpVtbl -> SetAllocateForStream(This,wStreamNum,pAllocator) ) 

#define IWMSyncReader2_GetAllocateForStream(This,dwSreamNum,ppAllocator)	\
    ( (This)->lpVtbl -> GetAllocateForStream(This,dwSreamNum,ppAllocator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSyncReader2_INTERFACE_DEFINED__ */


#ifndef __IWMOutputMediaProps_INTERFACE_DEFINED__
#define __IWMOutputMediaProps_INTERFACE_DEFINED__

/* interface IWMOutputMediaProps */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMOutputMediaProps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BD7-2B2B-11d3-B36B-00C04F6108FF")
    IWMOutputMediaProps : public IWMMediaProps
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStreamGroupName( 
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConnectionName( 
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMOutputMediaPropsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMOutputMediaProps * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMOutputMediaProps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMOutputMediaProps * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IWMOutputMediaProps * This,
            /* [out] */ GUID *pguidType);
        
        HRESULT ( STDMETHODCALLTYPE *GetMediaType )( 
            IWMOutputMediaProps * This,
            /* [out] */ WM_MEDIA_TYPE *pType,
            /* [out][in] */ DWORD *pcbType);
        
        HRESULT ( STDMETHODCALLTYPE *SetMediaType )( 
            IWMOutputMediaProps * This,
            /* [in] */ WM_MEDIA_TYPE *pType);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamGroupName )( 
            IWMOutputMediaProps * This,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectionName )( 
            IWMOutputMediaProps * This,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName);
        
        END_INTERFACE
    } IWMOutputMediaPropsVtbl;

    interface IWMOutputMediaProps
    {
        CONST_VTBL struct IWMOutputMediaPropsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMOutputMediaProps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMOutputMediaProps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMOutputMediaProps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMOutputMediaProps_GetType(This,pguidType)	\
    ( (This)->lpVtbl -> GetType(This,pguidType) ) 

#define IWMOutputMediaProps_GetMediaType(This,pType,pcbType)	\
    ( (This)->lpVtbl -> GetMediaType(This,pType,pcbType) ) 

#define IWMOutputMediaProps_SetMediaType(This,pType)	\
    ( (This)->lpVtbl -> SetMediaType(This,pType) ) 


#define IWMOutputMediaProps_GetStreamGroupName(This,pwszName,pcchName)	\
    ( (This)->lpVtbl -> GetStreamGroupName(This,pwszName,pcchName) ) 

#define IWMOutputMediaProps_GetConnectionName(This,pwszName,pcchName)	\
    ( (This)->lpVtbl -> GetConnectionName(This,pwszName,pcchName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMOutputMediaProps_INTERFACE_DEFINED__ */


#ifndef __IWMStatusCallback_INTERFACE_DEFINED__
#define __IWMStatusCallback_INTERFACE_DEFINED__

/* interface IWMStatusCallback */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMStatusCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d7cdc70-9888-11d3-8edc-00c04f6109cf")
    IWMStatusCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStatus( 
            /* [in] */ WMT_STATUS Status,
            /* [in] */ HRESULT hr,
            /* [in] */ WMT_ATTR_DATATYPE dwType,
            /* [in] */ BYTE *pValue,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMStatusCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMStatusCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMStatusCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMStatusCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStatus )( 
            IWMStatusCallback * This,
            /* [in] */ WMT_STATUS Status,
            /* [in] */ HRESULT hr,
            /* [in] */ WMT_ATTR_DATATYPE dwType,
            /* [in] */ BYTE *pValue,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMStatusCallbackVtbl;

    interface IWMStatusCallback
    {
        CONST_VTBL struct IWMStatusCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMStatusCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMStatusCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMStatusCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMStatusCallback_OnStatus(This,Status,hr,dwType,pValue,pvContext)	\
    ( (This)->lpVtbl -> OnStatus(This,Status,hr,dwType,pValue,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMStatusCallback_INTERFACE_DEFINED__ */


#ifndef __IWMReaderCallback_INTERFACE_DEFINED__
#define __IWMReaderCallback_INTERFACE_DEFINED__

/* interface IWMReaderCallback */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BD8-2B2B-11d3-B36B-00C04F6108FF")
    IWMReaderCallback : public IWMStatusCallback
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnSample( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStatus )( 
            IWMReaderCallback * This,
            /* [in] */ WMT_STATUS Status,
            /* [in] */ HRESULT hr,
            /* [in] */ WMT_ATTR_DATATYPE dwType,
            /* [in] */ BYTE *pValue,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *OnSample )( 
            IWMReaderCallback * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMReaderCallbackVtbl;

    interface IWMReaderCallback
    {
        CONST_VTBL struct IWMReaderCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderCallback_OnStatus(This,Status,hr,dwType,pValue,pvContext)	\
    ( (This)->lpVtbl -> OnStatus(This,Status,hr,dwType,pValue,pvContext) ) 


#define IWMReaderCallback_OnSample(This,dwOutputNum,cnsSampleTime,cnsSampleDuration,dwFlags,pSample,pvContext)	\
    ( (This)->lpVtbl -> OnSample(This,dwOutputNum,cnsSampleTime,cnsSampleDuration,dwFlags,pSample,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderCallback_INTERFACE_DEFINED__ */


#ifndef __IWMCredentialCallback_INTERFACE_DEFINED__
#define __IWMCredentialCallback_INTERFACE_DEFINED__

/* interface IWMCredentialCallback */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMCredentialCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("342e0eb7-e651-450c-975b-2ace2c90c48e")
    IWMCredentialCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AcquireCredentials( 
            /* [in] */ WCHAR *pwszRealm,
            /* [in] */ WCHAR *pwszSite,
            /* [size_is][out] */ WCHAR *pwszUser,
            /* [in] */ DWORD cchUser,
            /* [size_is][out] */ WCHAR *pwszPassword,
            /* [in] */ DWORD cchPassword,
            /* [in] */ HRESULT hrStatus,
            /* [out] */ DWORD *pdwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMCredentialCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMCredentialCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMCredentialCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMCredentialCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *AcquireCredentials )( 
            IWMCredentialCallback * This,
            /* [in] */ WCHAR *pwszRealm,
            /* [in] */ WCHAR *pwszSite,
            /* [size_is][out] */ WCHAR *pwszUser,
            /* [in] */ DWORD cchUser,
            /* [size_is][out] */ WCHAR *pwszPassword,
            /* [in] */ DWORD cchPassword,
            /* [in] */ HRESULT hrStatus,
            /* [out] */ DWORD *pdwFlags);
        
        END_INTERFACE
    } IWMCredentialCallbackVtbl;

    interface IWMCredentialCallback
    {
        CONST_VTBL struct IWMCredentialCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMCredentialCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMCredentialCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMCredentialCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMCredentialCallback_AcquireCredentials(This,pwszRealm,pwszSite,pwszUser,cchUser,pwszPassword,cchPassword,hrStatus,pdwFlags)	\
    ( (This)->lpVtbl -> AcquireCredentials(This,pwszRealm,pwszSite,pwszUser,cchUser,pwszPassword,cchPassword,hrStatus,pdwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMCredentialCallback_INTERFACE_DEFINED__ */


#ifndef __IWMMetadataEditor_INTERFACE_DEFINED__
#define __IWMMetadataEditor_INTERFACE_DEFINED__

/* interface IWMMetadataEditor */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMMetadataEditor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BD9-2B2B-11d3-B36B-00C04F6108FF")
    IWMMetadataEditor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ const WCHAR *pwszFilename) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Flush( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMMetadataEditorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMMetadataEditor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMMetadataEditor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMMetadataEditor * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMMetadataEditor * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMMetadataEditor * This);
        
        HRESULT ( STDMETHODCALLTYPE *Flush )( 
            IWMMetadataEditor * This);
        
        END_INTERFACE
    } IWMMetadataEditorVtbl;

    interface IWMMetadataEditor
    {
        CONST_VTBL struct IWMMetadataEditorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMMetadataEditor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMMetadataEditor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMMetadataEditor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMMetadataEditor_Open(This,pwszFilename)	\
    ( (This)->lpVtbl -> Open(This,pwszFilename) ) 

#define IWMMetadataEditor_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWMMetadataEditor_Flush(This)	\
    ( (This)->lpVtbl -> Flush(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMMetadataEditor_INTERFACE_DEFINED__ */


#ifndef __IWMMetadataEditor2_INTERFACE_DEFINED__
#define __IWMMetadataEditor2_INTERFACE_DEFINED__

/* interface IWMMetadataEditor2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMMetadataEditor2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("203CFFE3-2E18-4fdf-B59D-6E71530534CF")
    IWMMetadataEditor2 : public IWMMetadataEditor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OpenEx( 
            /* [in] */ const WCHAR *pwszFilename,
            /* [in] */ DWORD dwDesiredAccess,
            /* [in] */ DWORD dwShareMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMMetadataEditor2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMMetadataEditor2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMMetadataEditor2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMMetadataEditor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMMetadataEditor2 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMMetadataEditor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Flush )( 
            IWMMetadataEditor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenEx )( 
            IWMMetadataEditor2 * This,
            /* [in] */ const WCHAR *pwszFilename,
            /* [in] */ DWORD dwDesiredAccess,
            /* [in] */ DWORD dwShareMode);
        
        END_INTERFACE
    } IWMMetadataEditor2Vtbl;

    interface IWMMetadataEditor2
    {
        CONST_VTBL struct IWMMetadataEditor2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMMetadataEditor2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMMetadataEditor2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMMetadataEditor2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMMetadataEditor2_Open(This,pwszFilename)	\
    ( (This)->lpVtbl -> Open(This,pwszFilename) ) 

#define IWMMetadataEditor2_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWMMetadataEditor2_Flush(This)	\
    ( (This)->lpVtbl -> Flush(This) ) 


#define IWMMetadataEditor2_OpenEx(This,pwszFilename,dwDesiredAccess,dwShareMode)	\
    ( (This)->lpVtbl -> OpenEx(This,pwszFilename,dwDesiredAccess,dwShareMode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMMetadataEditor2_INTERFACE_DEFINED__ */


#ifndef __IWMDRMEditor_INTERFACE_DEFINED__
#define __IWMDRMEditor_INTERFACE_DEFINED__

/* interface IWMDRMEditor */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMEditor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FF130EBC-A6C3-42A6-B401-C3382C3E08B3")
    IWMDRMEditor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDRMProperty( 
            /* [in] */ LPCWSTR pwstrName,
            /* [out] */ WMT_ATTR_DATATYPE *pdwType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMEditorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMEditor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMEditor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMEditor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDRMProperty )( 
            IWMDRMEditor * This,
            /* [in] */ LPCWSTR pwstrName,
            /* [out] */ WMT_ATTR_DATATYPE *pdwType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        END_INTERFACE
    } IWMDRMEditorVtbl;

    interface IWMDRMEditor
    {
        CONST_VTBL struct IWMDRMEditorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMEditor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMEditor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMEditor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMEditor_GetDRMProperty(This,pwstrName,pdwType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetDRMProperty(This,pwstrName,pdwType,pValue,pcbLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMEditor_INTERFACE_DEFINED__ */


#ifndef __IWMHeaderInfo_INTERFACE_DEFINED__
#define __IWMHeaderInfo_INTERFACE_DEFINED__

/* interface IWMHeaderInfo */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMHeaderInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BDA-2B2B-11d3-B36B-00C04F6108FF")
    IWMHeaderInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAttributeCount( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ WORD *pcAttributes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributeByIndex( 
            /* [in] */ WORD wIndex,
            /* [out][in] */ WORD *pwStreamNum,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributeByName( 
            /* [out][in] */ WORD *pwStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAttribute( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMarkerCount( 
            /* [out] */ WORD *pcMarkers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMarker( 
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszMarkerName,
            /* [out][in] */ WORD *pcchMarkerNameLen,
            /* [out] */ QWORD *pcnsMarkerTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddMarker( 
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszMarkerName,
            /* [in] */ QWORD cnsMarkerTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveMarker( 
            /* [in] */ WORD wIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScriptCount( 
            /* [out] */ WORD *pcScripts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScript( 
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszType,
            /* [out][in] */ WORD *pcchTypeLen,
            /* [size_is][out] */ WCHAR *pwszCommand,
            /* [out][in] */ WORD *pcchCommandLen,
            /* [out] */ QWORD *pcnsScriptTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddScript( 
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszType,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszCommand,
            /* [in] */ QWORD cnsScriptTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveScript( 
            /* [in] */ WORD wIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMHeaderInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMHeaderInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMHeaderInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMHeaderInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeCount )( 
            IWMHeaderInfo * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WORD *pcAttributes);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByIndex )( 
            IWMHeaderInfo * This,
            /* [in] */ WORD wIndex,
            /* [out][in] */ WORD *pwStreamNum,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByName )( 
            IWMHeaderInfo * This,
            /* [out][in] */ WORD *pwStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttribute )( 
            IWMHeaderInfo * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMarkerCount )( 
            IWMHeaderInfo * This,
            /* [out] */ WORD *pcMarkers);
        
        HRESULT ( STDMETHODCALLTYPE *GetMarker )( 
            IWMHeaderInfo * This,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszMarkerName,
            /* [out][in] */ WORD *pcchMarkerNameLen,
            /* [out] */ QWORD *pcnsMarkerTime);
        
        HRESULT ( STDMETHODCALLTYPE *AddMarker )( 
            IWMHeaderInfo * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszMarkerName,
            /* [in] */ QWORD cnsMarkerTime);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveMarker )( 
            IWMHeaderInfo * This,
            /* [in] */ WORD wIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptCount )( 
            IWMHeaderInfo * This,
            /* [out] */ WORD *pcScripts);
        
        HRESULT ( STDMETHODCALLTYPE *GetScript )( 
            IWMHeaderInfo * This,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszType,
            /* [out][in] */ WORD *pcchTypeLen,
            /* [size_is][out] */ WCHAR *pwszCommand,
            /* [out][in] */ WORD *pcchCommandLen,
            /* [out] */ QWORD *pcnsScriptTime);
        
        HRESULT ( STDMETHODCALLTYPE *AddScript )( 
            IWMHeaderInfo * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszType,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszCommand,
            /* [in] */ QWORD cnsScriptTime);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveScript )( 
            IWMHeaderInfo * This,
            /* [in] */ WORD wIndex);
        
        END_INTERFACE
    } IWMHeaderInfoVtbl;

    interface IWMHeaderInfo
    {
        CONST_VTBL struct IWMHeaderInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMHeaderInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMHeaderInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMHeaderInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMHeaderInfo_GetAttributeCount(This,wStreamNum,pcAttributes)	\
    ( (This)->lpVtbl -> GetAttributeCount(This,wStreamNum,pcAttributes) ) 

#define IWMHeaderInfo_GetAttributeByIndex(This,wIndex,pwStreamNum,pwszName,pcchNameLen,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetAttributeByIndex(This,wIndex,pwStreamNum,pwszName,pcchNameLen,pType,pValue,pcbLength) ) 

#define IWMHeaderInfo_GetAttributeByName(This,pwStreamNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetAttributeByName(This,pwStreamNum,pszName,pType,pValue,pcbLength) ) 

#define IWMHeaderInfo_SetAttribute(This,wStreamNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetAttribute(This,wStreamNum,pszName,Type,pValue,cbLength) ) 

#define IWMHeaderInfo_GetMarkerCount(This,pcMarkers)	\
    ( (This)->lpVtbl -> GetMarkerCount(This,pcMarkers) ) 

#define IWMHeaderInfo_GetMarker(This,wIndex,pwszMarkerName,pcchMarkerNameLen,pcnsMarkerTime)	\
    ( (This)->lpVtbl -> GetMarker(This,wIndex,pwszMarkerName,pcchMarkerNameLen,pcnsMarkerTime) ) 

#define IWMHeaderInfo_AddMarker(This,pwszMarkerName,cnsMarkerTime)	\
    ( (This)->lpVtbl -> AddMarker(This,pwszMarkerName,cnsMarkerTime) ) 

#define IWMHeaderInfo_RemoveMarker(This,wIndex)	\
    ( (This)->lpVtbl -> RemoveMarker(This,wIndex) ) 

#define IWMHeaderInfo_GetScriptCount(This,pcScripts)	\
    ( (This)->lpVtbl -> GetScriptCount(This,pcScripts) ) 

#define IWMHeaderInfo_GetScript(This,wIndex,pwszType,pcchTypeLen,pwszCommand,pcchCommandLen,pcnsScriptTime)	\
    ( (This)->lpVtbl -> GetScript(This,wIndex,pwszType,pcchTypeLen,pwszCommand,pcchCommandLen,pcnsScriptTime) ) 

#define IWMHeaderInfo_AddScript(This,pwszType,pwszCommand,cnsScriptTime)	\
    ( (This)->lpVtbl -> AddScript(This,pwszType,pwszCommand,cnsScriptTime) ) 

#define IWMHeaderInfo_RemoveScript(This,wIndex)	\
    ( (This)->lpVtbl -> RemoveScript(This,wIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMHeaderInfo_INTERFACE_DEFINED__ */


#ifndef __IWMHeaderInfo2_INTERFACE_DEFINED__
#define __IWMHeaderInfo2_INTERFACE_DEFINED__

/* interface IWMHeaderInfo2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMHeaderInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("15CF9781-454E-482e-B393-85FAE487A810")
    IWMHeaderInfo2 : public IWMHeaderInfo
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCodecInfoCount( 
            /* [out] */ DWORD *pcCodecInfos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodecInfo( 
            /* [in] */ DWORD wIndex,
            /* [out][in] */ WORD *pcchName,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchDescription,
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out] */ WMT_CODEC_INFO_TYPE *pCodecType,
            /* [out][in] */ WORD *pcbCodecInfo,
            /* [size_is][out] */ BYTE *pbCodecInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMHeaderInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMHeaderInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMHeaderInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMHeaderInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeCount )( 
            IWMHeaderInfo2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WORD *pcAttributes);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByIndex )( 
            IWMHeaderInfo2 * This,
            /* [in] */ WORD wIndex,
            /* [out][in] */ WORD *pwStreamNum,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByName )( 
            IWMHeaderInfo2 * This,
            /* [out][in] */ WORD *pwStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttribute )( 
            IWMHeaderInfo2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMarkerCount )( 
            IWMHeaderInfo2 * This,
            /* [out] */ WORD *pcMarkers);
        
        HRESULT ( STDMETHODCALLTYPE *GetMarker )( 
            IWMHeaderInfo2 * This,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszMarkerName,
            /* [out][in] */ WORD *pcchMarkerNameLen,
            /* [out] */ QWORD *pcnsMarkerTime);
        
        HRESULT ( STDMETHODCALLTYPE *AddMarker )( 
            IWMHeaderInfo2 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszMarkerName,
            /* [in] */ QWORD cnsMarkerTime);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveMarker )( 
            IWMHeaderInfo2 * This,
            /* [in] */ WORD wIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptCount )( 
            IWMHeaderInfo2 * This,
            /* [out] */ WORD *pcScripts);
        
        HRESULT ( STDMETHODCALLTYPE *GetScript )( 
            IWMHeaderInfo2 * This,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszType,
            /* [out][in] */ WORD *pcchTypeLen,
            /* [size_is][out] */ WCHAR *pwszCommand,
            /* [out][in] */ WORD *pcchCommandLen,
            /* [out] */ QWORD *pcnsScriptTime);
        
        HRESULT ( STDMETHODCALLTYPE *AddScript )( 
            IWMHeaderInfo2 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszType,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszCommand,
            /* [in] */ QWORD cnsScriptTime);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveScript )( 
            IWMHeaderInfo2 * This,
            /* [in] */ WORD wIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecInfoCount )( 
            IWMHeaderInfo2 * This,
            /* [out] */ DWORD *pcCodecInfos);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecInfo )( 
            IWMHeaderInfo2 * This,
            /* [in] */ DWORD wIndex,
            /* [out][in] */ WORD *pcchName,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchDescription,
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out] */ WMT_CODEC_INFO_TYPE *pCodecType,
            /* [out][in] */ WORD *pcbCodecInfo,
            /* [size_is][out] */ BYTE *pbCodecInfo);
        
        END_INTERFACE
    } IWMHeaderInfo2Vtbl;

    interface IWMHeaderInfo2
    {
        CONST_VTBL struct IWMHeaderInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMHeaderInfo2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMHeaderInfo2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMHeaderInfo2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMHeaderInfo2_GetAttributeCount(This,wStreamNum,pcAttributes)	\
    ( (This)->lpVtbl -> GetAttributeCount(This,wStreamNum,pcAttributes) ) 

#define IWMHeaderInfo2_GetAttributeByIndex(This,wIndex,pwStreamNum,pwszName,pcchNameLen,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetAttributeByIndex(This,wIndex,pwStreamNum,pwszName,pcchNameLen,pType,pValue,pcbLength) ) 

#define IWMHeaderInfo2_GetAttributeByName(This,pwStreamNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetAttributeByName(This,pwStreamNum,pszName,pType,pValue,pcbLength) ) 

#define IWMHeaderInfo2_SetAttribute(This,wStreamNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetAttribute(This,wStreamNum,pszName,Type,pValue,cbLength) ) 

#define IWMHeaderInfo2_GetMarkerCount(This,pcMarkers)	\
    ( (This)->lpVtbl -> GetMarkerCount(This,pcMarkers) ) 

#define IWMHeaderInfo2_GetMarker(This,wIndex,pwszMarkerName,pcchMarkerNameLen,pcnsMarkerTime)	\
    ( (This)->lpVtbl -> GetMarker(This,wIndex,pwszMarkerName,pcchMarkerNameLen,pcnsMarkerTime) ) 

#define IWMHeaderInfo2_AddMarker(This,pwszMarkerName,cnsMarkerTime)	\
    ( (This)->lpVtbl -> AddMarker(This,pwszMarkerName,cnsMarkerTime) ) 

#define IWMHeaderInfo2_RemoveMarker(This,wIndex)	\
    ( (This)->lpVtbl -> RemoveMarker(This,wIndex) ) 

#define IWMHeaderInfo2_GetScriptCount(This,pcScripts)	\
    ( (This)->lpVtbl -> GetScriptCount(This,pcScripts) ) 

#define IWMHeaderInfo2_GetScript(This,wIndex,pwszType,pcchTypeLen,pwszCommand,pcchCommandLen,pcnsScriptTime)	\
    ( (This)->lpVtbl -> GetScript(This,wIndex,pwszType,pcchTypeLen,pwszCommand,pcchCommandLen,pcnsScriptTime) ) 

#define IWMHeaderInfo2_AddScript(This,pwszType,pwszCommand,cnsScriptTime)	\
    ( (This)->lpVtbl -> AddScript(This,pwszType,pwszCommand,cnsScriptTime) ) 

#define IWMHeaderInfo2_RemoveScript(This,wIndex)	\
    ( (This)->lpVtbl -> RemoveScript(This,wIndex) ) 


#define IWMHeaderInfo2_GetCodecInfoCount(This,pcCodecInfos)	\
    ( (This)->lpVtbl -> GetCodecInfoCount(This,pcCodecInfos) ) 

#define IWMHeaderInfo2_GetCodecInfo(This,wIndex,pcchName,pwszName,pcchDescription,pwszDescription,pCodecType,pcbCodecInfo,pbCodecInfo)	\
    ( (This)->lpVtbl -> GetCodecInfo(This,wIndex,pcchName,pwszName,pcchDescription,pwszDescription,pCodecType,pcbCodecInfo,pbCodecInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMHeaderInfo2_INTERFACE_DEFINED__ */


#ifndef __IWMHeaderInfo3_INTERFACE_DEFINED__
#define __IWMHeaderInfo3_INTERFACE_DEFINED__

/* interface IWMHeaderInfo3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMHeaderInfo3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("15CC68E3-27CC-4ecd-B222-3F5D02D80BD5")
    IWMHeaderInfo3 : public IWMHeaderInfo2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAttributeCountEx( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ WORD *pcAttributes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributeIndices( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pwszName,
            /* [in] */ WORD *pwLangIndex,
            /* [size_is][out] */ WORD *pwIndices,
            /* [out][in] */ WORD *pwCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributeByIndexEx( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ LPWSTR pwszName,
            /* [out][in] */ WORD *pwNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [out] */ WORD *pwLangIndex,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwDataLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModifyAttribute( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ WORD wIndex,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [in] */ WORD wLangIndex,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ DWORD dwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddAttribute( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WORD *pwIndex,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [in] */ WORD wLangIndex,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ DWORD dwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteAttribute( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ WORD wIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddCodecInfo( 
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszName,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszDescription,
            /* [in] */ WMT_CODEC_INFO_TYPE codecType,
            /* [in] */ WORD cbCodecInfo,
            /* [size_is][in] */ BYTE *pbCodecInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMHeaderInfo3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMHeaderInfo3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMHeaderInfo3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMHeaderInfo3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeCount )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WORD *pcAttributes);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByIndex )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wIndex,
            /* [out][in] */ WORD *pwStreamNum,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByName )( 
            IWMHeaderInfo3 * This,
            /* [out][in] */ WORD *pwStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttribute )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMarkerCount )( 
            IWMHeaderInfo3 * This,
            /* [out] */ WORD *pcMarkers);
        
        HRESULT ( STDMETHODCALLTYPE *GetMarker )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszMarkerName,
            /* [out][in] */ WORD *pcchMarkerNameLen,
            /* [out] */ QWORD *pcnsMarkerTime);
        
        HRESULT ( STDMETHODCALLTYPE *AddMarker )( 
            IWMHeaderInfo3 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszMarkerName,
            /* [in] */ QWORD cnsMarkerTime);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveMarker )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptCount )( 
            IWMHeaderInfo3 * This,
            /* [out] */ WORD *pcScripts);
        
        HRESULT ( STDMETHODCALLTYPE *GetScript )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszType,
            /* [out][in] */ WORD *pcchTypeLen,
            /* [size_is][out] */ WCHAR *pwszCommand,
            /* [out][in] */ WORD *pcchCommandLen,
            /* [out] */ QWORD *pcnsScriptTime);
        
        HRESULT ( STDMETHODCALLTYPE *AddScript )( 
            IWMHeaderInfo3 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszType,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszCommand,
            /* [in] */ QWORD cnsScriptTime);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveScript )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecInfoCount )( 
            IWMHeaderInfo3 * This,
            /* [out] */ DWORD *pcCodecInfos);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecInfo )( 
            IWMHeaderInfo3 * This,
            /* [in] */ DWORD wIndex,
            /* [out][in] */ WORD *pcchName,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchDescription,
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out] */ WMT_CODEC_INFO_TYPE *pCodecType,
            /* [out][in] */ WORD *pcbCodecInfo,
            /* [size_is][out] */ BYTE *pbCodecInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeCountEx )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WORD *pcAttributes);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeIndices )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pwszName,
            /* [in] */ WORD *pwLangIndex,
            /* [size_is][out] */ WORD *pwIndices,
            /* [out][in] */ WORD *pwCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByIndexEx )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ LPWSTR pwszName,
            /* [out][in] */ WORD *pwNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [out] */ WORD *pwLangIndex,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwDataLength);
        
        HRESULT ( STDMETHODCALLTYPE *ModifyAttribute )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ WORD wIndex,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [in] */ WORD wLangIndex,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ DWORD dwLength);
        
        HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WORD *pwIndex,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [in] */ WORD wLangIndex,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ DWORD dwLength);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteAttribute )( 
            IWMHeaderInfo3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ WORD wIndex);
        
        HRESULT ( STDMETHODCALLTYPE *AddCodecInfo )( 
            IWMHeaderInfo3 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszName,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszDescription,
            /* [in] */ WMT_CODEC_INFO_TYPE codecType,
            /* [in] */ WORD cbCodecInfo,
            /* [size_is][in] */ BYTE *pbCodecInfo);
        
        END_INTERFACE
    } IWMHeaderInfo3Vtbl;

    interface IWMHeaderInfo3
    {
        CONST_VTBL struct IWMHeaderInfo3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMHeaderInfo3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMHeaderInfo3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMHeaderInfo3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMHeaderInfo3_GetAttributeCount(This,wStreamNum,pcAttributes)	\
    ( (This)->lpVtbl -> GetAttributeCount(This,wStreamNum,pcAttributes) ) 

#define IWMHeaderInfo3_GetAttributeByIndex(This,wIndex,pwStreamNum,pwszName,pcchNameLen,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetAttributeByIndex(This,wIndex,pwStreamNum,pwszName,pcchNameLen,pType,pValue,pcbLength) ) 

#define IWMHeaderInfo3_GetAttributeByName(This,pwStreamNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetAttributeByName(This,pwStreamNum,pszName,pType,pValue,pcbLength) ) 

#define IWMHeaderInfo3_SetAttribute(This,wStreamNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetAttribute(This,wStreamNum,pszName,Type,pValue,cbLength) ) 

#define IWMHeaderInfo3_GetMarkerCount(This,pcMarkers)	\
    ( (This)->lpVtbl -> GetMarkerCount(This,pcMarkers) ) 

#define IWMHeaderInfo3_GetMarker(This,wIndex,pwszMarkerName,pcchMarkerNameLen,pcnsMarkerTime)	\
    ( (This)->lpVtbl -> GetMarker(This,wIndex,pwszMarkerName,pcchMarkerNameLen,pcnsMarkerTime) ) 

#define IWMHeaderInfo3_AddMarker(This,pwszMarkerName,cnsMarkerTime)	\
    ( (This)->lpVtbl -> AddMarker(This,pwszMarkerName,cnsMarkerTime) ) 

#define IWMHeaderInfo3_RemoveMarker(This,wIndex)	\
    ( (This)->lpVtbl -> RemoveMarker(This,wIndex) ) 

#define IWMHeaderInfo3_GetScriptCount(This,pcScripts)	\
    ( (This)->lpVtbl -> GetScriptCount(This,pcScripts) ) 

#define IWMHeaderInfo3_GetScript(This,wIndex,pwszType,pcchTypeLen,pwszCommand,pcchCommandLen,pcnsScriptTime)	\
    ( (This)->lpVtbl -> GetScript(This,wIndex,pwszType,pcchTypeLen,pwszCommand,pcchCommandLen,pcnsScriptTime) ) 

#define IWMHeaderInfo3_AddScript(This,pwszType,pwszCommand,cnsScriptTime)	\
    ( (This)->lpVtbl -> AddScript(This,pwszType,pwszCommand,cnsScriptTime) ) 

#define IWMHeaderInfo3_RemoveScript(This,wIndex)	\
    ( (This)->lpVtbl -> RemoveScript(This,wIndex) ) 


#define IWMHeaderInfo3_GetCodecInfoCount(This,pcCodecInfos)	\
    ( (This)->lpVtbl -> GetCodecInfoCount(This,pcCodecInfos) ) 

#define IWMHeaderInfo3_GetCodecInfo(This,wIndex,pcchName,pwszName,pcchDescription,pwszDescription,pCodecType,pcbCodecInfo,pbCodecInfo)	\
    ( (This)->lpVtbl -> GetCodecInfo(This,wIndex,pcchName,pwszName,pcchDescription,pwszDescription,pCodecType,pcbCodecInfo,pbCodecInfo) ) 


#define IWMHeaderInfo3_GetAttributeCountEx(This,wStreamNum,pcAttributes)	\
    ( (This)->lpVtbl -> GetAttributeCountEx(This,wStreamNum,pcAttributes) ) 

#define IWMHeaderInfo3_GetAttributeIndices(This,wStreamNum,pwszName,pwLangIndex,pwIndices,pwCount)	\
    ( (This)->lpVtbl -> GetAttributeIndices(This,wStreamNum,pwszName,pwLangIndex,pwIndices,pwCount) ) 

#define IWMHeaderInfo3_GetAttributeByIndexEx(This,wStreamNum,wIndex,pwszName,pwNameLen,pType,pwLangIndex,pValue,pdwDataLength)	\
    ( (This)->lpVtbl -> GetAttributeByIndexEx(This,wStreamNum,wIndex,pwszName,pwNameLen,pType,pwLangIndex,pValue,pdwDataLength) ) 

#define IWMHeaderInfo3_ModifyAttribute(This,wStreamNum,wIndex,Type,wLangIndex,pValue,dwLength)	\
    ( (This)->lpVtbl -> ModifyAttribute(This,wStreamNum,wIndex,Type,wLangIndex,pValue,dwLength) ) 

#define IWMHeaderInfo3_AddAttribute(This,wStreamNum,pszName,pwIndex,Type,wLangIndex,pValue,dwLength)	\
    ( (This)->lpVtbl -> AddAttribute(This,wStreamNum,pszName,pwIndex,Type,wLangIndex,pValue,dwLength) ) 

#define IWMHeaderInfo3_DeleteAttribute(This,wStreamNum,wIndex)	\
    ( (This)->lpVtbl -> DeleteAttribute(This,wStreamNum,wIndex) ) 

#define IWMHeaderInfo3_AddCodecInfo(This,pwszName,pwszDescription,codecType,cbCodecInfo,pbCodecInfo)	\
    ( (This)->lpVtbl -> AddCodecInfo(This,pwszName,pwszDescription,codecType,cbCodecInfo,pbCodecInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMHeaderInfo3_INTERFACE_DEFINED__ */


#ifndef __IWMProfileManager_INTERFACE_DEFINED__
#define __IWMProfileManager_INTERFACE_DEFINED__

/* interface IWMProfileManager */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMProfileManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d16679f2-6ca0-472d-8d31-2f5d55aee155")
    IWMProfileManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateEmptyProfile( 
            /* [in] */ WMT_VERSION dwVersion,
            /* [out] */ IWMProfile **ppProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadProfileByID( 
            /* [in] */ REFGUID guidProfile,
            /* [out] */ IWMProfile **ppProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadProfileByData( 
            /* [in] */ const WCHAR *pwszProfile,
            /* [out] */ IWMProfile **ppProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveProfile( 
            /* [in] */ IWMProfile *pIWMProfile,
            /* [in] */ WCHAR *pwszProfile,
            /* [out][in] */ DWORD *pdwLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSystemProfileCount( 
            /* [out] */ DWORD *pcProfiles) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadSystemProfile( 
            /* [in] */ DWORD dwProfileIndex,
            /* [out] */ IWMProfile **ppProfile) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMProfileManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMProfileManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMProfileManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMProfileManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEmptyProfile )( 
            IWMProfileManager * This,
            /* [in] */ WMT_VERSION dwVersion,
            /* [out] */ IWMProfile **ppProfile);
        
        HRESULT ( STDMETHODCALLTYPE *LoadProfileByID )( 
            IWMProfileManager * This,
            /* [in] */ REFGUID guidProfile,
            /* [out] */ IWMProfile **ppProfile);
        
        HRESULT ( STDMETHODCALLTYPE *LoadProfileByData )( 
            IWMProfileManager * This,
            /* [in] */ const WCHAR *pwszProfile,
            /* [out] */ IWMProfile **ppProfile);
        
        HRESULT ( STDMETHODCALLTYPE *SaveProfile )( 
            IWMProfileManager * This,
            /* [in] */ IWMProfile *pIWMProfile,
            /* [in] */ WCHAR *pwszProfile,
            /* [out][in] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemProfileCount )( 
            IWMProfileManager * This,
            /* [out] */ DWORD *pcProfiles);
        
        HRESULT ( STDMETHODCALLTYPE *LoadSystemProfile )( 
            IWMProfileManager * This,
            /* [in] */ DWORD dwProfileIndex,
            /* [out] */ IWMProfile **ppProfile);
        
        END_INTERFACE
    } IWMProfileManagerVtbl;

    interface IWMProfileManager
    {
        CONST_VTBL struct IWMProfileManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMProfileManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMProfileManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMProfileManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMProfileManager_CreateEmptyProfile(This,dwVersion,ppProfile)	\
    ( (This)->lpVtbl -> CreateEmptyProfile(This,dwVersion,ppProfile) ) 

#define IWMProfileManager_LoadProfileByID(This,guidProfile,ppProfile)	\
    ( (This)->lpVtbl -> LoadProfileByID(This,guidProfile,ppProfile) ) 

#define IWMProfileManager_LoadProfileByData(This,pwszProfile,ppProfile)	\
    ( (This)->lpVtbl -> LoadProfileByData(This,pwszProfile,ppProfile) ) 

#define IWMProfileManager_SaveProfile(This,pIWMProfile,pwszProfile,pdwLength)	\
    ( (This)->lpVtbl -> SaveProfile(This,pIWMProfile,pwszProfile,pdwLength) ) 

#define IWMProfileManager_GetSystemProfileCount(This,pcProfiles)	\
    ( (This)->lpVtbl -> GetSystemProfileCount(This,pcProfiles) ) 

#define IWMProfileManager_LoadSystemProfile(This,dwProfileIndex,ppProfile)	\
    ( (This)->lpVtbl -> LoadSystemProfile(This,dwProfileIndex,ppProfile) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMProfileManager_INTERFACE_DEFINED__ */


#ifndef __IWMProfileManager2_INTERFACE_DEFINED__
#define __IWMProfileManager2_INTERFACE_DEFINED__

/* interface IWMProfileManager2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMProfileManager2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7A924E51-73C1-494d-8019-23D37ED9B89A")
    IWMProfileManager2 : public IWMProfileManager
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSystemProfileVersion( 
            WMT_VERSION *pdwVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSystemProfileVersion( 
            WMT_VERSION dwVersion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMProfileManager2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMProfileManager2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMProfileManager2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMProfileManager2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEmptyProfile )( 
            IWMProfileManager2 * This,
            /* [in] */ WMT_VERSION dwVersion,
            /* [out] */ IWMProfile **ppProfile);
        
        HRESULT ( STDMETHODCALLTYPE *LoadProfileByID )( 
            IWMProfileManager2 * This,
            /* [in] */ REFGUID guidProfile,
            /* [out] */ IWMProfile **ppProfile);
        
        HRESULT ( STDMETHODCALLTYPE *LoadProfileByData )( 
            IWMProfileManager2 * This,
            /* [in] */ const WCHAR *pwszProfile,
            /* [out] */ IWMProfile **ppProfile);
        
        HRESULT ( STDMETHODCALLTYPE *SaveProfile )( 
            IWMProfileManager2 * This,
            /* [in] */ IWMProfile *pIWMProfile,
            /* [in] */ WCHAR *pwszProfile,
            /* [out][in] */ DWORD *pdwLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemProfileCount )( 
            IWMProfileManager2 * This,
            /* [out] */ DWORD *pcProfiles);
        
        HRESULT ( STDMETHODCALLTYPE *LoadSystemProfile )( 
            IWMProfileManager2 * This,
            /* [in] */ DWORD dwProfileIndex,
            /* [out] */ IWMProfile **ppProfile);
        
        HRESULT ( STDMETHODCALLTYPE *GetSystemProfileVersion )( 
            IWMProfileManager2 * This,
            WMT_VERSION *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *SetSystemProfileVersion )( 
            IWMProfileManager2 * This,
            WMT_VERSION dwVersion);
        
        END_INTERFACE
    } IWMProfileManager2Vtbl;

    interface IWMProfileManager2
    {
        CONST_VTBL struct IWMProfileManager2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMProfileManager2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMProfileManager2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMProfileManager2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMProfileManager2_CreateEmptyProfile(This,dwVersion,ppProfile)	\
    ( (This)->lpVtbl -> CreateEmptyProfile(This,dwVersion,ppProfile) ) 

#define IWMProfileManager2_LoadProfileByID(This,guidProfile,ppProfile)	\
    ( (This)->lpVtbl -> LoadProfileByID(This,guidProfile,ppProfile) ) 

#define IWMProfileManager2_LoadProfileByData(This,pwszProfile,ppProfile)	\
    ( (This)->lpVtbl -> LoadProfileByData(This,pwszProfile,ppProfile) ) 

#define IWMProfileManager2_SaveProfile(This,pIWMProfile,pwszProfile,pdwLength)	\
    ( (This)->lpVtbl -> SaveProfile(This,pIWMProfile,pwszProfile,pdwLength) ) 

#define IWMProfileManager2_GetSystemProfileCount(This,pcProfiles)	\
    ( (This)->lpVtbl -> GetSystemProfileCount(This,pcProfiles) ) 

#define IWMProfileManager2_LoadSystemProfile(This,dwProfileIndex,ppProfile)	\
    ( (This)->lpVtbl -> LoadSystemProfile(This,dwProfileIndex,ppProfile) ) 


#define IWMProfileManager2_GetSystemProfileVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetSystemProfileVersion(This,pdwVersion) ) 

#define IWMProfileManager2_SetSystemProfileVersion(This,dwVersion)	\
    ( (This)->lpVtbl -> SetSystemProfileVersion(This,dwVersion) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMProfileManager2_INTERFACE_DEFINED__ */


#ifndef __IWMProfileManagerLanguage_INTERFACE_DEFINED__
#define __IWMProfileManagerLanguage_INTERFACE_DEFINED__

/* interface IWMProfileManagerLanguage */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMProfileManagerLanguage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA4DCC78-7EE0-4ab8-B27A-DBCE8BC51454")
    IWMProfileManagerLanguage : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUserLanguageID( 
            WORD *wLangID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetUserLanguageID( 
            WORD wLangID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMProfileManagerLanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMProfileManagerLanguage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMProfileManagerLanguage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMProfileManagerLanguage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserLanguageID )( 
            IWMProfileManagerLanguage * This,
            WORD *wLangID);
        
        HRESULT ( STDMETHODCALLTYPE *SetUserLanguageID )( 
            IWMProfileManagerLanguage * This,
            WORD wLangID);
        
        END_INTERFACE
    } IWMProfileManagerLanguageVtbl;

    interface IWMProfileManagerLanguage
    {
        CONST_VTBL struct IWMProfileManagerLanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMProfileManagerLanguage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMProfileManagerLanguage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMProfileManagerLanguage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMProfileManagerLanguage_GetUserLanguageID(This,wLangID)	\
    ( (This)->lpVtbl -> GetUserLanguageID(This,wLangID) ) 

#define IWMProfileManagerLanguage_SetUserLanguageID(This,wLangID)	\
    ( (This)->lpVtbl -> SetUserLanguageID(This,wLangID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMProfileManagerLanguage_INTERFACE_DEFINED__ */


#ifndef __IWMProfile_INTERFACE_DEFINED__
#define __IWMProfile_INTERFACE_DEFINED__

/* interface IWMProfile */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMProfile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BDB-2B2B-11d3-B36B-00C04F6108FF")
    IWMProfile : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetVersion( 
            /* [out] */ WMT_VERSION *pdwVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ DWORD *pcchName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetName( 
            /* [in] */ const WCHAR *pwszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDescription( 
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out][in] */ DWORD *pcchDescription) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDescription( 
            /* [in] */ const WCHAR *pwszDescription) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamCount( 
            /* [out] */ DWORD *pcStreams) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStream( 
            /* [in] */ DWORD dwStreamIndex,
            /* [out] */ IWMStreamConfig **ppConfig) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamByNumber( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ IWMStreamConfig **ppConfig) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveStream( 
            /* [in] */ IWMStreamConfig *pConfig) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveStreamByNumber( 
            /* [in] */ WORD wStreamNum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddStream( 
            /* [in] */ IWMStreamConfig *pConfig) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReconfigStream( 
            /* [in] */ IWMStreamConfig *pConfig) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateNewStream( 
            /* [in] */ REFGUID guidStreamType,
            /* [out] */ IWMStreamConfig **ppConfig) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMutualExclusionCount( 
            /* [out] */ DWORD *pcME) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMutualExclusion( 
            /* [in] */ DWORD dwMEIndex,
            /* [out] */ IWMMutualExclusion **ppME) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveMutualExclusion( 
            /* [in] */ IWMMutualExclusion *pME) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddMutualExclusion( 
            /* [in] */ IWMMutualExclusion *pME) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateNewMutualExclusion( 
            /* [out] */ IWMMutualExclusion **ppME) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMProfileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMProfile * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMProfile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMProfile * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            IWMProfile * This,
            /* [out] */ WMT_VERSION *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IWMProfile * This,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ DWORD *pcchName);
        
        HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IWMProfile * This,
            /* [in] */ const WCHAR *pwszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IWMProfile * This,
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out][in] */ DWORD *pcchDescription);
        
        HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IWMProfile * This,
            /* [in] */ const WCHAR *pwszDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamCount )( 
            IWMProfile * This,
            /* [out] */ DWORD *pcStreams);
        
        HRESULT ( STDMETHODCALLTYPE *GetStream )( 
            IWMProfile * This,
            /* [in] */ DWORD dwStreamIndex,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamByNumber )( 
            IWMProfile * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStream )( 
            IWMProfile * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStreamByNumber )( 
            IWMProfile * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *AddStream )( 
            IWMProfile * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *ReconfigStream )( 
            IWMProfile * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNewStream )( 
            IWMProfile * This,
            /* [in] */ REFGUID guidStreamType,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *GetMutualExclusionCount )( 
            IWMProfile * This,
            /* [out] */ DWORD *pcME);
        
        HRESULT ( STDMETHODCALLTYPE *GetMutualExclusion )( 
            IWMProfile * This,
            /* [in] */ DWORD dwMEIndex,
            /* [out] */ IWMMutualExclusion **ppME);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveMutualExclusion )( 
            IWMProfile * This,
            /* [in] */ IWMMutualExclusion *pME);
        
        HRESULT ( STDMETHODCALLTYPE *AddMutualExclusion )( 
            IWMProfile * This,
            /* [in] */ IWMMutualExclusion *pME);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNewMutualExclusion )( 
            IWMProfile * This,
            /* [out] */ IWMMutualExclusion **ppME);
        
        END_INTERFACE
    } IWMProfileVtbl;

    interface IWMProfile
    {
        CONST_VTBL struct IWMProfileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMProfile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMProfile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMProfile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMProfile_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IWMProfile_GetName(This,pwszName,pcchName)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,pcchName) ) 

#define IWMProfile_SetName(This,pwszName)	\
    ( (This)->lpVtbl -> SetName(This,pwszName) ) 

#define IWMProfile_GetDescription(This,pwszDescription,pcchDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pwszDescription,pcchDescription) ) 

#define IWMProfile_SetDescription(This,pwszDescription)	\
    ( (This)->lpVtbl -> SetDescription(This,pwszDescription) ) 

#define IWMProfile_GetStreamCount(This,pcStreams)	\
    ( (This)->lpVtbl -> GetStreamCount(This,pcStreams) ) 

#define IWMProfile_GetStream(This,dwStreamIndex,ppConfig)	\
    ( (This)->lpVtbl -> GetStream(This,dwStreamIndex,ppConfig) ) 

#define IWMProfile_GetStreamByNumber(This,wStreamNum,ppConfig)	\
    ( (This)->lpVtbl -> GetStreamByNumber(This,wStreamNum,ppConfig) ) 

#define IWMProfile_RemoveStream(This,pConfig)	\
    ( (This)->lpVtbl -> RemoveStream(This,pConfig) ) 

#define IWMProfile_RemoveStreamByNumber(This,wStreamNum)	\
    ( (This)->lpVtbl -> RemoveStreamByNumber(This,wStreamNum) ) 

#define IWMProfile_AddStream(This,pConfig)	\
    ( (This)->lpVtbl -> AddStream(This,pConfig) ) 

#define IWMProfile_ReconfigStream(This,pConfig)	\
    ( (This)->lpVtbl -> ReconfigStream(This,pConfig) ) 

#define IWMProfile_CreateNewStream(This,guidStreamType,ppConfig)	\
    ( (This)->lpVtbl -> CreateNewStream(This,guidStreamType,ppConfig) ) 

#define IWMProfile_GetMutualExclusionCount(This,pcME)	\
    ( (This)->lpVtbl -> GetMutualExclusionCount(This,pcME) ) 

#define IWMProfile_GetMutualExclusion(This,dwMEIndex,ppME)	\
    ( (This)->lpVtbl -> GetMutualExclusion(This,dwMEIndex,ppME) ) 

#define IWMProfile_RemoveMutualExclusion(This,pME)	\
    ( (This)->lpVtbl -> RemoveMutualExclusion(This,pME) ) 

#define IWMProfile_AddMutualExclusion(This,pME)	\
    ( (This)->lpVtbl -> AddMutualExclusion(This,pME) ) 

#define IWMProfile_CreateNewMutualExclusion(This,ppME)	\
    ( (This)->lpVtbl -> CreateNewMutualExclusion(This,ppME) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMProfile_INTERFACE_DEFINED__ */


#ifndef __IWMProfile2_INTERFACE_DEFINED__
#define __IWMProfile2_INTERFACE_DEFINED__

/* interface IWMProfile2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMProfile2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("07E72D33-D94E-4be7-8843-60AE5FF7E5F5")
    IWMProfile2 : public IWMProfile
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetProfileID( 
            /* [out] */ GUID *pguidID) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMProfile2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMProfile2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMProfile2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMProfile2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            IWMProfile2 * This,
            /* [out] */ WMT_VERSION *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IWMProfile2 * This,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ DWORD *pcchName);
        
        HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IWMProfile2 * This,
            /* [in] */ const WCHAR *pwszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IWMProfile2 * This,
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out][in] */ DWORD *pcchDescription);
        
        HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IWMProfile2 * This,
            /* [in] */ const WCHAR *pwszDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamCount )( 
            IWMProfile2 * This,
            /* [out] */ DWORD *pcStreams);
        
        HRESULT ( STDMETHODCALLTYPE *GetStream )( 
            IWMProfile2 * This,
            /* [in] */ DWORD dwStreamIndex,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamByNumber )( 
            IWMProfile2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStream )( 
            IWMProfile2 * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStreamByNumber )( 
            IWMProfile2 * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *AddStream )( 
            IWMProfile2 * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *ReconfigStream )( 
            IWMProfile2 * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNewStream )( 
            IWMProfile2 * This,
            /* [in] */ REFGUID guidStreamType,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *GetMutualExclusionCount )( 
            IWMProfile2 * This,
            /* [out] */ DWORD *pcME);
        
        HRESULT ( STDMETHODCALLTYPE *GetMutualExclusion )( 
            IWMProfile2 * This,
            /* [in] */ DWORD dwMEIndex,
            /* [out] */ IWMMutualExclusion **ppME);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveMutualExclusion )( 
            IWMProfile2 * This,
            /* [in] */ IWMMutualExclusion *pME);
        
        HRESULT ( STDMETHODCALLTYPE *AddMutualExclusion )( 
            IWMProfile2 * This,
            /* [in] */ IWMMutualExclusion *pME);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNewMutualExclusion )( 
            IWMProfile2 * This,
            /* [out] */ IWMMutualExclusion **ppME);
        
        HRESULT ( STDMETHODCALLTYPE *GetProfileID )( 
            IWMProfile2 * This,
            /* [out] */ GUID *pguidID);
        
        END_INTERFACE
    } IWMProfile2Vtbl;

    interface IWMProfile2
    {
        CONST_VTBL struct IWMProfile2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMProfile2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMProfile2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMProfile2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMProfile2_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IWMProfile2_GetName(This,pwszName,pcchName)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,pcchName) ) 

#define IWMProfile2_SetName(This,pwszName)	\
    ( (This)->lpVtbl -> SetName(This,pwszName) ) 

#define IWMProfile2_GetDescription(This,pwszDescription,pcchDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pwszDescription,pcchDescription) ) 

#define IWMProfile2_SetDescription(This,pwszDescription)	\
    ( (This)->lpVtbl -> SetDescription(This,pwszDescription) ) 

#define IWMProfile2_GetStreamCount(This,pcStreams)	\
    ( (This)->lpVtbl -> GetStreamCount(This,pcStreams) ) 

#define IWMProfile2_GetStream(This,dwStreamIndex,ppConfig)	\
    ( (This)->lpVtbl -> GetStream(This,dwStreamIndex,ppConfig) ) 

#define IWMProfile2_GetStreamByNumber(This,wStreamNum,ppConfig)	\
    ( (This)->lpVtbl -> GetStreamByNumber(This,wStreamNum,ppConfig) ) 

#define IWMProfile2_RemoveStream(This,pConfig)	\
    ( (This)->lpVtbl -> RemoveStream(This,pConfig) ) 

#define IWMProfile2_RemoveStreamByNumber(This,wStreamNum)	\
    ( (This)->lpVtbl -> RemoveStreamByNumber(This,wStreamNum) ) 

#define IWMProfile2_AddStream(This,pConfig)	\
    ( (This)->lpVtbl -> AddStream(This,pConfig) ) 

#define IWMProfile2_ReconfigStream(This,pConfig)	\
    ( (This)->lpVtbl -> ReconfigStream(This,pConfig) ) 

#define IWMProfile2_CreateNewStream(This,guidStreamType,ppConfig)	\
    ( (This)->lpVtbl -> CreateNewStream(This,guidStreamType,ppConfig) ) 

#define IWMProfile2_GetMutualExclusionCount(This,pcME)	\
    ( (This)->lpVtbl -> GetMutualExclusionCount(This,pcME) ) 

#define IWMProfile2_GetMutualExclusion(This,dwMEIndex,ppME)	\
    ( (This)->lpVtbl -> GetMutualExclusion(This,dwMEIndex,ppME) ) 

#define IWMProfile2_RemoveMutualExclusion(This,pME)	\
    ( (This)->lpVtbl -> RemoveMutualExclusion(This,pME) ) 

#define IWMProfile2_AddMutualExclusion(This,pME)	\
    ( (This)->lpVtbl -> AddMutualExclusion(This,pME) ) 

#define IWMProfile2_CreateNewMutualExclusion(This,ppME)	\
    ( (This)->lpVtbl -> CreateNewMutualExclusion(This,ppME) ) 


#define IWMProfile2_GetProfileID(This,pguidID)	\
    ( (This)->lpVtbl -> GetProfileID(This,pguidID) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMProfile2_INTERFACE_DEFINED__ */


#ifndef __IWMProfile3_INTERFACE_DEFINED__
#define __IWMProfile3_INTERFACE_DEFINED__

/* interface IWMProfile3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMProfile3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00EF96CC-A461-4546-8BCD-C9A28F0E06F5")
    IWMProfile3 : public IWMProfile2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStorageFormat( 
            /* [out] */ WMT_STORAGE_FORMAT *pnStorageFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStorageFormat( 
            /* [in] */ WMT_STORAGE_FORMAT nStorageFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBandwidthSharingCount( 
            /* [out] */ DWORD *pcBS) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBandwidthSharing( 
            /* [in] */ DWORD dwBSIndex,
            /* [out] */ IWMBandwidthSharing **ppBS) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveBandwidthSharing( 
            /* [in] */ IWMBandwidthSharing *pBS) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddBandwidthSharing( 
            /* [in] */ IWMBandwidthSharing *pBS) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateNewBandwidthSharing( 
            /* [out] */ IWMBandwidthSharing **ppBS) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamPrioritization( 
            /* [out] */ IWMStreamPrioritization **ppSP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStreamPrioritization( 
            /* [in] */ IWMStreamPrioritization *pSP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveStreamPrioritization( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateNewStreamPrioritization( 
            /* [out] */ IWMStreamPrioritization **ppSP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExpectedPacketCount( 
            /* [in] */ QWORD msDuration,
            /* [out] */ QWORD *pcPackets) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMProfile3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMProfile3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMProfile3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMProfile3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetVersion )( 
            IWMProfile3 * This,
            /* [out] */ WMT_VERSION *pdwVersion);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IWMProfile3 * This,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ DWORD *pcchName);
        
        HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IWMProfile3 * This,
            /* [in] */ const WCHAR *pwszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            IWMProfile3 * This,
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out][in] */ DWORD *pcchDescription);
        
        HRESULT ( STDMETHODCALLTYPE *SetDescription )( 
            IWMProfile3 * This,
            /* [in] */ const WCHAR *pwszDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamCount )( 
            IWMProfile3 * This,
            /* [out] */ DWORD *pcStreams);
        
        HRESULT ( STDMETHODCALLTYPE *GetStream )( 
            IWMProfile3 * This,
            /* [in] */ DWORD dwStreamIndex,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamByNumber )( 
            IWMProfile3 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStream )( 
            IWMProfile3 * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStreamByNumber )( 
            IWMProfile3 * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *AddStream )( 
            IWMProfile3 * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *ReconfigStream )( 
            IWMProfile3 * This,
            /* [in] */ IWMStreamConfig *pConfig);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNewStream )( 
            IWMProfile3 * This,
            /* [in] */ REFGUID guidStreamType,
            /* [out] */ IWMStreamConfig **ppConfig);
        
        HRESULT ( STDMETHODCALLTYPE *GetMutualExclusionCount )( 
            IWMProfile3 * This,
            /* [out] */ DWORD *pcME);
        
        HRESULT ( STDMETHODCALLTYPE *GetMutualExclusion )( 
            IWMProfile3 * This,
            /* [in] */ DWORD dwMEIndex,
            /* [out] */ IWMMutualExclusion **ppME);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveMutualExclusion )( 
            IWMProfile3 * This,
            /* [in] */ IWMMutualExclusion *pME);
        
        HRESULT ( STDMETHODCALLTYPE *AddMutualExclusion )( 
            IWMProfile3 * This,
            /* [in] */ IWMMutualExclusion *pME);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNewMutualExclusion )( 
            IWMProfile3 * This,
            /* [out] */ IWMMutualExclusion **ppME);
        
        HRESULT ( STDMETHODCALLTYPE *GetProfileID )( 
            IWMProfile3 * This,
            /* [out] */ GUID *pguidID);
        
        HRESULT ( STDMETHODCALLTYPE *GetStorageFormat )( 
            IWMProfile3 * This,
            /* [out] */ WMT_STORAGE_FORMAT *pnStorageFormat);
        
        HRESULT ( STDMETHODCALLTYPE *SetStorageFormat )( 
            IWMProfile3 * This,
            /* [in] */ WMT_STORAGE_FORMAT nStorageFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetBandwidthSharingCount )( 
            IWMProfile3 * This,
            /* [out] */ DWORD *pcBS);
        
        HRESULT ( STDMETHODCALLTYPE *GetBandwidthSharing )( 
            IWMProfile3 * This,
            /* [in] */ DWORD dwBSIndex,
            /* [out] */ IWMBandwidthSharing **ppBS);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveBandwidthSharing )( 
            IWMProfile3 * This,
            /* [in] */ IWMBandwidthSharing *pBS);
        
        HRESULT ( STDMETHODCALLTYPE *AddBandwidthSharing )( 
            IWMProfile3 * This,
            /* [in] */ IWMBandwidthSharing *pBS);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNewBandwidthSharing )( 
            IWMProfile3 * This,
            /* [out] */ IWMBandwidthSharing **ppBS);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamPrioritization )( 
            IWMProfile3 * This,
            /* [out] */ IWMStreamPrioritization **ppSP);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamPrioritization )( 
            IWMProfile3 * This,
            /* [in] */ IWMStreamPrioritization *pSP);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStreamPrioritization )( 
            IWMProfile3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateNewStreamPrioritization )( 
            IWMProfile3 * This,
            /* [out] */ IWMStreamPrioritization **ppSP);
        
        HRESULT ( STDMETHODCALLTYPE *GetExpectedPacketCount )( 
            IWMProfile3 * This,
            /* [in] */ QWORD msDuration,
            /* [out] */ QWORD *pcPackets);
        
        END_INTERFACE
    } IWMProfile3Vtbl;

    interface IWMProfile3
    {
        CONST_VTBL struct IWMProfile3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMProfile3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMProfile3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMProfile3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMProfile3_GetVersion(This,pdwVersion)	\
    ( (This)->lpVtbl -> GetVersion(This,pdwVersion) ) 

#define IWMProfile3_GetName(This,pwszName,pcchName)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,pcchName) ) 

#define IWMProfile3_SetName(This,pwszName)	\
    ( (This)->lpVtbl -> SetName(This,pwszName) ) 

#define IWMProfile3_GetDescription(This,pwszDescription,pcchDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pwszDescription,pcchDescription) ) 

#define IWMProfile3_SetDescription(This,pwszDescription)	\
    ( (This)->lpVtbl -> SetDescription(This,pwszDescription) ) 

#define IWMProfile3_GetStreamCount(This,pcStreams)	\
    ( (This)->lpVtbl -> GetStreamCount(This,pcStreams) ) 

#define IWMProfile3_GetStream(This,dwStreamIndex,ppConfig)	\
    ( (This)->lpVtbl -> GetStream(This,dwStreamIndex,ppConfig) ) 

#define IWMProfile3_GetStreamByNumber(This,wStreamNum,ppConfig)	\
    ( (This)->lpVtbl -> GetStreamByNumber(This,wStreamNum,ppConfig) ) 

#define IWMProfile3_RemoveStream(This,pConfig)	\
    ( (This)->lpVtbl -> RemoveStream(This,pConfig) ) 

#define IWMProfile3_RemoveStreamByNumber(This,wStreamNum)	\
    ( (This)->lpVtbl -> RemoveStreamByNumber(This,wStreamNum) ) 

#define IWMProfile3_AddStream(This,pConfig)	\
    ( (This)->lpVtbl -> AddStream(This,pConfig) ) 

#define IWMProfile3_ReconfigStream(This,pConfig)	\
    ( (This)->lpVtbl -> ReconfigStream(This,pConfig) ) 

#define IWMProfile3_CreateNewStream(This,guidStreamType,ppConfig)	\
    ( (This)->lpVtbl -> CreateNewStream(This,guidStreamType,ppConfig) ) 

#define IWMProfile3_GetMutualExclusionCount(This,pcME)	\
    ( (This)->lpVtbl -> GetMutualExclusionCount(This,pcME) ) 

#define IWMProfile3_GetMutualExclusion(This,dwMEIndex,ppME)	\
    ( (This)->lpVtbl -> GetMutualExclusion(This,dwMEIndex,ppME) ) 

#define IWMProfile3_RemoveMutualExclusion(This,pME)	\
    ( (This)->lpVtbl -> RemoveMutualExclusion(This,pME) ) 

#define IWMProfile3_AddMutualExclusion(This,pME)	\
    ( (This)->lpVtbl -> AddMutualExclusion(This,pME) ) 

#define IWMProfile3_CreateNewMutualExclusion(This,ppME)	\
    ( (This)->lpVtbl -> CreateNewMutualExclusion(This,ppME) ) 


#define IWMProfile3_GetProfileID(This,pguidID)	\
    ( (This)->lpVtbl -> GetProfileID(This,pguidID) ) 


#define IWMProfile3_GetStorageFormat(This,pnStorageFormat)	\
    ( (This)->lpVtbl -> GetStorageFormat(This,pnStorageFormat) ) 

#define IWMProfile3_SetStorageFormat(This,nStorageFormat)	\
    ( (This)->lpVtbl -> SetStorageFormat(This,nStorageFormat) ) 

#define IWMProfile3_GetBandwidthSharingCount(This,pcBS)	\
    ( (This)->lpVtbl -> GetBandwidthSharingCount(This,pcBS) ) 

#define IWMProfile3_GetBandwidthSharing(This,dwBSIndex,ppBS)	\
    ( (This)->lpVtbl -> GetBandwidthSharing(This,dwBSIndex,ppBS) ) 

#define IWMProfile3_RemoveBandwidthSharing(This,pBS)	\
    ( (This)->lpVtbl -> RemoveBandwidthSharing(This,pBS) ) 

#define IWMProfile3_AddBandwidthSharing(This,pBS)	\
    ( (This)->lpVtbl -> AddBandwidthSharing(This,pBS) ) 

#define IWMProfile3_CreateNewBandwidthSharing(This,ppBS)	\
    ( (This)->lpVtbl -> CreateNewBandwidthSharing(This,ppBS) ) 

#define IWMProfile3_GetStreamPrioritization(This,ppSP)	\
    ( (This)->lpVtbl -> GetStreamPrioritization(This,ppSP) ) 

#define IWMProfile3_SetStreamPrioritization(This,pSP)	\
    ( (This)->lpVtbl -> SetStreamPrioritization(This,pSP) ) 

#define IWMProfile3_RemoveStreamPrioritization(This)	\
    ( (This)->lpVtbl -> RemoveStreamPrioritization(This) ) 

#define IWMProfile3_CreateNewStreamPrioritization(This,ppSP)	\
    ( (This)->lpVtbl -> CreateNewStreamPrioritization(This,ppSP) ) 

#define IWMProfile3_GetExpectedPacketCount(This,msDuration,pcPackets)	\
    ( (This)->lpVtbl -> GetExpectedPacketCount(This,msDuration,pcPackets) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMProfile3_INTERFACE_DEFINED__ */


#ifndef __IWMStreamConfig_INTERFACE_DEFINED__
#define __IWMStreamConfig_INTERFACE_DEFINED__

/* interface IWMStreamConfig */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMStreamConfig;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BDC-2B2B-11d3-B36B-00C04F6108FF")
    IWMStreamConfig : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStreamType( 
            /* [out] */ GUID *pguidStreamType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamNumber( 
            /* [out] */ WORD *pwStreamNum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStreamNumber( 
            /* [in] */ WORD wStreamNum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamName( 
            /* [size_is][out] */ WCHAR *pwszStreamName,
            /* [out][in] */ WORD *pcchStreamName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStreamName( 
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszStreamName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConnectionName( 
            /* [size_is][out] */ WCHAR *pwszInputName,
            /* [out][in] */ WORD *pcchInputName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetConnectionName( 
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszInputName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBitrate( 
            /* [out] */ DWORD *pdwBitrate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBitrate( 
            /* [in] */ DWORD pdwBitrate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBufferWindow( 
            /* [out] */ DWORD *pmsBufferWindow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBufferWindow( 
            /* [in] */ DWORD msBufferWindow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMStreamConfigVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMStreamConfig * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMStreamConfig * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMStreamConfig * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamType )( 
            IWMStreamConfig * This,
            /* [out] */ GUID *pguidStreamType);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamNumber )( 
            IWMStreamConfig * This,
            /* [out] */ WORD *pwStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamNumber )( 
            IWMStreamConfig * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamName )( 
            IWMStreamConfig * This,
            /* [size_is][out] */ WCHAR *pwszStreamName,
            /* [out][in] */ WORD *pcchStreamName);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamName )( 
            IWMStreamConfig * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszStreamName);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectionName )( 
            IWMStreamConfig * This,
            /* [size_is][out] */ WCHAR *pwszInputName,
            /* [out][in] */ WORD *pcchInputName);
        
        HRESULT ( STDMETHODCALLTYPE *SetConnectionName )( 
            IWMStreamConfig * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszInputName);
        
        HRESULT ( STDMETHODCALLTYPE *GetBitrate )( 
            IWMStreamConfig * This,
            /* [out] */ DWORD *pdwBitrate);
        
        HRESULT ( STDMETHODCALLTYPE *SetBitrate )( 
            IWMStreamConfig * This,
            /* [in] */ DWORD pdwBitrate);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferWindow )( 
            IWMStreamConfig * This,
            /* [out] */ DWORD *pmsBufferWindow);
        
        HRESULT ( STDMETHODCALLTYPE *SetBufferWindow )( 
            IWMStreamConfig * This,
            /* [in] */ DWORD msBufferWindow);
        
        END_INTERFACE
    } IWMStreamConfigVtbl;

    interface IWMStreamConfig
    {
        CONST_VTBL struct IWMStreamConfigVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMStreamConfig_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMStreamConfig_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMStreamConfig_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMStreamConfig_GetStreamType(This,pguidStreamType)	\
    ( (This)->lpVtbl -> GetStreamType(This,pguidStreamType) ) 

#define IWMStreamConfig_GetStreamNumber(This,pwStreamNum)	\
    ( (This)->lpVtbl -> GetStreamNumber(This,pwStreamNum) ) 

#define IWMStreamConfig_SetStreamNumber(This,wStreamNum)	\
    ( (This)->lpVtbl -> SetStreamNumber(This,wStreamNum) ) 

#define IWMStreamConfig_GetStreamName(This,pwszStreamName,pcchStreamName)	\
    ( (This)->lpVtbl -> GetStreamName(This,pwszStreamName,pcchStreamName) ) 

#define IWMStreamConfig_SetStreamName(This,pwszStreamName)	\
    ( (This)->lpVtbl -> SetStreamName(This,pwszStreamName) ) 

#define IWMStreamConfig_GetConnectionName(This,pwszInputName,pcchInputName)	\
    ( (This)->lpVtbl -> GetConnectionName(This,pwszInputName,pcchInputName) ) 

#define IWMStreamConfig_SetConnectionName(This,pwszInputName)	\
    ( (This)->lpVtbl -> SetConnectionName(This,pwszInputName) ) 

#define IWMStreamConfig_GetBitrate(This,pdwBitrate)	\
    ( (This)->lpVtbl -> GetBitrate(This,pdwBitrate) ) 

#define IWMStreamConfig_SetBitrate(This,pdwBitrate)	\
    ( (This)->lpVtbl -> SetBitrate(This,pdwBitrate) ) 

#define IWMStreamConfig_GetBufferWindow(This,pmsBufferWindow)	\
    ( (This)->lpVtbl -> GetBufferWindow(This,pmsBufferWindow) ) 

#define IWMStreamConfig_SetBufferWindow(This,msBufferWindow)	\
    ( (This)->lpVtbl -> SetBufferWindow(This,msBufferWindow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMStreamConfig_INTERFACE_DEFINED__ */


#ifndef __IWMStreamConfig2_INTERFACE_DEFINED__
#define __IWMStreamConfig2_INTERFACE_DEFINED__

/* interface IWMStreamConfig2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMStreamConfig2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7688D8CB-FC0D-43BD-9459-5A8DEC200CFA")
    IWMStreamConfig2 : public IWMStreamConfig
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetTransportType( 
            /* [out] */ WMT_TRANSPORT_TYPE *pnTransportType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTransportType( 
            /* [in] */ WMT_TRANSPORT_TYPE nTransportType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddDataUnitExtension( 
            /* [in] */ GUID guidExtensionSystemID,
            /* [in] */ WORD cbExtensionDataSize,
            /* [size_is][in] */ BYTE *pbExtensionSystemInfo,
            /* [in] */ DWORD cbExtensionSystemInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDataUnitExtensionCount( 
            /* [out] */ WORD *pcDataUnitExtensions) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDataUnitExtension( 
            /* [in] */ WORD wDataUnitExtensionNumber,
            /* [out] */ GUID *pguidExtensionSystemID,
            /* [out] */ WORD *pcbExtensionDataSize,
            /* [size_is][out] */ BYTE *pbExtensionSystemInfo,
            /* [out][in] */ DWORD *pcbExtensionSystemInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAllDataUnitExtensions( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMStreamConfig2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMStreamConfig2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMStreamConfig2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMStreamConfig2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamType )( 
            IWMStreamConfig2 * This,
            /* [out] */ GUID *pguidStreamType);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamNumber )( 
            IWMStreamConfig2 * This,
            /* [out] */ WORD *pwStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamNumber )( 
            IWMStreamConfig2 * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamName )( 
            IWMStreamConfig2 * This,
            /* [size_is][out] */ WCHAR *pwszStreamName,
            /* [out][in] */ WORD *pcchStreamName);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamName )( 
            IWMStreamConfig2 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszStreamName);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectionName )( 
            IWMStreamConfig2 * This,
            /* [size_is][out] */ WCHAR *pwszInputName,
            /* [out][in] */ WORD *pcchInputName);
        
        HRESULT ( STDMETHODCALLTYPE *SetConnectionName )( 
            IWMStreamConfig2 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszInputName);
        
        HRESULT ( STDMETHODCALLTYPE *GetBitrate )( 
            IWMStreamConfig2 * This,
            /* [out] */ DWORD *pdwBitrate);
        
        HRESULT ( STDMETHODCALLTYPE *SetBitrate )( 
            IWMStreamConfig2 * This,
            /* [in] */ DWORD pdwBitrate);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferWindow )( 
            IWMStreamConfig2 * This,
            /* [out] */ DWORD *pmsBufferWindow);
        
        HRESULT ( STDMETHODCALLTYPE *SetBufferWindow )( 
            IWMStreamConfig2 * This,
            /* [in] */ DWORD msBufferWindow);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransportType )( 
            IWMStreamConfig2 * This,
            /* [out] */ WMT_TRANSPORT_TYPE *pnTransportType);
        
        HRESULT ( STDMETHODCALLTYPE *SetTransportType )( 
            IWMStreamConfig2 * This,
            /* [in] */ WMT_TRANSPORT_TYPE nTransportType);
        
        HRESULT ( STDMETHODCALLTYPE *AddDataUnitExtension )( 
            IWMStreamConfig2 * This,
            /* [in] */ GUID guidExtensionSystemID,
            /* [in] */ WORD cbExtensionDataSize,
            /* [size_is][in] */ BYTE *pbExtensionSystemInfo,
            /* [in] */ DWORD cbExtensionSystemInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataUnitExtensionCount )( 
            IWMStreamConfig2 * This,
            /* [out] */ WORD *pcDataUnitExtensions);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataUnitExtension )( 
            IWMStreamConfig2 * This,
            /* [in] */ WORD wDataUnitExtensionNumber,
            /* [out] */ GUID *pguidExtensionSystemID,
            /* [out] */ WORD *pcbExtensionDataSize,
            /* [size_is][out] */ BYTE *pbExtensionSystemInfo,
            /* [out][in] */ DWORD *pcbExtensionSystemInfo);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAllDataUnitExtensions )( 
            IWMStreamConfig2 * This);
        
        END_INTERFACE
    } IWMStreamConfig2Vtbl;

    interface IWMStreamConfig2
    {
        CONST_VTBL struct IWMStreamConfig2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMStreamConfig2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMStreamConfig2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMStreamConfig2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMStreamConfig2_GetStreamType(This,pguidStreamType)	\
    ( (This)->lpVtbl -> GetStreamType(This,pguidStreamType) ) 

#define IWMStreamConfig2_GetStreamNumber(This,pwStreamNum)	\
    ( (This)->lpVtbl -> GetStreamNumber(This,pwStreamNum) ) 

#define IWMStreamConfig2_SetStreamNumber(This,wStreamNum)	\
    ( (This)->lpVtbl -> SetStreamNumber(This,wStreamNum) ) 

#define IWMStreamConfig2_GetStreamName(This,pwszStreamName,pcchStreamName)	\
    ( (This)->lpVtbl -> GetStreamName(This,pwszStreamName,pcchStreamName) ) 

#define IWMStreamConfig2_SetStreamName(This,pwszStreamName)	\
    ( (This)->lpVtbl -> SetStreamName(This,pwszStreamName) ) 

#define IWMStreamConfig2_GetConnectionName(This,pwszInputName,pcchInputName)	\
    ( (This)->lpVtbl -> GetConnectionName(This,pwszInputName,pcchInputName) ) 

#define IWMStreamConfig2_SetConnectionName(This,pwszInputName)	\
    ( (This)->lpVtbl -> SetConnectionName(This,pwszInputName) ) 

#define IWMStreamConfig2_GetBitrate(This,pdwBitrate)	\
    ( (This)->lpVtbl -> GetBitrate(This,pdwBitrate) ) 

#define IWMStreamConfig2_SetBitrate(This,pdwBitrate)	\
    ( (This)->lpVtbl -> SetBitrate(This,pdwBitrate) ) 

#define IWMStreamConfig2_GetBufferWindow(This,pmsBufferWindow)	\
    ( (This)->lpVtbl -> GetBufferWindow(This,pmsBufferWindow) ) 

#define IWMStreamConfig2_SetBufferWindow(This,msBufferWindow)	\
    ( (This)->lpVtbl -> SetBufferWindow(This,msBufferWindow) ) 


#define IWMStreamConfig2_GetTransportType(This,pnTransportType)	\
    ( (This)->lpVtbl -> GetTransportType(This,pnTransportType) ) 

#define IWMStreamConfig2_SetTransportType(This,nTransportType)	\
    ( (This)->lpVtbl -> SetTransportType(This,nTransportType) ) 

#define IWMStreamConfig2_AddDataUnitExtension(This,guidExtensionSystemID,cbExtensionDataSize,pbExtensionSystemInfo,cbExtensionSystemInfo)	\
    ( (This)->lpVtbl -> AddDataUnitExtension(This,guidExtensionSystemID,cbExtensionDataSize,pbExtensionSystemInfo,cbExtensionSystemInfo) ) 

#define IWMStreamConfig2_GetDataUnitExtensionCount(This,pcDataUnitExtensions)	\
    ( (This)->lpVtbl -> GetDataUnitExtensionCount(This,pcDataUnitExtensions) ) 

#define IWMStreamConfig2_GetDataUnitExtension(This,wDataUnitExtensionNumber,pguidExtensionSystemID,pcbExtensionDataSize,pbExtensionSystemInfo,pcbExtensionSystemInfo)	\
    ( (This)->lpVtbl -> GetDataUnitExtension(This,wDataUnitExtensionNumber,pguidExtensionSystemID,pcbExtensionDataSize,pbExtensionSystemInfo,pcbExtensionSystemInfo) ) 

#define IWMStreamConfig2_RemoveAllDataUnitExtensions(This)	\
    ( (This)->lpVtbl -> RemoveAllDataUnitExtensions(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMStreamConfig2_INTERFACE_DEFINED__ */


#ifndef __IWMStreamConfig3_INTERFACE_DEFINED__
#define __IWMStreamConfig3_INTERFACE_DEFINED__

/* interface IWMStreamConfig3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMStreamConfig3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CB164104-3AA9-45a7-9AC9-4DAEE131D6E1")
    IWMStreamConfig3 : public IWMStreamConfig2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLanguage( 
            /* [size_is][out] */ WCHAR *pwszLanguageString,
            /* [out][in] */ WORD *pcchLanguageStringLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLanguage( 
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszLanguageString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMStreamConfig3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMStreamConfig3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMStreamConfig3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMStreamConfig3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamType )( 
            IWMStreamConfig3 * This,
            /* [out] */ GUID *pguidStreamType);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamNumber )( 
            IWMStreamConfig3 * This,
            /* [out] */ WORD *pwStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamNumber )( 
            IWMStreamConfig3 * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamName )( 
            IWMStreamConfig3 * This,
            /* [size_is][out] */ WCHAR *pwszStreamName,
            /* [out][in] */ WORD *pcchStreamName);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamName )( 
            IWMStreamConfig3 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszStreamName);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectionName )( 
            IWMStreamConfig3 * This,
            /* [size_is][out] */ WCHAR *pwszInputName,
            /* [out][in] */ WORD *pcchInputName);
        
        HRESULT ( STDMETHODCALLTYPE *SetConnectionName )( 
            IWMStreamConfig3 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszInputName);
        
        HRESULT ( STDMETHODCALLTYPE *GetBitrate )( 
            IWMStreamConfig3 * This,
            /* [out] */ DWORD *pdwBitrate);
        
        HRESULT ( STDMETHODCALLTYPE *SetBitrate )( 
            IWMStreamConfig3 * This,
            /* [in] */ DWORD pdwBitrate);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferWindow )( 
            IWMStreamConfig3 * This,
            /* [out] */ DWORD *pmsBufferWindow);
        
        HRESULT ( STDMETHODCALLTYPE *SetBufferWindow )( 
            IWMStreamConfig3 * This,
            /* [in] */ DWORD msBufferWindow);
        
        HRESULT ( STDMETHODCALLTYPE *GetTransportType )( 
            IWMStreamConfig3 * This,
            /* [out] */ WMT_TRANSPORT_TYPE *pnTransportType);
        
        HRESULT ( STDMETHODCALLTYPE *SetTransportType )( 
            IWMStreamConfig3 * This,
            /* [in] */ WMT_TRANSPORT_TYPE nTransportType);
        
        HRESULT ( STDMETHODCALLTYPE *AddDataUnitExtension )( 
            IWMStreamConfig3 * This,
            /* [in] */ GUID guidExtensionSystemID,
            /* [in] */ WORD cbExtensionDataSize,
            /* [size_is][in] */ BYTE *pbExtensionSystemInfo,
            /* [in] */ DWORD cbExtensionSystemInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataUnitExtensionCount )( 
            IWMStreamConfig3 * This,
            /* [out] */ WORD *pcDataUnitExtensions);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataUnitExtension )( 
            IWMStreamConfig3 * This,
            /* [in] */ WORD wDataUnitExtensionNumber,
            /* [out] */ GUID *pguidExtensionSystemID,
            /* [out] */ WORD *pcbExtensionDataSize,
            /* [size_is][out] */ BYTE *pbExtensionSystemInfo,
            /* [out][in] */ DWORD *pcbExtensionSystemInfo);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAllDataUnitExtensions )( 
            IWMStreamConfig3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IWMStreamConfig3 * This,
            /* [size_is][out] */ WCHAR *pwszLanguageString,
            /* [out][in] */ WORD *pcchLanguageStringLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetLanguage )( 
            IWMStreamConfig3 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszLanguageString);
        
        END_INTERFACE
    } IWMStreamConfig3Vtbl;

    interface IWMStreamConfig3
    {
        CONST_VTBL struct IWMStreamConfig3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMStreamConfig3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMStreamConfig3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMStreamConfig3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMStreamConfig3_GetStreamType(This,pguidStreamType)	\
    ( (This)->lpVtbl -> GetStreamType(This,pguidStreamType) ) 

#define IWMStreamConfig3_GetStreamNumber(This,pwStreamNum)	\
    ( (This)->lpVtbl -> GetStreamNumber(This,pwStreamNum) ) 

#define IWMStreamConfig3_SetStreamNumber(This,wStreamNum)	\
    ( (This)->lpVtbl -> SetStreamNumber(This,wStreamNum) ) 

#define IWMStreamConfig3_GetStreamName(This,pwszStreamName,pcchStreamName)	\
    ( (This)->lpVtbl -> GetStreamName(This,pwszStreamName,pcchStreamName) ) 

#define IWMStreamConfig3_SetStreamName(This,pwszStreamName)	\
    ( (This)->lpVtbl -> SetStreamName(This,pwszStreamName) ) 

#define IWMStreamConfig3_GetConnectionName(This,pwszInputName,pcchInputName)	\
    ( (This)->lpVtbl -> GetConnectionName(This,pwszInputName,pcchInputName) ) 

#define IWMStreamConfig3_SetConnectionName(This,pwszInputName)	\
    ( (This)->lpVtbl -> SetConnectionName(This,pwszInputName) ) 

#define IWMStreamConfig3_GetBitrate(This,pdwBitrate)	\
    ( (This)->lpVtbl -> GetBitrate(This,pdwBitrate) ) 

#define IWMStreamConfig3_SetBitrate(This,pdwBitrate)	\
    ( (This)->lpVtbl -> SetBitrate(This,pdwBitrate) ) 

#define IWMStreamConfig3_GetBufferWindow(This,pmsBufferWindow)	\
    ( (This)->lpVtbl -> GetBufferWindow(This,pmsBufferWindow) ) 

#define IWMStreamConfig3_SetBufferWindow(This,msBufferWindow)	\
    ( (This)->lpVtbl -> SetBufferWindow(This,msBufferWindow) ) 


#define IWMStreamConfig3_GetTransportType(This,pnTransportType)	\
    ( (This)->lpVtbl -> GetTransportType(This,pnTransportType) ) 

#define IWMStreamConfig3_SetTransportType(This,nTransportType)	\
    ( (This)->lpVtbl -> SetTransportType(This,nTransportType) ) 

#define IWMStreamConfig3_AddDataUnitExtension(This,guidExtensionSystemID,cbExtensionDataSize,pbExtensionSystemInfo,cbExtensionSystemInfo)	\
    ( (This)->lpVtbl -> AddDataUnitExtension(This,guidExtensionSystemID,cbExtensionDataSize,pbExtensionSystemInfo,cbExtensionSystemInfo) ) 

#define IWMStreamConfig3_GetDataUnitExtensionCount(This,pcDataUnitExtensions)	\
    ( (This)->lpVtbl -> GetDataUnitExtensionCount(This,pcDataUnitExtensions) ) 

#define IWMStreamConfig3_GetDataUnitExtension(This,wDataUnitExtensionNumber,pguidExtensionSystemID,pcbExtensionDataSize,pbExtensionSystemInfo,pcbExtensionSystemInfo)	\
    ( (This)->lpVtbl -> GetDataUnitExtension(This,wDataUnitExtensionNumber,pguidExtensionSystemID,pcbExtensionDataSize,pbExtensionSystemInfo,pcbExtensionSystemInfo) ) 

#define IWMStreamConfig3_RemoveAllDataUnitExtensions(This)	\
    ( (This)->lpVtbl -> RemoveAllDataUnitExtensions(This) ) 


#define IWMStreamConfig3_GetLanguage(This,pwszLanguageString,pcchLanguageStringLength)	\
    ( (This)->lpVtbl -> GetLanguage(This,pwszLanguageString,pcchLanguageStringLength) ) 

#define IWMStreamConfig3_SetLanguage(This,pwszLanguageString)	\
    ( (This)->lpVtbl -> SetLanguage(This,pwszLanguageString) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMStreamConfig3_INTERFACE_DEFINED__ */


#ifndef __IWMPacketSize_INTERFACE_DEFINED__
#define __IWMPacketSize_INTERFACE_DEFINED__

/* interface IWMPacketSize */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPacketSize;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CDFB97AB-188F-40b3-B643-5B7903975C59")
    IWMPacketSize : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMaxPacketSize( 
            /* [out] */ DWORD *pdwMaxPacketSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMaxPacketSize( 
            /* [in] */ DWORD dwMaxPacketSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPacketSizeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPacketSize * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPacketSize * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPacketSize * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxPacketSize )( 
            IWMPacketSize * This,
            /* [out] */ DWORD *pdwMaxPacketSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetMaxPacketSize )( 
            IWMPacketSize * This,
            /* [in] */ DWORD dwMaxPacketSize);
        
        END_INTERFACE
    } IWMPacketSizeVtbl;

    interface IWMPacketSize
    {
        CONST_VTBL struct IWMPacketSizeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPacketSize_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPacketSize_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPacketSize_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPacketSize_GetMaxPacketSize(This,pdwMaxPacketSize)	\
    ( (This)->lpVtbl -> GetMaxPacketSize(This,pdwMaxPacketSize) ) 

#define IWMPacketSize_SetMaxPacketSize(This,dwMaxPacketSize)	\
    ( (This)->lpVtbl -> SetMaxPacketSize(This,dwMaxPacketSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPacketSize_INTERFACE_DEFINED__ */


#ifndef __IWMPacketSize2_INTERFACE_DEFINED__
#define __IWMPacketSize2_INTERFACE_DEFINED__

/* interface IWMPacketSize2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPacketSize2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8BFC2B9E-B646-4233-A877-1C6A079669DC")
    IWMPacketSize2 : public IWMPacketSize
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMinPacketSize( 
            /* [out] */ DWORD *pdwMinPacketSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMinPacketSize( 
            /* [in] */ DWORD dwMinPacketSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPacketSize2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPacketSize2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPacketSize2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPacketSize2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxPacketSize )( 
            IWMPacketSize2 * This,
            /* [out] */ DWORD *pdwMaxPacketSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetMaxPacketSize )( 
            IWMPacketSize2 * This,
            /* [in] */ DWORD dwMaxPacketSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetMinPacketSize )( 
            IWMPacketSize2 * This,
            /* [out] */ DWORD *pdwMinPacketSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetMinPacketSize )( 
            IWMPacketSize2 * This,
            /* [in] */ DWORD dwMinPacketSize);
        
        END_INTERFACE
    } IWMPacketSize2Vtbl;

    interface IWMPacketSize2
    {
        CONST_VTBL struct IWMPacketSize2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPacketSize2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPacketSize2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPacketSize2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPacketSize2_GetMaxPacketSize(This,pdwMaxPacketSize)	\
    ( (This)->lpVtbl -> GetMaxPacketSize(This,pdwMaxPacketSize) ) 

#define IWMPacketSize2_SetMaxPacketSize(This,dwMaxPacketSize)	\
    ( (This)->lpVtbl -> SetMaxPacketSize(This,dwMaxPacketSize) ) 


#define IWMPacketSize2_GetMinPacketSize(This,pdwMinPacketSize)	\
    ( (This)->lpVtbl -> GetMinPacketSize(This,pdwMinPacketSize) ) 

#define IWMPacketSize2_SetMinPacketSize(This,dwMinPacketSize)	\
    ( (This)->lpVtbl -> SetMinPacketSize(This,dwMinPacketSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPacketSize2_INTERFACE_DEFINED__ */


#ifndef __IWMStreamList_INTERFACE_DEFINED__
#define __IWMStreamList_INTERFACE_DEFINED__

/* interface IWMStreamList */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMStreamList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BDD-2B2B-11d3-B36B-00C04F6108FF")
    IWMStreamList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStreams( 
            /* [size_is][out] */ WORD *pwStreamNumArray,
            /* [out][in] */ WORD *pcStreams) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddStream( 
            /* [in] */ WORD wStreamNum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveStream( 
            /* [in] */ WORD wStreamNum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMStreamListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMStreamList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMStreamList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMStreamList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreams )( 
            IWMStreamList * This,
            /* [size_is][out] */ WORD *pwStreamNumArray,
            /* [out][in] */ WORD *pcStreams);
        
        HRESULT ( STDMETHODCALLTYPE *AddStream )( 
            IWMStreamList * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStream )( 
            IWMStreamList * This,
            /* [in] */ WORD wStreamNum);
        
        END_INTERFACE
    } IWMStreamListVtbl;

    interface IWMStreamList
    {
        CONST_VTBL struct IWMStreamListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMStreamList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMStreamList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMStreamList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMStreamList_GetStreams(This,pwStreamNumArray,pcStreams)	\
    ( (This)->lpVtbl -> GetStreams(This,pwStreamNumArray,pcStreams) ) 

#define IWMStreamList_AddStream(This,wStreamNum)	\
    ( (This)->lpVtbl -> AddStream(This,wStreamNum) ) 

#define IWMStreamList_RemoveStream(This,wStreamNum)	\
    ( (This)->lpVtbl -> RemoveStream(This,wStreamNum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMStreamList_INTERFACE_DEFINED__ */


#ifndef __IWMMutualExclusion_INTERFACE_DEFINED__
#define __IWMMutualExclusion_INTERFACE_DEFINED__

/* interface IWMMutualExclusion */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMMutualExclusion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BDE-2B2B-11d3-B36B-00C04F6108FF")
    IWMMutualExclusion : public IWMStreamList
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ GUID *pguidType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetType( 
            /* [in] */ REFGUID guidType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMMutualExclusionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMMutualExclusion * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMMutualExclusion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMMutualExclusion * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreams )( 
            IWMMutualExclusion * This,
            /* [size_is][out] */ WORD *pwStreamNumArray,
            /* [out][in] */ WORD *pcStreams);
        
        HRESULT ( STDMETHODCALLTYPE *AddStream )( 
            IWMMutualExclusion * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStream )( 
            IWMMutualExclusion * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IWMMutualExclusion * This,
            /* [out] */ GUID *pguidType);
        
        HRESULT ( STDMETHODCALLTYPE *SetType )( 
            IWMMutualExclusion * This,
            /* [in] */ REFGUID guidType);
        
        END_INTERFACE
    } IWMMutualExclusionVtbl;

    interface IWMMutualExclusion
    {
        CONST_VTBL struct IWMMutualExclusionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMMutualExclusion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMMutualExclusion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMMutualExclusion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMMutualExclusion_GetStreams(This,pwStreamNumArray,pcStreams)	\
    ( (This)->lpVtbl -> GetStreams(This,pwStreamNumArray,pcStreams) ) 

#define IWMMutualExclusion_AddStream(This,wStreamNum)	\
    ( (This)->lpVtbl -> AddStream(This,wStreamNum) ) 

#define IWMMutualExclusion_RemoveStream(This,wStreamNum)	\
    ( (This)->lpVtbl -> RemoveStream(This,wStreamNum) ) 


#define IWMMutualExclusion_GetType(This,pguidType)	\
    ( (This)->lpVtbl -> GetType(This,pguidType) ) 

#define IWMMutualExclusion_SetType(This,guidType)	\
    ( (This)->lpVtbl -> SetType(This,guidType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMMutualExclusion_INTERFACE_DEFINED__ */


#ifndef __IWMMutualExclusion2_INTERFACE_DEFINED__
#define __IWMMutualExclusion2_INTERFACE_DEFINED__

/* interface IWMMutualExclusion2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMMutualExclusion2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0302B57D-89D1-4ba2-85C9-166F2C53EB91")
    IWMMutualExclusion2 : public IWMMutualExclusion
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetName( 
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetName( 
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRecordCount( 
            /* [out] */ WORD *pwRecordCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddRecord( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveRecord( 
            /* [in] */ WORD wRecordNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRecordName( 
            /* [in] */ WORD wRecordNumber,
            /* [size_is][out] */ WCHAR *pwszRecordName,
            /* [out][in] */ WORD *pcchRecordName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetRecordName( 
            /* [in] */ WORD wRecordNumber,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszRecordName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamsForRecord( 
            /* [in] */ WORD wRecordNumber,
            /* [size_is][out] */ WORD *pwStreamNumArray,
            /* [out][in] */ WORD *pcStreams) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddStreamForRecord( 
            /* [in] */ WORD wRecordNumber,
            /* [in] */ WORD wStreamNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveStreamForRecord( 
            /* [in] */ WORD wRecordNumber,
            /* [in] */ WORD wStreamNumber) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMMutualExclusion2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMMutualExclusion2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMMutualExclusion2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMMutualExclusion2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreams )( 
            IWMMutualExclusion2 * This,
            /* [size_is][out] */ WORD *pwStreamNumArray,
            /* [out][in] */ WORD *pcStreams);
        
        HRESULT ( STDMETHODCALLTYPE *AddStream )( 
            IWMMutualExclusion2 * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStream )( 
            IWMMutualExclusion2 * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IWMMutualExclusion2 * This,
            /* [out] */ GUID *pguidType);
        
        HRESULT ( STDMETHODCALLTYPE *SetType )( 
            IWMMutualExclusion2 * This,
            /* [in] */ REFGUID guidType);
        
        HRESULT ( STDMETHODCALLTYPE *GetName )( 
            IWMMutualExclusion2 * This,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchName);
        
        HRESULT ( STDMETHODCALLTYPE *SetName )( 
            IWMMutualExclusion2 * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszName);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecordCount )( 
            IWMMutualExclusion2 * This,
            /* [out] */ WORD *pwRecordCount);
        
        HRESULT ( STDMETHODCALLTYPE *AddRecord )( 
            IWMMutualExclusion2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveRecord )( 
            IWMMutualExclusion2 * This,
            /* [in] */ WORD wRecordNumber);
        
        HRESULT ( STDMETHODCALLTYPE *GetRecordName )( 
            IWMMutualExclusion2 * This,
            /* [in] */ WORD wRecordNumber,
            /* [size_is][out] */ WCHAR *pwszRecordName,
            /* [out][in] */ WORD *pcchRecordName);
        
        HRESULT ( STDMETHODCALLTYPE *SetRecordName )( 
            IWMMutualExclusion2 * This,
            /* [in] */ WORD wRecordNumber,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszRecordName);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamsForRecord )( 
            IWMMutualExclusion2 * This,
            /* [in] */ WORD wRecordNumber,
            /* [size_is][out] */ WORD *pwStreamNumArray,
            /* [out][in] */ WORD *pcStreams);
        
        HRESULT ( STDMETHODCALLTYPE *AddStreamForRecord )( 
            IWMMutualExclusion2 * This,
            /* [in] */ WORD wRecordNumber,
            /* [in] */ WORD wStreamNumber);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStreamForRecord )( 
            IWMMutualExclusion2 * This,
            /* [in] */ WORD wRecordNumber,
            /* [in] */ WORD wStreamNumber);
        
        END_INTERFACE
    } IWMMutualExclusion2Vtbl;

    interface IWMMutualExclusion2
    {
        CONST_VTBL struct IWMMutualExclusion2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMMutualExclusion2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMMutualExclusion2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMMutualExclusion2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMMutualExclusion2_GetStreams(This,pwStreamNumArray,pcStreams)	\
    ( (This)->lpVtbl -> GetStreams(This,pwStreamNumArray,pcStreams) ) 

#define IWMMutualExclusion2_AddStream(This,wStreamNum)	\
    ( (This)->lpVtbl -> AddStream(This,wStreamNum) ) 

#define IWMMutualExclusion2_RemoveStream(This,wStreamNum)	\
    ( (This)->lpVtbl -> RemoveStream(This,wStreamNum) ) 


#define IWMMutualExclusion2_GetType(This,pguidType)	\
    ( (This)->lpVtbl -> GetType(This,pguidType) ) 

#define IWMMutualExclusion2_SetType(This,guidType)	\
    ( (This)->lpVtbl -> SetType(This,guidType) ) 


#define IWMMutualExclusion2_GetName(This,pwszName,pcchName)	\
    ( (This)->lpVtbl -> GetName(This,pwszName,pcchName) ) 

#define IWMMutualExclusion2_SetName(This,pwszName)	\
    ( (This)->lpVtbl -> SetName(This,pwszName) ) 

#define IWMMutualExclusion2_GetRecordCount(This,pwRecordCount)	\
    ( (This)->lpVtbl -> GetRecordCount(This,pwRecordCount) ) 

#define IWMMutualExclusion2_AddRecord(This)	\
    ( (This)->lpVtbl -> AddRecord(This) ) 

#define IWMMutualExclusion2_RemoveRecord(This,wRecordNumber)	\
    ( (This)->lpVtbl -> RemoveRecord(This,wRecordNumber) ) 

#define IWMMutualExclusion2_GetRecordName(This,wRecordNumber,pwszRecordName,pcchRecordName)	\
    ( (This)->lpVtbl -> GetRecordName(This,wRecordNumber,pwszRecordName,pcchRecordName) ) 

#define IWMMutualExclusion2_SetRecordName(This,wRecordNumber,pwszRecordName)	\
    ( (This)->lpVtbl -> SetRecordName(This,wRecordNumber,pwszRecordName) ) 

#define IWMMutualExclusion2_GetStreamsForRecord(This,wRecordNumber,pwStreamNumArray,pcStreams)	\
    ( (This)->lpVtbl -> GetStreamsForRecord(This,wRecordNumber,pwStreamNumArray,pcStreams) ) 

#define IWMMutualExclusion2_AddStreamForRecord(This,wRecordNumber,wStreamNumber)	\
    ( (This)->lpVtbl -> AddStreamForRecord(This,wRecordNumber,wStreamNumber) ) 

#define IWMMutualExclusion2_RemoveStreamForRecord(This,wRecordNumber,wStreamNumber)	\
    ( (This)->lpVtbl -> RemoveStreamForRecord(This,wRecordNumber,wStreamNumber) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMMutualExclusion2_INTERFACE_DEFINED__ */


#ifndef __IWMBandwidthSharing_INTERFACE_DEFINED__
#define __IWMBandwidthSharing_INTERFACE_DEFINED__

/* interface IWMBandwidthSharing */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMBandwidthSharing;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AD694AF1-F8D9-42F8-BC47-70311B0C4F9E")
    IWMBandwidthSharing : public IWMStreamList
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ GUID *pguidType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetType( 
            /* [in] */ REFGUID guidType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBandwidth( 
            /* [out] */ DWORD *pdwBitrate,
            /* [out] */ DWORD *pmsBufferWindow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBandwidth( 
            /* [in] */ DWORD dwBitrate,
            /* [in] */ DWORD msBufferWindow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMBandwidthSharingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMBandwidthSharing * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMBandwidthSharing * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMBandwidthSharing * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreams )( 
            IWMBandwidthSharing * This,
            /* [size_is][out] */ WORD *pwStreamNumArray,
            /* [out][in] */ WORD *pcStreams);
        
        HRESULT ( STDMETHODCALLTYPE *AddStream )( 
            IWMBandwidthSharing * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveStream )( 
            IWMBandwidthSharing * This,
            /* [in] */ WORD wStreamNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IWMBandwidthSharing * This,
            /* [out] */ GUID *pguidType);
        
        HRESULT ( STDMETHODCALLTYPE *SetType )( 
            IWMBandwidthSharing * This,
            /* [in] */ REFGUID guidType);
        
        HRESULT ( STDMETHODCALLTYPE *GetBandwidth )( 
            IWMBandwidthSharing * This,
            /* [out] */ DWORD *pdwBitrate,
            /* [out] */ DWORD *pmsBufferWindow);
        
        HRESULT ( STDMETHODCALLTYPE *SetBandwidth )( 
            IWMBandwidthSharing * This,
            /* [in] */ DWORD dwBitrate,
            /* [in] */ DWORD msBufferWindow);
        
        END_INTERFACE
    } IWMBandwidthSharingVtbl;

    interface IWMBandwidthSharing
    {
        CONST_VTBL struct IWMBandwidthSharingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMBandwidthSharing_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMBandwidthSharing_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMBandwidthSharing_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMBandwidthSharing_GetStreams(This,pwStreamNumArray,pcStreams)	\
    ( (This)->lpVtbl -> GetStreams(This,pwStreamNumArray,pcStreams) ) 

#define IWMBandwidthSharing_AddStream(This,wStreamNum)	\
    ( (This)->lpVtbl -> AddStream(This,wStreamNum) ) 

#define IWMBandwidthSharing_RemoveStream(This,wStreamNum)	\
    ( (This)->lpVtbl -> RemoveStream(This,wStreamNum) ) 


#define IWMBandwidthSharing_GetType(This,pguidType)	\
    ( (This)->lpVtbl -> GetType(This,pguidType) ) 

#define IWMBandwidthSharing_SetType(This,guidType)	\
    ( (This)->lpVtbl -> SetType(This,guidType) ) 

#define IWMBandwidthSharing_GetBandwidth(This,pdwBitrate,pmsBufferWindow)	\
    ( (This)->lpVtbl -> GetBandwidth(This,pdwBitrate,pmsBufferWindow) ) 

#define IWMBandwidthSharing_SetBandwidth(This,dwBitrate,msBufferWindow)	\
    ( (This)->lpVtbl -> SetBandwidth(This,dwBitrate,msBufferWindow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMBandwidthSharing_INTERFACE_DEFINED__ */


#ifndef __IWMStreamPrioritization_INTERFACE_DEFINED__
#define __IWMStreamPrioritization_INTERFACE_DEFINED__

/* interface IWMStreamPrioritization */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMStreamPrioritization;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8C1C6090-F9A8-4748-8EC3-DD1108BA1E77")
    IWMStreamPrioritization : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPriorityRecords( 
            /* [size_is][out] */ WM_STREAM_PRIORITY_RECORD *pRecordArray,
            /* [out][in] */ WORD *pcRecords) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPriorityRecords( 
            /* [in] */ WM_STREAM_PRIORITY_RECORD *pRecordArray,
            /* [in] */ WORD cRecords) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMStreamPrioritizationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMStreamPrioritization * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMStreamPrioritization * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMStreamPrioritization * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPriorityRecords )( 
            IWMStreamPrioritization * This,
            /* [size_is][out] */ WM_STREAM_PRIORITY_RECORD *pRecordArray,
            /* [out][in] */ WORD *pcRecords);
        
        HRESULT ( STDMETHODCALLTYPE *SetPriorityRecords )( 
            IWMStreamPrioritization * This,
            /* [in] */ WM_STREAM_PRIORITY_RECORD *pRecordArray,
            /* [in] */ WORD cRecords);
        
        END_INTERFACE
    } IWMStreamPrioritizationVtbl;

    interface IWMStreamPrioritization
    {
        CONST_VTBL struct IWMStreamPrioritizationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMStreamPrioritization_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMStreamPrioritization_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMStreamPrioritization_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMStreamPrioritization_GetPriorityRecords(This,pRecordArray,pcRecords)	\
    ( (This)->lpVtbl -> GetPriorityRecords(This,pRecordArray,pcRecords) ) 

#define IWMStreamPrioritization_SetPriorityRecords(This,pRecordArray,cRecords)	\
    ( (This)->lpVtbl -> SetPriorityRecords(This,pRecordArray,cRecords) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMStreamPrioritization_INTERFACE_DEFINED__ */


#ifndef __IWMWriterAdvanced_INTERFACE_DEFINED__
#define __IWMWriterAdvanced_INTERFACE_DEFINED__

/* interface IWMWriterAdvanced */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterAdvanced;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BE3-2B2B-11d3-B36B-00C04F6108FF")
    IWMWriterAdvanced : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSinkCount( 
            /* [out] */ DWORD *pcSinks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSink( 
            /* [in] */ DWORD dwSinkNum,
            /* [out] */ IWMWriterSink **ppSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddSink( 
            /* [in] */ IWMWriterSink *pSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveSink( 
            /* [in] */ IWMWriterSink *pSink) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteStreamSample( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ DWORD msSampleSendTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLiveSource( 
            BOOL fIsLiveSource) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsRealTime( 
            /* [out] */ BOOL *pfRealTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWriterTime( 
            /* [out] */ QWORD *pcnsCurrentTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatistics( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ WM_WRITER_STATISTICS *pStats) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSyncTolerance( 
            /* [in] */ DWORD msWindow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSyncTolerance( 
            /* [out] */ DWORD *pmsWindow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterAdvancedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterAdvanced * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterAdvanced * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterAdvanced * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSinkCount )( 
            IWMWriterAdvanced * This,
            /* [out] */ DWORD *pcSinks);
        
        HRESULT ( STDMETHODCALLTYPE *GetSink )( 
            IWMWriterAdvanced * This,
            /* [in] */ DWORD dwSinkNum,
            /* [out] */ IWMWriterSink **ppSink);
        
        HRESULT ( STDMETHODCALLTYPE *AddSink )( 
            IWMWriterAdvanced * This,
            /* [in] */ IWMWriterSink *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveSink )( 
            IWMWriterAdvanced * This,
            /* [in] */ IWMWriterSink *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *WriteStreamSample )( 
            IWMWriterAdvanced * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ DWORD msSampleSendTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample);
        
        HRESULT ( STDMETHODCALLTYPE *SetLiveSource )( 
            IWMWriterAdvanced * This,
            BOOL fIsLiveSource);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterAdvanced * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetWriterTime )( 
            IWMWriterAdvanced * This,
            /* [out] */ QWORD *pcnsCurrentTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMWriterAdvanced * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WM_WRITER_STATISTICS *pStats);
        
        HRESULT ( STDMETHODCALLTYPE *SetSyncTolerance )( 
            IWMWriterAdvanced * This,
            /* [in] */ DWORD msWindow);
        
        HRESULT ( STDMETHODCALLTYPE *GetSyncTolerance )( 
            IWMWriterAdvanced * This,
            /* [out] */ DWORD *pmsWindow);
        
        END_INTERFACE
    } IWMWriterAdvancedVtbl;

    interface IWMWriterAdvanced
    {
        CONST_VTBL struct IWMWriterAdvancedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterAdvanced_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterAdvanced_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterAdvanced_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterAdvanced_GetSinkCount(This,pcSinks)	\
    ( (This)->lpVtbl -> GetSinkCount(This,pcSinks) ) 

#define IWMWriterAdvanced_GetSink(This,dwSinkNum,ppSink)	\
    ( (This)->lpVtbl -> GetSink(This,dwSinkNum,ppSink) ) 

#define IWMWriterAdvanced_AddSink(This,pSink)	\
    ( (This)->lpVtbl -> AddSink(This,pSink) ) 

#define IWMWriterAdvanced_RemoveSink(This,pSink)	\
    ( (This)->lpVtbl -> RemoveSink(This,pSink) ) 

#define IWMWriterAdvanced_WriteStreamSample(This,wStreamNum,cnsSampleTime,msSampleSendTime,cnsSampleDuration,dwFlags,pSample)	\
    ( (This)->lpVtbl -> WriteStreamSample(This,wStreamNum,cnsSampleTime,msSampleSendTime,cnsSampleDuration,dwFlags,pSample) ) 

#define IWMWriterAdvanced_SetLiveSource(This,fIsLiveSource)	\
    ( (This)->lpVtbl -> SetLiveSource(This,fIsLiveSource) ) 

#define IWMWriterAdvanced_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterAdvanced_GetWriterTime(This,pcnsCurrentTime)	\
    ( (This)->lpVtbl -> GetWriterTime(This,pcnsCurrentTime) ) 

#define IWMWriterAdvanced_GetStatistics(This,wStreamNum,pStats)	\
    ( (This)->lpVtbl -> GetStatistics(This,wStreamNum,pStats) ) 

#define IWMWriterAdvanced_SetSyncTolerance(This,msWindow)	\
    ( (This)->lpVtbl -> SetSyncTolerance(This,msWindow) ) 

#define IWMWriterAdvanced_GetSyncTolerance(This,pmsWindow)	\
    ( (This)->lpVtbl -> GetSyncTolerance(This,pmsWindow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterAdvanced_INTERFACE_DEFINED__ */


#ifndef __IWMWriterAdvanced2_INTERFACE_DEFINED__
#define __IWMWriterAdvanced2_INTERFACE_DEFINED__

/* interface IWMWriterAdvanced2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterAdvanced2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("962dc1ec-c046-4db8-9cc7-26ceae500817")
    IWMWriterAdvanced2 : public IWMWriterAdvanced
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInputSetting( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetInputSetting( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterAdvanced2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterAdvanced2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterAdvanced2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSinkCount )( 
            IWMWriterAdvanced2 * This,
            /* [out] */ DWORD *pcSinks);
        
        HRESULT ( STDMETHODCALLTYPE *GetSink )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ DWORD dwSinkNum,
            /* [out] */ IWMWriterSink **ppSink);
        
        HRESULT ( STDMETHODCALLTYPE *AddSink )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ IWMWriterSink *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveSink )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ IWMWriterSink *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *WriteStreamSample )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ DWORD msSampleSendTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample);
        
        HRESULT ( STDMETHODCALLTYPE *SetLiveSource )( 
            IWMWriterAdvanced2 * This,
            BOOL fIsLiveSource);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterAdvanced2 * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetWriterTime )( 
            IWMWriterAdvanced2 * This,
            /* [out] */ QWORD *pcnsCurrentTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WM_WRITER_STATISTICS *pStats);
        
        HRESULT ( STDMETHODCALLTYPE *SetSyncTolerance )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ DWORD msWindow);
        
        HRESULT ( STDMETHODCALLTYPE *GetSyncTolerance )( 
            IWMWriterAdvanced2 * This,
            /* [out] */ DWORD *pmsWindow);
        
        HRESULT ( STDMETHODCALLTYPE *GetInputSetting )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetInputSetting )( 
            IWMWriterAdvanced2 * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        END_INTERFACE
    } IWMWriterAdvanced2Vtbl;

    interface IWMWriterAdvanced2
    {
        CONST_VTBL struct IWMWriterAdvanced2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterAdvanced2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterAdvanced2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterAdvanced2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterAdvanced2_GetSinkCount(This,pcSinks)	\
    ( (This)->lpVtbl -> GetSinkCount(This,pcSinks) ) 

#define IWMWriterAdvanced2_GetSink(This,dwSinkNum,ppSink)	\
    ( (This)->lpVtbl -> GetSink(This,dwSinkNum,ppSink) ) 

#define IWMWriterAdvanced2_AddSink(This,pSink)	\
    ( (This)->lpVtbl -> AddSink(This,pSink) ) 

#define IWMWriterAdvanced2_RemoveSink(This,pSink)	\
    ( (This)->lpVtbl -> RemoveSink(This,pSink) ) 

#define IWMWriterAdvanced2_WriteStreamSample(This,wStreamNum,cnsSampleTime,msSampleSendTime,cnsSampleDuration,dwFlags,pSample)	\
    ( (This)->lpVtbl -> WriteStreamSample(This,wStreamNum,cnsSampleTime,msSampleSendTime,cnsSampleDuration,dwFlags,pSample) ) 

#define IWMWriterAdvanced2_SetLiveSource(This,fIsLiveSource)	\
    ( (This)->lpVtbl -> SetLiveSource(This,fIsLiveSource) ) 

#define IWMWriterAdvanced2_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterAdvanced2_GetWriterTime(This,pcnsCurrentTime)	\
    ( (This)->lpVtbl -> GetWriterTime(This,pcnsCurrentTime) ) 

#define IWMWriterAdvanced2_GetStatistics(This,wStreamNum,pStats)	\
    ( (This)->lpVtbl -> GetStatistics(This,wStreamNum,pStats) ) 

#define IWMWriterAdvanced2_SetSyncTolerance(This,msWindow)	\
    ( (This)->lpVtbl -> SetSyncTolerance(This,msWindow) ) 

#define IWMWriterAdvanced2_GetSyncTolerance(This,pmsWindow)	\
    ( (This)->lpVtbl -> GetSyncTolerance(This,pmsWindow) ) 


#define IWMWriterAdvanced2_GetInputSetting(This,dwInputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetInputSetting(This,dwInputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMWriterAdvanced2_SetInputSetting(This,dwInputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetInputSetting(This,dwInputNum,pszName,Type,pValue,cbLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterAdvanced2_INTERFACE_DEFINED__ */


#ifndef __IWMWriterAdvanced3_INTERFACE_DEFINED__
#define __IWMWriterAdvanced3_INTERFACE_DEFINED__

/* interface IWMWriterAdvanced3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterAdvanced3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2cd6492d-7c37-4e76-9d3b-59261183a22e")
    IWMWriterAdvanced3 : public IWMWriterAdvanced2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStatisticsEx( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ WM_WRITER_STATISTICS_EX *pStats) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetNonBlocking( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterAdvanced3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterAdvanced3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterAdvanced3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSinkCount )( 
            IWMWriterAdvanced3 * This,
            /* [out] */ DWORD *pcSinks);
        
        HRESULT ( STDMETHODCALLTYPE *GetSink )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ DWORD dwSinkNum,
            /* [out] */ IWMWriterSink **ppSink);
        
        HRESULT ( STDMETHODCALLTYPE *AddSink )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ IWMWriterSink *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveSink )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ IWMWriterSink *pSink);
        
        HRESULT ( STDMETHODCALLTYPE *WriteStreamSample )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ DWORD msSampleSendTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample);
        
        HRESULT ( STDMETHODCALLTYPE *SetLiveSource )( 
            IWMWriterAdvanced3 * This,
            BOOL fIsLiveSource);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterAdvanced3 * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetWriterTime )( 
            IWMWriterAdvanced3 * This,
            /* [out] */ QWORD *pcnsCurrentTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WM_WRITER_STATISTICS *pStats);
        
        HRESULT ( STDMETHODCALLTYPE *SetSyncTolerance )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ DWORD msWindow);
        
        HRESULT ( STDMETHODCALLTYPE *GetSyncTolerance )( 
            IWMWriterAdvanced3 * This,
            /* [out] */ DWORD *pmsWindow);
        
        HRESULT ( STDMETHODCALLTYPE *GetInputSetting )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetInputSetting )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatisticsEx )( 
            IWMWriterAdvanced3 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WM_WRITER_STATISTICS_EX *pStats);
        
        HRESULT ( STDMETHODCALLTYPE *SetNonBlocking )( 
            IWMWriterAdvanced3 * This);
        
        END_INTERFACE
    } IWMWriterAdvanced3Vtbl;

    interface IWMWriterAdvanced3
    {
        CONST_VTBL struct IWMWriterAdvanced3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterAdvanced3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterAdvanced3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterAdvanced3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterAdvanced3_GetSinkCount(This,pcSinks)	\
    ( (This)->lpVtbl -> GetSinkCount(This,pcSinks) ) 

#define IWMWriterAdvanced3_GetSink(This,dwSinkNum,ppSink)	\
    ( (This)->lpVtbl -> GetSink(This,dwSinkNum,ppSink) ) 

#define IWMWriterAdvanced3_AddSink(This,pSink)	\
    ( (This)->lpVtbl -> AddSink(This,pSink) ) 

#define IWMWriterAdvanced3_RemoveSink(This,pSink)	\
    ( (This)->lpVtbl -> RemoveSink(This,pSink) ) 

#define IWMWriterAdvanced3_WriteStreamSample(This,wStreamNum,cnsSampleTime,msSampleSendTime,cnsSampleDuration,dwFlags,pSample)	\
    ( (This)->lpVtbl -> WriteStreamSample(This,wStreamNum,cnsSampleTime,msSampleSendTime,cnsSampleDuration,dwFlags,pSample) ) 

#define IWMWriterAdvanced3_SetLiveSource(This,fIsLiveSource)	\
    ( (This)->lpVtbl -> SetLiveSource(This,fIsLiveSource) ) 

#define IWMWriterAdvanced3_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterAdvanced3_GetWriterTime(This,pcnsCurrentTime)	\
    ( (This)->lpVtbl -> GetWriterTime(This,pcnsCurrentTime) ) 

#define IWMWriterAdvanced3_GetStatistics(This,wStreamNum,pStats)	\
    ( (This)->lpVtbl -> GetStatistics(This,wStreamNum,pStats) ) 

#define IWMWriterAdvanced3_SetSyncTolerance(This,msWindow)	\
    ( (This)->lpVtbl -> SetSyncTolerance(This,msWindow) ) 

#define IWMWriterAdvanced3_GetSyncTolerance(This,pmsWindow)	\
    ( (This)->lpVtbl -> GetSyncTolerance(This,pmsWindow) ) 


#define IWMWriterAdvanced3_GetInputSetting(This,dwInputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetInputSetting(This,dwInputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMWriterAdvanced3_SetInputSetting(This,dwInputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetInputSetting(This,dwInputNum,pszName,Type,pValue,cbLength) ) 


#define IWMWriterAdvanced3_GetStatisticsEx(This,wStreamNum,pStats)	\
    ( (This)->lpVtbl -> GetStatisticsEx(This,wStreamNum,pStats) ) 

#define IWMWriterAdvanced3_SetNonBlocking(This)	\
    ( (This)->lpVtbl -> SetNonBlocking(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterAdvanced3_INTERFACE_DEFINED__ */


#ifndef __IWMWriterPreprocess_INTERFACE_DEFINED__
#define __IWMWriterPreprocess_INTERFACE_DEFINED__

/* interface IWMWriterPreprocess */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterPreprocess;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fc54a285-38c4-45b5-aa23-85b9f7cb424b")
    IWMWriterPreprocess : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMaxPreprocessingPasses( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ DWORD dwFlags,
            /* [out] */ DWORD *pdwMaxNumPasses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetNumPreprocessingPasses( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwNumPasses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginPreprocessingPass( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PreprocessSample( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndPreprocessingPass( 
            /* [in] */ DWORD dwInputNum,
            /* [in] */ DWORD dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterPreprocessVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterPreprocess * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterPreprocess * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterPreprocess * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxPreprocessingPasses )( 
            IWMWriterPreprocess * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ DWORD dwFlags,
            /* [out] */ DWORD *pdwMaxNumPasses);
        
        HRESULT ( STDMETHODCALLTYPE *SetNumPreprocessingPasses )( 
            IWMWriterPreprocess * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ DWORD dwFlags,
            /* [in] */ DWORD dwNumPasses);
        
        HRESULT ( STDMETHODCALLTYPE *BeginPreprocessingPass )( 
            IWMWriterPreprocess * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *PreprocessSample )( 
            IWMWriterPreprocess * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample);
        
        HRESULT ( STDMETHODCALLTYPE *EndPreprocessingPass )( 
            IWMWriterPreprocess * This,
            /* [in] */ DWORD dwInputNum,
            /* [in] */ DWORD dwFlags);
        
        END_INTERFACE
    } IWMWriterPreprocessVtbl;

    interface IWMWriterPreprocess
    {
        CONST_VTBL struct IWMWriterPreprocessVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterPreprocess_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterPreprocess_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterPreprocess_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterPreprocess_GetMaxPreprocessingPasses(This,dwInputNum,dwFlags,pdwMaxNumPasses)	\
    ( (This)->lpVtbl -> GetMaxPreprocessingPasses(This,dwInputNum,dwFlags,pdwMaxNumPasses) ) 

#define IWMWriterPreprocess_SetNumPreprocessingPasses(This,dwInputNum,dwFlags,dwNumPasses)	\
    ( (This)->lpVtbl -> SetNumPreprocessingPasses(This,dwInputNum,dwFlags,dwNumPasses) ) 

#define IWMWriterPreprocess_BeginPreprocessingPass(This,dwInputNum,dwFlags)	\
    ( (This)->lpVtbl -> BeginPreprocessingPass(This,dwInputNum,dwFlags) ) 

#define IWMWriterPreprocess_PreprocessSample(This,dwInputNum,cnsSampleTime,dwFlags,pSample)	\
    ( (This)->lpVtbl -> PreprocessSample(This,dwInputNum,cnsSampleTime,dwFlags,pSample) ) 

#define IWMWriterPreprocess_EndPreprocessingPass(This,dwInputNum,dwFlags)	\
    ( (This)->lpVtbl -> EndPreprocessingPass(This,dwInputNum,dwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterPreprocess_INTERFACE_DEFINED__ */


#ifndef __IWMWriterPostViewCallback_INTERFACE_DEFINED__
#define __IWMWriterPostViewCallback_INTERFACE_DEFINED__

/* interface IWMWriterPostViewCallback */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterPostViewCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D9D6549D-A193-4f24-B308-03123D9B7F8D")
    IWMWriterPostViewCallback : public IWMStatusCallback
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnPostViewSample( 
            /* [in] */ WORD wStreamNumber,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AllocateForPostView( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterPostViewCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterPostViewCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterPostViewCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterPostViewCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStatus )( 
            IWMWriterPostViewCallback * This,
            /* [in] */ WMT_STATUS Status,
            /* [in] */ HRESULT hr,
            /* [in] */ WMT_ATTR_DATATYPE dwType,
            /* [in] */ BYTE *pValue,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *OnPostViewSample )( 
            IWMWriterPostViewCallback * This,
            /* [in] */ WORD wStreamNumber,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateForPostView )( 
            IWMWriterPostViewCallback * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMWriterPostViewCallbackVtbl;

    interface IWMWriterPostViewCallback
    {
        CONST_VTBL struct IWMWriterPostViewCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterPostViewCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterPostViewCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterPostViewCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterPostViewCallback_OnStatus(This,Status,hr,dwType,pValue,pvContext)	\
    ( (This)->lpVtbl -> OnStatus(This,Status,hr,dwType,pValue,pvContext) ) 


#define IWMWriterPostViewCallback_OnPostViewSample(This,wStreamNumber,cnsSampleTime,cnsSampleDuration,dwFlags,pSample,pvContext)	\
    ( (This)->lpVtbl -> OnPostViewSample(This,wStreamNumber,cnsSampleTime,cnsSampleDuration,dwFlags,pSample,pvContext) ) 

#define IWMWriterPostViewCallback_AllocateForPostView(This,wStreamNum,cbBuffer,ppBuffer,pvContext)	\
    ( (This)->lpVtbl -> AllocateForPostView(This,wStreamNum,cbBuffer,ppBuffer,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterPostViewCallback_INTERFACE_DEFINED__ */


#ifndef __IWMWriterPostView_INTERFACE_DEFINED__
#define __IWMWriterPostView_INTERFACE_DEFINED__

/* interface IWMWriterPostView */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterPostView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("81E20CE4-75EF-491a-8004-FC53C45BDC3E")
    IWMWriterPostView : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetPostViewCallback( 
            IWMWriterPostViewCallback *pCallback,
            void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetReceivePostViewSamples( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceivePostViewSamples) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReceivePostViewSamples( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceivePostViewSamples) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPostViewProps( 
            /* [in] */ WORD wStreamNumber,
            /* [out] */ IWMMediaProps **ppOutput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPostViewProps( 
            /* [in] */ WORD wStreamNumber,
            /* [in] */ IWMMediaProps *pOutput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPostViewFormatCount( 
            /* [in] */ WORD wStreamNumber,
            /* [out] */ DWORD *pcFormats) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPostViewFormat( 
            /* [in] */ WORD wStreamNumber,
            /* [in] */ DWORD dwFormatNumber,
            /* [out] */ IWMMediaProps **ppProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAllocateForPostView( 
            /* [in] */ WORD wStreamNumber,
            /* [in] */ BOOL fAllocate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAllocateForPostView( 
            /* [in] */ WORD wStreamNumber,
            /* [out] */ BOOL *pfAllocate) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterPostViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterPostView * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterPostView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterPostView * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetPostViewCallback )( 
            IWMWriterPostView * This,
            IWMWriterPostViewCallback *pCallback,
            void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceivePostViewSamples )( 
            IWMWriterPostView * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceivePostViewSamples);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceivePostViewSamples )( 
            IWMWriterPostView * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceivePostViewSamples);
        
        HRESULT ( STDMETHODCALLTYPE *GetPostViewProps )( 
            IWMWriterPostView * This,
            /* [in] */ WORD wStreamNumber,
            /* [out] */ IWMMediaProps **ppOutput);
        
        HRESULT ( STDMETHODCALLTYPE *SetPostViewProps )( 
            IWMWriterPostView * This,
            /* [in] */ WORD wStreamNumber,
            /* [in] */ IWMMediaProps *pOutput);
        
        HRESULT ( STDMETHODCALLTYPE *GetPostViewFormatCount )( 
            IWMWriterPostView * This,
            /* [in] */ WORD wStreamNumber,
            /* [out] */ DWORD *pcFormats);
        
        HRESULT ( STDMETHODCALLTYPE *GetPostViewFormat )( 
            IWMWriterPostView * This,
            /* [in] */ WORD wStreamNumber,
            /* [in] */ DWORD dwFormatNumber,
            /* [out] */ IWMMediaProps **ppProps);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForPostView )( 
            IWMWriterPostView * This,
            /* [in] */ WORD wStreamNumber,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForPostView )( 
            IWMWriterPostView * This,
            /* [in] */ WORD wStreamNumber,
            /* [out] */ BOOL *pfAllocate);
        
        END_INTERFACE
    } IWMWriterPostViewVtbl;

    interface IWMWriterPostView
    {
        CONST_VTBL struct IWMWriterPostViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterPostView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterPostView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterPostView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterPostView_SetPostViewCallback(This,pCallback,pvContext)	\
    ( (This)->lpVtbl -> SetPostViewCallback(This,pCallback,pvContext) ) 

#define IWMWriterPostView_SetReceivePostViewSamples(This,wStreamNum,fReceivePostViewSamples)	\
    ( (This)->lpVtbl -> SetReceivePostViewSamples(This,wStreamNum,fReceivePostViewSamples) ) 

#define IWMWriterPostView_GetReceivePostViewSamples(This,wStreamNum,pfReceivePostViewSamples)	\
    ( (This)->lpVtbl -> GetReceivePostViewSamples(This,wStreamNum,pfReceivePostViewSamples) ) 

#define IWMWriterPostView_GetPostViewProps(This,wStreamNumber,ppOutput)	\
    ( (This)->lpVtbl -> GetPostViewProps(This,wStreamNumber,ppOutput) ) 

#define IWMWriterPostView_SetPostViewProps(This,wStreamNumber,pOutput)	\
    ( (This)->lpVtbl -> SetPostViewProps(This,wStreamNumber,pOutput) ) 

#define IWMWriterPostView_GetPostViewFormatCount(This,wStreamNumber,pcFormats)	\
    ( (This)->lpVtbl -> GetPostViewFormatCount(This,wStreamNumber,pcFormats) ) 

#define IWMWriterPostView_GetPostViewFormat(This,wStreamNumber,dwFormatNumber,ppProps)	\
    ( (This)->lpVtbl -> GetPostViewFormat(This,wStreamNumber,dwFormatNumber,ppProps) ) 

#define IWMWriterPostView_SetAllocateForPostView(This,wStreamNumber,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForPostView(This,wStreamNumber,fAllocate) ) 

#define IWMWriterPostView_GetAllocateForPostView(This,wStreamNumber,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForPostView(This,wStreamNumber,pfAllocate) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterPostView_INTERFACE_DEFINED__ */


#ifndef __IWMWriterSink_INTERFACE_DEFINED__
#define __IWMWriterSink_INTERFACE_DEFINED__

/* interface IWMWriterSink */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BE4-2B2B-11d3-B36B-00C04F6108FF")
    IWMWriterSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnHeader( 
            /* [in] */ INSSBuffer *pHeader) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsRealTime( 
            /* [out] */ BOOL *pfRealTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AllocateDataUnit( 
            /* [in] */ DWORD cbDataUnit,
            /* [out] */ INSSBuffer **ppDataUnit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnDataUnit( 
            /* [in] */ INSSBuffer *pDataUnit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnEndWriting( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnHeader )( 
            IWMWriterSink * This,
            /* [in] */ INSSBuffer *pHeader);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterSink * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateDataUnit )( 
            IWMWriterSink * This,
            /* [in] */ DWORD cbDataUnit,
            /* [out] */ INSSBuffer **ppDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataUnit )( 
            IWMWriterSink * This,
            /* [in] */ INSSBuffer *pDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndWriting )( 
            IWMWriterSink * This);
        
        END_INTERFACE
    } IWMWriterSinkVtbl;

    interface IWMWriterSink
    {
        CONST_VTBL struct IWMWriterSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterSink_OnHeader(This,pHeader)	\
    ( (This)->lpVtbl -> OnHeader(This,pHeader) ) 

#define IWMWriterSink_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterSink_AllocateDataUnit(This,cbDataUnit,ppDataUnit)	\
    ( (This)->lpVtbl -> AllocateDataUnit(This,cbDataUnit,ppDataUnit) ) 

#define IWMWriterSink_OnDataUnit(This,pDataUnit)	\
    ( (This)->lpVtbl -> OnDataUnit(This,pDataUnit) ) 

#define IWMWriterSink_OnEndWriting(This)	\
    ( (This)->lpVtbl -> OnEndWriting(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterSink_INTERFACE_DEFINED__ */


#ifndef __IWMRegisterCallback_INTERFACE_DEFINED__
#define __IWMRegisterCallback_INTERFACE_DEFINED__

/* interface IWMRegisterCallback */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMRegisterCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CF4B1F99-4DE2-4e49-A363-252740D99BC1")
    IWMRegisterCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Advise( 
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unadvise( 
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMRegisterCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMRegisterCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMRegisterCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMRegisterCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *Advise )( 
            IWMRegisterCallback * This,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *Unadvise )( 
            IWMRegisterCallback * This,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMRegisterCallbackVtbl;

    interface IWMRegisterCallback
    {
        CONST_VTBL struct IWMRegisterCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMRegisterCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMRegisterCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMRegisterCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMRegisterCallback_Advise(This,pCallback,pvContext)	\
    ( (This)->lpVtbl -> Advise(This,pCallback,pvContext) ) 

#define IWMRegisterCallback_Unadvise(This,pCallback,pvContext)	\
    ( (This)->lpVtbl -> Unadvise(This,pCallback,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMRegisterCallback_INTERFACE_DEFINED__ */


#ifndef __IWMWriterFileSink_INTERFACE_DEFINED__
#define __IWMWriterFileSink_INTERFACE_DEFINED__

/* interface IWMWriterFileSink */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterFileSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BE5-2B2B-11d3-B36B-00C04F6108FF")
    IWMWriterFileSink : public IWMWriterSink
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ const WCHAR *pwszFilename) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterFileSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterFileSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterFileSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterFileSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnHeader )( 
            IWMWriterFileSink * This,
            /* [in] */ INSSBuffer *pHeader);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterFileSink * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateDataUnit )( 
            IWMWriterFileSink * This,
            /* [in] */ DWORD cbDataUnit,
            /* [out] */ INSSBuffer **ppDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataUnit )( 
            IWMWriterFileSink * This,
            /* [in] */ INSSBuffer *pDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndWriting )( 
            IWMWriterFileSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMWriterFileSink * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        END_INTERFACE
    } IWMWriterFileSinkVtbl;

    interface IWMWriterFileSink
    {
        CONST_VTBL struct IWMWriterFileSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterFileSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterFileSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterFileSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterFileSink_OnHeader(This,pHeader)	\
    ( (This)->lpVtbl -> OnHeader(This,pHeader) ) 

#define IWMWriterFileSink_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterFileSink_AllocateDataUnit(This,cbDataUnit,ppDataUnit)	\
    ( (This)->lpVtbl -> AllocateDataUnit(This,cbDataUnit,ppDataUnit) ) 

#define IWMWriterFileSink_OnDataUnit(This,pDataUnit)	\
    ( (This)->lpVtbl -> OnDataUnit(This,pDataUnit) ) 

#define IWMWriterFileSink_OnEndWriting(This)	\
    ( (This)->lpVtbl -> OnEndWriting(This) ) 


#define IWMWriterFileSink_Open(This,pwszFilename)	\
    ( (This)->lpVtbl -> Open(This,pwszFilename) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterFileSink_INTERFACE_DEFINED__ */


#ifndef __IWMWriterFileSink2_INTERFACE_DEFINED__
#define __IWMWriterFileSink2_INTERFACE_DEFINED__

/* interface IWMWriterFileSink2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterFileSink2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("14282BA7-4AEF-4205-8CE5-C229035A05BC")
    IWMWriterFileSink2 : public IWMWriterFileSink
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Start( 
            /* [in] */ QWORD cnsStartTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stop( 
            /* [in] */ QWORD cnsStopTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsStopped( 
            /* [out] */ BOOL *pfStopped) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFileDuration( 
            /* [out] */ QWORD *pcnsDuration) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFileSize( 
            /* [out] */ QWORD *pcbFile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsClosed( 
            /* [out] */ BOOL *pfClosed) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterFileSink2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterFileSink2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterFileSink2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterFileSink2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnHeader )( 
            IWMWriterFileSink2 * This,
            /* [in] */ INSSBuffer *pHeader);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterFileSink2 * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateDataUnit )( 
            IWMWriterFileSink2 * This,
            /* [in] */ DWORD cbDataUnit,
            /* [out] */ INSSBuffer **ppDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataUnit )( 
            IWMWriterFileSink2 * This,
            /* [in] */ INSSBuffer *pDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndWriting )( 
            IWMWriterFileSink2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMWriterFileSink2 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *Start )( 
            IWMWriterFileSink2 * This,
            /* [in] */ QWORD cnsStartTime);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IWMWriterFileSink2 * This,
            /* [in] */ QWORD cnsStopTime);
        
        HRESULT ( STDMETHODCALLTYPE *IsStopped )( 
            IWMWriterFileSink2 * This,
            /* [out] */ BOOL *pfStopped);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileDuration )( 
            IWMWriterFileSink2 * This,
            /* [out] */ QWORD *pcnsDuration);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileSize )( 
            IWMWriterFileSink2 * This,
            /* [out] */ QWORD *pcbFile);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMWriterFileSink2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsClosed )( 
            IWMWriterFileSink2 * This,
            /* [out] */ BOOL *pfClosed);
        
        END_INTERFACE
    } IWMWriterFileSink2Vtbl;

    interface IWMWriterFileSink2
    {
        CONST_VTBL struct IWMWriterFileSink2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterFileSink2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterFileSink2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterFileSink2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterFileSink2_OnHeader(This,pHeader)	\
    ( (This)->lpVtbl -> OnHeader(This,pHeader) ) 

#define IWMWriterFileSink2_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterFileSink2_AllocateDataUnit(This,cbDataUnit,ppDataUnit)	\
    ( (This)->lpVtbl -> AllocateDataUnit(This,cbDataUnit,ppDataUnit) ) 

#define IWMWriterFileSink2_OnDataUnit(This,pDataUnit)	\
    ( (This)->lpVtbl -> OnDataUnit(This,pDataUnit) ) 

#define IWMWriterFileSink2_OnEndWriting(This)	\
    ( (This)->lpVtbl -> OnEndWriting(This) ) 


#define IWMWriterFileSink2_Open(This,pwszFilename)	\
    ( (This)->lpVtbl -> Open(This,pwszFilename) ) 


#define IWMWriterFileSink2_Start(This,cnsStartTime)	\
    ( (This)->lpVtbl -> Start(This,cnsStartTime) ) 

#define IWMWriterFileSink2_Stop(This,cnsStopTime)	\
    ( (This)->lpVtbl -> Stop(This,cnsStopTime) ) 

#define IWMWriterFileSink2_IsStopped(This,pfStopped)	\
    ( (This)->lpVtbl -> IsStopped(This,pfStopped) ) 

#define IWMWriterFileSink2_GetFileDuration(This,pcnsDuration)	\
    ( (This)->lpVtbl -> GetFileDuration(This,pcnsDuration) ) 

#define IWMWriterFileSink2_GetFileSize(This,pcbFile)	\
    ( (This)->lpVtbl -> GetFileSize(This,pcbFile) ) 

#define IWMWriterFileSink2_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWMWriterFileSink2_IsClosed(This,pfClosed)	\
    ( (This)->lpVtbl -> IsClosed(This,pfClosed) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterFileSink2_INTERFACE_DEFINED__ */


#ifndef __IWMWriterFileSink3_INTERFACE_DEFINED__
#define __IWMWriterFileSink3_INTERFACE_DEFINED__

/* interface IWMWriterFileSink3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterFileSink3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3FEA4FEB-2945-47A7-A1DD-C53A8FC4C45C")
    IWMWriterFileSink3 : public IWMWriterFileSink2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetAutoIndexing( 
            /* [in] */ BOOL fDoAutoIndexing) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAutoIndexing( 
            /* [out] */ BOOL *pfAutoIndexing) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetControlStream( 
            /* [in] */ WORD wStreamNumber,
            /* [in] */ BOOL fShouldControlStartAndStop) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMode( 
            /* [out] */ DWORD *pdwFileSinkMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnDataUnitEx( 
            /* [in] */ WMT_FILESINK_DATA_UNIT *pFileSinkDataUnit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetUnbufferedIO( 
            /* [in] */ BOOL fUnbufferedIO,
            /* [in] */ BOOL fRestrictMemUsage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUnbufferedIO( 
            /* [out] */ BOOL *pfUnbufferedIO) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CompleteOperations( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterFileSink3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterFileSink3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterFileSink3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterFileSink3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnHeader )( 
            IWMWriterFileSink3 * This,
            /* [in] */ INSSBuffer *pHeader);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterFileSink3 * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateDataUnit )( 
            IWMWriterFileSink3 * This,
            /* [in] */ DWORD cbDataUnit,
            /* [out] */ INSSBuffer **ppDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataUnit )( 
            IWMWriterFileSink3 * This,
            /* [in] */ INSSBuffer *pDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndWriting )( 
            IWMWriterFileSink3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMWriterFileSink3 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *Start )( 
            IWMWriterFileSink3 * This,
            /* [in] */ QWORD cnsStartTime);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IWMWriterFileSink3 * This,
            /* [in] */ QWORD cnsStopTime);
        
        HRESULT ( STDMETHODCALLTYPE *IsStopped )( 
            IWMWriterFileSink3 * This,
            /* [out] */ BOOL *pfStopped);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileDuration )( 
            IWMWriterFileSink3 * This,
            /* [out] */ QWORD *pcnsDuration);
        
        HRESULT ( STDMETHODCALLTYPE *GetFileSize )( 
            IWMWriterFileSink3 * This,
            /* [out] */ QWORD *pcbFile);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMWriterFileSink3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsClosed )( 
            IWMWriterFileSink3 * This,
            /* [out] */ BOOL *pfClosed);
        
        HRESULT ( STDMETHODCALLTYPE *SetAutoIndexing )( 
            IWMWriterFileSink3 * This,
            /* [in] */ BOOL fDoAutoIndexing);
        
        HRESULT ( STDMETHODCALLTYPE *GetAutoIndexing )( 
            IWMWriterFileSink3 * This,
            /* [out] */ BOOL *pfAutoIndexing);
        
        HRESULT ( STDMETHODCALLTYPE *SetControlStream )( 
            IWMWriterFileSink3 * This,
            /* [in] */ WORD wStreamNumber,
            /* [in] */ BOOL fShouldControlStartAndStop);
        
        HRESULT ( STDMETHODCALLTYPE *GetMode )( 
            IWMWriterFileSink3 * This,
            /* [out] */ DWORD *pdwFileSinkMode);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataUnitEx )( 
            IWMWriterFileSink3 * This,
            /* [in] */ WMT_FILESINK_DATA_UNIT *pFileSinkDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *SetUnbufferedIO )( 
            IWMWriterFileSink3 * This,
            /* [in] */ BOOL fUnbufferedIO,
            /* [in] */ BOOL fRestrictMemUsage);
        
        HRESULT ( STDMETHODCALLTYPE *GetUnbufferedIO )( 
            IWMWriterFileSink3 * This,
            /* [out] */ BOOL *pfUnbufferedIO);
        
        HRESULT ( STDMETHODCALLTYPE *CompleteOperations )( 
            IWMWriterFileSink3 * This);
        
        END_INTERFACE
    } IWMWriterFileSink3Vtbl;

    interface IWMWriterFileSink3
    {
        CONST_VTBL struct IWMWriterFileSink3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterFileSink3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterFileSink3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterFileSink3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterFileSink3_OnHeader(This,pHeader)	\
    ( (This)->lpVtbl -> OnHeader(This,pHeader) ) 

#define IWMWriterFileSink3_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterFileSink3_AllocateDataUnit(This,cbDataUnit,ppDataUnit)	\
    ( (This)->lpVtbl -> AllocateDataUnit(This,cbDataUnit,ppDataUnit) ) 

#define IWMWriterFileSink3_OnDataUnit(This,pDataUnit)	\
    ( (This)->lpVtbl -> OnDataUnit(This,pDataUnit) ) 

#define IWMWriterFileSink3_OnEndWriting(This)	\
    ( (This)->lpVtbl -> OnEndWriting(This) ) 


#define IWMWriterFileSink3_Open(This,pwszFilename)	\
    ( (This)->lpVtbl -> Open(This,pwszFilename) ) 


#define IWMWriterFileSink3_Start(This,cnsStartTime)	\
    ( (This)->lpVtbl -> Start(This,cnsStartTime) ) 

#define IWMWriterFileSink3_Stop(This,cnsStopTime)	\
    ( (This)->lpVtbl -> Stop(This,cnsStopTime) ) 

#define IWMWriterFileSink3_IsStopped(This,pfStopped)	\
    ( (This)->lpVtbl -> IsStopped(This,pfStopped) ) 

#define IWMWriterFileSink3_GetFileDuration(This,pcnsDuration)	\
    ( (This)->lpVtbl -> GetFileDuration(This,pcnsDuration) ) 

#define IWMWriterFileSink3_GetFileSize(This,pcbFile)	\
    ( (This)->lpVtbl -> GetFileSize(This,pcbFile) ) 

#define IWMWriterFileSink3_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IWMWriterFileSink3_IsClosed(This,pfClosed)	\
    ( (This)->lpVtbl -> IsClosed(This,pfClosed) ) 


#define IWMWriterFileSink3_SetAutoIndexing(This,fDoAutoIndexing)	\
    ( (This)->lpVtbl -> SetAutoIndexing(This,fDoAutoIndexing) ) 

#define IWMWriterFileSink3_GetAutoIndexing(This,pfAutoIndexing)	\
    ( (This)->lpVtbl -> GetAutoIndexing(This,pfAutoIndexing) ) 

#define IWMWriterFileSink3_SetControlStream(This,wStreamNumber,fShouldControlStartAndStop)	\
    ( (This)->lpVtbl -> SetControlStream(This,wStreamNumber,fShouldControlStartAndStop) ) 

#define IWMWriterFileSink3_GetMode(This,pdwFileSinkMode)	\
    ( (This)->lpVtbl -> GetMode(This,pdwFileSinkMode) ) 

#define IWMWriterFileSink3_OnDataUnitEx(This,pFileSinkDataUnit)	\
    ( (This)->lpVtbl -> OnDataUnitEx(This,pFileSinkDataUnit) ) 

#define IWMWriterFileSink3_SetUnbufferedIO(This,fUnbufferedIO,fRestrictMemUsage)	\
    ( (This)->lpVtbl -> SetUnbufferedIO(This,fUnbufferedIO,fRestrictMemUsage) ) 

#define IWMWriterFileSink3_GetUnbufferedIO(This,pfUnbufferedIO)	\
    ( (This)->lpVtbl -> GetUnbufferedIO(This,pfUnbufferedIO) ) 

#define IWMWriterFileSink3_CompleteOperations(This)	\
    ( (This)->lpVtbl -> CompleteOperations(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterFileSink3_INTERFACE_DEFINED__ */


#ifndef __IWMWriterNetworkSink_INTERFACE_DEFINED__
#define __IWMWriterNetworkSink_INTERFACE_DEFINED__

/* interface IWMWriterNetworkSink */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterNetworkSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BE7-2B2B-11d3-B36B-00C04F6108FF")
    IWMWriterNetworkSink : public IWMWriterSink
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetMaximumClients( 
            /* [in] */ DWORD dwMaxClients) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaximumClients( 
            /* [out] */ DWORD *pdwMaxClients) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetNetworkProtocol( 
            /* [in] */ WMT_NET_PROTOCOL protocol) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNetworkProtocol( 
            /* [out] */ WMT_NET_PROTOCOL *pProtocol) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHostURL( 
            /* [out] */ WCHAR *pwszURL,
            /* [out][in] */ DWORD *pcchURL) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [out][in] */ DWORD *pdwPortNum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Disconnect( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterNetworkSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterNetworkSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterNetworkSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterNetworkSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnHeader )( 
            IWMWriterNetworkSink * This,
            /* [in] */ INSSBuffer *pHeader);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterNetworkSink * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateDataUnit )( 
            IWMWriterNetworkSink * This,
            /* [in] */ DWORD cbDataUnit,
            /* [out] */ INSSBuffer **ppDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataUnit )( 
            IWMWriterNetworkSink * This,
            /* [in] */ INSSBuffer *pDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndWriting )( 
            IWMWriterNetworkSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetMaximumClients )( 
            IWMWriterNetworkSink * This,
            /* [in] */ DWORD dwMaxClients);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaximumClients )( 
            IWMWriterNetworkSink * This,
            /* [out] */ DWORD *pdwMaxClients);
        
        HRESULT ( STDMETHODCALLTYPE *SetNetworkProtocol )( 
            IWMWriterNetworkSink * This,
            /* [in] */ WMT_NET_PROTOCOL protocol);
        
        HRESULT ( STDMETHODCALLTYPE *GetNetworkProtocol )( 
            IWMWriterNetworkSink * This,
            /* [out] */ WMT_NET_PROTOCOL *pProtocol);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostURL )( 
            IWMWriterNetworkSink * This,
            /* [out] */ WCHAR *pwszURL,
            /* [out][in] */ DWORD *pcchURL);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMWriterNetworkSink * This,
            /* [out][in] */ DWORD *pdwPortNum);
        
        HRESULT ( STDMETHODCALLTYPE *Disconnect )( 
            IWMWriterNetworkSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMWriterNetworkSink * This);
        
        END_INTERFACE
    } IWMWriterNetworkSinkVtbl;

    interface IWMWriterNetworkSink
    {
        CONST_VTBL struct IWMWriterNetworkSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterNetworkSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterNetworkSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterNetworkSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterNetworkSink_OnHeader(This,pHeader)	\
    ( (This)->lpVtbl -> OnHeader(This,pHeader) ) 

#define IWMWriterNetworkSink_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterNetworkSink_AllocateDataUnit(This,cbDataUnit,ppDataUnit)	\
    ( (This)->lpVtbl -> AllocateDataUnit(This,cbDataUnit,ppDataUnit) ) 

#define IWMWriterNetworkSink_OnDataUnit(This,pDataUnit)	\
    ( (This)->lpVtbl -> OnDataUnit(This,pDataUnit) ) 

#define IWMWriterNetworkSink_OnEndWriting(This)	\
    ( (This)->lpVtbl -> OnEndWriting(This) ) 


#define IWMWriterNetworkSink_SetMaximumClients(This,dwMaxClients)	\
    ( (This)->lpVtbl -> SetMaximumClients(This,dwMaxClients) ) 

#define IWMWriterNetworkSink_GetMaximumClients(This,pdwMaxClients)	\
    ( (This)->lpVtbl -> GetMaximumClients(This,pdwMaxClients) ) 

#define IWMWriterNetworkSink_SetNetworkProtocol(This,protocol)	\
    ( (This)->lpVtbl -> SetNetworkProtocol(This,protocol) ) 

#define IWMWriterNetworkSink_GetNetworkProtocol(This,pProtocol)	\
    ( (This)->lpVtbl -> GetNetworkProtocol(This,pProtocol) ) 

#define IWMWriterNetworkSink_GetHostURL(This,pwszURL,pcchURL)	\
    ( (This)->lpVtbl -> GetHostURL(This,pwszURL,pcchURL) ) 

#define IWMWriterNetworkSink_Open(This,pdwPortNum)	\
    ( (This)->lpVtbl -> Open(This,pdwPortNum) ) 

#define IWMWriterNetworkSink_Disconnect(This)	\
    ( (This)->lpVtbl -> Disconnect(This) ) 

#define IWMWriterNetworkSink_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterNetworkSink_INTERFACE_DEFINED__ */


#ifndef __IWMClientConnections_INTERFACE_DEFINED__
#define __IWMClientConnections_INTERFACE_DEFINED__

/* interface IWMClientConnections */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMClientConnections;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("73C66010-A299-41df-B1F0-CCF03B09C1C6")
    IWMClientConnections : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClientCount( 
            /* [out] */ DWORD *pcClients) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClientProperties( 
            /* [in] */ DWORD dwClientNum,
            /* [out] */ WM_CLIENT_PROPERTIES *pClientProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMClientConnectionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMClientConnections * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMClientConnections * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMClientConnections * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetClientCount )( 
            IWMClientConnections * This,
            /* [out] */ DWORD *pcClients);
        
        HRESULT ( STDMETHODCALLTYPE *GetClientProperties )( 
            IWMClientConnections * This,
            /* [in] */ DWORD dwClientNum,
            /* [out] */ WM_CLIENT_PROPERTIES *pClientProperties);
        
        END_INTERFACE
    } IWMClientConnectionsVtbl;

    interface IWMClientConnections
    {
        CONST_VTBL struct IWMClientConnectionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMClientConnections_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMClientConnections_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMClientConnections_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMClientConnections_GetClientCount(This,pcClients)	\
    ( (This)->lpVtbl -> GetClientCount(This,pcClients) ) 

#define IWMClientConnections_GetClientProperties(This,dwClientNum,pClientProperties)	\
    ( (This)->lpVtbl -> GetClientProperties(This,dwClientNum,pClientProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMClientConnections_INTERFACE_DEFINED__ */


#ifndef __IWMClientConnections2_INTERFACE_DEFINED__
#define __IWMClientConnections2_INTERFACE_DEFINED__

/* interface IWMClientConnections2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMClientConnections2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4091571e-4701-4593-bb3d-d5f5f0c74246")
    IWMClientConnections2 : public IWMClientConnections
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClientInfo( 
            /* [in] */ DWORD dwClientNum,
            /* [size_is][out] */ WCHAR *pwszNetworkAddress,
            /* [out][in] */ DWORD *pcchNetworkAddress,
            /* [size_is][out] */ WCHAR *pwszPort,
            /* [out][in] */ DWORD *pcchPort,
            /* [size_is][out] */ WCHAR *pwszDNSName,
            /* [out][in] */ DWORD *pcchDNSName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMClientConnections2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMClientConnections2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMClientConnections2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMClientConnections2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetClientCount )( 
            IWMClientConnections2 * This,
            /* [out] */ DWORD *pcClients);
        
        HRESULT ( STDMETHODCALLTYPE *GetClientProperties )( 
            IWMClientConnections2 * This,
            /* [in] */ DWORD dwClientNum,
            /* [out] */ WM_CLIENT_PROPERTIES *pClientProperties);
        
        HRESULT ( STDMETHODCALLTYPE *GetClientInfo )( 
            IWMClientConnections2 * This,
            /* [in] */ DWORD dwClientNum,
            /* [size_is][out] */ WCHAR *pwszNetworkAddress,
            /* [out][in] */ DWORD *pcchNetworkAddress,
            /* [size_is][out] */ WCHAR *pwszPort,
            /* [out][in] */ DWORD *pcchPort,
            /* [size_is][out] */ WCHAR *pwszDNSName,
            /* [out][in] */ DWORD *pcchDNSName);
        
        END_INTERFACE
    } IWMClientConnections2Vtbl;

    interface IWMClientConnections2
    {
        CONST_VTBL struct IWMClientConnections2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMClientConnections2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMClientConnections2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMClientConnections2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMClientConnections2_GetClientCount(This,pcClients)	\
    ( (This)->lpVtbl -> GetClientCount(This,pcClients) ) 

#define IWMClientConnections2_GetClientProperties(This,dwClientNum,pClientProperties)	\
    ( (This)->lpVtbl -> GetClientProperties(This,dwClientNum,pClientProperties) ) 


#define IWMClientConnections2_GetClientInfo(This,dwClientNum,pwszNetworkAddress,pcchNetworkAddress,pwszPort,pcchPort,pwszDNSName,pcchDNSName)	\
    ( (This)->lpVtbl -> GetClientInfo(This,dwClientNum,pwszNetworkAddress,pcchNetworkAddress,pwszPort,pcchPort,pwszDNSName,pcchDNSName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMClientConnections2_INTERFACE_DEFINED__ */


#ifndef __IWMReaderAdvanced_INTERFACE_DEFINED__
#define __IWMReaderAdvanced_INTERFACE_DEFINED__

/* interface IWMReaderAdvanced */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderAdvanced;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BEA-2B2B-11d3-B36B-00C04F6108FF")
    IWMReaderAdvanced : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetUserProvidedClock( 
            /* [in] */ BOOL fUserClock) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserProvidedClock( 
            /* [out] */ BOOL *pfUserClock) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeliverTime( 
            /* [in] */ QWORD cnsTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetManualStreamSelection( 
            /* [in] */ BOOL fSelection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetManualStreamSelection( 
            /* [out] */ BOOL *pfSelection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStreamsSelected( 
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStreamSelected( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetReceiveSelectionCallbacks( 
            /* [in] */ BOOL fGetCallbacks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReceiveSelectionCallbacks( 
            /* [out] */ BOOL *pfGetCallbacks) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetReceiveStreamSamples( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceiveStreamSamples) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReceiveStreamSamples( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceiveStreamSamples) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAllocateForOutput( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ BOOL fAllocate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAllocateForOutput( 
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ BOOL *pfAllocate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAllocateForStream( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fAllocate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAllocateForStream( 
            /* [in] */ WORD dwSreamNum,
            /* [out] */ BOOL *pfAllocate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatistics( 
            /* [out][in] */ WM_READER_STATISTICS *pStatistics) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClientInfo( 
            /* [in] */ WM_READER_CLIENTINFO *pClientInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxOutputSampleSize( 
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxStreamSampleSize( 
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotifyLateDelivery( 
            QWORD cnsLateness) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderAdvancedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderAdvanced * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderAdvanced * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderAdvanced * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetUserProvidedClock )( 
            IWMReaderAdvanced * This,
            /* [in] */ BOOL fUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserProvidedClock )( 
            IWMReaderAdvanced * This,
            /* [out] */ BOOL *pfUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *DeliverTime )( 
            IWMReaderAdvanced * This,
            /* [in] */ QWORD cnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetManualStreamSelection )( 
            IWMReaderAdvanced * This,
            /* [in] */ BOOL fSelection);
        
        HRESULT ( STDMETHODCALLTYPE *GetManualStreamSelection )( 
            IWMReaderAdvanced * This,
            /* [out] */ BOOL *pfSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamsSelected )( 
            IWMReaderAdvanced * This,
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamSelected )( 
            IWMReaderAdvanced * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced * This,
            /* [in] */ BOOL fGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced * This,
            /* [out] */ BOOL *pfGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveStreamSamples )( 
            IWMReaderAdvanced * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveStreamSamples )( 
            IWMReaderAdvanced * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForOutput )( 
            IWMReaderAdvanced * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForOutput )( 
            IWMReaderAdvanced * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForStream )( 
            IWMReaderAdvanced * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForStream )( 
            IWMReaderAdvanced * This,
            /* [in] */ WORD dwSreamNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMReaderAdvanced * This,
            /* [out][in] */ WM_READER_STATISTICS *pStatistics);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientInfo )( 
            IWMReaderAdvanced * This,
            /* [in] */ WM_READER_CLIENTINFO *pClientInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxOutputSampleSize )( 
            IWMReaderAdvanced * This,
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxStreamSampleSize )( 
            IWMReaderAdvanced * This,
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyLateDelivery )( 
            IWMReaderAdvanced * This,
            QWORD cnsLateness);
        
        END_INTERFACE
    } IWMReaderAdvancedVtbl;

    interface IWMReaderAdvanced
    {
        CONST_VTBL struct IWMReaderAdvancedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderAdvanced_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderAdvanced_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderAdvanced_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderAdvanced_SetUserProvidedClock(This,fUserClock)	\
    ( (This)->lpVtbl -> SetUserProvidedClock(This,fUserClock) ) 

#define IWMReaderAdvanced_GetUserProvidedClock(This,pfUserClock)	\
    ( (This)->lpVtbl -> GetUserProvidedClock(This,pfUserClock) ) 

#define IWMReaderAdvanced_DeliverTime(This,cnsTime)	\
    ( (This)->lpVtbl -> DeliverTime(This,cnsTime) ) 

#define IWMReaderAdvanced_SetManualStreamSelection(This,fSelection)	\
    ( (This)->lpVtbl -> SetManualStreamSelection(This,fSelection) ) 

#define IWMReaderAdvanced_GetManualStreamSelection(This,pfSelection)	\
    ( (This)->lpVtbl -> GetManualStreamSelection(This,pfSelection) ) 

#define IWMReaderAdvanced_SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections)	\
    ( (This)->lpVtbl -> SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections) ) 

#define IWMReaderAdvanced_GetStreamSelected(This,wStreamNum,pSelection)	\
    ( (This)->lpVtbl -> GetStreamSelected(This,wStreamNum,pSelection) ) 

#define IWMReaderAdvanced_SetReceiveSelectionCallbacks(This,fGetCallbacks)	\
    ( (This)->lpVtbl -> SetReceiveSelectionCallbacks(This,fGetCallbacks) ) 

#define IWMReaderAdvanced_GetReceiveSelectionCallbacks(This,pfGetCallbacks)	\
    ( (This)->lpVtbl -> GetReceiveSelectionCallbacks(This,pfGetCallbacks) ) 

#define IWMReaderAdvanced_SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples)	\
    ( (This)->lpVtbl -> SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples) ) 

#define IWMReaderAdvanced_GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples)	\
    ( (This)->lpVtbl -> GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples) ) 

#define IWMReaderAdvanced_SetAllocateForOutput(This,dwOutputNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForOutput(This,dwOutputNum,fAllocate) ) 

#define IWMReaderAdvanced_GetAllocateForOutput(This,dwOutputNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForOutput(This,dwOutputNum,pfAllocate) ) 

#define IWMReaderAdvanced_SetAllocateForStream(This,wStreamNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForStream(This,wStreamNum,fAllocate) ) 

#define IWMReaderAdvanced_GetAllocateForStream(This,dwSreamNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForStream(This,dwSreamNum,pfAllocate) ) 

#define IWMReaderAdvanced_GetStatistics(This,pStatistics)	\
    ( (This)->lpVtbl -> GetStatistics(This,pStatistics) ) 

#define IWMReaderAdvanced_SetClientInfo(This,pClientInfo)	\
    ( (This)->lpVtbl -> SetClientInfo(This,pClientInfo) ) 

#define IWMReaderAdvanced_GetMaxOutputSampleSize(This,dwOutput,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxOutputSampleSize(This,dwOutput,pcbMax) ) 

#define IWMReaderAdvanced_GetMaxStreamSampleSize(This,wStream,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxStreamSampleSize(This,wStream,pcbMax) ) 

#define IWMReaderAdvanced_NotifyLateDelivery(This,cnsLateness)	\
    ( (This)->lpVtbl -> NotifyLateDelivery(This,cnsLateness) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderAdvanced_INTERFACE_DEFINED__ */


#ifndef __IWMReaderAdvanced2_INTERFACE_DEFINED__
#define __IWMReaderAdvanced2_INTERFACE_DEFINED__

/* interface IWMReaderAdvanced2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderAdvanced2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ae14a945-b90c-4d0d-9127-80d665f7d73e")
    IWMReaderAdvanced2 : public IWMReaderAdvanced
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetPlayMode( 
            /* [in] */ WMT_PLAY_MODE Mode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPlayMode( 
            /* [out] */ WMT_PLAY_MODE *pMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBufferProgress( 
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pcnsBuffering) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDownloadProgress( 
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pqwBytesDownloaded,
            /* [out] */ QWORD *pcnsDownload) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSaveAsProgress( 
            /* [out] */ DWORD *pdwPercent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveFileAs( 
            /* [in] */ const WCHAR *pwszFilename) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProtocolName( 
            /* [size_is][out] */ WCHAR *pwszProtocol,
            /* [out][in] */ DWORD *pcchProtocol) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StartAtMarker( 
            /* [in] */ WORD wMarkerIndex,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputSetting( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOutputSetting( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Preroll( 
            /* [in] */ QWORD cnsStart,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLogClientID( 
            /* [in] */ BOOL fLogClientID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLogClientID( 
            /* [out] */ BOOL *pfLogClientID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StopBuffering( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpenStream( 
            /* [in] */ IStream *pStream,
            /* [in] */ IWMReaderCallback *pCallback,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderAdvanced2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderAdvanced2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderAdvanced2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetUserProvidedClock )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ BOOL fUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserProvidedClock )( 
            IWMReaderAdvanced2 * This,
            /* [out] */ BOOL *pfUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *DeliverTime )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ QWORD cnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetManualStreamSelection )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ BOOL fSelection);
        
        HRESULT ( STDMETHODCALLTYPE *GetManualStreamSelection )( 
            IWMReaderAdvanced2 * This,
            /* [out] */ BOOL *pfSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamsSelected )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamSelected )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ BOOL fGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced2 * This,
            /* [out] */ BOOL *pfGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveStreamSamples )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveStreamSamples )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForOutput )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForOutput )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForStream )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForStream )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WORD dwSreamNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMReaderAdvanced2 * This,
            /* [out][in] */ WM_READER_STATISTICS *pStatistics);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientInfo )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WM_READER_CLIENTINFO *pClientInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxOutputSampleSize )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxStreamSampleSize )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyLateDelivery )( 
            IWMReaderAdvanced2 * This,
            QWORD cnsLateness);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayMode )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WMT_PLAY_MODE Mode);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayMode )( 
            IWMReaderAdvanced2 * This,
            /* [out] */ WMT_PLAY_MODE *pMode);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferProgress )( 
            IWMReaderAdvanced2 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pcnsBuffering);
        
        HRESULT ( STDMETHODCALLTYPE *GetDownloadProgress )( 
            IWMReaderAdvanced2 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pqwBytesDownloaded,
            /* [out] */ QWORD *pcnsDownload);
        
        HRESULT ( STDMETHODCALLTYPE *GetSaveAsProgress )( 
            IWMReaderAdvanced2 * This,
            /* [out] */ DWORD *pdwPercent);
        
        HRESULT ( STDMETHODCALLTYPE *SaveFileAs )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *GetProtocolName )( 
            IWMReaderAdvanced2 * This,
            /* [size_is][out] */ WCHAR *pwszProtocol,
            /* [out][in] */ DWORD *pcchProtocol);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtMarker )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ WORD wMarkerIndex,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputSetting )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputSetting )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *Preroll )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ QWORD cnsStart,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate);
        
        HRESULT ( STDMETHODCALLTYPE *SetLogClientID )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ BOOL fLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *GetLogClientID )( 
            IWMReaderAdvanced2 * This,
            /* [out] */ BOOL *pfLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *StopBuffering )( 
            IWMReaderAdvanced2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenStream )( 
            IWMReaderAdvanced2 * This,
            /* [in] */ IStream *pStream,
            /* [in] */ IWMReaderCallback *pCallback,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMReaderAdvanced2Vtbl;

    interface IWMReaderAdvanced2
    {
        CONST_VTBL struct IWMReaderAdvanced2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderAdvanced2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderAdvanced2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderAdvanced2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderAdvanced2_SetUserProvidedClock(This,fUserClock)	\
    ( (This)->lpVtbl -> SetUserProvidedClock(This,fUserClock) ) 

#define IWMReaderAdvanced2_GetUserProvidedClock(This,pfUserClock)	\
    ( (This)->lpVtbl -> GetUserProvidedClock(This,pfUserClock) ) 

#define IWMReaderAdvanced2_DeliverTime(This,cnsTime)	\
    ( (This)->lpVtbl -> DeliverTime(This,cnsTime) ) 

#define IWMReaderAdvanced2_SetManualStreamSelection(This,fSelection)	\
    ( (This)->lpVtbl -> SetManualStreamSelection(This,fSelection) ) 

#define IWMReaderAdvanced2_GetManualStreamSelection(This,pfSelection)	\
    ( (This)->lpVtbl -> GetManualStreamSelection(This,pfSelection) ) 

#define IWMReaderAdvanced2_SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections)	\
    ( (This)->lpVtbl -> SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections) ) 

#define IWMReaderAdvanced2_GetStreamSelected(This,wStreamNum,pSelection)	\
    ( (This)->lpVtbl -> GetStreamSelected(This,wStreamNum,pSelection) ) 

#define IWMReaderAdvanced2_SetReceiveSelectionCallbacks(This,fGetCallbacks)	\
    ( (This)->lpVtbl -> SetReceiveSelectionCallbacks(This,fGetCallbacks) ) 

#define IWMReaderAdvanced2_GetReceiveSelectionCallbacks(This,pfGetCallbacks)	\
    ( (This)->lpVtbl -> GetReceiveSelectionCallbacks(This,pfGetCallbacks) ) 

#define IWMReaderAdvanced2_SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples)	\
    ( (This)->lpVtbl -> SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples) ) 

#define IWMReaderAdvanced2_GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples)	\
    ( (This)->lpVtbl -> GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples) ) 

#define IWMReaderAdvanced2_SetAllocateForOutput(This,dwOutputNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForOutput(This,dwOutputNum,fAllocate) ) 

#define IWMReaderAdvanced2_GetAllocateForOutput(This,dwOutputNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForOutput(This,dwOutputNum,pfAllocate) ) 

#define IWMReaderAdvanced2_SetAllocateForStream(This,wStreamNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForStream(This,wStreamNum,fAllocate) ) 

#define IWMReaderAdvanced2_GetAllocateForStream(This,dwSreamNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForStream(This,dwSreamNum,pfAllocate) ) 

#define IWMReaderAdvanced2_GetStatistics(This,pStatistics)	\
    ( (This)->lpVtbl -> GetStatistics(This,pStatistics) ) 

#define IWMReaderAdvanced2_SetClientInfo(This,pClientInfo)	\
    ( (This)->lpVtbl -> SetClientInfo(This,pClientInfo) ) 

#define IWMReaderAdvanced2_GetMaxOutputSampleSize(This,dwOutput,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxOutputSampleSize(This,dwOutput,pcbMax) ) 

#define IWMReaderAdvanced2_GetMaxStreamSampleSize(This,wStream,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxStreamSampleSize(This,wStream,pcbMax) ) 

#define IWMReaderAdvanced2_NotifyLateDelivery(This,cnsLateness)	\
    ( (This)->lpVtbl -> NotifyLateDelivery(This,cnsLateness) ) 


#define IWMReaderAdvanced2_SetPlayMode(This,Mode)	\
    ( (This)->lpVtbl -> SetPlayMode(This,Mode) ) 

#define IWMReaderAdvanced2_GetPlayMode(This,pMode)	\
    ( (This)->lpVtbl -> GetPlayMode(This,pMode) ) 

#define IWMReaderAdvanced2_GetBufferProgress(This,pdwPercent,pcnsBuffering)	\
    ( (This)->lpVtbl -> GetBufferProgress(This,pdwPercent,pcnsBuffering) ) 

#define IWMReaderAdvanced2_GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload)	\
    ( (This)->lpVtbl -> GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload) ) 

#define IWMReaderAdvanced2_GetSaveAsProgress(This,pdwPercent)	\
    ( (This)->lpVtbl -> GetSaveAsProgress(This,pdwPercent) ) 

#define IWMReaderAdvanced2_SaveFileAs(This,pwszFilename)	\
    ( (This)->lpVtbl -> SaveFileAs(This,pwszFilename) ) 

#define IWMReaderAdvanced2_GetProtocolName(This,pwszProtocol,pcchProtocol)	\
    ( (This)->lpVtbl -> GetProtocolName(This,pwszProtocol,pcchProtocol) ) 

#define IWMReaderAdvanced2_StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext) ) 

#define IWMReaderAdvanced2_GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMReaderAdvanced2_SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength) ) 

#define IWMReaderAdvanced2_Preroll(This,cnsStart,cnsDuration,fRate)	\
    ( (This)->lpVtbl -> Preroll(This,cnsStart,cnsDuration,fRate) ) 

#define IWMReaderAdvanced2_SetLogClientID(This,fLogClientID)	\
    ( (This)->lpVtbl -> SetLogClientID(This,fLogClientID) ) 

#define IWMReaderAdvanced2_GetLogClientID(This,pfLogClientID)	\
    ( (This)->lpVtbl -> GetLogClientID(This,pfLogClientID) ) 

#define IWMReaderAdvanced2_StopBuffering(This)	\
    ( (This)->lpVtbl -> StopBuffering(This) ) 

#define IWMReaderAdvanced2_OpenStream(This,pStream,pCallback,pvContext)	\
    ( (This)->lpVtbl -> OpenStream(This,pStream,pCallback,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderAdvanced2_INTERFACE_DEFINED__ */


#ifndef __IWMReaderAdvanced3_INTERFACE_DEFINED__
#define __IWMReaderAdvanced3_INTERFACE_DEFINED__

/* interface IWMReaderAdvanced3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderAdvanced3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5DC0674B-F04B-4a4e-9F2A-B1AFDE2C8100")
    IWMReaderAdvanced3 : public IWMReaderAdvanced2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StopNetStreaming( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StartAtPosition( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ void *pvOffsetStart,
            /* [in] */ void *pvDuration,
            /* [in] */ WMT_OFFSET_FORMAT dwOffsetFormat,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderAdvanced3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderAdvanced3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderAdvanced3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetUserProvidedClock )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ BOOL fUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserProvidedClock )( 
            IWMReaderAdvanced3 * This,
            /* [out] */ BOOL *pfUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *DeliverTime )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ QWORD cnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetManualStreamSelection )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ BOOL fSelection);
        
        HRESULT ( STDMETHODCALLTYPE *GetManualStreamSelection )( 
            IWMReaderAdvanced3 * This,
            /* [out] */ BOOL *pfSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamsSelected )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamSelected )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ BOOL fGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced3 * This,
            /* [out] */ BOOL *pfGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveStreamSamples )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveStreamSamples )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForOutput )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForOutput )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForStream )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForStream )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD dwSreamNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMReaderAdvanced3 * This,
            /* [out][in] */ WM_READER_STATISTICS *pStatistics);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientInfo )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WM_READER_CLIENTINFO *pClientInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxOutputSampleSize )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxStreamSampleSize )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyLateDelivery )( 
            IWMReaderAdvanced3 * This,
            QWORD cnsLateness);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayMode )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WMT_PLAY_MODE Mode);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayMode )( 
            IWMReaderAdvanced3 * This,
            /* [out] */ WMT_PLAY_MODE *pMode);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferProgress )( 
            IWMReaderAdvanced3 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pcnsBuffering);
        
        HRESULT ( STDMETHODCALLTYPE *GetDownloadProgress )( 
            IWMReaderAdvanced3 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pqwBytesDownloaded,
            /* [out] */ QWORD *pcnsDownload);
        
        HRESULT ( STDMETHODCALLTYPE *GetSaveAsProgress )( 
            IWMReaderAdvanced3 * This,
            /* [out] */ DWORD *pdwPercent);
        
        HRESULT ( STDMETHODCALLTYPE *SaveFileAs )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *GetProtocolName )( 
            IWMReaderAdvanced3 * This,
            /* [size_is][out] */ WCHAR *pwszProtocol,
            /* [out][in] */ DWORD *pcchProtocol);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtMarker )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD wMarkerIndex,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputSetting )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputSetting )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *Preroll )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ QWORD cnsStart,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate);
        
        HRESULT ( STDMETHODCALLTYPE *SetLogClientID )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ BOOL fLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *GetLogClientID )( 
            IWMReaderAdvanced3 * This,
            /* [out] */ BOOL *pfLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *StopBuffering )( 
            IWMReaderAdvanced3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenStream )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ IStream *pStream,
            /* [in] */ IWMReaderCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *StopNetStreaming )( 
            IWMReaderAdvanced3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtPosition )( 
            IWMReaderAdvanced3 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ void *pvOffsetStart,
            /* [in] */ void *pvDuration,
            /* [in] */ WMT_OFFSET_FORMAT dwOffsetFormat,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMReaderAdvanced3Vtbl;

    interface IWMReaderAdvanced3
    {
        CONST_VTBL struct IWMReaderAdvanced3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderAdvanced3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderAdvanced3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderAdvanced3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderAdvanced3_SetUserProvidedClock(This,fUserClock)	\
    ( (This)->lpVtbl -> SetUserProvidedClock(This,fUserClock) ) 

#define IWMReaderAdvanced3_GetUserProvidedClock(This,pfUserClock)	\
    ( (This)->lpVtbl -> GetUserProvidedClock(This,pfUserClock) ) 

#define IWMReaderAdvanced3_DeliverTime(This,cnsTime)	\
    ( (This)->lpVtbl -> DeliverTime(This,cnsTime) ) 

#define IWMReaderAdvanced3_SetManualStreamSelection(This,fSelection)	\
    ( (This)->lpVtbl -> SetManualStreamSelection(This,fSelection) ) 

#define IWMReaderAdvanced3_GetManualStreamSelection(This,pfSelection)	\
    ( (This)->lpVtbl -> GetManualStreamSelection(This,pfSelection) ) 

#define IWMReaderAdvanced3_SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections)	\
    ( (This)->lpVtbl -> SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections) ) 

#define IWMReaderAdvanced3_GetStreamSelected(This,wStreamNum,pSelection)	\
    ( (This)->lpVtbl -> GetStreamSelected(This,wStreamNum,pSelection) ) 

#define IWMReaderAdvanced3_SetReceiveSelectionCallbacks(This,fGetCallbacks)	\
    ( (This)->lpVtbl -> SetReceiveSelectionCallbacks(This,fGetCallbacks) ) 

#define IWMReaderAdvanced3_GetReceiveSelectionCallbacks(This,pfGetCallbacks)	\
    ( (This)->lpVtbl -> GetReceiveSelectionCallbacks(This,pfGetCallbacks) ) 

#define IWMReaderAdvanced3_SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples)	\
    ( (This)->lpVtbl -> SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples) ) 

#define IWMReaderAdvanced3_GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples)	\
    ( (This)->lpVtbl -> GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples) ) 

#define IWMReaderAdvanced3_SetAllocateForOutput(This,dwOutputNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForOutput(This,dwOutputNum,fAllocate) ) 

#define IWMReaderAdvanced3_GetAllocateForOutput(This,dwOutputNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForOutput(This,dwOutputNum,pfAllocate) ) 

#define IWMReaderAdvanced3_SetAllocateForStream(This,wStreamNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForStream(This,wStreamNum,fAllocate) ) 

#define IWMReaderAdvanced3_GetAllocateForStream(This,dwSreamNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForStream(This,dwSreamNum,pfAllocate) ) 

#define IWMReaderAdvanced3_GetStatistics(This,pStatistics)	\
    ( (This)->lpVtbl -> GetStatistics(This,pStatistics) ) 

#define IWMReaderAdvanced3_SetClientInfo(This,pClientInfo)	\
    ( (This)->lpVtbl -> SetClientInfo(This,pClientInfo) ) 

#define IWMReaderAdvanced3_GetMaxOutputSampleSize(This,dwOutput,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxOutputSampleSize(This,dwOutput,pcbMax) ) 

#define IWMReaderAdvanced3_GetMaxStreamSampleSize(This,wStream,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxStreamSampleSize(This,wStream,pcbMax) ) 

#define IWMReaderAdvanced3_NotifyLateDelivery(This,cnsLateness)	\
    ( (This)->lpVtbl -> NotifyLateDelivery(This,cnsLateness) ) 


#define IWMReaderAdvanced3_SetPlayMode(This,Mode)	\
    ( (This)->lpVtbl -> SetPlayMode(This,Mode) ) 

#define IWMReaderAdvanced3_GetPlayMode(This,pMode)	\
    ( (This)->lpVtbl -> GetPlayMode(This,pMode) ) 

#define IWMReaderAdvanced3_GetBufferProgress(This,pdwPercent,pcnsBuffering)	\
    ( (This)->lpVtbl -> GetBufferProgress(This,pdwPercent,pcnsBuffering) ) 

#define IWMReaderAdvanced3_GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload)	\
    ( (This)->lpVtbl -> GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload) ) 

#define IWMReaderAdvanced3_GetSaveAsProgress(This,pdwPercent)	\
    ( (This)->lpVtbl -> GetSaveAsProgress(This,pdwPercent) ) 

#define IWMReaderAdvanced3_SaveFileAs(This,pwszFilename)	\
    ( (This)->lpVtbl -> SaveFileAs(This,pwszFilename) ) 

#define IWMReaderAdvanced3_GetProtocolName(This,pwszProtocol,pcchProtocol)	\
    ( (This)->lpVtbl -> GetProtocolName(This,pwszProtocol,pcchProtocol) ) 

#define IWMReaderAdvanced3_StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext) ) 

#define IWMReaderAdvanced3_GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMReaderAdvanced3_SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength) ) 

#define IWMReaderAdvanced3_Preroll(This,cnsStart,cnsDuration,fRate)	\
    ( (This)->lpVtbl -> Preroll(This,cnsStart,cnsDuration,fRate) ) 

#define IWMReaderAdvanced3_SetLogClientID(This,fLogClientID)	\
    ( (This)->lpVtbl -> SetLogClientID(This,fLogClientID) ) 

#define IWMReaderAdvanced3_GetLogClientID(This,pfLogClientID)	\
    ( (This)->lpVtbl -> GetLogClientID(This,pfLogClientID) ) 

#define IWMReaderAdvanced3_StopBuffering(This)	\
    ( (This)->lpVtbl -> StopBuffering(This) ) 

#define IWMReaderAdvanced3_OpenStream(This,pStream,pCallback,pvContext)	\
    ( (This)->lpVtbl -> OpenStream(This,pStream,pCallback,pvContext) ) 


#define IWMReaderAdvanced3_StopNetStreaming(This)	\
    ( (This)->lpVtbl -> StopNetStreaming(This) ) 

#define IWMReaderAdvanced3_StartAtPosition(This,wStreamNum,pvOffsetStart,pvDuration,dwOffsetFormat,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtPosition(This,wStreamNum,pvOffsetStart,pvDuration,dwOffsetFormat,fRate,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderAdvanced3_INTERFACE_DEFINED__ */


#ifndef __IWMReaderAdvanced4_INTERFACE_DEFINED__
#define __IWMReaderAdvanced4_INTERFACE_DEFINED__

/* interface IWMReaderAdvanced4 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderAdvanced4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("945A76A2-12AE-4d48-BD3C-CD1D90399B85")
    IWMReaderAdvanced4 : public IWMReaderAdvanced3
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLanguageCount( 
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ WORD *pwLanguageCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguage( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ WORD wLanguage,
            /* [size_is][out] */ WCHAR *pwszLanguageString,
            /* [out][in] */ WORD *pcchLanguageStringLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxSpeedFactor( 
            /* [out] */ double *pdblFactor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsUsingFastCache( 
            /* [out] */ BOOL *pfUsingFastCache) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddLogParam( 
            /* [in] */ LPCWSTR wszNameSpace,
            /* [in] */ LPCWSTR wszName,
            /* [in] */ LPCWSTR wszValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SendLogParams( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanSaveFileAs( 
            /* [out] */ BOOL *pfCanSave) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CancelSaveFileAs( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetURL( 
            /* [size_is][out] */ WCHAR *pwszURL,
            /* [out][in] */ DWORD *pcchURL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderAdvanced4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderAdvanced4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderAdvanced4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetUserProvidedClock )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ BOOL fUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserProvidedClock )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ BOOL *pfUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *DeliverTime )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ QWORD cnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetManualStreamSelection )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ BOOL fSelection);
        
        HRESULT ( STDMETHODCALLTYPE *GetManualStreamSelection )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ BOOL *pfSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamsSelected )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamSelected )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ BOOL fGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ BOOL *pfGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveStreamSamples )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveStreamSamples )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForOutput )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForOutput )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForStream )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForStream )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD dwSreamNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMReaderAdvanced4 * This,
            /* [out][in] */ WM_READER_STATISTICS *pStatistics);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientInfo )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WM_READER_CLIENTINFO *pClientInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxOutputSampleSize )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxStreamSampleSize )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyLateDelivery )( 
            IWMReaderAdvanced4 * This,
            QWORD cnsLateness);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayMode )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WMT_PLAY_MODE Mode);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayMode )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ WMT_PLAY_MODE *pMode);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferProgress )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pcnsBuffering);
        
        HRESULT ( STDMETHODCALLTYPE *GetDownloadProgress )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pqwBytesDownloaded,
            /* [out] */ QWORD *pcnsDownload);
        
        HRESULT ( STDMETHODCALLTYPE *GetSaveAsProgress )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ DWORD *pdwPercent);
        
        HRESULT ( STDMETHODCALLTYPE *SaveFileAs )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *GetProtocolName )( 
            IWMReaderAdvanced4 * This,
            /* [size_is][out] */ WCHAR *pwszProtocol,
            /* [out][in] */ DWORD *pcchProtocol);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtMarker )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD wMarkerIndex,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputSetting )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputSetting )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *Preroll )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ QWORD cnsStart,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate);
        
        HRESULT ( STDMETHODCALLTYPE *SetLogClientID )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ BOOL fLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *GetLogClientID )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ BOOL *pfLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *StopBuffering )( 
            IWMReaderAdvanced4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenStream )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ IStream *pStream,
            /* [in] */ IWMReaderCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *StopNetStreaming )( 
            IWMReaderAdvanced4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtPosition )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ void *pvOffsetStart,
            /* [in] */ void *pvDuration,
            /* [in] */ WMT_OFFSET_FORMAT dwOffsetFormat,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageCount )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ WORD *pwLanguageCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ WORD wLanguage,
            /* [size_is][out] */ WCHAR *pwszLanguageString,
            /* [out][in] */ WORD *pcchLanguageStringLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxSpeedFactor )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ double *pdblFactor);
        
        HRESULT ( STDMETHODCALLTYPE *IsUsingFastCache )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ BOOL *pfUsingFastCache);
        
        HRESULT ( STDMETHODCALLTYPE *AddLogParam )( 
            IWMReaderAdvanced4 * This,
            /* [in] */ LPCWSTR wszNameSpace,
            /* [in] */ LPCWSTR wszName,
            /* [in] */ LPCWSTR wszValue);
        
        HRESULT ( STDMETHODCALLTYPE *SendLogParams )( 
            IWMReaderAdvanced4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CanSaveFileAs )( 
            IWMReaderAdvanced4 * This,
            /* [out] */ BOOL *pfCanSave);
        
        HRESULT ( STDMETHODCALLTYPE *CancelSaveFileAs )( 
            IWMReaderAdvanced4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetURL )( 
            IWMReaderAdvanced4 * This,
            /* [size_is][out] */ WCHAR *pwszURL,
            /* [out][in] */ DWORD *pcchURL);
        
        END_INTERFACE
    } IWMReaderAdvanced4Vtbl;

    interface IWMReaderAdvanced4
    {
        CONST_VTBL struct IWMReaderAdvanced4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderAdvanced4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderAdvanced4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderAdvanced4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderAdvanced4_SetUserProvidedClock(This,fUserClock)	\
    ( (This)->lpVtbl -> SetUserProvidedClock(This,fUserClock) ) 

#define IWMReaderAdvanced4_GetUserProvidedClock(This,pfUserClock)	\
    ( (This)->lpVtbl -> GetUserProvidedClock(This,pfUserClock) ) 

#define IWMReaderAdvanced4_DeliverTime(This,cnsTime)	\
    ( (This)->lpVtbl -> DeliverTime(This,cnsTime) ) 

#define IWMReaderAdvanced4_SetManualStreamSelection(This,fSelection)	\
    ( (This)->lpVtbl -> SetManualStreamSelection(This,fSelection) ) 

#define IWMReaderAdvanced4_GetManualStreamSelection(This,pfSelection)	\
    ( (This)->lpVtbl -> GetManualStreamSelection(This,pfSelection) ) 

#define IWMReaderAdvanced4_SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections)	\
    ( (This)->lpVtbl -> SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections) ) 

#define IWMReaderAdvanced4_GetStreamSelected(This,wStreamNum,pSelection)	\
    ( (This)->lpVtbl -> GetStreamSelected(This,wStreamNum,pSelection) ) 

#define IWMReaderAdvanced4_SetReceiveSelectionCallbacks(This,fGetCallbacks)	\
    ( (This)->lpVtbl -> SetReceiveSelectionCallbacks(This,fGetCallbacks) ) 

#define IWMReaderAdvanced4_GetReceiveSelectionCallbacks(This,pfGetCallbacks)	\
    ( (This)->lpVtbl -> GetReceiveSelectionCallbacks(This,pfGetCallbacks) ) 

#define IWMReaderAdvanced4_SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples)	\
    ( (This)->lpVtbl -> SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples) ) 

#define IWMReaderAdvanced4_GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples)	\
    ( (This)->lpVtbl -> GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples) ) 

#define IWMReaderAdvanced4_SetAllocateForOutput(This,dwOutputNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForOutput(This,dwOutputNum,fAllocate) ) 

#define IWMReaderAdvanced4_GetAllocateForOutput(This,dwOutputNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForOutput(This,dwOutputNum,pfAllocate) ) 

#define IWMReaderAdvanced4_SetAllocateForStream(This,wStreamNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForStream(This,wStreamNum,fAllocate) ) 

#define IWMReaderAdvanced4_GetAllocateForStream(This,dwSreamNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForStream(This,dwSreamNum,pfAllocate) ) 

#define IWMReaderAdvanced4_GetStatistics(This,pStatistics)	\
    ( (This)->lpVtbl -> GetStatistics(This,pStatistics) ) 

#define IWMReaderAdvanced4_SetClientInfo(This,pClientInfo)	\
    ( (This)->lpVtbl -> SetClientInfo(This,pClientInfo) ) 

#define IWMReaderAdvanced4_GetMaxOutputSampleSize(This,dwOutput,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxOutputSampleSize(This,dwOutput,pcbMax) ) 

#define IWMReaderAdvanced4_GetMaxStreamSampleSize(This,wStream,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxStreamSampleSize(This,wStream,pcbMax) ) 

#define IWMReaderAdvanced4_NotifyLateDelivery(This,cnsLateness)	\
    ( (This)->lpVtbl -> NotifyLateDelivery(This,cnsLateness) ) 


#define IWMReaderAdvanced4_SetPlayMode(This,Mode)	\
    ( (This)->lpVtbl -> SetPlayMode(This,Mode) ) 

#define IWMReaderAdvanced4_GetPlayMode(This,pMode)	\
    ( (This)->lpVtbl -> GetPlayMode(This,pMode) ) 

#define IWMReaderAdvanced4_GetBufferProgress(This,pdwPercent,pcnsBuffering)	\
    ( (This)->lpVtbl -> GetBufferProgress(This,pdwPercent,pcnsBuffering) ) 

#define IWMReaderAdvanced4_GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload)	\
    ( (This)->lpVtbl -> GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload) ) 

#define IWMReaderAdvanced4_GetSaveAsProgress(This,pdwPercent)	\
    ( (This)->lpVtbl -> GetSaveAsProgress(This,pdwPercent) ) 

#define IWMReaderAdvanced4_SaveFileAs(This,pwszFilename)	\
    ( (This)->lpVtbl -> SaveFileAs(This,pwszFilename) ) 

#define IWMReaderAdvanced4_GetProtocolName(This,pwszProtocol,pcchProtocol)	\
    ( (This)->lpVtbl -> GetProtocolName(This,pwszProtocol,pcchProtocol) ) 

#define IWMReaderAdvanced4_StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext) ) 

#define IWMReaderAdvanced4_GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMReaderAdvanced4_SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength) ) 

#define IWMReaderAdvanced4_Preroll(This,cnsStart,cnsDuration,fRate)	\
    ( (This)->lpVtbl -> Preroll(This,cnsStart,cnsDuration,fRate) ) 

#define IWMReaderAdvanced4_SetLogClientID(This,fLogClientID)	\
    ( (This)->lpVtbl -> SetLogClientID(This,fLogClientID) ) 

#define IWMReaderAdvanced4_GetLogClientID(This,pfLogClientID)	\
    ( (This)->lpVtbl -> GetLogClientID(This,pfLogClientID) ) 

#define IWMReaderAdvanced4_StopBuffering(This)	\
    ( (This)->lpVtbl -> StopBuffering(This) ) 

#define IWMReaderAdvanced4_OpenStream(This,pStream,pCallback,pvContext)	\
    ( (This)->lpVtbl -> OpenStream(This,pStream,pCallback,pvContext) ) 


#define IWMReaderAdvanced4_StopNetStreaming(This)	\
    ( (This)->lpVtbl -> StopNetStreaming(This) ) 

#define IWMReaderAdvanced4_StartAtPosition(This,wStreamNum,pvOffsetStart,pvDuration,dwOffsetFormat,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtPosition(This,wStreamNum,pvOffsetStart,pvDuration,dwOffsetFormat,fRate,pvContext) ) 


#define IWMReaderAdvanced4_GetLanguageCount(This,dwOutputNum,pwLanguageCount)	\
    ( (This)->lpVtbl -> GetLanguageCount(This,dwOutputNum,pwLanguageCount) ) 

#define IWMReaderAdvanced4_GetLanguage(This,dwOutputNum,wLanguage,pwszLanguageString,pcchLanguageStringLength)	\
    ( (This)->lpVtbl -> GetLanguage(This,dwOutputNum,wLanguage,pwszLanguageString,pcchLanguageStringLength) ) 

#define IWMReaderAdvanced4_GetMaxSpeedFactor(This,pdblFactor)	\
    ( (This)->lpVtbl -> GetMaxSpeedFactor(This,pdblFactor) ) 

#define IWMReaderAdvanced4_IsUsingFastCache(This,pfUsingFastCache)	\
    ( (This)->lpVtbl -> IsUsingFastCache(This,pfUsingFastCache) ) 

#define IWMReaderAdvanced4_AddLogParam(This,wszNameSpace,wszName,wszValue)	\
    ( (This)->lpVtbl -> AddLogParam(This,wszNameSpace,wszName,wszValue) ) 

#define IWMReaderAdvanced4_SendLogParams(This)	\
    ( (This)->lpVtbl -> SendLogParams(This) ) 

#define IWMReaderAdvanced4_CanSaveFileAs(This,pfCanSave)	\
    ( (This)->lpVtbl -> CanSaveFileAs(This,pfCanSave) ) 

#define IWMReaderAdvanced4_CancelSaveFileAs(This)	\
    ( (This)->lpVtbl -> CancelSaveFileAs(This) ) 

#define IWMReaderAdvanced4_GetURL(This,pwszURL,pcchURL)	\
    ( (This)->lpVtbl -> GetURL(This,pwszURL,pcchURL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderAdvanced4_INTERFACE_DEFINED__ */


#ifndef __IWMReaderAdvanced5_INTERFACE_DEFINED__
#define __IWMReaderAdvanced5_INTERFACE_DEFINED__

/* interface IWMReaderAdvanced5 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderAdvanced5;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("24C44DB0-55D1-49ae-A5CC-F13815E36363")
    IWMReaderAdvanced5 : public IWMReaderAdvanced4
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetPlayerHook( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMPlayerHook *pHook) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderAdvanced5Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderAdvanced5 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderAdvanced5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetUserProvidedClock )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ BOOL fUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserProvidedClock )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ BOOL *pfUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *DeliverTime )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ QWORD cnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetManualStreamSelection )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ BOOL fSelection);
        
        HRESULT ( STDMETHODCALLTYPE *GetManualStreamSelection )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ BOOL *pfSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamsSelected )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamSelected )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ BOOL fGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ BOOL *pfGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveStreamSamples )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveStreamSamples )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForOutput )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForOutput )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForStream )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForStream )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD dwSreamNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMReaderAdvanced5 * This,
            /* [out][in] */ WM_READER_STATISTICS *pStatistics);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientInfo )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WM_READER_CLIENTINFO *pClientInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxOutputSampleSize )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxStreamSampleSize )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyLateDelivery )( 
            IWMReaderAdvanced5 * This,
            QWORD cnsLateness);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayMode )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WMT_PLAY_MODE Mode);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayMode )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ WMT_PLAY_MODE *pMode);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferProgress )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pcnsBuffering);
        
        HRESULT ( STDMETHODCALLTYPE *GetDownloadProgress )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pqwBytesDownloaded,
            /* [out] */ QWORD *pcnsDownload);
        
        HRESULT ( STDMETHODCALLTYPE *GetSaveAsProgress )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ DWORD *pdwPercent);
        
        HRESULT ( STDMETHODCALLTYPE *SaveFileAs )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *GetProtocolName )( 
            IWMReaderAdvanced5 * This,
            /* [size_is][out] */ WCHAR *pwszProtocol,
            /* [out][in] */ DWORD *pcchProtocol);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtMarker )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD wMarkerIndex,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputSetting )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputSetting )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *Preroll )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ QWORD cnsStart,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate);
        
        HRESULT ( STDMETHODCALLTYPE *SetLogClientID )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ BOOL fLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *GetLogClientID )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ BOOL *pfLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *StopBuffering )( 
            IWMReaderAdvanced5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenStream )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ IStream *pStream,
            /* [in] */ IWMReaderCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *StopNetStreaming )( 
            IWMReaderAdvanced5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtPosition )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ void *pvOffsetStart,
            /* [in] */ void *pvDuration,
            /* [in] */ WMT_OFFSET_FORMAT dwOffsetFormat,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageCount )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ WORD *pwLanguageCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ WORD wLanguage,
            /* [size_is][out] */ WCHAR *pwszLanguageString,
            /* [out][in] */ WORD *pcchLanguageStringLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxSpeedFactor )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ double *pdblFactor);
        
        HRESULT ( STDMETHODCALLTYPE *IsUsingFastCache )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ BOOL *pfUsingFastCache);
        
        HRESULT ( STDMETHODCALLTYPE *AddLogParam )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ LPCWSTR wszNameSpace,
            /* [in] */ LPCWSTR wszName,
            /* [in] */ LPCWSTR wszValue);
        
        HRESULT ( STDMETHODCALLTYPE *SendLogParams )( 
            IWMReaderAdvanced5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CanSaveFileAs )( 
            IWMReaderAdvanced5 * This,
            /* [out] */ BOOL *pfCanSave);
        
        HRESULT ( STDMETHODCALLTYPE *CancelSaveFileAs )( 
            IWMReaderAdvanced5 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetURL )( 
            IWMReaderAdvanced5 * This,
            /* [size_is][out] */ WCHAR *pwszURL,
            /* [out][in] */ DWORD *pcchURL);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayerHook )( 
            IWMReaderAdvanced5 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMPlayerHook *pHook);
        
        END_INTERFACE
    } IWMReaderAdvanced5Vtbl;

    interface IWMReaderAdvanced5
    {
        CONST_VTBL struct IWMReaderAdvanced5Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderAdvanced5_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderAdvanced5_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderAdvanced5_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderAdvanced5_SetUserProvidedClock(This,fUserClock)	\
    ( (This)->lpVtbl -> SetUserProvidedClock(This,fUserClock) ) 

#define IWMReaderAdvanced5_GetUserProvidedClock(This,pfUserClock)	\
    ( (This)->lpVtbl -> GetUserProvidedClock(This,pfUserClock) ) 

#define IWMReaderAdvanced5_DeliverTime(This,cnsTime)	\
    ( (This)->lpVtbl -> DeliverTime(This,cnsTime) ) 

#define IWMReaderAdvanced5_SetManualStreamSelection(This,fSelection)	\
    ( (This)->lpVtbl -> SetManualStreamSelection(This,fSelection) ) 

#define IWMReaderAdvanced5_GetManualStreamSelection(This,pfSelection)	\
    ( (This)->lpVtbl -> GetManualStreamSelection(This,pfSelection) ) 

#define IWMReaderAdvanced5_SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections)	\
    ( (This)->lpVtbl -> SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections) ) 

#define IWMReaderAdvanced5_GetStreamSelected(This,wStreamNum,pSelection)	\
    ( (This)->lpVtbl -> GetStreamSelected(This,wStreamNum,pSelection) ) 

#define IWMReaderAdvanced5_SetReceiveSelectionCallbacks(This,fGetCallbacks)	\
    ( (This)->lpVtbl -> SetReceiveSelectionCallbacks(This,fGetCallbacks) ) 

#define IWMReaderAdvanced5_GetReceiveSelectionCallbacks(This,pfGetCallbacks)	\
    ( (This)->lpVtbl -> GetReceiveSelectionCallbacks(This,pfGetCallbacks) ) 

#define IWMReaderAdvanced5_SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples)	\
    ( (This)->lpVtbl -> SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples) ) 

#define IWMReaderAdvanced5_GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples)	\
    ( (This)->lpVtbl -> GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples) ) 

#define IWMReaderAdvanced5_SetAllocateForOutput(This,dwOutputNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForOutput(This,dwOutputNum,fAllocate) ) 

#define IWMReaderAdvanced5_GetAllocateForOutput(This,dwOutputNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForOutput(This,dwOutputNum,pfAllocate) ) 

#define IWMReaderAdvanced5_SetAllocateForStream(This,wStreamNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForStream(This,wStreamNum,fAllocate) ) 

#define IWMReaderAdvanced5_GetAllocateForStream(This,dwSreamNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForStream(This,dwSreamNum,pfAllocate) ) 

#define IWMReaderAdvanced5_GetStatistics(This,pStatistics)	\
    ( (This)->lpVtbl -> GetStatistics(This,pStatistics) ) 

#define IWMReaderAdvanced5_SetClientInfo(This,pClientInfo)	\
    ( (This)->lpVtbl -> SetClientInfo(This,pClientInfo) ) 

#define IWMReaderAdvanced5_GetMaxOutputSampleSize(This,dwOutput,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxOutputSampleSize(This,dwOutput,pcbMax) ) 

#define IWMReaderAdvanced5_GetMaxStreamSampleSize(This,wStream,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxStreamSampleSize(This,wStream,pcbMax) ) 

#define IWMReaderAdvanced5_NotifyLateDelivery(This,cnsLateness)	\
    ( (This)->lpVtbl -> NotifyLateDelivery(This,cnsLateness) ) 


#define IWMReaderAdvanced5_SetPlayMode(This,Mode)	\
    ( (This)->lpVtbl -> SetPlayMode(This,Mode) ) 

#define IWMReaderAdvanced5_GetPlayMode(This,pMode)	\
    ( (This)->lpVtbl -> GetPlayMode(This,pMode) ) 

#define IWMReaderAdvanced5_GetBufferProgress(This,pdwPercent,pcnsBuffering)	\
    ( (This)->lpVtbl -> GetBufferProgress(This,pdwPercent,pcnsBuffering) ) 

#define IWMReaderAdvanced5_GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload)	\
    ( (This)->lpVtbl -> GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload) ) 

#define IWMReaderAdvanced5_GetSaveAsProgress(This,pdwPercent)	\
    ( (This)->lpVtbl -> GetSaveAsProgress(This,pdwPercent) ) 

#define IWMReaderAdvanced5_SaveFileAs(This,pwszFilename)	\
    ( (This)->lpVtbl -> SaveFileAs(This,pwszFilename) ) 

#define IWMReaderAdvanced5_GetProtocolName(This,pwszProtocol,pcchProtocol)	\
    ( (This)->lpVtbl -> GetProtocolName(This,pwszProtocol,pcchProtocol) ) 

#define IWMReaderAdvanced5_StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext) ) 

#define IWMReaderAdvanced5_GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMReaderAdvanced5_SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength) ) 

#define IWMReaderAdvanced5_Preroll(This,cnsStart,cnsDuration,fRate)	\
    ( (This)->lpVtbl -> Preroll(This,cnsStart,cnsDuration,fRate) ) 

#define IWMReaderAdvanced5_SetLogClientID(This,fLogClientID)	\
    ( (This)->lpVtbl -> SetLogClientID(This,fLogClientID) ) 

#define IWMReaderAdvanced5_GetLogClientID(This,pfLogClientID)	\
    ( (This)->lpVtbl -> GetLogClientID(This,pfLogClientID) ) 

#define IWMReaderAdvanced5_StopBuffering(This)	\
    ( (This)->lpVtbl -> StopBuffering(This) ) 

#define IWMReaderAdvanced5_OpenStream(This,pStream,pCallback,pvContext)	\
    ( (This)->lpVtbl -> OpenStream(This,pStream,pCallback,pvContext) ) 


#define IWMReaderAdvanced5_StopNetStreaming(This)	\
    ( (This)->lpVtbl -> StopNetStreaming(This) ) 

#define IWMReaderAdvanced5_StartAtPosition(This,wStreamNum,pvOffsetStart,pvDuration,dwOffsetFormat,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtPosition(This,wStreamNum,pvOffsetStart,pvDuration,dwOffsetFormat,fRate,pvContext) ) 


#define IWMReaderAdvanced5_GetLanguageCount(This,dwOutputNum,pwLanguageCount)	\
    ( (This)->lpVtbl -> GetLanguageCount(This,dwOutputNum,pwLanguageCount) ) 

#define IWMReaderAdvanced5_GetLanguage(This,dwOutputNum,wLanguage,pwszLanguageString,pcchLanguageStringLength)	\
    ( (This)->lpVtbl -> GetLanguage(This,dwOutputNum,wLanguage,pwszLanguageString,pcchLanguageStringLength) ) 

#define IWMReaderAdvanced5_GetMaxSpeedFactor(This,pdblFactor)	\
    ( (This)->lpVtbl -> GetMaxSpeedFactor(This,pdblFactor) ) 

#define IWMReaderAdvanced5_IsUsingFastCache(This,pfUsingFastCache)	\
    ( (This)->lpVtbl -> IsUsingFastCache(This,pfUsingFastCache) ) 

#define IWMReaderAdvanced5_AddLogParam(This,wszNameSpace,wszName,wszValue)	\
    ( (This)->lpVtbl -> AddLogParam(This,wszNameSpace,wszName,wszValue) ) 

#define IWMReaderAdvanced5_SendLogParams(This)	\
    ( (This)->lpVtbl -> SendLogParams(This) ) 

#define IWMReaderAdvanced5_CanSaveFileAs(This,pfCanSave)	\
    ( (This)->lpVtbl -> CanSaveFileAs(This,pfCanSave) ) 

#define IWMReaderAdvanced5_CancelSaveFileAs(This)	\
    ( (This)->lpVtbl -> CancelSaveFileAs(This) ) 

#define IWMReaderAdvanced5_GetURL(This,pwszURL,pcchURL)	\
    ( (This)->lpVtbl -> GetURL(This,pwszURL,pcchURL) ) 


#define IWMReaderAdvanced5_SetPlayerHook(This,dwOutputNum,pHook)	\
    ( (This)->lpVtbl -> SetPlayerHook(This,dwOutputNum,pHook) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderAdvanced5_INTERFACE_DEFINED__ */


#ifndef __IWMReaderAdvanced6_INTERFACE_DEFINED__
#define __IWMReaderAdvanced6_INTERFACE_DEFINED__

/* interface IWMReaderAdvanced6 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderAdvanced6;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("18A2E7F8-428F-4acd-8A00-E64639BC93DE")
    IWMReaderAdvanced6 : public IWMReaderAdvanced5
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetProtectStreamSamples( 
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DWORD dwCertificateType,
            /* [in] */ DWORD dwFlags,
            /* [size_is][out] */ BYTE *pbInitializationVector,
            /* [out][in] */ DWORD *pcbInitializationVector) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderAdvanced6Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderAdvanced6 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderAdvanced6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetUserProvidedClock )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ BOOL fUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserProvidedClock )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ BOOL *pfUserClock);
        
        HRESULT ( STDMETHODCALLTYPE *DeliverTime )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ QWORD cnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetManualStreamSelection )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ BOOL fSelection);
        
        HRESULT ( STDMETHODCALLTYPE *GetManualStreamSelection )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ BOOL *pfSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetStreamsSelected )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD cStreamCount,
            /* [in] */ WORD *pwStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamSelected )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WMT_STREAM_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ BOOL fGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveSelectionCallbacks )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ BOOL *pfGetCallbacks);
        
        HRESULT ( STDMETHODCALLTYPE *SetReceiveStreamSamples )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *GetReceiveStreamSamples )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ BOOL *pfReceiveStreamSamples);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForOutput )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForOutput )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *SetAllocateForStream )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ BOOL fAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetAllocateForStream )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD dwSreamNum,
            /* [out] */ BOOL *pfAllocate);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatistics )( 
            IWMReaderAdvanced6 * This,
            /* [out][in] */ WM_READER_STATISTICS *pStatistics);
        
        HRESULT ( STDMETHODCALLTYPE *SetClientInfo )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WM_READER_CLIENTINFO *pClientInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxOutputSampleSize )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ DWORD dwOutput,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxStreamSampleSize )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD wStream,
            /* [out] */ DWORD *pcbMax);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyLateDelivery )( 
            IWMReaderAdvanced6 * This,
            QWORD cnsLateness);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayMode )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WMT_PLAY_MODE Mode);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayMode )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ WMT_PLAY_MODE *pMode);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferProgress )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pcnsBuffering);
        
        HRESULT ( STDMETHODCALLTYPE *GetDownloadProgress )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ DWORD *pdwPercent,
            /* [out] */ QWORD *pqwBytesDownloaded,
            /* [out] */ QWORD *pcnsDownload);
        
        HRESULT ( STDMETHODCALLTYPE *GetSaveAsProgress )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ DWORD *pdwPercent);
        
        HRESULT ( STDMETHODCALLTYPE *SaveFileAs )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ const WCHAR *pwszFilename);
        
        HRESULT ( STDMETHODCALLTYPE *GetProtocolName )( 
            IWMReaderAdvanced6 * This,
            /* [size_is][out] */ WCHAR *pwszProtocol,
            /* [out][in] */ DWORD *pcchProtocol);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtMarker )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD wMarkerIndex,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputSetting )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetOutputSetting )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *Preroll )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ QWORD cnsStart,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float fRate);
        
        HRESULT ( STDMETHODCALLTYPE *SetLogClientID )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ BOOL fLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *GetLogClientID )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ BOOL *pfLogClientID);
        
        HRESULT ( STDMETHODCALLTYPE *StopBuffering )( 
            IWMReaderAdvanced6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenStream )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ IStream *pStream,
            /* [in] */ IWMReaderCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *StopNetStreaming )( 
            IWMReaderAdvanced6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartAtPosition )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ void *pvOffsetStart,
            /* [in] */ void *pvDuration,
            /* [in] */ WMT_OFFSET_FORMAT dwOffsetFormat,
            /* [in] */ float fRate,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageCount )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [out] */ WORD *pwLanguageCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ WORD wLanguage,
            /* [size_is][out] */ WCHAR *pwszLanguageString,
            /* [out][in] */ WORD *pcchLanguageStringLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxSpeedFactor )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ double *pdblFactor);
        
        HRESULT ( STDMETHODCALLTYPE *IsUsingFastCache )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ BOOL *pfUsingFastCache);
        
        HRESULT ( STDMETHODCALLTYPE *AddLogParam )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ LPCWSTR wszNameSpace,
            /* [in] */ LPCWSTR wszName,
            /* [in] */ LPCWSTR wszValue);
        
        HRESULT ( STDMETHODCALLTYPE *SendLogParams )( 
            IWMReaderAdvanced6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CanSaveFileAs )( 
            IWMReaderAdvanced6 * This,
            /* [out] */ BOOL *pfCanSave);
        
        HRESULT ( STDMETHODCALLTYPE *CancelSaveFileAs )( 
            IWMReaderAdvanced6 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetURL )( 
            IWMReaderAdvanced6 * This,
            /* [size_is][out] */ WCHAR *pwszURL,
            /* [out][in] */ DWORD *pcchURL);
        
        HRESULT ( STDMETHODCALLTYPE *SetPlayerHook )( 
            IWMReaderAdvanced6 * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMPlayerHook *pHook);
        
        HRESULT ( STDMETHODCALLTYPE *SetProtectStreamSamples )( 
            IWMReaderAdvanced6 * This,
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DWORD dwCertificateType,
            /* [in] */ DWORD dwFlags,
            /* [size_is][out] */ BYTE *pbInitializationVector,
            /* [out][in] */ DWORD *pcbInitializationVector);
        
        END_INTERFACE
    } IWMReaderAdvanced6Vtbl;

    interface IWMReaderAdvanced6
    {
        CONST_VTBL struct IWMReaderAdvanced6Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderAdvanced6_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderAdvanced6_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderAdvanced6_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderAdvanced6_SetUserProvidedClock(This,fUserClock)	\
    ( (This)->lpVtbl -> SetUserProvidedClock(This,fUserClock) ) 

#define IWMReaderAdvanced6_GetUserProvidedClock(This,pfUserClock)	\
    ( (This)->lpVtbl -> GetUserProvidedClock(This,pfUserClock) ) 

#define IWMReaderAdvanced6_DeliverTime(This,cnsTime)	\
    ( (This)->lpVtbl -> DeliverTime(This,cnsTime) ) 

#define IWMReaderAdvanced6_SetManualStreamSelection(This,fSelection)	\
    ( (This)->lpVtbl -> SetManualStreamSelection(This,fSelection) ) 

#define IWMReaderAdvanced6_GetManualStreamSelection(This,pfSelection)	\
    ( (This)->lpVtbl -> GetManualStreamSelection(This,pfSelection) ) 

#define IWMReaderAdvanced6_SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections)	\
    ( (This)->lpVtbl -> SetStreamsSelected(This,cStreamCount,pwStreamNumbers,pSelections) ) 

#define IWMReaderAdvanced6_GetStreamSelected(This,wStreamNum,pSelection)	\
    ( (This)->lpVtbl -> GetStreamSelected(This,wStreamNum,pSelection) ) 

#define IWMReaderAdvanced6_SetReceiveSelectionCallbacks(This,fGetCallbacks)	\
    ( (This)->lpVtbl -> SetReceiveSelectionCallbacks(This,fGetCallbacks) ) 

#define IWMReaderAdvanced6_GetReceiveSelectionCallbacks(This,pfGetCallbacks)	\
    ( (This)->lpVtbl -> GetReceiveSelectionCallbacks(This,pfGetCallbacks) ) 

#define IWMReaderAdvanced6_SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples)	\
    ( (This)->lpVtbl -> SetReceiveStreamSamples(This,wStreamNum,fReceiveStreamSamples) ) 

#define IWMReaderAdvanced6_GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples)	\
    ( (This)->lpVtbl -> GetReceiveStreamSamples(This,wStreamNum,pfReceiveStreamSamples) ) 

#define IWMReaderAdvanced6_SetAllocateForOutput(This,dwOutputNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForOutput(This,dwOutputNum,fAllocate) ) 

#define IWMReaderAdvanced6_GetAllocateForOutput(This,dwOutputNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForOutput(This,dwOutputNum,pfAllocate) ) 

#define IWMReaderAdvanced6_SetAllocateForStream(This,wStreamNum,fAllocate)	\
    ( (This)->lpVtbl -> SetAllocateForStream(This,wStreamNum,fAllocate) ) 

#define IWMReaderAdvanced6_GetAllocateForStream(This,dwSreamNum,pfAllocate)	\
    ( (This)->lpVtbl -> GetAllocateForStream(This,dwSreamNum,pfAllocate) ) 

#define IWMReaderAdvanced6_GetStatistics(This,pStatistics)	\
    ( (This)->lpVtbl -> GetStatistics(This,pStatistics) ) 

#define IWMReaderAdvanced6_SetClientInfo(This,pClientInfo)	\
    ( (This)->lpVtbl -> SetClientInfo(This,pClientInfo) ) 

#define IWMReaderAdvanced6_GetMaxOutputSampleSize(This,dwOutput,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxOutputSampleSize(This,dwOutput,pcbMax) ) 

#define IWMReaderAdvanced6_GetMaxStreamSampleSize(This,wStream,pcbMax)	\
    ( (This)->lpVtbl -> GetMaxStreamSampleSize(This,wStream,pcbMax) ) 

#define IWMReaderAdvanced6_NotifyLateDelivery(This,cnsLateness)	\
    ( (This)->lpVtbl -> NotifyLateDelivery(This,cnsLateness) ) 


#define IWMReaderAdvanced6_SetPlayMode(This,Mode)	\
    ( (This)->lpVtbl -> SetPlayMode(This,Mode) ) 

#define IWMReaderAdvanced6_GetPlayMode(This,pMode)	\
    ( (This)->lpVtbl -> GetPlayMode(This,pMode) ) 

#define IWMReaderAdvanced6_GetBufferProgress(This,pdwPercent,pcnsBuffering)	\
    ( (This)->lpVtbl -> GetBufferProgress(This,pdwPercent,pcnsBuffering) ) 

#define IWMReaderAdvanced6_GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload)	\
    ( (This)->lpVtbl -> GetDownloadProgress(This,pdwPercent,pqwBytesDownloaded,pcnsDownload) ) 

#define IWMReaderAdvanced6_GetSaveAsProgress(This,pdwPercent)	\
    ( (This)->lpVtbl -> GetSaveAsProgress(This,pdwPercent) ) 

#define IWMReaderAdvanced6_SaveFileAs(This,pwszFilename)	\
    ( (This)->lpVtbl -> SaveFileAs(This,pwszFilename) ) 

#define IWMReaderAdvanced6_GetProtocolName(This,pwszProtocol,pcchProtocol)	\
    ( (This)->lpVtbl -> GetProtocolName(This,pwszProtocol,pcchProtocol) ) 

#define IWMReaderAdvanced6_StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtMarker(This,wMarkerIndex,cnsDuration,fRate,pvContext) ) 

#define IWMReaderAdvanced6_GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetOutputSetting(This,dwOutputNum,pszName,pType,pValue,pcbLength) ) 

#define IWMReaderAdvanced6_SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetOutputSetting(This,dwOutputNum,pszName,Type,pValue,cbLength) ) 

#define IWMReaderAdvanced6_Preroll(This,cnsStart,cnsDuration,fRate)	\
    ( (This)->lpVtbl -> Preroll(This,cnsStart,cnsDuration,fRate) ) 

#define IWMReaderAdvanced6_SetLogClientID(This,fLogClientID)	\
    ( (This)->lpVtbl -> SetLogClientID(This,fLogClientID) ) 

#define IWMReaderAdvanced6_GetLogClientID(This,pfLogClientID)	\
    ( (This)->lpVtbl -> GetLogClientID(This,pfLogClientID) ) 

#define IWMReaderAdvanced6_StopBuffering(This)	\
    ( (This)->lpVtbl -> StopBuffering(This) ) 

#define IWMReaderAdvanced6_OpenStream(This,pStream,pCallback,pvContext)	\
    ( (This)->lpVtbl -> OpenStream(This,pStream,pCallback,pvContext) ) 


#define IWMReaderAdvanced6_StopNetStreaming(This)	\
    ( (This)->lpVtbl -> StopNetStreaming(This) ) 

#define IWMReaderAdvanced6_StartAtPosition(This,wStreamNum,pvOffsetStart,pvDuration,dwOffsetFormat,fRate,pvContext)	\
    ( (This)->lpVtbl -> StartAtPosition(This,wStreamNum,pvOffsetStart,pvDuration,dwOffsetFormat,fRate,pvContext) ) 


#define IWMReaderAdvanced6_GetLanguageCount(This,dwOutputNum,pwLanguageCount)	\
    ( (This)->lpVtbl -> GetLanguageCount(This,dwOutputNum,pwLanguageCount) ) 

#define IWMReaderAdvanced6_GetLanguage(This,dwOutputNum,wLanguage,pwszLanguageString,pcchLanguageStringLength)	\
    ( (This)->lpVtbl -> GetLanguage(This,dwOutputNum,wLanguage,pwszLanguageString,pcchLanguageStringLength) ) 

#define IWMReaderAdvanced6_GetMaxSpeedFactor(This,pdblFactor)	\
    ( (This)->lpVtbl -> GetMaxSpeedFactor(This,pdblFactor) ) 

#define IWMReaderAdvanced6_IsUsingFastCache(This,pfUsingFastCache)	\
    ( (This)->lpVtbl -> IsUsingFastCache(This,pfUsingFastCache) ) 

#define IWMReaderAdvanced6_AddLogParam(This,wszNameSpace,wszName,wszValue)	\
    ( (This)->lpVtbl -> AddLogParam(This,wszNameSpace,wszName,wszValue) ) 

#define IWMReaderAdvanced6_SendLogParams(This)	\
    ( (This)->lpVtbl -> SendLogParams(This) ) 

#define IWMReaderAdvanced6_CanSaveFileAs(This,pfCanSave)	\
    ( (This)->lpVtbl -> CanSaveFileAs(This,pfCanSave) ) 

#define IWMReaderAdvanced6_CancelSaveFileAs(This)	\
    ( (This)->lpVtbl -> CancelSaveFileAs(This) ) 

#define IWMReaderAdvanced6_GetURL(This,pwszURL,pcchURL)	\
    ( (This)->lpVtbl -> GetURL(This,pwszURL,pcchURL) ) 


#define IWMReaderAdvanced6_SetPlayerHook(This,dwOutputNum,pHook)	\
    ( (This)->lpVtbl -> SetPlayerHook(This,dwOutputNum,pHook) ) 


#define IWMReaderAdvanced6_SetProtectStreamSamples(This,pbCertificate,cbCertificate,dwCertificateType,dwFlags,pbInitializationVector,pcbInitializationVector)	\
    ( (This)->lpVtbl -> SetProtectStreamSamples(This,pbCertificate,cbCertificate,dwCertificateType,dwFlags,pbInitializationVector,pcbInitializationVector) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderAdvanced6_INTERFACE_DEFINED__ */


#ifndef __IWMPlayerHook_INTERFACE_DEFINED__
#define __IWMPlayerHook_INTERFACE_DEFINED__

/* interface IWMPlayerHook */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMPlayerHook;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e5b7ca9a-0f1c-4f66-9002-74ec50d8b304")
    IWMPlayerHook : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PreDecode( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMPlayerHookVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMPlayerHook * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMPlayerHook * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMPlayerHook * This);
        
        HRESULT ( STDMETHODCALLTYPE *PreDecode )( 
            IWMPlayerHook * This);
        
        END_INTERFACE
    } IWMPlayerHookVtbl;

    interface IWMPlayerHook
    {
        CONST_VTBL struct IWMPlayerHookVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMPlayerHook_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMPlayerHook_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMPlayerHook_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMPlayerHook_PreDecode(This)	\
    ( (This)->lpVtbl -> PreDecode(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMPlayerHook_INTERFACE_DEFINED__ */


#ifndef __IWMReaderAllocatorEx_INTERFACE_DEFINED__
#define __IWMReaderAllocatorEx_INTERFACE_DEFINED__

/* interface IWMReaderAllocatorEx */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderAllocatorEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9F762FA7-A22E-428d-93C9-AC82F3AAFE5A")
    IWMReaderAllocatorEx : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AllocateForStreamEx( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ DWORD dwFlags,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AllocateForOutputEx( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ DWORD dwFlags,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderAllocatorExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderAllocatorEx * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderAllocatorEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderAllocatorEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateForStreamEx )( 
            IWMReaderAllocatorEx * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ DWORD dwFlags,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateForOutputEx )( 
            IWMReaderAllocatorEx * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ DWORD dwFlags,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMReaderAllocatorExVtbl;

    interface IWMReaderAllocatorEx
    {
        CONST_VTBL struct IWMReaderAllocatorExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderAllocatorEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderAllocatorEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderAllocatorEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderAllocatorEx_AllocateForStreamEx(This,wStreamNum,cbBuffer,ppBuffer,dwFlags,cnsSampleTime,cnsSampleDuration,pvContext)	\
    ( (This)->lpVtbl -> AllocateForStreamEx(This,wStreamNum,cbBuffer,ppBuffer,dwFlags,cnsSampleTime,cnsSampleDuration,pvContext) ) 

#define IWMReaderAllocatorEx_AllocateForOutputEx(This,dwOutputNum,cbBuffer,ppBuffer,dwFlags,cnsSampleTime,cnsSampleDuration,pvContext)	\
    ( (This)->lpVtbl -> AllocateForOutputEx(This,dwOutputNum,cbBuffer,ppBuffer,dwFlags,cnsSampleTime,cnsSampleDuration,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderAllocatorEx_INTERFACE_DEFINED__ */


#ifndef __IWMReaderTypeNegotiation_INTERFACE_DEFINED__
#define __IWMReaderTypeNegotiation_INTERFACE_DEFINED__

/* interface IWMReaderTypeNegotiation */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderTypeNegotiation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FDBE5592-81A1-41ea-93BD-735CAD1ADC05")
    IWMReaderTypeNegotiation : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TryOutputProps( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMOutputMediaProps *pOutput) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderTypeNegotiationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderTypeNegotiation * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderTypeNegotiation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderTypeNegotiation * This);
        
        HRESULT ( STDMETHODCALLTYPE *TryOutputProps )( 
            IWMReaderTypeNegotiation * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ IWMOutputMediaProps *pOutput);
        
        END_INTERFACE
    } IWMReaderTypeNegotiationVtbl;

    interface IWMReaderTypeNegotiation
    {
        CONST_VTBL struct IWMReaderTypeNegotiationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderTypeNegotiation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderTypeNegotiation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderTypeNegotiation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderTypeNegotiation_TryOutputProps(This,dwOutputNum,pOutput)	\
    ( (This)->lpVtbl -> TryOutputProps(This,dwOutputNum,pOutput) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderTypeNegotiation_INTERFACE_DEFINED__ */


#ifndef __IWMReaderCallbackAdvanced_INTERFACE_DEFINED__
#define __IWMReaderCallbackAdvanced_INTERFACE_DEFINED__

/* interface IWMReaderCallbackAdvanced */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderCallbackAdvanced;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BEB-2B2B-11d3-B36B-00C04F6108FF")
    IWMReaderCallbackAdvanced : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStreamSample( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTime( 
            /* [in] */ QWORD cnsCurrentTime,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnStreamSelection( 
            /* [in] */ WORD wStreamCount,
            /* [in] */ WORD *pStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnOutputPropsChanged( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ WM_MEDIA_TYPE *pMediaType,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AllocateForStream( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AllocateForOutput( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderCallbackAdvancedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderCallbackAdvanced * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderCallbackAdvanced * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderCallbackAdvanced * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStreamSample )( 
            IWMReaderCallbackAdvanced * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ QWORD cnsSampleTime,
            /* [in] */ QWORD cnsSampleDuration,
            /* [in] */ DWORD dwFlags,
            /* [in] */ INSSBuffer *pSample,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *OnTime )( 
            IWMReaderCallbackAdvanced * This,
            /* [in] */ QWORD cnsCurrentTime,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *OnStreamSelection )( 
            IWMReaderCallbackAdvanced * This,
            /* [in] */ WORD wStreamCount,
            /* [in] */ WORD *pStreamNumbers,
            /* [in] */ WMT_STREAM_SELECTION *pSelections,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *OnOutputPropsChanged )( 
            IWMReaderCallbackAdvanced * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ WM_MEDIA_TYPE *pMediaType,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateForStream )( 
            IWMReaderCallbackAdvanced * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateForOutput )( 
            IWMReaderCallbackAdvanced * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ DWORD cbBuffer,
            /* [out] */ INSSBuffer **ppBuffer,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMReaderCallbackAdvancedVtbl;

    interface IWMReaderCallbackAdvanced
    {
        CONST_VTBL struct IWMReaderCallbackAdvancedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderCallbackAdvanced_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderCallbackAdvanced_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderCallbackAdvanced_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderCallbackAdvanced_OnStreamSample(This,wStreamNum,cnsSampleTime,cnsSampleDuration,dwFlags,pSample,pvContext)	\
    ( (This)->lpVtbl -> OnStreamSample(This,wStreamNum,cnsSampleTime,cnsSampleDuration,dwFlags,pSample,pvContext) ) 

#define IWMReaderCallbackAdvanced_OnTime(This,cnsCurrentTime,pvContext)	\
    ( (This)->lpVtbl -> OnTime(This,cnsCurrentTime,pvContext) ) 

#define IWMReaderCallbackAdvanced_OnStreamSelection(This,wStreamCount,pStreamNumbers,pSelections,pvContext)	\
    ( (This)->lpVtbl -> OnStreamSelection(This,wStreamCount,pStreamNumbers,pSelections,pvContext) ) 

#define IWMReaderCallbackAdvanced_OnOutputPropsChanged(This,dwOutputNum,pMediaType,pvContext)	\
    ( (This)->lpVtbl -> OnOutputPropsChanged(This,dwOutputNum,pMediaType,pvContext) ) 

#define IWMReaderCallbackAdvanced_AllocateForStream(This,wStreamNum,cbBuffer,ppBuffer,pvContext)	\
    ( (This)->lpVtbl -> AllocateForStream(This,wStreamNum,cbBuffer,ppBuffer,pvContext) ) 

#define IWMReaderCallbackAdvanced_AllocateForOutput(This,dwOutputNum,cbBuffer,ppBuffer,pvContext)	\
    ( (This)->lpVtbl -> AllocateForOutput(This,dwOutputNum,cbBuffer,ppBuffer,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderCallbackAdvanced_INTERFACE_DEFINED__ */


#ifndef __IWMDRMReader_INTERFACE_DEFINED__
#define __IWMDRMReader_INTERFACE_DEFINED__

/* interface IWMDRMReader */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D2827540-3EE7-432c-B14C-DC17F085D3B3")
    IWMDRMReader : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AcquireLicense( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CancelLicenseAcquisition( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Individualize( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CancelIndividualization( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MonitorLicenseAcquisition( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CancelMonitorLicenseAcquisition( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDRMProperty( 
            /* [in] */ LPCWSTR pwstrName,
            /* [in] */ WMT_ATTR_DATATYPE dwType,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDRMProperty( 
            /* [in] */ LPCWSTR pwstrName,
            /* [out] */ WMT_ATTR_DATATYPE *pdwType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMReader * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *AcquireLicense )( 
            IWMDRMReader * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *CancelLicenseAcquisition )( 
            IWMDRMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Individualize )( 
            IWMDRMReader * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *CancelIndividualization )( 
            IWMDRMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *MonitorLicenseAcquisition )( 
            IWMDRMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *CancelMonitorLicenseAcquisition )( 
            IWMDRMReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetDRMProperty )( 
            IWMDRMReader * This,
            /* [in] */ LPCWSTR pwstrName,
            /* [in] */ WMT_ATTR_DATATYPE dwType,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetDRMProperty )( 
            IWMDRMReader * This,
            /* [in] */ LPCWSTR pwstrName,
            /* [out] */ WMT_ATTR_DATATYPE *pdwType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        END_INTERFACE
    } IWMDRMReaderVtbl;

    interface IWMDRMReader
    {
        CONST_VTBL struct IWMDRMReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMReader_AcquireLicense(This,dwFlags)	\
    ( (This)->lpVtbl -> AcquireLicense(This,dwFlags) ) 

#define IWMDRMReader_CancelLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> CancelLicenseAcquisition(This) ) 

#define IWMDRMReader_Individualize(This,dwFlags)	\
    ( (This)->lpVtbl -> Individualize(This,dwFlags) ) 

#define IWMDRMReader_CancelIndividualization(This)	\
    ( (This)->lpVtbl -> CancelIndividualization(This) ) 

#define IWMDRMReader_MonitorLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> MonitorLicenseAcquisition(This) ) 

#define IWMDRMReader_CancelMonitorLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> CancelMonitorLicenseAcquisition(This) ) 

#define IWMDRMReader_SetDRMProperty(This,pwstrName,dwType,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetDRMProperty(This,pwstrName,dwType,pValue,cbLength) ) 

#define IWMDRMReader_GetDRMProperty(This,pwstrName,pdwType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetDRMProperty(This,pwstrName,pdwType,pValue,pcbLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMReader_INTERFACE_DEFINED__ */


#ifndef __IWMDRMReader2_INTERFACE_DEFINED__
#define __IWMDRMReader2_INTERFACE_DEFINED__

/* interface IWMDRMReader2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMReader2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("befe7a75-9f1d-4075-b9d9-a3c37bda49a0")
    IWMDRMReader2 : public IWMDRMReader
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetEvaluateOutputLevelLicenses( 
            /* [in] */ BOOL fEvaluate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPlayOutputLevels( 
            /* [size_is][out] */ DRM_PLAY_OPL *pPlayOPL,
            /* [out][in] */ DWORD *pcbLength,
            /* [out] */ DWORD *pdwMinAppComplianceLevel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCopyOutputLevels( 
            /* [size_is][out] */ DRM_COPY_OPL *pCopyOPL,
            /* [out][in] */ DWORD *pcbLength,
            /* [out] */ DWORD *pdwMinAppComplianceLevel) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TryNextLicense( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMReader2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMReader2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMReader2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMReader2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AcquireLicense )( 
            IWMDRMReader2 * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *CancelLicenseAcquisition )( 
            IWMDRMReader2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Individualize )( 
            IWMDRMReader2 * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *CancelIndividualization )( 
            IWMDRMReader2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *MonitorLicenseAcquisition )( 
            IWMDRMReader2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CancelMonitorLicenseAcquisition )( 
            IWMDRMReader2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetDRMProperty )( 
            IWMDRMReader2 * This,
            /* [in] */ LPCWSTR pwstrName,
            /* [in] */ WMT_ATTR_DATATYPE dwType,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetDRMProperty )( 
            IWMDRMReader2 * This,
            /* [in] */ LPCWSTR pwstrName,
            /* [out] */ WMT_ATTR_DATATYPE *pdwType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetEvaluateOutputLevelLicenses )( 
            IWMDRMReader2 * This,
            /* [in] */ BOOL fEvaluate);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayOutputLevels )( 
            IWMDRMReader2 * This,
            /* [size_is][out] */ DRM_PLAY_OPL *pPlayOPL,
            /* [out][in] */ DWORD *pcbLength,
            /* [out] */ DWORD *pdwMinAppComplianceLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCopyOutputLevels )( 
            IWMDRMReader2 * This,
            /* [size_is][out] */ DRM_COPY_OPL *pCopyOPL,
            /* [out][in] */ DWORD *pcbLength,
            /* [out] */ DWORD *pdwMinAppComplianceLevel);
        
        HRESULT ( STDMETHODCALLTYPE *TryNextLicense )( 
            IWMDRMReader2 * This);
        
        END_INTERFACE
    } IWMDRMReader2Vtbl;

    interface IWMDRMReader2
    {
        CONST_VTBL struct IWMDRMReader2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMReader2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMReader2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMReader2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMReader2_AcquireLicense(This,dwFlags)	\
    ( (This)->lpVtbl -> AcquireLicense(This,dwFlags) ) 

#define IWMDRMReader2_CancelLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> CancelLicenseAcquisition(This) ) 

#define IWMDRMReader2_Individualize(This,dwFlags)	\
    ( (This)->lpVtbl -> Individualize(This,dwFlags) ) 

#define IWMDRMReader2_CancelIndividualization(This)	\
    ( (This)->lpVtbl -> CancelIndividualization(This) ) 

#define IWMDRMReader2_MonitorLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> MonitorLicenseAcquisition(This) ) 

#define IWMDRMReader2_CancelMonitorLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> CancelMonitorLicenseAcquisition(This) ) 

#define IWMDRMReader2_SetDRMProperty(This,pwstrName,dwType,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetDRMProperty(This,pwstrName,dwType,pValue,cbLength) ) 

#define IWMDRMReader2_GetDRMProperty(This,pwstrName,pdwType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetDRMProperty(This,pwstrName,pdwType,pValue,pcbLength) ) 


#define IWMDRMReader2_SetEvaluateOutputLevelLicenses(This,fEvaluate)	\
    ( (This)->lpVtbl -> SetEvaluateOutputLevelLicenses(This,fEvaluate) ) 

#define IWMDRMReader2_GetPlayOutputLevels(This,pPlayOPL,pcbLength,pdwMinAppComplianceLevel)	\
    ( (This)->lpVtbl -> GetPlayOutputLevels(This,pPlayOPL,pcbLength,pdwMinAppComplianceLevel) ) 

#define IWMDRMReader2_GetCopyOutputLevels(This,pCopyOPL,pcbLength,pdwMinAppComplianceLevel)	\
    ( (This)->lpVtbl -> GetCopyOutputLevels(This,pCopyOPL,pcbLength,pdwMinAppComplianceLevel) ) 

#define IWMDRMReader2_TryNextLicense(This)	\
    ( (This)->lpVtbl -> TryNextLicense(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMReader2_INTERFACE_DEFINED__ */


#ifndef __IWMDRMReader3_INTERFACE_DEFINED__
#define __IWMDRMReader3_INTERFACE_DEFINED__

/* interface IWMDRMReader3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMReader3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e08672de-f1e7-4ff4-a0a3-fc4b08e4caf8")
    IWMDRMReader3 : public IWMDRMReader2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInclusionList( 
            /* [out] */ GUID **ppGuids,
            /* [out] */ DWORD *pcGuids) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMReader3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMReader3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMReader3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMReader3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AcquireLicense )( 
            IWMDRMReader3 * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *CancelLicenseAcquisition )( 
            IWMDRMReader3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Individualize )( 
            IWMDRMReader3 * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *CancelIndividualization )( 
            IWMDRMReader3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *MonitorLicenseAcquisition )( 
            IWMDRMReader3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *CancelMonitorLicenseAcquisition )( 
            IWMDRMReader3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetDRMProperty )( 
            IWMDRMReader3 * This,
            /* [in] */ LPCWSTR pwstrName,
            /* [in] */ WMT_ATTR_DATATYPE dwType,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetDRMProperty )( 
            IWMDRMReader3 * This,
            /* [in] */ LPCWSTR pwstrName,
            /* [out] */ WMT_ATTR_DATATYPE *pdwType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetEvaluateOutputLevelLicenses )( 
            IWMDRMReader3 * This,
            /* [in] */ BOOL fEvaluate);
        
        HRESULT ( STDMETHODCALLTYPE *GetPlayOutputLevels )( 
            IWMDRMReader3 * This,
            /* [size_is][out] */ DRM_PLAY_OPL *pPlayOPL,
            /* [out][in] */ DWORD *pcbLength,
            /* [out] */ DWORD *pdwMinAppComplianceLevel);
        
        HRESULT ( STDMETHODCALLTYPE *GetCopyOutputLevels )( 
            IWMDRMReader3 * This,
            /* [size_is][out] */ DRM_COPY_OPL *pCopyOPL,
            /* [out][in] */ DWORD *pcbLength,
            /* [out] */ DWORD *pdwMinAppComplianceLevel);
        
        HRESULT ( STDMETHODCALLTYPE *TryNextLicense )( 
            IWMDRMReader3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInclusionList )( 
            IWMDRMReader3 * This,
            /* [out] */ GUID **ppGuids,
            /* [out] */ DWORD *pcGuids);
        
        END_INTERFACE
    } IWMDRMReader3Vtbl;

    interface IWMDRMReader3
    {
        CONST_VTBL struct IWMDRMReader3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMReader3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMReader3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMReader3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMReader3_AcquireLicense(This,dwFlags)	\
    ( (This)->lpVtbl -> AcquireLicense(This,dwFlags) ) 

#define IWMDRMReader3_CancelLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> CancelLicenseAcquisition(This) ) 

#define IWMDRMReader3_Individualize(This,dwFlags)	\
    ( (This)->lpVtbl -> Individualize(This,dwFlags) ) 

#define IWMDRMReader3_CancelIndividualization(This)	\
    ( (This)->lpVtbl -> CancelIndividualization(This) ) 

#define IWMDRMReader3_MonitorLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> MonitorLicenseAcquisition(This) ) 

#define IWMDRMReader3_CancelMonitorLicenseAcquisition(This)	\
    ( (This)->lpVtbl -> CancelMonitorLicenseAcquisition(This) ) 

#define IWMDRMReader3_SetDRMProperty(This,pwstrName,dwType,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetDRMProperty(This,pwstrName,dwType,pValue,cbLength) ) 

#define IWMDRMReader3_GetDRMProperty(This,pwstrName,pdwType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetDRMProperty(This,pwstrName,pdwType,pValue,pcbLength) ) 


#define IWMDRMReader3_SetEvaluateOutputLevelLicenses(This,fEvaluate)	\
    ( (This)->lpVtbl -> SetEvaluateOutputLevelLicenses(This,fEvaluate) ) 

#define IWMDRMReader3_GetPlayOutputLevels(This,pPlayOPL,pcbLength,pdwMinAppComplianceLevel)	\
    ( (This)->lpVtbl -> GetPlayOutputLevels(This,pPlayOPL,pcbLength,pdwMinAppComplianceLevel) ) 

#define IWMDRMReader3_GetCopyOutputLevels(This,pCopyOPL,pcbLength,pdwMinAppComplianceLevel)	\
    ( (This)->lpVtbl -> GetCopyOutputLevels(This,pCopyOPL,pcbLength,pdwMinAppComplianceLevel) ) 

#define IWMDRMReader3_TryNextLicense(This)	\
    ( (This)->lpVtbl -> TryNextLicense(This) ) 


#define IWMDRMReader3_GetInclusionList(This,ppGuids,pcGuids)	\
    ( (This)->lpVtbl -> GetInclusionList(This,ppGuids,pcGuids) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMReader3_INTERFACE_DEFINED__ */


#ifndef __IWMReaderPlaylistBurn_INTERFACE_DEFINED__
#define __IWMReaderPlaylistBurn_INTERFACE_DEFINED__

/* interface IWMReaderPlaylistBurn */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderPlaylistBurn;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f28c0300-9baa-4477-a846-1744d9cbf533")
    IWMReaderPlaylistBurn : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitPlaylistBurn( 
            /* [in] */ DWORD cFiles,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE *ppwszFilenames,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInitResults( 
            /* [in] */ DWORD cFiles,
            /* [out] */ HRESULT *phrStati) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Cancel( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndPlaylistBurn( 
            /* [in] */ HRESULT hrBurnResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderPlaylistBurnVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderPlaylistBurn * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderPlaylistBurn * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderPlaylistBurn * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitPlaylistBurn )( 
            IWMReaderPlaylistBurn * This,
            /* [in] */ DWORD cFiles,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE *ppwszFilenames,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetInitResults )( 
            IWMReaderPlaylistBurn * This,
            /* [in] */ DWORD cFiles,
            /* [out] */ HRESULT *phrStati);
        
        HRESULT ( STDMETHODCALLTYPE *Cancel )( 
            IWMReaderPlaylistBurn * This);
        
        HRESULT ( STDMETHODCALLTYPE *EndPlaylistBurn )( 
            IWMReaderPlaylistBurn * This,
            /* [in] */ HRESULT hrBurnResult);
        
        END_INTERFACE
    } IWMReaderPlaylistBurnVtbl;

    interface IWMReaderPlaylistBurn
    {
        CONST_VTBL struct IWMReaderPlaylistBurnVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderPlaylistBurn_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderPlaylistBurn_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderPlaylistBurn_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderPlaylistBurn_InitPlaylistBurn(This,cFiles,ppwszFilenames,pCallback,pvContext)	\
    ( (This)->lpVtbl -> InitPlaylistBurn(This,cFiles,ppwszFilenames,pCallback,pvContext) ) 

#define IWMReaderPlaylistBurn_GetInitResults(This,cFiles,phrStati)	\
    ( (This)->lpVtbl -> GetInitResults(This,cFiles,phrStati) ) 

#define IWMReaderPlaylistBurn_Cancel(This)	\
    ( (This)->lpVtbl -> Cancel(This) ) 

#define IWMReaderPlaylistBurn_EndPlaylistBurn(This,hrBurnResult)	\
    ( (This)->lpVtbl -> EndPlaylistBurn(This,hrBurnResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderPlaylistBurn_INTERFACE_DEFINED__ */


#ifndef __IWMReaderNetworkConfig_INTERFACE_DEFINED__
#define __IWMReaderNetworkConfig_INTERFACE_DEFINED__

/* interface IWMReaderNetworkConfig */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderNetworkConfig;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BEC-2B2B-11d3-B36B-00C04F6108FF")
    IWMReaderNetworkConfig : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetBufferingTime( 
            /* [out] */ QWORD *pcnsBufferingTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBufferingTime( 
            /* [in] */ QWORD cnsBufferingTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUDPPortRanges( 
            /* [size_is][out] */ WM_PORT_NUMBER_RANGE *pRangeArray,
            /* [out][in] */ DWORD *pcRanges) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetUDPPortRanges( 
            /* [size_is][in] */ WM_PORT_NUMBER_RANGE *pRangeArray,
            /* [in] */ DWORD cRanges) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProxySettings( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ WMT_PROXY_SETTINGS *pProxySetting) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProxySettings( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ WMT_PROXY_SETTINGS ProxySetting) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProxyHostName( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [size_is][out] */ WCHAR *pwszHostName,
            /* [out][in] */ DWORD *pcchHostName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProxyHostName( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ LPCWSTR pwszHostName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProxyPort( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ DWORD *pdwPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProxyPort( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ DWORD dwPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProxyExceptionList( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [size_is][out] */ WCHAR *pwszExceptionList,
            /* [out][in] */ DWORD *pcchExceptionList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProxyExceptionList( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ LPCWSTR pwszExceptionList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProxyBypassForLocal( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ BOOL *pfBypassForLocal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProxyBypassForLocal( 
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ BOOL fBypassForLocal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetForceRerunAutoProxyDetection( 
            /* [out] */ BOOL *pfForceRerunDetection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetForceRerunAutoProxyDetection( 
            /* [in] */ BOOL fForceRerunDetection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnableMulticast( 
            /* [out] */ BOOL *pfEnableMulticast) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnableMulticast( 
            /* [in] */ BOOL fEnableMulticast) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnableHTTP( 
            /* [out] */ BOOL *pfEnableHTTP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnableHTTP( 
            /* [in] */ BOOL fEnableHTTP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnableUDP( 
            /* [out] */ BOOL *pfEnableUDP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnableUDP( 
            /* [in] */ BOOL fEnableUDP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnableTCP( 
            /* [out] */ BOOL *pfEnableTCP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnableTCP( 
            /* [in] */ BOOL fEnableTCP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ResetProtocolRollover( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConnectionBandwidth( 
            /* [out] */ DWORD *pdwConnectionBandwidth) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetConnectionBandwidth( 
            /* [in] */ DWORD dwConnectionBandwidth) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNumProtocolsSupported( 
            /* [out] */ DWORD *pcProtocols) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSupportedProtocolName( 
            /* [in] */ DWORD dwProtocolNum,
            /* [size_is][out] */ WCHAR *pwszProtocolName,
            /* [out][in] */ DWORD *pcchProtocolName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddLoggingUrl( 
            /* [in] */ LPCWSTR pwszUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLoggingUrl( 
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ LPWSTR pwszUrl,
            /* [out][in] */ DWORD *pcchUrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLoggingUrlCount( 
            /* [out] */ DWORD *pdwUrlCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ResetLoggingUrlList( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderNetworkConfigVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderNetworkConfig * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderNetworkConfig * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferingTime )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ QWORD *pcnsBufferingTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetBufferingTime )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ QWORD cnsBufferingTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetUDPPortRanges )( 
            IWMReaderNetworkConfig * This,
            /* [size_is][out] */ WM_PORT_NUMBER_RANGE *pRangeArray,
            /* [out][in] */ DWORD *pcRanges);
        
        HRESULT ( STDMETHODCALLTYPE *SetUDPPortRanges )( 
            IWMReaderNetworkConfig * This,
            /* [size_is][in] */ WM_PORT_NUMBER_RANGE *pRangeArray,
            /* [in] */ DWORD cRanges);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxySettings )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ WMT_PROXY_SETTINGS *pProxySetting);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxySettings )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ WMT_PROXY_SETTINGS ProxySetting);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxyHostName )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [size_is][out] */ WCHAR *pwszHostName,
            /* [out][in] */ DWORD *pcchHostName);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxyHostName )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ LPCWSTR pwszHostName);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxyPort )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ DWORD *pdwPort);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxyPort )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ DWORD dwPort);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxyExceptionList )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [size_is][out] */ WCHAR *pwszExceptionList,
            /* [out][in] */ DWORD *pcchExceptionList);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxyExceptionList )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ LPCWSTR pwszExceptionList);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxyBypassForLocal )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ BOOL *pfBypassForLocal);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxyBypassForLocal )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ BOOL fBypassForLocal);
        
        HRESULT ( STDMETHODCALLTYPE *GetForceRerunAutoProxyDetection )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ BOOL *pfForceRerunDetection);
        
        HRESULT ( STDMETHODCALLTYPE *SetForceRerunAutoProxyDetection )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ BOOL fForceRerunDetection);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableMulticast )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ BOOL *pfEnableMulticast);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableMulticast )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ BOOL fEnableMulticast);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableHTTP )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ BOOL *pfEnableHTTP);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableHTTP )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ BOOL fEnableHTTP);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableUDP )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ BOOL *pfEnableUDP);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableUDP )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ BOOL fEnableUDP);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableTCP )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ BOOL *pfEnableTCP);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableTCP )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ BOOL fEnableTCP);
        
        HRESULT ( STDMETHODCALLTYPE *ResetProtocolRollover )( 
            IWMReaderNetworkConfig * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectionBandwidth )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ DWORD *pdwConnectionBandwidth);
        
        HRESULT ( STDMETHODCALLTYPE *SetConnectionBandwidth )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ DWORD dwConnectionBandwidth);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumProtocolsSupported )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ DWORD *pcProtocols);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedProtocolName )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ DWORD dwProtocolNum,
            /* [size_is][out] */ WCHAR *pwszProtocolName,
            /* [out][in] */ DWORD *pcchProtocolName);
        
        HRESULT ( STDMETHODCALLTYPE *AddLoggingUrl )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ LPCWSTR pwszUrl);
        
        HRESULT ( STDMETHODCALLTYPE *GetLoggingUrl )( 
            IWMReaderNetworkConfig * This,
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ LPWSTR pwszUrl,
            /* [out][in] */ DWORD *pcchUrl);
        
        HRESULT ( STDMETHODCALLTYPE *GetLoggingUrlCount )( 
            IWMReaderNetworkConfig * This,
            /* [out] */ DWORD *pdwUrlCount);
        
        HRESULT ( STDMETHODCALLTYPE *ResetLoggingUrlList )( 
            IWMReaderNetworkConfig * This);
        
        END_INTERFACE
    } IWMReaderNetworkConfigVtbl;

    interface IWMReaderNetworkConfig
    {
        CONST_VTBL struct IWMReaderNetworkConfigVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderNetworkConfig_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderNetworkConfig_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderNetworkConfig_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderNetworkConfig_GetBufferingTime(This,pcnsBufferingTime)	\
    ( (This)->lpVtbl -> GetBufferingTime(This,pcnsBufferingTime) ) 

#define IWMReaderNetworkConfig_SetBufferingTime(This,cnsBufferingTime)	\
    ( (This)->lpVtbl -> SetBufferingTime(This,cnsBufferingTime) ) 

#define IWMReaderNetworkConfig_GetUDPPortRanges(This,pRangeArray,pcRanges)	\
    ( (This)->lpVtbl -> GetUDPPortRanges(This,pRangeArray,pcRanges) ) 

#define IWMReaderNetworkConfig_SetUDPPortRanges(This,pRangeArray,cRanges)	\
    ( (This)->lpVtbl -> SetUDPPortRanges(This,pRangeArray,cRanges) ) 

#define IWMReaderNetworkConfig_GetProxySettings(This,pwszProtocol,pProxySetting)	\
    ( (This)->lpVtbl -> GetProxySettings(This,pwszProtocol,pProxySetting) ) 

#define IWMReaderNetworkConfig_SetProxySettings(This,pwszProtocol,ProxySetting)	\
    ( (This)->lpVtbl -> SetProxySettings(This,pwszProtocol,ProxySetting) ) 

#define IWMReaderNetworkConfig_GetProxyHostName(This,pwszProtocol,pwszHostName,pcchHostName)	\
    ( (This)->lpVtbl -> GetProxyHostName(This,pwszProtocol,pwszHostName,pcchHostName) ) 

#define IWMReaderNetworkConfig_SetProxyHostName(This,pwszProtocol,pwszHostName)	\
    ( (This)->lpVtbl -> SetProxyHostName(This,pwszProtocol,pwszHostName) ) 

#define IWMReaderNetworkConfig_GetProxyPort(This,pwszProtocol,pdwPort)	\
    ( (This)->lpVtbl -> GetProxyPort(This,pwszProtocol,pdwPort) ) 

#define IWMReaderNetworkConfig_SetProxyPort(This,pwszProtocol,dwPort)	\
    ( (This)->lpVtbl -> SetProxyPort(This,pwszProtocol,dwPort) ) 

#define IWMReaderNetworkConfig_GetProxyExceptionList(This,pwszProtocol,pwszExceptionList,pcchExceptionList)	\
    ( (This)->lpVtbl -> GetProxyExceptionList(This,pwszProtocol,pwszExceptionList,pcchExceptionList) ) 

#define IWMReaderNetworkConfig_SetProxyExceptionList(This,pwszProtocol,pwszExceptionList)	\
    ( (This)->lpVtbl -> SetProxyExceptionList(This,pwszProtocol,pwszExceptionList) ) 

#define IWMReaderNetworkConfig_GetProxyBypassForLocal(This,pwszProtocol,pfBypassForLocal)	\
    ( (This)->lpVtbl -> GetProxyBypassForLocal(This,pwszProtocol,pfBypassForLocal) ) 

#define IWMReaderNetworkConfig_SetProxyBypassForLocal(This,pwszProtocol,fBypassForLocal)	\
    ( (This)->lpVtbl -> SetProxyBypassForLocal(This,pwszProtocol,fBypassForLocal) ) 

#define IWMReaderNetworkConfig_GetForceRerunAutoProxyDetection(This,pfForceRerunDetection)	\
    ( (This)->lpVtbl -> GetForceRerunAutoProxyDetection(This,pfForceRerunDetection) ) 

#define IWMReaderNetworkConfig_SetForceRerunAutoProxyDetection(This,fForceRerunDetection)	\
    ( (This)->lpVtbl -> SetForceRerunAutoProxyDetection(This,fForceRerunDetection) ) 

#define IWMReaderNetworkConfig_GetEnableMulticast(This,pfEnableMulticast)	\
    ( (This)->lpVtbl -> GetEnableMulticast(This,pfEnableMulticast) ) 

#define IWMReaderNetworkConfig_SetEnableMulticast(This,fEnableMulticast)	\
    ( (This)->lpVtbl -> SetEnableMulticast(This,fEnableMulticast) ) 

#define IWMReaderNetworkConfig_GetEnableHTTP(This,pfEnableHTTP)	\
    ( (This)->lpVtbl -> GetEnableHTTP(This,pfEnableHTTP) ) 

#define IWMReaderNetworkConfig_SetEnableHTTP(This,fEnableHTTP)	\
    ( (This)->lpVtbl -> SetEnableHTTP(This,fEnableHTTP) ) 

#define IWMReaderNetworkConfig_GetEnableUDP(This,pfEnableUDP)	\
    ( (This)->lpVtbl -> GetEnableUDP(This,pfEnableUDP) ) 

#define IWMReaderNetworkConfig_SetEnableUDP(This,fEnableUDP)	\
    ( (This)->lpVtbl -> SetEnableUDP(This,fEnableUDP) ) 

#define IWMReaderNetworkConfig_GetEnableTCP(This,pfEnableTCP)	\
    ( (This)->lpVtbl -> GetEnableTCP(This,pfEnableTCP) ) 

#define IWMReaderNetworkConfig_SetEnableTCP(This,fEnableTCP)	\
    ( (This)->lpVtbl -> SetEnableTCP(This,fEnableTCP) ) 

#define IWMReaderNetworkConfig_ResetProtocolRollover(This)	\
    ( (This)->lpVtbl -> ResetProtocolRollover(This) ) 

#define IWMReaderNetworkConfig_GetConnectionBandwidth(This,pdwConnectionBandwidth)	\
    ( (This)->lpVtbl -> GetConnectionBandwidth(This,pdwConnectionBandwidth) ) 

#define IWMReaderNetworkConfig_SetConnectionBandwidth(This,dwConnectionBandwidth)	\
    ( (This)->lpVtbl -> SetConnectionBandwidth(This,dwConnectionBandwidth) ) 

#define IWMReaderNetworkConfig_GetNumProtocolsSupported(This,pcProtocols)	\
    ( (This)->lpVtbl -> GetNumProtocolsSupported(This,pcProtocols) ) 

#define IWMReaderNetworkConfig_GetSupportedProtocolName(This,dwProtocolNum,pwszProtocolName,pcchProtocolName)	\
    ( (This)->lpVtbl -> GetSupportedProtocolName(This,dwProtocolNum,pwszProtocolName,pcchProtocolName) ) 

#define IWMReaderNetworkConfig_AddLoggingUrl(This,pwszUrl)	\
    ( (This)->lpVtbl -> AddLoggingUrl(This,pwszUrl) ) 

#define IWMReaderNetworkConfig_GetLoggingUrl(This,dwIndex,pwszUrl,pcchUrl)	\
    ( (This)->lpVtbl -> GetLoggingUrl(This,dwIndex,pwszUrl,pcchUrl) ) 

#define IWMReaderNetworkConfig_GetLoggingUrlCount(This,pdwUrlCount)	\
    ( (This)->lpVtbl -> GetLoggingUrlCount(This,pdwUrlCount) ) 

#define IWMReaderNetworkConfig_ResetLoggingUrlList(This)	\
    ( (This)->lpVtbl -> ResetLoggingUrlList(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderNetworkConfig_INTERFACE_DEFINED__ */


#ifndef __IWMReaderNetworkConfig2_INTERFACE_DEFINED__
#define __IWMReaderNetworkConfig2_INTERFACE_DEFINED__

/* interface IWMReaderNetworkConfig2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderNetworkConfig2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d979a853-042b-4050-8387-c939db22013f")
    IWMReaderNetworkConfig2 : public IWMReaderNetworkConfig
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetEnableContentCaching( 
            /* [out] */ BOOL *pfEnableContentCaching) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnableContentCaching( 
            /* [in] */ BOOL fEnableContentCaching) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnableFastCache( 
            /* [out] */ BOOL *pfEnableFastCache) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnableFastCache( 
            /* [in] */ BOOL fEnableFastCache) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAcceleratedStreamingDuration( 
            /* [out] */ QWORD *pcnsAccelDuration) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAcceleratedStreamingDuration( 
            /* [in] */ QWORD cnsAccelDuration) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAutoReconnectLimit( 
            /* [out] */ DWORD *pdwAutoReconnectLimit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAutoReconnectLimit( 
            /* [in] */ DWORD dwAutoReconnectLimit) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnableResends( 
            /* [out] */ BOOL *pfEnableResends) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnableResends( 
            /* [in] */ BOOL fEnableResends) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnableThinning( 
            /* [out] */ BOOL *pfEnableThinning) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEnableThinning( 
            /* [in] */ BOOL fEnableThinning) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxNetPacketSize( 
            /* [out] */ DWORD *pdwMaxNetPacketSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderNetworkConfig2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderNetworkConfig2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderNetworkConfig2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetBufferingTime )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ QWORD *pcnsBufferingTime);
        
        HRESULT ( STDMETHODCALLTYPE *SetBufferingTime )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ QWORD cnsBufferingTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetUDPPortRanges )( 
            IWMReaderNetworkConfig2 * This,
            /* [size_is][out] */ WM_PORT_NUMBER_RANGE *pRangeArray,
            /* [out][in] */ DWORD *pcRanges);
        
        HRESULT ( STDMETHODCALLTYPE *SetUDPPortRanges )( 
            IWMReaderNetworkConfig2 * This,
            /* [size_is][in] */ WM_PORT_NUMBER_RANGE *pRangeArray,
            /* [in] */ DWORD cRanges);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxySettings )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ WMT_PROXY_SETTINGS *pProxySetting);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxySettings )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ WMT_PROXY_SETTINGS ProxySetting);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxyHostName )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [size_is][out] */ WCHAR *pwszHostName,
            /* [out][in] */ DWORD *pcchHostName);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxyHostName )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ LPCWSTR pwszHostName);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxyPort )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ DWORD *pdwPort);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxyPort )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ DWORD dwPort);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxyExceptionList )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [size_is][out] */ WCHAR *pwszExceptionList,
            /* [out][in] */ DWORD *pcchExceptionList);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxyExceptionList )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ LPCWSTR pwszExceptionList);
        
        HRESULT ( STDMETHODCALLTYPE *GetProxyBypassForLocal )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [out] */ BOOL *pfBypassForLocal);
        
        HRESULT ( STDMETHODCALLTYPE *SetProxyBypassForLocal )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszProtocol,
            /* [in] */ BOOL fBypassForLocal);
        
        HRESULT ( STDMETHODCALLTYPE *GetForceRerunAutoProxyDetection )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfForceRerunDetection);
        
        HRESULT ( STDMETHODCALLTYPE *SetForceRerunAutoProxyDetection )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fForceRerunDetection);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableMulticast )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfEnableMulticast);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableMulticast )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fEnableMulticast);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableHTTP )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfEnableHTTP);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableHTTP )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fEnableHTTP);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableUDP )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfEnableUDP);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableUDP )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fEnableUDP);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableTCP )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfEnableTCP);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableTCP )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fEnableTCP);
        
        HRESULT ( STDMETHODCALLTYPE *ResetProtocolRollover )( 
            IWMReaderNetworkConfig2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetConnectionBandwidth )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ DWORD *pdwConnectionBandwidth);
        
        HRESULT ( STDMETHODCALLTYPE *SetConnectionBandwidth )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ DWORD dwConnectionBandwidth);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumProtocolsSupported )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ DWORD *pcProtocols);
        
        HRESULT ( STDMETHODCALLTYPE *GetSupportedProtocolName )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ DWORD dwProtocolNum,
            /* [size_is][out] */ WCHAR *pwszProtocolName,
            /* [out][in] */ DWORD *pcchProtocolName);
        
        HRESULT ( STDMETHODCALLTYPE *AddLoggingUrl )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ LPCWSTR pwszUrl);
        
        HRESULT ( STDMETHODCALLTYPE *GetLoggingUrl )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ LPWSTR pwszUrl,
            /* [out][in] */ DWORD *pcchUrl);
        
        HRESULT ( STDMETHODCALLTYPE *GetLoggingUrlCount )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ DWORD *pdwUrlCount);
        
        HRESULT ( STDMETHODCALLTYPE *ResetLoggingUrlList )( 
            IWMReaderNetworkConfig2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableContentCaching )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfEnableContentCaching);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableContentCaching )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fEnableContentCaching);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableFastCache )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfEnableFastCache);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableFastCache )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fEnableFastCache);
        
        HRESULT ( STDMETHODCALLTYPE *GetAcceleratedStreamingDuration )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ QWORD *pcnsAccelDuration);
        
        HRESULT ( STDMETHODCALLTYPE *SetAcceleratedStreamingDuration )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ QWORD cnsAccelDuration);
        
        HRESULT ( STDMETHODCALLTYPE *GetAutoReconnectLimit )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ DWORD *pdwAutoReconnectLimit);
        
        HRESULT ( STDMETHODCALLTYPE *SetAutoReconnectLimit )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ DWORD dwAutoReconnectLimit);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableResends )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfEnableResends);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableResends )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fEnableResends);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnableThinning )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ BOOL *pfEnableThinning);
        
        HRESULT ( STDMETHODCALLTYPE *SetEnableThinning )( 
            IWMReaderNetworkConfig2 * This,
            /* [in] */ BOOL fEnableThinning);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxNetPacketSize )( 
            IWMReaderNetworkConfig2 * This,
            /* [out] */ DWORD *pdwMaxNetPacketSize);
        
        END_INTERFACE
    } IWMReaderNetworkConfig2Vtbl;

    interface IWMReaderNetworkConfig2
    {
        CONST_VTBL struct IWMReaderNetworkConfig2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderNetworkConfig2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderNetworkConfig2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderNetworkConfig2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderNetworkConfig2_GetBufferingTime(This,pcnsBufferingTime)	\
    ( (This)->lpVtbl -> GetBufferingTime(This,pcnsBufferingTime) ) 

#define IWMReaderNetworkConfig2_SetBufferingTime(This,cnsBufferingTime)	\
    ( (This)->lpVtbl -> SetBufferingTime(This,cnsBufferingTime) ) 

#define IWMReaderNetworkConfig2_GetUDPPortRanges(This,pRangeArray,pcRanges)	\
    ( (This)->lpVtbl -> GetUDPPortRanges(This,pRangeArray,pcRanges) ) 

#define IWMReaderNetworkConfig2_SetUDPPortRanges(This,pRangeArray,cRanges)	\
    ( (This)->lpVtbl -> SetUDPPortRanges(This,pRangeArray,cRanges) ) 

#define IWMReaderNetworkConfig2_GetProxySettings(This,pwszProtocol,pProxySetting)	\
    ( (This)->lpVtbl -> GetProxySettings(This,pwszProtocol,pProxySetting) ) 

#define IWMReaderNetworkConfig2_SetProxySettings(This,pwszProtocol,ProxySetting)	\
    ( (This)->lpVtbl -> SetProxySettings(This,pwszProtocol,ProxySetting) ) 

#define IWMReaderNetworkConfig2_GetProxyHostName(This,pwszProtocol,pwszHostName,pcchHostName)	\
    ( (This)->lpVtbl -> GetProxyHostName(This,pwszProtocol,pwszHostName,pcchHostName) ) 

#define IWMReaderNetworkConfig2_SetProxyHostName(This,pwszProtocol,pwszHostName)	\
    ( (This)->lpVtbl -> SetProxyHostName(This,pwszProtocol,pwszHostName) ) 

#define IWMReaderNetworkConfig2_GetProxyPort(This,pwszProtocol,pdwPort)	\
    ( (This)->lpVtbl -> GetProxyPort(This,pwszProtocol,pdwPort) ) 

#define IWMReaderNetworkConfig2_SetProxyPort(This,pwszProtocol,dwPort)	\
    ( (This)->lpVtbl -> SetProxyPort(This,pwszProtocol,dwPort) ) 

#define IWMReaderNetworkConfig2_GetProxyExceptionList(This,pwszProtocol,pwszExceptionList,pcchExceptionList)	\
    ( (This)->lpVtbl -> GetProxyExceptionList(This,pwszProtocol,pwszExceptionList,pcchExceptionList) ) 

#define IWMReaderNetworkConfig2_SetProxyExceptionList(This,pwszProtocol,pwszExceptionList)	\
    ( (This)->lpVtbl -> SetProxyExceptionList(This,pwszProtocol,pwszExceptionList) ) 

#define IWMReaderNetworkConfig2_GetProxyBypassForLocal(This,pwszProtocol,pfBypassForLocal)	\
    ( (This)->lpVtbl -> GetProxyBypassForLocal(This,pwszProtocol,pfBypassForLocal) ) 

#define IWMReaderNetworkConfig2_SetProxyBypassForLocal(This,pwszProtocol,fBypassForLocal)	\
    ( (This)->lpVtbl -> SetProxyBypassForLocal(This,pwszProtocol,fBypassForLocal) ) 

#define IWMReaderNetworkConfig2_GetForceRerunAutoProxyDetection(This,pfForceRerunDetection)	\
    ( (This)->lpVtbl -> GetForceRerunAutoProxyDetection(This,pfForceRerunDetection) ) 

#define IWMReaderNetworkConfig2_SetForceRerunAutoProxyDetection(This,fForceRerunDetection)	\
    ( (This)->lpVtbl -> SetForceRerunAutoProxyDetection(This,fForceRerunDetection) ) 

#define IWMReaderNetworkConfig2_GetEnableMulticast(This,pfEnableMulticast)	\
    ( (This)->lpVtbl -> GetEnableMulticast(This,pfEnableMulticast) ) 

#define IWMReaderNetworkConfig2_SetEnableMulticast(This,fEnableMulticast)	\
    ( (This)->lpVtbl -> SetEnableMulticast(This,fEnableMulticast) ) 

#define IWMReaderNetworkConfig2_GetEnableHTTP(This,pfEnableHTTP)	\
    ( (This)->lpVtbl -> GetEnableHTTP(This,pfEnableHTTP) ) 

#define IWMReaderNetworkConfig2_SetEnableHTTP(This,fEnableHTTP)	\
    ( (This)->lpVtbl -> SetEnableHTTP(This,fEnableHTTP) ) 

#define IWMReaderNetworkConfig2_GetEnableUDP(This,pfEnableUDP)	\
    ( (This)->lpVtbl -> GetEnableUDP(This,pfEnableUDP) ) 

#define IWMReaderNetworkConfig2_SetEnableUDP(This,fEnableUDP)	\
    ( (This)->lpVtbl -> SetEnableUDP(This,fEnableUDP) ) 

#define IWMReaderNetworkConfig2_GetEnableTCP(This,pfEnableTCP)	\
    ( (This)->lpVtbl -> GetEnableTCP(This,pfEnableTCP) ) 

#define IWMReaderNetworkConfig2_SetEnableTCP(This,fEnableTCP)	\
    ( (This)->lpVtbl -> SetEnableTCP(This,fEnableTCP) ) 

#define IWMReaderNetworkConfig2_ResetProtocolRollover(This)	\
    ( (This)->lpVtbl -> ResetProtocolRollover(This) ) 

#define IWMReaderNetworkConfig2_GetConnectionBandwidth(This,pdwConnectionBandwidth)	\
    ( (This)->lpVtbl -> GetConnectionBandwidth(This,pdwConnectionBandwidth) ) 

#define IWMReaderNetworkConfig2_SetConnectionBandwidth(This,dwConnectionBandwidth)	\
    ( (This)->lpVtbl -> SetConnectionBandwidth(This,dwConnectionBandwidth) ) 

#define IWMReaderNetworkConfig2_GetNumProtocolsSupported(This,pcProtocols)	\
    ( (This)->lpVtbl -> GetNumProtocolsSupported(This,pcProtocols) ) 

#define IWMReaderNetworkConfig2_GetSupportedProtocolName(This,dwProtocolNum,pwszProtocolName,pcchProtocolName)	\
    ( (This)->lpVtbl -> GetSupportedProtocolName(This,dwProtocolNum,pwszProtocolName,pcchProtocolName) ) 

#define IWMReaderNetworkConfig2_AddLoggingUrl(This,pwszUrl)	\
    ( (This)->lpVtbl -> AddLoggingUrl(This,pwszUrl) ) 

#define IWMReaderNetworkConfig2_GetLoggingUrl(This,dwIndex,pwszUrl,pcchUrl)	\
    ( (This)->lpVtbl -> GetLoggingUrl(This,dwIndex,pwszUrl,pcchUrl) ) 

#define IWMReaderNetworkConfig2_GetLoggingUrlCount(This,pdwUrlCount)	\
    ( (This)->lpVtbl -> GetLoggingUrlCount(This,pdwUrlCount) ) 

#define IWMReaderNetworkConfig2_ResetLoggingUrlList(This)	\
    ( (This)->lpVtbl -> ResetLoggingUrlList(This) ) 


#define IWMReaderNetworkConfig2_GetEnableContentCaching(This,pfEnableContentCaching)	\
    ( (This)->lpVtbl -> GetEnableContentCaching(This,pfEnableContentCaching) ) 

#define IWMReaderNetworkConfig2_SetEnableContentCaching(This,fEnableContentCaching)	\
    ( (This)->lpVtbl -> SetEnableContentCaching(This,fEnableContentCaching) ) 

#define IWMReaderNetworkConfig2_GetEnableFastCache(This,pfEnableFastCache)	\
    ( (This)->lpVtbl -> GetEnableFastCache(This,pfEnableFastCache) ) 

#define IWMReaderNetworkConfig2_SetEnableFastCache(This,fEnableFastCache)	\
    ( (This)->lpVtbl -> SetEnableFastCache(This,fEnableFastCache) ) 

#define IWMReaderNetworkConfig2_GetAcceleratedStreamingDuration(This,pcnsAccelDuration)	\
    ( (This)->lpVtbl -> GetAcceleratedStreamingDuration(This,pcnsAccelDuration) ) 

#define IWMReaderNetworkConfig2_SetAcceleratedStreamingDuration(This,cnsAccelDuration)	\
    ( (This)->lpVtbl -> SetAcceleratedStreamingDuration(This,cnsAccelDuration) ) 

#define IWMReaderNetworkConfig2_GetAutoReconnectLimit(This,pdwAutoReconnectLimit)	\
    ( (This)->lpVtbl -> GetAutoReconnectLimit(This,pdwAutoReconnectLimit) ) 

#define IWMReaderNetworkConfig2_SetAutoReconnectLimit(This,dwAutoReconnectLimit)	\
    ( (This)->lpVtbl -> SetAutoReconnectLimit(This,dwAutoReconnectLimit) ) 

#define IWMReaderNetworkConfig2_GetEnableResends(This,pfEnableResends)	\
    ( (This)->lpVtbl -> GetEnableResends(This,pfEnableResends) ) 

#define IWMReaderNetworkConfig2_SetEnableResends(This,fEnableResends)	\
    ( (This)->lpVtbl -> SetEnableResends(This,fEnableResends) ) 

#define IWMReaderNetworkConfig2_GetEnableThinning(This,pfEnableThinning)	\
    ( (This)->lpVtbl -> GetEnableThinning(This,pfEnableThinning) ) 

#define IWMReaderNetworkConfig2_SetEnableThinning(This,fEnableThinning)	\
    ( (This)->lpVtbl -> SetEnableThinning(This,fEnableThinning) ) 

#define IWMReaderNetworkConfig2_GetMaxNetPacketSize(This,pdwMaxNetPacketSize)	\
    ( (This)->lpVtbl -> GetMaxNetPacketSize(This,pdwMaxNetPacketSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderNetworkConfig2_INTERFACE_DEFINED__ */


#ifndef __IWMReaderStreamClock_INTERFACE_DEFINED__
#define __IWMReaderStreamClock_INTERFACE_DEFINED__

/* interface IWMReaderStreamClock */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderStreamClock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96406BED-2B2B-11d3-B36B-00C04F6108FF")
    IWMReaderStreamClock : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetTime( 
            /* [in] */ QWORD *pcnsNow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTimer( 
            /* [in] */ QWORD cnsWhen,
            /* [in] */ void *pvParam,
            /* [out] */ DWORD *pdwTimerId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KillTimer( 
            /* [in] */ DWORD dwTimerId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderStreamClockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderStreamClock * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderStreamClock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderStreamClock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTime )( 
            IWMReaderStreamClock * This,
            /* [in] */ QWORD *pcnsNow);
        
        HRESULT ( STDMETHODCALLTYPE *SetTimer )( 
            IWMReaderStreamClock * This,
            /* [in] */ QWORD cnsWhen,
            /* [in] */ void *pvParam,
            /* [out] */ DWORD *pdwTimerId);
        
        HRESULT ( STDMETHODCALLTYPE *KillTimer )( 
            IWMReaderStreamClock * This,
            /* [in] */ DWORD dwTimerId);
        
        END_INTERFACE
    } IWMReaderStreamClockVtbl;

    interface IWMReaderStreamClock
    {
        CONST_VTBL struct IWMReaderStreamClockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderStreamClock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderStreamClock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderStreamClock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderStreamClock_GetTime(This,pcnsNow)	\
    ( (This)->lpVtbl -> GetTime(This,pcnsNow) ) 

#define IWMReaderStreamClock_SetTimer(This,cnsWhen,pvParam,pdwTimerId)	\
    ( (This)->lpVtbl -> SetTimer(This,cnsWhen,pvParam,pdwTimerId) ) 

#define IWMReaderStreamClock_KillTimer(This,dwTimerId)	\
    ( (This)->lpVtbl -> KillTimer(This,dwTimerId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderStreamClock_INTERFACE_DEFINED__ */


#ifndef __IWMIndexer_INTERFACE_DEFINED__
#define __IWMIndexer_INTERFACE_DEFINED__

/* interface IWMIndexer */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMIndexer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6d7cdc71-9888-11d3-8edc-00c04f6109cf")
    IWMIndexer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StartIndexing( 
            /* [in] */ const WCHAR *pwszURL,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Cancel( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMIndexerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMIndexer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMIndexer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMIndexer * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartIndexing )( 
            IWMIndexer * This,
            /* [in] */ const WCHAR *pwszURL,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *Cancel )( 
            IWMIndexer * This);
        
        END_INTERFACE
    } IWMIndexerVtbl;

    interface IWMIndexer
    {
        CONST_VTBL struct IWMIndexerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMIndexer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMIndexer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMIndexer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMIndexer_StartIndexing(This,pwszURL,pCallback,pvContext)	\
    ( (This)->lpVtbl -> StartIndexing(This,pwszURL,pCallback,pvContext) ) 

#define IWMIndexer_Cancel(This)	\
    ( (This)->lpVtbl -> Cancel(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMIndexer_INTERFACE_DEFINED__ */


#ifndef __IWMIndexer2_INTERFACE_DEFINED__
#define __IWMIndexer2_INTERFACE_DEFINED__

/* interface IWMIndexer2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMIndexer2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B70F1E42-6255-4df0-A6B9-02B212D9E2BB")
    IWMIndexer2 : public IWMIndexer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Configure( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ WMT_INDEXER_TYPE nIndexerType,
            /* [in] */ void *pvInterval,
            /* [in] */ void *pvIndexType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMIndexer2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMIndexer2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMIndexer2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMIndexer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartIndexing )( 
            IWMIndexer2 * This,
            /* [in] */ const WCHAR *pwszURL,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *Cancel )( 
            IWMIndexer2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Configure )( 
            IWMIndexer2 * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ WMT_INDEXER_TYPE nIndexerType,
            /* [in] */ void *pvInterval,
            /* [in] */ void *pvIndexType);
        
        END_INTERFACE
    } IWMIndexer2Vtbl;

    interface IWMIndexer2
    {
        CONST_VTBL struct IWMIndexer2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMIndexer2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMIndexer2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMIndexer2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMIndexer2_StartIndexing(This,pwszURL,pCallback,pvContext)	\
    ( (This)->lpVtbl -> StartIndexing(This,pwszURL,pCallback,pvContext) ) 

#define IWMIndexer2_Cancel(This)	\
    ( (This)->lpVtbl -> Cancel(This) ) 


#define IWMIndexer2_Configure(This,wStreamNum,nIndexerType,pvInterval,pvIndexType)	\
    ( (This)->lpVtbl -> Configure(This,wStreamNum,nIndexerType,pvInterval,pvIndexType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMIndexer2_INTERFACE_DEFINED__ */


#ifndef __IWMLicenseBackup_INTERFACE_DEFINED__
#define __IWMLicenseBackup_INTERFACE_DEFINED__

/* interface IWMLicenseBackup */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMLicenseBackup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("05E5AC9F-3FB6-4508-BB43-A4067BA1EBE8")
    IWMLicenseBackup : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BackupLicenses( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ IWMStatusCallback *pCallback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CancelLicenseBackup( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMLicenseBackupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMLicenseBackup * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMLicenseBackup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMLicenseBackup * This);
        
        HRESULT ( STDMETHODCALLTYPE *BackupLicenses )( 
            IWMLicenseBackup * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ IWMStatusCallback *pCallback);
        
        HRESULT ( STDMETHODCALLTYPE *CancelLicenseBackup )( 
            IWMLicenseBackup * This);
        
        END_INTERFACE
    } IWMLicenseBackupVtbl;

    interface IWMLicenseBackup
    {
        CONST_VTBL struct IWMLicenseBackupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMLicenseBackup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMLicenseBackup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMLicenseBackup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMLicenseBackup_BackupLicenses(This,dwFlags,pCallback)	\
    ( (This)->lpVtbl -> BackupLicenses(This,dwFlags,pCallback) ) 

#define IWMLicenseBackup_CancelLicenseBackup(This)	\
    ( (This)->lpVtbl -> CancelLicenseBackup(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMLicenseBackup_INTERFACE_DEFINED__ */


#ifndef __IWMLicenseRestore_INTERFACE_DEFINED__
#define __IWMLicenseRestore_INTERFACE_DEFINED__

/* interface IWMLicenseRestore */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMLicenseRestore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C70B6334-A22E-4efb-A245-15E65A004A13")
    IWMLicenseRestore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RestoreLicenses( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ IWMStatusCallback *pCallback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CancelLicenseRestore( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMLicenseRestoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMLicenseRestore * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMLicenseRestore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMLicenseRestore * This);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreLicenses )( 
            IWMLicenseRestore * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ IWMStatusCallback *pCallback);
        
        HRESULT ( STDMETHODCALLTYPE *CancelLicenseRestore )( 
            IWMLicenseRestore * This);
        
        END_INTERFACE
    } IWMLicenseRestoreVtbl;

    interface IWMLicenseRestore
    {
        CONST_VTBL struct IWMLicenseRestoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMLicenseRestore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMLicenseRestore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMLicenseRestore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMLicenseRestore_RestoreLicenses(This,dwFlags,pCallback)	\
    ( (This)->lpVtbl -> RestoreLicenses(This,dwFlags,pCallback) ) 

#define IWMLicenseRestore_CancelLicenseRestore(This)	\
    ( (This)->lpVtbl -> CancelLicenseRestore(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMLicenseRestore_INTERFACE_DEFINED__ */


#ifndef __IWMBackupRestoreProps_INTERFACE_DEFINED__
#define __IWMBackupRestoreProps_INTERFACE_DEFINED__

/* interface IWMBackupRestoreProps */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMBackupRestoreProps;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3C8E0DA6-996F-4ff3-A1AF-4838F9377E2E")
    IWMBackupRestoreProps : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropCount( 
            /* [out] */ WORD *pcProps) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropByIndex( 
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropByName( 
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProp( 
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveProp( 
            /* [in] */ LPCWSTR pcwszName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAllProps( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMBackupRestorePropsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMBackupRestoreProps * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMBackupRestoreProps * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMBackupRestoreProps * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropCount )( 
            IWMBackupRestoreProps * This,
            /* [out] */ WORD *pcProps);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropByIndex )( 
            IWMBackupRestoreProps * This,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszName,
            /* [out][in] */ WORD *pcchNameLen,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropByName )( 
            IWMBackupRestoreProps * This,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ WORD *pcbLength);
        
        HRESULT ( STDMETHODCALLTYPE *SetProp )( 
            IWMBackupRestoreProps * This,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ WORD cbLength);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveProp )( 
            IWMBackupRestoreProps * This,
            /* [in] */ LPCWSTR pcwszName);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAllProps )( 
            IWMBackupRestoreProps * This);
        
        END_INTERFACE
    } IWMBackupRestorePropsVtbl;

    interface IWMBackupRestoreProps
    {
        CONST_VTBL struct IWMBackupRestorePropsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMBackupRestoreProps_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMBackupRestoreProps_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMBackupRestoreProps_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMBackupRestoreProps_GetPropCount(This,pcProps)	\
    ( (This)->lpVtbl -> GetPropCount(This,pcProps) ) 

#define IWMBackupRestoreProps_GetPropByIndex(This,wIndex,pwszName,pcchNameLen,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetPropByIndex(This,wIndex,pwszName,pcchNameLen,pType,pValue,pcbLength) ) 

#define IWMBackupRestoreProps_GetPropByName(This,pszName,pType,pValue,pcbLength)	\
    ( (This)->lpVtbl -> GetPropByName(This,pszName,pType,pValue,pcbLength) ) 

#define IWMBackupRestoreProps_SetProp(This,pszName,Type,pValue,cbLength)	\
    ( (This)->lpVtbl -> SetProp(This,pszName,Type,pValue,cbLength) ) 

#define IWMBackupRestoreProps_RemoveProp(This,pcwszName)	\
    ( (This)->lpVtbl -> RemoveProp(This,pcwszName) ) 

#define IWMBackupRestoreProps_RemoveAllProps(This)	\
    ( (This)->lpVtbl -> RemoveAllProps(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMBackupRestoreProps_INTERFACE_DEFINED__ */


#ifndef __IWMCodecInfo_INTERFACE_DEFINED__
#define __IWMCodecInfo_INTERFACE_DEFINED__

/* interface IWMCodecInfo */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMCodecInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A970F41E-34DE-4a98-B3BA-E4B3CA7528F0")
    IWMCodecInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCodecInfoCount( 
            /* [in] */ REFGUID guidType,
            /* [out] */ DWORD *pcCodecs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodecFormatCount( 
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [out] */ DWORD *pcFormat) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodecFormat( 
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [out] */ IWMStreamConfig **ppIStreamConfig) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMCodecInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMCodecInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMCodecInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMCodecInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecInfoCount )( 
            IWMCodecInfo * This,
            /* [in] */ REFGUID guidType,
            /* [out] */ DWORD *pcCodecs);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormatCount )( 
            IWMCodecInfo * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [out] */ DWORD *pcFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormat )( 
            IWMCodecInfo * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [out] */ IWMStreamConfig **ppIStreamConfig);
        
        END_INTERFACE
    } IWMCodecInfoVtbl;

    interface IWMCodecInfo
    {
        CONST_VTBL struct IWMCodecInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMCodecInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMCodecInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMCodecInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMCodecInfo_GetCodecInfoCount(This,guidType,pcCodecs)	\
    ( (This)->lpVtbl -> GetCodecInfoCount(This,guidType,pcCodecs) ) 

#define IWMCodecInfo_GetCodecFormatCount(This,guidType,dwCodecIndex,pcFormat)	\
    ( (This)->lpVtbl -> GetCodecFormatCount(This,guidType,dwCodecIndex,pcFormat) ) 

#define IWMCodecInfo_GetCodecFormat(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig)	\
    ( (This)->lpVtbl -> GetCodecFormat(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMCodecInfo_INTERFACE_DEFINED__ */


#ifndef __IWMCodecInfo2_INTERFACE_DEFINED__
#define __IWMCodecInfo2_INTERFACE_DEFINED__

/* interface IWMCodecInfo2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMCodecInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AA65E273-B686-4056-91EC-DD768D4DF710")
    IWMCodecInfo2 : public IWMCodecInfo
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCodecName( 
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [size_is][out] */ WCHAR *wszName,
            /* [out][in] */ DWORD *pcchName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodecFormatDesc( 
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [out] */ IWMStreamConfig **ppIStreamConfig,
            /* [size_is][out] */ WCHAR *wszDesc,
            /* [out][in] */ DWORD *pcchDesc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMCodecInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMCodecInfo2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMCodecInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMCodecInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecInfoCount )( 
            IWMCodecInfo2 * This,
            /* [in] */ REFGUID guidType,
            /* [out] */ DWORD *pcCodecs);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormatCount )( 
            IWMCodecInfo2 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [out] */ DWORD *pcFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormat )( 
            IWMCodecInfo2 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [out] */ IWMStreamConfig **ppIStreamConfig);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecName )( 
            IWMCodecInfo2 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [size_is][out] */ WCHAR *wszName,
            /* [out][in] */ DWORD *pcchName);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormatDesc )( 
            IWMCodecInfo2 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [out] */ IWMStreamConfig **ppIStreamConfig,
            /* [size_is][out] */ WCHAR *wszDesc,
            /* [out][in] */ DWORD *pcchDesc);
        
        END_INTERFACE
    } IWMCodecInfo2Vtbl;

    interface IWMCodecInfo2
    {
        CONST_VTBL struct IWMCodecInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMCodecInfo2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMCodecInfo2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMCodecInfo2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMCodecInfo2_GetCodecInfoCount(This,guidType,pcCodecs)	\
    ( (This)->lpVtbl -> GetCodecInfoCount(This,guidType,pcCodecs) ) 

#define IWMCodecInfo2_GetCodecFormatCount(This,guidType,dwCodecIndex,pcFormat)	\
    ( (This)->lpVtbl -> GetCodecFormatCount(This,guidType,dwCodecIndex,pcFormat) ) 

#define IWMCodecInfo2_GetCodecFormat(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig)	\
    ( (This)->lpVtbl -> GetCodecFormat(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig) ) 


#define IWMCodecInfo2_GetCodecName(This,guidType,dwCodecIndex,wszName,pcchName)	\
    ( (This)->lpVtbl -> GetCodecName(This,guidType,dwCodecIndex,wszName,pcchName) ) 

#define IWMCodecInfo2_GetCodecFormatDesc(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig,wszDesc,pcchDesc)	\
    ( (This)->lpVtbl -> GetCodecFormatDesc(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig,wszDesc,pcchDesc) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMCodecInfo2_INTERFACE_DEFINED__ */


#ifndef __IWMCodecInfo3_INTERFACE_DEFINED__
#define __IWMCodecInfo3_INTERFACE_DEFINED__

/* interface IWMCodecInfo3 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMCodecInfo3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7e51f487-4d93-4f98-8ab4-27d0565adc51")
    IWMCodecInfo3 : public IWMCodecInfo2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCodecFormatProp( 
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodecProp( 
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCodecEnumerationSetting( 
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ DWORD dwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodecEnumerationSetting( 
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMCodecInfo3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMCodecInfo3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMCodecInfo3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecInfoCount )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [out] */ DWORD *pcCodecs);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormatCount )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [out] */ DWORD *pcFormat);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormat )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [out] */ IWMStreamConfig **ppIStreamConfig);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecName )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [size_is][out] */ WCHAR *wszName,
            /* [out][in] */ DWORD *pcchName);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormatDesc )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [out] */ IWMStreamConfig **ppIStreamConfig,
            /* [size_is][out] */ WCHAR *wszDesc,
            /* [out][in] */ DWORD *pcchDesc);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecFormatProp )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ DWORD dwFormatIndex,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecProp )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetCodecEnumerationSetting )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ LPCWSTR pszName,
            /* [in] */ WMT_ATTR_DATATYPE Type,
            /* [size_is][in] */ const BYTE *pValue,
            /* [in] */ DWORD dwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecEnumerationSetting )( 
            IWMCodecInfo3 * This,
            /* [in] */ REFGUID guidType,
            /* [in] */ DWORD dwCodecIndex,
            /* [in] */ LPCWSTR pszName,
            /* [out] */ WMT_ATTR_DATATYPE *pType,
            /* [size_is][out] */ BYTE *pValue,
            /* [out][in] */ DWORD *pdwSize);
        
        END_INTERFACE
    } IWMCodecInfo3Vtbl;

    interface IWMCodecInfo3
    {
        CONST_VTBL struct IWMCodecInfo3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMCodecInfo3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMCodecInfo3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMCodecInfo3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMCodecInfo3_GetCodecInfoCount(This,guidType,pcCodecs)	\
    ( (This)->lpVtbl -> GetCodecInfoCount(This,guidType,pcCodecs) ) 

#define IWMCodecInfo3_GetCodecFormatCount(This,guidType,dwCodecIndex,pcFormat)	\
    ( (This)->lpVtbl -> GetCodecFormatCount(This,guidType,dwCodecIndex,pcFormat) ) 

#define IWMCodecInfo3_GetCodecFormat(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig)	\
    ( (This)->lpVtbl -> GetCodecFormat(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig) ) 


#define IWMCodecInfo3_GetCodecName(This,guidType,dwCodecIndex,wszName,pcchName)	\
    ( (This)->lpVtbl -> GetCodecName(This,guidType,dwCodecIndex,wszName,pcchName) ) 

#define IWMCodecInfo3_GetCodecFormatDesc(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig,wszDesc,pcchDesc)	\
    ( (This)->lpVtbl -> GetCodecFormatDesc(This,guidType,dwCodecIndex,dwFormatIndex,ppIStreamConfig,wszDesc,pcchDesc) ) 


#define IWMCodecInfo3_GetCodecFormatProp(This,guidType,dwCodecIndex,dwFormatIndex,pszName,pType,pValue,pdwSize)	\
    ( (This)->lpVtbl -> GetCodecFormatProp(This,guidType,dwCodecIndex,dwFormatIndex,pszName,pType,pValue,pdwSize) ) 

#define IWMCodecInfo3_GetCodecProp(This,guidType,dwCodecIndex,pszName,pType,pValue,pdwSize)	\
    ( (This)->lpVtbl -> GetCodecProp(This,guidType,dwCodecIndex,pszName,pType,pValue,pdwSize) ) 

#define IWMCodecInfo3_SetCodecEnumerationSetting(This,guidType,dwCodecIndex,pszName,Type,pValue,dwSize)	\
    ( (This)->lpVtbl -> SetCodecEnumerationSetting(This,guidType,dwCodecIndex,pszName,Type,pValue,dwSize) ) 

#define IWMCodecInfo3_GetCodecEnumerationSetting(This,guidType,dwCodecIndex,pszName,pType,pValue,pdwSize)	\
    ( (This)->lpVtbl -> GetCodecEnumerationSetting(This,guidType,dwCodecIndex,pszName,pType,pValue,pdwSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMCodecInfo3_INTERFACE_DEFINED__ */


#ifndef __IWMLanguageList_INTERFACE_DEFINED__
#define __IWMLanguageList_INTERFACE_DEFINED__

/* interface IWMLanguageList */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMLanguageList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DF683F00-2D49-4d8e-92B7-FB19F6A0DC57")
    IWMLanguageList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLanguageCount( 
            /* [out] */ WORD *pwCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguageDetails( 
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszLanguageString,
            /* [out][in] */ WORD *pcchLanguageStringLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddLanguageByRFC1766String( 
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszLanguageString,
            /* [out] */ WORD *pwIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMLanguageListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMLanguageList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMLanguageList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMLanguageList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageCount )( 
            IWMLanguageList * This,
            /* [out] */ WORD *pwCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageDetails )( 
            IWMLanguageList * This,
            /* [in] */ WORD wIndex,
            /* [size_is][out] */ WCHAR *pwszLanguageString,
            /* [out][in] */ WORD *pcchLanguageStringLength);
        
        HRESULT ( STDMETHODCALLTYPE *AddLanguageByRFC1766String )( 
            IWMLanguageList * This,
            /* [in] */ LPCWSTR_WMSDK_TYPE_SAFE pwszLanguageString,
            /* [out] */ WORD *pwIndex);
        
        END_INTERFACE
    } IWMLanguageListVtbl;

    interface IWMLanguageList
    {
        CONST_VTBL struct IWMLanguageListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMLanguageList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMLanguageList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMLanguageList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMLanguageList_GetLanguageCount(This,pwCount)	\
    ( (This)->lpVtbl -> GetLanguageCount(This,pwCount) ) 

#define IWMLanguageList_GetLanguageDetails(This,wIndex,pwszLanguageString,pcchLanguageStringLength)	\
    ( (This)->lpVtbl -> GetLanguageDetails(This,wIndex,pwszLanguageString,pcchLanguageStringLength) ) 

#define IWMLanguageList_AddLanguageByRFC1766String(This,pwszLanguageString,pwIndex)	\
    ( (This)->lpVtbl -> AddLanguageByRFC1766String(This,pwszLanguageString,pwIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMLanguageList_INTERFACE_DEFINED__ */


#ifndef __IWMWriterPushSink_INTERFACE_DEFINED__
#define __IWMWriterPushSink_INTERFACE_DEFINED__

/* interface IWMWriterPushSink */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWriterPushSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dc10e6a5-072c-467d-bf57-6330a9dde12a")
    IWMWriterPushSink : public IWMWriterSink
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Connect( 
            /* [in] */ LPCWSTR pwszURL,
            /* [in] */ LPCWSTR pwszTemplateURL,
            /* [in] */ BOOL fAutoDestroy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Disconnect( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndSession( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWriterPushSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWriterPushSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWriterPushSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWriterPushSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnHeader )( 
            IWMWriterPushSink * This,
            /* [in] */ INSSBuffer *pHeader);
        
        HRESULT ( STDMETHODCALLTYPE *IsRealTime )( 
            IWMWriterPushSink * This,
            /* [out] */ BOOL *pfRealTime);
        
        HRESULT ( STDMETHODCALLTYPE *AllocateDataUnit )( 
            IWMWriterPushSink * This,
            /* [in] */ DWORD cbDataUnit,
            /* [out] */ INSSBuffer **ppDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnDataUnit )( 
            IWMWriterPushSink * This,
            /* [in] */ INSSBuffer *pDataUnit);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndWriting )( 
            IWMWriterPushSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *Connect )( 
            IWMWriterPushSink * This,
            /* [in] */ LPCWSTR pwszURL,
            /* [in] */ LPCWSTR pwszTemplateURL,
            /* [in] */ BOOL fAutoDestroy);
        
        HRESULT ( STDMETHODCALLTYPE *Disconnect )( 
            IWMWriterPushSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *EndSession )( 
            IWMWriterPushSink * This);
        
        END_INTERFACE
    } IWMWriterPushSinkVtbl;

    interface IWMWriterPushSink
    {
        CONST_VTBL struct IWMWriterPushSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWriterPushSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWriterPushSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWriterPushSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWriterPushSink_OnHeader(This,pHeader)	\
    ( (This)->lpVtbl -> OnHeader(This,pHeader) ) 

#define IWMWriterPushSink_IsRealTime(This,pfRealTime)	\
    ( (This)->lpVtbl -> IsRealTime(This,pfRealTime) ) 

#define IWMWriterPushSink_AllocateDataUnit(This,cbDataUnit,ppDataUnit)	\
    ( (This)->lpVtbl -> AllocateDataUnit(This,cbDataUnit,ppDataUnit) ) 

#define IWMWriterPushSink_OnDataUnit(This,pDataUnit)	\
    ( (This)->lpVtbl -> OnDataUnit(This,pDataUnit) ) 

#define IWMWriterPushSink_OnEndWriting(This)	\
    ( (This)->lpVtbl -> OnEndWriting(This) ) 


#define IWMWriterPushSink_Connect(This,pwszURL,pwszTemplateURL,fAutoDestroy)	\
    ( (This)->lpVtbl -> Connect(This,pwszURL,pwszTemplateURL,fAutoDestroy) ) 

#define IWMWriterPushSink_Disconnect(This)	\
    ( (This)->lpVtbl -> Disconnect(This) ) 

#define IWMWriterPushSink_EndSession(This)	\
    ( (This)->lpVtbl -> EndSession(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWriterPushSink_INTERFACE_DEFINED__ */


#ifndef __IWMDeviceRegistration_INTERFACE_DEFINED__
#define __IWMDeviceRegistration_INTERFACE_DEFINED__

/* interface IWMDeviceRegistration */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDeviceRegistration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6211f03-8d21-4e94-93e6-8510805f2d99")
    IWMDeviceRegistration : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterDevice( 
            /* [in] */ DWORD dwRegisterType,
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DRM_VAL16 SerialNumber,
            /* [out] */ IWMRegisteredDevice **ppDevice) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterDevice( 
            /* [in] */ DWORD dwRegisterType,
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DRM_VAL16 SerialNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRegistrationStats( 
            /* [in] */ DWORD dwRegisterType,
            /* [out] */ DWORD *pcRegisteredDevices) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFirstRegisteredDevice( 
            /* [in] */ DWORD dwRegisterType,
            /* [out] */ IWMRegisteredDevice **ppDevice) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNextRegisteredDevice( 
            /* [out] */ IWMRegisteredDevice **ppDevice) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRegisteredDeviceByID( 
            /* [in] */ DWORD dwRegisterType,
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DRM_VAL16 SerialNumber,
            /* [out] */ IWMRegisteredDevice **ppDevice) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDeviceRegistrationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDeviceRegistration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDeviceRegistration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDeviceRegistration * This);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterDevice )( 
            IWMDeviceRegistration * This,
            /* [in] */ DWORD dwRegisterType,
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DRM_VAL16 SerialNumber,
            /* [out] */ IWMRegisteredDevice **ppDevice);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterDevice )( 
            IWMDeviceRegistration * This,
            /* [in] */ DWORD dwRegisterType,
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DRM_VAL16 SerialNumber);
        
        HRESULT ( STDMETHODCALLTYPE *GetRegistrationStats )( 
            IWMDeviceRegistration * This,
            /* [in] */ DWORD dwRegisterType,
            /* [out] */ DWORD *pcRegisteredDevices);
        
        HRESULT ( STDMETHODCALLTYPE *GetFirstRegisteredDevice )( 
            IWMDeviceRegistration * This,
            /* [in] */ DWORD dwRegisterType,
            /* [out] */ IWMRegisteredDevice **ppDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextRegisteredDevice )( 
            IWMDeviceRegistration * This,
            /* [out] */ IWMRegisteredDevice **ppDevice);
        
        HRESULT ( STDMETHODCALLTYPE *GetRegisteredDeviceByID )( 
            IWMDeviceRegistration * This,
            /* [in] */ DWORD dwRegisterType,
            /* [size_is][in] */ BYTE *pbCertificate,
            /* [in] */ DWORD cbCertificate,
            /* [in] */ DRM_VAL16 SerialNumber,
            /* [out] */ IWMRegisteredDevice **ppDevice);
        
        END_INTERFACE
    } IWMDeviceRegistrationVtbl;

    interface IWMDeviceRegistration
    {
        CONST_VTBL struct IWMDeviceRegistrationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDeviceRegistration_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDeviceRegistration_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDeviceRegistration_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDeviceRegistration_RegisterDevice(This,dwRegisterType,pbCertificate,cbCertificate,SerialNumber,ppDevice)	\
    ( (This)->lpVtbl -> RegisterDevice(This,dwRegisterType,pbCertificate,cbCertificate,SerialNumber,ppDevice) ) 

#define IWMDeviceRegistration_UnregisterDevice(This,dwRegisterType,pbCertificate,cbCertificate,SerialNumber)	\
    ( (This)->lpVtbl -> UnregisterDevice(This,dwRegisterType,pbCertificate,cbCertificate,SerialNumber) ) 

#define IWMDeviceRegistration_GetRegistrationStats(This,dwRegisterType,pcRegisteredDevices)	\
    ( (This)->lpVtbl -> GetRegistrationStats(This,dwRegisterType,pcRegisteredDevices) ) 

#define IWMDeviceRegistration_GetFirstRegisteredDevice(This,dwRegisterType,ppDevice)	\
    ( (This)->lpVtbl -> GetFirstRegisteredDevice(This,dwRegisterType,ppDevice) ) 

#define IWMDeviceRegistration_GetNextRegisteredDevice(This,ppDevice)	\
    ( (This)->lpVtbl -> GetNextRegisteredDevice(This,ppDevice) ) 

#define IWMDeviceRegistration_GetRegisteredDeviceByID(This,dwRegisterType,pbCertificate,cbCertificate,SerialNumber,ppDevice)	\
    ( (This)->lpVtbl -> GetRegisteredDeviceByID(This,dwRegisterType,pbCertificate,cbCertificate,SerialNumber,ppDevice) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDeviceRegistration_INTERFACE_DEFINED__ */


#ifndef __IWMRegisteredDevice_INTERFACE_DEFINED__
#define __IWMRegisteredDevice_INTERFACE_DEFINED__

/* interface IWMRegisteredDevice */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMRegisteredDevice;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a4503bec-5508-4148-97ac-bfa75760a70d")
    IWMRegisteredDevice : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDeviceSerialNumber( 
            /* [out] */ DRM_VAL16 *pSerialNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDeviceCertificate( 
            /* [out] */ INSSBuffer **ppCertificate) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDeviceType( 
            /* [out] */ DWORD *pdwType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributeCount( 
            /* [out] */ DWORD *pcAttributes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributeByIndex( 
            /* [in] */ DWORD dwIndex,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributeByName( 
            /* [in] */ BSTR bstrName,
            /* [out] */ BSTR *pbstrValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAttributeByName( 
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Approve( 
            /* [in] */ BOOL fApprove) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsValid( 
            /* [out] */ BOOL *pfValid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsApproved( 
            /* [out] */ BOOL *pfApproved) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsWmdrmCompliant( 
            /* [out] */ BOOL *pfCompliant) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsOpened( 
            /* [out] */ BOOL *pfOpened) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Open( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMRegisteredDeviceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMRegisteredDevice * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMRegisteredDevice * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMRegisteredDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceSerialNumber )( 
            IWMRegisteredDevice * This,
            /* [out] */ DRM_VAL16 *pSerialNumber);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceCertificate )( 
            IWMRegisteredDevice * This,
            /* [out] */ INSSBuffer **ppCertificate);
        
        HRESULT ( STDMETHODCALLTYPE *GetDeviceType )( 
            IWMRegisteredDevice * This,
            /* [out] */ DWORD *pdwType);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeCount )( 
            IWMRegisteredDevice * This,
            /* [out] */ DWORD *pcAttributes);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByIndex )( 
            IWMRegisteredDevice * This,
            /* [in] */ DWORD dwIndex,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeByName )( 
            IWMRegisteredDevice * This,
            /* [in] */ BSTR bstrName,
            /* [out] */ BSTR *pbstrValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributeByName )( 
            IWMRegisteredDevice * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrValue);
        
        HRESULT ( STDMETHODCALLTYPE *Approve )( 
            IWMRegisteredDevice * This,
            /* [in] */ BOOL fApprove);
        
        HRESULT ( STDMETHODCALLTYPE *IsValid )( 
            IWMRegisteredDevice * This,
            /* [out] */ BOOL *pfValid);
        
        HRESULT ( STDMETHODCALLTYPE *IsApproved )( 
            IWMRegisteredDevice * This,
            /* [out] */ BOOL *pfApproved);
        
        HRESULT ( STDMETHODCALLTYPE *IsWmdrmCompliant )( 
            IWMRegisteredDevice * This,
            /* [out] */ BOOL *pfCompliant);
        
        HRESULT ( STDMETHODCALLTYPE *IsOpened )( 
            IWMRegisteredDevice * This,
            /* [out] */ BOOL *pfOpened);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            IWMRegisteredDevice * This);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMRegisteredDevice * This);
        
        END_INTERFACE
    } IWMRegisteredDeviceVtbl;

    interface IWMRegisteredDevice
    {
        CONST_VTBL struct IWMRegisteredDeviceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMRegisteredDevice_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMRegisteredDevice_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMRegisteredDevice_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMRegisteredDevice_GetDeviceSerialNumber(This,pSerialNumber)	\
    ( (This)->lpVtbl -> GetDeviceSerialNumber(This,pSerialNumber) ) 

#define IWMRegisteredDevice_GetDeviceCertificate(This,ppCertificate)	\
    ( (This)->lpVtbl -> GetDeviceCertificate(This,ppCertificate) ) 

#define IWMRegisteredDevice_GetDeviceType(This,pdwType)	\
    ( (This)->lpVtbl -> GetDeviceType(This,pdwType) ) 

#define IWMRegisteredDevice_GetAttributeCount(This,pcAttributes)	\
    ( (This)->lpVtbl -> GetAttributeCount(This,pcAttributes) ) 

#define IWMRegisteredDevice_GetAttributeByIndex(This,dwIndex,pbstrName,pbstrValue)	\
    ( (This)->lpVtbl -> GetAttributeByIndex(This,dwIndex,pbstrName,pbstrValue) ) 

#define IWMRegisteredDevice_GetAttributeByName(This,bstrName,pbstrValue)	\
    ( (This)->lpVtbl -> GetAttributeByName(This,bstrName,pbstrValue) ) 

#define IWMRegisteredDevice_SetAttributeByName(This,bstrName,bstrValue)	\
    ( (This)->lpVtbl -> SetAttributeByName(This,bstrName,bstrValue) ) 

#define IWMRegisteredDevice_Approve(This,fApprove)	\
    ( (This)->lpVtbl -> Approve(This,fApprove) ) 

#define IWMRegisteredDevice_IsValid(This,pfValid)	\
    ( (This)->lpVtbl -> IsValid(This,pfValid) ) 

#define IWMRegisteredDevice_IsApproved(This,pfApproved)	\
    ( (This)->lpVtbl -> IsApproved(This,pfApproved) ) 

#define IWMRegisteredDevice_IsWmdrmCompliant(This,pfCompliant)	\
    ( (This)->lpVtbl -> IsWmdrmCompliant(This,pfCompliant) ) 

#define IWMRegisteredDevice_IsOpened(This,pfOpened)	\
    ( (This)->lpVtbl -> IsOpened(This,pfOpened) ) 

#define IWMRegisteredDevice_Open(This)	\
    ( (This)->lpVtbl -> Open(This) ) 

#define IWMRegisteredDevice_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMRegisteredDevice_INTERFACE_DEFINED__ */


#ifndef __IWMProximityDetection_INTERFACE_DEFINED__
#define __IWMProximityDetection_INTERFACE_DEFINED__

/* interface IWMProximityDetection */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMProximityDetection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6A9FD8EE-B651-4bf0-B849-7D4ECE79A2B1")
    IWMProximityDetection : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StartDetection( 
            /* [size_is][in] */ BYTE *pbRegistrationMsg,
            /* [in] */ DWORD cbRegistrationMsg,
            /* [size_is][in] */ BYTE *pbLocalAddress,
            /* [in] */ DWORD cbLocalAddress,
            /* [in] */ DWORD dwExtraPortsAllowed,
            /* [out] */ INSSBuffer **ppRegistrationResponseMsg,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMProximityDetectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMProximityDetection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMProximityDetection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMProximityDetection * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartDetection )( 
            IWMProximityDetection * This,
            /* [size_is][in] */ BYTE *pbRegistrationMsg,
            /* [in] */ DWORD cbRegistrationMsg,
            /* [size_is][in] */ BYTE *pbLocalAddress,
            /* [in] */ DWORD cbLocalAddress,
            /* [in] */ DWORD dwExtraPortsAllowed,
            /* [out] */ INSSBuffer **ppRegistrationResponseMsg,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext);
        
        END_INTERFACE
    } IWMProximityDetectionVtbl;

    interface IWMProximityDetection
    {
        CONST_VTBL struct IWMProximityDetectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMProximityDetection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMProximityDetection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMProximityDetection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMProximityDetection_StartDetection(This,pbRegistrationMsg,cbRegistrationMsg,pbLocalAddress,cbLocalAddress,dwExtraPortsAllowed,ppRegistrationResponseMsg,pCallback,pvContext)	\
    ( (This)->lpVtbl -> StartDetection(This,pbRegistrationMsg,cbRegistrationMsg,pbLocalAddress,cbLocalAddress,dwExtraPortsAllowed,ppRegistrationResponseMsg,pCallback,pvContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMProximityDetection_INTERFACE_DEFINED__ */


#ifndef __IWMDRMMessageParser_INTERFACE_DEFINED__
#define __IWMDRMMessageParser_INTERFACE_DEFINED__

/* interface IWMDRMMessageParser */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMMessageParser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A73A0072-25A0-4c99-B4A5-EDE8101A6C39")
    IWMDRMMessageParser : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ParseRegistrationReqMsg( 
            /* [size_is][in] */ BYTE *pbRegistrationReqMsg,
            /* [in] */ DWORD cbRegistrationReqMsg,
            /* [out] */ INSSBuffer **ppDeviceCert,
            /* [out] */ DRM_VAL16 *pDeviceSerialNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParseLicenseRequestMsg( 
            /* [size_is][in] */ BYTE *pbLicenseRequestMsg,
            /* [in] */ DWORD cbLicenseRequestMsg,
            /* [out] */ INSSBuffer **ppDeviceCert,
            /* [out] */ DRM_VAL16 *pDeviceSerialNumber,
            /* [out] */ BSTR *pbstrAction) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMMessageParserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMMessageParser * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMMessageParser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMMessageParser * This);
        
        HRESULT ( STDMETHODCALLTYPE *ParseRegistrationReqMsg )( 
            IWMDRMMessageParser * This,
            /* [size_is][in] */ BYTE *pbRegistrationReqMsg,
            /* [in] */ DWORD cbRegistrationReqMsg,
            /* [out] */ INSSBuffer **ppDeviceCert,
            /* [out] */ DRM_VAL16 *pDeviceSerialNumber);
        
        HRESULT ( STDMETHODCALLTYPE *ParseLicenseRequestMsg )( 
            IWMDRMMessageParser * This,
            /* [size_is][in] */ BYTE *pbLicenseRequestMsg,
            /* [in] */ DWORD cbLicenseRequestMsg,
            /* [out] */ INSSBuffer **ppDeviceCert,
            /* [out] */ DRM_VAL16 *pDeviceSerialNumber,
            /* [out] */ BSTR *pbstrAction);
        
        END_INTERFACE
    } IWMDRMMessageParserVtbl;

    interface IWMDRMMessageParser
    {
        CONST_VTBL struct IWMDRMMessageParserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMMessageParser_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMMessageParser_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMMessageParser_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMMessageParser_ParseRegistrationReqMsg(This,pbRegistrationReqMsg,cbRegistrationReqMsg,ppDeviceCert,pDeviceSerialNumber)	\
    ( (This)->lpVtbl -> ParseRegistrationReqMsg(This,pbRegistrationReqMsg,cbRegistrationReqMsg,ppDeviceCert,pDeviceSerialNumber) ) 

#define IWMDRMMessageParser_ParseLicenseRequestMsg(This,pbLicenseRequestMsg,cbLicenseRequestMsg,ppDeviceCert,pDeviceSerialNumber,pbstrAction)	\
    ( (This)->lpVtbl -> ParseLicenseRequestMsg(This,pbLicenseRequestMsg,cbLicenseRequestMsg,ppDeviceCert,pDeviceSerialNumber,pbstrAction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMMessageParser_INTERFACE_DEFINED__ */


#ifndef __IWMDRMTranscryptor_INTERFACE_DEFINED__
#define __IWMDRMTranscryptor_INTERFACE_DEFINED__

/* interface IWMDRMTranscryptor */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMTranscryptor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("69059850-6E6F-4bb2-806F-71863DDFC471")
    IWMDRMTranscryptor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ BSTR bstrFileName,
            /* [size_is][in] */ BYTE *pbLicenseRequestMsg,
            /* [in] */ DWORD cbLicenseRequestMsg,
            /* [out] */ INSSBuffer **ppLicenseResponseMsg,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Seek( 
            /* [in] */ QWORD hnsTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD *pcbData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMTranscryptorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMTranscryptor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMTranscryptor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMTranscryptor * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IWMDRMTranscryptor * This,
            /* [in] */ BSTR bstrFileName,
            /* [size_is][in] */ BYTE *pbLicenseRequestMsg,
            /* [in] */ DWORD cbLicenseRequestMsg,
            /* [out] */ INSSBuffer **ppLicenseResponseMsg,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *Seek )( 
            IWMDRMTranscryptor * This,
            /* [in] */ QWORD hnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            IWMDRMTranscryptor * This,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD *pcbData);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMDRMTranscryptor * This);
        
        END_INTERFACE
    } IWMDRMTranscryptorVtbl;

    interface IWMDRMTranscryptor
    {
        CONST_VTBL struct IWMDRMTranscryptorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMTranscryptor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMTranscryptor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMTranscryptor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMTranscryptor_Initialize(This,bstrFileName,pbLicenseRequestMsg,cbLicenseRequestMsg,ppLicenseResponseMsg,pCallback,pvContext)	\
    ( (This)->lpVtbl -> Initialize(This,bstrFileName,pbLicenseRequestMsg,cbLicenseRequestMsg,ppLicenseResponseMsg,pCallback,pvContext) ) 

#define IWMDRMTranscryptor_Seek(This,hnsTime)	\
    ( (This)->lpVtbl -> Seek(This,hnsTime) ) 

#define IWMDRMTranscryptor_Read(This,pbData,pcbData)	\
    ( (This)->lpVtbl -> Read(This,pbData,pcbData) ) 

#define IWMDRMTranscryptor_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMTranscryptor_INTERFACE_DEFINED__ */


#ifndef __IWMDRMTranscryptor2_INTERFACE_DEFINED__
#define __IWMDRMTranscryptor2_INTERFACE_DEFINED__

/* interface IWMDRMTranscryptor2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMTranscryptor2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e0da439f-d331-496a-bece-18e5bac5dd23")
    IWMDRMTranscryptor2 : public IWMDRMTranscryptor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SeekEx( 
            /* [in] */ QWORD cnsStartTime,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float flRate,
            /* [in] */ BOOL fIncludeFileHeader) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ZeroAdjustTimestamps( 
            /* [in] */ BOOL fEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSeekStartTime( 
            /* [out] */ QWORD *pcnsTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDuration( 
            /* [out] */ QWORD *pcnsDuration) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMTranscryptor2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMTranscryptor2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMTranscryptor2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMTranscryptor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IWMDRMTranscryptor2 * This,
            /* [in] */ BSTR bstrFileName,
            /* [size_is][in] */ BYTE *pbLicenseRequestMsg,
            /* [in] */ DWORD cbLicenseRequestMsg,
            /* [out] */ INSSBuffer **ppLicenseResponseMsg,
            /* [in] */ IWMStatusCallback *pCallback,
            /* [in] */ void *pvContext);
        
        HRESULT ( STDMETHODCALLTYPE *Seek )( 
            IWMDRMTranscryptor2 * This,
            /* [in] */ QWORD hnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            IWMDRMTranscryptor2 * This,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD *pcbData);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IWMDRMTranscryptor2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SeekEx )( 
            IWMDRMTranscryptor2 * This,
            /* [in] */ QWORD cnsStartTime,
            /* [in] */ QWORD cnsDuration,
            /* [in] */ float flRate,
            /* [in] */ BOOL fIncludeFileHeader);
        
        HRESULT ( STDMETHODCALLTYPE *ZeroAdjustTimestamps )( 
            IWMDRMTranscryptor2 * This,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *GetSeekStartTime )( 
            IWMDRMTranscryptor2 * This,
            /* [out] */ QWORD *pcnsTime);
        
        HRESULT ( STDMETHODCALLTYPE *GetDuration )( 
            IWMDRMTranscryptor2 * This,
            /* [out] */ QWORD *pcnsDuration);
        
        END_INTERFACE
    } IWMDRMTranscryptor2Vtbl;

    interface IWMDRMTranscryptor2
    {
        CONST_VTBL struct IWMDRMTranscryptor2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMTranscryptor2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMTranscryptor2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMTranscryptor2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMTranscryptor2_Initialize(This,bstrFileName,pbLicenseRequestMsg,cbLicenseRequestMsg,ppLicenseResponseMsg,pCallback,pvContext)	\
    ( (This)->lpVtbl -> Initialize(This,bstrFileName,pbLicenseRequestMsg,cbLicenseRequestMsg,ppLicenseResponseMsg,pCallback,pvContext) ) 

#define IWMDRMTranscryptor2_Seek(This,hnsTime)	\
    ( (This)->lpVtbl -> Seek(This,hnsTime) ) 

#define IWMDRMTranscryptor2_Read(This,pbData,pcbData)	\
    ( (This)->lpVtbl -> Read(This,pbData,pcbData) ) 

#define IWMDRMTranscryptor2_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 


#define IWMDRMTranscryptor2_SeekEx(This,cnsStartTime,cnsDuration,flRate,fIncludeFileHeader)	\
    ( (This)->lpVtbl -> SeekEx(This,cnsStartTime,cnsDuration,flRate,fIncludeFileHeader) ) 

#define IWMDRMTranscryptor2_ZeroAdjustTimestamps(This,fEnable)	\
    ( (This)->lpVtbl -> ZeroAdjustTimestamps(This,fEnable) ) 

#define IWMDRMTranscryptor2_GetSeekStartTime(This,pcnsTime)	\
    ( (This)->lpVtbl -> GetSeekStartTime(This,pcnsTime) ) 

#define IWMDRMTranscryptor2_GetDuration(This,pcnsDuration)	\
    ( (This)->lpVtbl -> GetDuration(This,pcnsDuration) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMTranscryptor2_INTERFACE_DEFINED__ */


#ifndef __IWMDRMTranscryptionManager_INTERFACE_DEFINED__
#define __IWMDRMTranscryptionManager_INTERFACE_DEFINED__

/* interface IWMDRMTranscryptionManager */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMDRMTranscryptionManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b1a887b2-a4f0-407a-b02e-efbd23bbecdf")
    IWMDRMTranscryptionManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateTranscryptor( 
            /* [out] */ IWMDRMTranscryptor **ppTranscryptor) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMDRMTranscryptionManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMDRMTranscryptionManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMDRMTranscryptionManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMDRMTranscryptionManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateTranscryptor )( 
            IWMDRMTranscryptionManager * This,
            /* [out] */ IWMDRMTranscryptor **ppTranscryptor);
        
        END_INTERFACE
    } IWMDRMTranscryptionManagerVtbl;

    interface IWMDRMTranscryptionManager
    {
        CONST_VTBL struct IWMDRMTranscryptionManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMDRMTranscryptionManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMDRMTranscryptionManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMDRMTranscryptionManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMDRMTranscryptionManager_CreateTranscryptor(This,ppTranscryptor)	\
    ( (This)->lpVtbl -> CreateTranscryptor(This,ppTranscryptor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMDRMTranscryptionManager_INTERFACE_DEFINED__ */


#ifndef __IWMWatermarkInfo_INTERFACE_DEFINED__
#define __IWMWatermarkInfo_INTERFACE_DEFINED__

/* interface IWMWatermarkInfo */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMWatermarkInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6f497062-f2e2-4624-8ea7-9dd40d81fc8d")
    IWMWatermarkInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetWatermarkEntryCount( 
            /* [in] */ WMT_WATERMARK_ENTRY_TYPE wmetType,
            /* [out] */ DWORD *pdwCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWatermarkEntry( 
            /* [in] */ WMT_WATERMARK_ENTRY_TYPE wmetType,
            /* [in] */ DWORD dwEntryNum,
            /* [out] */ WMT_WATERMARK_ENTRY *pEntry) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMWatermarkInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMWatermarkInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMWatermarkInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMWatermarkInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetWatermarkEntryCount )( 
            IWMWatermarkInfo * This,
            /* [in] */ WMT_WATERMARK_ENTRY_TYPE wmetType,
            /* [out] */ DWORD *pdwCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetWatermarkEntry )( 
            IWMWatermarkInfo * This,
            /* [in] */ WMT_WATERMARK_ENTRY_TYPE wmetType,
            /* [in] */ DWORD dwEntryNum,
            /* [out] */ WMT_WATERMARK_ENTRY *pEntry);
        
        END_INTERFACE
    } IWMWatermarkInfoVtbl;

    interface IWMWatermarkInfo
    {
        CONST_VTBL struct IWMWatermarkInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMWatermarkInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMWatermarkInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMWatermarkInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMWatermarkInfo_GetWatermarkEntryCount(This,wmetType,pdwCount)	\
    ( (This)->lpVtbl -> GetWatermarkEntryCount(This,wmetType,pdwCount) ) 

#define IWMWatermarkInfo_GetWatermarkEntry(This,wmetType,dwEntryNum,pEntry)	\
    ( (This)->lpVtbl -> GetWatermarkEntry(This,wmetType,dwEntryNum,pEntry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMWatermarkInfo_INTERFACE_DEFINED__ */


#ifndef __IWMReaderAccelerator_INTERFACE_DEFINED__
#define __IWMReaderAccelerator_INTERFACE_DEFINED__

/* interface IWMReaderAccelerator */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderAccelerator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BDDC4D08-944D-4d52-A612-46C3FDA07DD4")
    IWMReaderAccelerator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCodecInterface( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppvCodecInterface) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Notify( 
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ WM_MEDIA_TYPE *pSubtype) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderAcceleratorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderAccelerator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderAccelerator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderAccelerator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecInterface )( 
            IWMReaderAccelerator * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppvCodecInterface);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IWMReaderAccelerator * This,
            /* [in] */ DWORD dwOutputNum,
            /* [in] */ WM_MEDIA_TYPE *pSubtype);
        
        END_INTERFACE
    } IWMReaderAcceleratorVtbl;

    interface IWMReaderAccelerator
    {
        CONST_VTBL struct IWMReaderAcceleratorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderAccelerator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderAccelerator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderAccelerator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderAccelerator_GetCodecInterface(This,dwOutputNum,riid,ppvCodecInterface)	\
    ( (This)->lpVtbl -> GetCodecInterface(This,dwOutputNum,riid,ppvCodecInterface) ) 

#define IWMReaderAccelerator_Notify(This,dwOutputNum,pSubtype)	\
    ( (This)->lpVtbl -> Notify(This,dwOutputNum,pSubtype) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderAccelerator_INTERFACE_DEFINED__ */


#ifndef __IWMReaderTimecode_INTERFACE_DEFINED__
#define __IWMReaderTimecode_INTERFACE_DEFINED__

/* interface IWMReaderTimecode */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMReaderTimecode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f369e2f0-e081-4fe6-8450-b810b2f410d1")
    IWMReaderTimecode : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetTimecodeRangeCount( 
            /* [in] */ WORD wStreamNum,
            /* [out] */ WORD *pwRangeCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTimecodeRangeBounds( 
            /* [in] */ WORD wStreamNum,
            /* [in] */ WORD wRangeNum,
            /* [out] */ DWORD *pStartTimecode,
            /* [out] */ DWORD *pEndTimecode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMReaderTimecodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMReaderTimecode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMReaderTimecode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMReaderTimecode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTimecodeRangeCount )( 
            IWMReaderTimecode * This,
            /* [in] */ WORD wStreamNum,
            /* [out] */ WORD *pwRangeCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetTimecodeRangeBounds )( 
            IWMReaderTimecode * This,
            /* [in] */ WORD wStreamNum,
            /* [in] */ WORD wRangeNum,
            /* [out] */ DWORD *pStartTimecode,
            /* [out] */ DWORD *pEndTimecode);
        
        END_INTERFACE
    } IWMReaderTimecodeVtbl;

    interface IWMReaderTimecode
    {
        CONST_VTBL struct IWMReaderTimecodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMReaderTimecode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMReaderTimecode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMReaderTimecode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMReaderTimecode_GetTimecodeRangeCount(This,wStreamNum,pwRangeCount)	\
    ( (This)->lpVtbl -> GetTimecodeRangeCount(This,wStreamNum,pwRangeCount) ) 

#define IWMReaderTimecode_GetTimecodeRangeBounds(This,wStreamNum,wRangeNum,pStartTimecode,pEndTimecode)	\
    ( (This)->lpVtbl -> GetTimecodeRangeBounds(This,wStreamNum,wRangeNum,pStartTimecode,pEndTimecode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMReaderTimecode_INTERFACE_DEFINED__ */


#ifndef __IWMAddressAccess_INTERFACE_DEFINED__
#define __IWMAddressAccess_INTERFACE_DEFINED__

/* interface IWMAddressAccess */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMAddressAccess;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BB3C6389-1633-4e92-AF14-9F3173BA39D0")
    IWMAddressAccess : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAccessEntryCount( 
            /* [in] */ WM_AETYPE aeType,
            /* [out] */ DWORD *pcEntries) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAccessEntry( 
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ DWORD dwEntryNum,
            /* [out] */ WM_ADDRESS_ACCESSENTRY *pAddrAccessEntry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddAccessEntry( 
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ WM_ADDRESS_ACCESSENTRY *pAddrAccessEntry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveAccessEntry( 
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ DWORD dwEntryNum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMAddressAccessVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMAddressAccess * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMAddressAccess * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMAddressAccess * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAccessEntryCount )( 
            IWMAddressAccess * This,
            /* [in] */ WM_AETYPE aeType,
            /* [out] */ DWORD *pcEntries);
        
        HRESULT ( STDMETHODCALLTYPE *GetAccessEntry )( 
            IWMAddressAccess * This,
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ DWORD dwEntryNum,
            /* [out] */ WM_ADDRESS_ACCESSENTRY *pAddrAccessEntry);
        
        HRESULT ( STDMETHODCALLTYPE *AddAccessEntry )( 
            IWMAddressAccess * This,
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ WM_ADDRESS_ACCESSENTRY *pAddrAccessEntry);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAccessEntry )( 
            IWMAddressAccess * This,
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ DWORD dwEntryNum);
        
        END_INTERFACE
    } IWMAddressAccessVtbl;

    interface IWMAddressAccess
    {
        CONST_VTBL struct IWMAddressAccessVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMAddressAccess_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMAddressAccess_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMAddressAccess_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMAddressAccess_GetAccessEntryCount(This,aeType,pcEntries)	\
    ( (This)->lpVtbl -> GetAccessEntryCount(This,aeType,pcEntries) ) 

#define IWMAddressAccess_GetAccessEntry(This,aeType,dwEntryNum,pAddrAccessEntry)	\
    ( (This)->lpVtbl -> GetAccessEntry(This,aeType,dwEntryNum,pAddrAccessEntry) ) 

#define IWMAddressAccess_AddAccessEntry(This,aeType,pAddrAccessEntry)	\
    ( (This)->lpVtbl -> AddAccessEntry(This,aeType,pAddrAccessEntry) ) 

#define IWMAddressAccess_RemoveAccessEntry(This,aeType,dwEntryNum)	\
    ( (This)->lpVtbl -> RemoveAccessEntry(This,aeType,dwEntryNum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMAddressAccess_INTERFACE_DEFINED__ */


#ifndef __IWMAddressAccess2_INTERFACE_DEFINED__
#define __IWMAddressAccess2_INTERFACE_DEFINED__

/* interface IWMAddressAccess2 */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMAddressAccess2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("65a83fc2-3e98-4d4d-81b5-2a742886b33d")
    IWMAddressAccess2 : public IWMAddressAccess
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAccessEntryEx( 
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ DWORD dwEntryNum,
            /* [out] */ BSTR *pbstrAddress,
            /* [out] */ BSTR *pbstrMask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddAccessEntryEx( 
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ BSTR bstrAddress,
            /* [in] */ BSTR bstrMask) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMAddressAccess2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMAddressAccess2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMAddressAccess2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMAddressAccess2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAccessEntryCount )( 
            IWMAddressAccess2 * This,
            /* [in] */ WM_AETYPE aeType,
            /* [out] */ DWORD *pcEntries);
        
        HRESULT ( STDMETHODCALLTYPE *GetAccessEntry )( 
            IWMAddressAccess2 * This,
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ DWORD dwEntryNum,
            /* [out] */ WM_ADDRESS_ACCESSENTRY *pAddrAccessEntry);
        
        HRESULT ( STDMETHODCALLTYPE *AddAccessEntry )( 
            IWMAddressAccess2 * This,
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ WM_ADDRESS_ACCESSENTRY *pAddrAccessEntry);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveAccessEntry )( 
            IWMAddressAccess2 * This,
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ DWORD dwEntryNum);
        
        HRESULT ( STDMETHODCALLTYPE *GetAccessEntryEx )( 
            IWMAddressAccess2 * This,
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ DWORD dwEntryNum,
            /* [out] */ BSTR *pbstrAddress,
            /* [out] */ BSTR *pbstrMask);
        
        HRESULT ( STDMETHODCALLTYPE *AddAccessEntryEx )( 
            IWMAddressAccess2 * This,
            /* [in] */ WM_AETYPE aeType,
            /* [in] */ BSTR bstrAddress,
            /* [in] */ BSTR bstrMask);
        
        END_INTERFACE
    } IWMAddressAccess2Vtbl;

    interface IWMAddressAccess2
    {
        CONST_VTBL struct IWMAddressAccess2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMAddressAccess2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMAddressAccess2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMAddressAccess2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMAddressAccess2_GetAccessEntryCount(This,aeType,pcEntries)	\
    ( (This)->lpVtbl -> GetAccessEntryCount(This,aeType,pcEntries) ) 

#define IWMAddressAccess2_GetAccessEntry(This,aeType,dwEntryNum,pAddrAccessEntry)	\
    ( (This)->lpVtbl -> GetAccessEntry(This,aeType,dwEntryNum,pAddrAccessEntry) ) 

#define IWMAddressAccess2_AddAccessEntry(This,aeType,pAddrAccessEntry)	\
    ( (This)->lpVtbl -> AddAccessEntry(This,aeType,pAddrAccessEntry) ) 

#define IWMAddressAccess2_RemoveAccessEntry(This,aeType,dwEntryNum)	\
    ( (This)->lpVtbl -> RemoveAccessEntry(This,aeType,dwEntryNum) ) 


#define IWMAddressAccess2_GetAccessEntryEx(This,aeType,dwEntryNum,pbstrAddress,pbstrMask)	\
    ( (This)->lpVtbl -> GetAccessEntryEx(This,aeType,dwEntryNum,pbstrAddress,pbstrMask) ) 

#define IWMAddressAccess2_AddAccessEntryEx(This,aeType,bstrAddress,bstrMask)	\
    ( (This)->lpVtbl -> AddAccessEntryEx(This,aeType,bstrAddress,bstrMask) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMAddressAccess2_INTERFACE_DEFINED__ */


#ifndef __IWMImageInfo_INTERFACE_DEFINED__
#define __IWMImageInfo_INTERFACE_DEFINED__

/* interface IWMImageInfo */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMImageInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9F0AA3B6-7267-4d89-88F2-BA915AA5C4C6")
    IWMImageInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetImageCount( 
            /* [out] */ DWORD *pcImages) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetImage( 
            /* [in] */ DWORD wIndex,
            /* [out][in] */ WORD *pcchMIMEType,
            /* [size_is][out] */ WCHAR *pwszMIMEType,
            /* [out][in] */ WORD *pcchDescription,
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out] */ WORD *pImageType,
            /* [out][in] */ DWORD *pcbImageData,
            /* [size_is][out] */ BYTE *pbImageData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMImageInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMImageInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMImageInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMImageInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetImageCount )( 
            IWMImageInfo * This,
            /* [out] */ DWORD *pcImages);
        
        HRESULT ( STDMETHODCALLTYPE *GetImage )( 
            IWMImageInfo * This,
            /* [in] */ DWORD wIndex,
            /* [out][in] */ WORD *pcchMIMEType,
            /* [size_is][out] */ WCHAR *pwszMIMEType,
            /* [out][in] */ WORD *pcchDescription,
            /* [size_is][out] */ WCHAR *pwszDescription,
            /* [out] */ WORD *pImageType,
            /* [out][in] */ DWORD *pcbImageData,
            /* [size_is][out] */ BYTE *pbImageData);
        
        END_INTERFACE
    } IWMImageInfoVtbl;

    interface IWMImageInfo
    {
        CONST_VTBL struct IWMImageInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMImageInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMImageInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMImageInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMImageInfo_GetImageCount(This,pcImages)	\
    ( (This)->lpVtbl -> GetImageCount(This,pcImages) ) 

#define IWMImageInfo_GetImage(This,wIndex,pcchMIMEType,pwszMIMEType,pcchDescription,pwszDescription,pImageType,pcbImageData,pbImageData)	\
    ( (This)->lpVtbl -> GetImage(This,wIndex,pcchMIMEType,pwszMIMEType,pcchDescription,pwszDescription,pImageType,pcbImageData,pbImageData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMImageInfo_INTERFACE_DEFINED__ */


#ifndef __IWMLicenseRevocationAgent_INTERFACE_DEFINED__
#define __IWMLicenseRevocationAgent_INTERFACE_DEFINED__

/* interface IWMLicenseRevocationAgent */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMLicenseRevocationAgent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6967F2C9-4E26-4b57-8894-799880F7AC7B")
    IWMLicenseRevocationAgent : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLRBChallenge( 
            /* [in] */ BYTE *pMachineID,
            /* [in] */ DWORD dwMachineIDLength,
            /* [in] */ BYTE *pChallenge,
            /* [in] */ DWORD dwChallengeLength,
            /* [out] */ BYTE *pChallengeOutput,
            /* [out] */ DWORD *pdwChallengeOutputLength) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProcessLRB( 
            /* [in] */ BYTE *pSignedLRB,
            /* [in] */ DWORD dwSignedLRBLength,
            /* [out] */ BYTE *pSignedACK,
            /* [out] */ DWORD *pdwSignedACKLength) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMLicenseRevocationAgentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMLicenseRevocationAgent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMLicenseRevocationAgent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMLicenseRevocationAgent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLRBChallenge )( 
            IWMLicenseRevocationAgent * This,
            /* [in] */ BYTE *pMachineID,
            /* [in] */ DWORD dwMachineIDLength,
            /* [in] */ BYTE *pChallenge,
            /* [in] */ DWORD dwChallengeLength,
            /* [out] */ BYTE *pChallengeOutput,
            /* [out] */ DWORD *pdwChallengeOutputLength);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessLRB )( 
            IWMLicenseRevocationAgent * This,
            /* [in] */ BYTE *pSignedLRB,
            /* [in] */ DWORD dwSignedLRBLength,
            /* [out] */ BYTE *pSignedACK,
            /* [out] */ DWORD *pdwSignedACKLength);
        
        END_INTERFACE
    } IWMLicenseRevocationAgentVtbl;

    interface IWMLicenseRevocationAgent
    {
        CONST_VTBL struct IWMLicenseRevocationAgentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMLicenseRevocationAgent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMLicenseRevocationAgent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMLicenseRevocationAgent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMLicenseRevocationAgent_GetLRBChallenge(This,pMachineID,dwMachineIDLength,pChallenge,dwChallengeLength,pChallengeOutput,pdwChallengeOutputLength)	\
    ( (This)->lpVtbl -> GetLRBChallenge(This,pMachineID,dwMachineIDLength,pChallenge,dwChallengeLength,pChallengeOutput,pdwChallengeOutputLength) ) 

#define IWMLicenseRevocationAgent_ProcessLRB(This,pSignedLRB,dwSignedLRBLength,pSignedACK,pdwSignedACKLength)	\
    ( (This)->lpVtbl -> ProcessLRB(This,pSignedLRB,dwSignedLRBLength,pSignedACK,pdwSignedACKLength) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMLicenseRevocationAgent_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsheaderline.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsheaderline.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsheaderline_h__
#define __wmsheaderline_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSHeaderLine_FWD_DEFINED__
#define __IWMSHeaderLine_FWD_DEFINED__
typedef interface IWMSHeaderLine IWMSHeaderLine;
#endif 	/* __IWMSHeaderLine_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsheaderline_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmsHeaderline.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
EXTERN_GUID( IID_IWMSHeaderLine , 0x093c1b22,0x6bec,0x4fe7,0x9c,0x0e,0x7c,0xbe,0xff,0x1c,0x2b,0x78  );


extern RPC_IF_HANDLE __MIDL_itf_wmsheaderline_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsheaderline_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSHeaderLine_INTERFACE_DEFINED__
#define __IWMSHeaderLine_INTERFACE_DEFINED__

/* interface IWMSHeaderLine */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSHeaderLine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("093c1b22-6bec-4fe7-9c0e-7cbeff1c2b78")
    IWMSHeaderLine : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetValue( 
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSHeaderLineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSHeaderLine * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSHeaderLine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSHeaderLine * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IWMSHeaderLine * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrValue);
        
        END_INTERFACE
    } IWMSHeaderLineVtbl;

    interface IWMSHeaderLine
    {
        CONST_VTBL struct IWMSHeaderLineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSHeaderLine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSHeaderLine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSHeaderLine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSHeaderLine_GetValue(This,pbstrValue)	\
    ( (This)->lpVtbl -> GetValue(This,pbstrValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSHeaderLine_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsincomingcounters.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsincomingcounters.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsincomingcounters_h__
#define __wmsincomingcounters_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSIncomingCounters_FWD_DEFINED__
#define __IWMSIncomingCounters_FWD_DEFINED__
typedef interface IWMSIncomingCounters IWMSIncomingCounters;
#endif 	/* __IWMSIncomingCounters_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsincomingcounters_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmsincoming.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
#ifndef _IWMSIncomingCounters
#define _IWMSIncomingCounters
typedef unsigned __int64 QWORD;

EXTERN_GUID( IID_IWMSIncomingCounters , 0xeded53ed,0x43b7,0x45ce,0x9c,0xbb,0xa8,0x72,0x92,0x3f,0x6a,0xae );


extern RPC_IF_HANDLE __MIDL_itf_wmsincomingcounters_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsincomingcounters_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSIncomingCounters_INTERFACE_DEFINED__
#define __IWMSIncomingCounters_INTERFACE_DEFINED__

/* interface IWMSIncomingCounters */
/* [unique][version][helpstring][uuid][object][local] */ 


EXTERN_C const IID IID_IWMSIncomingCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EDED53ED-43B7-45ce-9CBB-A872923F6AAE")
    IWMSIncomingCounters : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AllocateRequestedBandwidth( 
            /* [in] */ DWORD dwAllocatedBandwidth) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AddIncomingData( 
            /* [in] */ DWORD dwDataLen) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ClearIncomingStats( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSIncomingCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSIncomingCounters * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSIncomingCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSIncomingCounters * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AllocateRequestedBandwidth )( 
            IWMSIncomingCounters * This,
            /* [in] */ DWORD dwAllocatedBandwidth);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddIncomingData )( 
            IWMSIncomingCounters * This,
            /* [in] */ DWORD dwDataLen);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ClearIncomingStats )( 
            IWMSIncomingCounters * This);
        
        END_INTERFACE
    } IWMSIncomingCountersVtbl;

    interface IWMSIncomingCounters
    {
        CONST_VTBL struct IWMSIncomingCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSIncomingCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSIncomingCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSIncomingCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSIncomingCounters_AllocateRequestedBandwidth(This,dwAllocatedBandwidth)	\
    ( (This)->lpVtbl -> AllocateRequestedBandwidth(This,dwAllocatedBandwidth) ) 

#define IWMSIncomingCounters_AddIncomingData(This,dwDataLen)	\
    ( (This)->lpVtbl -> AddIncomingData(This,dwDataLen) ) 

#define IWMSIncomingCounters_ClearIncomingStats(This)	\
    ( (This)->lpVtbl -> ClearIncomingStats(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSIncomingCounters_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmsincomingcounters_0000_0001 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_wmsincomingcounters_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsincomingcounters_0000_0001_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsevent.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsevent.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __wmsevent_h__
#define __wmsevent_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsevent_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmsevent.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
#define WMS_EVENT_VERSION 1
typedef /* [public] */ 
enum WMS_EVENT_TYPE
    {	WMS_EVENT_UNKNOWN_EVENT	= 0,
	WMS_EVENT_CONNECT	= 1,
	WMS_EVENT_DISCONNECT	= 2,
	WMS_EVENT_BEGIN_USER_SESSION	= 3,
	WMS_EVENT_END_USER_SESSION	= 4,
	WMS_EVENT_LOGICAL_URL_TRANSFORM	= 5,
	WMS_EVENT_PHYSICAL_URL_TRANSFORM	= 6,
	WMS_EVENT_DESCRIBE	= 7,
	WMS_EVENT_OPEN	= 8,
	WMS_EVENT_SELECT_STREAMS	= 9,
	WMS_EVENT_INITIALIZE_PLAYLIST	= 10,
	WMS_EVENT_PLAY	= 11,
	WMS_EVENT_PAUSE	= 12,
	WMS_EVENT_STOP	= 13,
	WMS_EVENT_CLOSE	= 14,
	WMS_EVENT_SET_PARAMETER	= 15,
	WMS_EVENT_GET_PARAMETER	= 16,
	WMS_EVENT_VALIDATE_PUSH_DISTRIBUTION	= 17,
	WMS_EVENT_CREATE_DISTRIBUTION_DATA_PATH	= 18,
	WMS_EVENT_DESTROY_DISTRIBUTION_DATA_PATH	= 19,
	WMS_EVENT_LOG	= 20,
	WMS_EVENT_SERVER	= 21,
	WMS_EVENT_PUBLISHING_POINT	= 22,
	WMS_EVENT_LIMIT_CHANGE	= 23,
	WMS_EVENT_LIMIT_HIT	= 24,
	WMS_EVENT_PLUGIN	= 25,
	WMS_EVENT_PLAYLIST	= 26,
	WMS_EVENT_CACHE	= 27,
	WMS_EVENT_REMOTE_CACHE_OPEN	= 28,
	WMS_EVENT_REMOTE_CACHE_CLOSE	= 29,
	WMS_EVENT_REMOTE_CACHE_LOG	= 30,
	WMS_NUM_EVENTS	= 31
    } 	WMS_EVENT_TYPE;

typedef struct WMS_EVENT
    {
    long Version;
    WMS_EVENT_TYPE Type;
    long hr;
    } 	WMS_EVENT;



extern RPC_IF_HANDLE __MIDL_itf_wmsevent_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsevent_0000_0000_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsproxy.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsproxy.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsproxy_h__
#define __wmsproxy_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSProxyContext_FWD_DEFINED__
#define __IWMSProxyContext_FWD_DEFINED__
typedef interface IWMSProxyContext IWMSProxyContext;
#endif 	/* __IWMSProxyContext_FWD_DEFINED__ */


/* header files for imported files */
#include "objidl.h"
#include "wmscontext.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsproxy_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmsproxy.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

EXTERN_GUID( IID_IWMSProxyContext,        0x2E34AB85,0x0D3D,0x11d2,0x9E,0xEE,0x00,0x60,0x97,0xD2,0xD7,0xCF );


extern RPC_IF_HANDLE __MIDL_itf_wmsproxy_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsproxy_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSProxyContext_INTERFACE_DEFINED__
#define __IWMSProxyContext_INTERFACE_DEFINED__

/* interface IWMSProxyContext */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSProxyContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2E34AB85-0D3D-11d2-9EEE-006097D2D7CF")
    IWMSProxyContext : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE FindProxyForURL( 
            /* [in] */ __RPC__in_opt IWMSContext *pUserContext,
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrProxyServer,
            /* [out] */ __RPC__out DWORD *pdwProxyPort) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetCredentials( 
            /* [in] */ __RPC__in_opt IWMSContext *pUserContext,
            /* [in] */ __RPC__in BSTR bstrRealm,
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrName,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrPassword) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSProxyContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSProxyContext * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSProxyContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSProxyContext * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *FindProxyForURL )( 
            IWMSProxyContext * This,
            /* [in] */ __RPC__in_opt IWMSContext *pUserContext,
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrProxyServer,
            /* [out] */ __RPC__out DWORD *pdwProxyPort);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetCredentials )( 
            IWMSProxyContext * This,
            /* [in] */ __RPC__in_opt IWMSContext *pUserContext,
            /* [in] */ __RPC__in BSTR bstrRealm,
            /* [in] */ __RPC__in BSTR bstrUrl,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrName,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrPassword);
        
        END_INTERFACE
    } IWMSProxyContextVtbl;

    interface IWMSProxyContext
    {
        CONST_VTBL struct IWMSProxyContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSProxyContext_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSProxyContext_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSProxyContext_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSProxyContext_FindProxyForURL(This,pUserContext,bstrUrl,pbstrProxyServer,pdwProxyPort)	\
    ( (This)->lpVtbl -> FindProxyForURL(This,pUserContext,bstrUrl,pbstrProxyServer,pdwProxyPort) ) 

#define IWMSProxyContext_GetCredentials(This,pUserContext,bstrRealm,bstrUrl,pbstrName,pbstrPassword)	\
    ( (This)->lpVtbl -> GetCredentials(This,pUserContext,bstrRealm,bstrUrl,pbstrName,pbstrPassword) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSProxyContext_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsecure.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsecure.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsecure_h__
#define __wmsecure_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMAuthorizer_FWD_DEFINED__
#define __IWMAuthorizer_FWD_DEFINED__
typedef interface IWMAuthorizer IWMAuthorizer;
#endif 	/* __IWMAuthorizer_FWD_DEFINED__ */


#ifndef __IWMSecureChannel_FWD_DEFINED__
#define __IWMSecureChannel_FWD_DEFINED__
typedef interface IWMSecureChannel IWMSecureChannel;
#endif 	/* __IWMSecureChannel_FWD_DEFINED__ */


#ifndef __IWMGetSecureChannel_FWD_DEFINED__
#define __IWMGetSecureChannel_FWD_DEFINED__
typedef interface IWMGetSecureChannel IWMGetSecureChannel;
#endif 	/* __IWMGetSecureChannel_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsecure_0000_0000 */
/* [local] */ 

//=========================================================================
//
//  THIS SOFTWARE HAS BEEN LICENSED FROM MICROSOFT CORPORATION PURSUANT 
//  TO THE TERMS OF AN END USER LICENSE AGREEMENT ("EULA").  
//  PLEASE REFER TO THE TEXT OF THE EULA TO DETERMINE THE RIGHTS TO USE THE SOFTWARE.  
//
// Copyright (C) Microsoft Corporation, 1999 - 1999  All Rights Reserved.
//
//=========================================================================


extern RPC_IF_HANDLE __MIDL_itf_wmsecure_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsecure_0000_0000_v0_0_s_ifspec;

#ifndef __IWMAuthorizer_INTERFACE_DEFINED__
#define __IWMAuthorizer_INTERFACE_DEFINED__

/* interface IWMAuthorizer */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMAuthorizer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D9B67D36-A9AD-4eb4-BAEF-DB284EF5504C")
    IWMAuthorizer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCertCount( 
            /* [out] */ DWORD *pcCerts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCert( 
            /* [in] */ DWORD dwIndex,
            /* [out] */ BYTE **ppbCertData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSharedData( 
            /* [in] */ DWORD dwCertIndex,
            /* [in] */ const BYTE *pbSharedData,
            /* [in] */ BYTE *pbCert,
            /* [out] */ BYTE **ppbSharedData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMAuthorizerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMAuthorizer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMAuthorizer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMAuthorizer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCertCount )( 
            IWMAuthorizer * This,
            /* [out] */ DWORD *pcCerts);
        
        HRESULT ( STDMETHODCALLTYPE *GetCert )( 
            IWMAuthorizer * This,
            /* [in] */ DWORD dwIndex,
            /* [out] */ BYTE **ppbCertData);
        
        HRESULT ( STDMETHODCALLTYPE *GetSharedData )( 
            IWMAuthorizer * This,
            /* [in] */ DWORD dwCertIndex,
            /* [in] */ const BYTE *pbSharedData,
            /* [in] */ BYTE *pbCert,
            /* [out] */ BYTE **ppbSharedData);
        
        END_INTERFACE
    } IWMAuthorizerVtbl;

    interface IWMAuthorizer
    {
        CONST_VTBL struct IWMAuthorizerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMAuthorizer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMAuthorizer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMAuthorizer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMAuthorizer_GetCertCount(This,pcCerts)	\
    ( (This)->lpVtbl -> GetCertCount(This,pcCerts) ) 

#define IWMAuthorizer_GetCert(This,dwIndex,ppbCertData)	\
    ( (This)->lpVtbl -> GetCert(This,dwIndex,ppbCertData) ) 

#define IWMAuthorizer_GetSharedData(This,dwCertIndex,pbSharedData,pbCert,ppbSharedData)	\
    ( (This)->lpVtbl -> GetSharedData(This,dwCertIndex,pbSharedData,pbCert,ppbSharedData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMAuthorizer_INTERFACE_DEFINED__ */


#ifndef __IWMSecureChannel_INTERFACE_DEFINED__
#define __IWMSecureChannel_INTERFACE_DEFINED__

/* interface IWMSecureChannel */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMSecureChannel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2720598A-D0F2-4189-BD10-91C46EF0936F")
    IWMSecureChannel : public IWMAuthorizer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE WMSC_AddCertificate( 
            /* [in] */ IWMAuthorizer *pCert) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_AddSignature( 
            /* [in] */ BYTE *pbCertSig,
            /* [in] */ DWORD cbCertSig) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_Connect( 
            /* [in] */ IWMSecureChannel *pOtherSide) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_IsConnected( 
            /* [out] */ BOOL *pfIsConnected) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_Disconnect( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_GetValidCertificate( 
            /* [out] */ BYTE **ppbCertificate,
            /* [out] */ DWORD *pdwSignature) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_Encrypt( 
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD cbData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_Decrypt( 
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD cbData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_Lock( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_Unlock( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WMSC_SetSharedData( 
            /* [in] */ DWORD dwCertIndex,
            /* [in] */ const BYTE *pbSharedData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSecureChannelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSecureChannel * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSecureChannel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSecureChannel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCertCount )( 
            IWMSecureChannel * This,
            /* [out] */ DWORD *pcCerts);
        
        HRESULT ( STDMETHODCALLTYPE *GetCert )( 
            IWMSecureChannel * This,
            /* [in] */ DWORD dwIndex,
            /* [out] */ BYTE **ppbCertData);
        
        HRESULT ( STDMETHODCALLTYPE *GetSharedData )( 
            IWMSecureChannel * This,
            /* [in] */ DWORD dwCertIndex,
            /* [in] */ const BYTE *pbSharedData,
            /* [in] */ BYTE *pbCert,
            /* [out] */ BYTE **ppbSharedData);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_AddCertificate )( 
            IWMSecureChannel * This,
            /* [in] */ IWMAuthorizer *pCert);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_AddSignature )( 
            IWMSecureChannel * This,
            /* [in] */ BYTE *pbCertSig,
            /* [in] */ DWORD cbCertSig);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_Connect )( 
            IWMSecureChannel * This,
            /* [in] */ IWMSecureChannel *pOtherSide);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_IsConnected )( 
            IWMSecureChannel * This,
            /* [out] */ BOOL *pfIsConnected);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_Disconnect )( 
            IWMSecureChannel * This);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_GetValidCertificate )( 
            IWMSecureChannel * This,
            /* [out] */ BYTE **ppbCertificate,
            /* [out] */ DWORD *pdwSignature);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_Encrypt )( 
            IWMSecureChannel * This,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD cbData);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_Decrypt )( 
            IWMSecureChannel * This,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD cbData);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_Lock )( 
            IWMSecureChannel * This);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_Unlock )( 
            IWMSecureChannel * This);
        
        HRESULT ( STDMETHODCALLTYPE *WMSC_SetSharedData )( 
            IWMSecureChannel * This,
            /* [in] */ DWORD dwCertIndex,
            /* [in] */ const BYTE *pbSharedData);
        
        END_INTERFACE
    } IWMSecureChannelVtbl;

    interface IWMSecureChannel
    {
        CONST_VTBL struct IWMSecureChannelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSecureChannel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSecureChannel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSecureChannel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSecureChannel_GetCertCount(This,pcCerts)	\
    ( (This)->lpVtbl -> GetCertCount(This,pcCerts) ) 

#define IWMSecureChannel_GetCert(This,dwIndex,ppbCertData)	\
    ( (This)->lpVtbl -> GetCert(This,dwIndex,ppbCertData) ) 

#define IWMSecureChannel_GetSharedData(This,dwCertIndex,pbSharedData,pbCert,ppbSharedData)	\
    ( (This)->lpVtbl -> GetSharedData(This,dwCertIndex,pbSharedData,pbCert,ppbSharedData) ) 


#define IWMSecureChannel_WMSC_AddCertificate(This,pCert)	\
    ( (This)->lpVtbl -> WMSC_AddCertificate(This,pCert) ) 

#define IWMSecureChannel_WMSC_AddSignature(This,pbCertSig,cbCertSig)	\
    ( (This)->lpVtbl -> WMSC_AddSignature(This,pbCertSig,cbCertSig) ) 

#define IWMSecureChannel_WMSC_Connect(This,pOtherSide)	\
    ( (This)->lpVtbl -> WMSC_Connect(This,pOtherSide) ) 

#define IWMSecureChannel_WMSC_IsConnected(This,pfIsConnected)	\
    ( (This)->lpVtbl -> WMSC_IsConnected(This,pfIsConnected) ) 

#define IWMSecureChannel_WMSC_Disconnect(This)	\
    ( (This)->lpVtbl -> WMSC_Disconnect(This) ) 

#define IWMSecureChannel_WMSC_GetValidCertificate(This,ppbCertificate,pdwSignature)	\
    ( (This)->lpVtbl -> WMSC_GetValidCertificate(This,ppbCertificate,pdwSignature) ) 

#define IWMSecureChannel_WMSC_Encrypt(This,pbData,cbData)	\
    ( (This)->lpVtbl -> WMSC_Encrypt(This,pbData,cbData) ) 

#define IWMSecureChannel_WMSC_Decrypt(This,pbData,cbData)	\
    ( (This)->lpVtbl -> WMSC_Decrypt(This,pbData,cbData) ) 

#define IWMSecureChannel_WMSC_Lock(This)	\
    ( (This)->lpVtbl -> WMSC_Lock(This) ) 

#define IWMSecureChannel_WMSC_Unlock(This)	\
    ( (This)->lpVtbl -> WMSC_Unlock(This) ) 

#define IWMSecureChannel_WMSC_SetSharedData(This,dwCertIndex,pbSharedData)	\
    ( (This)->lpVtbl -> WMSC_SetSharedData(This,dwCertIndex,pbSharedData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSecureChannel_INTERFACE_DEFINED__ */


#ifndef __IWMGetSecureChannel_INTERFACE_DEFINED__
#define __IWMGetSecureChannel_INTERFACE_DEFINED__

/* interface IWMGetSecureChannel */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IWMGetSecureChannel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("94bc0598-c3d2-11d3-bedf-00c04f612986")
    IWMGetSecureChannel : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPeerSecureChannelInterface( 
            /* [out] */ IWMSecureChannel **ppPeer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMGetSecureChannelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMGetSecureChannel * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMGetSecureChannel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMGetSecureChannel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetPeerSecureChannelInterface )( 
            IWMGetSecureChannel * This,
            /* [out] */ IWMSecureChannel **ppPeer);
        
        END_INTERFACE
    } IWMGetSecureChannelVtbl;

    interface IWMGetSecureChannel
    {
        CONST_VTBL struct IWMGetSecureChannelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMGetSecureChannel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMGetSecureChannel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMGetSecureChannel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMGetSecureChannel_GetPeerSecureChannelInterface(This,ppPeer)	\
    ( (This)->lpVtbl -> GetPeerSecureChannelInterface(This,ppPeer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMGetSecureChannel_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmsecure_0000_0003 */
/* [local] */ 

HRESULT STDMETHODCALLTYPE WMCreateSecureChannel( IWMSecureChannel** ppChannel );
HRESULT STDMETHODCALLTYPE WMCreateSecureChannel_Certified( IWMSecureChannel** ppChannel ); 
HRESULT STDMETHODCALLTYPE WMCreateSecureChannel_DES( IWMSecureChannel** ppChannel );
HRESULT STDMETHODCALLTYPE WMCreateSecureChannel_Certified_DES( IWMSecureChannel** ppChannel ); 


extern RPC_IF_HANDLE __MIDL_itf_wmsecure_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsecure_0000_0003_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsinternaladminnetsource.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0416 */
/* Compiler settings for wmsinternaladminnetsource.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsinternaladminnetsource_h__
#define __wmsinternaladminnetsource_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSInternalAdminNetSource_FWD_DEFINED__
#define __IWMSInternalAdminNetSource_FWD_DEFINED__
typedef interface IWMSInternalAdminNetSource IWMSInternalAdminNetSource;
#endif 	/* __IWMSInternalAdminNetSource_FWD_DEFINED__ */


#ifndef __IWMSInternalAdminNetSource2_FWD_DEFINED__
#define __IWMSInternalAdminNetSource2_FWD_DEFINED__
typedef interface IWMSInternalAdminNetSource2 IWMSInternalAdminNetSource2;
#endif 	/* __IWMSInternalAdminNetSource2_FWD_DEFINED__ */


#ifndef __IWMSInternalAdminNetSource3_FWD_DEFINED__
#define __IWMSInternalAdminNetSource3_FWD_DEFINED__
typedef interface IWMSInternalAdminNetSource3 IWMSInternalAdminNetSource3;
#endif 	/* __IWMSInternalAdminNetSource3_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "wmnetsourcecreator.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_wmsinternaladminnetsource_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows Media
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
//  Automatically generated by Midl from WMSInternalAdminNetSource.idl 
//
// DO NOT EDIT THIS FILE.
//
//--------------------------------------------------------------------------
EXTERN_GUID( IID_IWMSInternalAdminNetSource, 0x8BB23E5F,0xD127,0x4afb,0x8D,0x02,0xAE,0x5B,0x66,0xD5,0x4C,0x78  );
EXTERN_GUID( IID_IWMSInternalAdminNetSource2, 0xE74D58C3,0xCF77,0x4b51,0xAF,0x17,0x74,0x46,0x87,0xC4,0x3E,0xAE  );
EXTERN_GUID( IID_IWMSInternalAdminNetSource3, 0x6b63d08e,0x4590,0x44af,0x9e,0xb3,0x57,0xff,0x1e,0x73,0xbf,0x80  );
typedef /* [uuid][public] */  DECLSPEC_UUID("068A6457-4099-4c72-9AA9-9105C1C03177") 
enum NETSOURCE_URLCREDPOLICY_SETTINGS
    {	NETSOURCE_URLCREDPOLICY_SETTING_SILENTLOGONOK	= 0,
	NETSOURCE_URLCREDPOLICY_SETTING_MUSTPROMPTUSER	= 1,
	NETSOURCE_URLCREDPOLICY_SETTING_ANONYMOUSONLY	= 2
    } 	NETSOURCE_URLCREDPOLICY_SETTINGS;



extern RPC_IF_HANDLE __MIDL_itf_wmsinternaladminnetsource_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsinternaladminnetsource_0000_v0_0_s_ifspec;

#ifndef __IWMSInternalAdminNetSource_INTERFACE_DEFINED__
#define __IWMSInternalAdminNetSource_INTERFACE_DEFINED__

/* interface IWMSInternalAdminNetSource */
/* [unique][helpstring][uuid][object][local] */ 


EXTERN_C const IID IID_IWMSInternalAdminNetSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8BB23E5F-D127-4afb-8D02-AE5B66D54C78")
    IWMSInternalAdminNetSource : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IUnknown *pSharedNamespace,
            /* [in] */ IUnknown *pNamespaceNode,
            /* [in] */ INSNetSourceCreator *pNetSourceCreator,
            /* [in] */ BOOL fEmbeddedInServer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNetSourceCreator( 
            /* [out] */ INSNetSourceCreator **ppNetSourceCreator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCredentials( 
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BOOL fPersist,
            /* [in] */ BOOL fConfirmedGood) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCredentials( 
            /* [in] */ BSTR bstrRealm,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrPassword,
            /* [out] */ BOOL *pfConfirmedGood) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteCredentials( 
            /* [in] */ BSTR bstrRealm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCredentialFlags( 
            /* [out] */ DWORD *lpdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCredentialFlags( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindProxyForURL( 
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrHost,
            /* [out] */ BOOL *pfProxyEnabled,
            /* [out] */ BSTR *pbstrProxyServer,
            /* [out] */ DWORD *pdwProxyPort,
            /* [out][in] */ DWORD *pdwProxyContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterProxyFailure( 
            /* [in] */ HRESULT hrParam,
            /* [in] */ DWORD dwProxyContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShutdownProxyContext( 
            /* [in] */ DWORD dwProxyContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsUsingIE( 
            /* [in] */ DWORD dwProxyContext,
            /* [out] */ BOOL *pfIsUsingIE) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSInternalAdminNetSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSInternalAdminNetSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSInternalAdminNetSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ IUnknown *pSharedNamespace,
            /* [in] */ IUnknown *pNamespaceNode,
            /* [in] */ INSNetSourceCreator *pNetSourceCreator,
            /* [in] */ BOOL fEmbeddedInServer);
        
        HRESULT ( STDMETHODCALLTYPE *GetNetSourceCreator )( 
            IWMSInternalAdminNetSource * This,
            /* [out] */ INSNetSourceCreator **ppNetSourceCreator);
        
        HRESULT ( STDMETHODCALLTYPE *SetCredentials )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BOOL fPersist,
            /* [in] */ BOOL fConfirmedGood);
        
        HRESULT ( STDMETHODCALLTYPE *GetCredentials )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ BSTR bstrRealm,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrPassword,
            /* [out] */ BOOL *pfConfirmedGood);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteCredentials )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ BSTR bstrRealm);
        
        HRESULT ( STDMETHODCALLTYPE *GetCredentialFlags )( 
            IWMSInternalAdminNetSource * This,
            /* [out] */ DWORD *lpdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetCredentialFlags )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *FindProxyForURL )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrHost,
            /* [out] */ BOOL *pfProxyEnabled,
            /* [out] */ BSTR *pbstrProxyServer,
            /* [out] */ DWORD *pdwProxyPort,
            /* [out][in] */ DWORD *pdwProxyContext);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterProxyFailure )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ HRESULT hrParam,
            /* [in] */ DWORD dwProxyContext);
        
        HRESULT ( STDMETHODCALLTYPE *ShutdownProxyContext )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ DWORD dwProxyContext);
        
        HRESULT ( STDMETHODCALLTYPE *IsUsingIE )( 
            IWMSInternalAdminNetSource * This,
            /* [in] */ DWORD dwProxyContext,
            /* [out] */ BOOL *pfIsUsingIE);
        
        END_INTERFACE
    } IWMSInternalAdminNetSourceVtbl;

    interface IWMSInternalAdminNetSource
    {
        CONST_VTBL struct IWMSInternalAdminNetSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSInternalAdminNetSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSInternalAdminNetSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSInternalAdminNetSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSInternalAdminNetSource_Initialize(This,pSharedNamespace,pNamespaceNode,pNetSourceCreator,fEmbeddedInServer)	\
    ( (This)->lpVtbl -> Initialize(This,pSharedNamespace,pNamespaceNode,pNetSourceCreator,fEmbeddedInServer) ) 

#define IWMSInternalAdminNetSource_GetNetSourceCreator(This,ppNetSourceCreator)	\
    ( (This)->lpVtbl -> GetNetSourceCreator(This,ppNetSourceCreator) ) 

#define IWMSInternalAdminNetSource_SetCredentials(This,bstrRealm,bstrName,bstrPassword,fPersist,fConfirmedGood)	\
    ( (This)->lpVtbl -> SetCredentials(This,bstrRealm,bstrName,bstrPassword,fPersist,fConfirmedGood) ) 

#define IWMSInternalAdminNetSource_GetCredentials(This,bstrRealm,pbstrName,pbstrPassword,pfConfirmedGood)	\
    ( (This)->lpVtbl -> GetCredentials(This,bstrRealm,pbstrName,pbstrPassword,pfConfirmedGood) ) 

#define IWMSInternalAdminNetSource_DeleteCredentials(This,bstrRealm)	\
    ( (This)->lpVtbl -> DeleteCredentials(This,bstrRealm) ) 

#define IWMSInternalAdminNetSource_GetCredentialFlags(This,lpdwFlags)	\
    ( (This)->lpVtbl -> GetCredentialFlags(This,lpdwFlags) ) 

#define IWMSInternalAdminNetSource_SetCredentialFlags(This,dwFlags)	\
    ( (This)->lpVtbl -> SetCredentialFlags(This,dwFlags) ) 

#define IWMSInternalAdminNetSource_FindProxyForURL(This,bstrProtocol,bstrHost,pfProxyEnabled,pbstrProxyServer,pdwProxyPort,pdwProxyContext)	\
    ( (This)->lpVtbl -> FindProxyForURL(This,bstrProtocol,bstrHost,pfProxyEnabled,pbstrProxyServer,pdwProxyPort,pdwProxyContext) ) 

#define IWMSInternalAdminNetSource_RegisterProxyFailure(This,hrParam,dwProxyContext)	\
    ( (This)->lpVtbl -> RegisterProxyFailure(This,hrParam,dwProxyContext) ) 

#define IWMSInternalAdminNetSource_ShutdownProxyContext(This,dwProxyContext)	\
    ( (This)->lpVtbl -> ShutdownProxyContext(This,dwProxyContext) ) 

#define IWMSInternalAdminNetSource_IsUsingIE(This,dwProxyContext,pfIsUsingIE)	\
    ( (This)->lpVtbl -> IsUsingIE(This,dwProxyContext,pfIsUsingIE) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_Initialize_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ IUnknown *pSharedNamespace,
    /* [in] */ IUnknown *pNamespaceNode,
    /* [in] */ INSNetSourceCreator *pNetSourceCreator,
    /* [in] */ BOOL fEmbeddedInServer);


void __RPC_STUB IWMSInternalAdminNetSource_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_GetNetSourceCreator_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [out] */ INSNetSourceCreator **ppNetSourceCreator);


void __RPC_STUB IWMSInternalAdminNetSource_GetNetSourceCreator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_SetCredentials_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ BSTR bstrRealm,
    /* [in] */ BSTR bstrName,
    /* [in] */ BSTR bstrPassword,
    /* [in] */ BOOL fPersist,
    /* [in] */ BOOL fConfirmedGood);


void __RPC_STUB IWMSInternalAdminNetSource_SetCredentials_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_GetCredentials_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ BSTR bstrRealm,
    /* [out] */ BSTR *pbstrName,
    /* [out] */ BSTR *pbstrPassword,
    /* [out] */ BOOL *pfConfirmedGood);


void __RPC_STUB IWMSInternalAdminNetSource_GetCredentials_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_DeleteCredentials_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ BSTR bstrRealm);


void __RPC_STUB IWMSInternalAdminNetSource_DeleteCredentials_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_GetCredentialFlags_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [out] */ DWORD *lpdwFlags);


void __RPC_STUB IWMSInternalAdminNetSource_GetCredentialFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_SetCredentialFlags_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IWMSInternalAdminNetSource_SetCredentialFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_FindProxyForURL_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ BSTR bstrProtocol,
    /* [in] */ BSTR bstrHost,
    /* [out] */ BOOL *pfProxyEnabled,
    /* [out] */ BSTR *pbstrProxyServer,
    /* [out] */ DWORD *pdwProxyPort,
    /* [out][in] */ DWORD *pdwProxyContext);


void __RPC_STUB IWMSInternalAdminNetSource_FindProxyForURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_RegisterProxyFailure_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ HRESULT hrParam,
    /* [in] */ DWORD dwProxyContext);


void __RPC_STUB IWMSInternalAdminNetSource_RegisterProxyFailure_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_ShutdownProxyContext_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ DWORD dwProxyContext);


void __RPC_STUB IWMSInternalAdminNetSource_ShutdownProxyContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource_IsUsingIE_Proxy( 
    IWMSInternalAdminNetSource * This,
    /* [in] */ DWORD dwProxyContext,
    /* [out] */ BOOL *pfIsUsingIE);


void __RPC_STUB IWMSInternalAdminNetSource_IsUsingIE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMSInternalAdminNetSource_INTERFACE_DEFINED__ */


#ifndef __IWMSInternalAdminNetSource2_INTERFACE_DEFINED__
#define __IWMSInternalAdminNetSource2_INTERFACE_DEFINED__

/* interface IWMSInternalAdminNetSource2 */
/* [unique][helpstring][uuid][object][local] */ 


EXTERN_C const IID IID_IWMSInternalAdminNetSource2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E74D58C3-CF77-4b51-AF17-744687C43EAE")
    IWMSInternalAdminNetSource2 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetCredentialsEx( 
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BOOL fPersist,
            /* [in] */ BOOL fConfirmedGood) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCredentialsEx( 
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [out] */ NETSOURCE_URLCREDPOLICY_SETTINGS *pdwUrlPolicy,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrPassword,
            /* [out] */ BOOL *pfConfirmedGood) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteCredentialsEx( 
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindProxyForURLEx( 
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrHost,
            /* [in] */ BSTR bstrUrl,
            /* [out] */ BOOL *pfProxyEnabled,
            /* [out] */ BSTR *pbstrProxyServer,
            /* [out] */ DWORD *pdwProxyPort,
            /* [out][in] */ DWORD *pdwProxyContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSInternalAdminNetSource2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSInternalAdminNetSource2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSInternalAdminNetSource2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSInternalAdminNetSource2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetCredentialsEx )( 
            IWMSInternalAdminNetSource2 * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BOOL fPersist,
            /* [in] */ BOOL fConfirmedGood);
        
        HRESULT ( STDMETHODCALLTYPE *GetCredentialsEx )( 
            IWMSInternalAdminNetSource2 * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [out] */ NETSOURCE_URLCREDPOLICY_SETTINGS *pdwUrlPolicy,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrPassword,
            /* [out] */ BOOL *pfConfirmedGood);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteCredentialsEx )( 
            IWMSInternalAdminNetSource2 * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy);
        
        HRESULT ( STDMETHODCALLTYPE *FindProxyForURLEx )( 
            IWMSInternalAdminNetSource2 * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrHost,
            /* [in] */ BSTR bstrUrl,
            /* [out] */ BOOL *pfProxyEnabled,
            /* [out] */ BSTR *pbstrProxyServer,
            /* [out] */ DWORD *pdwProxyPort,
            /* [out][in] */ DWORD *pdwProxyContext);
        
        END_INTERFACE
    } IWMSInternalAdminNetSource2Vtbl;

    interface IWMSInternalAdminNetSource2
    {
        CONST_VTBL struct IWMSInternalAdminNetSource2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSInternalAdminNetSource2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSInternalAdminNetSource2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSInternalAdminNetSource2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSInternalAdminNetSource2_SetCredentialsEx(This,bstrRealm,bstrUrl,fProxy,bstrName,bstrPassword,fPersist,fConfirmedGood)	\
    ( (This)->lpVtbl -> SetCredentialsEx(This,bstrRealm,bstrUrl,fProxy,bstrName,bstrPassword,fPersist,fConfirmedGood) ) 

#define IWMSInternalAdminNetSource2_GetCredentialsEx(This,bstrRealm,bstrUrl,fProxy,pdwUrlPolicy,pbstrName,pbstrPassword,pfConfirmedGood)	\
    ( (This)->lpVtbl -> GetCredentialsEx(This,bstrRealm,bstrUrl,fProxy,pdwUrlPolicy,pbstrName,pbstrPassword,pfConfirmedGood) ) 

#define IWMSInternalAdminNetSource2_DeleteCredentialsEx(This,bstrRealm,bstrUrl,fProxy)	\
    ( (This)->lpVtbl -> DeleteCredentialsEx(This,bstrRealm,bstrUrl,fProxy) ) 

#define IWMSInternalAdminNetSource2_FindProxyForURLEx(This,bstrProtocol,bstrHost,bstrUrl,pfProxyEnabled,pbstrProxyServer,pdwProxyPort,pdwProxyContext)	\
    ( (This)->lpVtbl -> FindProxyForURLEx(This,bstrProtocol,bstrHost,bstrUrl,pfProxyEnabled,pbstrProxyServer,pdwProxyPort,pdwProxyContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource2_SetCredentialsEx_Proxy( 
    IWMSInternalAdminNetSource2 * This,
    /* [in] */ BSTR bstrRealm,
    /* [in] */ BSTR bstrUrl,
    /* [in] */ BOOL fProxy,
    /* [in] */ BSTR bstrName,
    /* [in] */ BSTR bstrPassword,
    /* [in] */ BOOL fPersist,
    /* [in] */ BOOL fConfirmedGood);


void __RPC_STUB IWMSInternalAdminNetSource2_SetCredentialsEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource2_GetCredentialsEx_Proxy( 
    IWMSInternalAdminNetSource2 * This,
    /* [in] */ BSTR bstrRealm,
    /* [in] */ BSTR bstrUrl,
    /* [in] */ BOOL fProxy,
    /* [out] */ NETSOURCE_URLCREDPOLICY_SETTINGS *pdwUrlPolicy,
    /* [out] */ BSTR *pbstrName,
    /* [out] */ BSTR *pbstrPassword,
    /* [out] */ BOOL *pfConfirmedGood);


void __RPC_STUB IWMSInternalAdminNetSource2_GetCredentialsEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource2_DeleteCredentialsEx_Proxy( 
    IWMSInternalAdminNetSource2 * This,
    /* [in] */ BSTR bstrRealm,
    /* [in] */ BSTR bstrUrl,
    /* [in] */ BOOL fProxy);


void __RPC_STUB IWMSInternalAdminNetSource2_DeleteCredentialsEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource2_FindProxyForURLEx_Proxy( 
    IWMSInternalAdminNetSource2 * This,
    /* [in] */ BSTR bstrProtocol,
    /* [in] */ BSTR bstrHost,
    /* [in] */ BSTR bstrUrl,
    /* [out] */ BOOL *pfProxyEnabled,
    /* [out] */ BSTR *pbstrProxyServer,
    /* [out] */ DWORD *pdwProxyPort,
    /* [out][in] */ DWORD *pdwProxyContext);


void __RPC_STUB IWMSInternalAdminNetSource2_FindProxyForURLEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMSInternalAdminNetSource2_INTERFACE_DEFINED__ */


#ifndef __IWMSInternalAdminNetSource3_INTERFACE_DEFINED__
#define __IWMSInternalAdminNetSource3_INTERFACE_DEFINED__

/* interface IWMSInternalAdminNetSource3 */
/* [unique][helpstring][uuid][object][local] */ 


EXTERN_C const IID IID_IWMSInternalAdminNetSource3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6b63d08e-4590-44af-9eb3-57ff1e73bf80")
    IWMSInternalAdminNetSource3 : public IWMSInternalAdminNetSource2
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetNetSourceCreator2( 
            /* [out] */ IUnknown **ppNetSourceCreator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindProxyForURLEx2( 
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrHost,
            /* [in] */ BSTR bstrUrl,
            /* [out] */ BOOL *pfProxyEnabled,
            /* [out] */ BSTR *pbstrProxyServer,
            /* [out] */ DWORD *pdwProxyPort,
            /* [out][in] */ QWORD *pqwProxyContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterProxyFailure2( 
            /* [in] */ HRESULT hrParam,
            /* [in] */ QWORD qwProxyContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShutdownProxyContext2( 
            /* [in] */ QWORD qwProxyContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsUsingIE2( 
            /* [in] */ QWORD qwProxyContext,
            /* [out] */ BOOL *pfIsUsingIE) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCredentialsEx2( 
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BOOL fPersist,
            /* [in] */ BOOL fConfirmedGood,
            /* [in] */ BOOL fClearTextAuthentication) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCredentialsEx2( 
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [in] */ BOOL fClearTextAuthentication,
            /* [out] */ NETSOURCE_URLCREDPOLICY_SETTINGS *pdwUrlPolicy,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrPassword,
            /* [out] */ BOOL *pfConfirmedGood) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSInternalAdminNetSource3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSInternalAdminNetSource3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSInternalAdminNetSource3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetCredentialsEx )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BOOL fPersist,
            /* [in] */ BOOL fConfirmedGood);
        
        HRESULT ( STDMETHODCALLTYPE *GetCredentialsEx )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [out] */ NETSOURCE_URLCREDPOLICY_SETTINGS *pdwUrlPolicy,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrPassword,
            /* [out] */ BOOL *pfConfirmedGood);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteCredentialsEx )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy);
        
        HRESULT ( STDMETHODCALLTYPE *FindProxyForURLEx )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrHost,
            /* [in] */ BSTR bstrUrl,
            /* [out] */ BOOL *pfProxyEnabled,
            /* [out] */ BSTR *pbstrProxyServer,
            /* [out] */ DWORD *pdwProxyPort,
            /* [out][in] */ DWORD *pdwProxyContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetNetSourceCreator2 )( 
            IWMSInternalAdminNetSource3 * This,
            /* [out] */ IUnknown **ppNetSourceCreator);
        
        HRESULT ( STDMETHODCALLTYPE *FindProxyForURLEx2 )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ BSTR bstrProtocol,
            /* [in] */ BSTR bstrHost,
            /* [in] */ BSTR bstrUrl,
            /* [out] */ BOOL *pfProxyEnabled,
            /* [out] */ BSTR *pbstrProxyServer,
            /* [out] */ DWORD *pdwProxyPort,
            /* [out][in] */ QWORD *pqwProxyContext);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterProxyFailure2 )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ HRESULT hrParam,
            /* [in] */ QWORD qwProxyContext);
        
        HRESULT ( STDMETHODCALLTYPE *ShutdownProxyContext2 )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ QWORD qwProxyContext);
        
        HRESULT ( STDMETHODCALLTYPE *IsUsingIE2 )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ QWORD qwProxyContext,
            /* [out] */ BOOL *pfIsUsingIE);
        
        HRESULT ( STDMETHODCALLTYPE *SetCredentialsEx2 )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [in] */ BSTR bstrName,
            /* [in] */ BSTR bstrPassword,
            /* [in] */ BOOL fPersist,
            /* [in] */ BOOL fConfirmedGood,
            /* [in] */ BOOL fClearTextAuthentication);
        
        HRESULT ( STDMETHODCALLTYPE *GetCredentialsEx2 )( 
            IWMSInternalAdminNetSource3 * This,
            /* [in] */ BSTR bstrRealm,
            /* [in] */ BSTR bstrUrl,
            /* [in] */ BOOL fProxy,
            /* [in] */ BOOL fClearTextAuthentication,
            /* [out] */ NETSOURCE_URLCREDPOLICY_SETTINGS *pdwUrlPolicy,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ BSTR *pbstrPassword,
            /* [out] */ BOOL *pfConfirmedGood);
        
        END_INTERFACE
    } IWMSInternalAdminNetSource3Vtbl;

    interface IWMSInternalAdminNetSource3
    {
        CONST_VTBL struct IWMSInternalAdminNetSource3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSInternalAdminNetSource3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSInternalAdminNetSource3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSInternalAdminNetSource3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSInternalAdminNetSource3_SetCredentialsEx(This,bstrRealm,bstrUrl,fProxy,bstrName,bstrPassword,fPersist,fConfirmedGood)	\
    ( (This)->lpVtbl -> SetCredentialsEx(This,bstrRealm,bstrUrl,fProxy,bstrName,bstrPassword,fPersist,fConfirmedGood) ) 

#define IWMSInternalAdminNetSource3_GetCredentialsEx(This,bstrRealm,bstrUrl,fProxy,pdwUrlPolicy,pbstrName,pbstrPassword,pfConfirmedGood)	\
    ( (This)->lpVtbl -> GetCredentialsEx(This,bstrRealm,bstrUrl,fProxy,pdwUrlPolicy,pbstrName,pbstrPassword,pfConfirmedGood) ) 

#define IWMSInternalAdminNetSource3_DeleteCredentialsEx(This,bstrRealm,bstrUrl,fProxy)	\
    ( (This)->lpVtbl -> DeleteCredentialsEx(This,bstrRealm,bstrUrl,fProxy) ) 

#define IWMSInternalAdminNetSource3_FindProxyForURLEx(This,bstrProtocol,bstrHost,bstrUrl,pfProxyEnabled,pbstrProxyServer,pdwProxyPort,pdwProxyContext)	\
    ( (This)->lpVtbl -> FindProxyForURLEx(This,bstrProtocol,bstrHost,bstrUrl,pfProxyEnabled,pbstrProxyServer,pdwProxyPort,pdwProxyContext) ) 


#define IWMSInternalAdminNetSource3_GetNetSourceCreator2(This,ppNetSourceCreator)	\
    ( (This)->lpVtbl -> GetNetSourceCreator2(This,ppNetSourceCreator) ) 

#define IWMSInternalAdminNetSource3_FindProxyForURLEx2(This,bstrProtocol,bstrHost,bstrUrl,pfProxyEnabled,pbstrProxyServer,pdwProxyPort,pqwProxyContext)	\
    ( (This)->lpVtbl -> FindProxyForURLEx2(This,bstrProtocol,bstrHost,bstrUrl,pfProxyEnabled,pbstrProxyServer,pdwProxyPort,pqwProxyContext) ) 

#define IWMSInternalAdminNetSource3_RegisterProxyFailure2(This,hrParam,qwProxyContext)	\
    ( (This)->lpVtbl -> RegisterProxyFailure2(This,hrParam,qwProxyContext) ) 

#define IWMSInternalAdminNetSource3_ShutdownProxyContext2(This,qwProxyContext)	\
    ( (This)->lpVtbl -> ShutdownProxyContext2(This,qwProxyContext) ) 

#define IWMSInternalAdminNetSource3_IsUsingIE2(This,qwProxyContext,pfIsUsingIE)	\
    ( (This)->lpVtbl -> IsUsingIE2(This,qwProxyContext,pfIsUsingIE) ) 

#define IWMSInternalAdminNetSource3_SetCredentialsEx2(This,bstrRealm,bstrUrl,fProxy,bstrName,bstrPassword,fPersist,fConfirmedGood,fClearTextAuthentication)	\
    ( (This)->lpVtbl -> SetCredentialsEx2(This,bstrRealm,bstrUrl,fProxy,bstrName,bstrPassword,fPersist,fConfirmedGood,fClearTextAuthentication) ) 

#define IWMSInternalAdminNetSource3_GetCredentialsEx2(This,bstrRealm,bstrUrl,fProxy,fClearTextAuthentication,pdwUrlPolicy,pbstrName,pbstrPassword,pfConfirmedGood)	\
    ( (This)->lpVtbl -> GetCredentialsEx2(This,bstrRealm,bstrUrl,fProxy,fClearTextAuthentication,pdwUrlPolicy,pbstrName,pbstrPassword,pfConfirmedGood) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource3_GetNetSourceCreator2_Proxy( 
    IWMSInternalAdminNetSource3 * This,
    /* [out] */ IUnknown **ppNetSourceCreator);


void __RPC_STUB IWMSInternalAdminNetSource3_GetNetSourceCreator2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource3_FindProxyForURLEx2_Proxy( 
    IWMSInternalAdminNetSource3 * This,
    /* [in] */ BSTR bstrProtocol,
    /* [in] */ BSTR bstrHost,
    /* [in] */ BSTR bstrUrl,
    /* [out] */ BOOL *pfProxyEnabled,
    /* [out] */ BSTR *pbstrProxyServer,
    /* [out] */ DWORD *pdwProxyPort,
    /* [out][in] */ QWORD *pqwProxyContext);


void __RPC_STUB IWMSInternalAdminNetSource3_FindProxyForURLEx2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource3_RegisterProxyFailure2_Proxy( 
    IWMSInternalAdminNetSource3 * This,
    /* [in] */ HRESULT hrParam,
    /* [in] */ QWORD qwProxyContext);


void __RPC_STUB IWMSInternalAdminNetSource3_RegisterProxyFailure2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource3_ShutdownProxyContext2_Proxy( 
    IWMSInternalAdminNetSource3 * This,
    /* [in] */ QWORD qwProxyContext);


void __RPC_STUB IWMSInternalAdminNetSource3_ShutdownProxyContext2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource3_IsUsingIE2_Proxy( 
    IWMSInternalAdminNetSource3 * This,
    /* [in] */ QWORD qwProxyContext,
    /* [out] */ BOOL *pfIsUsingIE);


void __RPC_STUB IWMSInternalAdminNetSource3_IsUsingIE2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource3_SetCredentialsEx2_Proxy( 
    IWMSInternalAdminNetSource3 * This,
    /* [in] */ BSTR bstrRealm,
    /* [in] */ BSTR bstrUrl,
    /* [in] */ BOOL fProxy,
    /* [in] */ BSTR bstrName,
    /* [in] */ BSTR bstrPassword,
    /* [in] */ BOOL fPersist,
    /* [in] */ BOOL fConfirmedGood,
    /* [in] */ BOOL fClearTextAuthentication);


void __RPC_STUB IWMSInternalAdminNetSource3_SetCredentialsEx2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IWMSInternalAdminNetSource3_GetCredentialsEx2_Proxy( 
    IWMSInternalAdminNetSource3 * This,
    /* [in] */ BSTR bstrRealm,
    /* [in] */ BSTR bstrUrl,
    /* [in] */ BOOL fProxy,
    /* [in] */ BOOL fClearTextAuthentication,
    /* [out] */ NETSOURCE_URLCREDPOLICY_SETTINGS *pdwUrlPolicy,
    /* [out] */ BSTR *pbstrName,
    /* [out] */ BSTR *pbstrPassword,
    /* [out] */ BOOL *pfConfirmedGood);


void __RPC_STUB IWMSInternalAdminNetSource3_GetCredentialsEx2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IWMSInternalAdminNetSource3_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsnamedvalues.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsnamedvalues.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsnamedvalues_h__
#define __wmsnamedvalues_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSNamedValue_FWD_DEFINED__
#define __IWMSNamedValue_FWD_DEFINED__
typedef interface IWMSNamedValue IWMSNamedValue;
#endif 	/* __IWMSNamedValue_FWD_DEFINED__ */


#ifndef __IWMSNamedValues_FWD_DEFINED__
#define __IWMSNamedValues_FWD_DEFINED__
typedef interface IWMSNamedValues IWMSNamedValues;
#endif 	/* __IWMSNamedValues_FWD_DEFINED__ */


#ifndef __DWMSNamedValuesEvents_FWD_DEFINED__
#define __DWMSNamedValuesEvents_FWD_DEFINED__
typedef interface DWMSNamedValuesEvents DWMSNamedValuesEvents;
#endif 	/* __DWMSNamedValuesEvents_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsnamedvalues_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmsnamedvalues.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
#pragma once


extern RPC_IF_HANDLE __MIDL_itf_wmsnamedvalues_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsnamedvalues_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSNamedValue_INTERFACE_DEFINED__
#define __IWMSNamedValue_INTERFACE_DEFINED__

/* interface IWMSNamedValue */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSNamedValue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("18812741-4BEC-11D2-BF25-00805FBE84A6")
    IWMSNamedValue : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ VARIANT newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSNamedValueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSNamedValue * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSNamedValue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSNamedValue * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSNamedValue * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSNamedValue * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSNamedValue * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSNamedValue * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSNamedValue * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            IWMSNamedValue * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            IWMSNamedValue * This,
            /* [in] */ VARIANT newVal);
        
        END_INTERFACE
    } IWMSNamedValueVtbl;

    interface IWMSNamedValue
    {
        CONST_VTBL struct IWMSNamedValueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSNamedValue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSNamedValue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSNamedValue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSNamedValue_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSNamedValue_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSNamedValue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSNamedValue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSNamedValue_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSNamedValue_get_Value(This,pVal)	\
    ( (This)->lpVtbl -> get_Value(This,pVal) ) 

#define IWMSNamedValue_put_Value(This,newVal)	\
    ( (This)->lpVtbl -> put_Value(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSNamedValue_INTERFACE_DEFINED__ */


#ifndef __IWMSNamedValues_INTERFACE_DEFINED__
#define __IWMSNamedValues_INTERFACE_DEFINED__

/* interface IWMSNamedValues */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSNamedValues;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("18812743-4BEC-11D2-BF25-00805FBE84A6")
    IWMSNamedValues : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [in] */ VARIANT varValue) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValue **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ __RPC__in BSTR szName,
            /* [defaultvalue][in] */ VARIANT varValue,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValue **pItem) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSNamedValuesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSNamedValues * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSNamedValues * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSNamedValues * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSNamedValues * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSNamedValues * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSNamedValues * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSNamedValues * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Item )( 
            IWMSNamedValues * This,
            /* [in] */ const VARIANT varIndex,
            /* [in] */ VARIANT varValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSNamedValues * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValue **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSNamedValues * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSNamedValues * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSNamedValues * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IWMSNamedValues * This,
            /* [in] */ __RPC__in BSTR szName,
            /* [defaultvalue][in] */ VARIANT varValue,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValue **pItem);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IWMSNamedValues * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } IWMSNamedValuesVtbl;

    interface IWMSNamedValues
    {
        CONST_VTBL struct IWMSNamedValuesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSNamedValues_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSNamedValues_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSNamedValues_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSNamedValues_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSNamedValues_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSNamedValues_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSNamedValues_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSNamedValues_put_Item(This,varIndex,varValue)	\
    ( (This)->lpVtbl -> put_Item(This,varIndex,varValue) ) 

#define IWMSNamedValues_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSNamedValues_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSNamedValues_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSNamedValues_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSNamedValues_Add(This,szName,varValue,pItem)	\
    ( (This)->lpVtbl -> Add(This,szName,varValue,pItem) ) 

#define IWMSNamedValues_Remove(This,varIndex)	\
    ( (This)->lpVtbl -> Remove(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSNamedValues_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsplugin.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsplugin.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsplugin_h__
#define __wmsplugin_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSPlugin_FWD_DEFINED__
#define __IWMSPlugin_FWD_DEFINED__
typedef interface IWMSPlugin IWMSPlugin;
#endif 	/* __IWMSPlugin_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "WMSNamedValues.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsplugin_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmsplugin.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
typedef /* [uuid][public] */  DECLSPEC_UUID("56209C38-39FA-432a-8068-307B7BAE01B8") 
enum WMS_PLUGIN_LOAD_TYPE
    {	WMS_PLUGIN_LOAD_TYPE_UNSPECIFIED	= 0,
	WMS_PLUGIN_LOAD_TYPE_IN_PROC	= 1,
	WMS_PLUGIN_LOAD_TYPE_OUT_OF_PROC	= 2,
	WMS_NUM_PLUGIN_LOAD_TYPE	= 3
    } 	WMS_PLUGIN_LOAD_TYPE;

typedef /* [uuid][public] */  DECLSPEC_UUID("56209C39-39FA-432a-8068-307B7BAE01B8") 
enum WMS_PLUGIN_UNSUPPORTED_LOAD_TYPE
    {	WMS_PLUGIN_UNSUPPORTED_LOAD_TYPE_NONE	= 0,
	WMS_PLUGIN_UNSUPPORTED_LOAD_TYPE_IN_PROC	= 1,
	WMS_PLUGIN_UNSUPPORTED_LOAD_TYPE_OUT_OF_PROC	= 2
    } 	WMS_PLUGIN_UNSUPPORTED_LOAD_TYPE;

typedef /* [uuid][public] */  DECLSPEC_UUID("8AC2B32C-A223-4134-8DCF-6673C95CE924") 
enum WMS_PLUGIN_SUPPORT_TYPE
    {	WMS_PLUGIN_SUPPORT_IS_SUPPORTED	= 0,
	WMS_PLUGIN_SUPPORT_REQUIRES_ADVANCED_SERVER	= 1
    } 	WMS_PLUGIN_SUPPORT_TYPE;



extern RPC_IF_HANDLE __MIDL_itf_wmsplugin_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsplugin_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSPlugin_INTERFACE_DEFINED__
#define __IWMSPlugin_INTERFACE_DEFINED__

/* interface IWMSPlugin */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("3E52E0E2-72A7-11D2-BF2F-00805FBE84A6") 
enum WMS_PLUGIN_STATUS
    {	WMS_PLUGIN_NONE	= 0,
	WMS_PLUGIN_ERROR	= 0x1,
	WMS_PLUGIN_LOADED	= 0x2,
	WMS_PLUGIN_ENABLED	= 0x4,
	WMS_PLUGIN_LOADED_IN_PROC	= 0x8,
	WMS_PLUGIN_LOADED_OUT_OF_PROC	= 0x10,
	WMS_PLUGIN_REMOVE_ON_SERVICE_RESTART	= 0x20
    } 	WMS_PLUGIN_STATUS;


EXTERN_C const IID IID_IWMSPlugin;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("517758ed-603c-4b98-82c1-4b2fa7787166")
    IWMSPlugin : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ __RPC__in BSTR pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CLSID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CustomInterface( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorCode( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LoadType( 
            /* [retval][out] */ __RPC__out WMS_PLUGIN_LOAD_TYPE *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_LoadType( 
            /* [in] */ WMS_PLUGIN_LOAD_TYPE val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorText( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectionOrder( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SelectionOrder( 
            /* [in] */ long lVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SupportStatus( 
            /* [retval][out] */ __RPC__out WMS_PLUGIN_SUPPORT_TYPE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MonikerName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPluginVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlugin * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlugin * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlugin * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPlugin * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPlugin * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPlugin * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPlugin * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSPlugin * This,
            /* [in] */ __RPC__in BSTR pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            IWMSPlugin * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CLSID )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomInterface )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorCode )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoadType )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__out WMS_PLUGIN_LOAD_TYPE *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LoadType )( 
            IWMSPlugin * This,
            /* [in] */ WMS_PLUGIN_LOAD_TYPE val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorText )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionOrder )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SelectionOrder )( 
            IWMSPlugin * This,
            /* [in] */ long lVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupportStatus )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__out WMS_PLUGIN_SUPPORT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        END_INTERFACE
    } IWMSPluginVtbl;

    interface IWMSPlugin
    {
        CONST_VTBL struct IWMSPluginVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlugin_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlugin_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlugin_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlugin_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPlugin_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPlugin_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPlugin_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPlugin_put_Name(This,pVal)	\
    ( (This)->lpVtbl -> put_Name(This,pVal) ) 

#define IWMSPlugin_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSPlugin_get_Enabled(This,pVal)	\
    ( (This)->lpVtbl -> get_Enabled(This,pVal) ) 

#define IWMSPlugin_put_Enabled(This,newVal)	\
    ( (This)->lpVtbl -> put_Enabled(This,newVal) ) 

#define IWMSPlugin_get_CLSID(This,pVal)	\
    ( (This)->lpVtbl -> get_CLSID(This,pVal) ) 

#define IWMSPlugin_get_CustomInterface(This,ppVal)	\
    ( (This)->lpVtbl -> get_CustomInterface(This,ppVal) ) 

#define IWMSPlugin_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSPlugin_get_ErrorCode(This,pVal)	\
    ( (This)->lpVtbl -> get_ErrorCode(This,pVal) ) 

#define IWMSPlugin_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSPlugin_get_Version(This,pVal)	\
    ( (This)->lpVtbl -> get_Version(This,pVal) ) 

#define IWMSPlugin_get_LoadType(This,pVal)	\
    ( (This)->lpVtbl -> get_LoadType(This,pVal) ) 

#define IWMSPlugin_put_LoadType(This,val)	\
    ( (This)->lpVtbl -> put_LoadType(This,val) ) 

#define IWMSPlugin_get_ErrorText(This,pVal)	\
    ( (This)->lpVtbl -> get_ErrorText(This,pVal) ) 

#define IWMSPlugin_get_SelectionOrder(This,pVal)	\
    ( (This)->lpVtbl -> get_SelectionOrder(This,pVal) ) 

#define IWMSPlugin_put_SelectionOrder(This,lVal)	\
    ( (This)->lpVtbl -> put_SelectionOrder(This,lVal) ) 

#define IWMSPlugin_get_SupportStatus(This,pVal)	\
    ( (This)->lpVtbl -> get_SupportStatus(This,pVal) ) 

#define IWMSPlugin_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlugin_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsplaylistparser.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsplaylistparser.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsplaylistparser_h__
#define __wmsplaylistparser_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSPlaylistParser_FWD_DEFINED__
#define __IWMSPlaylistParser_FWD_DEFINED__
typedef interface IWMSPlaylistParser IWMSPlaylistParser;
#endif 	/* __IWMSPlaylistParser_FWD_DEFINED__ */


#ifndef __IWMSPlaylistParserCallback_FWD_DEFINED__
#define __IWMSPlaylistParserCallback_FWD_DEFINED__
typedef interface IWMSPlaylistParserCallback IWMSPlaylistParserCallback;
#endif 	/* __IWMSPlaylistParserCallback_FWD_DEFINED__ */


#ifndef __IWMSPlaylistParserPlugin_FWD_DEFINED__
#define __IWMSPlaylistParserPlugin_FWD_DEFINED__
typedef interface IWMSPlaylistParserPlugin IWMSPlaylistParserPlugin;
#endif 	/* __IWMSPlaylistParserPlugin_FWD_DEFINED__ */


#ifndef __IWMSPlaylistParserPluginCallback_FWD_DEFINED__
#define __IWMSPlaylistParserPluginCallback_FWD_DEFINED__
typedef interface IWMSPlaylistParserPluginCallback IWMSPlaylistParserPluginCallback;
#endif 	/* __IWMSPlaylistParserPluginCallback_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "xmldom.h"
#include "nsscore.h"
#include "wmsbuffer.h"
#include "dataContainer.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsplaylistparser_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
//  Microsoft Windows Media
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
//  Automatically generated by Midl from WMSPlaylistParser.idl
//
//  DO NOT EDIT THIS FILE.
//
//*****************************************************************************


EXTERN_GUID( IID_IWMSPlaylistParser, 0xee1f2ec, 0x48ef, 0x11d2, 0x9e, 0xff, 0x0, 0x60, 0x97, 0xd2, 0xd7, 0xcf );
EXTERN_GUID( IID_IWMSPlaylistParserCallback, 0xee1f2ed, 0x48ef, 0x11d2, 0x9e, 0xff, 0x0, 0x60, 0x97, 0xd2, 0xd7, 0xcf );
EXTERN_GUID( IID_IWMSPlaylistParserPlugin, 0xfa8764c1, 0x90a2, 0x11d2, 0x9f, 0x22, 0x0, 0x60, 0x97, 0xd2, 0xd7, 0xcf );
EXTERN_GUID( IID_IWMSPlaylistParserPluginCallback, 0xfa8764c2, 0x90a2, 0x11d2, 0x9f, 0x22, 0x0, 0x60, 0x97, 0xd2, 0xd7, 0xcf );


extern RPC_IF_HANDLE __MIDL_itf_wmsplaylistparser_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsplaylistparser_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSPlaylistParser_INTERFACE_DEFINED__
#define __IWMSPlaylistParser_INTERFACE_DEFINED__

/* interface IWMSPlaylistParser */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPlaylistParser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0EE1F2EC-48EF-11d2-9EFF-006097D2D7CF")
    IWMSPlaylistParser : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ReadPlaylist( 
            /* [in] */ __RPC__in_opt INSSBuffer *pBuffer,
            /* [in] */ __RPC__in_opt IXMLDOMDocument *pPlaylist,
            /* [in] */ __RPC__in_opt IWMSPlaylistParserCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE WritePlaylist( 
            /* [in] */ __RPC__in_opt IXMLDOMDocument *pPlaylist,
            /* [in] */ __RPC__in_opt IWMSPlaylistParserCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ReadPlaylistFromDirectory( 
            /* [in] */ __RPC__in_opt IWMSDirectory *pDirectory,
            /* [in] */ __RPC__in LPWSTR pszwFilePattern,
            /* [in] */ __RPC__in_opt IXMLDOMDocument *pPlaylist,
            /* [in] */ __RPC__in_opt IWMSPlaylistParserCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPlaylistParserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlaylistParser * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlaylistParser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlaylistParser * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ReadPlaylist )( 
            IWMSPlaylistParser * This,
            /* [in] */ __RPC__in_opt INSSBuffer *pBuffer,
            /* [in] */ __RPC__in_opt IXMLDOMDocument *pPlaylist,
            /* [in] */ __RPC__in_opt IWMSPlaylistParserCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *WritePlaylist )( 
            IWMSPlaylistParser * This,
            /* [in] */ __RPC__in_opt IXMLDOMDocument *pPlaylist,
            /* [in] */ __RPC__in_opt IWMSPlaylistParserCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ReadPlaylistFromDirectory )( 
            IWMSPlaylistParser * This,
            /* [in] */ __RPC__in_opt IWMSDirectory *pDirectory,
            /* [in] */ __RPC__in LPWSTR pszwFilePattern,
            /* [in] */ __RPC__in_opt IXMLDOMDocument *pPlaylist,
            /* [in] */ __RPC__in_opt IWMSPlaylistParserCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        END_INTERFACE
    } IWMSPlaylistParserVtbl;

    interface IWMSPlaylistParser
    {
        CONST_VTBL struct IWMSPlaylistParserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlaylistParser_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlaylistParser_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlaylistParser_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlaylistParser_ReadPlaylist(This,pBuffer,pPlaylist,pCallback,qwContext)	\
    ( (This)->lpVtbl -> ReadPlaylist(This,pBuffer,pPlaylist,pCallback,qwContext) ) 

#define IWMSPlaylistParser_WritePlaylist(This,pPlaylist,pCallback,qwContext)	\
    ( (This)->lpVtbl -> WritePlaylist(This,pPlaylist,pCallback,qwContext) ) 

#define IWMSPlaylistParser_ReadPlaylistFromDirectory(This,pDirectory,pszwFilePattern,pPlaylist,pCallback,qwContext)	\
    ( (This)->lpVtbl -> ReadPlaylistFromDirectory(This,pDirectory,pszwFilePattern,pPlaylist,pCallback,qwContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlaylistParser_INTERFACE_DEFINED__ */


#ifndef __IWMSPlaylistParserCallback_INTERFACE_DEFINED__
#define __IWMSPlaylistParserCallback_INTERFACE_DEFINED__

/* interface IWMSPlaylistParserCallback */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPlaylistParserCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0EE1F2ED-48EF-11d2-9EFF-006097D2D7CF")
    IWMSPlaylistParserCallback : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnReadPlaylist( 
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnWritePlaylist( 
            /* [in] */ HRESULT hr,
            /* [in] */ __RPC__in_opt INSSBuffer *pBuffer,
            /* [in] */ QWORD qwContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPlaylistParserCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlaylistParserCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlaylistParserCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlaylistParserCallback * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnReadPlaylist )( 
            IWMSPlaylistParserCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ QWORD qwContext);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnWritePlaylist )( 
            IWMSPlaylistParserCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ __RPC__in_opt INSSBuffer *pBuffer,
            /* [in] */ QWORD qwContext);
        
        END_INTERFACE
    } IWMSPlaylistParserCallbackVtbl;

    interface IWMSPlaylistParserCallback
    {
        CONST_VTBL struct IWMSPlaylistParserCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlaylistParserCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlaylistParserCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlaylistParserCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlaylistParserCallback_OnReadPlaylist(This,hr,qwContext)	\
    ( (This)->lpVtbl -> OnReadPlaylist(This,hr,qwContext) ) 

#define IWMSPlaylistParserCallback_OnWritePlaylist(This,hr,pBuffer,qwContext)	\
    ( (This)->lpVtbl -> OnWritePlaylist(This,hr,pBuffer,qwContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlaylistParserCallback_INTERFACE_DEFINED__ */


#ifndef __IWMSPlaylistParserPlugin_INTERFACE_DEFINED__
#define __IWMSPlaylistParserPlugin_INTERFACE_DEFINED__

/* interface IWMSPlaylistParserPlugin */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPlaylistParserPlugin;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FA8764C1-90A2-11d2-9F22-006097D2D7CF")
    IWMSPlaylistParserPlugin : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreatePlaylistParser( 
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommandContext,
            /* [in] */ __RPC__in_opt IWMSContext *pUser,
            /* [in] */ __RPC__in_opt IWMSContext *pPresentation,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IWMSClassObject *pFactory,
            /* [in] */ __RPC__in_opt IWMSBufferAllocator *pBufferAllocator,
            /* [in] */ __RPC__in_opt IWMSPlaylistParserPluginCallback *pCallback,
            /* [in] */ QWORD qwContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPlaylistParserPluginVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlaylistParserPlugin * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlaylistParserPlugin * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlaylistParserPlugin * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreatePlaylistParser )( 
            IWMSPlaylistParserPlugin * This,
            /* [in] */ __RPC__in_opt IWMSCommandContext *pCommandContext,
            /* [in] */ __RPC__in_opt IWMSContext *pUser,
            /* [in] */ __RPC__in_opt IWMSContext *pPresentation,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IWMSClassObject *pFactory,
            /* [in] */ __RPC__in_opt IWMSBufferAllocator *pBufferAllocator,
            /* [in] */ __RPC__in_opt IWMSPlaylistParserPluginCallback *pCallback,
            /* [in] */ QWORD qwContext);
        
        END_INTERFACE
    } IWMSPlaylistParserPluginVtbl;

    interface IWMSPlaylistParserPlugin
    {
        CONST_VTBL struct IWMSPlaylistParserPluginVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlaylistParserPlugin_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlaylistParserPlugin_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlaylistParserPlugin_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlaylistParserPlugin_CreatePlaylistParser(This,pCommandContext,pUser,pPresentation,dwFlags,pFactory,pBufferAllocator,pCallback,qwContext)	\
    ( (This)->lpVtbl -> CreatePlaylistParser(This,pCommandContext,pUser,pPresentation,dwFlags,pFactory,pBufferAllocator,pCallback,qwContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlaylistParserPlugin_INTERFACE_DEFINED__ */


#ifndef __IWMSPlaylistParserPluginCallback_INTERFACE_DEFINED__
#define __IWMSPlaylistParserPluginCallback_INTERFACE_DEFINED__

/* interface IWMSPlaylistParserPluginCallback */
/* [helpstring][version][uuid][unique][object] */ 


EXTERN_C const IID IID_IWMSPlaylistParserPluginCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FA8764C2-90A2-11d2-9F22-006097D2D7CF")
    IWMSPlaylistParserPluginCallback : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnCreatePlaylistParser( 
            /* [in] */ HRESULT hr,
            /* [in] */ __RPC__in_opt IWMSPlaylistParser *pParser,
            /* [in] */ QWORD qwContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPlaylistParserPluginCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlaylistParserPluginCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlaylistParserPluginCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlaylistParserPluginCallback * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnCreatePlaylistParser )( 
            IWMSPlaylistParserPluginCallback * This,
            /* [in] */ HRESULT hr,
            /* [in] */ __RPC__in_opt IWMSPlaylistParser *pParser,
            /* [in] */ QWORD qwContext);
        
        END_INTERFACE
    } IWMSPlaylistParserPluginCallbackVtbl;

    interface IWMSPlaylistParserPluginCallback
    {
        CONST_VTBL struct IWMSPlaylistParserPluginCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlaylistParserPluginCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlaylistParserPluginCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlaylistParserPluginCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlaylistParserPluginCallback_OnCreatePlaylistParser(This,hr,pParser,qwContext)	\
    ( (This)->lpVtbl -> OnCreatePlaylistParser(This,hr,pParser,qwContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlaylistParserPluginCallback_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsxmldomextensions.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsxmldomextensions.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsxmldomextensions_h__
#define __wmsxmldomextensions_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSActiveStream_FWD_DEFINED__
#define __IWMSActiveStream_FWD_DEFINED__
typedef interface IWMSActiveStream IWMSActiveStream;
#endif 	/* __IWMSActiveStream_FWD_DEFINED__ */


#ifndef __IWMSActiveStreams_FWD_DEFINED__
#define __IWMSActiveStreams_FWD_DEFINED__
typedef interface IWMSActiveStreams IWMSActiveStreams;
#endif 	/* __IWMSActiveStreams_FWD_DEFINED__ */


#ifndef __IWMSActiveMedia_FWD_DEFINED__
#define __IWMSActiveMedia_FWD_DEFINED__
typedef interface IWMSActiveMedia IWMSActiveMedia;
#endif 	/* __IWMSActiveMedia_FWD_DEFINED__ */


#ifndef __IWMSPlaylist_FWD_DEFINED__
#define __IWMSPlaylist_FWD_DEFINED__
typedef interface IWMSPlaylist IWMSPlaylist;
#endif 	/* __IWMSPlaylist_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "xmldom.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsxmldomextensions_0000_0000 */
/* [local] */ 

//*****************************************************************************
//
// Microsoft Windows Media
// Copyright (C) Microsoft Corporation. All rights reserved.
//
// Automatically generated by Midl from wmsXMLDOMExtensions.idl
//
// DO NOT EDIT THIS FILE.
//
//*****************************************************************************
#pragma once
#ifndef __WMS_XML_DOM_EXTENSIONS_IDL__
#define __WMS_XML_DOM_EXTENSIONS_IDL__
#include <WMSDefs.h>


extern RPC_IF_HANDLE __MIDL_itf_wmsxmldomextensions_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsxmldomextensions_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSActiveStream_INTERFACE_DEFINED__
#define __IWMSActiveStream_INTERFACE_DEFINED__

/* interface IWMSActiveStream */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("9D6A9BE7-B08C-48a8-9755-ACBC5E79973A") 
enum WMS_ACTIVE_STREAM_TYPE
    {	WMS_STREAM_TYPE_VIDEO	= 0,
	WMS_STREAM_TYPE_AUDIO	= 1,
	WMS_STREAM_TYPE_OTHER	= 2
    } 	WMS_ACTIVE_STREAM_TYPE;


EXTERN_C const IID IID_IWMSActiveStream;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("165FC383-B494-4465-AD08-4A73CEDF8791")
    IWMSActiveStream : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out WMS_ACTIVE_STREAM_TYPE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSActiveStreamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSActiveStream * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSActiveStream * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSActiveStream * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSActiveStream * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSActiveStream * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSActiveStream * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSActiveStream * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSActiveStream * This,
            /* [retval][out] */ __RPC__out WMS_ACTIVE_STREAM_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSActiveStream * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            IWMSActiveStream * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSActiveStreamVtbl;

    interface IWMSActiveStream
    {
        CONST_VTBL struct IWMSActiveStreamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSActiveStream_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSActiveStream_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSActiveStream_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSActiveStream_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSActiveStream_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSActiveStream_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSActiveStream_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSActiveStream_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSActiveStream_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSActiveStream_get_BitRate(This,pVal)	\
    ( (This)->lpVtbl -> get_BitRate(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSActiveStream_INTERFACE_DEFINED__ */


#ifndef __IWMSActiveStreams_INTERFACE_DEFINED__
#define __IWMSActiveStreams_INTERFACE_DEFINED__

/* interface IWMSActiveStreams */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSActiveStreams;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5F248EA2-C018-466c-9AD7-2086CFB9A5D3")
    IWMSActiveStreams : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSActiveStream **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSActiveStreamsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSActiveStreams * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSActiveStreams * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSActiveStreams * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSActiveStreams * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSActiveStreams * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSActiveStreams * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSActiveStreams * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSActiveStreams * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSActiveStream **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSActiveStreams * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSActiveStreams * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSActiveStreams * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        END_INTERFACE
    } IWMSActiveStreamsVtbl;

    interface IWMSActiveStreams
    {
        CONST_VTBL struct IWMSActiveStreamsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSActiveStreams_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSActiveStreams_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSActiveStreams_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSActiveStreams_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSActiveStreams_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSActiveStreams_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSActiveStreams_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSActiveStreams_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSActiveStreams_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSActiveStreams_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSActiveStreams_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSActiveStreams_INTERFACE_DEFINED__ */


#ifndef __IWMSActiveMedia_INTERFACE_DEFINED__
#define __IWMSActiveMedia_INTERFACE_DEFINED__

/* interface IWMSActiveMedia */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSActiveMedia;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9D07EE1C-798F-4a28-85FA-230664650B7C")
    IWMSActiveMedia : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TotalPackets( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Live( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Streams( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSActiveStreams **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ __RPC__in BSTR bstrLanguage,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pProperty) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSActiveMediaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSActiveMedia * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSActiveMedia * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSActiveMedia * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSActiveMedia * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSActiveMedia * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSActiveMedia * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSActiveMedia * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            IWMSActiveMedia * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalPackets )( 
            IWMSActiveMedia * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Live )( 
            IWMSActiveMedia * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Streams )( 
            IWMSActiveMedia * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSActiveStreams **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            IWMSActiveMedia * This,
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ __RPC__in BSTR bstrLanguage,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pProperty);
        
        END_INTERFACE
    } IWMSActiveMediaVtbl;

    interface IWMSActiveMedia
    {
        CONST_VTBL struct IWMSActiveMediaVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSActiveMedia_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSActiveMedia_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSActiveMedia_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSActiveMedia_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSActiveMedia_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSActiveMedia_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSActiveMedia_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSActiveMedia_get_Duration(This,pVal)	\
    ( (This)->lpVtbl -> get_Duration(This,pVal) ) 

#define IWMSActiveMedia_get_TotalPackets(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalPackets(This,pVal) ) 

#define IWMSActiveMedia_get_Live(This,pVal)	\
    ( (This)->lpVtbl -> get_Live(This,pVal) ) 

#define IWMSActiveMedia_get_Streams(This,pVal)	\
    ( (This)->lpVtbl -> get_Streams(This,pVal) ) 

#define IWMSActiveMedia_GetProperty(This,bstrName,bstrLanguage,pProperty)	\
    ( (This)->lpVtbl -> GetProperty(This,bstrName,bstrLanguage,pProperty) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSActiveMedia_INTERFACE_DEFINED__ */


#ifndef __IWMSPlaylist_INTERFACE_DEFINED__
#define __IWMSPlaylist_INTERFACE_DEFINED__

/* interface IWMSPlaylist */
/* [helpstring][uuid][unique][nonextensible][dual][object] */ 


EXTERN_C const IID IID_IWMSPlaylist;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0EE1F2E7-48EF-11d2-9EFF-006097D2D7CF")
    IWMSPlaylist : public IXMLDOMDocument
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentPlaylistEntry( 
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMElement **ppPlaylistEntry) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentPlaylistEntry( 
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CallerEntry( 
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMElement **ppCallerPlaylistEntry) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsStreamCued( 
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ElapsedSimpleTime( 
            /* [retval][out] */ __RPC__out long *pSimpleTime) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentMediaInformation( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSActiveMedia **ppMediaInfo) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE FireEvent( 
            /* [in] */ __RPC__in BSTR bstrEventName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CueStream( 
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UncueStream( 
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NestedPlaylist( 
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **ppPlaylist) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPlaylistVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlaylist * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlaylist * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPlaylist * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPlaylist * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPlaylist * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeName )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *name);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeValue )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__out VARIANT *value);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeValue )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeType )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__out DOMNodeType *type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parentNode )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_childNodes )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNodeList **childList);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_firstChild )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **firstChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_lastChild )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **lastChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_previousSibling )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **previousSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nextSibling )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **nextSibling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_attributes )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNamedNodeMap **attributeMap);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *insertBefore )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMNode *newChild,
            /* [in] */ VARIANT refChild,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *replaceChild )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMNode *newChild,
            /* [in] */ __RPC__in_opt IXMLDOMNode *oldChild,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **outOldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *removeChild )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMNode *childNode,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **oldChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *appendChild )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMNode *newChild,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **outNewChild);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *hasChildNodes )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *hasChild);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ownerDocument )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMDocument **DOMDocument);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *cloneNode )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT_BOOL deep,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNode **cloneRoot);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypeString )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *nodeType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_text )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *text);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_text )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR text);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_specified )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *isSpecified);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_definition )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt IXMLDOMNode **definitionNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_nodeTypedValue )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__out VARIANT *typedValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_nodeTypedValue )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT typedValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_dataType )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__out VARIANT *dataTypeName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_dataType )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR dataTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_xml )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNode )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMNode *stylesheet,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *xmlString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectNodes )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR queryString,
            /* [out][retval] */ __RPC__deref_out_opt IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *selectSingleNode )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR queryString,
            /* [out][retval] */ __RPC__deref_out_opt IXMLDOMNode **resultNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parsed )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *isParsed);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_namespaceURI )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *namespaceURI);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_prefix )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *prefixString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_baseName )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *nameString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *transformNodeToObject )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMNode *stylesheet,
            /* [in] */ VARIANT outputObject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_doctype )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMDocumentType **documentType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_implementation )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMImplementation **impl);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_documentElement )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMElement **DOMElement);
        
        /* [helpstring][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_documentElement )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMElement *DOMElement);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createElement )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR tagName,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMElement **element);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createDocumentFragment )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMDocumentFragment **docFrag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createTextNode )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR data,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMText **text);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createComment )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR data,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMComment **comment);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createCDATASection )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR data,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMCDATASection **cdata);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createProcessingInstruction )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR target,
            /* [in] */ __RPC__in BSTR data,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMProcessingInstruction **pi);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createAttribute )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR name,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMAttribute **attribute);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createEntityReference )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR name,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMEntityReference **entityRef);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *getElementsByTagName )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR tagName,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMNodeList **resultList);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *createNode )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT Type,
            /* [in] */ __RPC__in BSTR name,
            /* [in] */ __RPC__in BSTR namespaceURI,
            /* [out][retval] */ __RPC__deref_out_opt IXMLDOMNode **node);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *nodeFromID )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR idString,
            /* [out][retval] */ __RPC__deref_out_opt IXMLDOMNode **node);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *load )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT xmlSource,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *isSuccessful);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_readyState )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__out long *value);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_parseError )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt IXMLDOMParseError **errorObj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_url )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__deref_out_opt BSTR *urlString);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_async )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *isAsync);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_async )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT_BOOL isAsync);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *abort )( 
            IWMSPlaylist * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *loadXML )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR bstrXML,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *isSuccessful);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *save )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT desination);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_validateOnParse )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *isValidating);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_validateOnParse )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT_BOOL isValidating);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_resolveExternals )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *isResolving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_resolveExternals )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT_BOOL isResolving);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_preserveWhiteSpace )( 
            IWMSPlaylist * This,
            /* [out][retval] */ __RPC__out VARIANT_BOOL *isPreserving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_preserveWhiteSpace )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT_BOOL isPreserving);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_onreadystatechange )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT readystatechangeSink);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ondataavailable )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT ondataavailableSink);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ontransformnode )( 
            IWMSPlaylist * This,
            /* [in] */ VARIANT ontransformnodeSink);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPlaylistEntry )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMElement **ppPlaylistEntry);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentPlaylistEntry )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CallerEntry )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry,
            /* [retval][out] */ __RPC__deref_out_opt IXMLDOMElement **ppCallerPlaylistEntry);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsStreamCued )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ElapsedSimpleTime )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__out long *pSimpleTime);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentMediaInformation )( 
            IWMSPlaylist * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSActiveMedia **ppMediaInfo);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *FireEvent )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in BSTR bstrEventName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CueStream )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UncueStream )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NestedPlaylist )( 
            IWMSPlaylist * This,
            /* [in] */ __RPC__in_opt IXMLDOMElement *pPlaylistEntry,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **ppPlaylist);
        
        END_INTERFACE
    } IWMSPlaylistVtbl;

    interface IWMSPlaylist
    {
        CONST_VTBL struct IWMSPlaylistVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlaylist_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlaylist_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlaylist_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlaylist_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPlaylist_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPlaylist_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPlaylist_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPlaylist_get_nodeName(This,name)	\
    ( (This)->lpVtbl -> get_nodeName(This,name) ) 

#define IWMSPlaylist_get_nodeValue(This,value)	\
    ( (This)->lpVtbl -> get_nodeValue(This,value) ) 

#define IWMSPlaylist_put_nodeValue(This,value)	\
    ( (This)->lpVtbl -> put_nodeValue(This,value) ) 

#define IWMSPlaylist_get_nodeType(This,type)	\
    ( (This)->lpVtbl -> get_nodeType(This,type) ) 

#define IWMSPlaylist_get_parentNode(This,parent)	\
    ( (This)->lpVtbl -> get_parentNode(This,parent) ) 

#define IWMSPlaylist_get_childNodes(This,childList)	\
    ( (This)->lpVtbl -> get_childNodes(This,childList) ) 

#define IWMSPlaylist_get_firstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_firstChild(This,firstChild) ) 

#define IWMSPlaylist_get_lastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_lastChild(This,lastChild) ) 

#define IWMSPlaylist_get_previousSibling(This,previousSibling)	\
    ( (This)->lpVtbl -> get_previousSibling(This,previousSibling) ) 

#define IWMSPlaylist_get_nextSibling(This,nextSibling)	\
    ( (This)->lpVtbl -> get_nextSibling(This,nextSibling) ) 

#define IWMSPlaylist_get_attributes(This,attributeMap)	\
    ( (This)->lpVtbl -> get_attributes(This,attributeMap) ) 

#define IWMSPlaylist_insertBefore(This,newChild,refChild,outNewChild)	\
    ( (This)->lpVtbl -> insertBefore(This,newChild,refChild,outNewChild) ) 

#define IWMSPlaylist_replaceChild(This,newChild,oldChild,outOldChild)	\
    ( (This)->lpVtbl -> replaceChild(This,newChild,oldChild,outOldChild) ) 

#define IWMSPlaylist_removeChild(This,childNode,oldChild)	\
    ( (This)->lpVtbl -> removeChild(This,childNode,oldChild) ) 

#define IWMSPlaylist_appendChild(This,newChild,outNewChild)	\
    ( (This)->lpVtbl -> appendChild(This,newChild,outNewChild) ) 

#define IWMSPlaylist_hasChildNodes(This,hasChild)	\
    ( (This)->lpVtbl -> hasChildNodes(This,hasChild) ) 

#define IWMSPlaylist_get_ownerDocument(This,DOMDocument)	\
    ( (This)->lpVtbl -> get_ownerDocument(This,DOMDocument) ) 

#define IWMSPlaylist_cloneNode(This,deep,cloneRoot)	\
    ( (This)->lpVtbl -> cloneNode(This,deep,cloneRoot) ) 

#define IWMSPlaylist_get_nodeTypeString(This,nodeType)	\
    ( (This)->lpVtbl -> get_nodeTypeString(This,nodeType) ) 

#define IWMSPlaylist_get_text(This,text)	\
    ( (This)->lpVtbl -> get_text(This,text) ) 

#define IWMSPlaylist_put_text(This,text)	\
    ( (This)->lpVtbl -> put_text(This,text) ) 

#define IWMSPlaylist_get_specified(This,isSpecified)	\
    ( (This)->lpVtbl -> get_specified(This,isSpecified) ) 

#define IWMSPlaylist_get_definition(This,definitionNode)	\
    ( (This)->lpVtbl -> get_definition(This,definitionNode) ) 

#define IWMSPlaylist_get_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> get_nodeTypedValue(This,typedValue) ) 

#define IWMSPlaylist_put_nodeTypedValue(This,typedValue)	\
    ( (This)->lpVtbl -> put_nodeTypedValue(This,typedValue) ) 

#define IWMSPlaylist_get_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> get_dataType(This,dataTypeName) ) 

#define IWMSPlaylist_put_dataType(This,dataTypeName)	\
    ( (This)->lpVtbl -> put_dataType(This,dataTypeName) ) 

#define IWMSPlaylist_get_xml(This,xmlString)	\
    ( (This)->lpVtbl -> get_xml(This,xmlString) ) 

#define IWMSPlaylist_transformNode(This,stylesheet,xmlString)	\
    ( (This)->lpVtbl -> transformNode(This,stylesheet,xmlString) ) 

#define IWMSPlaylist_selectNodes(This,queryString,resultList)	\
    ( (This)->lpVtbl -> selectNodes(This,queryString,resultList) ) 

#define IWMSPlaylist_selectSingleNode(This,queryString,resultNode)	\
    ( (This)->lpVtbl -> selectSingleNode(This,queryString,resultNode) ) 

#define IWMSPlaylist_get_parsed(This,isParsed)	\
    ( (This)->lpVtbl -> get_parsed(This,isParsed) ) 

#define IWMSPlaylist_get_namespaceURI(This,namespaceURI)	\
    ( (This)->lpVtbl -> get_namespaceURI(This,namespaceURI) ) 

#define IWMSPlaylist_get_prefix(This,prefixString)	\
    ( (This)->lpVtbl -> get_prefix(This,prefixString) ) 

#define IWMSPlaylist_get_baseName(This,nameString)	\
    ( (This)->lpVtbl -> get_baseName(This,nameString) ) 

#define IWMSPlaylist_transformNodeToObject(This,stylesheet,outputObject)	\
    ( (This)->lpVtbl -> transformNodeToObject(This,stylesheet,outputObject) ) 


#define IWMSPlaylist_get_doctype(This,documentType)	\
    ( (This)->lpVtbl -> get_doctype(This,documentType) ) 

#define IWMSPlaylist_get_implementation(This,impl)	\
    ( (This)->lpVtbl -> get_implementation(This,impl) ) 

#define IWMSPlaylist_get_documentElement(This,DOMElement)	\
    ( (This)->lpVtbl -> get_documentElement(This,DOMElement) ) 

#define IWMSPlaylist_putref_documentElement(This,DOMElement)	\
    ( (This)->lpVtbl -> putref_documentElement(This,DOMElement) ) 

#define IWMSPlaylist_createElement(This,tagName,element)	\
    ( (This)->lpVtbl -> createElement(This,tagName,element) ) 

#define IWMSPlaylist_createDocumentFragment(This,docFrag)	\
    ( (This)->lpVtbl -> createDocumentFragment(This,docFrag) ) 

#define IWMSPlaylist_createTextNode(This,data,text)	\
    ( (This)->lpVtbl -> createTextNode(This,data,text) ) 

#define IWMSPlaylist_createComment(This,data,comment)	\
    ( (This)->lpVtbl -> createComment(This,data,comment) ) 

#define IWMSPlaylist_createCDATASection(This,data,cdata)	\
    ( (This)->lpVtbl -> createCDATASection(This,data,cdata) ) 

#define IWMSPlaylist_createProcessingInstruction(This,target,data,pi)	\
    ( (This)->lpVtbl -> createProcessingInstruction(This,target,data,pi) ) 

#define IWMSPlaylist_createAttribute(This,name,attribute)	\
    ( (This)->lpVtbl -> createAttribute(This,name,attribute) ) 

#define IWMSPlaylist_createEntityReference(This,name,entityRef)	\
    ( (This)->lpVtbl -> createEntityReference(This,name,entityRef) ) 

#define IWMSPlaylist_getElementsByTagName(This,tagName,resultList)	\
    ( (This)->lpVtbl -> getElementsByTagName(This,tagName,resultList) ) 

#define IWMSPlaylist_createNode(This,Type,name,namespaceURI,node)	\
    ( (This)->lpVtbl -> createNode(This,Type,name,namespaceURI,node) ) 

#define IWMSPlaylist_nodeFromID(This,idString,node)	\
    ( (This)->lpVtbl -> nodeFromID(This,idString,node) ) 

#define IWMSPlaylist_load(This,xmlSource,isSuccessful)	\
    ( (This)->lpVtbl -> load(This,xmlSource,isSuccessful) ) 

#define IWMSPlaylist_get_readyState(This,value)	\
    ( (This)->lpVtbl -> get_readyState(This,value) ) 

#define IWMSPlaylist_get_parseError(This,errorObj)	\
    ( (This)->lpVtbl -> get_parseError(This,errorObj) ) 

#define IWMSPlaylist_get_url(This,urlString)	\
    ( (This)->lpVtbl -> get_url(This,urlString) ) 

#define IWMSPlaylist_get_async(This,isAsync)	\
    ( (This)->lpVtbl -> get_async(This,isAsync) ) 

#define IWMSPlaylist_put_async(This,isAsync)	\
    ( (This)->lpVtbl -> put_async(This,isAsync) ) 

#define IWMSPlaylist_abort(This)	\
    ( (This)->lpVtbl -> abort(This) ) 

#define IWMSPlaylist_loadXML(This,bstrXML,isSuccessful)	\
    ( (This)->lpVtbl -> loadXML(This,bstrXML,isSuccessful) ) 

#define IWMSPlaylist_save(This,desination)	\
    ( (This)->lpVtbl -> save(This,desination) ) 

#define IWMSPlaylist_get_validateOnParse(This,isValidating)	\
    ( (This)->lpVtbl -> get_validateOnParse(This,isValidating) ) 

#define IWMSPlaylist_put_validateOnParse(This,isValidating)	\
    ( (This)->lpVtbl -> put_validateOnParse(This,isValidating) ) 

#define IWMSPlaylist_get_resolveExternals(This,isResolving)	\
    ( (This)->lpVtbl -> get_resolveExternals(This,isResolving) ) 

#define IWMSPlaylist_put_resolveExternals(This,isResolving)	\
    ( (This)->lpVtbl -> put_resolveExternals(This,isResolving) ) 

#define IWMSPlaylist_get_preserveWhiteSpace(This,isPreserving)	\
    ( (This)->lpVtbl -> get_preserveWhiteSpace(This,isPreserving) ) 

#define IWMSPlaylist_put_preserveWhiteSpace(This,isPreserving)	\
    ( (This)->lpVtbl -> put_preserveWhiteSpace(This,isPreserving) ) 

#define IWMSPlaylist_put_onreadystatechange(This,readystatechangeSink)	\
    ( (This)->lpVtbl -> put_onreadystatechange(This,readystatechangeSink) ) 

#define IWMSPlaylist_put_ondataavailable(This,ondataavailableSink)	\
    ( (This)->lpVtbl -> put_ondataavailable(This,ondataavailableSink) ) 

#define IWMSPlaylist_put_ontransformnode(This,ontransformnodeSink)	\
    ( (This)->lpVtbl -> put_ontransformnode(This,ontransformnodeSink) ) 


#define IWMSPlaylist_get_CurrentPlaylistEntry(This,ppPlaylistEntry)	\
    ( (This)->lpVtbl -> get_CurrentPlaylistEntry(This,ppPlaylistEntry) ) 

#define IWMSPlaylist_put_CurrentPlaylistEntry(This,pPlaylistEntry)	\
    ( (This)->lpVtbl -> put_CurrentPlaylistEntry(This,pPlaylistEntry) ) 

#define IWMSPlaylist_get_CallerEntry(This,pPlaylistEntry,ppCallerPlaylistEntry)	\
    ( (This)->lpVtbl -> get_CallerEntry(This,pPlaylistEntry,ppCallerPlaylistEntry) ) 

#define IWMSPlaylist_get_IsStreamCued(This,pPlaylistEntry,pVal)	\
    ( (This)->lpVtbl -> get_IsStreamCued(This,pPlaylistEntry,pVal) ) 

#define IWMSPlaylist_get_ElapsedSimpleTime(This,pSimpleTime)	\
    ( (This)->lpVtbl -> get_ElapsedSimpleTime(This,pSimpleTime) ) 

#define IWMSPlaylist_get_CurrentMediaInformation(This,ppMediaInfo)	\
    ( (This)->lpVtbl -> get_CurrentMediaInformation(This,ppMediaInfo) ) 

#define IWMSPlaylist_FireEvent(This,bstrEventName)	\
    ( (This)->lpVtbl -> FireEvent(This,bstrEventName) ) 

#define IWMSPlaylist_CueStream(This,pPlaylistEntry)	\
    ( (This)->lpVtbl -> CueStream(This,pPlaylistEntry) ) 

#define IWMSPlaylist_UncueStream(This,pPlaylistEntry)	\
    ( (This)->lpVtbl -> UncueStream(This,pPlaylistEntry) ) 

#define IWMSPlaylist_get_NestedPlaylist(This,pPlaylistEntry,ppPlaylist)	\
    ( (This)->lpVtbl -> get_NestedPlaylist(This,pPlaylistEntry,ppPlaylist) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlaylist_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmsxmldomextensions_0000_0004 */
/* [local] */ 

#endif


extern RPC_IF_HANDLE __MIDL_itf_wmsxmldomextensions_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsxmldomextensions_0000_0004_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\win2k8\sdk\include\wmsserver.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for wmsserver.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __wmsserver_h__
#define __wmsserver_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IWMSRootDirectories_FWD_DEFINED__
#define __IWMSRootDirectories_FWD_DEFINED__
typedef interface IWMSRootDirectories IWMSRootDirectories;
#endif 	/* __IWMSRootDirectories_FWD_DEFINED__ */


#ifndef __IWMSDiagnosticEvent_FWD_DEFINED__
#define __IWMSDiagnosticEvent_FWD_DEFINED__
typedef interface IWMSDiagnosticEvent IWMSDiagnosticEvent;
#endif 	/* __IWMSDiagnosticEvent_FWD_DEFINED__ */


#ifndef __IWMSDiagnosticEvents_FWD_DEFINED__
#define __IWMSDiagnosticEvents_FWD_DEFINED__
typedef interface IWMSDiagnosticEvents IWMSDiagnosticEvents;
#endif 	/* __IWMSDiagnosticEvents_FWD_DEFINED__ */


#ifndef __IWMSFileDescription_FWD_DEFINED__
#define __IWMSFileDescription_FWD_DEFINED__
typedef interface IWMSFileDescription IWMSFileDescription;
#endif 	/* __IWMSFileDescription_FWD_DEFINED__ */


#ifndef __IWMSFileDescriptions_FWD_DEFINED__
#define __IWMSFileDescriptions_FWD_DEFINED__
typedef interface IWMSFileDescriptions IWMSFileDescriptions;
#endif 	/* __IWMSFileDescriptions_FWD_DEFINED__ */


#ifndef __IWMSAvailableIPAddresses_FWD_DEFINED__
#define __IWMSAvailableIPAddresses_FWD_DEFINED__
typedef interface IWMSAvailableIPAddresses IWMSAvailableIPAddresses;
#endif 	/* __IWMSAvailableIPAddresses_FWD_DEFINED__ */


#ifndef __IWMSPlugins_FWD_DEFINED__
#define __IWMSPlugins_FWD_DEFINED__
typedef interface IWMSPlugins IWMSPlugins;
#endif 	/* __IWMSPlugins_FWD_DEFINED__ */


#ifndef __IWMSCacheItem_FWD_DEFINED__
#define __IWMSCacheItem_FWD_DEFINED__
typedef interface IWMSCacheItem IWMSCacheItem;
#endif 	/* __IWMSCacheItem_FWD_DEFINED__ */


#ifndef __IWMSCacheItems_FWD_DEFINED__
#define __IWMSCacheItems_FWD_DEFINED__
typedef interface IWMSCacheItems IWMSCacheItems;
#endif 	/* __IWMSCacheItems_FWD_DEFINED__ */


#ifndef __IWMSCacheProxyPlugin_FWD_DEFINED__
#define __IWMSCacheProxyPlugin_FWD_DEFINED__
typedef interface IWMSCacheProxyPlugin IWMSCacheProxyPlugin;
#endif 	/* __IWMSCacheProxyPlugin_FWD_DEFINED__ */


#ifndef __IWMSOutgoingDistributionConnection_FWD_DEFINED__
#define __IWMSOutgoingDistributionConnection_FWD_DEFINED__
typedef interface IWMSOutgoingDistributionConnection IWMSOutgoingDistributionConnection;
#endif 	/* __IWMSOutgoingDistributionConnection_FWD_DEFINED__ */


#ifndef __IWMSOutgoingDistributionConnections_FWD_DEFINED__
#define __IWMSOutgoingDistributionConnections_FWD_DEFINED__
typedef interface IWMSOutgoingDistributionConnections IWMSOutgoingDistributionConnections;
#endif 	/* __IWMSOutgoingDistributionConnections_FWD_DEFINED__ */


#ifndef __IWMSPlayer_FWD_DEFINED__
#define __IWMSPlayer_FWD_DEFINED__
typedef interface IWMSPlayer IWMSPlayer;
#endif 	/* __IWMSPlayer_FWD_DEFINED__ */


#ifndef __IWMSPlayers_FWD_DEFINED__
#define __IWMSPlayers_FWD_DEFINED__
typedef interface IWMSPlayers IWMSPlayers;
#endif 	/* __IWMSPlayers_FWD_DEFINED__ */


#ifndef __IWMSPublishingPointCurrentCounters_FWD_DEFINED__
#define __IWMSPublishingPointCurrentCounters_FWD_DEFINED__
typedef interface IWMSPublishingPointCurrentCounters IWMSPublishingPointCurrentCounters;
#endif 	/* __IWMSPublishingPointCurrentCounters_FWD_DEFINED__ */


#ifndef __IWMSPublishingPointCurrentCounters2_FWD_DEFINED__
#define __IWMSPublishingPointCurrentCounters2_FWD_DEFINED__
typedef interface IWMSPublishingPointCurrentCounters2 IWMSPublishingPointCurrentCounters2;
#endif 	/* __IWMSPublishingPointCurrentCounters2_FWD_DEFINED__ */


#ifndef __IWMSPublishingPointPeakCounters_FWD_DEFINED__
#define __IWMSPublishingPointPeakCounters_FWD_DEFINED__
typedef interface IWMSPublishingPointPeakCounters IWMSPublishingPointPeakCounters;
#endif 	/* __IWMSPublishingPointPeakCounters_FWD_DEFINED__ */


#ifndef __IWMSPublishingPointPeakCounters2_FWD_DEFINED__
#define __IWMSPublishingPointPeakCounters2_FWD_DEFINED__
typedef interface IWMSPublishingPointPeakCounters2 IWMSPublishingPointPeakCounters2;
#endif 	/* __IWMSPublishingPointPeakCounters2_FWD_DEFINED__ */


#ifndef __IWMSPublishingPointLimits_FWD_DEFINED__
#define __IWMSPublishingPointLimits_FWD_DEFINED__
typedef interface IWMSPublishingPointLimits IWMSPublishingPointLimits;
#endif 	/* __IWMSPublishingPointLimits_FWD_DEFINED__ */


#ifndef __IWMSPublishingPointTotalCounters_FWD_DEFINED__
#define __IWMSPublishingPointTotalCounters_FWD_DEFINED__
typedef interface IWMSPublishingPointTotalCounters IWMSPublishingPointTotalCounters;
#endif 	/* __IWMSPublishingPointTotalCounters_FWD_DEFINED__ */


#ifndef __IWMSPublishingPointTotalCounters2_FWD_DEFINED__
#define __IWMSPublishingPointTotalCounters2_FWD_DEFINED__
typedef interface IWMSPublishingPointTotalCounters2 IWMSPublishingPointTotalCounters2;
#endif 	/* __IWMSPublishingPointTotalCounters2_FWD_DEFINED__ */


#ifndef __IWMSServerTotalCounters_FWD_DEFINED__
#define __IWMSServerTotalCounters_FWD_DEFINED__
typedef interface IWMSServerTotalCounters IWMSServerTotalCounters;
#endif 	/* __IWMSServerTotalCounters_FWD_DEFINED__ */


#ifndef __IWMSServerTotalCounters2_FWD_DEFINED__
#define __IWMSServerTotalCounters2_FWD_DEFINED__
typedef interface IWMSServerTotalCounters2 IWMSServerTotalCounters2;
#endif 	/* __IWMSServerTotalCounters2_FWD_DEFINED__ */


#ifndef __IWMSPublishingPoint_FWD_DEFINED__
#define __IWMSPublishingPoint_FWD_DEFINED__
typedef interface IWMSPublishingPoint IWMSPublishingPoint;
#endif 	/* __IWMSPublishingPoint_FWD_DEFINED__ */


#ifndef __IWMSPublishingPoint2_FWD_DEFINED__
#define __IWMSPublishingPoint2_FWD_DEFINED__
typedef interface IWMSPublishingPoint2 IWMSPublishingPoint2;
#endif 	/* __IWMSPublishingPoint2_FWD_DEFINED__ */


#ifndef __IWMSOnDemandPublishingPoint_FWD_DEFINED__
#define __IWMSOnDemandPublishingPoint_FWD_DEFINED__
typedef interface IWMSOnDemandPublishingPoint IWMSOnDemandPublishingPoint;
#endif 	/* __IWMSOnDemandPublishingPoint_FWD_DEFINED__ */


#ifndef __IWMSOnDemandPublishingPoint2_FWD_DEFINED__
#define __IWMSOnDemandPublishingPoint2_FWD_DEFINED__
typedef interface IWMSOnDemandPublishingPoint2 IWMSOnDemandPublishingPoint2;
#endif 	/* __IWMSOnDemandPublishingPoint2_FWD_DEFINED__ */


#ifndef __IWMSAnnouncementStreamFormats_FWD_DEFINED__
#define __IWMSAnnouncementStreamFormats_FWD_DEFINED__
typedef interface IWMSAnnouncementStreamFormats IWMSAnnouncementStreamFormats;
#endif 	/* __IWMSAnnouncementStreamFormats_FWD_DEFINED__ */


#ifndef __IWMSBroadcastPublishingPoint_FWD_DEFINED__
#define __IWMSBroadcastPublishingPoint_FWD_DEFINED__
typedef interface IWMSBroadcastPublishingPoint IWMSBroadcastPublishingPoint;
#endif 	/* __IWMSBroadcastPublishingPoint_FWD_DEFINED__ */


#ifndef __IWMSBroadcastPublishingPoint2_FWD_DEFINED__
#define __IWMSBroadcastPublishingPoint2_FWD_DEFINED__
typedef interface IWMSBroadcastPublishingPoint2 IWMSBroadcastPublishingPoint2;
#endif 	/* __IWMSBroadcastPublishingPoint2_FWD_DEFINED__ */


#ifndef __IWMSPublishingPoints_FWD_DEFINED__
#define __IWMSPublishingPoints_FWD_DEFINED__
typedef interface IWMSPublishingPoints IWMSPublishingPoints;
#endif 	/* __IWMSPublishingPoints_FWD_DEFINED__ */


#ifndef __IWMSServerCurrentCounters_FWD_DEFINED__
#define __IWMSServerCurrentCounters_FWD_DEFINED__
typedef interface IWMSServerCurrentCounters IWMSServerCurrentCounters;
#endif 	/* __IWMSServerCurrentCounters_FWD_DEFINED__ */


#ifndef __IWMSServerCurrentCounters2_FWD_DEFINED__
#define __IWMSServerCurrentCounters2_FWD_DEFINED__
typedef interface IWMSServerCurrentCounters2 IWMSServerCurrentCounters2;
#endif 	/* __IWMSServerCurrentCounters2_FWD_DEFINED__ */


#ifndef __IWMSServerPeakCounters_FWD_DEFINED__
#define __IWMSServerPeakCounters_FWD_DEFINED__
typedef interface IWMSServerPeakCounters IWMSServerPeakCounters;
#endif 	/* __IWMSServerPeakCounters_FWD_DEFINED__ */


#ifndef __IWMSServerPeakCounters2_FWD_DEFINED__
#define __IWMSServerPeakCounters2_FWD_DEFINED__
typedef interface IWMSServerPeakCounters2 IWMSServerPeakCounters2;
#endif 	/* __IWMSServerPeakCounters2_FWD_DEFINED__ */


#ifndef __IWMSServerLimits_FWD_DEFINED__
#define __IWMSServerLimits_FWD_DEFINED__
typedef interface IWMSServerLimits IWMSServerLimits;
#endif 	/* __IWMSServerLimits_FWD_DEFINED__ */


#ifndef __IWMSServer_FWD_DEFINED__
#define __IWMSServer_FWD_DEFINED__
typedef interface IWMSServer IWMSServer;
#endif 	/* __IWMSServer_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "xmldom.h"
#include "WMSNamedValues.h"
#include "WMSPlugin.h"
#include "wmsXMLDOMExtensions.h"
#include "streamcache.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_wmsserver_0000_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows Media Technologies
//  Copyright (C) Microsoft Corporation. All rights reserved.
//
//  Automatically generated by Midl from WMSServer.idl 
//
// DO NOT EDIT THIS FILE.
//
//--------------------------------------------------------------------------
#pragma once
#ifndef __wmsserver_iid
#define __wmsserver_iid
EXTERN_GUID( CLSID_WMSServerMainImpl,    0x1E62CD49,0x3961,0x11D2,0x9E,0xFC,0x00,0x60,0x97,0xD2,0xD7,0xCF  );
#include <WMSDefs.h>


extern RPC_IF_HANDLE __MIDL_itf_wmsserver_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsserver_0000_0000_v0_0_s_ifspec;

#ifndef __IWMSRootDirectories_INTERFACE_DEFINED__
#define __IWMSRootDirectories_INTERFACE_DEFINED__

/* interface IWMSRootDirectories */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSRootDirectories;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DFC750A9-F846-48be-87AE-79F851C9CD92")
    IWMSRootDirectories : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSRootDirectoriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSRootDirectories * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSRootDirectories * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSRootDirectories * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSRootDirectories * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSRootDirectories * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSRootDirectories * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSRootDirectories * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSRootDirectories * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSRootDirectories * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSRootDirectories * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSRootDirectories * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        END_INTERFACE
    } IWMSRootDirectoriesVtbl;

    interface IWMSRootDirectories
    {
        CONST_VTBL struct IWMSRootDirectoriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSRootDirectories_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSRootDirectories_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSRootDirectories_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSRootDirectories_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSRootDirectories_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSRootDirectories_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSRootDirectories_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSRootDirectories_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSRootDirectories_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSRootDirectories_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSRootDirectories_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSRootDirectories_INTERFACE_DEFINED__ */


#ifndef __IWMSDiagnosticEvent_INTERFACE_DEFINED__
#define __IWMSDiagnosticEvent_INTERFACE_DEFINED__

/* interface IWMSDiagnosticEvent */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("5AC19D63-6057-4431-BE7E-2153FDF91397") 
enum WMS_DIAGNOSTIC_EVENT
    {	WMS_DIAGNOSTIC_EVENT_LIMIT_HIT	= 0,
	WMS_DIAGNOSTIC_EVENT_PLUGIN_EVENT_LOG_ERROR	= 1,
	WMS_DIAGNOSTIC_EVENT_PLUGIN_EVENT_LOG_WARNING	= 2,
	WMS_DIAGNOSTIC_EVENT_SERVER_EVENT_LOG_ERROR	= 3,
	WMS_DIAGNOSTIC_EVENT_SERVER_EVENT_LOG_WARNING	= 4
    } 	WMS_DIAGNOSTIC_EVENT;


EXTERN_C const IID IID_IWMSDiagnosticEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5AC19D62-6057-4431-BE7E-2153FDF91397")
    IWMSDiagnosticEvent : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out WMS_DIAGNOSTIC_EVENT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PublishingPointName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Time( 
            /* [retval][out] */ __RPC__out DATE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfOccurrences( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AdditionalInfo( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorCode( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSDiagnosticEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSDiagnosticEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSDiagnosticEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSDiagnosticEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSDiagnosticEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSDiagnosticEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSDiagnosticEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSDiagnosticEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSDiagnosticEvent * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSDiagnosticEvent * This,
            /* [retval][out] */ __RPC__out WMS_DIAGNOSTIC_EVENT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PublishingPointName )( 
            IWMSDiagnosticEvent * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Time )( 
            IWMSDiagnosticEvent * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfOccurrences )( 
            IWMSDiagnosticEvent * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AdditionalInfo )( 
            IWMSDiagnosticEvent * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorCode )( 
            IWMSDiagnosticEvent * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSDiagnosticEventVtbl;

    interface IWMSDiagnosticEvent
    {
        CONST_VTBL struct IWMSDiagnosticEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSDiagnosticEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSDiagnosticEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSDiagnosticEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSDiagnosticEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSDiagnosticEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSDiagnosticEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSDiagnosticEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSDiagnosticEvent_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSDiagnosticEvent_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSDiagnosticEvent_get_PublishingPointName(This,pVal)	\
    ( (This)->lpVtbl -> get_PublishingPointName(This,pVal) ) 

#define IWMSDiagnosticEvent_get_Time(This,pVal)	\
    ( (This)->lpVtbl -> get_Time(This,pVal) ) 

#define IWMSDiagnosticEvent_get_NumberOfOccurrences(This,pVal)	\
    ( (This)->lpVtbl -> get_NumberOfOccurrences(This,pVal) ) 

#define IWMSDiagnosticEvent_get_AdditionalInfo(This,pVal)	\
    ( (This)->lpVtbl -> get_AdditionalInfo(This,pVal) ) 

#define IWMSDiagnosticEvent_get_ErrorCode(This,pVal)	\
    ( (This)->lpVtbl -> get_ErrorCode(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSDiagnosticEvent_INTERFACE_DEFINED__ */


#ifndef __IWMSDiagnosticEvents_INTERFACE_DEFINED__
#define __IWMSDiagnosticEvents_INTERFACE_DEFINED__

/* interface IWMSDiagnosticEvents */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSDiagnosticEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5AC19D61-6057-4431-BE7E-2153FDF91397")
    IWMSDiagnosticEvents : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSDiagnosticEvent **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSDiagnosticEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSDiagnosticEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSDiagnosticEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSDiagnosticEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSDiagnosticEvents * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSDiagnosticEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSDiagnosticEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSDiagnosticEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSDiagnosticEvents * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSDiagnosticEvent **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSDiagnosticEvents * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSDiagnosticEvents * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSDiagnosticEvents * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IWMSDiagnosticEvents * This);
        
        END_INTERFACE
    } IWMSDiagnosticEventsVtbl;

    interface IWMSDiagnosticEvents
    {
        CONST_VTBL struct IWMSDiagnosticEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSDiagnosticEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSDiagnosticEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSDiagnosticEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSDiagnosticEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSDiagnosticEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSDiagnosticEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSDiagnosticEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSDiagnosticEvents_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSDiagnosticEvents_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSDiagnosticEvents_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSDiagnosticEvents_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSDiagnosticEvents_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSDiagnosticEvents_INTERFACE_DEFINED__ */


#ifndef __IWMSFileDescription_INTERFACE_DEFINED__
#define __IWMSFileDescription_INTERFACE_DEFINED__

/* interface IWMSFileDescription */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("4124B8B4-BCE4-41c8-B49A-DA98C1401D3B") 
enum WMS_FILE_TYPE
    {	WMS_FILE_UNSPECIFIED	= 0,
	WMS_FILE_DIRECTORY	= 1,
	WMS_FILE_MEDIA	= 2,
	WMS_FILE_PLAYLIST	= 3,
	WMS_FILE_STREAM_FORMAT	= 4,
	WMS_FILE_REMOTE_FILE	= 5
    } 	WMS_FILE_TYPE;


EXTERN_C const IID IID_IWMSFileDescription;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4124B8B3-BCE4-41c8-B49A-DA98C1401D3B")
    IWMSFileDescription : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out WMS_FILE_TYPE *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSFileDescriptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSFileDescription * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSFileDescription * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSFileDescription * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSFileDescription * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSFileDescription * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSFileDescription * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSFileDescription * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSFileDescription * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSFileDescription * This,
            /* [retval][out] */ __RPC__out WMS_FILE_TYPE *pVal);
        
        END_INTERFACE
    } IWMSFileDescriptionVtbl;

    interface IWMSFileDescription
    {
        CONST_VTBL struct IWMSFileDescriptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSFileDescription_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSFileDescription_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSFileDescription_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSFileDescription_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSFileDescription_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSFileDescription_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSFileDescription_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSFileDescription_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSFileDescription_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSFileDescription_INTERFACE_DEFINED__ */


#ifndef __IWMSFileDescriptions_INTERFACE_DEFINED__
#define __IWMSFileDescriptions_INTERFACE_DEFINED__

/* interface IWMSFileDescriptions */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSFileDescriptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4124B8B2-BCE4-41c8-B49A-DA98C1401D3B")
    IWMSFileDescriptions : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescription **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ const VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateDataSourceDirectory( 
            /* [in] */ __RPC__in BSTR bstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSFileDescriptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSFileDescriptions * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSFileDescriptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSFileDescriptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSFileDescriptions * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSFileDescriptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSFileDescriptions * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSFileDescriptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSFileDescriptions * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescription **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSFileDescriptions * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSFileDescriptions * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSFileDescriptions * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IWMSFileDescriptions * This,
            /* [in] */ const VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateDataSourceDirectory )( 
            IWMSFileDescriptions * This,
            /* [in] */ __RPC__in BSTR bstrName);
        
        END_INTERFACE
    } IWMSFileDescriptionsVtbl;

    interface IWMSFileDescriptions
    {
        CONST_VTBL struct IWMSFileDescriptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSFileDescriptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSFileDescriptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSFileDescriptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSFileDescriptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSFileDescriptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSFileDescriptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSFileDescriptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSFileDescriptions_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSFileDescriptions_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSFileDescriptions_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSFileDescriptions_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSFileDescriptions_Delete(This,varIndex)	\
    ( (This)->lpVtbl -> Delete(This,varIndex) ) 

#define IWMSFileDescriptions_CreateDataSourceDirectory(This,bstrName)	\
    ( (This)->lpVtbl -> CreateDataSourceDirectory(This,bstrName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSFileDescriptions_INTERFACE_DEFINED__ */


#ifndef __IWMSAvailableIPAddresses_INTERFACE_DEFINED__
#define __IWMSAvailableIPAddresses_INTERFACE_DEFINED__

/* interface IWMSAvailableIPAddresses */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSAvailableIPAddresses;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3FC1A813-759F-4441-BA48-21889EC8AC20")
    IWMSAvailableIPAddresses : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSAvailableIPAddressesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSAvailableIPAddresses * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSAvailableIPAddresses * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSAvailableIPAddresses * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSAvailableIPAddresses * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSAvailableIPAddresses * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSAvailableIPAddresses * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSAvailableIPAddresses * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSAvailableIPAddresses * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSAvailableIPAddresses * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSAvailableIPAddresses * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSAvailableIPAddresses * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        END_INTERFACE
    } IWMSAvailableIPAddressesVtbl;

    interface IWMSAvailableIPAddresses
    {
        CONST_VTBL struct IWMSAvailableIPAddressesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSAvailableIPAddresses_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSAvailableIPAddresses_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSAvailableIPAddresses_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSAvailableIPAddresses_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSAvailableIPAddresses_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSAvailableIPAddresses_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSAvailableIPAddresses_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSAvailableIPAddresses_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSAvailableIPAddresses_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSAvailableIPAddresses_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSAvailableIPAddresses_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSAvailableIPAddresses_INTERFACE_DEFINED__ */


#ifndef __IWMSPlugins_INTERFACE_DEFINED__
#define __IWMSPlugins_INTERFACE_DEFINED__

/* interface IWMSPlugins */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPlugins;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("517758ec-603c-4b98-82c1-4b2fa7787166")
    IWMSPlugins : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugin **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Clone( 
            /* [in] */ __RPC__in BSTR bstrDestName,
            /* [in] */ __RPC__in_opt IWMSPlugin *pSrcPlugin,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugin **pDestPlugin) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Category( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPluginsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlugins * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlugins * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlugins * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPlugins * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPlugins * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPlugins * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPlugins * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSPlugins * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugin **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSPlugins * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSPlugins * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSPlugins * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IWMSPlugins * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            IWMSPlugins * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IWMSPlugins * This,
            /* [in] */ __RPC__in BSTR bstrDestName,
            /* [in] */ __RPC__in_opt IWMSPlugin *pSrcPlugin,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugin **pDestPlugin);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            IWMSPlugins * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        END_INTERFACE
    } IWMSPluginsVtbl;

    interface IWMSPlugins
    {
        CONST_VTBL struct IWMSPluginsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlugins_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlugins_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlugins_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlugins_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPlugins_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPlugins_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPlugins_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPlugins_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSPlugins_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSPlugins_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSPlugins_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSPlugins_Remove(This,varIndex)	\
    ( (This)->lpVtbl -> Remove(This,varIndex) ) 

#define IWMSPlugins_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IWMSPlugins_Clone(This,bstrDestName,pSrcPlugin,pDestPlugin)	\
    ( (This)->lpVtbl -> Clone(This,bstrDestName,pSrcPlugin,pDestPlugin) ) 

#define IWMSPlugins_get_Category(This,pVal)	\
    ( (This)->lpVtbl -> get_Category(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlugins_INTERFACE_DEFINED__ */


#ifndef __IWMSCacheItem_INTERFACE_DEFINED__
#define __IWMSCacheItem_INTERFACE_DEFINED__

/* interface IWMSCacheItem */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSCacheItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("517758e8-603c-4b98-82c1-4b2fa7787166")
    IWMSCacheItem : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OriginUrl( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pOriginUrl) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ContentSize( 
            /* [retval][out] */ __RPC__out VARIANT *pContentSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSCacheItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSCacheItem * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSCacheItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSCacheItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSCacheItem * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSCacheItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSCacheItem * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSCacheItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginUrl )( 
            IWMSCacheItem * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pOriginUrl);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ContentSize )( 
            IWMSCacheItem * This,
            /* [retval][out] */ __RPC__out VARIANT *pContentSize);
        
        END_INTERFACE
    } IWMSCacheItemVtbl;

    interface IWMSCacheItem
    {
        CONST_VTBL struct IWMSCacheItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSCacheItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSCacheItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSCacheItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSCacheItem_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSCacheItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSCacheItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSCacheItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSCacheItem_get_OriginUrl(This,pOriginUrl)	\
    ( (This)->lpVtbl -> get_OriginUrl(This,pOriginUrl) ) 

#define IWMSCacheItem_get_ContentSize(This,pContentSize)	\
    ( (This)->lpVtbl -> get_ContentSize(This,pContentSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSCacheItem_INTERFACE_DEFINED__ */


#ifndef __IWMSCacheItems_INTERFACE_DEFINED__
#define __IWMSCacheItems_INTERFACE_DEFINED__

/* interface IWMSCacheItems */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSCacheItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("517758e9-603c-4b98-82c1-4b2fa7787166")
    IWMSCacheItems : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSCacheItem **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSCacheItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSCacheItems * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSCacheItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSCacheItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSCacheItems * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSCacheItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSCacheItems * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSCacheItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSCacheItems * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSCacheItem **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSCacheItems * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSCacheItems * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSCacheItems * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            IWMSCacheItems * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAll )( 
            IWMSCacheItems * This);
        
        END_INTERFACE
    } IWMSCacheItemsVtbl;

    interface IWMSCacheItems
    {
        CONST_VTBL struct IWMSCacheItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSCacheItems_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSCacheItems_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSCacheItems_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSCacheItems_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSCacheItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSCacheItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSCacheItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSCacheItems_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSCacheItems_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSCacheItems_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSCacheItems_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSCacheItems_Delete(This,varIndex)	\
    ( (This)->lpVtbl -> Delete(This,varIndex) ) 

#define IWMSCacheItems_DeleteAll(This)	\
    ( (This)->lpVtbl -> DeleteAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSCacheItems_INTERFACE_DEFINED__ */


#ifndef __IWMSCacheProxyPlugin_INTERFACE_DEFINED__
#define __IWMSCacheProxyPlugin_INTERFACE_DEFINED__

/* interface IWMSCacheProxyPlugin */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSCacheProxyPlugin;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("517758eb-603c-4b98-82c1-4b2fa7787166")
    IWMSCacheProxyPlugin : public IWMSPlugin
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PreStuff( 
            /* [in] */ __RPC__in BSTR OriginURL,
            /* [defaultvalue][in] */ __RPC__in BSTR SourcePath = L"",
            /* [defaultvalue][in] */ long lExpiration = -1,
            /* [defaultvalue][in] */ long lBandwidth = 0,
            /* [defaultvalue][in] */ long lRemoteEventFlags = 0) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CacheItems( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSCacheItems **ppVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSCacheProxyPluginVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSCacheProxyPlugin * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSCacheProxyPlugin * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSCacheProxyPlugin * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ __RPC__in BSTR pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CLSID )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomInterface )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorCode )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LoadType )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__out WMS_PLUGIN_LOAD_TYPE *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LoadType )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ WMS_PLUGIN_LOAD_TYPE val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorText )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionOrder )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SelectionOrder )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ long lVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SupportStatus )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__out WMS_PLUGIN_SUPPORT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PreStuff )( 
            IWMSCacheProxyPlugin * This,
            /* [in] */ __RPC__in BSTR OriginURL,
            /* [defaultvalue][in] */ __RPC__in BSTR SourcePath,
            /* [defaultvalue][in] */ long lExpiration,
            /* [defaultvalue][in] */ long lBandwidth,
            /* [defaultvalue][in] */ long lRemoteEventFlags);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheItems )( 
            IWMSCacheProxyPlugin * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSCacheItems **ppVal);
        
        END_INTERFACE
    } IWMSCacheProxyPluginVtbl;

    interface IWMSCacheProxyPlugin
    {
        CONST_VTBL struct IWMSCacheProxyPluginVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSCacheProxyPlugin_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSCacheProxyPlugin_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSCacheProxyPlugin_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSCacheProxyPlugin_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSCacheProxyPlugin_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSCacheProxyPlugin_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSCacheProxyPlugin_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSCacheProxyPlugin_put_Name(This,pVal)	\
    ( (This)->lpVtbl -> put_Name(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_Enabled(This,pVal)	\
    ( (This)->lpVtbl -> get_Enabled(This,pVal) ) 

#define IWMSCacheProxyPlugin_put_Enabled(This,newVal)	\
    ( (This)->lpVtbl -> put_Enabled(This,newVal) ) 

#define IWMSCacheProxyPlugin_get_CLSID(This,pVal)	\
    ( (This)->lpVtbl -> get_CLSID(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_CustomInterface(This,ppVal)	\
    ( (This)->lpVtbl -> get_CustomInterface(This,ppVal) ) 

#define IWMSCacheProxyPlugin_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_ErrorCode(This,pVal)	\
    ( (This)->lpVtbl -> get_ErrorCode(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_Version(This,pVal)	\
    ( (This)->lpVtbl -> get_Version(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_LoadType(This,pVal)	\
    ( (This)->lpVtbl -> get_LoadType(This,pVal) ) 

#define IWMSCacheProxyPlugin_put_LoadType(This,val)	\
    ( (This)->lpVtbl -> put_LoadType(This,val) ) 

#define IWMSCacheProxyPlugin_get_ErrorText(This,pVal)	\
    ( (This)->lpVtbl -> get_ErrorText(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_SelectionOrder(This,pVal)	\
    ( (This)->lpVtbl -> get_SelectionOrder(This,pVal) ) 

#define IWMSCacheProxyPlugin_put_SelectionOrder(This,lVal)	\
    ( (This)->lpVtbl -> put_SelectionOrder(This,lVal) ) 

#define IWMSCacheProxyPlugin_get_SupportStatus(This,pVal)	\
    ( (This)->lpVtbl -> get_SupportStatus(This,pVal) ) 

#define IWMSCacheProxyPlugin_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 


#define IWMSCacheProxyPlugin_PreStuff(This,OriginURL,SourcePath,lExpiration,lBandwidth,lRemoteEventFlags)	\
    ( (This)->lpVtbl -> PreStuff(This,OriginURL,SourcePath,lExpiration,lBandwidth,lRemoteEventFlags) ) 

#define IWMSCacheProxyPlugin_get_CacheItems(This,ppVal)	\
    ( (This)->lpVtbl -> get_CacheItems(This,ppVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSCacheProxyPlugin_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_wmsserver_0000_0010 */
/* [local] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("60f2ee55-dcaa-4cb6-a6d2-12bc23ac9df0") 
enum WMS_CLIENT_STATUS
    {	WMS_CLIENT_DISCONNECTED	= 0,
	WMS_CLIENT_IDLE	= 0x1,
	WMS_CLIENT_OPEN	= 0x2,
	WMS_CLIENT_STREAMING	= 0x3
    } 	WMS_CLIENT_STATUS;



extern RPC_IF_HANDLE __MIDL_itf_wmsserver_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wmsserver_0000_0010_v0_0_s_ifspec;

#ifndef __IWMSOutgoingDistributionConnection_INTERFACE_DEFINED__
#define __IWMSOutgoingDistributionConnection_INTERFACE_DEFINED__

/* interface IWMSOutgoingDistributionConnection */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSOutgoingDistributionConnection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("60f2ee54-dcaa-4cb6-a6d2-12bc23ac9df0")
    IWMSOutgoingDistributionConnection : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NetworkAddress( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RequestedPlaylist( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RequestedURL( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ResolvedURL( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ __RPC__out WMS_CLIENT_STATUS *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WrapperPlaylist( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Port( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSOutgoingDistributionConnectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSOutgoingDistributionConnection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSOutgoingDistributionConnection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSOutgoingDistributionConnection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSOutgoingDistributionConnection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSOutgoingDistributionConnection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSOutgoingDistributionConnection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSOutgoingDistributionConnection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NetworkAddress )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RequestedPlaylist )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RequestedURL )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ResolvedURL )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__out WMS_CLIENT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPlaylist )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Port )( 
            IWMSOutgoingDistributionConnection * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSOutgoingDistributionConnectionVtbl;

    interface IWMSOutgoingDistributionConnection
    {
        CONST_VTBL struct IWMSOutgoingDistributionConnectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSOutgoingDistributionConnection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSOutgoingDistributionConnection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSOutgoingDistributionConnection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSOutgoingDistributionConnection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSOutgoingDistributionConnection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSOutgoingDistributionConnection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSOutgoingDistributionConnection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSOutgoingDistributionConnection_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSOutgoingDistributionConnection_get_NetworkAddress(This,pVal)	\
    ( (This)->lpVtbl -> get_NetworkAddress(This,pVal) ) 

#define IWMSOutgoingDistributionConnection_get_RequestedPlaylist(This,pVal)	\
    ( (This)->lpVtbl -> get_RequestedPlaylist(This,pVal) ) 

#define IWMSOutgoingDistributionConnection_get_RequestedURL(This,pVal)	\
    ( (This)->lpVtbl -> get_RequestedURL(This,pVal) ) 

#define IWMSOutgoingDistributionConnection_get_ResolvedURL(This,pVal)	\
    ( (This)->lpVtbl -> get_ResolvedURL(This,pVal) ) 

#define IWMSOutgoingDistributionConnection_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSOutgoingDistributionConnection_get_UserName(This,pVal)	\
    ( (This)->lpVtbl -> get_UserName(This,pVal) ) 

#define IWMSOutgoingDistributionConnection_get_WrapperPlaylist(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPlaylist(This,pVal) ) 

#define IWMSOutgoingDistributionConnection_get_Port(This,pVal)	\
    ( (This)->lpVtbl -> get_Port(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSOutgoingDistributionConnection_INTERFACE_DEFINED__ */


#ifndef __IWMSOutgoingDistributionConnections_INTERFACE_DEFINED__
#define __IWMSOutgoingDistributionConnections_INTERFACE_DEFINED__

/* interface IWMSOutgoingDistributionConnections */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSOutgoingDistributionConnections;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("60f2ee53-dcaa-4cb6-a6d2-12bc23ac9df0")
    IWMSOutgoingDistributionConnections : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnection **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSOutgoingDistributionConnectionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSOutgoingDistributionConnections * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSOutgoingDistributionConnections * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSOutgoingDistributionConnections * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSOutgoingDistributionConnections * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSOutgoingDistributionConnections * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSOutgoingDistributionConnections * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSOutgoingDistributionConnections * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSOutgoingDistributionConnections * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnection **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSOutgoingDistributionConnections * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSOutgoingDistributionConnections * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSOutgoingDistributionConnections * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            IWMSOutgoingDistributionConnections * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IWMSOutgoingDistributionConnections * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IWMSOutgoingDistributionConnections * This);
        
        END_INTERFACE
    } IWMSOutgoingDistributionConnectionsVtbl;

    interface IWMSOutgoingDistributionConnections
    {
        CONST_VTBL struct IWMSOutgoingDistributionConnectionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSOutgoingDistributionConnections_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSOutgoingDistributionConnections_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSOutgoingDistributionConnections_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSOutgoingDistributionConnections_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSOutgoingDistributionConnections_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSOutgoingDistributionConnections_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSOutgoingDistributionConnections_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSOutgoingDistributionConnections_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSOutgoingDistributionConnections_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSOutgoingDistributionConnections_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSOutgoingDistributionConnections_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSOutgoingDistributionConnections_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IWMSOutgoingDistributionConnections_Remove(This,varIndex)	\
    ( (This)->lpVtbl -> Remove(This,varIndex) ) 

#define IWMSOutgoingDistributionConnections_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSOutgoingDistributionConnections_INTERFACE_DEFINED__ */


#ifndef __IWMSPlayer_INTERFACE_DEFINED__
#define __IWMSPlayer_INTERFACE_DEFINED__

/* interface IWMSPlayer */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPlayer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("18812736-4BEC-11D2-BF25-00805FBE84A6")
    IWMSPlayer : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NetworkAddress( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RequestedPlaylist( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RequestedURL( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ResolvedURL( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ __RPC__out WMS_CLIENT_STATUS *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WrapperPlaylist( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Port( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPlayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlayer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlayer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlayer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPlayer * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPlayer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPlayer * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPlayer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NetworkAddress )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RequestedPlaylist )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RequestedURL )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ResolvedURL )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__out WMS_CLIENT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPlaylist )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Port )( 
            IWMSPlayer * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSPlayerVtbl;

    interface IWMSPlayer
    {
        CONST_VTBL struct IWMSPlayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlayer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlayer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlayer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlayer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPlayer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPlayer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPlayer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPlayer_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSPlayer_get_NetworkAddress(This,pVal)	\
    ( (This)->lpVtbl -> get_NetworkAddress(This,pVal) ) 

#define IWMSPlayer_get_RequestedPlaylist(This,pVal)	\
    ( (This)->lpVtbl -> get_RequestedPlaylist(This,pVal) ) 

#define IWMSPlayer_get_RequestedURL(This,pVal)	\
    ( (This)->lpVtbl -> get_RequestedURL(This,pVal) ) 

#define IWMSPlayer_get_ResolvedURL(This,pVal)	\
    ( (This)->lpVtbl -> get_ResolvedURL(This,pVal) ) 

#define IWMSPlayer_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSPlayer_get_UserName(This,pVal)	\
    ( (This)->lpVtbl -> get_UserName(This,pVal) ) 

#define IWMSPlayer_get_WrapperPlaylist(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPlaylist(This,pVal) ) 

#define IWMSPlayer_get_Port(This,pVal)	\
    ( (This)->lpVtbl -> get_Port(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlayer_INTERFACE_DEFINED__ */


#ifndef __IWMSPlayers_INTERFACE_DEFINED__
#define __IWMSPlayers_INTERFACE_DEFINED__

/* interface IWMSPlayers */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPlayers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("18812738-4BEC-11D2-BF25-00805FBE84A6")
    IWMSPlayers : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayer **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPlayersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPlayers * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPlayers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPlayers * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPlayers * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPlayers * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPlayers * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPlayers * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSPlayers * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayer **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSPlayers * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSPlayers * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSPlayers * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            IWMSPlayers * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IWMSPlayers * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IWMSPlayers * This);
        
        END_INTERFACE
    } IWMSPlayersVtbl;

    interface IWMSPlayers
    {
        CONST_VTBL struct IWMSPlayersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPlayers_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPlayers_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPlayers_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPlayers_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPlayers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPlayers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPlayers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPlayers_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSPlayers_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSPlayers_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSPlayers_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSPlayers_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IWMSPlayers_Remove(This,varIndex)	\
    ( (This)->lpVtbl -> Remove(This,varIndex) ) 

#define IWMSPlayers_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPlayers_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointCurrentCounters_INTERFACE_DEFINED__
#define __IWMSPublishingPointCurrentCounters_INTERFACE_DEFINED__

/* interface IWMSPublishingPointCurrentCounters */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointCurrentCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("638DFA30-1054-48bd-B030-C3DA1FC18154")
    IWMSPublishingPointCurrentCounters : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingHTTPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingMMSPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionAllocatedBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerAllocatedBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingRTSPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllCounters( 
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointCurrentCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointCurrentCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointCurrentCounters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingMMSPlayers )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionAllocatedBandwidth )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAllocatedBandwidth )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSPublishingPointCurrentCounters * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        END_INTERFACE
    } IWMSPublishingPointCurrentCountersVtbl;

    interface IWMSPublishingPointCurrentCounters
    {
        CONST_VTBL struct IWMSPublishingPointCurrentCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointCurrentCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointCurrentCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointCurrentCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointCurrentCounters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointCurrentCounters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointCurrentCounters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointCurrentCounters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointCurrentCounters_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters_get_StreamingMMSPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingMMSPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters_get_OutgoingDistributionAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionAllocatedBandwidth(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters_get_PlayerAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAllocatedBandwidth(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointCurrentCounters_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointCurrentCounters2_INTERFACE_DEFINED__
#define __IWMSPublishingPointCurrentCounters2_INTERFACE_DEFINED__

/* interface IWMSPublishingPointCurrentCounters2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointCurrentCounters2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("406AEC46-7318-4860-808C-2F8EB06EC765")
    IWMSPublishingPointCurrentCounters2 : public IWMSPublishingPointCurrentCounters
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingUDPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointCurrentCounters2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointCurrentCounters2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointCurrentCounters2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingMMSPlayers )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionAllocatedBandwidth )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAllocatedBandwidth )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingUDPPlayers )( 
            IWMSPublishingPointCurrentCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSPublishingPointCurrentCounters2Vtbl;

    interface IWMSPublishingPointCurrentCounters2
    {
        CONST_VTBL struct IWMSPublishingPointCurrentCounters2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointCurrentCounters2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointCurrentCounters2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointCurrentCounters2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointCurrentCounters2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointCurrentCounters2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointCurrentCounters2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointCurrentCounters2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointCurrentCounters2_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters2_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters2_get_StreamingMMSPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingMMSPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters2_get_OutgoingDistributionAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionAllocatedBandwidth(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters2_get_PlayerAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAllocatedBandwidth(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters2_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters2_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSPublishingPointCurrentCounters2_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 


#define IWMSPublishingPointCurrentCounters2_get_StreamingUDPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingUDPPlayers(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointCurrentCounters2_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointPeakCounters_INTERFACE_DEFINED__
#define __IWMSPublishingPointPeakCounters_INTERFACE_DEFINED__

/* interface IWMSPublishingPointPeakCounters */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointPeakCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("43B20CC5-CA36-4e7b-ADAF-C9C60D00BB0E")
    IWMSPublishingPointPeakCounters : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionAllocatedBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerAllocatedBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountersStartTime( 
            /* [retval][out] */ __RPC__out DATE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllCounters( 
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointPeakCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointPeakCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointPeakCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointPeakCounters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointPeakCounters * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointPeakCounters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointPeakCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointPeakCounters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionAllocatedBandwidth )( 
            IWMSPublishingPointPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAllocatedBandwidth )( 
            IWMSPublishingPointPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSPublishingPointPeakCounters * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSPublishingPointPeakCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSPublishingPointPeakCounters * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSPublishingPointPeakCounters * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        END_INTERFACE
    } IWMSPublishingPointPeakCountersVtbl;

    interface IWMSPublishingPointPeakCounters
    {
        CONST_VTBL struct IWMSPublishingPointPeakCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointPeakCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointPeakCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointPeakCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointPeakCounters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointPeakCounters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointPeakCounters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointPeakCounters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointPeakCounters_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointPeakCounters_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointPeakCounters_get_OutgoingDistributionAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionAllocatedBandwidth(This,pVal) ) 

#define IWMSPublishingPointPeakCounters_get_PlayerAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAllocatedBandwidth(This,pVal) ) 

#define IWMSPublishingPointPeakCounters_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSPublishingPointPeakCounters_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSPublishingPointPeakCounters_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSPublishingPointPeakCounters_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointPeakCounters_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointPeakCounters2_INTERFACE_DEFINED__
#define __IWMSPublishingPointPeakCounters2_INTERFACE_DEFINED__

/* interface IWMSPublishingPointPeakCounters2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointPeakCounters2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22101970-6BF1-43e3-BFF4-6BF57044FC4C")
    IWMSPublishingPointPeakCounters2 : public IWMSPublishingPointPeakCounters
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingUDPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingHTTPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingRTSPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointPeakCounters2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointPeakCounters2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointPeakCounters2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionAllocatedBandwidth )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerAllocatedBandwidth )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSPublishingPointPeakCounters2 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingUDPPlayers )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSPublishingPointPeakCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSPublishingPointPeakCounters2Vtbl;

    interface IWMSPublishingPointPeakCounters2
    {
        CONST_VTBL struct IWMSPublishingPointPeakCounters2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointPeakCounters2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointPeakCounters2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointPeakCounters2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointPeakCounters2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointPeakCounters2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointPeakCounters2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointPeakCounters2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointPeakCounters2_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointPeakCounters2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointPeakCounters2_get_OutgoingDistributionAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionAllocatedBandwidth(This,pVal) ) 

#define IWMSPublishingPointPeakCounters2_get_PlayerAllocatedBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerAllocatedBandwidth(This,pVal) ) 

#define IWMSPublishingPointPeakCounters2_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSPublishingPointPeakCounters2_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSPublishingPointPeakCounters2_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSPublishingPointPeakCounters2_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 


#define IWMSPublishingPointPeakCounters2_get_StreamingUDPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingUDPPlayers(This,pVal) ) 

#define IWMSPublishingPointPeakCounters2_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSPublishingPointPeakCounters2_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointPeakCounters2_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointLimits_INTERFACE_DEFINED__
#define __IWMSPublishingPointLimits_INTERFACE_DEFINED__

/* interface IWMSPublishingPointLimits */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointLimits;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6CD5BC19-35FD-4501-A953-FEB57AAE9C13")
    IWMSPublishingPointLimits : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ConnectedPlayers( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_OutgoingDistributionBandwidth( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_OutgoingDistributionConnections( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PerOutgoingDistributionConnectionBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PerOutgoingDistributionConnectionBandwidth( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PlayerBandwidth( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PerPlayerConnectionBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PerPlayerConnectionBandwidth( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerCacheDeliveryRate( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PlayerCacheDeliveryRate( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FECPacketSpan( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_FECPacketSpan( 
            /* [in] */ long Val) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PerPlayerRapidStartBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PerPlayerRapidStartBandwidth( 
            /* [in] */ long Val) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointLimitsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointLimits * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointLimits * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointLimits * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConnectedPlayers )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutgoingDistributionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutgoingDistributionConnections )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerOutgoingDistributionConnectionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerOutgoingDistributionConnectionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PlayerBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerPlayerConnectionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerPlayerConnectionBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerCacheDeliveryRate )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PlayerCacheDeliveryRate )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FECPacketSpan )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FECPacketSpan )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PerPlayerRapidStartBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PerPlayerRapidStartBandwidth )( 
            IWMSPublishingPointLimits * This,
            /* [in] */ long Val);
        
        END_INTERFACE
    } IWMSPublishingPointLimitsVtbl;

    interface IWMSPublishingPointLimits
    {
        CONST_VTBL struct IWMSPublishingPointLimitsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointLimits_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointLimits_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointLimits_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointLimits_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointLimits_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointLimits_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointLimits_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointLimits_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointLimits_put_ConnectedPlayers(This,Val)	\
    ( (This)->lpVtbl -> put_ConnectedPlayers(This,Val) ) 

#define IWMSPublishingPointLimits_get_OutgoingDistributionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_OutgoingDistributionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_OutgoingDistributionBandwidth(This,Val) ) 

#define IWMSPublishingPointLimits_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointLimits_put_OutgoingDistributionConnections(This,Val)	\
    ( (This)->lpVtbl -> put_OutgoingDistributionConnections(This,Val) ) 

#define IWMSPublishingPointLimits_get_PerOutgoingDistributionConnectionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PerOutgoingDistributionConnectionBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PerOutgoingDistributionConnectionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PerOutgoingDistributionConnectionBandwidth(This,Val) ) 

#define IWMSPublishingPointLimits_get_PlayerBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PlayerBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PlayerBandwidth(This,Val) ) 

#define IWMSPublishingPointLimits_get_PerPlayerConnectionBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PerPlayerConnectionBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PerPlayerConnectionBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PerPlayerConnectionBandwidth(This,Val) ) 

#define IWMSPublishingPointLimits_get_PlayerCacheDeliveryRate(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerCacheDeliveryRate(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PlayerCacheDeliveryRate(This,Val)	\
    ( (This)->lpVtbl -> put_PlayerCacheDeliveryRate(This,Val) ) 

#define IWMSPublishingPointLimits_get_FECPacketSpan(This,pVal)	\
    ( (This)->lpVtbl -> get_FECPacketSpan(This,pVal) ) 

#define IWMSPublishingPointLimits_put_FECPacketSpan(This,Val)	\
    ( (This)->lpVtbl -> put_FECPacketSpan(This,Val) ) 

#define IWMSPublishingPointLimits_get_PerPlayerRapidStartBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_PerPlayerRapidStartBandwidth(This,pVal) ) 

#define IWMSPublishingPointLimits_put_PerPlayerRapidStartBandwidth(This,Val)	\
    ( (This)->lpVtbl -> put_PerPlayerRapidStartBandwidth(This,Val) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointLimits_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointTotalCounters_INTERFACE_DEFINED__
#define __IWMSPublishingPointTotalCounters_INTERFACE_DEFINED__

/* interface IWMSPublishingPointTotalCounters */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointTotalCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("240D0C87-309A-4126-BF14-B52A622E95A9")
    IWMSPublishingPointTotalCounters : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LateReads( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionBytesSent( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerBytesSent( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountersStartTime( 
            /* [retval][out] */ __RPC__out DATE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamDenials( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamErrors( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamTerminations( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileBytesRead( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Advertisements( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllCounters( 
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointTotalCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointTotalCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointTotalCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointTotalCounters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointTotalCounters * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointTotalCounters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointTotalCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointTotalCounters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReads )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBytesSent )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBytesSent )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamDenials )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrors )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamTerminations )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileBytesRead )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Advertisements )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSPublishingPointTotalCounters * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSPublishingPointTotalCounters * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        END_INTERFACE
    } IWMSPublishingPointTotalCountersVtbl;

    interface IWMSPublishingPointTotalCounters
    {
        CONST_VTBL struct IWMSPublishingPointTotalCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointTotalCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointTotalCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointTotalCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointTotalCounters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointTotalCounters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointTotalCounters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointTotalCounters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointTotalCounters_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_LateReads(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReads(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_OutgoingDistributionBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBytesSent(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_PlayerBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBytesSent(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_StreamDenials(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamDenials(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_StreamErrors(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrors(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_StreamTerminations(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamTerminations(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_FileBytesRead(This,pVal)	\
    ( (This)->lpVtbl -> get_FileBytesRead(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_get_Advertisements(This,pVal)	\
    ( (This)->lpVtbl -> get_Advertisements(This,pVal) ) 

#define IWMSPublishingPointTotalCounters_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSPublishingPointTotalCounters_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointTotalCounters_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPointTotalCounters2_INTERFACE_DEFINED__
#define __IWMSPublishingPointTotalCounters2_INTERFACE_DEFINED__

/* interface IWMSPublishingPointTotalCounters2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPointTotalCounters2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FDFABB7F-759A-44da-8B62-EA848C595158")
    IWMSPublishingPointTotalCounters2 : public IWMSPublishingPointTotalCounters
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingUDPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingHTTPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingRTSPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointTotalCounters2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPointTotalCounters2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPointTotalCounters2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReads )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBytesSent )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBytesSent )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamDenials )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrors )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamTerminations )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileBytesRead )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Advertisements )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSPublishingPointTotalCounters2 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingUDPPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSPublishingPointTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSPublishingPointTotalCounters2Vtbl;

    interface IWMSPublishingPointTotalCounters2
    {
        CONST_VTBL struct IWMSPublishingPointTotalCounters2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPointTotalCounters2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPointTotalCounters2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPointTotalCounters2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPointTotalCounters2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPointTotalCounters2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPointTotalCounters2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPointTotalCounters2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPointTotalCounters2_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_LateReads(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReads(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_OutgoingDistributionBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBytesSent(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_PlayerBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBytesSent(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamDenials(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamDenials(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamErrors(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrors(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamTerminations(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamTerminations(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_FileBytesRead(This,pVal)	\
    ( (This)->lpVtbl -> get_FileBytesRead(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_Advertisements(This,pVal)	\
    ( (This)->lpVtbl -> get_Advertisements(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSPublishingPointTotalCounters2_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 


#define IWMSPublishingPointTotalCounters2_get_StreamingUDPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingUDPPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSPublishingPointTotalCounters2_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPointTotalCounters2_INTERFACE_DEFINED__ */


#ifndef __IWMSServerTotalCounters_INTERFACE_DEFINED__
#define __IWMSServerTotalCounters_INTERFACE_DEFINED__

/* interface IWMSServerTotalCounters */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerTotalCounters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DAA2A1BB-BC91-438d-BF33-BDE11D2348D5")
    IWMSServerTotalCounters : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConnectedPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LateReads( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionBytesSent( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PlayerBytesSent( 
            /* [retval][out] */ __RPC__out VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountersStartTime( 
            /* [retval][out] */ __RPC__out DATE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamDenials( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamErrors( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamTerminations( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UDPResendRequests( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UDPResendsSent( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LateSends( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Advertisements( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllCounters( 
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerTotalCountersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerTotalCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerTotalCounters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerTotalCounters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerTotalCounters * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerTotalCounters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerTotalCounters * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerTotalCounters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReads )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBytesSent )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBytesSent )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamDenials )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrors )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamTerminations )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendRequests )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendsSent )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateSends )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Advertisements )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSServerTotalCounters * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSServerTotalCounters * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        END_INTERFACE
    } IWMSServerTotalCountersVtbl;

    interface IWMSServerTotalCounters
    {
        CONST_VTBL struct IWMSServerTotalCountersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerTotalCounters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerTotalCounters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerTotalCounters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerTotalCounters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerTotalCounters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerTotalCounters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerTotalCounters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerTotalCounters_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerTotalCounters_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerTotalCounters_get_LateReads(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReads(This,pVal) ) 

#define IWMSServerTotalCounters_get_OutgoingDistributionBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBytesSent(This,pVal) ) 

#define IWMSServerTotalCounters_get_PlayerBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBytesSent(This,pVal) ) 

#define IWMSServerTotalCounters_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSServerTotalCounters_get_StreamDenials(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamDenials(This,pVal) ) 

#define IWMSServerTotalCounters_get_StreamErrors(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrors(This,pVal) ) 

#define IWMSServerTotalCounters_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSServerTotalCounters_get_StreamTerminations(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamTerminations(This,pVal) ) 

#define IWMSServerTotalCounters_get_UDPResendRequests(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendRequests(This,pVal) ) 

#define IWMSServerTotalCounters_get_UDPResendsSent(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendsSent(This,pVal) ) 

#define IWMSServerTotalCounters_get_LateSends(This,pVal)	\
    ( (This)->lpVtbl -> get_LateSends(This,pVal) ) 

#define IWMSServerTotalCounters_get_Advertisements(This,pVal)	\
    ( (This)->lpVtbl -> get_Advertisements(This,pVal) ) 

#define IWMSServerTotalCounters_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSServerTotalCounters_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerTotalCounters_INTERFACE_DEFINED__ */


#ifndef __IWMSServerTotalCounters2_INTERFACE_DEFINED__
#define __IWMSServerTotalCounters2_INTERFACE_DEFINED__

/* interface IWMSServerTotalCounters2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSServerTotalCounters2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3E10C815-C2CF-4d47-BB11-8251244712F2")
    IWMSServerTotalCounters2 : public IWMSServerTotalCounters
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingUDPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingHTTPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamingRTSPPlayers( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSServerTotalCounters2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSServerTotalCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSServerTotalCounters2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSServerTotalCounters2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSServerTotalCounters2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSServerTotalCounters2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSServerTotalCounters2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSServerTotalCounters2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectedPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateReads )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionBytesSent )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PlayerBytesSent )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountersStartTime )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out DATE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamDenials )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamErrors )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamTerminations )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendRequests )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UDPResendsSent )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LateSends )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Advertisements )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IWMSServerTotalCounters2 * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllCounters )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__deref_out_opt SAFEARRAY * *ppsaCounters);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingUDPPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingHTTPPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamingRTSPPlayers )( 
            IWMSServerTotalCounters2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        END_INTERFACE
    } IWMSServerTotalCounters2Vtbl;

    interface IWMSServerTotalCounters2
    {
        CONST_VTBL struct IWMSServerTotalCounters2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSServerTotalCounters2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSServerTotalCounters2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSServerTotalCounters2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSServerTotalCounters2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSServerTotalCounters2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSServerTotalCounters2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSServerTotalCounters2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSServerTotalCounters2_get_ConnectedPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_ConnectedPlayers(This,pVal) ) 

#define IWMSServerTotalCounters2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSServerTotalCounters2_get_LateReads(This,pVal)	\
    ( (This)->lpVtbl -> get_LateReads(This,pVal) ) 

#define IWMSServerTotalCounters2_get_OutgoingDistributionBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionBytesSent(This,pVal) ) 

#define IWMSServerTotalCounters2_get_PlayerBytesSent(This,pVal)	\
    ( (This)->lpVtbl -> get_PlayerBytesSent(This,pVal) ) 

#define IWMSServerTotalCounters2_get_CountersStartTime(This,pVal)	\
    ( (This)->lpVtbl -> get_CountersStartTime(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamDenials(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamDenials(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamErrors(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamErrors(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamingPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingPlayers(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamTerminations(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamTerminations(This,pVal) ) 

#define IWMSServerTotalCounters2_get_UDPResendRequests(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendRequests(This,pVal) ) 

#define IWMSServerTotalCounters2_get_UDPResendsSent(This,pVal)	\
    ( (This)->lpVtbl -> get_UDPResendsSent(This,pVal) ) 

#define IWMSServerTotalCounters2_get_LateSends(This,pVal)	\
    ( (This)->lpVtbl -> get_LateSends(This,pVal) ) 

#define IWMSServerTotalCounters2_get_Advertisements(This,pVal)	\
    ( (This)->lpVtbl -> get_Advertisements(This,pVal) ) 

#define IWMSServerTotalCounters2_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IWMSServerTotalCounters2_get_AllCounters(This,ppsaCounters)	\
    ( (This)->lpVtbl -> get_AllCounters(This,ppsaCounters) ) 


#define IWMSServerTotalCounters2_get_StreamingUDPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingUDPPlayers(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamingHTTPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingHTTPPlayers(This,pVal) ) 

#define IWMSServerTotalCounters2_get_StreamingRTSPPlayers(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamingRTSPPlayers(This,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSServerTotalCounters2_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPoint_INTERFACE_DEFINED__
#define __IWMSPublishingPoint_INTERFACE_DEFINED__

/* interface IWMSPublishingPoint */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("3E52E0EC-72A7-11D2-BF2F-00805FBE84A6") 
enum WMS_PUBLISHING_POINT_TYPE
    {	WMS_PUBLISHING_POINT_TYPE_ON_DEMAND	= 1,
	WMS_PUBLISHING_POINT_TYPE_BROADCAST	= 2,
	WMS_PUBLISHING_POINT_TYPE_CACHE_PROXY_ON_DEMAND	= 3,
	WMS_PUBLISHING_POINT_TYPE_CACHE_PROXY_BROADCAST	= 4
    } 	WMS_PUBLISHING_POINT_TYPE;

typedef /* [uuid][public] */  DECLSPEC_UUID("121E6065-D8D9-498c-BE49-C1864DD315E3") 
enum WMS_PUBLISHING_POINT_INTERNAL_TYPE
    {	WMS_PUBLISHING_POINT_INTERNAL_TYPE_ON_DEMAND	= 11,
	WMS_PUBLISHING_POINT_INTERNAL_TYPE_BROADCAST	= 12,
	WMS_PUBLISHING_POINT_INTERNAL_TYPE_CACHE_PROXY_ON_DEMAND	= 13,
	WMS_PUBLISHING_POINT_INTERNAL_TYPE_CACHE_PROXY_BROADCAST	= 14
    } 	WMS_PUBLISHING_POINT_INTERNAL_TYPE;

typedef /* [uuid][public] */  DECLSPEC_UUID("3E52E0EF-72A7-11D2-BF2F-00805FBE84A6") 
enum WMS_PUBLISHING_POINT_STATUS
    {	WMS_PUBLISHING_POINT_RUNNING	= 0,
	WMS_PUBLISHING_POINT_ERROR	= 0x1,
	WMS_PUBLISHING_POINT_ERROR_CRITICAL	= 0x2
    } 	WMS_PUBLISHING_POINT_STATUS;


EXTERN_C const IID IID_IWMSPublishingPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1881273F-4BEC-11D2-BF25-00805FBE84A6")
    IWMSPublishingPoint : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowClientsToConnect( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowClientsToConnect( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EventHandlers( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Limits( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileDescriptions( 
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MonikerName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ __RPC__in BSTR newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutgoingDistributionConnections( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Path( 
            /* [in] */ __RPC__in BSTR newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PeakCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Players( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TotalCounters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WrapperPath( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WrapperPath( 
            /* [in] */ __RPC__in BSTR newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Authenticators( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableWrapperPath( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableWrapperPath( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StreamFilters( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DistributionUserName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetDistributionUserNamePassword( 
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CacheProxyExpiration( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CacheProxyExpiration( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsDistributionPasswordSet( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowPlayerSideDiskCaching( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowPlayerSideDiskCaching( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableFEC( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableFEC( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPoint * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSPublishingPoint * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSPublishingPoint * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSPublishingPoint * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IWMSPublishingPointVtbl;

    interface IWMSPublishingPoint
    {
        CONST_VTBL struct IWMSPublishingPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPoint_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSPublishingPoint_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSPublishingPoint_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSPublishingPoint_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSPublishingPoint_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSPublishingPoint_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSPublishingPoint_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSPublishingPoint_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSPublishingPoint_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSPublishingPoint_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSPublishingPoint_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPoint_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSPublishingPoint_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSPublishingPoint_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSPublishingPoint_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSPublishingPoint_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSPublishingPoint_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSPublishingPoint_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSPublishingPoint_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSPublishingPoint_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSPublishingPoint_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSPublishingPoint_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSPublishingPoint_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSPublishingPoint_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSPublishingPoint_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSPublishingPoint_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSPublishingPoint_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSPublishingPoint_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSPublishingPoint_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSPublishingPoint_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSPublishingPoint_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSPublishingPoint_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSPublishingPoint_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSPublishingPoint_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPoint_INTERFACE_DEFINED__ */


#ifndef __IWMSPublishingPoint2_INTERFACE_DEFINED__
#define __IWMSPublishingPoint2_INTERFACE_DEFINED__

/* interface IWMSPublishingPoint2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSPublishingPoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("770e846b-de39-4d72-a29f-1b631ca660b4")
    IWMSPublishingPoint2 : public IWMSPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowStartupProfile( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowStartupProfile( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSPublishingPoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSPublishingPoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSPublishingPoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSPublishingPoint2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSPublishingPoint2 * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSPublishingPoint2 * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowStartupProfile )( 
            IWMSPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowStartupProfile )( 
            IWMSPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IWMSPublishingPoint2Vtbl;

    interface IWMSPublishingPoint2
    {
        CONST_VTBL struct IWMSPublishingPoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSPublishingPoint2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSPublishingPoint2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSPublishingPoint2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSPublishingPoint2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSPublishingPoint2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSPublishingPoint2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSPublishingPoint2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSPublishingPoint2_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSPublishingPoint2_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSPublishingPoint2_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSPublishingPoint2_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSPublishingPoint2_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSPublishingPoint2_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSPublishingPoint2_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSPublishingPoint2_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSPublishingPoint2_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSPublishingPoint2_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSPublishingPoint2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSPublishingPoint2_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSPublishingPoint2_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSPublishingPoint2_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSPublishingPoint2_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSPublishingPoint2_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSPublishingPoint2_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSPublishingPoint2_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSPublishingPoint2_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSPublishingPoint2_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSPublishingPoint2_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSPublishingPoint2_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSPublishingPoint2_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSPublishingPoint2_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSPublishingPoint2_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSPublishingPoint2_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSPublishingPoint2_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSPublishingPoint2_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSPublishingPoint2_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSPublishingPoint2_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSPublishingPoint2_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSPublishingPoint2_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSPublishingPoint2_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSPublishingPoint2_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSPublishingPoint2_get_AllowStartupProfile(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowStartupProfile(This,pVal) ) 

#define IWMSPublishingPoint2_put_AllowStartupProfile(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowStartupProfile(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSPublishingPoint2_INTERFACE_DEFINED__ */


#ifndef __IWMSOnDemandPublishingPoint_INTERFACE_DEFINED__
#define __IWMSOnDemandPublishingPoint_INTERFACE_DEFINED__

/* interface IWMSOnDemandPublishingPoint */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSOnDemandPublishingPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6ca388b3-eaee-492f-a8d6-8758efc72d76")
    IWMSOnDemandPublishingPoint : public IWMSPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowContentCaching( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowContentCaching( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ExportXML( 
            /* [in] */ __RPC__in BSTR bstrXMLFileName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableClientWildcardDirectoryAccess( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableClientWildcardDirectoryAccess( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableDownload( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableDownload( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DownloadBandwidth( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DownloadBandwidth( 
            /* [in] */ long newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSOnDemandPublishingPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSOnDemandPublishingPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSOnDemandPublishingPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSOnDemandPublishingPoint * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSOnDemandPublishingPoint * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSOnDemandPublishingPoint * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowContentCaching )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowContentCaching )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportXML )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ __RPC__in BSTR bstrXMLFileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableClientWildcardDirectoryAccess )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableClientWildcardDirectoryAccess )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableDownload )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableDownload )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadBandwidth )( 
            IWMSOnDemandPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DownloadBandwidth )( 
            IWMSOnDemandPublishingPoint * This,
            /* [in] */ long newVal);
        
        END_INTERFACE
    } IWMSOnDemandPublishingPointVtbl;

    interface IWMSOnDemandPublishingPoint
    {
        CONST_VTBL struct IWMSOnDemandPublishingPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSOnDemandPublishingPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSOnDemandPublishingPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSOnDemandPublishingPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSOnDemandPublishingPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSOnDemandPublishingPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSOnDemandPublishingPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSOnDemandPublishingPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSOnDemandPublishingPoint_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSOnDemandPublishingPoint_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSOnDemandPublishingPoint_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSOnDemandPublishingPoint_get_AllowContentCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowContentCaching(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_AllowContentCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowContentCaching(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_ExportXML(This,bstrXMLFileName)	\
    ( (This)->lpVtbl -> ExportXML(This,bstrXMLFileName) ) 

#define IWMSOnDemandPublishingPoint_get_EnableClientWildcardDirectoryAccess(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableClientWildcardDirectoryAccess(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_EnableClientWildcardDirectoryAccess(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableClientWildcardDirectoryAccess(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_EnableDownload(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableDownload(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_EnableDownload(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableDownload(This,newVal) ) 

#define IWMSOnDemandPublishingPoint_get_DownloadBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_DownloadBandwidth(This,pVal) ) 

#define IWMSOnDemandPublishingPoint_put_DownloadBandwidth(This,newVal)	\
    ( (This)->lpVtbl -> put_DownloadBandwidth(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSOnDemandPublishingPoint_INTERFACE_DEFINED__ */


#ifndef __IWMSOnDemandPublishingPoint2_INTERFACE_DEFINED__
#define __IWMSOnDemandPublishingPoint2_INTERFACE_DEFINED__

/* interface IWMSOnDemandPublishingPoint2 */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSOnDemandPublishingPoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3abbf960-54e5-40be-8677-c1758b1239eb")
    IWMSOnDemandPublishingPoint2 : public IWMSOnDemandPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowStartupProfile( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowStartupProfile( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSOnDemandPublishingPoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSOnDemandPublishingPoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSOnDemandPublishingPoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowContentCaching )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowContentCaching )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportXML )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ __RPC__in BSTR bstrXMLFileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableClientWildcardDirectoryAccess )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableClientWildcardDirectoryAccess )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableDownload )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableDownload )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadBandwidth )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DownloadBandwidth )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowStartupProfile )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowStartupProfile )( 
            IWMSOnDemandPublishingPoint2 * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        END_INTERFACE
    } IWMSOnDemandPublishingPoint2Vtbl;

    interface IWMSOnDemandPublishingPoint2
    {
        CONST_VTBL struct IWMSOnDemandPublishingPoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSOnDemandPublishingPoint2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSOnDemandPublishingPoint2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSOnDemandPublishingPoint2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSOnDemandPublishingPoint2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSOnDemandPublishingPoint2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSOnDemandPublishingPoint2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSOnDemandPublishingPoint2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSOnDemandPublishingPoint2_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSOnDemandPublishingPoint2_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSOnDemandPublishingPoint2_get_AllowContentCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowContentCaching(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_AllowContentCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowContentCaching(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_ExportXML(This,bstrXMLFileName)	\
    ( (This)->lpVtbl -> ExportXML(This,bstrXMLFileName) ) 

#define IWMSOnDemandPublishingPoint2_get_EnableClientWildcardDirectoryAccess(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableClientWildcardDirectoryAccess(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_EnableClientWildcardDirectoryAccess(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableClientWildcardDirectoryAccess(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_EnableDownload(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableDownload(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_EnableDownload(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableDownload(This,newVal) ) 

#define IWMSOnDemandPublishingPoint2_get_DownloadBandwidth(This,pVal)	\
    ( (This)->lpVtbl -> get_DownloadBandwidth(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_DownloadBandwidth(This,newVal)	\
    ( (This)->lpVtbl -> put_DownloadBandwidth(This,newVal) ) 


#define IWMSOnDemandPublishingPoint2_get_AllowStartupProfile(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowStartupProfile(This,pVal) ) 

#define IWMSOnDemandPublishingPoint2_put_AllowStartupProfile(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowStartupProfile(This,newVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSOnDemandPublishingPoint2_INTERFACE_DEFINED__ */


#ifndef __IWMSAnnouncementStreamFormats_INTERFACE_DEFINED__
#define __IWMSAnnouncementStreamFormats_INTERFACE_DEFINED__

/* interface IWMSAnnouncementStreamFormats */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IWMSAnnouncementStreamFormats;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("55DDB8E9-05A3-4666-9E20-550F94581B06")
    IWMSAnnouncementStreamFormats : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT varStreamFormat) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSAnnouncementStreamFormatsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSAnnouncementStreamFormats * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSAnnouncementStreamFormats * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSAnnouncementStreamFormats * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ const VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IWMSAnnouncementStreamFormats * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_length )( 
            IWMSAnnouncementStreamFormats * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            IWMSAnnouncementStreamFormats * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ VARIANT varStreamFormat);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            IWMSAnnouncementStreamFormats * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IWMSAnnouncementStreamFormats * This);
        
        END_INTERFACE
    } IWMSAnnouncementStreamFormatsVtbl;

    interface IWMSAnnouncementStreamFormats
    {
        CONST_VTBL struct IWMSAnnouncementStreamFormatsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSAnnouncementStreamFormats_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSAnnouncementStreamFormats_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSAnnouncementStreamFormats_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSAnnouncementStreamFormats_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSAnnouncementStreamFormats_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSAnnouncementStreamFormats_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSAnnouncementStreamFormats_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSAnnouncementStreamFormats_get_Item(This,varIndex,pVal)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pVal) ) 

#define IWMSAnnouncementStreamFormats_get_Count(This,pVal)	\
    ( (This)->lpVtbl -> get_Count(This,pVal) ) 

#define IWMSAnnouncementStreamFormats_get_length(This,pVal)	\
    ( (This)->lpVtbl -> get_length(This,pVal) ) 

#define IWMSAnnouncementStreamFormats_get__NewEnum(This,pVal)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pVal) ) 

#define IWMSAnnouncementStreamFormats_Add(This,varStreamFormat)	\
    ( (This)->lpVtbl -> Add(This,varStreamFormat) ) 

#define IWMSAnnouncementStreamFormats_Remove(This,varIndex)	\
    ( (This)->lpVtbl -> Remove(This,varIndex) ) 

#define IWMSAnnouncementStreamFormats_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWMSAnnouncementStreamFormats_INTERFACE_DEFINED__ */


#ifndef __IWMSBroadcastPublishingPoint_INTERFACE_DEFINED__
#define __IWMSBroadcastPublishingPoint_INTERFACE_DEFINED__

/* interface IWMSBroadcastPublishingPoint */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 

typedef /* [uuid][public] */  DECLSPEC_UUID("3E52E0ED-72A7-11D2-BF2F-00805FBE84A6") 
enum WMS_BROADCAST_PUBLISHING_POINT_STATUS
    {	WMS_BROADCAST_PUBLISHING_POINT_STOPPED	= 0,
	WMS_BROADCAST_PUBLISHING_POINT_STARTED_WITHOUT_DATA	= 0x1,
	WMS_BROADCAST_PUBLISHING_POINT_STARTED	= 0x2,
	WMS_BROADCAST_PUBLISHING_POINT_ARCHIVING	= 0x4,
	WMS_BROADCAST_PUBLISHING_POINT_CHANGE_IN_PROGRESS	= 0x8
    } 	WMS_BROADCAST_PUBLISHING_POINT_STATUS;

typedef /* [uuid][public] */  DECLSPEC_UUID("62D6D99D-EB48-4e9e-97DB-C2C09EAADAD4") 
enum WMS_BUFFER_SETTING
    {	WMS_BUFFER_SETTING_UNSPECIFIED	= 0,
	WMS_BUFFER_SETTING_MINIMIZE_STARTUP_LATENCY	= 0x1,
	WMS_BUFFER_SETTING_MINIMIZE_PROPAGATION_LATENCY	= 0x2,
	WMS_NUM_BUFFER_SETTING	= 0x3
    } 	WMS_BUFFER_SETTING;


EXTERN_C const IID IID_IWMSBroadcastPublishingPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6ca388b4-eaee-492f-a8d6-8758efc72d76")
    IWMSBroadcastPublishingPoint : public IWMSPublishingPoint
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowStreamSplitting( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowStreamSplitting( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowClientToStartAndStop( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowClientToStartAndStop( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BroadcastDataSinks( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SharedPlaylist( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StartWithoutData( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StartArchive( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BroadcastStatus( 
            /* [retval][out] */ __RPC__out WMS_BROADCAST_PUBLISHING_POINT_STATUS *pVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE StopArchive( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ExportXML( 
            /* [in] */ __RPC__in BSTR bstrXMLFileName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UpTime( 
            /* [retval][out] */ __RPC__out long *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AnnouncementStreamFormats( 
            /* [retval][out] */ __RPC__deref_out_opt IWMSAnnouncementStreamFormats **ppFileNames) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Announce( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AnnounceToNSCFile( 
            /* [in] */ __RPC__in BSTR bstrDestinationFileName,
            /* [defaultvalue][in] */ VARIANT_BOOL fOverwriteFlag = FALSE) = 0;
        
        virtual /* [helpstring][id][restricted] */ HRESULT STDMETHODCALLTYPE AnnounceToNSCStream( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppNSCAnnounceStream) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BufferSetting( 
            /* [retval][out] */ __RPC__out WMS_BUFFER_SETTING *pVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_BufferSetting( 
            /* [in] */ WMS_BUFFER_SETTING newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWMSBroadcastPublishingPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWMSBroadcastPublishingPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWMSBroadcastPublishingPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IWMSBroadcastPublishingPoint * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientsToConnect )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientsToConnect )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentCounters )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointCurrentCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventHandlers )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Limits )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointLimits **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescriptions )( 
            IWMSBroadcastPublishingPoint * This,
            /* [defaultvalue][in] */ __RPC__in BSTR RelativePath,
            /* [retval][out] */ __RPC__deref_out_opt IWMSFileDescriptions **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MonikerName )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutgoingDistributionConnections )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSOutgoingDistributionConnections **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Path )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PeakCounters )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointPeakCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Players )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlayers **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSNamedValues **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalCounters )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPublishingPointTotalCounters **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_TYPE *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WrapperPath )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WrapperPath )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticators )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableWrapperPath )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableWrapperPath )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamFilters )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DistributionUserName )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetDistributionUserNamePassword )( 
            IWMSBroadcastPublishingPoint * This,
            /* [string][in] */ __RPC__in wchar_t *newUserName,
            /* [string][in] */ __RPC__in wchar_t *newUserPassword);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CacheProxyExpiration )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CacheProxyExpiration )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ long newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDistributionPasswordSet )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPlayerSideDiskCaching )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPlayerSideDiskCaching )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFEC )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFEC )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowStreamSplitting )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowStreamSplitting )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClientToStartAndStop )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClientToStartAndStop )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BroadcastDataSinks )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlugins **pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SharedPlaylist )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSPlaylist **pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StartWithoutData )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StartArchive )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BroadcastStatus )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_BROADCAST_PUBLISHING_POINT_STATUS *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *StopArchive )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ExportXML )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR bstrXMLFileName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpTime )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out long *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AnnouncementStreamFormats )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IWMSAnnouncementStreamFormats **ppFileNames);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Announce )( 
            IWMSBroadcastPublishingPoint * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AnnounceToNSCFile )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ __RPC__in BSTR bstrDestinationFileName,
            /* [defaultvalue][in] */ VARIANT_BOOL fOverwriteFlag);
        
        /* [helpstring][id][restricted] */ HRESULT ( STDMETHODCALLTYPE *AnnounceToNSCStream )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppNSCAnnounceStream);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BufferSetting )( 
            IWMSBroadcastPublishingPoint * This,
            /* [retval][out] */ __RPC__out WMS_BUFFER_SETTING *pVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BufferSetting )( 
            IWMSBroadcastPublishingPoint * This,
            /* [in] */ WMS_BUFFER_SETTING newVal);
        
        END_INTERFACE
    } IWMSBroadcastPublishingPointVtbl;

    interface IWMSBroadcastPublishingPoint
    {
        CONST_VTBL struct IWMSBroadcastPublishingPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWMSBroadcastPublishingPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWMSBroadcastPublishingPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWMSBroadcastPublishingPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWMSBroadcastPublishingPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IWMSBroadcastPublishingPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IWMSBroadcastPublishingPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IWMSBroadcastPublishingPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IWMSBroadcastPublishingPoint_get_AllowClientsToConnect(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientsToConnect(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_AllowClientsToConnect(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowClientsToConnect(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_CurrentCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_CurrentCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_EventHandlers(This,pVal)	\
    ( (This)->lpVtbl -> get_EventHandlers(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_ID(This,pVal)	\
    ( (This)->lpVtbl -> get_ID(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Limits(This,pVal)	\
    ( (This)->lpVtbl -> get_Limits(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_FileDescriptions(This,RelativePath,pVal)	\
    ( (This)->lpVtbl -> get_FileDescriptions(This,RelativePath,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_MonikerName(This,pbstrVal)	\
    ( (This)->lpVtbl -> get_MonikerName(This,pbstrVal) ) 

#define IWMSBroadcastPublishingPoint_get_Name(This,pVal)	\
    ( (This)->lpVtbl -> get_Name(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_Name(This,newVal)	\
    ( (This)->lpVtbl -> put_Name(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_OutgoingDistributionConnections(This,pVal)	\
    ( (This)->lpVtbl -> get_OutgoingDistributionConnections(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Path(This,pVal)	\
    ( (This)->lpVtbl -> get_Path(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_Path(This,newVal)	\
    ( (This)->lpVtbl -> put_Path(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_PeakCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_PeakCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Players(This,pVal)	\
    ( (This)->lpVtbl -> get_Players(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Properties(This,pVal)	\
    ( (This)->lpVtbl -> get_Properties(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_TotalCounters(This,pVal)	\
    ( (This)->lpVtbl -> get_TotalCounters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Type(This,pVal)	\
    ( (This)->lpVtbl -> get_Type(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_WrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_WrapperPath(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_WrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_WrapperPath(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_Authenticators(This,pVal)	\
    ( (This)->lpVtbl -> get_Authenticators(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_Status(This,pVal)	\
    ( (This)->lpVtbl -> get_Status(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_EnableWrapperPath(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableWrapperPath(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_EnableWrapperPath(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableWrapperPath(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_StreamFilters(This,pVal)	\
    ( (This)->lpVtbl -> get_StreamFilters(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_DistributionUserName(This,pVal)	\
    ( (This)->lpVtbl -> get_DistributionUserName(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_SetDistributionUserNamePassword(This,newUserName,newUserPassword)	\
    ( (This)->lpVtbl -> SetDistributionUserNamePassword(This,newUserName,newUserPassword) ) 

#define IWMSBroadcastPublishingPoint_get_CacheProxyExpiration(This,pVal)	\
    ( (This)->lpVtbl -> get_CacheProxyExpiration(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_CacheProxyExpiration(This,newVal)	\
    ( (This)->lpVtbl -> put_CacheProxyExpiration(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_IsDistributionPasswordSet(This,pVal)	\
    ( (This)->lpVtbl -> get_IsDistributionPasswordSet(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_get_AllowPlayerSideDiskCaching(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowPlayerSideDiskCaching(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_AllowPlayerSideDiskCaching(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowPlayerSideDiskCaching(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_EnableFEC(This,pVal)	\
    ( (This)->lpVtbl -> get_EnableFEC(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_EnableFEC(This,newVal)	\
    ( (This)->lpVtbl -> put_EnableFEC(This,newVal) ) 


#define IWMSBroadcastPublishingPoint_get_AllowStreamSplitting(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowStreamSplitting(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_AllowStreamSplitting(This,newVal)	\
    ( (This)->lpVtbl -> put_AllowStreamSplitting(This,newVal) ) 

#define IWMSBroadcastPublishingPoint_get_AllowClientToStartAndStop(This,pVal)	\
    ( (This)->lpVtbl -> get_AllowClientToStartAndStop(This,pVal) ) 

#define IWMSBroadcastPublishingPoint_put_AllowClientToStartAndStop(This,newVal)	\
    ( (This)->lp